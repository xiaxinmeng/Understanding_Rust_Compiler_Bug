{"sha": "cd119057160cedea245aa2679add56723f3dc784", "node_id": "C_kwDOAAsO6NoAKGNkMTE5MDU3MTYwY2VkZWEyNDVhYTI2NzlhZGQ1NjcyM2YzZGM3ODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-18T00:35:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-18T00:35:19Z"}, "message": "Auto merge of #95056 - Dylan-DPC:rollup-swtuw2n, r=Dylan-DPC\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #91133 (Improve `unsafe` diagnostic)\n - #93222 (Make ErrorReported impossible to construct outside `rustc_errors`)\n - #93745 (Stabilize ADX target feature)\n - #94309 ([generator_interior] Be more precise with scopes of borrowed places)\n - #94698 (Remove redundant code from copy-suggestions)\n - #94731 (Suggest adding `{ .. }` around a const function call with arguments)\n - #94960 (Fix many spelling mistakes)\n - #94982 (Add deprecated_safe feature gate and attribute, cc #94978)\n - #94997 (debuginfo: Fix ICE when generating name for type that produces a layout error.)\n - #95000 (Fixed wrong type name in comment)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "21335c52669bb2665024cf37adf8d892925d9d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21335c52669bb2665024cf37adf8d892925d9d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd119057160cedea245aa2679add56723f3dc784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd119057160cedea245aa2679add56723f3dc784", "html_url": "https://github.com/rust-lang/rust/commit/cd119057160cedea245aa2679add56723f3dc784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd119057160cedea245aa2679add56723f3dc784/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ca56d2b7bbe275bc6c9f3cd698c6e0719a07182", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca56d2b7bbe275bc6c9f3cd698c6e0719a07182", "html_url": "https://github.com/rust-lang/rust/commit/4ca56d2b7bbe275bc6c9f3cd698c6e0719a07182"}, {"sha": "4493826d07bf38cca058b4d9e75bce14ceeeaab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4493826d07bf38cca058b4d9e75bce14ceeeaab9", "html_url": "https://github.com/rust-lang/rust/commit/4493826d07bf38cca058b4d9e75bce14ceeeaab9"}], "stats": {"total": 2063, "additions": 1290, "deletions": 773}, "files": [{"sha": "1784e4a6c63a8cb0d9e2ff3731e96af2bf259f9b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -26,7 +26,7 @@ pub(super) struct ItemLowerer<'a, 'lowering, 'hir> {\n }\n \n /// When we have a ty alias we *may* have two where clauses. To give the best diagnostics, we set the span\n-/// to the where clause that is prefered, if it exists. Otherwise, it sets the span to the other where\n+/// to the where clause that is preferred, if it exists. Otherwise, it sets the span to the other where\n /// clause if it exists.\n fn add_ty_alias_where_clause(\n     generics: &mut ast::Generics,"}, {"sha": "abf1bc739a3f78243df4b75c9bbf6aaa16bda4bc", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -952,7 +952,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 sess.diagnostic().delay_span_bug(\n                                     span,\n                                     \"unexpected delimiter in key-value attribute's value\",\n-                                )\n+                                );\n                             }\n                             unwrap_single_token(sess, tokens, span)\n                         }"}, {"sha": "f5e6b15fcbfd115784f682984af8a2f4ab291144", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -440,7 +440,7 @@ impl<'a> AstValidator<'a> {\n                         attr.span,\n                         \"allow, cfg, cfg_attr, deny, \\\n                 forbid, and warn are the only allowed built-in attributes in function parameters\",\n-                    )\n+                    );\n                 }\n             });\n     }"}, {"sha": "5b6147c72230d53b943586280b3a6d457d103886", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -252,11 +252,12 @@ impl<'a> PostExpansionVisitor<'a> {\n                     \"wasm ABI is experimental and subject to change\"\n                 );\n             }\n-            abi => self\n-                .sess\n-                .parse_sess\n-                .span_diagnostic\n-                .delay_span_bug(span, &format!(\"unrecognized ABI not caught in lowering: {}\", abi)),\n+            abi => {\n+                self.sess.parse_sess.span_diagnostic.delay_span_bug(\n+                    span,\n+                    &format!(\"unrecognized ABI not caught in lowering: {}\", abi),\n+                );\n+            }\n         }\n     }\n "}, {"sha": "66a23eb4125d559e96b94492f684982214d10969", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 55, "deletions": 80, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -12,9 +12,7 @@ use rustc_middle::mir::{\n     FakeReadCause, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n-use rustc_middle::ty::{\n-    self, suggest_constraining_type_param, suggest_constraining_type_params, PredicateKind, Ty,\n-};\n+use rustc_middle::ty::{self, suggest_constraining_type_params, PredicateKind, Ty};\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, MultiSpan, Span};\n@@ -285,86 +283,63 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     Some(ref name) => format!(\"`{}`\", name),\n                     None => \"value\".to_owned(),\n                 };\n-                if let ty::Param(param_ty) = ty.kind() {\n-                    let tcx = self.infcx.tcx;\n-                    let generics = tcx.generics_of(self.mir_def_id());\n-                    let param = generics.type_param(&param_ty, tcx);\n-                    if let Some(generics) = tcx\n-                        .typeck_root_def_id(self.mir_def_id().to_def_id())\n-                        .as_local()\n-                        .and_then(|def_id| tcx.hir().get_generics(def_id))\n-                    {\n-                        suggest_constraining_type_param(\n-                            tcx,\n-                            generics,\n-                            &mut err,\n-                            param.name.as_str(),\n-                            \"Copy\",\n-                            None,\n+\n+                // Try to find predicates on *generic params* that would allow copying `ty`\n+                let tcx = self.infcx.tcx;\n+                let generics = tcx.generics_of(self.mir_def_id());\n+                if let Some(hir_generics) = tcx\n+                    .typeck_root_def_id(self.mir_def_id().to_def_id())\n+                    .as_local()\n+                    .and_then(|def_id| tcx.hir().get_generics(def_id))\n+                {\n+                    let predicates: Result<Vec<_>, _> = tcx.infer_ctxt().enter(|infcx| {\n+                        let mut fulfill_cx =\n+                            <dyn rustc_infer::traits::TraitEngine<'_>>::new(infcx.tcx);\n+\n+                        let copy_did = infcx.tcx.lang_items().copy_trait().unwrap();\n+                        let cause = ObligationCause::new(\n+                            span,\n+                            self.mir_hir_id(),\n+                            rustc_infer::traits::ObligationCauseCode::MiscObligation,\n                         );\n-                    }\n-                } else {\n-                    // Try to find predicates on *generic params* that would allow copying `ty`\n-\n-                    let tcx = self.infcx.tcx;\n-                    let generics = tcx.generics_of(self.mir_def_id());\n-                    if let Some(hir_generics) = tcx\n-                        .typeck_root_def_id(self.mir_def_id().to_def_id())\n-                        .as_local()\n-                        .and_then(|def_id| tcx.hir().get_generics(def_id))\n-                    {\n-                        let predicates: Result<Vec<_>, _> = tcx.infer_ctxt().enter(|infcx| {\n-                            let mut fulfill_cx =\n-                                <dyn rustc_infer::traits::TraitEngine<'_>>::new(infcx.tcx);\n-\n-                            let copy_did = infcx.tcx.lang_items().copy_trait().unwrap();\n-                            let cause = ObligationCause::new(\n-                                span,\n-                                self.mir_hir_id(),\n-                                rustc_infer::traits::ObligationCauseCode::MiscObligation,\n-                            );\n-                            fulfill_cx.register_bound(\n-                                &infcx,\n-                                self.param_env,\n-                                // Erase any region vids from the type, which may not be resolved\n-                                infcx.tcx.erase_regions(ty),\n-                                copy_did,\n-                                cause,\n-                            );\n-                            // Select all, including ambiguous predicates\n-                            let errors = fulfill_cx.select_all_or_error(&infcx);\n-\n-                            // Only emit suggestion if all required predicates are on generic\n-                            errors\n-                                .into_iter()\n-                                .map(|err| match err.obligation.predicate.kind().skip_binder() {\n-                                    PredicateKind::Trait(predicate) => {\n-                                        match predicate.self_ty().kind() {\n-                                            ty::Param(param_ty) => Ok((\n-                                                generics.type_param(param_ty, tcx),\n-                                                predicate\n-                                                    .trait_ref\n-                                                    .print_only_trait_path()\n-                                                    .to_string(),\n-                                            )),\n-                                            _ => Err(()),\n-                                        }\n+                        fulfill_cx.register_bound(\n+                            &infcx,\n+                            self.param_env,\n+                            // Erase any region vids from the type, which may not be resolved\n+                            infcx.tcx.erase_regions(ty),\n+                            copy_did,\n+                            cause,\n+                        );\n+                        // Select all, including ambiguous predicates\n+                        let errors = fulfill_cx.select_all_or_error(&infcx);\n+\n+                        // Only emit suggestion if all required predicates are on generic\n+                        errors\n+                            .into_iter()\n+                            .map(|err| match err.obligation.predicate.kind().skip_binder() {\n+                                PredicateKind::Trait(predicate) => {\n+                                    match predicate.self_ty().kind() {\n+                                        ty::Param(param_ty) => Ok((\n+                                            generics.type_param(param_ty, tcx),\n+                                            predicate.trait_ref.print_only_trait_path().to_string(),\n+                                        )),\n+                                        _ => Err(()),\n                                     }\n-                                    _ => Err(()),\n-                                })\n-                                .collect()\n-                        });\n+                                }\n+                                _ => Err(()),\n+                            })\n+                            .collect()\n+                    });\n \n-                        if let Ok(predicates) = predicates {\n-                            suggest_constraining_type_params(\n-                                tcx,\n-                                hir_generics,\n-                                &mut err,\n-                                predicates.iter().map(|(param, constraint)| {\n-                                    (param.name.as_str(), &**constraint, None)\n-                                }),\n-                            );\n-                        }\n+                    if let Ok(predicates) = predicates {\n+                        suggest_constraining_type_params(\n+                            tcx,\n+                            hir_generics,\n+                            &mut err,\n+                            predicates.iter().map(|(param, constraint)| {\n+                                (param.name.as_str(), &**constraint, None)\n+                            }),\n+                        );\n                     }\n                 }\n "}, {"sha": "c9c973bd34350267fb0520a326cef38eec911b74", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -178,7 +178,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     // Gather the upvars of a closure, if any.\n     let tables = tcx.typeck_opt_const_arg(def);\n-    if let Some(ErrorGuaranteed) = tables.tainted_by_errors {\n+    if let Some(ErrorGuaranteed { .. }) = tables.tainted_by_errors {\n         infcx.set_tainted_by_errors();\n         errors.set_tainted_by_errors();\n     }\n@@ -2274,6 +2274,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n }\n \n mod error {\n+    use rustc_errors::ErrorGuaranteed;\n+\n     use super::*;\n \n     pub struct BorrowckErrors<'tcx> {\n@@ -2311,7 +2313,7 @@ mod error {\n         // FIXME(eddyb) this is a suboptimal API because `tainted_by_errors` is\n         // set before any emission actually happens (weakening the guarantee).\n         pub fn buffer_error(&mut self, t: DiagnosticBuilder<'_, ErrorGuaranteed>) {\n-            self.tainted_by_errors = Some(ErrorGuaranteed {});\n+            self.tainted_by_errors = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n             t.buffer(&mut self.buffered);\n         }\n \n@@ -2320,7 +2322,7 @@ mod error {\n         }\n \n         pub fn set_tainted_by_errors(&mut self) {\n-            self.tainted_by_errors = Some(ErrorGuaranteed {});\n+            self.tainted_by_errors = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n         }\n     }\n "}, {"sha": "4657791345b8eb22d3f0d1c304d829ca2132c2ff", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1,7 +1,6 @@\n //! Handling of `static`s, `const`s and promoted allocations\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::ErrorGuaranteed;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n@@ -54,7 +53,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n                 {\n                     all_constants_ok = false;\n                     match err {\n-                        ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n+                        ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n                             fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n                         }\n                         ErrorHandled::TooGeneric => {"}, {"sha": "ffc8f55bc0cb37a628b51874fc453f9ccb51e062", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -74,9 +74,30 @@ fn push_debuginfo_type_name<'tcx>(\n         ty::Float(float_ty) => output.push_str(float_ty.name_str()),\n         ty::Foreign(def_id) => push_item_name(tcx, def_id, qualified, output),\n         ty::Adt(def, substs) => {\n-            let ty_and_layout = tcx.layout_of(ParamEnv::reveal_all().and(t)).expect(\"layout error\");\n+            // `layout_for_cpp_like_fallback` will be `Some` if we want to use the fallback encoding.\n+            let layout_for_cpp_like_fallback = if cpp_like_debuginfo && def.is_enum() {\n+                match tcx.layout_of(ParamEnv::reveal_all().and(t)) {\n+                    Ok(layout) => {\n+                        if !wants_c_like_enum_debuginfo(layout) {\n+                            Some(layout)\n+                        } else {\n+                            // This is a C-like enum so we don't want to use the fallback encoding\n+                            // for the name.\n+                            None\n+                        }\n+                    }\n+                    Err(e) => {\n+                        // Computing the layout can still fail here, e.g. if the target architecture\n+                        // cannot represent the type. See https://github.com/rust-lang/rust/issues/94961.\n+                        tcx.sess.fatal(&format!(\"{}\", e));\n+                    }\n+                }\n+            } else {\n+                // We are not emitting cpp-like debuginfo or this isn't even an enum.\n+                None\n+            };\n \n-            if def.is_enum() && cpp_like_debuginfo && !wants_c_like_enum_debuginfo(ty_and_layout) {\n+            if let Some(ty_and_layout) = layout_for_cpp_like_fallback {\n                 msvc_enum_fallback(\n                     tcx,\n                     ty_and_layout,"}, {"sha": "6c139df0a8555c35109549a12a7305bad2bccc6a", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1,5 +1,4 @@\n use crate::traits::*;\n-use rustc_errors::ErrorGuaranteed;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, TyAndLayout};\n@@ -191,7 +190,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             all_consts_ok = false;\n             match err {\n                 // errored or at least linted\n-                ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {}\n+                ErrorHandled::Reported(_) | ErrorHandled::Linted => {}\n                 ErrorHandled::TooGeneric => {\n                     span_bug!(const_.span, \"codgen encountered polymorphic constant: {:?}\", err)\n                 }"}, {"sha": "dd214d96166890ee85d8f0f0568a5ebd2b5afb04", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -148,7 +148,7 @@ const AARCH64_TIED_FEATURES: &[&[&str]] = &[\n ];\n \n const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"adx\", Some(sym::adx_target_feature)),\n+    (\"adx\", None),\n     (\"aes\", None),\n     (\"avx\", None),\n     (\"avx2\", None),"}, {"sha": "2b58c1e8233c1bb6bf35384c5a459347af4f38ca", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1,4 +1,3 @@\n-use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n@@ -247,11 +246,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 if ecx.tcx.is_ctfe_mir_available(def.did) {\n                     Ok(ecx.tcx.mir_for_ctfe_opt_const_arg(def))\n                 } else if ecx.tcx.def_kind(def.did) == DefKind::AssocConst {\n-                    ecx.tcx.sess.delay_span_bug(\n+                    let guar = ecx.tcx.sess.delay_span_bug(\n                         rustc_span::DUMMY_SP,\n                         \"This is likely a const item that is missing from its impl\",\n                     );\n-                    throw_inval!(AlreadyReported(ErrorGuaranteed {}));\n+                    throw_inval!(AlreadyReported(guar));\n                 } else {\n                     let path = ecx.tcx.def_path_str(def.did);\n                     Err(ConstEvalErrKind::NeedsRfc(format!(\"calling extern function `{}`\", path))"}, {"sha": "43ab74f4b888a21794f055bb3442d20eab46dff7", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -406,8 +406,11 @@ pub fn intern_const_alloc_recursive<\n         } else if ecx.memory.dead_alloc_map.contains_key(&alloc_id) {\n             // Codegen does not like dangling pointers, and generally `tcx` assumes that\n             // all allocations referenced anywhere actually exist. So, make sure we error here.\n-            ecx.tcx.sess.span_err(ecx.tcx.span, \"encountered dangling pointer in final constant\");\n-            return Err(ErrorGuaranteed);\n+            let reported = ecx\n+                .tcx\n+                .sess\n+                .span_err(ecx.tcx.span, \"encountered dangling pointer in final constant\");\n+            return Err(reported);\n         } else if ecx.tcx.get_global_alloc(alloc_id).is_none() {\n             // We have hit an `AllocId` that is neither in local or global memory and isn't\n             // marked as dangling by local memory.  That should be impossible."}, {"sha": "9000567558b84cf6974678545af388fb0508c3b8", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -4,12 +4,11 @@\n use std::convert::TryFrom;\n use std::fmt::Write;\n \n-use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n use rustc_macros::HashStable;\n use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Printer};\n-use rustc_middle::ty::{ConstInt, Ty};\n+use rustc_middle::ty::{ConstInt, DelaySpanBugEmitted, Ty};\n use rustc_middle::{mir, ty};\n use rustc_target::abi::{Abi, HasDataLayout, Size, TagEncoding};\n use rustc_target::abi::{VariantIdx, Variants};\n@@ -565,7 +564,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         match val.val() {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n-            ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorGuaranteed)),\n+            ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => {\n+                throw_inval!(AlreadyReported(reported))\n+            }\n             ty::ConstKind::Unevaluated(uv) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;\n                 Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())"}, {"sha": "eb01e261c1a55706a94c3cbd6814809e3e215c42", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -259,7 +259,7 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n                 self.tcx.sess.diagnostic().emit_diagnostic(&error);\n             }\n         } else {\n-            assert!(self.tcx.sess.has_errors());\n+            assert!(self.tcx.sess.has_errors().is_some());\n         }\n     }\n \n@@ -327,8 +327,8 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n \n         match op.importance() {\n             ops::DiagnosticImportance::Primary => {\n-                self.error_emitted = Some(ErrorGuaranteed);\n-                err.emit();\n+                let reported = err.emit();\n+                self.error_emitted = Some(reported);\n             }\n \n             ops::DiagnosticImportance::Secondary => err.buffer(&mut self.secondary_errors),"}, {"sha": "91bb38e5a95d5321e758e9810b977fd2abe3dab7", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -235,7 +235,7 @@ fn run_compiler(\n     };\n \n     match make_input(config.opts.error_format, &matches.free) {\n-        Err(ErrorGuaranteed) => return Err(ErrorGuaranteed),\n+        Err(reported) => return Err(reported),\n         Ok(Some((input, input_file_path))) => {\n             config.input = input;\n             config.input_path = input_file_path;\n@@ -465,11 +465,11 @@ fn make_input(\n             if io::stdin().read_to_string(&mut src).is_err() {\n                 // Immediately stop compilation if there was an issue reading\n                 // the input (for example if the input stream is not UTF-8).\n-                early_error_no_abort(\n+                let reported = early_error_no_abort(\n                     error_format,\n                     \"couldn't read from stdin, as it did not contain valid UTF-8\",\n                 );\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n             if let Ok(path) = env::var(\"UNSTABLE_RUSTDOC_TEST_PATH\") {\n                 let line = env::var(\"UNSTABLE_RUSTDOC_TEST_LINE\").expect(\n@@ -1128,7 +1128,7 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n pub fn catch_fatal_errors<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorGuaranteed> {\n     catch_unwind(panic::AssertUnwindSafe(f)).map_err(|value| {\n         if value.is::<rustc_errors::FatalErrorMarker>() {\n-            ErrorGuaranteed\n+            ErrorGuaranteed::unchecked_claim_error_was_emitted()\n         } else {\n             panic::resume_unwind(value);\n         }"}, {"sha": "72471638a966bbb4fffd7ef0ec5628de47691808", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -128,7 +128,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n             DiagnosticBuilderState::Emittable(handler) => {\n                 db.inner.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n \n-                handler.emit_diagnostic(&db.inner.diagnostic);\n+                let guar = handler.emit_diagnostic(&db.inner.diagnostic);\n \n                 // Only allow a guarantee if the `level` wasn't switched to a\n                 // non-error - the field isn't `pub`, but the whole `Diagnostic`\n@@ -139,7 +139,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n                      from `DiagnosticBuilder<ErrorGuaranteed>`\",\n                     db.inner.diagnostic.level,\n                 );\n-                ErrorGuaranteed\n+                guar.unwrap()\n             }\n             // `.emit()` was previously called, disallowed from repeating it,\n             // but can take advantage of the previous `.emit()`'s guarantee\n@@ -154,7 +154,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n                      became non-error ({:?}), after original `.emit()`\",\n                     db.inner.diagnostic.level,\n                 );\n-                ErrorGuaranteed\n+                ErrorGuaranteed::unchecked_claim_error_was_emitted()\n             }\n         }\n     }"}, {"sha": "c719e4910ce4eaa3942536193e9abacb0f855adb", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 61, "deletions": 34, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -399,7 +399,7 @@ impl fmt::Display for ExplicitBug {\n impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{Diagnostic, DiagnosticId, DiagnosticStyledString, SubDiagnostic};\n-pub use diagnostic_builder::DiagnosticBuilder;\n+pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee};\n use std::backtrace::Backtrace;\n \n /// A handler deals with errors and other compiler output.\n@@ -644,8 +644,8 @@ impl Handler {\n     }\n \n     /// Emit all stashed diagnostics.\n-    pub fn emit_stashed_diagnostics(&self) {\n-        self.inner.borrow_mut().emit_stashed_diagnostics();\n+    pub fn emit_stashed_diagnostics(&self) -> Option<ErrorGuaranteed> {\n+        self.inner.borrow_mut().emit_stashed_diagnostics()\n     }\n \n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n@@ -805,8 +805,8 @@ impl Handler {\n         FatalError.raise()\n     }\n \n-    pub fn span_err(&self, span: impl Into<MultiSpan>, msg: &str) {\n-        self.emit_diag_at_span(Diagnostic::new(Error { lint: false }, msg), span);\n+    pub fn span_err(&self, span: impl Into<MultiSpan>, msg: &str) -> ErrorGuaranteed {\n+        self.emit_diag_at_span(Diagnostic::new(Error { lint: false }, msg), span).unwrap()\n     }\n \n     pub fn span_err_with_code(&self, span: impl Into<MultiSpan>, msg: &str, code: DiagnosticId) {\n@@ -829,7 +829,7 @@ impl Handler {\n     }\n \n     #[track_caller]\n-    pub fn delay_span_bug(&self, span: impl Into<MultiSpan>, msg: &str) {\n+    pub fn delay_span_bug(&self, span: impl Into<MultiSpan>, msg: &str) -> ErrorGuaranteed {\n         self.inner.borrow_mut().delay_span_bug(span, msg)\n     }\n \n@@ -858,8 +858,8 @@ impl Handler {\n         self.inner.borrow_mut().fatal(msg)\n     }\n \n-    pub fn err(&self, msg: &str) {\n-        self.inner.borrow_mut().err(msg);\n+    pub fn err(&self, msg: &str) -> ErrorGuaranteed {\n+        self.inner.borrow_mut().err(msg)\n     }\n \n     pub fn warn(&self, msg: &str) {\n@@ -880,11 +880,15 @@ impl Handler {\n         self.inner.borrow().err_count()\n     }\n \n-    pub fn has_errors(&self) -> bool {\n-        self.inner.borrow().has_errors()\n+    pub fn has_errors(&self) -> Option<ErrorGuaranteed> {\n+        if self.inner.borrow().has_errors() { Some(ErrorGuaranteed(())) } else { None }\n     }\n-    pub fn has_errors_or_lint_errors(&self) -> bool {\n-        self.inner.borrow().has_errors_or_lint_errors()\n+    pub fn has_errors_or_lint_errors(&self) -> Option<ErrorGuaranteed> {\n+        if self.inner.borrow().has_errors_or_lint_errors() {\n+            Some(ErrorGuaranteed(()))\n+        } else {\n+            None\n+        }\n     }\n     pub fn has_errors_or_delayed_span_bugs(&self) -> bool {\n         self.inner.borrow().has_errors_or_delayed_span_bugs()\n@@ -915,13 +919,17 @@ impl Handler {\n         self.inner.borrow_mut().force_print_diagnostic(db)\n     }\n \n-    pub fn emit_diagnostic(&self, diagnostic: &Diagnostic) {\n+    pub fn emit_diagnostic(&self, diagnostic: &Diagnostic) -> Option<ErrorGuaranteed> {\n         self.inner.borrow_mut().emit_diagnostic(diagnostic)\n     }\n \n-    fn emit_diag_at_span(&self, mut diag: Diagnostic, sp: impl Into<MultiSpan>) {\n+    fn emit_diag_at_span(\n+        &self,\n+        mut diag: Diagnostic,\n+        sp: impl Into<MultiSpan>,\n+    ) -> Option<ErrorGuaranteed> {\n         let mut inner = self.inner.borrow_mut();\n-        inner.emit_diagnostic(diag.set_span(sp));\n+        inner.emit_diagnostic(diag.set_span(sp))\n     }\n \n     pub fn emit_artifact_notification(&self, path: &Path, artifact_type: &str) {\n@@ -990,13 +998,20 @@ impl HandlerInner {\n     }\n \n     /// Emit all stashed diagnostics.\n-    fn emit_stashed_diagnostics(&mut self) {\n+    fn emit_stashed_diagnostics(&mut self) -> Option<ErrorGuaranteed> {\n         let diags = self.stashed_diagnostics.drain(..).map(|x| x.1).collect::<Vec<_>>();\n-        diags.iter().for_each(|diag| self.emit_diagnostic(diag));\n+        let mut reported = None;\n+        diags.iter().for_each(|diag| {\n+            if diag.is_error() {\n+                reported = Some(ErrorGuaranteed(()));\n+            }\n+            self.emit_diagnostic(diag);\n+        });\n+        reported\n     }\n \n     // FIXME(eddyb) this should ideally take `diagnostic` by value.\n-    fn emit_diagnostic(&mut self, diagnostic: &Diagnostic) {\n+    fn emit_diagnostic(&mut self, diagnostic: &Diagnostic) -> Option<ErrorGuaranteed> {\n         if diagnostic.level == Level::DelayedBug {\n             // FIXME(eddyb) this should check for `has_errors` and stop pushing\n             // once *any* errors were emitted (and truncate `delayed_span_bugs`\n@@ -1005,7 +1020,7 @@ impl HandlerInner {\n             self.delayed_span_bugs.push(diagnostic.clone());\n \n             if !self.flags.report_delayed_bugs {\n-                return;\n+                return Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n             }\n         }\n \n@@ -1020,7 +1035,7 @@ impl HandlerInner {\n             if diagnostic.has_future_breakage() {\n                 (*TRACK_DIAGNOSTICS)(diagnostic);\n             }\n-            return;\n+            return None;\n         }\n \n         // The `LintExpectationId` can be stable or unstable depending on when it was created.\n@@ -1029,16 +1044,16 @@ impl HandlerInner {\n         // a stable one by the `LintLevelsBuilder`.\n         if let Level::Expect(LintExpectationId::Unstable { .. }) = diagnostic.level {\n             self.unstable_expect_diagnostics.push(diagnostic.clone());\n-            return;\n+            return None;\n         }\n \n         (*TRACK_DIAGNOSTICS)(diagnostic);\n \n         if let Level::Expect(expectation_id) = diagnostic.level {\n             self.fulfilled_expectations.insert(expectation_id);\n-            return;\n+            return None;\n         } else if diagnostic.level == Allow {\n-            return;\n+            return None;\n         }\n \n         if let Some(ref code) = diagnostic.code {\n@@ -1068,8 +1083,12 @@ impl HandlerInner {\n             } else {\n                 self.bump_err_count();\n             }\n+\n+            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n         } else {\n             self.bump_warn_count();\n+\n+            None\n         }\n     }\n \n@@ -1191,7 +1210,7 @@ impl HandlerInner {\n     }\n \n     #[track_caller]\n-    fn delay_span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) {\n+    fn delay_span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) -> ErrorGuaranteed {\n         // This is technically `self.treat_err_as_bug()` but `delay_span_bug` is called before\n         // incrementing `err_count` by one, so we need to +1 the comparing.\n         // FIXME: Would be nice to increment err_count in a more coherent way.\n@@ -1202,7 +1221,7 @@ impl HandlerInner {\n         let mut diagnostic = Diagnostic::new(Level::DelayedBug, msg);\n         diagnostic.set_span(sp.into());\n         diagnostic.note(&format!(\"delayed at {}\", std::panic::Location::caller()));\n-        self.emit_diagnostic(&diagnostic)\n+        self.emit_diagnostic(&diagnostic).unwrap()\n     }\n \n     // FIXME(eddyb) note the comment inside `impl Drop for HandlerInner`, that's\n@@ -1221,20 +1240,20 @@ impl HandlerInner {\n     }\n \n     fn fatal(&mut self, msg: &str) -> FatalError {\n-        self.emit_error(Fatal, msg);\n+        self.emit(Fatal, msg);\n         FatalError\n     }\n \n-    fn err(&mut self, msg: &str) {\n-        self.emit_error(Error { lint: false }, msg);\n+    fn err(&mut self, msg: &str) -> ErrorGuaranteed {\n+        self.emit(Error { lint: false }, msg)\n     }\n \n     /// Emit an error; level should be `Error` or `Fatal`.\n-    fn emit_error(&mut self, level: Level, msg: &str) {\n+    fn emit(&mut self, level: Level, msg: &str) -> ErrorGuaranteed {\n         if self.treat_err_as_bug() {\n             self.bug(msg);\n         }\n-        self.emit_diagnostic(&Diagnostic::new(level, msg));\n+        self.emit_diagnostic(&Diagnostic::new(level, msg)).unwrap()\n     }\n \n     fn bug(&mut self, msg: &str) -> ! {\n@@ -1433,9 +1452,17 @@ pub fn add_elided_lifetime_in_path_suggestion(\n     );\n }\n \n-// Useful type to use with `Result<>` indicate that an error has already\n-// been reported to the user, so no need to continue checking.\n-#[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq)]\n-pub struct ErrorGuaranteed;\n+/// Useful type to use with `Result<>` indicate that an error has already\n+/// been reported to the user, so no need to continue checking.\n+#[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq, PartialOrd, Ord)]\n+pub struct ErrorGuaranteed(());\n+\n+impl ErrorGuaranteed {\n+    /// To be used only if you really know what you are doing... ideally, we would find a way to\n+    /// eliminate all calls to this method.\n+    pub fn unchecked_claim_error_was_emitted() -> Self {\n+        ErrorGuaranteed(())\n+    }\n+}\n \n rustc_data_structures::impl_stable_hash_via_hash!(ErrorGuaranteed);"}, {"sha": "d6b308cdf85d59359d2ee8eae8edeaa5ed70ce1e", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1330,7 +1330,7 @@ pub fn parse_macro_name_and_helper_attrs(\n     let attributes_attr = list.get(1);\n     let proc_attrs: Vec<_> = if let Some(attr) = attributes_attr {\n         if !attr.has_name(sym::attributes) {\n-            diag.span_err(attr.span(), \"second argument must be `attributes`\")\n+            diag.span_err(attr.span(), \"second argument must be `attributes`\");\n         }\n         attr.meta_item_list()\n             .unwrap_or_else(|| {"}, {"sha": "b93edf8da7a6458f530f4b9492a481a9497cdc28", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -534,10 +534,10 @@ pub fn compile_declarative_macro(\n     let (transparency, transparency_error) = attr::find_transparency(&def.attrs, macro_rules);\n     match transparency_error {\n         Some(TransparencyError::UnknownTransparency(value, span)) => {\n-            diag.span_err(span, &format!(\"unknown macro transparency: `{}`\", value))\n+            diag.span_err(span, &format!(\"unknown macro transparency: `{}`\", value));\n         }\n         Some(TransparencyError::MultipleTransparencyAttrs(old_span, new_span)) => {\n-            diag.span_err(vec![old_span, new_span], \"multiple macro transparency attributes\")\n+            diag.span_err(vec![old_span, new_span], \"multiple macro transparency attributes\");\n         }\n         None => {}\n     }\n@@ -617,7 +617,9 @@ fn check_lhs_no_empty_seq(sess: &ParseSess, tts: &[mbe::TokenTree]) -> bool {\n fn check_rhs(sess: &ParseSess, rhs: &mbe::TokenTree) -> bool {\n     match *rhs {\n         mbe::TokenTree::Delimited(..) => return true,\n-        _ => sess.span_diagnostic.span_err(rhs.span(), \"macro rhs must be delimited\"),\n+        _ => {\n+            sess.span_diagnostic.span_err(rhs.span(), \"macro rhs must be delimited\");\n+        }\n     }\n     false\n }"}, {"sha": "a5afb7aa4fa4e9bb80232baf04a2e140177c7c62", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -31,8 +31,7 @@ impl base::ProcMacro for BangProcMacro {\n             if let Some(s) = e.as_str() {\n                 err.help(&format!(\"message: {}\", s));\n             }\n-            err.emit();\n-            ErrorGuaranteed\n+            err.emit()\n         })\n     }\n }\n@@ -58,8 +57,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n                 if let Some(s) = e.as_str() {\n                     err.help(&format!(\"message: {}\", s));\n                 }\n-                err.emit();\n-                ErrorGuaranteed\n+                err.emit()\n             })\n     }\n }"}, {"sha": "ace0c9df58d50e1dc06d5b8f3bb8924db091e721", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -51,6 +51,8 @@ declare_features! (\n     /// Allows the sysV64 ABI to be specified on all platforms\n     /// instead of just the platforms on which it is the C ABI.\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n+    /// Allows using ADX intrinsics from `core::arch::{x86, x86_64}`.\n+    (accepted, adx_target_feature, \"1.61.0\", Some(44839), None),\n     /// Allows the definition of associated constants in `trait` or `impl` blocks.\n     (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n     /// Allows using associated `type`s in `trait`s."}, {"sha": "02cdaa3b958403d95fc3ee1d9808581c03b1339e", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -364,6 +364,8 @@ declare_features! (\n     (active, default_alloc_error_handler, \"1.48.0\", Some(66741), None),\n     /// Allows default type parameters to influence type inference.\n     (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n+    /// Allows using `#[deprecated_safe]` to deprecate the safeness of a function or trait\n+    (active, deprecated_safe, \"1.61.0\", Some(94978), None),\n     /// Allows having using `suggestion` in the `#[deprecated]` attribute.\n     (active, deprecated_suggestion, \"1.61.0\", Some(94785), None),\n     /// Allows `#[derive(Default)]` and `#[default]` on enums."}, {"sha": "e2f0b413ff379af0be7f6b4b81687e774e3f1384", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -452,6 +452,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"`default_method_body_is_const` is a temporary placeholder for declaring default bodies \\\n         as `const`, which may be removed or renamed in the future.\"\n     ),\n+    // lang-team MCP 147\n+    gated!(\n+        deprecated_safe, Normal, template!(List: r#\"since = \"version\", note = \"...\"\"#), ErrorFollowing,\n+        experimental!(deprecated_safe),\n+    ),\n \n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:"}, {"sha": "b13f0b0d3dad81d8c765ca53fd8f3cf3f5752c6e", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -225,12 +225,12 @@ pub fn prepare_session_directory(\n     let crate_dir = match crate_dir.canonicalize() {\n         Ok(v) => v,\n         Err(err) => {\n-            sess.err(&format!(\n+            let reported = sess.err(&format!(\n                 \"incremental compilation: error canonicalizing path `{}`: {}\",\n                 crate_dir.display(),\n                 err\n             ));\n-            return Err(ErrorGuaranteed);\n+            return Err(reported);\n         }\n     };\n \n@@ -489,14 +489,14 @@ fn create_dir(sess: &Session, path: &Path, dir_tag: &str) -> Result<(), ErrorGua\n             Ok(())\n         }\n         Err(err) => {\n-            sess.err(&format!(\n+            let reported = sess.err(&format!(\n                 \"Could not create incremental compilation {} \\\n                                directory `{}`: {}\",\n                 dir_tag,\n                 path.display(),\n                 err\n             ));\n-            Err(ErrorGuaranteed)\n+            Err(reported)\n         }\n     }\n }\n@@ -545,8 +545,7 @@ fn lock_directory(\n                     );\n                 }\n             }\n-            err.emit();\n-            Err(ErrorGuaranteed)\n+            Err(err.emit())\n         }\n     }\n }"}, {"sha": "7721e00c141d788f61f9e59e3a36fba5f33856ae", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -147,8 +147,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n         self.suggest_adding_lifetime_params(sub, ty_sup, ty_sub, &mut err);\n \n-        err.emit();\n-        Some(ErrorGuaranteed)\n+        let reported = err.emit();\n+        Some(reported)\n     }\n \n     fn suggest_adding_lifetime_params("}, {"sha": "467054e318be53d18a9184caeb4cc75c5f4bbc7b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             let impl_span = self.tcx().def_span(*impl_def_id);\n             err.span_note(impl_span, \"...does not necessarily outlive the static lifetime introduced by the compatible `impl`\");\n         }\n-        err.emit();\n-        Some(ErrorGuaranteed)\n+        let reported = err.emit();\n+        Some(reported)\n     }\n }"}, {"sha": "df81aea6ef9ecfb1ceda0f93dd452fc701883633", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -54,10 +54,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n \n     pub fn try_report(&self) -> Option<ErrorGuaranteed> {\n         self.try_report_from_nll()\n-            .map(|mut diag| {\n-                diag.emit();\n-                ErrorGuaranteed\n-            })\n+            .map(|mut diag| diag.emit())\n             .or_else(|| self.try_report_impl_not_conforming_to_trait())\n             .or_else(|| self.try_report_anon_anon_conflict())\n             .or_else(|| self.try_report_static_impl_trait())"}, {"sha": "4fcdcb6366683e3b2b45ac6e383a6fee5e478960", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -84,8 +84,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         ),\n                     );\n                     if self.find_impl_on_dyn_trait(&mut err, param.param_ty, &ctxt) {\n-                        err.emit();\n-                        return Some(ErrorGuaranteed);\n+                        let reported = err.emit();\n+                        return Some(reported);\n                     } else {\n                         err.cancel();\n                     }\n@@ -276,8 +276,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             Some((param.param_ty_span, param.param_ty.to_string())),\n         );\n \n-        err.emit();\n-        Some(ErrorGuaranteed)\n+        let reported = err.emit();\n+        Some(reported)\n     }\n }\n "}, {"sha": "b1a42ee66c9201cbc56397b22c80c20e44fbd1c7", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -33,13 +33,13 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             ) = (sub_trace.values.ty(), sup_trace.values.ty(), sub_trace.cause.code())\n             && sup_expected_found == sub_expected_found\n         {\n-            self.emit_err(\n+            let guar = self.emit_err(\n                 var_origin.span(),\n                 sub_expected,\n                 sub_found,\n                 *trait_item_def_id,\n             );\n-            return Some(ErrorGuaranteed);\n+            return Some(guar);\n         }\n         if let RegionResolutionError::ConcreteFailure(origin, _, _)\n             | RegionResolutionError::GenericBoundFailure(origin, _, _) = error.clone()\n@@ -49,18 +49,24 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 trait_item_def_id,\n             } = origin\n         {\n-            self.emit_associated_type_err(\n+            let guar = self.emit_associated_type_err(\n                 span,\n                 self.infcx.tcx.item_name(impl_item_def_id),\n                 impl_item_def_id,\n                 trait_item_def_id,\n             );\n-            return Some(ErrorGuaranteed);\n+            return Some(guar);\n         }\n         None\n     }\n \n-    fn emit_err(&self, sp: Span, expected: Ty<'tcx>, found: Ty<'tcx>, trait_def_id: DefId) {\n+    fn emit_err(\n+        &self,\n+        sp: Span,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+        trait_def_id: DefId,\n+    ) -> ErrorGuaranteed {\n         let trait_sp = self.tcx().def_span(trait_def_id);\n         let mut err = self\n             .tcx()\n@@ -142,7 +148,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                  argument, the other inputs and its output\",\n             );\n         }\n-        err.emit();\n+        err.emit()\n     }\n \n     fn emit_associated_type_err(\n@@ -151,7 +157,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         item_name: Symbol,\n         impl_item_def_id: DefId,\n         trait_item_def_id: DefId,\n-    ) {\n+    ) -> ErrorGuaranteed {\n         let impl_sp = self.tcx().def_span(impl_item_def_id);\n         let trait_sp = self.tcx().def_span(trait_item_def_id);\n         let mut err = self\n@@ -161,7 +167,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         err.span_label(impl_sp, \"found\");\n         err.span_label(trait_sp, \"expected\");\n \n-        err.emit();\n+        err.emit()\n     }\n }\n "}, {"sha": "5d8cc94e05c29b36a520598dd90a0a60671f1559", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -189,7 +189,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 self.tcx.sess.delay_span_bug(\n                     origin.span(),\n                     &format!(\"no region-bound-pairs for {:?}\", body_id),\n-                )\n+                );\n             }\n         }\n     }"}, {"sha": "4f30e78f5e2aa7efba92581e86ab7bee9b64982e", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -373,7 +373,7 @@ pub fn configure_and_expand(\n         if recursion_limit_hit {\n             // If we hit a recursion limit, exit early to avoid later passes getting overwhelmed\n             // with a large AST\n-            Err(ErrorGuaranteed)\n+            Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n         } else {\n             Ok(krate)\n         }\n@@ -413,7 +413,7 @@ pub fn configure_and_expand(\n         );\n \n         msg.warn(\"The generated documentation may be incorrect\");\n-        msg.emit()\n+        msg.emit();\n     } else {\n         krate = sess.time(\"maybe_create_a_macro_crate\", || {\n             let is_test_crate = sess.opts.test;\n@@ -742,29 +742,30 @@ pub fn prepare_outputs(\n     if let Some(ref input_path) = compiler.input_path {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n-                sess.err(&format!(\n+                let reported = sess.err(&format!(\n                     \"the input file \\\"{}\\\" would be overwritten by the generated \\\n                         executable\",\n                     input_path.display()\n                 ));\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n             if let Some(dir_path) = output_conflicts_with_dir(&output_paths) {\n-                sess.err(&format!(\n+                let reported = sess.err(&format!(\n                     \"the generated executable for the input file \\\"{}\\\" conflicts with the \\\n                         existing directory \\\"{}\\\"\",\n                     input_path.display(),\n                     dir_path.display()\n                 ));\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n         }\n     }\n \n     if let Some(ref dir) = compiler.temps_dir {\n         if fs::create_dir_all(dir).is_err() {\n-            sess.err(\"failed to find or create the directory specified by `--temps-dir`\");\n-            return Err(ErrorGuaranteed);\n+            let reported =\n+                sess.err(\"failed to find or create the directory specified by `--temps-dir`\");\n+            return Err(reported);\n         }\n     }\n \n@@ -776,8 +777,9 @@ pub fn prepare_outputs(\n     if !only_dep_info {\n         if let Some(ref dir) = compiler.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n-                sess.err(\"failed to find or create the directory specified by `--out-dir`\");\n-                return Err(ErrorGuaranteed);\n+                let reported =\n+                    sess.err(\"failed to find or create the directory specified by `--out-dir`\");\n+                return Err(reported);\n             }\n         }\n     }\n@@ -987,8 +989,8 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n     // lot of annoying errors in the ui tests (basically,\n     // lint warnings and so on -- kindck used to do this abort, but\n     // kindck is gone now). -nmatsakis\n-    if sess.has_errors() {\n-        return Err(ErrorGuaranteed);\n+    if let Some(reported) = sess.has_errors() {\n+        return Err(reported);\n     }\n \n     sess.time(\"misc_checking_3\", || {"}, {"sha": "6373f4e9af190eafee9a7f877eae375c2e7770c3", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -5,7 +5,6 @@ use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n-use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n@@ -121,10 +120,8 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn parse(&self) -> Result<&Query<ast::Crate>> {\n         self.parse.compute(|| {\n-            passes::parse(self.session(), &self.compiler.input).map_err(|mut parse_error| {\n-                parse_error.emit();\n-                ErrorGuaranteed\n-            })\n+            passes::parse(self.session(), &self.compiler.input)\n+                .map_err(|mut parse_error| parse_error.emit())\n         })\n     }\n "}, {"sha": "50a3df21a3bc9010ea1f04d00fc88facf8f940ca", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -157,7 +157,7 @@ impl BoxPointers {\n             if let GenericArgKind::Type(leaf_ty) = leaf.unpack() {\n                 if leaf_ty.is_box() {\n                     cx.struct_span_lint(BOX_POINTERS, span, |lint| {\n-                        lint.build(&format!(\"type uses owned (Box type) pointers: {}\", ty)).emit()\n+                        lint.build(&format!(\"type uses owned (Box type) pointers: {}\", ty)).emit();\n                     });\n                 }\n             }\n@@ -318,7 +318,7 @@ impl UnsafeCode {\n         &self,\n         cx: &EarlyContext<'_>,\n         span: Span,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         // This comes from a macro that has `#[allow_internal_unsafe]`.\n         if span.allows_unsafe() {\n@@ -350,7 +350,7 @@ impl EarlyLintPass for UnsafeCode {\n                                                macros using unsafe without triggering \\\n                                                the `unsafe_code` lint at their call site\",\n                 )\n-                .emit()\n+                .emit();\n             });\n         }\n     }\n@@ -360,7 +360,7 @@ impl EarlyLintPass for UnsafeCode {\n             // Don't warn about generated blocks; that'll just pollute the output.\n             if blk.rules == ast::BlockCheckMode::Unsafe(ast::UserProvided) {\n                 self.report_unsafe(cx, blk.span, |lint| {\n-                    lint.build(\"usage of an `unsafe` block\").emit()\n+                    lint.build(\"usage of an `unsafe` block\").emit();\n                 });\n             }\n         }\n@@ -370,12 +370,12 @@ impl EarlyLintPass for UnsafeCode {\n         match it.kind {\n             ast::ItemKind::Trait(box ast::Trait { unsafety: ast::Unsafe::Yes(_), .. }) => self\n                 .report_unsafe(cx, it.span, |lint| {\n-                    lint.build(\"declaration of an `unsafe` trait\").emit()\n+                    lint.build(\"declaration of an `unsafe` trait\").emit();\n                 }),\n \n             ast::ItemKind::Impl(box ast::Impl { unsafety: ast::Unsafe::Yes(_), .. }) => self\n                 .report_unsafe(cx, it.span, |lint| {\n-                    lint.build(\"implementation of an `unsafe` trait\").emit()\n+                    lint.build(\"implementation of an `unsafe` trait\").emit();\n                 }),\n \n             ast::ItemKind::Fn(..) => {\n@@ -450,7 +450,9 @@ impl EarlyLintPass for UnsafeCode {\n                 FnCtxt::Assoc(_) if body.is_none() => \"declaration of an `unsafe` method\",\n                 FnCtxt::Assoc(_) => \"implementation of an `unsafe` method\",\n             };\n-            self.report_unsafe(cx, span, |lint| lint.build(msg).emit());\n+            self.report_unsafe(cx, span, |lint| {\n+                lint.build(msg).emit();\n+            });\n         }\n     }\n }\n@@ -559,7 +561,7 @@ impl MissingDoc {\n                 MISSING_DOCS,\n                 cx.tcx.sess.source_map().guess_head_span(sp),\n                 |lint| {\n-                    lint.build(&format!(\"missing documentation for {} {}\", article, desc)).emit()\n+                    lint.build(&format!(\"missing documentation for {} {}\", article, desc)).emit();\n                 },\n             );\n         }\n@@ -777,7 +779,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n                     \"type could implement `Copy`; consider adding `impl \\\n                           Copy`\",\n                 )\n-                .emit()\n+                .emit();\n             })\n         }\n     }\n@@ -858,7 +860,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDebugImplementations {\n                      or a manual implementation\",\n                     cx.tcx.def_path_str(debug)\n                 ))\n-                .emit()\n+                .emit();\n             });\n         }\n     }\n@@ -1278,7 +1280,9 @@ impl<'tcx> LateLintPass<'tcx> for MutableTransmutes {\n             if to_mt == hir::Mutability::Mut && from_mt == hir::Mutability::Not {\n                 let msg = \"transmuting &T to &mut T is undefined behavior, \\\n                     even if the reference is unused, consider instead using an UnsafeCell\";\n-                cx.struct_span_lint(MUTABLE_TRANSMUTES, expr.span, |lint| lint.build(msg).emit());\n+                cx.struct_span_lint(MUTABLE_TRANSMUTES, expr.span, |lint| {\n+                    lint.build(msg).emit();\n+                });\n             }\n         }\n \n@@ -1328,7 +1332,7 @@ impl<'tcx> LateLintPass<'tcx> for UnstableFeatures {\n             if let Some(items) = attr.meta_item_list() {\n                 for item in items {\n                     cx.struct_span_lint(UNSTABLE_FEATURES, item.span(), |lint| {\n-                        lint.build(\"unstable feature\").emit()\n+                        lint.build(\"unstable feature\").emit();\n                     });\n                 }\n             }\n@@ -1680,7 +1684,7 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                                 or lifetime parameters\",\n                             predicate_kind_name, predicate\n                         ))\n-                        .emit()\n+                        .emit();\n                     });\n                 }\n             }\n@@ -1915,7 +1919,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnameableTestItems {\n         let attrs = cx.tcx.hir().attrs(it.hir_id());\n         if let Some(attr) = cx.sess().find_by_name(attrs, sym::rustc_test_marker) {\n             cx.struct_span_lint(UNNAMEABLE_TEST_ITEMS, attr.span, |lint| {\n-                lint.build(\"cannot test inner items\").emit()\n+                lint.build(\"cannot test inner items\").emit();\n             });\n         }\n     }\n@@ -2040,7 +2044,7 @@ impl KeywordIdents {\n                     format!(\"r#{}\", ident),\n                     Applicability::MachineApplicable,\n                 )\n-                .emit()\n+                .emit();\n         });\n     }\n }\n@@ -3055,7 +3059,7 @@ impl<'tcx> LateLintPass<'tcx> for ClashingExternDeclarations {\n                                 \"this signature doesn't match the previous declaration\",\n                             )\n                             .note_expected_found(&\"\", expected_str, &\"\", found_str)\n-                            .emit()\n+                            .emit();\n                         },\n                     );\n                 }"}, {"sha": "882fa4496ca26b1438d4c2eb162c70a4d9a31e1b", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -593,7 +593,7 @@ pub trait LintContext: Sized {\n         &self,\n         lint: &'static Lint,\n         span: Option<impl Into<MultiSpan>>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n         diagnostic: BuiltinLintDiagnostics,\n     ) {\n         self.lookup(lint, span, |lint| {\n@@ -840,19 +840,23 @@ pub trait LintContext: Sized {\n         &self,\n         lint: &'static Lint,\n         span: Option<S>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     );\n \n     fn struct_span_lint<S: Into<MultiSpan>>(\n         &self,\n         lint: &'static Lint,\n         span: S,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         self.lookup(lint, Some(span), decorate);\n     }\n     /// Emit a lint at the appropriate level, with no associated span.\n-    fn lint(&self, lint: &'static Lint, decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>)) {\n+    fn lint(\n+        &self,\n+        lint: &'static Lint,\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n+    ) {\n         self.lookup(lint, None as Option<Span>, decorate);\n     }\n }\n@@ -893,7 +897,7 @@ impl LintContext for LateContext<'_> {\n         &self,\n         lint: &'static Lint,\n         span: Option<S>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         let hir_id = self.last_node_with_lint_attrs;\n \n@@ -920,7 +924,7 @@ impl LintContext for EarlyContext<'_> {\n         &self,\n         lint: &'static Lint,\n         span: Option<S>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         self.builder.struct_lint(lint, span.map(|s| s.into()), decorate)\n     }"}, {"sha": "7447f9f64b7b100f9a8aec19c883ef6d0a2a2145", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -45,7 +45,9 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n             self.context.lookup_with_diagnostics(\n                 lint_id.lint,\n                 Some(span),\n-                |lint| lint.build(&msg).emit(),\n+                |lint| {\n+                    lint.build(&msg).emit();\n+                },\n                 diagnostic,\n             );\n         }"}, {"sha": "99a5720832e88b35995703d192c3e372fd98c81a", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -652,7 +652,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         &self,\n         lint: &'static Lint,\n         span: Option<MultiSpan>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         let (level, src) = self.lint_level(lint);\n         struct_lint_level(self.sess, lint, level, src, span, decorate)"}, {"sha": "6182d2b10ed5b183e6a9d4b295bb061a0fd26de5", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -180,13 +180,13 @@ impl EarlyLintPass for NonAsciiIdents {\n             }\n             has_non_ascii_idents = true;\n             cx.struct_span_lint(NON_ASCII_IDENTS, sp, |lint| {\n-                lint.build(\"identifier contains non-ASCII characters\").emit()\n+                lint.build(\"identifier contains non-ASCII characters\").emit();\n             });\n             if check_uncommon_codepoints\n                 && !symbol_str.chars().all(GeneralSecurityProfile::identifier_allowed)\n             {\n                 cx.struct_span_lint(UNCOMMON_CODEPOINTS, sp, |lint| {\n-                    lint.build(\"identifier contains uncommon Unicode codepoints\").emit()\n+                    lint.build(\"identifier contains uncommon Unicode codepoints\").emit();\n                 })\n             }\n         }\n@@ -337,7 +337,7 @@ impl EarlyLintPass for NonAsciiIdents {\n                             let char_info = format!(\"'{}' (U+{:04X})\", ch, ch as u32);\n                             note += &char_info;\n                         }\n-                        lint.build(&message).note(&note).note(\"please recheck to make sure their usages are indeed what you want\").emit()\n+                        lint.build(&message).note(&note).note(\"please recheck to make sure their usages are indeed what you want\").emit();\n                     });\n                 }\n             }"}, {"sha": "5d734fd2ba7052f40ce51164f72ef082cd9ad521", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n             let method = &call.ident.name;\n             let message =\n                 format!(\"call to `.{}()` on a reference in this situation does nothing\", &method,);\n-            lint.build(&message).span_label(span, \"unnecessary method call\").note(&note).emit()\n+            lint.build(&message).span_label(span, \"unnecessary method call\").note(&note).emit();\n         });\n     }\n }"}, {"sha": "5b6997bf0eeaffafc6294741e8174f9cf638bba5", "filename": "compiler/rustc_lint/src/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -113,7 +113,7 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n                         predicate,\n                         cx.tcx.def_path_str(needs_drop)\n                     );\n-                    lint.build(&msg).emit()\n+                    lint.build(&msg).emit();\n                 });\n             }\n         }\n@@ -135,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n                         instead using `{}` to detect whether a type is trivially dropped\",\n                         cx.tcx.def_path_str(needs_drop)\n                     );\n-                    lint.build(&msg).emit()\n+                    lint.build(&msg).emit();\n                 });\n             }\n         }"}, {"sha": "c95905b9b185129476566438b1bfc8903d304609", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -441,7 +441,7 @@ fn lint_uint_literal<'tcx>(\n                     min,\n                     max,\n                 ))\n-                .emit()\n+                .emit();\n         });\n     }\n }\n@@ -502,7 +502,7 @@ impl<'tcx> LateLintPass<'tcx> for TypeLimits {\n             hir::ExprKind::Binary(binop, ref l, ref r) => {\n                 if is_comparison(binop) && !check_limits(cx, binop, &l, &r) {\n                     cx.struct_span_lint(UNUSED_COMPARISONS, e.span, |lint| {\n-                        lint.build(\"comparison is useless due to type limits\").emit()\n+                        lint.build(\"comparison is useless due to type limits\").emit();\n                     });\n                 }\n             }\n@@ -1382,7 +1382,7 @@ impl<'tcx> LateLintPass<'tcx> for VariantSizeDifferences {\n                                           larger ({} bytes) than the next largest\",\n                             largest\n                         ))\n-                        .emit()\n+                        .emit();\n                     },\n                 );\n             }"}, {"sha": "91b72f1d2b17ead0cd9a8e7412fc1364c8a1e001", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -170,7 +170,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n \n         if !(type_permits_lack_of_use || fn_warned || op_warned) {\n             cx.struct_span_lint(UNUSED_RESULTS, s.span, |lint| {\n-                lint.build(&format!(\"unused result of type `{}`\", ty)).emit()\n+                lint.build(&format!(\"unused result of type `{}`\", ty)).emit();\n             });\n         }\n \n@@ -368,9 +368,9 @@ impl<'tcx> LateLintPass<'tcx> for PathStatements {\n                         } else {\n                             lint.span_help(s.span, \"use `drop` to clarify the intent\");\n                         }\n-                        lint.emit()\n+                        lint.emit();\n                     } else {\n-                        lint.build(\"path statement with no effect\").emit()\n+                        lint.build(\"path statement with no effect\").emit();\n                     }\n                 });\n             }\n@@ -1111,7 +1111,7 @@ impl UnusedImportBraces {\n             };\n \n             cx.struct_span_lint(UNUSED_IMPORT_BRACES, item.span, |lint| {\n-                lint.build(&format!(\"braces around {} is unnecessary\", node_name)).emit()\n+                lint.build(&format!(\"braces around {} is unnecessary\", node_name)).emit();\n             });\n         }\n     }\n@@ -1170,7 +1170,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAllocation {\n                             \"unnecessary allocation, use `&mut` instead\"\n                         }\n                     };\n-                    lint.build(msg).emit()\n+                    lint.build(msg).emit();\n                 });\n             }\n         }"}, {"sha": "88e049410790dd40afe59f2e0ef7be0ea1a76e57", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -3695,7 +3695,7 @@ declare_lint! {\n     /// ### Explanation\n     ///\n     /// A duplicated attribute may erroneously originate from a copy-paste and the effect of it\n-    /// being duplicated may not be obvious or desireable.\n+    /// being duplicated may not be obvious or desirable.\n     ///\n     /// For instance, doubling the `#[test]` attributes registers the test to be run twice with no\n     /// change to its environment."}, {"sha": "a9e3b55aeeedfa4f1ccf83d29a618c6c593adccc", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -825,11 +825,13 @@ impl<'a> CrateLoader<'a> {\n         for (_, data) in self.cstore.iter_crate_data() {\n             if data.has_global_allocator() {\n                 match global_allocator {\n-                    Some(other_crate) => self.sess.err(&format!(\n+                    Some(other_crate) => {\n+                        self.sess.err(&format!(\n                         \"the `#[global_allocator]` in {} conflicts with global allocator in: {}\",\n                         other_crate,\n                         data.name()\n-                    )),\n+                    ));\n+                    }\n                     None => global_allocator = Some(data.name()),\n                 }\n             }\n@@ -864,7 +866,7 @@ impl<'a> CrateLoader<'a> {\n         // don't perform this validation if the session has errors, as one of\n         // those errors may indicate a circular dependency which could cause\n         // this to stack overflow.\n-        if self.sess.has_errors() {\n+        if self.sess.has_errors().is_some() {\n             return;\n         }\n "}, {"sha": "c3a7611239139ecae963b0ce41aac746b78e8be4", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -145,41 +145,49 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                             (\"bundle\", NativeLibKind::Static { bundle, .. }) => {\n                                 *bundle = Some(value);\n                             }\n-                            (\"bundle\", _) => sess.span_err(\n-                                span,\n-                                \"bundle linking modifier is only compatible with \\\n+                            (\"bundle\", _) => {\n+                                sess.span_err(\n+                                    span,\n+                                    \"bundle linking modifier is only compatible with \\\n                                 `static` linking kind\",\n-                            ),\n+                                );\n+                            }\n \n                             (\"verbatim\", _) => lib.verbatim = Some(value),\n \n                             (\"whole-archive\", NativeLibKind::Static { whole_archive, .. }) => {\n                                 *whole_archive = Some(value);\n                             }\n-                            (\"whole-archive\", _) => sess.span_err(\n-                                span,\n-                                \"whole-archive linking modifier is only compatible with \\\n+                            (\"whole-archive\", _) => {\n+                                sess.span_err(\n+                                    span,\n+                                    \"whole-archive linking modifier is only compatible with \\\n                                 `static` linking kind\",\n-                            ),\n+                                );\n+                            }\n \n                             (\"as-needed\", NativeLibKind::Dylib { as_needed })\n                             | (\"as-needed\", NativeLibKind::Framework { as_needed }) => {\n                                 *as_needed = Some(value);\n                             }\n-                            (\"as-needed\", _) => sess.span_err(\n-                                span,\n-                                \"as-needed linking modifier is only compatible with \\\n+                            (\"as-needed\", _) => {\n+                                sess.span_err(\n+                                    span,\n+                                    \"as-needed linking modifier is only compatible with \\\n                                 `dylib` and `framework` linking kinds\",\n-                            ),\n+                                );\n+                            }\n \n-                            _ => sess.span_err(\n-                                span,\n-                                &format!(\n-                                    \"unrecognized linking modifier `{}`, expected one \\\n+                            _ => {\n+                                sess.span_err(\n+                                    span,\n+                                    &format!(\n+                                        \"unrecognized linking modifier `{}`, expected one \\\n                                     of: bundle, verbatim, whole-archive, as-needed\",\n-                                    modifier\n-                                ),\n-                            ),\n+                                        modifier\n+                                    ),\n+                                );\n+                            }\n                         }\n                     }\n                 } else {\n@@ -247,7 +255,9 @@ impl Collector<'_> {\n                 Some(span) => {\n                     struct_span_err!(self.tcx.sess, span, E0455, \"{}\", msg).emit();\n                 }\n-                None => self.tcx.sess.err(msg),\n+                None => {\n+                    self.tcx.sess.err(msg);\n+                }\n             }\n         }\n         if lib.cfg.is_some() && !self.tcx.features().link_cfg {"}, {"sha": "dc1fe5f2b0836d947352eb7f21e941bc69114db4", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -2,7 +2,9 @@ use std::cmp;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{\n+    Diagnostic, DiagnosticBuilder, DiagnosticId, EmissionGuarantee, ErrorGuaranteed,\n+};\n use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_query_system::ich::StableHashingContext;\n@@ -220,22 +222,28 @@ impl LintExpectation {\n     }\n }\n \n-pub struct LintDiagnosticBuilder<'a>(DiagnosticBuilder<'a, ()>);\n+pub struct LintDiagnosticBuilder<'a, G: EmissionGuarantee>(DiagnosticBuilder<'a, G>);\n \n-impl<'a> LintDiagnosticBuilder<'a> {\n-    /// Return the inner DiagnosticBuilder, first setting the primary message to `msg`.\n-    pub fn build(mut self, msg: &str) -> DiagnosticBuilder<'a, ()> {\n+impl<'a, G: EmissionGuarantee> LintDiagnosticBuilder<'a, G> {\n+    /// Return the inner `DiagnosticBuilder`, first setting the primary message to `msg`.\n+    pub fn build(mut self, msg: &str) -> DiagnosticBuilder<'a, G> {\n         self.0.set_primary_message(msg);\n         self.0.set_is_lint();\n         self.0\n     }\n \n-    /// Create a LintDiagnosticBuilder from some existing DiagnosticBuilder.\n-    pub fn new(err: DiagnosticBuilder<'a, ()>) -> LintDiagnosticBuilder<'a> {\n+    /// Create a `LintDiagnosticBuilder` from some existing `DiagnosticBuilder`.\n+    pub fn new(err: DiagnosticBuilder<'a, G>) -> LintDiagnosticBuilder<'a, G> {\n         LintDiagnosticBuilder(err)\n     }\n }\n \n+impl<'a> LintDiagnosticBuilder<'a, ErrorGuaranteed> {\n+    pub fn forget_guarantee(self) -> LintDiagnosticBuilder<'a, ()> {\n+        LintDiagnosticBuilder(self.0.forget_guarantee())\n+    }\n+}\n+\n pub fn explain_lint_level_source(\n     sess: &Session,\n     lint: &'static Lint,\n@@ -316,7 +324,7 @@ pub fn struct_lint_level<'s, 'd>(\n     level: Level,\n     src: LintLevelSource,\n     span: Option<MultiSpan>,\n-    decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>) + 'd,\n+    decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>) + 'd,\n ) {\n     // Avoid codegen bloat from monomorphization by immediately doing dyn dispatch of `decorate` to\n     // the \"real\" work.\n@@ -326,7 +334,7 @@ pub fn struct_lint_level<'s, 'd>(\n         level: Level,\n         src: LintLevelSource,\n         span: Option<MultiSpan>,\n-        decorate: Box<dyn for<'b> FnOnce(LintDiagnosticBuilder<'b>) + 'd>,\n+        decorate: Box<dyn for<'b> FnOnce(LintDiagnosticBuilder<'b, ()>) + 'd>,\n     ) {\n         // Check for future incompatibility lints and issue a stronger warning.\n         let future_incompatible = lint.future_incompatible;"}, {"sha": "219af6caa1ae1943d6726a406340a943b45ba42d", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -258,7 +258,7 @@ fn late_report_deprecation(\n             let kind = tcx.def_kind(def_id).descr(def_id);\n             deprecation_suggestion(&mut diag, kind, suggestion, method_span);\n         }\n-        diag.emit()\n+        diag.emit();\n     });\n }\n \n@@ -483,7 +483,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) {\n         let soft_handler = |lint, span, msg: &_| {\n             self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, |lint| {\n-                lint.build(msg).emit()\n+                lint.build(msg).emit();\n             })\n         };\n         match self.eval_stability(def_id, id, span, method_span) {"}, {"sha": "492091a4f25405f5ed1a47161e8fda432e5752cf", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -91,7 +91,7 @@ fn print_backtrace(backtrace: &Backtrace) {\n impl From<ErrorHandled> for InterpErrorInfo<'_> {\n     fn from(err: ErrorHandled) -> Self {\n         match err {\n-            ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n+            ErrorHandled::Reported(ErrorGuaranteed { .. }) | ErrorHandled::Linted => {\n                 err_inval!(ReferencedConstant)\n             }\n             ErrorHandled::TooGeneric => err_inval!(TooGeneric),\n@@ -160,7 +160,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n         match self {\n             TooGeneric => write!(f, \"encountered overly generic constant\"),\n             ReferencedConstant => write!(f, \"referenced constant has errors\"),\n-            AlreadyReported(ErrorGuaranteed) => {\n+            AlreadyReported(ErrorGuaranteed { .. }) => {\n                 write!(f, \"encountered constants with type errors, stopping evaluation\")\n             }\n             Layout(ref err) => write!(f, \"{}\", err),"}, {"sha": "7d101046a96b48b67f2fdd65e7f8c434bb15a497", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -99,7 +99,7 @@ impl<T: HasDataLayout> PointerArithmetic for T {}\n /// mostly opaque; the `Machine` trait extends it with some more operations that also have access to\n /// some global state.\n /// We don't actually care about this `Debug` bound (we use `Provenance::fmt` to format the entire\n-/// pointer), but `derive` adds some unecessary bounds.\n+/// pointer), but `derive` adds some unnecessary bounds.\n pub trait Provenance: Copy + fmt::Debug {\n     /// Says whether the `offset` field of `Pointer`s with this provenance is the actual physical address.\n     /// If `true, ptr-to-int casts work by simply discarding the provenance."}, {"sha": "e07b174bc6aaa3cec64da30129f898697391da03", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -252,7 +252,9 @@ rustc_queries! {\n     }\n \n     /// Fetch the THIR for a given body. If typeck for that body failed, returns an empty `Thir`.\n-    query thir_body(key: ty::WithOptConstParam<LocalDefId>) -> (&'tcx Steal<thir::Thir<'tcx>>, thir::ExprId) {\n+    query thir_body(key: ty::WithOptConstParam<LocalDefId>)\n+        -> Result<(&'tcx Steal<thir::Thir<'tcx>>, thir::ExprId), ErrorGuaranteed>\n+    {\n         // Perf tests revealed that hashing THIR is inefficient (see #85729).\n         no_hash\n         desc { |tcx| \"building THIR for `{}`\", tcx.def_path_str(key.did.to_def_id()) }"}, {"sha": "c43ec048c3f99e2e086ac0c541229d20de268f66", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -31,12 +31,12 @@ pub struct Graph {\n     pub children: DefIdMap<Children>,\n \n     /// Whether an error was emitted while constructing the graph.\n-    pub has_errored: bool,\n+    pub has_errored: Option<ErrorGuaranteed>,\n }\n \n impl Graph {\n     pub fn new() -> Graph {\n-        Graph { parent: Default::default(), children: Default::default(), has_errored: false }\n+        Graph { parent: Default::default(), children: Default::default(), has_errored: None }\n     }\n \n     /// The parent of a given impl, which is the `DefId` of the trait when the\n@@ -246,8 +246,10 @@ pub fn ancestors<'tcx>(\n ) -> Result<Ancestors<'tcx>, ErrorGuaranteed> {\n     let specialization_graph = tcx.specialization_graph_of(trait_def_id);\n \n-    if specialization_graph.has_errored || tcx.type_of(start_from_impl).references_error() {\n-        Err(ErrorGuaranteed)\n+    if let Some(reported) = specialization_graph.has_errored {\n+        Err(reported)\n+    } else if let Some(reported) = tcx.type_of(start_from_impl).error_reported() {\n+        Err(reported)\n     } else {\n         Ok(Ancestors {\n             trait_def_id,"}, {"sha": "cb219c4c4e4c9a1b5e394afafa1859f435f670a0", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -7,7 +7,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::HashingControls;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -453,7 +452,7 @@ impl<'tcx> AdtDef<'tcx> {\n             }\n             Err(err) => {\n                 let msg = match err {\n-                    ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n+                    ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n                         \"enum discriminant evaluation failed\"\n                     }\n                     ErrorHandled::TooGeneric => \"enum discriminant depends on generics\","}, {"sha": "4b7c1d44cea29f6c6a531fd8519720e9e9eb836d", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -264,7 +264,7 @@ impl<'tcx> Const<'tcx> {\n         if let Some(val) = self.val().try_eval(tcx, param_env) {\n             match val {\n                 Ok(val) => Const::from_value(tcx, val, self.ty()),\n-                Err(ErrorGuaranteed) => tcx.const_error(self.ty()),\n+                Err(ErrorGuaranteed { .. }) => tcx.const_error(self.ty()),\n             }\n         } else {\n             self"}, {"sha": "f51e6c2bc1f4d53736da680bd25bd8096a0f57c2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -91,7 +91,10 @@ pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n /// except through the error-reporting functions on a [`tcx`][TyCtxt].\n #[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n #[derive(TyEncodable, TyDecodable, HashStable)]\n-pub struct DelaySpanBugEmitted(());\n+pub struct DelaySpanBugEmitted {\n+    pub reported: ErrorGuaranteed,\n+    _priv: (),\n+}\n \n type InternedSet<'tcx, T> = ShardedHashMap<InternedInSet<'tcx, T>, ()>;\n \n@@ -1236,8 +1239,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// ensure it gets used.\n     #[track_caller]\n     pub fn ty_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Ty<'tcx> {\n-        self.sess.delay_span_bug(span, msg);\n-        self.mk_ty(Error(DelaySpanBugEmitted(())))\n+        let reported = self.sess.delay_span_bug(span, msg);\n+        self.mk_ty(Error(DelaySpanBugEmitted { reported, _priv: () }))\n     }\n \n     /// Like [TyCtxt::ty_error] but for constants.\n@@ -1258,8 +1261,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         span: S,\n         msg: &str,\n     ) -> Const<'tcx> {\n-        self.sess.delay_span_bug(span, msg);\n-        self.mk_const(ty::ConstS { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })\n+        let reported = self.sess.delay_span_bug(span, msg);\n+        self.mk_const(ty::ConstS {\n+            val: ty::ConstKind::Error(DelaySpanBugEmitted { reported, _priv: () }),\n+            ty,\n+        })\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {\n@@ -2733,7 +2739,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         lint: &'static Lint,\n         hir_id: HirId,\n         span: impl Into<MultiSpan>,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         let (level, src) = self.lint_level_at_node(lint, hir_id);\n         struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);\n@@ -2743,7 +2749,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         lint: &'static Lint,\n         id: HirId,\n-        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),\n+        decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a, ()>),\n     ) {\n         let (level, src) = self.lint_level_at_node(lint, id);\n         struct_lint_level(self.sess, lint, level, src, None, decorate);"}, {"sha": "780d380da365eceab5a4cdc1504fb95229f4965d", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -51,6 +51,7 @@\n //! ```\n use crate::mir;\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -151,6 +152,13 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_ERROR)\n     }\n+    fn error_reported(&self) -> Option<ErrorGuaranteed> {\n+        if self.references_error() {\n+            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+        } else {\n+            None\n+        }\n+    }\n     fn has_param_types_or_consts(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n     }"}, {"sha": "fe036f4f2275afa62c37065764906794d5768758", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -337,7 +337,7 @@ rustc_query_append! { [define_callbacks!][<'tcx>] }\n mod sealed {\n     use super::{DefId, LocalDefId};\n \n-    /// An analogue of the `Into` trait that's intended only for query paramaters.\n+    /// An analogue of the `Into` trait that's intended only for query parameters.\n     ///\n     /// This exists to allow queries to accept either `DefId` or `LocalDefId` while requiring that the\n     /// user call `to_def_id` to convert between them everywhere else."}, {"sha": "0a6cb276f75785ae223e55bcf4e4c79db3695a97", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -61,7 +61,7 @@ pub fn ty_slice_as_generic_args<'a, 'tcx>(ts: &'a [Ty<'tcx>]) -> &'a [GenericArg\n }\n \n impl<'tcx> List<Ty<'tcx>> {\n-    /// Allows to freely switch betwen `List<Ty<'tcx>>` and `List<GenericArg<'tcx>>`.\n+    /// Allows to freely switch between `List<Ty<'tcx>>` and `List<GenericArg<'tcx>>`.\n     ///\n     /// As lists are interned, `List<Ty<'tcx>>` and `List<GenericArg<'tcx>>` have\n     /// be interned together, see `intern_type_list` for more details."}, {"sha": "1b07dc6eb37acb8c9c9d2fa70ae87e9b7e534c97", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -486,7 +486,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Given the `DefId`, returns the `DefId` of the innermost item that\n-    /// has its own type-checking context or \"inference enviornment\".\n+    /// has its own type-checking context or \"inference environment\".\n     ///\n     /// For example, a closure has its own `DefId`, but it is type-checked\n     /// with the containing item. Similarly, an inline const block has its"}, {"sha": "ab3dc8f020cc9ec2878900e4249169ec15620032", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -118,7 +118,9 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n             };\n \n             let body = tcx.hir().body(body_id);\n-            let (thir, expr) = tcx.thir_body(def);\n+            let (thir, expr) = tcx\n+                .thir_body(def)\n+                .unwrap_or_else(|_| (tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0)));\n             // We ran all queries that depended on THIR at the beginning\n             // of `mir_build`, so now we can steal it\n             let thir = thir.steal();\n@@ -229,7 +231,9 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n \n             let return_ty = typeck_results.node_type(id);\n \n-            let (thir, expr) = tcx.thir_body(def);\n+            let (thir, expr) = tcx\n+                .thir_body(def)\n+                .unwrap_or_else(|_| (tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0)));\n             // We ran all queries that depended on THIR at the beginning\n             // of `mir_build`, so now we can steal it\n             let thir = thir.steal();"}, {"sha": "122af3f621087122a2f2e1d7deeb2756952d8330", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -405,7 +405,9 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 } else {\n                     ty::WithOptConstParam::unknown(closure_id)\n                 };\n-                let (closure_thir, expr) = self.tcx.thir_body(closure_def);\n+                let (closure_thir, expr) = self.tcx.thir_body(closure_def).unwrap_or_else(|_| {\n+                    (self.tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0))\n+                });\n                 let closure_thir = &closure_thir.borrow();\n                 let hir_context = self.tcx.hir().local_def_id_to_hir_id(closure_id);\n                 let mut closure_visitor =\n@@ -606,7 +608,10 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n         return;\n     }\n \n-    let (thir, expr) = tcx.thir_body(def);\n+    let (thir, expr) = match tcx.thir_body(def) {\n+        Ok(body) => body,\n+        Err(_) => return,\n+    };\n     let thir = &thir.borrow();\n     // If `thir` is empty, a type error occurred, skip this body.\n     if thir.exprs.is_empty() {"}, {"sha": "426596bf13c0a6a6ac69e8b1e137f4b854c2dbb2", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -7,6 +7,7 @@ use crate::thir::util::UserAnnotatedTyHelpers;\n \n use rustc_ast as ast;\n use rustc_data_structures::steal::Steal;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::HirId;\n@@ -20,22 +21,25 @@ use rustc_span::Span;\n crate fn thir_body<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n-) -> (&'tcx Steal<Thir<'tcx>>, ExprId) {\n+) -> Result<(&'tcx Steal<Thir<'tcx>>, ExprId), ErrorGuaranteed> {\n     let hir = tcx.hir();\n     let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(owner_def.did)));\n     let mut cx = Cx::new(tcx, owner_def);\n-    if cx.typeck_results.tainted_by_errors.is_some() {\n-        return (tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0));\n+    if let Some(reported) = cx.typeck_results.tainted_by_errors {\n+        return Err(reported);\n     }\n     let expr = cx.mirror_expr(&body.value);\n-    (tcx.alloc_steal_thir(cx.thir), expr)\n+    Ok((tcx.alloc_steal_thir(cx.thir), expr))\n }\n \n crate fn thir_tree<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n ) -> String {\n-    format!(\"{:#?}\", thir_body(tcx, owner_def).0.steal())\n+    match thir_body(tcx, owner_def) {\n+        Ok((thir, _)) => format!(\"{:#?}\", thir.steal()),\n+        Err(_) => \"error\".into(),\n+    }\n }\n \n struct Cx<'tcx> {"}, {"sha": "2298cc7cddf47a26a220a27576e0094586e93bf3", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -194,7 +194,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                         self.id,\n                         self.span,\n-                        |lint| lint.build(&msg).emit(),\n+                        |lint| {\n+                            lint.build(&msg).emit();\n+                        },\n                     );\n                 } else {\n                     debug!(\n@@ -272,7 +274,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n                         id,\n                         span,\n-                        |lint| lint.build(\"floating-point types cannot be used in patterns\").emit(),\n+                        |lint| {\n+                            lint.build(\"floating-point types cannot be used in patterns\").emit();\n+                        },\n                     );\n                 }\n                 PatKind::Constant { value: cv }\n@@ -284,7 +288,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 if self.include_lint_checks {\n                     tcx.sess.span_err(span, msg);\n                 } else {\n-                    tcx.sess.delay_span_bug(span, msg)\n+                    tcx.sess.delay_span_bug(span, msg);\n                 }\n                 PatKind::Wild\n             }\n@@ -301,7 +305,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 if self.include_lint_checks {\n                     tcx.sess.span_err(self.span, &msg);\n                 } else {\n-                    tcx.sess.delay_span_bug(self.span, &msg)\n+                    tcx.sess.delay_span_bug(self.span, &msg);\n                 }\n                 PatKind::Wild\n             }\n@@ -331,7 +335,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                                 cv.ty(),\n                                 cv.ty(),\n                             );\n-                            lint.build(&msg).emit()\n+                            lint.build(&msg).emit();\n                         },\n                     );\n                 }\n@@ -356,7 +360,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 if self.include_lint_checks {\n                     tcx.sess.span_err(span, &msg);\n                 } else {\n-                    tcx.sess.delay_span_bug(span, &msg)\n+                    tcx.sess.delay_span_bug(span, &msg);\n                 }\n                 PatKind::Wild\n             }\n@@ -393,7 +397,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     if self.include_lint_checks {\n                         tcx.sess.span_err(span, &msg);\n                     } else {\n-                        tcx.sess.delay_span_bug(span, &msg)\n+                        tcx.sess.delay_span_bug(span, &msg);\n                     }\n                     PatKind::Wild\n                 }\n@@ -471,7 +475,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                                 lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                                 self.id,\n                                 self.span,\n-                                |lint| lint.build(&msg).emit(),\n+                                |lint| {lint.build(&msg).emit();},\n                             );\n                         }\n                         PatKind::Constant { value: cv }\n@@ -482,7 +486,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                             if self.include_lint_checks {\n                                 tcx.sess.span_err(span, &msg);\n                             } else {\n-                                tcx.sess.delay_span_bug(span, &msg)\n+                                tcx.sess.delay_span_bug(span, &msg);\n                             }\n                         }\n                         PatKind::Wild\n@@ -523,7 +527,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             ty::RawPtr(pointee) if pointee.ty.is_sized(tcx.at(span), param_env) => {\n                 PatKind::Constant { value: cv }\n             }\n-            // FIXME: these can have very suprising behaviour where optimization levels or other\n+            // FIXME: these can have very surprising behaviour where optimization levels or other\n             // compilation choices change the runtime behaviour of the match.\n             // See https://github.com/rust-lang/rust/issues/70861 for examples.\n             ty::FnPtr(..) | ty::RawPtr(..) => {\n@@ -539,7 +543,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                         lint::builtin::POINTER_STRUCTURAL_MATCH,\n                         id,\n                         span,\n-                        |lint| lint.build(&msg).emit(),\n+                        |lint| {\n+                            lint.build(&msg).emit();\n+                        },\n                     );\n                 }\n                 PatKind::Constant { value: cv }\n@@ -550,7 +556,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 if self.include_lint_checks {\n                     tcx.sess.span_err(span, &msg);\n                 } else {\n-                    tcx.sess.delay_span_bug(span, &msg)\n+                    tcx.sess.delay_span_bug(span, &msg);\n                 }\n                 PatKind::Wild\n             }\n@@ -575,7 +581,9 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 lint::builtin::NONTRIVIAL_STRUCTURAL_MATCH,\n                 id,\n                 span,\n-                |lint| lint.build(&msg).emit(),\n+                |lint| {\n+                    lint.build(&msg).emit();\n+                },\n             );\n         }\n "}, {"sha": "097a6186cd57a85d97b31ad9c926f9681e322938", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> ConstMutationChecker<'_, 'tcx> {\n         place: &Place<'tcx>,\n         const_item: DefId,\n         location: Location,\n-        decorate: impl for<'b> FnOnce(LintDiagnosticBuilder<'b>) -> DiagnosticBuilder<'b, ()>,\n+        decorate: impl for<'b> FnOnce(LintDiagnosticBuilder<'b, ()>) -> DiagnosticBuilder<'b, ()>,\n     ) {\n         // Don't lint on borrowing/assigning when a dereference is involved.\n         // If we 'leave' the temporary via a dereference, we must\n@@ -88,7 +88,7 @@ impl<'tcx> ConstMutationChecker<'_, 'tcx> {\n                 |lint| {\n                     decorate(lint)\n                         .span_note(self.tcx.def_span(const_item), \"`const` item defined here\")\n-                        .emit()\n+                        .emit();\n                 },\n             );\n         }"}, {"sha": "f0367958ef8c5e4e7f82cad7916cd245f0296083", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -46,7 +46,7 @@ fn unsafe_derive_on_repr_packed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n              does not derive Copy (error E0133)\"\n                 .to_string()\n         };\n-        lint.build(&message).emit()\n+        lint.build(&message).emit();\n     });\n }\n \n@@ -110,7 +110,7 @@ impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n                                     reference with a raw pointer and use `read_unaligned`/`write_unaligned` \\\n                                     (loads and stores via `*p` must be properly aligned even when using raw pointers)\"\n                                 )\n-                                .emit()\n+                                .emit();\n                         },\n                     );\n                 }"}, {"sha": "f8d0e448ce7d5a84ba70a9a9a7aeeb3b6a1085e9", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -156,7 +156,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n         // temporary holding the static pointer to avoid duplicate errors\n         // <https://github.com/rust-lang/rust/pull/78068#issuecomment-731753506>.\n         if decl.internal && place.projection.first() == Some(&ProjectionElem::Deref) {\n-            // If the projection root is an artifical local that we introduced when\n+            // If the projection root is an artificial local that we introduced when\n             // desugaring `static`, give a more specific error message\n             // (avoid the general \"raw pointer\" clause below, that would only be confusing).\n             if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {"}, {"sha": "3577b3d2d80c690ef07d5e6fb34247bea409ca60", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -60,7 +60,7 @@ fn find_optimization_oportunities<'tcx>(body: &Body<'tcx>) -> Vec<(Local, Consta\n         }\n     }\n \n-    let mut eligable_locals = Vec::new();\n+    let mut eligible_locals = Vec::new();\n     for (local, mutating_uses) in visitor.local_mutating_uses.drain_enumerated(..) {\n         if mutating_uses != 1 || !locals_to_debuginfo.contains(local) {\n             continue;\n@@ -78,13 +78,13 @@ fn find_optimization_oportunities<'tcx>(body: &Body<'tcx>) -> Vec<(Local, Consta\n                 &bb.statements[location.statement_index].kind\n             {\n                 if let Some(local) = p.as_local() {\n-                    eligable_locals.push((local, *c));\n+                    eligible_locals.push((local, *c));\n                 }\n             }\n         }\n     }\n \n-    eligable_locals\n+    eligible_locals\n }\n \n impl Visitor<'_> for LocalUseVisitor {"}, {"sha": "5ed33ab9fec17bf0d6a1b2a8ca086f5e313b5040", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -538,7 +538,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             self.tcx.struct_span_lint_hir(lint, lint_root, source_info.span, |lint| {\n                 let mut err = lint.build(message);\n                 err.span_label(source_info.span, format!(\"{:?}\", panic));\n-                err.emit()\n+                err.emit();\n             });\n         }\n     }"}, {"sha": "2bf97e5d43c768e490f4ada5bcf1ff12251c79b8", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -359,7 +359,7 @@ fn verify_candidate_branch<'tcx>(\n     if branch.statements.len() != 1 {\n         return false;\n     }\n-    // ...assign the descriminant of `place` in that statement\n+    // ...assign the discriminant of `place` in that statement\n     let StatementKind::Assign(boxed) = &branch.statements[0].kind else {\n         return false\n     };"}, {"sha": "ce4b45062e8de7d0ca9ab61351245ea7cb7c07b4", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -362,7 +362,7 @@ fn optimization_applies<'tcx>(\n         return false;\n     } else if last_assigned_to != opt_info.local_tmp_s1 {\n         trace!(\n-            \"NO: end of assignemnt chain does not match written enum temp: {:?} != {:?}\",\n+            \"NO: end of assignment chain does not match written enum temp: {:?} != {:?}\",\n             last_assigned_to,\n             opt_info.local_tmp_s1\n         );"}, {"sha": "a9dcc484b9e8de0f553e57b3977833c56aa79b8e", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -180,7 +180,7 @@\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n-use rustc_errors::{ErrorGuaranteed, FatalError};\n+use rustc_errors::FatalError;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -716,9 +716,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     match self.tcx.const_eval_resolve(param_env, ct, None) {\n                         // The `monomorphize` call should have evaluated that constant already.\n                         Ok(val) => val,\n-                        Err(ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted) => {\n-                            return;\n-                        }\n+                        Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => return,\n                         Err(ErrorHandled::TooGeneric) => span_bug!(\n                             self.body.source_info(location).span,\n                             \"collection encountered polymorphic constant: {:?}\",\n@@ -750,7 +748,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                         substituted_constant,\n                         val\n                     ),\n-                    Err(ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted) => {}\n+                    Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => {}\n                     Err(ErrorHandled::TooGeneric) => span_bug!(\n                         self.body.source_info(location).span,\n                         \"collection encountered polymorphic constant: {}\",\n@@ -864,7 +862,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     |lint| {\n                         let mut err = lint.build(&format!(\"moving {} bytes\", layout.size.bytes()));\n                         err.span_label(source_info.span, \"value moved from here\");\n-                        err.emit()\n+                        err.emit();\n                     },\n                 );\n             }"}, {"sha": "bec4561928cc259081ec91a482126e0b48702040", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -202,7 +202,7 @@ pub(crate) fn emit_unescape_error(\n             diag.emit();\n         }\n         EscapeError::TooShortHexEscape => {\n-            handler.span_err(span, \"numeric character escape is too short\")\n+            handler.span_err(span, \"numeric character escape is too short\");\n         }\n         EscapeError::InvalidCharInHexEscape | EscapeError::InvalidCharInUnicodeEscape => {\n             let (c, span) = last_char();"}, {"sha": "754ae12bbea41b01fd150cd5a61bb465bce0a2e9", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -151,7 +151,7 @@ impl<'a> Parser<'a> {\n         span: Span,\n         attr_type: OuterAttributeType,\n     ) -> Option<Span> {\n-        let mut snapshot = self.clone();\n+        let mut snapshot = self.create_snapshot_for_diagnostic();\n         let lo = span.lo()\n             + BytePos(match attr_type {\n                 OuterAttributeType::Attribute => 1,"}, {"sha": "b5b628a3f55bd1d3975b346cce96350101e8d194", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 65, "deletions": 22, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -5,6 +5,7 @@ use super::{\n     SemiColonMode, SeqSep, TokenExpectType, TokenType,\n };\n \n+use crate::lexer::UnmatchedBrace;\n use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Lit, LitKind, TokenKind};\n@@ -21,6 +22,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, Handler, PResult};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n+use std::ops::{Deref, DerefMut};\n \n use std::mem::take;\n \n@@ -154,6 +156,28 @@ impl AttemptLocalParseRecovery {\n     }\n }\n \n+// SnapshotParser is used to create a snapshot of the parser\n+// without causing duplicate errors being emitted when the `Parser`\n+// is dropped.\n+pub(super) struct SnapshotParser<'a> {\n+    parser: Parser<'a>,\n+    unclosed_delims: Vec<UnmatchedBrace>,\n+}\n+\n+impl<'a> Deref for SnapshotParser<'a> {\n+    type Target = Parser<'a>;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.parser\n+    }\n+}\n+\n+impl<'a> DerefMut for SnapshotParser<'a> {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.parser\n+    }\n+}\n+\n impl<'a> Parser<'a> {\n     pub(super) fn span_err<S: Into<MultiSpan>>(\n         &self,\n@@ -179,6 +203,25 @@ impl<'a> Parser<'a> {\n         &self.sess.span_diagnostic\n     }\n \n+    /// Relace `self` with `snapshot.parser` and extend `unclosed_delims` with `snapshot.unclosed_delims`.\n+    /// This is to avoid losing unclosed delims errors `create_snapshot_for_diagnostic` clears.\n+    pub(super) fn restore_snapshot(&mut self, snapshot: SnapshotParser<'a>) {\n+        *self = snapshot.parser;\n+        self.unclosed_delims.extend(snapshot.unclosed_delims.clone());\n+    }\n+\n+    /// Create a snapshot of the `Parser`.\n+    pub(super) fn create_snapshot_for_diagnostic(&self) -> SnapshotParser<'a> {\n+        let mut snapshot = self.clone();\n+        let unclosed_delims = self.unclosed_delims.clone();\n+        // Clear `unclosed_delims` in snapshot to avoid\n+        // duplicate errors being emitted when the `Parser`\n+        // is dropped (which may or may not happen, depending\n+        // if the parsing the snapshot is created for is successful)\n+        snapshot.unclosed_delims.clear();\n+        SnapshotParser { parser: snapshot, unclosed_delims }\n+    }\n+\n     pub(super) fn span_to_snippet(&self, span: Span) -> Result<String, SpanSnippetError> {\n         self.sess.source_map().span_to_snippet(span)\n     }\n@@ -438,7 +481,7 @@ impl<'a> Parser<'a> {\n             // fn foo() -> Foo {\n             //     field: value,\n             // }\n-            let mut snapshot = self.clone();\n+            let mut snapshot = self.create_snapshot_for_diagnostic();\n             let path =\n                 Path { segments: vec![], span: self.prev_token.span.shrink_to_lo(), tokens: None };\n             let struct_expr = snapshot.parse_struct_expr(None, path, AttrVec::new(), false);\n@@ -464,7 +507,7 @@ impl<'a> Parser<'a> {\n                             Applicability::MaybeIncorrect,\n                         )\n                         .emit();\n-                    *self = snapshot;\n+                    self.restore_snapshot(snapshot);\n                     let mut tail = self.mk_block(\n                         vec![self.mk_stmt_err(expr.span)],\n                         s,\n@@ -678,7 +721,7 @@ impl<'a> Parser<'a> {\n     /// angle brackets.\n     pub(super) fn check_turbofish_missing_angle_brackets(&mut self, segment: &mut PathSegment) {\n         if token::ModSep == self.token.kind && segment.args.is_none() {\n-            let snapshot = self.clone();\n+            let snapshot = self.create_snapshot_for_diagnostic();\n             self.bump();\n             let lo = self.token.span;\n             match self.parse_angle_args(None) {\n@@ -712,14 +755,14 @@ impl<'a> Parser<'a> {\n                         .emit();\n                     } else {\n                         // This doesn't look like an invalid turbofish, can't recover parse state.\n-                        *self = snapshot;\n+                        self.restore_snapshot(snapshot);\n                     }\n                 }\n                 Err(err) => {\n                     // We couldn't parse generic parameters, unlikely to be a turbofish. Rely on\n                     // generic parse error instead.\n                     err.cancel();\n-                    *self = snapshot;\n+                    self.restore_snapshot(snapshot);\n                 }\n             }\n         }\n@@ -825,7 +868,7 @@ impl<'a> Parser<'a> {\n                 // `x == y < z`\n                 (BinOpKind::Eq, AssocOp::Less | AssocOp::LessEqual | AssocOp::Greater | AssocOp::GreaterEqual) => {\n                     // Consume `z`/outer-op-rhs.\n-                    let snapshot = self.clone();\n+                    let snapshot = self.create_snapshot_for_diagnostic();\n                     match self.parse_expr() {\n                         Ok(r2) => {\n                             // We are sure that outer-op-rhs could be consumed, the suggestion is\n@@ -835,14 +878,14 @@ impl<'a> Parser<'a> {\n                         }\n                         Err(expr_err) => {\n                             expr_err.cancel();\n-                            *self = snapshot;\n+                            self.restore_snapshot(snapshot);\n                             false\n                         }\n                     }\n                 }\n                 // `x > y == z`\n                 (BinOpKind::Lt | BinOpKind::Le | BinOpKind::Gt | BinOpKind::Ge, AssocOp::Equal) => {\n-                    let snapshot = self.clone();\n+                    let snapshot = self.create_snapshot_for_diagnostic();\n                     // At this point it is always valid to enclose the lhs in parentheses, no\n                     // further checks are necessary.\n                     match self.parse_expr() {\n@@ -852,7 +895,7 @@ impl<'a> Parser<'a> {\n                         }\n                         Err(expr_err) => {\n                             expr_err.cancel();\n-                            *self = snapshot;\n+                            self.restore_snapshot(snapshot);\n                             false\n                         }\n                     }\n@@ -917,7 +960,7 @@ impl<'a> Parser<'a> {\n                     || outer_op.node == AssocOp::Greater\n                 {\n                     if outer_op.node == AssocOp::Less {\n-                        let snapshot = self.clone();\n+                        let snapshot = self.create_snapshot_for_diagnostic();\n                         self.bump();\n                         // So far we have parsed `foo<bar<`, consume the rest of the type args.\n                         let modifiers =\n@@ -929,15 +972,15 @@ impl<'a> Parser<'a> {\n                         {\n                             // We don't have `foo< bar >(` or `foo< bar >::`, so we rewind the\n                             // parser and bail out.\n-                            *self = snapshot.clone();\n+                            self.restore_snapshot(snapshot);\n                         }\n                     }\n                     return if token::ModSep == self.token.kind {\n                         // We have some certainty that this was a bad turbofish at this point.\n                         // `foo< bar >::`\n                         suggest(&mut err);\n \n-                        let snapshot = self.clone();\n+                        let snapshot = self.create_snapshot_for_diagnostic();\n                         self.bump(); // `::`\n \n                         // Consume the rest of the likely `foo<bar>::new()` or return at `foo<bar>`.\n@@ -954,7 +997,7 @@ impl<'a> Parser<'a> {\n                                 expr_err.cancel();\n                                 // Not entirely sure now, but we bubble the error up with the\n                                 // suggestion.\n-                                *self = snapshot;\n+                                self.restore_snapshot(snapshot);\n                                 Err(err)\n                             }\n                         }\n@@ -1008,7 +1051,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn consume_fn_args(&mut self) -> Result<(), ()> {\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n         self.bump(); // `(`\n \n         // Consume the fn call arguments.\n@@ -1018,7 +1061,7 @@ impl<'a> Parser<'a> {\n \n         if self.token.kind == token::Eof {\n             // Not entirely sure that what we consumed were fn arguments, rollback.\n-            *self = snapshot;\n+            self.restore_snapshot(snapshot);\n             Err(())\n         } else {\n             // 99% certain that the suggestion is correct, continue parsing.\n@@ -1959,12 +2002,12 @@ impl<'a> Parser<'a> {\n     }\n \n     fn recover_const_param_decl(&mut self, ty_generics: Option<&Generics>) -> Option<GenericArg> {\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n         let param = match self.parse_const_param(vec![]) {\n             Ok(param) => param,\n             Err(err) => {\n                 err.cancel();\n-                *self = snapshot;\n+                self.restore_snapshot(snapshot);\n                 return None;\n             }\n         };\n@@ -2056,7 +2099,7 @@ impl<'a> Parser<'a> {\n             // We perform these checks and early return to avoid taking a snapshot unnecessarily.\n             return Err(err);\n         }\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n         if is_op_or_dot {\n             self.bump();\n         }\n@@ -2101,7 +2144,7 @@ impl<'a> Parser<'a> {\n                 err.cancel();\n             }\n         }\n-        *self = snapshot;\n+        self.restore_snapshot(snapshot);\n         Err(err)\n     }\n \n@@ -2161,7 +2204,7 @@ impl<'a> Parser<'a> {\n         let span = self.token.span;\n         // We only emit \"unexpected `:`\" error here if we can successfully parse the\n         // whole pattern correctly in that case.\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n \n         // Create error for \"unexpected `:`\".\n         match self.expected_one_of_not_found(&[], &[]) {\n@@ -2173,7 +2216,7 @@ impl<'a> Parser<'a> {\n                         // reasonable error.\n                         inner_err.cancel();\n                         err.cancel();\n-                        *self = snapshot;\n+                        self.restore_snapshot(snapshot);\n                     }\n                     Ok(mut pat) => {\n                         // We've parsed the rest of the pattern.\n@@ -2252,7 +2295,7 @@ impl<'a> Parser<'a> {\n             }\n             _ => {\n                 // Carry on as if we had not done anything. This should be unreachable.\n-                *self = snapshot;\n+                self.restore_snapshot(snapshot);\n             }\n         };\n         first_pat"}, {"sha": "ef006d5fcda8cf5a0fe65caa0413eacc644dbd8f", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -703,7 +703,7 @@ impl<'a> Parser<'a> {\n                         ExprKind::Path(None, ast::Path { segments, .. }),\n                         TokenKind::Ident(kw::For | kw::Loop | kw::While, false),\n                     ) if segments.len() == 1 => {\n-                        let snapshot = self.clone();\n+                        let snapshot = self.create_snapshot_for_diagnostic();\n                         let label = Label {\n                             ident: Ident::from_str_and_span(\n                                 &format!(\"'{}\", segments[0].ident),\n@@ -725,7 +725,7 @@ impl<'a> Parser<'a> {\n                             }\n                             Err(err) => {\n                                 err.cancel();\n-                                *self = snapshot;\n+                                self.restore_snapshot(snapshot);\n                             }\n                         }\n                     }\n@@ -1885,7 +1885,7 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         attrs: AttrVec,\n     ) -> Option<P<Expr>> {\n-        let mut snapshot = self.clone();\n+        let mut snapshot = self.create_snapshot_for_diagnostic();\n         match snapshot.parse_array_or_repeat_expr(attrs, token::Brace) {\n             Ok(arr) => {\n                 let hi = snapshot.prev_token.span;\n@@ -1901,7 +1901,7 @@ impl<'a> Parser<'a> {\n                 .note(\"to define an array, one would use square brackets instead of curly braces\")\n                 .emit();\n \n-                *self = snapshot;\n+                self.restore_snapshot(snapshot);\n                 Some(self.mk_expr_err(arr.span))\n             }\n             Err(e) => {\n@@ -2369,7 +2369,7 @@ impl<'a> Parser<'a> {\n         if self.token.kind != token::Semi {\n             return None;\n         }\n-        let start_snapshot = self.clone();\n+        let start_snapshot = self.create_snapshot_for_diagnostic();\n         let semi_sp = self.token.span;\n         self.bump(); // `;`\n         let mut stmts =\n@@ -2417,15 +2417,15 @@ impl<'a> Parser<'a> {\n                 return Some(err(self, stmts));\n             }\n             if self.token.kind == token::Comma {\n-                *self = start_snapshot;\n+                self.restore_snapshot(start_snapshot);\n                 return None;\n             }\n-            let pre_pat_snapshot = self.clone();\n+            let pre_pat_snapshot = self.create_snapshot_for_diagnostic();\n             match self.parse_pat_no_top_alt(None) {\n                 Ok(_pat) => {\n                     if self.token.kind == token::FatArrow {\n                         // Reached arm end.\n-                        *self = pre_pat_snapshot;\n+                        self.restore_snapshot(pre_pat_snapshot);\n                         return Some(err(self, stmts));\n                     }\n                 }\n@@ -2434,21 +2434,21 @@ impl<'a> Parser<'a> {\n                 }\n             }\n \n-            *self = pre_pat_snapshot;\n+            self.restore_snapshot(pre_pat_snapshot);\n             match self.parse_stmt_without_recovery(true, ForceCollect::No) {\n                 // Consume statements for as long as possible.\n                 Ok(Some(stmt)) => {\n                     stmts.push(stmt);\n                 }\n                 Ok(None) => {\n-                    *self = start_snapshot;\n+                    self.restore_snapshot(start_snapshot);\n                     break;\n                 }\n                 // We couldn't parse either yet another statement missing it's\n                 // enclosing block nor the next arm's pattern or closing brace.\n                 Err(stmt_err) => {\n                     stmt_err.cancel();\n-                    *self = start_snapshot;\n+                    self.restore_snapshot(start_snapshot);\n                     break;\n                 }\n             }"}, {"sha": "e949059099c915f7e5322c8d9eae28fd783cb6bf", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -212,10 +212,10 @@ impl<'a> Parser<'a> {\n             if let Err(mut e) = self.expect_semi() {\n                 match tree.kind {\n                     UseTreeKind::Glob => {\n-                        e.note(\"the wildcard token must be last on the path\").emit();\n+                        e.note(\"the wildcard token must be last on the path\");\n                     }\n                     UseTreeKind::Nested(..) => {\n-                        e.note(\"glob-like brace syntax must be last on the path\").emit();\n+                        e.note(\"glob-like brace syntax must be last on the path\");\n                     }\n                     _ => (),\n                 }\n@@ -999,10 +999,32 @@ impl<'a> Parser<'a> {\n         attrs: &mut Vec<Attribute>,\n         unsafety: Unsafe,\n     ) -> PResult<'a, ItemInfo> {\n+        let sp_start = self.prev_token.span;\n         let abi = self.parse_abi(); // ABI?\n-        let items = self.parse_item_list(attrs, |p| p.parse_foreign_item(ForceCollect::No))?;\n-        let module = ast::ForeignMod { unsafety, abi, items };\n-        Ok((Ident::empty(), ItemKind::ForeignMod(module)))\n+        match self.parse_item_list(attrs, |p| p.parse_foreign_item(ForceCollect::No)) {\n+            Ok(items) => {\n+                let module = ast::ForeignMod { unsafety, abi, items };\n+                Ok((Ident::empty(), ItemKind::ForeignMod(module)))\n+            }\n+            Err(mut err) => {\n+                let current_qual_sp = self.prev_token.span;\n+                let current_qual_sp = current_qual_sp.to(sp_start);\n+                if let Ok(current_qual) = self.span_to_snippet(current_qual_sp) {\n+                    if err.message() == \"expected `{`, found keyword `unsafe`\" {\n+                        let invalid_qual_sp = self.token.uninterpolated_span();\n+                        let invalid_qual = self.span_to_snippet(invalid_qual_sp).unwrap();\n+\n+                        err.span_suggestion(\n+                                current_qual_sp.to(invalid_qual_sp),\n+                                &format!(\"`{}` must come before `{}`\", invalid_qual, current_qual),\n+                                format!(\"{} {}\", invalid_qual, current_qual),\n+                                Applicability::MachineApplicable,\n+                            ).note(\"keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\");\n+                    }\n+                }\n+                Err(err)\n+            }\n+        }\n     }\n \n     /// Parses a foreign item (one in an `extern { ... }` block).\n@@ -1485,7 +1507,7 @@ impl<'a> Parser<'a> {\n                     // Make sure an error was emitted (either by recovering an angle bracket,\n                     // or by finding an identifier as the next token), since we're\n                     // going to continue parsing\n-                    assert!(self.sess.span_diagnostic.has_errors());\n+                    assert!(self.sess.span_diagnostic.has_errors().is_some());\n                 } else {\n                     return Err(err);\n                 }\n@@ -1948,7 +1970,7 @@ impl<'a> Parser<'a> {\n         // We use an over-approximation here.\n         // `const const`, `fn const` won't parse, but we're not stepping over other syntax either.\n         // `pub` is added in case users got confused with the ordering like `async pub fn`,\n-        // only if it wasn't preceeded by `default` as `default pub` is invalid.\n+        // only if it wasn't preceded by `default` as `default pub` is invalid.\n         let quals: &[Symbol] = if check_pub {\n             &[kw::Pub, kw::Const, kw::Async, kw::Unsafe, kw::Extern]\n         } else {"}, {"sha": "17c57867cf9cfff8435f098efa7891060d29a860", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -624,9 +624,18 @@ impl<'a> Parser<'a> {\n             GenericArg::Const(self.parse_const_arg()?)\n         } else if self.check_type() {\n             // Parse type argument.\n+            let is_const_fn = self.look_ahead(1, |t| t.kind == token::OpenDelim(token::Paren));\n+            let mut snapshot = self.create_snapshot_for_diagnostic();\n             match self.parse_ty() {\n                 Ok(ty) => GenericArg::Type(ty),\n                 Err(err) => {\n+                    if is_const_fn {\n+                        if let Ok(expr) = (*snapshot).parse_expr_res(Restrictions::CONST_EXPR, None)\n+                        {\n+                            self.restore_snapshot(snapshot);\n+                            return Ok(Some(self.dummy_const_arg_needs_braces(err, expr.span)));\n+                        }\n+                    }\n                     // Try to recover from possible `const` arg without braces.\n                     return self.recover_const_arg(start, err).map(Some);\n                 }\n@@ -636,7 +645,7 @@ impl<'a> Parser<'a> {\n         } else {\n             // Fall back by trying to parse a const-expr expression. If we successfully do so,\n             // then we should report an error that it needs to be wrapped in braces.\n-            let snapshot = self.clone();\n+            let snapshot = self.create_snapshot_for_diagnostic();\n             match self.parse_expr_res(Restrictions::CONST_EXPR, None) {\n                 Ok(expr) => {\n                     return Ok(Some(self.dummy_const_arg_needs_braces(\n@@ -645,7 +654,7 @@ impl<'a> Parser<'a> {\n                     )));\n                 }\n                 Err(err) => {\n-                    *self = snapshot;\n+                    self.restore_snapshot(snapshot);\n                     err.cancel();\n                     return Ok(None);\n                 }"}, {"sha": "ebf6678d3ad37f7a5dc5ba644b685cc687a056ce", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -169,7 +169,7 @@ impl CheckAttrVisitor<'_> {\n                             }\n                             ast::AttrStyle::Inner => \"crate-level attribute should be in the root module\",\n                         };\n-                        lint.build(msg).emit()\n+                        lint.build(msg).emit();\n                     });\n                 }\n             }\n@@ -236,7 +236,7 @@ impl CheckAttrVisitor<'_> {\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n             Target::Method(MethodKind::Trait { body: false }) | Target::ForeignFn => {\n                 self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n-                    lint.build(\"`#[inline]` is ignored on function prototypes\").emit()\n+                    lint.build(\"`#[inline]` is ignored on function prototypes\").emit();\n                 });\n                 true\n             }"}, {"sha": "7298aba7e8763ddf4be9295dacf8e8fafd430f8e", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1588,7 +1588,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                                 shorthands,\n                                 Applicability::MachineApplicable,\n                             );\n-                            err.emit()\n+                            err.emit();\n                         },\n                     );\n                 } else {\n@@ -1611,7 +1611,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                                 non_shorthands,\n                                 Applicability::MachineApplicable,\n                             );\n-                            err.emit()\n+                            err.emit();\n                         },\n                     );\n                 }"}, {"sha": "09be1dac6f1638e33abbfd353a477492cb03b656", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                             String::new(),\n                             rustc_errors::Applicability::MachineApplicable,\n                         )\n-                        .emit()\n+                        .emit();\n                 });\n             }\n \n@@ -728,10 +728,10 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n                                 INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n                                 item.hir_id(),\n                                 span,\n-                                |lint| lint\n+                                |lint| {lint\n                                     .build(\"an `#[unstable]` annotation here has no effect\")\n                                     .note(\"see issue #55436 <https://github.com/rust-lang/rust/issues/55436> for more information\")\n-                                    .emit()\n+                                    .emit();}\n                             );\n                         }\n                     }"}, {"sha": "1f286d557ca0baf5dfdae0138e4c92d802e1a575", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1742,7 +1742,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                         descr,\n                         self.tcx.crate_name(def_id.krate)\n                     ))\n-                    .emit()\n+                    .emit();\n                 },\n             );\n         }\n@@ -1786,7 +1786,9 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                     lint::builtin::PRIVATE_IN_PUBLIC,\n                     hir_id,\n                     span,\n-                    |lint| lint.build(&format!(\"{} (error {})\", make_msg(), err_code)).emit(),\n+                    |lint| {\n+                        lint.build(&format!(\"{} (error {})\", make_msg(), err_code)).emit();\n+                    },\n                 );\n             }\n         }"}, {"sha": "1394f4083d0b9a1c4b58d347688e64a4ffe0860f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1997,7 +1997,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     Vec::new(),\n                     &[],\n                 );\n-                db.emit()\n+                db.emit();\n             },\n         );\n     }"}, {"sha": "ecdbe12c9abd85c7b20b6bef9f8529579e5642a7", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -2002,7 +2002,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                     if !matches!(opaque.origin, hir::OpaqueTyOrigin::AsyncFn(..)) {\n                                         continue 'lifetimes;\n                                     }\n-                                    // We want to do this only if the liftime identifier is already defined\n+                                    // We want to do this only if the lifetime identifier is already defined\n                                     // in the async function that generated this. Otherwise it could be\n                                     // an opaque type defined by the developer and we still want this\n                                     // lint to fail compilation\n@@ -3143,10 +3143,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             for bound in lifetime_i.bounds {\n                 match bound {\n                     hir::GenericBound::Outlives(ref lt) => match lt.name {\n-                        hir::LifetimeName::Underscore => self.tcx.sess.delay_span_bug(\n-                            lt.span,\n-                            \"use of `'_` in illegal place, but not caught by lowering\",\n-                        ),\n+                        hir::LifetimeName::Underscore => {\n+                            self.tcx.sess.delay_span_bug(\n+                                lt.span,\n+                                \"use of `'_` in illegal place, but not caught by lowering\",\n+                            );\n+                        }\n                         hir::LifetimeName::Static => {\n                             self.insert_lifetime(lt, Region::Static);\n                             self.tcx\n@@ -3172,7 +3174,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                 lt.span,\n                                 \"lowering generated `ImplicitObjectLifetimeDefault` \\\n                                  outside of an object type\",\n-                            )\n+                            );\n                         }\n                         hir::LifetimeName::Error => {\n                             // No need to do anything, error already reported."}, {"sha": "14420909f502ac31e327323166a0e6ebda323216", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -223,7 +223,7 @@ top_level_options!(\n         /// `true` if we're emitting a JSON blob containing the unused externs\n         json_unused_externs: bool [UNTRACKED],\n \n-        /// `true` if we're emitting a JSON job containg a future-incompat report for lints\n+        /// `true` if we're emitting a JSON job containing a future-incompat report for lints\n         json_future_incompat: bool [TRACKED],\n \n         pretty: Option<PpMode> [UNTRACKED],"}, {"sha": "7f696da86f20ea54eac2c356f7051ec4707792ce", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -100,7 +100,7 @@ pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n             match sp {\n                 Some(sp) => sess.span_err(sp, s),\n                 None => sess.err(s),\n-            }\n+            };\n             err_count += 1;\n         };\n         if s.is_empty() {"}, {"sha": "36bbccf1b9028c5d01388c55b5f4c8b2bfadd562", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -69,7 +69,7 @@ pub struct SymbolGallery {\n \n impl SymbolGallery {\n     /// Insert a symbol and its span into symbol gallery.\n-    /// If the symbol has occurred before, ignore the new occurrance.\n+    /// If the symbol has occurred before, ignore the new occurrence.\n     pub fn insert(&self, symbol: Symbol, span: Span) {\n         self.symbols.lock().entry(symbol).or_insert(span);\n     }"}, {"sha": "7eeb6f90f99d9e5578ccbb39ba7bb3fbece00727", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -262,7 +262,7 @@ impl Session {\n             }\n             diag.emit();\n             // If we should err, make sure we did.\n-            if must_err && !self.has_errors() {\n+            if must_err && !self.has_errors().is_some() {\n                 // We have skipped a feature gate, and not run into other errors... reject.\n                 self.err(\n                     \"`-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature \\\n@@ -404,13 +404,13 @@ impl Session {\n             self.span_err(sp, msg);\n         }\n     }\n-    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n+    pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ErrorGuaranteed {\n         self.diagnostic().span_err(sp, msg)\n     }\n     pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n         self.diagnostic().span_err_with_code(sp, &msg, code)\n     }\n-    pub fn err(&self, msg: &str) {\n+    pub fn err(&self, msg: &str) -> ErrorGuaranteed {\n         self.diagnostic().err(msg)\n     }\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n@@ -420,7 +420,7 @@ impl Session {\n     pub fn err_count(&self) -> usize {\n         self.diagnostic().err_count()\n     }\n-    pub fn has_errors(&self) -> bool {\n+    pub fn has_errors(&self) -> Option<ErrorGuaranteed> {\n         self.diagnostic().has_errors()\n     }\n     pub fn has_errors_or_delayed_span_bugs(&self) -> bool {\n@@ -430,9 +430,9 @@ impl Session {\n         self.diagnostic().abort_if_errors();\n     }\n     pub fn compile_status(&self) -> Result<(), ErrorGuaranteed> {\n-        if self.diagnostic().has_errors_or_lint_errors() {\n-            self.diagnostic().emit_stashed_diagnostics();\n-            Err(ErrorGuaranteed)\n+        if let Some(reported) = self.diagnostic().has_errors_or_lint_errors() {\n+            let _ = self.diagnostic().emit_stashed_diagnostics();\n+            Err(reported)\n         } else {\n             Ok(())\n         }\n@@ -444,7 +444,11 @@ impl Session {\n     {\n         let old_count = self.err_count();\n         let result = f();\n-        if self.err_count() == old_count { Ok(result) } else { Err(ErrorGuaranteed) }\n+        if self.err_count() == old_count {\n+            Ok(result)\n+        } else {\n+            Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+        }\n     }\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().span_warn(sp, msg)\n@@ -457,7 +461,7 @@ impl Session {\n     }\n     /// Delay a span_bug() call until abort_if_errors()\n     #[track_caller]\n-    pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n+    pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ErrorGuaranteed {\n         self.diagnostic().delay_span_bug(sp, msg)\n     }\n \n@@ -1387,12 +1391,18 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     let unsupported_sanitizers = sess.opts.debugging_opts.sanitizer - supported_sanitizers;\n     match unsupported_sanitizers.into_iter().count() {\n         0 => {}\n-        1 => sess\n-            .err(&format!(\"{} sanitizer is not supported for this target\", unsupported_sanitizers)),\n-        _ => sess.err(&format!(\n-            \"{} sanitizers are not supported for this target\",\n-            unsupported_sanitizers\n-        )),\n+        1 => {\n+            sess.err(&format!(\n+                \"{} sanitizer is not supported for this target\",\n+                unsupported_sanitizers\n+            ));\n+        }\n+        _ => {\n+            sess.err(&format!(\n+                \"{} sanitizers are not supported for this target\",\n+                unsupported_sanitizers\n+            ));\n+        }\n     }\n     // Cannot mix and match sanitizers.\n     let mut sanitizer_iter = sess.opts.debugging_opts.sanitizer.into_iter();\n@@ -1446,7 +1456,7 @@ pub enum IncrCompSession {\n     InvalidBecauseOfErrors { session_directory: PathBuf },\n }\n \n-pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) {\n+pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) -> ErrorGuaranteed {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -1457,7 +1467,8 @@ pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) {\n         }\n     };\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n-    handler.struct_fatal(msg).emit();\n+    let reported = handler.struct_fatal(msg).emit();\n+    reported\n }\n \n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {"}, {"sha": "a33f94013d24c6f33ac5004c0201826d96ea0797", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -29,14 +29,14 @@ pub enum NativeLibKind {\n     /// Dynamic library (e.g. `libfoo.so` on Linux)\n     /// or an import library corresponding to a dynamic library (e.g. `foo.lib` on Windows/MSVC).\n     Dylib {\n-        /// Whether the dynamic library will be linked only if it satifies some undefined symbols\n+        /// Whether the dynamic library will be linked only if it satisfies some undefined symbols\n         as_needed: Option<bool>,\n     },\n     /// Dynamic library (e.g. `foo.dll` on Windows) without a corresponding import library.\n     RawDylib,\n     /// A macOS-specific kind of dynamic libraries.\n     Framework {\n-        /// Whether the framework will be linked only if it satifies some undefined symbols\n+        /// Whether the framework will be linked only if it satisfies some undefined symbols\n         as_needed: Option<bool>,\n     },\n     /// The library kind wasn't specified, `Dylib` is currently used as a default."}, {"sha": "523a1066a1c3c7a35d7c806420186805517c562d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -563,6 +563,7 @@ symbols! {\n         delay_span_bug_from_inside_query,\n         deny,\n         deprecated,\n+        deprecated_safe,\n         deprecated_suggestion,\n         deref,\n         deref_method,"}, {"sha": "a5503b04ff629f8681514e9b84608d1f4188a6c3", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -226,7 +226,7 @@ fn compute_symbol_name<'tcx>(\n \n         // If we're dealing with an instance of a function that's inlined from\n         // another crate but we're marking it as globally shared to our\n-        // compliation (aka we're not making an internal copy in each of our\n+        // compilation (aka we're not making an internal copy in each of our\n         // codegen units) then this symbol may become an exported (but hidden\n         // visibility) symbol. This means that multiple crates may do the same\n         // and we want to be sure to avoid any symbol conflicts here."}, {"sha": "6082cdb78e478eae8a97ffce5d28f7f58d5cd778", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1105,7 +1105,7 @@ impl Niche {\n \n         // Extend the range of valid values being reserved by moving either `v.start` or `v.end` bound.\n         // Given an eventual `Option<T>`, we try to maximize the chance for `None` to occupy the niche of zero.\n-        // This is accomplished by prefering enums with 2 variants(`count==1`) and always taking the shortest path to niche zero.\n+        // This is accomplished by preferring enums with 2 variants(`count==1`) and always taking the shortest path to niche zero.\n         // Having `None` in niche zero can enable some special optimizations.\n         //\n         // Bound selection criteria:"}, {"sha": "a607fb6c1b87c392c2547ed9f88fed1eddf02939", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -51,29 +51,29 @@ pub fn codegen_fulfill_obligation<'tcx>(\n                 // leading to an ambiguous result. So report this as an\n                 // overflow bug, since I believe this is the only case\n                 // where ambiguity can result.\n-                infcx.tcx.sess.delay_span_bug(\n+                let reported = infcx.tcx.sess.delay_span_bug(\n                     rustc_span::DUMMY_SP,\n                     &format!(\n                         \"encountered ambiguity selecting `{:?}` during codegen, presuming due to \\\n                          overflow or prior type error\",\n                         trait_ref\n                     ),\n                 );\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n             Err(Unimplemented) => {\n                 // This can trigger when we probe for the source of a `'static` lifetime requirement\n                 // on a trait object: `impl Foo for dyn Trait {}` has an implicit `'static` bound.\n                 // This can also trigger when we have a global bound that is not actually satisfied,\n                 // but was included during typeck due to the trivial_bounds feature.\n-                infcx.tcx.sess.delay_span_bug(\n+                let guar = infcx.tcx.sess.delay_span_bug(\n                     rustc_span::DUMMY_SP,\n                     &format!(\n                         \"Encountered error `Unimplemented` selecting `{:?}` during codegen\",\n                         trait_ref\n                     ),\n                 );\n-                return Err(ErrorGuaranteed);\n+                return Err(guar);\n             }\n             Err(e) => {\n                 bug!(\"Encountered error `{:?}` selecting `{:?}` during codegen\", e, trait_ref)"}, {"sha": "40a39c4cfc2e39564eed2c6cd2f87d4c28eddc84", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::thir;\n use rustc_middle::thir::abstract_const::{self, Node, NodeId, NotConstEvaluatable};\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, DelaySpanBugEmitted, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n@@ -177,8 +177,9 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n             false => NotConstEvaluatable::MentionsParam,\n         }),\n         Err(ErrorHandled::Linted) => {\n-            infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n-            Err(NotConstEvaluatable::Error(ErrorGuaranteed))\n+            let reported =\n+                infcx.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n+            Err(NotConstEvaluatable::Error(reported))\n         }\n         Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n         Ok(_) => Ok(()),\n@@ -244,7 +245,7 @@ impl<'tcx> AbstractConst<'tcx> {\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorGuaranteed> {\n         match ct.val() {\n             ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv.shrink()),\n-            ty::ConstKind::Error(_) => Err(ErrorGuaranteed),\n+            ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => Err(reported),\n             _ => Ok(None),\n         }\n     }\n@@ -280,25 +281,27 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n     }\n \n     fn error(&mut self, span: Span, msg: &str) -> Result<!, ErrorGuaranteed> {\n-        self.tcx\n+        let reported = self\n+            .tcx\n             .sess\n             .struct_span_err(self.root_span(), \"overly complex generic constant\")\n             .span_label(span, msg)\n             .help(\"consider moving this anonymous constant into a `const` function\")\n             .emit();\n \n-        Err(ErrorGuaranteed)\n+        Err(reported)\n     }\n     fn maybe_supported_error(&mut self, span: Span, msg: &str) -> Result<!, ErrorGuaranteed> {\n-        self.tcx\n+        let reported = self\n+            .tcx\n             .sess\n             .struct_span_err(self.root_span(), \"overly complex generic constant\")\n             .span_label(span, msg)\n             .help(\"consider moving this anonymous constant into a `const` function\")\n             .note(\"this operation may be supported in the future\")\n             .emit();\n \n-        Err(ErrorGuaranteed)\n+        Err(reported)\n     }\n \n     fn new(\n@@ -553,11 +556,7 @@ pub(super) fn thir_abstract_const<'tcx>(\n             _ => return Ok(None),\n         }\n \n-        let body = tcx.thir_body(def);\n-        if body.0.borrow().exprs.is_empty() {\n-            // type error in constant, there is no thir\n-            return Err(ErrorGuaranteed);\n-        }\n+        let body = tcx.thir_body(def)?;\n \n         AbstractConstBuilder::new(tcx, (&*body.0.borrow(), body.1))?\n             .map(AbstractConstBuilder::build)\n@@ -580,7 +579,7 @@ pub(super) fn try_unify_abstract_consts<'tcx>(\n \n         Ok(false)\n     })()\n-    .unwrap_or_else(|ErrorGuaranteed| true)\n+    .unwrap_or_else(|_: ErrorGuaranteed| true)\n     // FIXME(generic_const_exprs): We should instead have this\n     // method return the resulting `ty::Const` and return `ConstKind::Error`\n     // on `ErrorGuaranteed`."}, {"sha": "229e108d5d64070322005adec4cd33e4962119ba", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -63,7 +63,7 @@ pub trait InferCtxtExt<'tcx> {\n         errors: &[FulfillmentError<'tcx>],\n         body_id: Option<hir::BodyId>,\n         fallback_has_occurred: bool,\n-    );\n+    ) -> ErrorGuaranteed;\n \n     fn report_overflow_error<T>(\n         &self,\n@@ -111,7 +111,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         errors: &[FulfillmentError<'tcx>],\n         body_id: Option<hir::BodyId>,\n         fallback_has_occurred: bool,\n-    ) {\n+    ) -> ErrorGuaranteed {\n         #[derive(Debug)]\n         struct ErrorDescriptor<'tcx> {\n             predicate: ty::Predicate<'tcx>,\n@@ -190,6 +190,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 self.report_fulfillment_error(error, body_id, fallback_has_occurred);\n             }\n         }\n+\n+        self.tcx.sess.delay_span_bug(DUMMY_SP, \"expected fullfillment errors\")\n     }\n \n     /// Reports that an overflow has occurred and halts compilation. We\n@@ -312,7 +314,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         let predicate_is_const = ty::BoundConstness::ConstIfConst\n                             == trait_predicate.skip_binder().constness;\n \n-                        if self.tcx.sess.has_errors() && trait_predicate.references_error() {\n+                        if self.tcx.sess.has_errors().is_some()\n+                            && trait_predicate.references_error()\n+                        {\n                             return;\n                         }\n                         let trait_ref = trait_predicate.to_poly_trait_ref();\n@@ -919,7 +923,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n \n             // Already reported in the query.\n-            SelectionError::NotConstEvaluatable(NotConstEvaluatable::Error(ErrorGuaranteed)) => {\n+            SelectionError::NotConstEvaluatable(NotConstEvaluatable::Error(_)) => {\n                 // FIXME(eddyb) remove this once `ErrorGuaranteed` becomes a proof token.\n                 self.tcx.sess.delay_span_bug(span, \"`ErrorGuaranteed` without an error\");\n                 return;\n@@ -1857,7 +1861,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 // Same hacky approach as above to avoid deluging user\n                 // with error messages.\n                 if arg.references_error()\n-                    || self.tcx.sess.has_errors()\n+                    || self.tcx.sess.has_errors().is_some()\n                     || self.is_tainted_by_errors()\n                 {\n                     return;\n@@ -1868,7 +1872,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n             ty::PredicateKind::Subtype(data) => {\n                 if data.references_error()\n-                    || self.tcx.sess.has_errors()\n+                    || self.tcx.sess.has_errors().is_some()\n                     || self.is_tainted_by_errors()\n                 {\n                     // no need to overload user in such cases\n@@ -1910,7 +1914,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             }\n \n             _ => {\n-                if self.tcx.sess.has_errors() || self.is_tainted_by_errors() {\n+                if self.tcx.sess.has_errors().is_some() || self.is_tainted_by_errors() {\n                     return;\n                 }\n                 let mut err = struct_span_err!("}, {"sha": "9ac8dc59a1d1ea9110f39f2fe8f4b6d2a8ec636e", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -3,7 +3,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n-use rustc_errors::ErrorGuaranteed;\n use rustc_infer::traits::ProjectionCacheKey;\n use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -630,14 +629,12 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                                 ),\n                             }\n                         }\n-                        (Err(ErrorHandled::Reported(ErrorGuaranteed)), _)\n-                        | (_, Err(ErrorHandled::Reported(ErrorGuaranteed))) => {\n-                            ProcessResult::Error(CodeSelectionError(\n-                                SelectionError::NotConstEvaluatable(NotConstEvaluatable::Error(\n-                                    ErrorGuaranteed,\n-                                )),\n-                            ))\n-                        }\n+                        (Err(ErrorHandled::Reported(reported)), _)\n+                        | (_, Err(ErrorHandled::Reported(reported))) => ProcessResult::Error(\n+                            CodeSelectionError(SelectionError::NotConstEvaluatable(\n+                                NotConstEvaluatable::Error(reported),\n+                            )),\n+                        ),\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n                                 obligation.cause.span(self.selcx.tcx()),"}, {"sha": "3a6ca9b7624f01acc10c77a0a3499bc2130d4439", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -231,8 +231,8 @@ fn do_normalize_predicates<'tcx>(\n             match fully_normalize(&infcx, fulfill_cx, cause, elaborated_env, predicates) {\n                 Ok(predicates) => predicates,\n                 Err(errors) => {\n-                    infcx.report_fulfillment_errors(&errors, None, false);\n-                    return Err(ErrorGuaranteed);\n+                    let reported = infcx.report_fulfillment_errors(&errors, None, false);\n+                    return Err(reported);\n                 }\n             };\n \n@@ -258,13 +258,15 @@ fn do_normalize_predicates<'tcx>(\n                 // represents a legitimate failure due to some kind of\n                 // unconstrained variable, and it seems better not to ICE,\n                 // all things considered.\n-                tcx.sess.span_err(span, &fixup_err.to_string());\n-                return Err(ErrorGuaranteed);\n+                let reported = tcx.sess.span_err(span, &fixup_err.to_string());\n+                return Err(reported);\n             }\n         };\n         if predicates.needs_infer() {\n-            tcx.sess.delay_span_bug(span, \"encountered inference variables after `fully_resolve`\");\n-            Err(ErrorGuaranteed)\n+            let reported = tcx\n+                .sess\n+                .delay_span_bug(span, \"encountered inference variables after `fully_resolve`\");\n+            Err(reported)\n         } else {\n             Ok(predicates)\n         }\n@@ -536,7 +538,7 @@ fn prepare_vtable_segments<'tcx, T>(\n \n     // the main traversal loop:\n     // basically we want to cut the inheritance directed graph into a few non-overlapping slices of nodes\n-    // that each node is emited after all its descendents have been emitted.\n+    // that each node is emitted after all its descendents have been emitted.\n     // so we convert the directed graph into a tree by skipping all previously visted nodes using a visited set.\n     // this is done on the fly.\n     // Each loop run emits a slice - it starts by find a \"childless\" unvisited node, backtracking upwards, and it\n@@ -551,10 +553,10 @@ fn prepare_vtable_segments<'tcx, T>(\n     // Starting point 0 stack [D]\n     // Loop run #0: Stack after diving in is [D B A], A is \"childless\"\n     // after this point, all newly visited nodes won't have a vtable that equals to a prefix of this one.\n-    // Loop run #0: Emiting the slice [B A] (in reverse order), B has a next-sibling node, so this slice stops here.\n+    // Loop run #0: Emitting the slice [B A] (in reverse order), B has a next-sibling node, so this slice stops here.\n     // Loop run #0: Stack after exiting out is [D C], C is the next starting point.\n     // Loop run #1: Stack after diving in is [D C], C is \"childless\", since its child A is skipped(already emitted).\n-    // Loop run #1: Emiting the slice [D C] (in reverse order). No one has a next-sibling node.\n+    // Loop run #1: Emitting the slice [D C] (in reverse order). No one has a next-sibling node.\n     // Loop run #1: Stack after exiting out is []. Now the function exits.\n \n     loop {"}, {"sha": "38be28c07ff1837045528590c2bbdc3a8b43308f", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, GenericParamDefKind, TyCtxt};\n use rustc_parse_format::{ParseMode, Parser, Piece, Position};\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n \n #[derive(Clone, Debug)]\n pub struct OnUnimplementedFormatString(Symbol);\n@@ -47,8 +47,7 @@ fn parse_error(\n     if let Some(note) = note {\n         diag.note(note);\n     }\n-    diag.emit();\n-    ErrorGuaranteed\n+    diag.emit()\n }\n \n impl<'tcx> OnUnimplementedDirective {\n@@ -59,7 +58,7 @@ impl<'tcx> OnUnimplementedDirective {\n         span: Span,\n         is_root: bool,\n     ) -> Result<Self, ErrorGuaranteed> {\n-        let mut errored = false;\n+        let mut errored = None;\n         let mut item_iter = items.iter();\n \n         let parse_value = |value_str| {\n@@ -91,8 +90,8 @@ impl<'tcx> OnUnimplementedDirective {\n                     )\n                 })?;\n             attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |item| {\n-                if let Some(symbol) = item.value_str() && parse_value(symbol).is_err() {\n-                    errored = true;\n+                if let Some(symbol) = item.value_str() && let Err(guar) = parse_value(symbol) {\n+                    errored = Some(guar);\n                 }\n                 true\n             });\n@@ -134,13 +133,10 @@ impl<'tcx> OnUnimplementedDirective {\n                 && note.is_none()\n             {\n                 if let Some(items) = item.meta_item_list() {\n-                    if let Ok(subcommand) =\n-                        Self::parse(tcx, item_def_id, &items, item.span(), false)\n-                    {\n-                        subcommands.push(subcommand);\n-                    } else {\n-                        errored = true;\n-                    }\n+                    match Self::parse(tcx, item_def_id, &items, item.span(), false) {\n+                        Ok(subcommand) => subcommands.push(subcommand),\n+                        Err(reported) => errored = Some(reported),\n+                    };\n                     continue;\n                 }\n             } else if item.has_name(sym::append_const_msg) && append_const_msg.is_none() {\n@@ -163,8 +159,8 @@ impl<'tcx> OnUnimplementedDirective {\n             );\n         }\n \n-        if errored {\n-            Err(ErrorGuaranteed)\n+        if let Some(reported) = errored {\n+            Err(reported)\n         } else {\n             Ok(OnUnimplementedDirective {\n                 condition,\n@@ -203,7 +199,9 @@ impl<'tcx> OnUnimplementedDirective {\n                 append_const_msg: None,\n             }))\n         } else {\n-            return Err(ErrorGuaranteed);\n+            let reported =\n+                tcx.sess.delay_span_bug(DUMMY_SP, \"of_item: neither meta_item_list nor value_str\");\n+            return Err(reported);\n         };\n         debug!(\"of_item({:?}) = {:?}\", item_def_id, result);\n         result\n@@ -327,7 +325,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                         match generics.params.iter().find(|param| param.name == s) {\n                             Some(_) => (),\n                             None => {\n-                                struct_span_err!(\n+                                let reported = struct_span_err!(\n                                     tcx.sess,\n                                     span,\n                                     E0230,\n@@ -340,20 +338,20 @@ impl<'tcx> OnUnimplementedFormatString {\n                                     }\n                                 )\n                                 .emit();\n-                                result = Err(ErrorGuaranteed);\n+                                result = Err(reported);\n                             }\n                         }\n                     }\n                     // `{:1}` and `{}` are not to be used\n                     Position::ArgumentIs(_) | Position::ArgumentImplicitlyIs(_) => {\n-                        struct_span_err!(\n+                        let reported = struct_span_err!(\n                             tcx.sess,\n                             span,\n                             E0231,\n                             \"only named substitution parameters are allowed\"\n                         )\n                         .emit();\n-                        result = Err(ErrorGuaranteed);\n+                        result = Err(reported);\n                     }\n                 },\n             }"}, {"sha": "614a5e048099762c8d592711b3ac66875d6a876a", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1396,7 +1396,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 // `rustc_ty_utils::instance::resolve_associated_item()`.\n                 let node_item =\n                     assoc_def(selcx, impl_data.impl_def_id, obligation.predicate.item_def_id)\n-                        .map_err(|ErrorGuaranteed| ())?;\n+                        .map_err(|ErrorGuaranteed { .. }| ())?;\n \n                 if node_item.is_final() {\n                     // Non-specializable items are always projectable."}, {"sha": "05479899f3a1b7ee98580be89ba02e9795822f09", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -719,7 +719,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // TraitA+Kx+'a -> TraitB+Ky+'b (trait upcasting coercion).\n             (&ty::Dynamic(ref data_a, r_a), &ty::Dynamic(ref data_b, r_b)) => {\n                 // See `assemble_candidates_for_unsizing` for more info.\n-                // We already checked the compatiblity of auto traits within `assemble_candidates_for_unsizing`.\n+                // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let principal_a = data_a.principal().unwrap();\n                 source_trait_ref = principal_a.with_self_ty(tcx, source);\n                 upcast_trait_ref = util::supertraits(tcx, source_trait_ref).nth(idx).unwrap();\n@@ -823,7 +823,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // Trait+Kx+'a -> Trait+Ky+'b (auto traits and lifetime subtyping).\n             (&ty::Dynamic(ref data_a, r_a), &ty::Dynamic(ref data_b, r_b)) => {\n                 // See `assemble_candidates_for_unsizing` for more info.\n-                // We already checked the compatiblity of auto traits within `assemble_candidates_for_unsizing`.\n+                // We already checked the compatibility of auto traits within `assemble_candidates_for_unsizing`.\n                 let iter = data_a\n                     .principal()\n                     .map(|b| b.map_bound(ty::ExistentialPredicate::Trait))\n@@ -1084,7 +1084,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | ty::Foreign(_) => {}\n \n                 // These types are built-in, so we can fast-track by registering\n-                // nested predicates for their constituient type(s)\n+                // nested predicates for their constituent type(s)\n                 ty::Array(ty, _) | ty::Slice(ty) => {\n                     stack.push(ty);\n                 }"}, {"sha": "a1a8497859d453157f3ec5d06e2196dec2eb714a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -29,7 +29,7 @@ use crate::traits::project::ProjectionCacheKeyExt;\n use crate::traits::ProjectionCacheKey;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::{Diagnostic, ErrorGuaranteed};\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n@@ -553,7 +553,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     match project::poly_project_and_unify_type(self, &project_obligation) {\n                         Ok(Ok(Some(mut subobligations))) => {\n                             'compute_res: {\n-                                // If we've previously marked this projection as 'complete', thne\n+                                // If we've previously marked this projection as 'complete', then\n                                 // use the final cached result (either `EvaluatedToOk` or\n                                 // `EvaluatedToOkModuloRegions`), and skip re-evaluating the\n                                 // sub-obligations.\n@@ -674,8 +674,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 Err(_) => Ok(EvaluatedToErr),\n                             }\n                         }\n-                        (Err(ErrorHandled::Reported(ErrorGuaranteed)), _)\n-                        | (_, Err(ErrorHandled::Reported(ErrorGuaranteed))) => Ok(EvaluatedToErr),\n+                        (Err(ErrorHandled::Reported(_)), _)\n+                        | (_, Err(ErrorHandled::Reported(_))) => Ok(EvaluatedToErr),\n                         (Err(ErrorHandled::Linted), _) | (_, Err(ErrorHandled::Linted)) => {\n                             span_bug!(\n                                 obligation.cause.span(self.tcx()),"}, {"sha": "79471065ccc67899834f1b07533a865aca6c5610", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -16,14 +16,14 @@ use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, EmissionGuarantee};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::COHERENCE_LEAK_CHECK;\n use rustc_session::lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS;\n-use rustc_span::DUMMY_SP;\n+use rustc_span::{Span, DUMMY_SP};\n \n use super::util::impl_trait_ref_and_oblig;\n use super::{FulfillmentContext, SelectionContext};\n@@ -377,8 +377,7 @@ fn report_negative_positive_conflict(\n         }\n     }\n \n-    sg.has_errored = true;\n-    err.emit();\n+    sg.has_errored = Some(err.emit());\n }\n \n fn report_conflicting_impls(\n@@ -394,7 +393,13 @@ fn report_conflicting_impls(\n     // Work to be done after we've built the DiagnosticBuilder. We have to define it\n     // now because the struct_lint methods don't return back the DiagnosticBuilder\n     // that's passed in.\n-    let decorate = |err: LintDiagnosticBuilder<'_>| {\n+    fn decorate<G: EmissionGuarantee>(\n+        tcx: TyCtxt<'_>,\n+        overlap: OverlapError,\n+        used_to_be_allowed: Option<FutureCompatOverlapErrorKind>,\n+        impl_span: Span,\n+        err: LintDiagnosticBuilder<'_, G>,\n+    ) -> G {\n         let msg = format!(\n             \"conflicting implementations of trait `{}`{}{}\",\n             overlap.trait_desc,\n@@ -440,17 +445,25 @@ fn report_conflicting_impls(\n             coherence::add_placeholder_note(&mut err);\n         }\n         err.emit()\n-    };\n+    }\n \n     match used_to_be_allowed {\n         None => {\n-            sg.has_errored = true;\n-            if overlap.with_impl.is_local() || !tcx.orphan_check_crate(()).contains(&impl_def_id) {\n+            let reported = if overlap.with_impl.is_local()\n+                || !tcx.orphan_check_crate(()).contains(&impl_def_id)\n+            {\n                 let err = struct_span_err!(tcx.sess, impl_span, E0119, \"\");\n-                decorate(LintDiagnosticBuilder::new(err.forget_guarantee()));\n+                Some(decorate(\n+                    tcx,\n+                    overlap,\n+                    used_to_be_allowed,\n+                    impl_span,\n+                    LintDiagnosticBuilder::new(err),\n+                ))\n             } else {\n-                tcx.sess.delay_span_bug(impl_span, \"impl should have failed the orphan check\");\n-            }\n+                Some(tcx.sess.delay_span_bug(impl_span, \"impl should have failed the orphan check\"))\n+            };\n+            sg.has_errored = reported;\n         }\n         Some(kind) => {\n             let lint = match kind {\n@@ -461,8 +474,10 @@ fn report_conflicting_impls(\n                 lint,\n                 tcx.hir().local_def_id_to_hir_id(impl_def_id),\n                 impl_span,\n-                decorate,\n-            )\n+                |ldb| {\n+                    decorate(tcx, overlap, used_to_be_allowed, impl_span, ldb);\n+                },\n+            );\n         }\n     };\n }"}, {"sha": "295a91959eb194f0bdb9cad22b0621c160d35fa8", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -306,9 +306,9 @@ fn resolve_associated_item<'tcx>(\n                         resolved_ty,\n                     );\n                     let span = tcx.def_span(leaf_def.item.def_id);\n-                    tcx.sess.delay_span_bug(span, &msg);\n+                    let reported = tcx.sess.delay_span_bug(span, &msg);\n \n-                    return Err(ErrorGuaranteed);\n+                    return Err(reported);\n                 }\n             }\n "}, {"sha": "c5fc4e4c6610562865eb132b3cf3114eb35ad49a", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -181,12 +181,12 @@ enum DtorType {\n     /// \"significant\" / \"insignificant\".\n     Insignificant,\n \n-    /// Type has a `Drop` implentation.\n+    /// Type has a `Drop` implantation.\n     Significant,\n }\n \n // This is a helper function for `adt_drop_tys` and `adt_significant_drop_tys`.\n-// Depending on the implentation of `adt_has_dtor`, it is used to check if the\n+// Depending on the implantation of `adt_has_dtor`, it is used to check if the\n // ADT has a destructor or if the ADT only has a significant destructor. For\n // understanding significant destructor look at `adt_significant_drop_tys`.\n fn drop_tys_helper<'tcx>(\n@@ -295,7 +295,7 @@ fn adt_drop_tys<'tcx>(\n         .map(|components| tcx.intern_type_list(&components))\n }\n // If `def_id` refers to a generic ADT, the queries above and below act as if they had been handed\n-// a `tcx.make_ty(def, identity_substs)` and as such it is legal to substitue the generic parameters\n+// a `tcx.make_ty(def, identity_substs)` and as such it is legal to substitute the generic parameters\n // of the ADT into the outputted `ty`s.\n fn adt_significant_drop_tys(\n     tcx: TyCtxt<'_>,"}, {"sha": "4f65bf989de0847180e91e68b5df5dba528df922", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1,6 +1,6 @@\n use crate::astconv::AstConv;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{pluralize, struct_span_err, Applicability};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n@@ -126,7 +126,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 \"the precise format of `Fn`-family traits' type parameters is subject to change\",\n             );\n             // Do not suggest the other syntax if we are in trait impl:\n-            // the desugaring would contain an associated type constrait.\n+            // the desugaring would contain an associated type constraint.\n             if !is_impl {\n                 let args = trait_segment\n                     .args\n@@ -195,7 +195,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         ty_param_name: &str,\n         assoc_name: Ident,\n         span: Span,\n-    ) where\n+    ) -> ErrorGuaranteed\n+    where\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,\n     {\n         // The fallback span is needed because `assoc_name` might be an `Fn()`'s `Output` without a\n@@ -231,7 +232,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             err.span_label(span, format!(\"associated type `{}` not found\", assoc_name));\n         }\n \n-        err.emit();\n+        err.emit()\n     }\n \n     /// When there are any missing associated types, emit an E0191 error and attempt to supply a"}, {"sha": "754172b115819c5e96d12bf616b11fc10d7f7724", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 55, "deletions": 51, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -6,7 +6,7 @@ use crate::astconv::{\n use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -429,7 +429,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let param_counts = gen_params.own_counts();\n \n         // Subtracting from param count to ensure type params synthesized from `impl Trait`\n-        // cannot be explictly specified even with `explicit_generic_args_with_impl_trait`\n+        // cannot be explicitly specified even with `explicit_generic_args_with_impl_trait`\n         // feature enabled.\n         let synth_type_param_count = if tcx.features().explicit_generic_args_with_impl_trait {\n             gen_params\n@@ -456,51 +456,55 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let mut invalid_args = vec![];\n \n-        let mut check_lifetime_args = |min_expected_args: usize,\n-                                       max_expected_args: usize,\n-                                       provided_args: usize,\n-                                       late_bounds_ignore: bool|\n-         -> bool {\n-            if (min_expected_args..=max_expected_args).contains(&provided_args) {\n-                return true;\n-            }\n+        let mut check_lifetime_args =\n+            |min_expected_args: usize,\n+             max_expected_args: usize,\n+             provided_args: usize,\n+             late_bounds_ignore: bool| {\n+                if (min_expected_args..=max_expected_args).contains(&provided_args) {\n+                    return Ok(());\n+                }\n \n-            if late_bounds_ignore {\n-                return true;\n-            }\n+                if late_bounds_ignore {\n+                    return Ok(());\n+                }\n \n-            if provided_args > max_expected_args {\n-                invalid_args.extend(\n-                    gen_args.args[max_expected_args..provided_args].iter().map(|arg| arg.span()),\n-                );\n-            };\n+                if provided_args > max_expected_args {\n+                    invalid_args.extend(\n+                        gen_args.args[max_expected_args..provided_args]\n+                            .iter()\n+                            .map(|arg| arg.span()),\n+                    );\n+                };\n \n-            let gen_args_info = if provided_args > min_expected_args {\n-                invalid_args.extend(\n-                    gen_args.args[min_expected_args..provided_args].iter().map(|arg| arg.span()),\n-                );\n-                let num_redundant_args = provided_args - min_expected_args;\n-                GenericArgsInfo::ExcessLifetimes { num_redundant_args }\n-            } else {\n-                let num_missing_args = min_expected_args - provided_args;\n-                GenericArgsInfo::MissingLifetimes { num_missing_args }\n+                let gen_args_info = if provided_args > min_expected_args {\n+                    invalid_args.extend(\n+                        gen_args.args[min_expected_args..provided_args]\n+                            .iter()\n+                            .map(|arg| arg.span()),\n+                    );\n+                    let num_redundant_args = provided_args - min_expected_args;\n+                    GenericArgsInfo::ExcessLifetimes { num_redundant_args }\n+                } else {\n+                    let num_missing_args = min_expected_args - provided_args;\n+                    GenericArgsInfo::MissingLifetimes { num_missing_args }\n+                };\n+\n+                let reported = WrongNumberOfGenericArgs::new(\n+                    tcx,\n+                    gen_args_info,\n+                    seg,\n+                    gen_params,\n+                    has_self as usize,\n+                    gen_args,\n+                    def_id,\n+                )\n+                .diagnostic()\n+                .emit();\n+\n+                Err(reported)\n             };\n \n-            WrongNumberOfGenericArgs::new(\n-                tcx,\n-                gen_args_info,\n-                seg,\n-                gen_params,\n-                has_self as usize,\n-                gen_args,\n-                def_id,\n-            )\n-            .diagnostic()\n-            .emit();\n-\n-            false\n-        };\n-\n         let min_expected_lifetime_args = if infer_lifetimes { 0 } else { param_counts.lifetimes };\n         let max_expected_lifetime_args = param_counts.lifetimes;\n         let num_provided_lifetime_args = gen_args.num_lifetime_params();\n@@ -527,7 +531,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 \"check_types_and_consts\"\n             );\n             if (expected_min..=expected_max).contains(&provided) {\n-                return true;\n+                return Ok(());\n             }\n \n             let num_default_params = expected_max - expected_min;\n@@ -561,7 +565,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n             debug!(?gen_args_info);\n \n-            WrongNumberOfGenericArgs::new(\n+            let reported = WrongNumberOfGenericArgs::new(\n                 tcx,\n                 gen_args_info,\n                 seg,\n@@ -573,7 +577,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .diagnostic()\n             .emit_unless(gen_args.has_err());\n \n-            false\n+            Err(reported)\n         };\n \n         let args_correct = {\n@@ -599,11 +603,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         GenericArgCountResult {\n             explicit_late_bound,\n-            correct: if lifetimes_correct && args_correct {\n-                Ok(())\n-            } else {\n-                Err(GenericArgCountMismatch { reported: Some(ErrorGuaranteed), invalid_args })\n-            },\n+            correct: lifetimes_correct.and(args_correct).map_err(|reported| {\n+                GenericArgCountMismatch { reported: Some(reported), invalid_args }\n+            }),\n         }\n     }\n \n@@ -700,7 +702,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     LATE_BOUND_LIFETIME_ARGUMENTS,\n                     args.args[0].id(),\n                     multispan,\n-                    |lint| lint.build(msg).emit(),\n+                    |lint| {\n+                        lint.build(msg).emit();\n+                    },\n                 );\n             }\n "}, {"sha": "b04d304d2ca15f930c43097b4300058531c794b3", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1570,7 +1570,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         type_str: &str,\n         trait_str: &str,\n         name: Symbol,\n-    ) {\n+    ) -> ErrorGuaranteed {\n         let mut err = struct_span_err!(self.tcx().sess, span, E0223, \"ambiguous associated type\");\n         if let (true, Ok(snippet)) = (\n             self.tcx()\n@@ -1594,7 +1594,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 Applicability::HasPlaceholders,\n             );\n         }\n-        err.emit();\n+        err.emit()\n     }\n \n     // Search for a bound on a type parameter which includes the associated item\n@@ -1661,13 +1661,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             (Some(bound), _) => (bound, matching_candidates.next()),\n             (None, Some(bound)) => (bound, const_candidates.next()),\n             (None, None) => {\n-                self.complain_about_assoc_type_not_found(\n+                let reported = self.complain_about_assoc_type_not_found(\n                     all_candidates,\n                     &ty_param_name(),\n                     assoc_name,\n                     span,\n                 );\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n         };\n         debug!(\"one_bound_for_assoc_type: bound = {:?}\", bound);\n@@ -1752,9 +1752,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     where_bounds.join(\",\\n\"),\n                 ));\n             }\n-            err.emit();\n+            let reported = err.emit();\n             if !where_bounds.is_empty() {\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n         }\n \n@@ -1811,7 +1811,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // trait reference.\n                 let Some(trait_ref) = tcx.impl_trait_ref(impl_def_id) else {\n                     // A cycle error occurred, most likely.\n-                    return Err(ErrorGuaranteed);\n+                    let guar = tcx.sess.delay_span_bug(span, \"expected cycle error\");\n+                    return Err(guar);\n                 };\n \n                 self.one_bound_for_assoc_type(\n@@ -1828,10 +1829,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 | Res::Def(DefKind::TyParam, param_did),\n             ) => self.find_bound_for_assoc_item(param_did.expect_local(), assoc_ident, span)?,\n             _ => {\n-                if variant_resolution.is_some() {\n+                let reported = if variant_resolution.is_some() {\n                     // Variant in type position\n                     let msg = format!(\"expected type, found variant `{}`\", assoc_ident);\n-                    tcx.sess.span_err(span, &msg);\n+                    tcx.sess.span_err(span, &msg)\n                 } else if qself_ty.is_enum() {\n                     let mut err = struct_span_err!(\n                         tcx.sess,\n@@ -1870,17 +1871,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         err.span_label(sp, format!(\"variant `{}` not found here\", assoc_ident));\n                     }\n \n-                    err.emit();\n-                } else if !qself_ty.references_error() {\n+                    err.emit()\n+                } else if let Some(reported) = qself_ty.error_reported() {\n+                    reported\n+                } else {\n                     // Don't print `TyErr` to the user.\n                     self.report_ambiguous_associated_type(\n                         span,\n                         &qself_ty.to_string(),\n                         \"Trait\",\n                         assoc_ident.name,\n-                    );\n-                }\n-                return Err(ErrorGuaranteed);\n+                    )\n+                };\n+                return Err(reported);\n             }\n         };\n \n@@ -1898,8 +1901,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // but it was used in a type position.\n         let Some(item) = item else {\n             let msg = format!(\"found associated const `{assoc_ident}` when type was expected\");\n-            tcx.sess.struct_span_err(span, &msg).emit();\n-            return Err(ErrorGuaranteed);\n+            let guar = tcx.sess.struct_span_err(span, &msg).emit();\n+            return Err(guar);\n         };\n \n         let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, assoc_segment, bound);\n@@ -2737,7 +2740,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 sugg,\n                                 Applicability::MachineApplicable,\n                             )\n-                            .emit()\n+                            .emit();\n                     },\n                 );\n             }"}, {"sha": "7ce428ea12466d33e2f9efff4c0d89f7716fa4e2", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -91,8 +91,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let t = self.resolve_vars_if_possible(t);\n \n-        if t.references_error() {\n-            return Err(ErrorGuaranteed);\n+        if let Some(reported) = t.error_reported() {\n+            return Err(reported);\n         }\n \n         if self.type_is_known_to_be_sized_modulo_regions(t, span) {\n@@ -139,10 +139,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             | ty::Adt(..)\n             | ty::Never\n             | ty::Error(_) => {\n-                self.tcx\n+                let reported = self\n+                    .tcx\n                     .sess\n                     .delay_span_bug(span, &format!(\"`{:?}` should be sized but is not?\", t));\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n         })\n     }\n@@ -174,7 +175,7 @@ pub enum CastError {\n }\n \n impl From<ErrorGuaranteed> for CastError {\n-    fn from(ErrorGuaranteed: ErrorGuaranteed) -> Self {\n+    fn from(_: ErrorGuaranteed) -> Self {\n         CastError::ErrorGuaranteed\n     }\n }\n@@ -213,8 +214,8 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         // inference is more completely known.\n         match cast_ty.kind() {\n             ty::Dynamic(..) | ty::Slice(..) => {\n-                check.report_cast_to_unsized_type(fcx);\n-                Err(ErrorGuaranteed)\n+                let reported = check.report_cast_to_unsized_type(fcx);\n+                Err(reported)\n             }\n             _ => Ok(check),\n         }\n@@ -588,9 +589,11 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         }\n     }\n \n-    fn report_cast_to_unsized_type(&self, fcx: &FnCtxt<'a, 'tcx>) {\n-        if self.cast_ty.references_error() || self.expr_ty.references_error() {\n-            return;\n+    fn report_cast_to_unsized_type(&self, fcx: &FnCtxt<'a, 'tcx>) -> ErrorGuaranteed {\n+        if let Some(reported) =\n+            self.cast_ty.error_reported().or_else(|| self.expr_ty.error_reported())\n+        {\n+            return reported;\n         }\n \n         let tstr = fcx.ty_to_string(self.cast_ty);\n@@ -651,7 +654,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 err.span_help(self.expr.span, \"consider using a box or reference as appropriate\");\n             }\n         }\n-        err.emit();\n+        err.emit()\n     }\n \n     fn trivial_cast_lint(&self, fcx: &FnCtxt<'a, 'tcx>) {"}, {"sha": "e57d55fdc2377394fe5d6f0804a8cf80595231d3", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -49,7 +49,7 @@ pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Ab\n         }\n         None => {\n             tcx.struct_span_lint_hir(UNSUPPORTED_CALLING_CONVENTIONS, hir_id, span, |lint| {\n-                lint.build(\"use of calling convention not supported on this target\").emit()\n+                lint.build(\"use of calling convention not supported on this target\").emit();\n             });\n         }\n     }\n@@ -136,7 +136,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n             };\n \n             if let Some(header) = item {\n-                tcx.sess.span_err(header.span, \"functions with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\")\n+                tcx.sess.span_err(header.span, \"functions with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\");\n             }\n         };\n \n@@ -625,11 +625,11 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n     origin: &hir::OpaqueTyOrigin,\n ) -> Result<(), ErrorGuaranteed> {\n     if tcx.try_expand_impl_trait_type(def_id.to_def_id(), substs).is_err() {\n-        match origin {\n+        let reported = match origin {\n             hir::OpaqueTyOrigin::AsyncFn(..) => async_opaque_type_cycle_error(tcx, span),\n             _ => opaque_type_cycle_error(tcx, def_id, span),\n-        }\n-        Err(ErrorGuaranteed)\n+        };\n+        Err(reported)\n     } else {\n         Ok(())\n     }\n@@ -680,13 +680,15 @@ fn check_opaque_meets_bounds<'tcx>(\n             trace!(?hidden_type);\n             match infcx.at(&misc_cause, param_env).eq(opaque_defn.concrete_ty, hidden_type) {\n                 Ok(infer_ok) => inh.register_infer_ok_obligations(infer_ok),\n-                Err(ty_err) => tcx.sess.delay_span_bug(\n-                    span,\n-                    &format!(\n-                        \"could not check bounds on revealed type `{}`:\\n{}\",\n-                        hidden_type, ty_err,\n-                    ),\n-                ),\n+                Err(ty_err) => {\n+                    tcx.sess.delay_span_bug(\n+                        span,\n+                        &format!(\n+                            \"could not check bounds on revealed type `{}`:\\n{}\",\n+                            hidden_type, ty_err,\n+                        ),\n+                    );\n+                }\n             }\n         }\n \n@@ -1422,7 +1424,7 @@ pub(super) fn check_type_params_are_used<'tcx>(\n     if ty.references_error() {\n         // If there is already another error, do not emit\n         // an error for not using a type parameter.\n-        assert!(tcx.sess.has_errors());\n+        assert!(tcx.sess.has_errors().is_some());\n         return;\n     }\n \n@@ -1463,14 +1465,14 @@ pub(super) use wfcheck::check_trait_item as check_trait_item_well_formed;\n \n pub(super) use wfcheck::check_impl_item as check_impl_item_well_formed;\n \n-fn async_opaque_type_cycle_error(tcx: TyCtxt<'_>, span: Span) {\n+fn async_opaque_type_cycle_error(tcx: TyCtxt<'_>, span: Span) -> ErrorGuaranteed {\n     struct_span_err!(tcx.sess, span, E0733, \"recursion in an `async fn` requires boxing\")\n         .span_label(span, \"recursive `async fn`\")\n         .note(\"a recursive `async fn` must be rewritten to return a boxed `dyn Future`\")\n         .note(\n             \"consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\",\n         )\n-        .emit();\n+        .emit()\n }\n \n /// Emit an error for recursive opaque types.\n@@ -1481,7 +1483,7 @@ fn async_opaque_type_cycle_error(tcx: TyCtxt<'_>, span: Span) {\n ///\n /// If all the return expressions evaluate to `!`, then we explain that the error will go away\n /// after changing it. This can happen when a user uses `panic!()` or similar as a placeholder.\n-fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n+fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> ErrorGuaranteed {\n     let mut err = struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type\");\n \n     let mut label = false;\n@@ -1550,5 +1552,5 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n     if !label {\n         err.span_label(span, \"cannot resolve opaque type\");\n     }\n-    err.emit();\n+    err.emit()\n }"}, {"sha": "f5477f7103cb3109525bb3b18623ebc8fbaec22b", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 32, "deletions": 38, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -41,35 +41,30 @@ crate fn compare_impl_method<'tcx>(\n \n     let impl_m_span = tcx.sess.source_map().guess_head_span(impl_m_span);\n \n-    if let Err(ErrorGuaranteed) =\n-        compare_self_type(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n-    {\n+    if let Err(_) = compare_self_type(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref) {\n         return;\n     }\n \n-    if let Err(ErrorGuaranteed) =\n-        compare_number_of_generics(tcx, impl_m, impl_m_span, trait_m, trait_item_span)\n-    {\n+    if let Err(_) = compare_number_of_generics(tcx, impl_m, impl_m_span, trait_m, trait_item_span) {\n         return;\n     }\n \n-    if let Err(ErrorGuaranteed) =\n+    if let Err(_) =\n         compare_number_of_method_arguments(tcx, impl_m, impl_m_span, trait_m, trait_item_span)\n     {\n         return;\n     }\n \n-    if let Err(ErrorGuaranteed) = compare_synthetic_generics(tcx, impl_m, trait_m) {\n+    if let Err(_) = compare_synthetic_generics(tcx, impl_m, trait_m) {\n         return;\n     }\n \n-    if let Err(ErrorGuaranteed) =\n-        compare_predicate_entailment(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n+    if let Err(_) = compare_predicate_entailment(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n     {\n         return;\n     }\n \n-    if let Err(ErrorGuaranteed) = compare_const_param_types(tcx, impl_m, trait_m, trait_item_span) {\n+    if let Err(_) = compare_const_param_types(tcx, impl_m, trait_m, trait_item_span) {\n         return;\n     }\n }\n@@ -385,16 +380,16 @@ fn compare_predicate_entailment<'tcx>(\n                 &terr,\n                 false,\n             );\n-            diag.emit();\n-            return Err(ErrorGuaranteed);\n+\n+            return Err(diag.emit());\n         }\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n         if !errors.is_empty() {\n-            infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorGuaranteed);\n+            let reported = infcx.report_fulfillment_errors(&errors, None, false);\n+            return Err(reported);\n         }\n \n         // Finally, resolve all regions. This catches wily misuses of\n@@ -450,13 +445,13 @@ fn check_region_bounds_on_impl_item<'tcx>(\n                 .map_or(def_sp, |g| g.span)\n         });\n \n-        tcx.sess.emit_err(LifetimesOrBoundsMismatchOnTrait {\n+        let reported = tcx.sess.emit_err(LifetimesOrBoundsMismatchOnTrait {\n             span,\n             item_kind,\n             ident: impl_m.ident(tcx),\n             generics_span,\n         });\n-        return Err(ErrorGuaranteed);\n+        return Err(reported);\n     }\n \n     Ok(())\n@@ -550,8 +545,8 @@ fn compare_self_type<'tcx>(\n             } else {\n                 err.note_trait_signature(trait_m.name.to_string(), trait_m.signature(tcx));\n             }\n-            err.emit();\n-            return Err(ErrorGuaranteed);\n+            let reported = err.emit();\n+            return Err(reported);\n         }\n \n         (true, false) => {\n@@ -570,8 +565,8 @@ fn compare_self_type<'tcx>(\n             } else {\n                 err.note_trait_signature(trait_m.name.to_string(), trait_m.signature(tcx));\n             }\n-            err.emit();\n-            return Err(ErrorGuaranteed);\n+            let reported = err.emit();\n+            return Err(reported);\n         }\n     }\n \n@@ -595,11 +590,9 @@ fn compare_number_of_generics<'tcx>(\n \n     let item_kind = assoc_item_kind_str(impl_);\n \n-    let mut err_occurred = false;\n+    let mut err_occurred = None;\n     for (kind, trait_count, impl_count) in matchings {\n         if impl_count != trait_count {\n-            err_occurred = true;\n-\n             let (trait_spans, impl_trait_spans) = if let Some(def_id) = trait_.def_id.as_local() {\n                 let trait_item = tcx.hir().expect_trait_item(def_id);\n                 if trait_item.generics.params.is_empty() {\n@@ -690,11 +683,12 @@ fn compare_number_of_generics<'tcx>(\n                 err.span_label(*span, \"`impl Trait` introduces an implicit type parameter\");\n             }\n \n-            err.emit();\n+            let reported = err.emit();\n+            err_occurred = Some(reported);\n         }\n     }\n \n-    if err_occurred { Err(ErrorGuaranteed) } else { Ok(()) }\n+    if let Some(reported) = err_occurred { Err(reported) } else { Ok(()) }\n }\n \n fn compare_number_of_method_arguments<'tcx>(\n@@ -772,8 +766,8 @@ fn compare_number_of_method_arguments<'tcx>(\n                 impl_number_args\n             ),\n         );\n-        err.emit();\n-        return Err(ErrorGuaranteed);\n+        let reported = err.emit();\n+        return Err(reported);\n     }\n \n     Ok(())\n@@ -789,7 +783,7 @@ fn compare_synthetic_generics<'tcx>(\n     //     2. Explanation as to what is going on\n     // If we get here, we already have the same number of generics, so the zip will\n     // be okay.\n-    let mut error_found = false;\n+    let mut error_found = None;\n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n     let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| match param.kind {\n@@ -918,11 +912,11 @@ fn compare_synthetic_generics<'tcx>(\n                 }\n                 _ => unreachable!(),\n             }\n-            err.emit();\n-            error_found = true;\n+            let reported = err.emit();\n+            error_found = Some(reported);\n         }\n     }\n-    if error_found { Err(ErrorGuaranteed) } else { Ok(()) }\n+    if let Some(reported) = error_found { Err(reported) } else { Ok(()) }\n }\n \n fn compare_const_param_types<'tcx>(\n@@ -979,8 +973,8 @@ fn compare_const_param_types<'tcx>(\n                     trait_ty\n                 ),\n             );\n-            err.emit();\n-            return Err(ErrorGuaranteed);\n+            let reported = err.emit();\n+            return Err(reported);\n         }\n     }\n \n@@ -1203,8 +1197,8 @@ fn compare_type_predicate_entailment<'tcx>(\n         // version.\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n         if !errors.is_empty() {\n-            infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorGuaranteed);\n+            let reported = infcx.report_fulfillment_errors(&errors, None, false);\n+            return Err(reported);\n         }\n \n         // Finally, resolve all regions. This catches wily misuses of\n@@ -1427,8 +1421,8 @@ pub fn check_type_bounds<'tcx>(\n         // version.\n         let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n         if !errors.is_empty() {\n-            infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorGuaranteed);\n+            let reported = infcx.report_fulfillment_errors(&errors, None, false);\n+            return Err(reported);\n         }\n \n         // Finally, resolve all regions. This catches wily misuses of"}, {"sha": "d38777bea5990b4c1a5f4d805d035982dba5ec1b", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -55,11 +55,11 @@ pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), Erro\n             // already checked by coherence, but compilation may\n             // not have been terminated.\n             let span = tcx.def_span(drop_impl_did);\n-            tcx.sess.delay_span_bug(\n+            let reported = tcx.sess.delay_span_bug(\n                 span,\n                 &format!(\"should have been rejected by coherence check: {}\", dtor_self_type),\n             );\n-            Err(ErrorGuaranteed)\n+            Err(reported)\n         }\n     }\n }\n@@ -94,7 +94,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n             Err(_) => {\n                 let item_span = tcx.def_span(self_type_did);\n                 let self_descr = tcx.def_kind(self_type_did).descr(self_type_did);\n-                struct_span_err!(\n+                let reported = struct_span_err!(\n                     tcx.sess,\n                     drop_impl_span,\n                     E0366,\n@@ -109,15 +109,15 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n                     ),\n                 )\n                 .emit();\n-                return Err(ErrorGuaranteed);\n+                return Err(reported);\n             }\n         }\n \n         let errors = fulfillment_cx.select_all_or_error(&infcx);\n         if !errors.is_empty() {\n             // this could be reached when we get lazy normalization\n-            infcx.report_fulfillment_errors(&errors, None, false);\n-            return Err(ErrorGuaranteed);\n+            let reported = infcx.report_fulfillment_errors(&errors, None, false);\n+            return Err(reported);\n         }\n \n         // NB. It seems a bit... suspicious to use an empty param-env\n@@ -258,7 +258,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n         if !assumptions_in_impl_context.iter().copied().any(predicate_matches_closure) {\n             let item_span = tcx.def_span(self_type_did);\n             let self_descr = tcx.def_kind(self_type_did).descr(self_type_did.to_def_id());\n-            struct_span_err!(\n+            let reported = struct_span_err!(\n                 tcx.sess,\n                 predicate_sp,\n                 E0367,\n@@ -268,7 +268,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n             )\n             .span_note(item_span, \"the implementor must specify the same requirement\")\n             .emit();\n-            result = Err(ErrorGuaranteed);\n+            result = Err(reported);\n         }\n     }\n "}, {"sha": "0a720f1502503159b8c35010747fb7f88f96ce9a", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -667,7 +667,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // else an error would have been flagged by the\n                 // `loops` pass for using break with an expression\n                 // where you are not supposed to.\n-                assert!(expr_opt.is_none() || self.tcx.sess.has_errors());\n+                assert!(expr_opt.is_none() || self.tcx.sess.has_errors().is_some());\n             }\n \n             // If we encountered a `break`, then (no surprise) it may be possible to break from the\n@@ -1187,7 +1187,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     deferred_cast_checks.push(cast_check);\n                     t_cast\n                 }\n-                Err(ErrorGuaranteed) => self.tcx.ty_error(),\n+                Err(_) => self.tcx.ty_error(),\n             }\n         }\n     }"}, {"sha": "e3439a6f1d963a7b2065e7073d57e334dd415b5b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -315,16 +315,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     // FIXME: currently we never try to compose autoderefs\n                     // and ReifyFnPointer/UnsafeFnPointer, but we could.\n-                    _ => self.tcx.sess.delay_span_bug(\n-                        expr.span,\n-                        &format!(\n-                            \"while adjusting {:?}, can't compose {:?} and {:?}\",\n-                            expr,\n-                            entry.get(),\n-                            adj\n-                        ),\n-                    ),\n-                };\n+                    _ => {\n+                        self.tcx.sess.delay_span_bug(\n+                            expr.span,\n+                            &format!(\n+                                \"while adjusting {:?}, can't compose {:?} and {:?}\",\n+                                expr,\n+                                entry.get(),\n+                                adj\n+                            ),\n+                        );\n+                    }\n+                }\n                 *entry.get_mut() = adj;\n             }\n         }\n@@ -903,7 +905,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .or_else(|error| {\n                 let result = match error {\n                     method::MethodError::PrivateMatch(kind, def_id, _) => Ok((kind, def_id)),\n-                    _ => Err(ErrorGuaranteed),\n+                    _ => Err(ErrorGuaranteed::unchecked_claim_error_was_emitted()),\n                 };\n \n                 // If we have a path like `MyTrait::missing_method`, then don't register"}, {"sha": "e9537af25a0788293cb8a881e0d4783448bc8a86", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdSet;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind};\n-use rustc_middle::middle::region::{self, YieldData};\n+use rustc_middle::middle::region::{self, Scope, ScopeData, YieldData};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -369,7 +369,25 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n \n         self.expr_count += 1;\n \n-        let scope = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n+        debug!(\"is_borrowed_temporary: {:?}\", self.drop_ranges.is_borrowed_temporary(expr));\n+\n+        // Typically, the value produced by an expression is consumed by its parent in some way,\n+        // so we only have to check if the parent contains a yield (note that the parent may, for\n+        // example, store the value into a local variable, but then we already consider local\n+        // variables to be live across their scope).\n+        //\n+        // However, in the case of temporary values, we are going to store the value into a\n+        // temporary on the stack that is live for the current temporary scope and then return a\n+        // reference to it. That value may be live across the entire temporary scope.\n+        let scope = if self.drop_ranges.is_borrowed_temporary(expr) {\n+            self.region_scope_tree.temporary_scope(expr.hir_id.local_id)\n+        } else {\n+            debug!(\"parent_node: {:?}\", self.fcx.tcx.hir().find_parent_node(expr.hir_id));\n+            match self.fcx.tcx.hir().find_parent_node(expr.hir_id) {\n+                Some(parent) => Some(Scope { id: parent.local_id, data: ScopeData::Node }),\n+                None => self.region_scope_tree.temporary_scope(expr.hir_id.local_id),\n+            }\n+        };\n \n         // If there are adjustments, then record the final type --\n         // this is the actual value that is being produced.\n@@ -468,11 +486,11 @@ pub struct SuspendCheckData<'a, 'tcx> {\n }\n \n // Returns whether it emitted a diagnostic or not\n-// Note that this fn and the proceding one are based on the code\n+// Note that this fn and the proceeding one are based on the code\n // for creating must_use diagnostics\n //\n // Note that this technique was chosen over things like a `Suspend` marker trait\n-// as it is simpler and has precendent in the compiler\n+// as it is simpler and has precedent in the compiler\n pub fn check_must_not_suspend_ty<'tcx>(\n     fcx: &FnCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,"}, {"sha": "4fa7ed82c6a8456891c77c42ff8a224685e8c724", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -18,6 +18,7 @@ use crate::check::FnCtxt;\n use hir::def_id::DefId;\n use hir::{Body, HirId, HirIdMap, Node};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n@@ -41,7 +42,7 @@ pub fn compute_drop_ranges<'a, 'tcx>(\n         let consumed_borrowed_places = find_consumed_and_borrowed(fcx, def_id, body);\n \n         let num_exprs = fcx.tcx.region_scope_tree(def_id).body_expr_count(body.id()).unwrap_or(0);\n-        let mut drop_ranges = build_control_flow_graph(\n+        let (mut drop_ranges, borrowed_temporaries) = build_control_flow_graph(\n             fcx.tcx.hir(),\n             fcx.tcx,\n             &fcx.typeck_results.borrow(),\n@@ -52,11 +53,20 @@ pub fn compute_drop_ranges<'a, 'tcx>(\n \n         drop_ranges.propagate_to_fixpoint();\n \n-        DropRanges { tracked_value_map: drop_ranges.tracked_value_map, nodes: drop_ranges.nodes }\n+        debug!(\"borrowed_temporaries = {borrowed_temporaries:?}\");\n+        DropRanges {\n+            tracked_value_map: drop_ranges.tracked_value_map,\n+            nodes: drop_ranges.nodes,\n+            borrowed_temporaries: Some(borrowed_temporaries),\n+        }\n     } else {\n         // If drop range tracking is not enabled, skip all the analysis and produce an\n         // empty set of DropRanges.\n-        DropRanges { tracked_value_map: FxHashMap::default(), nodes: IndexVec::new() }\n+        DropRanges {\n+            tracked_value_map: FxHashMap::default(),\n+            nodes: IndexVec::new(),\n+            borrowed_temporaries: None,\n+        }\n     }\n }\n \n@@ -161,6 +171,7 @@ impl TryFrom<&PlaceWithHirId<'_>> for TrackedValue {\n pub struct DropRanges {\n     tracked_value_map: FxHashMap<TrackedValue, TrackedValueIndex>,\n     nodes: IndexVec<PostOrderId, NodeInfo>,\n+    borrowed_temporaries: Option<FxHashSet<HirId>>,\n }\n \n impl DropRanges {\n@@ -174,6 +185,10 @@ impl DropRanges {\n             })\n     }\n \n+    pub fn is_borrowed_temporary(&self, expr: &hir::Expr<'_>) -> bool {\n+        if let Some(b) = &self.borrowed_temporaries { b.contains(&expr.hir_id) } else { true }\n+    }\n+\n     /// Returns a reference to the NodeInfo for a node, panicking if it does not exist\n     fn expect_node(&self, id: PostOrderId) -> &NodeInfo {\n         &self.nodes[id]"}, {"sha": "f4dd4cc010d3c82f2a2b96518ba4557af37d5fd9", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -6,7 +6,7 @@ use hir::{\n     intravisit::{self, Visitor},\n     Body, Expr, ExprKind, Guard, HirId, LoopIdError,\n };\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::{fx::FxHashMap, stable_set::FxHashSet};\n use rustc_hir as hir;\n use rustc_index::vec::IndexVec;\n use rustc_middle::{\n@@ -27,14 +27,14 @@ pub(super) fn build_control_flow_graph<'tcx>(\n     consumed_borrowed_places: ConsumedAndBorrowedPlaces,\n     body: &'tcx Body<'tcx>,\n     num_exprs: usize,\n-) -> DropRangesBuilder {\n+) -> (DropRangesBuilder, FxHashSet<HirId>) {\n     let mut drop_range_visitor =\n         DropRangeVisitor::new(hir, tcx, typeck_results, consumed_borrowed_places, num_exprs);\n     intravisit::walk_body(&mut drop_range_visitor, body);\n \n     drop_range_visitor.drop_ranges.process_deferred_edges();\n \n-    drop_range_visitor.drop_ranges\n+    (drop_range_visitor.drop_ranges, drop_range_visitor.places.borrowed_temporaries)\n }\n \n /// This struct is used to gather the information for `DropRanges` to determine the regions of the"}, {"sha": "928daba0a7b3937db6eebaee61d693a122571e9f", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -6,6 +6,7 @@ use crate::{\n use hir::{def_id::DefId, Body, HirId, HirIdMap};\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n+use rustc_middle::hir::place::{PlaceBase, Projection, ProjectionKind};\n use rustc_middle::ty::{ParamEnv, TyCtxt};\n \n pub(super) fn find_consumed_and_borrowed<'a, 'tcx>(\n@@ -27,8 +28,12 @@ pub(super) struct ConsumedAndBorrowedPlaces {\n     /// Note that this set excludes \"partial drops\" -- for example, a statement like `drop(x.y)` is\n     /// not considered a drop of `x`, although it would be a drop of `x.y`.\n     pub(super) consumed: HirIdMap<FxHashSet<TrackedValue>>,\n+\n     /// A set of hir-ids of values or variables that are borrowed at some point within the body.\n     pub(super) borrowed: FxHashSet<TrackedValue>,\n+\n+    /// A set of hir-ids of values or variables that are borrowed at some point within the body.\n+    pub(super) borrowed_temporaries: FxHashSet<HirId>,\n }\n \n /// Works with ExprUseVisitor to find interesting values for the drop range analysis.\n@@ -49,6 +54,7 @@ impl<'tcx> ExprUseDelegate<'tcx> {\n             places: ConsumedAndBorrowedPlaces {\n                 consumed: <_>::default(),\n                 borrowed: <_>::default(),\n+                borrowed_temporaries: <_>::default(),\n             },\n         }\n     }\n@@ -96,12 +102,76 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         &mut self,\n         place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n         diag_expr_id: HirId,\n-        _bk: rustc_middle::ty::BorrowKind,\n+        bk: rustc_middle::ty::BorrowKind,\n+    ) {\n+        debug!(\n+            \"borrow: place_with_id = {place_with_id:?}, diag_expr_id={diag_expr_id:?}, \\\n+            borrow_kind={bk:?}\"\n+        );\n+\n+        self.places\n+            .borrowed\n+            .insert(TrackedValue::from_place_with_projections_allowed(place_with_id));\n+\n+        // Ordinarily a value is consumed by it's parent, but in the special case of a\n+        // borrowed RValue, we create a reference that lives as long as the temporary scope\n+        // for that expression (typically, the innermost statement, but sometimes the enclosing\n+        // block). We record this fact here so that later in generator_interior\n+        // we can use the correct scope.\n+        //\n+        // We special case borrows through a dereference (`&*x`, `&mut *x` where `x` is\n+        // some rvalue expression), since these are essentially a copy of a pointer.\n+        // In other words, this borrow does not refer to the\n+        // temporary (`*x`), but to the referent (whatever `x` is a borrow of).\n+        //\n+        // We were considering that we might encounter problems down the line if somehow,\n+        // some part of the compiler were to look at this result and try to use it to\n+        // drive a borrowck-like analysis (this does not currently happen, as of this writing).\n+        // But even this should be fine, because the lifetime of the dereferenced reference\n+        // found in the rvalue is only significant as an intermediate 'link' to the value we\n+        // are producing, and we separately track whether that value is live over a yield.\n+        // Example:\n+        //\n+        // ```notrust\n+        // fn identity<T>(x: &mut T) -> &mut T { x }\n+        // let a: A = ...;\n+        // let y: &'y mut A = &mut *identity(&'a mut a);\n+        //                    ^^^^^^^^^^^^^^^^^^^^^^^^^ the borrow we are talking about\n+        // ```\n+        //\n+        // The expression `*identity(...)` is a deref of an rvalue,\n+        // where the `identity(...)` (the rvalue) produces a return type\n+        // of `&'rv mut A`, where `'a: 'rv`. We then assign this result to\n+        // `'y`, resulting in (transitively) `'a: 'y` (i.e., while `y` is in use,\n+        // `a` will be considered borrowed).  Other parts of the code will ensure\n+        // that if `y` is live over a yield, `&'y mut A` appears in the generator\n+        // state. If `'y` is live, then any sound region analysis must conclude\n+        // that `'a` is also live. So if this causes a bug, blame some other\n+        // part of the code!\n+        let is_deref = place_with_id\n+            .place\n+            .projections\n+            .iter()\n+            .any(|Projection { kind, .. }| *kind == ProjectionKind::Deref);\n+\n+        if let (false, PlaceBase::Rvalue) = (is_deref, place_with_id.place.base) {\n+            self.places.borrowed_temporaries.insert(place_with_id.hir_id);\n+        }\n+    }\n+\n+    fn copy(\n+        &mut self,\n+        place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        _diag_expr_id: HirId,\n     ) {\n-        debug!(\"borrow {:?}; diag_expr_id={:?}\", place_with_id, diag_expr_id);\n+        debug!(\"copy: place_with_id = {place_with_id:?}\");\n+\n         self.places\n             .borrowed\n             .insert(TrackedValue::from_place_with_projections_allowed(place_with_id));\n+\n+        // For copied we treat this mostly like a borrow except that we don't add the place\n+        // to borrowed_temporaries because the copy is consumed.\n     }\n \n     fn mutate("}, {"sha": "a2f1f5692c731b3cea2548e7c58c3fc18106a70c", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -379,7 +379,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Creates a string version of the `expr` that includes explicit adjustments.\n-    /// Returns the string and also a bool indicating whther this is a *precise*\n+    /// Returns the string and also a bool indicating whether this is a *precise*\n     /// suggestion.\n     fn adjust_expr(\n         &self,"}, {"sha": "4e1645adca5d3f258fda9267a304c500499885a3", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -412,7 +412,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         lint::builtin::TYVAR_BEHIND_RAW_POINTER,\n                         scope_expr_id,\n                         span,\n-                        |lint| lint.build(\"type annotations needed\").emit(),\n+                        |lint| {\n+                            lint.build(\"type annotations needed\").emit();\n+                        },\n                     );\n                 }\n             } else {"}, {"sha": "7106f8f9d7a829c2738f3b09647688722b850ce0", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1371,7 +1371,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // represents the case of the path being completely captured by the variable.\n         //\n         // eg. If `a.b` is captured and we are processing `a.b`, then we can't have the closure also\n-        //     capture `a.b.c`, because that voilates min capture.\n+        //     capture `a.b.c`, because that violates min capture.\n         let is_completely_captured = captured_by_move_projs.iter().any(|projs| projs.is_empty());\n \n         assert!(!is_completely_captured || (captured_by_move_projs.len() == 1));\n@@ -1411,7 +1411,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::RawPtr(..) => unreachable!(),\n \n             ty::Adt(def, substs) => {\n-                // Multi-varaint enums are captured in entirety,\n+                // Multi-variant enums are captured in entirety,\n                 // which would've been handled in the case of single empty slice in `captured_by_move_projs`.\n                 assert_eq!(def.variants().len(), 1);\n \n@@ -2208,8 +2208,8 @@ fn determine_place_ancestry_relation<'tcx>(\n     }\n }\n \n-/// Reduces the precision of the captured place when the precision doesn't yeild any benefit from\n-/// borrow checking prespective, allowing us to save us on the size of the capture.\n+/// Reduces the precision of the captured place when the precision doesn't yield any benefit from\n+/// borrow checking perspective, allowing us to save us on the size of the capture.\n ///\n ///\n /// Fields that are read through a shared reference will always be read via a shared ref or a copy,"}, {"sha": "d6eeef3323cad0262e629880630d8672300f67ba", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1469,7 +1469,7 @@ fn check_fn_or_method<'fcx, 'tcx>(\n                 },\n             )\n         }));\n-    // Manually call `normalize_assocaited_types_in` on the other types\n+    // Manually call `normalize_associated_types_in` on the other types\n     // in `FnSig`. This ensures that if the types of these fields\n     // ever change to include projections, we will start normalizing\n     // them automatically."}, {"sha": "16ffabb76a515f82947dcaf80b5ec9dca9012185", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -81,7 +81,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if self.is_tainted_by_errors() {\n             // FIXME(eddyb) keep track of `ErrorGuaranteed` from where the error was emitted.\n-            wbcx.typeck_results.tainted_by_errors = Some(ErrorGuaranteed);\n+            wbcx.typeck_results.tainted_by_errors =\n+                Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n         }\n \n         debug!(\"writeback: typeck results for {:?} are {:#?}\", item_def_id, wbcx.typeck_results);\n@@ -662,7 +663,8 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         // users of the typeck results don't produce extra errors, or worse, ICEs.\n         if resolver.replaced_with_error {\n             // FIXME(eddyb) keep track of `ErrorGuaranteed` from where the error was emitted.\n-            self.typeck_results.tainted_by_errors = Some(ErrorGuaranteed);\n+            self.typeck_results.tainted_by_errors =\n+                Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n         }\n \n         x\n@@ -707,7 +709,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n     }\n \n     fn report_type_error(&self, t: Ty<'tcx>) {\n-        if !self.tcx.sess.has_errors() {\n+        if !self.tcx.sess.has_errors().is_some() {\n             self.infcx\n                 .emit_inference_failure_err(\n                     Some(self.body.id()),\n@@ -721,7 +723,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n     }\n \n     fn report_const_error(&self, c: ty::Const<'tcx>) {\n-        if !self.tcx.sess.has_errors() {\n+        if self.tcx.sess.has_errors().is_none() {\n             self.infcx\n                 .emit_inference_failure_err(\n                     Some(self.body.id()),"}, {"sha": "4b23cc4db85ba9fa215889d946586ccb38cfc562", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -21,7 +21,7 @@ pub(super) fn orphan_check_crate(tcx: TyCtxt<'_>, (): ()) -> &[LocalDefId] {\n         for &impl_of_trait in impls_of_trait {\n             match orphan_check_impl(tcx, impl_of_trait) {\n                 Ok(()) => {}\n-                Err(ErrorGuaranteed) => errors.push(impl_of_trait),\n+                Err(_) => errors.push(impl_of_trait),\n             }\n         }\n \n@@ -135,17 +135,19 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorGua\n         };\n \n         if let Some((msg, label)) = msg {\n-            struct_span_err!(tcx.sess, sp, E0321, \"{}\", msg).span_label(sp, label).emit();\n-            return Err(ErrorGuaranteed);\n+            let reported =\n+                struct_span_err!(tcx.sess, sp, E0321, \"{}\", msg).span_label(sp, label).emit();\n+            return Err(reported);\n         }\n     }\n \n     if let ty::Opaque(def_id, _) = *trait_ref.self_ty().kind() {\n-        tcx.sess\n+        let reported = tcx\n+            .sess\n             .struct_span_err(sp, \"cannot implement trait on type alias impl trait\")\n             .span_note(tcx.def_span(def_id), \"type alias impl trait defined here\")\n             .emit();\n-        return Err(ErrorGuaranteed);\n+        return Err(reported);\n     }\n \n     Ok(())"}, {"sha": "6a4c5d4a6c7ea34d168d5b2d2f680b552537c965", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -2689,7 +2689,6 @@ fn from_target_feature(\n                 Some(sym::tbm_target_feature) => rust_features.tbm_target_feature,\n                 Some(sym::wasm_target_feature) => rust_features.wasm_target_feature,\n                 Some(sym::cmpxchg16b_target_feature) => rust_features.cmpxchg16b_target_feature,\n-                Some(sym::adx_target_feature) => rust_features.adx_target_feature,\n                 Some(sym::movbe_target_feature) => rust_features.movbe_target_feature,\n                 Some(sym::rtm_target_feature) => rust_features.rtm_target_feature,\n                 Some(sym::f16c_target_feature) => rust_features.f16c_target_feature,"}, {"sha": "d422f355ad3a49a377014b6b2cf8b1ab6d5fbe4b", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{Applicability, ErrorGuaranteed, StashKey};\n+use rustc_errors::{Applicability, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -366,7 +366,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                     owner, def_id,\n                                 ),\n                             );\n-                            if let Some(ErrorGuaranteed) =\n+                            if let Some(_) =\n                                 tcx.typeck(owner).tainted_by_errors\n                             {\n                                 // Some error in the"}, {"sha": "b08e08a27d04ec68fae0858c3bef26bf0a09913b", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -47,6 +47,14 @@ pub trait Delegate<'tcx> {\n         bk: ty::BorrowKind,\n     );\n \n+    /// The value found at `place` is being copied.\n+    /// `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n+    fn copy(&mut self, place_with_id: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n+        // In most cases, copying data from `x` is equivalent to doing `*&x`, so by default\n+        // we treat a copy of `x` as a borrow of `x`.\n+        self.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow)\n+    }\n+\n     /// The path at `assignee_place` is being assigned to.\n     /// `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n     fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n@@ -523,7 +531,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 // struct; however, when EUV is run during typeck, it\n                 // may not. This will generate an error earlier in typeck,\n                 // so we can just ignore it.\n-                if !self.tcx().sess.has_errors() {\n+                if !self.tcx().sess.has_errors().is_some() {\n                     span_bug!(with_expr.span, \"with expression doesn't evaluate to a struct\");\n                 }\n             }\n@@ -836,9 +844,7 @@ fn delegate_consume<'a, 'tcx>(\n \n     match mode {\n         ConsumeMode::Move => delegate.consume(place_with_id, diag_expr_id),\n-        ConsumeMode::Copy => {\n-            delegate.borrow(place_with_id, diag_expr_id, ty::BorrowKind::ImmBorrow)\n-        }\n+        ConsumeMode::Copy => delegate.copy(place_with_id, diag_expr_id),\n     }\n }\n "}, {"sha": "5d4dfd3caefcc3b5fabcb168160d7bfc4ec4e434", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -537,7 +537,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorGuaranteed> {\n     check_unused::check_crate(tcx);\n     check_for_entry_fn(tcx);\n \n-    if tcx.sess.err_count() == 0 { Ok(()) } else { Err(ErrorGuaranteed) }\n+    if let Some(reported) = tcx.sess.has_errors() { Err(reported) } else { Ok(()) }\n }\n \n /// A quasi-deprecated helper used in rustdoc and clippy to get"}, {"sha": "d0f1db67c6e50aec605c507adc168002a8a5e958", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -323,7 +323,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             .skip(self.params_offset + self.num_provided_type_or_const_args())\n             .take(num_params_to_take)\n             .map(|param| match param.kind {\n-                // This is being infered from the item's inputs, no need to set it.\n+                // This is being inferred from the item's inputs, no need to set it.\n                 ty::GenericParamDefKind::Type { .. } if is_used_in_input(param.def_id) => {\n                     \"_\".to_string()\n                 }"}, {"sha": "0860e1bf4ca92ae0d0fa16817c145953eece6787", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -207,7 +207,6 @@\n //\n // Target features:\n #![cfg_attr(bootstrap, feature(aarch64_target_feature))]\n-#![feature(adx_target_feature)]\n #![feature(arm_target_feature)]\n #![feature(avx512_target_feature)]\n #![feature(cmpxchg16b_target_feature)]\n@@ -219,6 +218,7 @@\n #![feature(sse4a_target_feature)]\n #![feature(tbm_target_feature)]\n #![feature(wasm_target_feature)]\n+#![cfg_attr(bootstrap, feature(adx_target_feature))]\n \n // allow using `core::` in intra-doc links\n #[allow(unused_extern_crates)]"}, {"sha": "00b63dfbd069376c1acfb680992bdf31cdbc90e8", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -68,7 +68,7 @@ pub macro unreachable_2015 {\n         $crate::panicking::panic(\"internal error: entered unreachable code\")\n     ),\n     // Use of `unreachable_display` for non_fmt_panic lint.\n-    // NOTE: the message (\"internal error ...\") is embeded directly in unreachable_display\n+    // NOTE: the message (\"internal error ...\") is embedded directly in unreachable_display\n     ($msg:expr $(,)?) => (\n         $crate::panicking::unreachable_display(&$msg)\n     ),"}, {"sha": "e8e7c51cb9ba6be69a3761135767290e10a70600", "filename": "library/std/src/sys/common/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -28,7 +28,7 @@ pub const MIN_ALIGN: usize = 8;\n     target_arch = \"wasm64\",\n )))]\n pub const MIN_ALIGN: usize = 16;\n-// The allocator on the esp-idf platform guarentees 4 byte alignment.\n+// The allocator on the esp-idf platform guarantees 4 byte alignment.\n #[cfg(all(any(\n     all(target_arch = \"riscv32\", target_os = \"espidf\"),\n     all(target_arch = \"xtensa\", target_os = \"espidf\"),"}, {"sha": "32ccca8bcdd2c5a69bd48e53a699d0881e313db1", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1005,7 +1005,7 @@ impl<'a> Builder<'a> {\n             // the rustc_llvm cache. That will always work, even though it\n             // may mean that on the next non-check build we'll need to rebuild\n             // rustc_llvm. But if LLVM is stale, that'll be a tiny amount\n-            // of work comparitively, and we'd likely need to rebuild it anyway,\n+            // of work comparatively, and we'd likely need to rebuild it anyway,\n             // so that's okay.\n             if crate::native::prebuilt_llvm_config(self, target).is_err() {\n                 cargo.env(\"RUST_CHECK\", \"1\");"}, {"sha": "e030e0bc1cf809c96e669aa57f0cdf6677ef3e4c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1185,7 +1185,7 @@ impl Step for Assemble {\n                 for tool in LLVM_TOOLS {\n                     let tool_exe = exe(tool, target_compiler.host);\n                     let src_path = llvm_bin_dir.join(&tool_exe);\n-                    // When using `donwload-ci-llvm`, some of the tools\n+                    // When using `download-ci-llvm`, some of the tools\n                     // may not exist, so skip trying to copy them.\n                     if src_path.exists() {\n                         builder.copy(&src_path, &libdir_bin.join(&tool_exe));"}, {"sha": "be965971dbb6f80a2e8176a1993aca5af72793d0", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -2082,7 +2082,7 @@ impl Step for RustDev {\n     }\n }\n \n-/// Tarball containing a prebuilt version of the build-manifest tool, intented to be used by the\n+/// Tarball containing a prebuilt version of the build-manifest tool, intended to be used by the\n /// release process to avoid cloning the monorepo and building stuff.\n ///\n /// Should not be considered stable by end users."}, {"sha": "09e03e4dc6f989fd391ccb181e6fc7e53eacd509", "filename": "src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -89,7 +89,7 @@ To cross compile, you'll need to:\n     ```\n * Copy the binary to your target device and run.\n \n-We specify `CC`, `CXX`, `AR`, `CFLAGS`, and `CXXFLAGS` environment variables because somtimes a project or a subproject requires the use of your `'C'` cross toolchain. Since Tomatoware has a modified sysroot we also pass via RUSTFLAGS the location of the dynamic-linker and rpath.\n+We specify `CC`, `CXX`, `AR`, `CFLAGS`, and `CXXFLAGS` environment variables because sometimes a project or a subproject requires the use of your `'C'` cross toolchain. Since Tomatoware has a modified sysroot we also pass via RUSTFLAGS the location of the dynamic-linker and rpath.\n \n ### Test with QEMU\n "}, {"sha": "3f60caffef5b703a73bdcfba17db3989e483edf1", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -212,7 +212,7 @@ fn add_one(x: i32) -> i32 {\n \n #[naked]\n pub extern \"C\" fn add_two(x: i32) {\n-    // x + 2 preceeded by a landing pad/nop block\n+    // x + 2 preceded by a landing pad/nop block\n     unsafe {\n         asm!(\n             \""}, {"sha": "47289eb8978b9575c1e89a8d9ded39d6a5e813ec", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -834,7 +834,9 @@ impl AttributesExt for [ast::Attribute] {\n                         {\n                             match Cfg::parse(cfg_mi) {\n                                 Ok(new_cfg) => cfg &= new_cfg,\n-                                Err(e) => sess.span_err(e.span, e.msg),\n+                                Err(e) => {\n+                                    sess.span_err(e.span, e.msg);\n+                                }\n                             }\n                         }\n                     }\n@@ -2050,7 +2052,7 @@ crate struct Typedef {\n     /// alias instead of the final type. This will always have the final type, regardless of whether\n     /// `type_` came from HIR or from metadata.\n     ///\n-    /// If `item_type.is_none()`, `type_` is guarenteed to come from metadata (and therefore hold the\n+    /// If `item_type.is_none()`, `type_` is guaranteed to come from metadata (and therefore hold the\n     /// final type).\n     crate item_type: Option<Type>,\n }"}, {"sha": "bd64e2b03ce0c8dc606ea9b41a664b5dda9e4634", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -452,7 +452,7 @@ crate fn run_global_ctxt(\n         }\n     }\n \n-    if tcx.sess.diagnostic().has_errors_or_lint_errors() {\n+    if tcx.sess.diagnostic().has_errors_or_lint_errors().is_some() {\n         rustc_errors::FatalError.raise();\n     }\n "}, {"sha": "8db5f8b0cff8b01491f91da6a2e972dc468e2acc", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -149,7 +149,7 @@ crate fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n \n                     collector\n                 });\n-                if compiler.session().diagnostic().has_errors_or_lint_errors() {\n+                if compiler.session().diagnostic().has_errors_or_lint_errors().is_some() {\n                     FatalError.raise();\n                 }\n "}, {"sha": "2403ff4ebaa7a91f42321b38ba475a450fed5afe", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -13,7 +13,7 @@ crate trait FormatRenderer<'tcx>: Sized {\n     /// Gives a description of the renderer. Used for performance profiling.\n     fn descr() -> &'static str;\n \n-    /// Whether to call `item` recursivly for modules\n+    /// Whether to call `item` recursively for modules\n     ///\n     /// This is true for html, and false for json. See #80664\n     const RUN_ON_MODULE: bool;"}, {"sha": "3666767a9d9cbc61508de734133533486f236f16", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -2821,7 +2821,7 @@ fn render_call_locations(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item) {\n     let mut it = ordered_locations.into_iter().peekable();\n \n     // An example may fail to write if its source can't be read for some reason, so this method\n-    // continues iterating until a write suceeds\n+    // continues iterating until a write succeeds\n     let write_and_skip_failure = |w: &mut Buffer, it: &mut Peekable<_>| {\n         while let Some(example) = it.next() {\n             if write_example(&mut *w, example) {"}, {"sha": "f59222b780d3e22c224e06a2be78cd5d33ead9e1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -179,7 +179,7 @@ pub fn main() {\n \n     let exit_code = rustc_driver::catch_with_exit_code(|| match get_args() {\n         Some(args) => main_args(&args),\n-        _ => Err(ErrorGuaranteed),\n+        _ => Err(ErrorGuaranteed::unchecked_claim_error_was_emitted()),\n     });\n     process::exit(exit_code);\n }\n@@ -692,7 +692,13 @@ fn main_args(at_args: &[String]) -> MainResult {\n     // codes from `from_matches` here.\n     let options = match config::Options::from_matches(&matches) {\n         Ok(opts) => opts,\n-        Err(code) => return if code == 0 { Ok(()) } else { Err(ErrorGuaranteed) },\n+        Err(code) => {\n+            return if code == 0 {\n+                Ok(())\n+            } else {\n+                Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+            };\n+        }\n     };\n     rustc_interface::util::run_in_thread_pool_with_globals(\n         options.edition,\n@@ -705,8 +711,8 @@ fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> MainRes\n     match res {\n         Ok(()) => Ok(()),\n         Err(err) => {\n-            diag.struct_err(&err).emit();\n-            Err(ErrorGuaranteed)\n+            let reported = diag.struct_err(&err).emit();\n+            Err(reported)\n         }\n     }\n }\n@@ -790,7 +796,7 @@ fn main_options(options: config::Options) -> MainResult {\n                 (resolver.clone(), resolver_caches)\n             };\n \n-            if sess.diagnostic().has_errors_or_lint_errors() {\n+            if sess.diagnostic().has_errors_or_lint_errors().is_some() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");\n             }\n "}, {"sha": "81f371840ae4638ecc6534728216ae57dbf2a35c", "filename": "src/librustdoc/passes/bare_urls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fbare_urls.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'tcx> DocVisitor for BareUrlsLinter<'a, 'tcx> {\n                             format!(\"<{}>\", url),\n                             Applicability::MachineApplicable,\n                         )\n-                        .emit()\n+                        .emit();\n                 });\n             };\n "}, {"sha": "8d9b3377a698691a9df7c0a58708cb371cda2b53", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n \n         // lambda that will use the lint to start a new diagnostic and add\n         // a suggestion to it when needed.\n-        let diag_builder = |lint: LintDiagnosticBuilder<'_>| {\n+        let diag_builder = |lint: LintDiagnosticBuilder<'_, ()>| {\n             let explanation = if is_ignore {\n                 \"`ignore` code blocks require valid Rust code for syntax highlighting; \\\n                     mark blocks that do not contain Rust code as text\""}, {"sha": "2b17e3457d293eb93e1bd87ca75525a9d9fb7538", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -125,7 +125,9 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n                 crate::lint::MISSING_DOC_CODE_EXAMPLES,\n                 hir_id,\n                 sp,\n-                |lint| lint.build(\"missing code example in this documentation\").emit(),\n+                |lint| {\n+                    lint.build(\"missing code example in this documentation\").emit();\n+                },\n             );\n         }\n     } else if tests.found_tests > 0\n@@ -135,7 +137,9 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n             crate::lint::PRIVATE_DOC_TESTS,\n             hir_id,\n             item.attr_span(cx.tcx),\n-            |lint| lint.build(\"documentation test in private item\").emit(),\n+            |lint| {\n+                lint.build(\"documentation test in private item\").emit();\n+            },\n         );\n     }\n }"}, {"sha": "3ea3a24bfae11daf42e148a4ed0b061a0be51f97", "filename": "src/test/codegen/catch-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcatch-unwind.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -O\n \n-// On x86 the closure is inlined in foo() producting something like\n+// On x86 the closure is inlined in foo() producing something like\n // define i32 @foo() [...] {\n // tail call void @bar() [...]\n // ret i32 0"}, {"sha": "e61642b8e1be2ef2446e843a3f7039cb22d6534d", "filename": "src/test/codegen/debug-column.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fcodegen%2Fdebug-column.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fcodegen%2Fdebug-column.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-column.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1,4 +1,4 @@\n-// Verify that debuginfo column nubmers are 1-based byte offsets.\n+// Verify that debuginfo column numbers are 1-based byte offsets.\n //\n // ignore-windows\n // compile-flags: -C debuginfo=2"}, {"sha": "802b867a301aa5611bcdba471fbad793da7299b3", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingAllowedAttrPass {\n         let allowed = |attr| pprust::attribute_to_string(attr).contains(\"allowed_attr\");\n         if !cx.tcx.hir().attrs(item.hir_id()).iter().any(allowed) {\n             cx.lint(MISSING_ALLOWED_ATTR, |lint| {\n-                lint.build(\"Missing 'allowed_attr' attribute\").set_span(span).emit()\n+                lint.build(\"Missing 'allowed_attr' attribute\").set_span(span).emit();\n             });\n         }\n     }"}, {"sha": "bc153faa8925a73d952df3740a1a5a5bf63d1d9a", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -34,7 +34,7 @@ macro_rules! fake_lint_pass {\n                     if !cx.sess().contains_name(attrs, $attr) {\n                         cx.lint(CRATE_NOT_OKAY, |lint| {\n                              let msg = format!(\"crate is not marked with #![{}]\", $attr);\n-                             lint.build(&msg).set_span(span).emit()\n+                             lint.build(&msg).set_span(span).emit();\n                         });\n                     }\n                 )*"}, {"sha": "29d0abfbe53889e19ff961526ea02e8b6ed20c93", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -30,7 +30,7 @@ impl<'tcx> LateLintPass<'tcx> for Pass {\n         let span = cx.tcx.def_span(CRATE_DEF_ID);\n         if !cx.sess().contains_name(attrs, Symbol::intern(\"crate_okay\")) {\n             cx.lint(CRATE_NOT_OKAY, |lint| {\n-                lint.build(\"crate is not marked with #![crate_okay]\").set_span(span).emit()\n+                lint.build(\"crate is not marked with #![crate_okay]\").set_span(span).emit();\n             });\n         }\n     }"}, {"sha": "691cfb97d921858e5bec59e96f900620de8fbd08", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -23,10 +23,10 @@ impl<'tcx> LateLintPass<'tcx> for Pass {\n     fn check_item(&mut self, cx: &LateContext, it: &rustc_hir::Item) {\n         match it.ident.as_str() {\n             \"lintme\" => cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n+                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n             }),\n             \"pleaselintme\" => cx.lint(PLEASE_LINT, |lint| {\n-                lint.build(\"item is named 'pleaselintme'\").set_span(it.span).emit()\n+                lint.build(\"item is named 'pleaselintme'\").set_span(it.span).emit();\n             }),\n             _ => {}\n         }"}, {"sha": "285754928c2191bc324ca1473bfac333e4a9cd9c", "filename": "src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -22,7 +22,7 @@ impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name.as_str() == \"lintme\" {\n             cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n+                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n             });\n         }\n     }"}, {"sha": "3d5dba42b5f03b45326e1a25979cb6f732b27234", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -32,12 +32,12 @@ impl EarlyLintPass for Pass {\n     fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n         if it.ident.name.as_str() == \"lintme\" {\n             cx.lint(TEST_LINT, |lint| {\n-                lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n+                lint.build(\"item is named 'lintme'\").set_span(it.span).emit();\n             });\n         }\n         if it.ident.name.as_str() == \"lintmetoo\" {\n             cx.lint(TEST_GROUP, |lint| {\n-                lint.build(\"item is named 'lintmetoo'\").set_span(it.span).emit()\n+                lint.build(\"item is named 'lintmetoo'\").set_span(it.span).emit();\n             });\n         }\n     }"}, {"sha": "c8d2683e53f47267f7dee7c466444886eeff93d7", "filename": "src/test/ui/const-generics/const-generic-function.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -0,0 +1,21 @@\n+fn foo<const N: i32>() -> i32 {\n+    N\n+}\n+\n+const fn bar(n: i32, m: i32) -> i32 {\n+    n\n+}\n+\n+const fn baz() -> i32 {\n+    1\n+}\n+\n+const FOO: i32 = 3;\n+\n+fn main() {\n+    foo::<baz()>(); //~ ERROR expected type, found function `baz`\n+    //~| ERROR unresolved item provided when a constant was expected\n+    foo::<bar(bar(1, 1), bar(1, 1))>(); //~ ERROR expected type, found `1`\n+    foo::<bar(1, 1)>(); //~ ERROR expected type, found `1`\n+    foo::<bar(FOO, 2)>(); //~ ERROR expected type, found `2`\n+}"}, {"sha": "5ad3f1006c17d59e7652cb4f8ea82d0df68b2f3a", "filename": "src/test/ui/const-generics/const-generic-function.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.stderr?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -0,0 +1,54 @@\n+error: expected type, found `1`\n+  --> $DIR/const-generic-function.rs:18:19\n+   |\n+LL |     foo::<bar(bar(1, 1), bar(1, 1))>();\n+   |                   ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     foo::<{ bar(bar(1, 1), bar(1, 1)) }>();\n+   |           +                           +\n+\n+error: expected type, found `1`\n+  --> $DIR/const-generic-function.rs:19:15\n+   |\n+LL |     foo::<bar(1, 1)>();\n+   |               ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     foo::<{ bar(1, 1) }>();\n+   |           +           +\n+\n+error: expected type, found `2`\n+  --> $DIR/const-generic-function.rs:20:20\n+   |\n+LL |     foo::<bar(FOO, 2)>();\n+   |                    ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     foo::<{ bar(FOO, 2) }>();\n+   |           +             +\n+\n+error[E0573]: expected type, found function `baz`\n+  --> $DIR/const-generic-function.rs:16:11\n+   |\n+LL |     foo::<baz()>();\n+   |           ^^^^^ not a type\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/const-generic-function.rs:16:11\n+   |\n+LL |     foo::<baz()>();\n+   |           ^^^^^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     foo::<{ baz() }>();\n+   |           +       +\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0573, E0747.\n+For more information about an error, try `rustc --explain E0573`."}, {"sha": "78bda28485dcecf3c30bf7423b51b0f4ae6f3242", "filename": "src/test/ui/debuginfo/debuginfo-type-name-layout-ice-94961-1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -0,0 +1,16 @@\n+// Make sure the compiler does not ICE when trying to generate the debuginfo name of a type that\n+// causes a layout error. See https://github.com/rust-lang/rust/issues/94961.\n+\n+// compile-flags:-C debuginfo=2\n+// build-fail\n+// error-pattern: too big for the current architecture\n+// normalize-stderr-64bit \"18446744073709551615\" -> \"SIZE\"\n+// normalize-stderr-32bit \"4294967295\" -> \"SIZE\"\n+\n+#![crate_type = \"rlib\"]\n+\n+pub struct Foo<T>([T; usize::MAX]);\n+\n+pub fn foo() -> usize {\n+    std::mem::size_of::<Foo<u8>>()\n+}"}, {"sha": "851dca84c3dc01dcfef6885905eca960f54b85e0", "filename": "src/test/ui/debuginfo/debuginfo-type-name-layout-ice-94961-1.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-1.stderr?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -0,0 +1,4 @@\n+error: values of the type `[u8; SIZE]` are too big for the current architecture\n+\n+error: aborting due to previous error\n+"}, {"sha": "fdc088dc0f9a5049377580303e7b046bbe28f482", "filename": "src/test/ui/debuginfo/debuginfo-type-name-layout-ice-94961-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -0,0 +1,20 @@\n+// Make sure the compiler does not ICE when trying to generate the debuginfo name of a type that\n+// causes a layout error.\n+// This version of the test already ICE'd before the commit that introduce the ICE described in\n+// https://github.com/rust-lang/rust/issues/94961.\n+\n+// compile-flags:-C debuginfo=2\n+// build-fail\n+// error-pattern: too big for the current architecture\n+// normalize-stderr-64bit \"18446744073709551615\" -> \"SIZE\"\n+// normalize-stderr-32bit \"4294967295\" -> \"SIZE\"\n+\n+#![crate_type = \"rlib\"]\n+\n+pub enum Foo<T> {\n+    Bar([T; usize::MAX]),\n+}\n+\n+pub fn foo() -> usize {\n+    std::mem::size_of::<Foo<u8>>()\n+}"}, {"sha": "851dca84c3dc01dcfef6885905eca960f54b85e0", "filename": "src/test/ui/debuginfo/debuginfo-type-name-layout-ice-94961-2.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-type-name-layout-ice-94961-2.stderr?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -0,0 +1,4 @@\n+error: values of the type `[u8; SIZE]` are too big for the current architecture\n+\n+error: aborting due to previous error\n+"}, {"sha": "a96ce0cf47e08252a0d3e6e27c987ab424c96195", "filename": "src/test/ui/extern/extern-static-size-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -4,7 +4,7 @@ struct ReallyBig {\n }\n \n // The limit for \"too big for the current architecture\" is dependent on the target pointer size\n-// however it's artifically limited on 64 bits\n+// however it's artificially limited on 64 bits\n // logic copied from rustc_target::abi::TargetDataLayout::obj_size_bound()\n const fn max_size() -> usize {\n     #[cfg(target_pointer_width = \"16\")]"}, {"sha": "d5f4a4705b9728c253d9652ebd9a067428016044", "filename": "src/test/ui/feature-gates/feature-gate-deprecated_safe.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-deprecated_safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-deprecated_safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-deprecated_safe.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -0,0 +1,7 @@\n+#[deprecated_safe(since = \"TBD\", note = \"...\")] //~ ERROR: the `#[deprecated_safe]` attribute is an experimental feature\n+unsafe fn deprecated_safe_fn() {}\n+\n+#[deprecated_safe(since = \"TBD\", note = \"...\")] //~ ERROR: the `#[deprecated_safe]` attribute is an experimental feature\n+unsafe trait DeprecatedSafeTrait {}\n+\n+fn main() {}"}, {"sha": "5e98a1faaa301b9765ce52a877587cc46b165f07", "filename": "src/test/ui/feature-gates/feature-gate-deprecated_safe.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-deprecated_safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-deprecated_safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-deprecated_safe.stderr?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: the `#[deprecated_safe]` attribute is an experimental feature\n+  --> $DIR/feature-gate-deprecated_safe.rs:1:1\n+   |\n+LL | #[deprecated_safe(since = \"TBD\", note = \"...\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #94978 <https://github.com/rust-lang/rust/issues/94978> for more information\n+   = help: add `#![feature(deprecated_safe)]` to the crate attributes to enable\n+\n+error[E0658]: the `#[deprecated_safe]` attribute is an experimental feature\n+  --> $DIR/feature-gate-deprecated_safe.rs:4:1\n+   |\n+LL | #[deprecated_safe(since = \"TBD\", note = \"...\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #94978 <https://github.com/rust-lang/rust/issues/94978> for more information\n+   = help: add `#![feature(deprecated_safe)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1223a3037abc7e6bb3713fff2b867cd97bbf9ef8", "filename": "src/test/ui/generator/issue-57017.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fgenerator%2Fissue-57017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fgenerator%2Fissue-57017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-57017.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+// compile-flags: -Zdrop-tracking\n+#![feature(generators, negative_impls)]\n+\n+struct Client;\n+\n+impl !Sync for Client {}\n+\n+fn status(_client_status: &Client) -> i16 {\n+    200\n+}\n+\n+fn assert_send<T: Send>(_thing: T) {}\n+\n+// This is the same bug as issue 57017, but using yield instead of await\n+fn main() {\n+    let client = Client;\n+    let g = move || match status(&client) {\n+        _status => yield,\n+    };\n+    assert_send(g);\n+}"}, {"sha": "5407fb6dd28040e099e56116c80fb4bd91b498a8", "filename": "src/test/ui/impl-trait/multiple-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -1,4 +1,4 @@\n-// Test that multiple liftimes are allowed in impl trait types.\n+// Test that multiple lifetimes are allowed in impl trait types.\n // build-pass (FIXME(62277): could be check-pass?)\n \n trait X<'x>: Sized {}"}, {"sha": "f9c3ca763f26ea5728103dad29d7f723d551b3fd", "filename": "src/test/ui/parser/issues/issue-19398.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -4,10 +4,15 @@ error: expected `{`, found keyword `unsafe`\n LL | trait T {\n    |         - while parsing this item list starting here\n LL |     extern \"Rust\" unsafe fn foo();\n-   |                   ^^^^^^ expected `{`\n+   |     --------------^^^^^^\n+   |     |             |\n+   |     |             expected `{`\n+   |     help: `unsafe` must come before `extern \"Rust\"`: `unsafe extern \"Rust\"`\n LL |\n LL | }\n    | - the item list ends here\n+   |\n+   = note: keyword order for functions declaration is `default`, `pub`, `const`, `async`, `unsafe`, `extern`\n \n error: aborting due to previous error\n "}, {"sha": "5c33925a9ec73ba06261dc14c8855e044f813af6", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -67,7 +67,7 @@ const TEST_REPOS: &[Test] = &[\n         sha: \"91493fe47175076f330ce5fc518f0196c0476f56\",\n         lock: None,\n         packages: &[],\n-        // Test the embeded sqlite variant of diesel\n+        // Test the embedded sqlite variant of diesel\n         // This does not require any dependency to be present,\n         // sqlite will be compiled as part of the build process\n         features: Some(&[\"sqlite\", \"libsqlite3-sys/bundled\"]),"}, {"sha": "e6a0162fd02728d5c205996b2a34c0500756dba6", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -126,7 +126,7 @@ declare_clippy_lint! {\n     /// Duplicate code is less maintainable.\n     ///\n     /// ### Known problems\n-    /// * The lint doesn't check if the moved expressions modify values that are beeing used in\n+    /// * The lint doesn't check if the moved expressions modify values that are being used in\n     ///   the if condition. The suggestion can in that case modify the behavior of the program.\n     ///   See [rust-clippy#7452](https://github.com/rust-lang/rust-clippy/issues/7452)\n     ///"}, {"sha": "088d9996516e83683fdb9ffc160b6967be5da19f", "filename": "src/tools/clippy/clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -86,9 +86,9 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n \n             // check for `unwrap`\n             if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n-                let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-                if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n-                    || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n+                let receiver_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+                if is_type_diagnostic_item(self.lcx, receiver_ty, sym::Option)\n+                    || is_type_diagnostic_item(self.lcx, receiver_ty, sym::Result)\n                 {\n                     self.result.push(expr.span);\n                 }"}, {"sha": "98aee7592ae80a496bde4da3e3f47327a7a547b3", "filename": "src/tools/clippy/clippy_lints/src/float_equality_without_abs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -20,7 +20,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Known problems\n     /// If the user can ensure that b is larger than a, the `.abs()` is\n-    /// technically unneccessary. However, it will make the code more robust and doesn't have any\n+    /// technically unnecessary. However, it will make the code more robust and doesn't have any\n     /// large performance implications. If the abs call was deliberately left out for performance\n     /// reasons, it is probably better to state this explicitly in the code, which then can be done\n     /// with an allow.\n@@ -69,7 +69,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatEqualityWithoutAbs {\n \n         if_chain! {\n \n-            // left hand side is a substraction\n+            // left hand side is a subtraction\n             if let ExprKind::Binary(\n                 Spanned {\n                     node: BinOpKind::Sub,\n@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatEqualityWithoutAbs {\n             if let Res::Def(DefKind::AssocConst, def_id) = cx.qpath_res(epsilon_path, rhs.hir_id);\n             if match_def_path(cx, def_id, &paths::F32_EPSILON) || match_def_path(cx, def_id, &paths::F64_EPSILON);\n \n-            // values of the substractions on the left hand side are of the type float\n+            // values of the subtractions on the left hand side are of the type float\n             let t_val_l = cx.typeck_results().expr_ty(val_l);\n             let t_val_r = cx.typeck_results().expr_ty(val_r);\n             if let ty::Float(_) = t_val_l.kind();"}, {"sha": "8e61f2347767dfa85bfaa47754b4002f69dec360", "filename": "src/tools/clippy/clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -224,7 +224,7 @@ pub fn is_array(ty: Ty<'_>) -> bool {\n /// This builds the graph of side effect.\n /// The edge `a -> b` means if `a` has side effect, `b` will have side effect.\n ///\n-/// There are some exmaple in following code:\n+/// There are some example in following code:\n /// ```rust, ignore\n /// let b = 1;\n /// let a = b; // a -> b"}, {"sha": "b5dd27ff80de4052ea5960c26d63cb64e6f76610", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -290,7 +290,7 @@ fn ident_swap_sugg(\n             // used instead, in these cases.\n             *applicability = Applicability::MaybeIncorrect;\n \n-            // We arbitraily choose one side to suggest changing,\n+            // We arbitrarily choose one side to suggest changing,\n             // since we don't have a better guess. If the user\n             // ends up duplicating a clause, the `logic_bug` lint\n             // should catch it.\n@@ -374,19 +374,19 @@ fn strip_non_ident_wrappers(expr: &Expr) -> &Expr {\n }\n \n fn extract_related_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n-    append_opt_vecs(chained_binops(kind), if_statment_binops(kind))\n+    append_opt_vecs(chained_binops(kind), if_statement_binops(kind))\n }\n \n-fn if_statment_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n+fn if_statement_binops(kind: &ExprKind) -> Option<Vec<BinaryOp<'_>>> {\n     match kind {\n         ExprKind::If(ref condition, _, _) => chained_binops(&condition.kind),\n-        ExprKind::Paren(ref e) => if_statment_binops(&e.kind),\n+        ExprKind::Paren(ref e) => if_statement_binops(&e.kind),\n         ExprKind::Block(ref block, _) => {\n             let mut output = None;\n             for stmt in &block.stmts {\n                 match stmt.kind {\n                     StmtKind::Expr(ref e) | StmtKind::Semi(ref e) => {\n-                        output = append_opt_vecs(output, if_statment_binops(&e.kind));\n+                        output = append_opt_vecs(output, if_statement_binops(&e.kind));\n                     },\n                     _ => {},\n                 }"}, {"sha": "58cc057a39ed94001c8417fc75ff09a48d39f8c3", "filename": "src/tools/clippy/clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -10,7 +10,7 @@ declare_clippy_lint! {\n     /// Displays a warning when a struct with a trailing zero-sized array is declared without a `repr` attribute.\n     ///\n     /// ### Why is this bad?\n-    /// Zero-sized arrays aren't very useful in Rust itself, so such a struct is likely being created to pass to C code or in some other situation where control over memory layout matters (for example, in conjuction with manual allocation to make it easy to compute the offset of the array). Either way, `#[repr(C)]` (or another `repr` attribute) is needed.\n+    /// Zero-sized arrays aren't very useful in Rust itself, so such a struct is likely being created to pass to C code or in some other situation where control over memory layout matters (for example, in conjunction with manual allocation to make it easy to compute the offset of the array). Either way, `#[repr(C)]` (or another `repr` attribute) is needed.\n     ///\n     /// ### Example\n     /// ```rust"}, {"sha": "43e0132a7ec7b1a5f48397d9760e367a1e7a7f93", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -46,7 +46,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// Duplicate bounds makes the code\n-    /// less readable than specifing them only once.\n+    /// less readable than specifying them only once.\n     ///\n     /// ### Example\n     /// ```rust"}, {"sha": "b32be238cd55a178129cd428ba5015059d3c0b60", "filename": "src/tools/clippy/clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -83,19 +83,19 @@ impl<'a, 'tcx> Visitor<'tcx> for FindExpectUnwrap<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         // check for `expect`\n         if let Some(arglists) = method_chain_args(expr, &[\"expect\"]) {\n-            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-            if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n-                || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n+            let receiver_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+            if is_type_diagnostic_item(self.lcx, receiver_ty, sym::Option)\n+                || is_type_diagnostic_item(self.lcx, receiver_ty, sym::Result)\n             {\n                 self.result.push(expr.span);\n             }\n         }\n \n         // check for `unwrap`\n         if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n-            let reciever_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n-            if is_type_diagnostic_item(self.lcx, reciever_ty, sym::Option)\n-                || is_type_diagnostic_item(self.lcx, reciever_ty, sym::Result)\n+            let receiver_ty = self.typeck_results.expr_ty(&arglists[0][0]).peel_refs();\n+            if is_type_diagnostic_item(self.lcx, receiver_ty, sym::Option)\n+                || is_type_diagnostic_item(self.lcx, receiver_ty, sym::Result)\n             {\n                 self.result.push(expr.span);\n             }"}, {"sha": "dc82ba891fb1f098d2c1b1099c5a0453ec67b311", "filename": "src/tools/clippy/tests/lint_message_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Flint_message_convention.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -16,7 +16,7 @@ impl Message {\n     fn new(path: PathBuf) -> Self {\n         let content: String = std::fs::read_to_string(&path).unwrap();\n         // we don't want the first letter after \"error: \", \"help: \" ... to be capitalized\n-        // also no puncutation (except for \"?\" ?) at the end of a line\n+        // also no punctuation (except for \"?\" ?) at the end of a line\n         let regex_set: RegexSet = RegexSet::new(&[\n             r\"error: [A-Z]\",\n             r\"help: [A-Z]\","}, {"sha": "c826b082adff1312a0139571d87a85b74f02655b", "filename": "src/tools/clippy/tests/ui/manual_memcpy/with_loop_counters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_memcpy%2Fwith_loop_counters.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -59,7 +59,7 @@ pub fn manual_copy_with_counters(src: &[i32], dst: &mut [i32], dst2: &mut [i32])\n     }\n \n     // make sure parentheses are added properly to bitwise operators, which have lower precedence than\n-    // arithmetric ones\n+    // arithmetic ones\n     let mut count = 0 << 1;\n     for i in 0..1 << 1 {\n         dst[count] = src[i + 2];"}, {"sha": "e13efb3e0164b638f96b05861b818fdc70b23ed0", "filename": "src/tools/clippy/tests/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Ftests%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Fclippy%2Ftests%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fworkspace.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -93,7 +93,7 @@ fn test_no_deps_ignores_path_deps_in_workspaces() {\n         output\n     };\n \n-    // Trigger a sucessful build, so Cargo would like to cache the build result.\n+    // Trigger a successful build, so Cargo would like to cache the build result.\n     successful_build();\n \n     // Make sure there's no spurious rebuild when nothing changes."}, {"sha": "29d75585eb7252355f4969f341fc25072ed383a7", "filename": "src/tools/rustfmt/src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -575,7 +575,7 @@ where\n pub(crate) fn extract_pre_comment(pre_snippet: &str) -> (Option<String>, ListItemCommentStyle) {\n     let trimmed_pre_snippet = pre_snippet.trim();\n     // Both start and end are checked to support keeping a block comment inline with\n-    // the item, even if there are preceeding line comments, while still supporting\n+    // the item, even if there are preceding line comments, while still supporting\n     // a snippet that starts with a block comment but also contains one or more\n     // trailing single line comments.\n     // https://github.com/rust-lang/rustfmt/issues/3025"}, {"sha": "a8c2feec453c8a87ec742a5656c13087abcdb4d2", "filename": "src/tools/rustfmt/src/parse/macros/lazy_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Flazy_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Flazy_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Flazy_static.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -16,7 +16,7 @@ pub(crate) fn parse_lazy_static(\n         ($method:ident $(,)* $($arg:expr),* $(,)*) => {\n             match parser.$method($($arg,)*) {\n                 Ok(val) => {\n-                    if parser.sess.span_diagnostic.has_errors() {\n+                    if parser.sess.span_diagnostic.has_errors().is_some() {\n                         parser.sess.span_diagnostic.reset_err_count();\n                         return None;\n                     } else {"}, {"sha": "3728f3a19b44fc40ceccb60342ed4f5d99aeee75", "filename": "src/tools/rustfmt/src/parse/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fmacros%2Fmod.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -28,7 +28,7 @@ fn parse_macro_arg<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n             let mut cloned_parser = (*parser).clone();\n             match $parser(&mut cloned_parser) {\n                 Ok(x) => {\n-                    if parser.sess.span_diagnostic.has_errors() {\n+                    if parser.sess.span_diagnostic.has_errors().is_some() {\n                         parser.sess.span_diagnostic.reset_err_count();\n                     } else {\n                         // Parsing succeeded."}, {"sha": "a34ceed3fc91fe76ea306acdae1b07077d4991dc", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -235,7 +235,7 @@ impl ParseSess {\n     }\n \n     pub(super) fn has_errors(&self) -> bool {\n-        self.parse_sess.span_diagnostic.has_errors()\n+        self.parse_sess.span_diagnostic.has_errors().is_some()\n     }\n \n     pub(super) fn reset_errors(&self) {"}, {"sha": "a49d473a13f3fbdc955656174cc1313b51ec6695", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -251,7 +251,7 @@ fn rewrite_segment(\n         match **args {\n             ast::GenericArgs::AngleBracketed(ref data) if !data.args.is_empty() => {\n                 // HACK: squeeze out the span between the identifier and the parameters.\n-                // The hack is requried so that we don't remove the separator inside macro calls.\n+                // The hack is required so that we don't remove the separator inside macro calls.\n                 // This does not work in the presence of comment, hoping that people are\n                 // sane about where to put their comment.\n                 let separator_snippet = context"}, {"sha": "c5414233f09b31268f5585eb3155781f115a6be5", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -132,7 +132,7 @@ fn check_cfgs(\n             continue;\n         }\n \n-        let preceeded_by_doc_comment = {\n+        let preceded_by_doc_comment = {\n             let pre_contents = &contents[..idx];\n             let pre_newline = pre_contents.rfind('\\n');\n             let pre_doc_comment = pre_contents.rfind(\"///\");\n@@ -143,7 +143,7 @@ fn check_cfgs(\n             }\n         };\n \n-        if preceeded_by_doc_comment {\n+        if preceded_by_doc_comment {\n             continue;\n         }\n "}, {"sha": "5a061009b6b95eaedb22bab2d58f3a1ee26106e3", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd119057160cedea245aa2679add56723f3dc784/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=cd119057160cedea245aa2679add56723f3dc784", "patch": "@@ -396,7 +396,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             };\n             suppressible_tidy_err!(err, skip_file_length, \"\");\n         } else if lines > (LINES * 7) / 10 {\n-            // Just set it to something that doesn't trigger the \"unneccessarily ignored\" warning.\n+            // Just set it to something that doesn't trigger the \"unnecessarily ignored\" warning.\n             skip_file_length = Directive::Ignore(true);\n         }\n "}]}