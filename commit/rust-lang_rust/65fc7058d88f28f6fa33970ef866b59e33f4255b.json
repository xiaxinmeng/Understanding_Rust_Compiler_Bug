{"sha": "65fc7058d88f28f6fa33970ef866b59e33f4255b", "node_id": "C_kwDOAAsO6NoAKDY1ZmM3MDU4ZDg4ZjI4ZjZmYTMzOTcwZWY4NjZiNTllMzNmNDI1NWI", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-02-13T20:06:06Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-02-16T16:12:32Z"}, "message": "Do not suggest \"is a function\" for free variables\n\nPart of #82323", "tree": {"sha": "1ea83f641e34e8ee3bc994aed4496bc164a2c044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ea83f641e34e8ee3bc994aed4496bc164a2c044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65fc7058d88f28f6fa33970ef866b59e33f4255b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65fc7058d88f28f6fa33970ef866b59e33f4255b", "html_url": "https://github.com/rust-lang/rust/commit/65fc7058d88f28f6fa33970ef866b59e33f4255b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65fc7058d88f28f6fa33970ef866b59e33f4255b/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d165233794c48217e2e2bb6de8ee9763ea1084", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d165233794c48217e2e2bb6de8ee9763ea1084", "html_url": "https://github.com/rust-lang/rust/commit/05d165233794c48217e2e2bb6de8ee9763ea1084"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "f2b228fa00268d1b5fbd2df05deafe37a9f63d15", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65fc7058d88f28f6fa33970ef866b59e33f4255b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fc7058d88f28f6fa33970ef866b59e33f4255b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=65fc7058d88f28f6fa33970ef866b59e33f4255b", "patch": "@@ -40,7 +40,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Err(..) => return false,\n                 };\n \n+                // This conditional prevents us from asking to call errors and unresolved types.\n+                // It might seem that we can use `predicate_must_hold_modulo_regions`,\n+                // but since a Dummy binder is used to fill in the FnOnce trait's arguments,\n+                // type resolution always gives a \"maybe\" here.\n+                if self.autoderef(span, ty).any(|(ty, _)| {\n+                    info!(\"check deref {:?} error\", ty);\n+                    matches!(ty.kind(), ty::Error(_) | ty::Infer(_))\n+                }) {\n+                    return false;\n+                }\n+\n                 self.autoderef(span, ty).any(|(ty, _)| {\n+                    info!(\"check deref {:?} impl FnOnce\", ty);\n                     self.probe(|_| {\n                         let fn_once_substs = tcx.mk_substs_trait(\n                             ty,"}, {"sha": "26deb598762680fc6b2bd833b7f378ec81980a8e", "filename": "src/test/ui/functions-closures/fn-help-with-err-generic-is-not-function.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/65fc7058d88f28f6fa33970ef866b59e33f4255b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fc7058d88f28f6fa33970ef866b59e33f4255b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.rs?ref=65fc7058d88f28f6fa33970ef866b59e33f4255b", "patch": "@@ -0,0 +1,22 @@\n+struct Struct<T>(T);\n+impl Struct<T>\n+//~^ ERROR cannot find type `T` in this scope\n+//~| NOTE not found in this scope\n+//~| HELP you might be missing a type parameter\n+where\n+    T: Copy,\n+    //~^ ERROR cannot find type `T` in this scope\n+    //~| NOTE not found in this scope\n+{\n+    // The part where it claims that there is no method named `len` is a bug. Feel free to fix it.\n+    // This test is intended to ensure that a different bug, where it claimed\n+    // that `v` was a function, does not regress.\n+    fn method(v: Vec<u8>) { v.len(); }\n+    //~^ ERROR type annotations needed\n+    //~| NOTE cannot infer type\n+    //~| NOTE type must be known at this point\n+    //~| ERROR no method named `len`\n+    //~| NOTE private field, not a method\n+}\n+\n+fn main() {}"}, {"sha": "958ce3c25d0272cb0eb26d39a48f41eefcf689c6", "filename": "src/test/ui/functions-closures/fn-help-with-err-generic-is-not-function.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/65fc7058d88f28f6fa33970ef866b59e33f4255b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fc7058d88f28f6fa33970ef866b59e33f4255b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr?ref=65fc7058d88f28f6fa33970ef866b59e33f4255b", "patch": "@@ -0,0 +1,32 @@\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/fn-help-with-err-generic-is-not-function.rs:2:13\n+   |\n+LL | impl Struct<T>\n+   |     -       ^ not found in this scope\n+   |     |\n+   |     help: you might be missing a type parameter: `<T>`\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/fn-help-with-err-generic-is-not-function.rs:7:5\n+   |\n+LL |     T: Copy,\n+   |     ^ not found in this scope\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/fn-help-with-err-generic-is-not-function.rs:14:31\n+   |\n+LL |     fn method(v: Vec<u8>) { v.len(); }\n+   |                               ^^^ cannot infer type\n+   |\n+   = note: type must be known at this point\n+\n+error[E0599]: no method named `len` found for struct `Vec<u8>` in the current scope\n+  --> $DIR/fn-help-with-err-generic-is-not-function.rs:14:31\n+   |\n+LL |     fn method(v: Vec<u8>) { v.len(); }\n+   |                               ^^^ private field, not a method\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0282, E0412, E0599.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "f8a81af786f7ef8f61a0d25eadfaacaa388876f3", "filename": "src/test/ui/functions-closures/fn-help-with-err.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65fc7058d88f28f6fa33970ef866b59e33f4255b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65fc7058d88f28f6fa33970ef866b59e33f4255b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs?ref=65fc7058d88f28f6fa33970ef866b59e33f4255b", "patch": "@@ -0,0 +1,16 @@\n+// This test case checks the behavior of typeck::check::method::suggest::is_fn on Ty::Error.\n+fn main() {\n+    let arc = std::sync::Arc::new(oops);\n+    //~^ ERROR cannot find value `oops` in this scope\n+    //~| NOTE not found\n+    // The error \"note: `arc` is a function, perhaps you wish to call it\" MUST NOT appear.\n+    arc.blablabla();\n+    //~^ ERROR no method named `blablabla`\n+    //~| NOTE method not found\n+    let arc2 = std::sync::Arc::new(|| 1);\n+    // The error \"note: `arc2` is a function, perhaps you wish to call it\" SHOULD appear\n+    arc2.blablabla();\n+    //~^ ERROR no method named `blablabla`\n+    //~| NOTE method not found\n+    //~| NOTE `arc2` is a function, perhaps you wish to call it\n+}"}, {"sha": "4d6b3282ad9e925abe89d4b59ceaadcb1721a216", "filename": "src/test/ui/functions-closures/fn-help-with-err.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/65fc7058d88f28f6fa33970ef866b59e33f4255b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65fc7058d88f28f6fa33970ef866b59e33f4255b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr?ref=65fc7058d88f28f6fa33970ef866b59e33f4255b", "patch": "@@ -0,0 +1,24 @@\n+error[E0425]: cannot find value `oops` in this scope\n+  --> $DIR/fn-help-with-err.rs:3:35\n+   |\n+LL |     let arc = std::sync::Arc::new(oops);\n+   |                                   ^^^^ not found in this scope\n+\n+error[E0599]: no method named `blablabla` found for struct `Arc<_>` in the current scope\n+  --> $DIR/fn-help-with-err.rs:7:9\n+   |\n+LL |     arc.blablabla();\n+   |         ^^^^^^^^^ method not found in `Arc<_>`\n+\n+error[E0599]: no method named `blablabla` found for struct `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:40]>` in the current scope\n+  --> $DIR/fn-help-with-err.rs:12:10\n+   |\n+LL |     arc2.blablabla();\n+   |          ^^^^^^^^^ method not found in `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:40]>`\n+   |\n+   = note: `arc2` is a function, perhaps you wish to call it\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0425, E0599.\n+For more information about an error, try `rustc --explain E0425`."}]}