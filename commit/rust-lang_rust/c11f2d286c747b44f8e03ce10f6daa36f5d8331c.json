{"sha": "c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMWYyZDI4NmM3NDdiNDRmOGUwM2NlMTBmNmRhYTM2ZjVkODMzMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-04T01:44:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-04T01:44:25Z"}, "message": "Auto merge of #52927 - Mark-Simulacrum:cratestore-cleanup, r=alexcrichton\n\nCrate store cleanup\n\nEach commit mostly stands on its own.\n\nMost of the diff is lifetime-related and uninteresting.", "tree": {"sha": "a77dbb83a9dc03cf2a454042c47cdc10792d5841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a77dbb83a9dc03cf2a454042c47cdc10792d5841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "html_url": "https://github.com/rust-lang/rust/commit/c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3edb355b75a2c8315da5942f6a4d40c5d9b5ccbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edb355b75a2c8315da5942f6a4d40c5d9b5ccbf", "html_url": "https://github.com/rust-lang/rust/commit/3edb355b75a2c8315da5942f6a4d40c5d9b5ccbf"}, {"sha": "6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fdd6f65cae1dffec4010cbedd05247f6dace3b2", "html_url": "https://github.com/rust-lang/rust/commit/6fdd6f65cae1dffec4010cbedd05247f6dace3b2"}], "stats": {"total": 557, "additions": 255, "deletions": 302}, "files": [{"sha": "5f0d96c9c052ccf899d6d02fb23378bf620f95ef", "filename": "src/Cargo.lock", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -2219,6 +2219,7 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_incremental 0.0.0\",\n+ \"rustc_metadata_utils 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -2352,13 +2353,23 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"rustc_metadata_utils 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_ext 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_metadata_utils\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"rustc 0.0.0\",\n+ \"syntax 0.0.0\",\n+ \"syntax_pos 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_mir\"\n version = \"0.0.0\"\n@@ -2441,6 +2452,7 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n+ \"rustc_metadata 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "0e84104245dcb14a78ae3f1d2be8cfa1eb54bae5", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 130, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -22,10 +22,9 @@\n //! are *mostly* used as a part of that interface, but these should\n //! probably get a better home if someone can find one.\n \n-use hir::def;\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n-use hir::map::definitions::{Definitions, DefKey, DefPathTable};\n+use hir::map::definitions::{DefKey, DefPathTable};\n use hir::svh::Svh;\n use ty::{self, TyCtxt};\n use session::{Session, CrateDisambiguator};\n@@ -34,8 +33,6 @@ use session::search_paths::PathKind;\n use std::any::Any;\n use std::path::{Path, PathBuf};\n use syntax::ast;\n-use syntax::edition::Edition;\n-use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use rustc_target::spec::Target;\n@@ -140,11 +137,6 @@ pub struct ForeignModule {\n     pub def_id: DefId,\n }\n \n-pub enum LoadedMacro {\n-    MacroDef(ast::Item),\n-    ProcMacro(Lrc<SyntaxExtension>),\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub struct ExternCrate {\n     pub src: ExternCrateSource,\n@@ -221,29 +213,18 @@ pub trait MetadataLoader {\n pub trait CrateStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any>;\n \n-    // access to the metadata loader\n-    fn metadata_loader(&self) -> &dyn MetadataLoader;\n-\n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n     fn def_path_hash(&self, def: DefId) -> hir_map::DefPathHash;\n     fn def_path_table(&self, cnum: CrateNum) -> Lrc<DefPathTable>;\n \n     // \"queries\" used in resolve that aren't tracked for incremental compilation\n-    fn visibility_untracked(&self, def: DefId) -> ty::Visibility;\n-    fn export_macros_untracked(&self, cnum: CrateNum);\n-    fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind;\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n     fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n-    fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition;\n-    fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name>;\n-    fn item_children_untracked(&self, did: DefId, sess: &Session) -> Vec<def::Export>;\n-    fn load_macro_untracked(&self, did: DefId, sess: &Session) -> LoadedMacro;\n     fn extern_mod_stmt_cnum_untracked(&self, emod_id: ast::NodeId) -> Option<CrateNum>;\n     fn item_generics_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::Generics;\n-    fn associated_item_cloned_untracked(&self, def: DefId) -> ty::AssociatedItem;\n     fn postorder_cnums_untracked(&self) -> Vec<CrateNum>;\n \n     // This is basically a 1-based range of ints, which is a little\n@@ -260,116 +241,6 @@ pub trait CrateStore {\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;\n \n-// FIXME: find a better place for this?\n-pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n-    let mut err_count = 0;\n-    {\n-        let mut say = |s: &str| {\n-            match (sp, sess) {\n-                (_, None) => bug!(\"{}\", s),\n-                (Some(sp), Some(sess)) => sess.span_err(sp, s),\n-                (None, Some(sess)) => sess.err(s),\n-            }\n-            err_count += 1;\n-        };\n-        if s.is_empty() {\n-            say(\"crate name must not be empty\");\n-        }\n-        for c in s.chars() {\n-            if c.is_alphanumeric() { continue }\n-            if c == '_'  { continue }\n-            say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n-        }\n-    }\n-\n-    if err_count > 0 {\n-        sess.unwrap().abort_if_errors();\n-    }\n-}\n-\n-/// A dummy crate store that does not support any non-local crates,\n-/// for test purposes.\n-pub struct DummyCrateStore;\n-\n-#[allow(unused_variables)]\n-impl CrateStore for DummyCrateStore {\n-    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any>\n-        { bug!(\"crate_data_as_rc_any\") }\n-    // item info\n-    fn visibility_untracked(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }\n-    fn item_generics_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::Generics\n-        { bug!(\"item_generics_cloned\") }\n-\n-    // trait/impl-item info\n-    fn associated_item_cloned_untracked(&self, def: DefId) -> ty::AssociatedItem\n-        { bug!(\"associated_item_cloned\") }\n-\n-    // crate metadata\n-    fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n-    fn export_macros_untracked(&self, cnum: CrateNum) { bug!(\"export_macros\") }\n-    fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol { bug!(\"crate_name\") }\n-    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator {\n-        bug!(\"crate_disambiguator\")\n-    }\n-    fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh { bug!(\"crate_hash\") }\n-    fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition { bug!(\"crate_edition_untracked\") }\n-\n-    // resolve\n-    fn def_key(&self, def: DefId) -> DefKey { bug!(\"def_key\") }\n-    fn def_path(&self, def: DefId) -> hir_map::DefPath {\n-        bug!(\"relative_def_path\")\n-    }\n-    fn def_path_hash(&self, def: DefId) -> hir_map::DefPathHash {\n-        bug!(\"def_path_hash\")\n-    }\n-    fn def_path_table(&self, cnum: CrateNum) -> Lrc<DefPathTable> {\n-        bug!(\"def_path_table\")\n-    }\n-    fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name> {\n-        bug!(\"struct_field_names\")\n-    }\n-    fn item_children_untracked(&self, did: DefId, sess: &Session) -> Vec<def::Export> {\n-        bug!(\"item_children\")\n-    }\n-    fn load_macro_untracked(&self, did: DefId, sess: &Session) -> LoadedMacro { bug!(\"load_macro\") }\n-\n-    fn crates_untracked(&self) -> Vec<CrateNum> { vec![] }\n-\n-    // utility functions\n-    fn extern_mod_stmt_cnum_untracked(&self, emod_id: ast::NodeId) -> Option<CrateNum> { None }\n-    fn encode_metadata<'a, 'tcx>(&self,\n-                                 tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 link_meta: &LinkMeta)\n-                                 -> EncodedMetadata {\n-        bug!(\"encode_metadata\")\n-    }\n-    fn metadata_encoding_version(&self) -> &[u8] { bug!(\"metadata_encoding_version\") }\n-    fn postorder_cnums_untracked(&self) -> Vec<CrateNum> { bug!(\"postorder_cnums_untracked\") }\n-\n-    // access to the metadata loader\n-    fn metadata_loader(&self) -> &dyn MetadataLoader { bug!(\"metadata_loader\") }\n-}\n-\n-pub trait CrateLoader {\n-    fn process_extern_crate(&mut self, item: &ast::Item, defs: &Definitions) -> CrateNum;\n-\n-    fn process_path_extern(\n-        &mut self,\n-        name: Symbol,\n-        span: Span,\n-    ) -> CrateNum;\n-\n-    fn process_use_extern(\n-        &mut self,\n-        name: Symbol,\n-        span: Span,\n-        id: ast::NodeId,\n-        defs: &Definitions,\n-    ) -> CrateNum;\n-\n-    fn postprocess(&mut self, krate: &ast::Crate);\n-}\n-\n // This method is used when generating the command line to pass through to\n // system linker. The linker expects undefined symbols on the left of the\n // command line to be defined in libraries on the right, not the other way"}, {"sha": "a1f4a323f849ee3feecf5ec2f11526aee2bdb6b3", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -20,3 +20,4 @@ rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_incremental = { path = \"../librustc_incremental\" }\n+rustc_metadata_utils = { path = \"../librustc_metadata_utils\" }"}, {"sha": "3ff2388beea2ad55af1bbf216c3c513dcc777eee", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -37,6 +37,7 @@ extern crate rustc_incremental;\n extern crate syntax;\n extern crate syntax_pos;\n #[macro_use] extern crate rustc_data_structures;\n+extern crate rustc_metadata_utils;\n \n use rustc::ty::TyCtxt;\n "}, {"sha": "b33482eb868ffb54cae93623c8a6b8653d002c9d", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -10,11 +10,12 @@\n \n use rustc::session::config::{self, OutputFilenames, Input, OutputType};\n use rustc::session::Session;\n-use rustc::middle::cstore::{self, LinkMeta};\n+use rustc::middle::cstore::LinkMeta;\n use rustc::hir::svh::Svh;\n use std::path::{Path, PathBuf};\n use syntax::{ast, attr};\n use syntax_pos::Span;\n+use rustc_metadata_utils::validate_crate_name;\n \n pub fn out_filename(sess: &Session,\n                 crate_type: config::CrateType,\n@@ -61,7 +62,7 @@ pub fn find_crate_name(sess: Option<&Session>,\n                        attrs: &[ast::Attribute],\n                        input: &Input) -> String {\n     let validate = |s: String, span: Option<Span>| {\n-        cstore::validate_crate_name(sess, &s, span);\n+        validate_crate_name(sess, &s, span);\n         s\n     };\n "}, {"sha": "2c877e27e2ea71f9ab4de73dfe92aec1f562d600", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -20,7 +20,6 @@ use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n use rustc::middle::{self, reachable, resolve_lifetime, stability};\n-use rustc::middle::cstore::CrateStoreDyn;\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, AllArenas, Resolutions, TyCtxt};\n use rustc::traits;\n@@ -484,7 +483,7 @@ impl<'a> ::CompilerCalls<'a> for CompileController<'a> {\n         codegen_backend: &dyn (::CodegenBackend),\n         matches: &::getopts::Matches,\n         sess: &Session,\n-        cstore: &dyn (::CrateStore),\n+        cstore: &CStore,\n         input: &Input,\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>,\n@@ -728,9 +727,9 @@ pub struct ExpansionResult {\n     pub hir_forest: hir_map::Forest,\n }\n \n-pub struct InnerExpansionResult<'a> {\n+pub struct InnerExpansionResult<'a, 'b: 'a> {\n     pub expanded_crate: ast::Crate,\n-    pub resolver: Resolver<'a>,\n+    pub resolver: Resolver<'a, 'b>,\n     pub hir_forest: hir_map::Forest,\n }\n \n@@ -806,7 +805,7 @@ where\n \n /// Same as phase_2_configure_and_expand, but doesn't let you keep the resolver\n /// around\n-pub fn phase_2_configure_and_expand_inner<'a, F>(\n+pub fn phase_2_configure_and_expand_inner<'a, 'b: 'a, F>(\n     sess: &'a Session,\n     cstore: &'a CStore,\n     mut krate: ast::Crate,\n@@ -815,9 +814,9 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(\n     addl_plugins: Option<Vec<String>>,\n     make_glob_map: MakeGlobMap,\n     resolver_arenas: &'a ResolverArenas<'a>,\n-    crate_loader: &'a mut CrateLoader,\n+    crate_loader: &'a mut CrateLoader<'b>,\n     after_expand: F,\n-) -> Result<InnerExpansionResult<'a>, CompileIncomplete>\n+) -> Result<InnerExpansionResult<'a, 'b>, CompileIncomplete>\n where\n     F: FnOnce(&ast::Crate) -> CompileResult,\n {\n@@ -1209,7 +1208,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(\n     codegen_backend: &dyn CodegenBackend,\n     control: &CompileController,\n     sess: &'tcx Session,\n-    cstore: &'tcx CrateStoreDyn,\n+    cstore: &'tcx CStore,\n     hir_map: hir_map::Map<'tcx>,\n     mut analysis: ty::CrateAnalysis,\n     resolutions: Resolutions,"}, {"sha": "74e7d328891e035d03b3397bdc1f421e691ef3ca", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -78,7 +78,6 @@ use rustc::session::filesearch;\n use rustc::session::{early_error, early_warn};\n use rustc::lint::Lint;\n use rustc::lint;\n-use rustc::middle::cstore::CrateStore;\n use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n@@ -676,7 +675,7 @@ pub trait CompilerCalls<'a> {\n                      _: &dyn CodegenBackend,\n                      _: &getopts::Matches,\n                      _: &Session,\n-                     _: &dyn CrateStore,\n+                     _: &CStore,\n                      _: &Input,\n                      _: &Option<PathBuf>,\n                      _: &Option<PathBuf>)\n@@ -884,7 +883,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                      codegen_backend: &dyn CodegenBackend,\n                      matches: &getopts::Matches,\n                      sess: &Session,\n-                     cstore: &dyn CrateStore,\n+                     cstore: &CStore,\n                      input: &Input,\n                      odir: &Option<PathBuf>,\n                      ofile: &Option<PathBuf>)\n@@ -990,7 +989,7 @@ pub fn enable_save_analysis(control: &mut CompileController) {\n \n impl RustcDefaultCalls {\n     pub fn list_metadata(sess: &Session,\n-                         cstore: &dyn CrateStore,\n+                         cstore: &CStore,\n                          matches: &getopts::Matches,\n                          input: &Input)\n                          -> Compilation {\n@@ -1002,7 +1001,7 @@ impl RustcDefaultCalls {\n                     let mut v = Vec::new();\n                     locator::list_file_metadata(&sess.target.target,\n                                                 path,\n-                                                cstore.metadata_loader(),\n+                                                &*cstore.metadata_loader,\n                                                 &mut v)\n                             .unwrap();\n                     println!(\"{}\", String::from_utf8(v).unwrap());"}, {"sha": "5c1f3bfbe670b41f95ab821854a35248aa879de0", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -20,11 +20,11 @@ use {abort_on_err, driver};\n use rustc::ty::{self, TyCtxt, Resolutions, AllArenas};\n use rustc::cfg;\n use rustc::cfg::graphviz::LabelledCFG;\n-use rustc::middle::cstore::CrateStoreDyn;\n use rustc::session::Session;\n use rustc::session::config::{Input, OutputFilenames};\n use rustc_borrowck as borrowck;\n use rustc_borrowck::graphviz as borrowck_dot;\n+use rustc_metadata::cstore::CStore;\n \n use rustc_mir::util::{write_mir_pretty, write_mir_graphviz};\n \n@@ -199,7 +199,7 @@ impl PpSourceMode {\n     }\n     fn call_with_pp_support_hir<'tcx, A, F>(&self,\n                                                sess: &'tcx Session,\n-                                               cstore: &'tcx CrateStoreDyn,\n+                                               cstore: &'tcx CStore,\n                                                hir_map: &hir_map::Map<'tcx>,\n                                                analysis: &ty::CrateAnalysis,\n                                                resolutions: &Resolutions,\n@@ -918,7 +918,7 @@ pub fn print_after_parsing(sess: &Session,\n }\n \n pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n-                                                cstore: &'tcx CrateStoreDyn,\n+                                                cstore: &'tcx CStore,\n                                                 hir_map: &hir_map::Map<'tcx>,\n                                                 analysis: &ty::CrateAnalysis,\n                                                 resolutions: &Resolutions,\n@@ -1074,7 +1074,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n // with a different callback than the standard driver, so that isn't easy.\n // Instead, we call that function ourselves.\n fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n-                                       cstore: &'a CrateStoreDyn,\n+                                       cstore: &'a CStore,\n                                        hir_map: &hir_map::Map<'tcx>,\n                                        analysis: &ty::CrateAnalysis,\n                                        resolutions: &Resolutions,"}, {"sha": "6142fe78149ce219c5715d8c43f629d0c07d71a9", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -20,3 +20,4 @@ serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_metadata_utils = { path = \"../librustc_metadata_utils\" }"}, {"sha": "b5b47fb35dc21ff82eb0dd2ae225ac7e5de57f4e", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -24,12 +24,13 @@ use rustc::session::{Session, CrateDisambiguator};\n use rustc::session::config::{Sanitizer, self};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc::session::search_paths::PathKind;\n-use rustc::middle;\n-use rustc::middle::cstore::{validate_crate_name, ExternCrate, ExternCrateSource};\n+use rustc::middle::cstore::{ExternCrate, ExternCrateSource};\n use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::map::Definitions;\n \n+use rustc_metadata_utils::validate_crate_name;\n+\n use std::ops::Deref;\n use std::path::PathBuf;\n use std::{cmp, fs};\n@@ -1056,8 +1057,8 @@ impl<'a> CrateLoader<'a> {\n     }\n }\n \n-impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n-    fn postprocess(&mut self, krate: &ast::Crate) {\n+impl<'a> CrateLoader<'a> {\n+    pub fn postprocess(&mut self, krate: &ast::Crate) {\n         // inject the sanitizer runtime before the allocator runtime because all\n         // sanitizers force the use of the `alloc_system` allocator\n         self.inject_sanitizer_runtime();\n@@ -1070,7 +1071,9 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         }\n     }\n \n-    fn process_extern_crate(&mut self, item: &ast::Item, definitions: &Definitions) -> CrateNum {\n+    pub fn process_extern_crate(\n+        &mut self, item: &ast::Item, definitions: &Definitions,\n+    ) -> CrateNum {\n         match item.node {\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 debug!(\"resolving extern crate stmt. ident: {} orig_name: {:?}\",\n@@ -1113,7 +1116,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         }\n     }\n \n-    fn process_path_extern(\n+    pub fn process_path_extern(\n         &mut self,\n         name: Symbol,\n         span: Span,\n@@ -1137,7 +1140,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         cnum\n     }\n \n-    fn process_use_extern(\n+    pub fn process_use_extern(\n         &mut self,\n         name: Symbol,\n         span: Span,"}, {"sha": "2d3e3080c89e390df630b41bab99c7c81d8b2624", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -93,6 +93,11 @@ pub struct CStore {\n     pub metadata_loader: Box<dyn MetadataLoader + Sync>,\n }\n \n+pub enum LoadedMacro {\n+    MacroDef(ast::Item),\n+    ProcMacro(Lrc<SyntaxExtension>),\n+}\n+\n impl CStore {\n     pub fn new(metadata_loader: Box<dyn MetadataLoader + Sync>) -> CStore {\n         CStore {"}, {"sha": "916c0920e0b4b2dfa7c20376d9f668ed9122d61c", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 71, "deletions": 82, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use cstore;\n+use cstore::{self, LoadedMacro};\n use encoder;\n use link_args;\n use native_libs;\n@@ -17,8 +17,8 @@ use schema;\n \n use rustc::ty::query::QueryConfig;\n use rustc::middle::cstore::{CrateStore, DepKind,\n-                            MetadataLoader, LinkMeta,\n-                            LoadedMacro, EncodedMetadata, NativeLibraryKind};\n+                            LinkMeta,\n+                            EncodedMetadata, NativeLibraryKind};\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n use rustc::hir::def;\n@@ -411,106 +411,37 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n     };\n }\n \n-impl CrateStore for cstore::CStore {\n-    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any> {\n-        self.get_crate_data(krate)\n-    }\n-\n-    fn metadata_loader(&self) -> &dyn MetadataLoader {\n-        &*self.metadata_loader\n-    }\n-\n-    fn visibility_untracked(&self, def: DefId) -> ty::Visibility {\n-        self.get_crate_data(def.krate).get_visibility(def.index)\n-    }\n-\n-    fn item_generics_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::Generics {\n-        self.get_crate_data(def.krate).get_generics(def.index, sess)\n-    }\n-\n-    fn associated_item_cloned_untracked(&self, def: DefId) -> ty::AssociatedItem\n-    {\n-        self.get_crate_data(def.krate).get_associated_item(def.index)\n-    }\n-\n-    fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind\n-    {\n-        let data = self.get_crate_data(cnum);\n-        let r = *data.dep_kind.lock();\n-        r\n-    }\n-\n-    fn export_macros_untracked(&self, cnum: CrateNum) {\n+impl cstore::CStore {\n+    pub fn export_macros_untracked(&self, cnum: CrateNum) {\n         let data = self.get_crate_data(cnum);\n         let mut dep_kind = data.dep_kind.lock();\n         if *dep_kind == DepKind::UnexportedMacrosOnly {\n             *dep_kind = DepKind::MacrosOnly;\n         }\n     }\n \n-    fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol\n-    {\n-        self.get_crate_data(cnum).name\n-    }\n-\n-    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator\n-    {\n-        self.get_crate_data(cnum).root.disambiguator\n-    }\n-\n-    fn crate_hash_untracked(&self, cnum: CrateNum) -> hir::svh::Svh\n-    {\n-        self.get_crate_data(cnum).root.hash\n+    pub fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind {\n+        let data = self.get_crate_data(cnum);\n+        let r = *data.dep_kind.lock();\n+        r\n     }\n \n-    fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition\n-    {\n+    pub fn crate_edition_untracked(&self, cnum: CrateNum) -> Edition {\n         self.get_crate_data(cnum).root.edition\n     }\n \n-    /// Returns the `DefKey` for a given `DefId`. This indicates the\n-    /// parent `DefId` as well as some idea of what kind of data the\n-    /// `DefId` refers to.\n-    fn def_key(&self, def: DefId) -> DefKey {\n-        // Note: loading the def-key (or def-path) for a def-id is not\n-        // a *read* of its metadata. This is because the def-id is\n-        // really just an interned shorthand for a def-path, which is the\n-        // canonical name for an item.\n-        //\n-        // self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).def_key(def.index)\n-    }\n-\n-    fn def_path(&self, def: DefId) -> DefPath {\n-        // See `Note` above in `def_key()` for why this read is\n-        // commented out:\n-        //\n-        // self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).def_path(def.index)\n-    }\n-\n-    fn def_path_hash(&self, def: DefId) -> DefPathHash {\n-        self.get_crate_data(def.krate).def_path_hash(def.index)\n-    }\n-\n-    fn def_path_table(&self, cnum: CrateNum) -> Lrc<DefPathTable> {\n-        self.get_crate_data(cnum).def_path_table.clone()\n-    }\n-\n-    fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name>\n-    {\n+    pub fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name> {\n         self.get_crate_data(def.krate).get_struct_field_names(def.index)\n     }\n \n-    fn item_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<def::Export>\n-    {\n+    pub fn item_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<def::Export> {\n         let mut result = vec![];\n         self.get_crate_data(def_id.krate)\n             .each_child_of_item(def_id.index, |child| result.push(child), sess);\n         result\n     }\n \n-    fn load_macro_untracked(&self, id: DefId, sess: &Session) -> LoadedMacro {\n+    pub fn load_macro_untracked(&self, id: DefId, sess: &Session) -> LoadedMacro {\n         let data = self.get_crate_data(id.krate);\n         if let Some(ref proc_macros) = data.proc_macros {\n             return LoadedMacro::ProcMacro(proc_macros[id.index.to_proc_macro_index()].1.clone());\n@@ -559,6 +490,64 @@ impl CrateStore for cstore::CStore {\n         })\n     }\n \n+    pub fn associated_item_cloned_untracked(&self, def: DefId) -> ty::AssociatedItem {\n+        self.get_crate_data(def.krate).get_associated_item(def.index)\n+    }\n+}\n+\n+impl CrateStore for cstore::CStore {\n+    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any> {\n+        self.get_crate_data(krate)\n+    }\n+\n+    fn item_generics_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::Generics {\n+        self.get_crate_data(def.krate).get_generics(def.index, sess)\n+    }\n+\n+    fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol\n+    {\n+        self.get_crate_data(cnum).name\n+    }\n+\n+    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator\n+    {\n+        self.get_crate_data(cnum).root.disambiguator\n+    }\n+\n+    fn crate_hash_untracked(&self, cnum: CrateNum) -> hir::svh::Svh\n+    {\n+        self.get_crate_data(cnum).root.hash\n+    }\n+\n+    /// Returns the `DefKey` for a given `DefId`. This indicates the\n+    /// parent `DefId` as well as some idea of what kind of data the\n+    /// `DefId` refers to.\n+    fn def_key(&self, def: DefId) -> DefKey {\n+        // Note: loading the def-key (or def-path) for a def-id is not\n+        // a *read* of its metadata. This is because the def-id is\n+        // really just an interned shorthand for a def-path, which is the\n+        // canonical name for an item.\n+        //\n+        // self.dep_graph.read(DepNode::MetaData(def));\n+        self.get_crate_data(def.krate).def_key(def.index)\n+    }\n+\n+    fn def_path(&self, def: DefId) -> DefPath {\n+        // See `Note` above in `def_key()` for why this read is\n+        // commented out:\n+        //\n+        // self.dep_graph.read(DepNode::MetaData(def));\n+        self.get_crate_data(def.krate).def_path(def.index)\n+    }\n+\n+    fn def_path_hash(&self, def: DefId) -> DefPathHash {\n+        self.get_crate_data(def.krate).def_path_hash(def.index)\n+    }\n+\n+    fn def_path_table(&self, cnum: CrateNum) -> Lrc<DefPathTable> {\n+        self.get_crate_data(cnum).def_path_table.clone()\n+    }\n+\n     fn crates_untracked(&self) -> Vec<CrateNum>\n     {\n         let mut result = vec![];"}, {"sha": "798b631989bd57ad642ed9cc4ae30e91f4c74306", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -37,6 +37,7 @@ extern crate serialize as rustc_serialize; // used by deriving\n extern crate rustc_errors as errors;\n extern crate syntax_ext;\n extern crate proc_macro;\n+extern crate rustc_metadata_utils;\n \n #[macro_use]\n extern crate rustc;"}, {"sha": "4a5e20376bfb546e23e52091395abd5135cb0409", "filename": "src/librustc_metadata_utils/Cargo.toml", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata_utils%2FCargo.toml?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -0,0 +1,14 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_metadata_utils\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_metadata_utils\"\n+path = \"lib.rs\"\n+crate-type = [\"dylib\"]\n+\n+[dependencies]\n+rustc = { path = \"../librustc\" }\n+syntax = { path = \"../libsyntax\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "a1e5150390ac1bfd3c36dda01427fd9054947b9d", "filename": "src/librustc_metadata_utils/lib.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_metadata_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata_utils%2Flib.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_use]\n+extern crate rustc;\n+extern crate syntax_pos;\n+\n+use rustc::session::Session;\n+use syntax_pos::Span;\n+\n+pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n+    let mut err_count = 0;\n+    {\n+        let mut say = |s: &str| {\n+            match (sp, sess) {\n+                (_, None) => bug!(\"{}\", s),\n+                (Some(sp), Some(sess)) => sess.span_err(sp, s),\n+                (None, Some(sess)) => sess.err(s),\n+            }\n+            err_count += 1;\n+        };\n+        if s.is_empty() {\n+            say(\"crate name must not be empty\");\n+        }\n+        for c in s.chars() {\n+            if c.is_alphanumeric() { continue }\n+            if c == '_'  { continue }\n+            say(&format!(\"invalid character `{}` in crate name: `{}`\", c, s));\n+        }\n+    }\n+\n+    if err_count > 0 {\n+        sess.unwrap().abort_if_errors();\n+    }\n+}"}, {"sha": "837340f70fce757c35a998a321cfb77f1b19b97b", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -17,3 +17,4 @@ arena = { path = \"../libarena\" }\n rustc_errors = { path = \"../librustc_errors\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_metadata = { path = \"../librustc_metadata\" }"}, {"sha": "c782f2072b9aaaacaed4b844c11f4f0691a6e033", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -21,10 +21,11 @@ use {PerNS, Resolver, ResolverArenas};\n use Namespace::{self, TypeNS, ValueNS, MacroNS};\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n-use rustc::middle::cstore::LoadedMacro;\n use rustc::hir::def::*;\n use rustc::hir::def_id::{BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::ty;\n+use rustc::middle::cstore::CrateStore;\n+use rustc_metadata::cstore::LoadedMacro;\n \n use std::cell::Cell;\n use rustc_data_structures::sync::Lrc;\n@@ -86,7 +87,7 @@ struct LegacyMacroImports {\n     imports: Vec<(Name, Span)>,\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'cl> Resolver<'a, 'cl> {\n     /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;\n     /// otherwise, reports an error.\n     pub fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)\n@@ -776,13 +777,13 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-pub struct BuildReducedGraphVisitor<'a, 'b: 'a> {\n-    pub resolver: &'a mut Resolver<'b>,\n+pub struct BuildReducedGraphVisitor<'a, 'b: 'a, 'c: 'b> {\n+    pub resolver: &'a mut Resolver<'b, 'c>,\n     pub legacy_scope: LegacyScope<'b>,\n     pub expansion: Mark,\n }\n \n-impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n+impl<'a, 'b, 'cl> BuildReducedGraphVisitor<'a, 'b, 'cl> {\n     fn visit_invoc(&mut self, id: ast::NodeId) -> &'b InvocationData<'b> {\n         let mark = id.placeholder_to_mark();\n         self.resolver.current_module.unresolved_invocations.borrow_mut().insert(mark);\n@@ -806,7 +807,7 @@ macro_rules! method {\n     }\n }\n \n-impl<'a, 'b> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b> {\n+impl<'a, 'b, 'cl> Visitor<'a> for BuildReducedGraphVisitor<'a, 'b, 'cl> {\n     method!(visit_impl_item: ast::ImplItem, ast::ImplItemKind::Macro, walk_impl_item);\n     method!(visit_expr:      ast::Expr,     ast::ExprKind::Mac,       walk_expr);\n     method!(visit_pat:       ast::Pat,      ast::PatKind::Mac,        walk_pat);"}, {"sha": "e1b059d2b733f30670ad6ae1eadd0982dcb5c83e", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -31,30 +31,30 @@ use syntax::visit::{self, Visitor};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n \n \n-struct UnusedImportCheckVisitor<'a, 'b: 'a> {\n-    resolver: &'a mut Resolver<'b>,\n+struct UnusedImportCheckVisitor<'a, 'b: 'a, 'd: 'b> {\n+    resolver: &'a mut Resolver<'b, 'd>,\n     /// All the (so far) unused imports, grouped path list\n     unused_imports: NodeMap<NodeMap<Span>>,\n     base_id: ast::NodeId,\n     item_span: Span,\n }\n \n // Deref and DerefMut impls allow treating UnusedImportCheckVisitor as Resolver.\n-impl<'a, 'b> Deref for UnusedImportCheckVisitor<'a, 'b> {\n-    type Target = Resolver<'b>;\n+impl<'a, 'b, 'd> Deref for UnusedImportCheckVisitor<'a, 'b, 'd> {\n+    type Target = Resolver<'b, 'd>;\n \n-    fn deref<'c>(&'c self) -> &'c Resolver<'b> {\n+    fn deref<'c>(&'c self) -> &'c Resolver<'b, 'd> {\n         &*self.resolver\n     }\n }\n \n-impl<'a, 'b> DerefMut for UnusedImportCheckVisitor<'a, 'b> {\n-    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b> {\n+impl<'a, 'b, 'd> DerefMut for UnusedImportCheckVisitor<'a, 'b, 'd> {\n+    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b, 'd> {\n         &mut *self.resolver\n     }\n }\n \n-impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n+impl<'a, 'b, 'd> UnusedImportCheckVisitor<'a, 'b, 'd> {\n     // We have information about whether `use` (import) directives are actually\n     // used now. If an import is not used at all, we signal a lint error.\n     fn check_import(&mut self, item_id: ast::NodeId, id: ast::NodeId, span: Span) {\n@@ -77,7 +77,7 @@ impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n+impl<'a, 'b, 'cl> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'cl> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n         self.item_span = item.span;\n "}, {"sha": "a7fcc89f6b974209c651911f59c49c41a045d506", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -26,6 +26,7 @@ extern crate arena;\n #[macro_use]\n extern crate rustc;\n extern crate rustc_data_structures;\n+extern crate rustc_metadata;\n \n pub use rustc::hir::def::{Namespace, PerNS};\n \n@@ -34,7 +35,7 @@ use self::RibKind::*;\n \n use rustc::hir::map::{Definitions, DefCollector};\n use rustc::hir::{self, PrimTy, TyBool, TyChar, TyFloat, TyInt, TyUint, TyStr};\n-use rustc::middle::cstore::{CrateStore, CrateLoader};\n+use rustc::middle::cstore::CrateStore;\n use rustc::session::Session;\n use rustc::lint;\n use rustc::hir::def::*;\n@@ -44,6 +45,9 @@ use rustc::ty;\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n \n+use rustc_metadata::creader::CrateLoader;\n+use rustc_metadata::cstore::CStore;\n+\n use syntax::codemap::CodeMap;\n use syntax::ext::hygiene::{Mark, Transparency, SyntaxContext};\n use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};\n@@ -687,7 +691,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n }\n \n /// This thing walks the whole crate in DFS manner, visiting each item, resolving names as it goes.\n-impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n+impl<'a, 'tcx, 'cl> Visitor<'tcx> for Resolver<'a, 'cl> {\n     fn visit_item(&mut self, item: &'tcx Item) {\n         self.resolve_item(item);\n     }\n@@ -1176,7 +1180,7 @@ impl<'a> NameBinding<'a> {\n         }\n     }\n \n-    fn get_macro(&self, resolver: &mut Resolver<'a>) -> Lrc<SyntaxExtension> {\n+    fn get_macro<'b: 'a>(&self, resolver: &mut Resolver<'a, 'b>) -> Lrc<SyntaxExtension> {\n         resolver.get_macro(self.def_ignoring_ambiguity())\n     }\n \n@@ -1291,9 +1295,9 @@ impl PrimitiveTypeTable {\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n-pub struct Resolver<'a> {\n+pub struct Resolver<'a, 'b: 'a> {\n     session: &'a Session,\n-    cstore: &'a dyn CrateStore,\n+    cstore: &'a CStore,\n \n     pub definitions: Definitions,\n \n@@ -1389,7 +1393,7 @@ pub struct Resolver<'a> {\n     /// true if `#![feature(use_extern_macros)]`\n     use_extern_macros: bool,\n \n-    crate_loader: &'a mut dyn CrateLoader,\n+    crate_loader: &'a mut CrateLoader<'b>,\n     macro_names: FxHashSet<Ident>,\n     macro_prelude: FxHashMap<Name, &'a NameBinding<'a>>,\n     pub all_macros: FxHashMap<Name, Def>,\n@@ -1473,7 +1477,7 @@ impl<'a> ResolverArenas<'a> {\n     }\n }\n \n-impl<'a, 'b: 'a> ty::DefIdTree for &'a Resolver<'b> {\n+impl<'a, 'b: 'a, 'cl: 'b> ty::DefIdTree for &'a Resolver<'b, 'cl> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         match id.krate {\n             LOCAL_CRATE => self.definitions.def_key(id.index).parent,\n@@ -1484,7 +1488,7 @@ impl<'a, 'b: 'a> ty::DefIdTree for &'a Resolver<'b> {\n \n /// This interface is used through the AST\u2192HIR step, to embed full paths into the HIR. After that\n /// the resolver is no longer needed as all the relevant information is inline.\n-impl<'a> hir::lowering::Resolver for Resolver<'a> {\n+impl<'a, 'cl> hir::lowering::Resolver for Resolver<'a, 'cl> {\n     fn resolve_hir_path(&mut self, path: &mut hir::Path, is_value: bool) {\n         self.resolve_hir_path_cb(path, is_value,\n                                  |resolver, span, error| resolve_error(resolver, span, error))\n@@ -1537,7 +1541,7 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n     }\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n     /// Rustdoc uses this to resolve things in a recoverable way. ResolutionError<'a>\n     /// isn't something that can be returned because it can't be made to live that long,\n     /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,\n@@ -1603,15 +1607,15 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n     pub fn new(session: &'a Session,\n-               cstore: &'a dyn CrateStore,\n+               cstore: &'a CStore,\n                krate: &Crate,\n                crate_name: &str,\n                make_glob_map: MakeGlobMap,\n-               crate_loader: &'a mut dyn CrateLoader,\n+               crate_loader: &'a mut CrateLoader<'crateloader>,\n                arenas: &'a ResolverArenas<'a>)\n-               -> Resolver<'a> {\n+               -> Resolver<'a, 'crateloader> {\n         let root_def_id = DefId::local(CRATE_DEF_INDEX);\n         let root_module_kind = ModuleKind::Def(Def::Mod(root_def_id), keywords::Invalid.name());\n         let graph_root = arenas.alloc_module(ModuleData {"}, {"sha": "993874d7c0be883298fafce544016075b8088271", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -18,6 +18,7 @@ use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex,\n use rustc::hir::def::{Def, Export};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint};\n+use rustc::middle::cstore::CrateStore;\n use syntax::ast::{self, Name, Ident};\n use syntax::attr::{self, HasAttrs};\n use syntax::errors::DiagnosticBuilder;\n@@ -117,7 +118,7 @@ impl<'a> MacroBinding<'a> {\n     }\n }\n \n-impl<'a> base::Resolver for Resolver<'a> {\n+impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n     fn next_node_id(&mut self) -> ast::NodeId {\n         self.session.next_node_id()\n     }\n@@ -135,9 +136,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n     }\n \n     fn eliminate_crate_var(&mut self, item: P<ast::Item>) -> P<ast::Item> {\n-        struct EliminateCrateVar<'b, 'a: 'b>(&'b mut Resolver<'a>, Span);\n+        struct EliminateCrateVar<'b, 'a: 'b, 'crateloader: 'a>(\n+            &'b mut Resolver<'a, 'crateloader>, Span\n+        );\n \n-        impl<'a, 'b> Folder for EliminateCrateVar<'a, 'b> {\n+        impl<'a, 'b, 'crateloader> Folder for EliminateCrateVar<'a, 'b, 'crateloader> {\n             fn fold_path(&mut self, path: ast::Path) -> ast::Path {\n                 match self.fold_qpath(None, path) {\n                     (None, path) => path,\n@@ -387,7 +390,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     }\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'cl> Resolver<'a, 'cl> {\n     fn report_proc_macro_stub(&self, span: Span) {\n         self.session.span_err(span,\n                               \"can't use a procedural macro from the same crate that defines it\");"}, {"sha": "a3a9b938bbd6fd859b962bf12b2c942f321d1519", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -123,7 +123,7 @@ impl<'a> NameResolution<'a> {\n     }\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n     fn resolution(&self, module: Module<'a>, ident: Ident, ns: Namespace)\n                   -> &'a RefCell<NameResolution<'a>> {\n         *module.resolutions.borrow_mut().entry((ident.modern(), ns))\n@@ -402,7 +402,7 @@ impl<'a> Resolver<'a> {\n     // If the resolution becomes a success, define it in the module's glob importers.\n     fn update_resolution<T, F>(&mut self, module: Module<'a>, ident: Ident, ns: Namespace, f: F)\n                                -> T\n-        where F: FnOnce(&mut Resolver<'a>, &mut NameResolution<'a>) -> T\n+        where F: FnOnce(&mut Resolver<'a, 'crateloader>, &mut NameResolution<'a>) -> T\n     {\n         // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,\n         // during which the resolution might end up getting re-defined via a glob cycle.\n@@ -453,30 +453,30 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-pub struct ImportResolver<'a, 'b: 'a> {\n-    pub resolver: &'a mut Resolver<'b>,\n+pub struct ImportResolver<'a, 'b: 'a, 'c: 'a + 'b> {\n+    pub resolver: &'a mut Resolver<'b, 'c>,\n }\n \n-impl<'a, 'b: 'a> ::std::ops::Deref for ImportResolver<'a, 'b> {\n-    type Target = Resolver<'b>;\n-    fn deref(&self) -> &Resolver<'b> {\n+impl<'a, 'b: 'a, 'c: 'a + 'b> ::std::ops::Deref for ImportResolver<'a, 'b, 'c> {\n+    type Target = Resolver<'b, 'c>;\n+    fn deref(&self) -> &Resolver<'b, 'c> {\n         self.resolver\n     }\n }\n \n-impl<'a, 'b: 'a> ::std::ops::DerefMut for ImportResolver<'a, 'b> {\n-    fn deref_mut(&mut self) -> &mut Resolver<'b> {\n+impl<'a, 'b: 'a, 'c: 'a + 'b> ::std::ops::DerefMut for ImportResolver<'a, 'b, 'c> {\n+    fn deref_mut(&mut self) -> &mut Resolver<'b, 'c> {\n         self.resolver\n     }\n }\n \n-impl<'a, 'b: 'a> ty::DefIdTree for &'a ImportResolver<'a, 'b> {\n+impl<'a, 'b: 'a, 'c: 'a + 'b> ty::DefIdTree for &'a ImportResolver<'a, 'b, 'c> {\n     fn parent(self, id: DefId) -> Option<DefId> {\n         self.resolver.parent(id)\n     }\n }\n \n-impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n+impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n     // Import resolution\n     //\n     // This is a fixed-point algorithm. We resolve imports until our efforts"}, {"sha": "23056218269b62d060f7ab05846e3af1b03ba360", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -13,20 +13,21 @@ use rustc::traits::{self, auto_trait as auto};\n use rustc::ty::{self, ToPredicate, TypeFoldable};\n use rustc::ty::subst::Subst;\n use rustc::infer::InferOk;\n+use rustc::middle::cstore::CrateStore;\n use std::fmt::Debug;\n use syntax_pos::DUMMY_SP;\n \n use core::DocAccessLevels;\n \n use super::*;\n \n-pub struct AutoTraitFinder<'a, 'tcx: 'a, 'rcx: 'a> {\n-    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx>,\n+pub struct AutoTraitFinder<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n+    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>,\n     pub f: auto::AutoTraitFinder<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n-    pub fn new(cx: &'a core::DocContext<'a, 'tcx, 'rcx>) -> Self {\n+impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n+    pub fn new(cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n         let f = auto::AutoTraitFinder::new(&cx.tcx);\n \n         AutoTraitFinder { cx, f }"}, {"sha": "8b4df1b7b7d21921a6b92669993c623e58b6b465", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -19,7 +19,7 @@ use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n-use rustc::middle::cstore::LoadedMacro;\n+use rustc_metadata::cstore::LoadedMacro;\n use rustc::ty;\n use rustc::util::nodemap::FxHashSet;\n "}, {"sha": "4512a33ec4a2170413e4ba3ddc7db92041209a0c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -145,7 +145,7 @@ pub struct Crate {\n     pub masked_crates: FxHashSet<CrateNum>,\n }\n \n-impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx> {\n+impl<'a, 'tcx, 'rcx, 'cstore> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n     fn clean(&self, cx: &DocContext) -> Crate {\n         use ::visit_lib::LibEmbargoVisitor;\n "}, {"sha": "84741f12ad183722fe7723e5719f7a7eacc4ba7f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -13,7 +13,6 @@ use rustc_driver::{self, driver, target_features, abort_on_err};\n use rustc::session::{self, config};\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::hir::def::Def;\n-use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, TyCtxt, AllArenas};\n use rustc::hir::map as hir_map;\n@@ -49,13 +48,13 @@ pub use rustc::session::search_paths::SearchPaths;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n-pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n+pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    pub resolver: &'a RefCell<resolve::Resolver<'rcx>>,\n+    pub resolver: &'a RefCell<resolve::Resolver<'rcx, 'cstore>>,\n     /// The stack of module NodeIds up till this point\n     pub mod_ids: RefCell<Vec<NodeId>>,\n     pub crate_name: Option<String>,\n-    pub cstore: Rc<dyn CrateStore>,\n+    pub cstore: Rc<CStore>,\n     pub populated_all_crate_impls: Cell<bool>,\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n@@ -87,7 +86,7 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub all_traits: Vec<DefId>,\n }\n \n-impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n+impl<'a, 'tcx, 'rcx, 'cstore> DocContext<'a, 'tcx, 'rcx, 'cstore> {\n     pub fn sess(&self) -> &session::Session {\n         &self.tcx.sess\n     }"}, {"sha": "e2c935e2f6921fb6615eb9982648fb3afc94fcf0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -38,19 +38,21 @@ use doctree::*;\n // also, is there some reason that this doesn't use the 'visit'\n // framework from syntax?\n \n-pub struct RustdocVisitor<'a, 'tcx: 'a, 'rcx: 'a> {\n+pub struct RustdocVisitor<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n     pub module: Module,\n     pub attrs: hir::HirVec<ast::Attribute>,\n-    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx>,\n+    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>,\n     view_item_stack: FxHashSet<ast::NodeId>,\n     inlining: bool,\n     /// Is the current module and all of its parents public?\n     inside_public_path: bool,\n     exact_paths: Option<FxHashMap<DefId, Vec<String>>>,\n }\n \n-impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n-    pub fn new(cx: &'a core::DocContext<'a, 'tcx, 'rcx>) -> RustdocVisitor<'a, 'tcx, 'rcx> {\n+impl<'a, 'tcx, 'rcx, 'cstore> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+    pub fn new(\n+        cx: &'a core::DocContext<'a, 'tcx, 'rcx, 'cstore>\n+    ) -> RustdocVisitor<'a, 'tcx, 'rcx, 'cstore> {\n         // If the root is re-exported, terminate all recursion.\n         let mut stack = FxHashSet();\n         stack.insert(ast::CRATE_NODE_ID);"}, {"sha": "10a4e69dcc6cd901fb540ce5663ea4aa547eb284", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -22,8 +22,8 @@ use clean::{AttributesExt, NestedAttributesExt};\n \n /// Similar to `librustc_privacy::EmbargoVisitor`, but also takes\n /// specific rustdoc annotations into account (i.e. `doc(hidden)`)\n-pub struct LibEmbargoVisitor<'a, 'tcx: 'a, 'rcx: 'a> {\n-    cx: &'a ::core::DocContext<'a, 'tcx, 'rcx>,\n+pub struct LibEmbargoVisitor<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n+    cx: &'a ::core::DocContext<'a, 'tcx, 'rcx, 'cstore>,\n     // Accessibility levels for reachable nodes\n     access_levels: RefMut<'a, AccessLevels<DefId>>,\n     // Previous accessibility level, None means unreachable\n@@ -32,8 +32,10 @@ pub struct LibEmbargoVisitor<'a, 'tcx: 'a, 'rcx: 'a> {\n     visited_mods: FxHashSet<DefId>,\n }\n \n-impl<'a, 'tcx, 'rcx> LibEmbargoVisitor<'a, 'tcx, 'rcx> {\n-    pub fn new(cx: &'a ::core::DocContext<'a, 'tcx, 'rcx>) -> LibEmbargoVisitor<'a, 'tcx, 'rcx> {\n+impl<'a, 'tcx, 'rcx, 'cstore> LibEmbargoVisitor<'a, 'tcx, 'rcx, 'cstore> {\n+    pub fn new(\n+        cx: &'a ::core::DocContext<'a, 'tcx, 'rcx, 'cstore>\n+    ) -> LibEmbargoVisitor<'a, 'tcx, 'rcx, 'cstore> {\n         LibEmbargoVisitor {\n             cx,\n             access_levels: cx.access_levels.borrow_mut(),"}, {"sha": "cc2b6c641e90cd70d0bc08a841f43a1261b93205", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c11f2d286c747b44f8e03ce10f6daa36f5d8331c/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=c11f2d286c747b44f8e03ce10f6daa36f5d8331c", "patch": "@@ -21,12 +21,13 @@ extern crate rustc_driver;\n extern crate rustc_codegen_utils;\n extern crate syntax;\n extern crate rustc_errors as errors;\n+extern crate rustc_metadata;\n \n-use rustc::middle::cstore::CrateStore;\n use rustc::session::Session;\n use rustc::session::config::{self, Input};\n use rustc_driver::{driver, CompilerCalls, Compilation};\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_metadata::cstore::CStore;\n use syntax::ast;\n \n use std::path::PathBuf;\n@@ -51,7 +52,7 @@ impl<'a> CompilerCalls<'a> for TestCalls<'a> {\n                      _: &CodegenBackend,\n                      _: &getopts::Matches,\n                      _: &Session,\n-                     _: &CrateStore,\n+                     _: &CStore,\n                      _: &Input,\n                      _: &Option<PathBuf>,\n                      _: &Option<PathBuf>)"}]}