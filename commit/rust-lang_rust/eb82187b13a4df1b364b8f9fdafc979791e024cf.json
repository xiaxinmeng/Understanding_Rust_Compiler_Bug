{"sha": "eb82187b13a4df1b364b8f9fdafc979791e024cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViODIxODdiMTNhNGRmMWIzNjRiOGY5ZmRhZmM5Nzk3OTFlMDI0Y2Y=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T06:49:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-15T08:36:37Z"}, "message": "Make the fast path faster.", "tree": {"sha": "66c2f04fe75826ab649a5011bf64fdcb99bcec1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c2f04fe75826ab649a5011bf64fdcb99bcec1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb82187b13a4df1b364b8f9fdafc979791e024cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb82187b13a4df1b364b8f9fdafc979791e024cf", "html_url": "https://github.com/rust-lang/rust/commit/eb82187b13a4df1b364b8f9fdafc979791e024cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb82187b13a4df1b364b8f9fdafc979791e024cf/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91444af87a0dbf021e671e329926f840344b1dca", "url": "https://api.github.com/repos/rust-lang/rust/commits/91444af87a0dbf021e671e329926f840344b1dca", "html_url": "https://github.com/rust-lang/rust/commit/91444af87a0dbf021e671e329926f840344b1dca"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "7fedd542b43fdf74ed6643373b44305a8108549b", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb82187b13a4df1b364b8f9fdafc979791e024cf/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb82187b13a4df1b364b8f9fdafc979791e024cf/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=eb82187b13a4df1b364b8f9fdafc979791e024cf", "patch": "@@ -792,7 +792,7 @@ impl<K: DepKind> DepGraph<K> {\n         }\n     }\n \n-    fn next_virtual_depnode_index(&self) -> DepNodeIndex {\n+    pub(crate) fn next_virtual_depnode_index(&self) -> DepNodeIndex {\n         let index = self.virtual_dep_node_index.fetch_add(1, Relaxed);\n         DepNodeIndex::from_u32(index)\n     }"}, {"sha": "c6a6b5ba88fc534267e3e7cf8675c180934ba34c", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eb82187b13a4df1b364b8f9fdafc979791e024cf/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb82187b13a4df1b364b8f9fdafc979791e024cf/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=eb82187b13a4df1b364b8f9fdafc979791e024cf", "patch": "@@ -452,29 +452,30 @@ where\n         }\n     };\n \n-    // Fast path for when incr. comp. is off. `to_dep_node` is\n-    // expensive for some `DepKind`s.\n-    if !tcx.dep_context().dep_graph().is_fully_enabled() {\n-        let null_dep_node = DepNode::new_no_params(DepKind::NULL);\n-        return force_query_with_job(tcx, key, job, null_dep_node, query).0;\n+    let dep_graph = tcx.dep_context().dep_graph();\n+\n+    // Fast path for when incr. comp. is off.\n+    if !dep_graph.is_fully_enabled() {\n+        let prof_timer = tcx.dep_context().profiler().query_provider();\n+        let result = tcx.start_query(job.id, None, || query.compute(tcx, key));\n+        let dep_node_index = dep_graph.next_virtual_depnode_index();\n+        prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n+        return job.complete(result, dep_node_index);\n     }\n \n     if query.anon {\n         let prof_timer = tcx.dep_context().profiler().query_provider();\n \n         let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n             tcx.start_query(job.id, diagnostics, || {\n-                tcx.dep_context().dep_graph().with_anon_task(\n-                    *tcx.dep_context(),\n-                    query.dep_kind,\n-                    || query.compute(tcx, key),\n-                )\n+                dep_graph\n+                    .with_anon_task(*tcx.dep_context(), query.dep_kind, || query.compute(tcx, key))\n             })\n         });\n \n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n-        tcx.dep_context().dep_graph().read_index(dep_node_index);\n+        dep_graph.read_index(dep_node_index);\n \n         if unlikely!(!diagnostics.is_empty()) {\n             tcx.store_diagnostics_for_anon_node(dep_node_index, diagnostics);\n@@ -490,7 +491,7 @@ where\n         // promoted to the current session during\n         // `try_mark_green()`, so we can ignore them here.\n         let loaded = tcx.start_query(job.id, None, || {\n-            let marked = tcx.dep_context().dep_graph().try_mark_green_and_read(tcx, &dep_node);\n+            let marked = dep_graph.try_mark_green_and_read(tcx, &dep_node);\n             marked.map(|(prev_dep_node_index, dep_node_index)| {\n                 (\n                     load_from_disk_and_cache_in_memory(\n@@ -511,7 +512,7 @@ where\n     }\n \n     let (result, dep_node_index) = force_query_with_job(tcx, key, job, dep_node, query);\n-    tcx.dep_context().dep_graph().read_index(dep_node_index);\n+    dep_graph.read_index(dep_node_index);\n     result\n }\n "}]}