{"sha": "f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZmU5YzNjNGFjYjRlYWZiYTVhNTUyYTI4MjNlNjk5N2U3NWEzZjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-11T09:01:40Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-24T03:43:29Z"}, "message": "chains: prefer to use the next line for an expression, if using the same line would introduce an open block or similar\n\nThis problem came to light due to the chains changes, but effects other code too. It only happens rarely, e.g.,\n\nbefore this fix:\n```\n    match foo {\n        MacroArgKind::Delimited(ref delim_tok, ref args) => rewrite_delimited_inner(\n            delim_tok,\n            args,\n        ).map(|(lhs, inner, rhs)| format!(\"{}{}{}\", lhs, inner, rhs)),\n    };\n\n```\n\nafter:\n```\n    match foo {\n        MacroArgKind::Delimited(ref delim_tok, ref args) => {\n            rewrite_delimited_inner(delim_tok, args)\n                .map(|(lhs, inner, rhs)| format!(\"{}{}{}\", lhs, inner, rhs))\n        }\n    }\n\n```", "tree": {"sha": "f28efab727642d68955b9286b9fac80efd76f4fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f28efab727642d68955b9286b9fac80efd76f4fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4", "html_url": "https://github.com/rust-lang/rust/commit/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bc27593f44a7c2108ca1a69eba2d34b3db90935", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc27593f44a7c2108ca1a69eba2d34b3db90935", "html_url": "https://github.com/rust-lang/rust/commit/5bc27593f44a7c2108ca1a69eba2d34b3db90935"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "d7126b2f5e798c5035ef4b6fb1678eb33f90e8e9", "filename": "src/chains.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4", "patch": "@@ -398,8 +398,8 @@ impl <'a> ChainFormatterShared<'a> {\n         if all_in_one_line || extendable {\n             // First we try to 'overflow' the last child and see if it looks better than using\n             // vertical layout.\n-            if let Some(shape) = last_shape.offset_left(almost_total) {\n-                if let Some(rw) = last.rewrite_postfix(context, shape) {\n+            if let Some(one_line_shape) = last_shape.offset_left(almost_total) {\n+                if let Some(rw) = last.rewrite_postfix(context, one_line_shape) {\n                     // We allow overflowing here only if both of the following conditions match:\n                     // 1. The entire chain fits in a single line except the last child.\n                     // 2. `last_child_str.lines().count() >= 5`.\n@@ -413,6 +413,7 @@ impl <'a> ChainFormatterShared<'a> {\n                         // layout, just by looking at the overflowed rewrite. Now we rewrite the\n                         // last child on its own line, and compare two rewrites to choose which is\n                         // better.\n+                        let last_shape = child_shape.sub_width(shape.rhs_overhead(context.config) + last.tries)?;\n                         match last.rewrite_postfix(context, last_shape) {\n                             Some(ref new_rw) if !could_fit_single_line => {\n                                 last_subexpr_str = Some(new_rw.clone());"}, {"sha": "8aa5d9bd286448ed8fc9f0ba3ba3c6799bf5fab4", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4", "patch": "@@ -39,9 +39,9 @@ use spanned::Spanned;\n use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n use utils::{\n-    colon_spaces, contains_skip, count_newlines, first_line_width, inner_attributes,\n-    last_line_extendable, last_line_width, mk_sp, outer_attributes, ptr_vec_to_ref_vec,\n-    semicolon_for_stmt, wrap_str,\n+    colon_spaces, contains_skip, count_newlines, first_line_ends_with, first_line_width,\n+    inner_attributes, last_line_extendable, last_line_width, mk_sp, outer_attributes,\n+    ptr_vec_to_ref_vec, semicolon_for_stmt, wrap_str,\n };\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n@@ -1953,6 +1953,9 @@ pub fn prefer_next_line(orig_rhs: &str, next_line_rhs: &str, rhs_tactics: RhsTac\n     rhs_tactics == RhsTactics::ForceNextLineWithoutIndent\n         || !next_line_rhs.contains('\\n')\n         || count_newlines(orig_rhs) > count_newlines(next_line_rhs) + 1\n+        || first_line_ends_with(orig_rhs, '(') && !first_line_ends_with(next_line_rhs, '(')\n+        || first_line_ends_with(orig_rhs, '{') && !first_line_ends_with(next_line_rhs, '{')\n+        || first_line_ends_with(orig_rhs, '[') && !first_line_ends_with(next_line_rhs, '[')\n }\n \n fn rewrite_expr_addrof("}, {"sha": "b8474792cd3040117398a402512288736d5e97be", "filename": "src/utils.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=f0fe9c3c4acb4eafba5a552a2823e6997e75a3f4", "patch": "@@ -382,6 +382,7 @@ pub fn colon_spaces(before: bool, after: bool) -> &'static str {\n     }\n }\n \n+#[inline]\n pub fn left_most_sub_expr(e: &ast::Expr) -> &ast::Expr {\n     match e.node {\n         ast::ExprKind::Call(ref e, _)\n@@ -398,6 +399,12 @@ pub fn left_most_sub_expr(e: &ast::Expr) -> &ast::Expr {\n     }\n }\n \n+#[inline]\n pub fn starts_with_newline(s: &str) -> bool {\n     s.starts_with('\\n') || s.starts_with(\"\\r\\n\")\n }\n+\n+#[inline]\n+pub fn first_line_ends_with(s: &str, c: char) -> bool {\n+    s.lines().next().map_or(false, |l| l.ends_with(c))\n+}"}]}