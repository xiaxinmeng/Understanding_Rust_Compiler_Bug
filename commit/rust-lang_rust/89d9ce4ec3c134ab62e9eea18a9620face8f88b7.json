{"sha": "89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZDljZTRlYzNjMTM0YWI2MmU5ZWVhMThhOTYyMGZhY2U4Zjg4Yjc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-10-15T18:39:16Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-10-15T20:23:28Z"}, "message": "Don't use target's linker when linking build scripts", "tree": {"sha": "896be050a00cdc09702c823891d2d2c0a116e0a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/896be050a00cdc09702c823891d2d2c0a116e0a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "html_url": "https://github.com/rust-lang/rust/commit/89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e0fc5ccd050201e77483b1efb2e6c76f47496f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0fc5ccd050201e77483b1efb2e6c76f47496f6", "html_url": "https://github.com/rust-lang/rust/commit/9e0fc5ccd050201e77483b1efb2e6c76f47496f6"}], "stats": {"total": 77, "additions": 36, "deletions": 41}, "files": [{"sha": "aeeda85e924ef1657825aa28993741867561f2c6", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "patch": "@@ -120,6 +120,11 @@ fn main() {\n             cmd.arg(\"-L\").arg(&root);\n         }\n \n+        // Override linker if necessary.\n+        if let Ok(target_linker) = env::var(\"RUSTC_TARGET_LINKER\") {\n+            cmd.arg(format!(\"-Clinker={}\", target_linker));\n+        }\n+\n         // Pass down incremental directory, if any.\n         if let Ok(dir) = env::var(\"RUSTC_INCREMENTAL\") {\n             cmd.arg(format!(\"-Zincremental={}\", dir));\n@@ -246,13 +251,11 @@ fn main() {\n         if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() {\n             cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n         }\n-    }\n-\n-    // Pass down extra flags, commonly used to configure `-Clinker`.\n-    // Linker options should be set for build scripts as well,\n-    // can't link a build script executable without a linker!\n-    if let Ok(s) = env::var(\"RUSTC_FLAGS\") {\n-        cmd.args(&s.split(\" \").filter(|s| !s.is_empty()).collect::<Vec<_>>());\n+    } else {\n+        // Override linker if necessary.\n+        if let Ok(host_linker) = env::var(\"RUSTC_HOST_LINKER\") {\n+            cmd.arg(format!(\"-Clinker={}\", host_linker));\n+        }\n     }\n \n     let color = match env::var(\"RUSTC_COLOR\") {"}, {"sha": "4e975adc9721cdef87aac309521056c7816ba39c", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "patch": "@@ -47,7 +47,7 @@ fn main() {\n     if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() {\n         cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n     }\n-    if let Some(linker) = env::var_os(\"RUSTDOC_LINKER\") {\n+    if let Some(linker) = env::var_os(\"RUSTC_TARGET_LINKER\") {\n         cmd.arg(\"--linker\").arg(linker).arg(\"-Z\").arg(\"unstable-options\");\n     }\n "}, {"sha": "6480b5a619c03c48d51138fc394229ebfb2b9bc2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "patch": "@@ -420,7 +420,7 @@ impl<'a> Builder<'a> {\n            .env(\"RUSTDOC_REAL\", self.rustdoc(host))\n            .env(\"RUSTDOC_CRATE_VERSION\", self.build.rust_version());\n         if let Some(linker) = self.build.linker(host) {\n-            cmd.env(\"RUSTDOC_LINKER\", linker);\n+            cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n         }\n         cmd\n     }\n@@ -484,11 +484,13 @@ impl<'a> Builder<'a> {\n              } else {\n                  PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n              })\n-             .env(\"TEST_MIRI\", self.config.test_miri.to_string())\n-             .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n+             .env(\"TEST_MIRI\", self.config.test_miri.to_string());\n \n-        if let Some(linker) = self.build.linker(target) {\n-            cargo.env(\"RUSTDOC_LINKER\", linker);\n+        if let Some(host_linker) = self.build.linker(compiler.host) {\n+            cargo.env(\"RUSTC_HOST_LINKER\", host_linker);\n+        }\n+        if let Some(target_linker) = self.build.linker(target) {\n+            cargo.env(\"RUSTC_TARGET_LINKER\", target_linker);\n         }\n \n         if mode != Mode::Tool {"}, {"sha": "d9ee63eef8cdd95ceb2b35fd1ca1d672c1c57431", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "patch": "@@ -725,9 +725,6 @@ impl Step for Compiletest {\n         // Avoid depending on rustdoc when we don't need it.\n         if mode == \"rustdoc\" || mode == \"run-make\" {\n             cmd.arg(\"--rustdoc-path\").arg(builder.rustdoc(compiler.host));\n-            if let Some(linker) = build.linker(target) {\n-                cmd.arg(\"--linker\").arg(linker);\n-            }\n         }\n \n         cmd.arg(\"--src-base\").arg(build.src.join(\"src/test\").join(suite));\n@@ -750,12 +747,14 @@ impl Step for Compiletest {\n             flags.push(\"-g\".to_string());\n         }\n \n-        let mut hostflags = build.rustc_flags(compiler.host);\n-        hostflags.extend(flags.clone());\n+        if let Some(linker) = build.linker(target) {\n+            cmd.arg(\"--linker\").arg(linker);\n+        }\n+\n+        let hostflags = flags.clone();\n         cmd.arg(\"--host-rustcflags\").arg(hostflags.join(\" \"));\n \n-        let mut targetflags = build.rustc_flags(target);\n-        targetflags.extend(flags);\n+        let mut targetflags = flags.clone();\n         targetflags.push(format!(\"-Lnative={}\",\n                                  build.test_helpers_out(target).display()));\n         cmd.arg(\"--target-rustcflags\").arg(targetflags.join(\" \"));"}, {"sha": "63dc17910f08a7f03555c8cbc92ad38647ffdbfb", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "patch": "@@ -649,10 +649,6 @@ impl Build {\n         self.ar.get(&target).map(|p| &**p)\n     }\n \n-    fn linker(&self, target: Interned<String>) -> Option<&Path> {\n-        self.config.target_config.get(&target).and_then(|c| c.linker.as_ref().map(|p| &**p))\n-    }\n-\n     /// Returns the path to the C++ compiler for the target specified.\n     fn cxx(&self, target: Interned<String>) -> Result<&Path, String> {\n         match self.cxx.get(&target) {\n@@ -663,24 +659,16 @@ impl Build {\n         }\n     }\n \n-    /// Returns flags to pass to the compiler to generate code for `target`.\n-    fn rustc_flags(&self, target: Interned<String>) -> Vec<String> {\n-        // New flags should be added here with great caution!\n-        //\n-        // It's quite unfortunate to **require** flags to generate code for a\n-        // target, so it should only be passed here if absolutely necessary!\n-        // Most default configuration should be done through target specs rather\n-        // than an entry here.\n-\n-        let mut base = Vec::new();\n-        if let Some(linker) = self.linker(target) {\n-            // If linker was explictly provided, force it on all the compiled Rust code.\n-            base.push(format!(\"-Clinker={}\", linker.display()));\n-        } else if target != self.config.build && !target.contains(\"msvc\") &&\n-            !target.contains(\"emscripten\") {\n-            base.push(format!(\"-Clinker={}\", self.cc(target).display()));\n+    /// Returns the path to the linker for the given target if it needs to be overriden.\n+    fn linker(&self, target: Interned<String>) -> Option<&Path> {\n+        if let Some(config) = self.config.target_config.get(&target) {\n+            config.linker.as_ref().map(|p| &**p)\n+        } else if target != self.config.build &&\n+                  !target.contains(\"msvc\") && !target.contains(\"emscripten\") {\n+            Some(self.cc(target))\n+        } else {\n+            None\n         }\n-        base\n     }\n \n     /// Returns if this target should statically link the C runtime, if specified"}, {"sha": "d61077643f1fe435c36b318f6cf097e7e1100d3d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89d9ce4ec3c134ab62e9eea18a9620face8f88b7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=89d9ce4ec3c134ab62e9eea18a9620face8f88b7", "patch": "@@ -1444,6 +1444,9 @@ actual:\\n\\\n         } else {\n             rustc.args(self.split_maybe_args(&self.config.target_rustcflags));\n         }\n+        if let Some(ref linker) = self.config.linker {\n+            rustc.arg(format!(\"-Clinker={}\", linker));\n+        }\n \n         rustc.args(&self.props.compile_flags);\n "}]}