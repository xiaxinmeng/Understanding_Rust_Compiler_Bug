{"sha": "a69cc45d8265e37646be24158137de5a428099ca", "node_id": "C_kwDOAAsO6NoAKGE2OWNjNDVkODI2NWUzNzY0NmJlMjQxNTgxMzdkZTVhNDI4MDk5Y2E", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-11T03:18:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-11T03:18:49Z"}, "message": "Rollup merge of #109752 - compiler-errors:new-solver-stall-auto-trait-for-num-var, r=lcnr\n\nStall auto trait assembly in new solver for int/float vars\n\nMake sure that we don't match int/float vars against *all* manual auto trait impls due to this check:\n\nhttps://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler/rustc_trait_selection/src/solve/trait_goals.rs#L151-L169\n\nSince `find_map_relevant_impl` treats all impls as candidates for int/float vars, due to the way that `fast_reject::simplify_type` works.\n\nThis fixes compiler-errors/next-solver-hir-issues#11.\n\nr? ``@lcnr``", "tree": {"sha": "5381933b10ea99724dc1ab2b0283724ebd31c6c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5381933b10ea99724dc1ab2b0283724ebd31c6c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a69cc45d8265e37646be24158137de5a428099ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkNNGZCRBK7hj4Ov3rIwAAgFUIAG4XkSXc1WTTQ4rZEKjlyCnR\nPQXgWKwg3b8esehilEj7iWeY7XCMYzmgEmFMfNpBq5n6cF3zdV9F2R9eObLntRGg\nzao5KKvmCT1BHkUTt/zKbjzrwvG1MzKLhH8oKpoR4AOhILO2Ronjs4zmEIgfCYSb\npfC3fuJDONmDj+CIBY3GFYv6ghngruv+vLmhuVUFPHuygFWX2tLF13seqCQd85zN\nyORYh4H9Ev1C/hfM5bIa6fP6G5idw3r0q/VAbTWv7XGaV+jTcX8KJMD5cx3o507i\nRKoeFhtkEh0ta4KDqu6cBa+TwDjdfoWU6/xe/8lEnhD1h6n3Gt2mCoMMt8vprsc=\n=YNgC\n-----END PGP SIGNATURE-----\n", "payload": "tree 5381933b10ea99724dc1ab2b0283724ebd31c6c6\nparent c617ddf4f32f2ac93b05017b8b1b4164b76b1ee1\nparent 8d2dbba63eaa61252c4c533e1490ac75f97374b9\nauthor Yuki Okushi <jtitor@2k36.org> 1681183129 +0900\ncommitter GitHub <noreply@github.com> 1681183129 +0900\n\nRollup merge of #109752 - compiler-errors:new-solver-stall-auto-trait-for-num-var, r=lcnr\n\nStall auto trait assembly in new solver for int/float vars\n\nMake sure that we don't match int/float vars against *all* manual auto trait impls due to this check:\n\nhttps://github.com/rust-lang/rust/blob/2fb0e8d162a021f8a795fb603f5d8c0017855160/compiler/rustc_trait_selection/src/solve/trait_goals.rs#L151-L169\n\nSince `find_map_relevant_impl` treats all impls as candidates for int/float vars, due to the way that `fast_reject::simplify_type` works.\n\nThis fixes compiler-errors/next-solver-hir-issues#11.\n\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a69cc45d8265e37646be24158137de5a428099ca", "html_url": "https://github.com/rust-lang/rust/commit/a69cc45d8265e37646be24158137de5a428099ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a69cc45d8265e37646be24158137de5a428099ca/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c617ddf4f32f2ac93b05017b8b1b4164b76b1ee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c617ddf4f32f2ac93b05017b8b1b4164b76b1ee1", "html_url": "https://github.com/rust-lang/rust/commit/c617ddf4f32f2ac93b05017b8b1b4164b76b1ee1"}, {"sha": "8d2dbba63eaa61252c4c533e1490ac75f97374b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2dbba63eaa61252c4c533e1490ac75f97374b9", "html_url": "https://github.com/rust-lang/rust/commit/8d2dbba63eaa61252c4c533e1490ac75f97374b9"}], "stats": {"total": 138, "additions": 114, "deletions": 24}, "files": [{"sha": "1a566e87dc8e3fe34aa610fb87b8c15b1dc705e3", "filename": "compiler/rustc_trait_selection/src/solve/assembly/structural_traits.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a69cc45d8265e37646be24158137de5a428099ca/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69cc45d8265e37646be24158137de5a428099ca/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs?ref=a69cc45d8265e37646be24158137de5a428099ca", "patch": "@@ -24,21 +24,19 @@ pub(in crate::solve) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n         | ty::FnDef(..)\n         | ty::FnPtr(_)\n         | ty::Error(_)\n-        | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n         | ty::Never\n         | ty::Char => Ok(vec![]),\n \n-        // Treat this like `struct str([u8]);`\n+        // Treat `str` like it's defined as `struct str([u8]);`\n         ty::Str => Ok(vec![tcx.mk_slice(tcx.types.u8)]),\n \n         ty::Dynamic(..)\n         | ty::Param(..)\n         | ty::Foreign(..)\n         | ty::Alias(ty::Projection, ..)\n-        | ty::Placeholder(..) => Err(NoSolution),\n-\n-        ty::Bound(..)\n-        | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+        | ty::Placeholder(..)\n+        | ty::Bound(..)\n+        | ty::Infer(_) => {\n             bug!(\"unexpected type `{ty}`\")\n         }\n "}, {"sha": "cb7cf9b936cfe3ca963e9d0f82eeab2daabb9ba2", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 60, "deletions": 18, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/a69cc45d8265e37646be24158137de5a428099ca/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69cc45d8265e37646be24158137de5a428099ca/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=a69cc45d8265e37646be24158137de5a428099ca", "patch": "@@ -147,24 +147,66 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        // This differs from the current stable behavior and\n-        // fixes #84857. Due to breakage found via crater, we\n-        // currently instead lint patterns which can be used to\n-        // exploit this unsoundness on stable, see #93367 for\n-        // more details.\n-        //\n-        // Using `TreatProjections::NextSolverLookup` is fine here because\n-        // `instantiate_constituent_tys_for_auto_trait` returns nothing for\n-        // projection types anyways. So it doesn't really matter what we do\n-        // here, and this is faster.\n-        if let Some(def_id) = ecx.tcx().find_map_relevant_impl(\n-            goal.predicate.def_id(),\n-            goal.predicate.self_ty(),\n-            TreatProjections::NextSolverLookup,\n-            Some,\n-        ) {\n-            debug!(?def_id, ?goal, \"disqualified auto-trait implementation\");\n-            return Err(NoSolution);\n+        let self_ty = goal.predicate.self_ty();\n+        match *self_ty.kind() {\n+            // Stall int and float vars until they are resolved to a concrete\n+            // numerical type. That's because the check for impls below treats\n+            // int vars as matching any impl. Even if we filtered such impls,\n+            // we probably don't want to treat an `impl !AutoTrait for i32` as\n+            // disqualifying the built-in auto impl for `i64: AutoTrait` either.\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n+                return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n+            }\n+\n+            // These types cannot be structurally decomposed into constitutent\n+            // types, and therefore have no builtin impl.\n+            ty::Dynamic(..)\n+            | ty::Param(..)\n+            | ty::Foreign(..)\n+            | ty::Alias(ty::Projection, ..)\n+            | ty::Placeholder(..) => return Err(NoSolution),\n+\n+            ty::Infer(_) | ty::Bound(_, _) => bug!(\"unexpected type `{self_ty}`\"),\n+\n+            // For rigid types, we only register a builtin auto implementation\n+            // if there is no implementation that could ever apply to the self\n+            // type.\n+            //\n+            // This differs from the current stable behavior and fixes #84857.\n+            // Due to breakage found via crater, we currently instead lint\n+            // patterns which can be used to exploit this unsoundness on stable,\n+            // see #93367 for more details.\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Str\n+            | ty::Array(_, _)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(_, _, _)\n+            | ty::FnDef(_, _)\n+            | ty::FnPtr(_)\n+            | ty::Closure(_, _)\n+            | ty::Generator(_, _, _)\n+            | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(_, _)\n+            | ty::Never\n+            | ty::Tuple(_)\n+            | ty::Error(_)\n+            | ty::Adt(_, _)\n+            | ty::Alias(ty::Opaque, _) => {\n+                if let Some(def_id) = ecx.tcx().find_map_relevant_impl(\n+                    goal.predicate.def_id(),\n+                    goal.predicate.self_ty(),\n+                    TreatProjections::NextSolverLookup,\n+                    Some,\n+                ) {\n+                    debug!(?def_id, ?goal, \"disqualified auto-trait implementation\");\n+                    return Err(NoSolution);\n+                }\n+            }\n         }\n \n         ecx.probe_and_evaluate_goal_for_constituent_tys("}, {"sha": "083aa90e1f64eb2aca849cfd92f5f451730243fe", "filename": "tests/ui/traits/new-solver/int-var-is-send.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a69cc45d8265e37646be24158137de5a428099ca/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-is-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69cc45d8265e37646be24158137de5a428099ca/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-is-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fint-var-is-send.rs?ref=a69cc45d8265e37646be24158137de5a428099ca", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn needs_send(_: impl Send) {}\n+\n+fn main() {\n+    needs_send(1);\n+}"}, {"sha": "a3ab7836c193b54bc0178a4249de1adb6cd022bf", "filename": "tests/ui/traits/new-solver/stall-num-var-auto-trait.fallback.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a69cc45d8265e37646be24158137de5a428099ca/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a69cc45d8265e37646be24158137de5a428099ca/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.fallback.stderr?ref=a69cc45d8265e37646be24158137de5a428099ca", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `i32: Foo` is not satisfied\n+  --> $DIR/stall-num-var-auto-trait.rs:18:15\n+   |\n+LL |     needs_foo(x);\n+   |     --------- ^ the trait `Foo` is not implemented for `i32`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `needs_foo`\n+  --> $DIR/stall-num-var-auto-trait.rs:14:22\n+   |\n+LL | fn needs_foo(x: impl Foo) {}\n+   |                      ^^^ required by this bound in `needs_foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0539c3a4292febfb75c96e31ee18968190d2de97", "filename": "tests/ui/traits/new-solver/stall-num-var-auto-trait.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a69cc45d8265e37646be24158137de5a428099ca/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69cc45d8265e37646be24158137de5a428099ca/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fstall-num-var-auto-trait.rs?ref=a69cc45d8265e37646be24158137de5a428099ca", "patch": "@@ -0,0 +1,25 @@\n+// compile-flags: -Ztrait-solver=next\n+// revisions: fallback constrain\n+//[constrain] check-pass\n+\n+// Tests that we stall the `{integer}: Foo` obligation until after we\n+// constrain the int type (or fallback occurs).\n+\n+#![feature(negative_impls, auto_traits)]\n+\n+auto trait Foo {}\n+\n+impl !Foo for i32 {}\n+\n+fn needs_foo(x: impl Foo) {}\n+\n+fn main() {\n+    let mut x = 0;\n+    needs_foo(x);\n+    //[fallback]~^ ERROR the trait bound `i32: Foo` is not satisfied\n+\n+    #[cfg(constrain)]\n+    {\n+        x = 1u64;\n+    }\n+}"}]}