{"sha": "ccb970be4c28490a02ce8564e7d0bd00601ad322", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYjk3MGJlNGMyODQ5MGEwMmNlODU2NGU3ZDBiZDAwNjAxYWQzMjI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-07-26T08:27:24Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(9): Move OngoingCrateTranslation into back::write.", "tree": {"sha": "6124b63d72490c4cdc9794cda79761ef64cfb7d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6124b63d72490c4cdc9794cda79761ef64cfb7d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccb970be4c28490a02ce8564e7d0bd00601ad322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb970be4c28490a02ce8564e7d0bd00601ad322", "html_url": "https://github.com/rust-lang/rust/commit/ccb970be4c28490a02ce8564e7d0bd00601ad322", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccb970be4c28490a02ce8564e7d0bd00601ad322/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "645841ea446ed0772835f07fb62aaeecdb06b604", "url": "https://api.github.com/repos/rust-lang/rust/commits/645841ea446ed0772835f07fb62aaeecdb06b604", "html_url": "https://github.com/rust-lang/rust/commit/645841ea446ed0772835f07fb62aaeecdb06b604"}], "stats": {"total": 156, "additions": 83, "deletions": 73}, "files": [{"sha": "44c046131f1bc5be1a463e21b954e45da1ec6fb6", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccb970be4c28490a02ce8564e7d0bd00601ad322/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb970be4c28490a02ce8564e7d0bd00601ad322/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ccb970be4c28490a02ce8564e7d0bd00601ad322", "patch": "@@ -1053,7 +1053,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            analysis: ty::CrateAnalysis,\n                                            incremental_hashes_map: &IncrementalHashesMap,\n                                            output_filenames: &OutputFilenames)\n-                                           -> trans::OngoingCrateTranslation {\n+                                           -> write::OngoingCrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n \n     time(time_passes,\n@@ -1071,7 +1071,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n /// Run LLVM itself, producing a bitcode file, assembly file or object file\n /// as a side effect.\n pub fn phase_5_run_llvm_passes(sess: &Session,\n-                               trans: trans::OngoingCrateTranslation,\n+                               trans: write::OngoingCrateTranslation,\n                                outputs: &OutputFilenames)\n                                -> (CompileResult, trans::CrateTranslation) {\n     let trans = trans.join(sess, outputs);"}, {"sha": "987d88c7c6136ec2b517ffc7d1ee13820734bb5a", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 80, "deletions": 7, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/ccb970be4c28490a02ce8564e7d0bd00601ad322/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb970be4c28490a02ce8564e7d0bd00601ad322/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=ccb970be4c28490a02ce8564e7d0bd00601ad322", "patch": "@@ -10,23 +10,25 @@\n \n use back::lto;\n use back::link::{self, get_linker, remove};\n+use back::linker::LinkerInfo;\n use back::symbol_export::ExportedSymbols;\n use rustc_incremental::{save_trans_partition, in_incr_comp_dir};\n+use rustc::middle::cstore::{LinkMeta, EncodedMetadata};\n use rustc::session::config::{self, OutputFilenames, OutputType, OutputTypes, Passes, SomePasses,\n                              AllPasses, Sanitizer};\n use rustc::session::Session;\n use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef};\n use llvm::SMDiagnosticRef;\n-use {CrateTranslation, OngoingCrateTranslation, ModuleSource, ModuleTranslation,\n-     CompiledModule, ModuleKind};\n+use {CrateTranslation, ModuleSource, ModuleTranslation, CompiledModule, ModuleKind};\n use rustc::hir::def_id::CrateNum;\n use rustc::util::common::{time, time_depth, set_time_depth, path2cstr};\n-use rustc::util::fs::link_or_copy;\n+use rustc::util::fs::{link_or_copy, rename_or_copy_remove};\n use errors::{self, Handler, Level, DiagnosticBuilder, FatalError};\n use errors::emitter::{Emitter};\n use syntax::ext::hygiene::Mark;\n use syntax_pos::MultiSpan;\n+use syntax_pos::symbol::Symbol;\n use context::{is_pie_binary, get_reloc_model};\n use jobserver::{Client, Acquired};\n use rustc_demangle;\n@@ -816,7 +818,7 @@ pub fn run_passes(sess: &Session,\n     }\n \n     loop {\n-        shared_emitter_main.check(sess);\n+        shared_emitter_main.check(sess, false);\n \n         match trans_worker_receive.recv() {\n             Err(_) => {\n@@ -837,7 +839,7 @@ pub fn run_passes(sess: &Session,\n     let compiled_modules = coordinator_thread.join().unwrap();\n \n     // Just in case, check this on the way out.\n-    shared_emitter_main.check(sess);\n+    shared_emitter_main.check(sess, false);\n     sess.diagnostic().abort_if_errors();\n \n     // If in incr. comp. mode, preserve the `.o` files for potential re-use\n@@ -1516,9 +1518,21 @@ impl Emitter for SharedEmitter {\n }\n \n impl SharedEmitterMain {\n-    pub fn check(&self, sess: &Session) {\n+    pub fn check(&self, sess: &Session, blocking: bool) {\n         loop {\n-            match self.receiver.try_recv() {\n+            let message = if blocking {\n+                match self.receiver.recv() {\n+                    Ok(message) => Ok(message),\n+                    Err(_) => Err(()),\n+                }\n+            } else {\n+                match self.receiver.try_recv() {\n+                    Ok(message) => Ok(message),\n+                    Err(_) => Err(()),\n+                }\n+            };\n+\n+            match message {\n                 Ok(SharedEmitterMessage::Diagnostic(diag)) => {\n                     let handler = sess.diagnostic();\n                     match diag.code {\n@@ -1555,3 +1569,62 @@ impl SharedEmitterMain {\n         }\n     }\n }\n+\n+pub struct OngoingCrateTranslation {\n+    pub crate_name: Symbol,\n+    pub link: LinkMeta,\n+    pub metadata: EncodedMetadata,\n+    pub exported_symbols: Arc<ExportedSymbols>,\n+    pub no_builtins: bool,\n+    pub windows_subsystem: Option<String>,\n+    pub linker_info: LinkerInfo,\n+    pub no_integrated_as: bool,\n+\n+    // This will be replaced by a Future.\n+    pub result: ::std::cell::RefCell<Option<CompiledModules>>,\n+}\n+\n+impl OngoingCrateTranslation {\n+    pub fn join(self,\n+                sess: &Session,\n+                outputs: &OutputFilenames)\n+                -> CrateTranslation {\n+\n+        let result = self.result.borrow_mut().take().unwrap();\n+\n+        let trans = CrateTranslation {\n+            crate_name: self.crate_name,\n+            link: self.link,\n+            metadata: self.metadata,\n+            exported_symbols: self.exported_symbols,\n+            no_builtins: self.no_builtins,\n+            windows_subsystem: self.windows_subsystem,\n+            linker_info: self.linker_info,\n+\n+            modules: result.modules,\n+            metadata_module: result.metadata_module,\n+            allocator_module: result.allocator_module,\n+        };\n+\n+        if self.no_integrated_as {\n+            run_assembler(sess, outputs);\n+\n+            // HACK the linker expects the object file to be named foo.0.o but\n+            // `run_assembler` produces an object named just foo.o. Rename it if we\n+            // are going to build an executable\n+            if sess.opts.output_types.contains_key(&OutputType::Exe) {\n+                let f = outputs.path(OutputType::Object);\n+                rename_or_copy_remove(&f,\n+                         f.with_file_name(format!(\"{}.0.o\",\n+                                                  f.file_stem().unwrap().to_string_lossy()))).unwrap();\n+            }\n+\n+            // Remove assembly source, unless --save-temps was specified\n+            if !sess.opts.cg.save_temps {\n+                fs::remove_file(&outputs.temp_path(OutputType::Assembly, None)).unwrap();\n+            }\n+        }\n+\n+        trans\n+    }\n+}"}, {"sha": "6eb38dc52eec17e12f0f184f5d02bf66f6751cf3", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccb970be4c28490a02ce8564e7d0bd00601ad322/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb970be4c28490a02ce8564e7d0bd00601ad322/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=ccb970be4c28490a02ce8564e7d0bd00601ad322", "patch": "@@ -23,7 +23,6 @@\n //!     but one TypeRef corresponds to many `Ty`s; for instance, tup(int, int,\n //!     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n \n-use super::OngoingCrateTranslation;\n use super::ModuleLlvm;\n use super::ModuleSource;\n use super::ModuleTranslation;\n@@ -33,6 +32,7 @@ use assert_module_sources;\n use back::link;\n use back::linker::LinkerInfo;\n use back::symbol_export::{self, ExportedSymbols};\n+use back::write::OngoingCrateTranslation;\n use llvm::{ContextRef, Linkage, ModuleRef, ValueRef, Vector, get_param};\n use llvm;\n use metadata;"}, {"sha": "62ff1535be9567b2cef82751cb085998edaa5374", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ccb970be4c28490a02ce8564e7d0bd00601ad322/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb970be4c28490a02ce8564e7d0bd00601ad322/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=ccb970be4c28490a02ce8564e7d0bd00601ad322", "patch": "@@ -35,11 +35,7 @@\n #![feature(conservative_impl_trait)]\n \n use rustc::dep_graph::WorkProduct;\n-use rustc::session::Session;\n-use rustc::session::config::{OutputType, OutputFilenames};\n-use rustc::util::fs::rename_or_copy_remove;\n use syntax_pos::symbol::Symbol;\n-use std::fs;\n use std::sync::Arc;\n \n extern crate flate2;\n@@ -229,63 +225,4 @@ pub struct CrateTranslation {\n     pub linker_info: back::linker::LinkerInfo\n }\n \n-pub struct OngoingCrateTranslation {\n-    pub crate_name: Symbol,\n-    pub link: rustc::middle::cstore::LinkMeta,\n-    pub metadata: rustc::middle::cstore::EncodedMetadata,\n-    pub exported_symbols: Arc<back::symbol_export::ExportedSymbols>,\n-    pub no_builtins: bool,\n-    pub windows_subsystem: Option<String>,\n-    pub linker_info: back::linker::LinkerInfo,\n-    pub no_integrated_as: bool,\n-\n-    // This will be replaced by a Future.\n-    pub result: ::std::cell::RefCell<Option<back::write::CompiledModules>>,\n-}\n-\n-impl OngoingCrateTranslation {\n-    pub fn join(self,\n-                sess: &Session,\n-                outputs: &OutputFilenames)\n-                -> CrateTranslation {\n-\n-        let result = self.result.borrow_mut().take().unwrap();\n-\n-        let trans = CrateTranslation {\n-            crate_name: self.crate_name,\n-            link: self.link,\n-            metadata: self.metadata,\n-            exported_symbols: self.exported_symbols,\n-            no_builtins: self.no_builtins,\n-            windows_subsystem: self.windows_subsystem,\n-            linker_info: self.linker_info,\n-\n-            modules: result.modules,\n-            metadata_module: result.metadata_module,\n-            allocator_module: result.allocator_module,\n-        };\n-\n-        if self.no_integrated_as {\n-            back::write::run_assembler(sess, outputs);\n-\n-            // HACK the linker expects the object file to be named foo.0.o but\n-            // `run_assembler` produces an object named just foo.o. Rename it if we\n-            // are going to build an executable\n-            if sess.opts.output_types.contains_key(&OutputType::Exe) {\n-                let f = outputs.path(OutputType::Object);\n-                rename_or_copy_remove(&f,\n-                         f.with_file_name(format!(\"{}.0.o\",\n-                                                  f.file_stem().unwrap().to_string_lossy()))).unwrap();\n-            }\n-\n-            // Remove assembly source, unless --save-temps was specified\n-            if !sess.opts.cg.save_temps {\n-                fs::remove_file(&outputs.temp_path(OutputType::Assembly, None)).unwrap();\n-            }\n-        }\n-\n-        trans\n-    }\n-}\n-\n __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }"}]}