{"sha": "e6f7f4af501f401be7b303b56416a2737498717b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZjdmNGFmNTAxZjQwMWJlN2IzMDNiNTY0MTZhMjczNzQ5ODcxN2I=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-04T09:05:56Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-25T14:47:35Z"}, "message": "Document error/lint cases in const eval", "tree": {"sha": "eeecd2bec23e549453c33fd8f8eea95234a1aa26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeecd2bec23e549453c33fd8f8eea95234a1aa26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6f7f4af501f401be7b303b56416a2737498717b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f7f4af501f401be7b303b56416a2737498717b", "html_url": "https://github.com/rust-lang/rust/commit/e6f7f4af501f401be7b303b56416a2737498717b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6f7f4af501f401be7b303b56416a2737498717b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d736197bc2040d1b76e91567ae09f1eb35f3a28c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d736197bc2040d1b76e91567ae09f1eb35f3a28c", "html_url": "https://github.com/rust-lang/rust/commit/d736197bc2040d1b76e91567ae09f1eb35f3a28c"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "5cda7154774cd4079c8e07ad1479416eb155e058", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e6f7f4af501f401be7b303b56416a2737498717b/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6f7f4af501f401be7b303b56416a2737498717b/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=e6f7f4af501f401be7b303b56416a2737498717b", "patch": "@@ -649,15 +649,19 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n     }).map_err(|error| {\n         let stacktrace = ecx.generate_stacktrace(None);\n         let err = ConstEvalErr { error, stacktrace, span: ecx.tcx.span };\n+        // errors in statics are always emitted as fatal errors\n         if tcx.is_static(def_id).is_some() {\n             let err = err.report_as_error(ecx.tcx, \"could not evaluate static initializer\");\n+            // check that a static never produces `TooGeneric`\n             if tcx.sess.err_count() == 0 {\n                 span_bug!(ecx.tcx.span, \"static eval failure didn't emit an error: {:#?}\", err);\n             }\n             err\n         } else if def_id.is_local() {\n             // constant defined in this crate, we can figure out a lint level!\n             match tcx.describe_def(def_id) {\n+                // constants never produce a hard error at the definition site. Anything else is\n+                // a backwards compatibility hazard (and will break old versions of winapi for sure)\n                 Some(Def::Const(_)) | Some(Def::AssociatedConst(_)) => {\n                     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n                     err.report_as_lint(\n@@ -666,6 +670,8 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n                         node_id,\n                     )\n                 },\n+                // promoting runtime code is only allowed to error if it references broken constants\n+                // any other kind of error will be reported to the user as a deny-by-default lint\n                 _ => if let Some(p) = cid.promoted {\n                     let span = tcx.optimized_mir(def_id).promoted[p].span;\n                     if let EvalErrorKind::ReferencedConstant = err.error.kind {\n@@ -680,6 +686,8 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n                             tcx.hir.as_local_node_id(def_id).unwrap(),\n                         )\n                     }\n+                // anything else (array lengths, enum initializers, constant patterns) are reported\n+                // as hard errors\n                 } else {\n                     err.report_as_error(\n                         ecx.tcx,\n@@ -688,7 +696,7 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n                 },\n             }\n         } else {\n-            // use of constant from other crate\n+            // use of broken constant from other crate\n             err.report_as_error(ecx.tcx, \"could not evaluate constant\")\n         }\n     })"}]}