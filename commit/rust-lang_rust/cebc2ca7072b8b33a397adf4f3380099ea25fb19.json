{"sha": "cebc2ca7072b8b33a397adf4f3380099ea25fb19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYmMyY2E3MDcyYjhiMzNhMzk3YWRmNGYzMzgwMDk5ZWEyNWZiMTk=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-10-13T05:28:03Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-12-14T04:59:07Z"}, "message": "Add opaque masks", "tree": {"sha": "c38419ed6f61db054b5cc6cff3265163d8cab079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38419ed6f61db054b5cc6cff3265163d8cab079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cebc2ca7072b8b33a397adf4f3380099ea25fb19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cebc2ca7072b8b33a397adf4f3380099ea25fb19", "html_url": "https://github.com/rust-lang/rust/commit/cebc2ca7072b8b33a397adf4f3380099ea25fb19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cebc2ca7072b8b33a397adf4f3380099ea25fb19/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a69c4414bc69d95d1ac1636cf2bc61deec21d936", "url": "https://api.github.com/repos/rust-lang/rust/commits/a69c4414bc69d95d1ac1636cf2bc61deec21d936", "html_url": "https://github.com/rust-lang/rust/commit/a69c4414bc69d95d1ac1636cf2bc61deec21d936"}], "stats": {"total": 525, "additions": 379, "deletions": 146}, "files": [{"sha": "07332c1ccc8fc2fe390115445bece93049b97d67", "filename": "crates/core_simd/src/fmt.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ffmt.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -74,10 +74,10 @@ macro_rules! impl_fmt_trait {\n \n impl_fmt_trait! {\n     integers:\n-        crate::u8x8,    crate::u8x16,    crate::u8x32,    crate::u8x64,\n-        crate::i8x8,    crate::i8x16,    crate::i8x32,    crate::i8x64,\n-        crate::u16x4,   crate::u16x8,   crate::u16x16,   crate::u16x32,\n-        crate::i16x4,   crate::i16x8,   crate::i16x16,   crate::i16x32,\n+        crate::u8x8,    crate::u8x16,   crate::u8x32,   crate::u8x64,\n+        crate::i8x8,    crate::i8x16,   crate::i8x32,   crate::i8x64,\n+        crate::u16x4,   crate::u16x8,   crate::u16x16,  crate::u16x32,\n+        crate::i16x4,   crate::i16x8,   crate::i16x16,  crate::i16x32,\n         crate::u32x2,   crate::u32x4,   crate::u32x8,   crate::u32x16,\n         crate::i32x2,   crate::i32x4,   crate::i32x8,   crate::i32x16,\n         crate::u64x2,   crate::u64x4,   crate::u64x8,\n@@ -96,10 +96,10 @@ impl_fmt_trait! {\n \n impl_fmt_trait! {\n     masks:\n-        crate::mask8x8,    crate::mask8x16,    crate::mask8x32,    crate::mask8x64,\n-        crate::mask16x4,   crate::mask16x8,   crate::mask16x16,   crate::mask16x32,\n-        crate::mask32x2,   crate::mask32x4,   crate::mask32x8,   crate::mask32x16,\n-        crate::mask64x2,   crate::mask64x4,   crate::mask64x8,\n-        crate::mask128x2,  crate::mask128x4,\n-        crate::masksizex2, crate::masksizex4, crate::masksizex8,\n+        crate::masks::wide::m8x8,    crate::masks::wide::m8x16,   crate::masks::wide::m8x32,   crate::masks::wide::m8x64,\n+        crate::masks::wide::m16x4,   crate::masks::wide::m16x8,   crate::masks::wide::m16x16,  crate::masks::wide::m16x32,\n+        crate::masks::wide::m32x2,   crate::masks::wide::m32x4,   crate::masks::wide::m32x8,   crate::masks::wide::m32x16,\n+        crate::masks::wide::m64x2,   crate::masks::wide::m64x4,   crate::masks::wide::m64x8,\n+        crate::masks::wide::m128x2,  crate::masks::wide::m128x4,\n+        crate::masks::wide::msizex2, crate::masks::wide::msizex4, crate::masks::wide::msizex8,\n }"}, {"sha": "fd4f9dd16fd59ec46cf7d2d627e82d053b8b2084", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -10,8 +10,7 @@ mod fmt;\n mod intrinsics;\n mod ops;\n \n-mod masks;\n-pub use masks::*;\n+pub mod masks;\n \n mod vectors_u8;\n pub use vectors_u8::*;\n@@ -44,17 +43,4 @@ pub use vectors_f32::*;\n mod vectors_f64;\n pub use vectors_f64::*;\n \n-mod vectors_mask8;\n-pub use vectors_mask8::*;\n-mod vectors_mask16;\n-pub use vectors_mask16::*;\n-mod vectors_mask32;\n-pub use vectors_mask32::*;\n-mod vectors_mask64;\n-pub use vectors_mask64::*;\n-mod vectors_mask128;\n-pub use vectors_mask128::*;\n-mod vectors_masksize;\n-pub use vectors_masksize::*;\n-\n mod round;"}, {"sha": "b8324ffdb9291886534ebf1a1738f20999d4d913", "filename": "crates/core_simd/src/macros.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -314,7 +314,6 @@ macro_rules! define_float_vector {\n     }\n }\n \n-\n /// Defines an integer vector `$name` containing multiple `$lanes` of integer `$type`.\n macro_rules! define_integer_vector {\n     { $(#[$attr:meta])* struct $name:ident([$type:ty; $lanes:tt]); } => {\n@@ -336,6 +335,7 @@ macro_rules! define_mask_vector {\n         impl $name {\n             call_repeat! { $lanes => define_mask_vector [$impl_type] splat $type | }\n             call_counting_args! { $lanes => define_mask_vector => new $type | }\n+            call_counting_args! { $lanes => define_mask_vector => new_from_bool $type | }\n         }\n \n         base_vector_traits! { $name => [$type; $lanes] }\n@@ -361,5 +361,14 @@ macro_rules! define_mask_vector {\n         pub const fn new($($var: $type),*) -> Self {\n             Self($($var.0),*)\n         }\n+    };\n+    { new_from_bool $type:ty | $($var:ident)* } => {\n+        /// Used internally (since we can't use the Into trait in `const fn`s)\n+        #[allow(clippy::too_many_arguments)]\n+        #[allow(unused)]\n+        #[inline]\n+        pub(crate) const fn new_from_bool($($var: bool),*) -> Self {\n+            Self($(<$type>::new($var).0),*)\n+        }\n     }\n }"}, {"sha": "e138a1b4dd80f4cd5dca36793c06434754bc0e83", "filename": "crates/core_simd/src/masks/mod.rs", "status": "added", "additions": 215, "deletions": 0, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -0,0 +1,215 @@\n+//! Types and traits associated with masking lanes of vectors.\n+\n+pub mod wide;\n+\n+trait MaskImpl {\n+    type Mask;\n+}\n+\n+impl MaskImpl for [u8; 8] {\n+    type Mask = wide::m8x8;\n+}\n+\n+impl MaskImpl for [u8; 16] {\n+    type Mask = wide::m8x16;\n+}\n+\n+impl MaskImpl for [u8; 32] {\n+    type Mask = wide::m8x32;\n+}\n+\n+impl MaskImpl for [u8; 64] {\n+    type Mask = wide::m8x64;\n+}\n+\n+impl MaskImpl for [u16; 4] {\n+    type Mask = wide::m16x4;\n+}\n+\n+impl MaskImpl for [u16; 8] {\n+    type Mask = wide::m16x8;\n+}\n+\n+impl MaskImpl for [u16; 16] {\n+    type Mask = wide::m16x16;\n+}\n+\n+impl MaskImpl for [u16; 32] {\n+    type Mask = wide::m16x32;\n+}\n+\n+impl MaskImpl for [u32; 2] {\n+    type Mask = wide::m32x2;\n+}\n+\n+impl MaskImpl for [u32; 4] {\n+    type Mask = wide::m32x4;\n+}\n+\n+impl MaskImpl for [u32; 8] {\n+    type Mask = wide::m32x8;\n+}\n+\n+impl MaskImpl for [u32; 16] {\n+    type Mask = wide::m32x16;\n+}\n+\n+impl MaskImpl for [u64; 2] {\n+    type Mask = wide::m64x2;\n+}\n+\n+impl MaskImpl for [u64; 4] {\n+    type Mask = wide::m64x4;\n+}\n+\n+impl MaskImpl for [u64; 8] {\n+    type Mask = wide::m64x8;\n+}\n+\n+impl MaskImpl for [u128; 2] {\n+    type Mask = wide::m128x2;\n+}\n+\n+impl MaskImpl for [u128; 4] {\n+    type Mask = wide::m128x4;\n+}\n+\n+impl MaskImpl for [usize; 2] {\n+    type Mask = wide::msizex2;\n+}\n+\n+impl MaskImpl for [usize; 4] {\n+    type Mask = wide::msizex4;\n+}\n+\n+impl MaskImpl for [usize; 8] {\n+    type Mask = wide::msizex8;\n+}\n+\n+macro_rules! define_opaque_mask {\n+    {\n+        $(#[$attr:meta])*\n+        struct $name:ident([$width:ty; $lanes:tt]);\n+    } => {\n+        $(#[$attr])*\n+        #[allow(non_camel_case_types)]\n+        pub struct $name(<[$width; $lanes] as MaskImpl>::Mask);\n+\n+        impl $name {\n+            /// Construct a mask by setting all lanes to the given value.\n+            pub fn splat(value: bool) -> Self {\n+                Self(<[$width; $lanes] as MaskImpl>::Mask::splat(value.into()))\n+            }\n+\n+            call_counting_args! { $lanes => define_opaque_mask => new [$width; $lanes] }\n+        }\n+    };\n+    { new [$width:ty; $lanes:tt] $($var:ident)* } => {\n+        /// Construct a vector by setting each lane to the given values.\n+        #[allow(clippy::too_many_arguments)]\n+        #[inline]\n+        pub const fn new($($var: bool),*) -> Self {\n+            Self(<[$width; $lanes] as MaskImpl>::Mask::new_from_bool($($var),*))\n+        }\n+    }\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 8 8-bit lanes\n+    struct mask8x8([u8; 8]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 16 8-bit lanes\n+    struct mask8x16([u8; 16]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 32 8-bit lanes\n+    struct mask8x32([u8; 32]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 64 8-bit lanes\n+    struct mask8x64([u8; 64]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 4 16-bit lanes\n+    struct mask16x4([u16; 4]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 8 16-bit lanes\n+    struct mask16x8([u16; 8]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 16 16-bit lanes\n+    struct mask16x16([u16; 16]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 32 16-bit lanes\n+    struct mask16x32([u16; 32]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 2 32-bit lanes\n+    struct mask32x2([u32; 2]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 4 32-bit lanes\n+    struct mask32x4([u32; 4]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 8 32-bit lanes\n+    struct mask32x8([u32; 8]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 16 32-bit lanes\n+    struct mask32x16([u32; 16]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 2 64-bit lanes\n+    struct mask64x2([u64; 2]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 4 64-bit lanes\n+    struct mask64x4([u64; 4]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 8 64-bit lanes\n+    struct mask64x8([u64; 8]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 2 128-bit lanes\n+    struct mask128x2([u128; 2]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 4 128-bit lanes\n+    struct mask128x4([u128; 4]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 2 `isize`-wide lanes\n+    struct masksizex2([usize; 2]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 4 `isize`-wide lanes\n+    struct masksizex4([usize; 4]);\n+}\n+\n+define_opaque_mask! {\n+    /// Mask for 8 `isize`-wide lanes\n+    struct masksizex8([usize; 8]);\n+}"}, {"sha": "1462992197dc0025154b081c21a45bade7a2fda2", "filename": "crates/core_simd/src/masks/wide/mod.rs", "status": "renamed", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fmod.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -1,3 +1,18 @@\n+//! Masks that take up full vector registers.\n+\n+mod vectors_m8;\n+pub use vectors_m8::*;\n+mod vectors_m16;\n+pub use vectors_m16::*;\n+mod vectors_m32;\n+pub use vectors_m32::*;\n+mod vectors_m64;\n+pub use vectors_m64::*;\n+mod vectors_m128;\n+pub use vectors_m128::*;\n+mod vectors_msize;\n+pub use vectors_msize::*;\n+\n /// The error type returned when converting an integer to a mask fails.\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub struct TryFromMaskError(());\n@@ -95,30 +110,30 @@ macro_rules! define_mask {\n \n define_mask! {\n     /// 8-bit mask\n-    struct mask8(i8);\n+    struct m8(i8);\n }\n \n define_mask! {\n     /// 16-bit mask\n-    struct mask16(i16);\n+    struct m16(i16);\n }\n \n define_mask! {\n     /// 32-bit mask\n-    struct mask32(i32);\n+    struct m32(i32);\n }\n \n define_mask! {\n     /// 64-bit mask\n-    struct mask64(i64);\n+    struct m64(i64);\n }\n \n define_mask! {\n     /// 128-bit mask\n-    struct mask128(i128);\n+    struct m128(i128);\n }\n \n define_mask! {\n     /// `isize`-wide mask\n-    struct masksize(isize);\n+    struct msize(isize);\n }", "previous_filename": "crates/core_simd/src/masks.rs"}, {"sha": "fddddac5fc4f91e1560b26be61d3eaee81f8969e", "filename": "crates/core_simd/src/masks/wide/vectors_m128.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m128.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -0,0 +1,11 @@\n+use super::m128;\n+\n+define_mask_vector! {\n+    /// Vector of two `m128` values\n+    struct m128x2([i128 as m128; 2]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of four `m128` values\n+    struct m128x4([i128 as m128; 4]);\n+}"}, {"sha": "3b05e83f673d67ae7a0d8c69e7bf9ad637393326", "filename": "crates/core_simd/src/masks/wide/vectors_m16.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m16.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -0,0 +1,21 @@\n+use super::m16;\n+\n+define_mask_vector! {\n+    /// Vector of four `m16` values\n+    struct m16x4([i16 as m16; 4]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of eight `m16` values\n+    struct m16x8([i16 as m16; 8]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 16 `m16` values\n+    struct m16x16([i16 as m16; 16]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 32 `m16` values\n+    struct m16x32([i16 as m16; 32]);\n+}"}, {"sha": "de5745fb283312e7c4f34e6e9341778615acb98f", "filename": "crates/core_simd/src/masks/wide/vectors_m32.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m32.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -0,0 +1,21 @@\n+use super::m32;\n+\n+define_mask_vector! {\n+    /// Vector of two `m32` values\n+    struct m32x2([i32 as m32; 2]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of four `m32` values\n+    struct m32x4([i32 as m32; 4]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of eight `m32` values\n+    struct m32x8([i32 as m32; 8]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 16 `m32` values\n+    struct m32x16([i32 as m32; 16]);\n+}"}, {"sha": "55c8687fcfc4b4d033333f76742f634b52ee50dc", "filename": "crates/core_simd/src/masks/wide/vectors_m64.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m64.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -0,0 +1,16 @@\n+use super::m64;\n+\n+define_mask_vector! {\n+    /// Vector of two `m64` values\n+    struct m64x2([i64 as m64; 2]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of four `m64` values\n+    struct m64x4([i64 as m64; 4]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of eight `m64` values\n+    struct m64x8([i64 as m64; 8]);\n+}"}, {"sha": "149e138739dcf277051ebe59a469d384914ba0f7", "filename": "crates/core_simd/src/masks/wide/vectors_m8.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_m8.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -0,0 +1,21 @@\n+use super::m8;\n+\n+define_mask_vector! {\n+    /// Vector of eight `m8` values\n+    struct m8x8([i8 as m8; 8]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 16 `m8` values\n+    struct m8x16([i8 as m8; 16]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 32 `m8` values\n+    struct m8x32([i8 as m8; 32]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of 64 `m8` values\n+    struct m8x64([i8 as m8; 64]);\n+}"}, {"sha": "497aba8ddbbf7abff50ec4798318a71f16344d83", "filename": "crates/core_simd/src/masks/wide/vectors_msize.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_msize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_msize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fwide%2Fvectors_msize.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -0,0 +1,16 @@\n+use super::msize;\n+\n+define_mask_vector! {\n+    /// Vector of two `msize` values\n+    struct msizex2([isize as msize; 2]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of four `msize` values\n+    struct msizex4([isize as msize; 4]);\n+}\n+\n+define_mask_vector! {\n+    /// Vector of eight `msize` values\n+    struct msizex8([isize as msize; 8]);\n+}"}, {"sha": "ac89feca9d6606d722c2795c15b032be95c3cc96", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cebc2ca7072b8b33a397adf4f3380099ea25fb19/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=cebc2ca7072b8b33a397adf4f3380099ea25fb19", "patch": "@@ -96,7 +96,7 @@ macro_rules! impl_ref_ops {\n }\n \n /// Implements op traits for masks\n-macro_rules! impl_mask_ops {\n+macro_rules! impl_mask_element_ops {\n     { $($mask:ty),* } => {\n         $(\n             impl_ref_ops! {\n@@ -161,7 +161,15 @@ macro_rules! impl_mask_ops {\n         )*\n     }\n }\n-impl_mask_ops! { crate::mask8, crate::mask16, crate::mask32, crate::mask64, crate::mask128, crate::masksize }\n+\n+impl_mask_element_ops! {\n+    crate::masks::wide::m8,\n+    crate::masks::wide::m16,\n+    crate::masks::wide::m32,\n+    crate::masks::wide::m64,\n+    crate::masks::wide::m128,\n+    crate::masks::wide::msize\n+}\n \n /// Automatically implements operators over vectors and scalars for a particular vector.\n macro_rules! impl_op {\n@@ -632,10 +640,10 @@ impl_float_ops! {\n }\n \n impl_mask_ops! {\n-    crate::mask8    => crate::mask8x8,    crate::mask8x16,   crate::mask8x32,   crate::mask8x64;\n-    crate::mask16   => crate::mask16x4,   crate::mask16x8,   crate::mask16x16,  crate::mask16x32;\n-    crate::mask32   => crate::mask32x2,   crate::mask32x4,   crate::mask32x8,   crate::mask32x16;\n-    crate::mask64   => crate::mask64x2,   crate::mask64x4,   crate::mask64x8;\n-    crate::mask128  => crate::mask128x2,  crate::mask128x4;\n-    crate::masksize => crate::masksizex2, crate::masksizex4, crate::masksizex8;\n+    crate::masks::wide::m8    => crate::masks::wide::m8x8,    crate::masks::wide::m8x16,   crate::masks::wide::m8x32,   crate::masks::wide::m8x64;\n+    crate::masks::wide::m16   => crate::masks::wide::m16x4,   crate::masks::wide::m16x8,   crate::masks::wide::m16x16,  crate::masks::wide::m16x32;\n+    crate::masks::wide::m32   => crate::masks::wide::m32x2,   crate::masks::wide::m32x4,   crate::masks::wide::m32x8,   crate::masks::wide::m32x16;\n+    crate::masks::wide::m64   => crate::masks::wide::m64x2,   crate::masks::wide::m64x4,   crate::masks::wide::m64x8;\n+    crate::masks::wide::m128  => crate::masks::wide::m128x2,  crate::masks::wide::m128x4;\n+    crate::masks::wide::msize => crate::masks::wide::msizex2, crate::masks::wide::msizex4, crate::masks::wide::msizex8;\n }"}, {"sha": "adf56a3684b3be8829e28ac9d6d0911536ef75ad", "filename": "crates/core_simd/src/vectors_mask128.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_mask128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_mask128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask128.rs?ref=a69c4414bc69d95d1ac1636cf2bc61deec21d936", "patch": "@@ -1,11 +0,0 @@\n-use crate::mask128;\n-\n-define_mask_vector! {\n-    /// Vector of two `mask128` values\n-    struct mask128x2([i128 as mask128; 2]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of four `mask128` values\n-    struct mask128x4([i128 as mask128; 4]);\n-}"}, {"sha": "406d7255a11efe3bd31407ba73b476488f467568", "filename": "crates/core_simd/src/vectors_mask16.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_mask16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_mask16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask16.rs?ref=a69c4414bc69d95d1ac1636cf2bc61deec21d936", "patch": "@@ -1,21 +0,0 @@\n-use crate::mask16;\n-\n-define_mask_vector! {\n-    /// Vector of four `mask16` values\n-    struct mask16x4([i16 as mask16; 4]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of eight `mask16` values\n-    struct mask16x8([i16 as mask16; 8]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of 16 `mask16` values\n-    struct mask16x16([i16 as mask16; 16]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of 32 `mask16` values\n-    struct mask16x32([i16 as mask16; 32]);\n-}"}, {"sha": "fad191421f3879fa97648c6fe4fc7c424f10921d", "filename": "crates/core_simd/src/vectors_mask32.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_mask32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_mask32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask32.rs?ref=a69c4414bc69d95d1ac1636cf2bc61deec21d936", "patch": "@@ -1,21 +0,0 @@\n-use crate::mask32;\n-\n-define_mask_vector! {\n-    /// Vector of two `mask32` values\n-    struct mask32x2([i32 as mask32; 2]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of four `mask32` values\n-    struct mask32x4([i32 as mask32; 4]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of eight `mask32` values\n-    struct mask32x8([i32 as mask32; 8]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of 16 `mask32` values\n-    struct mask32x16([i32 as mask32; 16]);\n-}"}, {"sha": "554e731ccf24b0d177f6ba492cdf0d6e5797c80e", "filename": "crates/core_simd/src/vectors_mask64.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_mask64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_mask64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask64.rs?ref=a69c4414bc69d95d1ac1636cf2bc61deec21d936", "patch": "@@ -1,16 +0,0 @@\n-use crate::mask64;\n-\n-define_mask_vector! {\n-    /// Vector of two `mask64` values\n-    struct mask64x2([i64 as mask64; 2]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of four `mask64` values\n-    struct mask64x4([i64 as mask64; 4]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of eight `mask64` values\n-    struct mask64x8([i64 as mask64; 8]);\n-}"}, {"sha": "d038b33610444a1d084e09021a2a57270e46bc9b", "filename": "crates/core_simd/src/vectors_mask8.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_mask8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_mask8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_mask8.rs?ref=a69c4414bc69d95d1ac1636cf2bc61deec21d936", "patch": "@@ -1,21 +0,0 @@\n-use crate::mask8;\n-\n-define_mask_vector! {\n-    /// Vector of eight `mask8` values\n-    struct mask8x8([i8 as mask8; 8]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of 16 `mask8` values\n-    struct mask8x16([i8 as mask8; 16]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of 32 `mask8` values\n-    struct mask8x32([i8 as mask8; 32]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of 64 `mask8` values\n-    struct mask8x64([i8 as mask8; 64]);\n-}"}, {"sha": "a838aee51985352443a3a3673f5ef88da79ade67", "filename": "crates/core_simd/src/vectors_masksize.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_masksize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69c4414bc69d95d1ac1636cf2bc61deec21d936/crates%2Fcore_simd%2Fsrc%2Fvectors_masksize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_masksize.rs?ref=a69c4414bc69d95d1ac1636cf2bc61deec21d936", "patch": "@@ -1,16 +0,0 @@\n-use crate::masksize;\n-\n-define_mask_vector! {\n-    /// Vector of two `masksize` values\n-    struct masksizex2([isize as masksize; 2]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of four `masksize` values\n-    struct masksizex4([isize as masksize; 4]);\n-}\n-\n-define_mask_vector! {\n-    /// Vector of eight `masksize` values\n-    struct masksizex8([isize as masksize; 8]);\n-}"}]}