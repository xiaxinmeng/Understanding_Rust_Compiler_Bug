{"sha": "f5c47fa44d64b7ae529147f9b0122b7ecda1bd92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YzQ3ZmE0NGQ2NGI3YWU1MjkxNDdmOWIwMTIyYjdlY2RhMWJkOTI=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-07-22T16:17:08Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-08-02T18:20:42Z"}, "message": "Move bulk of BTreeMap::insert method down to new method on handle", "tree": {"sha": "1fb099f04a2ebeb9fc397c5ed89100b0fcc4cfe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fb099f04a2ebeb9fc397c5ed89100b0fcc4cfe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c47fa44d64b7ae529147f9b0122b7ecda1bd92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c47fa44d64b7ae529147f9b0122b7ecda1bd92", "html_url": "https://github.com/rust-lang/rust/commit/f5c47fa44d64b7ae529147f9b0122b7ecda1bd92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c47fa44d64b7ae529147f9b0122b7ecda1bd92/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a99ae95c722d4dc8d1eef09aaa4e72d50d496e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/a99ae95c722d4dc8d1eef09aaa4e72d50d496e75", "html_url": "https://github.com/rust-lang/rust/commit/a99ae95c722d4dc8d1eef09aaa4e72d50d496e75"}], "stats": {"total": 107, "additions": 70, "deletions": 37}, "files": [{"sha": "1db629c3bdf8da0e7f9754c9514e6b88168a4b9f", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f5c47fa44d64b7ae529147f9b0122b7ecda1bd92/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c47fa44d64b7ae529147f9b0122b7ecda1bd92/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=f5c47fa44d64b7ae529147f9b0122b7ecda1bd92", "patch": "@@ -2465,40 +2465,17 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     pub fn insert(self, value: V) -> &'a mut V {\n         *self.length += 1;\n \n-        let out_ptr;\n-\n-        let mut ins_k;\n-        let mut ins_v;\n-        let mut ins_edge;\n-\n-        let mut cur_parent = match self.handle.insert(self.key, value) {\n-            (Fit(handle), _) => return handle.into_kv_mut().1,\n-            (Split(left, k, v, right), ptr) => {\n-                ins_k = k;\n-                ins_v = v;\n-                ins_edge = right;\n-                out_ptr = ptr;\n-                left.ascend().map_err(|n| n.into_root_mut())\n+        let out_ptr = match self.handle.insert_recursing(self.key, value) {\n+            (Fit(_), val_ptr) => val_ptr,\n+            (Split(ins), val_ptr) => {\n+                let root = ins.left.into_root_mut();\n+                root.push_internal_level().push(ins.k, ins.v, ins.right);\n+                val_ptr\n             }\n         };\n-\n-        loop {\n-            match cur_parent {\n-                Ok(parent) => match parent.insert(ins_k, ins_v, ins_edge) {\n-                    Fit(_) => return unsafe { &mut *out_ptr },\n-                    Split(left, k, v, right) => {\n-                        ins_k = k;\n-                        ins_v = v;\n-                        ins_edge = right;\n-                        cur_parent = left.ascend().map_err(|n| n.into_root_mut());\n-                    }\n-                },\n-                Err(root) => {\n-                    root.push_internal_level().push(ins_k, ins_v, ins_edge);\n-                    return unsafe { &mut *out_ptr };\n-                }\n-            }\n-        }\n+        // Now that we have finished growing the tree using borrowed references,\n+        // dereference the pointer to a part of it, that we picked up along the way.\n+        unsafe { &mut *out_ptr }\n     }\n }\n "}, {"sha": "873713302c213b392c2a0df9da09e62fab7218c9", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 61, "deletions": 5, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f5c47fa44d64b7ae529147f9b0122b7ecda1bd92/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c47fa44d64b7ae529147f9b0122b7ecda1bd92/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=f5c47fa44d64b7ae529147f9b0122b7ecda1bd92", "patch": "@@ -843,7 +843,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge\n     /// this edge. This method splits the node if there isn't enough room.\n     ///\n     /// The returned pointer points to the inserted value.\n-    pub fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {\n+    fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {\n         if self.node.len() < CAPACITY {\n             let ptr = self.insert_fit(key, val);\n             let kv = unsafe { Handle::new_kv(self.node, self.idx) };\n@@ -862,7 +862,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge\n                     .insert_fit(key, val)\n                 }\n             };\n-            (InsertResult::Split(left, k, v, right), ptr)\n+            (InsertResult::Split(SplitResult { left: left.forget_type(), k, v, right }), ptr)\n         }\n     }\n }\n@@ -918,7 +918,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n     /// Inserts a new key/value pair and an edge that will go to the right of that new pair\n     /// between this edge and the key/value pair to the right of this edge. This method splits\n     /// the node if there isn't enough room.\n-    pub fn insert(\n+    fn insert(\n         mut self,\n         key: K,\n         val: V,\n@@ -946,7 +946,43 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n                     .insert_fit(key, val, edge);\n                 }\n             }\n-            InsertResult::Split(left, k, v, right)\n+            InsertResult::Split(SplitResult { left: left.forget_type(), k, v, right })\n+        }\n+    }\n+}\n+\n+impl<'a, K: 'a, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {\n+    /// Inserts a new key/value pair between the key/value pairs to the right and left of\n+    /// this edge. This method splits the node if there isn't enough room, and tries to\n+    /// insert the split off portion into the parent node recursively, until the root is reached.\n+    ///\n+    /// If the returned result is a `Fit`, its handle's node can be this edge's node or an ancestor.\n+    /// If the returned result is a `Split`, the `left` field will be the root node.\n+    /// The returned pointer points to the inserted value.\n+    pub fn insert_recursing(\n+        self,\n+        key: K,\n+        value: V,\n+    ) -> (InsertResult<'a, K, V, marker::LeafOrInternal>, *mut V) {\n+        let (mut split, val_ptr) = match self.insert(key, value) {\n+            (InsertResult::Fit(handle), ptr) => {\n+                return (InsertResult::Fit(handle.forget_node_type()), ptr);\n+            }\n+            (InsertResult::Split(split), val_ptr) => (split, val_ptr),\n+        };\n+\n+        loop {\n+            split = match split.left.ascend() {\n+                Ok(parent) => match parent.insert(split.k, split.v, split.right) {\n+                    InsertResult::Fit(handle) => {\n+                        return (InsertResult::Fit(handle.forget_node_type()), val_ptr);\n+                    }\n+                    InsertResult::Split(split) => split,\n+                },\n+                Err(root) => {\n+                    return (InsertResult::Split(SplitResult { left: root, ..split }), val_ptr);\n+                }\n+            };\n         }\n     }\n }\n@@ -1389,6 +1425,14 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::K\n     }\n }\n \n+impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::KV> {\n+    pub fn forget_node_type(\n+        self,\n+    ) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV> {\n+        unsafe { Handle::new_kv(self.node.forget_type(), self.idx) }\n+    }\n+}\n+\n impl<BorrowType, K, V, HandleType>\n     Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, HandleType>\n {\n@@ -1455,9 +1499,21 @@ pub enum ForceResult<Leaf, Internal> {\n     Internal(Internal),\n }\n \n+/// Result of insertion, when a node needed to expand beyond its capacity.\n+/// Does not distinguish between `Leaf` and `Internal` because `Root` doesn't.\n+pub struct SplitResult<'a, K, V> {\n+    // Altered node in existing tree with elements and edges that belong to the left of `k`.\n+    pub left: NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>,\n+    // Some key and value split off, to be inserted elsewhere.\n+    pub k: K,\n+    pub v: V,\n+    // Owned, unattached, new node with elements and edges that belong to the right of `k`.\n+    pub right: Root<K, V>,\n+}\n+\n pub enum InsertResult<'a, K, V, Type> {\n     Fit(Handle<NodeRef<marker::Mut<'a>, K, V, Type>, marker::KV>),\n-    Split(NodeRef<marker::Mut<'a>, K, V, Type>, K, V, Root<K, V>),\n+    Split(SplitResult<'a, K, V>),\n }\n \n pub mod marker {"}]}