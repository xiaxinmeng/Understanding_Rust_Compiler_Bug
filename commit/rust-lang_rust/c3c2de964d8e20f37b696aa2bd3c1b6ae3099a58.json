{"sha": "c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYzJkZTk2NGQ4ZTIwZjM3YjY5NmFhMmJkM2MxYjZhZTMwOTlhNTg=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-11-28T17:11:45Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-12-10T17:34:46Z"}, "message": "reject invalid external doc attributes\n\nAlso, provide a suggestion for the correct syntax.", "tree": {"sha": "27e338251e337229b48c68d675b82021e4ab4d81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27e338251e337229b48c68d675b82021e4ab4d81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlwOo7YWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdA0DB/4hmCp0SMREMXbB+iD7QWAhCKqU\nUWn0LYHrYypGtyLqXGrKtHkX6YSNrgGSyObxSB6QFtQBC2v2qFEKyH1EPLqTje0P\ngC0ySQrDEeeWNqz0OzgDl348Na6RQ5JAMPg5Y+xVxgnSmiWTM8PP8VUF95EBjpkC\nHalmHqYFPayMiYK5dIj0iV0Z6KKPriXb5JgHbUqDPxicJ2x5t8gv3AxuUDuggBI2\nuFDPgIuoex7YY6co6iM1JjC1lEj1XVXgJ+EozTdyoKwN9avsR30tN1wetvbEPFYD\nWtTkQvnyGGMwNhYymh8yXI9Q8umFNJfZVXM7G4C1pdX3zUHw2qVqDme9WnEw\n=BL0+\n-----END PGP SIGNATURE-----", "payload": "tree 27e338251e337229b48c68d675b82021e4ab4d81\nparent b755501043d5b27b39f94bcadd57c8d5dedfd6ba\nauthor Andy Russell <arussell123@gmail.com> 1543425105 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1544463286 -0500\n\nreject invalid external doc attributes\n\nAlso, provide a suggestion for the correct syntax.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58", "html_url": "https://github.com/rust-lang/rust/commit/c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b755501043d5b27b39f94bcadd57c8d5dedfd6ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/b755501043d5b27b39f94bcadd57c8d5dedfd6ba", "html_url": "https://github.com/rust-lang/rust/commit/b755501043d5b27b39f94bcadd57c8d5dedfd6ba"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "adf080a27a3fc742211ca08e866d166e6f78ba78", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{self, Block, Ident, NodeId, PatKind, Path};\n+use ast::{self, Block, Ident, LitKind, NodeId, PatKind, Path};\n use ast::{MacStmtStyle, StmtKind, ItemKind};\n use attr::{self, HasAttrs};\n use source_map::{ExpnInfo, MacroBang, MacroAttribute, dummy_spanned, respan};\n@@ -1549,7 +1549,35 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                         }\n                     }\n                 } else {\n-                    items.push(noop_fold_meta_list_item(it, self));\n+                    let mut err = self.cx.struct_span_err(\n+                        it.span,\n+                        &format!(\"expected path to external documentation\"),\n+                    );\n+\n+                    // Check if the user erroneously used `doc(include(...))` syntax.\n+                    let literal = it.meta_item_list().and_then(|list| {\n+                        if list.len() == 1 {\n+                            list[0].literal().map(|literal| &literal.node)\n+                        } else {\n+                            None\n+                        }\n+                    });\n+\n+                    let (path, applicability) = match &literal {\n+                        Some(LitKind::Str(path, ..)) => {\n+                            (path.to_string(), Applicability::MachineApplicable)\n+                        }\n+                        _ => (String::from(\"<path>\"), Applicability::HasPlaceholders),\n+                    };\n+\n+                    err.span_suggestion_with_applicability(\n+                        it.span,\n+                        \"provide a file path with `=`\",\n+                        format!(\"include = \\\"{}\\\"\", path),\n+                        applicability,\n+                    );\n+\n+                    err.emit();\n                 }\n             }\n "}, {"sha": "f21583ad7b219c4f56eeb2125ea58dc7cb54092c", "filename": "src/test/ui/extern/external-doc-error.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs?ref=c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58", "patch": "@@ -5,4 +5,24 @@\n #[doc(include = \"not-a-file.md\")] //~ ERROR: couldn't read\n pub struct SomeStruct;\n \n+#[doc(include)]\n+pub struct MissingPath; //~^ ERROR expected path\n+                        //~| HELP provide a file path with `=`\n+                        //~| SUGGESTION include = \"<path>\"\n+\n+#[doc(include(\"../README.md\"))]\n+pub struct InvalidPathSyntax; //~^ ERROR expected path\n+                              //~| HELP provide a file path with `=`\n+                              //~| SUGGESTION include = \"../README.md\"\n+\n+#[doc(include = 123)]\n+pub struct InvalidPathType; //~^ ERROR expected path\n+                            //~| HELP provide a file path with `=`\n+                            //~| SUGGESTION include = \"<path>\"\n+\n+#[doc(include(123))]\n+pub struct InvalidPathSyntaxAndType; //~^ ERROR expected path\n+                                     //~| HELP provide a file path with `=`\n+                                     //~| SUGGESTION include = \"<path>\"\n+\n fn main() {}"}, {"sha": "846f8ddfcb67bc71655512ce534522d904731a03", "filename": "src/test/ui/extern/external-doc-error.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr?ref=c3c2de964d8e20f37b696aa2bd3c1b6ae3099a58", "patch": "@@ -4,5 +4,29 @@ error: couldn't read $DIR/not-a-file.md: $FILE_NOT_FOUND_MSG (os error 2)\n LL | #[doc(include = \"not-a-file.md\")] //~ ERROR: couldn't read\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: expected path to external documentation\n+  --> $DIR/external-doc-error.rs:8:7\n+   |\n+LL | #[doc(include)]\n+   |       ^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`\n+\n+error: expected path to external documentation\n+  --> $DIR/external-doc-error.rs:13:7\n+   |\n+LL | #[doc(include(\"../README.md\"))]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"../README.md\"`\n+\n+error: expected path to external documentation\n+  --> $DIR/external-doc-error.rs:18:7\n+   |\n+LL | #[doc(include = 123)]\n+   |       ^^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`\n+\n+error: expected path to external documentation\n+  --> $DIR/external-doc-error.rs:23:7\n+   |\n+LL | #[doc(include(123))]\n+   |       ^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`\n+\n+error: aborting due to 5 previous errors\n "}]}