{"sha": "03defb627cd39a3de720f1f829678b9f0d581e8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZGVmYjYyN2NkMzlhM2RlNzIwZjFmODI5Njc4YjlmMGQ1ODFlOGU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-09T22:20:06Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-16T20:14:36Z"}, "message": "Add check_generic_arg early pass", "tree": {"sha": "0a37b267f785d89d994ad4b0f08b17178ff4faf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a37b267f785d89d994ad4b0f08b17178ff4faf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03defb627cd39a3de720f1f829678b9f0d581e8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl+J/ywACgkQgTGiTgx5\n769LWQ//V2PzvftTgHkLoDY5rbc063HT4fvBIpl9pHit2qA2Ijw2fKMLZZgxE0Bm\nABZgPEq5sxKsbNG8J41dH0XP4HQGEUGr/oUol3LIKuj1b8fzIU6NrX5jI4o3xpZS\nFoo1c00vViwXg5fFeYZe1sQ88IGhnS9/+JUTfh6yVZ/Hz+/umLqAET5ALc0d73vi\nfOrvmCUJWYXAdie7Ls7wZIHT3CeK72cgdhw/zXjmWjSzqktgaYLwZf6zePA4aNMO\nFJJYGo8TSZb8knyqwL6qY8GyhXrvrTh5XATHWbY/qt4D8SwwJK73Dg1EE6AjbvRU\nOcl5cXJ8GuRdXZorIUYK3Dk8r+2Woa+cSg94z9Z475o+jqb3MxKyqHxkUkwn+F6+\ntkqNa+ifQ0aKnE6lkZkCLwfamUYGLH5H63ajVaR8vdSURXLJ2tJ/hOOHWzpN6uT6\nIlUKufeZQgL3Lujjz/kNybAoXHi9Df1f8t0InYBBMOa2Xuk9d+UOcqcL0Y+9g0ih\nKNfBreSdlzEwHuWxRYz+SUO9thW10T7RMpHrNojPE11i4yyOyaE90Zb159JyU/F4\n4Sk9v9QyFRtTTNJu0drBx6yd2CyRH5eFZ1P66Wmf8GU0RnweDsJ7ayZVZ6zXKnln\ntk9CmVWlRXVsMWNzgdEbE2KZf4j7+k/6+aYBWiq/ehKag6CtN+A=\n=JwfB\n-----END PGP SIGNATURE-----", "payload": "tree 0a37b267f785d89d994ad4b0f08b17178ff4faf1\nparent 27411d6d2bf282d017a464d28098823bc1a16adb\nauthor Santiago Pastorino <spastorino@gmail.com> 1602282006 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1602879276 -0300\n\nAdd check_generic_arg early pass\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03defb627cd39a3de720f1f829678b9f0d581e8e", "html_url": "https://github.com/rust-lang/rust/commit/03defb627cd39a3de720f1f829678b9f0d581e8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03defb627cd39a3de720f1f829678b9f0d581e8e/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27411d6d2bf282d017a464d28098823bc1a16adb", "url": "https://api.github.com/repos/rust-lang/rust/commits/27411d6d2bf282d017a464d28098823bc1a16adb", "html_url": "https://github.com/rust-lang/rust/commit/27411d6d2bf282d017a464d28098823bc1a16adb"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "507b49616ea0ff5461f237bb646c178f2b440dd2", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/03defb627cd39a3de720f1f829678b9f0d581e8e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03defb627cd39a3de720f1f829678b9f0d581e8e/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=03defb627cd39a3de720f1f829678b9f0d581e8e", "patch": "@@ -200,11 +200,7 @@ pub trait Visitor<'ast>: Sized {\n         walk_generic_args(self, path_span, generic_args)\n     }\n     fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArg) {\n-        match generic_arg {\n-            GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n-            GenericArg::Type(ty) => self.visit_ty(ty),\n-            GenericArg::Const(ct) => self.visit_anon_const(ct),\n-        }\n+        walk_generic_arg(self, generic_arg)\n     }\n     fn visit_assoc_ty_constraint(&mut self, constraint: &'ast AssocTyConstraint) {\n         walk_assoc_ty_constraint(self, constraint)\n@@ -486,6 +482,17 @@ where\n     }\n }\n \n+pub fn walk_generic_arg<'a, V>(visitor: &mut V, generic_arg: &'a GenericArg)\n+where\n+    V: Visitor<'a>,\n+{\n+    match generic_arg {\n+        GenericArg::Lifetime(lt) => visitor.visit_lifetime(lt),\n+        GenericArg::Type(ty) => visitor.visit_ty(ty),\n+        GenericArg::Const(ct) => visitor.visit_anon_const(ct),\n+    }\n+}\n+\n pub fn walk_assoc_ty_constraint<'a, V: Visitor<'a>>(\n     visitor: &mut V,\n     constraint: &'a AssocTyConstraint,"}, {"sha": "4c8baa49edf615c8b01bc996590870e8095f881a", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03defb627cd39a3de720f1f829678b9f0d581e8e/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03defb627cd39a3de720f1f829678b9f0d581e8e/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=03defb627cd39a3de720f1f829678b9f0d581e8e", "patch": "@@ -195,6 +195,11 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         run_early_pass!(self, check_expr_post, e);\n     }\n \n+    fn visit_generic_arg(&mut self, arg: &'a ast::GenericArg) {\n+        run_early_pass!(self, check_generic_arg, arg);\n+        ast_visit::walk_generic_arg(self, arg);\n+    }\n+\n     fn visit_generic_param(&mut self, param: &'a ast::GenericParam) {\n         run_early_pass!(self, check_generic_param, param);\n         ast_visit::walk_generic_param(self, param);"}, {"sha": "828f283d2a95a71f7f5d7686d95a5072410c075e", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03defb627cd39a3de720f1f829678b9f0d581e8e/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03defb627cd39a3de720f1f829678b9f0d581e8e/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=03defb627cd39a3de720f1f829678b9f0d581e8e", "patch": "@@ -33,6 +33,7 @@ macro_rules! late_lint_methods {\n             fn check_expr(a: &$hir hir::Expr<$hir>);\n             fn check_expr_post(a: &$hir hir::Expr<$hir>);\n             fn check_ty(a: &$hir hir::Ty<$hir>);\n+            fn check_generic_arg(a: &$hir hir::GenericArg<$hir>);\n             fn check_generic_param(a: &$hir hir::GenericParam<$hir>);\n             fn check_generics(a: &$hir hir::Generics<$hir>);\n             fn check_where_predicate(a: &$hir hir::WherePredicate<$hir>);\n@@ -176,6 +177,7 @@ macro_rules! early_lint_methods {\n             fn check_expr(a: &ast::Expr);\n             fn check_expr_post(a: &ast::Expr);\n             fn check_ty(a: &ast::Ty);\n+            fn check_generic_arg(a: &ast::GenericArg);\n             fn check_generic_param(a: &ast::GenericParam);\n             fn check_generics(a: &ast::Generics);\n             fn check_where_predicate(a: &ast::WherePredicate);"}]}