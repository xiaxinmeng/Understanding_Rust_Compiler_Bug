{"sha": "1d1010f1af1747f9fa8fbade19d9eed2260c96f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMTAxMGYxYWYxNzQ3ZjlmYThmYmFkZTE5ZDllZWQyMjYwYzk2ZjE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-22T15:38:30Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-23T16:42:11Z"}, "message": "Add more timing info to render_html\n\n- Show `create_renderer` and `renderer_after_crate` by default\n- Don't rewrite `extra_verbose_generic_activity`", "tree": {"sha": "c4926d7c619adacfe6a0708fcc8214cab9ab5359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4926d7c619adacfe6a0708fcc8214cab9ab5359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d1010f1af1747f9fa8fbade19d9eed2260c96f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1010f1af1747f9fa8fbade19d9eed2260c96f1", "html_url": "https://github.com/rust-lang/rust/commit/1d1010f1af1747f9fa8fbade19d9eed2260c96f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d1010f1af1747f9fa8fbade19d9eed2260c96f1/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf86fd522114d8064360682bacd23327a84dbfa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf86fd522114d8064360682bacd23327a84dbfa4", "html_url": "https://github.com/rust-lang/rust/commit/bf86fd522114d8064360682bacd23327a84dbfa4"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "c3e3f6768c5ede025cf423fd004b7ee69acec2a5", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1d1010f1af1747f9fa8fbade19d9eed2260c96f1/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1010f1af1747f9fa8fbade19d9eed2260c96f1/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=1d1010f1af1747f9fa8fbade19d9eed2260c96f1", "patch": "@@ -12,6 +12,9 @@ use crate::formats::cache::{Cache, CACHE_KEY};\n /// backend renderer has hooks for initialization, documenting an item, entering and exiting a\n /// module, and cleanup/finalizing output.\n crate trait FormatRenderer<'tcx>: Clone {\n+    /// Gives a description of the renderer. Used for performance profiling.\n+    fn descr() -> &'static str;\n+\n     /// Sets up any state required for the renderer. When this is called the cache has already been\n     /// populated.\n     fn init(\n@@ -57,16 +60,20 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     edition: Edition,\n     tcx: ty::TyCtxt<'tcx>,\n ) -> Result<(), Error> {\n-    let (krate, mut cache) = Cache::from_krate(\n-        render_info.clone(),\n-        options.document_private,\n-        &options.extern_html_root_urls,\n-        &options.output,\n-        krate,\n-    );\n-\n-    let (mut format_renderer, mut krate) =\n-        T::init(krate, options, render_info, edition, &mut cache, tcx)?;\n+    let (krate, mut cache) = tcx.sess.time(\"create_format_cache\", || {\n+        Cache::from_krate(\n+            render_info.clone(),\n+            options.document_private,\n+            &options.extern_html_root_urls,\n+            &options.output,\n+            krate,\n+        )\n+    });\n+    let prof = &tcx.sess.prof;\n+\n+    let (mut format_renderer, mut krate) = prof\n+        .extra_verbose_generic_activity(\"create_renderer\", T::descr())\n+        .run(|| T::init(krate, options, render_info, edition, &mut cache, tcx))?;\n \n     let cache = Arc::new(cache);\n     // Freeze the cache now that the index has been built. Put an Arc into TLS for future\n@@ -83,6 +90,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     // Render the crate documentation\n     let mut work = vec![(format_renderer.clone(), item)];\n \n+    let unknown = rustc_span::Symbol::intern(\"<unknown item>\");\n     while let Some((mut cx, item)) = work.pop() {\n         if item.is_mod() {\n             // modules are special because they add a namespace. We also need to\n@@ -91,6 +99,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n             if name.is_empty() {\n                 panic!(\"Unexpected module with empty name\");\n             }\n+            let _timer = prof.generic_activity_with_arg(\"render_mod_item\", name.as_str());\n \n             cx.mod_item_in(&item, &name, &cache)?;\n             let module = match *item.kind {\n@@ -104,9 +113,10 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n \n             cx.mod_item_out(&name)?;\n         } else if item.name.is_some() {\n-            cx.item(item, &cache)?;\n+            prof.generic_activity_with_arg(\"render_item\", &*item.name.unwrap_or(unknown).as_str())\n+                .run(|| cx.item(item, &cache))?;\n         }\n     }\n-\n-    format_renderer.after_krate(&krate, &cache, diag)\n+    prof.extra_verbose_generic_activity(\"renderer_after_krate\", T::descr())\n+        .run(|| format_renderer.after_krate(&krate, &cache, diag))\n }"}, {"sha": "343509588f55713d227f47c70143217e38e8b894", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d1010f1af1747f9fa8fbade19d9eed2260c96f1/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1010f1af1747f9fa8fbade19d9eed2260c96f1/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=1d1010f1af1747f9fa8fbade19d9eed2260c96f1", "patch": "@@ -384,6 +384,10 @@ crate fn initial_ids() -> Vec<String> {\n \n /// Generates the documentation for `crate` into the directory `dst`\n impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n+    fn descr() -> &'static str {\n+        \"html\"\n+    }\n+\n     fn init(\n         mut krate: clean::Crate,\n         options: RenderOptions,"}, {"sha": "9d0b331d52a02b45a88f7050f02db2d0b8aa9c7d", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d1010f1af1747f9fa8fbade19d9eed2260c96f1/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d1010f1af1747f9fa8fbade19d9eed2260c96f1/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=1d1010f1af1747f9fa8fbade19d9eed2260c96f1", "patch": "@@ -125,6 +125,10 @@ impl JsonRenderer<'_> {\n }\n \n impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n+    fn descr() -> &'static str {\n+        \"json\"\n+    }\n+\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,"}]}