{"sha": "d854c362feb29125deebac562ec49da0eb3866bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NTRjMzYyZmViMjkxMjVkZWViYWM1NjJlYzQ5ZGEwZWIzODY2YmM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-23T21:13:59Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-27T06:43:51Z"}, "message": "Fix def id collection for `const_integer`s in the AST.", "tree": {"sha": "45c32d6ed7f46229dc982a9683b778c6ccc1e4bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45c32d6ed7f46229dc982a9683b778c6ccc1e4bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d854c362feb29125deebac562ec49da0eb3866bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d854c362feb29125deebac562ec49da0eb3866bc", "html_url": "https://github.com/rust-lang/rust/commit/d854c362feb29125deebac562ec49da0eb3866bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d854c362feb29125deebac562ec49da0eb3866bc/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f34e49dd90603337da2347fe81e4d3158ae5fbd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f34e49dd90603337da2347fe81e4d3158ae5fbd1", "html_url": "https://github.com/rust-lang/rust/commit/f34e49dd90603337da2347fe81e4d3158ae5fbd1"}], "stats": {"total": 74, "additions": 46, "deletions": 28}, "files": [{"sha": "c0f38061a0d6dac2681a1a6fb47a68db53986594", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d854c362feb29125deebac562ec49da0eb3866bc/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d854c362feb29125deebac562ec49da0eb3866bc/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=d854c362feb29125deebac562ec49da0eb3866bc", "patch": "@@ -27,7 +27,13 @@ pub struct DefCollector<'a> {\n     hir_crate: Option<&'a hir::Crate>,\n     definitions: &'a mut Definitions,\n     parent_def: Option<DefIndex>,\n-    pub visit_macro_invoc: Option<&'a mut FnMut(NodeId, DefIndex)>,\n+    pub visit_macro_invoc: Option<&'a mut FnMut(MacroInvocationData)>,\n+}\n+\n+pub struct MacroInvocationData {\n+    pub id: NodeId,\n+    pub def_index: DefIndex,\n+    pub const_integer: bool,\n }\n \n impl<'a> DefCollector<'a> {\n@@ -93,16 +99,15 @@ impl<'a> DefCollector<'a> {\n         self.parent_def = parent;\n     }\n \n-    fn visit_ast_const_integer(&mut self, expr: &Expr) {\n-        // Find the node which will be used after lowering.\n-        if let ExprKind::Paren(ref inner) = expr.node {\n-            return self.visit_ast_const_integer(inner);\n-        }\n-\n-        // FIXME(eddyb) Closures should have separate\n-        // function definition IDs and expression IDs.\n-        if let ExprKind::Closure(..) = expr.node {\n-            return;\n+    pub fn visit_ast_const_integer(&mut self, expr: &Expr) {\n+        match expr.node {\n+            // Find the node which will be used after lowering.\n+            ExprKind::Paren(ref inner) => return self.visit_ast_const_integer(inner),\n+            ExprKind::Mac(..) => return self.visit_macro_invoc(expr.id, true),\n+            // FIXME(eddyb) Closures should have separate\n+            // function definition IDs and expression IDs.\n+            ExprKind::Closure(..) => return,\n+            _ => {}\n         }\n \n         self.create_def(expr.id, DefPathData::Initializer);\n@@ -118,9 +123,13 @@ impl<'a> DefCollector<'a> {\n         self.create_def(expr.id, DefPathData::Initializer);\n     }\n \n-    fn visit_macro_invoc(&mut self, id: NodeId) {\n+    fn visit_macro_invoc(&mut self, id: NodeId, const_integer: bool) {\n         if let Some(ref mut visit) = self.visit_macro_invoc {\n-            visit(id, self.parent_def.unwrap());\n+            visit(MacroInvocationData {\n+                id: id,\n+                const_integer: const_integer,\n+                def_index: self.parent_def.unwrap(),\n+            })\n         }\n     }\n }\n@@ -144,7 +153,7 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n                 DefPathData::ValueNs(i.ident.name.as_str()),\n             ItemKind::Mac(..) if i.id == DUMMY_NODE_ID => return, // Scope placeholder\n-            ItemKind::Mac(..) => return self.visit_macro_invoc(i.id),\n+            ItemKind::Mac(..) => return self.visit_macro_invoc(i.id, false),\n             ItemKind::Use(..) => DefPathData::Misc,\n         };\n         let def = self.create_def(i.id, def_data);\n@@ -210,7 +219,7 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n                 DefPathData::ValueNs(ti.ident.name.as_str()),\n             TraitItemKind::Type(..) => DefPathData::TypeNs(ti.ident.name.as_str()),\n-            TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id),\n+            TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id, false),\n         };\n \n         let def = self.create_def(ti.id, def_data);\n@@ -228,7 +237,7 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n                 DefPathData::ValueNs(ii.ident.name.as_str()),\n             ImplItemKind::Type(..) => DefPathData::TypeNs(ii.ident.name.as_str()),\n-            ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),\n+            ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id, false),\n         };\n \n         let def = self.create_def(ii.id, def_data);\n@@ -245,7 +254,7 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n         let parent_def = self.parent_def;\n \n         match pat.node {\n-            PatKind::Mac(..) => return self.visit_macro_invoc(pat.id),\n+            PatKind::Mac(..) => return self.visit_macro_invoc(pat.id, false),\n             PatKind::Ident(_, id, _) => {\n                 let def = self.create_def(pat.id, DefPathData::Binding(id.node.name.as_str()));\n                 self.parent_def = Some(def);\n@@ -261,7 +270,7 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n         let parent_def = self.parent_def;\n \n         match expr.node {\n-            ExprKind::Mac(..) => return self.visit_macro_invoc(expr.id),\n+            ExprKind::Mac(..) => return self.visit_macro_invoc(expr.id, false),\n             ExprKind::Repeat(_, ref count) => self.visit_ast_const_integer(count),\n             ExprKind::Closure(..) => {\n                 let def = self.create_def(expr.id, DefPathData::ClosureExpr);\n@@ -276,7 +285,7 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n \n     fn visit_ty(&mut self, ty: &Ty) {\n         match ty.node {\n-            TyKind::Mac(..) => return self.visit_macro_invoc(ty.id),\n+            TyKind::Mac(..) => return self.visit_macro_invoc(ty.id, false),\n             TyKind::FixedLengthVec(_, ref length) => self.visit_ast_const_integer(length),\n             TyKind::ImplTrait(..) => {\n                 self.create_def(ty.id, DefPathData::ImplTrait);\n@@ -296,7 +305,7 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n \n     fn visit_stmt(&mut self, stmt: &Stmt) {\n         match stmt.node {\n-            StmtKind::Mac(..) => self.visit_macro_invoc(stmt.id),\n+            StmtKind::Mac(..) => self.visit_macro_invoc(stmt.id, false),\n             _ => visit::walk_stmt(self, stmt),\n         }\n     }"}, {"sha": "bafb00edc190c1db00c65b18cea3d46e89e969e1", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d854c362feb29125deebac562ec49da0eb3866bc/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d854c362feb29125deebac562ec49da0eb3866bc/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d854c362feb29125deebac562ec49da0eb3866bc", "patch": "@@ -11,7 +11,7 @@\n pub use self::Node::*;\n use self::MapEntry::*;\n use self::collector::NodeCollector;\n-pub use self::def_collector::DefCollector;\n+pub use self::def_collector::{DefCollector, MacroInvocationData};\n pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData,\n                             DisambiguatedDefPathData, InlinedRootPath};\n "}, {"sha": "17f2dff28c3f450217319ddcc108517753b67b38", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d854c362feb29125deebac562ec49da0eb3866bc/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d854c362feb29125deebac562ec49da0eb3866bc/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d854c362feb29125deebac562ec49da0eb3866bc", "patch": "@@ -11,7 +11,7 @@\n use {Module, Resolver};\n use build_reduced_graph::BuildReducedGraphVisitor;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefIndex};\n-use rustc::hir::map::DefCollector;\n+use rustc::hir::map::{self, DefCollector};\n use std::rc::Rc;\n use syntax::ast;\n use syntax::errors::DiagnosticBuilder;\n@@ -27,13 +27,17 @@ use syntax::util::lev_distance::find_best_match_for_name;\n pub struct ExpansionData<'a> {\n     pub module: Module<'a>,\n     def_index: DefIndex,\n+    // True if this expansion is in a `const_integer` position, for example `[u32; m!()]`.\n+    // c.f. `DefCollector::visit_ast_const_integer`.\n+    const_integer: bool,\n }\n \n impl<'a> ExpansionData<'a> {\n     pub fn root(graph_root: Module<'a>) -> Self {\n         ExpansionData {\n             module: graph_root,\n             def_index: CRATE_DEF_INDEX,\n+            const_integer: false,\n         }\n     }\n }\n@@ -49,6 +53,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         self.expansion_data.insert(mark.as_u32(), ExpansionData {\n             module: module,\n             def_index: module.def_id().unwrap().index,\n+            const_integer: false,\n         });\n         mark\n     }\n@@ -156,17 +161,21 @@ impl<'a> Resolver<'a> {\n \n     fn collect_def_ids(&mut self, mark: Mark, expansion: &Expansion) {\n         let expansion_data = &mut self.expansion_data;\n-        let module = self.current_module;\n-        let def_index = expansion_data[&mark.as_u32()].def_index;\n-        let visit_macro_invoc = &mut |id: ast::NodeId, def_index| {\n-            expansion_data.insert(id.as_u32(), ExpansionData {\n-                def_index: def_index,\n+        let ExpansionData { def_index, const_integer, module } = expansion_data[&mark.as_u32()];\n+        let visit_macro_invoc = &mut |invoc: map::MacroInvocationData| {\n+            expansion_data.entry(invoc.id.as_u32()).or_insert(ExpansionData {\n+                def_index: invoc.def_index,\n+                const_integer: invoc.const_integer,\n                 module: module,\n             });\n         };\n \n         let mut def_collector = DefCollector::new(&mut self.definitions);\n         def_collector.visit_macro_invoc = Some(visit_macro_invoc);\n-        def_collector.with_parent(def_index, |def_collector| expansion.visit_with(def_collector));\n+        def_collector.with_parent(def_index, |def_collector| if !const_integer {\n+            expansion.visit_with(def_collector)\n+        } else if let Expansion::Expr(ref expr) = *expansion {\n+            def_collector.visit_ast_const_integer(expr);\n+        });\n     }\n }"}]}