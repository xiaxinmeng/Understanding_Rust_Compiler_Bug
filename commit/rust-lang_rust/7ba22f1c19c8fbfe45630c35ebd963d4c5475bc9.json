{"sha": "7ba22f1c19c8fbfe45630c35ebd963d4c5475bc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYTIyZjFjMTljOGZiZmU0NTYzMGMzNWViZDk2M2Q0YzU0NzViYzk=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-04-04T16:30:20Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-04-09T11:45:05Z"}, "message": "Move FunctionSignature to display, remove write_joined\n\nwrite_joined is replaced with `join_to_string::join` which provides the\nnecessary functionality.", "tree": {"sha": "cd6e12e42ef50e1638c64c69bd34ce3d085c4f6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd6e12e42ef50e1638c64c69bd34ce3d085c4f6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba22f1c19c8fbfe45630c35ebd963d4c5475bc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba22f1c19c8fbfe45630c35ebd963d4c5475bc9", "html_url": "https://github.com/rust-lang/rust/commit/7ba22f1c19c8fbfe45630c35ebd963d4c5475bc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba22f1c19c8fbfe45630c35ebd963d4c5475bc9/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84fde47d00bb3ccba3876ad2b2e46c5c59cd07c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/84fde47d00bb3ccba3876ad2b2e46c5c59cd07c4", "html_url": "https://github.com/rust-lang/rust/commit/84fde47d00bb3ccba3876ad2b2e46c5c59cd07c4"}], "stats": {"total": 85, "additions": 36, "deletions": 49}, "files": [{"sha": "9d9d2097f3872da97d310ef0037aeefd622eb151", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 35, "deletions": 23, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7ba22f1c19c8fbfe45630c35ebd963d4c5475bc9/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba22f1c19c8fbfe45630c35ebd963d4c5475bc9/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=7ba22f1c19c8fbfe45630c35ebd963d4c5475bc9", "patch": "@@ -1,5 +1,34 @@\n+//! This module contains utilities for rendering turning things into something\r\n+//! that may be used to render in UI.\r\n use super::*;\r\n use std::fmt::{self, Display};\r\n+use join_to_string::join;\r\n+\r\n+/// Contains information about a function signature\r\n+#[derive(Debug)]\r\n+pub struct FunctionSignature {\r\n+    /// Optional visibility\r\n+    pub visibility: Option<String>,\r\n+    /// Name of the function\r\n+    pub name: Option<String>,\r\n+    /// Documentation for the function\r\n+    pub doc: Option<Documentation>,\r\n+    /// Generic parameters\r\n+    pub generic_parameters: Vec<String>,\r\n+    /// Parameters of the function\r\n+    pub parameters: Vec<String>,\r\n+    /// Optional return type\r\n+    pub ret_type: Option<String>,\r\n+    /// Where predicates\r\n+    pub where_predicates: Vec<String>,\r\n+}\r\n+\r\n+impl FunctionSignature {\r\n+    pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\r\n+        self.doc = doc;\r\n+        self\r\n+    }\r\n+}\r\n \r\n impl Display for FunctionSignature {\r\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\r\n@@ -12,40 +41,23 @@ impl Display for FunctionSignature {\n         }\r\n \r\n         if !self.generic_parameters.is_empty() {\r\n-            write!(f, \"<\")?;\r\n-            write_joined(f, &self.generic_parameters, \", \")?;\r\n-            write!(f, \">\")?;\r\n+            join(self.generic_parameters.iter())\r\n+                .separator(\", \")\r\n+                .surround_with(\"<\", \">\")\r\n+                .to_fmt(f)?;\r\n         }\r\n \r\n-        write!(f, \"(\")?;\r\n-        write_joined(f, &self.parameters, \", \")?;\r\n-        write!(f, \")\")?;\r\n+        join(self.parameters.iter()).separator(\", \").surround_with(\"(\", \")\").to_fmt(f)?;\r\n \r\n         if let Some(t) = &self.ret_type {\r\n             write!(f, \" -> {}\", t)?;\r\n         }\r\n \r\n         if !self.where_predicates.is_empty() {\r\n             write!(f, \"\\nwhere \")?;\r\n-            write_joined(f, &self.where_predicates, \",\\n      \")?;\r\n+            join(self.where_predicates.iter()).separator(\",\\n      \").to_fmt(f)?;\r\n         }\r\n \r\n         Ok(())\r\n     }\r\n }\r\n-\r\n-fn write_joined<T: Display>(\r\n-    f: &mut fmt::Formatter,\r\n-    items: impl IntoIterator<Item = T>,\r\n-    sep: &str,\r\n-) -> fmt::Result {\r\n-    let mut first = true;\r\n-    for e in items {\r\n-        if !first {\r\n-            write!(f, \"{}\", sep)?;\r\n-        }\r\n-        first = false;\r\n-        write!(f, \"{}\", e)?;\r\n-    }\r\n-    Ok(())\r\n-}\r"}, {"sha": "816bab94f07f379d0149ad5e35cda376c9a45086", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7ba22f1c19c8fbfe45630c35ebd963d4c5475bc9/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba22f1c19c8fbfe45630c35ebd963d4c5475bc9/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=7ba22f1c19c8fbfe45630c35ebd963d4c5475bc9", "patch": "@@ -73,6 +73,7 @@ pub use crate::{\n     syntax_highlighting::HighlightedRange,\n     structure::{StructureNode, file_structure},\n     diagnostics::Severity,\n+    display::FunctionSignature,\n };\n \n pub use ra_db::{\n@@ -248,32 +249,6 @@ pub struct CallInfo {\n     pub active_parameter: Option<usize>,\n }\n \n-/// Contains information about a function signature\n-#[derive(Debug)]\n-pub struct FunctionSignature {\n-    /// Optional visibility\n-    pub visibility: Option<String>,\n-    /// Name of the function\n-    pub name: Option<String>,\n-    /// Documentation for the function\n-    pub doc: Option<Documentation>,\n-    /// Generic parameters\n-    pub generic_parameters: Vec<String>,\n-    /// Parameters of the function\n-    pub parameters: Vec<String>,\n-    /// Optional return type\n-    pub ret_type: Option<String>,\n-    /// Where predicates\n-    pub where_predicates: Vec<String>,\n-}\n-\n-impl FunctionSignature {\n-    pub(crate) fn with_doc_opt(mut self, doc: Option<Documentation>) -> Self {\n-        self.doc = doc;\n-        self\n-    }\n-}\n-\n /// `AnalysisHost` stores the current state of the world.\n #[derive(Debug, Default)]\n pub struct AnalysisHost {"}]}