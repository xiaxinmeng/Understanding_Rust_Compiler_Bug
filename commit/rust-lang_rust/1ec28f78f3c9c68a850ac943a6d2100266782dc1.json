{"sha": "1ec28f78f3c9c68a850ac943a6d2100266782dc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzI4Zjc4ZjNjOWM2OGE4NTBhYzk0M2E2ZDIxMDAyNjY3ODJkYzE=", "commit": {"author": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2021-09-02T22:45:52Z"}, "committer": {"name": "DrMeepster", "email": "19316085+DrMeepster@users.noreply.github.com", "date": "2021-09-02T22:45:52Z"}, "message": "remove commented out code", "tree": {"sha": "87726aef2031ad4a60c2f6c1a8280a8e713afed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87726aef2031ad4a60c2f6c1a8280a8e713afed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec28f78f3c9c68a850ac943a6d2100266782dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec28f78f3c9c68a850ac943a6d2100266782dc1", "html_url": "https://github.com/rust-lang/rust/commit/1ec28f78f3c9c68a850ac943a6d2100266782dc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec28f78f3c9c68a850ac943a6d2100266782dc1/comments", "author": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DrMeepster", "id": 19316085, "node_id": "MDQ6VXNlcjE5MzE2MDg1", "avatar_url": "https://avatars.githubusercontent.com/u/19316085?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrMeepster", "html_url": "https://github.com/DrMeepster", "followers_url": "https://api.github.com/users/DrMeepster/followers", "following_url": "https://api.github.com/users/DrMeepster/following{/other_user}", "gists_url": "https://api.github.com/users/DrMeepster/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrMeepster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrMeepster/subscriptions", "organizations_url": "https://api.github.com/users/DrMeepster/orgs", "repos_url": "https://api.github.com/users/DrMeepster/repos", "events_url": "https://api.github.com/users/DrMeepster/events{/privacy}", "received_events_url": "https://api.github.com/users/DrMeepster/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84b058ac47e2ea5f29887a4ed5ae286e37b22194", "url": "https://api.github.com/repos/rust-lang/rust/commits/84b058ac47e2ea5f29887a4ed5ae286e37b22194", "html_url": "https://github.com/rust-lang/rust/commit/84b058ac47e2ea5f29887a4ed5ae286e37b22194"}], "stats": {"total": 14, "additions": 0, "deletions": 14}, "files": [{"sha": "151243f29a92f46ee9137c1a2fa1b3c33d587eb9", "filename": "src/eval.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ec28f78f3c9c68a850ac943a6d2100266782dc1/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec28f78f3c9c68a850ac943a6d2100266782dc1/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=1ec28f78f3c9c68a850ac943a6d2100266782dc1", "patch": "@@ -149,10 +149,6 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n \n     // Setup first stack-frame\n     let entry_instance = ty::Instance::mono(tcx, entry_id);\n-    /*let entry_mir = ecx.load_mir(entry_instance.def, None)?;\n-    if main_mir.arg_count != 0 {\n-        bug!(\"main function must not take any arguments\");\n-    }*/\n \n     // First argument is constructed later, because its skipped if the entry function uses #[start]\n \n@@ -228,16 +224,6 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         argv\n     };\n \n-    /*let args: &[_] = match entry_type {\n-        EntryFnType::Main => {\n-            // First argument: pointer to `main()`.\n-            let main_ptr = ecx.memory.create_fn_alloc(FnVal::Instance(main_instance));\n-\n-            &[Scalar::from_pointer(main_ptr, &ecx).into(), argc.into(), argv]\n-        }\n-        EntryFnType::Start => &[argc.into(), argv],\n-    };*/\n-\n     // Return place (in static memory so that it does not count as leak).\n     let ret_place = ecx.allocate(ecx.machine.layouts.isize, MiriMemoryKind::Machine.into())?;\n     // Call start function."}]}