{"sha": "78d4ef19921a9358a2888f00c4fd4c6053c7301d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZDRlZjE5OTIxYTkzNThhMjg4OGYwMGM0ZmQ0YzYwNTNjNzMwMWQ=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-03T08:23:50Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-03T08:23:50Z"}, "message": "Drop rustc-serialize, use serde, update toml dependency", "tree": {"sha": "1c1d232693a028daf804d28593004415d69e6fc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c1d232693a028daf804d28593004415d69e6fc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78d4ef19921a9358a2888f00c4fd4c6053c7301d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78d4ef19921a9358a2888f00c4fd4c6053c7301d", "html_url": "https://github.com/rust-lang/rust/commit/78d4ef19921a9358a2888f00c4fd4c6053c7301d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78d4ef19921a9358a2888f00c4fd4c6053c7301d/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89f6aa29962affeeb7a336e7ab75f55775d7621b", "url": "https://api.github.com/repos/rust-lang/rust/commits/89f6aa29962affeeb7a336e7ab75f55775d7621b", "html_url": "https://github.com/rust-lang/rust/commit/89f6aa29962affeeb7a336e7ab75f55775d7621b"}], "stats": {"total": 183, "additions": 149, "deletions": 34}, "files": [{"sha": "79467071cec8d145d717172c889a49068a498f1f", "filename": "Cargo.lock", "status": "modified", "additions": 90, "deletions": 5, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/78d4ef19921a9358a2888f00c4fd4c6053c7301d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/78d4ef19921a9358a2888f00c4fd4c6053c7301d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=78d4ef19921a9358a2888f00c4fd4c6053c7301d", "patch": "@@ -11,12 +11,14 @@ dependencies = [\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntex_syntax 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -40,6 +42,11 @@ name = \"diff\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"dtoa\"\n+version = \"0.4.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"either\"\n version = \"1.1.0\"\n@@ -67,6 +74,11 @@ dependencies = [\n  \"either 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"itoa\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"kernel32-sys\"\n version = \"0.2.2\"\n@@ -99,6 +111,16 @@ name = \"multimap\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"num-traits\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"quote\"\n+version = \"0.3.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"regex\"\n version = \"0.2.1\"\n@@ -130,6 +152,41 @@ dependencies = [\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"serde\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[[package]]\n+name = \"serde_derive\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_derive_internals\"\n+version = \"0.15.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"serde_json\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"strings\"\n version = \"0.0.1\"\n@@ -138,6 +195,24 @@ dependencies = [\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"syn\"\n+version = \"0.11.11\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"synom\"\n+version = \"0.11.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"syntex_errors\"\n version = \"0.58.1\"\n@@ -200,10 +275,10 @@ dependencies = [\n \n [[package]]\n name = \"toml\"\n-version = \"0.2.1\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -258,27 +333,37 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n \"checksum bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1370e9fc2a6ae53aea8b7a5110edbd08836ed87c88736dfabccade1c2b44bff4\"\n \"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n+\"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n \"checksum either 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18785c1ba806c258137c937e44ada9ee7e69a37e3c72077542cd2f069d78562a\"\n \"checksum env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3856f1697098606fc6cb97a93de88ca3f3bc35bb878c725920e6e82ecf05e83\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum itertools 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4833d6978da405305126af4ac88569b5d71ff758581ce5a987dbfa3755f694fc\"\n+\"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum libc 0.2.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"babb8281da88cba992fa1f4ddec7d63ed96280a1a53ec9b919fd37b53d71e502\"\n \"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n \"checksum multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9223f4774d08e06185e44e555b9a7561243d387bac49c78a6205c42d6975fbf2\"\n+\"checksum num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1cbfa3781f3fe73dc05321bed52a06d2d491eaa764c52335cf4399f046ece99\"\n+\"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4278c17d0f6d62dfef0ab00028feb45bd7d2102843f80763474eeb1be8a10c01\"\n \"checksum regex-syntax 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9191b1f57603095f105d317e375d19b1c9c5c3185ea9633a99a6dcbed04457\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n+\"checksum serde 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b46a59dd63931010fdb1d88538513f3279090d88b5c22ef4fe8440cfffcc6e3\"\n+\"checksum serde_derive 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6c06b68790963518008b8ae0152d48be4bbbe77015d2c717f6282eea1824be9a\"\n+\"checksum serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"021c338d22c7e30f957a6ab7e388cb6098499dda9fd4ba1661ee074ca7a180d1\"\n+\"checksum serde_json 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1c62115693d0a9ed8c32d1c760f0fdbe7d4b05cb13c135b9b54137ac0d59fccb\"\n \"checksum strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"54f86446ab480b4f60782188f4f78886465c5793aee248cbb48b7fdc0d022420\"\n+\"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n+\"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n \"checksum syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"867cc5c2d7140ae7eaad2ae9e8bf39cb18a67ca651b7834f88d46ca98faadb9c\"\n \"checksum syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13ad4762fe52abc9f4008e85c4fb1b1fe3aa91ccb99ff4826a439c7c598e1047\"\n \"checksum syntex_syntax 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6e0e4dbae163dd98989464c23dd503161b338790640e11537686f2ef0f25c791\"\n \"checksum term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d168af3930b369cfe245132550579d47dfd873d69470755a19c2c6568dbbd989\"\n \"checksum thread-id 3.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4437c97558c70d129e40629a5b385b3fb1ffac301e63941335e4d354081ec14a\"\n \"checksum thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c85048c6260d17cf486ceae3282d9fb6b90be220bf5b28c400f5485ffc29f0c7\"\n-\"checksum toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"736b60249cb25337bc196faa43ee12c705e426f3d55c214d73a4e7be06f92cb4\"\n+\"checksum toml 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3063405db158de3dce8efad5fc89cf1baffb9501a3647dc9505ba109694ce31f\"\n \"checksum unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18127285758f0e2c6cf325bb3f3d138a12fee27de4f23e146cd6a179f26c2cf3\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f2ae5ddb18e1c92664717616dd9549dde73f539f01bd7b77c2edb2446bdff91\""}, {"sha": "568227869b8c66991722454b81f5ff97a588044e", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78d4ef19921a9358a2888f00c4fd4c6053c7301d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/78d4ef19921a9358a2888f00c4fd4c6053c7301d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=78d4ef19921a9358a2888f00c4fd4c6053c7301d", "patch": "@@ -19,8 +19,10 @@ default = [\"cargo-fmt\"]\n cargo-fmt = []\n \n [dependencies]\n-toml = \"0.2.1\"\n-rustc-serialize = \"0.3\"\n+toml = \"0.4\"\n+serde = \"1.0\"\n+serde_derive = \"1.0\"\n+serde_json = \"1.0\"\n unicode-segmentation = \"1.0.0\"\n regex = \"0.2\"\n term = \"0.4\""}, {"sha": "442cb9e78f7f8be3c48a9b5e5bff42738362ecbc", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/78d4ef19921a9358a2888f00c4fd4c6053c7301d/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d4ef19921a9358a2888f00c4fd4c6053c7301d/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=78d4ef19921a9358a2888f00c4fd4c6053c7301d", "patch": "@@ -14,7 +14,7 @@\n #![deny(warnings)]\n \n extern crate getopts;\n-extern crate rustc_serialize;\n+extern crate serde_json as json;\n \n use std::env;\n use std::io::Write;\n@@ -24,8 +24,9 @@ use std::str;\n use std::collections::HashSet;\n use std::iter::FromIterator;\n \n+use json::Value;\n+\n use getopts::{Options, Matches};\n-use rustc_serialize::json::Json;\n \n fn main() {\n     let exit_status = execute();\n@@ -184,8 +185,9 @@ fn get_targets(workspace_hitlist: WorkspaceHitlist) -> Result<Vec<Target>, std::\n         if output.status.success() {\n             // None of the unwraps should fail if output of `cargo read-manifest` is correct\n             let data = &String::from_utf8(output.stdout).unwrap();\n-            let json = Json::from_str(data).unwrap();\n-            let jtargets = json.find(\"targets\").unwrap().as_array().unwrap();\n+            let json: Value = json::from_str(data).unwrap();\n+            let json_obj = json.as_object().unwrap();\n+            let jtargets = json_obj.get(\"targets\").unwrap().as_array().unwrap();\n             for jtarget in jtargets {\n                 targets.push(target_from_json(jtarget));\n             }\n@@ -205,21 +207,24 @@ fn get_targets(workspace_hitlist: WorkspaceHitlist) -> Result<Vec<Target>, std::\n         .output()?;\n     if output.status.success() {\n         let data = &String::from_utf8(output.stdout).unwrap();\n-        let json = Json::from_str(data).unwrap();\n+        let json: Value = json::from_str(data).unwrap();\n+        let json_obj = json.as_object().unwrap();\n         let mut hitlist: HashSet<&String> = if workspace_hitlist != WorkspaceHitlist::All {\n             HashSet::from_iter(workspace_hitlist.get_some().unwrap())\n         } else {\n             HashSet::new() // Unused\n         };\n-        let members: Vec<&Json> = json.find(\"packages\")\n+        let members: Vec<&Value> = json_obj\n+            .get(\"packages\")\n             .unwrap()\n             .as_array()\n             .unwrap()\n             .into_iter()\n             .filter(|member| if workspace_hitlist == WorkspaceHitlist::All {\n                         true\n                     } else {\n-                        let member_name = member.find(\"name\").unwrap().as_string().unwrap();\n+                        let member_obj = member.as_object().unwrap();\n+                        let member_name = member_obj.get(\"name\").unwrap().as_str().unwrap();\n                         hitlist.take(&member_name.to_string()).is_some()\n                     })\n             .collect();\n@@ -230,7 +235,8 @@ fn get_targets(workspace_hitlist: WorkspaceHitlist) -> Result<Vec<Target>, std::\n                                                    hitlist.iter().next().unwrap())));\n         }\n         for member in members {\n-            let jtargets = member.find(\"targets\").unwrap().as_array().unwrap();\n+            let member_obj = member.as_object().unwrap();\n+            let jtargets = member_obj.get(\"targets\").unwrap().as_array().unwrap();\n             for jtarget in jtargets {\n                 targets.push(target_from_json(jtarget));\n             }\n@@ -242,11 +248,11 @@ fn get_targets(workspace_hitlist: WorkspaceHitlist) -> Result<Vec<Target>, std::\n \n }\n \n-fn target_from_json(jtarget: &Json) -> Target {\n+fn target_from_json(jtarget: &Value) -> Target {\n     let jtarget = jtarget.as_object().unwrap();\n-    let path = PathBuf::from(jtarget.get(\"src_path\").unwrap().as_string().unwrap());\n+    let path = PathBuf::from(jtarget.get(\"src_path\").unwrap().as_str().unwrap());\n     let kinds = jtarget.get(\"kind\").unwrap().as_array().unwrap();\n-    let kind = match kinds[0].as_string().unwrap() {\n+    let kind = match kinds[0].as_str().unwrap() {\n         \"bin\" => TargetKind::Bin,\n         \"lib\" | \"dylib\" | \"staticlib\" | \"cdylib\" | \"rlib\" => TargetKind::Lib,\n         \"test\" => TargetKind::Test,"}, {"sha": "f0f2d52930825f72e285002a881cca09731787fb", "filename": "src/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78d4ef19921a9358a2888f00c4fd4c6053c7301d/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d4ef19921a9358a2888f00c4fd4c6053c7301d/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=78d4ef19921a9358a2888f00c4fd4c6053c7301d", "patch": "@@ -210,7 +210,7 @@ impl ConfigHelpItem {\n \n macro_rules! create_config {\n     ($($i:ident: $ty:ty, $def:expr, $( $dstring:expr ),+ );+ $(;)*) => (\n-        #[derive(RustcDecodable, Clone)]\n+        #[derive(Deserialize, Clone)]\n         pub struct Config {\n             $(pub $i: $ty),+\n         }\n@@ -220,7 +220,7 @@ macro_rules! create_config {\n         // specity all properties of `Config`.\n         // We first parse into `ParsedConfig`, then create a default `Config`\n         // and overwrite the properties with corresponding values from `ParsedConfig`\n-        #[derive(RustcDecodable, Clone)]\n+        #[derive(Deserialize, Clone)]\n         pub struct ParsedConfig {\n             $(pub $i: Option<$ty>),+\n         }\n@@ -250,10 +250,10 @@ macro_rules! create_config {\n                         }\n                     }\n                 }\n-                match toml::decode(parsed) {\n-                    Some(parsed_config) =>\n+                match parsed.try_into() {\n+                    Ok(parsed_config) =>\n                         Ok(Config::default().fill_from_parsed_config(parsed_config)),\n-                    None => {\n+                    Err(_) => {\n                         err.push_str(\"Error: Decoding config file failed. \");\n                         err.push_str(\"Please check your config file.\\n\");\n                         Err(err)"}, {"sha": "2fad297a4dfd42d877bf8214fb196f87cf8d319f", "filename": "src/file_lines.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/78d4ef19921a9358a2888f00c4fd4c6053c7301d/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d4ef19921a9358a2888f00c4fd4c6053c7301d/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=78d4ef19921a9358a2888f00c4fd4c6053c7301d", "patch": "@@ -14,12 +14,12 @@ use std::{cmp, iter, path, str};\n \n use itertools::Itertools;\n use multimap::MultiMap;\n-use rustc_serialize::{self, json};\n+use serde_json as json;\n \n use codemap::LineRange;\n \n /// A range that is inclusive of both ends.\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, RustcDecodable)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Deserialize)]\n struct Range {\n     pub lo: usize,\n     pub hi: usize,\n@@ -177,14 +177,14 @@ impl str::FromStr for FileLines {\n     type Err = String;\n \n     fn from_str(s: &str) -> Result<FileLines, String> {\n-        let v: Vec<JsonSpan> = try!(json::decode(s).map_err(|e| e.to_string()));\n+        let v: Vec<JsonSpan> = try!(json::from_str(s).map_err(|e| e.to_string()));\n         let m = try!(v.into_iter().map(JsonSpan::into_tuple).collect());\n         Ok(FileLines::from_multimap(m))\n     }\n }\n \n // For JSON decoding.\n-#[derive(Clone, Debug, RustcDecodable)]\n+#[derive(Clone, Debug, Deserialize)]\n struct JsonSpan {\n     file: String,\n     range: (usize, usize),\n@@ -202,8 +202,10 @@ impl JsonSpan {\n \n // This impl is needed for inclusion in the `Config` struct. We don't have a toml representation\n // for `FileLines`, so it will just panic instead.\n-impl rustc_serialize::Decodable for FileLines {\n-    fn decode<D: rustc_serialize::Decoder>(_: &mut D) -> Result<Self, D::Error> {\n+impl<'de> ::serde::de::Deserialize<'de> for FileLines {\n+    fn deserialize<D>(_: D) -> Result<Self, D::Error>\n+        where D: ::serde::de::Deserializer<'de>\n+    {\n         panic!(\"FileLines cannot be deserialized from a project rustfmt.toml file: please \\\n                 specify it via the `--file-lines` option instead\");\n     }"}, {"sha": "6935f0f7acdf1fb582afed4ef835c2396235e939", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78d4ef19921a9358a2888f00c4fd4c6053c7301d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d4ef19921a9358a2888f00c4fd4c6053c7301d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=78d4ef19921a9358a2888f00c4fd4c6053c7301d", "patch": "@@ -15,9 +15,13 @@\n #[macro_use]\n extern crate log;\n \n+extern crate serde;\n+#[macro_use]\n+extern crate serde_derive;\n+extern crate serde_json;\n+\n extern crate syntex_syntax as syntax;\n extern crate syntex_errors as errors;\n-extern crate rustc_serialize;\n \n extern crate strings;\n "}, {"sha": "8648b8f2f579b5e6f5d9450ada60b61343b79724", "filename": "src/utils.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/78d4ef19921a9358a2888f00c4fd4c6053c7301d/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d4ef19921a9358a2888f00c4fd4c6053c7301d/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=78d4ef19921a9358a2888f00c4fd4c6053c7301d", "patch": "@@ -193,16 +193,32 @@ pub fn trim_newlines(input: &str) -> &str {\n #[macro_export]\n macro_rules! impl_enum_decodable {\n     ( $e:ident, $( $x:ident ),* ) => {\n-        impl ::rustc_serialize::Decodable for $e {\n-            fn decode<D: ::rustc_serialize::Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        impl<'de> ::serde::de::Deserialize<'de> for $e {\n+            fn deserialize<D>(d: D) -> Result<Self, D::Error>\n+                    where D: ::serde::de::Deserializer<'de> {\n                 use std::ascii::AsciiExt;\n-                let s = try!(d.read_str());\n+                use serde::{Deserializer};\n+                use serde::de::{Error, Visitor};\n+                use std::marker::PhantomData;\n+                use std::fmt;\n+                struct StringOnly<T>(PhantomData<T>);\n+                impl<'de, T> Visitor<'de> for StringOnly<T>\n+                        where T: Deserializer<'de> {\n+                    type Value = String;\n+                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+                        formatter.write_str(\"string\")\n+                    }\n+                    fn visit_str<E>(self, value :&str) -> Result<String, E> {\n+                        Ok(String::from(value))\n+                    }\n+                }\n+                let s = try!(d.deserialize_string(StringOnly::<D>(PhantomData)));\n                 $(\n                     if stringify!($x).eq_ignore_ascii_case(&s) {\n                       return Ok($e::$x);\n                     }\n                 )*\n-                Err(d.error(\"Bad variant\"))\n+                Err(<D as Deserializer<'de>>::Error::custom(\"Bad variant\"))\n             }\n         }\n "}]}