{"sha": "a856e57f6cc8ba8bb83c5abadce338f589df6b10", "node_id": "C_kwDOAAsO6NoAKGE4NTZlNTdmNmNjOGJhOGJiODNjNWFiYWRjZTMzOGY1ODlkZjZiMTA", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-07-26T16:51:55Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-08-03T13:17:26Z"}, "message": "Rustdoc-Json: Document HRTB's on DynTrait\n\nCloses #99118", "tree": {"sha": "c1fa74d37add887e29743cc070bb8cf434e435e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1fa74d37add887e29743cc070bb8cf434e435e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a856e57f6cc8ba8bb83c5abadce338f589df6b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a856e57f6cc8ba8bb83c5abadce338f589df6b10", "html_url": "https://github.com/rust-lang/rust/commit/a856e57f6cc8ba8bb83c5abadce338f589df6b10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a856e57f6cc8ba8bb83c5abadce338f589df6b10/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2143e48e36e48223e00fffed71acadaf5330f61a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2143e48e36e48223e00fffed71acadaf5330f61a", "html_url": "https://github.com/rust-lang/rust/commit/2143e48e36e48223e00fffed71acadaf5330f61a"}], "stats": {"total": 140, "additions": 91, "deletions": 49}, "files": [{"sha": "f5c089ce1e4bf13538e0786d41c6a1b4ae79f0c9", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a856e57f6cc8ba8bb83c5abadce338f589df6b10/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a856e57f6cc8ba8bb83c5abadce338f589df6b10/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=a856e57f6cc8ba8bb83c5abadce338f589df6b10", "patch": "@@ -244,7 +244,7 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         TraitAliasItem(t) => ItemEnum::TraitAlias(t.into_tcx(tcx)),\n         MethodItem(m, _) => ItemEnum::Method(from_function_method(m, true, header.unwrap(), tcx)),\n         TyMethodItem(m) => ItemEnum::Method(from_function_method(m, false, header.unwrap(), tcx)),\n-        ImplItem(i) => ItemEnum::Impl(i.into_tcx(tcx)),\n+        ImplItem(i) => ItemEnum::Impl((*i).into_tcx(tcx)),\n         StaticItem(s) => ItemEnum::Static(s.into_tcx(tcx)),\n         ForeignStaticItem(s) => ItemEnum::Static(s.into_tcx(tcx)),\n         ForeignTypeItem => ItemEnum::ForeignType,\n@@ -447,8 +447,8 @@ pub(crate) fn from_trait_bound_modifier(\n impl FromWithTcx<clean::Type> for Type {\n     fn from_tcx(ty: clean::Type, tcx: TyCtxt<'_>) -> Self {\n         use clean::Type::{\n-            Array, BareFunction, BorrowedRef, DynTrait, Generic, ImplTrait, Infer, Primitive,\n-            QPath, RawPointer, Slice, Tuple,\n+            Array, BareFunction, BorrowedRef, Generic, ImplTrait, Infer, Primitive, QPath,\n+            RawPointer, Slice, Tuple,\n         };\n \n         match ty {\n@@ -458,26 +458,10 @@ impl FromWithTcx<clean::Type> for Type {\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n                 param_names: Vec::new(),\n             },\n-            DynTrait(mut bounds, lt) => {\n-                let first_trait = bounds.remove(0).trait_;\n-\n-                Type::ResolvedPath {\n-                    name: first_trait.whole_name(),\n-                    id: from_item_id(first_trait.def_id().into(), tcx),\n-                    args: first_trait\n-                        .segments\n-                        .last()\n-                        .map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n-                    param_names: bounds\n-                        .into_iter()\n-                        .map(|t| {\n-                            clean::GenericBound::TraitBound(t, rustc_hir::TraitBoundModifier::None)\n-                        })\n-                        .chain(lt.map(clean::GenericBound::Outlives))\n-                        .map(|bound| bound.into_tcx(tcx))\n-                        .collect(),\n-                }\n-            }\n+            clean::Type::DynTrait(bounds, lt) => Type::DynTrait(DynTrait {\n+                lifetime: lt.map(|lt| lt.0.to_string()),\n+                traits: bounds.into_iter().map(|t| t.into_tcx(tcx)).collect(),\n+            }),\n             Generic(s) => Type::Generic(s.to_string()),\n             Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n@@ -568,10 +552,22 @@ impl FromWithTcx<clean::Trait> for Trait {\n     }\n }\n \n-impl FromWithTcx<Box<clean::Impl>> for Impl {\n-    fn from_tcx(impl_: Box<clean::Impl>, tcx: TyCtxt<'_>) -> Self {\n+impl FromWithTcx<clean::PolyTrait> for PolyTrait {\n+    fn from_tcx(\n+        clean::PolyTrait { trait_, generic_params }: clean::PolyTrait,\n+        tcx: TyCtxt<'_>,\n+    ) -> Self {\n+        PolyTrait {\n+            trait_: clean::Type::Path { path: trait_ }.into_tcx(tcx),\n+            generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+        }\n+    }\n+}\n+\n+impl FromWithTcx<clean::Impl> for Impl {\n+    fn from_tcx(impl_: clean::Impl, tcx: TyCtxt<'_>) -> Self {\n         let provided_trait_methods = impl_.provided_trait_methods(tcx);\n-        let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = *impl_;\n+        let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = impl_;\n         // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n         let trait_ = trait_.map(|path| clean::Type::Path { path }.into_tcx(tcx));\n         // FIXME: use something like ImplKind in JSON?"}, {"sha": "bd4ea98441d66d5c6eab5bcfcf1f69fb1253d08a", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a856e57f6cc8ba8bb83c5abadce338f589df6b10/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a856e57f6cc8ba8bb83c5abadce338f589df6b10/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=a856e57f6cc8ba8bb83c5abadce338f589df6b10", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 16;\n+pub const FORMAT_VERSION: u32 = 17;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -115,6 +115,35 @@ pub enum Visibility {\n     },\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+pub struct DynTrait {\n+    /// All the traits implemented. One of them is the vtable, and the rest must be auto traits.\n+    pub traits: Vec<PolyTrait>,\n+    /// The lifetime of the whole dyn object\n+    /// ```text\n+    /// dyn Debug + 'static\n+    ///             ^^^^^^^\n+    ///             |\n+    ///             this part\n+    /// ```\n+    pub lifetime: Option<String>,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+/// A trait and potential HRTBs\n+pub struct PolyTrait {\n+    #[serde(rename = \"trait\")]\n+    pub trait_: Type,\n+    /// Used for Higher-Rank Trait Bounds (HRTBs)\n+    /// ```text\n+    /// dyn for<'a> Fn() -> &'a i32\"\n+    ///     ^^^^^^^\n+    ///       |\n+    ///       this part\n+    /// ```\n+    pub generic_params: Vec<GenericParamDef>,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericArgs {\n@@ -395,7 +424,7 @@ pub enum WherePredicate {\n         type_: Type,\n         bounds: Vec<GenericBound>,\n         /// Used for Higher-Rank Trait Bounds (HRTBs)\n-        /// ```plain\n+        /// ```text\n         /// where for<'a> &'a T: Iterator,\"\n         ///       ^^^^^^^\n         ///       |\n@@ -420,7 +449,7 @@ pub enum GenericBound {\n         #[serde(rename = \"trait\")]\n         trait_: Type,\n         /// Used for Higher-Rank Trait Bounds (HRTBs)\n-        /// ```plain\n+        /// ```text\n         /// where F: for<'a, 'b> Fn(&'a u8, &'b u8)\n         ///          ^^^^^^^^^^^\n         ///          |\n@@ -458,6 +487,7 @@ pub enum Type {\n         args: Option<Box<GenericArgs>>,\n         param_names: Vec<GenericBound>,\n     },\n+    DynTrait(DynTrait),\n     /// Parameterized types\n     Generic(String),\n     /// Fixed-size numeric types (plus int/usize/float), char, arrays, slices, and tuples\n@@ -505,7 +535,7 @@ pub enum Type {\n pub struct FunctionPointer {\n     pub decl: FnDecl,\n     /// Used for Higher-Rank Trait Bounds (HRTBs)\n-    /// ```plain\n+    /// ```text\n     /// for<'c> fn(val: &'c i32) -> i32\n     /// ^^^^^^^\n     ///       |"}, {"sha": "c18b54d1fdf0ed18bba992190874850bed4e7a16", "filename": "src/test/rustdoc-json/type/dyn.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a856e57f6cc8ba8bb83c5abadce338f589df6b10/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a856e57f6cc8ba8bb83c5abadce338f589df6b10/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fdyn.rs?ref=a856e57f6cc8ba8bb83c5abadce338f589df6b10", "patch": "@@ -1,36 +1,49 @@\n // ignore-tidy-linelength\n+use std::fmt::Debug;\n \n-// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items[*]\" 2\n+// @count dyn.json \"$.index[*][?(@.name=='dyn')].inner.items[*]\" 3\n // @set sync_int_gen = - \"$.index[*][?(@.name=='SyncIntGen')].id\"\n-// @set ref_fn = - \"$.index[*][?(@.name=='RefFn')].id\"\n+// @set ref_fn       = - \"$.index[*][?(@.name=='RefFn')].id\"\n+// @set weird_order  = - \"$.index[*][?(@.name=='WeirdOrder')].id\"\n // @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $sync_int_gen\n // @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $ref_fn\n+// @has - \"$.index[*][?(@.name=='dyn')].inner.items[*]\" $weird_order\n \n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].kind\" \\\"typedef\\\"\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.kind\" \\\"resolved_path\\\"\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.name\" \\\"Box\\\"\n // @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.bindings\" []\n // @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args\" 1\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"resolved_path\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.name\" \\\"Fn\\\"\n-// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[*]\" 3\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[0].trait_bound.trait.inner.name\" \\\"Send\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[1].trait_bound.trait.inner.name\" \\\"Sync\\\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.param_names[2]\" \"{\\\"outlives\\\": \\\"'static\\\"}\"\n-// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.kind\" \\\"dyn_trait\\\"\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.lifetime\" \\\"\\'static\\\"\n+// @count - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[*]\" 3\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].generic_params\" []\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].generic_params\" []\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].generic_params\" []\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.inner.name\" '\"Send\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[2].trait.inner.name\" '\"Sync\"'\n+// @is    - \"$.index[*][?(@.name=='SyncIntGen')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.args\" '{\"parenthesized\": {\"inputs\": [],\"output\": {\"inner\": \"i32\",\"kind\": \"primitive\"}}}'\n pub type SyncIntGen = Box<dyn Fn() -> i32 + Send + Sync + 'static>;\n \n // @is - \"$.index[*][?(@.name=='RefFn')].kind\" \\\"typedef\\\"\n // @is - \"$.index[*][?(@.name=='RefFn')].inner.generics\" '{\"params\": [{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"}],\"where_predicates\": []}'\n // @is - \"$.index[*][?(@.name=='RefFn')].inner.type.kind\" '\"borrowed_ref\"'\n // @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.mutable\" 'false'\n // @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.lifetime\" \"\\\"'a\\\"\"\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.kind\" '\"resolved_path\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.name\" '\"Fn\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.kind\" '\"dyn_trait\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.lifetime\" null\n+// @count - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[*]\" 1\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.kind\" '\"resolved_path\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.inputs[0].kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.inputs[0].inner.lifetime\" \"\\\"'b\\\"\"\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.output.kind\" '\"borrowed_ref\"'\n+// @is - \"$.index[*][?(@.name=='RefFn')].inner.type.inner.type.inner.traits[0].trait.inner.args.parenthesized.output.inner.lifetime\" \"\\\"'b\\\"\"\n pub type RefFn<'a> = &'a dyn for<'b> Fn(&'b i32) -> &'b i32;\n+\n+// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[0].trait.inner.name\" '\"Send\"'\n+// @is    - \"$.index[*][?(@.name=='WeirdOrder')].inner.type.inner.args.angle_bracketed.args[0].type.inner.traits[1].trait.inner.name\" '\"Debug\"'\n+pub type WeirdOrder = Box<dyn Send + Debug>;"}, {"sha": "9311737be0fec0ead932028d4332be8e5b4b034d", "filename": "src/test/rustdoc-json/type/hrtb.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a856e57f6cc8ba8bb83c5abadce338f589df6b10/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a856e57f6cc8ba8bb83c5abadce338f589df6b10/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftype%2Fhrtb.rs?ref=a856e57f6cc8ba8bb83c5abadce338f589df6b10", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n \n // @has hrtb.json\n \n@@ -14,9 +15,11 @@ where\n // @is - \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n // @is - \"$.index[*][?(@.name=='dynfn')].inner.generics\" '{\"params\": [], \"where_predicates\": []}'\n // @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].kind\" '\"borrowed_ref\"'\n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.kind\" '\"resolved_path\"'\n-// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.name\" '\"Fn\"'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.kind\" '\"dyn_trait\"'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.lifetime\" null\n+// @count - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[*]\" 1\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].generic_params\" '[{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''a\"},{\"kind\": {\"lifetime\": {\"outlives\": []}},\"name\": \"'\\''b\"}]'\n+// @is - \"$.index[*][?(@.name=='dynfn')].inner.decl.inputs[0][1].inner.type.inner.traits[0].trait.inner.name\" '\"Fn\"'\n pub fn dynfn(f: &dyn for<'a, 'b> Fn(&'a i32, &'b i32)) {\n     let zero = 0;\n     f(&zero, &zero);"}]}