{"sha": "a3f05cec762948e68d2f5cc29003781f44f79820", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZjA1Y2VjNzYyOTQ4ZTY4ZDJmNWNjMjkwMDM3ODFmNDRmNzk4MjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2016-09-08T10:58:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-08T10:58:05Z"}, "message": "clean up `get_vtable`'s doc comment", "tree": {"sha": "9ecbcb730629b20c2c96e2fdf3517992f8c46937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ecbcb730629b20c2c96e2fdf3517992f8c46937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3f05cec762948e68d2f5cc29003781f44f79820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f05cec762948e68d2f5cc29003781f44f79820", "html_url": "https://github.com/rust-lang/rust/commit/a3f05cec762948e68d2f5cc29003781f44f79820", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3f05cec762948e68d2f5cc29003781f44f79820/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2", "html_url": "https://github.com/rust-lang/rust/commit/a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "ee2f24d21e07cb846e6f3ea6be5aae8bab081b2a", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f05cec762948e68d2f5cc29003781f44f79820/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f05cec762948e68d2f5cc29003781f44f79820/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=a3f05cec762948e68d2f5cc29003781f44f79820", "patch": "@@ -116,9 +116,11 @@ pub fn trans_object_shim<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n     llfn\n }\n \n-/// Creates a returns a dynamic vtable for the given type and vtable origin.\n+/// Creates a dynamic vtable for the given type and vtable origin.\n /// This is used only for objects.\n ///\n+/// The vtables are cached instead of created on every call.\n+///\n /// The `trait_ref` encodes the erased self type. Hence if we are\n /// making an object `Foo<Trait>` from a value of type `Foo<T>`, then\n /// `trait_ref` would map `T:Trait`."}]}