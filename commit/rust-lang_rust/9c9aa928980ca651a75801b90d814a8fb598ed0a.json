{"sha": "9c9aa928980ca651a75801b90d814a8fb598ed0a", "node_id": "C_kwDOAAsO6NoAKDljOWFhOTI4OTgwY2E2NTFhNzU4MDFiOTBkODE0YThmYjU5OGVkMGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T15:03:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T15:03:39Z"}, "message": "Auto merge of #9465 - Alexendoo:peekable-fp, r=flip1995\n\nFix `unused_peekable` closure and `f(&mut peekable)` false positives\n\nchangelog: Fix [`unused_peekable`] false positive when peeked in a closure or called as `f(&mut peekable)`\n\nThe `return`/`break` changes aren't part of the fix, they allow an earlier return in some cases. `break` is replaced with `return` for style purposes as they do the same thing in this case\n\nFixes #9456\nFixes #9462", "tree": {"sha": "0c1f005731a11889a30034623a768b4ecc321b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c1f005731a11889a30034623a768b4ecc321b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c9aa928980ca651a75801b90d814a8fb598ed0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9aa928980ca651a75801b90d814a8fb598ed0a", "html_url": "https://github.com/rust-lang/rust/commit/9c9aa928980ca651a75801b90d814a8fb598ed0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c9aa928980ca651a75801b90d814a8fb598ed0a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "826a8930e648b88484b15b9b568ebd5464c25dec", "url": "https://api.github.com/repos/rust-lang/rust/commits/826a8930e648b88484b15b9b568ebd5464c25dec", "html_url": "https://github.com/rust-lang/rust/commit/826a8930e648b88484b15b9b568ebd5464c25dec"}, {"sha": "86d18b50ed64fa5dd6313d595ad4c53d6eb610a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d18b50ed64fa5dd6313d595ad4c53d6eb610a2", "html_url": "https://github.com/rust-lang/rust/commit/86d18b50ed64fa5dd6313d595ad4c53d6eb610a2"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "13b08df16a50aa83baf90acc65d5383ed50610ac", "filename": "clippy_lints/src/unused_peekable.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9c9aa928980ca651a75801b90d814a8fb598ed0a/clippy_lints%2Fsrc%2Funused_peekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9aa928980ca651a75801b90d814a8fb598ed0a/clippy_lints%2Fsrc%2Funused_peekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_peekable.rs?ref=9c9aa928980ca651a75801b90d814a8fb598ed0a", "patch": "@@ -6,6 +6,7 @@ use rustc_hir::intravisit::{walk_expr, Visitor};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Block, Expr, ExprKind, HirId, Local, Node, PatKind, PathSegment, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::nested_filter::OnlyBodies;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -109,8 +110,14 @@ impl<'a, 'tcx> PeekableVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'tcx> Visitor<'_> for PeekableVisitor<'_, 'tcx> {\n-    fn visit_expr(&mut self, ex: &'_ Expr<'_>) {\n+impl<'tcx> Visitor<'tcx> for PeekableVisitor<'_, 'tcx> {\n+    type NestedFilter = OnlyBodies;\n+\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n+    }\n+\n+    fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n         if self.found_peek_call {\n             return;\n         }\n@@ -136,12 +143,11 @@ impl<'tcx> Visitor<'_> for PeekableVisitor<'_, 'tcx> {\n                                     return;\n                                 }\n \n-                                if args.iter().any(|arg| {\n-                                    matches!(arg.kind, ExprKind::Path(_)) && arg_is_mut_peekable(self.cx, arg)\n-                                }) {\n+                                if args.iter().any(|arg| arg_is_mut_peekable(self.cx, arg)) {\n                                     self.found_peek_call = true;\n-                                    return;\n                                 }\n+\n+                                return;\n                             },\n                             // Catch anything taking a Peekable mutably\n                             ExprKind::MethodCall(\n@@ -190,21 +196,21 @@ impl<'tcx> Visitor<'_> for PeekableVisitor<'_, 'tcx> {\n                     Node::Local(Local { init: Some(init), .. }) => {\n                         if arg_is_mut_peekable(self.cx, init) {\n                             self.found_peek_call = true;\n-                            return;\n                         }\n \n-                        break;\n+                        return;\n                     },\n-                    Node::Stmt(stmt) => match stmt.kind {\n-                        StmtKind::Expr(_) | StmtKind::Semi(_) => {},\n-                        _ => {\n-                            self.found_peek_call = true;\n-                            return;\n-                        },\n+                    Node::Stmt(stmt) => {\n+                        match stmt.kind {\n+                            StmtKind::Local(_) | StmtKind::Item(_) => self.found_peek_call = true,\n+                            StmtKind::Expr(_) | StmtKind::Semi(_) => {},\n+                        }\n+\n+                        return;\n                     },\n                     Node::Block(_) | Node::ExprField(_) => {},\n                     _ => {\n-                        break;\n+                        return;\n                     },\n                 }\n             }"}, {"sha": "7374dfdf92e87b5de8014c1cb27e01043cbcbe1b", "filename": "tests/ui/unused_peekable.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9c9aa928980ca651a75801b90d814a8fb598ed0a/tests%2Fui%2Funused_peekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c9aa928980ca651a75801b90d814a8fb598ed0a/tests%2Fui%2Funused_peekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_peekable.rs?ref=9c9aa928980ca651a75801b90d814a8fb598ed0a", "patch": "@@ -57,12 +57,22 @@ fn valid() {\n     impl PeekableConsumer {\n         fn consume(&self, _: Peekable<Empty<u32>>) {}\n         fn consume_mut_ref(&self, _: &mut Peekable<Empty<u32>>) {}\n+        fn consume_assoc(_: Peekable<Empty<u32>>) {}\n+        fn consume_assoc_mut_ref(_: &mut Peekable<Empty<u32>>) {}\n     }\n-\n     let peekable_consumer = PeekableConsumer;\n-    let mut passed_along_to_method = std::iter::empty::<u32>().peekable();\n-    peekable_consumer.consume_mut_ref(&mut passed_along_to_method);\n-    peekable_consumer.consume(passed_along_to_method);\n+\n+    let peekable = std::iter::empty::<u32>().peekable();\n+    peekable_consumer.consume(peekable);\n+\n+    let mut peekable = std::iter::empty::<u32>().peekable();\n+    peekable_consumer.consume_mut_ref(&mut peekable);\n+\n+    let peekable = std::iter::empty::<u32>().peekable();\n+    PeekableConsumer::consume_assoc(peekable);\n+\n+    let mut peekable = std::iter::empty::<u32>().peekable();\n+    PeekableConsumer::consume_assoc_mut_ref(&mut peekable);\n \n     // `peek` called in another block\n     let mut peekable_in_block = std::iter::empty::<u32>().peekable();\n@@ -141,4 +151,19 @@ fn valid() {\n     {\n         peekable_last_expr.peek();\n     }\n+\n+    let mut peek_in_closure = std::iter::empty::<u32>().peekable();\n+    let _ = || {\n+        let _ = peek_in_closure.peek();\n+    };\n+\n+    trait PeekTrait {}\n+    impl<I> PeekTrait for Peekable<I> where I: Iterator {}\n+\n+    let mut peekable = std::iter::empty::<u32>().peekable();\n+    let _dyn = &mut peekable as &mut dyn PeekTrait;\n+\n+    fn takes_dyn(_: &mut dyn PeekTrait) {}\n+    let mut peekable = std::iter::empty::<u32>().peekable();\n+    takes_dyn(&mut peekable);\n }"}]}