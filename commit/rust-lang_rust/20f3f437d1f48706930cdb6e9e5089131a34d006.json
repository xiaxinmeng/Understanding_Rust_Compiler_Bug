{"sha": "20f3f437d1f48706930cdb6e9e5089131a34d006", "node_id": "C_kwDOAAsO6NoAKDIwZjNmNDM3ZDFmNDg3MDY5MzBjZGI2ZTllNTA4OTEzMWEzNGQwMDY", "commit": {"author": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-22T05:52:24Z"}, "committer": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-22T05:52:24Z"}, "message": "Fixes #109436: add parentheses properly", "tree": {"sha": "c61d3503b1bb47057980db601e0f7067ab8af184", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c61d3503b1bb47057980db601e0f7067ab8af184"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f3f437d1f48706930cdb6e9e5089131a34d006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f3f437d1f48706930cdb6e9e5089131a34d006", "html_url": "https://github.com/rust-lang/rust/commit/20f3f437d1f48706930cdb6e9e5089131a34d006", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f3f437d1f48706930cdb6e9e5089131a34d006/comments", "author": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db9c061d387a66ab16a90ec5a1b90adf216e2da", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db9c061d387a66ab16a90ec5a1b90adf216e2da", "html_url": "https://github.com/rust-lang/rust/commit/1db9c061d387a66ab16a90ec5a1b90adf216e2da"}], "stats": {"total": 63, "additions": 56, "deletions": 7}, "files": [{"sha": "eb2a87100d3128d7661d07c6587919d2b24c2875", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/20f3f437d1f48706930cdb6e9e5089131a34d006/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f3f437d1f48706930cdb6e9e5089131a34d006/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=20f3f437d1f48706930cdb6e9e5089131a34d006", "patch": "@@ -1358,6 +1358,34 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {\n+                        let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n+                        let sugg_prefix = format!(\"&{}\", if is_mut { \"mut \" } else { \"\" });\n+                        let sugg_msg = &format!(\n+                            \"consider{} borrowing here\",\n+                            if is_mut { \" mutably\" } else { \"\" }\n+                        );\n+\n+                        // Issue #109436, we need to add parentheses properly for method calls\n+                        // for example, `foo.into()` should be `(&foo).into()`\n+                        if let Ok(snippet) = self\n+                            .tcx\n+                            .sess\n+                            .source_map()\n+                            .span_to_snippet(self.tcx.sess.source_map().next_point(span))\n+                        {\n+                            if snippet == \".\" {\n+                                err.multipart_suggestion_verbose(\n+                                    sugg_msg,\n+                                    vec![\n+                                        (span.shrink_to_lo(), format!(\"({}\", sugg_prefix)),\n+                                        (span.shrink_to_hi(), \")\".to_string()),\n+                                    ],\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                                return true;\n+                            }\n+                        }\n+\n                         // Issue #104961, we need to add parentheses properly for compond expressions\n                         // for example, `x.starts_with(\"hi\".to_string() + \"you\")`\n                         // should be `x.starts_with(&(\"hi\".to_string() + \"you\"))`\n@@ -1374,14 +1402,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             _ => false,\n                         };\n \n-                        let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n                         let span = if needs_parens { span } else { span.shrink_to_lo() };\n-                        let sugg_prefix = format!(\"&{}\", if is_mut { \"mut \" } else { \"\" });\n-                        let sugg_msg = &format!(\n-                            \"consider{} borrowing here\",\n-                            if is_mut { \" mutably\" } else { \"\" }\n-                        );\n-\n                         let suggestions = if !needs_parens {\n                             vec![(span.shrink_to_lo(), format!(\"{}\", sugg_prefix))]\n                         } else {"}, {"sha": "e45ee5991db288c02b12b959b8b4fb3872cc3e3e", "filename": "tests/ui/suggestions/issue-109436.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20f3f437d1f48706930cdb6e9e5089131a34d006/tests%2Fui%2Fsuggestions%2Fissue-109436.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f3f437d1f48706930cdb6e9e5089131a34d006/tests%2Fui%2Fsuggestions%2Fissue-109436.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109436.rs?ref=20f3f437d1f48706930cdb6e9e5089131a34d006", "patch": "@@ -0,0 +1,13 @@\n+struct Foo;\n+struct Bar;\n+\n+impl From<&Foo> for Bar {\n+    fn from(foo: &Foo) -> Bar {\n+        Bar\n+    }\n+}\n+\n+fn main() {\n+    let foo = Foo;\n+    let b: Bar = foo.into(); //~ ERROR E0277\n+}"}, {"sha": "48518b33d12ac36c36afbe8c8cd7459db83a760a", "filename": "tests/ui/suggestions/issue-109436.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/20f3f437d1f48706930cdb6e9e5089131a34d006/tests%2Fui%2Fsuggestions%2Fissue-109436.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20f3f437d1f48706930cdb6e9e5089131a34d006/tests%2Fui%2Fsuggestions%2Fissue-109436.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109436.stderr?ref=20f3f437d1f48706930cdb6e9e5089131a34d006", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `Foo: Into<_>` is not satisfied\n+  --> $DIR/issue-109436.rs:12:22\n+   |\n+LL |     let b: Bar = foo.into();\n+   |                      ^^^^ the trait `~const Into<_>` is not implemented for `Foo`\n+   |\n+   = note: required for `Foo` to implement `Into<Bar>`\n+help: consider borrowing here\n+   |\n+LL |     let b: Bar = (&foo).into();\n+   |                  ++   +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}