{"sha": "6aee1e2a67d0608257a1087477e11e5b37e48d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZWUxZTJhNjdkMDYwODI1N2ExMDg3NDc3ZTExZTViMzdlNDhkODc=", "commit": {"author": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2016-07-24T07:27:23Z"}, "committer": {"name": "Cameron Hart", "email": "cameron.hart@gmail.com", "date": "2016-07-24T08:44:08Z"}, "message": "Tidy ups for code gen options help\n\nRemove duplication code gen options and updated help to reflect\nchanges.", "tree": {"sha": "94b944f87805bec6304ec60cccccf2a90611205e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94b944f87805bec6304ec60cccccf2a90611205e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6aee1e2a67d0608257a1087477e11e5b37e48d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6aee1e2a67d0608257a1087477e11e5b37e48d87", "html_url": "https://github.com/rust-lang/rust/commit/6aee1e2a67d0608257a1087477e11e5b37e48d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6aee1e2a67d0608257a1087477e11e5b37e48d87/comments", "author": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitshifter", "id": 135700, "node_id": "MDQ6VXNlcjEzNTcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/135700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitshifter", "html_url": "https://github.com/bitshifter", "followers_url": "https://api.github.com/users/bitshifter/followers", "following_url": "https://api.github.com/users/bitshifter/following{/other_user}", "gists_url": "https://api.github.com/users/bitshifter/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitshifter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitshifter/subscriptions", "organizations_url": "https://api.github.com/users/bitshifter/orgs", "repos_url": "https://api.github.com/users/bitshifter/repos", "events_url": "https://api.github.com/users/bitshifter/events{/privacy}", "received_events_url": "https://api.github.com/users/bitshifter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87ed467077703ccada419c8b4cf183eed60467c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ed467077703ccada419c8b4cf183eed60467c7", "html_url": "https://github.com/rust-lang/rust/commit/87ed467077703ccada419c8b4cf183eed60467c7"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "ed14c1e641723d886c96aab700e3fefc83563ff0", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6aee1e2a67d0608257a1087477e11e5b37e48d87/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aee1e2a67d0608257a1087477e11e5b37e48d87/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6aee1e2a67d0608257a1087477e11e5b37e48d87", "patch": "@@ -604,9 +604,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     lto: bool = (false, parse_bool,\n         \"perform LLVM link-time optimizations\"),\n     target_cpu: Option<String> = (None, parse_opt_string,\n-        \"select target processor (llc -mcpu=help for details)\"),\n+        \"select target processor (rustc --print target-cpus for details)\"),\n     target_feature: String = (\"\".to_string(), parse_string,\n-        \"target specific attributes (llc -mattr=help for details)\"),\n+        \"target specific attributes (rustc --print target-features for details)\"),\n     passes: Vec<String> = (Vec::new(), parse_list,\n         \"a list of extra LLVM passes to run (space separated)\"),\n     llvm_args: Vec<String> = (Vec::new(), parse_list,\n@@ -630,9 +630,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     no_redzone: Option<bool> = (None, parse_opt_bool,\n         \"disable the use of the redzone\"),\n     relocation_model: Option<String> = (None, parse_opt_string,\n-         \"choose the relocation model to use (llc -relocation-model for details)\"),\n+         \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n     code_model: Option<String> = (None, parse_opt_string,\n-         \"choose the code model to use (llc -code-model for details)\"),\n+         \"choose the code model to use (rustc --print code-models for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list,\n          \"metadata to mangle symbol names with\"),\n     extra_filename: String = (\"\".to_string(), parse_string,\n@@ -993,7 +993,8 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                  \"[asm|llvm-bc|llvm-ir|obj|link|dep-info]\"),\n         opt::multi_s(\"\", \"print\", \"Comma separated list of compiler information to \\\n                                print on stdout\",\n-                 \"[crate-name|file-names|sysroot|cfg|target-list]\"),\n+                 \"[crate-name|file-names|sysroot|cfg|target-list|target-cpus|\\\n+                   target-features|relocation-models|code-models]\"),\n         opt::flagmulti_s(\"g\",  \"\",  \"Equivalent to -C debuginfo=2\"),\n         opt::flagmulti_s(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n         opt::opt_s(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),"}, {"sha": "f50ea9af493e500a29576eeb7e2a145780f8fb4f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6aee1e2a67d0608257a1087477e11e5b37e48d87/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aee1e2a67d0608257a1087477e11e5b37e48d87/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6aee1e2a67d0608257a1087477e11e5b37e48d87", "patch": "@@ -69,7 +69,7 @@ use pretty::{PpMode, UserIdentifiedItem};\n use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n use rustc_trans::back::link;\n-use rustc_trans::back::write::create_target_machine;\n+use rustc_trans::back::write::{create_target_machine, RELOC_MODEL_ARGS, CODE_GEN_MODEL_ARGS};\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n@@ -676,19 +676,18 @@ impl RustcDefaultCalls {\n                     unsafe { llvm::LLVMRustPrintTargetFeatures(tm); }\n                 }\n                 PrintRequest::RelocationModels => {\n-                    println!(\"Available relocation models:\\n\");\n-                    println!(\"    pic\");\n-                    println!(\"    static\");\n-                    println!(\"    default\");\n-                    println!(\"    dynamic-no-pic\\n\");\n+                    println!(\"Available relocation models:\");\n+                    for &(name, _) in RELOC_MODEL_ARGS.iter() {\n+                        println!(\"    {}\", name);\n+                    }\n+                    println!(\"\");\n                 }\n                 PrintRequest::CodeModels => {\n-                    println!(\"Available code models:\\n\");\n-                    println!(\"    default\");\n-                    println!(\"    small\");\n-                    println!(\"    kernel\");\n-                    println!(\"    medium\");\n-                    println!(\"    large\\n\");\n+                    println!(\"Available code models:\");\n+                    for &(name, _) in CODE_GEN_MODEL_ARGS.iter(){\n+                        println!(\"    {}\", name);\n+                    }\n+                    println!(\"\");\n                 }\n             }\n         }"}, {"sha": "422e3d436b42994fcc67918fa2f5144c39f8b1ac", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6aee1e2a67d0608257a1087477e11e5b37e48d87/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6aee1e2a67d0608257a1087477e11e5b37e48d87/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=6aee1e2a67d0608257a1087477e11e5b37e48d87", "patch": "@@ -33,6 +33,21 @@ use std::sync::mpsc::channel;\n use std::thread;\n use libc::{c_uint, c_void};\n \n+pub const RELOC_MODEL_ARGS : [(&'static str, llvm::RelocMode); 4] = [\n+    (\"pic\", llvm::RelocPIC),\n+    (\"static\", llvm::RelocStatic),\n+    (\"default\", llvm::RelocDefault),\n+    (\"dynamic-no-pic\", llvm::RelocDynamicNoPic),\n+];\n+\n+pub const CODE_GEN_MODEL_ARGS : [(&'static str, llvm::CodeGenModel); 5] = [\n+    (\"default\", llvm::CodeModelDefault),\n+    (\"small\", llvm::CodeModelSmall),\n+    (\"kernel\", llvm::CodeModelKernel),\n+    (\"medium\", llvm::CodeModelMedium),\n+    (\"large\", llvm::CodeModelLarge),\n+];\n+\n pub fn llvm_err(handler: &errors::Handler, msg: String) -> ! {\n     match llvm::last_error() {\n         Some(err) => panic!(handler.fatal(&format!(\"{}: {}\", msg, err))),\n@@ -156,11 +171,9 @@ pub fn create_target_machine(sess: &Session) -> TargetMachineRef {\n         Some(ref s) => &s[..],\n         None => &sess.target.target.options.relocation_model[..],\n     };\n-    let reloc_model = match reloc_model_arg {\n-        \"pic\" => llvm::RelocPIC,\n-        \"static\" => llvm::RelocStatic,\n-        \"default\" => llvm::RelocDefault,\n-        \"dynamic-no-pic\" => llvm::RelocDynamicNoPic,\n+    let reloc_model = match RELOC_MODEL_ARGS.iter().find(\n+        |&&arg| arg.0 == reloc_model_arg) {\n+        Some(x) => x.1,\n         _ => {\n             sess.err(&format!(\"{:?} is not a valid relocation mode\",\n                              sess.opts\n@@ -186,12 +199,9 @@ pub fn create_target_machine(sess: &Session) -> TargetMachineRef {\n         None => &sess.target.target.options.code_model[..],\n     };\n \n-    let code_model = match code_model_arg {\n-        \"default\" => llvm::CodeModelDefault,\n-        \"small\" => llvm::CodeModelSmall,\n-        \"kernel\" => llvm::CodeModelKernel,\n-        \"medium\" => llvm::CodeModelMedium,\n-        \"large\" => llvm::CodeModelLarge,\n+    let code_model = match CODE_GEN_MODEL_ARGS.iter().find(\n+        |&&arg| arg.0 == code_model_arg) {\n+        Some(x) => x.1,\n         _ => {\n             sess.err(&format!(\"{:?} is not a valid code model\",\n                              sess.opts"}]}