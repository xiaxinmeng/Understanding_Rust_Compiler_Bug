{"sha": "e6a9b2ce6878f7944f8b414d511afdb5240965b0", "node_id": "C_kwDOAAsO6NoAKGU2YTliMmNlNjg3OGY3OTQ0ZjhiNDE0ZDUxMWFmZGI1MjQwOTY1YjA", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-03T23:28:41Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-10T19:36:42Z"}, "message": "Update Miri for detecting uninitialized numbers\n\nThis commit adds a `-Zmiri-check-number-initialization` flag to check\nthat integers and floats are initialized.\n\nThis commit also changes some shims to write at type `MaybeUninit<...>`\nin order to prevent spurious errors from the uninit check.", "tree": {"sha": "3230595d4c86f4e11c83cdf8af2b6fd0b6ade544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3230595d4c86f4e11c83cdf8af2b6fd0b6ade544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6a9b2ce6878f7944f8b414d511afdb5240965b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a9b2ce6878f7944f8b414d511afdb5240965b0", "html_url": "https://github.com/rust-lang/rust/commit/e6a9b2ce6878f7944f8b414d511afdb5240965b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6a9b2ce6878f7944f8b414d511afdb5240965b0/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2c9ee17e64c89b1dd89c5970f106f3f74416cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2c9ee17e64c89b1dd89c5970f106f3f74416cc", "html_url": "https://github.com/rust-lang/rust/commit/3f2c9ee17e64c89b1dd89c5970f106f3f74416cc"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "cf32e6332269068aa92fdb6a374316a57b88445c", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6a9b2ce6878f7944f8b414d511afdb5240965b0/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a9b2ce6878f7944f8b414d511afdb5240965b0/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=e6a9b2ce6878f7944f8b414d511afdb5240965b0", "patch": "@@ -313,6 +313,9 @@ fn main() {\n                 \"-Zmiri-symbolic-alignment-check\" => {\n                     miri_config.check_alignment = miri::AlignmentCheck::Symbolic;\n                 }\n+                \"-Zmiri-check-number-validity\" => {\n+                    miri_config.check_number_validity = true;\n+                }\n                 \"-Zmiri-disable-abi-check\" => {\n                     miri_config.check_abi = false;\n                 }"}, {"sha": "ac32af30c1de3507115e507813062f12d959c506", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e6a9b2ce6878f7944f8b414d511afdb5240965b0/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a9b2ce6878f7944f8b414d511afdb5240965b0/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=e6a9b2ce6878f7944f8b414d511afdb5240965b0", "patch": "@@ -66,6 +66,8 @@ pub struct MiriConfig {\n     pub stacked_borrows: bool,\n     /// Controls alignment checking.\n     pub check_alignment: AlignmentCheck,\n+    /// Controls integer and float validity (e.g., initialization) checking.\n+    pub check_number_validity: bool,\n     /// Controls function [ABI](Abi) checking.\n     pub check_abi: bool,\n     /// Action for an op requiring communication with the host.\n@@ -104,6 +106,7 @@ impl Default for MiriConfig {\n             validate: true,\n             stacked_borrows: true,\n             check_alignment: AlignmentCheck::Int,\n+            check_number_validity: false,\n             check_abi: true,\n             isolated_op: IsolatedOp::Reject(RejectOpWith::Abort),\n             ignore_leaks: false,"}, {"sha": "0ead28b36c75cf0d4cdbb4bc0b2a4917d583ce6d", "filename": "src/machine.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6a9b2ce6878f7944f8b414d511afdb5240965b0/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a9b2ce6878f7944f8b414d511afdb5240965b0/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=e6a9b2ce6878f7944f8b414d511afdb5240965b0", "patch": "@@ -304,6 +304,9 @@ pub struct Evaluator<'mir, 'tcx> {\n     /// Whether to enforce the validity invariant.\n     pub(crate) validate: bool,\n \n+    /// Whether to enforce validity (e.g., initialization) of integers and floats.\n+    pub(crate) enforce_number_validity: bool,\n+\n     /// Whether to enforce [ABI](Abi) of function calls.\n     pub(crate) enforce_abi: bool,\n \n@@ -356,6 +359,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             tls: TlsData::default(),\n             isolated_op: config.isolated_op,\n             validate: config.validate,\n+            enforce_number_validity: config.check_number_validity,\n             enforce_abi: config.check_abi,\n             file_handler: Default::default(),\n             dir_handler: Default::default(),\n@@ -426,6 +430,11 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         ecx.machine.validate\n     }\n \n+    #[inline(always)]\n+    fn enforce_number_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n+        ecx.machine.enforce_number_validity\n+    }\n+\n     #[inline(always)]\n     fn enforce_abi(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         ecx.machine.enforce_abi"}, {"sha": "606f58a207e568b8f921c74376e80f531dcb1237", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e6a9b2ce6878f7944f8b414d511afdb5240965b0/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a9b2ce6878f7944f8b414d511afdb5240965b0/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=e6a9b2ce6878f7944f8b414d511afdb5240965b0", "patch": "@@ -1,5 +1,8 @@\n use std::time::SystemTime;\n \n+use rustc_hir::LangItem;\n+use rustc_middle::ty::{layout::TyAndLayout, query::TyCtxtAt, subst::Subst, Ty};\n+\n use crate::*;\n use thread::Time;\n \n@@ -44,7 +47,7 @@ fn mutexattr_set_kind<'mir, 'tcx: 'mir>(\n     attr_op: &OpTy<'tcx, Tag>,\n     kind: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n-    ecx.write_scalar_at_offset(attr_op, 0, kind, ecx.machine.layouts.i32)\n+    ecx.write_scalar_at_offset(attr_op, 0, kind, layout_of_maybe_uninit(ecx.tcx, ecx.tcx.types.i32))\n }\n \n // pthread_mutex_t is between 24 and 48 bytes, depending on the platform.\n@@ -79,7 +82,7 @@ fn mutex_set_kind<'mir, 'tcx: 'mir>(\n         mutex_op,\n         offset,\n         kind,\n-        ecx.machine.layouts.i32,\n+        layout_of_maybe_uninit(ecx.tcx, ecx.tcx.types.i32),\n         AtomicWriteOp::Relaxed,\n     )\n }\n@@ -100,7 +103,7 @@ fn mutex_set_id<'mir, 'tcx: 'mir>(\n         mutex_op,\n         4,\n         id,\n-        ecx.machine.layouts.u32,\n+        layout_of_maybe_uninit(ecx.tcx, ecx.tcx.types.u32),\n         AtomicWriteOp::Relaxed,\n     )\n }\n@@ -144,7 +147,7 @@ fn rwlock_set_id<'mir, 'tcx: 'mir>(\n         rwlock_op,\n         4,\n         id,\n-        ecx.machine.layouts.u32,\n+        layout_of_maybe_uninit(ecx.tcx, ecx.tcx.types.u32),\n         AtomicWriteOp::Relaxed,\n     )\n }\n@@ -211,7 +214,7 @@ fn cond_set_id<'mir, 'tcx: 'mir>(\n         cond_op,\n         4,\n         id,\n-        ecx.machine.layouts.u32,\n+        layout_of_maybe_uninit(ecx.tcx, ecx.tcx.types.u32),\n         AtomicWriteOp::Relaxed,\n     )\n }\n@@ -244,7 +247,12 @@ fn cond_set_clock_id<'mir, 'tcx: 'mir>(\n     cond_op: &OpTy<'tcx, Tag>,\n     clock_id: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n-    ecx.write_scalar_at_offset(cond_op, 8, clock_id, ecx.machine.layouts.i32)\n+    ecx.write_scalar_at_offset(\n+        cond_op,\n+        8,\n+        clock_id,\n+        layout_of_maybe_uninit(ecx.tcx, ecx.tcx.types.i32),\n+    )\n }\n \n /// Try to reacquire the mutex associated with the condition variable after we\n@@ -788,3 +796,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(0)\n     }\n }\n+\n+fn layout_of_maybe_uninit<'tcx>(tcx: TyCtxtAt<'tcx>, param: Ty<'tcx>) -> TyAndLayout<'tcx> {\n+    let def_id = tcx.require_lang_item(LangItem::MaybeUninit, None);\n+    let def_ty = tcx.type_of(def_id);\n+    let ty = def_ty.subst(*tcx, &[param.into()]);\n+\n+    let param_env = tcx.param_env(def_id);\n+    tcx.layout_of(param_env.and(ty)).unwrap()\n+}"}]}