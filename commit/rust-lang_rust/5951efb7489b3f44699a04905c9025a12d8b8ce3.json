{"sha": "5951efb7489b3f44699a04905c9025a12d8b8ce3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NTFlZmI3NDg5YjNmNDQ2OTlhMDQ5MDVjOTAyNWExMmQ4YjhjZTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-18T14:22:29Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-18T14:22:29Z"}, "message": "Implement int casts", "tree": {"sha": "10ac2877098dafd9c60fd64915f4651649e667b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10ac2877098dafd9c60fd64915f4651649e667b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5951efb7489b3f44699a04905c9025a12d8b8ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5951efb7489b3f44699a04905c9025a12d8b8ce3", "html_url": "https://github.com/rust-lang/rust/commit/5951efb7489b3f44699a04905c9025a12d8b8ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5951efb7489b3f44699a04905c9025a12d8b8ce3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f52727b8e65ab15a8e12a3927ff3855e2922eda7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52727b8e65ab15a8e12a3927ff3855e2922eda7", "html_url": "https://github.com/rust-lang/rust/commit/f52727b8e65ab15a8e12a3927ff3855e2922eda7"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "70ca09187699fdb9e32630ff24da68a7a27d2cea", "filename": "Readme.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5951efb7489b3f44699a04905c9025a12d8b8ce3/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/5951efb7489b3f44699a04905c9025a12d8b8ce3/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=5951efb7489b3f44699a04905c9025a12d8b8ce3", "patch": "@@ -37,7 +37,6 @@ $ ./build.sh\n * [ ] Checked binops\n * [ ] Statics\n * [ ] Drop glue\n-* [ ] Ints cast\n \n * [ ] Building libraries\n * [ ] Other call abi's"}, {"sha": "ba285d38bc9cec551f630a7bf8b5994602b2e936", "filename": "example.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5951efb7489b3f44699a04905c9025a12d8b8ce3/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5951efb7489b3f44699a04905c9025a12d8b8ce3/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=5951efb7489b3f44699a04905c9025a12d8b8ce3", "patch": "@@ -9,6 +9,14 @@ trait Sized {}\n unsafe trait Copy {}\n \n unsafe impl Copy for u8 {}\n+unsafe impl Copy for u16 {}\n+unsafe impl Copy for u32 {}\n+unsafe impl Copy for u64 {}\n+unsafe impl Copy for usize {}\n+unsafe impl Copy for i8 {}\n+unsafe impl Copy for i16 {}\n+unsafe impl Copy for i32 {}\n+unsafe impl Copy for isize {}\n unsafe impl<'a, T: ?Sized> Copy for &'a T {}\n unsafe impl<T: ?Sized> Copy for *const T {}\n \n@@ -113,3 +121,16 @@ fn cast_ref_to_raw_ptr(abc: &u8) -> *const u8 {\n fn cmp_raw_ptr(a: *const u8, b: *const u8) -> bool {\n     a == b\n }\n+\n+fn int_cast(a: u16, b: i16) -> (u8, u16, u32, usize, i8, i16, i32, isize) {\n+    (\n+        a as u8,\n+        a as u16,\n+        a as u32,\n+        a as usize,\n+        a as i8,\n+        a as i16,\n+        a as i32,\n+        a as isize,\n+    )\n+}"}, {"sha": "33bb918a8a846dedf360cc7cf5c6caea3b6fc4e9", "filename": "src/base.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5951efb7489b3f44699a04905c9025a12d8b8ce3/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5951efb7489b3f44699a04905c9025a12d8b8ce3/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=5951efb7489b3f44699a04905c9025a12d8b8ce3", "patch": "@@ -374,17 +374,29 @@ fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, stmt: &Statement<'tcx\n                     let layout = fx.layout_of(ty);\n                     lval.write_cvalue(fx, operand.unchecked_cast_to(layout));\n                 }\n-                Rvalue::Cast(CastKind::Misc, operand, ty) => {\n+                Rvalue::Cast(CastKind::Misc, operand, to_ty) => {\n                     let operand = trans_operand(fx, operand);\n-                    match (&operand.layout().ty.sty, &ty.sty) {\n+                    let from_ty = operand.layout().ty;\n+                    match (&from_ty.sty, &to_ty.sty) {\n                         (TypeVariants::TyRef(..), TypeVariants::TyRef(..)) |\n                         (TypeVariants::TyRef(..), TypeVariants::TyRawPtr(..)) |\n                         (TypeVariants::TyRawPtr(..), TypeVariants::TyRef(..)) |\n                         (TypeVariants::TyRawPtr(..), TypeVariants::TyRawPtr(..)) => {\n-                            let layout = fx.layout_of(ty);\n-                            lval.write_cvalue(fx, operand.unchecked_cast_to(layout));\n+                            lval.write_cvalue(fx, operand.unchecked_cast_to(dest_layout));\n                         }\n-                        _ => unimplemented!(\"rval misc {:?} {:?}\", operand, ty),\n+                        (TypeVariants::TyUint(_), TypeVariants::TyInt(_)) |\n+                        (TypeVariants::TyUint(_), TypeVariants::TyUint(_)) => {\n+                            let from = operand.load_value(fx);\n+                            let res = ::common::cton_intcast(fx, from, from_ty, to_ty, false);\n+                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n+                        }\n+                        (TypeVariants::TyInt(_), TypeVariants::TyInt(_)) |\n+                        (TypeVariants::TyInt(_), TypeVariants::TyUint(_)) => {\n+                            let from = operand.load_value(fx);\n+                            let res = ::common::cton_intcast(fx, from, from_ty, to_ty, true);\n+                            lval.write_cvalue(fx, CValue::ByVal(res, dest_layout));\n+                        }\n+                        _ => unimplemented!(\"rval misc {:?} {:?}\", operand, to_ty),\n                     }\n                 },\n                 Rvalue::Cast(CastKind::ClosureFnPointer, operand, ty) => unimplemented!(\"rval closure_fn_ptr {:?} {:?}\", operand, ty),"}, {"sha": "5e13ad4a434f5619c4860fc881fa0883ea38260e", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5951efb7489b3f44699a04905c9025a12d8b8ce3/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5951efb7489b3f44699a04905c9025a12d8b8ce3/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=5951efb7489b3f44699a04905c9025a12d8b8ce3", "patch": "@@ -315,7 +315,7 @@ pub fn cton_intcast<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, val: Value, fro\n     if from == to {\n         return val;\n     }\n-    if from.wider_or_equal(to) {\n+    if to.wider_or_equal(from) {\n         if signed {\n             fx.bcx.ins().sextend(to, val)\n         } else {"}]}