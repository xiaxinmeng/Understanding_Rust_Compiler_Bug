{"sha": "15cccb97d60a19fc7120bb57840a83bdcc90dbad", "node_id": "C_kwDOAAsO6NoAKDE1Y2NjYjk3ZDYwYTE5ZmM3MTIwYmI1Nzg0MGE4M2JkY2M5MGRiYWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-03T22:21:57Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-04T00:39:10Z"}, "message": "Encode MIR for 'unreachable' non-generic fns", "tree": {"sha": "740726dc8cddbef287de9631a3fc36195b5eb29f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/740726dc8cddbef287de9631a3fc36195b5eb29f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15cccb97d60a19fc7120bb57840a83bdcc90dbad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15cccb97d60a19fc7120bb57840a83bdcc90dbad", "html_url": "https://github.com/rust-lang/rust/commit/15cccb97d60a19fc7120bb57840a83bdcc90dbad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15cccb97d60a19fc7120bb57840a83bdcc90dbad/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40d5e83dc133d093c22c7ff016b10daa4f40dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40d5e83dc133d093c22c7ff016b10daa4f40dcf", "html_url": "https://github.com/rust-lang/rust/commit/e40d5e83dc133d093c22c7ff016b10daa4f40dcf"}], "stats": {"total": 83, "additions": 58, "deletions": 25}, "files": [{"sha": "75376cdc592d36597c1d8b5e594d825d779c69cf", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/15cccb97d60a19fc7120bb57840a83bdcc90dbad/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cccb97d60a19fc7120bb57840a83bdcc90dbad/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=15cccb97d60a19fc7120bb57840a83bdcc90dbad", "patch": "@@ -148,32 +148,15 @@ impl<'tcx> ReachableContext<'tcx> {\n                 hir::TraitItemKind::Fn(_, hir::TraitFn::Required(_))\n                 | hir::TraitItemKind::Type(..) => false,\n             },\n-            Some(Node::ImplItem(impl_item)) => {\n-                match impl_item.kind {\n-                    hir::ImplItemKind::Const(..) => true,\n-                    hir::ImplItemKind::Fn(..) => {\n-                        let attrs = self.tcx.codegen_fn_attrs(def_id);\n-                        let generics = self.tcx.generics_of(def_id);\n-                        if generics.requires_monomorphization(self.tcx) || attrs.requests_inline() {\n-                            true\n-                        } else {\n-                            let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                            let impl_did = self.tcx.hir().get_parent_item(hir_id);\n-                            // Check the impl. If the generics on the self\n-                            // type of the impl require inlining, this method\n-                            // does too.\n-                            match self.tcx.hir().expect_item(impl_did).kind {\n-                                hir::ItemKind::Impl { .. } => {\n-                                    let generics = self.tcx.generics_of(impl_did);\n-                                    generics.requires_monomorphization(self.tcx)\n-                                }\n-                                _ => false,\n-                            }\n-                        }\n-                    }\n-                    hir::ImplItemKind::TyAlias(_) => false,\n+            Some(Node::ImplItem(impl_item)) => match impl_item.kind {\n+                hir::ImplItemKind::Const(..) => true,\n+                hir::ImplItemKind::Fn(..) => {\n+                    let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+                    let impl_did = self.tcx.hir().get_parent_item(hir_id);\n+                    method_might_be_inlined(self.tcx, impl_item, impl_did)\n                 }\n-            }\n+                hir::ImplItemKind::TyAlias(_) => false,\n+            },\n             Some(_) => false,\n             None => false, // This will happen for default methods.\n         }"}, {"sha": "e296bd3911310c687b60a58e043c4158e734fbb2", "filename": "src/test/ui/codegen/auxiliary/issue-97708-aux.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/15cccb97d60a19fc7120bb57840a83bdcc90dbad/src%2Ftest%2Fui%2Fcodegen%2Fauxiliary%2Fissue-97708-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cccb97d60a19fc7120bb57840a83bdcc90dbad/src%2Ftest%2Fui%2Fcodegen%2Fauxiliary%2Fissue-97708-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fauxiliary%2Fissue-97708-aux.rs?ref=15cccb97d60a19fc7120bb57840a83bdcc90dbad", "patch": "@@ -0,0 +1,41 @@\n+use std::{ptr::NonNull, task::Poll};\n+\n+struct TaskRef;\n+\n+struct Header {\n+    vtable: &'static Vtable,\n+}\n+\n+struct Vtable {\n+    poll: unsafe fn(TaskRef) -> Poll<()>,\n+    deallocate: unsafe fn(NonNull<Header>),\n+}\n+\n+// in the \"Header\" type, which is a private type in maitake\n+impl Header {\n+    pub(crate) const fn new_stub() -> Self {\n+        unsafe fn nop(_ptr: TaskRef) -> Poll<()> {\n+            Poll::Pending\n+        }\n+\n+        unsafe fn nop_deallocate(ptr: NonNull<Header>) {\n+            unreachable!(\"stub task ({ptr:p}) should never be deallocated!\");\n+        }\n+\n+        Self { vtable: &Vtable { poll: nop, deallocate: nop_deallocate } }\n+    }\n+}\n+\n+// This is a public type in `maitake`\n+#[repr(transparent)]\n+#[cfg_attr(loom, allow(dead_code))]\n+pub struct TaskStub {\n+    hdr: Header,\n+}\n+\n+impl TaskStub {\n+    /// Create a new unique stub [`Task`].\n+    pub const fn new() -> Self {\n+        Self { hdr: Header::new_stub() }\n+    }\n+}"}, {"sha": "8cb28e9f1f6613e6bdfee9b0e6a0fdc89b82c030", "filename": "src/test/ui/codegen/issue-97708.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15cccb97d60a19fc7120bb57840a83bdcc90dbad/src%2Ftest%2Fui%2Fcodegen%2Fissue-97708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15cccb97d60a19fc7120bb57840a83bdcc90dbad/src%2Ftest%2Fui%2Fcodegen%2Fissue-97708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-97708.rs?ref=15cccb97d60a19fc7120bb57840a83bdcc90dbad", "patch": "@@ -0,0 +1,9 @@\n+// build-pass\n+// aux-build:issue-97708-aux.rs\n+\n+extern crate issue_97708_aux;\n+use issue_97708_aux::TaskStub;\n+\n+static TASK_STUB: TaskStub = TaskStub::new();\n+\n+fn main() {}"}]}