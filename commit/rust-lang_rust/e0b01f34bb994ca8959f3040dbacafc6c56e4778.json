{"sha": "e0b01f34bb994ca8959f3040dbacafc6c56e4778", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYjAxZjM0YmI5OTRjYTg5NTlmMzA0MGRiYWNhZmM2YzU2ZTQ3Nzg=", "commit": {"author": {"name": "rainy-me", "email": "github@rainy.me", "date": "2021-05-17T23:11:07Z"}, "committer": {"name": "rainy-me", "email": "github@rainy.me", "date": "2021-05-17T23:11:07Z"}, "message": "Add pub mod option for UnlinkedFile", "tree": {"sha": "13c4972204ac32dd1a1702c254ffef4b85a76bf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13c4972204ac32dd1a1702c254ffef4b85a76bf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0b01f34bb994ca8959f3040dbacafc6c56e4778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b01f34bb994ca8959f3040dbacafc6c56e4778", "html_url": "https://github.com/rust-lang/rust/commit/e0b01f34bb994ca8959f3040dbacafc6c56e4778", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0b01f34bb994ca8959f3040dbacafc6c56e4778/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04eaa1f37f31d7125372ba14da3d5059297e8b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c04eaa1f37f31d7125372ba14da3d5059297e8b2", "html_url": "https://github.com/rust-lang/rust/commit/c04eaa1f37f31d7125372ba14da3d5059297e8b2"}], "stats": {"total": 279, "additions": 158, "deletions": 121}, "files": [{"sha": "27d347dbd92c0ddb82b93c14ece4edec248b57d1", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -28,37 +28,37 @@ use unlinked_file::UnlinkedFile;\n \n use crate::{Assist, AssistId, AssistKind, FileId, Label, SourceChange};\n \n-use self::fixes::DiagnosticWithFix;\n+use self::fixes::DiagnosticWithFixes;\n \n #[derive(Debug)]\n pub struct Diagnostic {\n     // pub name: Option<String>,\n     pub message: String,\n     pub range: TextRange,\n     pub severity: Severity,\n-    pub fix: Option<Assist>,\n+    pub fixes: Option<Vec<Assist>>,\n     pub unused: bool,\n     pub code: Option<DiagnosticCode>,\n }\n \n impl Diagnostic {\n     fn error(range: TextRange, message: String) -> Self {\n-        Self { message, range, severity: Severity::Error, fix: None, unused: false, code: None }\n+        Self { message, range, severity: Severity::Error, fixes: None, unused: false, code: None }\n     }\n \n     fn hint(range: TextRange, message: String) -> Self {\n         Self {\n             message,\n             range,\n             severity: Severity::WeakWarning,\n-            fix: None,\n+            fixes: None,\n             unused: false,\n             code: None,\n         }\n     }\n \n-    fn with_fix(self, fix: Option<Assist>) -> Self {\n-        Self { fix, ..self }\n+    fn with_fixes(self, fixes: Option<Vec<Assist>>) -> Self {\n+        Self { fixes, ..self }\n     }\n \n     fn with_unused(self, unused: bool) -> Self {\n@@ -154,7 +154,7 @@ pub(crate) fn diagnostics(\n             // Override severity and mark as unused.\n             res.borrow_mut().push(\n                 Diagnostic::hint(range, d.message())\n-                    .with_fix(d.fix(&sema, resolve))\n+                    .with_fixes(d.fixes(&sema, resolve))\n                     .with_code(Some(d.code())),\n             );\n         })\n@@ -210,23 +210,23 @@ pub(crate) fn diagnostics(\n     res.into_inner()\n }\n \n-fn diagnostic_with_fix<D: DiagnosticWithFix>(\n+fn diagnostic_with_fix<D: DiagnosticWithFixes>(\n     d: &D,\n     sema: &Semantics<RootDatabase>,\n     resolve: &AssistResolveStrategy,\n ) -> Diagnostic {\n     Diagnostic::error(sema.diagnostics_display_range(d.display_source()).range, d.message())\n-        .with_fix(d.fix(&sema, resolve))\n+        .with_fixes(d.fixes(&sema, resolve))\n         .with_code(Some(d.code()))\n }\n \n-fn warning_with_fix<D: DiagnosticWithFix>(\n+fn warning_with_fix<D: DiagnosticWithFixes>(\n     d: &D,\n     sema: &Semantics<RootDatabase>,\n     resolve: &AssistResolveStrategy,\n ) -> Diagnostic {\n     Diagnostic::hint(sema.diagnostics_display_range(d.display_source()).range, d.message())\n-        .with_fix(d.fix(&sema, resolve))\n+        .with_fixes(d.fixes(&sema, resolve))\n         .with_code(Some(d.code()))\n }\n \n@@ -256,12 +256,12 @@ fn check_unnecessary_braces_in_use_statement(\n \n         acc.push(\n             Diagnostic::hint(use_range, \"Unnecessary braces in use statement\".to_string())\n-                .with_fix(Some(fix(\n+                .with_fixes(Some(vec![fix(\n                     \"remove_braces\",\n                     \"Remove unnecessary braces\",\n                     SourceChange::from_text_edit(file_id, edit),\n                     use_range,\n-                ))),\n+                )])),\n         );\n     }\n \n@@ -309,9 +309,23 @@ mod tests {\n     /// Takes a multi-file input fixture with annotated cursor positions,\n     /// and checks that:\n     ///  * a diagnostic is produced\n-    ///  * this diagnostic fix trigger range touches the input cursor position\n+    ///  * the first diagnostic fix trigger range touches the input cursor position\n     ///  * that the contents of the file containing the cursor match `after` after the diagnostic fix is applied\n     pub(crate) fn check_fix(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        check_nth_fix(0, ra_fixture_before, ra_fixture_after);\n+    }\n+    /// Takes a multi-file input fixture with annotated cursor positions,\n+    /// and checks that:\n+    ///  * a diagnostic is produced\n+    ///  * every diagnostic fixes trigger range touches the input cursor position\n+    ///  * that the contents of the file containing the cursor match `after` after each diagnostic fix is applied\n+    pub(crate) fn check_fixes(ra_fixture_before: &str, ra_fixtures_after: Vec<&str>) {\n+        for (i, ra_fixture_after) in ra_fixtures_after.iter().enumerate() {\n+            check_nth_fix(i, ra_fixture_before, ra_fixture_after)\n+        }\n+    }\n+\n+    fn check_nth_fix(nth: usize, ra_fixture_before: &str, ra_fixture_after: &str) {\n         let after = trim_indent(ra_fixture_after);\n \n         let (analysis, file_position) = fixture::position(ra_fixture_before);\n@@ -324,9 +338,9 @@ mod tests {\n             .unwrap()\n             .pop()\n             .unwrap();\n-        let fix = diagnostic.fix.unwrap();\n+        let fix = &diagnostic.fixes.unwrap()[nth];\n         let actual = {\n-            let source_change = fix.source_change.unwrap();\n+            let source_change = fix.source_change.as_ref().unwrap();\n             let file_id = *source_change.source_file_edits.keys().next().unwrap();\n             let mut actual = analysis.file_text(file_id).unwrap().to_string();\n \n@@ -344,7 +358,6 @@ mod tests {\n             file_position.offset\n         );\n     }\n-\n     /// Checks that there's a diagnostic *without* fix at `$0`.\n     fn check_no_fix(ra_fixture: &str) {\n         let (analysis, file_position) = fixture::position(ra_fixture);\n@@ -357,7 +370,7 @@ mod tests {\n             .unwrap()\n             .pop()\n             .unwrap();\n-        assert!(diagnostic.fix.is_none(), \"got a fix when none was expected: {:?}\", diagnostic);\n+        assert!(diagnostic.fixes.is_none(), \"got a fix when none was expected: {:?}\", diagnostic);\n     }\n \n     /// Takes a multi-file input fixture with annotated cursor position and checks that no diagnostics\n@@ -393,7 +406,7 @@ mod tests {\n                         message: \"unresolved macro `foo::bar!`\",\n                         range: 5..8,\n                         severity: Error,\n-                        fix: None,\n+                        fixes: None,\n                         unused: false,\n                         code: Some(\n                             DiagnosticCode(\n@@ -542,18 +555,26 @@ mod a {\n     #[test]\n     fn unlinked_file_prepend_first_item() {\n         cov_mark::check!(unlinked_file_prepend_before_first_item);\n-        check_fix(\n+        // Only tests the first one for `pub mod` since the rest are the same\n+        check_fixes(\n             r#\"\n //- /main.rs\n fn f() {}\n //- /foo.rs\n $0\n \"#,\n-            r#\"\n+            vec![\n+                r#\"\n mod foo;\n \n fn f() {}\n \"#,\n+                r#\"\n+pub mod foo;\n+\n+fn f() {}\n+\"#,\n+            ],\n         );\n     }\n "}, {"sha": "01bd2dba6753f936183b6a3449952768606dedd5", "filename": "crates/ide/src/diagnostics/field_shorthand.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -46,14 +46,13 @@ fn check_expr_field_shorthand(\n \n         let field_range = record_field.syntax().text_range();\n         acc.push(\n-            Diagnostic::hint(field_range, \"Shorthand struct initialization\".to_string()).with_fix(\n-                Some(fix(\n+            Diagnostic::hint(field_range, \"Shorthand struct initialization\".to_string())\n+                .with_fixes(Some(vec![fix(\n                     \"use_expr_field_shorthand\",\n                     \"Use struct shorthand initialization\",\n                     SourceChange::from_text_edit(file_id, edit),\n                     field_range,\n-                )),\n-            ),\n+                )])),\n         );\n     }\n }\n@@ -86,13 +85,13 @@ fn check_pat_field_shorthand(\n         let edit = edit_builder.finish();\n \n         let field_range = record_pat_field.syntax().text_range();\n-        acc.push(Diagnostic::hint(field_range, \"Shorthand struct pattern\".to_string()).with_fix(\n-            Some(fix(\n+        acc.push(Diagnostic::hint(field_range, \"Shorthand struct pattern\".to_string()).with_fixes(\n+            Some(vec![fix(\n                 \"use_pat_field_shorthand\",\n                 \"Use struct field shorthand\",\n                 SourceChange::from_text_edit(file_id, edit),\n                 field_range,\n-            )),\n+            )]),\n         ));\n     }\n }"}, {"sha": "258ac697447bab991d185d937977822bc81d1641", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -14,18 +14,18 @@ use ide_db::RootDatabase;\n \n use crate::Assist;\n \n-/// A [Diagnostic] that potentially has a fix available.\n+/// A [Diagnostic] that potentially has some fixes available.\n ///\n /// [Diagnostic]: hir::diagnostics::Diagnostic\n-pub(crate) trait DiagnosticWithFix: Diagnostic {\n+pub(crate) trait DiagnosticWithFixes: Diagnostic {\n     /// `resolve` determines if the diagnostic should fill in the `edit` field\n     /// of the assist.\n     ///\n     /// If `resolve` is false, the edit will be computed later, on demand, and\n     /// can be omitted.\n-    fn fix(\n+    fn fixes(\n         &self,\n         sema: &Semantics<RootDatabase>,\n         _resolve: &AssistResolveStrategy,\n-    ) -> Option<Assist>;\n+    ) -> Option<Vec<Assist>>;\n }"}, {"sha": "42be3375f3514dbfd729496b58763bf87683f2d3", "filename": "crates/ide/src/diagnostics/fixes/change_case.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fchange_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fchange_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fchange_case.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -4,16 +4,16 @@ use ide_db::{base_db::FilePosition, RootDatabase};\n use syntax::AstNode;\n \n use crate::{\n-    diagnostics::{unresolved_fix, DiagnosticWithFix},\n+    diagnostics::{unresolved_fix, DiagnosticWithFixes},\n     references::rename::rename_with_semantics,\n };\n \n-impl DiagnosticWithFix for IncorrectCase {\n-    fn fix(\n+impl DiagnosticWithFixes for IncorrectCase {\n+    fn fixes(\n         &self,\n         sema: &Semantics<RootDatabase>,\n         resolve: &AssistResolveStrategy,\n-    ) -> Option<Assist> {\n+    ) -> Option<Vec<Assist>> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let name_node = self.ident.to_node(&root);\n \n@@ -28,7 +28,7 @@ impl DiagnosticWithFix for IncorrectCase {\n             res.source_change = Some(source_change.ok().unwrap_or_default());\n         }\n \n-        Some(res)\n+        Some(vec![res])\n     }\n }\n "}, {"sha": "a5f457dcea537635ca08d2f2d8e0a8ea0b1c24f6", "filename": "crates/ide/src/diagnostics/fixes/create_field.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fcreate_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fcreate_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fcreate_field.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -7,30 +7,29 @@ use syntax::{\n use text_edit::TextEdit;\n \n use crate::{\n-    diagnostics::{fix, DiagnosticWithFix},\n+    diagnostics::{fix, DiagnosticWithFixes},\n     Assist, AssistResolveStrategy,\n };\n-\n-impl DiagnosticWithFix for NoSuchField {\n-    fn fix(\n+impl DiagnosticWithFixes for NoSuchField {\n+    fn fixes(\n         &self,\n         sema: &Semantics<RootDatabase>,\n         _resolve: &AssistResolveStrategy,\n-    ) -> Option<Assist> {\n+    ) -> Option<Vec<Assist>> {\n         let root = sema.db.parse_or_expand(self.file)?;\n-        missing_record_expr_field_fix(\n+        missing_record_expr_field_fixes(\n             &sema,\n             self.file.original_file(sema.db),\n             &self.field.to_node(&root),\n         )\n     }\n }\n \n-fn missing_record_expr_field_fix(\n+fn missing_record_expr_field_fixes(\n     sema: &Semantics<RootDatabase>,\n     usage_file_id: FileId,\n     record_expr_field: &ast::RecordExprField,\n-) -> Option<Assist> {\n+) -> Option<Vec<Assist>> {\n     let record_lit = ast::RecordExpr::cast(record_expr_field.syntax().parent()?.parent()?)?;\n     let def_id = sema.resolve_variant(record_lit)?;\n     let module;\n@@ -89,12 +88,12 @@ fn missing_record_expr_field_fix(\n         TextEdit::insert(last_field_syntax.text_range().end(), new_field),\n     );\n \n-    return Some(fix(\n+    return Some(vec![fix(\n         \"create_field\",\n         \"Create field\",\n         source_change,\n         record_expr_field.syntax().text_range(),\n-    ));\n+    )]);\n \n     fn record_field_list(field_def_list: ast::FieldList) -> Option<ast::RecordFieldList> {\n         match field_def_list {"}, {"sha": "b5dd64c08c36ad576bd6f3e5a28d2d441a782a7f", "filename": "crates/ide/src/diagnostics/fixes/fill_missing_fields.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Ffill_missing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Ffill_missing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Ffill_missing_fields.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -5,16 +5,16 @@ use syntax::{algo, ast::make, AstNode};\n use text_edit::TextEdit;\n \n use crate::{\n-    diagnostics::{fix, fixes::DiagnosticWithFix},\n+    diagnostics::{fix, fixes::DiagnosticWithFixes},\n     Assist,\n };\n \n-impl DiagnosticWithFix for MissingFields {\n-    fn fix(\n+impl DiagnosticWithFixes for MissingFields {\n+    fn fixes(\n         &self,\n         sema: &Semantics<RootDatabase>,\n         _resolve: &AssistResolveStrategy,\n-    ) -> Option<Assist> {\n+    ) -> Option<Vec<Assist>> {\n         // Note that although we could add a diagnostics to\n         // fill the missing tuple field, e.g :\n         // `struct A(usize);`\n@@ -41,12 +41,12 @@ impl DiagnosticWithFix for MissingFields {\n                 .into_text_edit(&mut builder);\n             builder.finish()\n         };\n-        Some(fix(\n+        Some(vec![fix(\n             \"fill_missing_fields\",\n             \"Fill struct fields\",\n             SourceChange::from_text_edit(self.file.original_file(sema.db), edit),\n             sema.original_range(&field_list_parent.syntax()).range,\n-        ))\n+        )])\n     }\n }\n "}, {"sha": "f1724d47918c35be20ff0d7fc9fecc759cf43110", "filename": "crates/ide/src/diagnostics/fixes/remove_semicolon.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fremove_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fremove_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fremove_semicolon.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -4,14 +4,14 @@ use ide_db::{source_change::SourceChange, RootDatabase};\n use syntax::{ast, AstNode};\n use text_edit::TextEdit;\n \n-use crate::diagnostics::{fix, DiagnosticWithFix};\n+use crate::diagnostics::{fix, DiagnosticWithFixes};\n \n-impl DiagnosticWithFix for RemoveThisSemicolon {\n-    fn fix(\n+impl DiagnosticWithFixes for RemoveThisSemicolon {\n+    fn fixes(\n         &self,\n         sema: &Semantics<RootDatabase>,\n         _resolve: &AssistResolveStrategy,\n-    ) -> Option<Assist> {\n+    ) -> Option<Vec<Assist>> {\n         let root = sema.db.parse_or_expand(self.file)?;\n \n         let semicolon = self\n@@ -26,7 +26,7 @@ impl DiagnosticWithFix for RemoveThisSemicolon {\n         let edit = TextEdit::delete(semicolon);\n         let source_change = SourceChange::from_text_edit(self.file.original_file(sema.db), edit);\n \n-        Some(fix(\"remove_semicolon\", \"Remove this semicolon\", source_change, semicolon))\n+        Some(vec![fix(\"remove_semicolon\", \"Remove this semicolon\", source_change, semicolon)])\n     }\n }\n "}, {"sha": "444bf563b557b02f798b0afad93a5a5e3eee03a2", "filename": "crates/ide/src/diagnostics/fixes/replace_with_find_map.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Freplace_with_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Freplace_with_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Freplace_with_find_map.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -7,14 +7,14 @@ use syntax::{\n };\n use text_edit::TextEdit;\n \n-use crate::diagnostics::{fix, DiagnosticWithFix};\n+use crate::diagnostics::{fix, DiagnosticWithFixes};\n \n-impl DiagnosticWithFix for ReplaceFilterMapNextWithFindMap {\n-    fn fix(\n+impl DiagnosticWithFixes for ReplaceFilterMapNextWithFindMap {\n+    fn fixes(\n         &self,\n         sema: &Semantics<RootDatabase>,\n         _resolve: &AssistResolveStrategy,\n-    ) -> Option<Assist> {\n+    ) -> Option<Vec<Assist>> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let next_expr = self.next_expr.to_node(&root);\n         let next_call = ast::MethodCallExpr::cast(next_expr.syntax().clone())?;\n@@ -32,12 +32,12 @@ impl DiagnosticWithFix for ReplaceFilterMapNextWithFindMap {\n \n         let source_change = SourceChange::from_text_edit(self.file.original_file(sema.db), edit);\n \n-        Some(fix(\n+        Some(vec![fix(\n             \"replace_with_find_map\",\n             \"Replace filter_map(..).next() with find_map()\",\n             source_change,\n             trigger_range,\n-        ))\n+        )])\n     }\n }\n "}, {"sha": "b3d0283bbfaccf2af9ce9bca6c797c850205dbe2", "filename": "crates/ide/src/diagnostics/fixes/unresolved_module.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Funresolved_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Funresolved_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Funresolved_module.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -3,17 +3,17 @@ use ide_assists::{Assist, AssistResolveStrategy};\n use ide_db::{base_db::AnchoredPathBuf, source_change::FileSystemEdit, RootDatabase};\n use syntax::AstNode;\n \n-use crate::diagnostics::{fix, DiagnosticWithFix};\n+use crate::diagnostics::{fix, DiagnosticWithFixes};\n \n-impl DiagnosticWithFix for UnresolvedModule {\n-    fn fix(\n+impl DiagnosticWithFixes for UnresolvedModule {\n+    fn fixes(\n         &self,\n         sema: &Semantics<RootDatabase>,\n         _resolve: &AssistResolveStrategy,\n-    ) -> Option<Assist> {\n+    ) -> Option<Vec<Assist>> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let unresolved_module = self.decl.to_node(&root);\n-        Some(fix(\n+        Some(vec![fix(\n             \"create_module\",\n             \"Create module\",\n             FileSystemEdit::CreateFile {\n@@ -25,7 +25,7 @@ impl DiagnosticWithFix for UnresolvedModule {\n             }\n             .into(),\n             unresolved_module.syntax().text_range(),\n-        ))\n+        )])\n     }\n }\n \n@@ -45,33 +45,35 @@ mod tests {\n                         message: \"unresolved module\",\n                         range: 0..8,\n                         severity: Error,\n-                        fix: Some(\n-                            Assist {\n-                                id: AssistId(\n-                                    \"create_module\",\n-                                    QuickFix,\n-                                ),\n-                                label: \"Create module\",\n-                                group: None,\n-                                target: 0..8,\n-                                source_change: Some(\n-                                    SourceChange {\n-                                        source_file_edits: {},\n-                                        file_system_edits: [\n-                                            CreateFile {\n-                                                dst: AnchoredPathBuf {\n-                                                    anchor: FileId(\n-                                                        0,\n-                                                    ),\n-                                                    path: \"foo.rs\",\n+                        fixes: Some(\n+                            [\n+                                Assist {\n+                                    id: AssistId(\n+                                        \"create_module\",\n+                                        QuickFix,\n+                                    ),\n+                                    label: \"Create module\",\n+                                    group: None,\n+                                    target: 0..8,\n+                                    source_change: Some(\n+                                        SourceChange {\n+                                            source_file_edits: {},\n+                                            file_system_edits: [\n+                                                CreateFile {\n+                                                    dst: AnchoredPathBuf {\n+                                                        anchor: FileId(\n+                                                            0,\n+                                                        ),\n+                                                        path: \"foo.rs\",\n+                                                    },\n+                                                    initial_contents: \"\",\n                                                 },\n-                                                initial_contents: \"\",\n-                                            },\n-                                        ],\n-                                        is_snippet: false,\n-                                    },\n-                                ),\n-                            },\n+                                            ],\n+                                            is_snippet: false,\n+                                        },\n+                                    ),\n+                                },\n+                            ],\n                         ),\n                         unused: false,\n                         code: Some("}, {"sha": "715a403b99c36c6f258bf539e0502a37fe13ba4a", "filename": "crates/ide/src/diagnostics/fixes/wrap_tail_expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fwrap_tail_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fwrap_tail_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fwrap_tail_expr.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -4,22 +4,22 @@ use ide_db::{source_change::SourceChange, RootDatabase};\n use syntax::AstNode;\n use text_edit::TextEdit;\n \n-use crate::diagnostics::{fix, DiagnosticWithFix};\n+use crate::diagnostics::{fix, DiagnosticWithFixes};\n \n-impl DiagnosticWithFix for MissingOkOrSomeInTailExpr {\n-    fn fix(\n+impl DiagnosticWithFixes for MissingOkOrSomeInTailExpr {\n+    fn fixes(\n         &self,\n         sema: &Semantics<RootDatabase>,\n         _resolve: &AssistResolveStrategy,\n-    ) -> Option<Assist> {\n+    ) -> Option<Vec<Assist>> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let tail_expr = self.expr.to_node(&root);\n         let tail_expr_range = tail_expr.syntax().text_range();\n         let replacement = format!(\"{}({})\", self.required, tail_expr.syntax());\n         let edit = TextEdit::replace(tail_expr_range, replacement);\n         let source_change = SourceChange::from_text_edit(self.file.original_file(sema.db), edit);\n         let name = if self.required == \"Ok\" { \"Wrap with Ok\" } else { \"Wrap with Some\" };\n-        Some(fix(\"wrap_tail_expr\", name, source_change, tail_expr_range))\n+        Some(vec![fix(\"wrap_tail_expr\", name, source_change, tail_expr_range)])\n     }\n }\n "}, {"sha": "51fe0f360ed29195d712fac44aefc735b4118ebc", "filename": "crates/ide/src/diagnostics/unlinked_file.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Fdiagnostics%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funlinked_file.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -18,7 +18,7 @@ use syntax::{\n use text_edit::TextEdit;\n \n use crate::{\n-    diagnostics::{fix, fixes::DiagnosticWithFix},\n+    diagnostics::{fix, fixes::DiagnosticWithFixes},\n     Assist,\n };\n \n@@ -50,13 +50,13 @@ impl Diagnostic for UnlinkedFile {\n     }\n }\n \n-impl DiagnosticWithFix for UnlinkedFile {\n-    fn fix(\n+impl DiagnosticWithFixes for UnlinkedFile {\n+    fn fixes(\n         &self,\n         sema: &hir::Semantics<RootDatabase>,\n         _resolve: &AssistResolveStrategy,\n-    ) -> Option<Assist> {\n-        // If there's an existing module that could add a `mod` item to include the unlinked file,\n+    ) -> Option<Vec<Assist>> {\n+        // If there's an existing module that could add `mod` or `pub mod` items to include the unlinked file,\n         // suggest that as a fix.\n \n         let source_root = sema.db.source_root(sema.db.file_source_root(self.file_id));\n@@ -90,7 +90,7 @@ impl DiagnosticWithFix for UnlinkedFile {\n                         }\n \n                         if module.origin.file_id() == Some(*parent_id) {\n-                            return make_fix(sema.db, *parent_id, module_name, self.file_id);\n+                            return make_fixes(sema.db, *parent_id, module_name, self.file_id);\n                         }\n                     }\n                 }\n@@ -101,20 +101,23 @@ impl DiagnosticWithFix for UnlinkedFile {\n     }\n }\n \n-fn make_fix(\n+fn make_fixes(\n     db: &RootDatabase,\n     parent_file_id: FileId,\n     new_mod_name: &str,\n     added_file_id: FileId,\n-) -> Option<Assist> {\n+) -> Option<Vec<Assist>> {\n     fn is_outline_mod(item: &ast::Item) -> bool {\n         matches!(item, ast::Item::Module(m) if m.item_list().is_none())\n     }\n \n     let mod_decl = format!(\"mod {};\", new_mod_name);\n+    let pub_mod_decl = format!(\"pub mod {};\", new_mod_name);\n+\n     let ast: ast::SourceFile = db.parse(parent_file_id).tree();\n \n-    let mut builder = TextEdit::builder();\n+    let mut mod_decl_builder = TextEdit::builder();\n+    let mut pub_mod_decl_builder = TextEdit::builder();\n \n     // If there's an existing `mod m;` statement matching the new one, don't emit a fix (it's\n     // probably `#[cfg]`d out).\n@@ -138,30 +141,43 @@ fn make_fix(\n     {\n         Some(last) => {\n             cov_mark::hit!(unlinked_file_append_to_existing_mods);\n-            builder.insert(last.syntax().text_range().end(), format!(\"\\n{}\", mod_decl));\n+            let offset = last.syntax().text_range().end();\n+            mod_decl_builder.insert(offset, format!(\"\\n{}\", mod_decl));\n+            pub_mod_decl_builder.insert(offset, format!(\"\\n{}\", pub_mod_decl));\n         }\n         None => {\n             // Prepend before the first item in the file.\n             match ast.items().next() {\n                 Some(item) => {\n                     cov_mark::hit!(unlinked_file_prepend_before_first_item);\n-                    builder.insert(item.syntax().text_range().start(), format!(\"{}\\n\\n\", mod_decl));\n+                    let offset = item.syntax().text_range().start();\n+                    mod_decl_builder.insert(offset, format!(\"{}\\n\\n\", mod_decl));\n+                    pub_mod_decl_builder.insert(offset, format!(\"{}\\n\\n\", pub_mod_decl));\n                 }\n                 None => {\n                     // No items in the file, so just append at the end.\n                     cov_mark::hit!(unlinked_file_empty_file);\n-                    builder.insert(ast.syntax().text_range().end(), format!(\"{}\\n\", mod_decl));\n+                    let offset = ast.syntax().text_range().end();\n+                    mod_decl_builder.insert(offset, format!(\"{}\\n\", mod_decl));\n+                    pub_mod_decl_builder.insert(offset, format!(\"{}\\n\", pub_mod_decl));\n                 }\n             }\n         }\n     }\n \n-    let edit = builder.finish();\n     let trigger_range = db.parse(added_file_id).tree().syntax().text_range();\n-    Some(fix(\n-        \"add_mod_declaration\",\n-        &format!(\"Insert `{}`\", mod_decl),\n-        SourceChange::from_text_edit(parent_file_id, edit),\n-        trigger_range,\n-    ))\n+    Some(vec![\n+        fix(\n+            \"add_mod_declaration\",\n+            &format!(\"Insert `{}`\", mod_decl),\n+            SourceChange::from_text_edit(parent_file_id, mod_decl_builder.finish()),\n+            trigger_range,\n+        ),\n+        fix(\n+            \"add_pub_mod_declaration\",\n+            &format!(\"Insert `{}`\", pub_mod_decl),\n+            SourceChange::from_text_edit(parent_file_id, pub_mod_decl_builder.finish()),\n+            trigger_range,\n+        ),\n+    ])\n }"}, {"sha": "f4b90db3a02218b269f9e1441bd3de4c32871439", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b01f34bb994ca8959f3040dbacafc6c56e4778/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=e0b01f34bb994ca8959f3040dbacafc6c56e4778", "patch": "@@ -565,7 +565,7 @@ impl Analysis {\n             let diagnostic_assists = if include_fixes {\n                 diagnostics::diagnostics(db, diagnostics_config, &resolve, frange.file_id)\n                     .into_iter()\n-                    .filter_map(|it| it.fix)\n+                    .flat_map(|it| it.fixes.unwrap_or_default())\n                     .filter(|it| it.target.intersect(frange.range).is_some())\n                     .collect()\n             } else {"}]}