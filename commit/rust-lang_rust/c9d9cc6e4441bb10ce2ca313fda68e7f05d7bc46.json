{"sha": "c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZDljYzZlNDQ0MWJiMTBjZTJjYTMxM2ZkYTY4ZTdmMDVkN2JjNDY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-09-25T21:51:35Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-09-26T11:10:54Z"}, "message": "Add `#![allow(..)]` as necessary to get re-migrated run-pass tests compiling with clean stderr again.\n\nMost were added mechanically.", "tree": {"sha": "9c4f739dbeec60bf819e30b6430f3fbdb20958cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c4f739dbeec60bf819e30b6430f3fbdb20958cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "html_url": "https://github.com/rust-lang/rust/commit/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2080474c75b833d2d666291839d8893cc0999de2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2080474c75b833d2d666291839d8893cc0999de2", "html_url": "https://github.com/rust-lang/rust/commit/2080474c75b833d2d666291839d8893cc0999de2"}], "stats": {"total": 1097, "additions": 1030, "deletions": 67}, "files": [{"sha": "2bc8bf9796e829d301e4bef629ec918f6de500b5", "filename": "src/test/run-pass/array-slice-vec/array_const_index-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Farray_const_index-1.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(stable_features)]\n \n #![feature(const_indexing)]"}, {"sha": "998a1d9ee27857982f09577405406c3f3f8e9522", "filename": "src/test/run-pass/array-slice-vec/check-static-mut-slices.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fcheck-static-mut-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fcheck-static-mut-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fcheck-static-mut-slices.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n // Checks that mutable static items can have mutable slices\n "}, {"sha": "b1a55a04a2499c96c0844ae5d2c8b7330188aa63", "filename": "src/test/run-pass/array-slice-vec/evec-slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fevec-slice.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_assignments)]\n \n pub fn main() {\n     let x : &[isize] = &[1,2,3,4,5];"}, {"sha": "b85cb97b6bafdff9ee70ec784be5076eaec83af1", "filename": "src/test/run-pass/array-slice-vec/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fslice.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n \n // Test slicing sugar.\n "}, {"sha": "234d63672d943435734b9e63b889a840dbbddcf9", "filename": "src/test/run-pass/array-slice-vec/vec-late-init.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-late-init.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_mut)]\n \n \n pub fn main() {"}, {"sha": "aa7d96a5e5a2ae99830345596f56189ad9e6165a", "filename": "src/test/run-pass/array-slice-vec/vec-macro-with-brackets.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-brackets.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "3d4a84aa5c3c0ccb1f021065ff58db6df8a7fb97", "filename": "src/test/run-pass/array-slice-vec/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n \n #![feature(slice_patterns)]\n "}, {"sha": "b425d759b03f495734ae1de57997a52aa62a7046", "filename": "src/test/run-pass/associated-consts/associated-const-range-match-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n struct Foo;\n "}, {"sha": "282e44ed42b69da7ead0aeb5c86cd47b1dda8421", "filename": "src/test/run-pass/associated-types/associated-types-cc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-cc.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // aux-build:associated-types-cc-lib.rs\n \n // Test that we are able to reference cross-crate traits that employ"}, {"sha": "53d25b23b480a7019f3a614a03573492f9a016e8", "filename": "src/test/run-pass/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env-hrtb.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Check that we do not report ambiguities when equivalent predicates\n // (modulo bound lifetime names) appears in the environment\n // twice. Issue #21965."}, {"sha": "b04da14795fcbebef77794a6bf395e2d860ac186", "filename": "src/test/run-pass/associated-types/associated-types-duplicate-binding-in-env.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Check that we do not report ambiguities when the same predicate\n // appears in the environment twice. Issue #21965.\n "}, {"sha": "fd2fade2f887dd1ef889da9096cbd49c1745e727", "filename": "src/test/run-pass/associated-types/associated-types-impl-redirect.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-impl-redirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-impl-redirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-impl-redirect.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_mut)]\n+#![allow(unused_imports)]\n // Test how resolving a projection interacts with inference.  In this\n // case, we were eagerly unifying the type variable for the iterator\n // type with `I` from the where clause, ignoring the in-scope `impl`"}, {"sha": "c5baec7be00df1b835dac721a368297200fb967a", "filename": "src/test/run-pass/associated-types/associated-types-issue-21212.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-21212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-21212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-21212.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Regression test for #21212: an overflow occurred during trait\n // checking where normalizing `Self::Input` led to normalizing the\n // where clauses in the environment which in turn required normalizing"}, {"sha": "af6f3da195e864c1cfe5811934a5a04b4f284227", "filename": "src/test/run-pass/associated-types/associated-types-nested-projections.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-nested-projections.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Test that we can resolve nested projection types. Issue #20666.\n \n // pretty-expanded FIXME #23616"}, {"sha": "4dd810d10565d75cd9d6994435c444dfc9826e6d", "filename": "src/test/run-pass/associated-types/associated-types-normalize-in-bounds-binding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-binding.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Test that we normalize associated types that appear in a bound that\n // contains a binding. Issue #21664.\n "}, {"sha": "d534051267d918f233880e3788d0387b3ec15c18", "filename": "src/test/run-pass/associated-types/associated-types-normalize-in-bounds-ufcs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-ufcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-ufcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-ufcs.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n "}, {"sha": "6651a0b53ac3cc7d1db5755795258c7dd08f31a7", "filename": "src/test/run-pass/associated-types/associated-types-normalize-in-bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n "}, {"sha": "2f27cb1cd9ee9135d66ac87a84b0bce469908f5c", "filename": "src/test/run-pass/associated-types/associated-types-projection-bound-in-supertraits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-bound-in-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-bound-in-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-bound-in-supertraits.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Test that we correctly handle projection bounds appearing in the\n // supertrait list (and in conjunction with overloaded operators). In\n // this case, the `Result=Self` binding in the supertrait listing of"}, {"sha": "c0844e9076e357d6c2133b3f01fb2a226a982179", "filename": "src/test/run-pass/associated-types/associated-types-projection-in-object-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n // Corrected regression test for #20831. The original did not compile.\n // When fixed, it revealed another problem concerning projections that\n // appear in associated type bindings in object types, which were not"}, {"sha": "23c9fb89f393a73d34cb15c74c054718e591cb61", "filename": "src/test/run-pass/associated-types/associated-types-projection-in-supertrait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-supertrait.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test that we are handle to correctly handle a projection type\n // that appears in a supertrait bound. Issue #20559.\n "}, {"sha": "238f98086ceb1ba2a9b7dacb12a9bfcff92878da", "filename": "src/test/run-pass/associated-types/associated-types-projection-in-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-where-clause.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // Test a where clause that uses a non-normalized projection type.\n \n // pretty-expanded FIXME #23616"}, {"sha": "40864835d2e41400216212ffedebd2fadda8844f", "filename": "src/test/run-pass/associated-types/associated-types-region-erasure-issue-20582.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-region-erasure-issue-20582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-region-erasure-issue-20582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-region-erasure-issue-20582.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Regression test for #20582. This test caused an ICE related to\n // inconsistent region erasure in codegen.\n "}, {"sha": "c3c76eb1313a0d29e792844e57bd6abb11f43e2b", "filename": "src/test/run-pass/associated-types/associated-types-sugar-path.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-sugar-path.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+#![allow(unused_imports)]\n // Test paths to associated types using the type-parameter-only sugar.\n \n use std::ops::Deref;"}, {"sha": "5c03a6bbc027a4b3d7afbb1ea54e4f6a52bca1cb", "filename": "src/test/run-pass/associated-types/associated-types-where-clause-impl-ambiguity.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-where-clause-impl-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-where-clause-impl-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-where-clause-impl-ambiguity.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n // Test how resolving a projection interacts with inference.  In this\n // case, we were eagerly unifying the type variable for the iterator\n // type with `I` from the where clause, ignoring the in-scope `impl`"}, {"sha": "8ab2bf2f9b8919a6bd7b6d3e21a3dd5e954b7cdd", "filename": "src/test/run-pass/autoref-autoderef/autoderef-and-borrow-method-receiver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fautoref-autoderef%2Fautoderef-and-borrow-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fautoref-autoderef%2Fautoderef-and-borrow-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-autoderef%2Fautoderef-and-borrow-method-receiver.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n struct Foo {"}, {"sha": "59fe52f7b596986d8e2d0b59910c2b9b6ca5fdad", "filename": "src/test/run-pass/binding/bind-field-short-with-modifiers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fbind-field-short-with-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fbind-field-short-with-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fbind-field-short-with-modifiers.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_assignments)]\n+#![allow(unused_variables)]\n #![allow(non_shorthand_field_patterns)]\n \n pub fn main() {"}, {"sha": "678485b324d96ce4fb7c50d79da354959326070a", "filename": "src/test/run-pass/binding/fat-arrow-match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Ffat-arrow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Ffat-arrow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Ffat-arrow-match.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n enum color {"}, {"sha": "bc994f0f7fa5954c63e334903d79676b5ac9bb84", "filename": "src/test/run-pass/binding/func-arg-incomplete-pattern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Ffunc-arg-incomplete-pattern.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test that we do not leak when the arg pattern must drop part of the\n // argument (in this case, the `y` field).\n "}, {"sha": "933865342c427118b7f303d85c4ac87993516e83", "filename": "src/test/run-pass/binding/if-let.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fif-let.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n pub fn main() {\n     let x = Some(3);"}, {"sha": "fd2764f84d7ae57340bc56279895eda5bba14bda", "filename": "src/test/run-pass/binding/inconsistent-lifetime-mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Finconsistent-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Finconsistent-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Finconsistent-lifetime-mismatch.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n fn foo(_: &[&str]) {}"}, {"sha": "b6f4cb18d9aebe8eea9ba54c51db744010781d80", "filename": "src/test/run-pass/binding/match-arm-statics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // compile-flags: -g\n \n #[derive(PartialEq, Eq)]"}, {"sha": "f25b423607bcead59355736eca70824bde2be946", "filename": "src/test/run-pass/binding/match-bot-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-bot-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-bot-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-bot-2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unreachable_code)]\n // n.b. This was only ever failing with optimization disabled.\n \n fn a() -> isize { match return 1 { 2 => 3, _ => panic!() } }"}, {"sha": "bc364b04aecfc935dc2e2eae7ac8d63936a1b90a", "filename": "src/test/run-pass/binding/match-enum-struct-0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-enum-struct-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-enum-struct-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-enum-struct-0.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // regression test for issue #5625\n \n "}, {"sha": "71cacc2f6bf62f9d3e931b098aff41123af0fa8c", "filename": "src/test/run-pass/binding/match-enum-struct-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-enum-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-enum-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-enum-struct-1.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum E {\n     Foo{f : isize},"}, {"sha": "cd7cc87a40bf1ef5b4c42b80daee107564427da5", "filename": "src/test/run-pass/binding/match-join.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-join.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_mut)]\n fn foo<T>(y: Option<T>) {\n     let mut x: isize;\n     let mut rs: Vec<isize> = Vec::new();"}, {"sha": "9c4c36693b9c0288b916eec85d4f39e2d2fc3c37", "filename": "src/test/run-pass/binding/match-naked-record.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-naked-record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-naked-record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-naked-record.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n struct X { x: isize }"}, {"sha": "385713001a3fca72e38010bdf1bfa65fe90481ed", "filename": "src/test/run-pass/binding/match-path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-path.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n "}, {"sha": "e42a24f20b941940782776776006fa737190a087", "filename": "src/test/run-pass/binding/match-pattern-no-type-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-pattern-no-type-params.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n enum maybe<T> { nothing, just(T), }"}, {"sha": "3522ba71b6abb9d8edc49fa03cb7cd84ae10acfa", "filename": "src/test/run-pass/binding/match-pattern-simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-pattern-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-pattern-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-pattern-simple.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n \n // pretty-expanded FIXME #23616"}, {"sha": "43a55da573bd0ddca90863dcccfcd431e94d4105", "filename": "src/test/run-pass/binding/match-phi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-phi.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_assignments)]\n // pretty-expanded FIXME #23616\n #![allow(non_camel_case_types)]\n #![allow(unused_variables)]"}, {"sha": "7b051cfa4359dfcde97af0132e0937c66f91b38e", "filename": "src/test/run-pass/binding/match-str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-str.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Issue #53\n #![allow(non_camel_case_types)]\n "}, {"sha": "ca7b7c70afbbb3ae9fe2ebeb0a644f6efc9c3a14", "filename": "src/test/run-pass/binding/match-tag.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-tag.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_mut)]\n #![allow(non_camel_case_types)]\n \n "}, {"sha": "e9f143cfbc96728971e3ce5e9dd6ab2f4d328607", "filename": "src/test/run-pass/binding/mut-in-ident-patterns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmut-in-ident-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fmut-in-ident-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmut-in-ident-patterns.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_assignments)]\n #![allow(non_camel_case_types)]\n #![allow(non_shorthand_field_patterns)]\n "}, {"sha": "61bb0e8a4689eea610bd0daeec226705fc431640", "filename": "src/test/run-pass/binding/nested-exhaustive-match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fnested-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fnested-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fnested-exhaustive-match.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n struct Foo { foo: bool, bar: Option<isize>, baz: isize }"}, {"sha": "96bdadc06247f5e5713a3a5838794c04fb02ed5f", "filename": "src/test/run-pass/binding/nested-pattern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fnested-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fnested-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fnested-pattern.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n // a bug was causing this to complain about leaked memory on exit"}, {"sha": "304a0323297e68b1f2edd74c584b896054c2ae02", "filename": "src/test/run-pass/binding/optional_comma_in_match_arm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Foptional_comma_in_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Foptional_comma_in_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Foptional_comma_in_match_arm.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_unsafe)]\n // ignore-pretty issue #37199\n #![allow(while_true)]\n "}, {"sha": "472045fcdb3f122a09b7f76cb797f836c5a8d5c2", "filename": "src/test/run-pass/binding/use-uninit-match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fuse-uninit-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fuse-uninit-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fuse-uninit-match.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n "}, {"sha": "2f8384f9e846ce5b26353c0e090b99da17137549", "filename": "src/test/run-pass/binding/use-uninit-match2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fuse-uninit-match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fbinding%2Fuse-uninit-match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fuse-uninit-match2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_mut)]\n #![allow(non_camel_case_types)]\n \n "}, {"sha": "ad16027c34d2c11572d082123829f04db37806ca", "filename": "src/test/run-pass/borrowck/borrowck-assignment-to-static-mut.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test taken from #45641 (https://github.com/rust-lang/rust/issues/45641)\n \n // revisions: ast mir"}, {"sha": "a3a6348292349f3259546a77c208b1637daa5b7f", "filename": "src/test/run-pass/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-of-mut-base-ptr-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-of-mut-base-ptr-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-borrow-of-mut-base-ptr-safe.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_mut)]\n+#![allow(unused_variables)]\n // Test that freezing an `&mut` pointer while referent is\n // frozen is legal.\n //"}, {"sha": "782054bb1b15993e5c368b66b9002e94d6176bc6", "filename": "src/test/run-pass/borrowck/borrowck-field-sensitivity.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_mut)]\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n #![feature(box_syntax)]"}, {"sha": "3458ab91f3d4dedbd5832e51cc224fb997e17c60", "filename": "src/test/run-pass/borrowck/borrowck-lend-args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-lend-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-lend-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-lend-args.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "ea47661a1fad3f9f09dbf1debc52bd0524eba32c", "filename": "src/test/run-pass/borrowck/borrowck-macro-interaction-issue-6304.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-macro-interaction-issue-6304.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n #![allow(unconditional_recursion)]\n \n // Check that we do not ICE when compiling this"}, {"sha": "c51a615c963385a9de82595039139397a084bea3", "filename": "src/test/run-pass/borrowck/borrowck-multiple-borrows-interior-boxes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // Test case from #39963.\n \n #![feature(nll)]"}, {"sha": "5a184fd0179852d213e3b69730d047dcd2d6e3dc", "filename": "src/test/run-pass/borrowck/borrowck-pat-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-pat-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-pat-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-pat-enum.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // ignore-pretty issue #37199\n \n fn match_ref(v: Option<isize>) -> isize {"}, {"sha": "9bc2a64eea6014bb2b5bb8b03cc537b0effcd7fb", "filename": "src/test/run-pass/borrowck/borrowck-static-item-in-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-static-item-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-static-item-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-static-item-in-fn.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Regression test for issue #7740\n \n // pretty-expanded FIXME #23616"}, {"sha": "78d25117ff2119f9a9f0e57a6563ae4bfdb38bed", "filename": "src/test/run-pass/borrowck/borrowck-trait-lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n // This test verifies that casting from the same lifetime on a value\n // to the same lifetime on a trait succeeds. See issue #10766.\n "}, {"sha": "e9d7f6f3eb3144491380f377cca035cb5254adee", "filename": "src/test/run-pass/borrowck/borrowck-uniq-via-ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-uniq-via-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-uniq-via-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-uniq-via-ref.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "8a7271c38ce242ef7839e25cbbbd84d4aa3d454d", "filename": "src/test/run-pass/cfg/cfg-match-arm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcfg%2Fcfg-match-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcfg%2Fcfg-match-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg%2Fcfg-match-arm.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n enum Foo {"}, {"sha": "405cc402e5989dd35d3cd3d3f215ac3f70a91bc9", "filename": "src/test/run-pass/cfg/cfg_stmt_expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcfg%2Fcfg_stmt_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcfg%2Fcfg_stmt_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg%2Fcfg_stmt_expr.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_mut)]\n+#![allow(unused_variables)]\n #![deny(non_snake_case)]\n #![feature(stmt_expr_attributes)]\n "}, {"sha": "0328a62588c9aede017d8a0243c0425e7b9b2180", "filename": "src/test/run-pass/cfg/conditional-compile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcfg%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcfg%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg%2Fconditional-compile.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n #![allow(non_camel_case_types)]\n #![allow(improper_ctypes)]"}, {"sha": "9f3ef90f9d9158a5c5e573bb9e577694d9e09961", "filename": "src/test/run-pass/coerce/coerce-overloaded-autoderef.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-overloaded-autoderef.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n use std::rc::Rc;"}, {"sha": "4c6510f9b9b22c43ad195d4b828ad7428360ad29", "filename": "src/test/run-pass/coerce/coerce-reborrow-imm-ptr-arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-ptr-arg.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n fn negate(x: &isize) -> isize {"}, {"sha": "3d61db475da48df79181bbe66e6452611a2ba865", "filename": "src/test/run-pass/coerce/coerce-reborrow-imm-vec-arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-reborrow-imm-vec-arg.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n fn sum(x: &[isize]) -> isize {"}, {"sha": "068b010da1ee1e3c5815c0e5e486b1e0142ac199", "filename": "src/test/run-pass/coerce/coerce-unsize-subtype.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-unsize-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-unsize-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce%2Fcoerce-unsize-subtype.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n use std::rc::Rc;"}, {"sha": "93bfdd2fdd218a545f86cb26813cbcc583cf23a3", "filename": "src/test/run-pass/coherence/coherence-blanket.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-blanket.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616"}, {"sha": "8cbafdf717747f63edd5df720332537dc36c9563", "filename": "src/test/run-pass/coherence/coherence-covered-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-covered-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-covered-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-covered-type-parameter.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616"}, {"sha": "b6915919acbbb0bbae02bf19038b60726961c571", "filename": "src/test/run-pass/coherence/coherence-impl-in-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-impl-in-fn.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n pub fn main() {"}, {"sha": "f56c827b55da82b05890651683564c8fbb1ea02d", "filename": "src/test/run-pass/coherence/coherence-iterator-vec-any-elem.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec-any-elem.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616"}, {"sha": "16501553d9f58e615fb5ffbb274796f0fd038b29", "filename": "src/test/run-pass/coherence/coherence-iterator-vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-iterator-vec.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // aux-build:coherence_lib.rs\n \n // pretty-expanded FIXME #23616"}, {"sha": "f6d711bd6cd3fe6e8517fe730bff22313f170051", "filename": "src/test/run-pass/coherence/coherence-multidispatch-tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-multidispatch-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-multidispatch-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-multidispatch-tuple.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n // pretty-expanded FIXME #23616\n \n use std::fmt::Debug;"}, {"sha": "50b3500ad8df2f2544c71ffec21506dcb2d1f8ec", "filename": "src/test/run-pass/coherence/coherence-negative-impls-safe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence-negative-impls-safe.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n #![feature(optin_builtin_traits)]"}, {"sha": "f637ac64908843dba461c753fb6d4aeb610b9668", "filename": "src/test/run-pass/coherence/coherence_copy_like.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence_copy_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence_copy_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence%2Fcoherence_copy_like.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test that we are able to introduce a negative constraint that\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n "}, {"sha": "057da22e270d0074f9b85edd48c963a65f11203c", "filename": "src/test/run-pass/consts/const-adt-align-mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-adt-align-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-adt-align-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-adt-align-mismatch.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(deprecated)]\n \n use std::mem;"}, {"sha": "7a0d0781a1f92818773b32375b40c655faf7201a", "filename": "src/test/run-pass/consts/const-block-item-macro-codegen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-block-item-macro-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-block-item-macro-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-block-item-macro-codegen.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // General test that function items in static blocks\n // can be generated with a macro.\n "}, {"sha": "83e50eba6dc6a626893bc7e09d0fb5497bcde713", "filename": "src/test/run-pass/consts/const-block-item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-block-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-block-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-block-item.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n \n mod foo {\n     pub trait Value {"}, {"sha": "485b87b4604c6ebc08674111fe9b3894bd60d49f", "filename": "src/test/run-pass/consts/const-bound.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-bound.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Make sure const bounds work on things, and test that a few types\n // are const.\n "}, {"sha": "203ceaddfaac9d23bf9b53c8c83d809fdc6e35fa", "filename": "src/test/run-pass/consts/const-enum-byref-self.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-byref-self.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum E { V, VV(isize) }\n static C: E = E::V;"}, {"sha": "29fe20523f581067d2cd4b579d9eb81784142950", "filename": "src/test/run-pass/consts/const-enum-byref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-byref.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum E { V, VV(isize) }\n static C: E = E::V;"}, {"sha": "ea28ac3658739c20ddb7c539f684d35eff2fab39", "filename": "src/test/run-pass/consts/const-enum-cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-cast.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n \n enum A { A1, A2 }"}, {"sha": "bc27bff4b9a582178284f98f9e6488ce359a8124", "filename": "src/test/run-pass/consts/const-enum-ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-ptr.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum E { V0, V1(isize) }\n static C: &'static E = &E::V0;"}, {"sha": "01ac27b5113ad7c122990bc3f82a352c5d6a83c3", "filename": "src/test/run-pass/consts/const-enum-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-struct.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum E { V16(u16), V32(u32) }\n struct S { a: E, b: u16, c: u16 }"}, {"sha": "d4923238a7843f2f821710ecbfd0e9d70adcf677", "filename": "src/test/run-pass/consts/const-enum-struct2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-struct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-struct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-struct2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum E { V0, V16(u16) }\n struct S { a: E, b: u16, c: u16 }"}, {"sha": "17fec9391169caeee13d9f14c0d7ee8fcacc867c", "filename": "src/test/run-pass/consts/const-enum-structlike.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-structlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-structlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-structlike.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum E {\n     S0 { s: String },"}, {"sha": "a318a16c325cdd81fc691797f900c7ec8492bd18", "filename": "src/test/run-pass/consts/const-enum-tuple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuple.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum E { V16(u16), V32(u32) }\n static C: (E, u16, u16) = (E::V16(0xDEAD), 0x600D, 0xBAD);"}, {"sha": "916e5c3796bb4152982f08decf382bab68b16764", "filename": "src/test/run-pass/consts/const-enum-tuple2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuple2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuple2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuple2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum E { V0, V16(u16) }\n static C: (E, u16, u16) = (E::V0, 0x600D, 0xBAD);"}, {"sha": "343c6014080419fdf1c4cce11af3ab5f11d50d43", "filename": "src/test/run-pass/consts/const-enum-tuplestruct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuplestruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuplestruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuplestruct.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum E { V16(u16), V32(u32) }\n struct S(E, u16, u16);"}, {"sha": "68bfdb56942e22ce13c5a14915f7ef1dd2b55d4d", "filename": "src/test/run-pass/consts/const-enum-tuplestruct2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuplestruct2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuplestruct2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-enum-tuplestruct2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum E { V0, V16(u16) }\n struct S(E, u16, u16);"}, {"sha": "c23440f991a8996621c06ddac12c1da954bfccfa", "filename": "src/test/run-pass/consts/const-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-err.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // check for const_err regressions\n \n #![deny(const_err)]"}, {"sha": "639f13931144df89b1df5776d2d090aff0d3decd", "filename": "src/test/run-pass/consts/const-fields-and-indexing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fields-and-indexing.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n \n const x : [isize; 4] = [1,2,3,4];"}, {"sha": "78276f17e57da6120e48d309afd8a475a51e5cdb", "filename": "src/test/run-pass/consts/const-fn-const-eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-const-eval.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![feature(min_const_fn)]\n \n const fn add(x: usize, y: usize) -> usize {"}, {"sha": "7c6b2df0cde947a0bb3f5c97d0f48d13b9347879", "filename": "src/test/run-pass/consts/const-fn-stability-calls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-stability-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-stability-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-fn-stability-calls.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // Test use of const fn from another crate without a feature gate.\n \n // aux-build:const_fn_lib.rs"}, {"sha": "83ebaff3249b48ec7ff0f1bfeee3d0d3095fcff6", "filename": "src/test/run-pass/consts/const-index-feature-gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-index-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-index-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-index-feature-gate.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n const ARR: [usize; 1] = [2];\n const ARR2: [i32; ARR[0]] = [5, 6];\n "}, {"sha": "289717724c91ce21349b2fd903229536b46caccb", "filename": "src/test/run-pass/consts/const-nullary-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-nullary-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-nullary-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-nullary-enum.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum Foo {\n     Bar,"}, {"sha": "b0e91e616a08ca2a9d5c3efccf2f8ccfacff52e7", "filename": "src/test/run-pass/consts/const-pattern-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-pattern-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-pattern-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-pattern-variant.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unreachable_patterns)]\n #![feature(min_const_fn)]\n \n #[derive(PartialEq, Eq)]"}, {"sha": "768aab29c1f09b222d990cef7121b6ee39a07fa4", "filename": "src/test/run-pass/consts/const-rec-and-tup.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-rec-and-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-rec-and-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-rec-and-tup.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n #![allow(overflowing_literals)]\n "}, {"sha": "96db2c884310dfc55fa0ab2ec3405b3c0f29666d", "filename": "src/test/run-pass/consts/const-region-ptrs-noncopy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-region-ptrs-noncopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-region-ptrs-noncopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-region-ptrs-noncopy.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n \n type Big = [u64; 8];"}, {"sha": "6732e4f14c8801cea25fe61e8173a3884fc5c3ae", "filename": "src/test/run-pass/consts/const-size_of-align_of.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-size_of-align_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-size_of-align_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-size_of-align_of.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![feature(min_const_fn)]\n \n use std::mem;"}, {"sha": "91ff3daa94fff4a4c7a255c8911875f8cd4e58ee", "filename": "src/test/run-pass/consts/const-str-ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-str-ptr.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n use std::{str, string};\n \n const A: [u8; 2] = ['h' as u8, 'i' as u8];"}, {"sha": "a968e8aa3972d467480a02f0a6625298d9088007", "filename": "src/test/run-pass/consts/const-struct-offsets.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-struct-offsets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-struct-offsets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-struct-offsets.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n #![allow(non_upper_case_globals)]\n "}, {"sha": "fddfedec393e5d897e8df1ba13d2fe70781bf7b6", "filename": "src/test/run-pass/consts/const-trait-to-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-trait-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-trait-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-trait-to-trait.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // Issue #24644 - block causes a &Trait -> &Trait coercion:\n trait Trait {}\n "}, {"sha": "cb60b2fdf07697b4d454408d063fe4667ef6f7ff", "filename": "src/test/run-pass/consts/const-unsafe-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts%2Fconst-unsafe-fn.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // A quick test of 'unsafe const fn' functionality\n \n #![feature(min_const_fn)]"}, {"sha": "b921ce01cfd2edd82fc6adbd5c3aee947cb35694", "filename": "src/test/run-pass/cross-crate/static-array-across-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcross-crate%2Fstatic-array-across-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcross-crate%2Fstatic-array-across-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcross-crate%2Fstatic-array-across-crate.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // aux-build:pub_static_array.rs\n \n extern crate pub_static_array as array;"}, {"sha": "70a6a052af9531d77c69414d1bc9ad47872b3d94", "filename": "src/test/run-pass/cross-crate/xcrate-trait-lifetime-param.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcross-crate%2Fxcrate-trait-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fcross-crate%2Fxcrate-trait-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcross-crate%2Fxcrate-trait-lifetime-param.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // aux-build:xcrate-trait-lifetime-param.rs\n \n // pretty-expanded FIXME #23616"}, {"sha": "835365820d7ff76f149aa0bbb66a1b5a41348388", "filename": "src/test/run-pass/ctfe/assoc-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fassoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fassoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fassoc-const.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n \n trait Nat {\n     const VALUE: usize;"}, {"sha": "0fcf9a5acbdb192b07427da49ab0218b93babedf", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement-3.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n #![feature(const_let)]\n "}, {"sha": "b7ed8af35d4c1de056bdba84d0a6e7f0255ae570", "filename": "src/test/run-pass/ctfe/const-block-non-item-statement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-block-non-item-statement.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n #![feature(const_let)]\n "}, {"sha": "88f0d0714f9a1a66d08dbdaff8b85d61608b354a", "filename": "src/test/run-pass/ctfe/const-fn-destructuring-arg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n // test that certain things are disallowed in constant functions\n "}, {"sha": "40fdcda355fad1309580fdf2d301488dd23840b2", "filename": "src/test/run-pass/ctfe/ice-48279.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fice-48279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fice-48279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fice-48279.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_unsafe)]\n \n // https://github.com/rust-lang/rust/issues/48279\n "}, {"sha": "54e0e83efed3a4d1b9817e19aee8ffffdfaecab1", "filename": "src/test/run-pass/ctfe/issue-37550.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fissue-37550.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n \n #![feature(const_fn, const_let)]\n "}, {"sha": "1c6d72d530f07be47006568531d7995cd25810f0", "filename": "src/test/run-pass/ctfe/match-const-fn-structs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fmatch-const-fn-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fmatch-const-fn-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fmatch-const-fn-structs.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n \n // https://github.com/rust-lang/rust/issues/46114\n "}, {"sha": "f79fbe72bdf97ace947bf9ee629e6fdcde8ee40f", "filename": "src/test/run-pass/ctfe/mozjs-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fmozjs-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fctfe%2Fmozjs-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fmozjs-error.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n \n struct CustomAutoRooterVFTable {"}, {"sha": "916488fcbe9da85973422c38cf8fb4163c4c6922", "filename": "src/test/run-pass/deriving/deriving-clone-array.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-clone-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-clone-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-clone-array.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // test for issue #30244\n \n #[derive(Copy, Clone)]"}, {"sha": "09a0a6fdeae1f15c5bf62582c8f55cde6909eb23", "filename": "src/test/run-pass/deriving/deriving-clone-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-clone-enum.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n #[derive(Clone)]"}, {"sha": "74258411d7fd9c0e3d06a76b9ed2d58581b828b7", "filename": "src/test/run-pass/deriving/deriving-clone-generic-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-clone-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-clone-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-clone-generic-enum.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n #[derive(Clone)]"}, {"sha": "e149e0e1e0ea95bfc5cf48ac39d9284fe2f58122", "filename": "src/test/run-pass/deriving/deriving-hash.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-hash.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n #![allow(deprecated)]\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]"}, {"sha": "326a95bdf0271baa87b87d79de05daf2b55fb4e2", "filename": "src/test/run-pass/deriving/deriving-meta-multiple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-meta-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-meta-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-meta-multiple.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_must_use)]\n+#![allow(unused_imports)]\n // pretty-expanded FIXME #23616\n #![allow(deprecated)]\n "}, {"sha": "cf016f3e0c688cc7f8f84ef920570a11134c508c", "filename": "src/test/run-pass/deriving/deriving-meta.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-meta.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_must_use)]\n+#![allow(unused_imports)]\n // pretty-expanded FIXME #23616\n #![allow(deprecated)]\n "}, {"sha": "d5f2535cb706ba94cf0cc1723232906b02b5f02d", "filename": "src/test/run-pass/deriving/deriving-show-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show-2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n use std::fmt;\n \n #[derive(Debug)]"}, {"sha": "000cbe9fa0908862aeade850abc4d171f25df9d6", "filename": "src/test/run-pass/deriving/deriving-show.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-show.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #[derive(Debug)]\n struct Unit;\n "}, {"sha": "a3d4e179731a7e952e7a464d5d2b44e29536a250", "filename": "src/test/run-pass/deriving/deriving-via-extension-c-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-c-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-c-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-c-enum.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #[derive(PartialEq, Debug)]\n enum Foo {\n     Bar,"}, {"sha": "8afce9a9e47588a56545a64e467f4f009769f928", "filename": "src/test/run-pass/deriving/deriving-via-extension-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-enum.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #[derive(PartialEq, Debug)]\n enum Foo {\n     Bar(isize, isize),"}, {"sha": "be44fc4d057668fd889ca944ece85dd47ef2267c", "filename": "src/test/run-pass/deriving/deriving-via-extension-hash-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-hash-enum.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #[derive(Hash)]\n enum Foo {\n     Bar(isize, char),"}, {"sha": "17133f6967502e1d8b9af6b3b95931358727bfa5", "filename": "src/test/run-pass/deriving/deriving-via-extension-hash-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-hash-struct.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n #[derive(Hash)]"}, {"sha": "babe99b3c56ec9a691aa233c150132eb2c89dc44", "filename": "src/test/run-pass/deriving/deriving-via-extension-struct-like-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-struct-like-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-struct-like-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-via-extension-struct-like-enum-variant.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #[derive(PartialEq, Debug)]\n enum S {\n     X { x: isize, y: isize },"}, {"sha": "b171c1c3a06dc9efee8e8d9b75886b3913fd1f34", "filename": "src/test/run-pass/drop/drop-struct-as-object.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-struct-as-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-struct-as-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-struct-as-object.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n #![allow(non_upper_case_globals)]\n \n // Test that destructor on a struct runs successfully after the struct"}, {"sha": "a34e922a60650b17ce9dd2edd4dc888ff429f873", "filename": "src/test/run-pass/drop/drop-trait-enum.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-trait-enum.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_assignments)]\n+#![allow(unused_variables)]\n // ignore-emscripten no threads support\n \n #![feature(box_syntax)]"}, {"sha": "fc1c0baf4b4b3247152bca8502499db584ec6a2b", "filename": "src/test/run-pass/drop/drop-trait-generic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-trait-generic.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n struct S<T> {\n     x: T\n }"}, {"sha": "61ce68037ce5d395f293dea9452853139dd67f36", "filename": "src/test/run-pass/drop/drop-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-trait.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n struct Foo {\n     x: isize\n }"}, {"sha": "6ff17a33d4a44b5c8dc4a8024259f3a9a32c2911", "filename": "src/test/run-pass/drop/drop-uninhabited-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-uninhabited-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-uninhabited-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdrop-uninhabited-enum.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n enum Foo { }"}, {"sha": "8fecaa2a109a2c7bd132310b6891b2399bde8d48", "filename": "src/test/run-pass/drop/dynamic-drop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_assignments)]\n+#![allow(unused_variables)]\n // revisions:lexical nll\n #![cfg_attr(nll, feature(nll))]\n "}, {"sha": "a8fa202e3b5e0e0d486d3dcd5bad9e41d62997cf", "filename": "src/test/run-pass/drop/no-drop-flag-size.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fno-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdrop%2Fno-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fno-drop-flag-size.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n use std::mem::size_of;\n \n struct Test<T> {"}, {"sha": "64ec31433561222c1c37e7721ba7bb63a48c0f15", "filename": "src/test/run-pass/dynamically-sized-types/dst-coerce-rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coerce-rc.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n #![allow(stable_features)]\n // Test a very simple custom DST coercion.\n "}, {"sha": "10a59599b40e826cf8690931aef0cc2b5ffbaf0a", "filename": "src/test/run-pass/dynamically-sized-types/dst-coercions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-coercions.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Test coercions involving DST and/or raw pointers\n \n // pretty-expanded FIXME #23616"}, {"sha": "84f0233711090b1761d5f194566e54cacb7fb6ad", "filename": "src/test/run-pass/dynamically-sized-types/dst-field-align.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-field-align.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n struct Foo<T: ?Sized> {\n     a: u16,\n     b: T"}, {"sha": "7dd5c19379589228784909a83cb6bdd10bcfd911", "filename": "src/test/run-pass/dynamically-sized-types/dst-index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamically-sized-types%2Fdst-index.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Test that overloaded index expressions with DST result types\n // work and don't ICE.\n "}, {"sha": "f468da4a449d730da5a645f0e9a2fad71904639d", "filename": "src/test/run-pass/extern/extern-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-1.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n extern fn f() {"}, {"sha": "28157c5a8d5e94b62b5ca9aeb05fce2c935f0460", "filename": "src/test/run-pass/extern/extern-call-deep2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-deep2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_must_use)]\n // ignore-emscripten no threads support\n \n #![feature(libc)]"}, {"sha": "ea18069fa32fcbb84ca8f6a0c8e3ed15fbb1461e", "filename": "src/test/run-pass/extern/extern-call-scrub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-call-scrub.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_must_use)]\n // This time we're testing repeatedly going up and down both stacks to\n // make sure the stack pointers are maintained properly in both\n // directions"}, {"sha": "51b2498b6c76eb8c238e81959760c785d516b11f", "filename": "src/test/run-pass/extern/extern-mod-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-mod-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-mod-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-mod-abi.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n extern \"C\" {"}, {"sha": "6ca1815a1917e984b6b9be127410c64d56e59ca2", "filename": "src/test/run-pass/extern/extern-prelude-no-speculative.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-no-speculative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-no-speculative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-prelude-no-speculative.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // compile-flags: --extern LooksLikeExternCrate=/path/to/nowhere\n \n mod m {"}, {"sha": "955a756ebdc8ccd7a67f9bfa199791ca2bedddf1", "filename": "src/test/run-pass/extern/extern-types-inherent-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-inherent-impl.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test that inherent impls can be defined for extern types.\n \n #![feature(extern_types)]"}, {"sha": "5110bd42690c8d5e1b8ffe0e1b383f294d230cf3", "filename": "src/test/run-pass/extern/extern-types-pointer-cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-pointer-cast.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test that pointers to extern types can be cast from/to usize,\n // despite being !Sized.\n "}, {"sha": "9a535fd1931b76ed7306d157906ba3713a35f1fb", "filename": "src/test/run-pass/extern/extern-types-thin-pointer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-thin-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-thin-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-thin-pointer.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test that pointers and references to extern types are thin, ie they have the same size and\n // alignment as a pointer to ().\n "}, {"sha": "d427e66757327162363453e15dc5a4413f151edb", "filename": "src/test/run-pass/extern/extern-types-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern%2Fextern-types-trait-impl.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test that traits can be implemented for extern types.\n \n #![feature(extern_types)]"}, {"sha": "8811d313994df6866e1d06576e6fdea752f3694d", "filename": "src/test/run-pass/for-loop-while/break-value.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fbreak-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fbreak-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fbreak-value.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unreachable_code)]\n // pretty-expanded FIXME #23616\n \n fn int_id(x: isize) -> isize { return x; }"}, {"sha": "bcc5ad7b7ad7288c6e23a5330737d6f10877529f", "filename": "src/test/run-pass/for-loop-while/for-loop-goofiness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-goofiness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-goofiness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-goofiness.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum BogusOption<T> {\n     None,"}, {"sha": "c91cd115dfb4c2e8d49f659ee31527e9d7d8902c", "filename": "src/test/run-pass/for-loop-while/for-loop-no-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-no-std.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n #![feature(lang_items, start, alloc)]\n #![no_std]\n "}, {"sha": "687253baa654405294262da2e2dee2ee76a52863", "filename": "src/test/run-pass/for-loop-while/label_break_value.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Flabel_break_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Flabel_break_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Flabel_break_value.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_assignments)]\n #![feature(label_break_value)]\n \n // Test control flow to follow label_break_value semantics"}, {"sha": "57d846d6557b4e4053a036d08ebb8aaa6592f1c0", "filename": "src/test/run-pass/for-loop-while/liveness-assign-imm-local-after-loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fliveness-assign-imm-local-after-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fliveness-assign-imm-local-after-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fliveness-assign-imm-local-after-loop.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_assignments)]\n // pretty-expanded FIXME #23616\n \n #![allow(unreachable_code)]"}, {"sha": "4b148eba9d9a36c12c7508421396f90361184db9", "filename": "src/test/run-pass/for-loop-while/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fliveness-move-in-loop.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "2038df4e2a4d7c29f4ec0e9a17857efb6d73fe87", "filename": "src/test/run-pass/for-loop-while/loop-break-value.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Floop-break-value.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unreachable_code)]\n #![feature(never_type)]\n \n #[allow(unused)]"}, {"sha": "47e5e71c62368f36d67da40d29b9f0fcf6417deb", "filename": "src/test/run-pass/for-loop-while/loop-diverges.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Floop-diverges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Floop-diverges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Floop-diverges.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_parens)]\n // pretty-expanded FIXME #23616\n \n /* Make sure a loop{} can be the tailexpr in the body"}, {"sha": "218aea5ee1daa6d688ae0cc063bad299f1ce1305", "filename": "src/test/run-pass/for-loop-while/while-label.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fwhile-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fwhile-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fwhile-label.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unreachable_code)]\n \n \n pub fn main() {"}, {"sha": "2cdf273f3e33a83c57b3d3e316315847cf130c1b", "filename": "src/test/run-pass/for-loop-while/while-loop-constraints-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fwhile-loop-constraints-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fwhile-loop-constraints-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Fwhile-loop-constraints-2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_assignments)]\n #![allow(unused_variables)]\n \n pub fn main() {"}, {"sha": "6b7b6d619deec3102df07f7cbb13f11967c96d9a", "filename": "src/test/run-pass/foreign/foreign-mod-unused-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign-mod-unused-const.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n mod foo {"}, {"sha": "bd6c8e6b53d60ddbdb950092c127cadaec1e427e", "filename": "src/test/run-pass/foreign/foreign2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign%2Fforeign2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // ignore-wasm32-bare no libc to test ffi with\n // pretty-expanded FIXME #23616\n "}, {"sha": "af71c95dc676a877b81b17d02aabd7387a5b6e00", "filename": "src/test/run-pass/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fexpect-infer-supply-two-infers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fexpect-infer-supply-two-infers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fexpect-infer-supply-two-infers.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n fn with_closure<A, F>(_: F)\n     where F: FnOnce(Vec<A>, A)\n {"}, {"sha": "2ed3663bb57853e651843dac4dd2745e59670629", "filename": "src/test/run-pass/functions-closures/closure-expected-type/issue-38714.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fissue-38714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fissue-38714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-expected-type%2Fissue-38714.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n struct UsizeRef<'a> {\n     a: &'a usize\n }"}, {"sha": "95a9438300d928e93293d47c69b168c551783b4e", "filename": "src/test/run-pass/functions-closures/closure-reform.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure-reform.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n "}, {"sha": "747afc1330167d4c6ff1fe22c7e7d0daa968d1b0", "filename": "src/test/run-pass/functions-closures/closure_to_fn_coercion-expected-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure_to_fn_coercion-expected-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure_to_fn_coercion-expected-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fclosure_to_fn_coercion-expected-types.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Ensure that we deduce expected argument types when a `fn()` type is expected (#41755)\n \n fn foo(f: fn(Vec<u32>) -> usize) { }"}, {"sha": "166f05368be6d7e3ea4dac827b0514d968f629db", "filename": "src/test/run-pass/functions-closures/fn-coerce-field.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Ffn-coerce-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Ffn-coerce-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Ffn-coerce-field.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n #![allow(non_camel_case_types)]\n "}, {"sha": "02b05513ad7dbdc6707d03f9e149fbc0d8326618", "filename": "src/test/run-pass/functions-closures/fn-item-type-cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Ffn-item-type-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Ffn-item-type-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Ffn-item-type-cast.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // Test explicit coercions from a fn item type to a fn pointer type.\n \n "}, {"sha": "ad931a836b8f5106744f34f1bebed2ee27e3fa5d", "filename": "src/test/run-pass/functions-closures/fn-item-type-coerce.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Ffn-item-type-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Ffn-item-type-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Ffn-item-type-coerce.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Test implicit coercions from a fn item type to a fn pointer type.\n \n // pretty-expanded FIXME #23616"}, {"sha": "95592993cb61aceaa73a55fa2f197a5931f815be", "filename": "src/test/run-pass/functions-closures/parallel-codegen-closures.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fparallel-codegen-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fparallel-codegen-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctions-closures%2Fparallel-codegen-closures.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n #![allow(stable_features)]\n \n // Tests parallel codegen - this can fail if the symbol for the anonymous"}, {"sha": "ff4d3e881f04ca346a6196883cbcc65626ce0c5c", "filename": "src/test/run-pass/generator/issue-52398.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-52398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-52398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-52398.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n \n #![feature(generators)]\n "}, {"sha": "25230df1749c7324dd4347b7e150d7b64b73b649", "filename": "src/test/run-pass/generator/match-bindings.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerator%2Fmatch-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerator%2Fmatch-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fmatch-bindings.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n #![feature(generators)]\n "}, {"sha": "655ed20ac1f10218b63a5879bc044e156e1be643", "filename": "src/test/run-pass/generator/too-live-local-in-immovable-gen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Ftoo-live-local-in-immovable-gen.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_unsafe)]\n \n #![feature(generators)]\n "}, {"sha": "d74885495abb0859eff4b0b38c3109409258da92", "filename": "src/test/run-pass/generator/yield-in-args-rev.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-in-args-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-in-args-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-in-args-rev.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n // Test that a borrow that occurs after a yield in the same\n // argument list is not treated as live across the yield by"}, {"sha": "82804b253a7a4268cb7a62882564db2b89075b3a", "filename": "src/test/run-pass/generator/yield-subtype.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fyield-subtype.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(dead_code)]\n \n // revisions:lexical nll\n //[nll]compile-flags: -Z disable-nll-user-type-assert"}, {"sha": "4cb663bc9eeb536119e0f27f8ef57d3881c11fff", "filename": "src/test/run-pass/generics/generic-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-fn.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_assignments)]\n \n fn id<T>(x: T) -> T { return x; }\n "}, {"sha": "798d5dcee2ed7a4c92127823fe4ecb026dda629b", "filename": "src/test/run-pass/generics/generic-tag-match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-tag-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-tag-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-tag-match.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_assignments)]\n #![allow(non_camel_case_types)]\n \n enum foo<T> { arm(T), }"}, {"sha": "bc7af903b321d4ae42cdc1beb97eaf0f593ab74a", "filename": "src/test/run-pass/generics/generic-tag.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-tag.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_assignments)]\n #![allow(non_camel_case_types)]\n \n // pretty-expanded FIXME #23616"}, {"sha": "ccea523c69cd9e081f4817c6b2877fe7422fa269", "filename": "src/test/run-pass/generics/generic-type-synonym.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-type-synonym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-type-synonym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-type-synonym.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n \n // pretty-expanded FIXME #23616"}, {"sha": "182f516a3c8ad4119737076f996e88348ad958b4", "filename": "src/test/run-pass/generics/generic-unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerics%2Fgeneric-unique.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![feature(box_syntax)]\n \n struct Triple<T> { x: T, y: T, z: T }"}, {"sha": "7d13e64de2fa8bac89a2a0d4971aa42aea21db39", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-binder-levels-in-object-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-binder-levels-in-object-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-binder-levels-in-object-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-binder-levels-in-object-types.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // Test that we handle binder levels in object types correctly.\n // Initially, the reference to `'tcx` in the object type\n // `&Typer<'tcx>` was getting an incorrect binder level, yielding"}, {"sha": "8856c08bee724957632454acd29b8d4ef22c3343", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-debruijn-object-types-in-closures.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n trait Typer<'tcx> {"}, {"sha": "337935ad7f093fc49308d0fea16125335661d02d", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-precedence-of-plus-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus-where-clause.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n // Test that `F : Fn(isize) -> isize + Send` is interpreted as two"}, {"sha": "4b85b2b4077d74d47a65e7054021bdbd7c69da45", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-precedence-of-plus.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n // Test that `Fn(isize) -> isize + 'static` parses as `(Fn(isize) -> isize) +"}, {"sha": "cbdead794a99cfe22bafab7c72a69f2d03a22444", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-resolve-lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-resolve-lifetime.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // A basic test of using a higher-ranked trait bound.\n \n // pretty-expanded FIXME #23616"}, {"sha": "c9c3dd33136808d5affbdfa8f82b29ce5a802bc8", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-passed-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-passed-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-trait-object-passed-to-closure.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test that `&PrinterSupport`, which is really short for `&'a\n // PrinterSupport<'b>`, gets properly expanded when it appears in a\n // closure type. This used to result in messed up De Bruijn indices."}, {"sha": "1d54594964c8932d207baeef8672100c07058fb8", "filename": "src/test/run-pass/higher-rank-trait-bounds/hrtb-type-outlives.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-type-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-type-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhigher-rank-trait-bounds%2Fhrtb-type-outlives.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // Test what happens when a HR obligation is applied to an impl with\n // \"outlives\" bounds. Currently we're pretty conservative here; this\n // will probably improve in time."}, {"sha": "8c3e8d221f34a3b26356571bbb0b4577e090fc1c", "filename": "src/test/run-pass/hygiene/hygiene-dodging-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygiene-dodging-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygiene-dodging-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygiene-dodging-1.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_must_use)]\n \n mod x {\n     pub fn g() -> usize {14}"}, {"sha": "892be9695cc17e9d0fe966f9d02b108a3ca44709", "filename": "src/test/run-pass/hygiene/hygienic-labels-in-let.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels-in-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels-in-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels-in-let.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unreachable_code)]\n+\n // Test that labels injected by macros do not break hygiene.  This\n // checks cases where the macros invocations are under the rhs of a\n // let statement."}, {"sha": "e31c1484399fcc663f95bcc9c969338647eef243", "filename": "src/test/run-pass/hygiene/hygienic-labels-in-let.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels-in-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels-in-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels-in-let.stderr?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -1,5 +1,5 @@\n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:23:9\n+  --> $DIR/hygienic-labels-in-let.rs:25:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -11,7 +11,7 @@ LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:55:9\n+  --> $DIR/hygienic-labels-in-let.rs:57:9\n    |\n LL |         'x: loop {\n    |         -- first declared here\n@@ -20,7 +20,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:55:9\n+  --> $DIR/hygienic-labels-in-let.rs:57:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -29,7 +29,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:23:9\n+  --> $DIR/hygienic-labels-in-let.rs:25:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -41,7 +41,7 @@ LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:23:9\n+  --> $DIR/hygienic-labels-in-let.rs:25:9\n    |\n LL |         'x: loop { $e }\n    |         ^^\n@@ -53,7 +53,7 @@ LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:23:9\n+  --> $DIR/hygienic-labels-in-let.rs:25:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -65,7 +65,7 @@ LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:65:9\n+  --> $DIR/hygienic-labels-in-let.rs:67:9\n    |\n LL |         'x: loop {\n    |         -- first declared here\n@@ -74,7 +74,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:65:9\n+  --> $DIR/hygienic-labels-in-let.rs:67:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -83,7 +83,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:65:9\n+  --> $DIR/hygienic-labels-in-let.rs:67:9\n    |\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n@@ -92,7 +92,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:65:9\n+  --> $DIR/hygienic-labels-in-let.rs:67:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -101,7 +101,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:30:9\n+  --> $DIR/hygienic-labels-in-let.rs:32:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -113,7 +113,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:30:9\n+  --> $DIR/hygienic-labels-in-let.rs:32:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -125,7 +125,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:30:9\n+  --> $DIR/hygienic-labels-in-let.rs:32:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -137,7 +137,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:30:9\n+  --> $DIR/hygienic-labels-in-let.rs:32:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -149,7 +149,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:30:9\n+  --> $DIR/hygienic-labels-in-let.rs:32:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -161,7 +161,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:75:9\n+  --> $DIR/hygienic-labels-in-let.rs:77:9\n    |\n LL |         'x: loop {\n    |         -- first declared here\n@@ -170,7 +170,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:75:9\n+  --> $DIR/hygienic-labels-in-let.rs:77:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -179,7 +179,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:75:9\n+  --> $DIR/hygienic-labels-in-let.rs:77:9\n    |\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n@@ -188,7 +188,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:75:9\n+  --> $DIR/hygienic-labels-in-let.rs:77:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -197,7 +197,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:75:9\n+  --> $DIR/hygienic-labels-in-let.rs:77:9\n    |\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n@@ -206,7 +206,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:75:9\n+  --> $DIR/hygienic-labels-in-let.rs:77:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         -- first declared here\n@@ -215,7 +215,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:37:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -227,7 +227,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:37:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -239,7 +239,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:37:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -251,7 +251,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:37:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -263,7 +263,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:37:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -275,7 +275,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:37:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         -- first declared here\n@@ -287,7 +287,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:37:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope"}, {"sha": "e69f9cd1a86cd3cd4ede21f8d60110eae4a4f496", "filename": "src/test/run-pass/hygiene/hygienic-labels.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unreachable_code)]\n // Test that labels injected by macros do not break hygiene.\n \n // Issue #24278: The label/lifetime shadowing checker from #24162"}, {"sha": "7bd2886159e981234d5871a33e6071731171e0cc", "filename": "src/test/run-pass/hygiene/hygienic-labels.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fhygienic-labels.stderr?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -1,5 +1,5 @@\n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:21:9\n+  --> $DIR/hygienic-labels.rs:22:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -11,7 +11,7 @@ LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:46:5\n+  --> $DIR/hygienic-labels.rs:47:5\n    |\n LL |     'x: for _ in 0..1 {\n    |     -- first declared here\n@@ -20,7 +20,7 @@ LL |     'x: loop {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:46:5\n+  --> $DIR/hygienic-labels.rs:47:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -29,7 +29,7 @@ LL |     'x: loop {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:21:9\n+  --> $DIR/hygienic-labels.rs:22:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -41,7 +41,7 @@ LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:21:9\n+  --> $DIR/hygienic-labels.rs:22:9\n    |\n LL |         'x: loop { $e }\n    |         ^^\n@@ -53,7 +53,7 @@ LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:21:9\n+  --> $DIR/hygienic-labels.rs:22:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -65,7 +65,7 @@ LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:52:5\n+  --> $DIR/hygienic-labels.rs:53:5\n    |\n LL |     'x: for _ in 0..1 {\n    |     -- first declared here\n@@ -74,7 +74,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:52:5\n+  --> $DIR/hygienic-labels.rs:53:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -83,7 +83,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:52:5\n+  --> $DIR/hygienic-labels.rs:53:5\n    |\n LL |     'x: loop {\n    |     -- first declared here\n@@ -92,7 +92,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:52:5\n+  --> $DIR/hygienic-labels.rs:53:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -101,7 +101,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:35:9\n+  --> $DIR/hygienic-labels.rs:36:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -113,7 +113,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:35:9\n+  --> $DIR/hygienic-labels.rs:36:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -125,7 +125,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:35:9\n+  --> $DIR/hygienic-labels.rs:36:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -137,7 +137,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:35:9\n+  --> $DIR/hygienic-labels.rs:36:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -149,7 +149,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:35:9\n+  --> $DIR/hygienic-labels.rs:36:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -160,7 +160,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:57:5\n+  --> $DIR/hygienic-labels.rs:58:5\n    |\n LL |     'x: for _ in 0..1 {\n    |     -- first declared here\n@@ -169,7 +169,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:57:5\n+  --> $DIR/hygienic-labels.rs:58:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -178,7 +178,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:57:5\n+  --> $DIR/hygienic-labels.rs:58:5\n    |\n LL |     'x: loop {\n    |     -- first declared here\n@@ -187,7 +187,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:57:5\n+  --> $DIR/hygienic-labels.rs:58:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -196,7 +196,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:57:5\n+  --> $DIR/hygienic-labels.rs:58:5\n    |\n LL |     'x: while 1 + 1 == 2 {\n    |     -- first declared here\n@@ -205,7 +205,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:57:5\n+  --> $DIR/hygienic-labels.rs:58:5\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         -- first declared here\n@@ -214,7 +214,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:28:9\n+  --> $DIR/hygienic-labels.rs:29:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -226,7 +226,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:28:9\n+  --> $DIR/hygienic-labels.rs:29:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -238,7 +238,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:28:9\n+  --> $DIR/hygienic-labels.rs:29:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -250,7 +250,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:28:9\n+  --> $DIR/hygienic-labels.rs:29:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -262,7 +262,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:28:9\n+  --> $DIR/hygienic-labels.rs:29:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -274,7 +274,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:28:9\n+  --> $DIR/hygienic-labels.rs:29:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -286,7 +286,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:28:9\n+  --> $DIR/hygienic-labels.rs:29:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope"}, {"sha": "db9e0de2e9a536621da401999fa230f827e6b72c", "filename": "src/test/run-pass/hygiene/issue-44128.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-44128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-44128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Fissue-44128.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_must_use)]\n #![feature(decl_macro)]\n \n pub macro create_struct($a:ident) {"}, {"sha": "72370396ebbac04b3cba9d65954d54764e7289c5", "filename": "src/test/run-pass/hygiene/legacy_interaction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Flegacy_interaction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fhygiene%2Flegacy_interaction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene%2Flegacy_interaction.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // ignore-pretty pretty-printing is unhygienic\n \n // aux-build:legacy_interaction.rs"}, {"sha": "3bb081181ffd086b59e8eee4d86cf41eb4a7503a", "filename": "src/test/run-pass/impl-trait/nesting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fnesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fnesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fnesting.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n fn foo<T>(t: T) -> impl Into<[T; { const FOO: usize = 1; FOO }]> {\n     [t]"}, {"sha": "731a716d4a5b5f94584e3dd7f234b37602c28117", "filename": "src/test/run-pass/imports/import-glob-0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fimports%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fimports%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimports%2Fimport-glob-0.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n use module_of_many_things::*;\n use dug::too::greedily::and::too::deep::*;\n "}, {"sha": "c4e50c172645d08f9cfb4a3c9fcecbd94a5a6934", "filename": "src/test/run-pass/imports/import-glob-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fimports%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fimports%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimports%2Fimport-glob-1.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n // This should resolve fine. Prior to fix, the last import\n // was being tried too early, and marked as unrsolved before\n // the glob import had a chance to be resolved."}, {"sha": "5768029ef8cd49fd6d1a771b4d054ae358962ad9", "filename": "src/test/run-pass/imports/import-prefix-macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fimports%2Fimport-prefix-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fimports%2Fimport-prefix-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimports%2Fimport-prefix-macro.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n mod a {\n     pub mod b {\n         pub mod c {"}, {"sha": "082e8321e18a6e879abd50d7e87ffe8437a8cfb4", "filename": "src/test/run-pass/imports/import-rename.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fimports%2Fimport-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fimports%2Fimport-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimports%2Fimport-rename.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n use foo::{x, y as fooy};\n use Maybe::{Yes as MaybeYes};\n "}, {"sha": "0f8088c8969fc8509791668f254a3377e9742dac", "filename": "src/test/run-pass/intrinsics/intrinsic-move-val-cleanups.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-move-val-cleanups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-move-val-cleanups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics%2Fintrinsic-move-val-cleanups.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_unsafe)]\n+#![allow(unreachable_code)]\n // ignore-emscripten no threads support\n #![allow(stable_features)]\n "}, {"sha": "109663ac8aea758ce2116d694b52b2aa42317bdc", "filename": "src/test/run-pass/issues/issue-10025.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10025.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n unsafe extern fn foo() {}"}, {"sha": "2f7cbcde803b889704b6a764954c1425b2556a8c", "filename": "src/test/run-pass/issues/issue-10028.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10028.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // aux-build:issue-10028.rs\n \n // pretty-expanded FIXME #23616"}, {"sha": "940b478c615d0a8f198f1515d5da8c4d5b72fd23", "filename": "src/test/run-pass/issues/issue-10228.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10228.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10228.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10228.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n enum StdioContainer {"}, {"sha": "8042797f778ec87431ff6bb9b09621849f7286e9", "filename": "src/test/run-pass/issues/issue-10392.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10392.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n \n struct A { foo: isize }\n struct B { a: isize, b: isize, c: isize }"}, {"sha": "5b7bfe1a02ec98aadba4bb116773717237b6c6f9", "filename": "src/test/run-pass/issues/issue-10396.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10396.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #[derive(Debug)]\n enum Foo<'s> {\n     V(&'s str)"}, {"sha": "705cc3fad132c0817c230b894b7347225bceb3ae", "filename": "src/test/run-pass/issues/issue-10763.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10763.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n extern \"Rust\" fn foo() {}"}, {"sha": "bd5d7059c2134f24bf2ff36ab4876c94a72c8d79", "filename": "src/test/run-pass/issues/issue-10802.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10802.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![feature(box_syntax)]\n \n struct DroppableStruct;"}, {"sha": "6dfa0ecc2918c511c70d0981c59b09012f146897", "filename": "src/test/run-pass/issues/issue-10806.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10806.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "df9dc0b63d9ca5dcfc1bc299ec67a4d94b35fdab", "filename": "src/test/run-pass/issues/issue-10902.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10902.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10902.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-10902.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n pub mod two_tuple {"}, {"sha": "50c87575773e970d600c2f10de73ed68322defed", "filename": "src/test/run-pass/issues/issue-11085.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11085.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11085.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11085.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // compile-flags: --cfg foo\n \n // pretty-expanded FIXME #23616"}, {"sha": "4283ae0fafbb4141fcee3993e12185b45e1349dd", "filename": "src/test/run-pass/issues/issue-1112.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1112.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Issue #1112\n // Alignment of interior pointers to dynamic-size types\n "}, {"sha": "ba17a02dd38756b2b6212f2aa45739d265f3fe33", "filename": "src/test/run-pass/issues/issue-11612.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11612.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // #11612\n // We weren't updating the auto adjustments with all the resolved\n // type information after type check."}, {"sha": "d9bc76f9b033820299ae103cb21dfbcf847f5156", "filename": "src/test/run-pass/issues/issue-11677.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11677.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n \n #![allow(dead_code)]\n "}, {"sha": "7f1669abe1cd251c157818f5e921713989f8acba", "filename": "src/test/run-pass/issues/issue-11709.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11709.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // ignore-pretty issue #37199\n \n // Don't panic on blocks without results"}, {"sha": "b3543f726daa7a9ecb8bf3fa51b70606cdf1e54d", "filename": "src/test/run-pass/issues/issue-11869.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-11869.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n struct A {"}, {"sha": "f9d48b8c835a5a5cdbd23a2c811d9b26b4c29bb5", "filename": "src/test/run-pass/issues/issue-1251.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1251.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_attributes)]\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n // ignore-wasm32-bare no libc to test ffi with\n "}, {"sha": "d9b563be2c0c2d0e4b2812c313c2faa8c2840c54", "filename": "src/test/run-pass/issues/issue-12612.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12612.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n // aux-build:issue_12612_1.rs\n // aux-build:issue_12612_2.rs\n "}, {"sha": "efcc05cc19641f2209f31cc42bd319fcb33fbe55", "filename": "src/test/run-pass/issues/issue-12729.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12729.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12729.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12729.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n pub struct Foo;"}, {"sha": "4070464ba3a832f1ee26102494641e35df7ba629", "filename": "src/test/run-pass/issues/issue-12909.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12909.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12909.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-12909.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n use std::collections::HashMap;"}, {"sha": "0d5a7e07138750195afdf047109112cb433b18fc", "filename": "src/test/run-pass/issues/issue-13204.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13204.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_mut)]\n // Test that when instantiating trait default methods, typeck handles\n // lifetime parameters defined on the method bound correctly.\n "}, {"sha": "1c119bb634df4f75c9fcfbc0233c7a0b5c748270", "filename": "src/test/run-pass/issues/issue-13214.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13214.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // defining static with struct that contains enum\n // with &'static str variant used to cause ICE\n "}, {"sha": "a2a30b26d47d56c063956993c8122fc87cd439c8", "filename": "src/test/run-pass/issues/issue-13304.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13304.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_mut)]\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n "}, {"sha": "a8ca38838d19e441f4c64c251418646dd65cb800", "filename": "src/test/run-pass/issues/issue-13405.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13405.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n struct Foo<'a> {"}, {"sha": "0750a4c89593665a2a745e4e68d6c24424ef4b74", "filename": "src/test/run-pass/issues/issue-13494.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13494.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_must_use)]\n // ignore-emscripten no threads support\n \n // This test may not always fail, but it can be flaky if the race it used to"}, {"sha": "a189b8f1688bb126b410c68f8895eed4dc46b6f2", "filename": "src/test/run-pass/issues/issue-13507-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13507-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13507-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13507-2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n // aux-build:issue13507.rs\n \n extern crate issue13507;"}, {"sha": "7b335d31238f1bac634b01b2289f454e978c9c71", "filename": "src/test/run-pass/issues/issue-13763.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13763.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n mod u8 {"}, {"sha": "e759ef1c5b411db47f0e6920cfead36c180e6a67", "filename": "src/test/run-pass/issues/issue-13808.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13808.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n struct Foo<'a> {"}, {"sha": "98a86748851a863d9745c9495c2b4a9abaf446a0", "filename": "src/test/run-pass/issues/issue-13837.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13837.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n struct TestStruct {"}, {"sha": "4f0ab3c55f24cf9bd8d952a5ca0d8f32b88871e3", "filename": "src/test/run-pass/issues/issue-13902.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13902.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13902.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-13902.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n const JSVAL_TAG_CLEAR: u32 = 0xFFFFFF80;"}, {"sha": "fe54c1cf05c8c09673eb77f7bc57f69bd440d138", "filename": "src/test/run-pass/issues/issue-14330.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14330.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n // pretty-expanded FIXME #23616\n \n #[macro_use] extern crate std as std2;"}, {"sha": "cfd037e31f685a3a119e7acc0e72b6a3f4734776", "filename": "src/test/run-pass/issues/issue-14456.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14456.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_mut)]\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n "}, {"sha": "7cdc54fa59f590fbc0cb31a03b62939d59d52fce", "filename": "src/test/run-pass/issues/issue-1451.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1451.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n #![allow(non_snake_case)]\n #![allow(unused_variables)]"}, {"sha": "69291afb92f24eed9edb12b10c9f6beb9f3f9096", "filename": "src/test/run-pass/issues/issue-14821.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14821.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n trait SomeTrait {}\n struct Meow;\n impl SomeTrait for Meow {}"}, {"sha": "94da75cdc05f846ba18152880e5cae53067c247c", "filename": "src/test/run-pass/issues/issue-14865.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14865.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum X {\n     Foo(usize),"}, {"sha": "dd02e513287aaca6e676df1e40f63b3b1d014242", "filename": "src/test/run-pass/issues/issue-14919.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-14919.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_must_use)]\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n trait Matcher {"}, {"sha": "c8cbc120251f51f9902f5cc81ae719fdd610b658", "filename": "src/test/run-pass/issues/issue-15063.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15063.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n enum Two { A, B}\n impl Drop for Two {\n     fn drop(&mut self) {"}, {"sha": "375cb5e14e55c714d68a7502ffccc2745dcf1434", "filename": "src/test/run-pass/issues/issue-15221.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15221.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(path_statements)]\n // pretty-expanded FIXME #23616\n \n macro_rules! inner {"}, {"sha": "263f9b0bd4b2acf2831cfc9a90b995e9f6052a6e", "filename": "src/test/run-pass/issues/issue-15261.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15261.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_upper_case_globals)]\n \n // pretty-expanded FIXME #23616"}, {"sha": "48bcf2183f09aa44fdf2302618c94f85082b6b83", "filename": "src/test/run-pass/issues/issue-15487.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15487.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15487.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15487.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_attributes)]\n // ignore-windows\n // ignore-wasm32-bare no libs to link\n "}, {"sha": "dedc66336e7be821ede4e3671b5a0595f0a4e1b8", "filename": "src/test/run-pass/issues/issue-15689-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15689-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15689-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15689-2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n #[derive(Clone)]"}, {"sha": "b5a0715bae6b4e30d2b475ad1c8134f1d774707e", "filename": "src/test/run-pass/issues/issue-15730.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15730.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_mut)]\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n fn main() {"}, {"sha": "5ac47bd68bcf17fd357fa4be20a6de08d3944563", "filename": "src/test/run-pass/issues/issue-15735.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15735.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n struct A<'a> {\n     a: &'a i32,\n     b: &'a i32,"}, {"sha": "a8aba30a37f41ede0b7e22a2998e253ca2646a5d", "filename": "src/test/run-pass/issues/issue-15763.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15763.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unreachable_code)]\n #![feature(box_syntax)]\n \n #[derive(PartialEq, Debug)]"}, {"sha": "9c5bea1a53ecf4866c74e94f624ca9d153df8ac7", "filename": "src/test/run-pass/issues/issue-15793.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-15793.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n enum NestedEnum {\n     First,"}, {"sha": "cabed87edda2f71f690539cc09af1c41b3ad1738", "filename": "src/test/run-pass/issues/issue-16441.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16441.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n struct Empty;"}, {"sha": "10c9f316b8903ba66ecb899be1bf0974bafcccb4", "filename": "src/test/run-pass/issues/issue-16452.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16452.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n fn main() {"}, {"sha": "795b1efeeebaa99745fde7c665fd2e0451c4b1cb", "filename": "src/test/run-pass/issues/issue-16560.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16560.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // ignore-emscripten no threads support\n \n use std::thread;"}, {"sha": "d9583809a89fcec4245bf071c9d8bbb04a8ef705", "filename": "src/test/run-pass/issues/issue-16596.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16596.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n trait MatrixRow { fn dummy(&self) { }}\n "}, {"sha": "61b828142109be02c0e8896b59c9f8ee050e714c", "filename": "src/test/run-pass/issues/issue-16597.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16597.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n // compile-flags:--test\n \n mod tests {"}, {"sha": "bc4cbcbd329445d02bcdc9eb1c8bb96b0623a364", "filename": "src/test/run-pass/issues/issue-16602-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16602-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16602-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16602-3.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n+#![allow(unused_assignments)]\n #[derive(Debug)]\n enum Foo {\n     Bar(u32, u32),"}, {"sha": "fdb49c689843064cb8cf3c1b52f5dd7bb02f1a71", "filename": "src/test/run-pass/issues/issue-16668.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16668.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n struct Parser<'a, I, O> {\n     parse: Box<FnMut(I) -> Result<O, String> + 'a>\n }"}, {"sha": "3f1d07b88ec2e147b0562f3b5e054b095be09637", "filename": "src/test/run-pass/issues/issue-16783.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16783.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n pub fn main() {"}, {"sha": "dab126ccc42938a88d525cd78c8caa3fdcb4b6b2", "filename": "src/test/run-pass/issues/issue-16819.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-16819.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // `#[cfg]` on struct field permits empty unusable struct\n \n struct S {"}, {"sha": "90b71d5dfe28d8240fdb1f8456b6328267249788", "filename": "src/test/run-pass/issues/issue-1701.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1701.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1701.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1701.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n "}, {"sha": "1f45e01203f7877261f8d865a26f030689317022", "filename": "src/test/run-pass/issues/issue-17074.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17074.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n \n static X2: u64 = !0 as u16 as u64;\n static Y2: u64 = !0 as u32 as u64;"}, {"sha": "fafcdde2bbe3e4be2569dc5948681855d03f070d", "filename": "src/test/run-pass/issues/issue-17121.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17121.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n // ignore-cloudabi no std::fs\n "}, {"sha": "c27eb74c90f587ec726432d07282fcdb71fa1be2", "filename": "src/test/run-pass/issues/issue-17216.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17216.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n struct Leak<'a> {\n     dropped: &'a mut bool\n }"}, {"sha": "b1a77d73aa473948d2037302fcff337688beacc0", "filename": "src/test/run-pass/issues/issue-17336.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17336.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17336.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17336.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_must_use)]\n #[allow(dead_code)]\n fn check(a: &str) {\n     let x = a as *const str;"}, {"sha": "51f617340da5364b9da8abe41a630e35704bd416", "filename": "src/test/run-pass/issues/issue-17718-borrow-interior.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718-borrow-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718-borrow-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718-borrow-interior.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n struct S { a: usize }\n \n static A: S = S { a: 3 };"}, {"sha": "16f9cea82fa10db51008bff949779a4e5624b330", "filename": "src/test/run-pass/issues/issue-17718-const-destructors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718-const-destructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718-const-destructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718-const-destructors.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n struct A;\n impl Drop for A {\n     fn drop(&mut self) {}"}, {"sha": "f6a2f0997531ea59ca7268b9bf167c2ec2222547", "filename": "src/test/run-pass/issues/issue-17718-static-unsafe-interior.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718-static-unsafe-interior.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+#![allow(unused_imports)]\n // pretty-expanded FIXME #23616\n \n use std::marker;"}, {"sha": "33e69824dfcbc9edccdf2c45a412c7e593c1865e", "filename": "src/test/run-pass/issues/issue-17718.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17718.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // aux-build:issue-17718-aux.rs\n \n extern crate issue_17718_aux as other;"}, {"sha": "c0ab42b4264b4433e1ae4d5f08636f80f0757d2a", "filename": "src/test/run-pass/issues/issue-17732.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17732.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n trait Person {"}, {"sha": "0cdefc290a860245423b675a39c8987bb50acadf", "filename": "src/test/run-pass/issues/issue-17746.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17746.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Regression test for #17746\n \n fn main() {}"}, {"sha": "7b8fa866fffd17476510776db66f610b2ab52967", "filename": "src/test/run-pass/issues/issue-17756.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17756.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n #![allow(non_upper_case_globals)]\n \n const count : usize = 2 as usize;"}, {"sha": "ed5acf5e1bb822fbab303b34cfbc5a1c60acb3fb", "filename": "src/test/run-pass/issues/issue-17771.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17771.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n trait Aaa { fn dummy(&self) { } }"}, {"sha": "ddeac242f78ecb4d109b7496a3f58f0132541fd9", "filename": "src/test/run-pass/issues/issue-17816.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17816.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n use std::marker::PhantomData;\n \n fn main() {"}, {"sha": "9b76c9fca2aedd1501b74976a31711a53ab460ce", "filename": "src/test/run-pass/issues/issue-17904.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-17904.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test that we can parse where clauses on various forms of tuple\n // structs.\n "}, {"sha": "9118ad28493d51425992ad033f16b7d69490f963", "filename": "src/test/run-pass/issues/issue-18083.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18083.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18083.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18083.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n // These crossed imports should resolve fine, and not block on\n // each other and be reported as unresolved.\n "}, {"sha": "6d80e2664dc60fec9caaa79a29e1f09dd15ca5ea", "filename": "src/test/run-pass/issues/issue-18110.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18110.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unreachable_code)]\n // pretty-expanded FIXME #23616\n \n fn main() {"}, {"sha": "d37b6df6e34a8949ddf3be1e6ebf59aeec633d76", "filename": "src/test/run-pass/issues/issue-1821.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1821.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n // Issue #1821 - Don't recurse trying to typecheck this"}, {"sha": "a3e7552691bf967bc35d1def67da933981024bf5", "filename": "src/test/run-pass/issues/issue-18353.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18353.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18353.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18353.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test that wrapping an unsized struct in an enum which gets optimised does\n // not ICE.\n "}, {"sha": "09f3e451ad134ead3b97c9ac367e7e044dabcd0d", "filename": "src/test/run-pass/issues/issue-18446.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18446.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // Test that methods in trait impls should override default methods.\n \n trait T {"}, {"sha": "f27d8032dd6600060a8f1a65c0271cf0d11e8dae", "filename": "src/test/run-pass/issues/issue-1866.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-1866.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n // pretty-expanded FIXME #23616"}, {"sha": "8ed663cbbd6f453e418a8a346c8633bc642b9297", "filename": "src/test/run-pass/issues/issue-18738.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18738.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18738.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18738.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #[derive(Eq, PartialEq, PartialOrd, Ord)]\n enum Test<'a> {\n     Int(&'a isize),"}, {"sha": "4f771752c865a00d4cdb2b73e7eeb5c923f7c8a7", "filename": "src/test/run-pass/issues/issue-18906.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18906.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n pub trait Borrow<Borrowed: ?Sized> {"}, {"sha": "691d41174303f7dd0010031ee04d484e3992a127", "filename": "src/test/run-pass/issues/issue-18988.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18988.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n pub trait Foo : Send { }\n \n pub struct MyFoo {"}, {"sha": "e4460d33b9e0fd25676b78bae82eab604d1e8a4b", "filename": "src/test/run-pass/issues/issue-19001.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19001.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // check that we handle recursive arrays correctly in `type_of`\n \n struct Loopy {"}, {"sha": "350c17415dacb07ccec6deae69a2f0881e8f416d", "filename": "src/test/run-pass/issues/issue-19037.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19037.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n struct Str([u8]);"}, {"sha": "1ad7f524be4625021d746d0a7b84acda08fb82fe", "filename": "src/test/run-pass/issues/issue-19097.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19097.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // regression test for #19097\n \n struct Foo<T>(T);"}, {"sha": "c26dca255b99ec2393f8b904b648cc4c86431ecf", "filename": "src/test/run-pass/issues/issue-19102.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19102.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_imports)]\n #![deny(unused_qualifications)]\n \n use self::A::B;"}, {"sha": "9826b1b08d25b8fd600758877a3ccb1331dfc946", "filename": "src/test/run-pass/issues/issue-19127.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19127.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n fn foo<T, F: FnOnce(T) -> T>(f: F) {}"}, {"sha": "8d43ece368024149c90af62ea12db6799e6c2830", "filename": "src/test/run-pass/issues/issue-19129-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19129-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19129-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19129-2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n trait Trait<Input> {"}, {"sha": "62c39d0ff3d749c1a504618bf1bebc57af989078", "filename": "src/test/run-pass/issues/issue-19340-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19340-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19340-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19340-1.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // aux-build:issue-19340-1.rs\n \n // pretty-expanded FIXME #23616"}, {"sha": "3f86c7c9180bd4ba1fa3e9259c6618efc98f5611", "filename": "src/test/run-pass/issues/issue-19340-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19340-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19340-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19340-2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n enum Homura {"}, {"sha": "3f8aad4e0b148e355370a9fffa52e4ff9f436be6", "filename": "src/test/run-pass/issues/issue-19404.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19404.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n use std::any::TypeId;\n use std::rc::Rc;\n "}, {"sha": "efdcce17f5f7c777b02442ab611a6b092075d567", "filename": "src/test/run-pass/issues/issue-19499.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19499.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(path_statements)]\n+#![allow(unused_variables)]\n // Regression test for issue #19499. Due to incorrect caching of trait\n // results for closures with upvars whose types were not fully\n // computed, this rather bizarre little program (along with many more"}, {"sha": "604e3d608741aa6d47057ae0304537f6e942d9b4", "filename": "src/test/run-pass/issues/issue-19631.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19631.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n trait PoolManager {"}, {"sha": "5784886e94c955032d254aece0b66d1f36e484ec", "filename": "src/test/run-pass/issues/issue-19632.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19632.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19632.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19632.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n trait PoolManager {"}, {"sha": "f5b1697528f044c8ae36c66734b3879e161f4d93", "filename": "src/test/run-pass/issues/issue-19850.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-19850.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Test that `<Type as Trait>::Output` and `Self::Output` are accepted as type annotations in let\n // bindings\n "}, {"sha": "16ac2babd42753f0fc7755ce6f74b9dc51e846c0", "filename": "src/test/run-pass/issues/issue-20186.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20186.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n struct Foo;\n \n impl Foo {"}, {"sha": "bc87372e14feaf2d46e1f824f1024ae2bc6704eb", "filename": "src/test/run-pass/issues/issue-20313.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20313.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20313.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20313.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n #![feature(link_llvm_intrinsics)]"}, {"sha": "0173b0b2f9cf724908921b05b6b44cb812c224ab", "filename": "src/test/run-pass/issues/issue-20343.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20343.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_variables)]\n // Regression test for Issue #20343.\n \n // pretty-expanded FIXME #23616"}, {"sha": "02d444f414c103197dd1f2313cc8a5d66b2a737e", "filename": "src/test/run-pass/issues/issue-20389.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20389.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // aux-build:issue_20389.rs\n \n // pretty-expanded FIXME #23616"}, {"sha": "f42ba1ff3036573796d7450c89baab8f5f69ae2b", "filename": "src/test/run-pass/issues/issue-20414.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20414.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20414.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20414.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n trait Trait {"}, {"sha": "86d94ad85b381651b8de0f6a79366ff1fe29c607", "filename": "src/test/run-pass/issues/issue-20427.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20427.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20427.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20427.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,9 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+#![allow(unused_imports)]\n #![allow(non_upper_case_globals)]\n #![allow(non_camel_case_types)]\n "}, {"sha": "e00ddf4905fd81c2085284c352f22c4648dafabd", "filename": "src/test/run-pass/issues/issue-20454.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20454.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_must_use)]\n use std::thread;\n \n fn _foo() {"}, {"sha": "fa72cf3e76f4d1fef0d71be3f1a647d430660ba7", "filename": "src/test/run-pass/issues/issue-20616.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20616.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20616.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20616.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n type MyType<'a, T> = &'a T;\n \n // combine lifetime bounds and type arguments in usual way"}, {"sha": "6e30c13204008698489ba87a16157898065773dc", "filename": "src/test/run-pass/issues/issue-2063-resource.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-2063-resource.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed."}, {"sha": "c53565262e81e27716950b0e9a05cff61f70f3ee", "filename": "src/test/run-pass/issues/issue-20644.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20644.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n #![allow(stable_features)]\n \n // A reduced version of the rustbook ice. The problem this encountered"}, {"sha": "df85f615cd2a546b87956321f73b961053b9d419", "filename": "src/test/run-pass/issues/issue-20763-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20763-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20763-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20763-1.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n trait T0 {"}, {"sha": "489b87ce90f8dbeee25b426bd05348a0da671385", "filename": "src/test/run-pass/issues/issue-20763-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20763-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20763-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20763-2.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n trait T0 {"}, {"sha": "e2200c0d39bbe1660dc3eab02b9ee816d68ab7d6", "filename": "src/test/run-pass/issues/issue-20953.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-20953.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_mut)]\n+#![allow(unused_variables)]\n fn main() {\n     let mut shrinker: Box<Iterator<Item=i32>> = Box::new(vec![1].into_iter());\n     println!(\"{:?}\", shrinker.next());"}, {"sha": "20357ecd63a8240269a8ccfc185ecd2f3350724f", "filename": "src/test/run-pass/issues/issue-21033.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21033.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(unused_mut)]\n+#![allow(unused_variables)]\n // pretty-expanded FIXME #23616\n \n #![feature(box_patterns)]"}, {"sha": "e2ad0ba5bb2db8873d14cef95a9889a76231d543", "filename": "src/test/run-pass/issues/issue-21058.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-21058.rs?ref=c9d9cc6e4441bb10ce2ca313fda68e7f05d7bc46", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+#![allow(dead_code)]\n #![feature(core_intrinsics)]\n \n struct NT(str);"}]}