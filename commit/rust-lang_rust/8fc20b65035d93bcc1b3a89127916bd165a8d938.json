{"sha": "8fc20b65035d93bcc1b3a89127916bd165a8d938", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYzIwYjY1MDM1ZDkzYmNjMWIzYTg5MTI3OTE2YmQxNjVhOGQ5Mzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T10:59:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T11:00:05Z"}, "message": "Rename ContainerId -> AssocContainerId", "tree": {"sha": "7e95963bb359eb6eeda8f6aba564fd3eaf7030d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e95963bb359eb6eeda8f6aba564fd3eaf7030d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fc20b65035d93bcc1b3a89127916bd165a8d938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc20b65035d93bcc1b3a89127916bd165a8d938", "html_url": "https://github.com/rust-lang/rust/commit/8fc20b65035d93bcc1b3a89127916bd165a8d938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fc20b65035d93bcc1b3a89127916bd165a8d938/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67c2aea182c375108ebb8b923f5679e4f7fef1df", "url": "https://api.github.com/repos/rust-lang/rust/commits/67c2aea182c375108ebb8b923f5679e4f7fef1df", "html_url": "https://github.com/rust-lang/rust/commit/67c2aea182c375108ebb8b923f5679e4f7fef1df"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "afd5231cc1903abea676b3cb05b93db4fc7fa2a9", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=8fc20b65035d93bcc1b3a89127916bd165a8d938", "patch": "@@ -25,7 +25,7 @@ use crate::{\n     path::GenericArgs,\n     path::Path,\n     type_ref::{Mutability, TypeRef},\n-    ContainerId, DefWithBodyId, FunctionLoc, Intern,\n+    AssocContainerId, DefWithBodyId, FunctionLoc, Intern,\n };\n \n pub(super) fn lower(\n@@ -490,7 +490,7 @@ where\n     }\n \n     fn collect_block_items(&mut self, block: &ast::Block) {\n-        let container = ContainerId::DefWithBodyId(self.def);\n+        let container = AssocContainerId::DefWithBodyId(self.def);\n         for item in block.items() {\n             match item {\n                 ast::ModuleItem::FnDef(def) => {"}, {"sha": "14e86936bc9da8225154703f0853c488fd2ea9d3", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=8fc20b65035d93bcc1b3a89127916bd165a8d938", "patch": "@@ -12,8 +12,8 @@ use crate::{\n     db::DefDatabase,\n     src::HasSource,\n     type_ref::{Mutability, TypeRef},\n-    AssocItemId, ConstId, ConstLoc, ContainerId, FunctionId, FunctionLoc, ImplId, Intern, Lookup,\n-    StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n+    AssocContainerId, AssocItemId, ConstId, ConstLoc, FunctionId, FunctionLoc, ImplId, Intern,\n+    Lookup, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -99,7 +99,7 @@ impl TraitData {\n         let auto = src.value.is_auto();\n         let ast_id_map = db.ast_id_map(src.file_id);\n \n-        let container = ContainerId::TraitId(tr);\n+        let container = AssocContainerId::TraitId(tr);\n         let items = if let Some(item_list) = src.value.item_list() {\n             item_list\n                 .impl_items()\n@@ -180,23 +180,23 @@ impl ImplData {\n                 .map(|item_node| match item_node {\n                     ast::ImplItem::FnDef(it) => {\n                         let def = FunctionLoc {\n-                            container: ContainerId::ImplId(id),\n+                            container: AssocContainerId::ImplId(id),\n                             ast_id: AstId::new(src.file_id, items.ast_id(&it)),\n                         }\n                         .intern(db);\n                         def.into()\n                     }\n                     ast::ImplItem::ConstDef(it) => {\n                         let def = ConstLoc {\n-                            container: ContainerId::ImplId(id),\n+                            container: AssocContainerId::ImplId(id),\n                             ast_id: AstId::new(src.file_id, items.ast_id(&it)),\n                         }\n                         .intern(db);\n                         def.into()\n                     }\n                     ast::ImplItem::TypeAliasDef(it) => {\n                         let def = TypeAliasLoc {\n-                            container: ContainerId::ImplId(id),\n+                            container: AssocContainerId::ImplId(id),\n                             ast_id: AstId::new(src.file_id, items.ast_id(&it)),\n                         }\n                         .intern(db);"}, {"sha": "3d42762aeff350b38038594ed706873dabb6ec89", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=8fc20b65035d93bcc1b3a89127916bd165a8d938", "patch": "@@ -71,7 +71,7 @@ impl_intern_key!(FunctionId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct FunctionLoc {\n-    pub container: ContainerId,\n+    pub container: AssocContainerId,\n     pub ast_id: AstId<ast::FnDef>,\n }\n \n@@ -187,7 +187,7 @@ pub struct ConstId(salsa::InternId);\n impl_intern_key!(ConstId);\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ConstLoc {\n-    pub container: ContainerId,\n+    pub container: AssocContainerId,\n     pub ast_id: AstId<ast::ConstDef>,\n }\n \n@@ -259,7 +259,7 @@ impl_intern_key!(TypeAliasId);\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeAliasLoc {\n-    pub container: ContainerId,\n+    pub container: AssocContainerId,\n     pub ast_id: AstId<ast::TypeAliasDef>,\n }\n \n@@ -331,7 +331,7 @@ pub struct LocalTypeParamId(RawId);\n impl_arena_id!(LocalTypeParamId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum ContainerId {\n+pub enum AssocContainerId {\n     ModuleId(ModuleId),\n     ImplId(ImplId),\n     TraitId(TraitId),\n@@ -479,13 +479,13 @@ pub trait HasModule {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId;\n }\n \n-impl HasModule for ContainerId {\n+impl HasModule for AssocContainerId {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match *self {\n-            ContainerId::ModuleId(it) => it,\n-            ContainerId::ImplId(it) => it.lookup(db).container,\n-            ContainerId::TraitId(it) => it.lookup(db).container,\n-            ContainerId::DefWithBodyId(it) => it.module(db),\n+            AssocContainerId::ModuleId(it) => it,\n+            AssocContainerId::ImplId(it) => it.lookup(db).container,\n+            AssocContainerId::TraitId(it) => it.lookup(db).container,\n+            AssocContainerId::DefWithBodyId(it) => it.module(db),\n         }\n     }\n }"}, {"sha": "848959f7c4a6b98ebfa79ecb4c968ca3e9f58244", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=8fc20b65035d93bcc1b3a89127916bd165a8d938", "patch": "@@ -24,7 +24,7 @@ use crate::{\n     },\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n-    AdtId, AstId, ConstLoc, ContainerId, EnumLoc, EnumVariantId, FunctionLoc, ImplLoc, Intern,\n+    AdtId, AssocContainerId, AstId, ConstLoc, EnumLoc, EnumVariantId, FunctionLoc, ImplLoc, Intern,\n     LocalImportId, LocalModuleId, ModuleDefId, ModuleId, StaticLoc, StructLoc, TraitLoc,\n     TypeAliasLoc, UnionLoc,\n };\n@@ -763,7 +763,7 @@ where\n         let def: PerNs = match def.kind {\n             raw::DefKind::Function(ast_id) => {\n                 let def = FunctionLoc {\n-                    container: ContainerId::ModuleId(module),\n+                    container: AssocContainerId::ModuleId(module),\n                     ast_id: AstId::new(self.file_id, ast_id),\n                 }\n                 .intern(self.def_collector.db);\n@@ -787,7 +787,7 @@ where\n             }\n             raw::DefKind::Const(ast_id) => {\n                 let def = ConstLoc {\n-                    container: ContainerId::ModuleId(module),\n+                    container: AssocContainerId::ModuleId(module),\n                     ast_id: AstId::new(self.file_id, ast_id),\n                 }\n                 .intern(self.def_collector.db);\n@@ -808,7 +808,7 @@ where\n             }\n             raw::DefKind::TypeAlias(ast_id) => {\n                 let def = TypeAliasLoc {\n-                    container: ContainerId::ModuleId(module),\n+                    container: AssocContainerId::ModuleId(module),\n                     ast_id: AstId::new(self.file_id, ast_id),\n                 }\n                 .intern(self.def_collector.db);"}, {"sha": "d79c9813b7dc728b9077ea530262373fb22ea01c", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=8fc20b65035d93bcc1b3a89127916bd165a8d938", "patch": "@@ -17,9 +17,9 @@ use crate::{\n     nameres::{BuiltinShadowMode, CrateDefMap},\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n-    AdtId, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n-    HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId,\n-    TypeAliasId, TypeParamId, VariantId,\n+    AdtId, AssocContainerId, ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId,\n+    GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId,\n+    StructId, TraitId, TypeAliasId, TypeParamId, VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -580,13 +580,13 @@ impl HasResolver for DefWithBodyId {\n     }\n }\n \n-impl HasResolver for ContainerId {\n+impl HasResolver for AssocContainerId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         match self {\n-            ContainerId::TraitId(it) => it.resolver(db),\n-            ContainerId::ImplId(it) => it.resolver(db),\n-            ContainerId::ModuleId(it) => it.resolver(db),\n-            ContainerId::DefWithBodyId(it) => it.resolver(db),\n+            AssocContainerId::TraitId(it) => it.resolver(db),\n+            AssocContainerId::ImplId(it) => it.resolver(db),\n+            AssocContainerId::ModuleId(it) => it.resolver(db),\n+            AssocContainerId::DefWithBodyId(it) => it.resolver(db),\n         }\n     }\n }"}, {"sha": "6917c183b3cbc597225cf18220f069eb4887d976", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=8fc20b65035d93bcc1b3a89127916bd165a8d938", "patch": "@@ -8,7 +8,7 @@ use hir_def::{\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n-    AdtId, ContainerId, Lookup, StructFieldId,\n+    AdtId, AssocContainerId, Lookup, StructFieldId,\n };\n use hir_expand::name::{name, Name};\n use ra_syntax::ast::RangeOp;\n@@ -672,7 +672,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 // add obligation for trait implementation, if this is a trait method\n                 match def {\n                     CallableDef::FunctionId(f) => {\n-                        if let ContainerId::TraitId(trait_) = f.lookup(self.db).container {\n+                        if let AssocContainerId::TraitId(trait_) = f.lookup(self.db).container {\n                             // construct a TraitDef\n                             let substs =\n                                 a_ty.parameters.prefix(generics(self.db, trait_.into()).len());"}, {"sha": "a96ab75d1f49e98a2e197c6b0b20e7b80916ab31", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=8fc20b65035d93bcc1b3a89127916bd165a8d938", "patch": "@@ -5,7 +5,7 @@ use std::iter;\n use hir_def::{\n     path::{Path, PathSegment},\n     resolver::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n-    AssocItemId, ContainerId, Lookup,\n+    AssocContainerId, AssocItemId, Lookup,\n };\n use hir_expand::name::Name;\n \n@@ -209,7 +209,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     AssocItemId::TypeAliasId(_) => unreachable!(),\n                 };\n                 let substs = match container {\n-                    ContainerId::ImplId(impl_id) => {\n+                    AssocContainerId::ImplId(impl_id) => {\n                         let impl_substs = Substs::build_for_def(self.db, impl_id)\n                             .fill(iter::repeat_with(|| self.table.new_type_var()))\n                             .build();\n@@ -221,7 +221,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         self.unify(&impl_self_ty, &ty);\n                         Some(substs)\n                     }\n-                    ContainerId::TraitId(trait_) => {\n+                    AssocContainerId::TraitId(trait_) => {\n                         // we're picking this method\n                         let trait_substs = Substs::build_for_def(self.db, trait_)\n                             .push(ty.clone())\n@@ -237,7 +237,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         }));\n                         Some(substs)\n                     }\n-                    ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => None,\n+                    AssocContainerId::ModuleId(_) | AssocContainerId::DefWithBodyId(_) => None,\n                 };\n \n                 self.write_assoc_resolution(id, item.into());"}, {"sha": "7310ef10d91f727691e76bcabb148e337eaa5d3e", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=8fc20b65035d93bcc1b3a89127916bd165a8d938", "patch": "@@ -44,8 +44,8 @@ use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n use hir_def::{\n-    expr::ExprId, type_ref::Mutability, AdtId, ContainerId, DefWithBodyId, GenericDefId, HasModule,\n-    Lookup, TraitId, TypeAliasId,\n+    expr::ExprId, type_ref::Mutability, AdtId, AssocContainerId, DefWithBodyId, GenericDefId,\n+    HasModule, Lookup, TraitId, TypeAliasId,\n };\n use hir_expand::name::Name;\n use ra_db::{impl_intern_key, salsa, CrateId};\n@@ -251,7 +251,7 @@ impl ProjectionTy {\n \n     fn trait_(&self, db: &impl HirDatabase) -> TraitId {\n         match self.associated_ty.lookup(db).container {\n-            ContainerId::TraitId(it) => it,\n+            AssocContainerId::TraitId(it) => it,\n             _ => panic!(\"projection ty without parent trait\"),\n         }\n     }\n@@ -943,7 +943,7 @@ impl HirDisplay for ApplicationTy {\n             }\n             TypeCtor::AssociatedType(type_alias) => {\n                 let trait_ = match type_alias.lookup(f.db).container {\n-                    ContainerId::TraitId(it) => it,\n+                    AssocContainerId::TraitId(it) => it,\n                     _ => panic!(\"not an associated type\"),\n                 };\n                 let trait_name = f.db.trait_data(trait_).name.clone();"}, {"sha": "1c2e7b934db60348babc2fb594211bd6aad01a1c", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=8fc20b65035d93bcc1b3a89127916bd165a8d938", "patch": "@@ -6,8 +6,8 @@ use std::sync::Arc;\n \n use arrayvec::ArrayVec;\n use hir_def::{\n-    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocItemId, ContainerId,\n-    FunctionId, HasModule, ImplId, Lookup, TraitId,\n+    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocContainerId,\n+    AssocItemId, FunctionId, HasModule, ImplId, Lookup, TraitId,\n };\n use hir_expand::name::Name;\n use ra_db::CrateId;\n@@ -451,12 +451,12 @@ fn transform_receiver_ty(\n     self_ty: &Canonical<Ty>,\n ) -> Option<Ty> {\n     let substs = match function_id.lookup(db).container {\n-        ContainerId::TraitId(_) => Substs::build_for_def(db, function_id)\n+        AssocContainerId::TraitId(_) => Substs::build_for_def(db, function_id)\n             .push(self_ty.value.clone())\n             .fill_with_unknown()\n             .build(),\n-        ContainerId::ImplId(impl_id) => inherent_impl_substs(db, impl_id, &self_ty)?,\n-        ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => unreachable!(),\n+        AssocContainerId::ImplId(impl_id) => inherent_impl_substs(db, impl_id, &self_ty)?,\n+        AssocContainerId::ModuleId(_) | AssocContainerId::DefWithBodyId(_) => unreachable!(),\n     };\n     let sig = db.callable_item_signature(function_id.into());\n     Some(sig.params()[0].clone().subst(&substs))"}, {"sha": "6a31014d8b86a752f824326258d12bcb5e570ac0", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=8fc20b65035d93bcc1b3a89127916bd165a8d938", "patch": "@@ -9,7 +9,7 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n \n-use hir_def::{AssocItemId, ContainerId, GenericDefId, ImplId, Lookup, TraitId, TypeAliasId};\n+use hir_def::{AssocContainerId, AssocItemId, GenericDefId, ImplId, Lookup, TraitId, TypeAliasId};\n use ra_db::{\n     salsa::{InternId, InternKey},\n     CrateId,\n@@ -542,7 +542,7 @@ pub(crate) fn associated_ty_data_query(\n     debug!(\"associated_ty_data {:?}\", id);\n     let type_alias: TypeAliasId = from_chalk(db, id);\n     let trait_ = match type_alias.lookup(db).container {\n-        ContainerId::TraitId(t) => t,\n+        AssocContainerId::TraitId(t) => t,\n         _ => panic!(\"associated type not in trait\"),\n     };\n     let generic_params = generics(db, type_alias.into());\n@@ -755,7 +755,7 @@ fn type_alias_associated_ty_value(\n ) -> Arc<AssociatedTyValue<ChalkIr>> {\n     let type_alias_data = db.type_alias_data(type_alias);\n     let impl_id = match type_alias.lookup(db).container {\n-        ContainerId::ImplId(it) => it,\n+        AssocContainerId::ImplId(it) => it,\n         _ => panic!(\"assoc ty value should be in impl\"),\n     };\n "}, {"sha": "8b5b611ecc93bb88e2bf83de0567099c2fb79d1d", "filename": "crates/ra_hir_ty/src/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fc20b65035d93bcc1b3a89127916bd165a8d938/crates%2Fra_hir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Futils.rs?ref=8fc20b65035d93bcc1b3a89127916bd165a8d938", "patch": "@@ -9,7 +9,7 @@ use hir_def::{\n     path::Path,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    ContainerId, GenericDefId, Lookup, TraitId, TypeAliasId, TypeParamId, VariantId,\n+    AssocContainerId, GenericDefId, Lookup, TraitId, TypeAliasId, TypeParamId, VariantId,\n };\n use hir_expand::name::{name, Name};\n \n@@ -155,8 +155,8 @@ fn parent_generic_def(db: &impl DefDatabase, def: GenericDefId) -> Option<Generi\n     };\n \n     match container {\n-        ContainerId::ImplId(it) => Some(it.into()),\n-        ContainerId::TraitId(it) => Some(it.into()),\n-        ContainerId::ModuleId(_) | ContainerId::DefWithBodyId(_) => None,\n+        AssocContainerId::ImplId(it) => Some(it.into()),\n+        AssocContainerId::TraitId(it) => Some(it.into()),\n+        AssocContainerId::ModuleId(_) | AssocContainerId::DefWithBodyId(_) => None,\n     }\n }"}]}