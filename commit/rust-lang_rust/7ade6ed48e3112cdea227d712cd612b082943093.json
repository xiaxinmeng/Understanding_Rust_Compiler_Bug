{"sha": "7ade6ed48e3112cdea227d712cd612b082943093", "node_id": "C_kwDOAAsO6NoAKDdhZGU2ZWQ0OGUzMTEyY2RlYTIyN2Q3MTJjZDYxMmIwODI5NDMwOTM", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-09-24T18:40:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-24T18:40:14Z"}, "message": "Rollup merge of #89208 - wesleywiser:rfc_2229_droporder, r=nikomatsakis\n\n[rfc 2229] Drop fully captured upvars in the same order as the regular drop code\n\nCurrently, with the new 2021 edition, if a closure captures all of the\nfields of an upvar, we'll drop those fields in the order they are used\nwithin the closure instead of the normal drop order (the definition\norder of the fields in the type).\n\nThis changes that so we sort the captured fields by the definition order\nwhich causes them to drop in that same order as well.\n\nFixes rust-lang/project-rfc-2229#42\n\nr? `@nikomatsakis`", "tree": {"sha": "acbbcdfad216e753967aeb029929e9695a52e173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acbbcdfad216e753967aeb029929e9695a52e173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ade6ed48e3112cdea227d712cd612b082943093", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhThuOCRBK7hj4Ov3rIwAAc4UIAEqX+ctVk27eRHS1xj++wxsv\nRmV6EUw4aGLr+n/529TJ+2UPvF1fY7l4fA1itEw6txKyswJtU4gC70W/a+jiKib+\nlSzwuvNDZLhZufa7+ymDu1f2WwTsBbicL0/DkGANHY7q7GWX9qEQMnhAn0mOc5qU\nd82ucKPccBFiVEEy9sIYmb1xV8xGk5GmqTON0TcwaMw61jb/yjZ3ngIGTk//tSgh\nZ1QVzxarOF8gBQQc1hLE6cxNkHz20haBLaeYoKqAud6Ofm1fqz0t8AppFunHAgkk\nPmKJFBWBMi0FR4bG0ebSZsS4qETBUEyk/7oQbWIcCokqMD8gJSfJk4Prf/2n4Us=\n=a/zS\n-----END PGP SIGNATURE-----\n", "payload": "tree acbbcdfad216e753967aeb029929e9695a52e173\nparent 80d9886e4cdfc5651cdf487878598d0d453e7f5d\nparent dd918048a56577dcd7a396065f645a921c3b8e79\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1632508814 -0700\ncommitter GitHub <noreply@github.com> 1632508814 -0700\n\nRollup merge of #89208 - wesleywiser:rfc_2229_droporder, r=nikomatsakis\n\n[rfc 2229] Drop fully captured upvars in the same order as the regular drop code\n\nCurrently, with the new 2021 edition, if a closure captures all of the\nfields of an upvar, we'll drop those fields in the order they are used\nwithin the closure instead of the normal drop order (the definition\norder of the fields in the type).\n\nThis changes that so we sort the captured fields by the definition order\nwhich causes them to drop in that same order as well.\n\nFixes rust-lang/project-rfc-2229#42\n\nr? `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ade6ed48e3112cdea227d712cd612b082943093", "html_url": "https://github.com/rust-lang/rust/commit/7ade6ed48e3112cdea227d712cd612b082943093", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ade6ed48e3112cdea227d712cd612b082943093/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80d9886e4cdfc5651cdf487878598d0d453e7f5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d9886e4cdfc5651cdf487878598d0d453e7f5d", "html_url": "https://github.com/rust-lang/rust/commit/80d9886e4cdfc5651cdf487878598d0d453e7f5d"}, {"sha": "dd918048a56577dcd7a396065f645a921c3b8e79", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd918048a56577dcd7a396065f645a921c3b8e79", "html_url": "https://github.com/rust-lang/rust/commit/dd918048a56577dcd7a396065f645a921c3b8e79"}], "stats": {"total": 486, "additions": 485, "deletions": 1}, "files": [{"sha": "917bf4ecd8c4a9117a5e80a6421beadb7836d0e4", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7ade6ed48e3112cdea227d712cd612b082943093/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ade6ed48e3112cdea227d712cd612b082943093/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=7ade6ed48e3112cdea227d712cd612b082943093", "patch": "@@ -602,7 +602,78 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        debug!(\"For closure={:?}, min_captures={:#?}\", closure_def_id, root_var_min_capture_list);\n+        debug!(\n+            \"For closure={:?}, min_captures before sorting={:?}\",\n+            closure_def_id, root_var_min_capture_list\n+        );\n+\n+        // Now that we have the minimized list of captures, sort the captures by field id.\n+        // This causes the closure to capture the upvars in the same order as the fields are\n+        // declared which is also the drop order. Thus, in situations where we capture all the\n+        // fields of some type, the obserable drop order will remain the same as it previously\n+        // was even though we're dropping each capture individually.\n+        // See https://github.com/rust-lang/project-rfc-2229/issues/42 and\n+        // `src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order.rs`.\n+        for (_, captures) in &mut root_var_min_capture_list {\n+            captures.sort_by(|capture1, capture2| {\n+                for (p1, p2) in capture1.place.projections.iter().zip(&capture2.place.projections) {\n+                    // We do not need to look at the `Projection.ty` fields here because at each\n+                    // step of the iteration, the projections will either be the same and therefore\n+                    // the types must be as well or the current projection will be different and\n+                    // we will return the result of comparing the field indexes.\n+                    match (p1.kind, p2.kind) {\n+                        // Paths are the same, continue to next loop.\n+                        (ProjectionKind::Deref, ProjectionKind::Deref) => {}\n+                        (ProjectionKind::Field(i1, _), ProjectionKind::Field(i2, _))\n+                            if i1 == i2 => {}\n+\n+                        // Fields are different, compare them.\n+                        (ProjectionKind::Field(i1, _), ProjectionKind::Field(i2, _)) => {\n+                            return i1.cmp(&i2);\n+                        }\n+\n+                        // We should have either a pair of `Deref`s or a pair of `Field`s.\n+                        // Anything else is a bug.\n+                        (\n+                            l @ (ProjectionKind::Deref | ProjectionKind::Field(..)),\n+                            r @ (ProjectionKind::Deref | ProjectionKind::Field(..)),\n+                        ) => bug!(\n+                            \"ProjectionKinds Deref and Field were mismatched: ({:?}, {:?})\",\n+                            l,\n+                            r\n+                        ),\n+                        (\n+                            l\n+                            @\n+                            (ProjectionKind::Index\n+                            | ProjectionKind::Subslice\n+                            | ProjectionKind::Deref\n+                            | ProjectionKind::Field(..)),\n+                            r\n+                            @\n+                            (ProjectionKind::Index\n+                            | ProjectionKind::Subslice\n+                            | ProjectionKind::Deref\n+                            | ProjectionKind::Field(..)),\n+                        ) => bug!(\n+                            \"ProjectionKinds Index or Subslice were unexpected: ({:?}, {:?})\",\n+                            l,\n+                            r\n+                        ),\n+                    }\n+                }\n+\n+                unreachable!(\n+                    \"we captured two identical projections: capture1 = {:?}, capture2 = {:?}\",\n+                    capture1, capture2\n+                );\n+            });\n+        }\n+\n+        debug!(\n+            \"For closure={:?}, min_captures after sorting={:#?}\",\n+            closure_def_id, root_var_min_capture_list\n+        );\n         typeck_results.closure_min_captures.insert(closure_def_id, root_var_min_capture_list);\n     }\n "}, {"sha": "2f8cddc06bab1caaed63d326b00ec5ccfa0cf0a4", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/7ade6ed48e3112cdea227d712cd612b082943093/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ade6ed48e3112cdea227d712cd612b082943093/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.rs?ref=7ade6ed48e3112cdea227d712cd612b082943093", "patch": "@@ -0,0 +1,101 @@\n+// edition:2021\n+\n+// Tests that in cases where we individually capture all the fields of a type,\n+// we still drop them in the order they would have been dropped in the 2018 edition.\n+\n+// NOTE: It is *critical* that the order of the min capture NOTES in the stderr output\n+//       does *not* change!\n+\n+#![feature(rustc_attrs)]\n+\n+#[derive(Debug)]\n+struct HasDrop;\n+impl Drop for HasDrop {\n+    fn drop(&mut self) {\n+        println!(\"dropped\");\n+    }\n+}\n+\n+fn test_one() {\n+    let a = (HasDrop, HasDrop);\n+    let b = (HasDrop, HasDrop);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    || {\n+        //~^ ERROR: Min Capture analysis includes:\n+        //~| ERROR\n+        println!(\"{:?}\", a.0);\n+        //~^ NOTE: Min Capture a[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", a.1);\n+        //~^ NOTE: Min Capture a[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+\n+        println!(\"{:?}\", b.0);\n+        //~^ NOTE: Min Capture b[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", b.1);\n+        //~^ NOTE: Min Capture b[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+    };\n+}\n+\n+fn test_two() {\n+    let a = (HasDrop, HasDrop);\n+    let b = (HasDrop, HasDrop);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    || {\n+        //~^ ERROR: Min Capture analysis includes:\n+        //~| ERROR\n+        println!(\"{:?}\", a.1);\n+        //~^ NOTE: Min Capture a[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", a.0);\n+        //~^ NOTE: Min Capture a[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+\n+        println!(\"{:?}\", b.1);\n+        //~^ NOTE: Min Capture b[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", b.0);\n+        //~^ NOTE: Min Capture b[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+    };\n+}\n+\n+fn test_three() {\n+    let a = (HasDrop, HasDrop);\n+    let b = (HasDrop, HasDrop);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    || {\n+        //~^ ERROR: Min Capture analysis includes:\n+        //~| ERROR\n+        println!(\"{:?}\", b.1);\n+        //~^ NOTE: Min Capture b[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", a.1);\n+        //~^ NOTE: Min Capture a[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", a.0);\n+        //~^ NOTE: Min Capture a[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+\n+        println!(\"{:?}\", b.0);\n+        //~^ NOTE: Min Capture b[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+    };\n+}\n+\n+fn main() {\n+    test_one();\n+    test_two();\n+    test_three();\n+}"}, {"sha": "2d1dc8727c255fdd40007451281f15494120f380", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order.stderr", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/7ade6ed48e3112cdea227d712cd612b082943093/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ade6ed48e3112cdea227d712cd612b082943093/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.stderr?ref=7ade6ed48e3112cdea227d712cd612b082943093", "patch": "@@ -0,0 +1,228 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/preserve_field_drop_order.rs:23:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/preserve_field_drop_order.rs:49:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/preserve_field_drop_order.rs:75:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error: First Pass analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:26:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", a.0);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:29:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Capturing a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:32:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+note: Capturing b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:36:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+note: Capturing b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:39:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:26:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", a.0);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:29:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Min Capture a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:32:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+note: Min Capture b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:36:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+note: Min Capture b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:39:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:52:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", a.1);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:55:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+note: Capturing a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:58:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Capturing b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:62:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+note: Capturing b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:65:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:52:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", a.1);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:58:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Min Capture a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:55:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+note: Min Capture b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:65:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+note: Min Capture b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:62:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:78:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", b.1);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:81:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+note: Capturing a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:84:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+note: Capturing a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:87:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Capturing b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:91:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:78:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", b.1);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:91:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+note: Min Capture b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:81:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+note: Min Capture a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:87:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Min Capture a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:84:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1cae776dd68bc0dab3b0ac28567394552e05af59", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order2.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7ade6ed48e3112cdea227d712cd612b082943093/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ade6ed48e3112cdea227d712cd612b082943093/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.rs?ref=7ade6ed48e3112cdea227d712cd612b082943093", "patch": "@@ -0,0 +1,58 @@\n+// run-pass\n+// check-run-results\n+// revisions: twenty_eighteen twenty_twentyone\n+// [twenty_eighteen]compile-flags: --edition 2018\n+// [twenty_twentyone]compile-flags: --edition 2021\n+\n+#[derive(Debug)]\n+struct Dropable(&'static str);\n+\n+impl Drop for Dropable {\n+    fn drop(&mut self) {\n+        println!(\"Dropping {}\", self.0)\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct A {\n+    x: Dropable,\n+    y: Dropable,\n+}\n+\n+#[derive(Debug)]\n+struct B {\n+    c: A,\n+    d: A,\n+}\n+\n+#[derive(Debug)]\n+struct R<'a> {\n+    c: &'a A,\n+    d: &'a A,\n+}\n+\n+fn main() {\n+    let a = A { x: Dropable(\"x\"), y: Dropable(\"y\") };\n+\n+    let c = move || println!(\"{:?} {:?}\", a.y, a.x);\n+\n+    c();\n+\n+    let b = B {\n+        c: A { x: Dropable(\"b.c.x\"), y: Dropable(\"b.c.y\") },\n+        d: A { x: Dropable(\"b.d.x\"), y: Dropable(\"b.d.y\") },\n+    };\n+\n+    let d = move || println!(\"{:?} {:?} {:?} {:?}\", b.d.y, b.d.x, b.c.y, b.c.x);\n+\n+    d();\n+\n+        let r = R {\n+        c: &A { x: Dropable(\"r.c.x\"), y: Dropable(\"r.c.y\") },\n+        d: &A { x: Dropable(\"r.d.x\"), y: Dropable(\"r.d.y\") },\n+    };\n+\n+    let e = move || println!(\"{:?} {:?} {:?} {:?}\", r.d.y, r.d.x, r.c.y, r.c.x);\n+\n+    e();\n+}"}, {"sha": "557d047c1d52431109af4bb2240c127cc083ceae", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order2.twenty_eighteen.run.stdout", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ade6ed48e3112cdea227d712cd612b082943093/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_eighteen.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7ade6ed48e3112cdea227d712cd612b082943093/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_eighteen.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_eighteen.run.stdout?ref=7ade6ed48e3112cdea227d712cd612b082943093", "patch": "@@ -0,0 +1,13 @@\n+Dropable(\"y\") Dropable(\"x\")\n+Dropable(\"b.d.y\") Dropable(\"b.d.x\") Dropable(\"b.c.y\") Dropable(\"b.c.x\")\n+Dropable(\"r.d.y\") Dropable(\"r.d.x\") Dropable(\"r.c.y\") Dropable(\"r.c.x\")\n+Dropping r.d.x\n+Dropping r.d.y\n+Dropping r.c.x\n+Dropping r.c.y\n+Dropping b.c.x\n+Dropping b.c.y\n+Dropping b.d.x\n+Dropping b.d.y\n+Dropping x\n+Dropping y"}, {"sha": "557d047c1d52431109af4bb2240c127cc083ceae", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order2.twenty_twentyone.run.stdout", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7ade6ed48e3112cdea227d712cd612b082943093/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_twentyone.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7ade6ed48e3112cdea227d712cd612b082943093/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_twentyone.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_twentyone.run.stdout?ref=7ade6ed48e3112cdea227d712cd612b082943093", "patch": "@@ -0,0 +1,13 @@\n+Dropable(\"y\") Dropable(\"x\")\n+Dropable(\"b.d.y\") Dropable(\"b.d.x\") Dropable(\"b.c.y\") Dropable(\"b.c.x\")\n+Dropable(\"r.d.y\") Dropable(\"r.d.x\") Dropable(\"r.c.y\") Dropable(\"r.c.x\")\n+Dropping r.d.x\n+Dropping r.d.y\n+Dropping r.c.x\n+Dropping r.c.y\n+Dropping b.c.x\n+Dropping b.c.y\n+Dropping b.d.x\n+Dropping b.d.y\n+Dropping x\n+Dropping y"}]}