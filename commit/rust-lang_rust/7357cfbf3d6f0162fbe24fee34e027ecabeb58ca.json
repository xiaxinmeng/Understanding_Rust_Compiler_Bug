{"sha": "7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "node_id": "C_kwDOAAsO6NoAKDczNTdjZmJmM2Q2ZjAxNjJmYmUyNGZlZTM0ZTAyN2VjYWJlYjU4Y2E", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-13T18:57:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-13T18:57:09Z"}, "message": "Rollup merge of #105147 - nbdd0121:inline_const_unsafe, r=oli-obk\n\nAllow unsafe through inline const\n\nHandle similar to closures.\n\nAddress https://github.com/rust-lang/rust/pull/104087#issuecomment-1324173328\n\nNote that this PR does not fix the issue for `unsafe { [0; function_requiring_unsafe()] }`. This is fundamentally unfixable for MIR unsafeck IMO.\n\nThis PR also does not fix unsafety checking for inline const in pattern position. It actually breaks it, allowing unsafe functions to be used in inline const in pattern position without unsafe blocks. Inline const in pattern position is not visible in MIR so ignored by MIR unsafety checking (currently it is also not checked by borrow checker, which is the reason why it's considered an incomplete feature).\n\n`@rustbot` label: +T-lang +F-inline_const", "tree": {"sha": "319e1c6cb03f2fa4120fae11d341fba2d9cd2de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/319e1c6cb03f2fa4120fae11d341fba2d9cd2de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmMsFCRBK7hj4Ov3rIwAAxZcIADuGbyXIxi07p9UpGtwVuaY5\nP5As8zz0wevRj4VW9NJbGuUDQJhbCdj94++l88Yid/vXGVnpRw8snYDflZA7UjEz\nbK3WcowJoajgZldhpXfzLBKD6mYZ8WrzAsnpxGOlXMH9agtIGIIhIOzci5bmjcej\n4aPyVMXD9Nez94yH+mXl6he4j6qKm3uGuWuBIgGiq442StUUNs+mpbGfF4wPmZCM\n02dgxTO0KO6nyngce/J3m/6YXtDmauCR/9e2M/tfdLc9Ijmt1KUSo0H9TXQ2gaSB\n0/SOrCmmleUVADZmdLRyG/NVNSUrSSBkMs6oISPvUrJHmLmqOqrkgxeNKgrBnGg=\n=8QF6\n-----END PGP SIGNATURE-----\n", "payload": "tree 319e1c6cb03f2fa4120fae11d341fba2d9cd2de0\nparent aa5b179599427ef233c4e47db8dac6edae22b4f8\nparent d6dc9124b7b814c2c5c35aa6295ea5e54071daac\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670957829 +0100\ncommitter GitHub <noreply@github.com> 1670957829 +0100\n\nRollup merge of #105147 - nbdd0121:inline_const_unsafe, r=oli-obk\n\nAllow unsafe through inline const\n\nHandle similar to closures.\n\nAddress https://github.com/rust-lang/rust/pull/104087#issuecomment-1324173328\n\nNote that this PR does not fix the issue for `unsafe { [0; function_requiring_unsafe()] }`. This is fundamentally unfixable for MIR unsafeck IMO.\n\nThis PR also does not fix unsafety checking for inline const in pattern position. It actually breaks it, allowing unsafe functions to be used in inline const in pattern position without unsafe blocks. Inline const in pattern position is not visible in MIR so ignored by MIR unsafety checking (currently it is also not checked by borrow checker, which is the reason why it's considered an incomplete feature).\n\n`@rustbot` label: +T-lang +F-inline_const\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "html_url": "https://github.com/rust-lang/rust/commit/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa5b179599427ef233c4e47db8dac6edae22b4f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5b179599427ef233c4e47db8dac6edae22b4f8", "html_url": "https://github.com/rust-lang/rust/commit/aa5b179599427ef233c4e47db8dac6edae22b4f8"}, {"sha": "d6dc9124b7b814c2c5c35aa6295ea5e54071daac", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6dc9124b7b814c2c5c35aa6295ea5e54071daac", "html_url": "https://github.com/rust-lang/rust/commit/d6dc9124b7b814c2c5c35aa6295ea5e54071daac"}], "stats": {"total": 196, "additions": 177, "deletions": 19}, "files": [{"sha": "1fd2e40c187e0487eb761156caa852a091d45b98", "filename": "compiler/rustc_mir_build/src/build/custom/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -20,6 +20,7 @@\n use rustc_ast::Attribute;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::{\n     mir::*,\n@@ -33,6 +34,7 @@ mod parse;\n pub(super) fn build_custom_mir<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     did: DefId,\n+    hir_id: HirId,\n     thir: &Thir<'tcx>,\n     expr: ExprId,\n     params: &IndexVec<ParamId, Param<'tcx>>,\n@@ -67,7 +69,10 @@ pub(super) fn build_custom_mir<'tcx>(\n         parent_scope: None,\n         inlined: None,\n         inlined_parent_scope: None,\n-        local_data: ClearCrossCrate::Clear,\n+        local_data: ClearCrossCrate::Set(SourceScopeLocalData {\n+            lint_root: hir_id,\n+            safety: Safety::Safe,\n+        }),\n     });\n     body.injection_phase = Some(parse_attribute(attr));\n "}, {"sha": "7af89dd472f88e9be4ccf03111f2ad525d870d7c", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -487,6 +487,7 @@ fn construct_fn<'tcx>(\n         return custom::build_custom_mir(\n             tcx,\n             fn_def.did.to_def_id(),\n+            fn_id,\n             thir,\n             expr,\n             arguments,"}, {"sha": "3bb1f51650abd5c846acad632a7e649099f4559f", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -132,6 +132,18 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n     fn unsafe_op_in_unsafe_fn_allowed(&self) -> bool {\n         self.tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, self.hir_context).0 == Level::Allow\n     }\n+\n+    /// Handle closures/generators/inline-consts, which is unsafecked with their parent body.\n+    fn visit_inner_body(&mut self, def: ty::WithOptConstParam<LocalDefId>) {\n+        if let Ok((inner_thir, expr)) = self.tcx.thir_body(def) {\n+            let inner_thir = &inner_thir.borrow();\n+            let hir_context = self.tcx.hir().local_def_id_to_hir_id(def.did);\n+            let mut inner_visitor = UnsafetyVisitor { thir: inner_thir, hir_context, ..*self };\n+            inner_visitor.visit_expr(&inner_thir[expr]);\n+            // Unsafe blocks can be used in the inner body, make sure to take it into account\n+            self.safety_context = inner_visitor.safety_context;\n+        }\n+    }\n }\n \n // Searches for accesses to layout constrained fields.\n@@ -408,16 +420,11 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 } else {\n                     ty::WithOptConstParam::unknown(closure_id)\n                 };\n-                let (closure_thir, expr) = self.tcx.thir_body(closure_def).unwrap_or_else(|_| {\n-                    (self.tcx.alloc_steal_thir(Thir::new()), ExprId::from_u32(0))\n-                });\n-                let closure_thir = &closure_thir.borrow();\n-                let hir_context = self.tcx.hir().local_def_id_to_hir_id(closure_id);\n-                let mut closure_visitor =\n-                    UnsafetyVisitor { thir: closure_thir, hir_context, ..*self };\n-                closure_visitor.visit_expr(&closure_thir[expr]);\n-                // Unsafe blocks can be used in closures, make sure to take it into account\n-                self.safety_context = closure_visitor.safety_context;\n+                self.visit_inner_body(closure_def);\n+            }\n+            ExprKind::ConstBlock { did, substs: _ } => {\n+                let def_id = did.expect_local();\n+                self.visit_inner_body(ty::WithOptConstParam::unknown(def_id));\n             }\n             ExprKind::Field { lhs, .. } => {\n                 let lhs = &self.thir[lhs];\n@@ -612,11 +619,8 @@ pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalD\n         return;\n     }\n \n-    // Closures are handled by their owner, if it has a body\n-    if tcx.is_closure(def.did.to_def_id()) {\n-        let hir = tcx.hir();\n-        let owner = hir.enclosing_body_owner(hir.local_def_id_to_hir_id(def.did));\n-        tcx.ensure().thir_check_unsafety(owner);\n+    // Closures and inline consts are handled by their owner, if it has a body\n+    if tcx.is_typeck_child(def.did.to_def_id()) {\n         return;\n     }\n "}, {"sha": "782abd7804d5d0f66ed7175a141d42fe41bb6e2d", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -1,6 +1,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::hir_id::HirId;\n use rustc_hir::intravisit;\n@@ -134,6 +135,28 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n         self.super_rvalue(rvalue, location);\n     }\n \n+    fn visit_operand(&mut self, op: &Operand<'tcx>, location: Location) {\n+        if let Operand::Constant(constant) = op {\n+            let maybe_uneval = match constant.literal {\n+                ConstantKind::Val(..) | ConstantKind::Ty(_) => None,\n+                ConstantKind::Unevaluated(uv, _) => Some(uv),\n+            };\n+\n+            if let Some(uv) = maybe_uneval {\n+                if uv.promoted.is_none() {\n+                    let def_id = uv.def.def_id_for_type_of();\n+                    if self.tcx.def_kind(def_id) == DefKind::InlineConst {\n+                        let local_def_id = def_id.expect_local();\n+                        let UnsafetyCheckResult { violations, used_unsafe_blocks, .. } =\n+                            self.tcx.unsafety_check_result(local_def_id);\n+                        self.register_violations(violations, used_unsafe_blocks.iter().copied());\n+                    }\n+                }\n+            }\n+        }\n+        self.super_operand(op, location);\n+    }\n+\n     fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n         // On types with `scalar_valid_range`, prevent\n         // * `&mut x.field`\n@@ -410,6 +433,12 @@ impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_, 'tcx> {\n         intravisit::walk_block(self, block);\n     }\n \n+    fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n+        if matches!(self.tcx.def_kind(c.def_id), DefKind::InlineConst) {\n+            self.visit_body(self.tcx.hir().body(c.body))\n+        }\n+    }\n+\n     fn visit_fn(\n         &mut self,\n         fk: intravisit::FnKind<'tcx>,\n@@ -484,7 +513,7 @@ fn unsafety_check_result<'tcx>(\n     let mut checker = UnsafetyChecker::new(body, def.did, tcx, param_env);\n     checker.visit_body(&body);\n \n-    let unused_unsafes = (!tcx.is_closure(def.did.to_def_id()))\n+    let unused_unsafes = (!tcx.is_typeck_child(def.did.to_def_id()))\n         .then(|| check_unused_unsafe(tcx, def.did, &checker.used_unsafe_blocks));\n \n     tcx.arena.alloc(UnsafetyCheckResult {\n@@ -516,8 +545,8 @@ fn report_unused_unsafe(tcx: TyCtxt<'_>, kind: UnusedUnsafe, id: HirId) {\n pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     debug!(\"check_unsafety({:?})\", def_id);\n \n-    // closures are handled by their parent fn.\n-    if tcx.is_closure(def_id.to_def_id()) {\n+    // closures and inline consts are handled by their parent fn.\n+    if tcx.is_typeck_child(def_id.to_def_id()) {\n         return;\n     }\n "}, {"sha": "1bec41e2efa01ec78f04cfc2d2ef9c7fe34452fd", "filename": "src/test/ui/inline-const/expr-unsafe-err.mir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe-err.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe-err.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe-err.mir.stderr?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/expr-unsafe-err.rs:8:9\n+   |\n+LL |         require_unsafe();\n+   |         ^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "adf05d352ea70c0f5f9602d965a5788e91601df1", "filename": "src/test/ui/inline-const/expr-unsafe-err.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe-err.rs?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -0,0 +1,11 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+#![feature(inline_const)]\n+const unsafe fn require_unsafe() -> usize { 1 }\n+\n+fn main() {\n+    const {\n+        require_unsafe();\n+        //~^ ERROR [E0133]\n+    }\n+}"}, {"sha": "c971e8afb35770c56530afb66cf7379b3a885d9f", "filename": "src/test/ui/inline-const/expr-unsafe-err.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe-err.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe-err.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe-err.thir.stderr?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: call to unsafe function `require_unsafe` is unsafe and requires unsafe function or block\n+  --> $DIR/expr-unsafe-err.rs:8:9\n+   |\n+LL |         require_unsafe();\n+   |         ^^^^^^^^^^^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "1ab6e42fba0a5b9a38ebe2c8d8547bfb4368163d", "filename": "src/test/ui/inline-const/expr-unsafe.mir.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe.mir.stderr?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -0,0 +1,14 @@\n+warning: unnecessary `unsafe` block\n+  --> $DIR/expr-unsafe.rs:12:13\n+   |\n+LL |             unsafe {}\n+   |             ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/expr-unsafe.rs:4:9\n+   |\n+LL | #![warn(unused_unsafe)]\n+   |         ^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d71efd33db16393faa706670b1d27ee07ba2732f", "filename": "src/test/ui/inline-const/expr-unsafe.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe.rs?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+#![warn(unused_unsafe)]\n+#![feature(inline_const)]\n+const unsafe fn require_unsafe() -> usize { 1 }\n+\n+fn main() {\n+    unsafe {\n+        const {\n+            require_unsafe();\n+            unsafe {}\n+            //~^ WARNING unnecessary `unsafe` block\n+        }\n+    }\n+}"}, {"sha": "4737444fb61c42ea44d01db76738ffc7072015c4", "filename": "src/test/ui/inline-const/expr-unsafe.thir.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fexpr-unsafe.thir.stderr?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -0,0 +1,17 @@\n+warning: unnecessary `unsafe` block\n+  --> $DIR/expr-unsafe.rs:12:13\n+   |\n+LL |     unsafe {\n+   |     ------ because it's nested under this `unsafe` block\n+...\n+LL |             unsafe {}\n+   |             ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/expr-unsafe.rs:4:9\n+   |\n+LL | #![warn(unused_unsafe)]\n+   |         ^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "e290b438c514093e59019355fdf299539974fff9", "filename": "src/test/ui/inline-const/pat-unsafe-err.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fpat-unsafe-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fpat-unsafe-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fpat-unsafe-err.rs?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -0,0 +1,17 @@\n+// ignore-test This is currently broken\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n+#![allow(incomplete_features)]\n+#![feature(inline_const_pat)]\n+\n+const unsafe fn require_unsafe() -> usize { 1 }\n+\n+fn main() {\n+    match () {\n+        const {\n+            require_unsafe();\n+            //~^ ERROR [E0133]\n+        } => (),\n+    }\n+}"}, {"sha": "bcf7f6e01804e40bf3b6d1cc80b43e0c8820a453", "filename": "src/test/ui/inline-const/pat-unsafe.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fpat-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7357cfbf3d6f0162fbe24fee34e027ecabeb58ca/src%2Ftest%2Fui%2Finline-const%2Fpat-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fpat-unsafe.rs?ref=7357cfbf3d6f0162fbe24fee34e027ecabeb58ca", "patch": "@@ -0,0 +1,22 @@\n+// ignore-test This is currently broken\n+// check-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n+#![allow(incomplete_features)]\n+#![warn(unused_unsafe)]\n+#![feature(inline_const_pat)]\n+\n+const unsafe fn require_unsafe() -> usize { 1 }\n+\n+fn main() {\n+    unsafe {\n+        match () {\n+            const {\n+                require_unsafe();\n+                unsafe {}\n+                //~^ WARNING unnecessary `unsafe` block\n+            } => (),\n+        }\n+    }\n+}"}]}