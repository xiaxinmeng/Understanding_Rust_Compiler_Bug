{"sha": "f3e01c4f6a12ad1bd70813875ed84dbe8c830df7", "node_id": "C_kwDOAAsO6NoAKGYzZTAxYzRmNmExMmFkMWJkNzA4MTM4NzVlZDg0ZGJlOGM4MzBkZjc", "commit": {"author": {"name": "yonip23", "email": "yoni@tabnine.com", "date": "2022-05-10T21:46:20Z"}, "committer": {"name": "yonip23", "email": "yoni@tabnine.com", "date": "2022-05-10T22:09:45Z"}, "message": "add suggestions to rc_clone_in_vec_init", "tree": {"sha": "b8b2cf15a968ac52e3c1b83fed077ec55ba4b4ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8b2cf15a968ac52e3c1b83fed077ec55ba4b4ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3e01c4f6a12ad1bd70813875ed84dbe8c830df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e01c4f6a12ad1bd70813875ed84dbe8c830df7", "html_url": "https://github.com/rust-lang/rust/commit/f3e01c4f6a12ad1bd70813875ed84dbe8c830df7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3e01c4f6a12ad1bd70813875ed84dbe8c830df7/comments", "author": {"login": "yonip23", "id": 67855609, "node_id": "MDQ6VXNlcjY3ODU1NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/67855609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yonip23", "html_url": "https://github.com/yonip23", "followers_url": "https://api.github.com/users/yonip23/followers", "following_url": "https://api.github.com/users/yonip23/following{/other_user}", "gists_url": "https://api.github.com/users/yonip23/gists{/gist_id}", "starred_url": "https://api.github.com/users/yonip23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yonip23/subscriptions", "organizations_url": "https://api.github.com/users/yonip23/orgs", "repos_url": "https://api.github.com/users/yonip23/repos", "events_url": "https://api.github.com/users/yonip23/events{/privacy}", "received_events_url": "https://api.github.com/users/yonip23/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yonip23", "id": 67855609, "node_id": "MDQ6VXNlcjY3ODU1NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/67855609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yonip23", "html_url": "https://github.com/yonip23", "followers_url": "https://api.github.com/users/yonip23/followers", "following_url": "https://api.github.com/users/yonip23/following{/other_user}", "gists_url": "https://api.github.com/users/yonip23/gists{/gist_id}", "starred_url": "https://api.github.com/users/yonip23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yonip23/subscriptions", "organizations_url": "https://api.github.com/users/yonip23/orgs", "repos_url": "https://api.github.com/users/yonip23/repos", "events_url": "https://api.github.com/users/yonip23/events{/privacy}", "received_events_url": "https://api.github.com/users/yonip23/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d422baa30c415e6aed786f1953b0ac1b7d840dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d422baa30c415e6aed786f1953b0ac1b7d840dc1", "html_url": "https://github.com/rust-lang/rust/commit/d422baa30c415e6aed786f1953b0ac1b7d840dc1"}], "stats": {"total": 170, "additions": 152, "deletions": 18}, "files": [{"sha": "aa575d7e68bf952009d02e85fb5927d4fe6f67f6", "filename": "clippy_lints/src/rc_clone_in_vec_init.rs", "status": "modified", "additions": 92, "deletions": 10, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/f3e01c4f6a12ad1bd70813875ed84dbe8c830df7/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e01c4f6a12ad1bd70813875ed84dbe8c830df7/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs?ref=f3e01c4f6a12ad1bd70813875ed84dbe8c830df7", "patch": "@@ -1,11 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::higher::VecArgs;\n use clippy_utils::last_path_segment;\n-use clippy_utils::macros::{root_macro_call_first_node, MacroCall};\n+use clippy_utils::macros::root_macro_call_first_node;\n+use clippy_utils::source::{indent_of, snippet};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::{Expr, ExprKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{sym, Symbol};\n+use rustc_span::{sym, Span, Symbol};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -47,27 +49,107 @@ declare_lint_pass!(RcCloneInVecInit => [RC_CLONE_IN_VEC_INIT]);\n impl LateLintPass<'_> for RcCloneInVecInit {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return; };\n-        let Some(VecArgs::Repeat(elem, _)) = VecArgs::hir(cx, expr) else { return; };\n+        let Some(VecArgs::Repeat(elem, len)) = VecArgs::hir(cx, expr) else { return; };\n         let Some(symbol) = new_reference_call(cx, elem) else { return; };\n+        let lint_span = macro_call.span;\n+        let symbol_name = symbol.as_str();\n+        let len_snippet = snippet(cx, len.span, \"..\");\n+        let elem_snippet = elem_snippet(cx, elem, symbol_name);\n+        let indentation = indent_of(cx, lint_span).unwrap_or(0);\n+        let lint_suggestions =\n+            construct_lint_suggestions(lint_span, symbol_name, &elem_snippet, len_snippet.as_ref(), indentation);\n \n-        emit_lint(cx, symbol, &macro_call);\n+        emit_lint(cx, symbol, lint_span, &lint_suggestions);\n     }\n }\n \n-fn emit_lint(cx: &LateContext<'_>, symbol: Symbol, macro_call: &MacroCall) {\n+struct LintSuggestion {\n+    span: Span,\n+    message: String,\n+    suggestion: String,\n+    applicability: Applicability,\n+}\n+\n+impl LintSuggestion {\n+    fn span_suggestion(&self, diag: &mut Diagnostic) {\n+        diag.span_suggestion(self.span, &self.message, &self.suggestion, self.applicability);\n+    }\n+}\n+\n+fn construct_lint_suggestions(\n+    span: Span,\n+    symbol_name: &str,\n+    elem_snippet: &str,\n+    len_snippet: &str,\n+    indentation: usize,\n+) -> Vec<LintSuggestion> {\n+    let indentation = \" \".repeat(indentation);\n+    let loop_init_suggestion = loop_init_suggestion(elem_snippet, len_snippet, &indentation);\n+    let extract_suggestion = extract_suggestion(elem_snippet, len_snippet, &indentation);\n+\n+    vec![\n+        LintSuggestion {\n+            span,\n+            message: format!(\"consider initializing each `{symbol_name}` element individually\"),\n+            suggestion: loop_init_suggestion,\n+            applicability: Applicability::Unspecified,\n+        },\n+        LintSuggestion {\n+            span,\n+            message: format!(\n+                \"or if this is intentional, consider extracting the `{symbol_name}` initialization to a variable\"\n+            ),\n+            suggestion: extract_suggestion,\n+            applicability: Applicability::Unspecified,\n+        },\n+    ]\n+}\n+\n+fn elem_snippet(cx: &LateContext<'_>, elem: &Expr<'_>, symbol_name: &str) -> String {\n+    let mut elem_snippet = snippet(cx, elem.span, \"..\").to_string();\n+    if elem_snippet.contains('\\n') {\n+        let reference_initialization = format!(\"{symbol_name}::new\");\n+        // This string must be found in `elem_snippet`, otherwise we won't be constructing the snippet in\n+        // the first place.\n+        let reference_initialization_end =\n+            elem_snippet.find(&reference_initialization).unwrap() + reference_initialization.len();\n+        elem_snippet.replace_range(reference_initialization_end.., \"..\");\n+    }\n+    elem_snippet\n+}\n+\n+fn loop_init_suggestion(elem: &str, len: &str, indent: &str) -> String {\n+    format!(\n+        r#\"{{\n+{indent}{indent}let mut v = Vec::with_capacity({len});\n+{indent}{indent}(0..{len}).for_each(|_| v.push({elem}));\n+{indent}{indent}v\n+{indent}}}\"#\n+    )\n+}\n+\n+fn extract_suggestion(elem: &str, len: &str, indent: &str) -> String {\n+    format!(\n+        \"{{\n+{indent}{indent}let data = {elem};\n+{indent}{indent}vec![data; {len}]\n+{indent}}}\"\n+    )\n+}\n+\n+fn emit_lint(cx: &LateContext<'_>, symbol: Symbol, lint_span: Span, lint_suggestions: &[LintSuggestion]) {\n     let symbol_name = symbol.as_str();\n \n     span_lint_and_then(\n         cx,\n         RC_CLONE_IN_VEC_INIT,\n-        macro_call.span,\n+        lint_span,\n         &format!(\"calling `{symbol_name}::new` in `vec![elem; len]`\"),\n         |diag| {\n             diag.note(format!(\"each element will point to the same `{symbol_name}` instance\"));\n-            diag.help(format!(\n-                \"if this is intentional, consider extracting the `{symbol_name}` initialization to a variable\"\n-            ));\n-            diag.help(\"or if not, initialize each element individually\");\n+            lint_suggestions\n+                .iter()\n+                .for_each(|suggestion| suggestion.span_suggestion(diag));\n         },\n     );\n }"}, {"sha": "3de96c6f1758d7c7f4de42ca4db700072341f801", "filename": "tests/ui/rc_clone_in_vec_init/arc.stderr", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f3e01c4f6a12ad1bd70813875ed84dbe8c830df7/tests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3e01c4f6a12ad1bd70813875ed84dbe8c830df7/tests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr?ref=f3e01c4f6a12ad1bd70813875ed84dbe8c830df7", "patch": "@@ -6,8 +6,21 @@ LL |     let v = vec![Arc::new(\"x\".to_string()); 2];\n    |\n    = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n    = note: each element will point to the same `Arc` instance\n-   = help: if this is intentional, consider extracting the `Arc` initialization to a variable\n-   = help: or if not, initialize each element individually\n+help: consider initializing each `Arc` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(Arc::new(\"x\".to_string())));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Arc` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = Arc::new(\"x\".to_string());\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n \n error: calling `Arc::new` in `vec![elem; len]`\n   --> $DIR/arc.rs:11:13\n@@ -23,8 +36,21 @@ LL | |     ];\n    | |_____^\n    |\n    = note: each element will point to the same `Arc` instance\n-   = help: if this is intentional, consider extracting the `Arc` initialization to a variable\n-   = help: or if not, initialize each element individually\n+help: consider initializing each `Arc` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(std::sync::Arc::new..));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Arc` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = std::sync::Arc::new..;\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e05f024cf9de260324162953ed249cc2815cabb4", "filename": "tests/ui/rc_clone_in_vec_init/rc.stderr", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f3e01c4f6a12ad1bd70813875ed84dbe8c830df7/tests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3e01c4f6a12ad1bd70813875ed84dbe8c830df7/tests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr?ref=f3e01c4f6a12ad1bd70813875ed84dbe8c830df7", "patch": "@@ -6,8 +6,21 @@ LL |     let v = vec![Rc::new(\"x\".to_string()); 2];\n    |\n    = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n    = note: each element will point to the same `Rc` instance\n-   = help: if this is intentional, consider extracting the `Rc` initialization to a variable\n-   = help: or if not, initialize each element individually\n+help: consider initializing each `Rc` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(Rc::new(\"x\".to_string())));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Rc` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = Rc::new(\"x\".to_string());\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n \n error: calling `Rc::new` in `vec![elem; len]`\n   --> $DIR/rc.rs:12:13\n@@ -23,8 +36,21 @@ LL | |     ];\n    | |_____^\n    |\n    = note: each element will point to the same `Rc` instance\n-   = help: if this is intentional, consider extracting the `Rc` initialization to a variable\n-   = help: or if not, initialize each element individually\n+help: consider initializing each `Rc` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(std::rc::Rc::new..));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Rc` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = std::rc::Rc::new..;\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n \n error: aborting due to 2 previous errors\n "}]}