{"sha": "5b12832012c4d92296889d03737f0705ac2d5698", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMTI4MzIwMTJjNGQ5MjI5Njg4OWQwMzczN2YwNzA1YWMyZDU2OTg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-17T20:23:10Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-17T23:48:11Z"}, "message": "Make import resolution and error resolution reporting deterministic.\nThese tasks used to depend on the iteration order of `module_children`.", "tree": {"sha": "d2d91d53ce4f52b1758bbae9873b3d1597f1bd0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d91d53ce4f52b1758bbae9873b3d1597f1bd0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b12832012c4d92296889d03737f0705ac2d5698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b12832012c4d92296889d03737f0705ac2d5698", "html_url": "https://github.com/rust-lang/rust/commit/5b12832012c4d92296889d03737f0705ac2d5698", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b12832012c4d92296889d03737f0705ac2d5698/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f4791555486c856fdf4b1c782305a589b9cbf25", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4791555486c856fdf4b1c782305a589b9cbf25", "html_url": "https://github.com/rust-lang/rust/commit/5f4791555486c856fdf4b1c782305a589b9cbf25"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "cf302886f11e139f50f081744e0df9dbf734f11b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b12832012c4d92296889d03737f0705ac2d5698/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b12832012c4d92296889d03737f0705ac2d5698/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5b12832012c4d92296889d03737f0705ac2d5698", "patch": "@@ -1103,14 +1103,22 @@ pub struct Resolver<'a, 'tcx: 'a> {\n \n struct ResolverArenas<'a> {\n     modules: arena::TypedArena<ModuleS<'a>>,\n+    local_modules: RefCell<Vec<Module<'a>>>,\n     name_bindings: arena::TypedArena<NameBinding<'a>>,\n     import_directives: arena::TypedArena<ImportDirective<'a>>,\n     name_resolutions: arena::TypedArena<RefCell<NameResolution<'a>>>,\n }\n \n impl<'a> ResolverArenas<'a> {\n     fn alloc_module(&'a self, module: ModuleS<'a>) -> Module<'a> {\n-        self.modules.alloc(module)\n+        let module = self.modules.alloc(module);\n+        if module.def_id().map(|def_id| def_id.is_local()).unwrap_or(true) {\n+            self.local_modules.borrow_mut().push(module);\n+        }\n+        module\n+    }\n+    fn local_modules(&'a self) -> ::std::cell::Ref<'a, Vec<Module<'a>>> {\n+        self.local_modules.borrow()\n     }\n     fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {\n         self.name_bindings.alloc(name_binding)\n@@ -1189,6 +1197,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn arenas() -> ResolverArenas<'a> {\n         ResolverArenas {\n             modules: arena::TypedArena::new(),\n+            local_modules: RefCell::new(Vec::new()),\n             name_bindings: arena::TypedArena::new(),\n             import_directives: arena::TypedArena::new(),\n             name_resolutions: arena::TypedArena::new(),"}, {"sha": "69536b3f1bbdcf1dc2647a140a4355d59f759cf8", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5b12832012c4d92296889d03737f0705ac2d5698/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b12832012c4d92296889d03737f0705ac2d5698/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5b12832012c4d92296889d03737f0705ac2d5698", "patch": "@@ -29,7 +29,6 @@ use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n-use std::mem::replace;\n use std::cell::{Cell, RefCell};\n \n /// Contains data for specific types of import directives.\n@@ -371,11 +370,17 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                    i,\n                    self.resolver.unresolved_imports);\n \n-            self.resolve_imports_for_module_subtree(self.resolver.graph_root, &mut errors);\n+            // Attempt to resolve imports in all local modules.\n+            for module in self.resolver.arenas.local_modules().iter() {\n+                self.resolver.current_module = module;\n+                self.resolve_imports_in_current_module(&mut errors);\n+            }\n \n             if self.resolver.unresolved_imports == 0 {\n                 debug!(\"(resolving imports) success\");\n-                self.finalize_resolutions(self.resolver.graph_root, false);\n+                for module in self.resolver.arenas.local_modules().iter() {\n+                    self.finalize_resolutions_in(module, false);\n+                }\n                 break;\n             }\n \n@@ -385,7 +390,9 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                 // to avoid generating multiple errors on the same import.\n                 // Imports that are still indeterminate at this point are actually blocked\n                 // by errored imports, so there is no point reporting them.\n-                self.finalize_resolutions(self.resolver.graph_root, errors.len() == 0);\n+                for module in self.resolver.arenas.local_modules().iter() {\n+                    self.finalize_resolutions_in(module, errors.len() == 0);\n+                }\n                 for e in errors {\n                     self.import_resolving_error(e)\n                 }\n@@ -422,22 +429,6 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                       ResolutionError::UnresolvedImport(Some((&path, &e.help))));\n     }\n \n-    /// Attempts to resolve imports for the given module and all of its\n-    /// submodules.\n-    fn resolve_imports_for_module_subtree(&mut self,\n-                                          module_: Module<'b>,\n-                                          errors: &mut Vec<ImportResolvingError<'b>>) {\n-        debug!(\"(resolving imports for module subtree) resolving {}\",\n-               module_to_string(&module_));\n-        let orig_module = replace(&mut self.resolver.current_module, module_);\n-        self.resolve_imports_in_current_module(errors);\n-        self.resolver.current_module = orig_module;\n-\n-        for (_, child_module) in module_.module_children.borrow().iter() {\n-            self.resolve_imports_for_module_subtree(child_module, errors);\n-        }\n-    }\n-\n     /// Attempts to resolve imports for the given module only.\n     fn resolve_imports_in_current_module(&mut self, errors: &mut Vec<ImportResolvingError<'b>>) {\n         let mut imports = Vec::new();\n@@ -675,7 +666,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n     // Miscellaneous post-processing, including recording reexports, recording shadowed traits,\n     // reporting conflicts, reporting the PRIVATE_IN_PUBLIC lint, and reporting unresolved imports.\n-    fn finalize_resolutions(&mut self, module: Module<'b>, report_unresolved_imports: bool) {\n+    fn finalize_resolutions_in(&mut self, module: Module<'b>, report_unresolved_imports: bool) {\n         // Since import resolution is finished, globs will not define any more names.\n         *module.globs.borrow_mut() = Vec::new();\n \n@@ -723,10 +714,6 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                 break;\n             }\n         }\n-\n-        for (_, child) in module.module_children.borrow().iter() {\n-            self.finalize_resolutions(child, report_unresolved_imports);\n-        }\n     }\n }\n "}]}