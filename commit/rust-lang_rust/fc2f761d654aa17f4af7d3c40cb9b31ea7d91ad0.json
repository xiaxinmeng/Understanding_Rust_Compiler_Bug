{"sha": "fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMmY3NjFkNjU0YWExN2Y0YWY3ZDNjNDBjYjliMzFlYTdkOTFhZDA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-14T19:29:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-14T19:29:28Z"}, "message": "Merge #5378\n\n5378: Thread varargs through rust-analyzer r=flodiebold a=jonas-schievink\n\nThis adds a varargs flag to various data structures and fills it from the AST.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/5374\r\n\r\ncc @flodiebold for the typesystem/chalk changes\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "7418a329ccaa953b5b4c9d3718232c195e2abb46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7418a329ccaa953b5b4c9d3718232c195e2abb46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDgeYCRBK7hj4Ov3rIwAAdHIIAJiUrlsOuHX1ZxwUx9FKyS5G\npSF02/6cNSBd2yK7wZVf036OpuI13LEbceqo4KCD9eoo/aCk9FBO4pnwRzVgHeW7\ngFXDvGGjfVu445RkUmSicTSeAUlxMy2bJZKJrc78NJL5j6biG1GsqjYskenHRkK+\nQFGqkjuZpKpYBKlu5lOIQd5CRAingvELeleaDjz10ZQqP5xTqyk+HqHM4mci4Ijo\nVl+bRYGXH7XHxN1pquolg9HTcISUti9eXu5xxDG297UuLcio51xivzr5kjKFyGtO\n5z7Jiw5CzwiQSbnn7uqfL5iv1zVP59x9lJqV0wO73P1mDpnreHQUkGuJsIdcWg8=\n=LeBQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7418a329ccaa953b5b4c9d3718232c195e2abb46\nparent 3f2ab436f45a4fae32514756736055819ead2baa\nparent fdce4d9f5140085c6c362ecbcf837f1b6a7d50ca\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594754968 +0000\ncommitter GitHub <noreply@github.com> 1594754968 +0000\n\nMerge #5378\n\n5378: Thread varargs through rust-analyzer r=flodiebold a=jonas-schievink\n\nThis adds a varargs flag to various data structures and fills it from the AST.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/5374\r\n\r\ncc @flodiebold for the typesystem/chalk changes\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "html_url": "https://github.com/rust-lang/rust/commit/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2ab436f45a4fae32514756736055819ead2baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2ab436f45a4fae32514756736055819ead2baa", "html_url": "https://github.com/rust-lang/rust/commit/3f2ab436f45a4fae32514756736055819ead2baa"}, {"sha": "fdce4d9f5140085c6c362ecbcf837f1b6a7d50ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdce4d9f5140085c6c362ecbcf837f1b6a7d50ca", "html_url": "https://github.com/rust-lang/rust/commit/fdce4d9f5140085c6c362ecbcf837f1b6a7d50ca"}], "stats": {"total": 134, "additions": 100, "deletions": 34}, "files": [{"sha": "88a8ef9bffebedec08f3181688aed1bd15c2c518", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -27,6 +27,7 @@ pub struct FunctionData {\n     /// can be called as a method.\n     pub has_self_param: bool,\n     pub is_unsafe: bool,\n+    pub is_varargs: bool,\n     pub visibility: RawVisibility,\n }\n \n@@ -43,6 +44,7 @@ impl FunctionData {\n             attrs: item_tree.attrs(ModItem::from(loc.id.value).into()).clone(),\n             has_self_param: func.has_self_param,\n             is_unsafe: func.is_unsafe,\n+            is_varargs: func.is_varargs,\n             visibility: item_tree[func.visibility].clone(),\n         })\n     }"}, {"sha": "da79d8ffd87f77e161e2fb2ad65a213cff945423", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -503,6 +503,7 @@ pub struct Function {\n     pub has_self_param: bool,\n     pub is_unsafe: bool,\n     pub params: Box<[TypeRef]>,\n+    pub is_varargs: bool,\n     pub ret_type: TypeRef,\n     pub ast_id: FileAstId<ast::FnDef>,\n }"}, {"sha": "f79b8fca3d79b876ca465884f2d320c030956118", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -313,6 +313,14 @@ impl Ctx {\n                 params.push(type_ref);\n             }\n         }\n+\n+        let mut is_varargs = false;\n+        if let Some(params) = func.param_list() {\n+            if let Some(last) = params.params().last() {\n+                is_varargs = last.dotdotdot_token().is_some();\n+            }\n+        }\n+\n         let ret_type = match func.ret_type().and_then(|rt| rt.type_ref()) {\n             Some(type_ref) => TypeRef::from_ast(&self.body_ctx, type_ref),\n             _ => TypeRef::unit(),\n@@ -334,6 +342,7 @@ impl Ctx {\n             has_self_param,\n             is_unsafe: func.unsafe_token().is_some(),\n             params: params.into_boxed_slice(),\n+            is_varargs,\n             ret_type,\n             ast_id,\n         };"}, {"sha": "f26982985f4146491ed1b48234a804428936c6e5", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -240,9 +240,9 @@ fn smoke() {\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_const\"))] }, input: None }]) }]\n             > Const { name: Some(Name(Text(\"CONST\"))), visibility: RawVisibilityId(\"pub(self)\"), type_ref: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"u8\"))] }, generic_args: [None] }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ConstDef>(9) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_method\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(10) }\n+            > Function { name: Name(Text(\"method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Shared)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(10) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_dfl_method\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"dfl_method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(11) }\n+            > Function { name: Name(Text(\"dfl_method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(11) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct0\"))] }, input: None }]) }]\n             Struct { name: Name(Text(\"Struct0\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(3), kind: Unit }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct1\"))] }, input: None }]) }]\n@@ -275,12 +275,12 @@ fn simple_inner_items() {\n \n             top-level items:\n             Impl { generic_params: GenericParamsId(0), target_trait: Some(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"D\"))] }, generic_args: [None] })), target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Response\"))] }, generic_args: [Some(GenericArgs { args: [Type(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"T\"))] }, generic_args: [None] }))], has_self_type: false, bindings: [] })] }), is_negative: false, items: [Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n-            > Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+            > Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n \n             inner items:\n \n             for AST FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(2):\n-            Function { name: Name(Text(\"end\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+            Function { name: Name(Text(\"end\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n \n         \"#]],\n     );\n@@ -303,9 +303,9 @@ fn extern_attrs() {\n \n             top-level items:\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n-            Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: true, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+            Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: true, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }, Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"block_attr\"))] }, input: None }]) }]\n-            Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: true, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+            Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: true, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n         \"##]],\n     );\n }\n@@ -329,9 +329,9 @@ fn trait_attrs() {\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"trait_attr\"))] }, input: None }]) }]\n             Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(0), auto: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::TraitDef>(0) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n         \"##]],\n     );\n }\n@@ -355,9 +355,9 @@ fn impl_attrs() {\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"impl_attr\"))] }, input: None }]) }]\n             Impl { generic_params: GenericParamsId(4294967295), target_trait: None, target_type: Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Ty\"))] }, generic_args: [None] }), is_negative: false, items: [Function(Idx::<Function>(0)), Function(Idx::<Function>(1))], ast_id: FileAstId::<ra_syntax::ast::generated::nodes::ImplDef>(0) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_a\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+            > Function { name: Name(Text(\"a\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"attr_b\"))] }, input: None }]) }]\n-            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n+            > Function { name: Name(Text(\"b\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(2) }\n         \"##]],\n     );\n }\n@@ -408,13 +408,13 @@ fn inner_item_attrs() {\n             inner attrs: Attrs { entries: None }\n \n             top-level items:\n-            Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(0) }\n+            Function { name: Name(Text(\"foo\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(0) }\n \n             inner items:\n \n             for AST FileAstId::<ra_syntax::ast::generated::nodes::ModuleItem>(1):\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"on_inner\"))] }, input: None }]) }]\n-            Function { name: Name(Text(\"inner\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n+            Function { name: Name(Text(\"inner\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: false, is_unsafe: false, params: [], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::FnDef>(1) }\n \n         \"##]],\n     );"}, {"sha": "e90b2a0b9289e7c295ed368a9eed2eab9e0b5627", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -63,7 +63,7 @@ pub enum TypeRef {\n     Array(Box<TypeRef> /*, Expr*/),\n     Slice(Box<TypeRef>),\n     /// A fn pointer. Last element of the vector is the return type.\n-    Fn(Vec<TypeRef>),\n+    Fn(Vec<TypeRef>, bool /*varargs*/),\n     // For\n     ImplTrait(Vec<TypeBound>),\n     DynTrait(Vec<TypeBound>),\n@@ -118,7 +118,12 @@ impl TypeRef {\n                     .and_then(|rt| rt.type_ref())\n                     .map(|it| TypeRef::from_ast(ctx, it))\n                     .unwrap_or_else(|| TypeRef::Tuple(Vec::new()));\n+                let mut is_varargs = false;\n                 let mut params = if let Some(pl) = inner.param_list() {\n+                    if let Some(param) = pl.params().last() {\n+                        is_varargs = param.dotdotdot_token().is_some();\n+                    }\n+\n                     pl.params()\n                         .map(|p| p.ascribed_type())\n                         .map(|it| TypeRef::from_ast_opt(&ctx, it))\n@@ -127,7 +132,7 @@ impl TypeRef {\n                     Vec::new()\n                 };\n                 params.push(ret_ty);\n-                TypeRef::Fn(params)\n+                TypeRef::Fn(params, is_varargs)\n             }\n             // for types are close enough for our purposes to the inner type for now...\n             ast::TypeRef::ForType(inner) => TypeRef::from_ast_opt(&ctx, inner.type_ref()),\n@@ -158,7 +163,9 @@ impl TypeRef {\n         fn go(type_ref: &TypeRef, f: &mut impl FnMut(&TypeRef)) {\n             f(type_ref);\n             match type_ref {\n-                TypeRef::Fn(types) | TypeRef::Tuple(types) => types.iter().for_each(|t| go(t, f)),\n+                TypeRef::Fn(types, _) | TypeRef::Tuple(types) => {\n+                    types.iter().for_each(|t| go(t, f))\n+                }\n                 TypeRef::RawPtr(type_ref, _)\n                 | TypeRef::Reference(type_ref, _)\n                 | TypeRef::Array(type_ref)"}, {"sha": "557d01cdc9fd23246acabc7153f702b5dd7c43fb", "filename": "crates/ra_hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -175,6 +175,10 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         };\n \n         let sig = db.callable_item_signature(callee);\n+        if sig.value.is_varargs {\n+            return None;\n+        }\n+\n         let params = sig.value.params();\n \n         let mut param_count = params.len();\n@@ -512,4 +516,30 @@ impl Foo {\n         \"#,\n         );\n     }\n+\n+    #[test]\n+    fn varargs() {\n+        check_diagnostics(\n+            r#\"\n+extern \"C\" {\n+    fn fixed(fixed: u8);\n+    fn varargs(fixed: u8, ...);\n+    fn varargs2(...);\n+}\n+\n+fn f() {\n+    unsafe {\n+        fixed(0);\n+        fixed(0, 1);\n+      //^^^^^^^^^^^ Expected 1 argument, found 2\n+        varargs(0);\n+        varargs(0, 1);\n+        varargs2();\n+        varargs2(0);\n+        varargs2(0, 1);\n+    }\n+}\n+        \"#,\n+        )\n+    }\n }"}, {"sha": "c860c254ca43ae7f41b64dbad02c68d882166f69", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -243,10 +243,17 @@ impl HirDisplay for ApplicationTy {\n                     write!(f, \")\")?;\n                 }\n             }\n-            TypeCtor::FnPtr { .. } => {\n-                let sig = FnSig::from_fn_ptr_substs(&self.parameters);\n+            TypeCtor::FnPtr { is_varargs, .. } => {\n+                let sig = FnSig::from_fn_ptr_substs(&self.parameters, is_varargs);\n                 write!(f, \"fn(\")?;\n                 f.write_joined(sig.params(), \", \")?;\n+                if is_varargs {\n+                    if sig.params().is_empty() {\n+                        write!(f, \"...\")?;\n+                    } else {\n+                        write!(f, \", ...\")?;\n+                    }\n+                }\n                 write!(f, \")\")?;\n                 let ret = sig.ret();\n                 if *ret != Ty::unit() {"}, {"sha": "ab586b018dd0a95a7b4cd014215db730d3b8e874", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -220,7 +220,7 @@ impl<'a> InferenceContext<'a> {\n                 };\n                 sig_tys.push(ret_ty.clone());\n                 let sig_ty = Ty::apply(\n-                    TypeCtor::FnPtr { num_args: sig_tys.len() as u16 - 1 },\n+                    TypeCtor::FnPtr { num_args: sig_tys.len() as u16 - 1, is_varargs: false },\n                     Substs(sig_tys.clone().into()),\n                 );\n                 let closure_ty ="}, {"sha": "c4c24a83b0cb319db0172b3725945e48787c3fe7", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -112,7 +112,7 @@ pub enum TypeCtor {\n     /// fn foo() -> i32 { 1 }\n     /// let bar: fn() -> i32 = foo;\n     /// ```\n-    FnPtr { num_args: u16 },\n+    FnPtr { num_args: u16, is_varargs: bool },\n \n     /// The never type `!`.\n     Never,\n@@ -187,7 +187,7 @@ impl TypeCtor {\n                     }\n                 }\n             }\n-            TypeCtor::FnPtr { num_args } => num_args as usize + 1,\n+            TypeCtor::FnPtr { num_args, is_varargs: _ } => num_args as usize + 1,\n             TypeCtor::Tuple { cardinality } => cardinality as usize,\n         }\n     }\n@@ -667,19 +667,20 @@ pub enum TyKind {\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct FnSig {\n     params_and_return: Arc<[Ty]>,\n+    is_varargs: bool,\n }\n \n /// A polymorphic function signature.\n pub type PolyFnSig = Binders<FnSig>;\n \n impl FnSig {\n-    pub fn from_params_and_return(mut params: Vec<Ty>, ret: Ty) -> FnSig {\n+    pub fn from_params_and_return(mut params: Vec<Ty>, ret: Ty, is_varargs: bool) -> FnSig {\n         params.push(ret);\n-        FnSig { params_and_return: params.into() }\n+        FnSig { params_and_return: params.into(), is_varargs }\n     }\n \n-    pub fn from_fn_ptr_substs(substs: &Substs) -> FnSig {\n-        FnSig { params_and_return: Arc::clone(&substs.0) }\n+    pub fn from_fn_ptr_substs(substs: &Substs, is_varargs: bool) -> FnSig {\n+        FnSig { params_and_return: Arc::clone(&substs.0), is_varargs }\n     }\n \n     pub fn params(&self) -> &[Ty] {\n@@ -724,7 +725,7 @@ impl Ty {\n     }\n     pub fn fn_ptr(sig: FnSig) -> Self {\n         Ty::apply(\n-            TypeCtor::FnPtr { num_args: sig.params().len() as u16 },\n+            TypeCtor::FnPtr { num_args: sig.params().len() as u16, is_varargs: sig.is_varargs },\n             Substs(sig.params_and_return),\n         )\n     }\n@@ -821,7 +822,9 @@ impl Ty {\n     fn callable_sig(&self, db: &dyn HirDatabase) -> Option<FnSig> {\n         match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {\n-                TypeCtor::FnPtr { .. } => Some(FnSig::from_fn_ptr_substs(&a_ty.parameters)),\n+                TypeCtor::FnPtr { is_varargs, .. } => {\n+                    Some(FnSig::from_fn_ptr_substs(&a_ty.parameters, is_varargs))\n+                }\n                 TypeCtor::FnDef(def) => {\n                     let sig = db.callable_item_signature(def);\n                     Some(sig.subst(&a_ty.parameters))"}, {"sha": "6f4398e842230679f58925c429d61db37881dea2", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -176,9 +176,12 @@ impl Ty {\n                 Ty::apply_one(TypeCtor::Ref(*mutability), inner_ty)\n             }\n             TypeRef::Placeholder => Ty::Unknown,\n-            TypeRef::Fn(params) => {\n+            TypeRef::Fn(params, is_varargs) => {\n                 let sig = Substs(params.iter().map(|tr| Ty::from_hir(ctx, tr)).collect());\n-                Ty::apply(TypeCtor::FnPtr { num_args: sig.len() as u16 - 1 }, sig)\n+                Ty::apply(\n+                    TypeCtor::FnPtr { num_args: sig.len() as u16 - 1, is_varargs: *is_varargs },\n+                    sig,\n+                )\n             }\n             TypeRef::DynTrait(bounds) => {\n                 let self_ty = Ty::Bound(BoundVar::new(DebruijnIndex::INNERMOST, 0));\n@@ -996,7 +999,7 @@ fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {\n     let ret = Ty::from_hir(&ctx_ret, &data.ret_type);\n     let generics = generics(db.upcast(), def.into());\n     let num_binders = generics.len();\n-    Binders::new(num_binders, FnSig::from_params_and_return(params, ret))\n+    Binders::new(num_binders, FnSig::from_params_and_return(params, ret, data.is_varargs))\n }\n \n /// Build the declared type of a function. This should not need to look at the\n@@ -1047,7 +1050,7 @@ fn fn_sig_for_struct_constructor(db: &dyn HirDatabase, def: StructId) -> PolyFnS\n     let params =\n         fields.iter().map(|(_, field)| Ty::from_hir(&ctx, &field.type_ref)).collect::<Vec<_>>();\n     let ret = type_for_adt(db, def.into());\n-    Binders::new(ret.num_binders, FnSig::from_params_and_return(params, ret.value))\n+    Binders::new(ret.num_binders, FnSig::from_params_and_return(params, ret.value, false))\n }\n \n /// Build the type of a tuple struct constructor.\n@@ -1071,7 +1074,7 @@ fn fn_sig_for_enum_variant_constructor(db: &dyn HirDatabase, def: EnumVariantId)\n     let params =\n         fields.iter().map(|(_, field)| Ty::from_hir(&ctx, &field.type_ref)).collect::<Vec<_>>();\n     let ret = type_for_adt(db, def.parent.into());\n-    Binders::new(ret.num_binders, FnSig::from_params_and_return(params, ret.value))\n+    Binders::new(ret.num_binders, FnSig::from_params_and_return(params, ret.value, false))\n }\n \n /// Build the type of a tuple enum variant constructor."}, {"sha": "60cc9a9f50c212be1f4997700a1dfe4de0ef4371", "filename": "crates/ra_hir_ty/src/traits/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -121,7 +121,7 @@ fn closure_fn_trait_impl_datum(\n             .build(),\n     );\n     let sig_ty = Ty::apply(\n-        TypeCtor::FnPtr { num_args },\n+        TypeCtor::FnPtr { num_args, is_varargs: false },\n         Substs::builder(num_args as usize + 1)\n             .fill_with_bound_vars(DebruijnIndex::INNERMOST, 0)\n             .build(),"}, {"sha": "3ebb55f7742d4b60c2dae08bdf17a6d24ae498b9", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=fc2f761d654aa17f4af7d3c40cb9b31ea7d91ad0", "patch": "@@ -30,7 +30,8 @@ impl ToChalk for Ty {\n             Ty::Apply(apply_ty) => match apply_ty.ctor {\n                 TypeCtor::Ref(m) => ref_to_chalk(db, m, apply_ty.parameters),\n                 TypeCtor::Array => array_to_chalk(db, apply_ty.parameters),\n-                TypeCtor::FnPtr { num_args: _ } => {\n+                TypeCtor::FnPtr { num_args: _, is_varargs: _ } => {\n+                    // FIXME: handle is_varargs\n                     let substitution = apply_ty.parameters.to_chalk(db).shifted_in(&Interner);\n                     chalk_ir::TyData::Function(chalk_ir::Fn { num_binders: 0, substitution })\n                         .intern(&Interner)\n@@ -124,7 +125,10 @@ impl ToChalk for Ty {\n                     substitution.shifted_out(&Interner).expect(\"fn ptr should have no binders\"),\n                 );\n                 Ty::Apply(ApplicationTy {\n-                    ctor: TypeCtor::FnPtr { num_args: (parameters.len() - 1) as u16 },\n+                    ctor: TypeCtor::FnPtr {\n+                        num_args: (parameters.len() - 1) as u16,\n+                        is_varargs: false,\n+                    },\n                     parameters,\n                 })\n             }"}]}