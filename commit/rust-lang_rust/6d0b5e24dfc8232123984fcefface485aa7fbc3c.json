{"sha": "6d0b5e24dfc8232123984fcefface485aa7fbc3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMGI1ZTI0ZGZjODIzMjEyMzk4NGZjZWZmYWNlNDg1YWE3ZmJjM2M=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-08-10T22:27:55Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-08-10T22:27:55Z"}, "message": "update test stderr", "tree": {"sha": "6c30ddc5b026be94eafa7390274fc6be9144d0bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c30ddc5b026be94eafa7390274fc6be9144d0bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0b5e24dfc8232123984fcefface485aa7fbc3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0b5e24dfc8232123984fcefface485aa7fbc3c", "html_url": "https://github.com/rust-lang/rust/commit/6d0b5e24dfc8232123984fcefface485aa7fbc3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0b5e24dfc8232123984fcefface485aa7fbc3c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f59ec1945f887eeff17ae04008fc1e6e8b1fb4f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f59ec1945f887eeff17ae04008fc1e6e8b1fb4f6", "html_url": "https://github.com/rust-lang/rust/commit/f59ec1945f887eeff17ae04008fc1e6e8b1fb4f6"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "33bb5136ef8e70ff8c5a24fd0a1f90fb9b75ac27", "filename": "tests/ui/checked_unwrap/complex_conditionals.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b5e24dfc8232123984fcefface485aa7fbc3c/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b5e24dfc8232123984fcefface485aa7fbc3c/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr?ref=6d0b5e24dfc8232123984fcefface485aa7fbc3c", "patch": "@@ -1,4 +1,4 @@\n-error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:8:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n@@ -36,7 +36,7 @@ LL |     if x.is_ok() && y.is_err() {\n LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:11:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n@@ -54,7 +54,7 @@ LL |     if x.is_ok() || y.is_ok() {\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:26:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n@@ -72,7 +72,7 @@ LL |     if x.is_ok() || y.is_ok() {\n LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:28:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n@@ -81,7 +81,7 @@ LL |     if x.is_ok() || y.is_ok() {\n LL |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:32:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -107,7 +107,7 @@ LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:35:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -116,7 +116,7 @@ LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n LL |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:36:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -143,7 +143,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:46:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -152,7 +152,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:47:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -179,7 +179,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         z.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:50:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {"}, {"sha": "a01f7f956f629c80ac8affb2f702a1b148b794d2", "filename": "tests/ui/checked_unwrap/complex_conditionals_nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b5e24dfc8232123984fcefface485aa7fbc3c/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b5e24dfc8232123984fcefface485aa7fbc3c/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.stderr?ref=6d0b5e24dfc8232123984fcefface485aa7fbc3c", "patch": "@@ -1,4 +1,4 @@\n-error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals_nested.rs:8:13\n    |\n LL |         if x.is_some() {"}, {"sha": "416ec1a01ab3aa27e59b9ed44bd9d8cde45c911e", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b5e24dfc8232123984fcefface485aa7fbc3c/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b5e24dfc8232123984fcefface485aa7fbc3c/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=6d0b5e24dfc8232123984fcefface485aa7fbc3c", "patch": "@@ -1,4 +1,4 @@\n-error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:39:9\n    |\n LL |     if x.is_some() {\n@@ -35,7 +35,7 @@ LL |     if x.is_none() {\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:46:9\n    |\n LL |     if x.is_none() {\n@@ -44,7 +44,7 @@ LL |     if x.is_none() {\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:7:13\n    |\n LL |         if $a.is_some() {\n@@ -57,7 +57,7 @@ LL |     m!(x);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:54:9\n    |\n LL |     if x.is_ok() {\n@@ -83,7 +83,7 @@ LL |     if x.is_ok() {\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:58:9\n    |\n LL |     if x.is_ok() {\n@@ -100,7 +100,7 @@ LL |     if x.is_err() {\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap_err()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:62:9\n    |\n LL |     if x.is_err() {\n@@ -109,7 +109,7 @@ LL |         x.unwrap(); // will panic\n LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n+error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:64:9\n    |\n LL |     if x.is_err() {"}, {"sha": "c78560007217df78dd4f78a65810cb4956cabfef", "filename": "tests/ui/neg_cmp_op_on_partial_ord.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d0b5e24dfc8232123984fcefface485aa7fbc3c/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d0b5e24dfc8232123984fcefface485aa7fbc3c/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr?ref=6d0b5e24dfc8232123984fcefface485aa7fbc3c", "patch": "@@ -1,24 +1,24 @@\n-error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor, please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:16:21\n    |\n LL |     let _not_less = !(a_value < another_value);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::neg-cmp-op-on-partial-ord` implied by `-D warnings`\n \n-error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor, please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:19:30\n    |\n LL |     let _not_less_or_equal = !(a_value <= another_value);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor, please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:22:24\n    |\n LL |     let _not_greater = !(a_value > another_value);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor, please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:25:33\n    |\n LL |     let _not_greater_or_equal = !(a_value >= another_value);"}]}