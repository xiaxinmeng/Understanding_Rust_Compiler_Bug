{"sha": "ed362c07ff95b34b091a6a719c881410e498eeb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMzYyYzA3ZmY5NWIzNGIwOTFhNmE3MTljODgxNDEwZTQ5OGVlYjU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-07-16T03:52:41Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-18T17:02:15Z"}, "message": "Do not use desugared ident when suggesting adding a type", "tree": {"sha": "89bf51190ca21d89082b58e28e5f877804dfb245", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89bf51190ca21d89082b58e28e5f877804dfb245"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed362c07ff95b34b091a6a719c881410e498eeb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed362c07ff95b34b091a6a719c881410e498eeb5", "html_url": "https://github.com/rust-lang/rust/commit/ed362c07ff95b34b091a6a719c881410e498eeb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed362c07ff95b34b091a6a719c881410e498eeb5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29ee65411c46b8f701bd1f241725092cb1b347e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/29ee65411c46b8f701bd1f241725092cb1b347e6", "html_url": "https://github.com/rust-lang/rust/commit/29ee65411c46b8f701bd1f241725092cb1b347e6"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "358c64799d19befd14206fba2efe51bf6f30f816", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ed362c07ff95b34b091a6a719c881410e498eeb5", "patch": "@@ -4011,8 +4011,10 @@ impl<'a> LoweringContext<'a> {\n                 let iter = self.str_to_ident(\"iter\");\n \n                 let next_ident = self.str_to_ident(\"__next\");\n+                let sp = self.allow_internal_unstable(CompilerDesugaringKind::ForLoop,\n+                                                      pat.span);\n                 let next_pat = self.pat_ident_binding_mode(\n-                    pat.span,\n+                    sp,\n                     next_ident,\n                     hir::BindingAnnotation::Mutable,\n                 );"}, {"sha": "c9ac6cdedbbc66fc882db6f3ee1e062351465b01", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=ed362c07ff95b34b091a6a719c881410e498eeb5", "patch": "@@ -412,6 +412,7 @@ impl_stable_hash_for!(enum ::syntax_pos::hygiene::CompilerDesugaringKind {\n     DotFill,\n     QuestionMark,\n     ExistentialReturnType,\n+    ForLoop,\n     Catch\n });\n "}, {"sha": "876faadb160478d7d89098970ff275bd796d68a0", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=ed362c07ff95b34b091a6a719c881410e498eeb5", "patch": "@@ -132,7 +132,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             labels.push((pattern.span, format!(\"consider giving this closure parameter a type\")));\n         } else if let Some(pattern) = local_visitor.found_local_pattern {\n             if let Some(simple_ident) = pattern.simple_ident() {\n-                labels.push((pattern.span, format!(\"consider giving `{}` a type\", simple_ident)));\n+                labels.push((\n+                    pattern.span,\n+                    match pattern.span.compiler_desugaring_kind() {\n+                        None => format!(\"consider giving `{}` a type\", simple_ident),\n+                        _ => \"consider giving this a type\".to_string(),\n+                    }));\n             } else {\n                 labels.push((pattern.span, format!(\"consider giving the pattern a type\")));\n             }"}, {"sha": "1531f030127e302516fe924b350571ac3d5e3675", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=ed362c07ff95b34b091a6a719c881410e498eeb5", "patch": "@@ -602,6 +602,7 @@ pub enum CompilerDesugaringKind {\n     /// `impl Trait` with `Foo`.\n     ExistentialReturnType,\n     Async,\n+    ForLoop,\n }\n \n impl CompilerDesugaringKind {\n@@ -612,6 +613,7 @@ impl CompilerDesugaringKind {\n             CompilerDesugaringKind::QuestionMark => \"?\",\n             CompilerDesugaringKind::Catch => \"do catch\",\n             CompilerDesugaringKind::ExistentialReturnType => \"existential type\",\n+            CompilerDesugaringKind::ForLoop => \"for loop\",\n         })\n     }\n }"}, {"sha": "0fdc51f29cce6619e0f8e340c05c64a29c6430f8", "filename": "src/test/ui/issue-51116.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Ftest%2Fui%2Fissue-51116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Ftest%2Fui%2Fissue-51116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51116.rs?ref=ed362c07ff95b34b091a6a719c881410e498eeb5", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let tiles = Default::default();\n+    for row in &mut tiles {\n+        for tile in row {\n+            //~^ NOTE consider giving this a type\n+            *tile = 0;\n+            //~^ ERROR type annotations needed\n+            //~| NOTE cannot infer type for `_`\n+            //~| NOTE type must be known at this point\n+        }\n+    }\n+    \n+    let tiles: [[usize; 3]; 3] = tiles;\n+}"}, {"sha": "f2f116d47d8a65975d9b03d2eea7daf397956021", "filename": "src/test/ui/issue-51116.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Ftest%2Fui%2Fissue-51116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed362c07ff95b34b091a6a719c881410e498eeb5/src%2Ftest%2Fui%2Fissue-51116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51116.stderr?ref=ed362c07ff95b34b091a6a719c881410e498eeb5", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-51116.rs:16:13\n+   |\n+LL |         for tile in row {\n+   |             ---- consider giving this a type\n+LL |             //~^ NOTE consider giving this a type\n+LL |             *tile = 0;\n+   |             ^^^^^ cannot infer type for `_`\n+   |\n+   = note: type must be known at this point\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}