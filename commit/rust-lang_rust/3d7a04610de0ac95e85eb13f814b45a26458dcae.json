{"sha": "3d7a04610de0ac95e85eb13f814b45a26458dcae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkN2EwNDYxMGRlMGFjOTVlODVlYjEzZjgxNGI0NWEyNjQ1OGRjYWU=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2018-03-26T13:14:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-26T13:14:50Z"}, "message": "Rollup merge of #48693 - vorner:doc-name-resolution, r=petrochenkov\n\nSome comments and documentation for name resolution crate\n\nHello\n\nI'm trying to get a grasp of how the name resolution crate works, as part of helping with https://github.com/rust-lang-nursery/rustc-guide/issues/16. Not that I'd be succeeding much, but as I was reading the code, I started to put some notes into it, to help me understand.\n\nI guess I didn't get very far yet, but I'd like to share what I have, in case it might be useful for someone else. I hope these are correct (even if incomplete), but I'll be glad for a fast check in case I put something misleading there.", "tree": {"sha": "eac279fe5de2ef418d6dff1d629b0d996d83fc9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eac279fe5de2ef418d6dff1d629b0d996d83fc9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7a04610de0ac95e85eb13f814b45a26458dcae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJauPJLCRBK7hj4Ov3rIwAAdHIIAIaoqaBpb5kHPbmaj86/1Cxv\nUmtr6sMDo9x5i2Xo1jwCF5BwKXpv9b6qHUID3v5L26pWvLJO/ZO6+EBKtAfnbrN4\nZHcknU5RS+WJBL9Z5B8mvffbp2HBLV9pDFaRvoxyNHm7rV4b2mqEUDfYrEy+qZpV\n4ZZBjfC+w0y6x3vZSTB3H9t11g1YJIG0vguNKJdT1X33hfi7EtraWZr6L4cUAatC\nyvpRmlWRw/30T9M+GGT31HspvN+UfUh/GOTqgUMs1K0WYhWcIjXaxiJVmXuf8MPd\nN9GXRbCFHw+vB43LvCuLpDiZga2okM3kr6I0grFc8pl2pXXFa+q7upmTa8Yvj+g=\n=HGsE\n-----END PGP SIGNATURE-----\n", "payload": "tree eac279fe5de2ef418d6dff1d629b0d996d83fc9f\nparent 5e4603f99066eaf2c1cf19ac3afbac9057b1e177\nparent 433a03e6ff914bd367f129457a3d80822c9c6a42\nauthor Tim Neumann <mail@timnn.me> 1522070090 +0200\ncommitter GitHub <noreply@github.com> 1522070090 +0200\n\nRollup merge of #48693 - vorner:doc-name-resolution, r=petrochenkov\n\nSome comments and documentation for name resolution crate\n\nHello\n\nI'm trying to get a grasp of how the name resolution crate works, as part of helping with https://github.com/rust-lang-nursery/rustc-guide/issues/16. Not that I'd be succeeding much, but as I was reading the code, I started to put some notes into it, to help me understand.\n\nI guess I didn't get very far yet, but I'd like to share what I have, in case it might be useful for someone else. I hope these are correct (even if incomplete), but I'll be glad for a fast check in case I put something misleading there.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7a04610de0ac95e85eb13f814b45a26458dcae", "html_url": "https://github.com/rust-lang/rust/commit/3d7a04610de0ac95e85eb13f814b45a26458dcae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7a04610de0ac95e85eb13f814b45a26458dcae/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e4603f99066eaf2c1cf19ac3afbac9057b1e177", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4603f99066eaf2c1cf19ac3afbac9057b1e177", "html_url": "https://github.com/rust-lang/rust/commit/5e4603f99066eaf2c1cf19ac3afbac9057b1e177"}, {"sha": "433a03e6ff914bd367f129457a3d80822c9c6a42", "url": "https://api.github.com/repos/rust-lang/rust/commits/433a03e6ff914bd367f129457a3d80822c9c6a42", "html_url": "https://github.com/rust-lang/rust/commit/433a03e6ff914bd367f129457a3d80822c9c6a42"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "4d11960c320bff936d1a5eafc1c9f5144ed50163", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a04610de0ac95e85eb13f814b45a26458dcae/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a04610de0ac95e85eb13f814b45a26458dcae/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3d7a04610de0ac95e85eb13f814b45a26458dcae", "patch": "@@ -162,6 +162,10 @@ enum ResolutionError<'a> {\n     ForwardDeclaredTyParam,\n }\n \n+/// Combines an error with provided span and emits it\n+///\n+/// This takes the error provided, combines it with the span and any additional spans inside the\n+/// error and emits it.\n fn resolve_error<'sess, 'a>(resolver: &'sess Resolver,\n                             span: Span,\n                             resolution_error: ResolutionError<'a>) {\n@@ -486,7 +490,7 @@ struct BindingInfo {\n     binding_mode: BindingMode,\n }\n \n-// Map from the name in a pattern to its binding mode.\n+/// Map from the name in a pattern to its binding mode.\n type BindingMap = FxHashMap<Ident, BindingInfo>;\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n@@ -681,13 +685,17 @@ impl<'a> PathSource<'a> {\n     }\n }\n \n+/// Different kinds of symbols don't influence each other.\n+///\n+/// Therefore, they have a separate universe (namespace).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n pub enum Namespace {\n     TypeNS,\n     ValueNS,\n     MacroNS,\n }\n \n+/// Just a helper \u2012 separate structure for each namespace.\n #[derive(Clone, Default, Debug)]\n pub struct PerNS<T> {\n     value_ns: T,\n@@ -784,6 +792,7 @@ impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n     }\n }\n \n+/// This thing walks the whole crate in DFS manner, visiting each item, resolving names as it goes.\n impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n     fn visit_item(&mut self, item: &'tcx Item) {\n         self.resolve_item(item);\n@@ -910,7 +919,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n     fn visit_generics(&mut self, generics: &'tcx Generics) {\n         // For type parameter defaults, we have to ban access\n         // to following type parameters, as the Substs can only\n-        // provide previous type parameters as they're built.\n+        // provide previous type parameters as they're built. We\n+        // put all the parameters on the ban list and then remove\n+        // them one by one as they are processed and become available.\n         let mut default_ban_rib = Rib::new(ForwardTyParamBanRibKind);\n         default_ban_rib.bindings.extend(generics.params.iter()\n             .filter_map(|p| if let GenericParam::Type(ref tp) = *p { Some(tp) } else { None })\n@@ -986,6 +997,17 @@ enum RibKind<'a> {\n }\n \n /// One local scope.\n+///\n+/// A rib represents a scope names can live in. Note that these appear in many places, not just\n+/// around braces. At any place where the list of accessible names (of the given namespace)\n+/// changes or a new restrictions on the name accessibility are introduced, a new rib is put onto a\n+/// stack. This may be, for example, a `let` statement (because it introduces variables), a macro,\n+/// etc.\n+///\n+/// Different [rib kinds](enum.RibKind) are transparent for different names.\n+///\n+/// The resolution keeps a separate stack of ribs as it traverses the AST for each namespace. When\n+/// resolving, the name is looked up from inside out.\n #[derive(Debug)]\n struct Rib<'a> {\n     bindings: FxHashMap<Ident, Def>,\n@@ -1001,6 +1023,11 @@ impl<'a> Rib<'a> {\n     }\n }\n \n+/// An intermediate resolution result.\n+///\n+/// This refers to the thing referred by a name. The difference between `Def` and `Item` is that\n+/// items are visible in their whole block, while defs only from the place they are defined\n+/// forward.\n enum LexicalScopeBinding<'a> {\n     Item(&'a NameBinding<'a>),\n     Def(Def),\n@@ -1031,7 +1058,26 @@ enum PathResult<'a> {\n }\n \n enum ModuleKind {\n+    /// An anonymous module, eg. just a block.\n+    ///\n+    /// ```\n+    /// fn main() {\n+    ///     fn f() {} // (1)\n+    ///     { // This is an anonymous module\n+    ///         f(); // This resolves to (2) as we are inside the block.\n+    ///         fn f() {} // (2)\n+    ///     }\n+    ///     f(); // Resolves to (1)\n+    /// }\n+    /// ```\n     Block(NodeId),\n+    /// Any module with a name.\n+    ///\n+    /// This could be:\n+    ///\n+    /// * A normal module \u2012 either `mod from_file;` or `mod from_block { }`.\n+    /// * A trait or an enum (it implicitly contains associated types, methods and variant\n+    ///   constructors).\n     Def(Def, Name),\n }\n \n@@ -1316,6 +1362,9 @@ impl<'a> NameBinding<'a> {\n }\n \n /// Interns the names of the primitive types.\n+///\n+/// All other types are defined somewhere and possibly imported, but the primitive ones need\n+/// special handling, since they have no place of origin.\n struct PrimitiveTypeTable {\n     primitive_types: FxHashMap<Name, PrimTy>,\n }\n@@ -1350,6 +1399,8 @@ impl PrimitiveTypeTable {\n }\n \n /// The main resolver class.\n+///\n+/// This is the visitor that walks the whole crate.\n pub struct Resolver<'a> {\n     session: &'a Session,\n     cstore: &'a CrateStore,\n@@ -1481,6 +1532,7 @@ pub struct Resolver<'a> {\n     injected_crate: Option<Module<'a>>,\n }\n \n+/// Nothing really interesting here, it just provides memory for the rest of the crate.\n pub struct ResolverArenas<'a> {\n     modules: arena::TypedArena<ModuleData<'a>>,\n     local_modules: RefCell<Vec<Module<'a>>>,\n@@ -1526,10 +1578,12 @@ impl<'a, 'b: 'a> ty::DefIdTree for &'a Resolver<'b> {\n         match id.krate {\n             LOCAL_CRATE => self.definitions.def_key(id.index).parent,\n             _ => self.cstore.def_key(id).parent,\n-        }.map(|index| DefId { index: index, ..id })\n+        }.map(|index| DefId { index, ..id })\n     }\n }\n \n+/// This interface is used through the AST\u2192HIR step, to embed full paths into the HIR. After that\n+/// the resolver is no longer needed as all the relevant information is inline.\n impl<'a> hir::lowering::Resolver for Resolver<'a> {\n     fn resolve_hir_path(&mut self, path: &mut hir::Path, is_value: bool) {\n         self.resolve_hir_path_cb(path, is_value,\n@@ -1752,6 +1806,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    /// Runs the function on each namespace.\n     fn per_ns<T, F: FnMut(&mut Self, Namespace) -> T>(&mut self, mut f: F) -> PerNS<T> {\n         PerNS {\n             type_ns: f(self, TypeNS),"}]}