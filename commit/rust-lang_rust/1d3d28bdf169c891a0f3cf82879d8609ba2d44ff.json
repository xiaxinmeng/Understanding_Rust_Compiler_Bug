{"sha": "1d3d28bdf169c891a0f3cf82879d8609ba2d44ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkM2QyOGJkZjE2OWM4OTFhMGYzY2Y4Mjg3OWQ4NjA5YmEyZDQ0ZmY=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T07:52:21Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-12-19T07:52:21Z"}, "message": "Long lines.", "tree": {"sha": "37c5431fa920549f104c551e2ceb250673780a65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c5431fa920549f104c551e2ceb250673780a65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff", "html_url": "https://github.com/rust-lang/rust/commit/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52dbe4cc1db040562f5a5c22a0fd917db3040011", "url": "https://api.github.com/repos/rust-lang/rust/commits/52dbe4cc1db040562f5a5c22a0fd917db3040011", "html_url": "https://github.com/rust-lang/rust/commit/52dbe4cc1db040562f5a5c22a0fd917db3040011"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "7460244d479e67688be5c5d2b1ae40f138dbf01e", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=1d3d28bdf169c891a0f3cf82879d8609ba2d44ff", "patch": "@@ -73,7 +73,8 @@ fn llnull() -> ValueRef unsafe {\n \n fn add_named_metadata(cx: @crate_ctxt, name: str, val: ValueRef) {\n     str::as_buf(name, {|sbuf|\n-        llvm::LLVMAddNamedMetadataOperand(cx.llmod, sbuf, str::byte_len(name), val)\n+        llvm::LLVMAddNamedMetadataOperand(cx.llmod, sbuf, str::byte_len(name),\n+                                          val)\n     })\n }\n \n@@ -356,7 +357,7 @@ fn create_structure(file: @metadata<file_md>, name: str, line: int)\n                mutable members: [],\n                mutable total_size: 0,\n                align: 64 //XXX different alignment per arch?\n-              }; \n+              };\n     ret cx;\n }\n \n@@ -378,8 +379,9 @@ fn create_derived_type(type_tag: int, file: ValueRef, name: str, line: int,\n \n fn add_member(cx: @struct_ctxt, name: str, line: int, size: int, align: int,\n               ty: ValueRef) {\n-    cx.members += [create_derived_type(MemberTag, cx.file, name, line, size * 8,\n-                                       align * 8, cx.total_size, ty)];\n+    cx.members += [create_derived_type(MemberTag, cx.file, name, line,\n+                                       size * 8, align * 8, cx.total_size,\n+                                       ty)];\n     cx.total_size += size * 8;\n }\n \n@@ -421,10 +423,10 @@ fn create_boxed_type(cx: @crate_ctxt, outer: ty::t, _inner: ty::t,\n     let uint_ty = @{node: ast::ty_uint(ast::ty_u), span: span};\n     let refcount_type = create_basic_type(cx, uint_t, uint_ty);\n     let scx = create_structure(file_node, ty_to_str(ccx_tcx(cx), outer), 0);\n-    add_member(scx, \"refcnt\", 0, sys::size_of::<uint>() as int, \n+    add_member(scx, \"refcnt\", 0, sys::size_of::<uint>() as int,\n                sys::align_of::<uint>() as int, refcount_type.node);\n     add_member(scx, \"boxed\", 0, 8, //XXX member_size_and_align(??)\n-               8, //XXX just a guess \n+               8, //XXX just a guess\n                boxed.node);\n     let llnode = finish_structure(scx);\n     let mdval = @{node: llnode, data: {hash: outer}};\n@@ -477,7 +479,7 @@ fn create_vec(cx: @crate_ctxt, vec_t: ty::t, elem_t: ty::t, vec_ty: @ast::ty)\n                                          arr_size, arr_align, 0,\n                                          option::some(elem_ty_md.node),\n                                          option::some([subrange]));\n-    add_member(scx, \"data\", 0, 0, // according to an equivalent clang dump, the size should be 0\n+    add_member(scx, \"data\", 0, 0, // clang says the size should be 0\n                sys::align_of::<u8>() as int, data_ptr);\n     let llnode = finish_structure(scx);\n     ret @{node: llnode, data: {hash: vec_t}};\n@@ -521,7 +523,8 @@ fn member_size_and_align(ty: @ast::ty) -> (int, int) {\n     }\n }\n \n-fn create_ty(cx: @crate_ctxt, t: ty::t, ty: @ast::ty) -> @metadata<tydesc_md> {\n+fn create_ty(cx: @crate_ctxt, t: ty::t, ty: @ast::ty)\n+    -> @metadata<tydesc_md> {\n     /*let cache = get_cache(cx);\n     alt cached_metadata::<@metadata<tydesc_md>>(\n         cache, tg, {|md| t == md.data.hash}) {\n@@ -623,7 +626,7 @@ fn create_local_var(bcx: @block_ctxt, local: @ast::local)\n     }\n \n     let name = alt local.node.pat.node {\n-      ast::pat_bind(ident, _) { ident /*XXX deal with optional node binding */ }\n+      ast::pat_bind(ident, _) { ident /*XXX deal w/ optional node binding*/ }\n     };\n     let loc = codemap::lookup_char_pos(cx.sess.get_codemap(),\n                                        local.span.lo);"}, {"sha": "8a37d27d973c9e40f46294267a5d084334c48bc9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1d3d28bdf169c891a0f3cf82879d8609ba2d44ff", "patch": "@@ -4015,7 +4015,7 @@ fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {\n \n     let bcx = cx;\n     debuginfo::update_source_pos(cx, s.span);\n-    \n+\n     alt s.node {\n       ast::stmt_expr(e, _) { bcx = trans_expr(cx, e, ignore); }\n       ast::stmt_decl(d, _) {\n@@ -4562,7 +4562,8 @@ fn trans_fn(cx: @local_ctxt, sp: span, f: ast::_fn, llfndecl: ValueRef,\n     let do_time = cx.ccx.sess.get_opts().stats;\n     let start = do_time ? time::get_time() : {sec: 0u32, usec: 0u32};\n     let fcx = option::none;\n-    trans_closure(cx, sp, f, llfndecl, ty_self, ty_params, id, {|new_fcx| fcx = option::some(new_fcx);});\n+    trans_closure(cx, sp, f, llfndecl, ty_self, ty_params, id,\n+                  {|new_fcx| fcx = option::some(new_fcx);});\n     if cx.ccx.sess.get_opts().extra_debuginfo {\n         debuginfo::create_function(option::get(fcx));\n     }"}, {"sha": "5a9c07731473bc7ada20f0763e11ae81186c2da7", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3d28bdf169c891a0f3cf82879d8609ba2d44ff/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=1d3d28bdf169c891a0f3cf82879d8609ba2d44ff", "patch": "@@ -631,7 +631,8 @@ fn Trap(cx: @block_ctxt) {\n     assert (T as int != 0);\n     let Args: [ValueRef] = [];\n     unsafe {\n-        llvm::LLVMBuildCall(b, T, vec::to_ptr(Args), vec::len(Args), noname());\n+        llvm::LLVMBuildCall(b, T, vec::to_ptr(Args), vec::len(Args),\n+                            noname());\n     }\n }\n "}]}