{"sha": "5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMTNiZmY1MjAzYzFiZGM2YWM2ZGM4N2Y2OWI1MzU5YTk1MDMwNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-23T09:55:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-23T09:55:40Z"}, "message": "Auto merge of #42023 - nikomatsakis:issue-36799-ostn15_phf, r=arielb1\n\nintroduce local-scope to prevent `StorageLive`/`StorageDead` in statics\n\nIn investigating #36799, I found that we were creating storage-live/storage-dead instructions in statics/constants, where they are not needed. This arose due to the fix for local scopes. This PR tries to fix that (and adds a test -- I'm curious if there is a way to make that test more targeted, though).\n\nr? @arielb1", "tree": {"sha": "8338acddadde092f977e7814f28b25fa68922841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8338acddadde092f977e7814f28b25fa68922841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "html_url": "https://github.com/rust-lang/rust/commit/5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa25a7df3a1101a1dac611f3e45fa5b09836d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa25a7df3a1101a1dac611f3e45fa5b09836d27", "html_url": "https://github.com/rust-lang/rust/commit/9fa25a7df3a1101a1dac611f3e45fa5b09836d27"}, {"sha": "8a4e5933df9a9252080f445b29621acc4afb459a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4e5933df9a9252080f445b29621acc4afb459a", "html_url": "https://github.com/rust-lang/rust/commit/8a4e5933df9a9252080f445b29621acc4afb459a"}], "stats": {"total": 165, "additions": 154, "deletions": 11}, "files": [{"sha": "5178963179d6f80d1bf90e33e6c244ddfcc6bb00", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "patch": "@@ -27,8 +27,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                              -> BlockAnd<Operand<'tcx>>\n         where M: Mirror<'tcx, Output = Expr<'tcx>>\n     {\n-        let topmost_scope = self.topmost_scope(); // FIXME(#6393)\n-        self.as_operand(block, Some(topmost_scope), expr)\n+        let local_scope = self.local_scope();\n+        self.as_operand(block, local_scope, expr)\n     }\n \n     /// Compile `expr` into a value that can be used as an operand."}, {"sha": "e1832e0a0af347614978ad0db3a66db2a330d707", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "patch": "@@ -33,8 +33,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                              -> BlockAnd<Rvalue<'tcx>>\n         where M: Mirror<'tcx, Output = Expr<'tcx>>\n     {\n-        let topmost_scope = self.topmost_scope(); // FIXME(#6393)\n-        self.as_rvalue(block, Some(topmost_scope), expr)\n+        let local_scope = self.local_scope();\n+        self.as_rvalue(block, local_scope, expr)\n     }\n \n     /// Compile `expr`, yielding an rvalue.\n@@ -51,7 +51,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                       scope: Option<CodeExtent>,\n                       expr: Expr<'tcx>)\n                       -> BlockAnd<Rvalue<'tcx>> {\n-        debug!(\"expr_as_rvalue(block={:?}, expr={:?})\", block, expr);\n+        debug!(\"expr_as_rvalue(block={:?}, scope={:?}, expr={:?})\", block, scope, expr);\n \n         let this = self;\n         let expr_span = expr.span;"}, {"sha": "ab27a1a9c24bc2a92c5bfea8e22d56348cd37b77", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "patch": "@@ -35,7 +35,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     temp_lifetime: Option<CodeExtent>,\n                     expr: Expr<'tcx>)\n                     -> BlockAnd<Lvalue<'tcx>> {\n-        debug!(\"expr_as_temp(block={:?}, expr={:?})\", block, expr);\n+        debug!(\"expr_as_temp(block={:?}, temp_lifetime={:?}, expr={:?})\",\n+               block, temp_lifetime, expr);\n         let this = self;\n \n         if let ExprKind::Scope { extent, value } = expr.kind {"}, {"sha": "407b08d2831497b3456a2fdf0a7f9795c2f9d348", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "patch": "@@ -392,9 +392,9 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     mir\n }\n \n-pub fn construct_const<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n-                                       body_id: hir::BodyId)\n-                                       -> Mir<'tcx> {\n+fn construct_const<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n+                                   body_id: hir::BodyId)\n+                                   -> Mir<'tcx> {\n     let tcx = hir.tcx();\n     let ast_expr = &tcx.hir.body(body_id).value;\n     let ty = hir.tables().expr_ty_adjusted(ast_expr);\n@@ -415,7 +415,7 @@ pub fn construct_const<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n     builder.finish(vec![], ty)\n }\n \n-pub fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n+fn construct_error<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n                                        body_id: hir::BodyId)\n                                        -> Mir<'tcx> {\n     let span = hir.tcx().hir.span(hir.tcx().hir.body_owner(body_id));"}, {"sha": "a99e7b4be5768b81c9a5c06851b3dc20ed28c104", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "patch": "@@ -93,6 +93,7 @@ use rustc::middle::const_val::ConstVal;\n use rustc::ty::subst::{Kind, Subst};\n use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::*;\n+use rustc::mir::transform::MirSource;\n use syntax_pos::Span;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::fx::FxHashMap;\n@@ -428,6 +429,41 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         self.scopes.last().expect(\"topmost_scope: no scopes present\").extent\n     }\n \n+    /// Returns the scope that we should use as the lifetime of an\n+    /// operand. Basically, an operand must live until it is consumed.\n+    /// This is similar to, but not quite the same as, the temporary\n+    /// scope (which can be larger or smaller).\n+    ///\n+    /// Consider:\n+    ///\n+    ///     let x = foo(bar(X, Y));\n+    ///\n+    /// We wish to pop the storage for X and Y after `bar()` is\n+    /// called, not after the whole `let` is completed.\n+    ///\n+    /// As another example, if the second argument diverges:\n+    ///\n+    ///     foo(Box::new(2), panic!())\n+    ///\n+    /// We would allocate the box but then free it on the unwinding\n+    /// path; we would also emit a free on the 'success' path from\n+    /// panic, but that will turn out to be removed as dead-code.\n+    ///\n+    /// When building statics/constants, returns `None` since\n+    /// intermediate values do not have to be dropped in that case.\n+    pub fn local_scope(&self) -> Option<CodeExtent> {\n+        match self.hir.src {\n+            MirSource::Const(_) |\n+            MirSource::Static(..) =>\n+                // No need to free storage in this context.\n+                None,\n+            MirSource::Fn(_) =>\n+                Some(self.topmost_scope()),\n+            MirSource::Promoted(..) =>\n+                bug!(),\n+        }\n+    }\n+\n     // Scheduling drops\n     // ================\n     /// Indicates that `lvalue` should be dropped on exit from"}, {"sha": "581a403fb6dee848861860711fca541722b9fa5b", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "patch": "@@ -36,8 +36,14 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     pub region_maps: Rc<RegionMaps>,\n+\n+    /// This is `Constness::Const` if we are compiling a `static`,\n+    /// `const`, or the body of a `const fn`.\n     constness: hir::Constness,\n \n+    /// What are we compiling?\n+    pub src: MirSource,\n+\n     /// True if this constant/function needs overflow checks.\n     check_overflow: bool,\n }\n@@ -74,7 +80,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         // Constants and const fn's always need overflow checks.\n         check_overflow |= constness == hir::Constness::Const;\n \n-        Cx { tcx, infcx, region_maps, constness, check_overflow }\n+        Cx { tcx, infcx, region_maps, constness, src, check_overflow }\n     }\n }\n "}, {"sha": "9fb725a980e8d18250358ebe4c548d095a48ece3", "filename": "src/test/mir-opt/storage_live_dead_in_statics.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b13bff5203c1bdc6ac6dc87f69b5359a9503078/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs?ref=5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that when we compile the static `XXX` into MIR, we do not\n+// generate `StorageStart` or `StorageEnd` statements.\n+\n+// ignore-tidy-linelength\n+\n+static XXX: &'static Foo = &Foo {\n+    tup: \"hi\",\n+    data: &[\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+        (0, 1), (0, 2), (0, 3),\n+    ]\n+};\n+\n+#[derive(Debug)]\n+struct Foo {\n+    tup: &'static str,\n+    data: &'static [(u32, u32)]\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", XXX);\n+}\n+\n+// END RUST SOURCE\n+// START rustc.node4.mir_map.0.mir\n+//    bb0: {\n+//        _7 = (const 0u32, const 1u32);   // scope 0 at src/test/mir-opt/basic_assignment.rs:29:9: 29:15\n+//        _8 = (const 0u32, const 2u32);   // scope 0 at src/test/mir-opt/basic_assignment.rs:29:17: 29:23\n+//        _9 = (const 0u32, const 3u32);   // scope 0 at src/test/mir-opt/basic_assignment.rs:29:25: 29:31\n+//        _10 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:30:9: 30:15\n+//        _11 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:30:17: 30:23\n+//        _12 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:30:25: 30:31\n+//        _13 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:31:9: 31:15\n+//        _14 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:31:17: 31:23\n+//        _15 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:31:25: 31:31\n+//        _16 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:32:9: 32:15\n+//        _17 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:32:17: 32:23\n+//        _18 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:32:25: 32:31\n+//        _19 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:33:9: 33:15\n+//        _20 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:33:17: 33:23\n+//        _21 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:33:25: 33:31\n+//        _22 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:34:9: 34:15\n+//        _23 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:34:17: 34:23\n+//        _24 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:34:25: 34:31\n+//        _25 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:35:9: 35:15\n+//        _26 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:35:17: 35:23\n+//        _27 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:35:25: 35:31\n+//        _28 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:36:9: 36:15\n+//        _29 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:36:17: 36:23\n+//        _30 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:36:25: 36:31\n+//        _31 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:37:9: 37:15\n+//        _32 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:37:17: 37:23\n+//        _33 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:37:25: 37:31\n+//        _34 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:38:9: 38:15\n+//        _35 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:38:17: 38:23\n+//        _36 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:38:25: 38:31\n+//        _37 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:39:9: 39:15\n+//        _38 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:39:17: 39:23\n+//        _39 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:39:25: 39:31\n+//        _40 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:40:9: 40:15\n+//        _41 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:40:17: 40:23\n+//        _42 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:40:25: 40:31\n+//        _43 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:41:9: 41:15\n+//        _44 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:41:17: 41:23\n+//        _45 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:41:25: 41:31\n+//        _46 = (const 0u32, const 1u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:42:9: 42:15\n+//        _47 = (const 0u32, const 2u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:42:17: 42:23\n+//        _48 = (const 0u32, const 3u32);  // scope 0 at src/test/mir-opt/basic_assignment.rs:42:25: 42:31\n+//        _6 = [_7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48]; // scope 0 at src/test/mir-opt/basic_assignment.rs:28:12: 43:6\n+//        _5 = &_6;                        // scope 0 at src/test/mir-opt/basic_assignment.rs:28:11: 43:6\n+//        _4 = &(*_5);                     // scope 0 at src/test/mir-opt/basic_assignment.rs:28:11: 43:6\n+//        _3 = _4 as &'static [(u32, u32)] (Unsize); // scope 0 at src/test/mir-opt/basic_assignment.rs:28:11: 43:6\n+//        _2 = Foo { tup: const \"hi\", data: _3 }; // scope 0 at src/test/mir-opt/basic_assignment.rs:26:29: 44:2\n+//        _1 = &_2;                        // scope 0 at src/test/mir-opt/basic_assignment.rs:26:28: 44:2\n+//        _0 = &(*_1);                     // scope 0 at src/test/mir-opt/basic_assignment.rs:26:28: 44:2\n+//        return;                          // scope 0 at src/test/mir-opt/basic_assignment.rs:26:1: 44:3\n+//    }\n+// END rustc.node4.mir_map.0.mir"}]}