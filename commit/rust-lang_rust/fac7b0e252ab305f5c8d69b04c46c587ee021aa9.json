{"sha": "fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYzdiMGUyNTJhYjMwNWY1YzhkNjliMDRjNDZjNTg3ZWUwMjFhYTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-11T10:08:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-11T10:13:14Z"}, "message": "Don't guess macro expansion crate", "tree": {"sha": "c8a90f4da1a3ab9f949466dd651d1983231674e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8a90f4da1a3ab9f949466dd651d1983231674e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "html_url": "https://github.com/rust-lang/rust/commit/fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8a5d39c2d05fb59b6c243935111714e18334599", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a5d39c2d05fb59b6c243935111714e18334599", "html_url": "https://github.com/rust-lang/rust/commit/d8a5d39c2d05fb59b6c243935111714e18334599"}], "stats": {"total": 151, "additions": 89, "deletions": 62}, "files": [{"sha": "a232a58567ce65aa6099124f9d299ec03866026f", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "patch": "@@ -122,8 +122,9 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         let macro_call =\n             self.find_file(actual_macro_call.syntax().clone()).with_value(actual_macro_call);\n         let sa = self.analyze2(macro_call.map(|it| it.syntax()), None);\n+        let krate = sa.resolver.krate()?;\n         let macro_call_id = macro_call\n-            .as_call_id(self.db, |path| sa.resolver.resolve_path_as_macro(self.db, &path))?;\n+            .as_call_id(self.db, krate, |path| sa.resolver.resolve_path_as_macro(self.db, &path))?;\n         hir_expand::db::expand_hypothetical(self.db, macro_call_id, hypothetical_args, token_to_map)\n     }\n "}, {"sha": "7c6bbea13c2941a29c226ff7a61b4a16a7cb46a5", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "patch": "@@ -307,7 +307,8 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         macro_call: InFile<&ast::MacroCall>,\n     ) -> Option<HirFileId> {\n-        let macro_call_id = macro_call.as_call_id(db.upcast(), |path| {\n+        let krate = self.resolver.krate()?;\n+        let macro_call_id = macro_call.as_call_id(db.upcast(), krate, |path| {\n             self.resolver.resolve_path_as_macro(db.upcast(), &path)\n         })?;\n         Some(macro_call_id.as_file())"}, {"sha": "4f2350915dcb76ec3ce6009b6e3a792f8aacacfa", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "patch": "@@ -97,7 +97,7 @@ impl Expander {\n \n         let macro_call = InFile::new(self.current_file_id, &macro_call);\n \n-        if let Some(call_id) = macro_call.as_call_id(db, |path| {\n+        if let Some(call_id) = macro_call.as_call_id(db, self.crate_def_map.krate, |path| {\n             if let Some(local_scope) = local_scope {\n                 if let Some(def) = path.as_ident().and_then(|n| local_scope.get_legacy_macro(n)) {\n                     return Some(def);"}, {"sha": "edc59e5a80f4ca549f590b36ebddb04771d19710", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "patch": "@@ -417,6 +417,7 @@ pub trait AsMacroCall {\n     fn as_call_id(\n         &self,\n         db: &dyn db::DefDatabase,\n+        krate: CrateId,\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId>;\n }\n@@ -425,13 +426,14 @@ impl AsMacroCall for InFile<&ast::MacroCall> {\n     fn as_call_id(\n         &self,\n         db: &dyn db::DefDatabase,\n+        krate: CrateId,\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId> {\n         let ast_id = AstId::new(self.file_id, db.ast_id_map(self.file_id).ast_id(self.value));\n         let h = Hygiene::new(db.upcast(), self.file_id);\n         let path = path::ModPath::from_src(self.value.path()?, &h)?;\n \n-        AstIdWithPath::new(ast_id.file_id, ast_id.value, path).as_call_id(db, resolver)\n+        AstIdWithPath::new(ast_id.file_id, ast_id.value, path).as_call_id(db, krate, resolver)\n     }\n }\n \n@@ -452,6 +454,7 @@ impl AsMacroCall for AstIdWithPath<ast::MacroCall> {\n     fn as_call_id(\n         &self,\n         db: &dyn db::DefDatabase,\n+        krate: CrateId,\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId> {\n         let def: MacroDefId = resolver(self.path.clone())?;\n@@ -461,13 +464,13 @@ impl AsMacroCall for AstIdWithPath<ast::MacroCall> {\n             let hygiene = Hygiene::new(db.upcast(), self.ast_id.file_id);\n \n             Some(\n-                expand_eager_macro(db.upcast(), macro_call, def, &|path: ast::Path| {\n+                expand_eager_macro(db.upcast(), krate, macro_call, def, &|path: ast::Path| {\n                     resolver(path::ModPath::from_src(path, &hygiene)?)\n                 })?\n                 .into(),\n             )\n         } else {\n-            Some(def.as_lazy_macro(db.upcast(), MacroCallKind::FnLike(self.ast_id)).into())\n+            Some(def.as_lazy_macro(db.upcast(), krate, MacroCallKind::FnLike(self.ast_id)).into())\n         }\n     }\n }\n@@ -476,12 +479,14 @@ impl AsMacroCall for AstIdWithPath<ast::ModuleItem> {\n     fn as_call_id(\n         &self,\n         db: &dyn db::DefDatabase,\n+        krate: CrateId,\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId> {\n         let def = resolver(self.path.clone())?;\n         Some(\n             def.as_lazy_macro(\n                 db.upcast(),\n+                krate,\n                 MacroCallKind::Attr(self.ast_id, self.path.segments.last()?.to_string()),\n             )\n             .into(),"}, {"sha": "976e5e5850f14e721deae0f802c8c3a898221bc3", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "patch": "@@ -571,16 +571,18 @@ impl DefCollector<'_> {\n                 return false;\n             }\n \n-            if let Some(call_id) = directive.ast_id.as_call_id(self.db, |path| {\n-                let resolved_res = self.def_map.resolve_path_fp_with_macro(\n-                    self.db,\n-                    ResolveMode::Other,\n-                    directive.module_id,\n-                    &path,\n-                    BuiltinShadowMode::Module,\n-                );\n-                resolved_res.resolved_def.take_macros()\n-            }) {\n+            if let Some(call_id) =\n+                directive.ast_id.as_call_id(self.db, self.def_map.krate, |path| {\n+                    let resolved_res = self.def_map.resolve_path_fp_with_macro(\n+                        self.db,\n+                        ResolveMode::Other,\n+                        directive.module_id,\n+                        &path,\n+                        BuiltinShadowMode::Module,\n+                    );\n+                    resolved_res.resolved_def.take_macros()\n+                })\n+            {\n                 resolved.push((directive.module_id, call_id, directive.depth));\n                 res = ReachedFixedPoint::No;\n                 return false;\n@@ -589,9 +591,10 @@ impl DefCollector<'_> {\n             true\n         });\n         attribute_macros.retain(|directive| {\n-            if let Some(call_id) = directive\n-                .ast_id\n-                .as_call_id(self.db, |path| self.resolve_attribute_macro(&directive, &path))\n+            if let Some(call_id) =\n+                directive.ast_id.as_call_id(self.db, self.def_map.krate, |path| {\n+                    self.resolve_attribute_macro(&directive, &path)\n+                })\n             {\n                 resolved.push((directive.module_id, call_id, 0));\n                 res = ReachedFixedPoint::No;\n@@ -957,11 +960,13 @@ impl ModCollector<'_, '_> {\n         }\n \n         // Case 2: try to resolve in legacy scope and expand macro_rules\n-        if let Some(macro_call_id) = ast_id.as_call_id(self.def_collector.db, |path| {\n-            path.as_ident().and_then(|name| {\n-                self.def_collector.def_map[self.module_id].scope.get_legacy_macro(&name)\n+        if let Some(macro_call_id) =\n+            ast_id.as_call_id(self.def_collector.db, self.def_collector.def_map.krate, |path| {\n+                path.as_ident().and_then(|name| {\n+                    self.def_collector.def_map[self.module_id].scope.get_legacy_macro(&name)\n+                })\n             })\n-        }) {\n+        {\n             self.def_collector.unexpanded_macros.push(MacroDirective {\n                 module_id: self.module_id,\n                 ast_id,"}, {"sha": "26b667b55715e791c0bc9bd020e3027c42989ea8", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "patch": "@@ -8,8 +8,7 @@ use ra_syntax::{\n     match_ast,\n };\n \n-use crate::db::AstDatabase;\n-use crate::{guess_crate, name, quote, LazyMacroId, MacroCallId, MacroDefId, MacroDefKind};\n+use crate::{db::AstDatabase, name, quote, LazyMacroId, MacroDefId, MacroDefKind};\n \n macro_rules! register_builtin {\n     ( $($trait:ident => $expand:ident),* ) => {\n@@ -156,17 +155,8 @@ fn expand_simple_derive(\n fn find_builtin_crate(db: &dyn AstDatabase, id: LazyMacroId) -> tt::TokenTree {\n     // FIXME: make hygiene works for builtin derive macro\n     // such that $crate can be used here.\n-\n-    let m: MacroCallId = id.into();\n-    let file_id = m.as_file().original_file(db);\n     let cg = db.crate_graph();\n-    let krate = match guess_crate(db, file_id) {\n-        Some(krate) => krate,\n-        None => {\n-            let tt = quote! { core };\n-            return tt.token_trees[0].clone();\n-        }\n-    };\n+    let krate = db.lookup_intern_macro(id).krate;\n \n     // XXX\n     //  All crates except core itself should have a dependency on core,\n@@ -263,10 +253,12 @@ fn partial_ord_expand(\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n-    use crate::{test_db::TestDB, AstId, MacroCallId, MacroCallKind, MacroCallLoc};\n     use name::{known, Name};\n-    use ra_db::{fixture::WithFixture, SourceDatabase};\n+    use ra_db::{fixture::WithFixture, CrateId, SourceDatabase};\n+\n+    use crate::{test_db::TestDB, AstId, MacroCallId, MacroCallKind, MacroCallLoc};\n+\n+    use super::*;\n \n     fn expand_builtin_derive(s: &str, name: Name) -> String {\n         let def = find_builtin_derive(&name).unwrap();\n@@ -290,7 +282,11 @@ mod tests {\n \n         let attr_id = AstId::new(file_id.into(), ast_id_map.ast_id(&items[0]));\n \n-        let loc = MacroCallLoc { def, kind: MacroCallKind::Attr(attr_id, name.to_string()) };\n+        let loc = MacroCallLoc {\n+            def,\n+            krate: CrateId(0),\n+            kind: MacroCallKind::Attr(attr_id, name.to_string()),\n+        };\n \n         let id: MacroCallId = db.intern_macro(loc).into();\n         let parsed = db.parse_or_expand(id.as_file()).unwrap();"}, {"sha": "b50eb347c8e42b3e021f3a21e4684d3d59d89cb6", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "patch": "@@ -1,15 +1,14 @@\n //! Builtin macro\n-use crate::db::AstDatabase;\n use crate::{\n-    ast::{self, AstToken, HasStringValue},\n-    name, AstId, CrateId, MacroDefId, MacroDefKind, TextSize,\n+    db::AstDatabase, name, quote, AstId, CrateId, EagerMacroId, LazyMacroId, MacroCallId,\n+    MacroDefId, MacroDefKind, TextSize,\n };\n \n-use crate::{guess_crate, quote, EagerMacroId, LazyMacroId, MacroCallId};\n use either::Either;\n use mbe::parse_to_token_tree;\n use ra_db::FileId;\n use ra_parser::FragmentKind;\n+use ra_syntax::ast::{self, AstToken, HasStringValue};\n \n macro_rules! register_builtin {\n     ( LAZY: $(($name:ident, $kind: ident) => $expand:ident),* , EAGER: $(($e_name:ident, $e_kind: ident) => $e_expand:ident),*  ) => {\n@@ -333,9 +332,7 @@ fn include_expand(\n }\n \n fn get_env_inner(db: &dyn AstDatabase, arg_id: EagerMacroId, key: &str) -> Option<String> {\n-    let call_id: MacroCallId = arg_id.into();\n-    let original_file = call_id.as_file().original_file(db);\n-    let krate = guess_crate(db, original_file)?;\n+    let krate = db.lookup_intern_eager_expansion(arg_id).krate;\n     db.crate_graph()[krate].env.get(key)\n }\n \n@@ -394,6 +391,7 @@ mod tests {\n \n         let expander = find_by_name(&macro_calls[0].name().unwrap().as_name()).unwrap();\n \n+        let krate = CrateId(0);\n         let file_id = match expander {\n             Either::Left(expander) => {\n                 // the first one should be a macro_rules\n@@ -406,6 +404,7 @@ mod tests {\n \n                 let loc = MacroCallLoc {\n                     def,\n+                    krate,\n                     kind: MacroCallKind::FnLike(AstId::new(\n                         file_id.into(),\n                         ast_id_map.ast_id(&macro_calls[1]),\n@@ -418,7 +417,7 @@ mod tests {\n             Either::Right(expander) => {\n                 // the first one should be a macro_rules\n                 let def = MacroDefId {\n-                    krate: Some(CrateId(0)),\n+                    krate: Some(krate),\n                     ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n                     kind: MacroDefKind::BuiltInEager(expander),\n                     local_inner: false,\n@@ -432,6 +431,7 @@ mod tests {\n                         def,\n                         fragment: FragmentKind::Expr,\n                         subtree: Arc::new(parsed_args.clone()),\n+                        krate,\n                         file_id: file_id.into(),\n                     }\n                 });\n@@ -441,6 +441,7 @@ mod tests {\n                     def,\n                     fragment,\n                     subtree: Arc::new(subtree),\n+                    krate,\n                     file_id: file_id.into(),\n                 };\n "}, {"sha": "302d2b3e099c67afd2c2eb46beda4b0b142ef59c", "filename": "crates/ra_hir_expand/src/eager.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Feager.rs?ref=fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "patch": "@@ -25,12 +25,14 @@ use crate::{\n     EagerCallLoc, EagerMacroId, InFile, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n \n+use ra_db::CrateId;\n use ra_parser::FragmentKind;\n use ra_syntax::{algo::SyntaxRewriter, SyntaxNode};\n use std::sync::Arc;\n \n pub fn expand_eager_macro(\n     db: &dyn AstDatabase,\n+    krate: CrateId,\n     macro_call: InFile<ast::MacroCall>,\n     def: MacroDefId,\n     resolver: &dyn Fn(ast::Path) -> Option<MacroDefId>,\n@@ -47,6 +49,7 @@ pub fn expand_eager_macro(\n             def,\n             fragment: FragmentKind::Expr,\n             subtree: Arc::new(parsed_args.clone()),\n+            krate,\n             file_id: macro_call.file_id,\n         }\n     });\n@@ -56,14 +59,20 @@ pub fn expand_eager_macro(\n     let result = eager_macro_recur(\n         db,\n         InFile::new(arg_file_id.as_file(), parsed_args.syntax_node()),\n+        krate,\n         resolver,\n     )?;\n     let subtree = to_subtree(&result)?;\n \n     if let MacroDefKind::BuiltInEager(eager) = def.kind {\n         let (subtree, fragment) = eager.expand(db, arg_id, &subtree).ok()?;\n-        let eager =\n-            EagerCallLoc { def, fragment, subtree: Arc::new(subtree), file_id: macro_call.file_id };\n+        let eager = EagerCallLoc {\n+            def,\n+            fragment,\n+            subtree: Arc::new(subtree),\n+            krate,\n+            file_id: macro_call.file_id,\n+        };\n \n         Some(db.intern_eager_expansion(eager))\n     } else {\n@@ -81,18 +90,20 @@ fn lazy_expand(\n     db: &dyn AstDatabase,\n     def: &MacroDefId,\n     macro_call: InFile<ast::MacroCall>,\n+    krate: CrateId,\n ) -> Option<InFile<SyntaxNode>> {\n     let ast_id = db.ast_id_map(macro_call.file_id).ast_id(&macro_call.value);\n \n     let id: MacroCallId =\n-        def.as_lazy_macro(db, MacroCallKind::FnLike(macro_call.with_value(ast_id))).into();\n+        def.as_lazy_macro(db, krate, MacroCallKind::FnLike(macro_call.with_value(ast_id))).into();\n \n     db.parse_or_expand(id.as_file()).map(|node| InFile::new(id.as_file(), node))\n }\n \n fn eager_macro_recur(\n     db: &dyn AstDatabase,\n     curr: InFile<SyntaxNode>,\n+    krate: CrateId,\n     macro_resolver: &dyn Fn(ast::Path) -> Option<MacroDefId>,\n ) -> Option<SyntaxNode> {\n     let original = curr.value.clone();\n@@ -105,18 +116,23 @@ fn eager_macro_recur(\n         let def: MacroDefId = macro_resolver(child.path()?)?;\n         let insert = match def.kind {\n             MacroDefKind::BuiltInEager(_) => {\n-                let id: MacroCallId =\n-                    expand_eager_macro(db, curr.with_value(child.clone()), def, macro_resolver)?\n-                        .into();\n+                let id: MacroCallId = expand_eager_macro(\n+                    db,\n+                    krate,\n+                    curr.with_value(child.clone()),\n+                    def,\n+                    macro_resolver,\n+                )?\n+                .into();\n                 db.parse_or_expand(id.as_file())?\n             }\n             MacroDefKind::Declarative\n             | MacroDefKind::BuiltIn(_)\n             | MacroDefKind::BuiltInDerive(_)\n             | MacroDefKind::CustomDerive(_) => {\n-                let expanded = lazy_expand(db, &def, curr.with_value(child.clone()))?;\n+                let expanded = lazy_expand(db, &def, curr.with_value(child.clone()), krate)?;\n                 // replace macro inside\n-                eager_macro_recur(db, expanded, macro_resolver)?\n+                eager_macro_recur(db, expanded, krate, macro_resolver)?\n             }\n         };\n "}, {"sha": "5eac2605b9c10e36eccc8e7e3e9e9e74e24c1e89", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fac7b0e252ab305f5c8d69b04c46c587ee021aa9/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=fac7b0e252ab305f5c8d69b04c46c587ee021aa9", "patch": "@@ -209,8 +209,13 @@ pub struct MacroDefId {\n }\n \n impl MacroDefId {\n-    pub fn as_lazy_macro(self, db: &dyn db::AstDatabase, kind: MacroCallKind) -> LazyMacroId {\n-        db.intern_macro(MacroCallLoc { def: self, kind })\n+    pub fn as_lazy_macro(\n+        self,\n+        db: &dyn db::AstDatabase,\n+        krate: CrateId,\n+        kind: MacroCallKind,\n+    ) -> LazyMacroId {\n+        db.intern_macro(MacroCallLoc { def: self, krate, kind })\n     }\n }\n \n@@ -227,6 +232,7 @@ pub enum MacroDefKind {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroCallLoc {\n     pub(crate) def: MacroDefId,\n+    pub(crate) krate: CrateId,\n     pub(crate) kind: MacroCallKind,\n }\n \n@@ -274,6 +280,7 @@ pub struct EagerCallLoc {\n     pub(crate) def: MacroDefId,\n     pub(crate) fragment: FragmentKind,\n     pub(crate) subtree: Arc<tt::Subtree>,\n+    pub(crate) krate: CrateId,\n     pub(crate) file_id: HirFileId,\n }\n \n@@ -424,8 +431,3 @@ impl<N: AstNode> InFile<N> {\n         self.with_value(self.value.syntax())\n     }\n }\n-\n-// FIXME: this is obviously wrong, there shouldn't be any guesing here\n-fn guess_crate(db: &dyn db::AstDatabase, file_id: FileId) -> Option<CrateId> {\n-    db.relevant_crates(file_id).iter().next().copied()\n-}"}]}