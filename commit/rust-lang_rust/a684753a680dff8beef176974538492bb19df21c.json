{"sha": "a684753a680dff8beef176974538492bb19df21c", "node_id": "C_kwDOAAsO6NoAKGE2ODQ3NTNhNjgwZGZmOGJlZWYxNzY5NzQ1Mzg0OTJiYjE5ZGYyMWM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-22T18:58:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-22T18:58:07Z"}, "message": "Merge pull request #1374 from bjorn3/non_rustup_build3\n\nAllow building and testing without rustup", "tree": {"sha": "f25adc2739314cc1e800797a66da4a2c91255396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f25adc2739314cc1e800797a66da4a2c91255396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a684753a680dff8beef176974538492bb19df21c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJka7s/CRBK7hj4Ov3rIwAA9X0IAFhz57qaZfLLKZfsOthcU/hi\nIuH0k2huxjIpL4ieihDnekvDKGBZSVWnEEDtsq9bHpWt8gyuFwH6EKn4Kx8ILlb0\nYqIJ5bVRCzJNDbNu32tMfwNvV1QQUQvHNLfHvd/dGpv2hzXoLvAknlFM5rhOhmPK\n/nJzBg0af4TqVrsII62c4nHQu6fpLgsn8yupevGt2gQZVA+sDqzwM9Czh9gdUnW3\nH32j3TV+hvvMd3wEeRdYpHOJDh5O9V/KA7JBVJQZapvXTnN3rVy578V2ExX7XpjV\nBtBTwP90s+obumAqfFT5/5Af95th8YjRJjN4Prx5Oh4u9qLnch0qIDKdywo4i50=\n=2Ue+\n-----END PGP SIGNATURE-----\n", "payload": "tree f25adc2739314cc1e800797a66da4a2c91255396\nparent 24f1569c85e3f6958aaa9d36b3684bcd2da2a262\nparent a555b8ab7ec6d4f26233ab2b313ddb4ddbcc3457\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1684781887 +0200\ncommitter GitHub <noreply@github.com> 1684781887 +0200\n\nMerge pull request #1374 from bjorn3/non_rustup_build3\n\nAllow building and testing without rustup"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a684753a680dff8beef176974538492bb19df21c", "html_url": "https://github.com/rust-lang/rust/commit/a684753a680dff8beef176974538492bb19df21c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a684753a680dff8beef176974538492bb19df21c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24f1569c85e3f6958aaa9d36b3684bcd2da2a262", "url": "https://api.github.com/repos/rust-lang/rust/commits/24f1569c85e3f6958aaa9d36b3684bcd2da2a262", "html_url": "https://github.com/rust-lang/rust/commit/24f1569c85e3f6958aaa9d36b3684bcd2da2a262"}, {"sha": "a555b8ab7ec6d4f26233ab2b313ddb4ddbcc3457", "url": "https://api.github.com/repos/rust-lang/rust/commits/a555b8ab7ec6d4f26233ab2b313ddb4ddbcc3457", "html_url": "https://github.com/rust-lang/rust/commit/a555b8ab7ec6d4f26233ab2b313ddb4ddbcc3457"}], "stats": {"total": 238, "additions": 146, "deletions": 92}, "files": [{"sha": "8ffd4852083d59061a4f1c9906f0e58ef0df8cbb", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -16,10 +16,10 @@ pub(crate) fn run(\n     sysroot_kind: SysrootKind,\n     dirs: &Dirs,\n     cg_clif_dylib: &Path,\n+    rustup_toolchain_name: Option<&str>,\n     bootstrap_host_compiler: &Compiler,\n ) {\n     ABI_CAFE_REPO.fetch(dirs);\n-    spawn_and_wait(ABI_CAFE.fetch(\"cargo\", &bootstrap_host_compiler.rustc, dirs));\n \n     eprintln!(\"Building sysroot for abi-cafe\");\n     build_sysroot::build_sysroot(\n@@ -28,6 +28,7 @@ pub(crate) fn run(\n         sysroot_kind,\n         cg_clif_dylib,\n         bootstrap_host_compiler,\n+        rustup_toolchain_name,\n         bootstrap_host_compiler.triple.clone(),\n     );\n "}, {"sha": "d24803eb7c6d775ff4f35bf7f39cb3bc20839353", "filename": "build_system/bench.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -4,7 +4,7 @@ use std::path::Path;\n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n use super::rustc_info::get_file_name;\n-use super::utils::{hyperfine_command, spawn_and_wait};\n+use super::utils::{hyperfine_command, spawn_and_wait, Compiler};\n \n static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"ebobby\",\n@@ -13,11 +13,11 @@ static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"<none>\",\n );\n \n-pub(crate) fn benchmark(dirs: &Dirs) {\n-    benchmark_simple_raytracer(dirs);\n+pub(crate) fn benchmark(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n+    benchmark_simple_raytracer(dirs, bootstrap_host_compiler);\n }\n \n-fn benchmark_simple_raytracer(dirs: &Dirs) {\n+fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n     if std::process::Command::new(\"hyperfine\").output().is_err() {\n         eprintln!(\"Hyperfine not installed\");\n         eprintln!(\"Hint: Try `cargo install hyperfine` to install hyperfine\");\n@@ -31,8 +31,9 @@ fn benchmark_simple_raytracer(dirs: &Dirs) {\n     let bench_runs = env::var(\"BENCH_RUNS\").unwrap_or_else(|_| \"10\".to_string()).parse().unwrap();\n \n     eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n-    let cargo_clif =\n-        RelPath::DIST.to_path(dirs).join(get_file_name(\"cargo_clif\", \"bin\").replace('_', \"-\"));\n+    let cargo_clif = RelPath::DIST\n+        .to_path(dirs)\n+        .join(get_file_name(&bootstrap_host_compiler.rustc, \"cargo_clif\", \"bin\").replace('_', \"-\"));\n     let manifest_path = SIMPLE_RAYTRACER_REPO.source_dir().to_path(dirs).join(\"Cargo.toml\");\n     let target_dir = RelPath::BUILD.join(\"simple_raytracer\").to_path(dirs);\n \n@@ -75,9 +76,18 @@ fn benchmark_simple_raytracer(dirs: &Dirs) {\n         bench_runs,\n         None,\n         &[\n-            Path::new(\".\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")).to_str().unwrap(),\n-            Path::new(\".\").join(get_file_name(\"raytracer_cg_clif\", \"bin\")).to_str().unwrap(),\n-            Path::new(\".\").join(get_file_name(\"raytracer_cg_clif_opt\", \"bin\")).to_str().unwrap(),\n+            Path::new(\".\")\n+                .join(get_file_name(&bootstrap_host_compiler.rustc, \"raytracer_cg_llvm\", \"bin\"))\n+                .to_str()\n+                .unwrap(),\n+            Path::new(\".\")\n+                .join(get_file_name(&bootstrap_host_compiler.rustc, \"raytracer_cg_clif\", \"bin\"))\n+                .to_str()\n+                .unwrap(),\n+            Path::new(\".\")\n+                .join(get_file_name(&bootstrap_host_compiler.rustc, \"raytracer_cg_clif_opt\", \"bin\"))\n+                .to_str()\n+                .unwrap(),\n         ],\n     );\n     bench_run.current_dir(RelPath::BUILD.to_path(dirs));"}, {"sha": "b88489a341c2dd7f8ff2828be6a0aeaebfe596ae", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -53,5 +53,5 @@ pub(crate) fn build_backend(\n         .target_dir(dirs)\n         .join(&bootstrap_host_compiler.triple)\n         .join(channel)\n-        .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"))\n+        .join(get_file_name(&bootstrap_host_compiler.rustc, \"rustc_codegen_cranelift\", \"dylib\"))\n }"}, {"sha": "d2e712941bfbb68cf91aa6274ba2ef515e2dc91a", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -3,7 +3,7 @@ use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_file_name, get_rustc_version, get_toolchain_name};\n+use super::rustc_info::{get_file_name, get_rustc_version};\n use super::utils::{remove_dir_if_exists, spawn_and_wait, try_hard_link, CargoProject, Compiler};\n use super::SysrootKind;\n \n@@ -17,6 +17,7 @@ pub(crate) fn build_sysroot(\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib_src: &Path,\n     bootstrap_host_compiler: &Compiler,\n+    rustup_toolchain_name: Option<&str>,\n     target_triple: String,\n ) -> Compiler {\n     eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n@@ -40,19 +41,30 @@ pub(crate) fn build_sysroot(\n     try_hard_link(cg_clif_dylib_src, &cg_clif_dylib_path);\n \n     // Build and copy rustc and cargo wrappers\n-    let wrapper_base_name = get_file_name(\"____\", \"bin\");\n-    let toolchain_name = get_toolchain_name();\n+    let wrapper_base_name = get_file_name(&bootstrap_host_compiler.rustc, \"____\", \"bin\");\n     for wrapper in [\"rustc-clif\", \"rustdoc-clif\", \"cargo-clif\"] {\n         let wrapper_name = wrapper_base_name.replace(\"____\", wrapper);\n \n         let mut build_cargo_wrapper_cmd = Command::new(&bootstrap_host_compiler.rustc);\n         let wrapper_path = DIST_DIR.to_path(dirs).join(&wrapper_name);\n         build_cargo_wrapper_cmd\n-            .env(\"TOOLCHAIN_NAME\", toolchain_name.clone())\n             .arg(RelPath::SCRIPTS.to_path(dirs).join(&format!(\"{wrapper}.rs\")))\n             .arg(\"-o\")\n             .arg(&wrapper_path)\n             .arg(\"-Cstrip=debuginfo\");\n+        if let Some(rustup_toolchain_name) = &rustup_toolchain_name {\n+            build_cargo_wrapper_cmd\n+                .env(\"TOOLCHAIN_NAME\", rustup_toolchain_name)\n+                .env_remove(\"CARGO\")\n+                .env_remove(\"RUSTC\")\n+                .env_remove(\"RUSTDOC\");\n+        } else {\n+            build_cargo_wrapper_cmd\n+                .env_remove(\"TOOLCHAIN_NAME\")\n+                .env(\"CARGO\", &bootstrap_host_compiler.cargo)\n+                .env(\"RUSTC\", &bootstrap_host_compiler.rustc)\n+                .env(\"RUSTDOC\", &bootstrap_host_compiler.rustdoc);\n+        }\n         spawn_and_wait(build_cargo_wrapper_cmd);\n         try_hard_link(wrapper_path, BIN_DIR.to_path(dirs).join(wrapper_name));\n     }"}, {"sha": "d1d6f34dcffb880a2216f39fb0b48f57a5839c3a", "filename": "build_system/mod.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -78,6 +78,7 @@ pub(crate) fn main() {\n     let mut channel = \"release\";\n     let mut sysroot_kind = SysrootKind::Clif;\n     let mut use_unstable_features = true;\n+    let mut frozen = false;\n     while let Some(arg) = args.next().as_deref() {\n         match arg {\n             \"--out-dir\" => {\n@@ -96,17 +97,38 @@ pub(crate) fn main() {\n                 }\n             }\n             \"--no-unstable-features\" => use_unstable_features = false,\n+            \"--frozen\" => frozen = true,\n             flag if flag.starts_with(\"-\") => arg_error!(\"Unknown flag {}\", flag),\n             arg => arg_error!(\"Unexpected argument {}\", arg),\n         }\n     }\n \n-    let bootstrap_host_compiler = Compiler::bootstrap_with_triple(\n-        std::env::var(\"HOST_TRIPLE\")\n+    let rustup_toolchain_name = match (env::var(\"CARGO\"), env::var(\"RUSTC\"), env::var(\"RUSTDOC\")) {\n+        (Ok(_), Ok(_), Ok(_)) => None,\n+        (Err(_), Err(_), Err(_)) => Some(rustc_info::get_toolchain_name()),\n+        _ => {\n+            eprintln!(\"All of CARGO, RUSTC and RUSTDOC need to be set or none must be set\");\n+            process::exit(1);\n+        }\n+    };\n+    let bootstrap_host_compiler = {\n+        let cargo = rustc_info::get_cargo_path();\n+        let rustc = rustc_info::get_rustc_path();\n+        let rustdoc = rustc_info::get_rustdoc_path();\n+        let triple = std::env::var(\"HOST_TRIPLE\")\n             .ok()\n             .or_else(|| config::get_value(\"host\"))\n-            .unwrap_or_else(|| rustc_info::get_host_triple()),\n-    );\n+            .unwrap_or_else(|| rustc_info::get_host_triple(&rustc));\n+        Compiler {\n+            cargo,\n+            rustc,\n+            rustdoc,\n+            rustflags: String::new(),\n+            rustdocflags: String::new(),\n+            triple,\n+            runner: vec![],\n+        }\n+    };\n     let target_triple = std::env::var(\"TARGET_TRIPLE\")\n         .ok()\n         .or_else(|| config::get_value(\"target\"))\n@@ -120,6 +142,7 @@ pub(crate) fn main() {\n         download_dir: out_dir.join(\"download\"),\n         build_dir: out_dir.join(\"build\"),\n         dist_dir: out_dir.join(\"dist\"),\n+        frozen,\n     };\n \n     path::RelPath::BUILD.ensure_exists(&dirs);\n@@ -134,7 +157,7 @@ pub(crate) fn main() {\n     }\n \n     if command == Command::Prepare {\n-        prepare::prepare(&dirs);\n+        prepare::prepare(&dirs, &bootstrap_host_compiler.rustc);\n         process::exit(0);\n     }\n \n@@ -158,6 +181,7 @@ pub(crate) fn main() {\n                 sysroot_kind,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n+                rustup_toolchain_name.as_deref(),\n                 target_triple.clone(),\n             );\n         }\n@@ -166,7 +190,14 @@ pub(crate) fn main() {\n                 eprintln!(\"Abi-cafe doesn't support cross-compilation\");\n                 process::exit(1);\n             }\n-            abi_cafe::run(channel, sysroot_kind, &dirs, &cg_clif_dylib, &bootstrap_host_compiler);\n+            abi_cafe::run(\n+                channel,\n+                sysroot_kind,\n+                &dirs,\n+                &cg_clif_dylib,\n+                rustup_toolchain_name.as_deref(),\n+                &bootstrap_host_compiler,\n+            );\n         }\n         Command::Build => {\n             build_sysroot::build_sysroot(\n@@ -175,6 +206,7 @@ pub(crate) fn main() {\n                 sysroot_kind,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n+                rustup_toolchain_name.as_deref(),\n                 target_triple,\n             );\n         }\n@@ -185,9 +217,10 @@ pub(crate) fn main() {\n                 sysroot_kind,\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n+                rustup_toolchain_name.as_deref(),\n                 target_triple,\n             );\n-            bench::benchmark(&dirs);\n+            bench::benchmark(&dirs, &bootstrap_host_compiler);\n         }\n     }\n }"}, {"sha": "4f86c0fd29d6a39204c4a325758954b01936e3e0", "filename": "build_system/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/build_system%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/build_system%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fpath.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -9,6 +9,7 @@ pub(crate) struct Dirs {\n     pub(crate) download_dir: PathBuf,\n     pub(crate) build_dir: PathBuf,\n     pub(crate) dist_dir: PathBuf,\n+    pub(crate) frozen: bool,\n }\n \n #[doc(hidden)]"}, {"sha": "ac2dc47dd7fd54a9f0fd4e6b759c2ff2577413f4", "filename": "build_system/prepare.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -9,27 +9,19 @@ use super::rustc_info::{get_default_sysroot, get_rustc_version};\n use super::tests::LIBCORE_TESTS_SRC;\n use super::utils::{copy_dir_recursively, git_command, retry_spawn_and_wait, spawn_and_wait};\n \n-pub(crate) fn prepare(dirs: &Dirs) {\n+pub(crate) fn prepare(dirs: &Dirs, rustc: &Path) {\n     RelPath::DOWNLOAD.ensure_fresh(dirs);\n \n-    spawn_and_wait(super::build_backend::CG_CLIF.fetch(\"cargo\", \"rustc\", dirs));\n-\n-    prepare_stdlib(dirs);\n-    spawn_and_wait(super::build_sysroot::STANDARD_LIBRARY.fetch(\"cargo\", \"rustc\", dirs));\n-\n-    prepare_coretests(dirs);\n-    spawn_and_wait(super::tests::LIBCORE_TESTS.fetch(\"cargo\", \"rustc\", dirs));\n+    prepare_stdlib(dirs, rustc);\n+    prepare_coretests(dirs, rustc);\n \n     super::tests::RAND_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::RAND.fetch(\"cargo\", \"rustc\", dirs));\n     super::tests::REGEX_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::REGEX.fetch(\"cargo\", \"rustc\", dirs));\n     super::tests::PORTABLE_SIMD_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::PORTABLE_SIMD.fetch(\"cargo\", \"rustc\", dirs));\n }\n \n-fn prepare_stdlib(dirs: &Dirs) {\n-    let sysroot_src_orig = get_default_sysroot(Path::new(\"rustc\")).join(\"lib/rustlib/src/rust\");\n+fn prepare_stdlib(dirs: &Dirs, rustc: &Path) {\n+    let sysroot_src_orig = get_default_sysroot(rustc).join(\"lib/rustlib/src/rust\");\n     assert!(sysroot_src_orig.exists());\n \n     eprintln!(\"[COPY] stdlib src\");\n@@ -44,7 +36,7 @@ fn prepare_stdlib(dirs: &Dirs) {\n         &SYSROOT_SRC.to_path(dirs).join(\"library\"),\n     );\n \n-    let rustc_version = get_rustc_version(Path::new(\"rustc\"));\n+    let rustc_version = get_rustc_version(rustc);\n     fs::write(SYSROOT_RUSTC_VERSION.to_path(dirs), &rustc_version).unwrap();\n \n     eprintln!(\"[GIT] init\");\n@@ -53,8 +45,8 @@ fn prepare_stdlib(dirs: &Dirs) {\n     apply_patches(dirs, \"stdlib\", &SYSROOT_SRC.to_path(dirs));\n }\n \n-fn prepare_coretests(dirs: &Dirs) {\n-    let sysroot_src_orig = get_default_sysroot(Path::new(\"rustc\")).join(\"lib/rustlib/src/rust\");\n+fn prepare_coretests(dirs: &Dirs, rustc: &Path) {\n+    let sysroot_src_orig = get_default_sysroot(rustc).join(\"lib/rustlib/src/rust\");\n     assert!(sysroot_src_orig.exists());\n \n     eprintln!(\"[COPY] coretests src\");"}, {"sha": "42cec0c69351e586f25a57fa5b3879d9ca793a73", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -7,9 +7,9 @@ pub(crate) fn get_rustc_version(rustc: &Path) -> String {\n     String::from_utf8(version_info).unwrap()\n }\n \n-pub(crate) fn get_host_triple() -> String {\n+pub(crate) fn get_host_triple(rustc: &Path) -> String {\n     let version_info =\n-        Command::new(\"rustc\").stderr(Stdio::inherit()).args(&[\"-vV\"]).output().unwrap().stdout;\n+        Command::new(rustc).stderr(Stdio::inherit()).args(&[\"-vV\"]).output().unwrap().stdout;\n     String::from_utf8(version_info)\n         .unwrap()\n         .lines()\n@@ -34,6 +34,9 @@ pub(crate) fn get_toolchain_name() -> String {\n }\n \n pub(crate) fn get_cargo_path() -> PathBuf {\n+    if let Ok(cargo) = std::env::var(\"CARGO\") {\n+        return PathBuf::from(cargo);\n+    }\n     let cargo_path = Command::new(\"rustup\")\n         .stderr(Stdio::inherit())\n         .args(&[\"which\", \"cargo\"])\n@@ -44,6 +47,9 @@ pub(crate) fn get_cargo_path() -> PathBuf {\n }\n \n pub(crate) fn get_rustc_path() -> PathBuf {\n+    if let Ok(rustc) = std::env::var(\"RUSTC\") {\n+        return PathBuf::from(rustc);\n+    }\n     let rustc_path = Command::new(\"rustup\")\n         .stderr(Stdio::inherit())\n         .args(&[\"which\", \"rustc\"])\n@@ -54,6 +60,9 @@ pub(crate) fn get_rustc_path() -> PathBuf {\n }\n \n pub(crate) fn get_rustdoc_path() -> PathBuf {\n+    if let Ok(rustdoc) = std::env::var(\"RUSTDOC\") {\n+        return PathBuf::from(rustdoc);\n+    }\n     let rustc_path = Command::new(\"rustup\")\n         .stderr(Stdio::inherit())\n         .args(&[\"which\", \"rustdoc\"])\n@@ -73,8 +82,9 @@ pub(crate) fn get_default_sysroot(rustc: &Path) -> PathBuf {\n     Path::new(String::from_utf8(default_sysroot).unwrap().trim()).to_owned()\n }\n \n-pub(crate) fn get_file_name(crate_name: &str, crate_type: &str) -> String {\n-    let file_name = Command::new(\"rustc\")\n+// FIXME call once for each target and pass result around in struct\n+pub(crate) fn get_file_name(rustc: &Path, crate_name: &str, crate_type: &str) -> String {\n+    let file_name = Command::new(rustc)\n         .stderr(Stdio::inherit())\n         .args(&[\n             \"--crate-name\","}, {"sha": "40bcf1e0c1e050446a0e00582aa267a80b8c09da", "filename": "build_system/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -217,6 +217,7 @@ pub(crate) fn run_tests(\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib: &Path,\n     bootstrap_host_compiler: &Compiler,\n+    rustup_toolchain_name: Option<&str>,\n     target_triple: String,\n ) {\n     if config::get_bool(\"testsuite.no_sysroot\") {\n@@ -226,6 +227,7 @@ pub(crate) fn run_tests(\n             SysrootKind::None,\n             cg_clif_dylib,\n             bootstrap_host_compiler,\n+            rustup_toolchain_name,\n             target_triple.clone(),\n         );\n \n@@ -251,6 +253,7 @@ pub(crate) fn run_tests(\n             sysroot_kind,\n             cg_clif_dylib,\n             bootstrap_host_compiler,\n+            rustup_toolchain_name,\n             target_triple.clone(),\n         );\n         // Rust's build system denies a couple of lints that trigger on several of the test"}, {"sha": "1aee083f8df8fe49ceef07e23749b44f808b51c6", "filename": "build_system/usage.txt", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/build_system%2Fusage.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/build_system%2Fusage.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fusage.txt?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -2,10 +2,10 @@ The build system of cg_clif.\n \n USAGE:\n     ./y.rs prepare [--out-dir DIR]\n-    ./y.rs build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n-    ./y.rs test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n-    ./y.rs abi-cafe [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n-    ./y.rs bench [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features]\n+    ./y.rs build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features] [--frozen]\n+    ./y.rs test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features] [--frozen]\n+    ./y.rs abi-cafe [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features] [--frozen]\n+    ./y.rs bench [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--no-unstable-features] [--frozen]\n \n OPTIONS:\n     --debug\n@@ -26,9 +26,13 @@ OPTIONS:\n             Some features are not yet ready for production usage. This option will disable these\n             features. This includes the JIT mode and inline assembly support.\n \n+    --frozen\n+            Require Cargo.lock and cache are up to date\n+\n REQUIREMENTS:\n-    * Rustup: The build system has a hard coded dependency on rustup to install the right nightly\n-      version and make sure it is used where necessary.\n+    * Rustup: By default rustup is used to install the right nightly version. If you don't want to\n+      use rustup, you can manually install the nightly version indicated by rust-toolchain.toml and\n+      point the CARGO, RUSTC and RUSTDOC env vars to the right executables.\n     * Git: `./y.rs prepare` uses git for applying patches and on Windows for downloading test repos.\n     * Curl and tar (non-Windows only): Used by `./y.rs prepare` to download a single commit for\n       repos. Git will be used to clone the whole repo when using Windows."}, {"sha": "3e12ed22ef6d8b49bdd5e2bf8863927c0c055827", "filename": "build_system/utils.rs", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -5,7 +5,6 @@ use std::path::{Path, PathBuf};\n use std::process::{self, Command, Stdio};\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_cargo_path, get_rustc_path, get_rustdoc_path};\n \n #[derive(Clone, Debug)]\n pub(crate) struct Compiler {\n@@ -19,18 +18,6 @@ pub(crate) struct Compiler {\n }\n \n impl Compiler {\n-    pub(crate) fn bootstrap_with_triple(triple: String) -> Compiler {\n-        Compiler {\n-            cargo: get_cargo_path(),\n-            rustc: get_rustc_path(),\n-            rustdoc: get_rustdoc_path(),\n-            rustflags: String::new(),\n-            rustdocflags: String::new(),\n-            triple,\n-            runner: vec![],\n-        }\n-    }\n-\n     pub(crate) fn set_cross_linker_and_runner(&mut self) {\n         match self.triple.as_str() {\n             \"aarch64-unknown-linux-gnu\" => {\n@@ -94,8 +81,11 @@ impl CargoProject {\n             .arg(\"--manifest-path\")\n             .arg(self.manifest_path(dirs))\n             .arg(\"--target-dir\")\n-            .arg(self.target_dir(dirs))\n-            .arg(\"--frozen\");\n+            .arg(self.target_dir(dirs));\n+\n+        if dirs.frozen {\n+            cmd.arg(\"--frozen\");\n+        }\n \n         cmd\n     }\n@@ -120,23 +110,6 @@ impl CargoProject {\n         cmd\n     }\n \n-    #[must_use]\n-    pub(crate) fn fetch(\n-        &self,\n-        cargo: impl AsRef<Path>,\n-        rustc: impl AsRef<Path>,\n-        dirs: &Dirs,\n-    ) -> Command {\n-        let mut cmd = Command::new(cargo.as_ref());\n-\n-        cmd.env(\"RUSTC\", rustc.as_ref())\n-            .arg(\"fetch\")\n-            .arg(\"--manifest-path\")\n-            .arg(self.manifest_path(dirs));\n-\n-        cmd\n-    }\n-\n     pub(crate) fn clean(&self, dirs: &Dirs) {\n         let _ = fs::remove_dir_all(self.target_dir(dirs));\n     }"}, {"sha": "0d5d9f7db013eeb10ae2ba9b9cee36bf5ec95e9a", "filename": "scripts/cargo-clif.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/scripts%2Fcargo-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/scripts%2Fcargo-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo-clif.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -28,8 +28,13 @@ fn main() {\n     env::set_var(\"RUSTFLAGS\", env::var(\"RUSTFLAGS\").unwrap_or(String::new()) + &rustflags);\n     env::set_var(\"RUSTDOCFLAGS\", env::var(\"RUSTDOCFLAGS\").unwrap_or(String::new()) + &rustflags);\n \n-    // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n+    let cargo = if let Some(cargo) = option_env!(\"CARGO\") {\n+        cargo\n+    } else {\n+        // Ensure that the right toolchain is used\n+        env::set_var(\"RUSTUP_TOOLCHAIN\", option_env!(\"TOOLCHAIN_NAME\").expect(\"TOOLCHAIN_NAME\"));\n+        \"cargo\"\n+    };\n \n     let args: Vec<_> = match env::args().nth(1).as_deref() {\n         Some(\"jit\") => {\n@@ -64,10 +69,10 @@ fn main() {\n     };\n \n     #[cfg(unix)]\n-    panic!(\"Failed to spawn cargo: {}\", Command::new(\"cargo\").args(args).exec());\n+    panic!(\"Failed to spawn cargo: {}\", Command::new(cargo).args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit(\n-        Command::new(\"cargo\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+        Command::new(cargo).args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n     );\n }"}, {"sha": "df94b80b34f107bef30ae4d314f5a4c30990834b", "filename": "scripts/rustc-clif.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/scripts%2Frustc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/scripts%2Frustc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustc-clif.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -30,14 +30,19 @@ fn main() {\n     }\n     args.extend(passed_args);\n \n-    // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n+    let rustc = if let Some(rustc) = option_env!(\"RUSTC\") {\n+        rustc\n+    } else {\n+        // Ensure that the right toolchain is used\n+        env::set_var(\"RUSTUP_TOOLCHAIN\", option_env!(\"TOOLCHAIN_NAME\").expect(\"TOOLCHAIN_NAME\"));\n+        \"rustc\"\n+    };\n \n     #[cfg(unix)]\n-    panic!(\"Failed to spawn rustc: {}\", Command::new(\"rustc\").args(args).exec());\n+    panic!(\"Failed to spawn rustc: {}\", Command::new(rustc).args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit(\n-        Command::new(\"rustc\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+        Command::new(rustc).args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n     );\n }"}, {"sha": "36a00dc676ef335f80b6aa3fe7d23d0656613daf", "filename": "scripts/rustdoc-clif.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a684753a680dff8beef176974538492bb19df21c/scripts%2Frustdoc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a684753a680dff8beef176974538492bb19df21c/scripts%2Frustdoc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustdoc-clif.rs?ref=a684753a680dff8beef176974538492bb19df21c", "patch": "@@ -30,14 +30,19 @@ fn main() {\n     }\n     args.extend(passed_args);\n \n-    // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n+    let rustdoc = if let Some(rustdoc) = option_env!(\"RUSTDOC\") {\n+        rustdoc\n+    } else {\n+        // Ensure that the right toolchain is used\n+        env::set_var(\"RUSTUP_TOOLCHAIN\", option_env!(\"TOOLCHAIN_NAME\").expect(\"TOOLCHAIN_NAME\"));\n+        \"rustdoc\"\n+    };\n \n     #[cfg(unix)]\n-    panic!(\"Failed to spawn rustdoc: {}\", Command::new(\"rustdoc\").args(args).exec());\n+    panic!(\"Failed to spawn rustdoc: {}\", Command::new(rustdoc).args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit(\n-        Command::new(\"rustdoc\").args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n+        Command::new(rustdoc).args(args).spawn().unwrap().wait().unwrap().code().unwrap_or(1),\n     );\n }"}]}