{"sha": "875a4542f9eeace01f1ee5ec5fd25904601f58c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NWE0NTQyZjllZWFjZTAxZjFlZTVlYzVmZDI1OTA0NjAxZjU4YzU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-22T13:22:00Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-22T13:22:00Z"}, "message": "remove the ZST allocation and abort all zero byte writes/reads", "tree": {"sha": "e03f1d444ebfef83c047365cd6f8d6a0d4043ae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e03f1d444ebfef83c047365cd6f8d6a0d4043ae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/875a4542f9eeace01f1ee5ec5fd25904601f58c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX49r4AAoJEFbW7qD8Z6xGz8kQAKiXHb/p4/m+o6moqz5vF2Wr\n+PGoGJspKxIMjPczvsc9mB1M3G+Z/v4KAqydvf7hnWJhQNcpmyEVRWzrYB+Az0yq\nJQY+Jh/fJPvRPpr4yT10AX1LoWp4jzVnwltkfEcbdtho9sVa7n9P+nj1tepP776P\nydiBrf97/uOwfcjMvV4K6lYxIZKc91MbAiXzyMp/VVRpTZ5UuJ1lH4O8jzy0dAX8\n3ntAZErderxmiFzsISuWX1WWZHVVtAZzfm72RmUEf9/bDL6I0ijarZIGzsi0vKjQ\nelSz7bWvRh219umHz8XHK0LsrP2OK1LcrD1pmkRK/Em0KNdZL+7uhwhWvYwde2Ci\npcFz/kPBFWg9p7g9xTWGWQ53u32cZLFVKmoZ3JFpvMEpYjLLH531bnBgdSNnMS0Z\nFcVtMJDRPSiyOMINcC8bMgRIBOnYyssUKB9yHBHZEPLAblheLMqOjSVSNz+R8ibn\nFrLOq2/zNI9IhWlcsGxWb5EJVCVX+pajir1lxjsxYbYHTTMT1QEof9HLs+cQVNIf\nsb+TBIy0z96V8mgN2PbqWniZHxpNgfYSfMsFN2IkaAYv5ruuQUb5FcniUKSHbwdQ\ntYgcHtpmU8y8MRsNsOWck1NSUH67med/804XgbiF86Zclwd8TsNvn91aXXJeX9MB\njRn84PAvzeoJ9S7JysLD\n=vIyX\n-----END PGP SIGNATURE-----", "payload": "tree e03f1d444ebfef83c047365cd6f8d6a0d4043ae3\nparent 0690a26ddfb762c7fb7906326f41a7e470728654\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474550520 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474550520 +0200\n\nremove the ZST allocation and abort all zero byte writes/reads"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/875a4542f9eeace01f1ee5ec5fd25904601f58c5", "html_url": "https://github.com/rust-lang/rust/commit/875a4542f9eeace01f1ee5ec5fd25904601f58c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/875a4542f9eeace01f1ee5ec5fd25904601f58c5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0690a26ddfb762c7fb7906326f41a7e470728654", "url": "https://api.github.com/repos/rust-lang/rust/commits/0690a26ddfb762c7fb7906326f41a7e470728654", "html_url": "https://github.com/rust-lang/rust/commit/0690a26ddfb762c7fb7906326f41a7e470728654"}], "stats": {"total": 52, "additions": 34, "deletions": 18}, "files": [{"sha": "82b4eff6e9264a691a8c9bab92b64af42bd5e019", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/875a4542f9eeace01f1ee5ec5fd25904601f58c5/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/875a4542f9eeace01f1ee5ec5fd25904601f58c5/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=875a4542f9eeace01f1ee5ec5fd25904601f58c5", "patch": "@@ -10,6 +10,7 @@ use syntax::codemap::Span;\n pub enum EvalError<'tcx> {\n     FunctionPointerTyMismatch(&'tcx BareFnTy<'tcx>, &'tcx BareFnTy<'tcx>),\n     DanglingPointerDeref,\n+    ZstAllocAccess,\n     InvalidFunctionPointer,\n     InvalidBool,\n     InvalidDiscriminant,\n@@ -53,6 +54,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n         match *self {\n             EvalError::FunctionPointerTyMismatch(..) =>\n                 \"tried to call a function through a function pointer of a different type\",\n+            EvalError::ZstAllocAccess =>\n+                \"tried to access the ZST allocation\",\n             EvalError::DanglingPointerDeref =>\n                 \"dangling pointer was dereferenced\",\n             EvalError::InvalidFunctionPointer =>"}, {"sha": "53c50e45e8566c13bd25822b31b909fadc959273", "filename": "src/memory.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/875a4542f9eeace01f1ee5ec5fd25904601f58c5/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/875a4542f9eeace01f1ee5ec5fd25904601f58c5/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=875a4542f9eeace01f1ee5ec5fd25904601f58c5", "patch": "@@ -105,29 +105,15 @@ const ZST_ALLOC_ID: AllocId = AllocId(0);\n \n impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn new(layout: &'a TargetDataLayout, max_memory: usize) -> Self {\n-        let mut mem = Memory {\n+        Memory {\n             alloc_map: HashMap::new(),\n             functions: HashMap::new(),\n             function_alloc_cache: HashMap::new(),\n             next_id: AllocId(1),\n             layout: layout,\n             memory_size: max_memory,\n             memory_usage: 0,\n-        };\n-        // alloc id 0 is reserved for ZSTs, this is an optimization to prevent ZST\n-        // (e.g. function items, (), [], ...) from requiring memory\n-        let alloc = Allocation {\n-            bytes: Vec::new(),\n-            relocations: BTreeMap::new(),\n-            undef_mask: UndefMask::new(0),\n-            align: 8, // should be infinity?\n-            immutable: false, // must be mutable, because sometimes we \"move out\" of a ZST\n-        };\n-        mem.alloc_map.insert(ZST_ALLOC_ID, alloc);\n-        // check that additional zst allocs work\n-        debug_assert!(mem.allocate(0, 1).unwrap().points_to_zst());\n-        debug_assert!(mem.get(ZST_ALLOC_ID).is_ok());\n-        mem\n+        }\n     }\n \n     pub fn allocations(&self) -> ::std::collections::hash_map::Iter<AllocId, Allocation> {\n@@ -293,6 +279,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             Some(alloc) => Ok(alloc),\n             None => match self.functions.get(&id) {\n                 Some(_) => Err(EvalError::DerefFunctionPointer),\n+                None if id == ZST_ALLOC_ID => Err(EvalError::ZstAllocAccess),\n                 None => Err(EvalError::DanglingPointerDeref),\n             }\n         }\n@@ -304,6 +291,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             Some(alloc) => Ok(alloc),\n             None => match self.functions.get(&id) {\n                 Some(_) => Err(EvalError::DerefFunctionPointer),\n+                None if id == ZST_ALLOC_ID => Err(EvalError::ZstAllocAccess),\n                 None => Err(EvalError::DanglingPointerDeref),\n             }\n         }\n@@ -353,6 +341,10 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         while let Some(id) = allocs_to_print.pop_front() {\n             allocs_seen.insert(id);\n             let mut msg = format!(\"Alloc {:<5} \", format!(\"{}:\", id));\n+            if id == ZST_ALLOC_ID {\n+                trace!(\"{} zst allocation\", msg);\n+                continue;\n+            }\n             let prefix_len = msg.len();\n             let mut relocations = vec![];\n \n@@ -406,6 +398,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n /// Byte accessors\n impl<'a, 'tcx> Memory<'a, 'tcx> {\n     fn get_bytes_unchecked(&self, ptr: Pointer, size: usize) -> EvalResult<'tcx, &[u8]> {\n+        if size == 0 {\n+            return Ok(&[]);\n+        }\n         let alloc = self.get(ptr.alloc_id)?;\n         if ptr.offset + size > alloc.bytes.len() {\n             return Err(EvalError::PointerOutOfBounds {\n@@ -418,6 +413,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     fn get_bytes_unchecked_mut(&mut self, ptr: Pointer, size: usize) -> EvalResult<'tcx, &mut [u8]> {\n+        if size == 0 {\n+            return Ok(&mut []);\n+        }\n         let alloc = self.get_mut(ptr.alloc_id)?;\n         if ptr.offset + size > alloc.bytes.len() {\n             return Err(EvalError::PointerOutOfBounds {\n@@ -430,6 +428,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     fn get_bytes(&self, ptr: Pointer, size: usize, align: usize) -> EvalResult<'tcx, &[u8]> {\n+        if size == 0 {\n+            return Ok(&[]);\n+        }\n         self.check_align(ptr, align)?;\n         if self.relocations(ptr, size)?.count() != 0 {\n             return Err(EvalError::ReadPointerAsBytes);\n@@ -439,6 +440,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     fn get_bytes_mut(&mut self, ptr: Pointer, size: usize, align: usize) -> EvalResult<'tcx, &mut [u8]> {\n+        if size == 0 {\n+            return Ok(&mut []);\n+        }\n         self.check_align(ptr, align)?;\n         self.clear_relocations(ptr, size)?;\n         self.mark_definedness(ptr, size, true)?;\n@@ -449,15 +453,17 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n /// Reading and writing\n impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn freeze(&mut self, alloc_id: AllocId) -> EvalResult<'tcx, ()> {\n-        // Never freeze the zero-sized allocation. If you do that, then getting a mutable handle to\n-        // _any_ ZST becomes an error, since they all share the same allocation.\n+        // It's not possible to freeze the zero-sized allocation, because it doesn't exist.\n         if alloc_id != ZST_ALLOC_ID {\n             self.get_mut(alloc_id)?.immutable = true;\n         }\n         Ok(())\n     }\n \n     pub fn copy(&mut self, src: Pointer, dest: Pointer, size: usize, align: usize) -> EvalResult<'tcx, ()> {\n+        if size == 0 {\n+            return Ok(());\n+        }\n         self.check_relocation_edges(src, size)?;\n \n         let src_bytes = self.get_bytes_unchecked(src, size)?.as_ptr();\n@@ -714,6 +720,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn mark_definedness(&mut self, ptr: Pointer, size: usize, new_state: bool)\n         -> EvalResult<'tcx, ()>\n     {\n+        if size == 0 {\n+            return Ok(())\n+        }\n         let mut alloc = self.get_mut(ptr.alloc_id)?;\n         alloc.undef_mask.set_range(ptr.offset, ptr.offset + size, new_state);\n         Ok(())"}, {"sha": "a244befed018b8a187156f4666718e41a54ca250", "filename": "tests/compile-fail/zst.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/875a4542f9eeace01f1ee5ec5fd25904601f58c5/tests%2Fcompile-fail%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/875a4542f9eeace01f1ee5ec5fd25904601f58c5/tests%2Fcompile-fail%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst.rs?ref=875a4542f9eeace01f1ee5ec5fd25904601f58c5", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x = &() as *const () as *const i32;\n+    let _ = unsafe { *x }; //~ ERROR: tried to access the ZST allocation\n+}"}]}