{"sha": "44c88ddf4237ca18d7eb7b437f46731da7f30bb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0Yzg4ZGRmNDIzN2NhMThkN2ViN2I0MzdmNDY3MzFkYTdmMzBiYjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-18T05:59:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-24T22:46:04Z"}, "message": "std::rt: Remove an unnecessary allocation from the main sched loop", "tree": {"sha": "774075a59534439249496574b1c962f8cb1d1eab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/774075a59534439249496574b1c962f8cb1d1eab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44c88ddf4237ca18d7eb7b437f46731da7f30bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44c88ddf4237ca18d7eb7b437f46731da7f30bb5", "html_url": "https://github.com/rust-lang/rust/commit/44c88ddf4237ca18d7eb7b437f46731da7f30bb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44c88ddf4237ca18d7eb7b437f46731da7f30bb5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5", "html_url": "https://github.com/rust-lang/rust/commit/8fc1d9db21fa9d4abd9b40d09be8fa061abb3bb5"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "9c2a6e646d2ce2e31fee2ff27c604995d6e6c9d1", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/44c88ddf4237ca18d7eb7b437f46731da7f30bb5/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c88ddf4237ca18d7eb7b437f46731da7f30bb5/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=44c88ddf4237ca18d7eb7b437f46731da7f30bb5", "patch": "@@ -59,7 +59,7 @@ pub struct Task {\n }\n \n pub enum TaskType {\n-    GreenTask(Option<~SchedHome>),\n+    GreenTask(Option<SchedHome>),\n     SchedTask\n }\n \n@@ -173,7 +173,7 @@ impl Task {\n             name: None,\n             coroutine: Some(Coroutine::new(stack_pool, stack_size, start)),\n             sched: None,\n-            task_type: GreenTask(Some(~home)),\n+            task_type: GreenTask(Some(home)),\n             borrow_list: None\n         }\n     }\n@@ -196,15 +196,15 @@ impl Task {\n             name: None,\n             coroutine: Some(Coroutine::new(stack_pool, stack_size, start)),\n             sched: None,\n-            task_type: GreenTask(Some(~home)),\n+            task_type: GreenTask(Some(home)),\n             borrow_list: None\n         }\n     }\n \n     pub fn give_home(&mut self, new_home: SchedHome) {\n         match self.task_type {\n             GreenTask(ref mut home) => {\n-                *home = Some(~new_home);\n+                *home = Some(new_home);\n             }\n             SchedTask => {\n                 rtabort!(\"type error: used SchedTask as GreenTask\");\n@@ -216,7 +216,7 @@ impl Task {\n         match self.task_type {\n             GreenTask(ref mut home) => {\n                 let out = home.take_unwrap();\n-                return *out;\n+                return out;\n             }\n             SchedTask => {\n                 rtabort!(\"type error: used SchedTask as GreenTask\");\n@@ -275,8 +275,8 @@ impl Task {\n \n     pub fn is_home_no_tls(&self, sched: &~Scheduler) -> bool {\n         match self.task_type {\n-            GreenTask(Some(~AnySched)) => { false }\n-            GreenTask(Some(~Sched(SchedHandle { sched_id: ref id, _}))) => {\n+            GreenTask(Some(AnySched)) => { false }\n+            GreenTask(Some(Sched(SchedHandle { sched_id: ref id, _}))) => {\n                 *id == sched.sched_id()\n             }\n             GreenTask(None) => {\n@@ -291,8 +291,8 @@ impl Task {\n \n     pub fn homed(&self) -> bool {\n         match self.task_type {\n-            GreenTask(Some(~AnySched)) => { false }\n-            GreenTask(Some(~Sched(SchedHandle { _ }))) => { true }\n+            GreenTask(Some(AnySched)) => { false }\n+            GreenTask(Some(Sched(SchedHandle { _ }))) => { true }\n             GreenTask(None) => {\n                 rtabort!(\"task without home\");\n             }\n@@ -309,11 +309,11 @@ impl Task {\n             let sched_id = task.sched.get_ref().sched_id();\n             let sched_run_anything = task.sched.get_ref().run_anything;\n             match task.task_type {\n-                GreenTask(Some(~AnySched)) => {\n+                GreenTask(Some(AnySched)) => {\n                     rtdebug!(\"anysched task in sched check ****\");\n                     sched_run_anything\n                 }\n-                GreenTask(Some(~Sched(SchedHandle { sched_id: ref id, _ }))) => {\n+                GreenTask(Some(Sched(SchedHandle { sched_id: ref id, _ }))) => {\n                     rtdebug!(\"homed task in sched check ****\");\n                     *id == sched_id\n                 }"}]}