{"sha": "083035fd06d27487a976953ede615c4fa1755988", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MzAzNWZkMDZkMjc0ODdhOTc2OTUzZWRlNjE1YzRmYTE3NTU5ODg=", "commit": {"author": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-13T23:03:02Z"}, "committer": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-13T23:03:02Z"}, "message": "Use WorkDoneProgress LSP API for initial load\n\nAddresses #3283\n\nRather than using custom UI for showing the loaded state. Rely\non the WorkDoneProgress API in 3.15.0\nhttps://microsoft.github.io/language-server-protocol/specification#workDoneProgress.\n\nNo client-side work was necessary. The UI is not exactly what is\ndescribed in the issue but afaict that's how VS Code implements the LSP\nAPI.\n\n- The WorkDoneProgressEnd does not appear to display its message\n  contents (controlled by vscode)", "tree": {"sha": "66d61858974ccfd0c9cfc0195c066f0ea526264a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66d61858974ccfd0c9cfc0195c066f0ea526264a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/083035fd06d27487a976953ede615c4fa1755988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/083035fd06d27487a976953ede615c4fa1755988", "html_url": "https://github.com/rust-lang/rust/commit/083035fd06d27487a976953ede615c4fa1755988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/083035fd06d27487a976953ede615c4fa1755988/comments", "author": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f9f409538553fc709bbcad1a5c76968f36e5968", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9f409538553fc709bbcad1a5c76968f36e5968", "html_url": "https://github.com/rust-lang/rust/commit/2f9f409538553fc709bbcad1a5c76968f36e5968"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "eb41e3cdacb5727363e3170a566e4bbf3da277cf", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/083035fd06d27487a976953ede615c4fa1755988/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/083035fd06d27487a976953ede615c4fa1755988/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=083035fd06d27487a976953ede615c4fa1755988", "patch": "@@ -16,7 +16,10 @@ use std::{\n \n use crossbeam_channel::{select, unbounded, RecvError, Sender};\n use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n-use lsp_types::{ClientCapabilities, NumberOrString};\n+use lsp_types::{\n+    ClientCapabilities, NumberOrString, WorkDoneProgress, WorkDoneProgressBegin,\n+    WorkDoneProgressCreateParams, WorkDoneProgressEnd, WorkDoneProgressReport,\n+};\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckTask};\n use ra_ide::{Canceled, FileId, InlayHintsOptions, LibraryData, SourceRootId};\n use ra_prof::profile;\n@@ -329,6 +332,7 @@ struct LoopState {\n     in_flight_libraries: usize,\n     pending_libraries: Vec<(SourceRootId, Vec<(FileId, RelativePathBuf, Arc<String>)>)>,\n     workspace_loaded: bool,\n+    roots_scanned_progress: Option<usize>,\n }\n \n impl LoopState {\n@@ -428,18 +432,14 @@ fn loop_turn(\n         && loop_state.in_flight_libraries == 0\n     {\n         loop_state.workspace_loaded = true;\n-        let n_packages: usize = world_state.workspaces.iter().map(|it| it.n_packages()).sum();\n-        if world_state.feature_flags.get(\"notifications.workspace-loaded\") {\n-            let msg = format!(\"workspace loaded, {} rust packages\", n_packages);\n-            show_message(req::MessageType::Info, msg, &connection.sender);\n-        }\n         world_state.check_watcher.update();\n         pool.execute({\n             let subs = loop_state.subscriptions.subscriptions();\n             let snap = world_state.snapshot();\n             move || snap.analysis().prime_caches(subs).unwrap_or_else(|_: Canceled| ())\n         });\n     }\n+    send_startup_progress(&connection.sender, loop_state, world_state);\n \n     if state_changed {\n         update_file_notifications_on_threadpool(\n@@ -703,6 +703,65 @@ fn on_diagnostic_task(task: DiagnosticTask, msg_sender: &Sender<Message>, state:\n     }\n }\n \n+fn send_startup_progress(\n+    sender: &Sender<Message>,\n+    loop_state: &mut LoopState,\n+    world_state: &WorldState,\n+) {\n+    if !world_state.feature_flags.get(\"notifications.workspace-loaded\") {\n+        return;\n+    }\n+    let total: usize = world_state.workspaces.iter().map(|it| it.n_packages()).sum();\n+    let progress = total - world_state.roots_to_scan;\n+    if loop_state.roots_scanned_progress == Some(progress) {\n+        return;\n+    }\n+    loop_state.roots_scanned_progress = Some(progress);\n+\n+    match (progress, loop_state.workspace_loaded) {\n+        (0, false) => {\n+            let work_done_progress_create = request_new::<req::WorkDoneProgressCreate>(\n+                loop_state.next_request_id(),\n+                WorkDoneProgressCreateParams {\n+                    token: req::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n+                },\n+            );\n+            sender.send(work_done_progress_create.into()).unwrap();\n+            send_startup_progress_notif(\n+                sender,\n+                WorkDoneProgress::Begin(WorkDoneProgressBegin {\n+                    title: \"rust-analyzer\".into(),\n+                    cancellable: None,\n+                    message: Some(format!(\"{}/{} packages\", progress, total)),\n+                    percentage: Some(100 as f64 * progress as f64 / total as f64),\n+                }),\n+            );\n+        }\n+        (_, false) => send_startup_progress_notif(\n+            sender,\n+            WorkDoneProgress::Report(WorkDoneProgressReport {\n+                cancellable: None,\n+                message: Some(format!(\"{}/{} packages\", progress, total)),\n+                percentage: Some(100 as f64 * progress as f64 / total as f64),\n+            }),\n+        ),\n+        (_, true) => send_startup_progress_notif(\n+            sender,\n+            WorkDoneProgress::End(WorkDoneProgressEnd {\n+                message: Some(format!(\"rust-analyzer loaded, {} packages\", progress)),\n+            }),\n+        ),\n+    }\n+}\n+\n+fn send_startup_progress_notif(sender: &Sender<Message>, work_done_progress: WorkDoneProgress) {\n+    let notif = notification_new::<req::Progress>(req::ProgressParams {\n+        token: req::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n+        value: req::ProgressParamsValue::WorkDone(work_done_progress),\n+    });\n+    sender.send(notif.into()).unwrap();\n+}\n+\n struct PoolDispatcher<'a> {\n     req: Option<Request>,\n     pool: &'a ThreadPool,"}]}