{"sha": "dff62c19cef2eb12fac3d15552a98886edcaba44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZjYyYzE5Y2VmMmViMTJmYWMzZDE1NTUyYTk4ODg2ZWRjYWJhNDQ=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-08-05T18:26:23Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-08-05T18:26:23Z"}, "message": "Handle RwLock reader count overflow", "tree": {"sha": "678129aaccaa9c90736e1f57d71d6fb547a51bbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/678129aaccaa9c90736e1f57d71d6fb547a51bbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dff62c19cef2eb12fac3d15552a98886edcaba44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dff62c19cef2eb12fac3d15552a98886edcaba44", "html_url": "https://github.com/rust-lang/rust/commit/dff62c19cef2eb12fac3d15552a98886edcaba44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dff62c19cef2eb12fac3d15552a98886edcaba44/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c02363852e6ce41cf2da1b43a32cb7780a9b067", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c02363852e6ce41cf2da1b43a32cb7780a9b067", "html_url": "https://github.com/rust-lang/rust/commit/4c02363852e6ce41cf2da1b43a32cb7780a9b067"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "08aeb5fb8ccdeae96abf30a8569e9824dfc34856", "filename": "src/libstd/sys/unix/rwlock.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dff62c19cef2eb12fac3d15552a98886edcaba44/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff62c19cef2eb12fac3d15552a98886edcaba44/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frwlock.rs?ref=dff62c19cef2eb12fac3d15552a98886edcaba44", "patch": "@@ -50,7 +50,9 @@ impl RWLock {\n         // the implementation allows recursive locking. The POSIX standard\n         // doesn't require recursivly locking a rwlock to deadlock, but we can't\n         // allow that because it could lead to aliasing issues.\n-        if r == libc::EDEADLK || *self.write_locked.get() {\n+        if r == libc::EAGAIN {\n+            panic!(\"rwlock maximum reader count exceeded\");\n+        } else if r == libc::EDEADLK || *self.write_locked.get() {\n             if r == 0 {\n                 self.raw_unlock();\n             }"}]}