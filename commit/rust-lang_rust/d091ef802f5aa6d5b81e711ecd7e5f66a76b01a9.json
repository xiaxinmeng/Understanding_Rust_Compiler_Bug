{"sha": "d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOTFlZjgwMmY1YWE2ZDViODFlNzExZWNkN2U1ZjY2YTc2YjAxYTk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-08-01T23:35:09Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-08-03T12:08:47Z"}, "message": "begin auditing the C++ types in RustWrapper", "tree": {"sha": "6dc5665c8e39d3503a0ef19bcea9f39c92738cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dc5665c8e39d3503a0ef19bcea9f39c92738cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "html_url": "https://github.com/rust-lang/rust/commit/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "696691e3c4f2b3aa02fbd1cc76dc2f7e8a401db8", "url": "https://api.github.com/repos/rust-lang/rust/commits/696691e3c4f2b3aa02fbd1cc76dc2f7e8a401db8", "html_url": "https://github.com/rust-lang/rust/commit/696691e3c4f2b3aa02fbd1cc76dc2f7e8a401db8"}], "stats": {"total": 1373, "additions": 771, "deletions": 602}, "files": [{"sha": "772c59b34dd02725897eca4d397c6d5bac309aa8", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -186,7 +186,7 @@ pub fn run_compiler_with_file_loader<'a, L>(args: &[String],\n     let sopts = config::build_session_options(&matches);\n \n     if sopts.debugging_opts.debug_llvm {\n-        unsafe { llvm::LLVMSetDebug(1); }\n+        unsafe { llvm::LLVMRustSetDebug(1); }\n     }\n \n     let descriptions = diagnostics_registry();"}, {"sha": "4938a0216ee434486ed5f3ce99dcc88b81d89c21", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 38, "deletions": 17, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -23,15 +23,21 @@ pub enum OptimizationDiagnosticKind {\n     OptimizationRemark,\n     OptimizationMissed,\n     OptimizationAnalysis,\n+    OptimizationAnalysisFPCommute,\n+    OptimizationAnalysisAliasing,\n     OptimizationFailure,\n+    OptimizationRemarkOther,\n }\n \n impl OptimizationDiagnosticKind {\n     pub fn describe(self) -> &'static str {\n         match self {\n-            OptimizationRemark => \"remark\",\n+            OptimizationRemark |\n+            OptimizationRemarkOther => \"remark\",\n             OptimizationMissed => \"missed\",\n             OptimizationAnalysis => \"analysis\",\n+            OptimizationAnalysisFPCommute => \"floating-point\",\n+            OptimizationAnalysisAliasing => \"aliasing\",\n             OptimizationFailure => \"failure\",\n         }\n     }\n@@ -58,11 +64,11 @@ impl OptimizationDiagnostic {\n             message: ptr::null_mut(),\n         };\n \n-        super::LLVMUnpackOptimizationDiagnostic(di,\n-                                                &mut opt.pass_name,\n-                                                &mut opt.function,\n-                                                &mut opt.debug_loc,\n-                                                &mut opt.message);\n+        super::LLVMRustUnpackOptimizationDiagnostic(di,\n+                                                    &mut opt.pass_name,\n+                                                    &mut opt.function,\n+                                                    &mut opt.debug_loc,\n+                                                    &mut opt.message);\n \n         opt\n     }\n@@ -84,10 +90,10 @@ impl InlineAsmDiagnostic {\n             instruction: ptr::null_mut(),\n         };\n \n-        super::LLVMUnpackInlineAsmDiagnostic(di,\n-                                             &mut opt.cookie,\n-                                             &mut opt.message,\n-                                             &mut opt.instruction);\n+        super::LLVMRustUnpackInlineAsmDiagnostic(di,\n+                                                 &mut opt.cookie,\n+                                                 &mut opt.message,\n+                                                 &mut opt.instruction);\n \n         opt\n     }\n@@ -103,24 +109,39 @@ pub enum Diagnostic {\n \n impl Diagnostic {\n     pub unsafe fn unpack(di: DiagnosticInfoRef) -> Diagnostic {\n-        let kind = super::LLVMGetDiagInfoKind(di);\n+        use super::DiagnosticKind as Dk;\n+        let kind = super::LLVMRustGetDiagInfoKind(di);\n \n         match kind {\n-            super::DK_InlineAsm => InlineAsm(InlineAsmDiagnostic::unpack(di)),\n+            Dk::InlineAsm => InlineAsm(InlineAsmDiagnostic::unpack(di)),\n \n-            super::DK_OptimizationRemark => {\n+            Dk::OptimizationRemark => {\n                 Optimization(OptimizationDiagnostic::unpack(OptimizationRemark, di))\n             }\n-\n-            super::DK_OptimizationRemarkMissed => {\n+            Dk::OptimizationRemarkOther => {\n+                Optimization(OptimizationDiagnostic::unpack(OptimizationRemarkOther, di))\n+            }\n+            Dk::OptimizationRemarkMissed => {\n                 Optimization(OptimizationDiagnostic::unpack(OptimizationMissed, di))\n             }\n \n-            super::DK_OptimizationRemarkAnalysis => {\n+            Dk::OptimizationRemarkAnalysis => {\n                 Optimization(OptimizationDiagnostic::unpack(OptimizationAnalysis, di))\n             }\n \n-            super::DK_OptimizationFailure => {\n+\n+            Dk::OptimizationRemarkAnalysisFPCommute => {\n+                Optimization(OptimizationDiagnostic::unpack(\n+                    OptimizationAnalysisFPCommute, di))\n+            }\n+\n+            Dk::OptimizationRemarkAnalysisAliasing => {\n+                Optimization(OptimizationDiagnostic::unpack(\n+                    OptimizationAnalysisAliasing, di))\n+            }\n+\n+\n+            Dk::OptimizationFailure => {\n                 Optimization(OptimizationDiagnostic::unpack(OptimizationFailure, di))\n             }\n "}, {"sha": "622e7923d8fb35a22928e55c56356a2f8bcf70fe", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 322, "deletions": 306, "changes": 628, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -38,8 +38,6 @@ pub use self::IntPredicate::*;\n pub use self::RealPredicate::*;\n pub use self::TypeKind::*;\n pub use self::AtomicBinOp::*;\n-pub use self::AtomicOrdering::*;\n-pub use self::SynchronizationScope::*;\n pub use self::MetadataType::*;\n pub use self::AsmDialect::*;\n pub use self::CodeGenOptSize::*;\n@@ -48,7 +46,6 @@ pub use self::CallConv::*;\n pub use self::Visibility::*;\n pub use self::DiagnosticSeverity::*;\n pub use self::Linkage::*;\n-pub use self::DLLStorageClassTypes::*;\n \n use std::str::FromStr;\n use std::ffi::{CString, CStr};\n@@ -132,19 +129,20 @@ pub enum Linkage {\n #[repr(C)]\n #[derive(Copy, Clone, Debug)]\n pub enum DiagnosticSeverity {\n-    Error,\n-    Warning,\n-    Remark,\n-    Note,\n+    Error = 0,\n+    Warning = 1,\n+    Remark = 2,\n+    Note = 3,\n }\n \n \n #[repr(C)]\n #[derive(Copy, Clone)]\n pub enum DLLStorageClassTypes {\n-    DefaultStorageClass = 0,\n-    DLLImportStorageClass = 1,\n-    DLLExportStorageClass = 2,\n+    Other,\n+    Default,\n+    DllImport,\n+    DllExport,\n }\n \n bitflags! {\n@@ -231,10 +229,10 @@ impl Attributes {\n \n     pub fn apply_llfn(&self, idx: usize, llfn: ValueRef) {\n         unsafe {\n-            LLVMAddFunctionAttribute(llfn, idx as c_uint, self.regular.bits());\n+            LLVMRustAddFunctionAttribute(llfn, idx as c_uint, self.regular.bits());\n             if self.dereferenceable_bytes != 0 {\n-                LLVMAddDereferenceableAttr(llfn, idx as c_uint,\n-                                           self.dereferenceable_bytes);\n+                LLVMRustAddDereferenceableAttr(llfn, idx as c_uint,\n+                                               self.dereferenceable_bytes);\n             }\n         }\n     }\n@@ -243,8 +241,8 @@ impl Attributes {\n         unsafe {\n             LLVMRustAddCallSiteAttribute(callsite, idx as c_uint, self.regular.bits());\n             if self.dereferenceable_bytes != 0 {\n-                LLVMAddDereferenceableCallSiteAttr(callsite, idx as c_uint,\n-                                                   self.dereferenceable_bytes);\n+                LLVMRustAddDereferenceableCallSiteAttr(callsite, idx as c_uint,\n+                                                       self.dereferenceable_bytes);\n             }\n         }\n     }\n@@ -348,8 +346,9 @@ pub enum AtomicOrdering {\n #[repr(C)]\n #[derive(Copy, Clone)]\n pub enum SynchronizationScope {\n-    SingleThread = 0,\n-    CrossThread = 1\n+    Other,\n+    SingleThread,\n+    CrossThread,\n }\n \n #[repr(C)]\n@@ -425,14 +424,18 @@ pub enum CodeModel {\n #[repr(C)]\n #[derive(Copy, Clone)]\n pub enum DiagnosticKind {\n-    DK_InlineAsm = 0,\n-    DK_StackSize,\n-    DK_DebugMetadataVersion,\n-    DK_SampleProfile,\n-    DK_OptimizationRemark,\n-    DK_OptimizationRemarkMissed,\n-    DK_OptimizationRemarkAnalysis,\n-    DK_OptimizationFailure,\n+    Other,\n+    InlineAsm,\n+    StackSize,\n+    DebugMetadataVersion,\n+    SampleProfile,\n+    OptimizationRemark,\n+    OptimizationRemarkMissed,\n+    OptimizationRemarkAnalysis,\n+    OptimizationRemarkAnalysisFPCommute,\n+    OptimizationRemarkAnalysisAliasing,\n+    OptimizationRemarkOther,\n+    OptimizationFailure,\n }\n \n #[repr(C)]\n@@ -705,7 +708,7 @@ extern {\n     /* Operations on other types */\n     pub fn LLVMVoidTypeInContext(C: ContextRef) -> TypeRef;\n     pub fn LLVMLabelTypeInContext(C: ContextRef) -> TypeRef;\n-    pub fn LLVMMetadataTypeInContext(C: ContextRef) -> TypeRef;\n+    pub fn LLVMRustMetadataTypeInContext(C: ContextRef) -> TypeRef;\n \n     /* Operations on all values */\n     pub fn LLVMTypeOf(Val: ValueRef) -> TypeRef;\n@@ -957,8 +960,13 @@ extern {\n                                        Name: *const c_char,\n                                        AddressSpace: c_uint)\n                                        -> ValueRef;\n-    pub fn LLVMGetNamedGlobal(M: ModuleRef, Name: *const c_char) -> ValueRef;\n-    pub fn LLVMGetOrInsertGlobal(M: ModuleRef, Name: *const c_char, T: TypeRef) -> ValueRef;\n+    pub fn LLVMGetNamedGlobal(M: ModuleRef,\n+                              Name: *const c_char)\n+                              -> ValueRef;\n+    pub fn LLVMRustGetOrInsertGlobal(M: ModuleRef,\n+                                     Name: *const c_char,\n+                                     T: TypeRef)\n+                                     -> ValueRef;\n     pub fn LLVMGetFirstGlobal(M: ModuleRef) -> ValueRef;\n     pub fn LLVMGetLastGlobal(M: ModuleRef) -> ValueRef;\n     pub fn LLVMGetNextGlobal(GlobalVar: ValueRef) -> ValueRef;\n@@ -971,7 +979,7 @@ extern {\n     pub fn LLVMSetThreadLocal(GlobalVar: ValueRef, IsThreadLocal: Bool);\n     pub fn LLVMIsGlobalConstant(GlobalVar: ValueRef) -> Bool;\n     pub fn LLVMSetGlobalConstant(GlobalVar: ValueRef, IsConstant: Bool);\n-    pub fn LLVMGetNamedValue(M: ModuleRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMRustGetNamedValue(M: ModuleRef, Name: *const c_char) -> ValueRef;\n \n     /* Operations on aliases */\n     pub fn LLVMAddAlias(M: ModuleRef,\n@@ -991,23 +999,27 @@ extern {\n     pub fn LLVMGetNextFunction(Fn: ValueRef) -> ValueRef;\n     pub fn LLVMGetPreviousFunction(Fn: ValueRef) -> ValueRef;\n     pub fn LLVMDeleteFunction(Fn: ValueRef);\n-    pub fn LLVMGetOrInsertFunction(M: ModuleRef,\n-                                   Name: *const c_char,\n-                                   FunctionTy: TypeRef)\n-                                   -> ValueRef;\n+    pub fn LLVMRustGetOrInsertFunction(M: ModuleRef,\n+                                       Name: *const c_char,\n+                                       FunctionTy: TypeRef)\n+                                       -> ValueRef;\n     pub fn LLVMGetIntrinsicID(Fn: ValueRef) -> c_uint;\n     pub fn LLVMGetFunctionCallConv(Fn: ValueRef) -> c_uint;\n     pub fn LLVMSetFunctionCallConv(Fn: ValueRef, CC: c_uint);\n     pub fn LLVMGetGC(Fn: ValueRef) -> *const c_char;\n     pub fn LLVMSetGC(Fn: ValueRef, Name: *const c_char);\n-    pub fn LLVMAddDereferenceableAttr(Fn: ValueRef, index: c_uint, bytes: uint64_t);\n-    pub fn LLVMAddFunctionAttribute(Fn: ValueRef, index: c_uint, PA: uint64_t);\n-    pub fn LLVMAddFunctionAttrString(Fn: ValueRef, index: c_uint, Name: *const c_char);\n-    pub fn LLVMAddFunctionAttrStringValue(Fn: ValueRef, index: c_uint,\n-                                          Name: *const c_char,\n-                                          Value: *const c_char);\n-    pub fn LLVMRemoveFunctionAttributes(Fn: ValueRef, index: c_uint, attr: uint64_t);\n-    pub fn LLVMRemoveFunctionAttrString(Fn: ValueRef, index: c_uint, Name: *const c_char);\n+    pub fn LLVMRustAddDereferenceableAttr(Fn: ValueRef, index: c_uint, bytes: uint64_t);\n+    pub fn LLVMRustAddFunctionAttribute(Fn: ValueRef, index: c_uint, PA: uint64_t);\n+    pub fn LLVMRustAddFunctionAttrString(Fn: ValueRef, index: c_uint, Name: *const c_char);\n+    pub fn LLVMRustAddFunctionAttrStringValue(Fn: ValueRef, index: c_uint,\n+                                              Name: *const c_char,\n+                                              Value: *const c_char);\n+    pub fn LLVMRustRemoveFunctionAttributes(Fn: ValueRef,\n+                                            index: c_uint,\n+                                            attr: uint64_t);\n+    pub fn LLVMRustRemoveFunctionAttrString(Fn: ValueRef,\n+                                            index: c_uint,\n+                                            Name: *const c_char);\n     pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_uint;\n     pub fn LLVMRemoveFunctionAttr(Fn: ValueRef, val: c_uint);\n \n@@ -1077,9 +1089,9 @@ extern {\n     pub fn LLVMRustAddCallSiteAttribute(Instr: ValueRef,\n                                     index: c_uint,\n                                     Val: uint64_t);\n-    pub fn LLVMAddDereferenceableCallSiteAttr(Instr: ValueRef,\n-                                              index: c_uint,\n-                                              bytes: uint64_t);\n+    pub fn LLVMRustAddDereferenceableCallSiteAttr(Instr: ValueRef,\n+                                                  index: c_uint,\n+                                                  bytes: uint64_t);\n \n     /* Operations on call instructions (only) */\n     pub fn LLVMIsTailCall(CallInst: ValueRef) -> Bool;\n@@ -1556,28 +1568,29 @@ extern {\n                             -> ValueRef;\n \n     /* Atomic Operations */\n-    pub fn LLVMBuildAtomicLoad(B: BuilderRef,\n-                               PointerVal: ValueRef,\n-                               Name: *const c_char,\n-                               Order: AtomicOrdering,\n-                               Alignment: c_uint)\n-                               -> ValueRef;\n+    pub fn LLVMRustBuildAtomicLoad(B: BuilderRef,\n+                                   PointerVal: ValueRef,\n+                                   Name: *const c_char,\n+                                   Order: AtomicOrdering,\n+                                   Alignment: c_uint)\n+                                   -> ValueRef;\n \n-    pub fn LLVMBuildAtomicStore(B: BuilderRef,\n-                                Val: ValueRef,\n-                                Ptr: ValueRef,\n-                                Order: AtomicOrdering,\n-                                Alignment: c_uint)\n-                                -> ValueRef;\n+    pub fn LLVMRustBuildAtomicStore(B: BuilderRef,\n+                                    Val: ValueRef,\n+                                    Ptr: ValueRef,\n+                                    Order: AtomicOrdering,\n+                                    Alignment: c_uint)\n+                                    -> ValueRef;\n \n     pub fn LLVMRustBuildAtomicCmpXchg(B: BuilderRef,\n-                                  LHS: ValueRef,\n-                                  CMP: ValueRef,\n-                                  RHS: ValueRef,\n-                                  Order: AtomicOrdering,\n-                                  FailureOrder: AtomicOrdering,\n-                                  Weak: Bool)\n-                                  -> ValueRef;\n+                                      LHS: ValueRef,\n+                                      CMP: ValueRef,\n+                                      RHS: ValueRef,\n+                                      Order: AtomicOrdering,\n+                                      FailureOrder: AtomicOrdering,\n+                                      Weak: Bool)\n+                                      -> ValueRef;\n+\n     pub fn LLVMBuildAtomicRMW(B: BuilderRef,\n                               Op: AtomicBinOp,\n                               LHS: ValueRef,\n@@ -1586,9 +1599,9 @@ extern {\n                               SingleThreaded: Bool)\n                               -> ValueRef;\n \n-    pub fn LLVMBuildAtomicFence(B: BuilderRef,\n-                                Order: AtomicOrdering,\n-                                Scope: SynchronizationScope);\n+    pub fn LLVMRustBuildAtomicFence(B: BuilderRef,\n+                                    Order: AtomicOrdering,\n+                                    Scope: SynchronizationScope);\n \n \n     /* Selected entries from the downcasts. */\n@@ -1791,248 +1804,248 @@ extern {\n                                 -> ValueRef;\n \n     /// Enables LLVM debug output.\n-    pub fn LLVMSetDebug(Enabled: c_int);\n+    pub fn LLVMRustSetDebug(Enabled: c_int);\n \n     /// Prepares inline assembly.\n-    pub fn LLVMInlineAsm(Ty: TypeRef,\n-                         AsmString: *const c_char,\n-                         Constraints: *const c_char,\n-                         SideEffects: Bool,\n-                         AlignStack: Bool,\n-                         Dialect: c_uint)\n-                         -> ValueRef;\n+    pub fn LLVMRustInlineAsm(Ty: TypeRef,\n+                             AsmString: *const c_char,\n+                             Constraints: *const c_char,\n+                             SideEffects: Bool,\n+                             AlignStack: Bool,\n+                             Dialect: c_uint)\n+                             -> ValueRef;\n \n     pub fn LLVMRustDebugMetadataVersion() -> u32;\n-    pub fn LLVMVersionMajor() -> u32;\n-    pub fn LLVMVersionMinor() -> u32;\n+    pub fn LLVMRustVersionMajor() -> u32;\n+    pub fn LLVMRustVersionMinor() -> u32;\n \n     pub fn LLVMRustAddModuleFlag(M: ModuleRef,\n                                  name: *const c_char,\n                                  value: u32);\n \n-    pub fn LLVMDIBuilderCreate(M: ModuleRef) -> DIBuilderRef;\n-\n-    pub fn LLVMDIBuilderDispose(Builder: DIBuilderRef);\n-\n-    pub fn LLVMDIBuilderFinalize(Builder: DIBuilderRef);\n-\n-    pub fn LLVMDIBuilderCreateCompileUnit(Builder: DIBuilderRef,\n-                                          Lang: c_uint,\n-                                          File: *const c_char,\n-                                          Dir: *const c_char,\n-                                          Producer: *const c_char,\n-                                          isOptimized: bool,\n-                                          Flags: *const c_char,\n-                                          RuntimeVer: c_uint,\n-                                          SplitName: *const c_char)\n-                                          -> DIDescriptor;\n-\n-    pub fn LLVMDIBuilderCreateFile(Builder: DIBuilderRef,\n-                                   Filename: *const c_char,\n-                                   Directory: *const c_char)\n-                                   -> DIFile;\n-\n-    pub fn LLVMDIBuilderCreateSubroutineType(Builder: DIBuilderRef,\n-                                             File: DIFile,\n-                                             ParameterTypes: DIArray)\n-                                             -> DICompositeType;\n+    pub fn LLVMRustDIBuilderCreate(M: ModuleRef) -> DIBuilderRef;\n+\n+    pub fn LLVMRustDIBuilderDispose(Builder: DIBuilderRef);\n+\n+    pub fn LLVMRustDIBuilderFinalize(Builder: DIBuilderRef);\n+\n+    pub fn LLVMRustDIBuilderCreateCompileUnit(Builder: DIBuilderRef,\n+                                              Lang: c_uint,\n+                                              File: *const c_char,\n+                                              Dir: *const c_char,\n+                                              Producer: *const c_char,\n+                                              isOptimized: bool,\n+                                              Flags: *const c_char,\n+                                              RuntimeVer: c_uint,\n+                                              SplitName: *const c_char)\n+                                              -> DIDescriptor;\n+\n+    pub fn LLVMRustDIBuilderCreateFile(Builder: DIBuilderRef,\n+                                       Filename: *const c_char,\n+                                       Directory: *const c_char)\n+                                       -> DIFile;\n+\n+    pub fn LLVMRustDIBuilderCreateSubroutineType(Builder: DIBuilderRef,\n+                                                 File: DIFile,\n+                                                 ParameterTypes: DIArray)\n+                                                 -> DICompositeType;\n+\n+    pub fn LLVMRustDIBuilderCreateFunction(Builder: DIBuilderRef,\n+                                           Scope: DIDescriptor,\n+                                           Name: *const c_char,\n+                                           LinkageName: *const c_char,\n+                                           File: DIFile,\n+                                           LineNo: c_uint,\n+                                           Ty: DIType,\n+                                           isLocalToUnit: bool,\n+                                           isDefinition: bool,\n+                                           ScopeLine: c_uint,\n+                                           Flags: c_uint,\n+                                           isOptimized: bool,\n+                                           Fn: ValueRef,\n+                                           TParam: DIArray,\n+                                           Decl: DIDescriptor)\n+                                           -> DISubprogram;\n+\n+    pub fn LLVMRustDIBuilderCreateBasicType(Builder: DIBuilderRef,\n+                                            Name: *const c_char,\n+                                            SizeInBits: u64,\n+                                            AlignInBits: u64,\n+                                            Encoding: c_uint)\n+                                            -> DIBasicType;\n \n-    pub fn LLVMDIBuilderCreateFunction(Builder: DIBuilderRef,\n-                                       Scope: DIDescriptor,\n-                                       Name: *const c_char,\n-                                       LinkageName: *const c_char,\n-                                       File: DIFile,\n-                                       LineNo: c_uint,\n-                                       Ty: DIType,\n-                                       isLocalToUnit: bool,\n-                                       isDefinition: bool,\n-                                       ScopeLine: c_uint,\n-                                       Flags: c_uint,\n-                                       isOptimized: bool,\n-                                       Fn: ValueRef,\n-                                       TParam: DIArray,\n-                                       Decl: DIDescriptor)\n-                                       -> DISubprogram;\n-\n-    pub fn LLVMDIBuilderCreateBasicType(Builder: DIBuilderRef,\n-                                        Name: *const c_char,\n-                                        SizeInBits: c_ulonglong,\n-                                        AlignInBits: c_ulonglong,\n-                                        Encoding: c_uint)\n-                                        -> DIBasicType;\n-\n-    pub fn LLVMDIBuilderCreatePointerType(Builder: DIBuilderRef,\n+    pub fn LLVMRustDIBuilderCreatePointerType(Builder: DIBuilderRef,\n                                           PointeeTy: DIType,\n-                                          SizeInBits: c_ulonglong,\n-                                          AlignInBits: c_ulonglong,\n+                                          SizeInBits: u64,\n+                                          AlignInBits: u64,\n                                           Name: *const c_char)\n                                           -> DIDerivedType;\n \n-    pub fn LLVMDIBuilderCreateStructType(Builder: DIBuilderRef,\n-                                         Scope: DIDescriptor,\n-                                         Name: *const c_char,\n-                                         File: DIFile,\n-                                         LineNumber: c_uint,\n-                                         SizeInBits: c_ulonglong,\n-                                         AlignInBits: c_ulonglong,\n-                                         Flags: c_uint,\n-                                         DerivedFrom: DIType,\n-                                         Elements: DIArray,\n-                                         RunTimeLang: c_uint,\n-                                         VTableHolder: DIType,\n-                                         UniqueId: *const c_char)\n-                                         -> DICompositeType;\n-\n-    pub fn LLVMDIBuilderCreateMemberType(Builder: DIBuilderRef,\n-                                         Scope: DIDescriptor,\n-                                         Name: *const c_char,\n-                                         File: DIFile,\n-                                         LineNo: c_uint,\n-                                         SizeInBits: c_ulonglong,\n-                                         AlignInBits: c_ulonglong,\n-                                         OffsetInBits: c_ulonglong,\n-                                         Flags: c_uint,\n-                                         Ty: DIType)\n-                                         -> DIDerivedType;\n-\n-    pub fn LLVMDIBuilderCreateLexicalBlock(Builder: DIBuilderRef,\n-                                           Scope: DIScope,\n-                                           File: DIFile,\n-                                           Line: c_uint,\n-                                           Col: c_uint)\n-                                           -> DILexicalBlock;\n+    pub fn LLVMRustDIBuilderCreateStructType(Builder: DIBuilderRef,\n+                                             Scope: DIDescriptor,\n+                                             Name: *const c_char,\n+                                             File: DIFile,\n+                                             LineNumber: c_uint,\n+                                             SizeInBits: u64,\n+                                             AlignInBits: u64,\n+                                             Flags: c_uint,\n+                                             DerivedFrom: DIType,\n+                                             Elements: DIArray,\n+                                             RunTimeLang: c_uint,\n+                                             VTableHolder: DIType,\n+                                             UniqueId: *const c_char)\n+                                             -> DICompositeType;\n \n-    pub fn LLVMDIBuilderCreateStaticVariable(Builder: DIBuilderRef,\n-                                             Context: DIScope,\n+    pub fn LLVMRustDIBuilderCreateMemberType(Builder: DIBuilderRef,\n+                                             Scope: DIDescriptor,\n                                              Name: *const c_char,\n-                                             LinkageName: *const c_char,\n                                              File: DIFile,\n                                              LineNo: c_uint,\n+                                             SizeInBits: u64,\n+                                             AlignInBits: u64,\n+                                             OffsetInBits: u64,\n+                                             Flags: c_uint,\n+                                             Ty: DIType)\n+                                             -> DIDerivedType;\n+\n+    pub fn LLVMRustDIBuilderCreateLexicalBlock(Builder: DIBuilderRef,\n+                                               Scope: DIScope,\n+                                               File: DIFile,\n+                                               Line: c_uint,\n+                                               Col: c_uint)\n+                                               -> DILexicalBlock;\n+\n+    pub fn LLVMRustDIBuilderCreateStaticVariable(Builder: DIBuilderRef,\n+                                                 Context: DIScope,\n+                                                 Name: *const c_char,\n+                                                 LinkageName: *const c_char,\n+                                                 File: DIFile,\n+                                                 LineNo: c_uint,\n+                                                 Ty: DIType,\n+                                                 isLocalToUnit: bool,\n+                                                 Val: ValueRef,\n+                                                 Decl: DIDescriptor)\n+                                                 -> DIGlobalVariable;\n+\n+    pub fn LLVMRustDIBuilderCreateVariable(Builder: DIBuilderRef,\n+                                           Tag: c_uint,\n+                                           Scope: DIDescriptor,\n+                                           Name: *const c_char,\n+                                           File: DIFile,\n+                                           LineNo: c_uint,\n+                                           Ty: DIType,\n+                                           AlwaysPreserve: bool,\n+                                           Flags: c_uint,\n+                                           AddrOps: *const i64,\n+                                           AddrOpsCount: c_uint,\n+                                           ArgNo: c_uint)\n+                                           -> DIVariable;\n+\n+    pub fn LLVMRustDIBuilderCreateArrayType(Builder: DIBuilderRef,\n+                                            Size: u64,\n+                                            AlignInBits: u64,\n+                                            Ty: DIType,\n+                                            Subscripts: DIArray)\n+                                            -> DIType;\n+\n+    pub fn LLVMRustDIBuilderCreateVectorType(Builder: DIBuilderRef,\n+                                             Size: u64,\n+                                             AlignInBits: u64,\n                                              Ty: DIType,\n-                                             isLocalToUnit: bool,\n-                                             Val: ValueRef,\n-                                             Decl: DIDescriptor)\n-                                             -> DIGlobalVariable;\n-\n-    pub fn LLVMDIBuilderCreateVariable(Builder: DIBuilderRef,\n-                                            Tag: c_uint,\n-                                            Scope: DIDescriptor,\n+                                             Subscripts: DIArray)\n+                                             -> DIType;\n+\n+    pub fn LLVMRustDIBuilderGetOrCreateSubrange(Builder: DIBuilderRef,\n+                                                Lo: i64,\n+                                                Count: i64)\n+                                                -> DISubrange;\n+\n+    pub fn LLVMRustDIBuilderGetOrCreateArray(Builder: DIBuilderRef,\n+                                             Ptr: *const DIDescriptor,\n+                                             Count: c_uint)\n+                                             -> DIArray;\n+\n+    pub fn LLVMRustDIBuilderInsertDeclareAtEnd(Builder: DIBuilderRef,\n+                                               Val: ValueRef,\n+                                               VarInfo: DIVariable,\n+                                               AddrOps: *const i64,\n+                                               AddrOpsCount: c_uint,\n+                                               DL: ValueRef,\n+                                               InsertAtEnd: BasicBlockRef)\n+                                               -> ValueRef;\n+\n+    pub fn LLVMRustDIBuilderInsertDeclareBefore(Builder: DIBuilderRef,\n+                                                Val: ValueRef,\n+                                                VarInfo: DIVariable,\n+                                                AddrOps: *const i64,\n+                                                AddrOpsCount: c_uint,\n+                                                DL: ValueRef,\n+                                                InsertBefore: ValueRef)\n+                                                -> ValueRef;\n+\n+    pub fn LLVMRustDIBuilderCreateEnumerator(Builder: DIBuilderRef,\n+                                             Name: *const c_char,\n+                                             Val: u64)\n+                                             -> DIEnumerator;\n+\n+    pub fn LLVMRustDIBuilderCreateEnumerationType(Builder: DIBuilderRef,\n+                                                  Scope: DIScope,\n+                                                  Name: *const c_char,\n+                                                  File: DIFile,\n+                                                  LineNumber: c_uint,\n+                                                  SizeInBits: u64,\n+                                                  AlignInBits: u64,\n+                                                  Elements: DIArray,\n+                                                  ClassType: DIType)\n+                                                  -> DIType;\n+\n+    pub fn LLVMRustDIBuilderCreateUnionType(Builder: DIBuilderRef,\n+                                            Scope: DIScope,\n                                             Name: *const c_char,\n                                             File: DIFile,\n-                                            LineNo: c_uint,\n-                                            Ty: DIType,\n-                                            AlwaysPreserve: bool,\n+                                            LineNumber: c_uint,\n+                                            SizeInBits: u64,\n+                                            AlignInBits: u64,\n                                             Flags: c_uint,\n-                                            AddrOps: *const i64,\n-                                            AddrOpsCount: c_uint,\n-                                            ArgNo: c_uint)\n-                                            -> DIVariable;\n-\n-    pub fn LLVMDIBuilderCreateArrayType(Builder: DIBuilderRef,\n-                                        Size: c_ulonglong,\n-                                        AlignInBits: c_ulonglong,\n-                                        Ty: DIType,\n-                                        Subscripts: DIArray)\n-                                        -> DIType;\n-\n-    pub fn LLVMDIBuilderCreateVectorType(Builder: DIBuilderRef,\n-                                         Size: c_ulonglong,\n-                                         AlignInBits: c_ulonglong,\n-                                         Ty: DIType,\n-                                         Subscripts: DIArray)\n-                                         -> DIType;\n-\n-    pub fn LLVMDIBuilderGetOrCreateSubrange(Builder: DIBuilderRef,\n-                                            Lo: c_longlong,\n-                                            Count: c_longlong)\n-                                            -> DISubrange;\n-\n-    pub fn LLVMDIBuilderGetOrCreateArray(Builder: DIBuilderRef,\n-                                         Ptr: *const DIDescriptor,\n-                                         Count: c_uint)\n-                                         -> DIArray;\n-\n-    pub fn LLVMDIBuilderInsertDeclareAtEnd(Builder: DIBuilderRef,\n-                                           Val: ValueRef,\n-                                           VarInfo: DIVariable,\n-                                           AddrOps: *const i64,\n-                                           AddrOpsCount: c_uint,\n-                                           DL: ValueRef,\n-                                           InsertAtEnd: BasicBlockRef)\n-                                           -> ValueRef;\n-\n-    pub fn LLVMDIBuilderInsertDeclareBefore(Builder: DIBuilderRef,\n-                                            Val: ValueRef,\n-                                            VarInfo: DIVariable,\n-                                            AddrOps: *const i64,\n-                                            AddrOpsCount: c_uint,\n-                                            DL: ValueRef,\n-                                            InsertBefore: ValueRef)\n-                                            -> ValueRef;\n-\n-    pub fn LLVMDIBuilderCreateEnumerator(Builder: DIBuilderRef,\n-                                         Name: *const c_char,\n-                                         Val: c_ulonglong)\n-                                         -> DIEnumerator;\n-\n-    pub fn LLVMDIBuilderCreateEnumerationType(Builder: DIBuilderRef,\n-                                              Scope: DIScope,\n-                                              Name: *const c_char,\n-                                              File: DIFile,\n-                                              LineNumber: c_uint,\n-                                              SizeInBits: c_ulonglong,\n-                                              AlignInBits: c_ulonglong,\n-                                              Elements: DIArray,\n-                                              ClassType: DIType)\n-                                              -> DIType;\n-\n-    pub fn LLVMDIBuilderCreateUnionType(Builder: DIBuilderRef,\n-                                        Scope: DIScope,\n-                                        Name: *const c_char,\n-                                        File: DIFile,\n-                                        LineNumber: c_uint,\n-                                        SizeInBits: c_ulonglong,\n-                                        AlignInBits: c_ulonglong,\n-                                        Flags: c_uint,\n-                                        Elements: DIArray,\n-                                        RunTimeLang: c_uint,\n-                                        UniqueId: *const c_char)\n-                                        -> DIType;\n+                                            Elements: DIArray,\n+                                            RunTimeLang: c_uint,\n+                                            UniqueId: *const c_char)\n+                                            -> DIType;\n \n     pub fn LLVMSetUnnamedAddr(GlobalVar: ValueRef, UnnamedAddr: Bool);\n \n-    pub fn LLVMDIBuilderCreateTemplateTypeParameter(Builder: DIBuilderRef,\n-                                                    Scope: DIScope,\n-                                                    Name: *const c_char,\n-                                                    Ty: DIType,\n-                                                    File: DIFile,\n-                                                    LineNo: c_uint,\n-                                                    ColumnNo: c_uint)\n-                                                    -> DITemplateTypeParameter;\n-\n-    pub fn LLVMDIBuilderCreateOpDeref() -> i64;\n-\n-    pub fn LLVMDIBuilderCreateOpPlus() -> i64;\n-\n-    pub fn LLVMDIBuilderCreateNameSpace(Builder: DIBuilderRef,\n-                                        Scope: DIScope,\n-                                        Name: *const c_char,\n-                                        File: DIFile,\n-                                        LineNo: c_uint)\n-                                        -> DINameSpace;\n-\n-    pub fn LLVMDIBuilderCreateDebugLocation(Context: ContextRef,\n-                                            Line: c_uint,\n-                                            Column: c_uint,\n+    pub fn LLVMRustDIBuilderCreateTemplateTypeParameter(Builder: DIBuilderRef,\n+                                                        Scope: DIScope,\n+                                                        Name: *const c_char,\n+                                                        Ty: DIType,\n+                                                        File: DIFile,\n+                                                        LineNo: c_uint,\n+                                                        ColumnNo: c_uint)\n+                                                        -> DITemplateTypeParameter;\n+\n+\n+    pub fn LLVMRustDIBuilderCreateNameSpace(Builder: DIBuilderRef,\n                                             Scope: DIScope,\n-                                            InlinedAt: MetadataRef)\n-                                            -> ValueRef;\n+                                            Name: *const c_char,\n+                                            File: DIFile,\n+                                            LineNo: c_uint)\n+                                            -> DINameSpace;\n+    pub fn LLVMRustDICompositeTypeSetTypeArray(Builder: DIBuilderRef,\n+                                               CompositeType: DIType,\n+                                               TypeArray: DIArray);\n+\n+\n+    pub fn LLVMRustDIBuilderCreateDebugLocation(Context: ContextRef,\n+                                                Line: c_uint,\n+                                                Column: c_uint,\n+                                                Scope: DIScope,\n+                                                InlinedAt: MetadataRef)\n+                                                -> ValueRef;\n+    pub fn LLVMRustDIBuilderCreateOpDeref() -> i64;\n+    pub fn LLVMRustDIBuilderCreateOpPlus() -> i64;\n \n-    pub fn LLVMDICompositeTypeSetTypeArray(Builder: DIBuilderRef,\n-                                           CompositeType: DIType,\n-                                           TypeArray: DIArray);\n-    pub fn LLVMWriteTypeToString(Type: TypeRef, s: RustStringRef);\n-    pub fn LLVMWriteValueToString(value_ref: ValueRef, s: RustStringRef);\n+    pub fn LLVMRustWriteTypeToString(Type: TypeRef, s: RustStringRef);\n+    pub fn LLVMRustWriteValueToString(value_ref: ValueRef, s: RustStringRef);\n \n     pub fn LLVMIsAArgument(value_ref: ValueRef) -> ValueRef;\n \n@@ -2108,35 +2121,38 @@ extern {\n                                       C: DLLStorageClassTypes);\n \n     pub fn LLVMRustGetSectionName(SI: SectionIteratorRef,\n-                                  data: *mut *const c_char) -> c_int;\n+                                  data: *mut *const c_char) -> size_t;\n \n-    pub fn LLVMWriteTwineToString(T: TwineRef, s: RustStringRef);\n+    pub fn LLVMRustWriteTwineToString(T: TwineRef, s: RustStringRef);\n \n     pub fn LLVMContextSetDiagnosticHandler(C: ContextRef,\n                                            Handler: DiagnosticHandler,\n                                            DiagnosticContext: *mut c_void);\n \n-    pub fn LLVMUnpackOptimizationDiagnostic(DI: DiagnosticInfoRef,\n-                                            pass_name_out: *mut *const c_char,\n-                                            function_out: *mut ValueRef,\n-                                            debugloc_out: *mut DebugLocRef,\n-                                            message_out: *mut TwineRef);\n-    pub fn LLVMUnpackInlineAsmDiagnostic(DI: DiagnosticInfoRef,\n-                                            cookie_out: *mut c_uint,\n-                                            message_out: *mut TwineRef,\n-                                            instruction_out: *mut ValueRef);\n-\n-    pub fn LLVMWriteDiagnosticInfoToString(DI: DiagnosticInfoRef, s: RustStringRef);\n+    pub fn LLVMRustUnpackOptimizationDiagnostic(DI: DiagnosticInfoRef,\n+                                                pass_name_out: *mut *const c_char,\n+                                                function_out: *mut ValueRef,\n+                                                debugloc_out: *mut DebugLocRef,\n+                                                message_out: *mut TwineRef);\n+    pub fn LLVMRustUnpackInlineAsmDiagnostic(DI: DiagnosticInfoRef,\n+                                             cookie_out: *mut c_uint,\n+                                             message_out: *mut TwineRef,\n+                                             instruction_out: *mut ValueRef);\n+\n+    pub fn LLVMRustWriteDiagnosticInfoToString(DI: DiagnosticInfoRef,\n+                                               s: RustStringRef);\n     pub fn LLVMGetDiagInfoSeverity(DI: DiagnosticInfoRef) -> DiagnosticSeverity;\n-    pub fn LLVMGetDiagInfoKind(DI: DiagnosticInfoRef) -> DiagnosticKind;\n+    pub fn LLVMRustGetDiagInfoKind(DI: DiagnosticInfoRef) -> DiagnosticKind;\n \n-    pub fn LLVMWriteDebugLocToString(C: ContextRef, DL: DebugLocRef, s: RustStringRef);\n+    pub fn LLVMRustWriteDebugLocToString(C: ContextRef,\n+                                         DL: DebugLocRef,\n+                                         s: RustStringRef);\n \n-    pub fn LLVMSetInlineAsmDiagnosticHandler(C: ContextRef,\n-                                             H: InlineAsmDiagHandler,\n-                                             CX: *mut c_void);\n+    pub fn LLVMRustSetInlineAsmDiagnosticHandler(C: ContextRef,\n+                                                 H: InlineAsmDiagHandler,\n+                                                 CX: *mut c_void);\n \n-    pub fn LLVMWriteSMDiagnosticToString(d: SMDiagnosticRef, s: RustStringRef);\n+    pub fn LLVMRustWriteSMDiagnosticToString(d: SMDiagnosticRef, s: RustStringRef);\n \n     pub fn LLVMRustWriteArchive(Dst: *const c_char,\n                                 NumMembers: size_t,\n@@ -2237,15 +2253,15 @@ pub fn ConstFCmp(pred: RealPredicate, v1: ValueRef, v2: ValueRef) -> ValueRef {\n \n pub fn SetFunctionAttribute(fn_: ValueRef, attr: Attribute) {\n     unsafe {\n-        LLVMAddFunctionAttribute(fn_, FunctionIndex as c_uint,\n-                                 attr.bits() as uint64_t)\n+        LLVMRustAddFunctionAttribute(fn_, FunctionIndex as c_uint,\n+                                     attr.bits() as uint64_t)\n     }\n }\n \n pub fn RemoveFunctionAttributes(fn_: ValueRef, attr: Attribute) {\n     unsafe {\n-        LLVMRemoveFunctionAttributes(fn_, FunctionIndex as c_uint,\n-                                           attr.bits() as uint64_t)\n+        LLVMRustRemoveFunctionAttributes(fn_, FunctionIndex as c_uint,\n+                                         attr.bits() as uint64_t)\n     }\n }\n \n@@ -2366,12 +2382,12 @@ pub fn build_string<F>(f: F) -> Option<String> where F: FnOnce(RustStringRef){\n }\n \n pub unsafe fn twine_to_string(tr: TwineRef) -> String {\n-    build_string(|s| LLVMWriteTwineToString(tr, s))\n+    build_string(|s| LLVMRustWriteTwineToString(tr, s))\n         .expect(\"got a non-UTF8 Twine from LLVM\")\n }\n \n pub unsafe fn debug_loc_to_string(c: ContextRef, tr: DebugLocRef) -> String {\n-    build_string(|s| LLVMWriteDebugLocToString(c, tr, s))\n+    build_string(|s| LLVMRustWriteDebugLocToString(c, tr, s))\n         .expect(\"got a non-UTF8 DebugLoc from LLVM\")\n }\n "}, {"sha": "9c121ae9bfc6ad8f994edd7ef7dc12b898461527", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -80,10 +80,10 @@ pub fn set_frame_pointer_elimination(ccx: &CrateContext, llfn: ValueRef) {\n         unsafe {\n             let attr = \"no-frame-pointer-elim\\0\".as_ptr() as *const _;\n             let val = \"true\\0\".as_ptr() as *const _;\n-            llvm::LLVMAddFunctionAttrStringValue(llfn,\n-                                                 llvm::FunctionIndex as c_uint,\n-                                                 attr,\n-                                                 val);\n+            llvm::LLVMRustAddFunctionAttrStringValue(llfn,\n+                                                     llvm::FunctionIndex as c_uint,\n+                                                     attr,\n+                                                     val);\n         }\n     }\n }"}, {"sha": "8ce2fa762f9e2606103399f371c6db5afd9a2329", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -365,7 +365,7 @@ unsafe extern \"C\" fn inline_asm_handler(diag: SMDiagnosticRef,\n                                         cookie: c_uint) {\n     let HandlerFreeVars { cgcx, .. } = *(user as *const HandlerFreeVars);\n \n-    let msg = llvm::build_string(|s| llvm::LLVMWriteSMDiagnosticToString(diag, s))\n+    let msg = llvm::build_string(|s| llvm::LLVMRustWriteSMDiagnosticToString(diag, s))\n         .expect(\"non-UTF8 SMDiagnostic\");\n \n     report_inline_asm(cgcx, &msg[..], cookie);\n@@ -421,7 +421,7 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n     };\n     let fv = &fv as *const HandlerFreeVars as *mut c_void;\n \n-    llvm::LLVMSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, fv);\n+    llvm::LLVMRustSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, fv);\n     llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, fv);\n \n     let module_name = Some(&mtrans.name[..]);"}, {"sha": "3e66f6de242fdc8275918595faa7118e71d9a461", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -2348,7 +2348,8 @@ fn internalize_symbols<'a, 'tcx>(sess: &Session,\n \n                     if !is_referenced_somewhere && !is_reachable && !has_fixed_linkage {\n                         llvm::SetLinkage(val, llvm::InternalLinkage);\n-                        llvm::SetDLLStorageClass(val, llvm::DefaultStorageClass);\n+                        llvm::SetDLLStorageClass(val,\n+                                                 llvm::DLLStorageClassTypes::Default);\n                         llvm::UnsetComdat(val);\n                     }\n                 }"}, {"sha": "12809ab26841f5f51ea6c7a2f8110552848dcdb3", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -503,8 +503,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         unsafe {\n             let ty = Type::from_ref(llvm::LLVMTypeOf(ptr));\n             let align = llalign_of_pref(self.ccx, ty.element_type());\n-            llvm::LLVMBuildAtomicLoad(self.llbuilder, ptr, noname(), order,\n-                                      align as c_uint)\n+            llvm::LLVMRustBuildAtomicLoad(self.llbuilder, ptr, noname(), order,\n+                                          align as c_uint)\n         }\n     }\n \n@@ -565,7 +565,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         unsafe {\n             let ty = Type::from_ref(llvm::LLVMTypeOf(ptr));\n             let align = llalign_of_pref(self.ccx, ty.element_type());\n-            llvm::LLVMBuildAtomicStore(self.llbuilder, val, ptr, order, align as c_uint);\n+            llvm::LLVMRustBuildAtomicStore(self.llbuilder, val, ptr, order, align as c_uint);\n         }\n     }\n \n@@ -840,7 +840,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"Asm Output Type: {:?}\", output);\n         let fty = Type::func(&argtys[..], &output);\n         unsafe {\n-            let v = llvm::LLVMInlineAsm(\n+            let v = llvm::LLVMRustInlineAsm(\n                 fty.to_ref(), asm, cons, volatile, alignstack, dia as c_uint);\n             self.call(v, inputs, None)\n         }\n@@ -1097,7 +1097,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     pub fn atomic_fence(&self, order: AtomicOrdering, scope: SynchronizationScope) {\n         unsafe {\n-            llvm::LLVMBuildAtomicFence(self.llbuilder, order, scope);\n+            llvm::LLVMRustBuildAtomicFence(self.llbuilder, order, scope);\n         }\n     }\n }"}, {"sha": "996efc9c1132fdac1cdbe534994785e1f530a1e2", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -1126,7 +1126,7 @@ pub fn get_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, def_id: DefId)\n             }\n         }\n         if ccx.use_dll_storage_attrs() {\n-            llvm::SetDLLStorageClass(g, llvm::DLLImportStorageClass);\n+            llvm::SetDLLStorageClass(g, llvm::DLLStorageClassTypes::DllImport);\n         }\n         g\n     };\n@@ -1182,7 +1182,7 @@ pub fn trans_static(ccx: &CrateContext,\n             let name_str_ref = CStr::from_ptr(llvm::LLVMGetValueName(datum.val));\n             let name_string = CString::new(name_str_ref.to_bytes()).unwrap();\n             llvm::LLVMSetValueName(datum.val, empty_string.as_ptr());\n-            let new_g = llvm::LLVMGetOrInsertGlobal(\n+            let new_g = llvm::LLVMRustGetOrInsertGlobal(\n                 ccx.llmod(), name_string.as_ptr(), val_llty.to_ref());\n             // To avoid breaking any invariants, we leave around the old\n             // global for the moment; we'll replace all references to it"}, {"sha": "fe6a48d4c559dac732df51158504bdb562f3f466", "filename": "src/librustc_trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -133,7 +133,7 @@ fn make_mir_scope(ccx: &CrateContext,\n     let loc = span_start(ccx, scope_data.span);\n     scopes[scope] = unsafe {\n     let file_metadata = file_metadata(ccx, &loc.file.name, &loc.file.abs_path);\n-        llvm::LLVMDIBuilderCreateLexicalBlock(\n+        llvm::LLVMRustDIBuilderCreateLexicalBlock(\n             DIB(ccx),\n             parent_scope,\n             file_metadata,\n@@ -156,7 +156,7 @@ fn with_new_scope<F>(cx: &CrateContext,\n     let parent_scope = scope_stack.last().unwrap().scope_metadata;\n \n     let scope_metadata = unsafe {\n-        llvm::LLVMDIBuilderCreateLexicalBlock(\n+        llvm::LLVMRustDIBuilderCreateLexicalBlock(\n             DIB(cx),\n             parent_scope,\n             file_metadata,\n@@ -272,7 +272,7 @@ fn walk_pattern(cx: &CrateContext,\n                 let parent_scope = scope_stack.last().unwrap().scope_metadata;\n \n                 let scope_metadata = unsafe {\n-                    llvm::LLVMDIBuilderCreateLexicalBlock(\n+                    llvm::LLVMRustDIBuilderCreateLexicalBlock(\n                         DIB(cx),\n                         parent_scope,\n                         file_metadata,"}, {"sha": "8011347d3eb12c76770dd9c447b03147653d5214", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -504,12 +504,12 @@ fn fixed_vec_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     };\n \n     let subrange = unsafe {\n-        llvm::LLVMDIBuilderGetOrCreateSubrange(DIB(cx), 0, upper_bound)\n+        llvm::LLVMRustDIBuilderGetOrCreateSubrange(DIB(cx), 0, upper_bound)\n     };\n \n     let subscripts = create_DIArray(DIB(cx), &[subrange]);\n     let metadata = unsafe {\n-        llvm::LLVMDIBuilderCreateArrayType(\n+        llvm::LLVMRustDIBuilderCreateArrayType(\n             DIB(cx),\n             bytes_to_bits(array_size_in_bytes),\n             bytes_to_bits(element_type_align),\n@@ -612,7 +612,7 @@ fn subroutine_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     return MetadataCreationResult::new(\n         unsafe {\n-            llvm::LLVMDIBuilderCreateSubroutineType(\n+            llvm::LLVMRustDIBuilderCreateSubroutineType(\n                 DIB(cx),\n                 unknown_file_metadata(cx),\n                 create_DIArray(DIB(cx), &signature_metadata[..]))\n@@ -885,8 +885,8 @@ fn file_metadata_(cx: &CrateContext, key: &str, file_name: &str, work_dir: &str)\n     let file_name = CString::new(file_name).unwrap();\n     let work_dir = CString::new(work_dir).unwrap();\n     let file_metadata = unsafe {\n-        llvm::LLVMDIBuilderCreateFile(DIB(cx), file_name.as_ptr(),\n-                                      work_dir.as_ptr())\n+        llvm::LLVMRustDIBuilderCreateFile(DIB(cx), file_name.as_ptr(),\n+                                          work_dir.as_ptr())\n     };\n \n     let mut created_files = debug_context(cx).created_files.borrow_mut();\n@@ -916,7 +916,7 @@ pub fn scope_metadata(fcx: &FunctionContext,\n \n pub fn diverging_type_metadata(cx: &CrateContext) -> DIType {\n     unsafe {\n-        llvm::LLVMDIBuilderCreateBasicType(\n+        llvm::LLVMRustDIBuilderCreateBasicType(\n             DIB(cx),\n             \"!\\0\".as_ptr() as *const _,\n             bytes_to_bits(0),\n@@ -951,7 +951,7 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let (size, align) = size_and_align_of(cx, llvm_type);\n     let name = CString::new(name).unwrap();\n     let ty_metadata = unsafe {\n-        llvm::LLVMDIBuilderCreateBasicType(\n+        llvm::LLVMRustDIBuilderCreateBasicType(\n             DIB(cx),\n             name.as_ptr(),\n             bytes_to_bits(size),\n@@ -971,7 +971,7 @@ fn pointer_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let name = compute_debuginfo_type_name(cx, pointer_type, false);\n     let name = CString::new(name).unwrap();\n     let ptr_metadata = unsafe {\n-        llvm::LLVMDIBuilderCreatePointerType(\n+        llvm::LLVMRustDIBuilderCreatePointerType(\n             DIB(cx),\n             pointee_type_metadata,\n             bytes_to_bits(pointer_size),\n@@ -1017,7 +1017,7 @@ pub fn compile_unit_metadata(scc: &SharedCrateContext,\n     let flags = \"\\0\";\n     let split_name = \"\\0\";\n     return unsafe {\n-        llvm::LLVMDIBuilderCreateCompileUnit(\n+        llvm::LLVMRustDIBuilderCreateCompileUnit(\n             debug_context.builder,\n             DW_LANG_RUST,\n             compile_unit_name,\n@@ -1596,7 +1596,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             let token = v.name.as_str();\n             let name = CString::new(token.as_bytes()).unwrap();\n             unsafe {\n-                llvm::LLVMDIBuilderCreateEnumerator(\n+                llvm::LLVMRustDIBuilderCreateEnumerator(\n                     DIB(cx),\n                     name.as_ptr(),\n                     v.disr_val.to_u64_unchecked())\n@@ -1623,7 +1623,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n                 let name = CString::new(discriminant_name.as_bytes()).unwrap();\n                 let discriminant_type_metadata = unsafe {\n-                    llvm::LLVMDIBuilderCreateEnumerationType(\n+                    llvm::LLVMRustDIBuilderCreateEnumerationType(\n                         DIB(cx),\n                         containing_scope,\n                         name.as_ptr(),\n@@ -1667,7 +1667,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let enum_name = CString::new(enum_name).unwrap();\n     let unique_type_id_str = CString::new(unique_type_id_str.as_bytes()).unwrap();\n     let enum_metadata = unsafe {\n-        llvm::LLVMDIBuilderCreateUnionType(\n+        llvm::LLVMRustDIBuilderCreateUnionType(\n         DIB(cx),\n         containing_scope,\n         enum_name.as_ptr(),\n@@ -1769,7 +1769,7 @@ fn set_members_of_composite_type(cx: &CrateContext,\n             let member_name = member_description.name.as_bytes();\n             let member_name = CString::new(member_name).unwrap();\n             unsafe {\n-                llvm::LLVMDIBuilderCreateMemberType(\n+                llvm::LLVMRustDIBuilderCreateMemberType(\n                     DIB(cx),\n                     composite_type_metadata,\n                     member_name.as_ptr(),\n@@ -1786,13 +1786,14 @@ fn set_members_of_composite_type(cx: &CrateContext,\n \n     unsafe {\n         let type_array = create_DIArray(DIB(cx), &member_metadata[..]);\n-        llvm::LLVMDICompositeTypeSetTypeArray(DIB(cx), composite_type_metadata, type_array);\n+        llvm::LLVMRustDICompositeTypeSetTypeArray(\n+            DIB(cx), composite_type_metadata, type_array);\n     }\n }\n \n-// A convenience wrapper around LLVMDIBuilderCreateStructType(). Does not do any\n-// caching, does not add any fields to the struct. This can be done later with\n-// set_members_of_composite_type().\n+// A convenience wrapper around LLVMRustDIBuilderCreateStructType(). Does not do\n+// any caching, does not add any fields to the struct. This can be done later\n+// with set_members_of_composite_type().\n fn create_struct_stub(cx: &CrateContext,\n                       struct_llvm_type: Type,\n                       struct_type_name: &str,\n@@ -1807,12 +1808,12 @@ fn create_struct_stub(cx: &CrateContext,\n     let name = CString::new(struct_type_name).unwrap();\n     let unique_type_id = CString::new(unique_type_id_str.as_bytes()).unwrap();\n     let metadata_stub = unsafe {\n-        // LLVMDIBuilderCreateStructType() wants an empty array. A null\n+        // LLVMRustDIBuilderCreateStructType() wants an empty array. A null\n         // pointer will lead to hard to trace and debug LLVM assertions\n         // later on in llvm/lib/IR/Value.cpp.\n         let empty_array = create_DIArray(DIB(cx), &[]);\n \n-        llvm::LLVMDIBuilderCreateStructType(\n+        llvm::LLVMRustDIBuilderCreateStructType(\n             DIB(cx),\n             containing_scope,\n             name.as_ptr(),\n@@ -1868,16 +1869,16 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n     let var_name = CString::new(var_name).unwrap();\n     let linkage_name = CString::new(linkage_name).unwrap();\n     unsafe {\n-        llvm::LLVMDIBuilderCreateStaticVariable(DIB(cx),\n-                                                var_scope,\n-                                                var_name.as_ptr(),\n-                                                linkage_name.as_ptr(),\n-                                                file_metadata,\n-                                                line_number,\n-                                                type_metadata,\n-                                                is_local_to_unit,\n-                                                global,\n-                                                ptr::null_mut());\n+        llvm::LLVMRustDIBuilderCreateStaticVariable(DIB(cx),\n+                                                    var_scope,\n+                                                    var_name.as_ptr(),\n+                                                    linkage_name.as_ptr(),\n+                                                    file_metadata,\n+                                                    line_number,\n+                                                    type_metadata,\n+                                                    is_local_to_unit,\n+                                                    global,\n+                                                    ptr::null_mut());\n     }\n }\n \n@@ -1980,10 +1981,10 @@ pub fn create_captured_var_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                               env_index);\n \n     let address_operations = unsafe {\n-        [llvm::LLVMDIBuilderCreateOpDeref(),\n-         llvm::LLVMDIBuilderCreateOpPlus(),\n+        [llvm::LLVMRustDIBuilderCreateOpDeref(),\n+         llvm::LLVMRustDIBuilderCreateOpPlus(),\n          byte_offset_of_var_in_env as i64,\n-         llvm::LLVMDIBuilderCreateOpDeref()]\n+         llvm::LLVMRustDIBuilderCreateOpDeref()]\n     };\n \n     let address_op_count = if captured_by_ref {\n@@ -2021,7 +2022,7 @@ pub fn create_match_binding_metadata<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     let scope_metadata = scope_metadata(bcx.fcx, binding.id, binding.span);\n     let aops = unsafe {\n-        [llvm::LLVMDIBuilderCreateOpDeref()]\n+        [llvm::LLVMRustDIBuilderCreateOpDeref()]\n     };\n     // Regardless of the actual type (`T`) we're always passed the stack slot\n     // (alloca) for the binding. For ByRef bindings that's a `T*` but for ByMove"}, {"sha": "915999f07a1dee9c4966e9ab97b0006d95f416ea", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -88,7 +88,7 @@ pub struct CrateDebugContext<'tcx> {\n impl<'tcx> CrateDebugContext<'tcx> {\n     pub fn new(llmod: ModuleRef) -> CrateDebugContext<'tcx> {\n         debug!(\"CrateDebugContext::new\");\n-        let builder = unsafe { llvm::LLVMDIBuilderCreate(llmod) };\n+        let builder = unsafe { llvm::LLVMRustDIBuilderCreate(llmod) };\n         // DIBuilder inherits context from the module, so we'd better use the same one\n         let llcontext = unsafe { llvm::LLVMGetModuleContext(llmod) };\n         return CrateDebugContext {\n@@ -178,8 +178,8 @@ pub fn finalize(cx: &CrateContext) {\n     }\n \n     unsafe {\n-        llvm::LLVMDIBuilderFinalize(DIB(cx));\n-        llvm::LLVMDIBuilderDispose(DIB(cx));\n+        llvm::LLVMRustDIBuilderFinalize(DIB(cx));\n+        llvm::LLVMRustDIBuilderDispose(DIB(cx));\n         // Debuginfo generation in LLVM by default uses a higher\n         // version of dwarf than OS X currently understands. We can\n         // instruct LLVM to emit an older version of dwarf, however,\n@@ -250,7 +250,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     let function_type_metadata = unsafe {\n         let fn_signature = get_function_signature(cx, sig, abi);\n-        llvm::LLVMDIBuilderCreateSubroutineType(DIB(cx), file_metadata, fn_signature)\n+        llvm::LLVMRustDIBuilderCreateSubroutineType(DIB(cx), file_metadata, fn_signature)\n     };\n \n     // Find the enclosing function, in case this is a closure.\n@@ -284,7 +284,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let linkage_name = CString::new(linkage_name).unwrap();\n \n     let fn_metadata = unsafe {\n-        llvm::LLVMDIBuilderCreateFunction(\n+        llvm::LLVMRustDIBuilderCreateFunction(\n             DIB(cx),\n             containing_scope,\n             function_name.as_ptr(),\n@@ -388,7 +388,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 let actual_type_metadata = type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n                 let name = CString::new(param.name.as_str().as_bytes()).unwrap();\n                 unsafe {\n-                    llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n+                    llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n                         DIB(cx),\n                         ptr::null_mut(),\n                         name.as_ptr(),\n@@ -492,7 +492,7 @@ pub fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         (DirectVariable { alloca }, address_operations) |\n         (IndirectVariable {alloca, address_operations}, _) => {\n             let metadata = unsafe {\n-                llvm::LLVMDIBuilderCreateVariable(\n+                llvm::LLVMRustDIBuilderCreateVariable(\n                     DIB(cx),\n                     dwarf_tag,\n                     scope_metadata,\n@@ -510,7 +510,7 @@ pub fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 InternalDebugLocation::new(scope_metadata, loc.line, loc.col.to_usize()));\n             unsafe {\n                 let debug_loc = llvm::LLVMGetCurrentDebugLocation(cx.raw_builder());\n-                let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(\n+                let instr = llvm::LLVMRustDIBuilderInsertDeclareAtEnd(\n                     DIB(cx),\n                     alloca,\n                     metadata,"}, {"sha": "5953ec4aaedfa3cb492de9d8a61f9fa4cf05beac", "filename": "src/librustc_trans/debuginfo/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -78,7 +78,7 @@ pub fn item_namespace(ccx: &CrateContext, def_id: DefId) -> DIScope {\n     };\n \n     let scope = unsafe {\n-        llvm::LLVMDIBuilderCreateNameSpace(\n+        llvm::LLVMRustDIBuilderCreateNameSpace(\n             DIB(ccx),\n             parent_scope,\n             namespace_name.as_ptr(),"}, {"sha": "d288b9dcef70bb379c2c89a6fecbd99da6d485f1", "filename": "src/librustc_trans/debuginfo/source_loc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fsource_loc.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -206,7 +206,7 @@ pub fn set_debug_location(cx: &CrateContext,\n             debug!(\"setting debug location to {} {}\", line, col);\n \n             unsafe {\n-                llvm::LLVMDIBuilderCreateDebugLocation(\n+                llvm::LLVMRustDIBuilderCreateDebugLocation(\n                     debug_context(cx).llcontext,\n                     line as c_uint,\n                     col as c_uint,"}, {"sha": "5734a12394113fe86a2c825652c0aa11540f1a9c", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -40,7 +40,7 @@ pub fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool\n #[allow(non_snake_case)]\n pub fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n     return unsafe {\n-        llvm::LLVMDIBuilderGetOrCreateArray(builder, arr.as_ptr(), arr.len() as u32)\n+        llvm::LLVMRustDIBuilderGetOrCreateArray(builder, arr.as_ptr(), arr.len() as u32)\n     };\n }\n "}, {"sha": "15d90504ee7f07c9340f2d36d5bd18e172aa288f", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -40,7 +40,7 @@ pub fn declare_global(ccx: &CrateContext, name: &str, ty: Type) -> llvm::ValueRe\n         bug!(\"name {:?} contains an interior null byte\", name)\n     });\n     unsafe {\n-        llvm::LLVMGetOrInsertGlobal(ccx.llmod(), namebuf.as_ptr(), ty.to_ref())\n+        llvm::LLVMRustGetOrInsertGlobal(ccx.llmod(), namebuf.as_ptr(), ty.to_ref())\n     }\n }\n \n@@ -55,7 +55,7 @@ fn declare_raw_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv, ty:\n         bug!(\"name {:?} contains an interior null byte\", name)\n     });\n     let llfn = unsafe {\n-        llvm::LLVMGetOrInsertFunction(ccx.llmod(), namebuf.as_ptr(), ty.to_ref())\n+        llvm::LLVMRustGetOrInsertFunction(ccx.llmod(), namebuf.as_ptr(), ty.to_ref())\n     };\n \n     llvm::SetFunctionCallConv(llfn, callconv);\n@@ -173,7 +173,7 @@ pub fn get_declared_value(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n     let namebuf = CString::new(name).unwrap_or_else(|_|{\n         bug!(\"name {:?} contains an interior null byte\", name)\n     });\n-    let val = unsafe { llvm::LLVMGetNamedValue(ccx.llmod(), namebuf.as_ptr()) };\n+    let val = unsafe { llvm::LLVMRustGetNamedValue(ccx.llmod(), namebuf.as_ptr()) };\n     if val.is_null() {\n         debug!(\"get_declared_value: {:?} value is null\", name);\n         None"}, {"sha": "2f27aed065d80f17b926d937a1d2ee473c2e1b4e", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -640,28 +640,30 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         // This requires that atomic intrinsics follow a specific naming pattern:\n         // \"atomic_<operation>[_<ordering>]\", and no ordering means SeqCst\n         (_, name) if name.starts_with(\"atomic_\") => {\n+            use llvm::AtomicOrdering::*;\n+\n             let split: Vec<&str> = name.split('_').collect();\n \n             let is_cxchg = split[1] == \"cxchg\" || split[1] == \"cxchgweak\";\n             let (order, failorder) = match split.len() {\n-                2 => (llvm::SequentiallyConsistent, llvm::SequentiallyConsistent),\n+                2 => (SequentiallyConsistent, SequentiallyConsistent),\n                 3 => match split[2] {\n-                    \"unordered\" => (llvm::Unordered, llvm::Unordered),\n-                    \"relaxed\" => (llvm::Monotonic, llvm::Monotonic),\n-                    \"acq\"     => (llvm::Acquire, llvm::Acquire),\n-                    \"rel\"     => (llvm::Release, llvm::Monotonic),\n-                    \"acqrel\"  => (llvm::AcquireRelease, llvm::Acquire),\n+                    \"unordered\" => (Unordered, Unordered),\n+                    \"relaxed\" => (Monotonic, Monotonic),\n+                    \"acq\"     => (Acquire, Acquire),\n+                    \"rel\"     => (Release, Monotonic),\n+                    \"acqrel\"  => (AcquireRelease, Acquire),\n                     \"failrelaxed\" if is_cxchg =>\n-                        (llvm::SequentiallyConsistent, llvm::Monotonic),\n+                        (SequentiallyConsistent, Monotonic),\n                     \"failacq\" if is_cxchg =>\n-                        (llvm::SequentiallyConsistent, llvm::Acquire),\n+                        (SequentiallyConsistent, Acquire),\n                     _ => ccx.sess().fatal(\"unknown ordering in atomic intrinsic\")\n                 },\n                 4 => match (split[2], split[3]) {\n                     (\"acq\", \"failrelaxed\") if is_cxchg =>\n-                        (llvm::Acquire, llvm::Monotonic),\n+                        (Acquire, Monotonic),\n                     (\"acqrel\", \"failrelaxed\") if is_cxchg =>\n-                        (llvm::AcquireRelease, llvm::Monotonic),\n+                        (AcquireRelease, Monotonic),\n                     _ => ccx.sess().fatal(\"unknown ordering in atomic intrinsic\")\n                 },\n                 _ => ccx.sess().fatal(\"Atomic intrinsic not in correct format\"),\n@@ -714,12 +716,12 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                 }\n \n                 \"fence\" => {\n-                    AtomicFence(bcx, order, llvm::CrossThread);\n+                    AtomicFence(bcx, order, llvm::SynchronizationScope::CrossThread);\n                     C_nil(ccx)\n                 }\n \n                 \"singlethreadfence\" => {\n-                    AtomicFence(bcx, order, llvm::SingleThread);\n+                    AtomicFence(bcx, order, llvm::SynchronizationScope::SingleThread);\n                     C_nil(ccx)\n                 }\n "}, {"sha": "8f723d288c9eb4718cb4bb77580396bbf122b4ac", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -324,8 +324,8 @@ fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n                         machine::llelement_offset(bcx.ccx(), lltuplety, i);\n \n                     let ops = unsafe {\n-                        [llvm::LLVMDIBuilderCreateOpDeref(),\n-                         llvm::LLVMDIBuilderCreateOpPlus(),\n+                        [llvm::LLVMRustDIBuilderCreateOpDeref(),\n+                         llvm::LLVMRustDIBuilderCreateOpPlus(),\n                          byte_offset_of_var_in_tuple as i64]\n                     };\n \n@@ -450,10 +450,10 @@ fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n                     machine::llelement_offset(bcx.ccx(), llclosurety, i);\n \n                 let ops = unsafe {\n-                    [llvm::LLVMDIBuilderCreateOpDeref(),\n-                     llvm::LLVMDIBuilderCreateOpPlus(),\n+                    [llvm::LLVMRustDIBuilderCreateOpDeref(),\n+                     llvm::LLVMRustDIBuilderCreateOpPlus(),\n                      byte_offset_of_var_in_env as i64,\n-                     llvm::LLVMDIBuilderCreateOpDeref()]\n+                     llvm::LLVMRustDIBuilderCreateOpDeref()]\n                 };\n \n                 // The environment and the capture can each be indirect."}, {"sha": "c09515a51389ab3b57cfe121854205b8d3cfb2a6", "filename": "src/librustc_trans/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -36,7 +36,7 @@ pub struct Type {\n impl fmt::Debug for Type {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(&llvm::build_string(|s| unsafe {\n-            llvm::LLVMWriteTypeToString(self.to_ref(), s);\n+            llvm::LLVMRustWriteTypeToString(self.to_ref(), s);\n         }).expect(\"non-UTF8 type description from LLVM\"))\n     }\n }\n@@ -72,7 +72,7 @@ impl Type {\n     }\n \n     pub fn metadata(ccx: &CrateContext) -> Type {\n-        ty!(llvm::LLVMMetadataTypeInContext(ccx.llcx()))\n+        ty!(llvm::LLVMRustMetadataTypeInContext(ccx.llcx()))\n     }\n \n     pub fn i1(ccx: &CrateContext) -> Type {"}, {"sha": "79e0c11515fc49f34fe6cb5ed716a2fd8d1378a6", "filename": "src/librustc_trans/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Flibrustc_trans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fvalue.rs?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -23,7 +23,7 @@ pub struct Value(pub ValueRef);\n impl fmt::Debug for Value {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(&llvm::build_string(|s| unsafe {\n-            llvm::LLVMWriteValueToString(self.0, s);\n+            llvm::LLVMRustWriteValueToString(self.0, s);\n         }).expect(\"nun-UTF8 value description from LLVM\"))\n     }\n }"}, {"sha": "a9c31bc33e0739564fb060ccb5a993d88dfeef22", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 322, "deletions": 194, "changes": 516, "blob_url": "https://github.com/rust-lang/rust/blob/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d091ef802f5aa6d5b81e711ecd7e5f66a76b01a9", "patch": "@@ -13,6 +13,7 @@\n #include \"llvm/Object/ObjectFile.h\"\n #include \"llvm/IR/DiagnosticInfo.h\"\n #include \"llvm/IR/DiagnosticPrinter.h\"\n+#include \"llvm/IR/Instructions.h\"\n \n #include \"llvm/IR/CallSite.h\"\n \n@@ -27,6 +28,30 @@ using namespace llvm;\n using namespace llvm::sys;\n using namespace llvm::object;\n \n+// LLVMAtomicOrdering is already an enum - don't create another\n+// one.\n+static AtomicOrdering from_rust(LLVMAtomicOrdering Ordering) {\n+  switch (Ordering) {\n+    case LLVMAtomicOrderingNotAtomic:\n+        return AtomicOrdering::NotAtomic;\n+    case LLVMAtomicOrderingUnordered:\n+        return AtomicOrdering::Unordered;\n+    case LLVMAtomicOrderingMonotonic:\n+        return AtomicOrdering::Monotonic;\n+    case LLVMAtomicOrderingAcquire:\n+        return AtomicOrdering::Acquire;\n+    case LLVMAtomicOrderingRelease:\n+        return AtomicOrdering::Release;\n+    case LLVMAtomicOrderingAcquireRelease:\n+        return AtomicOrdering::AcquireRelease;\n+    case LLVMAtomicOrderingSequentiallyConsistent:\n+        return AtomicOrdering::SequentiallyConsistent;\n+  }\n+\n+  llvm_unreachable(\"Invalid LLVMAtomicOrdering value!\");\n+}\n+\n+\n static char *LastError;\n \n extern \"C\" LLVMMemoryBufferRef\n@@ -57,45 +82,30 @@ LLVMRustSetNormalizedTarget(LLVMModuleRef M, const char *triple) {\n     unwrap(M)->setTargetTriple(Triple::normalize(triple));\n }\n \n-extern \"C\" LLVMValueRef LLVMRustConstSmallInt(LLVMTypeRef IntTy, unsigned N,\n-                                              LLVMBool SignExtend) {\n-  return LLVMConstInt(IntTy, (unsigned long long)N, SignExtend);\n-}\n-\n-extern \"C\" LLVMValueRef LLVMRustConstInt(LLVMTypeRef IntTy,\n-           unsigned N_hi,\n-           unsigned N_lo,\n-           LLVMBool SignExtend) {\n-  unsigned long long N = N_hi;\n-  N <<= 32;\n-  N |= N_lo;\n-  return LLVMConstInt(IntTy, N, SignExtend);\n-}\n-\n extern \"C\" void LLVMRustPrintPassTimings() {\n   raw_fd_ostream OS (2, false); // stderr.\n   TimerGroup::printAll(OS);\n }\n \n-extern \"C\" LLVMValueRef LLVMGetNamedValue(LLVMModuleRef M,\n-                                          const char* Name) {\n+extern \"C\" LLVMValueRef LLVMRustGetNamedValue(LLVMModuleRef M,\n+\t\t\t\t\t      const char* Name) {\n     return wrap(unwrap(M)->getNamedValue(Name));\n }\n \n-extern \"C\" LLVMValueRef LLVMGetOrInsertFunction(LLVMModuleRef M,\n-                                                const char* Name,\n-                                                LLVMTypeRef FunctionTy) {\n+extern \"C\" LLVMValueRef LLVMRustGetOrInsertFunction(LLVMModuleRef M,\n+\t\t\t\t\t\t    const char* Name,\n+\t\t\t\t\t\t    LLVMTypeRef FunctionTy) {\n   return wrap(unwrap(M)->getOrInsertFunction(Name,\n                                              unwrap<FunctionType>(FunctionTy)));\n }\n \n-extern \"C\" LLVMValueRef LLVMGetOrInsertGlobal(LLVMModuleRef M,\n-                                              const char* Name,\n-                                              LLVMTypeRef Ty) {\n+extern \"C\" LLVMValueRef LLVMRustGetOrInsertGlobal(LLVMModuleRef M,\n+\t\t\t\t\t\t  const char* Name,\n+\t\t\t\t\t\t  LLVMTypeRef Ty) {\n   return wrap(unwrap(M)->getOrInsertGlobal(Name, unwrap(Ty)));\n }\n \n-extern \"C\" LLVMTypeRef LLVMMetadataTypeInContext(LLVMContextRef C) {\n+extern \"C\" LLVMTypeRef LLVMRustMetadataTypeInContext(LLVMContextRef C) {\n   return wrap(Type::getMetadataTy(*unwrap(C)));\n }\n \n@@ -110,7 +120,10 @@ extern \"C\" void LLVMRustAddCallSiteAttribute(LLVMValueRef Instr, unsigned index,\n }\n \n \n-extern \"C\" void LLVMAddDereferenceableCallSiteAttr(LLVMValueRef Instr, unsigned idx, uint64_t b) {\n+extern \"C\" void LLVMRustAddDereferenceableCallSiteAttr(LLVMValueRef Instr,\n+\t\t\t\t\t\t       unsigned idx,\n+\t\t\t\t\t\t       uint64_t b)\n+{\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n   AttrBuilder B;\n   B.addDereferenceableAttr(b);\n@@ -120,38 +133,50 @@ extern \"C\" void LLVMAddDereferenceableCallSiteAttr(LLVMValueRef Instr, unsigned\n                                                          idx, B)));\n }\n \n-extern \"C\" void LLVMAddFunctionAttribute(LLVMValueRef Fn, unsigned index,\n-                                         uint64_t Val) {\n+extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn,\n+\t\t\t\t\t     unsigned index,\n+\t\t\t\t\t     uint64_t Val)\n+{\n   Function *A = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addRawValue(Val);\n   A->addAttributes(index, AttributeSet::get(A->getContext(), index, B));\n }\n \n-extern \"C\" void LLVMAddDereferenceableAttr(LLVMValueRef Fn, unsigned index, uint64_t bytes) {\n+extern \"C\" void LLVMRustAddDereferenceableAttr(LLVMValueRef Fn,\n+\t\t\t\t\t       unsigned index,\n+\t\t\t\t\t       uint64_t bytes)\n+{\n   Function *A = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addDereferenceableAttr(bytes);\n   A->addAttributes(index, AttributeSet::get(A->getContext(), index, B));\n }\n \n-extern \"C\" void LLVMAddFunctionAttrString(LLVMValueRef Fn, unsigned index, const char *Name) {\n+extern \"C\" void LLVMRustAddFunctionAttrString(LLVMValueRef Fn,\n+\t\t\t\t\t      unsigned index,\n+\t\t\t\t\t      const char *Name)\n+{\n   Function *F = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addAttribute(Name);\n   F->addAttributes(index, AttributeSet::get(F->getContext(), index, B));\n }\n \n-extern \"C\" void LLVMAddFunctionAttrStringValue(LLVMValueRef Fn, unsigned index,\n-                                               const char *Name,\n-                                               const char *Value) {\n+extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n+\t\t\t\t\t\t   unsigned index,\n+\t\t\t\t\t\t   const char *Name,\n+\t\t\t\t\t\t   const char *Value) {\n   Function *F = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addAttribute(Name, Value);\n   F->addAttributes(index, AttributeSet::get(F->getContext(), index, B));\n }\n \n-extern \"C\" void LLVMRemoveFunctionAttributes(LLVMValueRef Fn, unsigned index, uint64_t Val) {\n+extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n+\t\t\t\t\t\t unsigned index,\n+\t\t\t\t\t\t uint64_t Val)\n+{\n   Function *A = unwrap<Function>(Fn);\n   const AttributeSet PAL = A->getAttributes();\n   AttrBuilder B(Val);\n@@ -161,7 +186,10 @@ extern \"C\" void LLVMRemoveFunctionAttributes(LLVMValueRef Fn, unsigned index, ui\n   A->setAttributes(PALnew);\n }\n \n-extern \"C\" void LLVMRemoveFunctionAttrString(LLVMValueRef fn, unsigned index, const char *Name) {\n+extern \"C\" void LLVMRustRemoveFunctionAttrString(LLVMValueRef fn,\n+\t\t\t\t\t\t unsigned index,\n+\t\t\t\t\t\t const char *Name)\n+{\n   Function *f = unwrap<Function>(fn);\n   LLVMContext &C = f->getContext();\n   AttrBuilder B;\n@@ -181,24 +209,24 @@ extern \"C\" void LLVMRustSetHasUnsafeAlgebra(LLVMValueRef V) {\n     }\n }\n \n-extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,\n-                                            LLVMValueRef source,\n-                                            const char* Name,\n-                                            AtomicOrdering order,\n-                                            unsigned alignment) {\n+extern \"C\" LLVMValueRef LLVMRustBuildAtomicLoad(LLVMBuilderRef B,\n+\t\t\t\t\t\tLLVMValueRef source,\n+\t\t\t\t\t\tconst char* Name,\n+\t\t\t\t\t\tLLVMAtomicOrdering order,\n+\t\t\t\t\t\tunsigned alignment) {\n     LoadInst* li = new LoadInst(unwrap(source),0);\n-    li->setAtomic(order);\n+    li->setAtomic(from_rust(order));\n     li->setAlignment(alignment);\n     return wrap(unwrap(B)->Insert(li, Name));\n }\n \n-extern \"C\" LLVMValueRef LLVMBuildAtomicStore(LLVMBuilderRef B,\n-                                             LLVMValueRef val,\n-                                             LLVMValueRef target,\n-                                             AtomicOrdering order,\n-                                             unsigned alignment) {\n+extern \"C\" LLVMValueRef LLVMRustBuildAtomicStore(LLVMBuilderRef B,\n+\t\t\t\t\t\t LLVMValueRef val,\n+\t\t\t\t\t\t LLVMValueRef target,\n+\t\t\t\t\t\t LLVMAtomicOrdering order,\n+\t\t\t\t\t\t unsigned alignment) {\n     StoreInst* si = new StoreInst(unwrap(val),unwrap(target));\n-    si->setAtomic(order);\n+    si->setAtomic(from_rust(order));\n     si->setAlignment(alignment);\n     return wrap(unwrap(B)->Insert(si));\n }\n@@ -207,54 +235,77 @@ extern \"C\" LLVMValueRef LLVMRustBuildAtomicCmpXchg(LLVMBuilderRef B,\n                                                LLVMValueRef target,\n                                                LLVMValueRef old,\n                                                LLVMValueRef source,\n-                                               AtomicOrdering order,\n-                                               AtomicOrdering failure_order,\n+                                               LLVMAtomicOrdering order,\n+                                               LLVMAtomicOrdering failure_order,\n                                                LLVMBool weak) {\n-    AtomicCmpXchgInst* acxi = unwrap(B)->CreateAtomicCmpXchg(unwrap(target),\n-                                                             unwrap(old),\n-                                                             unwrap(source),\n-                                                             order,\n-                                                             failure_order);\n+    AtomicCmpXchgInst* acxi = unwrap(B)->CreateAtomicCmpXchg(\n+        unwrap(target),\n+        unwrap(old),\n+        unwrap(source),\n+        from_rust(order),\n+\tfrom_rust(failure_order));\n     acxi->setWeak(weak);\n     return wrap(acxi);\n }\n-extern \"C\" LLVMValueRef LLVMBuildAtomicFence(LLVMBuilderRef B,\n-                                             AtomicOrdering order,\n-                                             SynchronizationScope scope) {\n-    return wrap(unwrap(B)->CreateFence(order, scope));\n+\n+enum class LLVMRustSynchronizationScope {\n+    Other,\n+    SingleThread,\n+    CrossThread,\n+};\n+\n+static SynchronizationScope\n+from_rust(LLVMRustSynchronizationScope scope)\n+{\n+    switch (scope) {\n+    case LLVMRustSynchronizationScope::SingleThread:\n+        return SingleThread;\n+    case LLVMRustSynchronizationScope::CrossThread:\n+        return CrossThread;\n+    default:\n+        abort();\n+    }\n+}\n+\n+extern \"C\" LLVMValueRef LLVMRustBuildAtomicFence(\n+    LLVMBuilderRef B,\n+    LLVMAtomicOrdering order,\n+    LLVMRustSynchronizationScope scope)\n+{\n+    return wrap(unwrap(B)->CreateFence(from_rust(order), from_rust(scope)));\n }\n \n-extern \"C\" void LLVMSetDebug(int Enabled) {\n+extern \"C\" void LLVMRustSetDebug(int Enabled) {\n #ifndef NDEBUG\n   DebugFlag = Enabled;\n #endif\n }\n \n-extern \"C\" LLVMValueRef LLVMInlineAsm(LLVMTypeRef Ty,\n-                                      char *AsmString,\n-                                      char *Constraints,\n-                                      LLVMBool HasSideEffects,\n-                                      LLVMBool IsAlignStack,\n-                                      unsigned Dialect) {\n+extern \"C\" LLVMValueRef LLVMRustInlineAsm(LLVMTypeRef Ty,\n+\t\t\t\t\t  char *AsmString,\n+\t\t\t\t\t  char *Constraints,\n+\t\t\t\t\t  LLVMBool HasSideEffects,\n+\t\t\t\t\t  LLVMBool IsAlignStack,\n+\t\t\t\t\t  unsigned Dialect) {\n     return wrap(InlineAsm::get(unwrap<FunctionType>(Ty), AsmString,\n                                Constraints, HasSideEffects,\n                                IsAlignStack, (InlineAsm::AsmDialect) Dialect));\n }\n \n-typedef DIBuilder* DIBuilderRef;\n+typedef DIBuilder* LLVMRustDIBuilderRef;\n \n-typedef struct LLVMOpaqueMetadata *LLVMMetadataRef;\n+typedef struct LLVMOpaqueMetadata *LLVMRustMetadataRef;\n \n namespace llvm {\n-DEFINE_ISA_CONVERSION_FUNCTIONS(Metadata, LLVMMetadataRef)\n+DEFINE_ISA_CONVERSION_FUNCTIONS(Metadata, LLVMRustMetadataRef)\n \n-inline Metadata **unwrap(LLVMMetadataRef *Vals) {\n+inline Metadata **unwrap(LLVMRustMetadataRef *Vals) {\n   return reinterpret_cast<Metadata**>(Vals);\n }\n }\n \n template<typename DIT>\n-DIT* unwrapDIptr(LLVMMetadataRef ref) {\n+DIT* unwrapDIptr(LLVMRustMetadataRef ref) {\n     return (DIT*) (ref ? unwrap<MDNode>(ref) : NULL);\n }\n \n@@ -266,11 +317,11 @@ extern \"C\" uint32_t LLVMRustDebugMetadataVersion() {\n     return DEBUG_METADATA_VERSION;\n }\n \n-extern \"C\" uint32_t LLVMVersionMinor() {\n+extern \"C\" uint32_t LLVMRustVersionMinor() {\n   return LLVM_VERSION_MINOR;\n }\n \n-extern \"C\" uint32_t LLVMVersionMajor() {\n+extern \"C\" uint32_t LLVMRustVersionMajor() {\n   return LLVM_VERSION_MAJOR;\n }\n \n@@ -280,20 +331,20 @@ extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M,\n     unwrap(M)->addModuleFlag(Module::Warning, name, value);\n }\n \n-extern \"C\" DIBuilderRef LLVMDIBuilderCreate(LLVMModuleRef M) {\n+extern \"C\" LLVMRustDIBuilderRef LLVMRustDIBuilderCreate(LLVMModuleRef M) {\n     return new DIBuilder(*unwrap(M));\n }\n \n-extern \"C\" void LLVMDIBuilderDispose(DIBuilderRef Builder) {\n+extern \"C\" void LLVMRustDIBuilderDispose(LLVMRustDIBuilderRef Builder) {\n     delete Builder;\n }\n \n-extern \"C\" void LLVMDIBuilderFinalize(DIBuilderRef Builder) {\n+extern \"C\" void LLVMRustDIBuilderFinalize(LLVMRustDIBuilderRef Builder) {\n     Builder->finalize();\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateCompileUnit(\n-    DIBuilderRef Builder,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateCompileUnit(\n+    LLVMRustDIBuilderRef Builder,\n     unsigned Lang,\n     const char* File,\n     const char* Dir,\n@@ -312,40 +363,40 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateCompileUnit(\n                                            SplitName));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateFile(\n-    DIBuilderRef Builder,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFile(\n+    LLVMRustDIBuilderRef Builder,\n     const char* Filename,\n     const char* Directory) {\n     return wrap(Builder->createFile(Filename, Directory));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateSubroutineType(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef File,\n-    LLVMMetadataRef ParameterTypes) {\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateSubroutineType(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef File,\n+    LLVMRustMetadataRef ParameterTypes) {\n     return wrap(Builder->createSubroutineType(\n #if LLVM_VERSION_MINOR == 7\n         unwrapDI<DIFile>(File),\n #endif\n         DITypeRefArray(unwrap<MDTuple>(ParameterTypes))));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateFunction(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef Scope,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef Scope,\n     const char* Name,\n     const char* LinkageName,\n-    LLVMMetadataRef File,\n+    LLVMRustMetadataRef File,\n     unsigned LineNo,\n-    LLVMMetadataRef Ty,\n+    LLVMRustMetadataRef Ty,\n     bool isLocalToUnit,\n     bool isDefinition,\n     unsigned ScopeLine,\n     unsigned Flags,\n     bool isOptimized,\n     LLVMValueRef Fn,\n-    LLVMMetadataRef TParam,\n-    LLVMMetadataRef Decl) {\n+    LLVMRustMetadataRef TParam,\n+    LLVMRustMetadataRef Decl) {\n #if LLVM_VERSION_MINOR >= 8\n     DITemplateParameterArray TParams =\n         DITemplateParameterArray(unwrap<MDTuple>(TParam));\n@@ -370,8 +421,8 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateFunction(\n #endif\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateBasicType(\n-    DIBuilderRef Builder,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateBasicType(\n+    LLVMRustDIBuilderRef Builder,\n     const char* Name,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n@@ -381,29 +432,29 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateBasicType(\n         AlignInBits, Encoding));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreatePointerType(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef PointeeTy,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreatePointerType(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef PointeeTy,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n     const char* Name) {\n     return wrap(Builder->createPointerType(\n         unwrapDI<DIType>(PointeeTy), SizeInBits, AlignInBits, Name));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateStructType(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef Scope,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef Scope,\n     const char* Name,\n-    LLVMMetadataRef File,\n+    LLVMRustMetadataRef File,\n     unsigned LineNumber,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n     unsigned Flags,\n-    LLVMMetadataRef DerivedFrom,\n-    LLVMMetadataRef Elements,\n+    LLVMRustMetadataRef DerivedFrom,\n+    LLVMRustMetadataRef Elements,\n     unsigned RunTimeLang,\n-    LLVMMetadataRef VTableHolder,\n+    LLVMRustMetadataRef VTableHolder,\n     const char *UniqueId) {\n     return wrap(Builder->createStructType(\n         unwrapDI<DIDescriptor>(Scope),\n@@ -421,28 +472,28 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateStructType(\n         ));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateMemberType(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef Scope,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateMemberType(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef Scope,\n     const char* Name,\n-    LLVMMetadataRef File,\n+    LLVMRustMetadataRef File,\n     unsigned LineNo,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n     uint64_t OffsetInBits,\n     unsigned Flags,\n-    LLVMMetadataRef Ty) {\n+    LLVMRustMetadataRef Ty) {\n     return wrap(Builder->createMemberType(\n         unwrapDI<DIDescriptor>(Scope), Name,\n         unwrapDI<DIFile>(File), LineNo,\n         SizeInBits, AlignInBits, OffsetInBits, Flags,\n         unwrapDI<DIType>(Ty)));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateLexicalBlock(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef Scope,\n-    LLVMMetadataRef File,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateLexicalBlock(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef Scope,\n+    LLVMRustMetadataRef File,\n     unsigned Line,\n     unsigned Col) {\n     return wrap(Builder->createLexicalBlock(\n@@ -451,17 +502,17 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateLexicalBlock(\n         ));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateStaticVariable(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef Context,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef Context,\n     const char* Name,\n     const char* LinkageName,\n-    LLVMMetadataRef File,\n+    LLVMRustMetadataRef File,\n     unsigned LineNo,\n-    LLVMMetadataRef Ty,\n+    LLVMRustMetadataRef Ty,\n     bool isLocalToUnit,\n     LLVMValueRef Val,\n-    LLVMMetadataRef Decl = NULL) {\n+    LLVMRustMetadataRef Decl = NULL) {\n     return wrap(Builder->createGlobalVariable(unwrapDI<DIDescriptor>(Context),\n         Name,\n         LinkageName,\n@@ -473,14 +524,14 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateStaticVariable(\n         unwrapDIptr<MDNode>(Decl)));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateVariable(\n-    DIBuilderRef Builder,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n+    LLVMRustDIBuilderRef Builder,\n     unsigned Tag,\n-    LLVMMetadataRef Scope,\n+    LLVMRustMetadataRef Scope,\n     const char* Name,\n-    LLVMMetadataRef File,\n+    LLVMRustMetadataRef File,\n     unsigned LineNo,\n-    LLVMMetadataRef Ty,\n+    LLVMRustMetadataRef Ty,\n     bool AlwaysPreserve,\n     unsigned Flags,\n     int64_t* AddrOps,\n@@ -509,50 +560,50 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateVariable(\n #endif\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateArrayType(\n-    DIBuilderRef Builder,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateArrayType(\n+    LLVMRustDIBuilderRef Builder,\n     uint64_t Size,\n     uint64_t AlignInBits,\n-    LLVMMetadataRef Ty,\n-    LLVMMetadataRef Subscripts) {\n+    LLVMRustMetadataRef Ty,\n+    LLVMRustMetadataRef Subscripts) {\n     return wrap(Builder->createArrayType(Size, AlignInBits,\n         unwrapDI<DIType>(Ty),\n         DINodeArray(unwrapDI<MDTuple>(Subscripts))\n     ));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateVectorType(\n-    DIBuilderRef Builder,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVectorType(\n+    LLVMRustDIBuilderRef Builder,\n     uint64_t Size,\n     uint64_t AlignInBits,\n-    LLVMMetadataRef Ty,\n-    LLVMMetadataRef Subscripts) {\n+    LLVMRustMetadataRef Ty,\n+    LLVMRustMetadataRef Subscripts) {\n     return wrap(Builder->createVectorType(Size, AlignInBits,\n         unwrapDI<DIType>(Ty),\n         DINodeArray(unwrapDI<MDTuple>(Subscripts))\n     ));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderGetOrCreateSubrange(\n-    DIBuilderRef Builder,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderGetOrCreateSubrange(\n+    LLVMRustDIBuilderRef Builder,\n     int64_t Lo,\n     int64_t Count) {\n     return wrap(Builder->getOrCreateSubrange(Lo, Count));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderGetOrCreateArray(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef* Ptr,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderGetOrCreateArray(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef* Ptr,\n     unsigned Count) {\n     Metadata **DataValue = unwrap(Ptr);\n     return wrap(Builder->getOrCreateArray(\n         ArrayRef<Metadata*>(DataValue, Count)).get());\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd(\n-    DIBuilderRef Builder,\n+extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareAtEnd(\n+    LLVMRustDIBuilderRef Builder,\n     LLVMValueRef Val,\n-    LLVMMetadataRef VarInfo,\n+    LLVMRustMetadataRef VarInfo,\n     int64_t* AddrOps,\n     unsigned AddrOpsCount,\n     LLVMValueRef DL,\n@@ -566,10 +617,10 @@ extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd(\n         unwrap(InsertAtEnd)));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareBefore(\n-    DIBuilderRef Builder,\n+extern \"C\" LLVMValueRef LLVMRustDIBuilderInsertDeclareBefore(\n+    LLVMRustDIBuilderRef Builder,\n     LLVMValueRef Val,\n-    LLVMMetadataRef VarInfo,\n+    LLVMRustMetadataRef VarInfo,\n     int64_t* AddrOps,\n     unsigned AddrOpsCount,\n     LLVMValueRef DL,\n@@ -583,24 +634,24 @@ extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareBefore(\n         unwrap<Instruction>(InsertBefore)));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateEnumerator(\n-    DIBuilderRef Builder,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateEnumerator(\n+    LLVMRustDIBuilderRef Builder,\n     const char* Name,\n     uint64_t Val)\n {\n     return wrap(Builder->createEnumerator(Name, Val));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateEnumerationType(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef Scope,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef Scope,\n     const char* Name,\n-    LLVMMetadataRef File,\n+    LLVMRustMetadataRef File,\n     unsigned LineNumber,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n-    LLVMMetadataRef Elements,\n-    LLVMMetadataRef ClassType)\n+    LLVMRustMetadataRef Elements,\n+    LLVMRustMetadataRef ClassType)\n {\n     return wrap(Builder->createEnumerationType(\n         unwrapDI<DIDescriptor>(Scope),\n@@ -613,16 +664,16 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateEnumerationType(\n         unwrapDI<DIType>(ClassType)));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateUnionType(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef Scope,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateUnionType(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef Scope,\n     const char* Name,\n-    LLVMMetadataRef File,\n+    LLVMRustMetadataRef File,\n     unsigned LineNumber,\n     uint64_t SizeInBits,\n     uint64_t AlignInBits,\n     unsigned Flags,\n-    LLVMMetadataRef Elements,\n+    LLVMRustMetadataRef Elements,\n     unsigned RunTimeLang,\n     const char* UniqueId)\n {\n@@ -640,12 +691,12 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateUnionType(\n         ));\n }\n \n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateTemplateTypeParameter(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef Scope,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateTemplateTypeParameter(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef Scope,\n     const char* Name,\n-    LLVMMetadataRef Ty,\n-    LLVMMetadataRef File,\n+    LLVMRustMetadataRef Ty,\n+    LLVMRustMetadataRef File,\n     unsigned LineNo,\n     unsigned ColumnNo)\n {\n@@ -656,21 +707,11 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateTemplateTypeParameter(\n       ));\n }\n \n-extern \"C\" int64_t LLVMDIBuilderCreateOpDeref()\n-{\n-    return dwarf::DW_OP_deref;\n-}\n-\n-extern \"C\" int64_t LLVMDIBuilderCreateOpPlus()\n-{\n-    return dwarf::DW_OP_plus;\n-}\n-\n-extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateNameSpace(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef Scope,\n+extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateNameSpace(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef Scope,\n     const char* Name,\n-    LLVMMetadataRef File,\n+    LLVMRustMetadataRef File,\n     unsigned LineNo)\n {\n     return wrap(Builder->createNameSpace(\n@@ -680,22 +721,22 @@ extern \"C\" LLVMMetadataRef LLVMDIBuilderCreateNameSpace(\n         LineNo));\n }\n \n-extern \"C\" void LLVMDICompositeTypeSetTypeArray(\n-    DIBuilderRef Builder,\n-    LLVMMetadataRef CompositeType,\n-    LLVMMetadataRef TypeArray)\n+extern \"C\" void LLVMRustDICompositeTypeSetTypeArray(\n+    LLVMRustDIBuilderRef Builder,\n+    LLVMRustMetadataRef CompositeType,\n+    LLVMRustMetadataRef TypeArray)\n {\n     DICompositeType *tmp = unwrapDI<DICompositeType>(CompositeType);\n     Builder->replaceArrays(tmp, DINodeArray(unwrap<MDTuple>(TypeArray)));\n }\n \n-extern \"C\" LLVMValueRef LLVMDIBuilderCreateDebugLocation(\n+extern \"C\" LLVMValueRef LLVMRustDIBuilderCreateDebugLocation(\n   LLVMContextRef Context,\n   unsigned Line,\n   unsigned Column,\n-  LLVMMetadataRef Scope,\n-  LLVMMetadataRef InlinedAt) {\n-\n+  LLVMRustMetadataRef Scope,\n+  LLVMRustMetadataRef InlinedAt)\n+{\n     LLVMContext& context = *unwrap(Context);\n \n     DebugLoc debug_loc = DebugLoc::get(Line,\n@@ -706,12 +747,22 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateDebugLocation(\n     return wrap(MetadataAsValue::get(context, debug_loc.getAsMDNode()));\n }\n \n-extern \"C\" void LLVMWriteTypeToString(LLVMTypeRef Type, RustStringRef str) {\n+extern \"C\" int64_t LLVMRustDIBuilderCreateOpDeref()\n+{\n+    return dwarf::DW_OP_deref;\n+}\n+\n+extern \"C\" int64_t LLVMRustDIBuilderCreateOpPlus()\n+{\n+    return dwarf::DW_OP_plus;\n+}\n+\n+extern \"C\" void LLVMRustWriteTypeToString(LLVMTypeRef Type, RustStringRef str) {\n     raw_rust_string_ostream os(str);\n     unwrap<llvm::Type>(Type)->print(os);\n }\n \n-extern \"C\" void LLVMWriteValueToString(LLVMValueRef Value, RustStringRef str) {\n+extern \"C\" void LLVMRustWriteValueToString(LLVMValueRef Value, RustStringRef str) {\n     raw_rust_string_ostream os(str);\n     os << \"(\";\n     unwrap<llvm::Value>(Value)->getType()->print(os);\n@@ -746,11 +797,33 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     return true;\n }\n \n+enum class LLVMRustDLLStorageClassTypes {\n+    Other,\n+    Default,\n+    DllImport,\n+    DllExport,\n+};\n+\n+static GlobalValue::DLLStorageClassTypes\n+from_rust(LLVMRustDLLStorageClassTypes Class)\n+{\n+    switch (Class) {\n+    case LLVMRustDLLStorageClassTypes::Default:\n+        return GlobalValue::DefaultStorageClass;\n+    case LLVMRustDLLStorageClassTypes::DllImport:\n+        return GlobalValue::DLLImportStorageClass;\n+    case LLVMRustDLLStorageClassTypes::DllExport:\n+        return GlobalValue::DLLExportStorageClass;\n+    default:\n+        abort();\n+  }\n+}\n+\n extern \"C\" void\n LLVMRustSetDLLStorageClass(LLVMValueRef Value,\n-                           GlobalValue::DLLStorageClassTypes Class) {\n+                           LLVMRustDLLStorageClassTypes Class) {\n     GlobalValue *V = unwrap<GlobalValue>(Value);\n-    V->setDLLStorageClass(Class);\n+    V->setDLLStorageClass(from_rust(Class));\n }\n \n // Note that the two following functions look quite similar to the\n@@ -768,7 +841,7 @@ inline section_iterator *unwrap(LLVMSectionIteratorRef SI) {\n     return reinterpret_cast<section_iterator*>(SI);\n }\n \n-extern \"C\" int\n+extern \"C\" size_t\n LLVMRustGetSectionName(LLVMSectionIteratorRef SI, const char **ptr) {\n     StringRef ret;\n     if (std::error_code ec = (*unwrap(SI))->getName(ret))\n@@ -787,13 +860,13 @@ DEFINE_SIMPLE_CONVERSION_FUNCTIONS(Twine, LLVMTwineRef)\n DEFINE_SIMPLE_CONVERSION_FUNCTIONS(DebugLoc, LLVMDebugLocRef)\n \n extern \"C\" void\n-LLVMWriteTwineToString(LLVMTwineRef T, RustStringRef str) {\n+LLVMRustWriteTwineToString(LLVMTwineRef T, RustStringRef str) {\n     raw_rust_string_ostream os(str);\n     unwrap(T)->print(os);\n }\n \n extern \"C\" void\n-LLVMUnpackOptimizationDiagnostic(\n+LLVMRustUnpackOptimizationDiagnostic(\n     LLVMDiagnosticInfoRef di,\n     const char **pass_name_out,\n     LLVMValueRef *function_out,\n@@ -811,7 +884,7 @@ LLVMUnpackOptimizationDiagnostic(\n }\n \n extern \"C\" void\n-LLVMUnpackInlineAsmDiagnostic(\n+LLVMRustUnpackInlineAsmDiagnostic(\n     LLVMDiagnosticInfoRef di,\n     unsigned *cookie_out,\n     LLVMTwineRef *message_out,\n@@ -826,17 +899,68 @@ LLVMUnpackInlineAsmDiagnostic(\n     *instruction_out = wrap(ia->getInstruction());\n }\n \n-extern \"C\" void LLVMWriteDiagnosticInfoToString(LLVMDiagnosticInfoRef di, RustStringRef str) {\n+extern \"C\" void LLVMRustWriteDiagnosticInfoToString(LLVMDiagnosticInfoRef di, RustStringRef str) {\n     raw_rust_string_ostream os(str);\n     DiagnosticPrinterRawOStream dp(os);\n     unwrap(di)->print(dp);\n }\n \n-extern \"C\" int LLVMGetDiagInfoKind(LLVMDiagnosticInfoRef di) {\n-    return unwrap(di)->getKind();\n+enum class LLVMRustDiagnosticKind {\n+    Other,\n+    InlineAsm,\n+    StackSize,\n+    DebugMetadataVersion,\n+    SampleProfile,\n+    OptimizationRemark,\n+    OptimizationRemarkMissed,\n+    OptimizationRemarkAnalysis,\n+    OptimizationRemarkAnalysisFPCommute,\n+    OptimizationRemarkAnalysisAliasing,\n+    OptimizationRemarkOther,\n+    OptimizationFailure,\n+};\n+\n+static LLVMRustDiagnosticKind\n+to_rust(DiagnosticKind kind)\n+{\n+    switch (kind) {\n+    case DK_InlineAsm:\n+        return LLVMRustDiagnosticKind::InlineAsm;\n+    case DK_StackSize:\n+        return LLVMRustDiagnosticKind::StackSize;\n+    case DK_DebugMetadataVersion:\n+        return LLVMRustDiagnosticKind::DebugMetadataVersion;\n+    case DK_SampleProfile:\n+        return LLVMRustDiagnosticKind::SampleProfile;\n+    case DK_OptimizationRemark:\n+        return LLVMRustDiagnosticKind::OptimizationRemark;\n+    case DK_OptimizationRemarkMissed:\n+        return LLVMRustDiagnosticKind::OptimizationRemarkMissed;\n+    case DK_OptimizationRemarkAnalysis:\n+        return LLVMRustDiagnosticKind::OptimizationRemarkAnalysis;\n+#if LLVM_VERSION_MINOR >= 8\n+    case DK_OptimizationRemarkAnalysisFPCommute:\n+        return LLVMRustDiagnosticKind::OptimizationRemarkAnalysisFPCommute;\n+    case DK_OptimizationRemarkAnalysisAliasing:\n+        return LLVMRustDiagnosticKind::OptimizationRemarkAnalysisAliasing;\n+#endif\n+    default:\n+#if LLVM_VERSION_MINOR >= 9\n+        return (kind >= DK_FirstRemark && kind <= DK_LastRemark) ?\n+            LLVMRustDiagnosticKind::OptimizationRemarkOther :\n+            LLVMRustDiagnosticKind::Other;\n+#else\n+        return LLVMRustDiagnosticKind::Other;\n+#endif\n+  }\n+}\n+\n+\n+extern \"C\" LLVMRustDiagnosticKind LLVMRustGetDiagInfoKind(LLVMDiagnosticInfoRef di) {\n+    return to_rust((DiagnosticKind) unwrap(di)->getKind());\n }\n \n-extern \"C\" void LLVMWriteDebugLocToString(\n+extern \"C\" void LLVMRustWriteDebugLocToString(\n     LLVMContextRef C,\n     LLVMDebugLocRef dl,\n     RustStringRef str)\n@@ -847,15 +971,17 @@ extern \"C\" void LLVMWriteDebugLocToString(\n \n DEFINE_SIMPLE_CONVERSION_FUNCTIONS(SMDiagnostic, LLVMSMDiagnosticRef)\n \n-extern \"C\" void LLVMSetInlineAsmDiagnosticHandler(\n+// FIXME(type-audit): assume this function-pointer type does not change\n+extern \"C\" void LLVMRustSetInlineAsmDiagnosticHandler(\n     LLVMContextRef C,\n     LLVMContext::InlineAsmDiagHandlerTy H,\n     void *CX)\n {\n     unwrap(C)->setInlineAsmDiagnosticHandler(H, CX);\n }\n \n-extern \"C\" void LLVMWriteSMDiagnosticToString(LLVMSMDiagnosticRef d, RustStringRef str) {\n+extern \"C\" void LLVMRustWriteSMDiagnosticToString(LLVMSMDiagnosticRef d,\n+\t\t\t\t\t\t  RustStringRef str) {\n     raw_rust_string_ostream os(str);\n     unwrap(d)->print(\"\", os);\n }\n@@ -902,6 +1028,8 @@ LLVMRustBuildCleanupRet(LLVMBuilderRef Builder,\n #endif\n }\n \n+// FIXME: to here.\n+\n extern \"C\" LLVMValueRef\n LLVMRustBuildCatchPad(LLVMBuilderRef Builder,\n                       LLVMValueRef ParentPad,"}]}