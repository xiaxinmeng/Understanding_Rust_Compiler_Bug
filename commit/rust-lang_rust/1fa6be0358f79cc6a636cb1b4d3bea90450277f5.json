{"sha": "1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYTZiZTAzNThmNzljYzZhNjM2Y2IxYjRkM2JlYTkwNDUwMjc3ZjU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-24T17:41:16Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-24T18:37:29Z"}, "message": "resolve: Remove `rustc_attrs` as a standalone feature gate\n\nNow it only gates specific built-in attributes", "tree": {"sha": "0f6c957b936b5783a838399169ddd877b7944855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f6c957b936b5783a838399169ddd877b7944855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "html_url": "https://github.com/rust-lang/rust/commit/1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "374ab25585f0a817fe7bd6986737f12347b12d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/374ab25585f0a817fe7bd6986737f12347b12d0b", "html_url": "https://github.com/rust-lang/rust/commit/374ab25585f0a817fe7bd6986737f12347b12d0b"}], "stats": {"total": 173, "additions": 75, "deletions": 98}, "files": [{"sha": "a783cfa4811fd8988cb3852dbbb2cbeca1ae9c65", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "patch": "@@ -20,7 +20,6 @@ use rustc_feature::is_builtin_attr_name;\n use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id;\n use rustc_session::lint::builtin::UNUSED_MACROS;\n-use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n@@ -397,20 +396,16 @@ impl<'a> Resolver<'a> {\n             Err(Determinacy::Undetermined) => return Err(Indeterminate),\n         };\n \n-        // Report errors and enforce feature gates for the resolved macro.\n-        let features = self.session.features_untracked();\n+        // Report errors for the resolved macro.\n         for segment in &path.segments {\n             if let Some(args) = &segment.args {\n                 self.session.span_err(args.span(), \"generic arguments in macro path\");\n             }\n-            if kind == MacroKind::Attr\n-                && !features.rustc_attrs\n-                && segment.ident.as_str().starts_with(\"rustc\")\n-            {\n-                let msg =\n-                    \"attributes starting with `rustc` are reserved for use by the `rustc` compiler\";\n-                feature_err(&self.session.parse_sess, sym::rustc_attrs, segment.ident.span, msg)\n-                    .emit();\n+            if kind == MacroKind::Attr && segment.ident.as_str().starts_with(\"rustc\") {\n+                self.session.span_err(\n+                    segment.ident.span,\n+                    \"attributes starting with `rustc` are reserved for use by the `rustc` compiler\",\n+                );\n             }\n         }\n "}, {"sha": "f8cb1640cb4c16d8a7dc770cb610bd22d9298a3c", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "patch": "@@ -2,19 +2,19 @@\n \n #![feature(plugin_registrar, rustc_private)]\n #![feature(box_syntax)]\n+\n extern crate rustc_driver;\n extern crate rustc_hir;\n-extern crate rustc_span;\n-#[macro_use]\n extern crate rustc_lint;\n+extern crate rustc_span;\n #[macro_use]\n extern crate rustc_session;\n extern crate rustc_ast;\n \n+use rustc_ast::attr;\n use rustc_driver::plugin::Registry;\n use rustc_lint::{LateContext, LateLintPass, LintContext, LintPass};\n use rustc_span::symbol::Symbol;\n-use rustc_ast::attr;\n \n macro_rules! fake_lint_pass {\n     ($struct:ident, $($attr:expr),*) => {\n@@ -50,17 +50,17 @@ declare_lint!(CRATE_NOT_GREEN, Warn, \"crate not marked with #![crate_green]\");\n \n fake_lint_pass! {\n     PassOkay,\n-    Symbol::intern(\"rustc_crate_okay\")\n+    Symbol::intern(\"crate_okay\")\n }\n \n fake_lint_pass! {\n     PassRedBlue,\n-    Symbol::intern(\"rustc_crate_red\"), Symbol::intern(\"rustc_crate_blue\")\n+    Symbol::intern(\"crate_red\"), Symbol::intern(\"crate_blue\")\n }\n \n fake_lint_pass! {\n     PassGreyGreen,\n-    Symbol::intern(\"rustc_crate_grey\"), Symbol::intern(\"rustc_crate_green\")\n+    Symbol::intern(\"crate_grey\"), Symbol::intern(\"crate_green\")\n }\n \n #[plugin_registrar]"}, {"sha": "56a560acbb44a26c16c58444e7322df5e6100add", "filename": "src/test/ui-fulldeps/auxiliary/macro-crate-test.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/374ab25585f0a817fe7bd6986737f12347b12d0b/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fmacro-crate-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/374ab25585f0a817fe7bd6986737f12347b12d0b/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fmacro-crate-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fmacro-crate-test.rs?ref=374ab25585f0a817fe7bd6986737f12347b12d0b", "patch": "@@ -1,33 +0,0 @@\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-#![feature(rustc_private)]\n-\n-extern crate rustc_ast;\n-extern crate rustc;\n-extern crate rustc_driver;\n-extern crate proc_macro;\n-\n-use proc_macro::{TokenTree, TokenStream};\n-\n-#[proc_macro_attribute]\n-pub fn rustc_duplicate(attr: TokenStream, item: TokenStream) -> TokenStream {\n-    let mut new_name = Some(attr.into_iter().nth(0).unwrap());\n-    let mut encountered_idents = 0;\n-    let input = item.to_string();\n-    let ret = item.into_iter().map(move |token| match token {\n-        TokenTree::Ident(_) if encountered_idents == 1 => {\n-            encountered_idents += 1;\n-            new_name.take().unwrap()\n-        }\n-        TokenTree::Ident(_) => {\n-            encountered_idents += 1;\n-            token\n-        }\n-        _ => token\n-    }).collect::<TokenStream>();\n-    let mut input_again = input.parse::<TokenStream>().unwrap();\n-    input_again.extend(ret);\n-    input_again\n-}"}, {"sha": "c031dbc7155db2c49888f7c8f91340f8ecb9a289", "filename": "src/test/ui-fulldeps/issue-15778-pass.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs?ref=1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "patch": "@@ -1,23 +1,23 @@\n-// run-pass\n+// check-pass\n // aux-build:lint-for-crate-rpass.rs\n // ignore-stage1\n // compile-flags: -D crate-not-okay\n \n-#![feature(plugin, register_attr, custom_inner_attributes, rustc_attrs)]\n+#![feature(plugin, register_attr, custom_inner_attributes)]\n \n #![register_attr(\n-    rustc_crate_okay,\n-    rustc_crate_blue,\n-    rustc_crate_red,\n-    rustc_crate_grey,\n-    rustc_crate_green,\n+    crate_okay,\n+    crate_blue,\n+    crate_red,\n+    crate_grey,\n+    crate_green,\n )]\n \n #![plugin(lint_for_crate_rpass)] //~ WARNING compiler plugins are deprecated\n-#![rustc_crate_okay]\n-#![rustc_crate_blue]\n-#![rustc_crate_red]\n-#![rustc_crate_grey]\n-#![rustc_crate_green]\n+#![crate_okay]\n+#![crate_blue]\n+#![crate_red]\n+#![crate_grey]\n+#![crate_green]\n \n fn main() {}"}, {"sha": "1517a7a5c731ab0dfc42d2fae861f97c3698894d", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr?ref=1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "patch": "@@ -1,38 +1,32 @@\n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/feature-gate-rustc-attrs.rs:8:3\n    |\n LL | #[rustc::unknown]\n    |   ^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: expected attribute, found macro `rustc::unknown`\n   --> $DIR/feature-gate-rustc-attrs.rs:8:3\n    |\n LL | #[rustc::unknown]\n    |   ^^^^^^^^^^^^^^ not an attribute\n \n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/feature-gate-rustc-attrs.rs:13:12\n    |\n LL | #[unknown::rustc]\n    |            ^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: expected attribute, found macro `unknown::rustc`\n   --> $DIR/feature-gate-rustc-attrs.rs:13:3\n    |\n LL | #[unknown::rustc]\n    |   ^^^^^^^^^^^^^^ not an attribute\n \n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/feature-gate-rustc-attrs.rs:20:3\n    |\n LL | #[rustc_unknown]\n    |   ^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: cannot find attribute `rustc_unknown` in this scope\n   --> $DIR/feature-gate-rustc-attrs.rs:20:3"}, {"sha": "b8f82b46f094513d0b85ae1163f3b77663b601cc", "filename": "src/test/ui/proc-macro/auxiliary/duplicate.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fduplicate.rs?ref=1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "patch": "@@ -0,0 +1,32 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![deny(unused)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro_attribute]\n+pub fn duplicate(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    let mut new_name = Some(attr.into_iter().nth(0).unwrap());\n+    let mut encountered_idents = 0;\n+    let input = item.to_string();\n+    let ret = item\n+        .into_iter()\n+        .map(move |token| match token {\n+            TokenTree::Ident(_) if encountered_idents == 1 => {\n+                encountered_idents += 1;\n+                new_name.take().unwrap()\n+            }\n+            TokenTree::Ident(_) => {\n+                encountered_idents += 1;\n+                token\n+            }\n+            _ => token,\n+        })\n+        .collect::<TokenStream>();\n+    let mut input_again = input.parse::<TokenStream>().unwrap();\n+    input_again.extend(ret);\n+    input_again\n+}"}, {"sha": "5974fa4c554ca33974d48832bfbe3a991e610de6", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr?ref=1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "patch": "@@ -1,12 +1,10 @@\n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/expand-to-unstable-2.rs:10:10\n    |\n LL | #[derive(Unstable)]\n    |          ^^^^^^^^\n    |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "ec57dec14ed203b39fd99a40cc6e92d161f68510", "filename": "src/test/ui/proc-macro/macro-crate-multi-decorator.rs", "status": "renamed", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-crate-multi-decorator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-crate-multi-decorator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-crate-multi-decorator.rs?ref=1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "patch": "@@ -1,36 +1,33 @@\n-// check-pass\n-// aux-build:macro-crate-test.rs\n-// ignore-stage1\n+// The duplicate macro will create a copy of the item with the given identifier.\n \n-#![feature(rustc_attrs)]\n+// check-pass\n+// aux-build:duplicate.rs\n \n #[macro_use]\n-extern crate macro_crate_test;\n-\n-// The duplicate macro will create a copy of the item with the given identifier.\n+extern crate duplicate;\n \n-#[rustc_duplicate(MyCopy)]\n+#[duplicate(MyCopy)]\n struct MyStruct {\n-    number: i32\n+    number: i32,\n }\n \n trait TestTrait {\n-    #[rustc_duplicate(TestType2)]\n+    #[duplicate(TestType2)]\n     type TestType;\n \n-    #[rustc_duplicate(required_fn2)]\n+    #[duplicate(required_fn2)]\n     fn required_fn(&self);\n \n-    #[rustc_duplicate(provided_fn2)]\n-    fn provided_fn(&self) { }\n+    #[duplicate(provided_fn2)]\n+    fn provided_fn(&self) {}\n }\n \n impl TestTrait for MyStruct {\n-    #[rustc_duplicate(TestType2)]\n+    #[duplicate(TestType2)]\n     type TestType = f64;\n \n-    #[rustc_duplicate(required_fn2)]\n-    fn required_fn(&self) { }\n+    #[duplicate(required_fn2)]\n+    fn required_fn(&self) {}\n }\n \n fn main() {", "previous_filename": "src/test/ui-fulldeps/macro-crate-multi-decorator.rs"}, {"sha": "e55b58bef28554fda81ac849b1b2b7e4b574c9de", "filename": "src/test/ui/reserved/reserved-attr-on-macro.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr?ref=1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "patch": "@@ -1,10 +1,8 @@\n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/reserved-attr-on-macro.rs:1:3\n    |\n LL | #[rustc_attribute_should_be_reserved]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: cannot determine resolution for the macro `foo`\n   --> $DIR/reserved-attr-on-macro.rs:10:5\n@@ -22,4 +20,3 @@ LL | #[rustc_attribute_should_be_reserved]\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "1c307f0e2c19cb9278196a34a763ec8153c166f5", "filename": "src/test/ui/suggestions/attribute-typos.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1fa6be0358f79cc6a636cb1b4d3bea90450277f5/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr?ref=1fa6be0358f79cc6a636cb1b4d3bea90450277f5", "patch": "@@ -1,10 +1,8 @@\n-error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+error: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/attribute-typos.rs:11:3\n    |\n LL | #[rustc_err]\n    |   ^^^^^^^^^\n-   |\n-   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: cannot find attribute `rustc_err` in this scope\n   --> $DIR/attribute-typos.rs:11:3\n@@ -31,4 +29,3 @@ LL | #[deprcated]\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0658`."}]}