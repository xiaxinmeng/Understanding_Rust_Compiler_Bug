{"sha": "78793869d72fb21117387ee365871f61f9c6e64a", "node_id": "C_kwDOAAsO6NoAKDc4NzkzODY5ZDcyZmIyMTExNzM4N2VlMzY1ODcxZjYxZjljNmU2NGE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-14T14:00:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-14T14:00:33Z"}, "message": "Rollup merge of #106249 - Ezrashaw:suggest-test-tool, r=jyn514,albertlarsan68\n\nCreate \"suggested tests\" tool in `rustbuild`\n\nNot the claimed person in #97339 but:\nI've done a very rough implementation of this feature in-tree. I'm very new to `rustc` development (outside of docs) so some help would be greatly appreciated. The UI of this new subcommand obviously will change and I need some mentoring with the `--run` flag.\n\nr? ```@jyn514```", "tree": {"sha": "1cb5b9860ef6fec0c64d27c2f14c7bb02d8d318c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cb5b9860ef6fec0c64d27c2f14c7bb02d8d318c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78793869d72fb21117387ee365871f61f9c6e64a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkOVyBCRBK7hj4Ov3rIwAAROIIAFAobjATf6S4dcPvkpxyT12F\n927Xh0MCndymeXpbg/7weYWB7i6Gc00Mwz/rQKzDh7YYVZhuJt8lYhZlwVFS4OFm\nsYvlk31b2FCy8z+WmJol/I8JHAjl14MqGvLcmF35QcAJ/n+tPMEi0arz/0Xj/UJJ\nOCL3GRS+AaypF3Zw+V5bwqF92bJ1CkddBVkGk7WPUp1rOjL9XMveNosFEDLh2+9b\ncUGewjjgYYAyt4AwH/BrZ7eevjgBa+yDZofZbQnNHC30gMfWV8AjC2TKBzHhEdWT\n85XD99jruKRUAnhutxD0f3RtWEIgKvhGT6RMDuI3V7h7yDe9W5d9LC5DM9D3kbM=\n=efqZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 1cb5b9860ef6fec0c64d27c2f14c7bb02d8d318c\nparent 9aa24fd8fb6f59381f7c3af8a8b13e6bd5274828\nparent a159dcda6292c03faf3adb37f0a176ca7a35f0dc\nauthor Yuki Okushi <jtitor@2k36.org> 1681480833 +0900\ncommitter GitHub <noreply@github.com> 1681480833 +0900\n\nRollup merge of #106249 - Ezrashaw:suggest-test-tool, r=jyn514,albertlarsan68\n\nCreate \"suggested tests\" tool in `rustbuild`\n\nNot the claimed person in #97339 but:\nI've done a very rough implementation of this feature in-tree. I'm very new to `rustc` development (outside of docs) so some help would be greatly appreciated. The UI of this new subcommand obviously will change and I need some mentoring with the `--run` flag.\n\nr? ```@jyn514```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78793869d72fb21117387ee365871f61f9c6e64a", "html_url": "https://github.com/rust-lang/rust/commit/78793869d72fb21117387ee365871f61f9c6e64a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78793869d72fb21117387ee365871f61f9c6e64a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aa24fd8fb6f59381f7c3af8a8b13e6bd5274828", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa24fd8fb6f59381f7c3af8a8b13e6bd5274828", "html_url": "https://github.com/rust-lang/rust/commit/9aa24fd8fb6f59381f7c3af8a8b13e6bd5274828"}, {"sha": "a159dcda6292c03faf3adb37f0a176ca7a35f0dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a159dcda6292c03faf3adb37f0a176ca7a35f0dc", "html_url": "https://github.com/rust-lang/rust/commit/a159dcda6292c03faf3adb37f0a176ca7a35f0dc"}], "stats": {"total": 410, "additions": 385, "deletions": 25}, "files": [{"sha": "12be36ef8612672afe7cac650126c840101c853b", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -3451,9 +3451,9 @@ dependencies = [\n \n [[package]]\n name = \"once_cell\"\n-version = \"1.16.0\"\n+version = \"1.17.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"86f0b0d4bf799edbc74508c1e8bf170ff5f41238e5f8225603ca7caaae2b7860\"\n+checksum = \"b7e5500299e16ebb147ae15a00a942af264cf3688f47923b8fc2cd5858f23ad3\"\n \n [[package]]\n name = \"opener\"\n@@ -6101,6 +6101,15 @@ version = \"2.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"6bdef32e8150c2a081110b42772ffe7d7c9032b606bc226c8260fd97e0976601\"\n \n+[[package]]\n+name = \"suggest-tests\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"build_helper\",\n+ \"glob\",\n+ \"once_cell\",\n+]\n+\n [[package]]\n name = \"syn\"\n version = \"1.0.102\""}, {"sha": "1fcaaf6ddc4d0a09b417bf1bfd1ecc6b63c8e2d0", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -44,6 +44,7 @@ members = [\n   \"src/tools/lld-wrapper\",\n   \"src/tools/collect-license-metadata\",\n   \"src/tools/generate-copyright\",\n+  \"src/tools/suggest-tests\",\n ]\n \n exclude = ["}, {"sha": "e959ea06f8b69c50ab0572e56723a90aa70f0c4e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -591,6 +591,7 @@ pub enum Kind {\n     Install,\n     Run,\n     Setup,\n+    Suggest,\n }\n \n impl Kind {\n@@ -610,6 +611,7 @@ impl Kind {\n             \"install\" => Kind::Install,\n             \"run\" | \"r\" => Kind::Run,\n             \"setup\" => Kind::Setup,\n+            \"suggest\" => Kind::Suggest,\n             _ => return None,\n         })\n     }\n@@ -629,6 +631,7 @@ impl Kind {\n             Kind::Install => \"install\",\n             Kind::Run => \"run\",\n             Kind::Setup => \"setup\",\n+            Kind::Suggest => \"suggest\",\n         }\n     }\n }\n@@ -709,6 +712,7 @@ impl<'a> Builder<'a> {\n                 test::CrateRustdoc,\n                 test::CrateRustdocJsonTypes,\n                 test::CrateJsonDocLint,\n+                test::SuggestTestsCrate,\n                 test::Linkcheck,\n                 test::TierCheck,\n                 test::ReplacePlaceholderTest,\n@@ -827,7 +831,7 @@ impl<'a> Builder<'a> {\n             Kind::Setup => describe!(setup::Profile, setup::Hook, setup::Link, setup::Vscode),\n             Kind::Clean => describe!(clean::CleanAll, clean::Rustc, clean::Std),\n             // special-cased in Build::build()\n-            Kind::Format => vec![],\n+            Kind::Format | Kind::Suggest => vec![],\n         }\n     }\n \n@@ -891,6 +895,7 @@ impl<'a> Builder<'a> {\n             Subcommand::Run { ref paths, .. } => (Kind::Run, &paths[..]),\n             Subcommand::Clean { ref paths, .. } => (Kind::Clean, &paths[..]),\n             Subcommand::Format { .. } => (Kind::Format, &[][..]),\n+            Subcommand::Suggest { .. } => (Kind::Suggest, &[][..]),\n             Subcommand::Setup { profile: ref path } => (\n                 Kind::Setup,\n                 path.as_ref().map_or([].as_slice(), |path| std::slice::from_ref(path)),\n@@ -900,6 +905,21 @@ impl<'a> Builder<'a> {\n         Self::new_internal(build, kind, paths.to_owned())\n     }\n \n+    /// Creates a new standalone builder for use outside of the normal process\n+    pub fn new_standalone(\n+        build: &mut Build,\n+        kind: Kind,\n+        paths: Vec<PathBuf>,\n+        stage: Option<u32>,\n+    ) -> Builder<'_> {\n+        // FIXME: don't mutate `build`\n+        if let Some(stage) = stage {\n+            build.config.stage = stage;\n+        }\n+\n+        Self::new_internal(build, kind, paths.to_owned())\n+    }\n+\n     pub fn execute_cli(&self) {\n         self.run_step_descriptions(&Builder::get_step_descriptions(self.kind), &self.paths);\n     }"}, {"sha": "cc3b3bc25f3d53bfba0c14fb57909972e70b0ed6", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -56,8 +56,7 @@ pub enum DryRun {\n /// filled out from the decoded forms of the structs below. For documentation\n /// each field, see the corresponding fields in\n /// `config.example.toml`.\n-#[derive(Default)]\n-#[cfg_attr(test, derive(Clone))]\n+#[derive(Default, Clone)]\n pub struct Config {\n     pub changelog_seen: Option<usize>,\n     pub ccache: Option<String>,\n@@ -240,32 +239,28 @@ pub struct Config {\n     pub initial_rustfmt: RefCell<RustfmtState>,\n }\n \n-#[derive(Default, Deserialize)]\n-#[cfg_attr(test, derive(Clone))]\n+#[derive(Default, Deserialize, Clone)]\n pub struct Stage0Metadata {\n     pub compiler: CompilerMetadata,\n     pub config: Stage0Config,\n     pub checksums_sha256: HashMap<String, String>,\n     pub rustfmt: Option<RustfmtMetadata>,\n }\n-#[derive(Default, Deserialize)]\n-#[cfg_attr(test, derive(Clone))]\n+#[derive(Default, Deserialize, Clone)]\n pub struct CompilerMetadata {\n     pub date: String,\n     pub version: String,\n }\n \n-#[derive(Default, Deserialize)]\n-#[cfg_attr(test, derive(Clone))]\n+#[derive(Default, Deserialize, Clone)]\n pub struct Stage0Config {\n     pub dist_server: String,\n     pub artifacts_server: String,\n     pub artifacts_with_llvm_assertions_server: String,\n     pub git_merge_commit_email: String,\n     pub nightly_branch: String,\n }\n-#[derive(Default, Deserialize)]\n-#[cfg_attr(test, derive(Clone))]\n+#[derive(Default, Deserialize, Clone)]\n pub struct RustfmtMetadata {\n     pub date: String,\n     pub version: String,\n@@ -443,8 +438,7 @@ impl PartialEq<&str> for TargetSelection {\n }\n \n /// Per-target configuration stored in the global configuration structure.\n-#[derive(Default)]\n-#[cfg_attr(test, derive(Clone))]\n+#[derive(Default, Clone)]\n pub struct Target {\n     /// Some(path to llvm-config) if using an external LLVM.\n     pub llvm_config: Option<PathBuf>,\n@@ -1396,7 +1390,8 @@ impl Config {\n             | Subcommand::Fix { .. }\n             | Subcommand::Run { .. }\n             | Subcommand::Setup { .. }\n-            | Subcommand::Format { .. } => flags.stage.unwrap_or(0),\n+            | Subcommand::Format { .. }\n+            | Subcommand::Suggest { .. } => flags.stage.unwrap_or(0),\n         };\n \n         // CI should always run stage 2 builds, unless it specifically states otherwise\n@@ -1421,7 +1416,8 @@ impl Config {\n                 | Subcommand::Fix { .. }\n                 | Subcommand::Run { .. }\n                 | Subcommand::Setup { .. }\n-                | Subcommand::Format { .. } => {}\n+                | Subcommand::Format { .. }\n+                | Subcommand::Suggest { .. } => {}\n             }\n         }\n "}, {"sha": "b6f5f31039838e6e8bf2e261c8a089b7dfe1ca6c", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -84,8 +84,7 @@ pub struct Flags {\n     pub free_args: Option<Vec<String>>,\n }\n \n-#[derive(Debug)]\n-#[cfg_attr(test, derive(Clone))]\n+#[derive(Debug, Clone)]\n pub enum Subcommand {\n     Build {\n         paths: Vec<PathBuf>,\n@@ -149,6 +148,9 @@ pub enum Subcommand {\n     Setup {\n         profile: Option<PathBuf>,\n     },\n+    Suggest {\n+        run: bool,\n+    },\n }\n \n impl Default for Subcommand {\n@@ -183,6 +185,7 @@ Subcommands:\n     install     Install distribution artifacts\n     run, r      Run tools contained in this repository\n     setup       Create a config.toml (making it easier to use `x.py` itself)\n+    suggest     Suggest a subset of tests to run, based on modified files\n \n To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         );\n@@ -349,6 +352,9 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             Kind::Run => {\n                 opts.optmulti(\"\", \"args\", \"arguments for the tool\", \"ARGS\");\n             }\n+            Kind::Suggest => {\n+                opts.optflag(\"\", \"run\", \"run suggested tests\");\n+            }\n             _ => {}\n         };\n \n@@ -565,7 +571,7 @@ Arguments:\n                     Profile::all_for_help(\"        \").trim_end()\n                 ));\n             }\n-            Kind::Bench | Kind::Clean | Kind::Dist | Kind::Install => {}\n+            Kind::Bench | Kind::Clean | Kind::Dist | Kind::Install | Kind::Suggest => {}\n         };\n         // Get any optional paths which occur after the subcommand\n         let mut paths = matches.free[1..].iter().map(|p| p.into()).collect::<Vec<PathBuf>>();\n@@ -626,6 +632,7 @@ Arguments:\n             Kind::Format => Subcommand::Format { check: matches.opt_present(\"check\"), paths },\n             Kind::Dist => Subcommand::Dist { paths },\n             Kind::Install => Subcommand::Install { paths },\n+            Kind::Suggest => Subcommand::Suggest { run: matches.opt_present(\"run\") },\n             Kind::Run => {\n                 if paths.is_empty() {\n                     println!(\"\\nrun requires at least a path!\\n\");\n@@ -734,6 +741,7 @@ impl Subcommand {\n             Subcommand::Install { .. } => Kind::Install,\n             Subcommand::Run { .. } => Kind::Run,\n             Subcommand::Setup { .. } => Kind::Setup,\n+            Subcommand::Suggest { .. } => Kind::Suggest,\n         }\n     }\n "}, {"sha": "1ecb52e75f190b31bebe166b8ab903f0120380a4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -58,6 +58,7 @@ mod render_tests;\n mod run;\n mod sanity;\n mod setup;\n+mod suggest;\n mod tarball;\n mod test;\n mod tool;\n@@ -190,6 +191,7 @@ pub enum GitRepo {\n /// although most functions are implemented as free functions rather than\n /// methods specifically on this structure itself (to make it easier to\n /// organize).\n+#[cfg_attr(not(feature = \"build-metrics\"), derive(Clone))]\n pub struct Build {\n     /// User-specified configuration from `config.toml`.\n     config: Config,\n@@ -243,7 +245,7 @@ pub struct Build {\n     metrics: metrics::BuildMetrics,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n struct Crate {\n     name: Interned<String>,\n     deps: HashSet<Interned<String>>,\n@@ -657,13 +659,20 @@ impl Build {\n             job::setup(self);\n         }\n \n-        if let Subcommand::Format { check, paths } = &self.config.cmd {\n-            return format::format(&builder::Builder::new(&self), *check, &paths);\n-        }\n-\n         // Download rustfmt early so that it can be used in rust-analyzer configs.\n         let _ = &builder::Builder::new(&self).initial_rustfmt();\n \n+        // hardcoded subcommands\n+        match &self.config.cmd {\n+            Subcommand::Format { check, paths } => {\n+                return format::format(&builder::Builder::new(&self), *check, &paths);\n+            }\n+            Subcommand::Suggest { run } => {\n+                return suggest::suggest(&builder::Builder::new(&self), *run);\n+            }\n+            _ => (),\n+        }\n+\n         {\n             let builder = builder::Builder::new(&self);\n             if let Some(path) = builder.paths.get(0) {"}, {"sha": "ff20ebec267720cf1ae1479c2a0009dae193c233", "filename": "src/bootstrap/suggest.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsuggest.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -0,0 +1,80 @@\n+#![cfg_attr(feature = \"build-metrics\", allow(unused))]\n+\n+use std::str::FromStr;\n+\n+use std::path::PathBuf;\n+\n+use crate::{\n+    builder::{Builder, Kind},\n+    tool::Tool,\n+};\n+\n+#[cfg(feature = \"build-metrics\")]\n+pub fn suggest(builder: &Builder<'_>, run: bool) {\n+    panic!(\"`x suggest` is not supported with `build-metrics`\")\n+}\n+\n+/// Suggests a list of possible `x.py` commands to run based on modified files in branch.\n+#[cfg(not(feature = \"build-metrics\"))]\n+pub fn suggest(builder: &Builder<'_>, run: bool) {\n+    let suggestions =\n+        builder.tool_cmd(Tool::SuggestTests).output().expect(\"failed to run `suggest-tests` tool\");\n+\n+    if !suggestions.status.success() {\n+        println!(\"failed to run `suggest-tests` tool ({})\", suggestions.status);\n+        println!(\n+            \"`suggest_tests` stdout:\\n{}`suggest_tests` stderr:\\n{}\",\n+            String::from_utf8(suggestions.stdout).unwrap(),\n+            String::from_utf8(suggestions.stderr).unwrap()\n+        );\n+        panic!(\"failed to run `suggest-tests`\");\n+    }\n+\n+    let suggestions = String::from_utf8(suggestions.stdout).unwrap();\n+    let suggestions = suggestions\n+        .lines()\n+        .map(|line| {\n+            let mut sections = line.split_ascii_whitespace();\n+\n+            // this code expects one suggestion per line in the following format:\n+            // <x_subcommand> {some number of flags} [optional stage number]\n+            let cmd = sections.next().unwrap();\n+            let stage = sections.next_back().map(|s| str::parse(s).ok()).flatten();\n+            let paths: Vec<PathBuf> = sections.map(|p| PathBuf::from_str(p).unwrap()).collect();\n+\n+            (cmd, stage, paths)\n+        })\n+        .collect::<Vec<_>>();\n+\n+    if !suggestions.is_empty() {\n+        println!(\"==== SUGGESTIONS ====\");\n+        for sug in &suggestions {\n+            print!(\"x {} \", sug.0);\n+            if let Some(stage) = sug.1 {\n+                print!(\"--stage {stage} \");\n+            }\n+\n+            for path in &sug.2 {\n+                print!(\"{} \", path.display());\n+            }\n+            println!();\n+        }\n+        println!(\"=====================\");\n+    } else {\n+        println!(\"No suggestions found!\");\n+        return;\n+    }\n+\n+    if run {\n+        for sug in suggestions {\n+            let mut build = builder.build.clone();\n+\n+            let builder =\n+                Builder::new_standalone(&mut build, Kind::parse(&sug.0).unwrap(), sug.2, sug.1);\n+\n+            builder.execute_cli()\n+        }\n+    } else {\n+        println!(\"help: consider using the `--run` flag to automatically run suggested tests\");\n+    }\n+}"}, {"sha": "00fc5b0815620d169dbae7a808926b7327772ad7", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -128,6 +128,42 @@ impl Step for CrateJsonDocLint {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct SuggestTestsCrate {\n+    host: TargetSelection,\n+}\n+\n+impl Step for SuggestTestsCrate {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/suggest-tests\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(SuggestTestsCrate { host: run.target });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        let bootstrap_host = builder.config.build;\n+        let compiler = builder.compiler(0, bootstrap_host);\n+\n+        let suggest_tests = tool::prepare_tool_cargo(\n+            builder,\n+            compiler,\n+            Mode::ToolBootstrap,\n+            bootstrap_host,\n+            \"test\",\n+            \"src/tools/suggest-tests\",\n+            SourceType::InTree,\n+            &[],\n+        );\n+        add_flags_and_try_run_tests(builder, &mut suggest_tests.into());\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Linkcheck {\n     host: TargetSelection,"}, {"sha": "d1fd2e8c42cb0edb46fc9db2df573a5fa446ebf3", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -433,6 +433,7 @@ bootstrap_tool!(\n     ReplaceVersionPlaceholder, \"src/tools/replace-version-placeholder\", \"replace-version-placeholder\";\n     CollectLicenseMetadata, \"src/tools/collect-license-metadata\", \"collect-license-metadata\";\n     GenerateCopyright, \"src/tools/generate-copyright\", \"generate-copyright\";\n+    SuggestTests, \"src/tools/suggest-tests\", \"suggest-tests\";\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]"}, {"sha": "f4f4d548bb79ecd5ba0386656fd991471efe4957", "filename": "src/tools/suggest-tests/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fsuggest-tests%2FCargo.toml?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"suggest-tests\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+[dependencies]\n+glob = \"0.3.0\"\n+build_helper = { version = \"0.1.0\", path = \"../build_helper\" }\n+once_cell = \"1.17.1\""}, {"sha": "2b0213cdc223c6a64d0771bef1b843f84f45c6a9", "filename": "src/tools/suggest-tests/src/dynamic_suggestions.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2Fsrc%2Fdynamic_suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2Fsrc%2Fdynamic_suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fsuggest-tests%2Fsrc%2Fdynamic_suggestions.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -0,0 +1,23 @@\n+use std::path::Path;\n+\n+use crate::Suggestion;\n+\n+type DynamicSuggestion = fn(&Path) -> Vec<Suggestion>;\n+\n+pub(crate) const DYNAMIC_SUGGESTIONS: &[DynamicSuggestion] = &[|path: &Path| -> Vec<Suggestion> {\n+    if path.starts_with(\"compiler/\") || path.starts_with(\"library/\") {\n+        let path = path.components().take(2).collect::<Vec<_>>();\n+\n+        vec![Suggestion::with_single_path(\n+            \"test\",\n+            None,\n+            &format!(\n+                \"{}/{}\",\n+                path[0].as_os_str().to_str().unwrap(),\n+                path[1].as_os_str().to_str().unwrap()\n+            ),\n+        )]\n+    } else {\n+        Vec::new()\n+    }\n+}];"}, {"sha": "44cd3c7f6a84d56c06735473c90fb7fc43605892", "filename": "src/tools/suggest-tests/src/lib.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fsuggest-tests%2Fsrc%2Flib.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -0,0 +1,96 @@\n+use std::{\n+    fmt::{self, Display},\n+    path::Path,\n+};\n+\n+use dynamic_suggestions::DYNAMIC_SUGGESTIONS;\n+use glob::Pattern;\n+use static_suggestions::STATIC_SUGGESTIONS;\n+\n+mod dynamic_suggestions;\n+mod static_suggestions;\n+\n+#[cfg(test)]\n+mod tests;\n+\n+macro_rules! sug {\n+    ($cmd:expr) => {\n+        Suggestion::new($cmd, None, &[])\n+    };\n+\n+    ($cmd:expr, $paths:expr) => {\n+        Suggestion::new($cmd, None, $paths.as_slice())\n+    };\n+\n+    ($cmd:expr, $stage:expr, $paths:expr) => {\n+        Suggestion::new($cmd, Some($stage), $paths.as_slice())\n+    };\n+}\n+\n+pub(crate) use sug;\n+\n+pub fn get_suggestions<T: AsRef<str>>(modified_files: &[T]) -> Vec<Suggestion> {\n+    let mut suggestions = Vec::new();\n+\n+    // static suggestions\n+    for sug in STATIC_SUGGESTIONS.iter() {\n+        let glob = Pattern::new(&sug.0).expect(\"Found invalid glob pattern!\");\n+\n+        for file in modified_files {\n+            if glob.matches(file.as_ref()) {\n+                suggestions.extend_from_slice(&sug.1);\n+            }\n+        }\n+    }\n+\n+    // dynamic suggestions\n+    for sug in DYNAMIC_SUGGESTIONS {\n+        for file in modified_files {\n+            let sugs = sug(Path::new(file.as_ref()));\n+\n+            suggestions.extend_from_slice(&sugs);\n+        }\n+    }\n+\n+    suggestions.sort();\n+    suggestions.dedup();\n+\n+    suggestions\n+}\n+\n+#[derive(Clone, PartialOrd, Ord, PartialEq, Eq, Debug)]\n+pub struct Suggestion {\n+    pub cmd: String,\n+    pub stage: Option<u32>,\n+    pub paths: Vec<String>,\n+}\n+\n+impl Suggestion {\n+    pub fn new(cmd: &str, stage: Option<u32>, paths: &[&str]) -> Self {\n+        Self { cmd: cmd.to_owned(), stage, paths: paths.iter().map(|p| p.to_string()).collect() }\n+    }\n+\n+    pub fn with_single_path(cmd: &str, stage: Option<u32>, path: &str) -> Self {\n+        Self::new(cmd, stage, &[path])\n+    }\n+}\n+\n+impl Display for Suggestion {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n+        write!(f, \"{} \", self.cmd)?;\n+\n+        for path in &self.paths {\n+            write!(f, \"{} \", path)?;\n+        }\n+\n+        if let Some(stage) = self.stage {\n+            write!(f, \"{}\", stage)?;\n+        } else {\n+            // write a sentinel value here (in place of a stage) to be consumed\n+            // by the shim in bootstrap, it will be read and ignored.\n+            write!(f, \"N/A\")?;\n+        }\n+\n+        Ok(())\n+    }\n+}"}, {"sha": "0b541b60cba98a83e93bd11e9d79023f7230725d", "filename": "src/tools/suggest-tests/src/main.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fsuggest-tests%2Fsrc%2Fmain.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -0,0 +1,27 @@\n+use std::process::ExitCode;\n+\n+use build_helper::git::get_git_modified_files;\n+use suggest_tests::get_suggestions;\n+\n+fn main() -> ExitCode {\n+    let modified_files = get_git_modified_files(None, &Vec::new());\n+    let modified_files = match modified_files {\n+        Ok(Some(files)) => files,\n+        Ok(None) => {\n+            eprintln!(\"git error\");\n+            return ExitCode::FAILURE;\n+        }\n+        Err(err) => {\n+            eprintln!(\"Could not get modified files from git: \\\"{err}\\\"\");\n+            return ExitCode::FAILURE;\n+        }\n+    };\n+\n+    let suggestions = get_suggestions(&modified_files);\n+\n+    for sug in &suggestions {\n+        println!(\"{sug}\");\n+    }\n+\n+    ExitCode::SUCCESS\n+}"}, {"sha": "d8166ead8c49d8d2d0597b0868a51e797aca87e5", "filename": "src/tools/suggest-tests/src/static_suggestions.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2Fsrc%2Fstatic_suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2Fsrc%2Fstatic_suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fsuggest-tests%2Fsrc%2Fstatic_suggestions.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -0,0 +1,24 @@\n+use crate::{sug, Suggestion};\n+\n+// FIXME: perhaps this could use `std::lazy` when it is stablizied\n+macro_rules! static_suggestions {\n+    ($( $glob:expr => [ $( $suggestion:expr ),* ] ),*) => {\n+        pub(crate) const STATIC_SUGGESTIONS: ::once_cell::unsync::Lazy<Vec<(&'static str, Vec<Suggestion>)>>\n+            = ::once_cell::unsync::Lazy::new(|| vec![ $( ($glob, vec![ $($suggestion),* ]) ),*]);\n+    }\n+}\n+\n+static_suggestions! {\n+    \"*.md\" => [\n+        sug!(\"test\", 0, [\"linkchecker\"])\n+    ],\n+\n+    \"compiler/*\" => [\n+        sug!(\"check\"),\n+        sug!(\"test\", 1, [\"src/test/ui\", \"src/test/run-make\"])\n+    ],\n+\n+    \"src/librustdoc/*\" => [\n+        sug!(\"test\", 1, [\"rustdoc\"])\n+    ]\n+}"}, {"sha": "5bc1a7df7ca156a4c8478c169dd11941ba5b7c50", "filename": "src/tools/suggest-tests/src/tests.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78793869d72fb21117387ee365871f61f9c6e64a/src%2Ftools%2Fsuggest-tests%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fsuggest-tests%2Fsrc%2Ftests.rs?ref=78793869d72fb21117387ee365871f61f9c6e64a", "patch": "@@ -0,0 +1,21 @@\n+macro_rules! sugg_test {\n+    ( $( $name:ident: $paths:expr => $suggestions:expr ),* ) => {\n+        $(\n+            #[test]\n+            fn $name() {\n+                let suggestions = crate::get_suggestions(&$paths).into_iter().map(|s| s.to_string()).collect::<Vec<_>>();\n+                assert_eq!(suggestions, $suggestions);\n+            }\n+        )*\n+    };\n+}\n+\n+sugg_test! {\n+    test_error_code_docs: [\"compiler/rustc_error_codes/src/error_codes/E0000.md\"] =>\n+        [\"check N/A\", \"test compiler/rustc_error_codes N/A\", \"test linkchecker 0\", \"test src/test/ui src/test/run-make 1\"],\n+\n+    test_rustdoc: [\"src/librustdoc/src/lib.rs\"] => [\"test rustdoc 1\"],\n+\n+    test_rustdoc_and_libstd: [\"src/librustdoc/src/lib.rs\", \"library/std/src/lib.rs\"] =>\n+        [\"test library/std N/A\", \"test rustdoc 1\"]\n+}"}]}