{"sha": "7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "node_id": "C_kwDOAAsO6NoAKDdmNWNmYTU0ZDk4MTZiMGI5ODVhNzM3YmIyZmQzYmY0OGFkOTg3MTQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-06T15:44:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-06T15:44:36Z"}, "message": "port some tests away from flags we want to remove", "tree": {"sha": "60400d2b538fd729e2c2d7adf4d922d3e27a118a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60400d2b538fd729e2c2d7adf4d922d3e27a118a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "html_url": "https://github.com/rust-lang/rust/commit/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1b38361724489c9227599b6f772b4f6944ce6b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b38361724489c9227599b6f772b4f6944ce6b6", "html_url": "https://github.com/rust-lang/rust/commit/b1b38361724489c9227599b6f772b4f6944ce6b6"}], "stats": {"total": 62, "additions": 26, "deletions": 36}, "files": [{"sha": "3de8f57d6223c1fdd883c41497ac4e6424b3e784", "filename": "tests/fail/stacked_borrows/illegal_read3.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.rs?ref=7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "patch": "@@ -1,16 +1,18 @@\n-// compile-flags: -Zmiri-allow-ptr-int-transmute\n // A callee may not read the destination of our `&mut` without us noticing.\n // Thise code got carefully checked to not introduce any reborrows\n // that are not explicit in the source. Let's hope the compiler does not break this later!\n \n-#![feature(untagged_unions)]\n-\n use std::mem;\n \n+union HiddenRef {\n+    // We avoid retagging at this type, so shared vs mutable does not matter.\n+    r: &'static i32,\n+}\n+\n fn main() {\n     let mut x: i32 = 15;\n     let xref1 = &mut x;\n-    let xref1_sneaky: usize = unsafe { mem::transmute_copy(&xref1) };\n+    let xref1_sneaky: HiddenRef = unsafe { mem::transmute_copy(&xref1) };\n     // Derived from `xref1`, so using raw value is still ok, ...\n     let xref2 = &mut *xref1;\n     callee(xref1_sneaky);\n@@ -19,14 +21,8 @@ fn main() {\n     //~^ ERROR: borrow stack\n }\n \n-fn callee(xref1: usize) {\n-    // Transmuting through a union to avoid retagging.\n-    union UsizeToRef {\n-        from: usize,\n-        to: &'static mut i32,\n-    }\n-    let xref1 = UsizeToRef { from: xref1 };\n+fn callee(xref1: HiddenRef) {\n     // Doing the deref and the transmute (through the union) in the same place expression\n     // should avoid retagging.\n-    let _val = unsafe { *xref1.to };\n+    let _val = unsafe { *xref1.r };\n }"}, {"sha": "75c4305ee81f5c9c269f15469eb6e94781c928dc", "filename": "tests/fail/stacked_borrows/illegal_read3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr?ref=7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "patch": "@@ -17,8 +17,8 @@ LL |     let xref2 = &mut *xref1;\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/illegal_read3.rs:LL:CC\n    |\n-LL |     let _val = unsafe { *xref1.to };\n-   |                         ^^^^^^^^^\n+LL |     let _val = unsafe { *xref1.r };\n+   |                         ^^^^^^^^\n    = note: inside `main` at $DIR/illegal_read3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1bd60f9cff732ffc4f84e04b0b0ef0e781f4ed33", "filename": "tests/fail/transmute-pair-uninit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Ftransmute-pair-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Ftransmute-pair-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute-pair-uninit.rs?ref=7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Zmiri-allow-uninit-numbers\n #![feature(core_intrinsics)]\n \n use std::mem;\n@@ -18,6 +17,6 @@ fn main() {\n         assert_eq!(byte, 0);\n     }\n     let v = unsafe { *z.offset(first_undef) };\n+    //~^ ERROR uninitialized\n     if v == 0 { println!(\"it is zero\"); }\n-    //~^ ERROR this operation requires initialized memory\n }"}, {"sha": "833c3abbb2fb19929e4f3d7a13edead4e0b14cab", "filename": "tests/fail/transmute-pair-uninit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Ftransmute-pair-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Ftransmute-pair-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute-pair-uninit.stderr?ref=7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+error: Undefined Behavior: type validation failed: encountered uninitialized bytes, but expected initialized bytes\n   --> $DIR/transmute-pair-uninit.rs:LL:CC\n    |\n-LL |     if v == 0 { println!(\"it is zero\"); }\n-   |        ^^^^^^ using uninitialized data, but this operation requires initialized memory\n+LL |     let v = unsafe { *z.offset(first_undef) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "6868e5895507dbce8242b53c0cb97214576d4979", "filename": "tests/fail/uninit_byte_read.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Funinit_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Funinit_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_byte_read.rs?ref=7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "patch": "@@ -1,7 +1,6 @@\n-// compile-flags: -Zmiri-allow-uninit-numbers\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n-    let undef = unsafe { *v.get_unchecked(5) };\n-    let x = undef + 1; //~ ERROR this operation requires initialized memory\n+    let undef = unsafe { *v.get_unchecked(5) }; //~ ERROR uninitialized\n+    let x = undef + 1;\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "d150be3e7e7814f8f9676bf7762c4fe3db17400c", "filename": "tests/fail/uninit_byte_read.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Funinit_byte_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Funinit_byte_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_byte_read.stderr?ref=7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+error: Undefined Behavior: type validation failed: encountered uninitialized bytes, but expected initialized bytes\n   --> $DIR/uninit_byte_read.rs:LL:CC\n    |\n-LL |     let x = undef + 1;\n-   |             ^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n+LL |     let undef = unsafe { *v.get_unchecked(5) };\n+   |                          ^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "b6f86698b3fb376a4c12ca6790fe80a2b3244654", "filename": "tests/fail/validity/invalid_enum_tag_256variants_uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs?ref=7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "patch": "@@ -1,3 +1,4 @@\n+// Even when uninit numbers are allowed, this enum is not.\n // compile-flags: -Zmiri-allow-uninit-numbers\n #![allow(unused, deprecated, invalid_value)]\n "}, {"sha": "aafa90204fc2aebc19144f7559d2e1698a9e2cdb", "filename": "tests/pass/intptrcast.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Fpass%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Fpass%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fintptrcast.rs?ref=7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "patch": "@@ -1,6 +1,4 @@\n-// compile-flags: -Zmiri-allow-ptr-int-transmute\n-\n-// This returns a miri pointer at type usize, if the argument is a proper pointer\n+// This strips provenance\n fn transmute_ptr_to_int<T>(x: *const T) -> usize {\n     unsafe { std::mem::transmute(x) }\n }\n@@ -39,7 +37,7 @@ fn transmute() {\n     // transmuting.\n     let a: *const i32 = &42;\n     let b = transmute_ptr_to_int(a) as u8;\n-    let c = a as usize as u8;\n+    let c = a as u8;\n     assert_eq!(b, c);\n }\n "}, {"sha": "c62298a9aced29cf274dff5ba22bf6fed99c8bd0", "filename": "tests/pass/transmute_fat.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Fpass%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5cfa54d9816b0b985a737bb2fd3bf48ad98714/tests%2Fpass%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ftransmute_fat.rs?ref=7f5cfa54d9816b0b985a737bb2fd3bf48ad98714", "patch": "@@ -1,14 +1,11 @@\n // Stacked Borrows disallows this becuase the reference is never cast to a raw pointer.\n-// compile-flags: -Zmiri-disable-stacked-borrows -Zmiri-allow-ptr-int-transmute\n+// compile-flags: -Zmiri-disable-stacked-borrows\n \n fn main() {\n     // If we are careful, we can exploit data layout...\n     let raw = unsafe {\n-        std::mem::transmute::<&[u8], [usize; 2]>(&[42])\n+        std::mem::transmute::<&[u8], [*const u8; 2]>(&[42])\n     };\n-    let ptr = raw[0] + raw[1];\n-    // We transmute both ways, to really test allow-ptr-int-transmute.\n-    let ptr: *const u8 = unsafe { std::mem::transmute(ptr) };\n-    // The pointer is one-past-the end, but we decrement it into bounds before using it\n-    assert_eq!(unsafe { *ptr.offset(-1) }, 42);\n+    let ptr: *const u8 = unsafe { std::mem::transmute_copy(&raw) };\n+    assert_eq!(unsafe { *ptr }, 42);\n }"}]}