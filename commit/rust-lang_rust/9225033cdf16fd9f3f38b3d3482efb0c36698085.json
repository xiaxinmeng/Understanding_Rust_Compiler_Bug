{"sha": "9225033cdf16fd9f3f38b3d3482efb0c36698085", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMjUwMzNjZGYxNmZkOWYzZjM4YjNkMzQ4MmVmYjBjMzY2OTgwODU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-10T12:20:00Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-10T12:20:00Z"}, "message": "Merge #477\n\n477: Extend selection for list items r=matklad a=hban\n\nFirst PR, criticism welcome!\r\n\r\nThere are a few things I'm not so sure about:\r\n* There is now a not-so-small list of \"list-like kinds\" in extend selection source which maybe should belong somewhere else.\r\n* Preferring left comma doesn't seem right IMO for one reason - trailing commas are usually on the right. For example, when array values are broken across multiple lines extending selected value will cover right trailing comma (because it's the only comma on the same line), but when all values are on the same line it will pick left comma. Anyway, currently with this PR it will pick always extend to left comma when possible since that's what issue specified \ud83d\ude03.\r\n\r\nCloses: #444 \n\nCo-authored-by: Hrvoje Ban <hban@users.noreply.github.com>", "tree": {"sha": "b804cf396e2e6b6d4da6082096f933b445671579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b804cf396e2e6b6d4da6082096f933b445671579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9225033cdf16fd9f3f38b3d3482efb0c36698085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9225033cdf16fd9f3f38b3d3482efb0c36698085", "html_url": "https://github.com/rust-lang/rust/commit/9225033cdf16fd9f3f38b3d3482efb0c36698085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9225033cdf16fd9f3f38b3d3482efb0c36698085/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c2b8aa1ce5e5398d981387079e86ff67a5b7e8c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b8aa1ce5e5398d981387079e86ff67a5b7e8c0", "html_url": "https://github.com/rust-lang/rust/commit/c2b8aa1ce5e5398d981387079e86ff67a5b7e8c0"}, {"sha": "8384b2cc38acc6e8c1741e8d2d6a66f74b7f02b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8384b2cc38acc6e8c1741e8d2d6a66f74b7f02b3", "html_url": "https://github.com/rust-lang/rust/commit/8384b2cc38acc6e8c1741e8d2d6a66f74b7f02b3"}], "stats": {"total": 131, "additions": 127, "deletions": 4}, "files": [{"sha": "db93db208fe8d14af6e425d65e7fda994c96faf2", "filename": "crates/ra_ide_api_light/src/extend_selection.rs", "status": "modified", "additions": 127, "deletions": 4, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/9225033cdf16fd9f3f38b3d3482efb0c36698085/crates%2Fra_ide_api_light%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225033cdf16fd9f3f38b3d3482efb0c36698085/crates%2Fra_ide_api_light%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fextend_selection.rs?ref=9225033cdf16fd9f3f38b3d3482efb0c36698085", "patch": "@@ -6,6 +6,21 @@ use ra_syntax::{\n \n pub fn extend_selection(root: &SyntaxNode, range: TextRange) -> Option<TextRange> {\n     let string_kinds = [COMMENT, STRING, RAW_STRING, BYTE_STRING, RAW_BYTE_STRING];\n+    let list_kinds = [\n+        FIELD_PAT_LIST,\n+        MATCH_ARM_LIST,\n+        NAMED_FIELD_LIST,\n+        NAMED_FIELD_DEF_LIST,\n+        POS_FIELD_LIST,\n+        ENUM_VARIANT_LIST,\n+        USE_TREE_LIST,\n+        TYPE_PARAM_LIST,\n+        TYPE_ARG_LIST,\n+        PARAM_LIST,\n+        ARG_LIST,\n+        ARRAY_EXPR,\n+    ];\n+\n     if range.is_empty() {\n         let offset = range.start();\n         let mut leaves = find_leaf_at_offset(root, offset);\n@@ -26,9 +41,25 @@ pub fn extend_selection(root: &SyntaxNode, range: TextRange) -> Option<TextRange\n         return Some(leaf_range);\n     };\n     let node = find_covering_node(root, range);\n-    if string_kinds.contains(&node.kind()) && range == node.range() {\n-        if let Some(range) = extend_comments(node) {\n-            return Some(range);\n+\n+    // Using shallowest node with same range allows us to traverse siblings.\n+    let node = node\n+        .ancestors()\n+        .take_while(|n| n.range() == node.range())\n+        .last()\n+        .unwrap();\n+\n+    if range == node.range() {\n+        if string_kinds.contains(&node.kind()) {\n+            if let Some(range) = extend_comments(node) {\n+                return Some(range);\n+            }\n+        }\n+\n+        if node.parent().map(|n| list_kinds.contains(&n.kind())) == Some(true) {\n+            if let Some(range) = extend_list_item(node) {\n+                return Some(range);\n+            }\n         }\n     }\n \n@@ -99,6 +130,45 @@ fn pick_best<'a>(l: &'a SyntaxNode, r: &'a SyntaxNode) -> &'a SyntaxNode {\n     }\n }\n \n+/// Extend list item selection to include nearby comma and whitespace.\n+fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n+    fn is_single_line_ws(node: &SyntaxNode) -> bool {\n+        node.kind() == WHITESPACE && !node.leaf_text().unwrap().contains('\\n')\n+    }\n+\n+    fn nearby_comma(node: &SyntaxNode, dir: Direction) -> Option<&SyntaxNode> {\n+        node.siblings(dir)\n+            .skip(1)\n+            .skip_while(|node| is_single_line_ws(node))\n+            .next()\n+            .filter(|node| node.kind() == COMMA)\n+    }\n+\n+    if let Some(comma_node) = nearby_comma(node, Direction::Prev) {\n+        return Some(TextRange::from_to(\n+            comma_node.range().start(),\n+            node.range().end(),\n+        ));\n+    }\n+\n+    if let Some(comma_node) = nearby_comma(node, Direction::Next) {\n+        // Include any following whitespace when comma if after list item.\n+        let final_node = comma_node\n+            .siblings(Direction::Next)\n+            .skip(1)\n+            .next()\n+            .filter(|node| is_single_line_ws(node))\n+            .unwrap_or(comma_node);\n+\n+        return Some(TextRange::from_to(\n+            node.range().start(),\n+            final_node.range().end(),\n+        ));\n+    }\n+\n+    return None;\n+}\n+\n fn extend_comments(node: &SyntaxNode) -> Option<TextRange> {\n     let prev = adj_comments(node, Direction::Prev);\n     let next = adj_comments(node, Direction::Next);\n@@ -145,7 +215,60 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_extend_selection_start_of_the_lind() {\n+    fn test_extend_selection_list() {\n+        do_check(r#\"fn foo(<|>x: i32) {}\"#, &[\"x\", \"x: i32\"]);\n+        do_check(\n+            r#\"fn foo(<|>x: i32, y: i32) {}\"#,\n+            &[\"x\", \"x: i32\", \"x: i32, \"],\n+        );\n+        do_check(\n+            r#\"fn foo(<|>x: i32,y: i32) {}\"#,\n+            &[\"x\", \"x: i32\", \"x: i32,\"],\n+        );\n+        do_check(\n+            r#\"fn foo(x: i32, <|>y: i32) {}\"#,\n+            &[\"y\", \"y: i32\", \", y: i32\"],\n+        );\n+        do_check(\n+            r#\"fn foo(x: i32, <|>y: i32, ) {}\"#,\n+            &[\"y\", \"y: i32\", \", y: i32\"],\n+        );\n+        do_check(\n+            r#\"fn foo(x: i32,<|>y: i32) {}\"#,\n+            &[\"y\", \"y: i32\", \",y: i32\"],\n+        );\n+\n+        do_check(\n+            r#\"const FOO: [usize; 2] = [ 22<|> , 33];\"#,\n+            &[\"22\", \"22 , \"],\n+        );\n+        do_check(r#\"const FOO: [usize; 2] = [ 22 , 33<|>];\"#, &[\"33\", \", 33\"]);\n+        do_check(\n+            r#\"const FOO: [usize; 2] = [ 22 , 33<|> ,];\"#,\n+            &[\"33\", \", 33\"],\n+        );\n+\n+        do_check(\n+            r#\"\n+const FOO: [usize; 2] = [\n+    22,\n+    <|>33,\n+]\"#,\n+            &[\"33\", \"33,\"],\n+        );\n+\n+        do_check(\n+            r#\"\n+const FOO: [usize; 2] = [\n+    22\n+    , 33<|>,\n+]\"#,\n+            &[\"33\", \", 33\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extend_selection_start_of_the_line() {\n         do_check(\n             r#\"\n impl S {"}]}