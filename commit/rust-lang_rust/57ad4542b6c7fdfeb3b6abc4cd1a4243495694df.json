{"sha": "57ad4542b6c7fdfeb3b6abc4cd1a4243495694df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YWQ0NTQyYjZjN2ZkZmViM2I2YWJjNGNkMWE0MjQzNDk1Njk0ZGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-27T09:05:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-27T09:05:39Z"}, "message": "Merge #2425\n\n2425: Decouple r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4917786a1df597ab44016a2f5c0a8eae67b852b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4917786a1df597ab44016a2f5c0a8eae67b852b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd3jxkCRBK7hj4Ov3rIwAAdHIIADSrG/ilhPWt+JF9TBigQaaI\nPgyAIWpTitogKiRmiXfTWc7aqWyb1IBck6IVmZXQ1Y5+RRBEddq3Xxv3Of8eOi85\npBy3Sjn9tC5rcEDM8yCPAvUHX3rYdWlRg7zCn05N1ZIhcH4ZHvP2vjCoFBk6Cjjf\neIMbJyiSmfCLxJI9U0zJ2pgyAJn3uk24+Tqav8ArFtHiV3qPHYu8qf24+kaOiDiz\nmEuJ5UbgChTxwPZqy7ELO45kKr9ZGRIc9WoPIsz6RW38A09w8HKzOiad4Qyys7Hr\n0zQ5hiexPKFh/RVXPAeEtqBkQ9XRLDsQ7YHMZBo+5onF10wsoERjTYXA1SIRXUQ=\n=8Z0y\n-----END PGP SIGNATURE-----\n", "payload": "tree 4917786a1df597ab44016a2f5c0a8eae67b852b5\nparent ac5ec2adcdfc727f2b33f85a6ca62355b6a130f1\nparent 3a0929fca7a52605526c6f89be4e3e86c5d0359d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574845539 +0000\ncommitter GitHub <noreply@github.com> 1574845539 +0000\n\nMerge #2425\n\n2425: Decouple r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df", "html_url": "https://github.com/rust-lang/rust/commit/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac5ec2adcdfc727f2b33f85a6ca62355b6a130f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac5ec2adcdfc727f2b33f85a6ca62355b6a130f1", "html_url": "https://github.com/rust-lang/rust/commit/ac5ec2adcdfc727f2b33f85a6ca62355b6a130f1"}, {"sha": "3a0929fca7a52605526c6f89be4e3e86c5d0359d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0929fca7a52605526c6f89be4e3e86c5d0359d", "html_url": "https://github.com/rust-lang/rust/commit/3a0929fca7a52605526c6f89be4e3e86c5d0359d"}], "stats": {"total": 81, "additions": 52, "deletions": 29}, "files": [{"sha": "a5bfef91f6dec0d9185f6d1dfd70214e9439043b", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=57ad4542b6c7fdfeb3b6abc4cd1a4243495694df", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::{GenericDefId, LocalStructFieldId, TraitId, VariantId};\n+use hir_def::{GenericDefId, ImplId, LocalStructFieldId, TraitId, VariantId};\n use ra_arena::map::ArenaMap;\n use ra_db::{salsa, CrateId};\n \n@@ -13,7 +13,7 @@ use crate::{\n         CallableDef, FnSig, GenericPredicate, InferenceResult, Substs, Ty, TyDefId, TypeCtor,\n         ValueTyDefId,\n     },\n-    DefWithBody, ImplBlock,\n+    DefWithBody,\n };\n \n pub use hir_def::db::{\n@@ -63,7 +63,7 @@ pub trait HirDatabase: DefDatabase {\n     fn impls_in_crate(&self, krate: CrateId) -> Arc<CrateImplBlocks>;\n \n     #[salsa::invoke(crate::ty::traits::impls_for_trait_query)]\n-    fn impls_for_trait(&self, krate: CrateId, trait_: TraitId) -> Arc<[ImplBlock]>;\n+    fn impls_for_trait(&self, krate: CrateId, trait_: TraitId) -> Arc<[ImplId]>;\n \n     /// This provides the Chalk trait solver instance. Because Chalk always\n     /// works from a specific crate, this query is keyed on the crate; and"}, {"sha": "cf45ede7ce4f87d7764efabbef1712415b566446", "filename": "crates/ra_hir/src/ty/infer/coerce.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fcoerce.rs?ref=57ad4542b6c7fdfeb3b6abc4cd1a4243495694df", "patch": "@@ -4,13 +4,17 @@\n //!\n //! See: https://doc.rust-lang.org/nomicon/coercions.html\n \n-use hir_def::{lang_item::LangItemTarget, resolver::Resolver, AdtId};\n+use hir_def::{\n+    lang_item::LangItemTarget,\n+    resolver::{HasResolver, Resolver},\n+    AdtId,\n+};\n use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n use crate::{\n     db::HirDatabase,\n-    ty::{autoderef, Substs, Ty, TypeCtor, TypeWalk},\n+    ty::{autoderef, Substs, TraitRef, Ty, TypeCtor, TypeWalk},\n     Mutability,\n };\n \n@@ -57,9 +61,18 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         impls\n             .iter()\n-            .filter_map(|impl_block| {\n+            .filter_map(|&impl_id| {\n+                let impl_data = db.impl_data(impl_id);\n+                let resolver = impl_id.resolver(db);\n+                let target_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n+\n                 // `CoerseUnsized` has one generic parameter for the target type.\n-                let trait_ref = impl_block.target_trait_ref(db)?;\n+                let trait_ref = TraitRef::from_hir(\n+                    db,\n+                    &resolver,\n+                    impl_data.target_trait.as_ref()?,\n+                    Some(target_ty),\n+                )?;\n                 let cur_from_ty = trait_ref.substs.0.get(0)?;\n                 let cur_to_ty = trait_ref.substs.0.get(1)?;\n "}, {"sha": "7df2649c9082f076cd73b9ede3d9c4e44641913e", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=57ad4542b6c7fdfeb3b6abc4cd1a4243495694df", "patch": "@@ -62,7 +62,7 @@ impl CrateImplBlocks {\n                 let impl_data = db.impl_data(impl_id);\n                 let resolver = impl_id.resolver(db);\n \n-                let target_ty = { Ty::from_hir(db, &resolver, &impl_data.target_type) };\n+                let target_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n \n                 match &impl_data.target_trait {\n                     Some(trait_ref) => {"}, {"sha": "93cb32869767075a01ead049f7c6288dc8a98224", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=57ad4542b6c7fdfeb3b6abc4cd1a4243495694df", "patch": "@@ -2,13 +2,13 @@\n use std::sync::{Arc, Mutex};\n \n use chalk_ir::{cast::Cast, family::ChalkIr};\n-use hir_def::{expr::ExprId, DefWithBodyId, TraitId};\n+use hir_def::{expr::ExprId, DefWithBodyId, ImplId, TraitId, TypeAliasId};\n use log::debug;\n use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n-use crate::{db::HirDatabase, ImplBlock, TypeAlias};\n+use crate::{db::HirDatabase, ImplBlock};\n \n use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty, TypeWalk};\n \n@@ -79,7 +79,7 @@ pub(crate) fn impls_for_trait_query(\n     db: &impl HirDatabase,\n     krate: CrateId,\n     trait_: TraitId,\n-) -> Arc<[ImplBlock]> {\n+) -> Arc<[ImplId]> {\n     let mut impls = FxHashSet::default();\n     // We call the query recursively here. On the one hand, this means we can\n     // reuse results from queries for different crates; on the other hand, this\n@@ -90,7 +90,7 @@ pub(crate) fn impls_for_trait_query(\n         impls.extend(db.impls_for_trait(dep.crate_id, trait_).iter());\n     }\n     let crate_impl_blocks = db.impls_in_crate(krate);\n-    impls.extend(crate_impl_blocks.lookup_impl_blocks_for_trait(trait_).map(ImplBlock::from));\n+    impls.extend(crate_impl_blocks.lookup_impl_blocks_for_trait(trait_));\n     impls.into_iter().collect()\n }\n \n@@ -317,7 +317,7 @@ impl_intern_key!(GlobalImplId);\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AssocTyValue {\n     /// A normal assoc type value from an impl block.\n-    TypeAlias(TypeAlias),\n+    TypeAlias(TypeAliasId),\n     /// The output type of the Fn trait implementation.\n     ClosureFnTraitImplOutput(ClosureFnTraitImplData),\n }"}, {"sha": "7b2e530a2cb005dfbe5ec8e568ba4b594e7299c2", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57ad4542b6c7fdfeb3b6abc4cd1a4243495694df/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=57ad4542b6c7fdfeb3b6abc4cd1a4243495694df", "patch": "@@ -11,7 +11,8 @@ use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum\n use ra_db::CrateId;\n \n use hir_def::{\n-    lang_item::LangItemTarget, AstItemDef, ContainerId, GenericDefId, Lookup, TraitId, TypeAliasId,\n+    lang_item::LangItemTarget, resolver::HasResolver, AstItemDef, ContainerId, GenericDefId,\n+    Lookup, TraitId, TypeAliasId,\n };\n use hir_expand::name;\n \n@@ -22,7 +23,7 @@ use crate::{\n     db::HirDatabase,\n     ty::display::HirDisplay,\n     ty::{ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk},\n-    ImplBlock, TypeAlias,\n+    ImplBlock,\n };\n \n /// This represents a trait whose name we could not resolve.\n@@ -452,7 +453,7 @@ where\n             .impls_for_trait(self.krate, trait_.into())\n             .iter()\n             .copied()\n-            .map(Impl::ImplBlock)\n+            .map(|it| Impl::ImplBlock(it.into()))\n             .map(|impl_| impl_.to_chalk(self.db))\n             .collect();\n \n@@ -670,7 +671,7 @@ fn impl_block_datum(\n             // don't include associated types that don't exist in the trait\n             trait_data.associated_type_by_name(&type_alias.name(db)).is_some()\n         })\n-        .map(|type_alias| AssocTyValue::TypeAlias(type_alias).to_chalk(db))\n+        .map(|type_alias| AssocTyValue::TypeAlias(type_alias.id).to_chalk(db))\n         .collect();\n     debug!(\"impl_datum: {:?}\", impl_datum_bound);\n     let impl_datum = ImplDatum {\n@@ -773,24 +774,33 @@ pub(crate) fn associated_ty_value_query(\n fn type_alias_associated_ty_value(\n     db: &impl HirDatabase,\n     _krate: CrateId,\n-    type_alias: TypeAlias,\n+    type_alias: TypeAliasId,\n ) -> Arc<AssociatedTyValue<ChalkIr>> {\n-    let impl_block = type_alias.impl_block(db).expect(\"assoc ty value should be in impl\");\n-    let impl_id = Impl::ImplBlock(impl_block).to_chalk(db);\n-    let trait_ = impl_block\n-        .target_trait_ref(db)\n-        .expect(\"assoc ty value should not exist\") // we don't return any assoc ty values if the impl'd trait can't be resolved\n-        .trait_;\n+    let type_alias_data = db.type_alias_data(type_alias);\n+    let impl_id = match type_alias.lookup(db).container {\n+        ContainerId::ImplId(it) => it,\n+        _ => panic!(\"assoc ty value should be in impl\"),\n+    };\n+\n+    let impl_data = db.impl_data(impl_id);\n+    let resolver = impl_id.resolver(db);\n+    let target_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n+    let target_trait = impl_data\n+        .target_trait\n+        .as_ref()\n+        .and_then(|trait_ref| TraitRef::from_hir(db, &resolver, &trait_ref, Some(target_ty)))\n+        .expect(\"assoc ty value should not exist\"); // we don't return any assoc ty values if the impl'd trait can't be resolved\n+\n     let assoc_ty = db\n-        .trait_data(trait_)\n-        .associated_type_by_name(&type_alias.name(db))\n+        .trait_data(target_trait.trait_)\n+        .associated_type_by_name(&type_alias_data.name)\n         .expect(\"assoc ty value should not exist\"); // validated when building the impl data as well\n-    let generic_params = db.generic_params(impl_block.id.into());\n+    let generic_params = db.generic_params(impl_id.into());\n     let bound_vars = Substs::bound_vars(&generic_params);\n-    let ty = db.ty(type_alias.id.into()).subst(&bound_vars);\n+    let ty = db.ty(type_alias.into()).subst(&bound_vars);\n     let value_bound = chalk_rust_ir::AssociatedTyValueBound { ty: ty.to_chalk(db) };\n     let value = chalk_rust_ir::AssociatedTyValue {\n-        impl_id,\n+        impl_id: Impl::ImplBlock(impl_id.into()).to_chalk(db),\n         associated_ty_id: assoc_ty.to_chalk(db),\n         value: make_binders(value_bound, bound_vars.len()),\n     };"}]}