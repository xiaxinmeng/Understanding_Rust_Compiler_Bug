{"sha": "69ad879d52606ac03440744efa5b4d8ca8cc7566", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YWQ4NzlkNTI2MDZhYzAzNDQwNzQ0ZWZhNWI0ZDhjYThjYzc1NjY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-07-27T04:24:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-27T04:24:46Z"}, "message": "Merge pull request #2864 from topecongiro/issue-2863\n\nModify the rule for reordering impl items", "tree": {"sha": "fedf8b6505e2a9b9982e00818dbcbab38c86d522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fedf8b6505e2a9b9982e00818dbcbab38c86d522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ad879d52606ac03440744efa5b4d8ca8cc7566", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbWp6OCRBK7hj4Ov3rIwAAdHIIAFj/+My74tNCj9ALeSpqKgSc\n7bKzFy96jo0jfl5IDAVxVJaWFF/nh1fpBrle/UplbYzeYL0st5ew87bBuksZpscx\ncmDoNPpIEOZ3NxWkAc/0LDxKrbsHTg9WAUPK4tJ+sxp9QX/1KPNw1DHOKSHapbYn\nyBSxLm55Lmvkun/UP8oRKPG3ti03UM0A6RVsjeJNsSb0hfteFuVjtKK2AoCfhRHL\nSPMFr4IilPO+ZLRyVvNlGQqoIbPhOBLPyi+vc1df7jSjzi1WQDZr/BiLoD3+4oHj\n2jHIcFiKKQD06e/8RuUJsYfOJYZrglUzxGPxMaLLDHxBqeTs2RykaStELy4FFLs=\n=XfYp\n-----END PGP SIGNATURE-----\n", "payload": "tree fedf8b6505e2a9b9982e00818dbcbab38c86d522\nparent 814f6339b4f37e0bbf8c8492fbb79ca04c01f408\nparent 7b37776ade019d8aa6cf86c5bcb2d9f39c0121a5\nauthor Nick Cameron <nrc@ncameron.org> 1532665486 +1200\ncommitter GitHub <noreply@github.com> 1532665486 +1200\n\nMerge pull request #2864 from topecongiro/issue-2863\n\nModify the rule for reordering impl items"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ad879d52606ac03440744efa5b4d8ca8cc7566", "html_url": "https://github.com/rust-lang/rust/commit/69ad879d52606ac03440744efa5b4d8ca8cc7566", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ad879d52606ac03440744efa5b4d8ca8cc7566/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814f6339b4f37e0bbf8c8492fbb79ca04c01f408", "url": "https://api.github.com/repos/rust-lang/rust/commits/814f6339b4f37e0bbf8c8492fbb79ca04c01f408", "html_url": "https://github.com/rust-lang/rust/commit/814f6339b4f37e0bbf8c8492fbb79ca04c01f408"}, {"sha": "7b37776ade019d8aa6cf86c5bcb2d9f39c0121a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b37776ade019d8aa6cf86c5bcb2d9f39c0121a5", "html_url": "https://github.com/rust-lang/rust/commit/7b37776ade019d8aa6cf86c5bcb2d9f39c0121a5"}], "stats": {"total": 93, "additions": 90, "deletions": 3}, "files": [{"sha": "8c32d393df4b2f263034b780597085c472989c41", "filename": "src/items.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69ad879d52606ac03440744efa5b4d8ca8cc7566/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ad879d52606ac03440744efa5b4d8ca8cc7566/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=69ad879d52606ac03440744efa5b4d8ca8cc7566", "patch": "@@ -591,23 +591,31 @@ impl<'a> FmtVisitor<'a> {\n                 buffer.push((self.buffer.clone(), item.clone()));\n                 self.buffer.clear();\n             }\n-            // type -> const -> macro -> method\n+            // type -> existential -> const -> macro -> method\n             use ast::ImplItemKind::*;\n             fn need_empty_line(a: &ast::ImplItemKind, b: &ast::ImplItemKind) -> bool {\n                 match (a, b) {\n-                    (Type(..), Type(..)) | (Const(..), Const(..)) => false,\n+                    (Type(..), Type(..))\n+                    | (Const(..), Const(..))\n+                    | (Existential(..), Existential(..)) => false,\n                     _ => true,\n                 }\n             }\n \n             buffer.sort_by(|(_, a), (_, b)| match (&a.node, &b.node) {\n+                (Type(..), Type(..))\n+                | (Const(..), Const(..))\n+                | (Macro(..), Macro(..))\n+                | (Existential(..), Existential(..)) => a.ident.as_str().cmp(&b.ident.as_str()),\n+                (Method(..), Method(..)) => a.span.lo().cmp(&b.span.lo()),\n                 (Type(..), _) => Ordering::Less,\n                 (_, Type(..)) => Ordering::Greater,\n+                (Existential(..), _) => Ordering::Less,\n+                (_, Existential(..)) => Ordering::Greater,\n                 (Const(..), _) => Ordering::Less,\n                 (_, Const(..)) => Ordering::Greater,\n                 (Macro(..), _) => Ordering::Less,\n                 (_, Macro(..)) => Ordering::Greater,\n-                _ => a.span.lo().cmp(&b.span.lo()),\n             });\n             let mut prev_kind = None;\n             for (buf, item) in buffer {"}, {"sha": "792ffdbac24da1103a3bd2195f693673e6e9ab79", "filename": "tests/source/issue-2863.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/69ad879d52606ac03440744efa5b4d8ca8cc7566/tests%2Fsource%2Fissue-2863.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ad879d52606ac03440744efa5b4d8ca8cc7566/tests%2Fsource%2Fissue-2863.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2863.rs?ref=69ad879d52606ac03440744efa5b4d8ca8cc7566", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-reorder_impl_items: true\n+\n+impl<T> IntoIterator for SafeVec<T> {\n+    existential type F: Trait;\n+    type IntoIter = self::IntoIter<T>;\n+    type Item = T;\n+    // comment on foo()\n+    fn foo() {println!(\"hello, world\");}\n+    type Bar = u32;\n+    fn foo1() {println!(\"hello, world\");}\n+    type FooBar = u32;\n+    fn foo2() {println!(\"hello, world\");}\n+    fn foo3() {println!(\"hello, world\");}\n+    const SomeConst: i32 = 100;\n+    fn foo4() {println!(\"hello, world\");}\n+    fn foo5() {println!(\"hello, world\");}\n+    // comment on FoooooBar\n+    type FoooooBar = u32;\n+    fn foo6() {println!(\"hello, world\");}\n+    fn foo7() {println!(\"hello, world\");}\n+    type BarFoo = u32;\n+    existential type E: Trait;\n+    const AnotherConst: i32 = 100;\n+    fn foo8() {println!(\"hello, world\");}\n+}"}, {"sha": "a53628e3ea905f84c1ff675458f8afe710d8f07c", "filename": "tests/target/issue-2863.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/69ad879d52606ac03440744efa5b4d8ca8cc7566/tests%2Ftarget%2Fissue-2863.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ad879d52606ac03440744efa5b4d8ca8cc7566/tests%2Ftarget%2Fissue-2863.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2863.rs?ref=69ad879d52606ac03440744efa5b4d8ca8cc7566", "patch": "@@ -0,0 +1,54 @@\n+// rustfmt-reorder_impl_items: true\n+\n+impl<T> IntoIterator for SafeVec<T> {\n+    type Bar = u32;\n+    type BarFoo = u32;\n+    type FooBar = u32;\n+    // comment on FoooooBar\n+    type FoooooBar = u32;\n+    type IntoIter = self::IntoIter<T>;\n+    type Item = T;\n+\n+    existential type E: Trait;\n+    existential type F: Trait;\n+\n+    const AnotherConst: i32 = 100;\n+    const SomeConst: i32 = 100;\n+\n+    // comment on foo()\n+    fn foo() {\n+        println!(\"hello, world\");\n+    }\n+\n+    fn foo1() {\n+        println!(\"hello, world\");\n+    }\n+\n+    fn foo2() {\n+        println!(\"hello, world\");\n+    }\n+\n+    fn foo3() {\n+        println!(\"hello, world\");\n+    }\n+\n+    fn foo4() {\n+        println!(\"hello, world\");\n+    }\n+\n+    fn foo5() {\n+        println!(\"hello, world\");\n+    }\n+\n+    fn foo6() {\n+        println!(\"hello, world\");\n+    }\n+\n+    fn foo7() {\n+        println!(\"hello, world\");\n+    }\n+\n+    fn foo8() {\n+        println!(\"hello, world\");\n+    }\n+}"}]}