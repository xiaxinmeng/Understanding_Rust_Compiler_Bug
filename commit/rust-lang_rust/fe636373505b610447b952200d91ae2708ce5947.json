{"sha": "fe636373505b610447b952200d91ae2708ce5947", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNjM2MzczNTA1YjYxMDQ0N2I5NTIyMDBkOTFhZTI3MDhjZTU5NDc=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-13T17:33:31Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-16T00:23:55Z"}, "message": "Use locks for Session.lint_store and Session.buffered_lints", "tree": {"sha": "75f45c52082c647fc9f97787d1da89e0972a3126", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75f45c52082c647fc9f97787d1da89e0972a3126"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe636373505b610447b952200d91ae2708ce5947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe636373505b610447b952200d91ae2708ce5947", "html_url": "https://github.com/rust-lang/rust/commit/fe636373505b610447b952200d91ae2708ce5947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe636373505b610447b952200d91ae2708ce5947/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "274169090214a37ea17ec21ae6241733de1ff2e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/274169090214a37ea17ec21ae6241733de1ff2e9", "html_url": "https://github.com/rust-lang/rust/commit/274169090214a37ea17ec21ae6241733de1ff2e9"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "d5849ea22b1ef299cf4bd8aa0dee5c7ca152e255", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe636373505b610447b952200d91ae2708ce5947/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe636373505b610447b952200d91ae2708ce5947/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=fe636373505b610447b952200d91ae2708ce5947", "patch": "@@ -27,6 +27,7 @@\n use self::TargetLint::*;\n \n use std::slice;\n+use rustc_data_structures::sync::{RwLock, ReadGuard};\n use lint::{EarlyLintPassObject, LateLintPassObject};\n use lint::{Level, Lint, LintId, LintPass, LintBuffer};\n use lint::builtin::BuiltinLintDiagnostics;\n@@ -39,7 +40,6 @@ use ty::layout::{LayoutError, LayoutOf, TyLayout};\n use util::nodemap::FxHashMap;\n \n use std::default::Default as StdDefault;\n-use std::cell::{Ref, RefCell};\n use syntax::ast;\n use syntax::edition;\n use syntax_pos::{MultiSpan, Span};\n@@ -78,7 +78,7 @@ pub struct LintStore {\n \n pub struct LintSession<'a, PassObject> {\n     /// Reference to the store of registered lints.\n-    lints: Ref<'a, LintStore>,\n+    lints: ReadGuard<'a, LintStore>,\n \n     /// Trait objects for each lint pass.\n     passes: Option<Vec<PassObject>>,\n@@ -336,7 +336,7 @@ impl<'a, PassObject: LintPassObject> LintSession<'a, PassObject> {\n     /// Creates a new `LintSession`, by moving out the `LintStore`'s initial\n     /// lint levels and pass objects. These can be restored using the `restore`\n     /// method.\n-    fn new(store: &'a RefCell<LintStore>) -> LintSession<'a, PassObject> {\n+    fn new(store: &'a RwLock<LintStore>) -> LintSession<'a, PassObject> {\n         let mut s = store.borrow_mut();\n         let passes = PassObject::take_passes(&mut *s);\n         drop(s);\n@@ -347,7 +347,7 @@ impl<'a, PassObject: LintPassObject> LintSession<'a, PassObject> {\n     }\n \n     /// Restores the levels back to the original lint store.\n-    fn restore(self, store: &RefCell<LintStore>) {\n+    fn restore(self, store: &RwLock<LintStore>) {\n         drop(self.lints);\n         let mut s = store.borrow_mut();\n         PassObject::restore_passes(&mut *s, self.passes);"}, {"sha": "77dff0950ee58268a562f8e24c189c4130b8102f", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe636373505b610447b952200d91ae2708ce5947/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe636373505b610447b952200d91ae2708ce5947/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=fe636373505b610447b952200d91ae2708ce5947", "patch": "@@ -26,7 +26,7 @@ use util::nodemap::{FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n use util::common::ProfileQueriesMsg;\n \n-use rustc_data_structures::sync::{Lrc, Lock, LockCell, OneThread, Once};\n+use rustc_data_structures::sync::{Lrc, Lock, LockCell, OneThread, Once, RwLock};\n \n use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder, DiagnosticId};\n@@ -83,8 +83,8 @@ pub struct Session {\n \n     // FIXME: lint_store and buffered_lints are not thread-safe,\n     // but are only used in a single thread\n-    pub lint_store: OneThread<RefCell<lint::LintStore>>,\n-    pub buffered_lints: OneThread<RefCell<Option<lint::LintBuffer>>>,\n+    pub lint_store: RwLock<lint::LintStore>,\n+    pub buffered_lints: Lock<Option<lint::LintBuffer>>,\n \n     /// Set of (DiagnosticId, Option<Span>, message) tuples tracking\n     /// (sub)diagnostics that have been set once, but should not be set again,\n@@ -1091,8 +1091,8 @@ pub fn build_session_(\n         default_sysroot,\n         local_crate_source_file,\n         working_dir,\n-        lint_store: OneThread::new(RefCell::new(lint::LintStore::new())),\n-        buffered_lints: OneThread::new(RefCell::new(Some(lint::LintBuffer::new()))),\n+        lint_store: RwLock::new(lint::LintStore::new()),\n+        buffered_lints: Lock::new(Some(lint::LintBuffer::new())),\n         one_time_diagnostics: RefCell::new(FxHashSet()),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n         plugin_attributes: OneThread::new(RefCell::new(Vec::new())),"}]}