{"sha": "86f5e177bca8121e1edc9864023a8ea61acf9034", "node_id": "C_kwDOAAsO6NoAKDg2ZjVlMTc3YmNhODEyMWUxZWRjOTg2NDAyM2E4ZWE2MWFjZjkwMzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-31T11:24:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-31T11:24:03Z"}, "message": "Auto merge of #93498 - matthiaskrgr:rollup-k5shwrc, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #90277 (Improve terminology around \"after typeck\")\n - #92918 (Allow eliding GATs in expression position)\n - #93039 (Don't suggest inaccessible fields)\n - #93155 (Switch pretty printer to block-based indentation)\n - #93214 (Respect doc(hidden) when suggesting available fields)\n - #93347 (Make `char::DecodeUtf16::size_hist` more precise)\n - #93392 (Clarify documentation on char::MAX)\n - #93444 (Fix some CSS warnings and errors from VS Code)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "feaed126198ded6aecf5af5512277c1acff222f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feaed126198ded6aecf5af5512277c1acff222f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86f5e177bca8121e1edc9864023a8ea61acf9034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86f5e177bca8121e1edc9864023a8ea61acf9034", "html_url": "https://github.com/rust-lang/rust/commit/86f5e177bca8121e1edc9864023a8ea61acf9034", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86f5e177bca8121e1edc9864023a8ea61acf9034/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "415c9f95884caebd0be9b837ef0885d1ffde1b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/415c9f95884caebd0be9b837ef0885d1ffde1b9b", "html_url": "https://github.com/rust-lang/rust/commit/415c9f95884caebd0be9b837ef0885d1ffde1b9b"}, {"sha": "2070b221163760b7ed86d511082af72d3de4ce06", "url": "https://api.github.com/repos/rust-lang/rust/commits/2070b221163760b7ed86d511082af72d3de4ce06", "html_url": "https://github.com/rust-lang/rust/commit/2070b221163760b7ed86d511082af72d3de4ce06"}], "stats": {"total": 916, "additions": 593, "deletions": 323}, "files": [{"sha": "e1f43cb20dc383672f9cb923cc3739f6e93f7628", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 49, "deletions": 20, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -146,6 +146,22 @@ pub enum Breaks {\n     Inconsistent,\n }\n \n+#[derive(Clone, Copy)]\n+enum IndentStyle {\n+    /// Vertically aligned under whatever column this block begins at.\n+    ///\n+    ///     fn demo(arg1: usize,\n+    ///             arg2: usize);\n+    Visual,\n+    /// Indented relative to the indentation level of the previous line.\n+    ///\n+    ///     fn demo(\n+    ///         arg1: usize,\n+    ///         arg2: usize,\n+    ///     );\n+    Block { offset: isize },\n+}\n+\n #[derive(Clone, Copy)]\n pub struct BreakToken {\n     offset: isize,\n@@ -154,7 +170,7 @@ pub struct BreakToken {\n \n #[derive(Clone, Copy)]\n pub struct BeginToken {\n-    offset: isize,\n+    indent: IndentStyle,\n     breaks: Breaks,\n }\n \n@@ -178,7 +194,7 @@ impl Token {\n #[derive(Copy, Clone)]\n enum PrintFrame {\n     Fits,\n-    Broken { offset: isize, breaks: Breaks },\n+    Broken { indent: usize, breaks: Breaks },\n }\n \n const SIZE_INFINITY: isize = 0xffff;\n@@ -204,6 +220,8 @@ pub struct Printer {\n     scan_stack: VecDeque<usize>,\n     /// Stack of blocks-in-progress being flushed by print\n     print_stack: Vec<PrintFrame>,\n+    /// Level of indentation of current line\n+    indent: usize,\n     /// Buffered indentation to avoid writing trailing whitespace\n     pending_indentation: isize,\n     /// The token most recently popped from the left boundary of the\n@@ -229,6 +247,7 @@ impl Printer {\n             right_total: 0,\n             scan_stack: VecDeque::new(),\n             print_stack: Vec::new(),\n+            indent: 0,\n             pending_indentation: 0,\n             last_printed: None,\n         }\n@@ -368,38 +387,41 @@ impl Printer {\n         *self\n             .print_stack\n             .last()\n-            .unwrap_or(&PrintFrame::Broken { offset: 0, breaks: Breaks::Inconsistent })\n+            .unwrap_or(&PrintFrame::Broken { indent: 0, breaks: Breaks::Inconsistent })\n     }\n \n     fn print_begin(&mut self, token: BeginToken, size: isize) {\n         if size > self.space {\n-            let col = self.margin - self.space + token.offset;\n-            self.print_stack.push(PrintFrame::Broken { offset: col, breaks: token.breaks });\n+            self.print_stack.push(PrintFrame::Broken { indent: self.indent, breaks: token.breaks });\n+            self.indent = match token.indent {\n+                IndentStyle::Block { offset } => (self.indent as isize + offset) as usize,\n+                IndentStyle::Visual => (self.margin - self.space) as usize,\n+            };\n         } else {\n             self.print_stack.push(PrintFrame::Fits);\n         }\n     }\n \n     fn print_end(&mut self) {\n-        self.print_stack.pop().unwrap();\n+        if let PrintFrame::Broken { indent, .. } = self.print_stack.pop().unwrap() {\n+            self.indent = indent;\n+        }\n     }\n \n     fn print_break(&mut self, token: BreakToken, size: isize) {\n-        let break_offset =\n-            match self.get_top() {\n-                PrintFrame::Fits => None,\n-                PrintFrame::Broken { offset, breaks: Breaks::Consistent } => Some(offset),\n-                PrintFrame::Broken { offset, breaks: Breaks::Inconsistent } => {\n-                    if size > self.space { Some(offset) } else { None }\n-                }\n-            };\n-        if let Some(offset) = break_offset {\n-            self.out.push('\\n');\n-            self.pending_indentation = offset + token.offset;\n-            self.space = self.margin - (offset + token.offset);\n-        } else {\n+        let fits = match self.get_top() {\n+            PrintFrame::Fits => true,\n+            PrintFrame::Broken { breaks: Breaks::Consistent, .. } => false,\n+            PrintFrame::Broken { breaks: Breaks::Inconsistent, .. } => size <= self.space,\n+        };\n+        if fits {\n             self.pending_indentation += token.blank_space;\n             self.space -= token.blank_space;\n+        } else {\n+            self.out.push('\\n');\n+            let indent = self.indent as isize + token.offset;\n+            self.pending_indentation = indent;\n+            self.space = self.margin - indent;\n         }\n     }\n \n@@ -422,7 +444,10 @@ impl Printer {\n \n     /// \"raw box\"\n     pub fn rbox(&mut self, indent: usize, breaks: Breaks) {\n-        self.scan_begin(BeginToken { offset: indent as isize, breaks })\n+        self.scan_begin(BeginToken {\n+            indent: IndentStyle::Block { offset: indent as isize },\n+            breaks,\n+        })\n     }\n \n     /// Inconsistent breaking box\n@@ -435,6 +460,10 @@ impl Printer {\n         self.rbox(indent, Breaks::Consistent)\n     }\n \n+    pub fn visual_align(&mut self) {\n+        self.scan_begin(BeginToken { indent: IndentStyle::Visual, breaks: Breaks::Consistent });\n+    }\n+\n     pub fn break_offset(&mut self, n: usize, off: isize) {\n         self.scan_break(BreakToken { offset: off, blank_space: n as isize })\n     }"}, {"sha": "b575dc21961337b0976f5ae4c0d06deabc33988b", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -315,7 +315,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                     self.word(cmnt.lines[0].clone());\n                     self.hardbreak()\n                 } else {\n-                    self.ibox(0);\n+                    self.visual_align();\n                     for line in &cmnt.lines {\n                         if !line.is_empty() {\n                             self.word(line.clone());\n@@ -655,7 +655,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         // Outer-box is consistent.\n         self.cbox(INDENT_UNIT);\n         // Head-box is inconsistent.\n-        self.ibox(w.len() + 1);\n+        self.ibox(0);\n         // Keyword that starts the head.\n         if !w.is_empty() {\n             self.word_nbsp(w);"}, {"sha": "6a5bba30b8bca8b1ef0a0ad8faf5703d321a8ec3", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -320,7 +320,9 @@ impl<'a> State<'a> {\n                     self.print_ident(label.ident);\n                     self.word_space(\":\");\n                 }\n-                self.head(\"while\");\n+                self.cbox(0);\n+                self.ibox(0);\n+                self.word_nbsp(\"while\");\n                 self.print_expr_as_cond(test);\n                 self.space();\n                 self.print_block_with_attrs(blk, attrs);\n@@ -330,7 +332,9 @@ impl<'a> State<'a> {\n                     self.print_ident(label.ident);\n                     self.word_space(\":\");\n                 }\n-                self.head(\"for\");\n+                self.cbox(0);\n+                self.ibox(0);\n+                self.word_nbsp(\"for\");\n                 self.print_pat(pat);\n                 self.space();\n                 self.word_space(\"in\");\n@@ -343,12 +347,14 @@ impl<'a> State<'a> {\n                     self.print_ident(label.ident);\n                     self.word_space(\":\");\n                 }\n-                self.head(\"loop\");\n+                self.cbox(0);\n+                self.ibox(0);\n+                self.word_nbsp(\"loop\");\n                 self.print_block_with_attrs(blk, attrs);\n             }\n             ast::ExprKind::Match(ref expr, ref arms) => {\n-                self.cbox(INDENT_UNIT);\n-                self.ibox(INDENT_UNIT);\n+                self.cbox(0);\n+                self.ibox(0);\n                 self.word_nbsp(\"match\");\n                 self.print_expr_as_cond(expr);\n                 self.space();\n@@ -388,7 +394,7 @@ impl<'a> State<'a> {\n                     self.word_space(\":\");\n                 }\n                 // containing cbox, will be closed by print-block at }\n-                self.cbox(INDENT_UNIT);\n+                self.cbox(0);\n                 // head-box, will be closed by print-block after {\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n@@ -397,7 +403,7 @@ impl<'a> State<'a> {\n                 self.word_nbsp(\"async\");\n                 self.print_capture_clause(capture_clause);\n                 // cbox/ibox in analogy to the `ExprKind::Block` arm above\n-                self.cbox(INDENT_UNIT);\n+                self.cbox(0);\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n             }\n@@ -500,7 +506,9 @@ impl<'a> State<'a> {\n                 self.word(\"?\")\n             }\n             ast::ExprKind::TryBlock(ref blk) => {\n-                self.head(\"try\");\n+                self.cbox(0);\n+                self.ibox(0);\n+                self.word_nbsp(\"try\");\n                 self.print_block_with_attrs(blk, attrs)\n             }\n             ast::ExprKind::Err => {"}, {"sha": "dac84ae9d5fc87fcbf4fda40a9f247d88e29bd5e", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -1,5 +1,5 @@\n use crate::pp::Breaks::Inconsistent;\n-use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n+use crate::pprust::state::{AnnNode, PrintState, State};\n \n use rustc_ast as ast;\n use rustc_ast::GenericBound;\n@@ -377,7 +377,7 @@ impl<'a> State<'a> {\n             self.space_if_not_bol();\n             self.maybe_print_comment(v.span.lo());\n             self.print_outer_attributes(&v.attrs);\n-            self.ibox(INDENT_UNIT);\n+            self.ibox(0);\n             self.print_variant(v);\n             self.word(\",\");\n             self.end();"}, {"sha": "d1b24b332bdcc65b2cef56a189b3f05cdeff0f53", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -195,7 +195,7 @@ pub struct InferCtxtInner<'tcx> {\n     // Opaque types found in explicit return types and their\n     // associated fresh inference variable. Writeback resolves these\n     // variables to get the concrete type, which can be used to\n-    // 'de-opaque' OpaqueTypeDecl, after typeck is done with all functions.\n+    // 'de-opaque' OpaqueTypeDecl outside of type inference.\n     pub opaque_types: OpaqueTypeMap<'tcx>,\n \n     /// A map from inference variables created from opaque"}, {"sha": "cb08e95258678ce3aa29cb9d9460b2079e76bd4b", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -524,7 +524,7 @@ impl LintStore {\n     }\n }\n \n-/// Context for lint checking after type checking.\n+/// Context for lint checking outside of type inference.\n pub struct LateContext<'tcx> {\n     /// Type context we're checking in.\n     pub tcx: TyCtxt<'tcx>,"}, {"sha": "b1ab0f5b533dd95eb47b5ab17c186cbc078f9c0c", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -894,7 +894,7 @@ pub struct LocalDecl<'tcx> {\n     /// across a suspension point against the type components of the generator\n     /// which type checking knows are live across a suspension point. We need to\n     /// flag drop flags to avoid triggering this check as they are introduced\n-    /// after typeck.\n+    /// outside of type inference.\n     ///\n     /// This should be sound because the drop flags are fully algebraic, and\n     /// therefore don't affect the auto-trait or outlives properties of the"}, {"sha": "d063494f2bcb7926d39728227b30512731fc93ae", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -220,7 +220,7 @@ pub struct CommonLifetimes<'tcx> {\n     /// `ReStatic`\n     pub re_static: Region<'tcx>,\n \n-    /// Erased region, used after type-checking\n+    /// Erased region, used outside of type inference.\n     pub re_erased: Region<'tcx>,\n }\n \n@@ -360,7 +360,7 @@ pub struct TypeckResults<'tcx> {\n     field_indices: ItemLocalMap<usize>,\n \n     /// Stores the types for various nodes in the AST. Note that this table\n-    /// is not guaranteed to be populated until after typeck. See\n+    /// is not guaranteed to be populated outside inference. See\n     /// typeck::check::fn_ctxt for details.\n     node_types: ItemLocalMap<Ty<'tcx>>,\n "}, {"sha": "b3b2bb4459f7df376a5aeb6c07b2f8332956e879", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -34,8 +34,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Erase the regions in `value` and then fully normalize all the\n     /// types found within. The result will also have regions erased.\n     ///\n-    /// This is appropriate to use only after type-check: it assumes\n-    /// that normalization will succeed, for example.\n+    /// This should only be used outside of type inference. For example,\n+    /// it assumes that normalization will succeed.\n     pub fn normalize_erasing_regions<T>(self, param_env: ty::ParamEnv<'tcx>, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,"}, {"sha": "7d4af6cfa405257088c8e41bb3c1ed5cc89151b7", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -1464,11 +1464,11 @@ pub enum RegionKind {\n     /// Static data that has an \"infinite\" lifetime. Top in the region lattice.\n     ReStatic,\n \n-    /// A region variable. Should not exist after typeck.\n+    /// A region variable. Should not exist outside of type inference.\n     ReVar(RegionVid),\n \n     /// A placeholder region -- basically, the higher-ranked version of `ReFree`.\n-    /// Should not exist after typeck.\n+    /// Should not exist outside of type inference.\n     RePlaceholder(ty::PlaceholderRegion),\n \n     /// Empty lifetime is for data that is never accessed.  We tag the"}, {"sha": "570fa873a23da287200195edcd7c58e173109372", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -984,7 +984,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n         tcx.dep_graph.with_ignore(|| {\n             info!(\"Dumping crate {}\", cratename);\n \n-            // Privacy checking requires and is done after type checking; use a\n+            // Privacy checking must be done outside of type inference; use a\n             // fallback in case the access levels couldn't have been correctly computed.\n             let access_levels = match tcx.sess.compile_status() {\n                 Ok(..) => tcx.privacy_access_levels(()),"}, {"sha": "a84410d0f3c46510a13349bf0e3461a84f3d130f", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -444,7 +444,7 @@ impl InlineAsmRegClass {\n     }\n \n     /// Returns a suggested register class to use for this type. This is called\n-    /// after type checking via `supported_types` fails to give a better error\n+    /// when `supported_types` fails to give a better error\n     /// message to the user.\n     pub fn suggest_class(self, arch: InlineAsmArch, ty: InlineAsmType) -> Option<Self> {\n         match self {"}, {"sha": "759bc696981676162f708c376ee9f0406f649c1f", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -18,7 +18,6 @@ use rustc_middle::ty::{self, TyCtxt};\n /// that type check should guarantee to us that all nested\n /// obligations *could be* resolved if we wanted to.\n ///\n-/// Assumes that this is run after the entire crate has been successfully type-checked.\n /// This also expects that `trait_ref` is fully normalized.\n pub fn codegen_fulfill_obligation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -101,7 +100,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n /// Finishes processes any obligations that remain in the\n /// fulfillment context, and then returns the result with all type\n /// variables removed and regions erased. Because this is intended\n-/// for use after type-check has completed, if any errors occur,\n+/// for use outside of type inference, if any errors occur,\n /// it will panic. It is used during normalization and other cases\n /// where processing the obligations in `fulfill_cx` may cause\n /// type inference variables that appear in `result` to be\n@@ -124,7 +123,10 @@ where\n     if !errors.is_empty() {\n         infcx.tcx.sess.delay_span_bug(\n             rustc_span::DUMMY_SP,\n-            &format!(\"Encountered errors `{:?}` resolving bounds after type-checking\", errors),\n+            &format!(\n+                \"Encountered errors `{:?}` resolving bounds outside of type inference\",\n+                errors\n+            ),\n         );\n     }\n "}, {"sha": "2927e64f705fea57da73753c66ee33a8b4685261", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -291,7 +291,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     //\n     // In any case, in practice, typeck constructs all the\n     // parameter environments once for every fn as it goes,\n-    // and errors will get reported then; so after typeck we\n+    // and errors will get reported then; so outside of type inference we\n     // can be sure that no errors should occur.\n \n     debug!("}, {"sha": "087fc6034d98f9a567ec66f1dd09fd6438424ecf", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -391,7 +391,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n             ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n-                // Only normalize `impl Trait` after type-checking, usually in codegen.\n+                // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.super_fold_with(self),\n "}, {"sha": "3c9e1bbcef26deffa1783a25ed9f7078065e5901", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -200,7 +200,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n             ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n-                // Only normalize `impl Trait` after type-checking, usually in codegen.\n+                // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.try_super_fold_with(self),\n "}, {"sha": "b882a940d40c3609eb82ea6afb5f93296b0ca0ad", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -149,7 +149,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // kind of an \"idempotent\" action, but I'm not sure where would be\n     // a better place. In practice, we construct environments for\n     // every fn once during type checking, and we'll abort if there\n-    // are any errors at that point, so after type checking you can be\n+    // are any errors at that point, so outside of type inference you can be\n     // sure that this will succeed without errors anyway.\n \n     if tcx.sess.opts.debugging_opts.chalk {"}, {"sha": "05ff7f818c75f22549d30a228cd0431e456dc261", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -445,7 +445,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let named_type_param_count =\n             param_counts.types - has_self as usize - synth_type_param_count;\n         let infer_lifetimes =\n-            gen_pos != GenericArgPosition::Type && !gen_args.has_lifetime_params();\n+            (gen_pos != GenericArgPosition::Type || infer_args) && !gen_args.has_lifetime_params();\n \n         if gen_pos != GenericArgPosition::Type && !gen_args.bindings.is_empty() {\n             Self::prohibit_assoc_ty_binding(tcx, gen_args.bindings[0].span);"}, {"sha": "16fc9a01a27078f7ef9b31119249ed6ab52e3b28", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -482,7 +482,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             ) -> subst::GenericArg<'tcx> {\n                 let tcx = self.astconv.tcx();\n                 match param.kind {\n-                    GenericParamDefKind::Lifetime => tcx.lifetimes.re_static.into(),\n+                    GenericParamDefKind::Lifetime => self\n+                        .astconv\n+                        .re_infer(Some(param), self.span)\n+                        .unwrap_or_else(|| {\n+                            debug!(?param, \"unelided lifetime in signature\");\n+\n+                            // This indicates an illegal lifetime in a non-assoc-trait position\n+                            tcx.sess.delay_span_bug(self.span, \"unelided lifetime in signature\");\n+\n+                            // Supply some dummy value. We don't have an\n+                            // `re_error`, annoyingly, so use `'static`.\n+                            tcx.lifetimes.re_static\n+                        })\n+                        .into(),\n                     GenericParamDefKind::Type { has_default, .. } => {\n                         if !infer_args && has_default {\n                             // No type parameter provided, but a default exists."}, {"sha": "0e1dbc53806ffe511bf4ae2e7d45cad784d5e72e", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 51, "deletions": 18, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -31,10 +31,11 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::{ExprKind, QPath};\n+use rustc_hir::{ExprKind, HirId, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n+use rustc_middle::middle::stability;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::error::TypeError::{FieldMisMatch, Sorts};\n@@ -1720,9 +1721,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => {\n                 // prevent all specified fields from being suggested\n                 let skip_fields = skip_fields.iter().map(|x| x.ident.name);\n-                if let Some(field_name) =\n-                    Self::suggest_field_name(variant, field.ident.name, skip_fields.collect())\n-                {\n+                if let Some(field_name) = self.suggest_field_name(\n+                    variant,\n+                    field.ident.name,\n+                    skip_fields.collect(),\n+                    expr_span,\n+                ) {\n                     err.span_suggestion(\n                         field.ident.span,\n                         \"a field with a similar name exists\",\n@@ -1743,7 +1747,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     format!(\"`{}` does not have this field\", ty),\n                                 );\n                             }\n-                            let available_field_names = self.available_field_names(variant);\n+                            let available_field_names =\n+                                self.available_field_names(variant, expr_span);\n                             if !available_field_names.is_empty() {\n                                 err.note(&format!(\n                                     \"available fields are: {}\",\n@@ -1759,19 +1764,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n-    // Return an hint about the closest match in field names\n+    // Return a hint about the closest match in field names\n     fn suggest_field_name(\n+        &self,\n         variant: &'tcx ty::VariantDef,\n         field: Symbol,\n         skip: Vec<Symbol>,\n+        // The span where stability will be checked\n+        span: Span,\n     ) -> Option<Symbol> {\n         let names = variant\n             .fields\n             .iter()\n             .filter_map(|field| {\n                 // ignore already set fields and private fields from non-local crates\n+                // and unstable fields.\n                 if skip.iter().any(|&x| x == field.name)\n                     || (!variant.def_id.is_local() && !field.vis.is_public())\n+                    || matches!(\n+                        self.tcx.eval_stability(field.did, None, span, None),\n+                        stability::EvalResult::Deny { .. }\n+                    )\n                 {\n                     None\n                 } else {\n@@ -1783,7 +1796,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         find_best_match_for_name(&names, field, None)\n     }\n \n-    fn available_field_names(&self, variant: &'tcx ty::VariantDef) -> Vec<Symbol> {\n+    fn available_field_names(\n+        &self,\n+        variant: &'tcx ty::VariantDef,\n+        access_span: Span,\n+    ) -> Vec<Symbol> {\n         variant\n             .fields\n             .iter()\n@@ -1793,7 +1810,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .adjust_ident_and_get_scope(field.ident(self.tcx), variant.def_id, self.body_id)\n                     .1;\n                 field.vis.is_accessible_from(def_scope, self.tcx)\n+                    && !matches!(\n+                        self.tcx.eval_stability(field.did, None, access_span, None),\n+                        stability::EvalResult::Deny { .. }\n+                    )\n             })\n+            .filter(|field| !self.tcx.is_doc_hidden(field.did))\n             .map(|field| field.name)\n             .collect()\n     }\n@@ -1948,7 +1970,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             \"ban_nonexisting_field: field={:?}, base={:?}, expr={:?}, expr_ty={:?}\",\n             field, base, expr, expr_t\n         );\n-        let mut err = self.no_such_field_err(field, expr_t);\n+        let mut err = self.no_such_field_err(field, expr_t, base.hir_id);\n \n         match *expr_t.peel_refs().kind() {\n             ty::Array(_, len) => {\n@@ -1958,7 +1980,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.suggest_first_deref_field(&mut err, expr, base, field);\n             }\n             ty::Adt(def, _) if !def.is_enum() => {\n-                self.suggest_fields_on_recordish(&mut err, def, field);\n+                self.suggest_fields_on_recordish(&mut err, def, field, expr.span);\n             }\n             ty::Param(param_ty) => {\n                 self.point_at_param_definition(&mut err, param_ty);\n@@ -2121,9 +2143,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         def: &'tcx ty::AdtDef,\n         field: Ident,\n+        access_span: Span,\n     ) {\n         if let Some(suggested_field_name) =\n-            Self::suggest_field_name(def.non_enum_variant(), field.name, vec![])\n+            self.suggest_field_name(def.non_enum_variant(), field.name, vec![], access_span)\n         {\n             err.span_suggestion(\n                 field.span,\n@@ -2134,7 +2157,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             err.span_label(field.span, \"unknown field\");\n             let struct_variant_def = def.non_enum_variant();\n-            let field_names = self.available_field_names(struct_variant_def);\n+            let field_names = self.available_field_names(struct_variant_def, access_span);\n             if !field_names.is_empty() {\n                 err.note(&format!(\n                     \"available fields are: {}\",\n@@ -2186,6 +2209,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         field: Ident,\n         expr_t: &'tcx ty::TyS<'tcx>,\n+        id: HirId,\n     ) -> DiagnosticBuilder<'_> {\n         let span = field.span;\n         debug!(\"no_such_field_err(span: {:?}, field: {:?}, expr_t: {:?})\", span, field, expr_t);\n@@ -2203,9 +2227,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // try to add a suggestion in case the field is a nested field of a field of the Adt\n         if let Some((fields, substs)) = self.get_field_candidates(span, &expr_t) {\n             for candidate_field in fields.iter() {\n-                if let Some(field_path) =\n-                    self.check_for_nested_field(span, field, candidate_field, substs, vec![])\n-                {\n+                if let Some(field_path) = self.check_for_nested_field(\n+                    span,\n+                    field,\n+                    candidate_field,\n+                    substs,\n+                    vec![],\n+                    self.tcx.parent_module(id).to_def_id(),\n+                ) {\n                     let field_path_str = field_path\n                         .iter()\n                         .map(|id| id.name.to_ident_string())\n@@ -2257,6 +2286,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         candidate_field: &ty::FieldDef,\n         subst: SubstsRef<'tcx>,\n         mut field_path: Vec<Ident>,\n+        id: DefId,\n     ) -> Option<Vec<Ident>> {\n         debug!(\n             \"check_for_nested_field(span: {:?}, candidate_field: {:?}, field_path: {:?}\",\n@@ -2276,17 +2306,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let field_ty = candidate_field.ty(self.tcx, subst);\n             if let Some((nested_fields, subst)) = self.get_field_candidates(span, &field_ty) {\n                 for field in nested_fields.iter() {\n-                    let ident = field.ident(self.tcx).normalize_to_macros_2_0();\n-                    if ident == target_field {\n-                        return Some(field_path);\n-                    } else {\n+                    let accessible = field.vis.is_accessible_from(id, self.tcx);\n+                    if accessible {\n+                        let ident = field.ident(self.tcx).normalize_to_macros_2_0();\n+                        if ident == target_field {\n+                            return Some(field_path);\n+                        }\n                         let field_path = field_path.clone();\n                         if let Some(path) = self.check_for_nested_field(\n                             span,\n                             target_field,\n                             field,\n                             subst,\n                             field_path,\n+                            id,\n                         ) {\n                             return Some(path);\n                         }"}, {"sha": "8b9f979b573f70830930452c21fc94a724fbc651", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -120,9 +120,34 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         let (low, high) = self.iter.size_hint();\n-        // we could be entirely valid surrogates (2 elements per\n-        // char), or entirely non-surrogates (1 element per char)\n-        (low / 2, high)\n+\n+        let (low_buf, high_buf) = match self.buf {\n+            // buf is empty, no additional elements from it.\n+            None => (0, 0),\n+            // `u` is a non surrogate, so it's always an additional character.\n+            Some(u) if u < 0xD800 || 0xDFFF < u => (1, 1),\n+            // `u` is a leading surrogate (it can never be a trailing surrogate and\n+            // it's a surrogate due to the previous branch) and `self.iter` is empty.\n+            //\n+            // `u` can't be paired, since the `self.iter` is empty,\n+            // so it will always become an additional element (error).\n+            Some(_u) if high == Some(0) => (1, 1),\n+            // `u` is a leading surrogate and `iter` may be non-empty.\n+            //\n+            // `u` can either pair with a trailing surrogate, in which case no additional elements\n+            // are produced, or it can become an error, in which case it's an additional character (error).\n+            Some(_u) => (0, 1),\n+        };\n+\n+        // `self.iter` could contain entirely valid surrogates (2 elements per\n+        // char), or entirely non-surrogates (1 element per char).\n+        //\n+        // On odd lower bound, at least one element must stay unpaired\n+        // (with other elements from `self.iter`), so we round up.\n+        let low = low.div_ceil(2) + low_buf;\n+        let high = high.and_then(|h| h.checked_add(high_buf));\n+\n+        (low, high)\n     }\n }\n "}, {"sha": "c4c0a5a6c78ad5059a882f1198aafa38da8cd7fd", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -9,14 +9,19 @@ use super::*;\n \n #[lang = \"char\"]\n impl char {\n-    /// The highest valid code point a `char` can have.\n+    /// The highest valid code point a `char` can have, `'\\u{10FFFF}'`.\n     ///\n-    /// A `char` is a [Unicode Scalar Value], which means that it is a [Code\n-    /// Point], but only ones within a certain range. `MAX` is the highest valid\n-    /// code point that's a valid [Unicode Scalar Value].\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # fn something_which_returns_char() -> char { 'a' }\n+    /// let c: char = something_which_returns_char();\n+    /// assert!(c <= char::MAX);\n     ///\n-    /// [Unicode Scalar Value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-    /// [Code Point]: https://www.unicode.org/glossary/#code_point\n+    /// let value_at_max = char::MAX as u32;\n+    /// assert_eq!(char::from_u32(value_at_max), Some('\\u{10FFFF}'));\n+    /// assert_eq!(char::from_u32(value_at_max + 1), None);\n+    /// ```\n     #[stable(feature = \"assoc_char_consts\", since = \"1.52.0\")]\n     pub const MAX: char = '\\u{10ffff}';\n "}, {"sha": "9364ac4f3ec1fa6c014f29e12d9b2bc68be27347", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -89,14 +89,19 @@ const MAX_THREE_B: u32 = 0x10000;\n     Cn  Unassigned              a reserved unassigned code point or a noncharacter\n */\n \n-/// The highest valid code point a `char` can have.\n+/// The highest valid code point a `char` can have, `'\\u{10FFFF}'`.\n ///\n-/// A [`char`] is a [Unicode Scalar Value], which means that it is a [Code\n-/// Point], but only ones within a certain range. `MAX` is the highest valid\n-/// code point that's a valid [Unicode Scalar Value].\n+/// # Examples\n ///\n-/// [Unicode Scalar Value]: https://www.unicode.org/glossary/#unicode_scalar_value\n-/// [Code Point]: https://www.unicode.org/glossary/#code_point\n+/// ```\n+/// # fn something_which_returns_char() -> char { 'a' }\n+/// let c: char = something_which_returns_char();\n+/// assert!(c <= char::MAX);\n+///\n+/// let value_at_max = char::MAX as u32;\n+/// assert_eq!(char::from_u32(value_at_max), Some('\\u{10FFFF}'));\n+/// assert_eq!(char::from_u32(value_at_max + 1), None);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: char = char::MAX;\n "}, {"sha": "4c899b6eb43d0c5b1e1934b16edffc825d3a8a82", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -308,6 +308,33 @@ fn test_decode_utf16() {\n     check(&[0xD800, 0], &[Err(0xD800), Ok('\\0')]);\n }\n \n+#[test]\n+fn test_decode_utf16_size_hint() {\n+    fn check(s: &[u16]) {\n+        let mut iter = char::decode_utf16(s.iter().cloned());\n+\n+        loop {\n+            let count = iter.clone().count();\n+            let (lower, upper) = iter.size_hint();\n+\n+            assert!(\n+                lower <= count && count <= upper.unwrap(),\n+                \"lower = {lower}, count = {count}, upper = {upper:?}\"\n+            );\n+\n+            if let None = iter.next() {\n+                break;\n+            }\n+        }\n+    }\n+\n+    check(&[0xD800, 0xD800, 0xDC00]);\n+    check(&[0xD800, 0xD800, 0x0]);\n+    check(&[0xD800, 0x41, 0x42]);\n+    check(&[0xD800, 0]);\n+    check(&[0xD834, 0x006d]);\n+}\n+\n #[test]\n fn ed_iterator_specializations() {\n     // Check counting"}, {"sha": "76913a5c1c5b5e077c763701e76ffb515dd172e0", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -1502,7 +1502,6 @@ kbd {\n \tvertical-align: middle;\n \tborder: solid 1px;\n \tborder-radius: 3px;\n-\tbox-shadow: inset 0 -1px 0;\n \tcursor: default;\n }\n "}, {"sha": "0aaf4f78c34ef1ae18ce79f1c1669749558199a9", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -532,7 +532,7 @@ kbd {\n \tbackground-color: #314559;\n \tborder-color: #5c6773;\n \tborder-bottom-color: #5c6773;\n-\tbox-shadow-color: #c6cbd1;\n+\tbox-shadow: inset 0 -1px 0 #5c6773;\n }\n \n #theme-picker, #settings-menu, #help-button {\n@@ -631,5 +631,5 @@ input:checked + .slider {\n \tbackground: #616161;\n }\n .toggle-line:hover .toggle-line-inner {\n-\tbackground: ##898989;\n+\tbackground: #898989;\n }"}, {"sha": "4fad2359ff0eb66bbc5aa883fa2df8ecbbe5a8d3", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -408,7 +408,7 @@ kbd {\n \tbackground-color: #fafbfc;\n \tborder-color: #d1d5da;\n \tborder-bottom-color: #c6cbd1;\n-\tbox-shadow-color: #c6cbd1;\n+\tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n #theme-picker, #settings-menu, #help-button {\n@@ -497,5 +497,5 @@ div.files > .selected {\n \tbackground: #616161;\n }\n .toggle-line:hover .toggle-line-inner {\n-\tbackground: ##898989;\n+\tbackground: #898989;\n }"}, {"sha": "16a777b7e672a58ef807ccbd5cc2ed0833e042c2", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -44,7 +44,9 @@ pre, .rustdoc.source .example-wrap {\n }\n \n .rust-logo {\n-\t/* No need for a border in here! */\n+\t/* This rule exists to force other themes to explicitly style the logo.\n+\t * Rustdoc has a custom linter for this purpose.\n+\t */\n }\n \n /* Improve the scrollbar display on webkit-based browsers */\n@@ -392,7 +394,7 @@ kbd {\n \tbackground-color: #fafbfc;\n \tborder-color: #d1d5da;\n \tborder-bottom-color: #c6cbd1;\n-\tbox-shadow-color: #c6cbd1;\n+\tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n #theme-picker, #settings-menu, #help-button {"}, {"sha": "2404b321942890ed841d897e8df1913493b646bb", "filename": "src/test/pretty/ast-stmt-expr-attr.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -28,67 +28,67 @@ fn syntax() {\n     let _ = #[attr] (x as Y);\n     let _ =\n         #[attr] while true {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] while let Some(false) = true {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] for x in y {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] loop {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] match true {\n-                    #![attr]\n-                            #[attr]\n-                            _ => false,\n-                };\n+            #![attr]\n+                #[attr]\n+                _ => false,\n+        };\n     let _ = #[attr] || #[attr] foo;\n     let _ = #[attr] move || #[attr] foo;\n     let _ =\n         #[attr] ||\n-                    #[attr] {\n-                                #![attr]\n-                                foo\n-                            };\n+            #[attr] {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] move ||\n-                    #[attr] {\n-                                #![attr]\n-                                foo\n-                            };\n+            #[attr] {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] ||\n-                    {\n-                        #![attr]\n-                        foo\n-                    };\n+            {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] move ||\n-                    {\n-                        #![attr]\n-                        foo\n-                    };\n+            {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                };\n+            #![attr]\n+            let _ = ();\n+        };\n     let _ =\n         #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                    foo\n-                };\n+            #![attr]\n+            let _ = ();\n+            foo\n+        };\n     let _ = #[attr] x = y;\n     let _ = #[attr] (x = y);\n     let _ = #[attr] x += y;"}, {"sha": "8c8580b07c218873f5bb8672289ed5853e1c8cca", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -93,9 +93,9 @@\n     // Taken from https://www.unicode.org/Public/UNIDATA/PropList.txt\n     let chars =\n         ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20', '\\u{85}', '\\u{A0}',\n-         '\\u{1680}', '\\u{2000}', '\\u{2001}', '\\u{2002}', '\\u{2003}',\n-         '\\u{2004}', '\\u{2005}', '\\u{2006}', '\\u{2007}', '\\u{2008}',\n-         '\\u{2009}', '\\u{200A}', '\\u{2028}', '\\u{2029}', '\\u{202F}',\n-         '\\u{205F}', '\\u{3000}'];\n+                '\\u{1680}', '\\u{2000}', '\\u{2001}', '\\u{2002}', '\\u{2003}',\n+                '\\u{2004}', '\\u{2005}', '\\u{2006}', '\\u{2007}', '\\u{2008}',\n+                '\\u{2009}', '\\u{200A}', '\\u{2028}', '\\u{2029}', '\\u{202F}',\n+                '\\u{205F}', '\\u{3000}'];\n     for c in &chars { let ws = c.is_whitespace(); println!(\"{} {}\", c, ws); }\n }"}, {"sha": "c7c9277faf69ebc18e01474ece4237c20f6cfb93", "filename": "src/test/pretty/delimited-token-groups.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -17,32 +17,32 @@ mac! {\n \n mac! {\n     a(aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-      aaaaaaaa aaaaaaaa) a\n+    aaaaaaaa aaaaaaaa) a\n     [aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-     aaaaaaaa aaaaaaaa] a\n+    aaaaaaaa aaaaaaaa] a\n     {\n         aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n         aaaaaaaa aaaaaaaa aaaaaaaa\n     } a\n }\n \n mac!(aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-     aaaaaaaa aaaaaaaa);\n+aaaaaaaa aaaaaaaa);\n mac![aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-     aaaaaaaa aaaaaaaa];\n+aaaaaaaa aaaaaaaa];\n mac! {\n     aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n     aaaaaaaa aaaaaaaa\n }\n \n #[rustc_dummy(aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-              aaaaaaaa aaaaaaaa aaaaaaaa)]\n+aaaaaaaa aaaaaaaa aaaaaaaa)]\n #[rustc_dummy[aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-              aaaaaaaa aaaaaaaa aaaaaaaa]]\n+aaaaaaaa aaaaaaaa aaaaaaaa]]\n #[rustc_dummy {\n-      aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-      aaaaaaaa aaaaaaaa\n-  }]\n+    aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n+    aaaaaaaa aaaaaaaa\n+}]\n #[rustc_dummy =\n-  \"aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\"]\n+\"aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\"]\n fn main() {}"}, {"sha": "3830c3aa6c9f191beb7a50ba2499d18b3a31a03c", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 25, "deletions": 45, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -11,15 +11,15 @@\n pub fn foo(_: [i32; (3 as usize)]) ({ } as ())\n \n pub fn bar() ({\n-                  const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n-                  let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n+        const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n+        let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n \n-                  let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n+        let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n \n-                  let _ =\n-                      (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])\n-                            as &[i32; 3]) as *const _ as *const [i32; 3]) as\n-                          *const [i32; (3 as usize)] as *const [i32; 3]);\n+        let _ =\n+            (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3]) as\n+                        &[i32; 3]) as *const _ as *const [i32; 3]) as\n+                *const [i32; (3 as usize)] as *const [i32; 3]);\n \n \n \n@@ -29,29 +29,19 @@\n \n \n \n-                  ({\n-                       let res =\n-                           ((::alloc::fmt::format as\n-                                for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n-                                                                                   as\n-                                                                                   fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n-                                                                                                                                                                as\n-                                                                                                                                                                &str)]\n-                                                                                                                                                              as\n-                                                                                                                                                              [&str; 1])\n-                                                                                                                                                            as\n-                                                                                                                                                            &[&str; 1]),\n-                                                                                                                                                        (&([]\n-                                                                                                                                                              as\n-                                                                                                                                                              [ArgumentV1; 0])\n-                                                                                                                                                            as\n-                                                                                                                                                            &[ArgumentV1; 0]))\n-                                                                                  as\n-                                                                                  Arguments))\n-                               as String);\n-                       (res as String)\n-                   } as String);\n-              } as ())\n+        ({\n+                let res =\n+                    ((::alloc::fmt::format as\n+                            for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n+                                as\n+                                fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n+                                            as &str)] as [&str; 1]) as\n+                                &[&str; 1]),\n+                            (&([] as [ArgumentV1; 0]) as &[ArgumentV1; 0])) as\n+                            Arguments)) as String);\n+                (res as String)\n+            } as String);\n+    } as ())\n pub type Foo = [i32; (3 as usize)];\n pub struct Bar {\n     pub x: [i32; (3 as usize)],\n@@ -60,19 +50,9 @@\n pub enum Baz { BazVariant([i32; (5 as usize)]), }\n pub fn id<T>(x: T) -> T ({ (x as T) } as T)\n pub fn use_id() ({\n-                     let _ =\n-                         ((id::<[i32; (3 as usize)]> as\n-                              fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1\n-                                                                               as\n-                                                                               i32),\n-                                                                           (2\n-                                                                               as\n-                                                                               i32),\n-                                                                           (3\n-                                                                               as\n-                                                                               i32)]\n-                                                                             as\n-                                                                             [i32; 3]))\n-                             as [i32; 3]);\n-                 } as ())\n+        let _ =\n+            ((id::<[i32; (3 as usize)]> as\n+                    fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1 as i32),\n+                        (2 as i32), (3 as i32)] as [i32; 3])) as [i32; 3]);\n+    } as ())\n fn main() ({ } as ())"}, {"sha": "87f525a6178e63ac6eb4c805a4d4cb5ef5440252", "filename": "src/test/pretty/issue-68710-field-attr-proc-mac-lost.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -9,8 +9,8 @@ struct C {\n #[allow()]\n const C: C =\n     C{\n-      #[cfg(debug_assertions)]\n-      field: 0,\n+        #[cfg(debug_assertions)]\n+        field: 0,\n \n-      #[cfg(not(debug_assertions))]\n-      field: 1,};\n+        #[cfg(not(debug_assertions))]\n+        field: 1,};"}, {"sha": "01adb14133b3536f5cdf42715c8fec0217398de2", "filename": "src/test/pretty/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro_rules.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -12,8 +12,8 @@ macro_rules! matcher_brackets {\n \n macro_rules! all_fragments {\n     ($b : block, $e : expr, $i : ident, $it : item, $l : lifetime, $lit :\n-     literal, $m : meta, $p : pat, $pth : path, $s : stmt, $tt : tt, $ty : ty,\n-     $vis : vis) => {} ;\n+    literal, $m : meta, $p : pat, $pth : path, $s : stmt, $tt : tt, $ty : ty,\n+    $vis : vis) => {} ;\n }\n \n fn main() {}"}, {"sha": "836af99002d65cd0282c00c8f1b52944e6b8530d", "filename": "src/test/pretty/match-naked-expr-medium.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -5,10 +5,10 @@ fn main() {\n     let _y =\n         match x {\n             Some(_) =>\n-            [\"some(_)\".to_string(), \"not\".to_string(), \"SO\".to_string(),\n-             \"long\".to_string(), \"string\".to_string()],\n+                [\"some(_)\".to_string(), \"not\".to_string(), \"SO\".to_string(),\n+                        \"long\".to_string(), \"string\".to_string()],\n             None =>\n-            [\"none\".to_string(), \"a\".to_string(), \"a\".to_string(),\n-             \"a\".to_string(), \"a\".to_string()],\n+                [\"none\".to_string(), \"a\".to_string(), \"a\".to_string(),\n+                        \"a\".to_string(), \"a\".to_string()],\n         };\n }"}, {"sha": "96bde96200af9a3312a1067a290b8330eec8108a", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -48,9 +48,9 @@ fn _4() {\n \n     let _ =\n         #[rustc_dummy] match () {\n-                           #![rustc_dummy]\n-                           () => (),\n-                       };\n+            #![rustc_dummy]\n+            () => (),\n+        };\n }\n \n fn _5() {\n@@ -156,56 +156,56 @@ fn _11() {\n     let _ = #[rustc_dummy] 0 as usize;\n     let _ =\n         #[rustc_dummy] while false {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] while let None = Some(()) {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] for _ in 0..0 {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] loop {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] match false {\n-                           #![rustc_dummy]\n-                           _ => (),\n-                       };\n+            #![rustc_dummy]\n+            _ => (),\n+        };\n     let _ = #[rustc_dummy] || #[rustc_dummy] ();\n     let _ = #[rustc_dummy] move || #[rustc_dummy] ();\n     let _ =\n         #[rustc_dummy] ||\n-                           {\n-                               #![rustc_dummy]\n-                               #[rustc_dummy]\n-                               ()\n-                           };\n+            {\n+                #![rustc_dummy]\n+                #[rustc_dummy]\n+                ()\n+            };\n     let _ =\n         #[rustc_dummy] move ||\n-                           {\n-                               #![rustc_dummy]\n-                               #[rustc_dummy]\n-                               ()\n-                           };\n+            {\n+                #![rustc_dummy]\n+                #[rustc_dummy]\n+                ()\n+            };\n     let _ =\n         #[rustc_dummy] {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] {\n-                           #![rustc_dummy]\n-                           let _ = ();\n-                       };\n+            #![rustc_dummy]\n+            let _ = ();\n+        };\n     let _ =\n         #[rustc_dummy] {\n-                           #![rustc_dummy]\n-                           let _ = ();\n-                           ()\n-                       };\n+            #![rustc_dummy]\n+            let _ = ();\n+            ()\n+        };\n     let mut x = 0;\n     let _ = #[rustc_dummy] x = 15;\n     let _ = #[rustc_dummy] x += 15;"}, {"sha": "f2f807c59de99cf9b184476aa7940041a2c3e5a7", "filename": "src/test/pretty/vec-comments.pp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fvec-comments.pp", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fpretty%2Fvec-comments.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-comments.pp?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -4,26 +4,26 @@\n fn main() {\n     let _v1 =\n         [\n-         // Comment\n-         0,\n-         // Comment\n-         1,\n-         // Comment\n-         2];\n+                // Comment\n+                0,\n+                // Comment\n+                1,\n+                // Comment\n+                2];\n     let _v2 =\n         [0, // Comment\n-         1, // Comment\n-         2]; // Comment\n+                1, // Comment\n+                2]; // Comment\n     let _v3 =\n         [\n-         /* Comment */\n-         0,\n-         /* Comment */\n-         1,\n-         /* Comment */\n-         2];\n+                /* Comment */\n+                0,\n+                /* Comment */\n+                1,\n+                /* Comment */\n+                2];\n     let _v4 =\n         [0, /* Comment */\n-         1, /* Comment */\n-         2]; /* Comment */\n+                1, /* Comment */\n+                2]; /* Comment */\n }"}, {"sha": "1b7cb76b55366d194c452fec72f66a0c4de67686", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -16,11 +16,11 @@ LL | bug!();\n    = note: this error originates in the macro `bug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unexpected token: `{\n-           let res =\n-               ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n-                                                                   &[::core::fmt::ArgumentV1::new_display(&\"u8\")]));\n-           res\n-       }.as_str()`\n+               let res =\n+                   ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n+                           &[::core::fmt::ArgumentV1::new_display(&\"u8\")]));\n+               res\n+           }.as_str()`\n   --> $DIR/key-value-expansion.rs:48:23\n    |\n LL |         doc_comment! {format!(\"{coor}\", coor = stringify!($t1)).as_str()}"}, {"sha": "121138605f1a2f1a50ce63da1c4da4f34a486587", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -15,4 +15,4 @@ trait Foo<const KIND : bool = true> {}\n fn foo<const SIZE : usize = 5>() {}\n \n struct Range<const FROM : usize = 0, const LEN : usize = 0, const TO : usize =\n-             FROM>;\n+    FROM>;"}, {"sha": "0efc7daa3e17b0ad28e4d4d9cc3ad89dc451a499", "filename": "src/test/ui/did_you_mean/issue-93210-ignore-doc-hidden.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -0,0 +1,24 @@\n+#[derive(Default)]\n+pub struct A {\n+    #[doc(hidden)]\n+    pub hello: i32,\n+    pub bye: i32,\n+}\n+\n+#[derive(Default)]\n+pub struct B {\n+    pub hello: i32,\n+    pub bye: i32,\n+}\n+\n+fn main() {\n+    A::default().hey;\n+    //~^ ERROR no field `hey` on type `A`\n+    //~| NOTE unknown field\n+    //~| NOTE available fields are: `bye`\n+\n+    B::default().hey;\n+    //~^ ERROR no field `hey` on type `B`\n+    //~| NOTE unknown field\n+    //~| NOTE available fields are: `hello`, `bye`\n+}"}, {"sha": "784986d3b95fbd2ae2425babb034880071da55e2", "filename": "src/test/ui/did_you_mean/issue-93210-ignore-doc-hidden.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-93210-ignore-doc-hidden.stderr?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -0,0 +1,19 @@\n+error[E0609]: no field `hey` on type `A`\n+  --> $DIR/issue-93210-ignore-doc-hidden.rs:15:18\n+   |\n+LL |     A::default().hey;\n+   |                  ^^^ unknown field\n+   |\n+   = note: available fields are: `bye`\n+\n+error[E0609]: no field `hey` on type `B`\n+  --> $DIR/issue-93210-ignore-doc-hidden.rs:20:18\n+   |\n+LL |     B::default().hey;\n+   |                  ^^^ unknown field\n+   |\n+   = note: available fields are: `hello`, `bye`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0609`."}, {"sha": "482d0d5c00a6319d69615a1ec4fe74a9b0d034dd", "filename": "src/test/ui/generic-associated-types/elided-in-expr-position.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -0,0 +1,38 @@\n+#![feature(generic_associated_types)]\n+#![allow(unused)]\n+\n+pub trait Trait  {\n+    type Assoc<'a> where Self: 'a;\n+\n+    fn f(&self) -> Self::Assoc<'_>;\n+\n+    // Disallow elision in return position, for now\n+    fn g(&self) -> Self::Assoc;\n+    //~^ ERROR missing generics for associated type `Trait::Assoc`\n+}\n+\n+pub struct Struct {\n+    item: f32\n+}\n+\n+pub struct GenericStruct<'a> {\n+    ref_item: &'a f32\n+}\n+\n+impl Trait for Struct {\n+    type Assoc<'a> = GenericStruct<'a>;\n+\n+    fn f(&self) -> Self::Assoc<'_> {\n+        Self::Assoc {\n+            ref_item: &self.item\n+        }\n+    }\n+\n+    // Disallow elision in return position, for now\n+    fn g(&self) -> Self::Assoc {\n+    //~^ ERROR missing generics for associated type `Trait::Assoc`\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9263f3d67e3d2f28f2c944e6dde8938e384835b0", "filename": "src/test/ui/generic-associated-types/elided-in-expr-position.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -0,0 +1,35 @@\n+error[E0107]: missing generics for associated type `Trait::Assoc`\n+  --> $DIR/elided-in-expr-position.rs:10:26\n+   |\n+LL |     fn g(&self) -> Self::Assoc;\n+   |                          ^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/elided-in-expr-position.rs:5:10\n+   |\n+LL |     type Assoc<'a> where Self: 'a;\n+   |          ^^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn g(&self) -> Self::Assoc<'_>;\n+   |                          ~~~~~~~~~\n+\n+error[E0107]: missing generics for associated type `Trait::Assoc`\n+  --> $DIR/elided-in-expr-position.rs:32:26\n+   |\n+LL |     fn g(&self) -> Self::Assoc {\n+   |                          ^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/elided-in-expr-position.rs:5:10\n+   |\n+LL |     type Assoc<'a> where Self: 'a;\n+   |          ^^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     fn g(&self) -> Self::Assoc<'_> {\n+   |                          ~~~~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "2054d43c40957d9f4075aa9fcb9c844bcc615a71", "filename": "src/test/ui/match/issue-82392.stdout", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -7,13 +7,11 @@ extern crate std;\n // check-pass\n \n pub fn main() ({\n-                   (if (true as bool)\n-                       ({ } as\n-                           ()) else if (let Some(a) =\n-                                           ((Some as\n-                                                fn(i32) -> Option<i32> {Option::<i32>::Some})((3\n-                                                                                                  as\n-                                                                                                  i32))\n-                                               as Option<i32>) as bool)\n-                              ({ } as ()) as ())\n-                             } as ())\n+        (if (true as bool)\n+                ({ } as\n+                    ()) else if (let Some(a) =\n+                       ((Some as\n+                               fn(i32) -> Option<i32> {Option::<i32>::Some})((3\n+                               as i32)) as Option<i32>) as bool) ({ } as ())\n+                   as ())\n+               } as ())"}, {"sha": "9d25def587cd60bcd0bff622382540472bf56b33", "filename": "src/test/ui/proc-macro/cfg-eval-inner.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -1,9 +1,9 @@\n PRINT-ATTR INPUT (DISPLAY): impl Foo <\n [u8 ;\n- {\n-     #! [rustc_dummy(cursed_inner)] #! [allow(unused)] struct Inner\n-     { field : [u8 ; { #! [rustc_dummy(another_cursed_inner)] 1 }] } 0\n- }] > { #! [rustc_dummy(evaluated_attr)] fn bar() {} }\n+{\n+    #! [rustc_dummy(cursed_inner)] #! [allow(unused)] struct Inner\n+    { field : [u8 ; { #! [rustc_dummy(another_cursed_inner)] 1 }] } 0\n+}] > { #! [rustc_dummy(evaluated_attr)] fn bar() {} }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"impl\","}, {"sha": "c81fa201cbcf5e41f67b297bd12b64d9b8d652c7", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -4,23 +4,23 @@ struct Foo < #[cfg(FALSE)] A, B >\n     #[cfg(FALSE)] first : String, #[cfg_attr(FALSE, deny(warnings))] second :\n     bool, third :\n     [u8 ;\n-     {\n-         #[cfg(FALSE)] struct Bar ; #[cfg(not(FALSE))] struct Inner ;\n-         #[cfg(FALSE)] let a = 25 ; match true\n-         {\n-             #[cfg(FALSE)] true => {},\n-             #[cfg_attr(not(FALSE), allow(warnings))] false => {}, _ => {}\n-         } ; #[print_helper(should_be_removed)] fn removed_fn()\n-         { #! [cfg(FALSE)] } #[print_helper(c)] #[cfg(not(FALSE))] fn\n-         kept_fn() { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n-         {\n-             Foo(#[cfg(FALSE)] u8, #[cfg(FALSE)] bool, #[cfg(not(FALSE))] i32,\n-                 #[cfg(FALSE)] String, u8)\n-         } struct\n-         TupleStruct(#[cfg(FALSE)] String, #[cfg(not(FALSE))] i32,\n-                     #[cfg(FALSE)] bool, u8) ; fn plain_removed_fn()\n-         { #! [cfg_attr(not(FALSE), cfg(FALSE))] } 0\n-     }], #[print_helper(d)] fourth : B\n+    {\n+        #[cfg(FALSE)] struct Bar ; #[cfg(not(FALSE))] struct Inner ;\n+        #[cfg(FALSE)] let a = 25 ; match true\n+        {\n+            #[cfg(FALSE)] true => {}, #[cfg_attr(not(FALSE), allow(warnings))]\n+            false => {}, _ => {}\n+        } ; #[print_helper(should_be_removed)] fn removed_fn()\n+        { #! [cfg(FALSE)] } #[print_helper(c)] #[cfg(not(FALSE))] fn kept_fn()\n+        { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n+        {\n+            Foo(#[cfg(FALSE)] u8, #[cfg(FALSE)] bool, #[cfg(not(FALSE))] i32,\n+            #[cfg(FALSE)] String, u8)\n+        } struct\n+        TupleStruct(#[cfg(FALSE)] String, #[cfg(not(FALSE))] i32,\n+        #[cfg(FALSE)] bool, u8) ; fn plain_removed_fn()\n+        { #! [cfg_attr(not(FALSE), cfg(FALSE))] } 0\n+    }], #[print_helper(d)] fourth : B\n }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n@@ -1276,14 +1276,14 @@ PRINT-DERIVE INPUT (DISPLAY): #[print_helper(a)] #[allow(dead_code)] #[print_hel\n {\n     second : bool, third :\n     [u8 ;\n-     {\n-         #[cfg(not(FALSE))] struct Inner ; match true\n-         { #[allow(warnings)] false => {}, _ => {} } ; #[print_helper(c)]\n-         #[cfg(not(FALSE))] fn kept_fn()\n-         { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n-         { Foo(#[cfg(not(FALSE))] i32, u8) } struct\n-         TupleStruct(#[cfg(not(FALSE))] i32, u8) ; 0\n-     }], #[print_helper(d)] fourth : B\n+    {\n+        #[cfg(not(FALSE))] struct Inner ; match true\n+        { #[allow(warnings)] false => {}, _ => {} } ; #[print_helper(c)]\n+        #[cfg(not(FALSE))] fn kept_fn()\n+        { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n+        { Foo(#[cfg(not(FALSE))] i32, u8) } struct\n+        TupleStruct(#[cfg(not(FALSE))] i32, u8) ; 0\n+    }], #[print_helper(d)] fourth : B\n }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Punct {"}, {"sha": "74641058ef3d23a87751020f1d283411dece4439", "filename": "src/test/ui/proc-macro/macro-rules-derive-cfg.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -2,10 +2,10 @@ PRINT-DERIVE INPUT (DISPLAY): struct Foo\n {\n     val :\n     [bool ;\n-     {\n-         let a = #[rustc_dummy(first)] #[rustc_dummy(second)]\n-         { #! [allow(unused)] 30 } ; 0\n-     }]\n+    {\n+        let a = #[rustc_dummy(first)] #[rustc_dummy(second)]\n+        { #! [allow(unused)] 30 } ; 0\n+    }]\n }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {"}, {"sha": "79651f01b9534cebade236661bff41b135cda97b", "filename": "src/test/ui/proc-macro/quote-debug.stdout", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -19,29 +19,27 @@ extern crate proc_macro;\n \n fn main() {\n     [crate::TokenStream::from(crate::TokenTree::Ident(crate::Ident::new(\"let\",\n-                                                                        crate::Span::recover_proc_macro_span(0)))),\n-     crate::TokenStream::from(crate::TokenTree::Ident(crate::Ident::new(\"hello\",\n-                                                                        crate::Span::recover_proc_macro_span(1)))),\n-     crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3d}',\n-                                                                        crate::Spacing::Alone))),\n-     crate::TokenStream::from(crate::TokenTree::Literal({\n-                                                            let mut iter =\n-                                                                \"\\\"world\\\"\".parse::<crate::TokenStream>().unwrap().into_iter();\n-                                                            if let (Some(crate::TokenTree::Literal(mut lit)),\n-                                                                    None) =\n-                                                                   (iter.next(),\n-                                                                    iter.next())\n-                                                               {\n-                                                                lit.set_span(crate::Span::recover_proc_macro_span(2));\n-                                                                lit\n-                                                            } else {\n-                                                                {\n-                                                                    ::core::panicking::panic(\"internal error: entered unreachable code\")\n-                                                                }\n-                                                            }\n-                                                        })),\n-     crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3b}',\n-                                                                        crate::Spacing::Alone)))].iter().cloned().collect::<crate::TokenStream>()\n+                                    crate::Span::recover_proc_macro_span(0)))),\n+                        crate::TokenStream::from(crate::TokenTree::Ident(crate::Ident::new(\"hello\",\n+                                    crate::Span::recover_proc_macro_span(1)))),\n+                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3d}',\n+                                    crate::Spacing::Alone))),\n+                        crate::TokenStream::from(crate::TokenTree::Literal({\n+                                    let mut iter =\n+                                        \"\\\"world\\\"\".parse::<crate::TokenStream>().unwrap().into_iter();\n+                                    if let (Some(crate::TokenTree::Literal(mut lit)),\n+                                                None) =\n+                                                (iter.next(), iter.next()) {\n+                                            lit.set_span(crate::Span::recover_proc_macro_span(2));\n+                                            lit\n+                                        } else {\n+                                           {\n+                                               ::core::panicking::panic(\"internal error: entered unreachable code\")\n+                                           }\n+                                       }\n+                                })),\n+                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3b}',\n+                                    crate::Spacing::Alone)))].iter().cloned().collect::<crate::TokenStream>()\n }\n const _: () =\n     {"}, {"sha": "82c4120b4c789c70d38cbe9173c9787102fe1d2c", "filename": "src/test/ui/rfc-2565-param-attrs/auxiliary/param-attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -37,7 +37,7 @@ checker!(rename_params, r#\"impl Foo\n     fn hello(#[angery(true)] a : i32, #[a2] b : i32, #[what = \"how\"] c : u32)\n     {} fn\n     hello2(#[a1] #[a2] a : i32, #[what = \"how\"] b : i32, #[angery(true)] c :\n-           u32) {} fn\n+    u32) {} fn\n     hello_self(#[a1] #[a2] & self, #[a1] #[a2] a : i32, #[what = \"how\"] b :\n-               i32, #[angery(true)] c : u32) {}\n+    i32, #[angery(true)] c : u32) {}\n }\"#);"}, {"sha": "1cc4d2a4d066e72a77804380b7d24afb29a4d0a2", "filename": "src/test/ui/suggestions/private-field.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.rs?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: --crate-type lib\n+pub struct S {\n+    pub val: string::MyString,\n+}\n+\n+pub fn test(s: S) {\n+    dbg!(s.cap) //~ ERROR: no field `cap` on type `S` [E0609]\n+}\n+\n+pub(crate) mod string {\n+\n+    pub struct MyString {\n+        buf: MyVec,\n+    }\n+\n+    struct MyVec {\n+        cap: usize,\n+    }\n+}"}, {"sha": "c38c795e07ae84bcdcd37ab457fa1e035aa97fe9", "filename": "src/test/ui/suggestions/private-field.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fprivate-field.stderr?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -0,0 +1,11 @@\n+error[E0609]: no field `cap` on type `S`\n+  --> $DIR/private-field.rs:7:12\n+   |\n+LL |     dbg!(s.cap)\n+   |            ^^^ unknown field\n+   |\n+   = note: available fields are: `val`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0609`."}, {"sha": "a46047d91743d899d83ca79db0bc1e75553de94d", "filename": "src/test/ui/type-alias-impl-trait/issue-60662.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60662.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/86f5e177bca8121e1edc9864023a8ea61acf9034/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60662.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60662.stdout?ref=86f5e177bca8121e1edc9864023a8ea61acf9034", "patch": "@@ -10,5 +10,5 @@ extern crate std;\n trait Animal { }\n \n fn main() {\n-              pub type ServeFut = /*impl Trait*/;\n-          }\n+        pub type ServeFut = /*impl Trait*/;\n+    }"}]}