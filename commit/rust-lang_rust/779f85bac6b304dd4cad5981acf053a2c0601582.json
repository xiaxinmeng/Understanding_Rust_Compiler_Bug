{"sha": "779f85bac6b304dd4cad5981acf053a2c0601582", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OWY4NWJhYzZiMzA0ZGQ0Y2FkNTk4MWFjZjA1M2EyYzA2MDE1ODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-18T14:57:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-18T14:57:40Z"}, "message": "Auto merge of #68001 - Marwes:lexical_region_resolve, r=nikomatsakis\n\nperf: Only search potentially changed constraints in lexical_region_resolve\n\nGives a big performance increase to the unicode_normalization benchmark in my testing.", "tree": {"sha": "ce8d0d01400e9b309cab664d540cfc70aad39fcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce8d0d01400e9b309cab664d540cfc70aad39fcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/779f85bac6b304dd4cad5981acf053a2c0601582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/779f85bac6b304dd4cad5981acf053a2c0601582", "html_url": "https://github.com/rust-lang/rust/commit/779f85bac6b304dd4cad5981acf053a2c0601582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/779f85bac6b304dd4cad5981acf053a2c0601582/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35b5157db591539ffe8acaaae3438cc1d3ed9619", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b5157db591539ffe8acaaae3438cc1d3ed9619", "html_url": "https://github.com/rust-lang/rust/commit/35b5157db591539ffe8acaaae3438cc1d3ed9619"}, {"sha": "917eb187905591c5470cca3e742c17b0fbb495a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/917eb187905591c5470cca3e742c17b0fbb495a2", "html_url": "https://github.com/rust-lang/rust/commit/917eb187905591c5470cca3e742c17b0fbb495a2"}], "stats": {"total": 76, "additions": 36, "deletions": 40}, "files": [{"sha": "18c25ef0dd9e1365b555f3259d64bf04a0a8195b", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/779f85bac6b304dd4cad5981acf053a2c0601582/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779f85bac6b304dd4cad5981acf053a2c0601582/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=779f85bac6b304dd4cad5981acf053a2c0601582", "patch": "@@ -19,7 +19,6 @@ use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n use rustc_hir::def_id::DefId;\n-use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::Span;\n use std::fmt;\n@@ -295,62 +294,59 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     }\n \n     fn expansion(&self, var_values: &mut LexicalRegionResolutions<'tcx>) {\n-        let mut process_constraint = |constraint: &Constraint<'tcx>| {\n-            let (a_region, b_vid, b_data, retain) = match *constraint {\n+        let mut constraints = IndexVec::from_elem_n(Vec::new(), var_values.values.len());\n+        let mut changes = Vec::new();\n+        for constraint in self.data.constraints.keys() {\n+            let (a_vid, a_region, b_vid, b_data) = match *constraint {\n                 Constraint::RegSubVar(a_region, b_vid) => {\n                     let b_data = var_values.value_mut(b_vid);\n-                    (a_region, b_vid, b_data, false)\n+                    (None, a_region, b_vid, b_data)\n                 }\n                 Constraint::VarSubVar(a_vid, b_vid) => match *var_values.value(a_vid) {\n-                    VarValue::ErrorValue => return (false, false),\n+                    VarValue::ErrorValue => continue,\n                     VarValue::Value(a_region) => {\n                         let b_data = var_values.value_mut(b_vid);\n-                        let retain = match *b_data {\n-                            VarValue::Value(ReStatic) | VarValue::ErrorValue => false,\n-                            _ => true,\n-                        };\n-                        (a_region, b_vid, b_data, retain)\n+                        (Some(a_vid), a_region, b_vid, b_data)\n                     }\n                 },\n                 Constraint::RegSubReg(..) | Constraint::VarSubReg(..) => {\n                     // These constraints are checked after expansion\n                     // is done, in `collect_errors`.\n-                    return (false, false);\n+                    continue;\n                 }\n             };\n-\n-            let changed = self.expand_node(a_region, b_vid, b_data);\n-            (changed, retain)\n-        };\n-\n-        // Using bitsets to track the remaining elements is faster than using a\n-        // `Vec` by itself (which requires removing elements, which requires\n-        // element shuffling, which is slow).\n-        let constraints: Vec<_> = self.data.constraints.keys().collect();\n-        let mut live_indices: BitSet<usize> = BitSet::new_filled(constraints.len());\n-        let mut killed_indices: BitSet<usize> = BitSet::new_empty(constraints.len());\n-        let mut changed = true;\n-        while changed {\n-            changed = false;\n-            for index in live_indices.iter() {\n-                let constraint = constraints[index];\n-                let (edge_changed, retain) = process_constraint(constraint);\n-                changed |= edge_changed;\n-                if !retain {\n-                    let changed = killed_indices.insert(index);\n-                    debug_assert!(changed);\n+            if self.expand_node(a_region, b_vid, b_data) {\n+                changes.push(b_vid);\n+            }\n+            if let Some(a_vid) = a_vid {\n+                match *b_data {\n+                    VarValue::Value(ReStatic) | VarValue::ErrorValue => (),\n+                    _ => {\n+                        constraints[a_vid].push((a_vid, b_vid));\n+                        constraints[b_vid].push((a_vid, b_vid));\n+                    }\n                 }\n             }\n-            live_indices.subtract(&killed_indices);\n+        }\n \n-            // We could clear `killed_indices` here, but we don't need to and\n-            // it's cheaper not to.\n+        while let Some(vid) = changes.pop() {\n+            constraints[vid].retain(|&(a_vid, b_vid)| {\n+                let a_region = match *var_values.value(a_vid) {\n+                    VarValue::ErrorValue => return false,\n+                    VarValue::Value(a_region) => a_region,\n+                };\n+                let b_data = var_values.value_mut(b_vid);\n+                if self.expand_node(a_region, b_vid, b_data) {\n+                    changes.push(b_vid);\n+                }\n+                match *b_data {\n+                    VarValue::Value(ReStatic) | VarValue::ErrorValue => false,\n+                    _ => true,\n+                }\n+            });\n         }\n     }\n \n-    // This function is very hot in some workloads. There's a single callsite\n-    // so always inlining is ok even though it's large.\n-    #[inline(always)]\n     fn expand_node(\n         &self,\n         a_region: Region<'tcx>,\n@@ -790,8 +786,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             self.var_infos[node_idx].origin.span(),\n             &format!(\n                 \"collect_error_for_expanding_node() could not find \\\n-                      error for var {:?} in universe {:?}, lower_bounds={:#?}, \\\n-                      upper_bounds={:#?}\",\n+                 error for var {:?} in universe {:?}, lower_bounds={:#?}, \\\n+                 upper_bounds={:#?}\",\n                 node_idx, node_universe, lower_bounds, upper_bounds\n             ),\n         );"}]}