{"sha": "a74d1862d4d87a56244958416fd05976c58ca1a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NGQxODYyZDRkODdhNTYyNDQ5NTg0MTZmZDA1OTc2YzU4Y2ExYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-14T19:35:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-14T19:35:24Z"}, "message": "Auto merge of #72202 - Dylan-DPC:rollup-6lbxh1s, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #71910 (Fix unused_parens false positive when using binary operations)\n - #72087 (Fix hang in lexical_region_resolve)\n - #72126 (Change `WorkProduct::saved_files` to an `Option`.)\n - #72127 (add long error explanation for E0228)\n - #72141 (Warn against thread::sleep in async fn)\n - #72170 (use `require_lang_item` over `unwrap`.)\n - #72191 (Clean up E0589 explanation)\n - #72194 (Don't ICE on missing `Unsize` impl)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "b64230280cd4a445e65ae665e0097b548e9c3989", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b64230280cd4a445e65ae665e0097b548e9c3989"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a74d1862d4d87a56244958416fd05976c58ca1a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a74d1862d4d87a56244958416fd05976c58ca1a8", "html_url": "https://github.com/rust-lang/rust/commit/a74d1862d4d87a56244958416fd05976c58ca1a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a74d1862d4d87a56244958416fd05976c58ca1a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "html_url": "https://github.com/rust-lang/rust/commit/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4"}, {"sha": "7b5bc61e99ea77ff87233295fc3e789e43dd66f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b5bc61e99ea77ff87233295fc3e789e43dd66f0", "html_url": "https://github.com/rust-lang/rust/commit/7b5bc61e99ea77ff87233295fc3e789e43dd66f0"}], "stats": {"total": 332, "additions": 246, "deletions": 86}, "files": [{"sha": "46e17d66d61dbb309071a368ccd889c41777e3c9", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -21,7 +21,7 @@ use rustc_errors::{DiagnosticId, FatalError, Handler, Level};\n use rustc_fs_util::link_or_copy;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_incremental::{\n-    copy_cgu_workproducts_to_incr_comp_cache_dir, in_incr_comp_dir, in_incr_comp_dir_sess,\n+    copy_cgu_workproduct_to_incr_comp_cache_dir, in_incr_comp_dir, in_incr_comp_dir_sess,\n };\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::EncodedMetadata;\n@@ -465,17 +465,13 @@ fn copy_all_cgu_workproducts_to_incr_comp_cache_dir(\n         return work_products;\n     }\n \n-    let _timer = sess.timer(\"incr_comp_copy_cgu_workproducts\");\n+    let _timer = sess.timer(\"copy_all_cgu_workproducts_to_incr_comp_cache_dir\");\n \n     for module in compiled_modules.modules.iter().filter(|m| m.kind == ModuleKind::Regular) {\n-        let mut files = vec![];\n-\n-        if let Some(ref path) = module.object {\n-            files.push(path.clone());\n-        }\n+        let path = module.object.as_ref().map(|path| path.clone());\n \n         if let Some((id, product)) =\n-            copy_cgu_workproducts_to_incr_comp_cache_dir(sess, &module.name, &files)\n+            copy_cgu_workproduct_to_incr_comp_cache_dir(sess, &module.name, &path)\n         {\n             work_products.insert(id, product);\n         }\n@@ -817,7 +813,7 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n ) -> Result<WorkItemResult<B>, FatalError> {\n     let incr_comp_session_dir = cgcx.incr_comp_session_dir.as_ref().unwrap();\n     let mut object = None;\n-    for saved_file in &module.source.saved_files {\n+    if let Some(saved_file) = module.source.saved_file {\n         let obj_out = cgcx.output_filenames.temp_path(OutputType::Object, Some(&module.name));\n         object = Some(obj_out.clone());\n         let source_file = in_incr_comp_dir(&incr_comp_session_dir, &saved_file);"}, {"sha": "2399e99a309902d370ba3b16249bac37b9493810", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -120,6 +120,7 @@ E0223: include_str!(\"./error_codes/E0223.md\"),\n E0224: include_str!(\"./error_codes/E0224.md\"),\n E0225: include_str!(\"./error_codes/E0225.md\"),\n E0226: include_str!(\"./error_codes/E0226.md\"),\n+E0228: include_str!(\"./error_codes/E0228.md\"),\n E0229: include_str!(\"./error_codes/E0229.md\"),\n E0230: include_str!(\"./error_codes/E0230.md\"),\n E0231: include_str!(\"./error_codes/E0231.md\"),\n@@ -482,7 +483,6 @@ E0753: include_str!(\"./error_codes/E0753.md\"),\n //  E0218, // no associated type defined\n //  E0219, // associated type defined in higher-ranked supertrait\n     E0227, // ambiguous lifetime bound, explicit lifetime bound required\n-    E0228, // explicit lifetime bound required\n //  E0233,\n //  E0234,\n //  E0235, // structure constructor specifies a structure of type but"}, {"sha": "3443a5ae8638ce8fa342bec01892a01eddfc385f", "filename": "src/librustc_error_codes/error_codes/E0228.md", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_error_codes%2Ferror_codes%2FE0228.md", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_error_codes%2Ferror_codes%2FE0228.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0228.md?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -0,0 +1,40 @@\n+The lifetime bound for this object type cannot be deduced from context and must\n+be specified.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0228\n+trait Trait { }\n+\n+struct TwoBounds<'a, 'b, T: Sized + 'a + 'b> {\n+    x: &'a i32,\n+    y: &'b i32,\n+    z: T,\n+}\n+\n+type Foo<'a, 'b> = TwoBounds<'a, 'b, dyn Trait>;\n+```\n+\n+When a trait object is used as a type argument of a generic type, Rust will try\n+to infer its lifetime if unspecified. However, this isn't possible when the\n+containing type has more than one lifetime bound.\n+\n+The above example can be resolved by either reducing the number of lifetime\n+bounds to one or by making the trait object lifetime explicit, like so:\n+\n+```\n+trait Trait { }\n+\n+struct TwoBounds<'a, 'b, T: Sized + 'a + 'b> {\n+    x: &'a i32,\n+    y: &'b i32,\n+    z: T,\n+}\n+\n+type Foo<'a, 'b> = TwoBounds<'a, 'b, dyn Trait + 'b>;\n+```\n+\n+For more information, see [RFC 599] and its amendment [RFC 1156].\n+\n+[RFC 599]: https://github.com/rust-lang/rfcs/blob/master/text/0599-default-object-bound.md\n+[RFC 1156]: https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md"}, {"sha": "8a4f8d2172585021034ebfe4e10a7f8bf2cc861a", "filename": "src/librustc_error_codes/error_codes/E0589.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_error_codes%2Ferror_codes%2FE0589.md", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_error_codes%2Ferror_codes%2FE0589.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0589.md?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -1,6 +1,8 @@\n The value of `N` that was specified for `repr(align(N))` was not a power\n of two, or was greater than 2^29.\n \n+Erroneous code example:\n+\n ```compile_fail,E0589\n #[repr(align(15))] // error: invalid `repr(align)` attribute: not a power of two\n enum Foo {"}, {"sha": "7fd4b3c2554f36722a79198705dc89831a28da7e", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -15,7 +15,7 @@ pub mod assert_module_sources;\n mod persist;\n \n pub use assert_dep_graph::assert_dep_graph;\n-pub use persist::copy_cgu_workproducts_to_incr_comp_cache_dir;\n+pub use persist::copy_cgu_workproduct_to_incr_comp_cache_dir;\n pub use persist::delete_workproduct_files;\n pub use persist::dep_graph_tcx_init;\n pub use persist::finalize_session_directory;"}, {"sha": "966faa9639d72f28328db760e32295d5dc47c859", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -134,7 +134,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n \n             for swp in work_products {\n                 let mut all_files_exist = true;\n-                for file_name in swp.work_product.saved_files.iter() {\n+                if let Some(ref file_name) = swp.work_product.saved_file {\n                     let path = in_incr_comp_dir_sess(sess, file_name);\n                     if !path.exists() {\n                         all_files_exist = false;"}, {"sha": "7bc3b47e15adfd3e597e5bf3c9f0448de9c65b7b", "filename": "src/librustc_incremental/persist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -21,5 +21,5 @@ pub use load::LoadResult;\n pub use load::{load_dep_graph, DepGraphFuture};\n pub use save::save_dep_graph;\n pub use save::save_work_product_index;\n-pub use work_product::copy_cgu_workproducts_to_incr_comp_cache_dir;\n+pub use work_product::copy_cgu_workproduct_to_incr_comp_cache_dir;\n pub use work_product::delete_workproduct_files;"}, {"sha": "c43d4ad4049c9431ee9400eea672a034c5586a90", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -74,9 +74,9 @@ pub fn save_work_product_index(\n         if !new_work_products.contains_key(id) {\n             work_product::delete_workproduct_files(sess, wp);\n             debug_assert!(\n-                wp.saved_files\n-                    .iter()\n-                    .all(|file_name| { !in_incr_comp_dir_sess(sess, file_name).exists() })\n+                wp.saved_file.as_ref().map_or(true, |file_name| {\n+                    !in_incr_comp_dir_sess(sess, &file_name).exists()\n+                })\n             );\n         }\n     }\n@@ -85,7 +85,7 @@ pub fn save_work_product_index(\n     debug_assert!({\n         new_work_products\n             .iter()\n-            .flat_map(|(_, wp)| wp.saved_files.iter())\n+            .flat_map(|(_, wp)| wp.saved_file.iter())\n             .map(|name| in_incr_comp_dir_sess(sess, name))\n             .all(|path| path.exists())\n     });"}, {"sha": "19d64bda56d6d66bc5a024971ed68d40d9339882", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -7,43 +7,41 @@ use rustc_session::Session;\n use std::fs as std_fs;\n use std::path::PathBuf;\n \n-pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n+pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n     sess: &Session,\n     cgu_name: &str,\n-    files: &[PathBuf],\n+    path: &Option<PathBuf>,\n ) -> Option<(WorkProductId, WorkProduct)> {\n-    debug!(\"copy_cgu_workproducts_to_incr_comp_cache_dir({:?},{:?})\", cgu_name, files);\n+    debug!(\"copy_cgu_workproduct_to_incr_comp_cache_dir({:?},{:?})\", cgu_name, path);\n     sess.opts.incremental.as_ref()?;\n \n-    let saved_files = files\n-        .iter()\n-        .map(|path| {\n-            let file_name = format!(\"{}.o\", cgu_name);\n-            let path_in_incr_dir = in_incr_comp_dir_sess(sess, &file_name);\n-            match link_or_copy(path, &path_in_incr_dir) {\n-                Ok(_) => Some(file_name),\n-                Err(err) => {\n-                    sess.warn(&format!(\n-                        \"error copying object file `{}` \\\n-                                             to incremental directory as `{}`: {}\",\n-                        path.display(),\n-                        path_in_incr_dir.display(),\n-                        err\n-                    ));\n-                    None\n-                }\n+    let saved_file = if let Some(path) = path {\n+        let file_name = format!(\"{}.o\", cgu_name);\n+        let path_in_incr_dir = in_incr_comp_dir_sess(sess, &file_name);\n+        match link_or_copy(path, &path_in_incr_dir) {\n+            Ok(_) => Some(file_name),\n+            Err(err) => {\n+                sess.warn(&format!(\n+                    \"error copying object file `{}` to incremental directory as `{}`: {}\",\n+                    path.display(),\n+                    path_in_incr_dir.display(),\n+                    err\n+                ));\n+                return None;\n             }\n-        })\n-        .collect::<Option<Vec<_>>>()?;\n+        }\n+    } else {\n+        None\n+    };\n \n-    let work_product = WorkProduct { cgu_name: cgu_name.to_string(), saved_files };\n+    let work_product = WorkProduct { cgu_name: cgu_name.to_string(), saved_file };\n \n     let work_product_id = WorkProductId::from_cgu_name(cgu_name);\n     Some((work_product_id, work_product))\n }\n \n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {\n-    for file_name in &work_product.saved_files {\n+    if let Some(ref file_name) = work_product.saved_file {\n         let path = in_incr_comp_dir_sess(sess, file_name);\n         match std_fs::remove_file(&path) {\n             Ok(()) => {}"}, {"sha": "33a80fb747101843df5ad68388de1bf6802c390b", "filename": "src/librustc_infer/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -325,8 +325,21 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n         }\n \n-        debug!(\"enforce_member_constraint: final least choice = {:?}\", least_choice);\n-        if least_choice != member_lower_bound {\n+        // (#72087) Different `ty::Regions` can be known to be equal, for\n+        // example, we know that `'a` and `'static` are equal in a function\n+        // with a parameter of type `&'static &'a ()`.\n+        //\n+        // When we have two equal regions like this `expansion` will use\n+        // `lub_concrete_regions` to pick a canonical representative. The same\n+        // choice is needed here so that we don't end up in a cycle of\n+        // `expansion` changing the region one way and the code here changing\n+        // it back.\n+        let lub = self.lub_concrete_regions(least_choice, member_lower_bound);\n+        debug!(\n+            \"enforce_member_constraint: final least choice = {:?}\\nlub = {:?}\",\n+            least_choice, lub\n+        );\n+        if lub != member_lower_bound {\n             *var_values.value_mut(member_vid) = VarValue::Value(least_choice);\n             true\n         } else {\n@@ -578,8 +591,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 self.tcx().mk_region(ReScope(lub))\n             }\n \n-            (&ReEarlyBound(_), &ReEarlyBound(_) | &ReFree(_))\n-            | (&ReFree(_), &ReEarlyBound(_) | &ReFree(_)) => {\n+            (&ReEarlyBound(_) | &ReFree(_), &ReEarlyBound(_) | &ReFree(_)) => {\n                 self.region_rels.lub_free_regions(a, b)\n             }\n "}, {"sha": "c24079a6e4be234c9ec5156c8181d9dcd5785236", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -380,11 +380,27 @@ trait UnusedDelimLint {\n     );\n \n     fn is_expr_delims_necessary(inner: &ast::Expr, followed_by_block: bool) -> bool {\n-        followed_by_block\n-            && match inner.kind {\n-                ExprKind::Ret(_) | ExprKind::Break(..) => true,\n-                _ => parser::contains_exterior_struct_lit(&inner),\n+        // Prevent false-positives in cases like `fn x() -> u8 { ({ 0 } + 1) }`\n+        let lhs_needs_parens = {\n+            let mut innermost = inner;\n+            loop {\n+                if let ExprKind::Binary(_, lhs, _rhs) = &innermost.kind {\n+                    innermost = lhs;\n+                    if !rustc_ast::util::classify::expr_requires_semi_to_be_stmt(innermost) {\n+                        break true;\n+                    }\n+                } else {\n+                    break false;\n+                }\n             }\n+        };\n+\n+        lhs_needs_parens\n+            || (followed_by_block\n+                && match inner.kind {\n+                    ExprKind::Ret(_) | ExprKind::Break(..) => true,\n+                    _ => parser::contains_exterior_struct_lit(&inner),\n+                })\n     }\n \n     fn emit_unused_delims_expr("}, {"sha": "52ebcd63e7cda40a5e807cfee3529551ed11d9de", "filename": "src/librustc_middle/ty/adjustment.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_middle%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_middle%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fadjustment.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -2,6 +2,7 @@ use crate::ty::subst::SubstsRef;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::lang_items::{DerefMutTraitLangItem, DerefTraitLangItem};\n use rustc_macros::HashStable;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n@@ -117,11 +118,11 @@ pub struct OverloadedDeref<'tcx> {\n impl<'tcx> OverloadedDeref<'tcx> {\n     pub fn method_call(&self, tcx: TyCtxt<'tcx>, source: Ty<'tcx>) -> (DefId, SubstsRef<'tcx>) {\n         let trait_def_id = match self.mutbl {\n-            hir::Mutability::Not => tcx.lang_items().deref_trait(),\n-            hir::Mutability::Mut => tcx.lang_items().deref_mut_trait(),\n+            hir::Mutability::Not => tcx.require_lang_item(DerefTraitLangItem, None),\n+            hir::Mutability::Mut => tcx.require_lang_item(DerefMutTraitLangItem, None),\n         };\n         let method_def_id = tcx\n-            .associated_items(trait_def_id.unwrap())\n+            .associated_items(trait_def_id)\n             .in_definition_order()\n             .find(|m| m.kind == ty::AssocKind::Fn)\n             .unwrap()"}, {"sha": "1ce079821a22e52665609836777f986e2654a681", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -4,7 +4,7 @@ use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeFoldable};\n use rustc_errors::ErrorReported;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n-use rustc_hir::lang_items::DropInPlaceFnLangItem;\n+use rustc_hir::lang_items::{DropInPlaceFnLangItem, FnOnceTraitLangItem};\n use rustc_macros::HashStable;\n \n use std::fmt;\n@@ -375,7 +375,7 @@ impl<'tcx> Instance<'tcx> {\n         substs: ty::SubstsRef<'tcx>,\n     ) -> Instance<'tcx> {\n         debug!(\"fn_once_adapter_shim({:?}, {:?})\", closure_did, substs);\n-        let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n+        let fn_once = tcx.require_lang_item(FnOnceTraitLangItem, None);\n         let call_once = tcx\n             .associated_items(fn_once)\n             .in_definition_order()"}, {"sha": "2d49d85c4df54a36107d37b2114a54d26bc692cf", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -8,6 +8,7 @@ use rustc_ast::ast::{self, IntTy, UintTy};\n use rustc_attr as attr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n+use rustc_hir::lang_items::{GeneratorStateLangItem, PinTypeLangItem};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n@@ -2314,13 +2315,13 @@ impl<'tcx> ty::Instance<'tcx> {\n                 let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n                 let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n \n-                let pin_did = tcx.lang_items().pin_type().unwrap();\n+                let pin_did = tcx.require_lang_item(PinTypeLangItem, None);\n                 let pin_adt_ref = tcx.adt_def(pin_did);\n                 let pin_substs = tcx.intern_substs(&[env_ty.into()]);\n                 let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n \n                 sig.map_bound(|sig| {\n-                    let state_did = tcx.lang_items().gen_state().unwrap();\n+                    let state_did = tcx.require_lang_item(GeneratorStateLangItem, None);\n                     let state_adt_ref = tcx.adt_def(state_did);\n                     let state_substs = tcx.intern_substs(&[\n                         sig.yield_ty.into(),"}, {"sha": "bad176c603f35c8833b7dc11ef3ed696b2d29f8a", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -10,6 +10,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::lang_items::{CoerceUnsizedTraitLangItem, CopyTraitLangItem, SizedTraitLangItem};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_infer::infer::outlives::env::RegionBoundPairs;\n@@ -502,7 +503,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n             let trait_ref = ty::TraitRef {\n-                def_id: tcx.lang_items().copy_trait().unwrap(),\n+                def_id: tcx.require_lang_item(CopyTraitLangItem, Some(self.last_span)),\n                 substs: tcx.mk_substs_trait(place_ty.ty, &[]),\n             };\n \n@@ -1468,7 +1469,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.check_rvalue(body, rv, location);\n                 if !self.tcx().features().unsized_locals {\n                     let trait_ref = ty::TraitRef {\n-                        def_id: tcx.lang_items().sized_trait().unwrap(),\n+                        def_id: tcx.require_lang_item(SizedTraitLangItem, Some(self.last_span)),\n                         substs: tcx.mk_substs_trait(place_ty, &[]),\n                     };\n                     self.prove_trait_ref(\n@@ -2013,7 +2014,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                     ty::Predicate::Trait(\n                                         ty::Binder::bind(ty::TraitPredicate {\n                                             trait_ref: ty::TraitRef::new(\n-                                                self.tcx().lang_items().copy_trait().unwrap(),\n+                                                self.tcx().require_lang_item(\n+                                                    CopyTraitLangItem,\n+                                                    Some(self.last_span),\n+                                                ),\n                                                 tcx.mk_substs_trait(ty, &[]),\n                                             ),\n                                         }),\n@@ -2037,7 +2041,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n \n                 let trait_ref = ty::TraitRef {\n-                    def_id: tcx.lang_items().sized_trait().unwrap(),\n+                    def_id: tcx.require_lang_item(SizedTraitLangItem, Some(self.last_span)),\n                     substs: tcx.mk_substs_trait(ty, &[]),\n                 };\n \n@@ -2135,7 +2139,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n                         let trait_ref = ty::TraitRef {\n-                            def_id: tcx.lang_items().coerce_unsized_trait().unwrap(),\n+                            def_id: tcx.require_lang_item(\n+                                CoerceUnsizedTraitLangItem,\n+                                Some(self.last_span),\n+                            ),\n                             substs: tcx.mk_substs_trait(op.ty(body, tcx), &[ty.into()]),\n                         };\n "}, {"sha": "a8094990594f3ae83f98795ebe5092c7b35ba138", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -580,10 +580,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             }\n             mir::Rvalue::NullaryOp(mir::NullOp::Box, _) => {\n                 let tcx = self.tcx;\n-                let exchange_malloc_fn_def_id = tcx\n-                    .lang_items()\n-                    .require(ExchangeMallocFnLangItem)\n-                    .unwrap_or_else(|e| tcx.sess.fatal(&e));\n+                let exchange_malloc_fn_def_id =\n+                    tcx.require_lang_item(ExchangeMallocFnLangItem, None);\n                 let instance = Instance::mono(tcx, exchange_malloc_fn_def_id);\n                 if should_monomorphize_locally(tcx, &instance) {\n                     self.output.push(create_fn_mono_item(instance));"}, {"sha": "d025468d28bf302b5d1c9050caa6865cd0595d2c", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -1,5 +1,6 @@\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::lang_items::FnMutTraitLangItem;\n use rustc_middle::mir::*;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n@@ -70,7 +71,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n             build_call_shim(tcx, instance, None, CallKind::Direct(def_id), None)\n         }\n         ty::InstanceDef::ClosureOnceShim { call_once: _ } => {\n-            let fn_mut = tcx.lang_items().fn_mut_trait().unwrap();\n+            let fn_mut = tcx.require_lang_item(FnMutTraitLangItem, None);\n             let call_mut = tcx\n                 .associated_items(fn_mut)\n                 .in_definition_order()"}, {"sha": "14faa5be02f4ee9f3f4cec734049b157278615f3", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -61,6 +61,7 @@ use crate::util::storage;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::lang_items::{GeneratorStateLangItem, PinTypeLangItem};\n use rustc_index::bit_set::{BitMatrix, BitSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext};\n@@ -381,7 +382,7 @@ fn make_generator_state_argument_indirect<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Bo\n fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let ref_gen_ty = body.local_decls.raw[1].ty;\n \n-    let pin_did = tcx.lang_items().pin_type().unwrap();\n+    let pin_did = tcx.require_lang_item(PinTypeLangItem, Some(body.span));\n     let pin_adt_ref = tcx.adt_def(pin_did);\n     let substs = tcx.intern_substs(&[ref_gen_ty.into()]);\n     let pin_ref_gen_ty = tcx.mk_adt(pin_adt_ref, substs);\n@@ -1207,7 +1208,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         };\n \n         // Compute GeneratorState<yield_ty, return_ty>\n-        let state_did = tcx.lang_items().gen_state().unwrap();\n+        let state_did = tcx.require_lang_item(GeneratorStateLangItem, None);\n         let state_adt_ref = tcx.adt_def(state_did);\n         let state_substs = tcx.intern_substs(&[yield_ty.into(), body.return_ty().into()]);\n         let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);"}, {"sha": "af7c88b178d32c83fdba6b182e6b70a272efae0e", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -1,6 +1,6 @@\n use crate::util::patch::MirPatch;\n use rustc_hir as hir;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::{BoxFreeFnLangItem, DropTraitLangItem};\n use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n use rustc_middle::traits::Reveal;\n@@ -535,7 +535,7 @@ where\n     fn destructor_call_block(&mut self, (succ, unwind): (BasicBlock, Unwind)) -> BasicBlock {\n         debug!(\"destructor_call_block({:?}, {:?})\", self, succ);\n         let tcx = self.tcx();\n-        let drop_trait = tcx.lang_items().drop_trait().unwrap();\n+        let drop_trait = tcx.require_lang_item(DropTraitLangItem, None);\n         let drop_fn = tcx.associated_items(drop_trait).in_definition_order().next().unwrap();\n         let ty = self.place_ty(self.place);\n         let substs = tcx.mk_substs_trait(ty, &[]);\n@@ -877,8 +877,7 @@ where\n     ) -> BasicBlock {\n         let tcx = self.tcx();\n         let unit_temp = Place::from(self.new_temp(tcx.mk_unit()));\n-        let free_func =\n-            tcx.require_lang_item(lang_items::BoxFreeFnLangItem, Some(self.source_info.span));\n+        let free_func = tcx.require_lang_item(BoxFreeFnLangItem, Some(self.source_info.span));\n         let args = adt.variants[VariantIdx::new(0)]\n             .fields\n             .iter()"}, {"sha": "d3129751586af1fb9a142144be4154083a452c26", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -1,4 +1,5 @@\n use rustc_hir as hir;\n+use rustc_hir::lang_items::EqTraitLangItem;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::mir::Field;\n@@ -140,7 +141,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // code at the moment, because types like `for <'a> fn(&'a ())` do\n                 // not *yet* implement `PartialEq`. So for now we leave this here.\n                 let ty_is_partial_eq: bool = {\n-                    let partial_eq_trait_id = self.tcx().lang_items().eq_trait().unwrap();\n+                    let partial_eq_trait_id = self.tcx().require_lang_item(EqTraitLangItem, None);\n                     let obligation: PredicateObligation<'_> = predicate_for_trait_def(\n                         self.tcx(),\n                         self.param_env,"}, {"sha": "04a45090b722675d179f32c4edb4d5282449fc26", "filename": "src/librustc_query_system/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fdep_graph%2Fgraph.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -860,8 +860,8 @@ impl<K: DepKind> DepGraph<K> {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct WorkProduct {\n     pub cgu_name: String,\n-    /// Saved files associated with this CGU.\n-    pub saved_files: Vec<String>,\n+    /// Saved file associated with this CGU.\n+    pub saved_file: Option<String>,\n }\n \n #[derive(Clone)]"}, {"sha": "5a63a693652ea11cfff0a1fb5757964f12cbd674", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -283,6 +283,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             .unwrap_or(false);\n                         let is_from = format!(\"{}\", trait_ref.print_only_trait_path())\n                             .starts_with(\"std::convert::From<\");\n+                        let is_unsize =\n+                            { Some(trait_ref.def_id()) == self.tcx.lang_items().unsize_trait() };\n                         let (message, note) = if is_try && is_from {\n                             (\n                                 Some(format!(\n@@ -405,6 +407,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             return;\n                         }\n \n+                        if is_unsize {\n+                            // If the obligation failed due to a missing implementation of the\n+                            // `Unsize` trait, give a pointer to why that might be the case\n+                            err.note(\n+                                \"all implementations of `Unsize` are provided \\\n+                                automatically by the compiler, see \\\n+                                <https://doc.rust-lang.org/stable/std/marker/trait.Unsize.html> \\\n+                                for more information\",\n+                            );\n+                        }\n+\n                         // Try to report a help message\n                         if !trait_ref.has_infer_types_or_consts()\n                             && self.predicate_can_apply(obligation.param_env, trait_ref)\n@@ -427,12 +440,16 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n                                 self.report_similar_impl_candidates(impl_candidates, &mut err);\n                             }\n-                            self.suggest_change_mut(\n-                                &obligation,\n-                                &mut err,\n-                                &trait_ref,\n-                                points_at_arg,\n-                            );\n+                            // Changing mutability doesn't make a difference to whether we have\n+                            // an `Unsize` impl (Fixes ICE in #71036)\n+                            if !is_unsize {\n+                                self.suggest_change_mut(\n+                                    &obligation,\n+                                    &mut err,\n+                                    &trait_ref,\n+                                    points_at_arg,\n+                                );\n+                            }\n                         }\n \n                         // If this error is due to `!: Trait` not implemented but `(): Trait` is"}, {"sha": "0779882b6dd58145f6d0ce552b09ea13213f732f", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -20,6 +20,7 @@ use crate::traits::error_reporting::InferCtxtExt;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::lang_items::{FnOnceTraitLangItem, GeneratorTraitLangItem};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n@@ -1222,7 +1223,7 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n \n     let tcx = selcx.tcx();\n \n-    let gen_def_id = tcx.lang_items().gen_trait().unwrap();\n+    let gen_def_id = tcx.require_lang_item(GeneratorTraitLangItem, None);\n \n     let predicate = super::util::generator_trait_ref_and_outputs(\n         tcx,\n@@ -1309,7 +1310,7 @@ fn confirm_callable_candidate<'cx, 'tcx>(\n     debug!(\"confirm_callable_candidate({:?},{:?})\", obligation, fn_sig);\n \n     // the `Output` associated type is declared on `FnOnce`\n-    let fn_once_def_id = tcx.lang_items().fn_once_trait().unwrap();\n+    let fn_once_def_id = tcx.require_lang_item(FnOnceTraitLangItem, None);\n \n     let predicate = super::util::closure_trait_ref_and_return_type(\n         tcx,"}, {"sha": "64de94ea58cf4e3c3ce06470122ce30558f2540c", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -7,6 +7,7 @@ use rustc_trait_selection::traits::{self, ObligationCause};\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n+use rustc_hir::lang_items::DerefTraitLangItem;\n use rustc_hir::{is_range_literal, Node};\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n@@ -634,7 +635,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ if sp == expr.span && !is_macro => {\n                 // Check for `Deref` implementations by constructing a predicate to\n                 // prove: `<T as Deref>::Output == U`\n-                let deref_trait = self.tcx.lang_items().deref_trait().unwrap();\n+                let deref_trait = self.tcx.require_lang_item(DerefTraitLangItem, Some(expr.span));\n                 let item_def_id = self\n                     .tcx\n                     .associated_items(deref_trait)"}, {"sha": "3134a5967566ba846cc6a35d723ec7934fcc3991", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -737,6 +737,8 @@ pub fn panicking() -> bool {\n /// The thread may sleep longer than the duration specified due to scheduling\n /// specifics or platform-dependent functionality. It will never sleep less.\n ///\n+/// This function is blocking, and should not be used in `async` functions.\n+///\n /// # Platform-specific behavior\n ///\n /// On Unix platforms, the underlying syscall may be interrupted by a\n@@ -763,6 +765,8 @@ pub fn sleep_ms(ms: u32) {\n /// The thread may sleep longer than the duration specified due to scheduling\n /// specifics or platform-dependent functionality. It will never sleep less.\n ///\n+/// This function is blocking, and should not be used in `async` functions.\n+///\n /// # Platform-specific behavior\n ///\n /// On Unix platforms, the underlying syscall may be interrupted by a"}, {"sha": "01d1cff42e4ba3ec87044ced7b80c5692990e66d", "filename": "src/test/ui/issues/issue-71036.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fissues%2Fissue-71036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fissues%2Fissue-71036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71036.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -0,0 +1,17 @@\n+#![feature(unsize, dispatch_from_dyn)]\n+\n+use std::marker::Unsize;\n+use std::ops::DispatchFromDyn;\n+\n+#[allow(unused)]\n+struct Foo<'a, T: ?Sized> {\n+    _inner: &'a &'a T,\n+}\n+\n+impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Foo<'a, U>> for Foo<'a, T> {}\n+//~^ ERROR the trait bound `&'a T: std::marker::Unsize<&'a U>` is not satisfied\n+//~| NOTE the trait `std::marker::Unsize<&'a U>` is not implemented for `&'a T`\n+//~| NOTE all implementations of `Unsize` are provided automatically by the compiler\n+//~| NOTE required because of the requirements on the impl\n+\n+fn main() {}"}, {"sha": "57cf24689454ec50e18dc119764553110b8e93b4", "filename": "src/test/ui/issues/issue-71036.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fissues%2Fissue-71036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fissues%2Fissue-71036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71036.stderr?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `&'a T: std::marker::Unsize<&'a U>` is not satisfied\n+  --> $DIR/issue-71036.rs:11:1\n+   |\n+LL | impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Foo<'a, U>> for Foo<'a, T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Unsize<&'a U>` is not implemented for `&'a T`\n+   |\n+   = note: all implementations of `Unsize` are provided automatically by the compiler, see <https://doc.rust-lang.org/stable/std/marker/trait.Unsize.html> for more information\n+   = note: required because of the requirements on the impl of `std::ops::DispatchFromDyn<&'a &'a U>` for `&'a &'a T`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "24d77e36d94f54e61af78713e1b83d92af53d445", "filename": "src/test/ui/lint/issue-71290-unused-paren-binop.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Flint%2Fissue-71290-unused-paren-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Flint%2Fissue-71290-unused-paren-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-71290-unused-paren-binop.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// Make sure unused parens lint doesn't emit a false positive.\n+// See https://github.com/rust-lang/rust/issues/71290 for details.\n+#![deny(unused_parens)]\n+\n+fn x() -> u8 {\n+    ({ 0 }) + 1\n+}\n+\n+fn y() -> u8 {\n+    ({ 0 } + 1)\n+}\n+\n+pub fn foo(a: bool, b: bool) -> u8 {\n+    (if a { 1 } else { 0 } + if b { 1 } else { 0 })\n+}\n+\n+pub fn bar() -> u8 {\n+    // Make sure nested expressions are handled correctly as well\n+    ({ 0 } + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9)\n+}\n+\n+fn main() {}"}, {"sha": "bd50a27fd5e5822b5b6f608d5ab66f4d8b560990", "filename": "src/test/ui/object-lifetime/object-lifetime-default-ambiguous.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-ambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-ambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-ambiguous.stderr?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -18,3 +18,4 @@ LL | fn f(t: &Ref2<dyn Test>) {\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0228`."}, {"sha": "f06a9da1deea57b27bdfc2e88d48e494f241c957", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.stderr?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -6,3 +6,4 @@ LL | fn bar<'a>(x: &'a str) -> &'a dyn Foo<'a, Item = dyn Bar> { &() }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0228`."}, {"sha": "51d8450af768b15854a9112ff7afb87f9095aa9c", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.stderr?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -6,3 +6,4 @@ LL | fn bar<'a>(x: &'a str) -> &'a dyn Foo<'a, Item = dyn Bar> { &() }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0228`."}, {"sha": "f721bf39419b51c8bc754932e9f59b91287d6341", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic3.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.stderr?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -6,3 +6,4 @@ LL | fn bar(x: &str) -> &dyn Foo<Item = dyn Bar> { &() }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0228`."}, {"sha": "b7340b79d682a2088bf6fc548d83c2d5e892699b", "filename": "src/test/ui/regions/issue-72051-member-region-hang.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fregions%2Fissue-72051-member-region-hang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fregions%2Fissue-72051-member-region-hang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-72051-member-region-hang.rs?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -0,0 +1,7 @@\n+// Regression test for #72051, hang when resolving regions.\n+\n+// check-pass\n+// edition:2018\n+\n+pub async fn query<'a>(_: &(), _: &(), _: (&(dyn std::any::Any + 'a),) ) {}\n+fn main() {}"}, {"sha": "2630cf1affae6be7531a36b9d6aa44f8048b9766", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -252,5 +252,5 @@ LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell\n \n error: aborting due to 28 previous errors\n \n-Some errors have detailed explanations: E0106, E0107.\n+Some errors have detailed explanations: E0106, E0107, E0228.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "2c595833cd1b04602d13116da5e07bf9b57a2e78", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore-in-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a74d1862d4d87a56244958416fd05976c58ca1a8/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr?ref=a74d1862d4d87a56244958416fd05976c58ca1a8", "patch": "@@ -18,4 +18,5 @@ LL |     x: Box<dyn Debug + '_>,\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0106`.\n+Some errors have detailed explanations: E0106, E0228.\n+For more information about an error, try `rustc --explain E0106`."}]}