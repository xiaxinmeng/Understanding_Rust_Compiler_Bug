{"sha": "8d42439a7d5c3edbb0ef6d1398436944ed662111", "node_id": "C_kwDOAAsO6NoAKDhkNDI0MzlhN2Q1YzNlZGJiMGVmNmQxMzk4NDM2OTQ0ZWQ2NjIxMTE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-08T18:44:03Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-08T18:46:30Z"}, "message": "Move precedence handling to `crates/syntax`", "tree": {"sha": "71f9da9ec5ce128cf48a11deea442d592114352a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71f9da9ec5ce128cf48a11deea442d592114352a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d42439a7d5c3edbb0ef6d1398436944ed662111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d42439a7d5c3edbb0ef6d1398436944ed662111", "html_url": "https://github.com/rust-lang/rust/commit/8d42439a7d5c3edbb0ef6d1398436944ed662111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d42439a7d5c3edbb0ef6d1398436944ed662111/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2870b01ec0d434261b14726c2b2671001b817772", "url": "https://api.github.com/repos/rust-lang/rust/commits/2870b01ec0d434261b14726c2b2671001b817772", "html_url": "https://github.com/rust-lang/rust/commit/2870b01ec0d434261b14726c2b2671001b817772"}], "stats": {"total": 210, "additions": 117, "deletions": 93}, "files": [{"sha": "30e9609f7a747867759680e3b9873bf82a769880", "filename": "crates/ide-assists/src/handlers/remove_parentheses.rs", "status": "modified", "additions": 1, "deletions": 93, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8d42439a7d5c3edbb0ef6d1398436944ed662111/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d42439a7d5c3edbb0ef6d1398436944ed662111/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs?ref=8d42439a7d5c3edbb0ef6d1398436944ed662111", "patch": "@@ -30,8 +30,7 @@ pub(crate) fn remove_parentheses(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n \n     let expr = parens.expr()?;\n     let parent = ast::Expr::cast(parens.syntax().parent()?);\n-    let is_ok_to_remove =\n-        parent.map_or(true, |p| ExprPrecedence::of(&expr) >= ExprPrecedence::of(&p));\n+    let is_ok_to_remove = expr.precedence() >= parent.as_ref().and_then(ast::Expr::precedence);\n     if !is_ok_to_remove {\n         return None;\n     }\n@@ -60,97 +59,6 @@ pub(crate) fn remove_parentheses(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n     )\n }\n \n-#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]\n-pub enum ExprPrecedence {\n-    // N.B.: Order is important\n-    /// Precedence is unknown\n-    Dummy,\n-    Closure,\n-    Jump,\n-    Range,\n-    Bin(BinOpPresedence),\n-    Prefix,\n-    Postfix,\n-    Paren,\n-}\n-\n-#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]\n-pub enum BinOpPresedence {\n-    // N.B.: Order is important\n-    /// `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `|=`, `&=`\n-    Assign,\n-    /// `||`\n-    LOr,\n-    /// `&&`\n-    LAnd,\n-    /// `<`, `<=`, `>`, `>=`, `==` and `!=`\n-    Cmp,\n-    /// `|`\n-    BitOr,\n-    /// `^`\n-    BitXor,\n-    /// `&`\n-    BitAnd,\n-    /// `<<` and `>>`\n-    Shift,\n-    /// `+` and `-`\n-    Add,\n-    /// `*`, `/` and `%`\n-    Mul,\n-    /// `as`\n-    As,\n-}\n-\n-impl ExprPrecedence {\n-    pub fn of(expr: &ast::Expr) -> Self {\n-        // Copied from <https://github.com/rust-lang/rust/blob/b6852428a8ea9728369b64b9964cad8e258403d3/compiler/rustc_ast/src/util/parser.rs#L296>\n-        use ast::Expr::*;\n-\n-        match expr {\n-            ClosureExpr(_) => Self::Closure,\n-\n-            ContinueExpr(_) | ReturnExpr(_) | YieldExpr(_) | BreakExpr(_) => Self::Jump,\n-\n-            RangeExpr(_) => Self::Range,\n-\n-            BinExpr(bin_expr) => bin_expr\n-                .op_kind()\n-                .map(|op| match op {\n-                    ast::BinaryOp::LogicOp(op) => match op {\n-                        ast::LogicOp::And => BinOpPresedence::LAnd,\n-                        ast::LogicOp::Or => BinOpPresedence::LOr,\n-                    },\n-                    ast::BinaryOp::ArithOp(op) => match op {\n-                        ast::ArithOp::Add => BinOpPresedence::Add,\n-                        ast::ArithOp::Mul => BinOpPresedence::Mul,\n-                        ast::ArithOp::Sub => BinOpPresedence::Add,\n-                        ast::ArithOp::Div => BinOpPresedence::Mul,\n-                        ast::ArithOp::Rem => BinOpPresedence::Mul,\n-                        ast::ArithOp::Shl => BinOpPresedence::Shift,\n-                        ast::ArithOp::Shr => BinOpPresedence::Shift,\n-                        ast::ArithOp::BitXor => BinOpPresedence::BitXor,\n-                        ast::ArithOp::BitOr => BinOpPresedence::BitOr,\n-                        ast::ArithOp::BitAnd => BinOpPresedence::BitAnd,\n-                    },\n-                    ast::BinaryOp::CmpOp(_) => BinOpPresedence::Cmp,\n-                    ast::BinaryOp::Assignment { .. } => BinOpPresedence::Assign,\n-                })\n-                .map(Self::Bin)\n-                .unwrap_or(Self::Dummy),\n-            CastExpr(_) => Self::Bin(BinOpPresedence::As),\n-\n-            BoxExpr(_) | RefExpr(_) | LetExpr(_) | PrefixExpr(_) => Self::Prefix,\n-\n-            AwaitExpr(_) | CallExpr(_) | MethodCallExpr(_) | FieldExpr(_) | IndexExpr(_)\n-            | TryExpr(_) | MacroExpr(_) => Self::Postfix,\n-\n-            ArrayExpr(_) | TupleExpr(_) | Literal(_) | PathExpr(_) | ParenExpr(_) | IfExpr(_)\n-            | WhileExpr(_) | ForExpr(_) | LoopExpr(_) | MatchExpr(_) | BlockExpr(_)\n-            | RecordExpr(_) | UnderscoreExpr(_) => Self::Paren,\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};"}, {"sha": "10c04575833c85428b73a4300d2db2b91f883887", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d42439a7d5c3edbb0ef6d1398436944ed662111/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d42439a7d5c3edbb0ef6d1398436944ed662111/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=8d42439a7d5c3edbb0ef6d1398436944ed662111", "patch": "@@ -9,6 +9,7 @@ mod operators;\n pub mod edit;\n pub mod edit_in_place;\n pub mod make;\n+pub mod prec;\n \n use std::marker::PhantomData;\n "}, {"sha": "6253c4dc3e77cd3b9abba56d65b87f87e006e04e", "filename": "crates/syntax/src/ast/prec.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/8d42439a7d5c3edbb0ef6d1398436944ed662111/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d42439a7d5c3edbb0ef6d1398436944ed662111/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs?ref=8d42439a7d5c3edbb0ef6d1398436944ed662111", "patch": "@@ -0,0 +1,115 @@\n+//! Precedence representation.\n+\n+use crate::ast::{self, BinExpr, Expr};\n+\n+/// Precedence of an expression.\n+#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]\n+pub enum ExprPrecedence {\n+    // N.B.: Order is important\n+    Closure,\n+    Jump,\n+    Range,\n+    Bin(BinOpPresedence),\n+    Prefix,\n+    Postfix,\n+    Paren,\n+}\n+\n+/// Precedence of a binary operator.\n+#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]\n+pub enum BinOpPresedence {\n+    // N.B.: Order is important\n+    /// `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `|=`, `&=`\n+    Assign,\n+    /// `||`\n+    LOr,\n+    /// `&&`\n+    LAnd,\n+    /// `<`, `<=`, `>`, `>=`, `==` and `!=`\n+    Cmp,\n+    /// `|`\n+    BitOr,\n+    /// `^`\n+    BitXor,\n+    /// `&`\n+    BitAnd,\n+    /// `<<` and `>>`\n+    Shift,\n+    /// `+` and `-`\n+    Add,\n+    /// `*`, `/` and `%`\n+    Mul,\n+    /// `as`\n+    As,\n+}\n+\n+impl Expr {\n+    /// Returns precedence of this expression.\n+    /// Usefull to preserve semantics in assists.\n+    ///\n+    /// Returns `None` if this is a [`BinExpr`] and its [`op_kind`] returns `None`.\n+    ///\n+    /// [`op_kind`]: BinExpr::op_kind\n+    /// [`BinExpr`]: Expr::BinExpr\n+    pub fn precedence(&self) -> Option<ExprPrecedence> {\n+        // Copied from <https://github.com/rust-lang/rust/blob/b6852428a8ea9728369b64b9964cad8e258403d3/compiler/rustc_ast/src/util/parser.rs#L296>\n+        use Expr::*;\n+\n+        let prec = match self {\n+            ClosureExpr(_) => ExprPrecedence::Closure,\n+\n+            ContinueExpr(_) | ReturnExpr(_) | YieldExpr(_) | BreakExpr(_) => ExprPrecedence::Jump,\n+\n+            RangeExpr(_) => ExprPrecedence::Range,\n+\n+            BinExpr(bin_expr) => return bin_expr.precedence().map(ExprPrecedence::Bin),\n+            CastExpr(_) => ExprPrecedence::Bin(BinOpPresedence::As),\n+\n+            BoxExpr(_) | RefExpr(_) | LetExpr(_) | PrefixExpr(_) => ExprPrecedence::Prefix,\n+\n+            AwaitExpr(_) | CallExpr(_) | MethodCallExpr(_) | FieldExpr(_) | IndexExpr(_)\n+            | TryExpr(_) | MacroExpr(_) => ExprPrecedence::Postfix,\n+\n+            ArrayExpr(_) | TupleExpr(_) | Literal(_) | PathExpr(_) | ParenExpr(_) | IfExpr(_)\n+            | WhileExpr(_) | ForExpr(_) | LoopExpr(_) | MatchExpr(_) | BlockExpr(_)\n+            | RecordExpr(_) | UnderscoreExpr(_) => ExprPrecedence::Paren,\n+        };\n+\n+        Some(prec)\n+    }\n+}\n+\n+impl BinExpr {\n+    /// Returns precedence of this binary expression.\n+    /// Usefull to preserve semantics in assists.\n+    ///\n+    /// Returns `None` if [`op_kind`] returns `None`.\n+    ///\n+    /// [`op_kind`]: BinExpr::op_kind\n+    pub fn precedence(&self) -> Option<BinOpPresedence> {\n+        use ast::{ArithOp::*, BinaryOp::*, LogicOp::*};\n+\n+        let prec = match self.op_kind()? {\n+            LogicOp(op) => match op {\n+                And => BinOpPresedence::LAnd,\n+                Or => BinOpPresedence::LOr,\n+            },\n+            ArithOp(op) => match op {\n+                Add => BinOpPresedence::Add,\n+                Mul => BinOpPresedence::Mul,\n+                Sub => BinOpPresedence::Add,\n+                Div => BinOpPresedence::Mul,\n+                Rem => BinOpPresedence::Mul,\n+                Shl => BinOpPresedence::Shift,\n+                Shr => BinOpPresedence::Shift,\n+                BitXor => BinOpPresedence::BitXor,\n+                BitOr => BinOpPresedence::BitOr,\n+                BitAnd => BinOpPresedence::BitAnd,\n+            },\n+            CmpOp(_) => BinOpPresedence::Cmp,\n+            Assignment { .. } => BinOpPresedence::Assign,\n+        };\n+\n+        Some(prec)\n+    }\n+}"}]}