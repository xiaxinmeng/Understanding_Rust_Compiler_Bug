{"sha": "b51b17288ea990e097b51b8644cbd8e7877412cb", "node_id": "C_kwDOAAsO6NoAKGI1MWIxNzI4OGVhOTkwZTA5N2I1MWI4NjQ0Y2JkOGU3ODc3NDEyY2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-21T22:07:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-21T22:07:32Z"}, "message": "Auto merge of #89158 - the8472:rollup-3e4ijth, r=the8472\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #88795 (Print a note if a character literal contains a variation selector)\n - #89015 (core::ascii::escape_default: reduce struct size)\n - #89078 (Cleanup: Remove needless reference in ParentHirIterator)\n - #89086 (Stabilize `Iterator::map_while`)\n - #89096 ([bootstrap] Improve the error message when `ninja` is not found to link to installation instructions)\n - #89113 (dont `.ensure()` the `thir_abstract_const` query call in `mir_build`)\n - #89114 (Fixes a technicality regarding the size of C's `char` type)\n - #89115 (:arrow_up: rust-analyzer)\n - #89126 (Fix ICE when `indirect_structural_match` is allowed)\n - #89141 (Impl `Error` for `FromSecsError` without foreign type)\n - #89142 (Fix match for placeholder region)\n - #89147 (add case for checking const refs in check_const_value_eq)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8a3ca6ccc877b12465edf9c738dcc407d824c166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a3ca6ccc877b12465edf9c738dcc407d824c166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b51b17288ea990e097b51b8644cbd8e7877412cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b51b17288ea990e097b51b8644cbd8e7877412cb", "html_url": "https://github.com/rust-lang/rust/commit/b51b17288ea990e097b51b8644cbd8e7877412cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b51b17288ea990e097b51b8644cbd8e7877412cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3b67fe43a2ae016992d9798ddea458632f90203", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b67fe43a2ae016992d9798ddea458632f90203", "html_url": "https://github.com/rust-lang/rust/commit/a3b67fe43a2ae016992d9798ddea458632f90203"}, {"sha": "ac9e80ed7783eb8044fef3dcef57b2c0ea660ca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac9e80ed7783eb8044fef3dcef57b2c0ea660ca9", "html_url": "https://github.com/rust-lang/rust/commit/ac9e80ed7783eb8044fef3dcef57b2c0ea660ca9"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "94b3cd371bd08ab0113eb96fd24255c9d43b6945", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b51b17288ea990e097b51b8644cbd8e7877412cb/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51b17288ea990e097b51b8644cbd8e7877412cb/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=b51b17288ea990e097b51b8644cbd8e7877412cb", "patch": "@@ -105,8 +105,7 @@ impl<'hir> IfLet<'hir> {\n             if_else,\n         ) = expr.kind\n         {\n-            let hir = cx.tcx.hir();\n-            let mut iter = hir.parent_iter(expr.hir_id);\n+            let mut iter = cx.tcx.hir().parent_iter(expr.hir_id);\n             if let Some((_, Node::Block(Block { stmts: [], .. }))) = iter.next() {\n                 if let Some((\n                     _,"}, {"sha": "7f5a1bf9c0741707f0e4e34a66cb0fb6a6e199d7", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b51b17288ea990e097b51b8644cbd8e7877412cb/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51b17288ea990e097b51b8644cbd8e7877412cb/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=b51b17288ea990e097b51b8644cbd8e7877412cb", "patch": "@@ -833,12 +833,11 @@ pub fn capture_local_usage(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind\n         ExprKind::Path(QPath::Resolved(None, Path { res: Res::Local(_), .. }))\n     ));\n \n-    let map = cx.tcx.hir();\n     let mut child_id = e.hir_id;\n     let mut capture = CaptureKind::Value;\n     let mut capture_expr_ty = e;\n \n-    for (parent_id, parent) in map.parent_iter(e.hir_id) {\n+    for (parent_id, parent) in cx.tcx.hir().parent_iter(e.hir_id) {\n         if let [Adjustment {\n             kind: Adjust::Deref(_) | Adjust::Borrow(AutoBorrow::Ref(..)),\n             target,\n@@ -1224,8 +1223,7 @@ pub fn get_enclosing_block<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n \n /// Gets the loop or closure enclosing the given expression, if any.\n pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n-    let map = tcx.hir();\n-    for (_, node) in map.parent_iter(expr.hir_id) {\n+    for (_, node) in tcx.hir().parent_iter(expr.hir_id) {\n         match node {\n             Node::Expr(\n                 e\n@@ -1244,8 +1242,7 @@ pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Opti\n \n /// Gets the parent node if it's an impl block.\n pub fn get_parent_as_impl(tcx: TyCtxt<'_>, id: HirId) -> Option<&Impl<'_>> {\n-    let map = tcx.hir();\n-    match map.parent_iter(id).next() {\n+    match tcx.hir().parent_iter(id).next() {\n         Some((\n             _,\n             Node::Item(Item {\n@@ -1259,8 +1256,7 @@ pub fn get_parent_as_impl(tcx: TyCtxt<'_>, id: HirId) -> Option<&Impl<'_>> {\n \n /// Checks if the given expression is the else clause of either an `if` or `if let` expression.\n pub fn is_else_clause(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n-    let map = tcx.hir();\n-    let mut iter = map.parent_iter(expr.hir_id);\n+    let mut iter = tcx.hir().parent_iter(expr.hir_id);\n     match iter.next() {\n         Some((\n             _,\n@@ -1794,9 +1790,8 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n \n /// Gets the node where an expression is either used, or it's type is unified with another branch.\n pub fn get_expr_use_or_unification_node(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<Node<'tcx>> {\n-    let map = tcx.hir();\n     let mut child_id = expr.hir_id;\n-    let mut iter = map.parent_iter(child_id);\n+    let mut iter = tcx.hir().parent_iter(child_id);\n     loop {\n         match iter.next() {\n             None => break None,"}]}