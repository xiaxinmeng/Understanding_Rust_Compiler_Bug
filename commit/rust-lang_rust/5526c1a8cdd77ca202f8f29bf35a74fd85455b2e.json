{"sha": "5526c1a8cdd77ca202f8f29bf35a74fd85455b2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MjZjMWE4Y2RkNzdjYTIwMmY4ZjI5YmYzNWE3NGZkODU0NTViMmU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-13T02:05:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-13T02:05:47Z"}, "message": "Rollup merge of #75469 - camelid:intra-doc-links-std-io-mod, r=KodrAus\n\nSwitch to intra-doc links in `std/io/mod.rs`\n\nPart of #75080.", "tree": {"sha": "0b88fe4897050b33af4aaa0a301bb6c2f5af5146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b88fe4897050b33af4aaa0a301bb6c2f5af5146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5526c1a8cdd77ca202f8f29bf35a74fd85455b2e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNJ/7CRBK7hj4Ov3rIwAAdHIIADzV9x32DsaQTkJRbpUStgzp\njDe+VG0AHaN1razj+9uIw80xznoluBeMxVm+sMVBedgg5LBzn8BULCDrlDHEBN4L\npJYOnADmaldN8zUwJ5RFziEKU/kPOIVXx8cDsgUXqU5ZJf2f21MjEgf55QMw4Dyh\nllgpwS8NBVwLt/cU3FoY6YRzlWqN10xOOee178b3EZ7mEVsTZbTl+Ez15okypBwx\nLXHrTTAd+cYdB9zVamw1rgidzKR07qFmmEJbYtVDhaU+jlSTNIYQX/bYbmrfDp/F\n1/kQI/SRiyXh5keddNX7UK66LYHFJf87HHv908PabBxLVy6VkMQUdu0opTS99JQ=\n=2YjH\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b88fe4897050b33af4aaa0a301bb6c2f5af5146\nparent e94f7437bd404679da6d802c82dc8e8172c50baa\nparent a7749fe451c37ec192b282ec7303b9809b49df93\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597284347 +0900\ncommitter GitHub <noreply@github.com> 1597284347 +0900\n\nRollup merge of #75469 - camelid:intra-doc-links-std-io-mod, r=KodrAus\n\nSwitch to intra-doc links in `std/io/mod.rs`\n\nPart of #75080.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5526c1a8cdd77ca202f8f29bf35a74fd85455b2e", "html_url": "https://github.com/rust-lang/rust/commit/5526c1a8cdd77ca202f8f29bf35a74fd85455b2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5526c1a8cdd77ca202f8f29bf35a74fd85455b2e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94f7437bd404679da6d802c82dc8e8172c50baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94f7437bd404679da6d802c82dc8e8172c50baa", "html_url": "https://github.com/rust-lang/rust/commit/e94f7437bd404679da6d802c82dc8e8172c50baa"}, {"sha": "a7749fe451c37ec192b282ec7303b9809b49df93", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7749fe451c37ec192b282ec7303b9809b49df93", "html_url": "https://github.com/rust-lang/rust/commit/a7749fe451c37ec192b282ec7303b9809b49df93"}], "stats": {"total": 27, "additions": 6, "deletions": 21}, "files": [{"sha": "e90ee5c285f2f5ca8d5af091914c8bcb1b3792fe", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5526c1a8cdd77ca202f8f29bf35a74fd85455b2e/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5526c1a8cdd77ca202f8f29bf35a74fd85455b2e/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=5526c1a8cdd77ca202f8f29bf35a74fd85455b2e", "patch": "@@ -1212,7 +1212,7 @@ impl Initializer {\n ///\n /// [`write`]: Self::write\n /// [`flush`]: Self::flush\n-/// [`std::io`]: index.html\n+/// [`std::io`]: self\n ///\n /// # Examples\n ///\n@@ -1590,8 +1590,6 @@ pub trait Seek {\n     /// # Errors\n     ///\n     /// Seeking to a negative offset is considered an error.\n-    ///\n-    /// [`SeekFrom::Start`]: enum.SeekFrom.html#variant.Start\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn seek(&mut self, pos: SeekFrom) -> Result<u64>;\n \n@@ -1678,8 +1676,6 @@ pub trait Seek {\n /// Enumeration of possible methods to seek within an I/O object.\n ///\n /// It is used by the [`Seek`] trait.\n-///\n-/// [`Seek`]: trait.Seek.html\n #[derive(Copy, PartialEq, Eq, Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum SeekFrom {\n@@ -1759,11 +1755,9 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>) -> R\n /// For example, [`File`] implements [`Read`], but not `BufRead`.\n /// [`BufReader`] to the rescue!\n ///\n-/// [`BufReader`]: struct.BufReader.html\n /// [`File`]: crate::fs::File\n /// [`read_line`]: Self::read_line\n /// [`lines`]: Self::lines\n-/// [`Read`]: trait.Read.html\n ///\n /// ```no_run\n /// use std::io::{self, BufReader};\n@@ -1869,16 +1863,13 @@ pub trait BufRead: Read {\n     /// present in `buf` and its length will have been adjusted appropriately.\n     ///\n     /// [`fill_buf`]: Self::fill_buf\n-    /// [`ErrorKind::Interrupted`]: enum.ErrorKind.html#variant.Interrupted\n     ///\n     /// # Examples\n     ///\n     /// [`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\n     /// this example, we use [`Cursor`] to read all the bytes in a byte slice\n     /// in hyphen delimited segments:\n     ///\n-    /// [`Cursor`]: struct.Cursor.html\n-    ///\n     /// ```\n     /// use std::io::{self, BufRead};\n     ///\n@@ -1940,8 +1931,6 @@ pub trait BufRead: Read {\n     /// [`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\n     /// this example, we use [`Cursor`] to read all the lines in a byte slice:\n     ///\n-    /// [`Cursor`]: struct.Cursor.html\n-    ///\n     /// ```\n     /// use std::io::{self, BufRead};\n     ///\n@@ -1996,8 +1985,6 @@ pub trait BufRead: Read {\n     /// this example, we use [`Cursor`] to iterate over all hyphen delimited\n     /// segments in a byte slice\n     ///\n-    /// [`Cursor`]: struct.Cursor.html\n-    ///\n     /// ```\n     /// use std::io::{self, BufRead};\n     ///\n@@ -2046,8 +2033,6 @@ pub trait BufRead: Read {\n     /// # Errors\n     ///\n     /// Each line of the iterator has the same error semantics as [`BufRead::read_line`].\n-    ///\n-    /// [`BufRead::read_line`]: trait.BufRead.html#method.read_line\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn lines(self) -> Lines<Self>\n     where\n@@ -2062,7 +2047,7 @@ pub trait BufRead: Read {\n /// This struct is generally created by calling [`chain`] on a reader.\n /// Please see the documentation of [`chain`] for more details.\n ///\n-/// [`chain`]: trait.Read.html#method.chain\n+/// [`chain`]: Read::chain\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chain<T, U> {\n     first: T,\n@@ -2204,7 +2189,7 @@ impl<T: BufRead, U: BufRead> BufRead for Chain<T, U> {\n /// This struct is generally created by calling [`take`] on a reader.\n /// Please see the documentation of [`take`] for more details.\n ///\n-/// [`take`]: trait.Read.html#method.take\n+/// [`take`]: Read::take\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Take<T> {\n@@ -2403,7 +2388,7 @@ impl<T: BufRead> BufRead for Take<T> {\n /// This struct is generally created by calling [`bytes`] on a reader.\n /// Please see the documentation of [`bytes`] for more details.\n ///\n-/// [`bytes`]: trait.Read.html#method.bytes\n+/// [`bytes`]: Read::bytes\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Bytes<R> {\n@@ -2433,7 +2418,7 @@ impl<R: Read> Iterator for Bytes<R> {\n /// This struct is generally created by calling [`split`] on a `BufRead`.\n /// Please see the documentation of [`split`] for more details.\n ///\n-/// [`split`]: trait.BufRead.html#method.split\n+/// [`split`]: BufRead::split\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Split<B> {\n@@ -2465,7 +2450,7 @@ impl<B: BufRead> Iterator for Split<B> {\n /// This struct is generally created by calling [`lines`] on a `BufRead`.\n /// Please see the documentation of [`lines`] for more details.\n ///\n-/// [`lines`]: trait.BufRead.html#method.lines\n+/// [`lines`]: BufRead::lines\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Lines<B> {"}]}