{"sha": "e53f48be34352c62c4dedba93cd9f774b4141849", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1M2Y0OGJlMzQzNTJjNjJjNGRlZGJhOTNjZDlmNzc0YjQxNDE4NDk=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T14:28:42Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-02T15:17:22Z"}, "message": "middle: trans: common: remove dead code", "tree": {"sha": "68f136e1de2bc138ed433012eb7f9355323a4dd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f136e1de2bc138ed433012eb7f9355323a4dd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e53f48be34352c62c4dedba93cd9f774b4141849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e53f48be34352c62c4dedba93cd9f774b4141849", "html_url": "https://github.com/rust-lang/rust/commit/e53f48be34352c62c4dedba93cd9f774b4141849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e53f48be34352c62c4dedba93cd9f774b4141849/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f385fc2e01c14cea8323e3dba86518bed306a9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f385fc2e01c14cea8323e3dba86518bed306a9a", "html_url": "https://github.com/rust-lang/rust/commit/8f385fc2e01c14cea8323e3dba86518bed306a9a"}], "stats": {"total": 40, "additions": 0, "deletions": 40}, "files": [{"sha": "4833a233423851e3106c5845f23213d530999c2b", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e53f48be34352c62c4dedba93cd9f774b4141849/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53f48be34352c62c4dedba93cd9f774b4141849/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=e53f48be34352c62c4dedba93cd9f774b4141849", "patch": "@@ -24,7 +24,6 @@ use middle::trans::datum;\n use middle::trans::datum::{Datum, Lvalue};\n use middle::trans::debuginfo;\n use middle::trans::type_::Type;\n-use middle::ty::substs;\n use middle::ty;\n use middle::typeck;\n use util::ppaux::Repr;\n@@ -456,14 +455,6 @@ impl<'a> Block<'a> {\n         e.repr(self.tcx())\n     }\n \n-    pub fn expr_is_lval(&self, e: &ast::Expr) -> bool {\n-        ty::expr_is_lval(self.tcx(), self.ccx().maps.method_map, e)\n-    }\n-\n-    pub fn expr_kind(&self, e: &ast::Expr) -> ty::ExprKind {\n-        ty::expr_kind(self.tcx(), self.ccx().maps.method_map, e)\n-    }\n-\n     pub fn def(&self, nid: ast::NodeId) -> ast::Def {\n         match self.tcx().def_map.borrow().find(&nid) {\n             Some(&v) => v,\n@@ -504,13 +495,6 @@ pub fn rslt<'a>(bcx: &'a Block<'a>, val: ValueRef) -> Result<'a> {\n     }\n }\n \n-impl<'a> Result<'a> {\n-    pub fn unpack(&self, bcx: &mut &'a Block<'a>) -> ValueRef {\n-        *bcx = self.bcx;\n-        return self.val;\n-    }\n-}\n-\n pub fn val_ty(v: ValueRef) -> Type {\n     unsafe {\n         Type::from_ref(llvm::LLVMTypeOf(v))\n@@ -749,22 +733,6 @@ pub struct mono_id_ {\n \n pub type mono_id = @mono_id_;\n \n-pub fn umax(cx: &Block, a: ValueRef, b: ValueRef) -> ValueRef {\n-    let cond = build::ICmp(cx, lib::llvm::IntULT, a, b);\n-    return build::Select(cx, cond, b, a);\n-}\n-\n-pub fn umin(cx: &Block, a: ValueRef, b: ValueRef) -> ValueRef {\n-    let cond = build::ICmp(cx, lib::llvm::IntULT, a, b);\n-    return build::Select(cx, cond, a, b);\n-}\n-\n-pub fn align_to(cx: &Block, off: ValueRef, align: ValueRef) -> ValueRef {\n-    let mask = build::Sub(cx, align, C_int(cx.ccx(), 1));\n-    let bumped = build::Add(cx, off, mask);\n-    return build::And(cx, bumped, build::Not(cx, mask));\n-}\n-\n pub fn monomorphize_type(bcx: &Block, t: ty::t) -> ty::t {\n     match bcx.fcx.param_substs {\n         Some(substs) => {\n@@ -928,14 +896,6 @@ pub fn find_vtable(tcx: &ty::ctxt,\n     param_bounds.get(n_bound).clone()\n }\n \n-pub fn dummy_substs(tps: Vec<ty::t> ) -> ty::substs {\n-    substs {\n-        regions: ty::ErasedRegions,\n-        self_ty: None,\n-        tps: tps\n-    }\n-}\n-\n pub fn filename_and_line_num_from_span(bcx: &Block, span: Span)\n                                        -> (ValueRef, ValueRef) {\n     let loc = bcx.sess().codemap().lookup_char_pos(span.lo);"}]}