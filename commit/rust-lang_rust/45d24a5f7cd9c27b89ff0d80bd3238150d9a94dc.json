{"sha": "45d24a5f7cd9c27b89ff0d80bd3238150d9a94dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZDI0YTVmN2NkOWMyN2I4OWZmMGQ4MGJkMzIzODE1MGQ5YTk0ZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-21T01:31:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-21T01:31:51Z"}, "message": "auto merge of #11031 : jhasse/rust/patch-msys-3, r=cmr\n\nEnable ANSI colors if TERM is set to cygwin and terminfo is not available (msys terminal on Windows). See #2807", "tree": {"sha": "c4385ae73dfc416ed58b20911450c397647af14c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4385ae73dfc416ed58b20911450c397647af14c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45d24a5f7cd9c27b89ff0d80bd3238150d9a94dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45d24a5f7cd9c27b89ff0d80bd3238150d9a94dc", "html_url": "https://github.com/rust-lang/rust/commit/45d24a5f7cd9c27b89ff0d80bd3238150d9a94dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45d24a5f7cd9c27b89ff0d80bd3238150d9a94dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d1de0b699a669d01ea5ecd3dea0424ab94db369", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1de0b699a669d01ea5ecd3dea0424ab94db369", "html_url": "https://github.com/rust-lang/rust/commit/9d1de0b699a669d01ea5ecd3dea0424ab94db369"}, {"sha": "5cf2f54bb12c66f6ea26b0f3c607817cfaab2c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf2f54bb12c66f6ea26b0f3c607817cfaab2c2f", "html_url": "https://github.com/rust-lang/rust/commit/5cf2f54bb12c66f6ea26b0f3c607817cfaab2c2f"}], "stats": {"total": 73, "additions": 28, "deletions": 45}, "files": [{"sha": "05e9b65d19cbd95ec6eb6fa2a792d10c607d8373", "filename": "src/libextra/term.rs", "status": "modified", "additions": 13, "deletions": 45, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/45d24a5f7cd9c27b89ff0d80bd3238150d9a94dc/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d24a5f7cd9c27b89ff0d80bd3238150d9a94dc/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=45d24a5f7cd9c27b89ff0d80bd3238150d9a94dc", "patch": "@@ -15,11 +15,11 @@\n \n use std::io::{Decorator, Writer};\n \n-#[cfg(not(target_os = \"win32\"))] use std::os;\n-#[cfg(not(target_os = \"win32\"))] use terminfo::*;\n-#[cfg(not(target_os = \"win32\"))] use terminfo::searcher::open;\n-#[cfg(not(target_os = \"win32\"))] use terminfo::parser::compiled::parse;\n-#[cfg(not(target_os = \"win32\"))] use terminfo::parm::{expand, Number, Variables};\n+use std::os;\n+use terminfo::*;\n+use terminfo::searcher::open;\n+use terminfo::parser::compiled::{parse, msys_terminfo};\n+use terminfo::parm::{expand, Number, Variables};\n \n // FIXME (#2807): Windows support.\n \n@@ -74,7 +74,6 @@ pub mod attr {\n     }\n }\n \n-#[cfg(not(target_os = \"win32\"))]\n fn cap_for_attr(attr: attr::Attr) -> &'static str {\n     match attr {\n         attr::Bold               => \"bold\",\n@@ -93,29 +92,24 @@ fn cap_for_attr(attr: attr::Attr) -> &'static str {\n     }\n }\n \n-#[cfg(not(target_os = \"win32\"))]\n pub struct Terminal<T> {\n     priv num_colors: u16,\n     priv out: T,\n     priv ti: ~TermInfo\n }\n \n-#[cfg(target_os = \"win32\")]\n-pub struct Terminal<T> {\n-    priv num_colors: u16,\n-    priv out: T,\n-}\n-\n-#[cfg(not(target_os = \"win32\"))]\n impl<T: Writer> Terminal<T> {\n     pub fn new(out: T) -> Result<Terminal<T>, ~str> {\n-        let term = os::getenv(\"TERM\");\n-        if term.is_none() {\n-            return Err(~\"TERM environment variable undefined\");\n-        }\n+        let term = match os::getenv(\"TERM\") {\n+            Some(t) => t,\n+            None => return Err(~\"TERM environment variable undefined\")\n+        };\n \n-        let entry = open(term.unwrap());\n+        let entry = open(term);\n         if entry.is_err() {\n+            if \"cygwin\" == term { // msys terminal\n+                return Ok(Terminal {out: out, ti: msys_terminfo(), num_colors: 8});\n+            }\n             return Err(entry.unwrap_err());\n         }\n \n@@ -241,32 +235,6 @@ impl<T: Writer> Terminal<T> {\n     }\n }\n \n-#[cfg(target_os = \"win32\")]\n-impl<T: Writer> Terminal<T> {\n-    pub fn new(out: T) -> Result<Terminal<T>, ~str> {\n-        return Ok(Terminal {out: out, num_colors: 0});\n-    }\n-\n-    pub fn fg(&mut self, _color: color::Color) -> bool {\n-        false\n-    }\n-\n-    pub fn bg(&mut self, _color: color::Color) -> bool {\n-        false\n-    }\n-\n-    pub fn attr(&mut self, _attr: attr::Attr) -> bool {\n-        false\n-    }\n-\n-    pub fn supports_attr(&self, _attr: attr::Attr) -> bool {\n-        false\n-    }\n-\n-    pub fn reset(&self) {\n-    }\n-}\n-\n impl<T: Writer> Decorator<T> for Terminal<T> {\n     fn inner(self) -> T {\n         self.out"}, {"sha": "d42340cb817e84da102191766e4ad0e4ad2cd6f2", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/45d24a5f7cd9c27b89ff0d80bd3238150d9a94dc/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d24a5f7cd9c27b89ff0d80bd3238150d9a94dc/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=45d24a5f7cd9c27b89ff0d80bd3238150d9a94dc", "patch": "@@ -316,6 +316,21 @@ pub fn parse(file: &mut io::Reader,\n     Ok(~TermInfo {names: term_names, bools: bools_map, numbers: numbers_map, strings: string_map })\n }\n \n+/// Create a dummy TermInfo struct for msys terminals\n+pub fn msys_terminfo() -> ~TermInfo {\n+    let mut strings = HashMap::new();\n+    strings.insert(~\"sgr0\", bytes!(\"\\x1b[0m\").to_owned());\n+    strings.insert(~\"bold\", bytes!(\"\\x1b[1m;\").to_owned());\n+    strings.insert(~\"setaf\", bytes!(\"\\x1b[3%p1%dm\").to_owned());\n+    strings.insert(~\"setab\", bytes!(\"\\x1b[4%p1%dm\").to_owned());\n+    ~TermInfo {\n+        names: ~[~\"cygwin\"], // msys is a fork of an older cygwin version\n+        bools: HashMap::new(),\n+        numbers: HashMap::new(),\n+        strings: strings\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::*;"}]}