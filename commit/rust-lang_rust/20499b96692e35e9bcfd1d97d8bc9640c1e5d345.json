{"sha": "20499b96692e35e9bcfd1d97d8bc9640c1e5d345", "node_id": "C_kwDOAAsO6NoAKDIwNDk5Yjk2NjkyZTM1ZTliY2ZkMWQ5N2Q4YmM5NjQwYzFlNWQzNDU", "commit": {"author": {"name": "James Dietz", "email": "jamesthespeedy@gmail.com", "date": "2023-06-14T22:01:05Z"}, "committer": {"name": "James Dietz", "email": "jamesthespeedy@gmail.com", "date": "2023-06-14T22:01:05Z"}, "message": "add InlineConst check", "tree": {"sha": "b81fb927c9a26993deaec364308e27b76289bb55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b81fb927c9a26993deaec364308e27b76289bb55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20499b96692e35e9bcfd1d97d8bc9640c1e5d345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20499b96692e35e9bcfd1d97d8bc9640c1e5d345", "html_url": "https://github.com/rust-lang/rust/commit/20499b96692e35e9bcfd1d97d8bc9640c1e5d345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20499b96692e35e9bcfd1d97d8bc9640c1e5d345/comments", "author": {"login": "mj10021", "id": 5280405, "node_id": "MDQ6VXNlcjUyODA0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5280405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mj10021", "html_url": "https://github.com/mj10021", "followers_url": "https://api.github.com/users/mj10021/followers", "following_url": "https://api.github.com/users/mj10021/following{/other_user}", "gists_url": "https://api.github.com/users/mj10021/gists{/gist_id}", "starred_url": "https://api.github.com/users/mj10021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mj10021/subscriptions", "organizations_url": "https://api.github.com/users/mj10021/orgs", "repos_url": "https://api.github.com/users/mj10021/repos", "events_url": "https://api.github.com/users/mj10021/events{/privacy}", "received_events_url": "https://api.github.com/users/mj10021/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mj10021", "id": 5280405, "node_id": "MDQ6VXNlcjUyODA0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5280405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mj10021", "html_url": "https://github.com/mj10021", "followers_url": "https://api.github.com/users/mj10021/followers", "following_url": "https://api.github.com/users/mj10021/following{/other_user}", "gists_url": "https://api.github.com/users/mj10021/gists{/gist_id}", "starred_url": "https://api.github.com/users/mj10021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mj10021/subscriptions", "organizations_url": "https://api.github.com/users/mj10021/orgs", "repos_url": "https://api.github.com/users/mj10021/repos", "events_url": "https://api.github.com/users/mj10021/events{/privacy}", "received_events_url": "https://api.github.com/users/mj10021/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b475c705f36fb3b0a63994b92f2bbd2f5865b07", "html_url": "https://github.com/rust-lang/rust/commit/0b475c705f36fb3b0a63994b92f2bbd2f5865b07"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "ae32a54be3ded66876bcb9ffc507de84326fe8c1", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20499b96692e35e9bcfd1d97d8bc9640c1e5d345/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20499b96692e35e9bcfd1d97d8bc9640c1e5d345/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=20499b96692e35e9bcfd1d97d8bc9640c1e5d345", "patch": "@@ -95,7 +95,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                     // used generic parameters is a bug of evaluation, so checking for it\n                     // here does feel somewhat sensible.\n                     if !self.features().generic_const_exprs && ct.substs.has_non_region_param() {\n-                        assert!(matches!(self.def_kind(ct.def), DefKind::AnonConst));\n+                        assert!(matches!(\n+                            self.def_kind(ct.def),\n+                            DefKind::InlineConst | DefKind::AnonConst\n+                        ));\n                         let mir_body = self.mir_for_ctfe(ct.def);\n                         if mir_body.is_polymorphic {\n                             let Some(local_def_id) = ct.def.as_local() else { return };"}]}