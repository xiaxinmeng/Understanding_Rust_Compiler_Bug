{"sha": "725e9621d0ea1f07ad75d5f26193dfba72ee73b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNWU5NjIxZDBlYTFmMDdhZDc1ZDVmMjYxOTNkZmJhNzJlZTczYjI=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-06-12T06:25:10Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-06-12T06:25:10Z"}, "message": "duration_subsec: Add check for `subsec_micros`", "tree": {"sha": "4aeaaaeea6958a88fd4d243de34aa81cc69e412d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aeaaaeea6958a88fd4d243de34aa81cc69e412d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/725e9621d0ea1f07ad75d5f26193dfba72ee73b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/725e9621d0ea1f07ad75d5f26193dfba72ee73b2", "html_url": "https://github.com/rust-lang/rust/commit/725e9621d0ea1f07ad75d5f26193dfba72ee73b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/725e9621d0ea1f07ad75d5f26193dfba72ee73b2/comments", "author": null, "committer": null, "parents": [{"sha": "2d427ea7eef43bab5b9a50735dcf67df3129ba0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d427ea7eef43bab5b9a50735dcf67df3129ba0d", "html_url": "https://github.com/rust-lang/rust/commit/2d427ea7eef43bab5b9a50735dcf67df3129ba0d"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "5f34803c81379c0ab073b24bbda7e2748fe2cde3", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/725e9621d0ea1f07ad75d5f26193dfba72ee73b2/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725e9621d0ea1f07ad75d5f26193dfba72ee73b2/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=725e9621d0ea1f07ad75d5f26193dfba72ee73b2", "patch": "@@ -6,11 +6,11 @@ use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{match_type, snippet, span_lint_and_sugg, walk_ptrs_ty};\n \n-/// **What it does:** Checks for calculation of subsecond microseconds or milliseconds from\n-/// `Duration::subsec_nanos()`.\n+/// **What it does:** Checks for calculation of subsecond microseconds or milliseconds\n+/// from other `Duration` methods.\n ///\n /// **Why is this bad?** It's more concise to call `Duration::subsec_micros()` or\n-/// `Duration::subsec_millis()`.\n+/// `Duration::subsec_millis()` than to calculate them.\n ///\n /// **Known problems:** None.\n ///\n@@ -23,7 +23,7 @@ use crate::utils::{match_type, snippet, span_lint_and_sugg, walk_ptrs_ty};\n declare_clippy_lint! {\n     pub DURATION_SUBSEC,\n     complexity,\n-    \"checks for `dur.subsec_nanos() / 1_000` or `dur.subsec_nanos() / 1_000_000`\"\n+    \"checks for calculation of subsecond microseconds or milliseconds\"\n }\n \n #[derive(Copy, Clone)]\n@@ -40,16 +40,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DurationSubsec {\n         if_chain! {\n             if let ExprBinary(Spanned { node: BiDiv, .. }, ref left, ref right) = expr.node;\n             if let ExprMethodCall(ref method_path, _ , ref args) = left.node;\n-            if method_path.name == \"subsec_nanos\";\n             if match_type(cx, walk_ptrs_ty(cx.tables.expr_ty(&args[0])), &paths::DURATION);\n             if let Some((Constant::Int(divisor), _)) = constant(cx, cx.tables, right);\n             then {\n-                let suggested_fn = match divisor {\n-                    1_000 => \"subsec_micros\",\n-                    1_000_000 => \"subsec_millis\",\n+                let suggested_fn = match (method_path.name.as_str().as_ref(), divisor) {\n+                    (\"subsec_micros\", 1_000) => \"subsec_millis\",\n+                    (\"subsec_nanos\", 1_000) => \"subsec_micros\",\n+                    (\"subsec_nanos\", 1_000_000) => \"subsec_millis\",\n                     _ => return,\n                 };\n-\n                 span_lint_and_sugg(\n                     cx,\n                     DURATION_SUBSEC,"}, {"sha": "8c75c5f2fcd8e7e4b218bbf002ebbcd8414031ce", "filename": "tests/ui/duration_subsec.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/725e9621d0ea1f07ad75d5f26193dfba72ee73b2/tests%2Fui%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725e9621d0ea1f07ad75d5f26193dfba72ee73b2/tests%2Fui%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.rs?ref=725e9621d0ea1f07ad75d5f26193dfba72ee73b2", "patch": "@@ -5,14 +5,16 @@ use std::time::Duration;\n fn main() {\n     let dur = Duration::new(5, 0);\n \n+    let bad_millis_1 = dur.subsec_micros() / 1_000;\n+    let bad_millis_2 = dur.subsec_nanos() / 1_000_000;\n+    let good_millis = dur.subsec_millis();\n+    assert_eq!(bad_millis_1, good_millis);\n+    assert_eq!(bad_millis_2, good_millis);\n+\n     let bad_micros = dur.subsec_nanos() / 1_000;\n     let good_micros = dur.subsec_micros();\n     assert_eq!(bad_micros, good_micros);\n \n-    let bad_millis = dur.subsec_nanos() / 1_000_000;\n-    let good_millis = dur.subsec_millis();\n-    assert_eq!(bad_millis, good_millis);\n-\n     // Handle refs\n     let _ = (&dur).subsec_nanos() / 1_000;\n \n@@ -22,5 +24,4 @@ fn main() {\n \n     // Other literals aren't linted\n     let _ = dur.subsec_nanos() / 699;\n-\n }"}, {"sha": "a1aacec3a75ac9b475a4456efca63527c12203dc", "filename": "tests/ui/duration_subsec.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/725e9621d0ea1f07ad75d5f26193dfba72ee73b2/tests%2Fui%2Fduration_subsec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/725e9621d0ea1f07ad75d5f26193dfba72ee73b2/tests%2Fui%2Fduration_subsec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.stderr?ref=725e9621d0ea1f07ad75d5f26193dfba72ee73b2", "patch": "@@ -1,28 +1,34 @@\n-error: Calling `subsec_micros()` is more concise than this calculation\n- --> $DIR/duration_subsec.rs:8:22\n+error: Calling `subsec_millis()` is more concise than this calculation\n+ --> $DIR/duration_subsec.rs:8:24\n   |\n-8 |     let bad_micros = dur.subsec_nanos() / 1_000;\n-  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_micros()`\n+8 |     let bad_millis_1 = dur.subsec_micros() / 1_000;\n+  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n   |\n   = note: `-D duration-subsec` implied by `-D warnings`\n \n error: Calling `subsec_millis()` is more concise than this calculation\n-  --> $DIR/duration_subsec.rs:12:22\n+ --> $DIR/duration_subsec.rs:9:24\n+  |\n+9 |     let bad_millis_2 = dur.subsec_nanos() / 1_000_000;\n+  |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n+\n+error: Calling `subsec_micros()` is more concise than this calculation\n+  --> $DIR/duration_subsec.rs:14:22\n    |\n-12 |     let bad_millis = dur.subsec_nanos() / 1_000_000;\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n+14 |     let bad_micros = dur.subsec_nanos() / 1_000;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_micros()`\n \n error: Calling `subsec_micros()` is more concise than this calculation\n-  --> $DIR/duration_subsec.rs:17:13\n+  --> $DIR/duration_subsec.rs:19:13\n    |\n-17 |     let _ = (&dur).subsec_nanos() / 1_000;\n+19 |     let _ = (&dur).subsec_nanos() / 1_000;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(&dur).subsec_micros()`\n \n error: Calling `subsec_micros()` is more concise than this calculation\n-  --> $DIR/duration_subsec.rs:21:13\n+  --> $DIR/duration_subsec.rs:23:13\n    |\n-21 |     let _ = dur.subsec_nanos() / NANOS_IN_MICRO;\n+23 |     let _ = dur.subsec_nanos() / NANOS_IN_MICRO;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_micros()`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}]}