{"sha": "37ff07e1ffa0f3e59ac6c214d40ed4b44f31db3c", "node_id": "C_kwDOAAsO6NoAKDM3ZmYwN2UxZmZhMGYzZTU5YWM2YzIxNGQ0MGVkNGI0NGYzMWRiM2M", "commit": {"author": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-09-15T14:03:19Z"}, "committer": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-09-15T14:03:19Z"}, "message": "fix(generate_module): generate new impl near its ADT", "tree": {"sha": "5b157de53a5662d9dcdc59dbcddbb1aa9f749c31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b157de53a5662d9dcdc59dbcddbb1aa9f749c31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ff07e1ffa0f3e59ac6c214d40ed4b44f31db3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ff07e1ffa0f3e59ac6c214d40ed4b44f31db3c", "html_url": "https://github.com/rust-lang/rust/commit/37ff07e1ffa0f3e59ac6c214d40ed4b44f31db3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ff07e1ffa0f3e59ac6c214d40ed4b44f31db3c/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f2db3bf44cbfea1a6293de2199974421e60a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f2db3bf44cbfea1a6293de2199974421e60a27", "html_url": "https://github.com/rust-lang/rust/commit/d0f2db3bf44cbfea1a6293de2199974421e60a27"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "8b67982f9158234b91afa04bf28c691b543b2d10", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/37ff07e1ffa0f3e59ac6c214d40ed4b44f31db3c/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ff07e1ffa0f3e59ac6c214d40ed4b44f31db3c/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=37ff07e1ffa0f3e59ac6c214d40ed4b44f31db3c", "patch": "@@ -1,4 +1,4 @@\n-use hir::{HasSource, HirDisplay, Module, Semantics, TypeInfo};\n+use hir::{Adt, HasSource, HirDisplay, Module, Semantics, TypeInfo};\n use ide_db::{\n     base_db::FileId,\n     defs::{Definition, NameRefClass},\n@@ -145,7 +145,8 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n         return None;\n     }\n     let (impl_, file) = get_adt_source(ctx, &adt, fn_name.text().as_str())?;\n-    let (target, insert_offset) = get_method_target(ctx, &target_module, &impl_)?;\n+    let (target, insert_offset) = get_method_target(ctx, &impl_, &adt)?;\n+\n     let function_builder =\n         FunctionBuilder::from_method_call(ctx, &call, &fn_name, target_module, target)?;\n     let text_range = call.syntax().text_range();\n@@ -418,14 +419,13 @@ fn get_fn_target(\n \n fn get_method_target(\n     ctx: &AssistContext<'_>,\n-    target_module: &Module,\n     impl_: &Option<ast::Impl>,\n+    adt: &Adt,\n ) -> Option<(GeneratedFunctionTarget, TextSize)> {\n     let target = match impl_ {\n         Some(impl_) => next_space_for_fn_in_impl(impl_)?,\n         None => {\n-            next_space_for_fn_in_module(ctx.sema.db, &target_module.definition_source(ctx.sema.db))?\n-                .1\n+            GeneratedFunctionTarget::BehindItem(adt.source(ctx.sema.db)?.syntax().value.clone())\n         }\n     };\n     Some((target.clone(), get_insert_offset(&target)))\n@@ -444,7 +444,7 @@ fn assoc_fn_target_info(\n         return None;\n     }\n     let (impl_, file) = get_adt_source(ctx, &adt, fn_name)?;\n-    let (target, insert_offset) = get_method_target(ctx, &module, &impl_)?;\n+    let (target, insert_offset) = get_method_target(ctx, &impl_, &adt)?;\n     let adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n     Some(TargetInfo::new(target_module, adt_name, target, file, insert_offset))\n }\n@@ -1475,12 +1475,12 @@ fn foo() {S.bar$0();}\n \",\n             r\"\n struct S;\n-fn foo() {S.bar();}\n impl S {\n     fn bar(&self) ${0:-> _} {\n         todo!()\n     }\n }\n+fn foo() {S.bar();}\n \",\n         )\n     }\n@@ -1547,16 +1547,16 @@ mod s {\n \",\n             r\"\n struct S;\n-mod s {\n-    fn foo() {\n-        super::S.bar();\n-    }\n-}\n impl S {\n     fn bar(&self) ${0:-> _} {\n         todo!()\n     }\n }\n+mod s {\n+    fn foo() {\n+        super::S.bar();\n+    }\n+}\n \n \",\n         )\n@@ -1572,12 +1572,12 @@ fn foo() {$0S.bar();}\n \",\n             r\"\n struct S;\n-fn foo() {S.bar();}\n impl S {\n     fn bar(&self) ${0:-> _} {\n         todo!()\n     }\n }\n+fn foo() {S.bar();}\n \",\n         )\n     }\n@@ -1592,12 +1592,12 @@ fn foo() {S::bar$0();}\n \",\n             r\"\n struct S;\n-fn foo() {S::bar();}\n impl S {\n     fn bar() ${0:-> _} {\n         todo!()\n     }\n }\n+fn foo() {S::bar();}\n \",\n         )\n     }\n@@ -1659,12 +1659,12 @@ fn foo() {$0S::bar();}\n \",\n             r\"\n struct S;\n-fn foo() {S::bar();}\n impl S {\n     fn bar() ${0:-> _} {\n         todo!()\n     }\n }\n+fn foo() {S::bar();}\n \",\n         )\n     }\n@@ -1834,14 +1834,14 @@ fn main() {\n \",\n             r\"\n enum Foo {}\n-fn main() {\n-    Foo::new();\n-}\n impl Foo {\n     fn new() ${0:-> _} {\n         todo!()\n     }\n }\n+fn main() {\n+    Foo::new();\n+}\n \",\n         )\n     }"}]}