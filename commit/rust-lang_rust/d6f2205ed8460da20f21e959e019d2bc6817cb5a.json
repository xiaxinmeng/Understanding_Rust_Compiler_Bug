{"sha": "d6f2205ed8460da20f21e959e019d2bc6817cb5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZjIyMDVlZDg0NjBkYTIwZjIxZTk1OWUwMTlkMmJjNjgxN2NiNWE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-09-17T21:10:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-17T21:10:50Z"}, "message": "Rollup merge of #64436 - llogiq:transmute-docs, r=RalfJung\n\nimprove Vec example soundness in mem::transmute docs\n\nThe previous version of the `Vec` example had a case of questionable soundness, because at one point `v_orig` was aliased.\n\nr? @RalfJung", "tree": {"sha": "e3db80825b82ee7a17d8fd1ac5e35684392ff133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3db80825b82ee7a17d8fd1ac5e35684392ff133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6f2205ed8460da20f21e959e019d2bc6817cb5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdgUvaCRBK7hj4Ov3rIwAAdHIIAIQ2ZLAQtXA8NbNmww5VZ/ZN\nMzJ3ggSinEB3kSPC6JflHqyxoQbNVXooLvDol7ZOlsleB4lhp90CSU+rhUUp4Iu2\nkzHzUKF7EpA3OHGEt5m+OoLLlflgR/BOqjbgaoPypqzPQ5uij1jsXMjYy59ywZu5\nsLVpURdvjGVtjnZWL5c+Kb8vo1p6W3YVG7SSKjXaMFR4mqzidB2ePa4LmFTypzSm\nKiluEYfjEkGJaP9joODrTkp3VpK44ICzuxNhvijAAF2pYUmZQ/0N2/VRMaGTUKIB\nsIXL4ZPsFMF+Hw/ysIbRnudYpEYz93Gqwn5BKYSMCMPD1u55YCQMH17tQFZpx9M=\n=mq9+\n-----END PGP SIGNATURE-----\n", "payload": "tree e3db80825b82ee7a17d8fd1ac5e35684392ff133\nparent ffee7bbf9a3ae1cff2bdf3cb17d3f5d8b01951c0\nparent ab6e108644474ece91711e889cff7d36a0adf7f0\nauthor Tyler Mandry <tmandry@gmail.com> 1568754650 -0700\ncommitter GitHub <noreply@github.com> 1568754650 -0700\n\nRollup merge of #64436 - llogiq:transmute-docs, r=RalfJung\n\nimprove Vec example soundness in mem::transmute docs\n\nThe previous version of the `Vec` example had a case of questionable soundness, because at one point `v_orig` was aliased.\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f2205ed8460da20f21e959e019d2bc6817cb5a", "html_url": "https://github.com/rust-lang/rust/commit/d6f2205ed8460da20f21e959e019d2bc6817cb5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6f2205ed8460da20f21e959e019d2bc6817cb5a/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffee7bbf9a3ae1cff2bdf3cb17d3f5d8b01951c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffee7bbf9a3ae1cff2bdf3cb17d3f5d8b01951c0", "html_url": "https://github.com/rust-lang/rust/commit/ffee7bbf9a3ae1cff2bdf3cb17d3f5d8b01951c0"}, {"sha": "ab6e108644474ece91711e889cff7d36a0adf7f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab6e108644474ece91711e889cff7d36a0adf7f0", "html_url": "https://github.com/rust-lang/rust/commit/ab6e108644474ece91711e889cff7d36a0adf7f0"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "ecff40a75978dbca8587d61c8f147781afb1dc67", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d6f2205ed8460da20f21e959e019d2bc6817cb5a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f2205ed8460da20f21e959e019d2bc6817cb5a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=d6f2205ed8460da20f21e959e019d2bc6817cb5a", "patch": "@@ -845,21 +845,26 @@ extern \"rust-intrinsic\" {\n     ///\n     /// ```\n     /// let store = [0, 1, 2, 3];\n-    /// let mut v_orig = store.iter().collect::<Vec<&i32>>();\n+    /// let v_orig = store.iter().collect::<Vec<&i32>>();\n+    ///\n+    /// // clone the vector as we will reuse them later\n+    /// let v_clone = v_orig.clone();\n     ///\n     /// // Using transmute: this is Undefined Behavior, and a bad idea.\n     /// // However, it is no-copy.\n     /// let v_transmuted = unsafe {\n-    ///     std::mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(\n-    ///         v_orig.clone())\n+    ///     std::mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(v_clone)\n     /// };\n     ///\n+    /// let v_clone = v_orig.clone();\n+    ///\n     /// // This is the suggested, safe way.\n     /// // It does copy the entire vector, though, into a new array.\n-    /// let v_collected = v_orig.clone()\n-    ///                         .into_iter()\n-    ///                         .map(|r| Some(r))\n-    ///                         .collect::<Vec<Option<&i32>>>();\n+    /// let v_collected = v_clone.into_iter()\n+    ///                          .map(Some)\n+    ///                          .collect::<Vec<Option<&i32>>>();\n+    ///\n+    /// let v_clone = v_orig.clone();\n     ///\n     /// // The no-copy, unsafe way, still using transmute, but not UB.\n     /// // This is equivalent to the original, but safer, and reuses the\n@@ -869,11 +874,12 @@ extern \"rust-intrinsic\" {\n     /// // the original inner type (`&i32`) to the converted inner type\n     /// // (`Option<&i32>`), so read the nomicon pages linked above.\n     /// let v_from_raw = unsafe {\n-    ///     Vec::from_raw_parts(v_orig.as_mut_ptr() as *mut Option<&i32>,\n-    ///                         v_orig.len(),\n-    ///                         v_orig.capacity())\n+    ///     // Ensure the original vector is not dropped.\n+    ///     let mut v_clone = std::mem::ManuallyDrop::new(v_clone);\n+    ///     Vec::from_raw_parts(v_clone.as_mut_ptr() as *mut Option<&i32>,\n+    ///                         v_clone.len(),\n+    ///                         v_clone.capacity())\n     /// };\n-    /// std::mem::forget(v_orig);\n     /// ```\n     ///\n     /// Implementing `split_at_mut`:"}]}