{"sha": "5bdbf8ef464c5825a633fba30d73515ea026e030", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZGJmOGVmNDY0YzU4MjVhNjMzZmJhMzBkNzM1MTVlYTAyNmUwMzA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-15T19:46:44Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-15T19:48:08Z"}, "message": "Rollup merge of #32946 - eddyb:issue-32783, r=dotdash\n\ntrans: always register an item's symbol, even if duplicated.\n\nFixes #32783 which was introduced by not always registering item symbols in #32742.", "tree": {"sha": "3a22d5b7478e8e5bdb0ec42a83bbe0be57fce959", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a22d5b7478e8e5bdb0ec42a83bbe0be57fce959"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bdbf8ef464c5825a633fba30d73515ea026e030", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXEUV4AAoJEDu/TT4u95+Y6mIQAL5XSm1j4snCP/MDs8VEOA9r\nWEoOjFhIbxRzkvIz8ZH8yW7nmTk10qlDo20Sp56bqfbiRxa/LAYZd1qixrUIzdHN\n/STxbUispuhcg1V4JXWMeQwQDuMyDiqpM1I5W+cOeblw+kngwOVggiYlr87JNBJ7\nu2d2ilB1W4+CFYSzrAvYb+bVPbE9GIfXQXS9YjJBliFzFMxEpsdk3uAWvPVsGwfi\nAGc7RVBHKehk104N61iliIjA3j8CDTeQ1vnVUdGRiHwrfVvlu1TQvYO50SNsmurN\njCIN+Dw84Sn3BckBPKtsZO/Li53xlxDGeZ18od/NStgwi6zdl0C51jXSsmp5Iubq\nThCx0ir/DdeK8rRdQMD2EFE8zQvzGmB5/TMMlWsE3NylvHPBGNic6f1HAoco2MsA\nkbGWUChs7bD94nInENAcj9Amfn2U3xCuH+7tPtjA4xocobyrA0xCP6Tq+FW+awWa\nfSIKtRbaCXBDY+HwqLMyzq/8rex9ottGB/vpH4dJgmKfhRgJxogSupEe6Y7eZAC2\nha8a2nYalv/WHBSs6VSekUCnjoLfSUwAQiXeoelFAS5WcyqgE4gQfud/1BnxHvWg\np6Ke1WFtxOtjil5mcTXSunP6/zDHFAGNLcII9AfEL2bzrbpdqL9QZYIGW8Lh6ekR\n2Cttq82RUglYW/M0N9Ob\n=Ag6Q\n-----END PGP SIGNATURE-----", "payload": "tree 3a22d5b7478e8e5bdb0ec42a83bbe0be57fce959\nparent 90c8d81ee4da99c59aba79e24aca257e81dbbbf1\nparent cd85120ef9be436b8cd32c7208a913cc41c66e13\nauthor Manish Goregaokar <manishsmail@gmail.com> 1460749604 +0530\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1460749688 +0530\n\nRollup merge of #32946 - eddyb:issue-32783, r=dotdash\n\ntrans: always register an item's symbol, even if duplicated.\n\nFixes #32783 which was introduced by not always registering item symbols in #32742.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bdbf8ef464c5825a633fba30d73515ea026e030", "html_url": "https://github.com/rust-lang/rust/commit/5bdbf8ef464c5825a633fba30d73515ea026e030", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bdbf8ef464c5825a633fba30d73515ea026e030/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90c8d81ee4da99c59aba79e24aca257e81dbbbf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c8d81ee4da99c59aba79e24aca257e81dbbbf1", "html_url": "https://github.com/rust-lang/rust/commit/90c8d81ee4da99c59aba79e24aca257e81dbbbf1"}, {"sha": "cd85120ef9be436b8cd32c7208a913cc41c66e13", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd85120ef9be436b8cd32c7208a913cc41c66e13", "html_url": "https://github.com/rust-lang/rust/commit/cd85120ef9be436b8cd32c7208a913cc41c66e13"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "8c22ddbb462c025c5ce1dfa5c8fbec40cbe2094c", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bdbf8ef464c5825a633fba30d73515ea026e030/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdbf8ef464c5825a633fba30d73515ea026e030/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=5bdbf8ef464c5825a633fba30d73515ea026e030", "patch": "@@ -582,15 +582,19 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         debug!(\"get_fn: not casting pointer!\");\n \n         attributes::from_fn_attrs(ccx, attrs, llfn);\n-        if let Some(id) = local_item {\n+        if local_item.is_some() {\n             // FIXME(eddyb) Doubt all extern fn should allow unwinding.\n             attributes::unwind(llfn, true);\n-            ccx.item_symbols().borrow_mut().insert(id, sym);\n         }\n \n         llfn\n     };\n \n+    // Always insert into item_symbols, in case this item is exported.\n+    if let Some(id) = local_item {\n+        ccx.item_symbols().borrow_mut().insert(id, sym);\n+    }\n+\n     ccx.instances().borrow_mut().insert(instance, llfn);\n \n     immediate_rvalue(llfn, fn_ptr_ty)"}, {"sha": "460d0a0088ce2918813c5374d8558d63a99409fd", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5bdbf8ef464c5825a633fba30d73515ea026e030/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdbf8ef464c5825a633fba30d73515ea026e030/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=5bdbf8ef464c5825a633fba30d73515ea026e030", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![crate_name=\"foreign_lib\"]\n+\n #![feature(libc)]\n \n pub mod rustrt {\n@@ -19,3 +20,29 @@ pub mod rustrt {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }\n }\n+\n+pub mod rustrt2 {\n+    extern crate libc;\n+\n+    extern {\n+        pub fn rust_get_test_int() -> libc::intptr_t;\n+    }\n+}\n+\n+pub mod rustrt3 {\n+    // Different type, but same ABI (on all supported platforms).\n+    // Ensures that we don't ICE or trigger LLVM asserts when\n+    // importing the same symbol under different types.\n+    // See https://github.com/rust-lang/rust/issues/32740.\n+    extern {\n+        pub fn rust_get_test_int() -> *const u8;\n+    }\n+}\n+\n+pub fn local_uses() {\n+    unsafe {\n+        let x = rustrt::rust_get_test_int();\n+        assert_eq!(x, rustrt2::rust_get_test_int());\n+        assert_eq!(x as *const _, rustrt3::rust_get_test_int());\n+    }\n+}"}, {"sha": "fb162d8793356a35f625a49a5091b105ab56f312", "filename": "src/test/run-pass/foreign-dupe.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5bdbf8ef464c5825a633fba30d73515ea026e030/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bdbf8ef464c5825a633fba30d73515ea026e030/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-dupe.rs?ref=5bdbf8ef464c5825a633fba30d73515ea026e030", "patch": "@@ -8,41 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// calling pin_thread and that's having weird side-effects.\n+// aux-build:foreign_lib.rs\n \n-#![feature(libc)]\n+// Check that we can still call duplicated extern (imported) functions\n+// which were declared in another crate. See issues #32740 and #32783.\n \n-mod rustrt1 {\n-    extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-mod rustrt2 {\n-    extern crate libc;\n-\n-    extern {\n-        pub fn rust_get_test_int() -> libc::intptr_t;\n-    }\n-}\n-\n-mod rustrt3 {\n-    // Different type, but same ABI (on all supported platforms).\n-    // Ensures that we don't ICE or trigger LLVM asserts when\n-    // importing the same symbol under different types.\n-    // See https://github.com/rust-lang/rust/issues/32740.\n-    extern {\n-        pub fn rust_get_test_int() -> *const u8;\n-    }\n-}\n+extern crate foreign_lib;\n \n pub fn main() {\n     unsafe {\n-        let x = rustrt1::rust_get_test_int();\n-        assert_eq!(x, rustrt2::rust_get_test_int());\n-        assert_eq!(x as *const _, rustrt3::rust_get_test_int());\n+        let x = foreign_lib::rustrt::rust_get_test_int();\n+        assert_eq!(x, foreign_lib::rustrt2::rust_get_test_int());\n+        assert_eq!(x as *const _, foreign_lib::rustrt3::rust_get_test_int());\n     }\n }"}]}