{"sha": "49d42325d0888a27ed50bf918d378fbf7f41a348", "node_id": "C_kwDOAAsO6NoAKDQ5ZDQyMzI1ZDA4ODhhMjdlZDUwYmY5MThkMzc4ZmJmN2Y0MWEzNDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-21T13:26:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-21T13:26:31Z"}, "message": "Auto merge of #90844 - camelid:cleanup-vis, r=jyn514\n\nrustdoc: Finish transition to computed visibility\n\nThis finishes the transition to using computed visibility in rustdoc.", "tree": {"sha": "adc62b74c8ddf8868408effb2eb9121d10a24703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adc62b74c8ddf8868408effb2eb9121d10a24703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49d42325d0888a27ed50bf918d378fbf7f41a348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49d42325d0888a27ed50bf918d378fbf7f41a348", "html_url": "https://github.com/rust-lang/rust/commit/49d42325d0888a27ed50bf918d378fbf7f41a348", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49d42325d0888a27ed50bf918d378fbf7f41a348/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bfde2f1f4fc9409ecb63dfe1370df66171cf861", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bfde2f1f4fc9409ecb63dfe1370df66171cf861", "html_url": "https://github.com/rust-lang/rust/commit/3bfde2f1f4fc9409ecb63dfe1370df66171cf861"}, {"sha": "64d69977a034ca64ca7ec3eb950645e5638f4577", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d69977a034ca64ca7ec3eb950645e5638f4577", "html_url": "https://github.com/rust-lang/rust/commit/64d69977a034ca64ca7ec3eb950645e5638f4577"}], "stats": {"total": 115, "additions": 41, "deletions": 74}, "files": [{"sha": "d4bf93bb40931178d5236796ed61fdefefa3d316", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/49d42325d0888a27ed50bf918d378fbf7f41a348/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d42325d0888a27ed50bf918d378fbf7f41a348/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=49d42325d0888a27ed50bf918d378fbf7f41a348", "patch": "@@ -593,14 +593,9 @@ fn build_macro(\n     match CStore::from_tcx(cx.tcx).load_macro_untracked(def_id, cx.sess()) {\n         LoadedMacro::MacroDef(item_def, _) => {\n             if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n+                let vis = cx.tcx.visibility(import_def_id.unwrap_or(def_id)).clean(cx);\n                 clean::MacroItem(clean::Macro {\n-                    source: utils::display_macro_source(\n-                        cx,\n-                        name,\n-                        def,\n-                        def_id,\n-                        cx.tcx.visibility(import_def_id.unwrap_or(def_id)),\n-                    ),\n+                    source: utils::display_macro_source(cx, name, def, def_id, vis),\n                 })\n             } else {\n                 unreachable!()"}, {"sha": "cd99d5bbe79ee35db7733e6b2262d4f521399380", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 38, "deletions": 64, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/49d42325d0888a27ed50bf918d378fbf7f41a348/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d42325d0888a27ed50bf918d378fbf7f41a348/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=49d42325d0888a27ed50bf918d378fbf7f41a348", "patch": "@@ -1565,45 +1565,37 @@ impl<'tcx> Clean<Constant> for ty::Const<'tcx> {\n \n impl Clean<Item> for hir::FieldDef<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n-        let what_rustc_thinks = Item::from_hir_id_and_parts(\n-            self.hir_id,\n-            Some(self.ident.name),\n-            StructFieldItem(self.ty.clean(cx)),\n-            cx,\n-        );\n-        // Don't show `pub` for fields on enum variants; they are always public\n-        Item { visibility: self.vis.clean(cx), ..what_rustc_thinks }\n+        let def_id = cx.tcx.hir().local_def_id(self.hir_id).to_def_id();\n+        clean_field(def_id, self.ident.name, self.ty.clean(cx), cx)\n     }\n }\n \n impl Clean<Item> for ty::FieldDef {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n-        let what_rustc_thinks = Item::from_def_id_and_parts(\n-            self.did,\n-            Some(self.ident.name),\n-            StructFieldItem(cx.tcx.type_of(self.did).clean(cx)),\n-            cx,\n-        );\n-        // Don't show `pub` for fields on enum variants; they are always public\n-        Item { visibility: self.vis.clean(cx), ..what_rustc_thinks }\n+        clean_field(self.did, self.ident.name, cx.tcx.type_of(self.did).clean(cx), cx)\n     }\n }\n \n-impl Clean<Visibility> for hir::Visibility<'_> {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Visibility {\n-        match self.node {\n-            hir::VisibilityKind::Public => Visibility::Public,\n-            hir::VisibilityKind::Inherited => Visibility::Inherited,\n-            hir::VisibilityKind::Crate(_) => {\n-                let krate = DefId::local(CRATE_DEF_INDEX);\n-                Visibility::Restricted(krate)\n-            }\n-            hir::VisibilityKind::Restricted { ref path, .. } => {\n-                let path = path.clean(cx);\n-                let did = register_res(cx, path.res);\n-                Visibility::Restricted(did)\n-            }\n-        }\n+fn clean_field(def_id: DefId, name: Symbol, ty: Type, cx: &mut DocContext<'_>) -> Item {\n+    let what_rustc_thinks =\n+        Item::from_def_id_and_parts(def_id, Some(name), StructFieldItem(ty), cx);\n+    if is_field_vis_inherited(cx.tcx, def_id) {\n+        // Variant fields inherit their enum's visibility.\n+        Item { visibility: Visibility::Inherited, ..what_rustc_thinks }\n+    } else {\n+        what_rustc_thinks\n+    }\n+}\n+\n+fn is_field_vis_inherited(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    let parent = tcx\n+        .parent(def_id)\n+        .expect(\"is_field_vis_inherited can only be called on struct or variant fields\");\n+    match tcx.def_kind(parent) {\n+        DefKind::Struct | DefKind::Union => false,\n+        DefKind::Variant => true,\n+        // FIXME: what about DefKind::Ctor?\n+        parent_kind => panic!(\"unexpected parent kind: {:?}\", parent_kind),\n     }\n }\n \n@@ -1614,8 +1606,7 @@ impl Clean<Visibility> for ty::Visibility {\n             // NOTE: this is not quite right: `ty` uses `Invisible` to mean 'private',\n             // while rustdoc really does mean inherited. That means that for enum variants, such as\n             // `pub enum E { V }`, `V` will be marked as `Public` by `ty`, but as `Inherited` by rustdoc.\n-            // This is the main reason `impl Clean for hir::Visibility` still exists; various parts of clean\n-            // override `tcx.visibility` explicitly to make sure this distinction is captured.\n+            // Various parts of clean override `tcx.visibility` explicitly to make sure this distinction is captured.\n             ty::Visibility::Invisible => Visibility::Inherited,\n             ty::Visibility::Restricted(module) => Visibility::Restricted(module),\n         }\n@@ -1642,39 +1633,18 @@ impl Clean<Item> for ty::VariantDef {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let kind = match self.ctor_kind {\n             CtorKind::Const => Variant::CLike,\n-            CtorKind::Fn => Variant::Tuple(\n-                self.fields\n-                    .iter()\n-                    .map(|field| {\n-                        let name = Some(field.ident.name);\n-                        let kind = StructFieldItem(cx.tcx.type_of(field.did).clean(cx));\n-                        let what_rustc_thinks =\n-                            Item::from_def_id_and_parts(field.did, name, kind, cx);\n-                        // don't show `pub` for fields, which are always public\n-                        Item { visibility: Visibility::Inherited, ..what_rustc_thinks }\n-                    })\n-                    .collect(),\n-            ),\n+            CtorKind::Fn => {\n+                Variant::Tuple(self.fields.iter().map(|field| field.clean(cx)).collect())\n+            }\n             CtorKind::Fictive => Variant::Struct(VariantStruct {\n                 struct_type: CtorKind::Fictive,\n                 fields_stripped: false,\n-                fields: self\n-                    .fields\n-                    .iter()\n-                    .map(|field| {\n-                        let name = Some(field.ident.name);\n-                        let kind = StructFieldItem(cx.tcx.type_of(field.did).clean(cx));\n-                        let what_rustc_thinks =\n-                            Item::from_def_id_and_parts(field.did, name, kind, cx);\n-                        // don't show `pub` for fields, which are always public\n-                        Item { visibility: Visibility::Inherited, ..what_rustc_thinks }\n-                    })\n-                    .collect(),\n+                fields: self.fields.iter().map(|field| field.clean(cx)).collect(),\n             }),\n         };\n         let what_rustc_thinks =\n             Item::from_def_id_and_parts(self.def_id, Some(self.ident.name), VariantItem(kind), cx);\n-        // don't show `pub` for fields, which are always public\n+        // don't show `pub` for variants, which always inherit visibility\n         Item { visibility: Inherited, ..what_rustc_thinks }\n     }\n }\n@@ -1799,9 +1769,12 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                 ItemKind::Fn(ref sig, ref generics, body_id) => {\n                     clean_fn_or_proc_macro(item, sig, generics, body_id, &mut name, cx)\n                 }\n-                ItemKind::Macro(ref macro_def) => MacroItem(Macro {\n-                    source: display_macro_source(cx, name, macro_def, def_id, item.vis),\n-                }),\n+                ItemKind::Macro(ref macro_def) => {\n+                    let ty_vis = cx.tcx.visibility(def_id).clean(cx);\n+                    MacroItem(Macro {\n+                        source: display_macro_source(cx, name, macro_def, def_id, ty_vis),\n+                    })\n+                }\n                 ItemKind::Trait(is_auto, unsafety, ref generics, bounds, item_ids) => {\n                     let items = item_ids\n                         .iter()\n@@ -1888,7 +1861,8 @@ fn clean_extern_crate(\n     // this is the ID of the crate itself\n     let crate_def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n     let attrs = cx.tcx.hir().attrs(krate.hir_id());\n-    let please_inline = cx.tcx.visibility(krate.def_id).is_public()\n+    let ty_vis = cx.tcx.visibility(krate.def_id);\n+    let please_inline = ty_vis.is_public()\n         && attrs.iter().any(|a| {\n             a.has_name(sym::doc)\n                 && match a.meta_item_list() {\n@@ -1920,7 +1894,7 @@ fn clean_extern_crate(\n         name: Some(name),\n         attrs: box attrs.clean(cx),\n         def_id: crate_def_id.into(),\n-        visibility: krate.vis.clean(cx),\n+        visibility: ty_vis.clean(cx),\n         kind: box ExternCrateItem { src: orig_name },\n         cfg: attrs.cfg(cx.tcx, &cx.cache.hidden_cfg),\n     }]"}, {"sha": "110322112364c15f0668d66a80cf90296de91014", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49d42325d0888a27ed50bf918d378fbf7f41a348/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d42325d0888a27ed50bf918d378fbf7f41a348/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=49d42325d0888a27ed50bf918d378fbf7f41a348", "patch": "@@ -520,7 +520,7 @@ pub(super) fn display_macro_source(\n     name: Symbol,\n     def: &ast::MacroDef,\n     def_id: DefId,\n-    vis: impl Clean<Visibility>,\n+    vis: Visibility,\n ) -> String {\n     let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n     // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n@@ -529,8 +529,6 @@ pub(super) fn display_macro_source(\n     if def.macro_rules {\n         format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(matchers, \";\"))\n     } else {\n-        let vis = vis.clean(cx);\n-\n         if matchers.len() <= 1 {\n             format!(\n                 \"{}macro {}{} {{\\n    ...\\n}}\","}]}