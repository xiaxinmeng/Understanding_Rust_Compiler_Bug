{"sha": "33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "node_id": "C_kwDOAAsO6NoAKDMzYTU5NDUwNjllMmM3YmQzYmE4YTBkZDY1Yjc0ZWJkZDIzNGFkN2M", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-11-20T19:45:27Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-02T16:46:08Z"}, "message": "Make `LintExpectationId` stable between compilation sessions (RFC-2383)", "tree": {"sha": "148bd4bf7d42747ed3a2542ca446c429938c4a6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148bd4bf7d42747ed3a2542ca446c429938c4a6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmIfn1AACgkQ/Ny/Ka9k\n1gEnGA/+LZ3kMna3ZYPfHgvT+hEOjXbIv6lXMlJF3PxfzV+zuvV8rcpbfwdkNmJr\niDF3ZF6wKj99Bs7wo/1brUWEYAyl0j476WZzt8Rb6Z3hnVcwHZrlg5dAuyBkZ42d\nXsUZSmh0o4VBd1xAQAsblXAy+7TLRqKDwflMWirWNOMJaQDkAwX/EuZNCEVrUS5x\nuLKh0SYjnKdkAkmIINRiwgFylZiGMdzstzwxmUT68fj19dirJ+5KvZZhXeT6ghxl\n7+/VNh1LdGq8WIigcDKs0hOH56lHPuyOOkVF5qV48tYZRfxjOBVnex4nxbx1c/hc\ncfhNc6n99OQ5E7N3p7pbxIWS4gci8duAOFtg+LhcduVQpLzjgxZjxNOdWcS84nsm\nsl58JdIu3Ckt1eGd0hs3jajcaPFZ2YqkGnELNlosyt6VCZBXy9YedmmJFvEmbkYe\n7uviFxOnSI9PMojV2pcUy/Tq8K2W2rcwMVjHNvMqVHllvNgyu/VEw2rpc/N7fufJ\n/pOCIS3TaMxLP9+CR+EFGoe7PNQj+jjH8ui/9prTxz26/qNpQGjT1LOc2wuRBnKJ\nS0asee7qZc9+mmVf+ScRKC4KCDXnLtMNxtbj5zNlTI6GZ6igNLNf5qN2Ek6QoMSg\nQUDnaNjYQNbTCiOk1Ycw5utJ9UFrsGoVV+mw+IbsNzPCUBsycow=\n=HP//\n-----END PGP SIGNATURE-----", "payload": "tree 148bd4bf7d42747ed3a2542ca446c429938c4a6c\nparent 44cb8fa482abaa567119ceab125498cfeef1171b\nauthor xFrednet <xFrednet@gmail.com> 1637437527 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1646239568 +0100\n\nMake `LintExpectationId` stable between compilation sessions (RFC-2383)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "html_url": "https://github.com/rust-lang/rust/commit/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44cb8fa482abaa567119ceab125498cfeef1171b", "url": "https://api.github.com/repos/rust-lang/rust/commits/44cb8fa482abaa567119ceab125498cfeef1171b", "html_url": "https://github.com/rust-lang/rust/commit/44cb8fa482abaa567119ceab125498cfeef1171b"}], "stats": {"total": 210, "additions": 171, "deletions": 39}, "files": [{"sha": "8ca6f26e326d10b06ca6a6cb19379860fa91aa53", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "patch": "@@ -3882,7 +3882,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n- \"rustc_index\",\n+ \"rustc_hir\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_span\","}, {"sha": "0fd057f434b33b92948a3288450d4b32311fa5ee", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "patch": "@@ -25,7 +25,7 @@ use Level::*;\n \n use emitter::{is_case_difference, Emitter, EmitterWriter};\n use registry::Registry;\n-use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n@@ -452,7 +452,14 @@ struct HandlerInner {\n \n     future_breakage_diagnostics: Vec<Diagnostic>,\n \n-    /// Lint [`Diagnostic`]s can be expected as described in [RFC-2383]. An\n+    /// Expected [`Diagnostic`]s store a [`LintExpectationId`] as part of\n+    /// the lint level. [`LintExpectationId`]s created early during the compilation\n+    /// (before `HirId`s have been defined) are not stable and can therefore not be\n+    /// stored on disk. This buffer stores these diagnostics until the ID has been\n+    /// replaced by a stable [`LintExpectationId`]. The [`Diagnostic`]s are the\n+    /// submitted for storage and added to the list of fulfilled expectations.\n+    unstable_expect_diagnostics: Vec<Diagnostic>,\n+\n     /// expected diagnostic will have the level `Expect` which additionally\n     /// carries the [`LintExpectationId`] of the expectation that can be\n     /// marked as fulfilled. This is a collection of all [`LintExpectationId`]s\n@@ -580,6 +587,7 @@ impl Handler {\n                 emitted_diagnostics: Default::default(),\n                 stashed_diagnostics: Default::default(),\n                 future_breakage_diagnostics: Vec::new(),\n+                unstable_expect_diagnostics: Vec::new(),\n                 fulfilled_expectations: Default::default(),\n             }),\n         }\n@@ -923,6 +931,28 @@ impl Handler {\n         self.inner.borrow_mut().emit_unused_externs(lint_level, unused_externs)\n     }\n \n+    pub fn update_unstable_expectation_id(\n+        &self,\n+        unstable_to_stable: &FxHashMap<LintExpectationId, LintExpectationId>,\n+    ) {\n+        let diags = std::mem::take(&mut self.inner.borrow_mut().unstable_expect_diagnostics);\n+        if diags.is_empty() {\n+            return;\n+        }\n+\n+        let mut inner = self.inner.borrow_mut();\n+        for mut diag in diags.into_iter() {\n+            if let Some(unstable_id) = diag.level.get_expectation_id() {\n+                if let Some(stable_id) = unstable_to_stable.get(&unstable_id) {\n+                    diag.level = Level::Expect(*stable_id);\n+                    inner.fulfilled_expectations.insert(*stable_id);\n+                }\n+            }\n+\n+            (*TRACK_DIAGNOSTICS)(&diag);\n+        }\n+    }\n+\n     /// This methods steals all [`LintExpectationId`]s that are stored inside\n     /// [`HandlerInner`] and indicate that the linked expectation has been fulfilled.\n     pub fn steal_fulfilled_expectation_ids(&self) -> FxHashSet<LintExpectationId> {\n@@ -973,6 +1003,15 @@ impl HandlerInner {\n             return;\n         }\n \n+        // The `LintExpectationId` can be stable or unstable depending on when it was created.\n+        // Diagnostics created before the definition of `HirId`s are unstable and can not yet\n+        // be stored. Instead, they are buffered until the `LintExpectationId` is replaced by\n+        // a stable one by the `LintLevelsBuilder`.\n+        if let Level::Expect(LintExpectationId::Unstable(_)) = diagnostic.level {\n+            self.unstable_expect_diagnostics.push(diagnostic.clone());\n+            return;\n+        }\n+\n         (*TRACK_DIAGNOSTICS)(diagnostic);\n \n         if let Level::Expect(expectation_id) = diagnostic.level {\n@@ -1322,6 +1361,13 @@ impl Level {\n     pub fn is_failure_note(&self) -> bool {\n         matches!(*self, FailureNote)\n     }\n+\n+    pub fn get_expectation_id(&self) -> Option<LintExpectationId> {\n+        match self {\n+            Level::Expect(id) => Some(*id),\n+            _ => None,\n+        }\n+    }\n }\n \n // FIXME(eddyb) this doesn't belong here AFAICT, should be moved to callsite."}, {"sha": "e9b7620bf1d7f50744eb66a3c026874629519887", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "patch": "@@ -59,7 +59,8 @@ impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n         F: FnOnce(&mut Self),\n     {\n         let is_crate_node = id == ast::CRATE_NODE_ID;\n-        let push = self.context.builder.push(attrs, is_crate_node);\n+        let push = self.context.builder.push(attrs, is_crate_node, None);\n+\n         self.check_id(id);\n         self.enter_attrs(attrs);\n         f(self);"}, {"sha": "49664322a98bf3125a61f68d3a79b19c72ab8944", "filename": "compiler/rustc_lint/src/expect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fexpect.rs?ref=33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "patch": "@@ -25,7 +25,7 @@ pub fn check_expectations(tcx: TyCtxt<'_>) {\n }\n \n fn emit_unfulfilled_expectation_lint(tcx: TyCtxt<'_>, expectation: &LintExpectation) {\n-    // FIXME  The current implementation doesn't cover cases where the\n+    // FIXME: The current implementation doesn't cover cases where the\n     // `unfulfilled_lint_expectations` is actually expected by another lint\n     // expectation. This can be added here as we have the lint level of this\n     // expectation, and we can also mark the lint expectation it would fulfill"}, {"sha": "417022bd2bf10c5ba020c2c6500a7a3e353a69b3", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "patch": "@@ -32,17 +32,23 @@ fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n \n     builder.levels.id_to_set.reserve(krate.owners.len() + 1);\n \n-    let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), true);\n+    let push =\n+        builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), true, Some(hir::CRATE_HIR_ID));\n+\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n     tcx.hir().walk_toplevel_module(&mut builder);\n     builder.levels.pop(push);\n \n+    builder.levels.update_unstable_expectation_ids();\n     builder.levels.build_map()\n }\n \n pub struct LintLevelsBuilder<'s> {\n     sess: &'s Session,\n     lint_expectations: FxHashMap<LintExpectationId, LintExpectation>,\n+    /// Each expectation has a stable and an unstable identifier. This map\n+    /// is used to map from unstable to stable [`LintExpectationId`]s.\n+    expectation_id_map: FxHashMap<LintExpectationId, LintExpectationId>,\n     sets: LintLevelSets,\n     id_to_set: FxHashMap<HirId, LintStackIndex>,\n     cur: LintStackIndex,\n@@ -66,6 +72,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         let mut builder = LintLevelsBuilder {\n             sess,\n             lint_expectations: Default::default(),\n+            expectation_id_map: Default::default(),\n             sets: LintLevelSets::new(),\n             cur: COMMAND_LINE,\n             id_to_set: Default::default(),\n@@ -226,13 +233,26 @@ impl<'s> LintLevelsBuilder<'s> {\n     ///   `#[allow]`\n     ///\n     /// Don't forget to call `pop`!\n-    pub(crate) fn push(&mut self, attrs: &[ast::Attribute], is_crate_node: bool) -> BuilderPush {\n+    pub(crate) fn push(\n+        &mut self,\n+        attrs: &[ast::Attribute],\n+        is_crate_node: bool,\n+        source_hir_id: Option<HirId>,\n+    ) -> BuilderPush {\n         let mut specs = FxHashMap::default();\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n-        for attr in attrs {\n-            let Some(level) = Level::from_symbol(attr.name_or_empty(), attr.id.as_u32()) else {\n-                continue\n+        for (attr_index, attr) in attrs.iter().enumerate() {\n+            let level = match Level::from_symbol(attr.name_or_empty(), || {\n+                LintExpectationId::Unstable(attr.id)\n+            }) {\n+                None => continue,\n+                Some(Level::Expect(unstable_id)) if source_hir_id.is_some() => {\n+                    let stable_id =\n+                        self.create_stable_id(unstable_id, source_hir_id.unwrap(), attr_index);\n+                    Level::Expect(stable_id)\n+                }\n+                Some(lvl) => lvl,\n             };\n \n             let Some(mut metas) = attr.meta_item_list() else {\n@@ -539,6 +559,19 @@ impl<'s> LintLevelsBuilder<'s> {\n         BuilderPush { prev, changed: prev != self.cur }\n     }\n \n+    fn create_stable_id(\n+        &mut self,\n+        unstable_id: LintExpectationId,\n+        hir_id: HirId,\n+        attr_index: usize,\n+    ) -> LintExpectationId {\n+        let stable_id = LintExpectationId::Stable { hir_id, attr_index };\n+\n+        self.expectation_id_map.insert(unstable_id, stable_id);\n+\n+        stable_id\n+    }\n+\n     /// Checks if the lint is gated on a feature that is not enabled.\n     fn check_gated_lint(&self, lint_id: LintId, span: Span) {\n         if let Some(feature) = lint_id.lint.feature_gate {\n@@ -582,6 +615,10 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.id_to_set.insert(id, self.cur);\n     }\n \n+    fn update_unstable_expectation_ids(&self) {\n+        self.sess.diagnostic().update_unstable_expectation_id(&self.expectation_id_map);\n+    }\n+\n     pub fn build_map(self) -> LintLevelMap {\n         LintLevelMap {\n             sets: self.sets,\n@@ -603,7 +640,8 @@ impl LintLevelMapBuilder<'_> {\n     {\n         let is_crate_hir = id == hir::CRATE_HIR_ID;\n         let attrs = self.tcx.hir().attrs(id);\n-        let push = self.levels.push(attrs, is_crate_hir);\n+        let push = self.levels.push(attrs, is_crate_hir, Some(id));\n+\n         if push.changed {\n             self.levels.register_id(id);\n         }"}, {"sha": "18f229564c2a3818a8739f4a7c8637544054fd31", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "patch": "@@ -51,8 +51,8 @@ pub mod builtin;\n mod context;\n mod early;\n mod enum_intrinsics_non_enums;\n-pub mod hidden_unicode_codepoints;\n mod expect;\n+pub mod hidden_unicode_codepoints;\n mod internal;\n mod late;\n mod levels;"}, {"sha": "8acf7943de9cf06b399124c0678ab76423734e58", "filename": "compiler/rustc_lint_defs/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint_defs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint_defs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2FCargo.toml?ref=33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "patch": "@@ -10,4 +10,4 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_target = { path = \"../rustc_target\" }\n-rustc_index = { path = \"../rustc_index\" }\n+rustc_hir = { path = \"../rustc_hir\" }"}, {"sha": "5e3b6889fc6676205d23402da632b094a2449256", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 64, "deletions": 18, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "patch": "@@ -5,7 +5,9 @@ extern crate rustc_macros;\n \n pub use self::Level::*;\n use rustc_ast::node_id::{NodeId, NodeMap};\n+use rustc_ast::AttrId;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_hir::HirId;\n use rustc_serialize::json::Json;\n use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n@@ -48,29 +50,70 @@ pub enum Applicability {\n     Unspecified,\n }\n \n-rustc_index::newtype_index! {\n-    /// FIXME: The lint expectation ID is currently a simple copy of the `AttrId`\n-    /// that the expectation originated from. In the future it should be generated\n-    /// by other means. This is for one to keep the IDs independent of each other\n-    /// and also to ensure that it is actually stable between compilation sessions.\n-    /// (The `AttrId` for instance, is not stable).\n-    ///\n-    /// Additionally, it would be nice if this generation could be moved into\n-    /// [`Level::from_symbol`] to have it all contained in one module and to\n-    /// make it simpler to use.\n-    pub struct LintExpectationId {\n-        DEBUG_FORMAT = \"LintExpectationId({})\"\n+/// Each lint expectation has a `LintExpectationId` assigned by the\n+/// [`LintLevelsBuilder`][`rustc_lint::levels::LintLevelsBuilder`]. Expected\n+/// [`Diagnostic`][`rustc_errors::Diagnostic`]s get the lint level `Expect` which\n+/// stores the `LintExpectationId` to match it with the actual expectation later on.\n+///\n+/// The `LintExpectationId` has to be has stable between compilations, as diagnostic\n+/// instances might be loaded from cache. Lint messages can be emitted during an\n+/// `EarlyLintPass` operating on the AST and during a `LateLintPass` traversing the\n+/// HIR tree. The AST doesn't have enough information to create a stable id. The\n+/// `LintExpectationId` will instead store the [`AttrId`] defining the expectation.\n+/// These `LintExpectationId` will be updated to use the stable [`HirId`] once the\n+/// AST has been lowered. The transformation is done by the\n+/// [`LintLevelsBuilder`][`rustc_lint::levels::LintLevelsBuilder`]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, Encodable, Decodable)]\n+pub enum LintExpectationId {\n+    /// Used for lints emitted during the `EarlyLintPass`. This id is not\n+    /// has stable and should not be cached.\n+    Unstable(AttrId),\n+    /// The [`HirId`] that the lint expectation is attached to. This id is\n+    /// stable and can be cached. The additional index ensures that nodes with\n+    /// several expectations can correctly match diagnostics to the individual\n+    /// expectation.\n+    Stable { hir_id: HirId, attr_index: usize },\n+}\n+\n+impl LintExpectationId {\n+    pub fn is_stable(&self) -> bool {\n+        match self {\n+            LintExpectationId::Unstable(_) => false,\n+            LintExpectationId::Stable { .. } => true,\n+        }\n     }\n }\n \n-rustc_data_structures::impl_stable_hash_via_hash!(LintExpectationId);\n+impl<HCX: rustc_hir::HashStableContext> HashStable<HCX> for LintExpectationId {\n+    #[inline]\n+    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n+        match self {\n+            LintExpectationId::Unstable(_) => {\n+                unreachable!(\n+                    \"HashStable should never be called for an unstable `LintExpectationId`\"\n+                )\n+            }\n+            LintExpectationId::Stable { hir_id, attr_index } => {\n+                hir_id.hash_stable(hcx, hasher);\n+                attr_index.hash_stable(hcx, hasher);\n+            }\n+        }\n+    }\n+}\n \n-impl<HCX> ToStableHashKey<HCX> for LintExpectationId {\n-    type KeyType = u32;\n+impl<HCX: rustc_hir::HashStableContext> ToStableHashKey<HCX> for LintExpectationId {\n+    type KeyType = (HirId, usize);\n \n     #[inline]\n     fn to_stable_hash_key(&self, _: &HCX) -> Self::KeyType {\n-        self.as_u32()\n+        match self {\n+            LintExpectationId::Unstable(_) => {\n+                unreachable!(\n+                    \"HashStable should never be called for an unstable `LintExpectationId`\"\n+                )\n+            }\n+            LintExpectationId::Stable { hir_id, attr_index } => (*hir_id, *attr_index),\n+        }\n     }\n }\n \n@@ -133,10 +176,13 @@ impl Level {\n     }\n \n     /// Converts a symbol to a level.\n-    pub fn from_symbol(x: Symbol, possible_lint_expect_id: u32) -> Option<Level> {\n+    pub fn from_symbol<F>(x: Symbol, create_expectation_id: F) -> Option<Level>\n+    where\n+        F: FnOnce() -> LintExpectationId,\n+    {\n         match x {\n             sym::allow => Some(Level::Allow),\n-            sym::expect => Some(Level::Expect(LintExpectationId::from(possible_lint_expect_id))),\n+            sym::expect => Some(Level::Expect(create_expectation_id())),\n             sym::warn => Some(Level::Warn),\n             sym::deny => Some(Level::Deny),\n             sym::forbid => Some(Level::Forbid),"}, {"sha": "f680843f9e4e09c9408aac759d659efa9a6af854", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "patch": "@@ -6,10 +6,9 @@ use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_query_system::ich::StableHashingContext;\n-use rustc_session::lint::LintExpectationId;\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n-    FutureIncompatibilityReason, Level, Lint, LintId,\n+    FutureIncompatibilityReason, Level, Lint, LintExpectationId, LintId,\n };\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;"}, {"sha": "5165193ab540ed9be487c61a77c1bb4492f7d663", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=33a5945069e2c7bd3ba8a0dd65b74ebdd234ad7c", "patch": "@@ -49,7 +49,7 @@ use rustc_middle::mir::FakeReadCause;\n use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n-use rustc_session::lint::{Level, Lint};\n+use rustc_session::lint::{Level, Lint, LintExpectationId};\n use rustc_session::Limit;\n use rustc_session::Session;\n use rustc_span::def_id::{DefPathHash, StableCrateId};\n@@ -2755,11 +2755,13 @@ impl<'tcx> TyCtxt<'tcx> {\n                 return bound;\n             }\n \n-            if hir\n-                .attrs(id)\n-                .iter()\n-                .any(|attr| Level::from_symbol(attr.name_or_empty(), attr.id.as_u32()).is_some())\n-            {\n+            if hir.attrs(id).iter().enumerate().any(|(attr_index, attr)| {\n+                Level::from_symbol(attr.name_or_empty(), || LintExpectationId::Stable {\n+                    hir_id: id,\n+                    attr_index,\n+                })\n+                .is_some()\n+            }) {\n                 return id;\n             }\n             let next = hir.get_parent_node(id);"}]}