{"sha": "63b6007d5b68023e02a43c2f9c2ed21762cd8011", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYjYwMDdkNWI2ODAyM2UwMmE0M2MyZjljMmVkMjE3NjJjZDgwMTE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-01T14:49:55Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-01T14:52:11Z"}, "message": "Work around potential merging/duplication issues in sys/windows/compat.", "tree": {"sha": "e5b1e2750ae03e5baf17186c9b52a353175576f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5b1e2750ae03e5baf17186c9b52a353175576f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63b6007d5b68023e02a43c2f9c2ed21762cd8011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63b6007d5b68023e02a43c2f9c2ed21762cd8011", "html_url": "https://github.com/rust-lang/rust/commit/63b6007d5b68023e02a43c2f9c2ed21762cd8011", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63b6007d5b68023e02a43c2f9c2ed21762cd8011/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09cbaf436713ddb864725a50ccdff67e2ab9bc77", "url": "https://api.github.com/repos/rust-lang/rust/commits/09cbaf436713ddb864725a50ccdff67e2ab9bc77", "html_url": "https://github.com/rust-lang/rust/commit/09cbaf436713ddb864725a50ccdff67e2ab9bc77"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "3f25f05e1b9a7e479ce7f8cd766af19e9a532cf8", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/63b6007d5b68023e02a43c2f9c2ed21762cd8011/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b6007d5b68023e02a43c2f9c2ed21762cd8011/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=63b6007d5b68023e02a43c2f9c2ed21762cd8011", "patch": "@@ -38,11 +38,28 @@ macro_rules! compat_fn {\n             use crate::sync::atomic::{AtomicUsize, Ordering};\n             use crate::mem;\n \n+            type F = unsafe extern \"system\" fn($($argtype),*) -> $rettype;\n+\n             static PTR: AtomicUsize = AtomicUsize::new(0);\n \n             #[allow(unused_variables)]\n             unsafe extern \"system\" fn fallback($($argname: $argtype),*) -> $rettype $body\n \n+            /// This address is stored in `PTR` to incidate an unavailable API.\n+            ///\n+            /// This way, call() will end up calling fallback() if it is unavailable.\n+            ///\n+            /// This is a `static` to avoid rustc duplicating `fn fallback()`\n+            /// into both load() and is_available(), which would break\n+            /// is_available()'s comparison. By using the same static variable\n+            /// in both places, they'll refer to the same (copy of the)\n+            /// function.\n+            ///\n+            /// LLVM merging the address of fallback with other functions\n+            /// (because of unnamed_addr) is fine, since it's only compared to\n+            /// an address from GetProcAddress from an external dll.\n+            static FALLBACK: F = fallback;\n+\n             #[cold]\n             fn load() -> usize {\n                 // There is no locking here. It's okay if this is executed by multiple threads in\n@@ -51,7 +68,7 @@ macro_rules! compat_fn {\n                 // about memory ordering, as this involves just a single atomic variable which is\n                 // not used to protect or order anything else.\n                 let addr = crate::sys::compat::lookup($module, stringify!($symbol))\n-                    .unwrap_or(fallback as usize);\n+                    .unwrap_or(FALLBACK as usize);\n                 PTR.store(addr, Ordering::Relaxed);\n                 addr\n             }\n@@ -65,11 +82,10 @@ macro_rules! compat_fn {\n \n             #[allow(dead_code)]\n             pub fn is_available() -> bool {\n-                addr() != fallback as usize\n+                addr() != FALLBACK as usize\n             }\n \n             pub unsafe fn call($($argname: $argtype),*) -> $rettype {\n-                type F = unsafe extern \"system\" fn($($argtype),*) -> $rettype;\n                 mem::transmute::<usize, F>(addr())($($argname),*)\n             }\n         }"}]}