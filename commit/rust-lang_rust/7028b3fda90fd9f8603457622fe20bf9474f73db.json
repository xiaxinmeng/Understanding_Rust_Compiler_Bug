{"sha": "7028b3fda90fd9f8603457622fe20bf9474f73db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMjhiM2ZkYTkwZmQ5Zjg2MDM0NTc2MjJmZTIwYmY5NDc0ZjczZGI=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-19T03:24:56Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-24T08:35:04Z"}, "message": "Remove explicit rust code specifier. Unhide use HashMap.", "tree": {"sha": "df7e80b60997ee91ec19ad8ccbaf06f5ef629017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df7e80b60997ee91ec19ad8ccbaf06f5ef629017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7028b3fda90fd9f8603457622fe20bf9474f73db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7028b3fda90fd9f8603457622fe20bf9474f73db", "html_url": "https://github.com/rust-lang/rust/commit/7028b3fda90fd9f8603457622fe20bf9474f73db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7028b3fda90fd9f8603457622fe20bf9474f73db/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d61c6b12837d0e1cc23c55f6d9a0cc2c591c981", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d61c6b12837d0e1cc23c55f6d9a0cc2c591c981", "html_url": "https://github.com/rust-lang/rust/commit/0d61c6b12837d0e1cc23c55f6d9a0cc2c591c981"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "70a2bca3e977a01ad9fa945954a731696c66345a", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/7028b3fda90fd9f8603457622fe20bf9474f73db/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7028b3fda90fd9f8603457622fe20bf9474f73db/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=7028b3fda90fd9f8603457622fe20bf9474f73db", "patch": "@@ -693,7 +693,7 @@ impl DefaultResizePolicy {\n ///\n /// # Example\n ///\n-/// ```rust\n+/// ```\n /// use std::collections::HashMap;\n ///\n /// // type inference lets us omit an explicit type signature (which\n@@ -731,9 +731,9 @@ impl DefaultResizePolicy {\n /// ```\n ///\n /// The easiest way to use `HashMap` with a custom type is to derive `Eq` and `Hash`.\n-/// We must also derive `PartialEq`, this will in the future be implied by `Eq`.\n+/// We must also derive `PartialEq`, but this will in the future be implied by `Eq`.\n ///\n-/// ```rust\n+/// ```\n /// use std::collections::HashMap;\n ///\n /// #[deriving(Hash, Eq, PartialEq, Show)]\n@@ -1041,8 +1041,8 @@ impl<K: Hash + Eq, V> HashMap<K, V, RandomSipHasher> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n     /// let mut map: HashMap<&str, int> = HashMap::new();\n     /// ```\n     #[inline]\n@@ -1054,8 +1054,8 @@ impl<K: Hash + Eq, V> HashMap<K, V, RandomSipHasher> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n     /// let mut map: HashMap<&str, int> = HashMap::with_capacity(10u);\n     /// ```\n     #[inline]\n@@ -1072,8 +1072,8 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n     /// use std::hash::sip::SipHasher;\n     ///\n     /// let h = SipHasher::new();\n@@ -1095,8 +1095,8 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n     /// use std::hash::sip::SipHasher;\n     ///\n     /// let h = SipHasher::new();\n@@ -1120,8 +1120,8 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// This function has no effect on the operational semantics of the\n     /// hashtable, only on performance.\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n     /// let mut map: HashMap<&str, int> = HashMap::new();\n     /// map.reserve(10u);\n     /// ```\n@@ -1292,8 +1292,8 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n     /// let mut map = HashMap::new();\n     ///\n     /// // Insert 1i with key \"a\"\n@@ -1311,8 +1311,8 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n     /// let mut map = HashMap::new();\n     ///\n     /// // Insert 10u with key 2i\n@@ -1332,8 +1332,8 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n     /// let mut map = HashMap::new();\n     ///\n     /// // Insert 2u with key \"a\"\n@@ -1362,7 +1362,7 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::HashMap;\n     ///\n     /// // map some strings to vectors of strings\n@@ -1419,8 +1419,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n     /// let mut map = HashMap::new();\n     /// map.insert(\"a\", 1i);\n     /// assert_eq!(map.get(&\"a\"), &1i);\n@@ -1437,8 +1438,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n     /// let mut map = HashMap::new();\n     /// map.insert(\"a\", 1i);\n     /// {\n@@ -1489,8 +1491,8 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     /// the equivilance class. It is important that the values hash the same,\n     /// which is why we override `Hash`.\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n     /// use std::hash::Hash;\n     /// use std::hash::sip::SipState;\n     ///\n@@ -1547,8 +1549,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n     /// let mut map = HashMap::new();\n     /// map.insert(\"a\", 1i);\n     /// map.insert(\"b\", 2i);\n@@ -1567,8 +1570,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n     /// let mut map = HashMap::new();\n     /// map.insert(\"a\", 1i);\n     /// map.insert(\"b\", 2i);\n@@ -1587,8 +1591,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n     /// let mut map = HashMap::new();\n     /// map.insert(\"a\", 1i);\n     /// map.insert(\"b\", 2i);\n@@ -1608,8 +1613,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n     /// let mut map = HashMap::new();\n     /// map.insert(\"a\", 1i);\n     /// map.insert(\"b\", 2i);\n@@ -1634,8 +1640,9 @@ impl<K: Eq + Hash<S>, V, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n     /// let mut map = HashMap::new();\n     /// map.insert(\"a\", 1i);\n     /// map.insert(\"b\", 2i);\n@@ -1654,8 +1661,9 @@ impl<K: Eq + Hash<S>, V: Clone, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n     /// let mut map: HashMap<uint, String> = HashMap::new();\n     /// map.insert(1u, \"foo\".to_string());\n     /// let s: String = map.find_copy(&1u).unwrap();\n@@ -1668,8 +1676,9 @@ impl<K: Eq + Hash<S>, V: Clone, S, H: Hasher<S>> HashMap<K, V, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::collections::HashMap;\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n     /// let mut map: HashMap<uint, String> = HashMap::new();\n     /// map.insert(1u, \"foo\".to_string());\n     /// let s: String = map.get_copy(&1u);\n@@ -1763,7 +1772,7 @@ pub type SetMoveItems<K> =\n ///\n /// # Example\n ///\n-/// ```rust\n+/// ```\n /// use std::collections::HashSet;\n ///\n /// // Type inference lets us omit an explicit type signature (which\n@@ -1826,7 +1835,6 @@ impl<T: Hash + Eq> HashSet<T, RandomSipHasher> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n     /// use std::collections::HashSet;\n     /// let mut set: HashSet<int> = HashSet::new();\n     /// ```\n@@ -1840,7 +1848,6 @@ impl<T: Hash + Eq> HashSet<T, RandomSipHasher> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n     /// use std::collections::HashSet;\n     /// let mut set: HashSet<int> = HashSet::with_capacity(10);\n     /// ```\n@@ -1898,7 +1905,6 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n     /// use std::collections::HashSet;\n     /// let mut set: HashSet<int> = HashSet::new();\n     /// set.reserve(10);\n@@ -1957,9 +1963,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::HashSet;\n-    ///\n     /// let mut set = HashSet::new();\n     /// set.insert(\"a\");\n     /// set.insert(\"b\");\n@@ -1979,9 +1984,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::HashSet;\n-    ///\n     /// let mut set = HashSet::new();\n     /// set.insert(\"a\".to_string());\n     /// set.insert(\"b\".to_string());\n@@ -2002,9 +2006,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::HashSet;\n-    ///\n     /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n     /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n     ///\n@@ -2032,9 +2035,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::HashSet;\n-    ///\n     /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n     /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n     ///\n@@ -2058,9 +2060,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::HashSet;\n-    ///\n     /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n     /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n     ///\n@@ -2084,9 +2085,8 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::HashSet;\n-    ///\n     /// let a: HashSet<int> = [1i, 2, 3].iter().map(|&x| x).collect();\n     /// let b: HashSet<int> = [4i, 2, 3, 4].iter().map(|&x| x).collect();\n     ///"}]}