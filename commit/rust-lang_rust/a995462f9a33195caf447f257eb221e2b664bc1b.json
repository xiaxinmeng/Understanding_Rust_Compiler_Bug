{"sha": "a995462f9a33195caf447f257eb221e2b664bc1b", "node_id": "C_kwDOAAsO6NoAKGE5OTU0NjJmOWEzMzE5NWNhZjQ0N2YyNTdlYjIyMWUyYjY2NGJjMWI", "commit": {"author": {"name": "lzh", "email": "louzhihao@huawei.com", "date": "2021-12-17T03:17:43Z"}, "committer": {"name": "lzh", "email": "louzhihao@huawei.com", "date": "2021-12-17T03:17:43Z"}, "message": "Eliminate duplicate codes of expected_found_bool", "tree": {"sha": "36027597e91b446b57196425239b362655827b8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36027597e91b446b57196425239b362655827b8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a995462f9a33195caf447f257eb221e2b664bc1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a995462f9a33195caf447f257eb221e2b664bc1b", "html_url": "https://github.com/rust-lang/rust/commit/a995462f9a33195caf447f257eb221e2b664bc1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a995462f9a33195caf447f257eb221e2b664bc1b/comments", "author": {"login": "woodenarrow", "id": 95843988, "node_id": "U_kgDOBbZ2lA", "avatar_url": "https://avatars.githubusercontent.com/u/95843988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woodenarrow", "html_url": "https://github.com/woodenarrow", "followers_url": "https://api.github.com/users/woodenarrow/followers", "following_url": "https://api.github.com/users/woodenarrow/following{/other_user}", "gists_url": "https://api.github.com/users/woodenarrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/woodenarrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woodenarrow/subscriptions", "organizations_url": "https://api.github.com/users/woodenarrow/orgs", "repos_url": "https://api.github.com/users/woodenarrow/repos", "events_url": "https://api.github.com/users/woodenarrow/events{/privacy}", "received_events_url": "https://api.github.com/users/woodenarrow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "woodenarrow", "id": 95843988, "node_id": "U_kgDOBbZ2lA", "avatar_url": "https://avatars.githubusercontent.com/u/95843988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woodenarrow", "html_url": "https://github.com/woodenarrow", "followers_url": "https://api.github.com/users/woodenarrow/followers", "following_url": "https://api.github.com/users/woodenarrow/following{/other_user}", "gists_url": "https://api.github.com/users/woodenarrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/woodenarrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woodenarrow/subscriptions", "organizations_url": "https://api.github.com/users/woodenarrow/orgs", "repos_url": "https://api.github.com/users/woodenarrow/repos", "events_url": "https://api.github.com/users/woodenarrow/events{/privacy}", "received_events_url": "https://api.github.com/users/woodenarrow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b42deaccc2cbe17a68067aa5fdb76104369e1fd", "html_url": "https://github.com/rust-lang/rust/commit/0b42deaccc2cbe17a68067aa5fdb76104369e1fd"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "03596f7dfad6d25dc282e95e6ec26f64192a4de2", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a995462f9a33195caf447f257eb221e2b664bc1b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a995462f9a33195caf447f257eb221e2b664bc1b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=a995462f9a33195caf447f257eb221e2b664bc1b", "patch": "@@ -37,7 +37,7 @@ use crate::traits::{Obligation, PredicateObligations};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::traits::ObligationCause;\n-use rustc_middle::ty::error::TypeError;\n+use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable};\n@@ -790,23 +790,23 @@ pub fn const_unification_error<'tcx>(\n     a_is_expected: bool,\n     (a, b): (&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>),\n ) -> TypeError<'tcx> {\n-    TypeError::ConstMismatch(ty::relate::expected_found_bool(a_is_expected, a, b))\n+    TypeError::ConstMismatch(ExpectedFound::new(a_is_expected, a, b))\n }\n \n fn int_unification_error<'tcx>(\n     a_is_expected: bool,\n     v: (ty::IntVarValue, ty::IntVarValue),\n ) -> TypeError<'tcx> {\n     let (a, b) = v;\n-    TypeError::IntMismatch(ty::relate::expected_found_bool(a_is_expected, a, b))\n+    TypeError::IntMismatch(ExpectedFound::new(a_is_expected, a, b))\n }\n \n fn float_unification_error<'tcx>(\n     a_is_expected: bool,\n     v: (ty::FloatVarValue, ty::FloatVarValue),\n ) -> TypeError<'tcx> {\n     let (ty::FloatVarValue(a), ty::FloatVarValue(b)) = v;\n-    TypeError::FloatMismatch(ty::relate::expected_found_bool(a_is_expected, a, b))\n+    TypeError::FloatMismatch(ExpectedFound::new(a_is_expected, a, b))\n }\n \n struct ConstInferUnifier<'cx, 'tcx> {"}, {"sha": "42495f974d0d849bd0d814025a7ea19f93061b7e", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a995462f9a33195caf447f257eb221e2b664bc1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a995462f9a33195caf447f257eb221e2b664bc1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=a995462f9a33195caf447f257eb221e2b664bc1b", "patch": "@@ -849,13 +849,5 @@ pub fn expected_found<R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>\n where\n     R: TypeRelation<'tcx>,\n {\n-    expected_found_bool(relation.a_is_expected(), a, b)\n-}\n-\n-pub fn expected_found_bool<T>(a_is_expected: bool, a: T, b: T) -> ExpectedFound<T> {\n-    if a_is_expected {\n-        ExpectedFound { expected: a, found: b }\n-    } else {\n-        ExpectedFound { expected: b, found: a }\n-    }\n+    ExpectedFound::new(relation.a_is_expected(), a, b)\n }"}, {"sha": "60e7dc61a1b9cbeb5650d56d7238cb7ab7dbcb01", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a995462f9a33195caf447f257eb221e2b664bc1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a995462f9a33195caf447f257eb221e2b664bc1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=a995462f9a33195caf447f257eb221e2b664bc1b", "patch": "@@ -36,8 +36,8 @@ use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n+use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::error::TypeError::{FieldMisMatch, Sorts};\n-use rustc_middle::ty::relate::expected_found_bool;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, Ty, TypeFoldable};\n use rustc_session::parse::feature_err;\n@@ -1494,7 +1494,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         &self.misc(base_expr.span),\n                                         adt_ty,\n                                         base_ty,\n-                                        Sorts(expected_found_bool(true, adt_ty, base_ty)),\n+                                        Sorts(ExpectedFound::new(true, adt_ty, base_ty)),\n                                     )\n                                     .emit();\n                             }"}]}