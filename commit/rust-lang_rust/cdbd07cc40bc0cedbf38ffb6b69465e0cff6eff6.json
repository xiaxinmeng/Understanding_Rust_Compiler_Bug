{"sha": "cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYmQwN2NjNDBiYzBjZWRiZjM4ZmZiNmI2OTQ2NWUwY2ZmNmVmZjY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-02-10T20:45:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-10T20:45:12Z"}, "message": "Rollup merge of #58203 - euclio:rustdoc-async, r=GuillaumeGomez\n\nrustdoc: display sugared return types for async functions\n\nFixes #58027.", "tree": {"sha": "2cdfe4359051678d9c6b9077bc82008b47b8de10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cdfe4359051678d9c6b9077bc82008b47b8de10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcYI1YCRBK7hj4Ov3rIwAAdHIIABeJjAanSj5dAAYOPy/ro0hX\nmNlz4GsA9t15D3rtGvioxryrwLypHwogqMVqh5JJp+ZraFJfz0BpdbhOUOFX34Sj\niU7BBAtHBkqlX4/SqIL+sTMxkQ+Ct/RNhKx9qVqUvz2n/fz6sR4DAQIBOfoeK0p4\nJi8a0+uPewOdK0pLN2KdMHkdlf1igP+OviRgrOincuk3MFIiW1p60AHLsJ+6f8ro\njeSthJbthnixF4Gmjif1K9Wl4WMmsKe//gBTORK+2XJHBUTWEIok7/sPjp9AoEv3\nT6fMsF5BjBHYd3woYDN2mDHo9ZkJ77QVXZkZW6wweqRrwDqA0zbAdjpxgHLPxBk=\n=HNTV\n-----END PGP SIGNATURE-----\n", "payload": "tree 2cdfe4359051678d9c6b9077bc82008b47b8de10\nparent a74e4f7fd5fd0eac66a021bfb108942ad1ec3995\nparent 4deb5959a3a2cbc189e26cb4b0c59a6707a10b45\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1549831512 +0100\ncommitter GitHub <noreply@github.com> 1549831512 +0100\n\nRollup merge of #58203 - euclio:rustdoc-async, r=GuillaumeGomez\n\nrustdoc: display sugared return types for async functions\n\nFixes #58027.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6", "html_url": "https://github.com/rust-lang/rust/commit/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a74e4f7fd5fd0eac66a021bfb108942ad1ec3995", "url": "https://api.github.com/repos/rust-lang/rust/commits/a74e4f7fd5fd0eac66a021bfb108942ad1ec3995", "html_url": "https://github.com/rust-lang/rust/commit/a74e4f7fd5fd0eac66a021bfb108942ad1ec3995"}, {"sha": "4deb5959a3a2cbc189e26cb4b0c59a6707a10b45", "url": "https://api.github.com/repos/rust-lang/rust/commits/4deb5959a3a2cbc189e26cb4b0c59a6707a10b45", "html_url": "https://github.com/rust-lang/rust/commit/4deb5959a3a2cbc189e26cb4b0c59a6707a10b45"}], "stats": {"total": 105, "additions": 88, "deletions": 17}, "files": [{"sha": "d854488244fb8940edde7bdf8d965d6397d35d17", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6", "patch": "@@ -1724,6 +1724,30 @@ impl FnDecl {\n     pub fn self_type(&self) -> Option<SelfTy> {\n         self.inputs.values.get(0).and_then(|v| v.to_self())\n     }\n+\n+    /// Returns the sugared return type for an async function.\n+    ///\n+    /// For example, if the return type is `impl std::future::Future<Output = i32>`, this function\n+    /// will return `i32`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if the return type does not match the expected sugaring for async\n+    /// functions.\n+    pub fn sugared_async_return_type(&self) -> FunctionRetTy {\n+        match &self.output {\n+            FunctionRetTy::Return(Type::ImplTrait(bounds)) => {\n+                match &bounds[0] {\n+                    GenericBound::TraitBound(PolyTrait { trait_, .. }, ..) => {\n+                        let bindings = trait_.bindings().unwrap();\n+                        FunctionRetTy::Return(bindings[0].ty.clone())\n+                    }\n+                    _ => panic!(\"unexpected desugaring of async function\"),\n+                }\n+            }\n+            _ => panic!(\"unexpected desugaring of async function\"),\n+        }\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n@@ -2282,6 +2306,21 @@ impl Type {\n             _ => None,\n         }\n     }\n+\n+    pub fn bindings(&self) -> Option<&[TypeBinding]> {\n+        match *self {\n+            ResolvedPath { ref path, .. } => {\n+                path.segments.last().and_then(|seg| {\n+                    if let GenericArgs::AngleBracketed { ref bindings, .. } = seg.args {\n+                        Some(&**bindings)\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n+            _ => None\n+        }\n+    }\n }\n \n impl GetDefId for Type {"}, {"sha": "c03e679bc519480283a73ed4270253cebd6b2003", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6", "patch": "@@ -5,6 +5,7 @@\n //! assume that HTML output is desired, although it may be possible to redesign\n //! them in the future to instead emit any format desired.\n \n+use std::borrow::Cow;\n use std::fmt;\n \n use rustc::hir::def_id::DefId;\n@@ -44,14 +45,16 @@ pub struct GenericBounds<'a>(pub &'a [clean::GenericBound]);\n pub struct CommaSep<'a, T: 'a>(pub &'a [T]);\n pub struct AbiSpace(pub Abi);\n \n-/// Wrapper struct for properly emitting a method declaration.\n-pub struct Method<'a> {\n+/// Wrapper struct for properly emitting a function or method declaration.\n+pub struct Function<'a> {\n     /// The declaration to emit.\n     pub decl: &'a clean::FnDecl,\n     /// The length of the function's \"name\", used to determine line-wrapping.\n     pub name_len: usize,\n     /// The number of spaces to indent each successive line with, if line-wrapping is necessary.\n     pub indent: usize,\n+    /// Whether the function is async or not.\n+    pub asyncness: hir::IsAsync,\n }\n \n /// Wrapper struct for emitting a where clause from Generics.\n@@ -829,9 +832,9 @@ impl fmt::Display for clean::FnDecl {\n     }\n }\n \n-impl<'a> fmt::Display for Method<'a> {\n+impl<'a> fmt::Display for Function<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let &Method { decl, name_len, indent } = self;\n+        let &Function { decl, name_len, indent, asyncness } = self;\n         let amp = if f.alternate() { \"&\" } else { \"&amp;\" };\n         let mut args = String::new();\n         let mut args_plain = String::new();\n@@ -891,11 +894,17 @@ impl<'a> fmt::Display for Method<'a> {\n             args_plain.push_str(\", ...\");\n         }\n \n-        let arrow_plain = format!(\"{:#}\", decl.output);\n+        let output = if let hir::IsAsync::Async = asyncness {\n+            Cow::Owned(decl.sugared_async_return_type())\n+        } else {\n+            Cow::Borrowed(&decl.output)\n+        };\n+\n+        let arrow_plain = format!(\"{:#}\", &output);\n         let arrow = if f.alternate() {\n-            format!(\"{:#}\", decl.output)\n+            format!(\"{:#}\", &output)\n         } else {\n-            decl.output.to_string()\n+            output.to_string()\n         };\n \n         let pad = \" \".repeat(name_len);"}, {"sha": "8e4d6b26c722569f848579bde79bb06aa5413a6d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6", "patch": "@@ -62,7 +62,7 @@ use fold::DocFolder;\n use html::escape::Escape;\n use html::format::{AsyncSpace, ConstnessSpace};\n use html::format::{GenericBounds, WhereClause, href, AbiSpace};\n-use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n+use html::format::{VisSpace, Function, UnsafetySpace, MutableSpace};\n use html::format::fmt_impl_for_trait_page;\n use html::item_type::ItemType;\n use html::markdown::{self, Markdown, MarkdownHtml, MarkdownSummaryLine, ErrorCodes, IdMap};\n@@ -2977,10 +2977,11 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n            name = it.name.as_ref().unwrap(),\n            generics = f.generics,\n            where_clause = WhereClause { gens: &f.generics, indent: 0, end_newline: true },\n-           decl = Method {\n+           decl = Function {\n               decl: &f.decl,\n               name_len,\n               indent: 0,\n+              asyncness: f.header.asyncness,\n            })?;\n     document(w, cx, it)\n }\n@@ -3424,10 +3425,11 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n                href = href,\n                name = name,\n                generics = *g,\n-               decl = Method {\n+               decl = Function {\n                    decl: d,\n                    name_len: head_len,\n                    indent,\n+                   asyncness: header.asyncness,\n                },\n                where_clause = WhereClause {\n                    gens: g,"}, {"sha": "ba4997a7f9b5ba7788eaee63f173d8fd62972265", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6", "patch": "@@ -1,14 +1,35 @@\n // edition:2018\n-// compile-flags:-Z unstable-options\n-\n-// FIXME: once `--edition` is stable in rustdoc, remove that `compile-flags` directive\n \n #![feature(async_await, futures_api)]\n \n-// @has async_fn/struct.S.html\n-// @has - '//code' 'pub async fn f()'\n-pub struct S;\n+// @has async_fn/fn.foo.html '//pre[@class=\"rust fn\"]' 'pub async fn foo() -> Option<Foo>'\n+pub async fn foo() -> Option<Foo> {\n+    None\n+}\n+\n+// @has async_fn/fn.bar.html '//pre[@class=\"rust fn\"]' 'pub async fn bar(a: i32, b: i32) -> i32'\n+pub async fn bar(a: i32, b: i32) -> i32 {\n+    0\n+}\n+\n+// @has async_fn/fn.baz.html '//pre[@class=\"rust fn\"]' 'pub async fn baz<T>(a: T) -> T'\n+pub async fn baz<T>(a: T) -> T {\n+    a\n+}\n+\n+trait Bar {}\n+\n+impl Bar for () {}\n+\n+// @has async_fn/fn.quux.html '//pre[@class=\"rust fn\"]' 'pub async fn quux() -> impl Bar'\n+pub async fn quux() -> impl Bar {\n+    ()\n+}\n+\n+// @has async_fn/struct.Foo.html\n+// @matches - '//code' 'pub async fn f\\(\\)$'\n+pub struct Foo;\n \n-impl S {\n+impl Foo {\n     pub async fn f() {}\n }"}]}