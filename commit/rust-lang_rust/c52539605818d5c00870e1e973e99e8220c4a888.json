{"sha": "c52539605818d5c00870e1e973e99e8220c4a888", "node_id": "C_kwDOAAsO6NoAKGM1MjUzOTYwNTgxOGQ1YzAwODcwZTFlOTczZTk5ZTgyMjBjNGE4ODg", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-04-01T19:00:51Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-04-22T16:35:31Z"}, "message": "start tracking proc-macros expansion spans in the self-profiler", "tree": {"sha": "f8147ec9743f305faa29ed1c6da3f799b9f02248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8147ec9743f305faa29ed1c6da3f799b9f02248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c52539605818d5c00870e1e973e99e8220c4a888", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c52539605818d5c00870e1e973e99e8220c4a888", "html_url": "https://github.com/rust-lang/rust/commit/c52539605818d5c00870e1e973e99e8220c4a888", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c52539605818d5c00870e1e973e99e8220c4a888/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "215b377cc327dbd1140fbc0168b69fa8ae345c6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/215b377cc327dbd1140fbc0168b69fa8ae345c6d", "html_url": "https://github.com/rust-lang/rust/commit/215b377cc327dbd1140fbc0168b69fa8ae345c6d"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "8e1966a0711d6c6087b0dc540f34f5e34ae3a0bd", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c52539605818d5c00870e1e973e99e8220c4a888/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c52539605818d5c00870e1e973e99e8220c4a888/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=c52539605818d5c00870e1e973e99e8220c4a888", "patch": "@@ -9,6 +9,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorGuaranteed;\n use rustc_parse::nt_to_tokenstream;\n use rustc_parse::parser::ForceCollect;\n+use rustc_span::profiling::SpannedEventArgRecorder;\n use rustc_span::{Span, DUMMY_SP};\n \n const EXEC_STRATEGY: pm::bridge::server::SameThread = pm::bridge::server::SameThread;\n@@ -25,7 +26,10 @@ impl base::ProcMacro for BangProcMacro {\n         input: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n         let _timer =\n-            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n+            ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n+                recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+            });\n+\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace).map_err(|e| {\n@@ -51,7 +55,10 @@ impl base::AttrProcMacro for AttrProcMacro {\n         annotated: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n         let _timer =\n-            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n+            ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n+                recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+            });\n+\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client\n@@ -103,7 +110,9 @@ impl MultiItemModifier for ProcMacroDerive {\n \n         let stream = {\n             let _timer =\n-                ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n+                ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n+                    recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+                });\n             let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n             let server = proc_macro_server::Rustc::new(ecx);\n             match self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace) {"}]}