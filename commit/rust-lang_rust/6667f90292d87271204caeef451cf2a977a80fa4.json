{"sha": "6667f90292d87271204caeef451cf2a977a80fa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NjdmOTAyOTJkODcyNzEyMDRjYWVlZjQ1MWNmMmE5NzdhODBmYTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-15T07:30:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-15T07:30:10Z"}, "message": "Update rustdoc testing to test all code blocks\n\nIt's too easy to forget the `rust` tag to have a code example tested, and it's\nfar more common to have testable code than untestable code.\n\nThis alters rustdoc to have only two directives, `ignore` and `should_fail`. The\n`ignore` directive ignores the code block entirely, and the `should_fail`\ndirective has been fixed to only fail the test if the code execution fails, not\nalso compilation.", "tree": {"sha": "79fcb80b5277959e731d4ee6f9383c85c8fba827", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79fcb80b5277959e731d4ee6f9383c85c8fba827"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6667f90292d87271204caeef451cf2a977a80fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6667f90292d87271204caeef451cf2a977a80fa4", "html_url": "https://github.com/rust-lang/rust/commit/6667f90292d87271204caeef451cf2a977a80fa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6667f90292d87271204caeef451cf2a977a80fa4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3496e93d13590140242f862c905dc2d591d2e2ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/3496e93d13590140242f862c905dc2d591d2e2ea", "html_url": "https://github.com/rust-lang/rust/commit/3496e93d13590140242f862c905dc2d591d2e2ea"}], "stats": {"total": 65, "additions": 30, "deletions": 35}, "files": [{"sha": "a6f625fe25d1c0e115d4db8b1e95acd8a3d39536", "filename": "src/doc/rustdoc.md", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6667f90292d87271204caeef451cf2a977a80fa4/src%2Fdoc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/6667f90292d87271204caeef451cf2a977a80fa4/src%2Fdoc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc.md?ref=6667f90292d87271204caeef451cf2a977a80fa4", "patch": "@@ -100,34 +100,29 @@ rustdoc --test crate.rs\n \n ## Defining tests\n \n-Rust documentation currently uses the markdown format, and code blocks can refer\n-to any piece of code-related documentation, which isn't always rust. Because of\n-this, only code blocks with the language of \"rust\" will be considered for\n-testing.\n+Rust documentation currently uses the markdown format, and rustdoc treats all\n+code blocks as testable-by-default. In order to not run a test over a block of\n+code, the `ignore` string can be added to the three-backtick form of markdown\n+code block.\n \n ~~~\n-```rust\n+```\n // This is a testable code block\n ```\n \n-```\n+```ignore\n // This is not a testable code block\n ```\n \n-    // This is not a testable code block (4-space indent)\n+    // This is a testable code block (4-space indent)\n ~~~\n \n-In addition to only testing \"rust\"-language code blocks, there are additional\n-specifiers that can be used to dictate how a code block is tested:\n+In addition to the `ignore` directive, you can specify that the test's execution\n+should fail with the `should_fail` directive.\n \n ~~~\n-```rust,ignore\n-// This code block is ignored by rustdoc, but is passed through to the test\n-// harness\n-```\n-\n-```rust,should_fail\n-// This code block is expected to generate a failure\n+```should_fail\n+// This code block is expected to generate a failure when run\n ```\n ~~~\n \n@@ -143,7 +138,7 @@ that one can still write things like `#[deriving(Eq)]`).\n # the doc-generating tool.  In order to display them anyway in this particular\n # case, the character following the leading '#' is not a usual space like in\n # these first five lines but a non breakable one.\n-# \n+#\n #\u00a0// showing 'fib' in this documentation would just be tedious and detracts from\n #\u00a0// what's actualy being documented.\n #\u00a0fn fib(n: int) { n + 2 }\n@@ -169,9 +164,6 @@ rustdoc --test lib.rs --test-args 'foo'\n \n // See what's possible when running tests\n rustdoc --test lib.rs --test-args '--help'\n-\n-// Run all ignored tests\n-rustdoc --test lib.rs --test-args '--ignored'\n ~~~\n \n When testing a library, code examples will often show how functions are used,"}, {"sha": "3668d4d3a2cbaef6a3ce91edbd3398e59abcb050", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6667f90292d87271204caeef451cf2a977a80fa4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6667f90292d87271204caeef451cf2a977a80fa4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6667f90292d87271204caeef451cf2a977a80fa4", "patch": "@@ -172,21 +172,23 @@ pub fn render(w: &mut io::Writer, s: &str) -> fmt::Result {\n pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     extern fn block(_ob: *buf, text: *buf, lang: *buf, opaque: *libc::c_void) {\n         unsafe {\n-            if text.is_null() || lang.is_null() { return }\n-            let (test, shouldfail, ignore) =\n+            if text.is_null() { return }\n+            let (shouldfail, ignore) = if lang.is_null() {\n+                (false, false)\n+            } else {\n                 vec::raw::buf_as_slice((*lang).data,\n                                        (*lang).size as uint, |lang| {\n                     let s = str::from_utf8(lang).unwrap();\n-                    (s.contains(\"rust\"), s.contains(\"should_fail\"),\n-                     s.contains(\"ignore\"))\n-                });\n-            if !test { return }\n+                    (s.contains(\"should_fail\"), s.contains(\"ignore\"))\n+                })\n+            };\n+            if ignore { return }\n             vec::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n                 let tests: &mut ::test::Collector = intrinsics::transmute(opaque);\n                 let text = str::from_utf8(text).unwrap();\n                 let mut lines = text.lines().map(|l| stripped_filtered_line(l).unwrap_or(l));\n                 let text = lines.to_owned_vec().connect(\"\\n\");\n-                tests.add_test(text, ignore, shouldfail);\n+                tests.add_test(text, shouldfail);\n             })\n         }\n     }"}, {"sha": "43128274c2869ecefd0269a77d2996b5c2da6e1f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6667f90292d87271204caeef451cf2a977a80fa4/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6667f90292d87271204caeef451cf2a977a80fa4/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=6667f90292d87271204caeef451cf2a977a80fa4", "patch": "@@ -94,7 +94,7 @@ pub fn run(input: &str, matches: &getopts::Matches) -> int {\n     0\n }\n \n-fn runtest(test: &str, cratename: &str, libs: HashSet<Path>) {\n+fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool) {\n     let test = maketest(test, cratename);\n     let parsesess = parse::new_parse_sess();\n     let input = driver::StrInput(test);\n@@ -130,9 +130,10 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>) {\n     match out {\n         Err(e) => fail!(\"couldn't run the test: {}\", e),\n         Ok(out) => {\n-            if !out.status.success() {\n-                fail!(\"test executable failed:\\n{}\",\n-                      str::from_utf8(out.error));\n+            if should_fail && out.status.success() {\n+                fail!(\"test executable succeeded when it should have failed\");\n+            } else if !should_fail && !out.status.success() {\n+                fail!(\"test executable failed:\\n{}\", str::from_utf8(out.error));\n             }\n         }\n     }\n@@ -169,7 +170,7 @@ pub struct Collector {\n }\n \n impl Collector {\n-    pub fn add_test(&mut self, test: &str, ignore: bool, should_fail: bool) {\n+    pub fn add_test(&mut self, test: &str, should_fail: bool) {\n         let test = test.to_owned();\n         let name = format!(\"{}_{}\", self.names.connect(\"::\"), self.cnt);\n         self.cnt += 1;\n@@ -180,11 +181,11 @@ impl Collector {\n         self.tests.push(test::TestDescAndFn {\n             desc: test::TestDesc {\n                 name: test::DynTestName(name),\n-                ignore: ignore,\n-                should_fail: should_fail,\n+                ignore: false,\n+                should_fail: false, // compiler failures are test failures\n             },\n             testfn: test::DynTestFn(proc() {\n-                runtest(test, cratename, libs);\n+                runtest(test, cratename, libs, should_fail);\n             }),\n         });\n     }"}]}