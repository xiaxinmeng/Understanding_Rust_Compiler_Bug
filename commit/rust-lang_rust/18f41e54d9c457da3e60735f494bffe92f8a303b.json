{"sha": "18f41e54d9c457da3e60735f494bffe92f8a303b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZjQxZTU0ZDljNDU3ZGEzZTYwNzM1ZjQ5NGJmZmU5MmY4YTMwM2I=", "commit": {"author": {"name": "Michal 'vorner' Vaner", "email": "vorner@vorner.cz", "date": "2018-08-21T17:57:59Z"}, "committer": {"name": "Michal 'vorner' Vaner", "email": "vorner@vorner.cz", "date": "2018-08-21T18:03:54Z"}, "message": "Suggest direct raw-pointer dereference\n\nPeople often come looking for some kind of `as_ref_unchecked` method on\nraw pointers that would give them `&T` and not `Option<&T>` when they\nare sure the pointer is not NULL.\n\nThere's no such method, but taking a reference of the dereferenced\npointer accomplishes the same thing. Therefore, suggest using that, at\nthe `as_ref` site \u2012 it's a place people are likely going to look into.", "tree": {"sha": "f9b3d571627fb672846d16ac0a5b043dfa01fd5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9b3d571627fb672846d16ac0a5b043dfa01fd5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18f41e54d9c457da3e60735f494bffe92f8a303b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEQ8wy/3jh6tM0kr/e9wDQwBnkxm8FAlt8VA0ACgkQ9wDQwBnk\nxm98cRAAx2+VXVV5HF9/clFYyZ+5UfFoeykoPcGZsoSu9W843j9Fma8H/fZKk2Lq\nWzJVi1tYRH9kSVh7dxUFo07w6uZdZP83twQXoGtBtLbG7dXqYux6ukelBbpi9pEd\nxG/y0J0mGuOTDRa5Tf0nS+mSu1P3VluHD44kC3YnsPQAGXKg99vMwc36WkqZIl3j\nqX7D428ot669MczsUjiJUiOQbqakhaGxM+JDy0QEJBOeGiRmE4+HqQJIfZ672j3N\nWsAG9Y6EoLhvhnbku6x2rXKMlEFDA2wOuRs51nlnsYy42kwvHiZlMbgR/ER8hno2\nHY2agqHXi7K+bCLYiRfpJMmcitndu57G/cUOxnL33+A6Pbe2De0/+4rmWpGQLwF5\n41V0o8JdX38nVzDaox27Gc+cBzGPRvRYYZPEst/y6znKzTraDZhEUTBMIs509ZTH\nfJzk/axH3lUf1bvTRwJnb1VCxYRGFpb97+LGM/nDSoVRfEI8XI5bacS3MqkOZ2Hd\n8cHS2n66htH32XuZ83xVOxD6HiBY0eXM9Kd+Pst/6ncnN9ZaCzQTtqsxw2ou5zx7\n8OaI3bWi8gt4LCiX1L6DFTocn4j8vJIp5JEj9LJVK70/leR9oCOx7fl7xnc8DcNS\n+9SuAgyHDJbqGAtt1znlGE37sUo3ld6hTUe2Ma5dPEds+CediTE=\n=CE6N\n-----END PGP SIGNATURE-----", "payload": "tree f9b3d571627fb672846d16ac0a5b043dfa01fd5f\nparent a9d496796f091f42c8bac60c5c9ca05e6ca5dcda\nauthor Michal 'vorner' Vaner <vorner@vorner.cz> 1534874279 +0200\ncommitter Michal 'vorner' Vaner <vorner@vorner.cz> 1534874634 +0200\n\nSuggest direct raw-pointer dereference\n\nPeople often come looking for some kind of `as_ref_unchecked` method on\nraw pointers that would give them `&T` and not `Option<&T>` when they\nare sure the pointer is not NULL.\n\nThere's no such method, but taking a reference of the dereferenced\npointer accomplishes the same thing. Therefore, suggest using that, at\nthe `as_ref` site \u2012 it's a place people are likely going to look into.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18f41e54d9c457da3e60735f494bffe92f8a303b", "html_url": "https://github.com/rust-lang/rust/commit/18f41e54d9c457da3e60735f494bffe92f8a303b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18f41e54d9c457da3e60735f494bffe92f8a303b/comments", "author": {"login": "vorner", "id": 11783500, "node_id": "MDQ6VXNlcjExNzgzNTAw", "avatar_url": "https://avatars.githubusercontent.com/u/11783500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vorner", "html_url": "https://github.com/vorner", "followers_url": "https://api.github.com/users/vorner/followers", "following_url": "https://api.github.com/users/vorner/following{/other_user}", "gists_url": "https://api.github.com/users/vorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/vorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vorner/subscriptions", "organizations_url": "https://api.github.com/users/vorner/orgs", "repos_url": "https://api.github.com/users/vorner/repos", "events_url": "https://api.github.com/users/vorner/events{/privacy}", "received_events_url": "https://api.github.com/users/vorner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vorner", "id": 11783500, "node_id": "MDQ6VXNlcjExNzgzNTAw", "avatar_url": "https://avatars.githubusercontent.com/u/11783500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vorner", "html_url": "https://github.com/vorner", "followers_url": "https://api.github.com/users/vorner/followers", "following_url": "https://api.github.com/users/vorner/following{/other_user}", "gists_url": "https://api.github.com/users/vorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/vorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vorner/subscriptions", "organizations_url": "https://api.github.com/users/vorner/orgs", "repos_url": "https://api.github.com/users/vorner/repos", "events_url": "https://api.github.com/users/vorner/events{/privacy}", "received_events_url": "https://api.github.com/users/vorner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9d496796f091f42c8bac60c5c9ca05e6ca5dcda", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d496796f091f42c8bac60c5c9ca05e6ca5dcda", "html_url": "https://github.com/rust-lang/rust/commit/a9d496796f091f42c8bac60c5c9ca05e6ca5dcda"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "6f248a71a4c8ffdb6ca4ffb6c115e409ed013509", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/18f41e54d9c457da3e60735f494bffe92f8a303b/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18f41e54d9c457da3e60735f494bffe92f8a303b/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=18f41e54d9c457da3e60735f494bffe92f8a303b", "patch": "@@ -582,6 +582,21 @@ impl<T: ?Sized> *const T {\n     ///     }\n     /// }\n     /// ```\n+    ///\n+    /// # Null-unchecked version\n+    ///\n+    /// If you are sure the pointer can never be null and are looking for some kind of\n+    /// `as_ref_unchecked` that returns the `&T` instead of `Option<&T>, know that you can\n+    /// dereference the pointer directly.\n+    ///\n+    /// ```\n+    /// let ptr: *const u8 = &10u8 as *const u8;\n+    ///\n+    /// unsafe {\n+    ///     let val_back = &*ptr;\n+    ///     println!(\"We got back the value: {}!\", val_back);\n+    /// }\n+    /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n     pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n@@ -1303,6 +1318,21 @@ impl<T: ?Sized> *mut T {\n     ///     }\n     /// }\n     /// ```\n+    ///\n+    /// # Null-unchecked version\n+    ///\n+    /// If you are sure the pointer can never be null and are looking for some kind of\n+    /// `as_ref_unchecked` that returns the `&T` instead of `Option<&T>, know that you can\n+    /// dereference the pointer directly.\n+    ///\n+    /// ```\n+    /// let ptr: *mut u8 = &mut 10u8 as *mut u8;\n+    ///\n+    /// unsafe {\n+    ///     let val_back = &*ptr;\n+    ///     println!(\"We got back the value: {}!\", val_back);\n+    /// }\n+    /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n     #[inline]\n     pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {"}]}