{"sha": "f1003546db194038b60ae544ee0ff5eba117adb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMDAzNTQ2ZGIxOTQwMzhiNjBhZTU0NGVlMGZmNWViYTExN2FkYjk=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-12T01:24:12Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-08-12T22:03:44Z"}, "message": "Reduce genericity in Scan", "tree": {"sha": "f51484a6c11bd538b564a1f725148e75c6f4968c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f51484a6c11bd538b564a1f725148e75c6f4968c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1003546db194038b60ae544ee0ff5eba117adb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1003546db194038b60ae544ee0ff5eba117adb9", "html_url": "https://github.com/rust-lang/rust/commit/f1003546db194038b60ae544ee0ff5eba117adb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1003546db194038b60ae544ee0ff5eba117adb9/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f82c0c210f970094499e277a23fa9af613515f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f82c0c210f970094499e277a23fa9af613515f0", "html_url": "https://github.com/rust-lang/rust/commit/0f82c0c210f970094499e277a23fa9af613515f0"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "7b46fd686de55064cad70b2ccdd1ee319e847113", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f1003546db194038b60ae544ee0ff5eba117adb9/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1003546db194038b60ae544ee0ff5eba117adb9/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=f1003546db194038b60ae544ee0ff5eba117adb9", "patch": "@@ -1900,7 +1900,8 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n \n     #[inline]\n     fn next(&mut self) -> Option<B> {\n-        self.iter.next().and_then(|a| (self.f)(&mut self.state, a))\n+        let a = self.iter.next()?;\n+        (self.f)(&mut self.state, a)\n     }\n \n     #[inline]\n@@ -1910,17 +1911,25 @@ impl<B, I, St, F> Iterator for Scan<I, St, F> where\n     }\n \n     #[inline]\n-    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R where\n+    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R where\n         Self: Sized, Fold: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n     {\n+        fn scan<'a, T, St, B, Acc, R: Try<Ok = Acc>>(\n+            state: &'a mut St,\n+            f: &'a mut impl FnMut(&mut St, T) -> Option<B>,\n+            mut fold: impl FnMut(Acc, B) -> R + 'a,\n+        ) -> impl FnMut(Acc, T) -> LoopState<Acc, R> + 'a {\n+            move |acc, x| {\n+                match f(state, x) {\n+                    None => LoopState::Break(Try::from_ok(acc)),\n+                    Some(x) => LoopState::from_try(fold(acc, x)),\n+                }\n+            }\n+        }\n+\n         let state = &mut self.state;\n         let f = &mut self.f;\n-        self.iter.try_fold(init, move |acc, x| {\n-            match f(state, x) {\n-                None => LoopState::Break(Try::from_ok(acc)),\n-                Some(x) => LoopState::from_try(fold(acc, x)),\n-            }\n-        }).into_try()\n+        self.iter.try_fold(init, scan(state, f, fold)).into_try()\n     }\n }\n "}]}