{"sha": "3983ccca4ac46bb7b206a5b373b10c9822280931", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ODNjY2NhNGFjNDZiYjdiMjA2YTViMzczYjEwYzk4MjIyODA5MzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-20T13:52:33Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-20T13:52:33Z"}, "message": "Merge #1566\n\n1566: align SyntaxText API with upstream r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e72c3798558b7b0494990d1c994ebd9c0f3c03f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e72c3798558b7b0494990d1c994ebd9c0f3c03f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3983ccca4ac46bb7b206a5b373b10c9822280931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3983ccca4ac46bb7b206a5b373b10c9822280931", "html_url": "https://github.com/rust-lang/rust/commit/3983ccca4ac46bb7b206a5b373b10c9822280931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3983ccca4ac46bb7b206a5b373b10c9822280931/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "dac6adbef90286f053f034eace9df65d6a19c0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac6adbef90286f053f034eace9df65d6a19c0ff", "html_url": "https://github.com/rust-lang/rust/commit/dac6adbef90286f053f034eace9df65d6a19c0ff"}, {"sha": "f6bcc2d7459a3e10090391a6f9b9a2789e9cab55", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6bcc2d7459a3e10090391a6f9b9a2789e9cab55", "html_url": "https://github.com/rust-lang/rust/commit/f6bcc2d7459a3e10090391a6f9b9a2789e9cab55"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "59ca88468b59fbd047a685434791855e42e77fd2", "filename": "crates/ra_assists/src/add_impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs?ref=3983ccca4ac46bb7b206a5b373b10c9822280931", "patch": "@@ -1,3 +1,5 @@\n+use std::fmt::Write;\n+\n use hir::db::HirDatabase;\n use join_to_string::join;\n use ra_syntax::{\n@@ -17,7 +19,7 @@ pub(crate) fn add_impl(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         let mut buf = String::new();\n         buf.push_str(\"\\n\\nimpl\");\n         if let Some(type_params) = &type_params {\n-            type_params.syntax().text().push_to(&mut buf);\n+            write!(buf, \"{}\", type_params.syntax()).unwrap();\n         }\n         buf.push_str(\" \");\n         buf.push_str(name.text().as_str());"}, {"sha": "ab6c347ad908335990527d61eec8a7065f89c942", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=3983ccca4ac46bb7b206a5b373b10c9822280931", "patch": "@@ -95,7 +95,7 @@ impl AstEditor<ast::NamedFieldList> {\n         position: InsertPosition<&'_ ast::NamedField>,\n         field: &ast::NamedField,\n     ) {\n-        let is_multiline = self.ast().syntax().text().contains('\\n');\n+        let is_multiline = self.ast().syntax().text().contains_char('\\n');\n         let ws;\n         let space = if is_multiline {\n             ws = tokens::WsBuilder::new(&format!("}, {"sha": "911de2d48c5a1b57c9cd477672a6c4c7bbda28eb", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=3983ccca4ac46bb7b206a5b373b10c9822280931", "patch": "@@ -1,3 +1,5 @@\n+use std::fmt::Write;\n+\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -35,8 +37,7 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n             buf.push_str(\"let var_name = \");\n             TextUnit::of_str(\"let \")\n         };\n-\n-        expr.syntax().text().push_to(&mut buf);\n+        write!(buf, \"{}\", expr.syntax()).unwrap();\n         let full_stmt = ast::ExprStmt::cast(anchor_stmt.clone());\n         let is_full_stmt = if let Some(expr_stmt) = &full_stmt {\n             Some(expr.syntax().clone()) == expr_stmt.expr().map(|e| e.syntax().clone())"}, {"sha": "b09478d7a371e3a783709d575531a4a6ff098f31", "filename": "crates/ra_fmt/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_fmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_fmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2Fsrc%2Flib.rs?ref=3983ccca4ac46bb7b206a5b373b10c9822280931", "patch": "@@ -36,7 +36,7 @@ fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n \n pub fn extract_trivial_expression(block: &ast::Block) -> Option<ast::Expr> {\n     let expr = block.expr()?;\n-    if expr.syntax().text().contains('\\n') {\n+    if expr.syntax().text().contains_char('\\n') {\n         return None;\n     }\n     let non_trivial_children = block.syntax().children().filter(|it| match it.kind() {"}, {"sha": "be499e485b9970c6a46ab95e77ba83477b6a283e", "filename": "crates/ra_ide_api/src/display/short_label.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=3983ccca4ac46bb7b206a5b373b10c9822280931", "patch": "@@ -1,3 +1,5 @@\n+use std::fmt::Write;\n+\n use ra_syntax::ast::{self, AstNode, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n \n pub(crate) trait ShortLabel {\n@@ -71,8 +73,7 @@ where\n     let mut buf = short_label_from_node(node, prefix)?;\n \n     if let Some(type_ref) = node.ascribed_type() {\n-        buf.push_str(\": \");\n-        type_ref.syntax().text().push_to(&mut buf);\n+        write!(buf, \": {}\", type_ref.syntax()).unwrap();\n     }\n \n     Some(buf)\n@@ -82,7 +83,7 @@ fn short_label_from_node<T>(node: &T, label: &str) -> Option<String>\n where\n     T: NameOwner + VisibilityOwner,\n {\n-    let mut buf = node.visibility().map(|v| format!(\"{} \", v.syntax().text())).unwrap_or_default();\n+    let mut buf = node.visibility().map(|v| format!(\"{} \", v.syntax())).unwrap_or_default();\n     buf.push_str(label);\n     buf.push_str(node.name()?.text().as_str());\n     Some(buf)"}, {"sha": "571d1c59587026d52f2c89c985f9662d775ae2ee", "filename": "crates/ra_ide_api/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs?ref=3983ccca4ac46bb7b206a5b373b10c9822280931", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n         // Fold items that span multiple lines\n         if let Some(kind) = fold_kind(element.kind()) {\n             let is_multiline = match &element {\n-                SyntaxElement::Node(node) => node.text().contains('\\n'),\n+                SyntaxElement::Node(node) => node.text().contains_char('\\n'),\n                 SyntaxElement::Token(token) => token.text().contains('\\n'),\n             };\n             if is_multiline {"}, {"sha": "7f25f21081aeec4404068f646e97aab4966d8a6e", "filename": "crates/ra_ide_api/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs?ref=3983ccca4ac46bb7b206a5b373b10c9822280931", "patch": "@@ -13,7 +13,7 @@ pub fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n     let range = if range.is_empty() {\n         let syntax = file.syntax();\n         let text = syntax.text().slice(range.start()..);\n-        let pos = match text.find('\\n') {\n+        let pos = match text.find_char('\\n') {\n             None => return TextEditBuilder::default().finish(),\n             Some(pos) => pos,\n         };"}, {"sha": "5a1cbcc498324875a1ec19468e2223104bb7b0c1", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=3983ccca4ac46bb7b206a5b373b10c9822280931", "patch": "@@ -75,7 +75,7 @@ pub fn on_eq_typed(file: &SourceFile, eq_offset: TextUnit) -> Option<TextEdit> {\n         if expr_range.contains(eq_offset) && eq_offset != expr_range.start() {\n             return None;\n         }\n-        if file.syntax().text().slice(eq_offset..expr_range.start()).contains('\\n') {\n+        if file.syntax().text().slice(eq_offset..expr_range.start()).contains_char('\\n') {\n             return None;\n         }\n     } else {"}, {"sha": "652cb7a1e0845d59008bb5098404497c1ece1b5b", "filename": "crates/ra_syntax/src/syntax_text.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3983ccca4ac46bb7b206a5b373b10c9822280931/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs?ref=3983ccca4ac46bb7b206a5b373b10c9822280931", "patch": "@@ -57,25 +57,15 @@ impl SyntaxText {\n         }\n     }\n \n-    pub fn push_to(&self, buf: &mut String) {\n-        self.for_each_chunk(|chunk| buf.push_str(chunk))\n-    }\n-\n-    pub fn to_string(&self) -> String {\n-        let mut buf = String::new();\n-        self.push_to(&mut buf);\n-        buf\n-    }\n-\n     pub fn to_smol_string(&self) -> SmolStr {\n         self.to_string().into()\n     }\n \n-    pub fn contains(&self, c: char) -> bool {\n+    pub fn contains_char(&self, c: char) -> bool {\n         self.try_for_each_chunk(|chunk| if chunk.contains(c) { Err(()) } else { Ok(()) }).is_err()\n     }\n \n-    pub fn find(&self, c: char) -> Option<TextUnit> {\n+    pub fn find_char(&self, c: char) -> Option<TextUnit> {\n         let mut acc: TextUnit = 0.into();\n         let res = self.try_for_each_chunk(|chunk| {\n             if let Some(pos) = chunk.find(c) {\n@@ -158,7 +148,7 @@ impl fmt::Debug for SyntaxText {\n \n impl fmt::Display for SyntaxText {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&self.to_string(), f)\n+        self.try_for_each_chunk(|chunk| fmt::Display::fmt(chunk, f))\n     }\n }\n "}]}