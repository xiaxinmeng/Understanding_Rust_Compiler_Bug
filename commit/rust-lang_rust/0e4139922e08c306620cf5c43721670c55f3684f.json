{"sha": "0e4139922e08c306620cf5c43721670c55f3684f", "node_id": "C_kwDOAAsO6NoAKDBlNDEzOTkyMmUwOGMzMDY2MjBjZjVjNDM3MjE2NzBjNTVmMzY4NGY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-14T13:17:11Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-13T16:39:59Z"}, "message": "Put patched sources in build/ instead of download/", "tree": {"sha": "4c806dfa81e294871fd8436b4fc5a60785da3572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c806dfa81e294871fd8436b4fc5a60785da3572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e4139922e08c306620cf5c43721670c55f3684f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4139922e08c306620cf5c43721670c55f3684f", "html_url": "https://github.com/rust-lang/rust/commit/0e4139922e08c306620cf5c43721670c55f3684f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e4139922e08c306620cf5c43721670c55f3684f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0b8896189f5b2fb472d54ed389681dff97d907b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b8896189f5b2fb472d54ed389681dff97d907b", "html_url": "https://github.com/rust-lang/rust/commit/d0b8896189f5b2fb472d54ed389681dff97d907b"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "ba15db9f9666bafbcf9620b2c4a22c9e6fa55ec0", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e4139922e08c306620cf5c43721670c55f3684f/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4139922e08c306620cf5c43721670c55f3684f/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=0e4139922e08c306620cf5c43721670c55f3684f", "patch": "@@ -7,7 +7,7 @@ use super::{CodegenBackend, SysrootKind};\n static ABI_CAFE_REPO: GitRepo =\n     GitRepo::github(\"Gankra\", \"abi-cafe\", \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\", \"abi-cafe\");\n \n-static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe\");\n+static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe_target\");\n \n pub(crate) fn run(\n     channel: &str,"}, {"sha": "7ceda34bfac09410ae670962f65cd508d54d0e0f", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e4139922e08c306620cf5c43721670c55f3684f/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4139922e08c306620cf5c43721670c55f3684f/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=0e4139922e08c306620cf5c43721670c55f3684f", "patch": "@@ -156,7 +156,7 @@ impl SysrootTarget {\n }\n \n pub(crate) static ORIG_BUILD_SYSROOT: RelPath = RelPath::SOURCE.join(\"build_sysroot\");\n-pub(crate) static BUILD_SYSROOT: RelPath = RelPath::DOWNLOAD.join(\"sysroot\");\n+pub(crate) static BUILD_SYSROOT: RelPath = RelPath::BUILD.join(\"sysroot\");\n pub(crate) static SYSROOT_RUSTC_VERSION: RelPath = BUILD_SYSROOT.join(\"rustc_version\");\n pub(crate) static SYSROOT_SRC: RelPath = BUILD_SYSROOT.join(\"sysroot_src\");\n pub(crate) static STANDARD_LIBRARY: CargoProject ="}, {"sha": "7bb9eca294556af02f9838e60a3602f8c00933ff", "filename": "build_system/prepare.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0e4139922e08c306620cf5c43721670c55f3684f/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4139922e08c306620cf5c43721670c55f3684f/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=0e4139922e08c306620cf5c43721670c55f3684f", "patch": "@@ -39,9 +39,6 @@ fn prepare_stdlib(dirs: &Dirs, rustc: &Path) {\n     let rustc_version = get_rustc_version(rustc);\n     fs::write(SYSROOT_RUSTC_VERSION.to_path(dirs), &rustc_version).unwrap();\n \n-    eprintln!(\"[GIT] init\");\n-    init_git_repo(&SYSROOT_SRC.to_path(dirs));\n-\n     apply_patches(dirs, \"stdlib\", &SYSROOT_SRC.to_path(dirs));\n }\n \n@@ -51,15 +48,13 @@ fn prepare_coretests(dirs: &Dirs, rustc: &Path) {\n \n     eprintln!(\"[COPY] coretests src\");\n \n-    fs::create_dir_all(LIBCORE_TESTS_SRC.to_path(dirs)).unwrap();\n+    // FIXME ensure builds error out or update the copy if any of the files copied here change\n+    LIBCORE_TESTS_SRC.ensure_fresh(dirs);\n     copy_dir_recursively(\n         &sysroot_src_orig.join(\"library/core/tests\"),\n         &LIBCORE_TESTS_SRC.to_path(dirs),\n     );\n \n-    eprintln!(\"[GIT] init\");\n-    init_git_repo(&LIBCORE_TESTS_SRC.to_path(dirs));\n-\n     apply_patches(dirs, \"coretests\", &LIBCORE_TESTS_SRC.to_path(dirs));\n }\n \n@@ -85,23 +80,23 @@ impl GitRepo {\n \n     pub(crate) const fn source_dir(&self) -> RelPath {\n         match self.url {\n-            GitRepoUrl::Github { user: _, repo } => RelPath::DOWNLOAD.join(repo),\n+            GitRepoUrl::Github { user: _, repo } => RelPath::BUILD.join(repo),\n         }\n     }\n \n     pub(crate) fn fetch(&self, dirs: &Dirs) {\n+        let download_dir = match self.url {\n+            GitRepoUrl::Github { user: _, repo } => RelPath::DOWNLOAD.join(repo).to_path(dirs),\n+        };\n+        let source_dir = self.source_dir();\n         match self.url {\n             GitRepoUrl::Github { user, repo } => {\n-                clone_repo_shallow_github(\n-                    dirs,\n-                    &self.source_dir().to_path(dirs),\n-                    user,\n-                    repo,\n-                    self.rev,\n-                );\n+                clone_repo_shallow_github(dirs, &download_dir, user, repo, self.rev);\n             }\n         }\n-        apply_patches(dirs, self.patch_name, &self.source_dir().to_path(dirs));\n+        source_dir.ensure_fresh(dirs);\n+        copy_dir_recursively(&download_dir, &source_dir.to_path(dirs));\n+        apply_patches(dirs, self.patch_name, &source_dir.to_path(dirs));\n     }\n }\n \n@@ -118,6 +113,8 @@ fn clone_repo(download_dir: &Path, repo: &str, rev: &str) {\n     let mut checkout_cmd = git_command(download_dir, \"checkout\");\n     checkout_cmd.arg(\"-q\").arg(rev);\n     spawn_and_wait(checkout_cmd);\n+\n+    std::fs::remove_dir_all(download_dir.join(\".git\")).unwrap();\n }\n \n fn clone_repo_shallow_github(dirs: &Dirs, download_dir: &Path, user: &str, repo: &str, rev: &str) {\n@@ -165,8 +162,6 @@ fn clone_repo_shallow_github(dirs: &Dirs, download_dir: &Path, user: &str, repo:\n     // Rename unpacked dir to the expected name\n     std::fs::rename(archive_dir, &download_dir).unwrap();\n \n-    init_git_repo(&download_dir);\n-\n     // Cleanup\n     std::fs::remove_file(archive_file).unwrap();\n }\n@@ -206,6 +201,8 @@ fn get_patches(dirs: &Dirs, crate_name: &str) -> Vec<PathBuf> {\n }\n \n fn apply_patches(dirs: &Dirs, crate_name: &str, target_dir: &Path) {\n+    init_git_repo(&target_dir);\n+\n     if crate_name == \"<none>\" {\n         return;\n     }"}, {"sha": "f975e43b13d3e54d9d4ce8755a677fe51696a0c8", "filename": "build_system/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e4139922e08c306620cf5c43721670c55f3684f/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4139922e08c306620cf5c43721670c55f3684f/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=0e4139922e08c306620cf5c43721670c55f3684f", "patch": "@@ -97,12 +97,12 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n pub(crate) static RAND_REPO: GitRepo =\n     GitRepo::github(\"rust-random\", \"rand\", \"50b9a447410860af8d6db9a208c3576886955874\", \"rand\");\n \n-pub(crate) static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand\");\n+pub(crate) static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand_target\");\n \n pub(crate) static REGEX_REPO: GitRepo =\n     GitRepo::github(\"rust-lang\", \"regex\", \"32fed9429eafba0ae92a64b01796a0c5a75b88c8\", \"regex\");\n \n-pub(crate) static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex\");\n+pub(crate) static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex_target\");\n \n pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"rust-lang\",\n@@ -112,9 +112,9 @@ pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n );\n \n pub(crate) static PORTABLE_SIMD: CargoProject =\n-    CargoProject::new(&PORTABLE_SIMD_REPO.source_dir(), \"portable_simd\");\n+    CargoProject::new(&PORTABLE_SIMD_REPO.source_dir(), \"portable_simd_target\");\n \n-pub(crate) static LIBCORE_TESTS_SRC: RelPath = RelPath::DOWNLOAD.join(\"coretests_src\");\n+pub(crate) static LIBCORE_TESTS_SRC: RelPath = RelPath::BUILD.join(\"coretests_src\");\n \n pub(crate) static LIBCORE_TESTS: CargoProject = CargoProject::new(&LIBCORE_TESTS_SRC, \"core_tests\");\n "}]}