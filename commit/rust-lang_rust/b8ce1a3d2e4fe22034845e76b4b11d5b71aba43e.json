{"sha": "b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4Y2UxYTNkMmU0ZmUyMjAzNDg0NWU3NmI0YjExZDViNzFhYmE0M2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-18T10:57:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-18T10:57:55Z"}, "message": "Auto merge of #43901 - GuillaumeGomez:unsized-union-field, r=petrochenkov\n\nudpdate error message for unsized union field\n\nFixes #36312.", "tree": {"sha": "107a5fb6248f14afedfeb5a7875b8987b364fe4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/107a5fb6248f14afedfeb5a7875b8987b364fe4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e", "html_url": "https://github.com/rust-lang/rust/commit/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6ab51165a1b67409c1ee1efeaf0cd139dc6c592", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ab51165a1b67409c1ee1efeaf0cd139dc6c592", "html_url": "https://github.com/rust-lang/rust/commit/e6ab51165a1b67409c1ee1efeaf0cd139dc6c592"}, {"sha": "c3c99b92c7cd188c0f85c3e2f47ad6dc6ee975ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c99b92c7cd188c0f85c3e2f47ad6dc6ee975ba", "html_url": "https://github.com/rust-lang/rust/commit/c3c99b92c7cd188c0f85c3e2f47ad6dc6ee975ba"}], "stats": {"total": 101, "additions": 91, "deletions": 10}, "files": [{"sha": "400f46d66f8681d0e8169e046c2f98564022d8b6", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e", "patch": "@@ -42,6 +42,7 @@ use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n use syntax::tokenstream::TokenStream;\n use syntax::util::ThinVec;\n+use ty::AdtKind;\n \n use rustc_data_structures::indexed_vec;\n \n@@ -1789,6 +1790,15 @@ impl Item_ {\n             ItemDefaultImpl(..) => \"item\",\n         }\n     }\n+\n+    pub fn adt_kind(&self) -> Option<AdtKind> {\n+        match *self {\n+            ItemStruct(..) => Some(AdtKind::Struct),\n+            ItemUnion(..) => Some(AdtKind::Union),\n+            ItemEnum(..) => Some(AdtKind::Enum),\n+            _ => None,\n+        }\n+    }\n }\n \n /// A reference from an trait to one of its associated items. This"}, {"sha": "3e64c8c7dea997ad668916246eb63f0b9bfc633e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e", "patch": "@@ -1111,8 +1111,19 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ObligationCauseCode::StructInitializerSized => {\n                 err.note(\"structs must have a statically known size to be initialized\");\n             }\n-            ObligationCauseCode::FieldSized => {\n-                err.note(\"only the last field of a struct may have a dynamically sized type\");\n+            ObligationCauseCode::FieldSized(ref item) => {\n+                match *item {\n+                    AdtKind::Struct => {\n+                        err.note(\"only the last field of a struct may have a dynamically \\\n+                                  sized type\");\n+                    }\n+                    AdtKind::Union => {\n+                        err.note(\"no field of a union may have a dynamically sized type\");\n+                    }\n+                    AdtKind::Enum => {\n+                        err.note(\"no field of an enum variant may have a dynamically sized type\");\n+                    }\n+                }\n             }\n             ObligationCauseCode::ConstSized => {\n                 err.note(\"constant expressions must have a statically known size\");\n@@ -1154,8 +1165,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder) {\n         let current_limit = self.tcx.sess.recursion_limit.get();\n         let suggested_limit = current_limit * 2;\n-        err.help(&format!(\n-                          \"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n+        err.help(&format!(\"consider adding a `#![recursion_limit=\\\"{}\\\"]` attribute to your crate\",\n                           suggested_limit));\n     }\n }"}, {"sha": "5bae82c1a332fee87e53ac62087c34c4b70cfe85", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e", "patch": "@@ -20,7 +20,7 @@ use hir::def_id::DefId;\n use middle::region::RegionMaps;\n use middle::free_region::FreeRegionMap;\n use ty::subst::Substs;\n-use ty::{self, Ty, TyCtxt, TypeFoldable, ToPredicate};\n+use ty::{self, AdtKind, Ty, TyCtxt, TypeFoldable, ToPredicate};\n use ty::error::{ExpectedFound, TypeError};\n use infer::{InferCtxt};\n \n@@ -133,7 +133,7 @@ pub enum ObligationCauseCode<'tcx> {\n     RepeatVec,\n \n     /// Types of fields (other than the last) in a struct must be sized.\n-    FieldSized,\n+    FieldSized(AdtKind),\n \n     /// Constant expressions must be sized.\n     ConstSized,"}, {"sha": "e80e82fa94ff6dd70091d7b891a87f74ca548324", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::ReturnType(id) => Some(super::ReturnType(id)),\n             super::SizedReturnType => Some(super::SizedReturnType),\n             super::RepeatVec => Some(super::RepeatVec),\n-            super::FieldSized => Some(super::FieldSized),\n+            super::FieldSized(item) => Some(super::FieldSized(item)),\n             super::ConstSized => Some(super::ConstSized),\n             super::SharedStatic => Some(super::SharedStatic),\n             super::BuiltinDerivedObligation(ref cause) => {\n@@ -484,7 +484,7 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::SizedReturnType |\n             super::ReturnNoExpression |\n             super::RepeatVec |\n-            super::FieldSized |\n+            super::FieldSized(_) |\n             super::ConstSized |\n             super::SharedStatic |\n             super::BlockTailExpression(_) |\n@@ -532,7 +532,7 @@ impl<'tcx> TypeFoldable<'tcx> for traits::ObligationCauseCode<'tcx> {\n             super::SizedReturnType |\n             super::ReturnNoExpression |\n             super::RepeatVec |\n-            super::FieldSized |\n+            super::FieldSized(_) |\n             super::ConstSized |\n             super::SharedStatic |\n             super::BlockTailExpression(_) |"}, {"sha": "69f045ab4e96a0da3ce286333a230ae470d9b87e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e", "patch": "@@ -233,7 +233,10 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                         fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n                         traits::ObligationCause::new(field.span,\n                                                      fcx.body_id,\n-                                                     traits::FieldSized));\n+                                                     traits::FieldSized(match item.node.adt_kind() {\n+                                                        Some(i) => i,\n+                                                        None => bug!(),\n+                                                     })));\n                 }\n \n                 // All field types must be well-formed."}, {"sha": "eeca5ab740450494ae97b80515ddedbbb4096f30", "filename": "src/test/ui/union-sized-field.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Ftest%2Fui%2Funion-sized-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Ftest%2Fui%2Funion-sized-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion-sized-field.rs?ref=b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+union Foo<T: ?Sized> {\n+    value: T,\n+}\n+\n+struct Foo2<T: ?Sized> {\n+    value: T,\n+    t: u32,\n+}\n+\n+enum Foo3<T: ?Sized> {\n+    Value(T),\n+}\n+\n+fn main() {}"}, {"sha": "ea90d97c4c3d1f1d2f6150582a287d82d727a060", "filename": "src/test/ui/union-sized-field.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Ftest%2Fui%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e/src%2Ftest%2Fui%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion-sized-field.stderr?ref=b8ce1a3d2e4fe22034845e76b4b11d5b71aba43e", "patch": "@@ -0,0 +1,32 @@\n+error[E0277]: the trait bound `T: std::marker::Sized` is not satisfied\n+  --> $DIR/union-sized-field.rs:14:5\n+   |\n+14 |     value: T,\n+   |     ^^^^^^^^ `T` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `T`\n+   = help: consider adding a `where T: std::marker::Sized` bound\n+   = note: no field of a union may have a dynamically sized type\n+\n+error[E0277]: the trait bound `T: std::marker::Sized` is not satisfied\n+  --> $DIR/union-sized-field.rs:18:5\n+   |\n+18 |     value: T,\n+   |     ^^^^^^^^ `T` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `T`\n+   = help: consider adding a `where T: std::marker::Sized` bound\n+   = note: only the last field of a struct may have a dynamically sized type\n+\n+error[E0277]: the trait bound `T: std::marker::Sized` is not satisfied\n+  --> $DIR/union-sized-field.rs:23:11\n+   |\n+23 |     Value(T),\n+   |           ^^ `T` does not have a constant size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `T`\n+   = help: consider adding a `where T: std::marker::Sized` bound\n+   = note: no field of an enum variant may have a dynamically sized type\n+\n+error: aborting due to 3 previous errors\n+"}]}