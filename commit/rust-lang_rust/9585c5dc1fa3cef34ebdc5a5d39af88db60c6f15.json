{"sha": "9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ODVjNWRjMWZhM2NlZjM0ZWJkYzVhNWQzOWFmODhkYjYwYzZmMTU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-07T14:03:57Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-10T08:22:44Z"}, "message": "Introduce const_cstr!() macro and use it where applicable.", "tree": {"sha": "e8c9e6ad76c04c6efd5ad85fbe6946f528cf5e54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8c9e6ad76c04c6efd5ad85fbe6946f528cf5e54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15", "html_url": "https://github.com/rust-lang/rust/commit/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d43ed84207c7e58f363f46e5a438ff40f2b311", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d43ed84207c7e58f363f46e5a438ff40f2b311", "html_url": "https://github.com/rust-lang/rust/commit/f6d43ed84207c7e58f363f46e5a438ff40f2b311"}], "stats": {"total": 73, "additions": 56, "deletions": 17}, "files": [{"sha": "74f7e6f2ce752a28d4a53fae483bdcd88401ce12", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n //! Set and unset common attributes on LLVM values.\n \n-use std::ffi::{CStr, CString};\n+use std::ffi::CString;\n \n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n@@ -75,7 +75,7 @@ pub fn set_frame_pointer_elimination(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value)\n     if cx.sess().must_not_eliminate_frame_pointers() {\n         llvm::AddFunctionAttrStringValue(\n             llfn, llvm::AttributePlace::Function,\n-            cstr(\"no-frame-pointer-elim\\0\"), cstr(\"true\\0\"));\n+            const_cstr!(\"no-frame-pointer-elim\"), const_cstr!(\"true\"));\n     }\n }\n \n@@ -108,7 +108,7 @@ pub fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     // This is defined in the `compiler-builtins` crate for each architecture.\n     llvm::AddFunctionAttrStringValue(\n         llfn, llvm::AttributePlace::Function,\n-        cstr(\"probe-stack\\0\"), cstr(\"__rust_probestack\\0\"));\n+        const_cstr!(\"probe-stack\"), const_cstr!(\"__rust_probestack\"));\n }\n \n pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n@@ -202,7 +202,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value, id: DefId) {\n         let val = CString::new(features).unwrap();\n         llvm::AddFunctionAttrStringValue(\n             llfn, llvm::AttributePlace::Function,\n-            cstr(\"target-features\\0\"), &val);\n+            const_cstr!(\"target-features\"), &val);\n     }\n \n     // Note that currently the `wasm-import-module` doesn't do anything, but\n@@ -213,17 +213,13 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value, id: DefId) {\n             llvm::AddFunctionAttrStringValue(\n                 llfn,\n                 llvm::AttributePlace::Function,\n-                cstr(\"wasm-import-module\\0\"),\n+                const_cstr!(\"wasm-import-module\"),\n                 &module,\n             );\n         }\n     }\n }\n \n-fn cstr(s: &'static str) -> &CStr {\n-    CStr::from_bytes_with_nul(s.as_bytes()).expect(\"null-terminated string\")\n-}\n-\n pub fn provide(providers: &mut Providers) {\n     providers.target_features_whitelist = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "4415adc27d6dd2c52260b565fad9e516d32c1efc", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15", "patch": "@@ -1255,8 +1255,8 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             // Create the llvm.used variable\n             // This variable has type [N x i8*] and is stored in the llvm.metadata section\n             if !cx.used_statics.borrow().is_empty() {\n-                let name = CString::new(\"llvm.used\").unwrap();\n-                let section = CString::new(\"llvm.metadata\").unwrap();\n+                let name = const_cstr!(\"llvm.used\");\n+                let section = const_cstr!(\"llvm.metadata\");\n                 let array = C_array(Type::i8(&cx).ptr_to(), &*cx.used_statics.borrow());\n \n                 unsafe {"}, {"sha": "bc82886714ae1d7822e92e049a0d43ae4bb42021", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15", "patch": "@@ -975,7 +975,7 @@ impl Builder<'a, 'll, 'tcx> {\n                        parent: Option<&'ll Value>,\n                        args: &[&'ll Value]) -> &'ll Value {\n         self.count_insn(\"cleanuppad\");\n-        let name = CString::new(\"cleanuppad\").unwrap();\n+        let name = const_cstr!(\"cleanuppad\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCleanupPad(self.llbuilder,\n                                           parent,\n@@ -1001,7 +1001,7 @@ impl Builder<'a, 'll, 'tcx> {\n                      parent: &'ll Value,\n                      args: &[&'ll Value]) -> &'ll Value {\n         self.count_insn(\"catchpad\");\n-        let name = CString::new(\"catchpad\").unwrap();\n+        let name = const_cstr!(\"catchpad\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchPad(self.llbuilder, parent,\n                                         args.len() as c_uint, args.as_ptr(),\n@@ -1025,7 +1025,7 @@ impl Builder<'a, 'll, 'tcx> {\n         num_handlers: usize,\n     ) -> &'ll Value {\n         self.count_insn(\"catchswitch\");\n-        let name = CString::new(\"catchswitch\").unwrap();\n+        let name = const_cstr!(\"catchswitch\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchSwitch(self.llbuilder, parent, unwind,\n                                            num_handlers as c_uint,"}, {"sha": "5501e915976a352579dcf3ec7db0ba6e51269571", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15", "patch": "@@ -328,7 +328,7 @@ pub fn codegen_static<'a, 'tcx>(\n         } else {\n             // If we created the global with the wrong type,\n             // correct the type.\n-            let empty_string = CString::new(\"\").unwrap();\n+            let empty_string = const_cstr!(\"\");\n             let name_str_ref = CStr::from_ptr(llvm::LLVMGetValueName(g));\n             let name_string = CString::new(name_str_ref.to_bytes()).unwrap();\n             llvm::LLVMSetValueName(g, empty_string.as_ptr());"}, {"sha": "3bd1a1519b6b4df44d51d6119accf5e18cd4a639", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15", "patch": "@@ -883,7 +883,7 @@ pub fn compile_unit_metadata(tcx: TyCtxt,\n                                                           gcov_cu_info.as_ptr(),\n                                                           gcov_cu_info.len() as c_uint);\n \n-            let llvm_gcov_ident = CString::new(\"llvm.gcov\").unwrap();\n+            let llvm_gcov_ident = const_cstr!(\"llvm.gcov\");\n             llvm::LLVMAddNamedMetadataOperand(debug_context.llmod,\n                                               llvm_gcov_ident.as_ptr(),\n                                               gcov_metadata);\n@@ -1780,7 +1780,7 @@ pub fn create_vtable_metadata(\n         // later on in llvm/lib/IR/Value.cpp.\n         let empty_array = create_DIArray(DIB(cx), &[]);\n \n-        let name = CString::new(\"vtable\").unwrap();\n+        let name = const_cstr!(\"vtable\");\n \n         // Create a new one each time.  We don't want metadata caching\n         // here, because each vtable will refer to a unique containing"}, {"sha": "4589d973b6a41433455a789286c66f01fa020e2f", "filename": "src/librustc_data_structures/const_cstr.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_data_structures%2Fconst_cstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_data_structures%2Fconst_cstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fconst_cstr.rs?ref=9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// This macro creates a zero-overhead &CStr by adding a NUL terminator to\n+/// the string literal passed into it at compile-time. Use it like:\n+///\n+/// ```\n+///     let some_const_cstr = const_cstr!(\"abc\");\n+/// ```\n+///\n+/// The above is roughly equivalent to:\n+///\n+/// ```\n+///     let some_const_cstr = CStr::from_bytes_with_nul(b\"abc\\0\").unwrap()\n+/// ```\n+///\n+/// Note that macro only checks the string literal for internal NULs if\n+/// debug-assertions are enabled in order to avoid runtime overhead in release\n+/// builds.\n+#[macro_export]\n+macro_rules! const_cstr {\n+    ($s:expr) => ({\n+        use std::ffi::CStr;\n+\n+        let str_plus_nul = concat!($s, \"\\0\");\n+\n+        if cfg!(debug_assertions) {\n+            CStr::from_bytes_with_nul(str_plus_nul.as_bytes()).unwrap()\n+        } else {\n+            unsafe {\n+                CStr::from_bytes_with_nul_unchecked(str_plus_nul.as_bytes())\n+            }\n+        }\n+    })\n+}"}, {"sha": "bd11a2977ffb5457991378055f3643795034e3b7", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=9585c5dc1fa3cef34ebdc5a5d39af88db60c6f15", "patch": "@@ -60,6 +60,7 @@ pub mod array_vec;\n pub mod base_n;\n pub mod bitslice;\n pub mod bitvec;\n+pub mod const_cstr;\n pub mod flock;\n pub mod fx;\n pub mod graph;"}]}