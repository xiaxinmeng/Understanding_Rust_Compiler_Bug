{"sha": "2f8e2ff6ba7194424718e39f0482b6d350b5e170", "node_id": "C_kwDOAAsO6NoAKDJmOGUyZmY2YmE3MTk0NDI0NzE4ZTM5ZjA0ODJiNmQzNTBiNWUxNzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-11T07:22:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-11T07:22:29Z"}, "message": "Rollup merge of #91127 - scottmcm:ptr_to_from_bits, r=dtolnay\n\nAdd `<*{const|mut} T>::{to|from}_bits`\n\nNamed based on the floating-point methods of the same name, as those are also about returning the *representation* of the value.\n\nTracking issue: https://github.com/rust-lang/rust/issues/91126\n\nBased on the conversation in https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Adding.20methods.20as.20more.20specific.20versions.20of.20.60as.60/near/238391074\n\nr? `@joshtriplett`", "tree": {"sha": "07ebd5847fde2d41ab80ddd4fd2889f52848a669", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07ebd5847fde2d41ab80ddd4fd2889f52848a669"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f8e2ff6ba7194424718e39f0482b6d350b5e170", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtFG1CRBK7hj4Ov3rIwAA7j8IABp9utEXixQOtP5QDHg/whYV\nmBccTXfZxIMudi4iHHzTz+HBubqMtdQsE13Iz84bsBFGJe5+mpsMmQvF28mkvL71\nEDaekUV9uSDnwERegjnZoOPLpZPUx45ewWDQHL7uf6fr7fXRpOWkui6Xg9rLEqQk\nz6L2Q05XD+Y7MbxwL8nqpubMnaMfwMZvGuJM28xROM92FnfJZEU1lBAcymEwewhm\nvJnI+u4PQ7P7ZV+xPxpN8nOyvHh793gRmwILvh3dnpEXpsqJ56BovDuoy2/hYXVO\npxCJnzFtn+mBruUwid+e9ptbiWbBPcXbINjRhOIGB16lvyqFFqPtgMoHLz/4UXQ=\n=wjrS\n-----END PGP SIGNATURE-----\n", "payload": "tree 07ebd5847fde2d41ab80ddd4fd2889f52848a669\nparent c185610ebc19a0fc22e68472483dc69ea10b92fd\nparent 348a25044b6f263a61cd41cd3767c3d8d1e8da74\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639207349 +0100\ncommitter GitHub <noreply@github.com> 1639207349 +0100\n\nRollup merge of #91127 - scottmcm:ptr_to_from_bits, r=dtolnay\n\nAdd `<*{const|mut} T>::{to|from}_bits`\n\nNamed based on the floating-point methods of the same name, as those are also about returning the *representation* of the value.\n\nTracking issue: https://github.com/rust-lang/rust/issues/91126\n\nBased on the conversation in https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Adding.20methods.20as.20more.20specific.20versions.20of.20.60as.60/near/238391074\n\nr? `@joshtriplett`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8e2ff6ba7194424718e39f0482b6d350b5e170", "html_url": "https://github.com/rust-lang/rust/commit/2f8e2ff6ba7194424718e39f0482b6d350b5e170", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f8e2ff6ba7194424718e39f0482b6d350b5e170/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c185610ebc19a0fc22e68472483dc69ea10b92fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c185610ebc19a0fc22e68472483dc69ea10b92fd", "html_url": "https://github.com/rust-lang/rust/commit/c185610ebc19a0fc22e68472483dc69ea10b92fd"}, {"sha": "348a25044b6f263a61cd41cd3767c3d8d1e8da74", "url": "https://api.github.com/repos/rust-lang/rust/commits/348a25044b6f263a61cd41cd3767c3d8d1e8da74", "html_url": "https://github.com/rust-lang/rust/commit/348a25044b6f263a61cd41cd3767c3d8d1e8da74"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "3c716672113e5a405fe0bf8e4cec9973fc397630", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2f8e2ff6ba7194424718e39f0482b6d350b5e170/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8e2ff6ba7194424718e39f0482b6d350b5e170/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=2f8e2ff6ba7194424718e39f0482b6d350b5e170", "patch": "@@ -48,6 +48,54 @@ impl<T: ?Sized> *const T {\n         self as _\n     }\n \n+    /// Casts a pointer to its raw bits.\n+    ///\n+    /// This is equivalent to `as usize`, but is more specific to enhance readability.\n+    /// The inverse method is [`from_bits`](#method.from_bits).\n+    ///\n+    /// In particular, `*p as usize` and `p as usize` will both compile for\n+    /// pointers to numeric types but do very different things, so using this\n+    /// helps emphasize that reading the bits was intentional.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// let array = [13, 42];\n+    /// let p0: *const i32 = &array[0];\n+    /// assert_eq!(<*const _>::from_bits(p0.to_bits()), p0);\n+    /// let p1: *const i32 = &array[1];\n+    /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn to_bits(self) -> usize\n+    where\n+        T: Sized,\n+    {\n+        self as usize\n+    }\n+\n+    /// Creates a pointer from its raw bits.\n+    ///\n+    /// This is equivalent to `as *const T`, but is more specific to enhance readability.\n+    /// The inverse method is [`to_bits`](#method.to_bits).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// use std::ptr::NonNull;\n+    /// let dangling: *const u8 = NonNull::dangling().as_ptr();\n+    /// assert_eq!(<*const u8>::from_bits(1), dangling);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn from_bits(bits: usize) -> Self\n+    where\n+        T: Sized,\n+    {\n+        bits as Self\n+    }\n+\n     /// Decompose a (possibly wide) pointer into its address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts`]."}, {"sha": "5d4e37641ee84fc719f5abcca5ccfbd9da601fdd", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2f8e2ff6ba7194424718e39f0482b6d350b5e170/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8e2ff6ba7194424718e39f0482b6d350b5e170/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=2f8e2ff6ba7194424718e39f0482b6d350b5e170", "patch": "@@ -47,6 +47,55 @@ impl<T: ?Sized> *mut T {\n         self as _\n     }\n \n+    /// Casts a pointer to its raw bits.\n+    ///\n+    /// This is equivalent to `as usize`, but is more specific to enhance readability.\n+    /// The inverse method is [`from_bits`](#method.from_bits-1).\n+    ///\n+    /// In particular, `*p as usize` and `p as usize` will both compile for\n+    /// pointers to numeric types but do very different things, so using this\n+    /// helps emphasize that reading the bits was intentional.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// let mut array = [13, 42];\n+    /// let mut it = array.iter_mut();\n+    /// let p0: *mut i32 = it.next().unwrap();\n+    /// assert_eq!(<*mut _>::from_bits(p0.to_bits()), p0);\n+    /// let p1: *mut i32 = it.next().unwrap();\n+    /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn to_bits(self) -> usize\n+    where\n+        T: Sized,\n+    {\n+        self as usize\n+    }\n+\n+    /// Creates a pointer from its raw bits.\n+    ///\n+    /// This is equivalent to `as *mut T`, but is more specific to enhance readability.\n+    /// The inverse method is [`to_bits`](#method.to_bits-1).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_to_from_bits)]\n+    /// use std::ptr::NonNull;\n+    /// let dangling: *mut u8 = NonNull::dangling().as_ptr();\n+    /// assert_eq!(<*mut u8>::from_bits(1), dangling);\n+    /// ```\n+    #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    pub fn from_bits(bits: usize) -> Self\n+    where\n+        T: Sized,\n+    {\n+        bits as Self\n+    }\n+\n     /// Decompose a (possibly wide) pointer into its address and metadata components.\n     ///\n     /// The pointer can be later reconstructed with [`from_raw_parts_mut`]."}]}