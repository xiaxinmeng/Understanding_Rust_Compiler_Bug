{"sha": "24a728a8eb4832568509eb757c2374934a76cb98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YTcyOGE4ZWI0ODMyNTY4NTA5ZWI3NTdjMjM3NDkzNGE3NmNiOTg=", "commit": {"author": {"name": "MaulingMonkey", "email": "git@maulingmonkey.com", "date": "2020-06-25T06:28:00Z"}, "committer": {"name": "MaulingMonkey", "email": "git@maulingmonkey.com", "date": "2020-06-25T06:28:00Z"}, "message": "debuginfo:  Define int/float types in terms of MSVC-recognized types.\n\nPDB debug information doesn't appear to be emitted for basic types.\nBy defining u32 as a typedef for unsigned __int32 when targeting MSVC,\nwe allow CDB and other debuggers to recognize \"u32\" as a type/expression.\n\nThis in turn unblocks rust-lang#70052 \"Update hashbrown to 0.8.0\" by\nallowing $T1 ..= $T3 to resolve, which would otherwise fail to resolve\nwhen builtin types fail to parse.", "tree": {"sha": "7776184d1e6de400172fce433da3d0bdcd8ee231", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7776184d1e6de400172fce433da3d0bdcd8ee231"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24a728a8eb4832568509eb757c2374934a76cb98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24a728a8eb4832568509eb757c2374934a76cb98", "html_url": "https://github.com/rust-lang/rust/commit/24a728a8eb4832568509eb757c2374934a76cb98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24a728a8eb4832568509eb757c2374934a76cb98/comments", "author": {"login": "MaulingMonkey", "id": 75894, "node_id": "MDQ6VXNlcjc1ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/75894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaulingMonkey", "html_url": "https://github.com/MaulingMonkey", "followers_url": "https://api.github.com/users/MaulingMonkey/followers", "following_url": "https://api.github.com/users/MaulingMonkey/following{/other_user}", "gists_url": "https://api.github.com/users/MaulingMonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaulingMonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaulingMonkey/subscriptions", "organizations_url": "https://api.github.com/users/MaulingMonkey/orgs", "repos_url": "https://api.github.com/users/MaulingMonkey/repos", "events_url": "https://api.github.com/users/MaulingMonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/MaulingMonkey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MaulingMonkey", "id": 75894, "node_id": "MDQ6VXNlcjc1ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/75894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaulingMonkey", "html_url": "https://github.com/MaulingMonkey", "followers_url": "https://api.github.com/users/MaulingMonkey/followers", "following_url": "https://api.github.com/users/MaulingMonkey/following{/other_user}", "gists_url": "https://api.github.com/users/MaulingMonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaulingMonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaulingMonkey/subscriptions", "organizations_url": "https://api.github.com/users/MaulingMonkey/orgs", "repos_url": "https://api.github.com/users/MaulingMonkey/repos", "events_url": "https://api.github.com/users/MaulingMonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/MaulingMonkey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8eb81ba4e85b02d90cfc33fcba0a6a7d5cbf810", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8eb81ba4e85b02d90cfc33fcba0a6a7d5cbf810", "html_url": "https://github.com/rust-lang/rust/commit/f8eb81ba4e85b02d90cfc33fcba0a6a7d5cbf810"}], "stats": {"total": 90, "additions": 89, "deletions": 1}, "files": [{"sha": "ac8f28e1609a28747e41445130ca53e501add042", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/24a728a8eb4832568509eb757c2374934a76cb98/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a728a8eb4832568509eb757c2374934a76cb98/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=24a728a8eb4832568509eb757c2374934a76cb98", "patch": "@@ -19,6 +19,7 @@ use crate::llvm::debuginfo::{\n use crate::value::Value;\n \n use log::debug;\n+use rustc_ast::ast;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -824,14 +825,60 @@ fn file_metadata_raw(\n     }\n }\n \n+trait MsvcBasicName {\n+    fn msvc_basic_name(self) -> &'static str;\n+}\n+\n+impl MsvcBasicName for ast::IntTy {\n+    fn msvc_basic_name(self) -> &'static str {\n+        match self {\n+            ast::IntTy::Isize => \"ptrdiff_t\",\n+            ast::IntTy::I8 => \"__int8\",\n+            ast::IntTy::I16 => \"__int16\",\n+            ast::IntTy::I32 => \"__int32\",\n+            ast::IntTy::I64 => \"__int64\",\n+            ast::IntTy::I128 => \"__int128\",\n+        }\n+    }\n+}\n+\n+impl MsvcBasicName for ast::UintTy {\n+    fn msvc_basic_name(self) -> &'static str {\n+        match self {\n+            ast::UintTy::Usize => \"size_t\",\n+            ast::UintTy::U8 => \"unsigned __int8\",\n+            ast::UintTy::U16 => \"unsigned __int16\",\n+            ast::UintTy::U32 => \"unsigned __int32\",\n+            ast::UintTy::U64 => \"unsigned __int64\",\n+            ast::UintTy::U128 => \"unsigned __int128\",\n+        }\n+    }\n+}\n+\n+impl MsvcBasicName for ast::FloatTy {\n+    fn msvc_basic_name(self) -> &'static str {\n+        match self {\n+            ast::FloatTy::F32 => \"float\",\n+            ast::FloatTy::F64 => \"double\",\n+        }\n+    }\n+}\n+\n fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n     debug!(\"basic_type_metadata: {:?}\", t);\n \n+    // When targeting MSVC, emit MSVC style type names for compatibility with\n+    // .natvis visualizers (and perhaps other existing native debuggers?)\n+    let msvc_like_names = cx.tcx.sess.target.target.options.is_like_msvc;\n+\n     let (name, encoding) = match t.kind {\n         ty::Never => (\"!\", DW_ATE_unsigned),\n         ty::Tuple(ref elements) if elements.is_empty() => (\"()\", DW_ATE_unsigned),\n         ty::Bool => (\"bool\", DW_ATE_boolean),\n         ty::Char => (\"char\", DW_ATE_unsigned_char),\n+        ty::Int(int_ty) if msvc_like_names => (int_ty.msvc_basic_name(), DW_ATE_signed),\n+        ty::Uint(uint_ty) if msvc_like_names => (uint_ty.msvc_basic_name(), DW_ATE_unsigned),\n+        ty::Float(float_ty) if msvc_like_names => (float_ty.msvc_basic_name(), DW_ATE_float),\n         ty::Int(int_ty) => (int_ty.name_str(), DW_ATE_signed),\n         ty::Uint(uint_ty) => (uint_ty.name_str(), DW_ATE_unsigned),\n         ty::Float(float_ty) => (float_ty.name_str(), DW_ATE_float),\n@@ -848,7 +895,30 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n         )\n     };\n \n-    ty_metadata\n+    if !msvc_like_names {\n+        return ty_metadata;\n+    }\n+\n+    let typedef_name = match t.kind {\n+        ty::Int(int_ty) => int_ty.name_str(),\n+        ty::Uint(uint_ty) => uint_ty.name_str(),\n+        ty::Float(float_ty) => float_ty.name_str(),\n+        _ => return ty_metadata,\n+    };\n+\n+    let typedef_metadata = unsafe {\n+        llvm::LLVMRustDIBuilderCreateTypedef(\n+            DIB(cx),\n+            ty_metadata,\n+            typedef_name.as_ptr().cast(),\n+            typedef_name.len(),\n+            unknown_file_metadata(cx),\n+            0,\n+            None,\n+        )\n+    };\n+\n+    typedef_metadata\n }\n \n fn foreign_type_metadata("}, {"sha": "61b1cae698d0c6dcbd8bdae9e6be816861daa95a", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24a728a8eb4832568509eb757c2374934a76cb98/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a728a8eb4832568509eb757c2374934a76cb98/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=24a728a8eb4832568509eb757c2374934a76cb98", "patch": "@@ -1699,6 +1699,16 @@ extern \"C\" {\n         Encoding: c_uint,\n     ) -> &'a DIBasicType;\n \n+    pub fn LLVMRustDIBuilderCreateTypedef(\n+        Builder: &DIBuilder<'a>,\n+        Type: &'a DIBasicType,\n+        Name: *const c_char,\n+        NameLen: size_t,\n+        File: &'a DIFile,\n+        LineNo: c_uint,\n+        Scope: Option<&'a DIScope>,\n+    ) -> &'a DIDerivedType;\n+\n     pub fn LLVMRustDIBuilderCreatePointerType(\n         Builder: &DIBuilder<'a>,\n         PointeeTy: &'a DIType,"}, {"sha": "d78fb63fd4ef110e9d594e2305c4588024487b07", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24a728a8eb4832568509eb757c2374934a76cb98/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/24a728a8eb4832568509eb757c2374934a76cb98/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=24a728a8eb4832568509eb757c2374934a76cb98", "patch": "@@ -759,6 +759,14 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateBasicType(\n   return wrap(Builder->createBasicType(StringRef(Name, NameLen), SizeInBits, Encoding));\n }\n \n+extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateTypedef(\n+    LLVMRustDIBuilderRef Builder, LLVMMetadataRef Type, const char *Name, size_t NameLen,\n+    LLVMMetadataRef File, unsigned LineNo, LLVMMetadataRef Scope) {\n+  return wrap(Builder->createTypedef(\n+    unwrap<DIType>(Type), StringRef(Name, NameLen), unwrap<DIFile>(File),\n+    LineNo, unwrap<DIScope>(Scope)));\n+}\n+\n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreatePointerType(\n     LLVMRustDIBuilderRef Builder, LLVMMetadataRef PointeeTy,\n     uint64_t SizeInBits, uint32_t AlignInBits, unsigned AddressSpace,"}]}