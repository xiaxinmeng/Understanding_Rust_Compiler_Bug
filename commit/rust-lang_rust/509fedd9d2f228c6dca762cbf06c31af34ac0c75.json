{"sha": "509fedd9d2f228c6dca762cbf06c31af34ac0c75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOWZlZGQ5ZDJmMjI4YzZkY2E3NjJjYmYwNmMzMWFmMzRhYzBjNzU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-08T08:16:52Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-08T08:16:52Z"}, "message": "Remove MacroFileKind", "tree": {"sha": "973ccea0049ee917a7f901a7e0238f7ef6c984bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/973ccea0049ee917a7f901a7e0238f7ef6c984bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/509fedd9d2f228c6dca762cbf06c31af34ac0c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/509fedd9d2f228c6dca762cbf06c31af34ac0c75", "html_url": "https://github.com/rust-lang/rust/commit/509fedd9d2f228c6dca762cbf06c31af34ac0c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/509fedd9d2f228c6dca762cbf06c31af34ac0c75/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e551d5452232d1d44e4bba754392beaa3a7628f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e551d5452232d1d44e4bba754392beaa3a7628f", "html_url": "https://github.com/rust-lang/rust/commit/9e551d5452232d1d44e4bba754392beaa3a7628f"}], "stats": {"total": 122, "additions": 52, "deletions": 70}, "files": [{"sha": "c5a920688fd0abeea97a5d5af016ec1aa979d40a", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=509fedd9d2f228c6dca762cbf06c31af34ac0c75", "patch": "@@ -21,7 +21,6 @@ use hir_def::{\n };\n use hir_expand::{\n     hygiene::Hygiene, name::AsName, AstId, HirFileId, InFile, MacroCallId, MacroCallKind,\n-    MacroFileKind,\n };\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -142,7 +141,6 @@ pub struct ReferenceDescriptor {\n \n #[derive(Debug)]\n pub struct Expansion {\n-    macro_file_kind: MacroFileKind,\n     macro_call_id: MacroCallId,\n }\n \n@@ -157,7 +155,7 @@ impl Expansion {\n     }\n \n     pub fn file_id(&self) -> HirFileId {\n-        self.macro_call_id.as_file(self.macro_file_kind)\n+        self.macro_call_id.as_file()\n     }\n }\n \n@@ -456,10 +454,7 @@ impl SourceAnalyzer {\n             macro_call.file_id,\n             db.ast_id_map(macro_call.file_id).ast_id(macro_call.value),\n         );\n-        Some(Expansion {\n-            macro_call_id: def.as_call_id(db, MacroCallKind::FnLike(ast_id)),\n-            macro_file_kind: to_macro_file_kind(macro_call.value),\n-        })\n+        Some(Expansion { macro_call_id: def.as_call_id(db, MacroCallKind::FnLike(ast_id)) })\n     }\n }\n \n@@ -543,35 +538,3 @@ fn adjust(\n         })\n         .map(|(_ptr, scope)| *scope)\n }\n-\n-/// Given a `ast::MacroCall`, return what `MacroKindFile` it belongs to.\n-/// FIXME: Not completed\n-fn to_macro_file_kind(macro_call: &ast::MacroCall) -> MacroFileKind {\n-    let syn = macro_call.syntax();\n-    let parent = match syn.parent() {\n-        Some(it) => it,\n-        None => {\n-            // FIXME:\n-            // If it is root, which means the parent HirFile\n-            // MacroKindFile must be non-items\n-            // return expr now.\n-            return MacroFileKind::Expr;\n-        }\n-    };\n-\n-    match parent.kind() {\n-        MACRO_ITEMS | SOURCE_FILE => MacroFileKind::Items,\n-        LET_STMT => {\n-            // FIXME: Handle Pattern\n-            MacroFileKind::Expr\n-        }\n-        EXPR_STMT => MacroFileKind::Statements,\n-        BLOCK => MacroFileKind::Statements,\n-        ARG_LIST => MacroFileKind::Expr,\n-        TRY_EXPR => MacroFileKind::Expr,\n-        _ => {\n-            // Unknown , Just guess it is `Items`\n-            MacroFileKind::Items\n-        }\n-    }\n-}"}, {"sha": "b3bc336cf9269d410c865a72d56abf86790d4366", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=509fedd9d2f228c6dca762cbf06c31af34ac0c75", "patch": "@@ -6,9 +6,7 @@ pub mod scope;\n use std::{ops::Index, sync::Arc};\n \n use either::Either;\n-use hir_expand::{\n-    hygiene::Hygiene, AstId, HirFileId, InFile, MacroCallKind, MacroDefId, MacroFileKind,\n-};\n+use hir_expand::{hygiene::Hygiene, AstId, HirFileId, InFile, MacroCallKind, MacroDefId};\n use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n@@ -49,7 +47,7 @@ impl Expander {\n         if let Some(path) = macro_call.path().and_then(|path| self.parse_path(path)) {\n             if let Some(def) = self.resolve_path_as_macro(db, &path) {\n                 let call_id = def.as_call_id(db, MacroCallKind::FnLike(ast_id));\n-                let file_id = call_id.as_file(MacroFileKind::Expr);\n+                let file_id = call_id.as_file();\n                 if let Some(node) = db.parse_or_expand(file_id) {\n                     if let Some(expr) = ast::Expr::cast(node) {\n                         log::debug!(\"macro expansion {:#?}\", expr.syntax());"}, {"sha": "6a01e3ab7b970adb4a1bb4ca5815734cf04013f4", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=509fedd9d2f228c6dca762cbf06c31af34ac0c75", "patch": "@@ -7,7 +7,7 @@ use hir_expand::{\n     builtin_derive::find_builtin_derive,\n     builtin_macro::find_builtin_macro,\n     name::{self, AsName, Name},\n-    HirFileId, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind, MacroFileKind,\n+    HirFileId, MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n use ra_cfg::CfgOptions;\n use ra_db::{CrateId, FileId};\n@@ -545,7 +545,7 @@ where\n         self.macro_stack_monitor.increase(macro_def_id);\n \n         if !self.macro_stack_monitor.is_poison(macro_def_id) {\n-            let file_id: HirFileId = macro_call_id.as_file(MacroFileKind::Items);\n+            let file_id: HirFileId = macro_call_id.as_file();\n             let raw_items = self.db.raw_items(file_id);\n             let mod_dir = self.mod_dirs[&module_id].clone();\n             ModCollector {"}, {"sha": "5746376022bbcd0cfe1aee9880e9b1a8a7863c82", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=509fedd9d2f228c6dca762cbf06c31af34ac0c75", "patch": "@@ -208,7 +208,7 @@ fn partial_ord_expand(\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::{test_db::TestDB, AstId, MacroCallKind, MacroCallLoc, MacroFileKind};\n+    use crate::{test_db::TestDB, AstId, MacroCallKind, MacroCallLoc};\n     use ra_db::{fixture::WithFixture, SourceDatabase};\n \n     fn expand_builtin_derive(s: &str, expander: BuiltinDeriveExpander) -> String {\n@@ -229,7 +229,7 @@ mod tests {\n         };\n \n         let id = db.intern_macro(loc);\n-        let parsed = db.parse_or_expand(id.as_file(MacroFileKind::Items)).unwrap();\n+        let parsed = db.parse_or_expand(id.as_file()).unwrap();\n \n         // FIXME text() for syntax nodes parsed from token tree looks weird\n         // because there's no whitespace, see below"}, {"sha": "c7071fe85a3a4d4b700b08a97808b265c86f2451", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=509fedd9d2f228c6dca762cbf06c31af34ac0c75", "patch": "@@ -2,8 +2,7 @@\n use crate::db::AstDatabase;\n use crate::{\n     ast::{self, AstNode},\n-    name, AstId, CrateId, HirFileId, MacroCallId, MacroDefId, MacroDefKind, MacroFileKind,\n-    TextUnit,\n+    name, AstId, CrateId, HirFileId, MacroCallId, MacroDefId, MacroDefKind, TextUnit,\n };\n \n use crate::quote;\n@@ -90,7 +89,7 @@ fn line_expand(\n     let arg = loc.kind.arg(db).ok_or_else(|| mbe::ExpandError::UnexpectedToken)?;\n     let arg_start = arg.text_range().start();\n \n-    let file = id.as_file(MacroFileKind::Expr);\n+    let file = id.as_file();\n     let line_num = to_line_number(db, file, arg_start);\n \n     let expanded = quote! {\n@@ -158,7 +157,7 @@ fn column_expand(\n     let _arg = macro_call.token_tree().ok_or_else(|| mbe::ExpandError::UnexpectedToken)?;\n     let col_start = macro_call.syntax().text_range().start();\n \n-    let file = id.as_file(MacroFileKind::Expr);\n+    let file = id.as_file();\n     let col_num = to_col_number(db, file, col_start);\n \n     let expanded = quote! {\n@@ -269,7 +268,7 @@ mod tests {\n         };\n \n         let id = db.intern_macro(loc);\n-        let parsed = db.parse_or_expand(id.as_file(MacroFileKind::Expr)).unwrap();\n+        let parsed = db.parse_or_expand(id.as_file()).unwrap();\n \n         parsed.text().to_string()\n     }"}, {"sha": "4bdb41619c8956f76fb7a8163150f09f95742bd0", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=509fedd9d2f228c6dca762cbf06c31af34ac0c75", "patch": "@@ -6,11 +6,11 @@ use mbe::MacroRules;\n use ra_db::{salsa, SourceDatabase};\n use ra_parser::FragmentKind;\n use ra_prof::profile;\n-use ra_syntax::{AstNode, Parse, SyntaxNode};\n+use ra_syntax::{AstNode, Parse, SyntaxKind::*, SyntaxNode};\n \n use crate::{\n     ast_id_map::AstIdMap, BuiltinDeriveExpander, BuiltinFnLikeExpander, HirFileId, HirFileIdRepr,\n-    MacroCallId, MacroCallLoc, MacroDefId, MacroDefKind, MacroFile, MacroFileKind,\n+    MacroCallId, MacroCallLoc, MacroDefId, MacroDefKind, MacroFile,\n };\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -155,11 +155,42 @@ pub(crate) fn parse_macro(\n         })\n         .ok()?;\n \n-    let fragment_kind = match macro_file.macro_file_kind {\n-        MacroFileKind::Items => FragmentKind::Items,\n-        MacroFileKind::Expr => FragmentKind::Expr,\n-        MacroFileKind::Statements => FragmentKind::Statements,\n-    };\n+    let fragment_kind = to_fragment_kind(db, macro_call_id);\n+\n     let (parse, rev_token_map) = mbe::token_tree_to_syntax_node(&tt, fragment_kind).ok()?;\n     Some((parse, Arc::new(rev_token_map)))\n }\n+\n+/// Given a `MacroCallId`, return what `FragmentKind` it belongs to.\n+/// FIXME: Not completed\n+fn to_fragment_kind(db: &dyn AstDatabase, macro_call_id: MacroCallId) -> FragmentKind {\n+    let syn = db.lookup_intern_macro(macro_call_id).kind.node(db).value;\n+\n+    let parent = match syn.parent() {\n+        Some(it) => it,\n+        None => {\n+            // FIXME:\n+            // If it is root, which means the parent HirFile\n+            // MacroKindFile must be non-items\n+            // return expr now.\n+            return FragmentKind::Expr;\n+        }\n+    };\n+\n+    match parent.kind() {\n+        MACRO_ITEMS | SOURCE_FILE => FragmentKind::Items,\n+        LET_STMT => {\n+            // FIXME: Handle Pattern\n+            FragmentKind::Expr\n+        }\n+        EXPR_STMT => FragmentKind::Statements,\n+        BLOCK => FragmentKind::Statements,\n+        ARG_LIST => FragmentKind::Expr,\n+        TRY_EXPR => FragmentKind::Expr,\n+        TUPLE_EXPR => FragmentKind::Expr,\n+        _ => {\n+            // Unknown , Just guess it is `Items`\n+            FragmentKind::Items\n+        }\n+    }\n+}"}, {"sha": "94e1e466a56fded4118238871f01072affed9e3e", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509fedd9d2f228c6dca762cbf06c31af34ac0c75/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=509fedd9d2f228c6dca762cbf06c31af34ac0c75", "patch": "@@ -117,14 +117,6 @@ impl HirFileId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroFile {\n     macro_call_id: MacroCallId,\n-    macro_file_kind: MacroFileKind,\n-}\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum MacroFileKind {\n-    Items,\n-    Expr,\n-    Statements,\n }\n \n /// `MacroCallId` identifies a particular macro invocation, like\n@@ -205,9 +197,8 @@ impl MacroCallKind {\n }\n \n impl MacroCallId {\n-    pub fn as_file(self, kind: MacroFileKind) -> HirFileId {\n-        let macro_file = MacroFile { macro_call_id: self, macro_file_kind: kind };\n-        macro_file.into()\n+    pub fn as_file(self) -> HirFileId {\n+        MacroFile { macro_call_id: self }.into()\n     }\n }\n "}]}