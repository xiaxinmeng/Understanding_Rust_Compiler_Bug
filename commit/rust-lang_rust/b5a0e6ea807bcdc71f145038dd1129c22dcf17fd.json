{"sha": "b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YTBlNmVhODA3YmNkYzcxZjE0NTAzOGRkMTEyOWMyMmRjZjE3ZmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-18T20:29:57Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-27T11:16:16Z"}, "message": "syntax_ext: `proc_macro_decls` -> `proc_macro_harness`\n\nFew other minor renamings for consistency.\nRemove one unused dependency from `rustc_passes`.\nFix libsyntax tests.\nFix rebase.", "tree": {"sha": "0fdc06b0a570021d5f00826a9045111cb71bfd36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fdc06b0a570021d5f00826a9045111cb71bfd36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "html_url": "https://github.com/rust-lang/rust/commit/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d535bdf59136f69b55107caaa0f5492b5e84d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d535bdf59136f69b55107caaa0f5492b5e84d2d", "html_url": "https://github.com/rust-lang/rust/commit/4d535bdf59136f69b55107caaa0f5492b5e84d2d"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "46d8b3de806ffc1ff259ab39afca12282a83452d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "patch": "@@ -3052,7 +3052,6 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "3c7d854b36b13b651efeb0e0955e2c11dc37f972", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "patch": "@@ -461,7 +461,7 @@ fn configure_and_expand_inner<'a>(\n     sess.profiler(|p| p.end_activity(\"macro expansion\"));\n \n     time(sess, \"maybe building test harness\", || {\n-        syntax_ext::test_harness::modify_for_testing(\n+        syntax_ext::test_harness::inject(\n             &sess.parse_sess,\n             &mut resolver,\n             sess.opts.test,\n@@ -490,7 +490,7 @@ fn configure_and_expand_inner<'a>(\n             let num_crate_types = crate_types.len();\n             let is_proc_macro_crate = crate_types.contains(&config::CrateType::ProcMacro);\n             let is_test_crate = sess.opts.test;\n-            syntax_ext::proc_macro_decls::modify(\n+            syntax_ext::proc_macro_harness::inject(\n                 &sess.parse_sess,\n                 &mut resolver,\n                 krate,"}, {"sha": "596ec6c19bcbfd0b5e419173ca1d6541a47270df", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "patch": "@@ -11,7 +11,6 @@ path = \"lib.rs\"\n [dependencies]\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n-rustc_mir = { path = \"../librustc_mir\"}\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "bb7834a133f039a564681a514b1ab064d758071a", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "patch": "@@ -1,6 +1,6 @@\n use crate::ast::{self, Attribute, Name, PatKind};\n use crate::attr::{HasAttrs, Stability, Deprecation};\n-use crate::source_map::{SourceMap, Spanned, FileName, respan};\n+use crate::source_map::{SourceMap, Spanned, respan};\n use crate::edition::Edition;\n use crate::ext::expand::{self, AstFragment, Invocation};\n use crate::ext::hygiene::{ExpnId, SyntaxContext, Transparency};"}, {"sha": "425b9813f5904da34431bf194c120c7bfe4f42e6", "filename": "src/libsyntax/ext/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax%2Fext%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax%2Fext%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro.rs?ref=b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "patch": "@@ -231,7 +231,7 @@ crate fn add_derived_markers<T: HasAttrs>(\n         names.insert(unwrap_or!(path.segments.get(0), continue).ident.name);\n     }\n \n-    let span = span.fresh_expansion(cx.current_expansion.mark, ExpnInfo::allow_unstable(\n+    let span = span.fresh_expansion(cx.current_expansion.id, ExpnInfo::allow_unstable(\n         ExpnKind::Macro(MacroKind::Derive, Symbol::intern(&pretty_name)), span,\n         cx.parse_sess.edition, cx.allow_derive_markers.clone(),\n     ));"}, {"sha": "3cd5464f35710c4fd67c6c57cc3a57a409a0462c", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "patch": "@@ -794,7 +794,7 @@ mod tests {\n     use std::path::PathBuf;\n     use syntax_pos::{BytePos, Span, NO_EXPANSION, edition::Edition};\n     use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n-    use rustc_data_structures::sync::Lock;\n+    use rustc_data_structures::sync::{Lock, Once};\n \n     fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n         let emitter = errors::emitter::EmitterWriter::new(Box::new(io::sink()),\n@@ -817,6 +817,7 @@ mod tests {\n             param_attr_spans: Lock::new(Vec::new()),\n             let_chains_spans: Lock::new(Vec::new()),\n             async_closure_spans: Lock::new(Vec::new()),\n+            injected_crate_name: Once::new(),\n         }\n     }\n "}, {"sha": "fae884860ed56f262322f6f12aa5347659c8cac4", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "patch": "@@ -1,4 +1,5 @@\n-//! Syntax extensions in the Rust compiler.\n+//! This crate contains implementations of built-in macros and other code generating facilities\n+//! injecting code into the crate before it is lowered to HIR.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n@@ -10,16 +11,12 @@\n #![feature(mem_take)]\n #![feature(nll)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(unicode_internals)]\n-\n-extern crate proc_macro;\n \n use crate::deriving::*;\n \n use syntax::ast::Ident;\n use syntax::edition::Edition;\n use syntax::ext::base::{SyntaxExtension, SyntaxExtensionKind, MacroExpanderFn};\n-use syntax::ext::source_util;\n use syntax::symbol::sym;\n \n mod error_codes;\n@@ -42,7 +39,7 @@ mod test;\n mod trace_macros;\n \n pub mod plugin_macro_defs;\n-pub mod proc_macro_decls;\n+pub mod proc_macro_harness;\n pub mod standard_library_imports;\n pub mod test_harness;\n "}, {"sha": "fc6cd5dc94cd596e617abdb2813ad8d0dc3e5f9e", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "patch": "@@ -38,7 +38,7 @@ struct CollectProcMacros<'a> {\n     is_test_crate: bool,\n }\n \n-pub fn modify(sess: &ParseSess,\n+pub fn inject(sess: &ParseSess,\n               resolver: &mut dyn (::syntax::ext::base::Resolver),\n               mut krate: ast::Crate,\n               is_proc_macro_crate: bool,", "previous_filename": "src/libsyntax_ext/proc_macro_decls.rs"}, {"sha": "a2d93d01cec5623c9e463008ad69cb6baa11f0db", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "patch": "@@ -30,7 +30,7 @@ pub fn expand_test_case(\n \n     if !ecx.ecfg.should_test { return vec![]; }\n \n-    let sp = attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(ecx.current_expansion.mark));\n+    let sp = attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(ecx.current_expansion.id));\n     let mut item = anno_item.expect_item();\n     item = item.map(|mut item| {\n         item.vis = respan(item.vis.span, ast::VisibilityKind::Public);"}, {"sha": "848c797856ea9c39d3f99f55612d8a8973d2cac6", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5a0e6ea807bcdc71f145038dd1129c22dcf17fd/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=b5a0e6ea807bcdc71f145038dd1129c22dcf17fd", "patch": "@@ -37,12 +37,14 @@ struct TestCtxt<'a> {\n \n // Traverse the crate, collecting all the test functions, eliding any\n // existing main functions, and synthesizing a main test harness\n-pub fn modify_for_testing(sess: &ParseSess,\n-                          resolver: &mut dyn Resolver,\n-                          should_test: bool,\n-                          krate: &mut ast::Crate,\n-                          span_diagnostic: &errors::Handler,\n-                          features: &Features) {\n+pub fn inject(\n+    sess: &ParseSess,\n+    resolver: &mut dyn Resolver,\n+    should_test: bool,\n+    krate: &mut ast::Crate,\n+    span_diagnostic: &errors::Handler,\n+    features: &Features,\n+) {\n     // Check for #[reexport_test_harness_main = \"some_name\"] which\n     // creates a `use __test::main as some_name;`. This needs to be\n     // unconditional, so that the attribute is still marked as used in"}]}