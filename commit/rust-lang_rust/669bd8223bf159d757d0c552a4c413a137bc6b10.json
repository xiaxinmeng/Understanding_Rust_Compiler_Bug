{"sha": "669bd8223bf159d757d0c552a4c413a137bc6b10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2OWJkODIyM2JmMTU5ZDc1N2QwYzU1MmE0YzQxM2ExMzdiYzZiMTA=", "commit": {"author": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-04-30T19:24:59Z"}, "committer": {"name": "C Jones", "email": "code@calebjones.net", "date": "2018-05-08T01:57:45Z"}, "message": "Make LeafNode #[repr(C)] and put the metadata before generic items\n\nThis way we can safely statically allocate a LeafNode to use as the\nplaceholder before allocating, and any type accessing it will be able to\naccess the metadata at the same offset.", "tree": {"sha": "b5486f61d76aaa919d51ddebfd03455f27c49ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5486f61d76aaa919d51ddebfd03455f27c49ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/669bd8223bf159d757d0c552a4c413a137bc6b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/669bd8223bf159d757d0c552a4c413a137bc6b10", "html_url": "https://github.com/rust-lang/rust/commit/669bd8223bf159d757d0c552a4c413a137bc6b10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/669bd8223bf159d757d0c552a4c413a137bc6b10/comments", "author": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "porglezomp", "id": 1690225, "node_id": "MDQ6VXNlcjE2OTAyMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1690225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/porglezomp", "html_url": "https://github.com/porglezomp", "followers_url": "https://api.github.com/users/porglezomp/followers", "following_url": "https://api.github.com/users/porglezomp/following{/other_user}", "gists_url": "https://api.github.com/users/porglezomp/gists{/gist_id}", "starred_url": "https://api.github.com/users/porglezomp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/porglezomp/subscriptions", "organizations_url": "https://api.github.com/users/porglezomp/orgs", "repos_url": "https://api.github.com/users/porglezomp/repos", "events_url": "https://api.github.com/users/porglezomp/events{/privacy}", "received_events_url": "https://api.github.com/users/porglezomp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64e6dda0bce96da47e52f7f3e278d05f7a09473c", "url": "https://api.github.com/repos/rust-lang/rust/commits/64e6dda0bce96da47e52f7f3e278d05f7a09473c", "html_url": "https://github.com/rust-lang/rust/commit/64e6dda0bce96da47e52f7f3e278d05f7a09473c"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "3e27331aa3813ed38c2fcf3899a2bf6815519265", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/669bd8223bf159d757d0c552a4c413a137bc6b10/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669bd8223bf159d757d0c552a4c413a137bc6b10/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=669bd8223bf159d757d0c552a4c413a137bc6b10", "patch": "@@ -60,12 +60,12 @@ pub const CAPACITY: usize = 2 * B - 1;\n ///\n /// See also rust-lang/rfcs#197, which would make this structure significantly more safe by\n /// avoiding accidentally dropping unused and uninitialized keys and values.\n+///\n+/// We put the metadata first so that its position is the same for every `K` and `V`, in order\n+/// to statically allocate a single dummy node to avoid allocations. This struct is `repr(C)` to\n+/// prevent them from being reordered.\n+#[repr(C)]\n struct LeafNode<K, V> {\n-    /// The arrays storing the actual data of the node. Only the first `len` elements of each\n-    /// array are initialized and valid.\n-    keys: [K; CAPACITY],\n-    vals: [V; CAPACITY],\n-\n     /// We use `*const` as opposed to `*mut` so as to be covariant in `K` and `V`.\n     /// This either points to an actual node or is null.\n     parent: *const InternalNode<K, V>,\n@@ -77,10 +77,14 @@ struct LeafNode<K, V> {\n \n     /// The number of keys and values this node stores.\n     ///\n-    /// This is at the end of the node's representation and next to `parent_idx` to encourage\n-    /// the compiler to join `len` and `parent_idx` into the same 32-bit word, reducing space\n-    /// overhead.\n+    /// This next to `parent_idx` to encourage the compiler to join `len` and\n+    /// `parent_idx` into the same 32-bit word, reducing space overhead.\n     len: u16,\n+\n+    /// The arrays storing the actual data of the node. Only the first `len` elements of each\n+    /// array are initialized and valid.\n+    keys: [K; CAPACITY],\n+    vals: [V; CAPACITY],\n }\n \n impl<K, V> LeafNode<K, V> {"}]}