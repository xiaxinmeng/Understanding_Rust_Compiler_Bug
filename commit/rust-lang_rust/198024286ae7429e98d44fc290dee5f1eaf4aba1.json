{"sha": "198024286ae7429e98d44fc290dee5f1eaf4aba1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ODAyNDI4NmFlNzQyOWU5OGQ0NGZjMjkwZGVlNWYxZWFmNGFiYTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T09:29:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T09:29:05Z"}, "message": "Rollup merge of #69080 - eddyb:one-billion-dwarves-walk-into-a-bar, r=michaelwoerister\n\nrustc_codegen_llvm: don't generate any type debuginfo for -Cdebuginfo=1.\n\nWorks towards #69074 by adding more checks for `DebugInfo::Full` in a few places in `rustc_codegen_llvm`, bringing us in line with what `clang -g1` generates (no debuginfo types, nor debuginfo for `static`s).\n\n<hr/>\n\nMy local build's (`debuginfo-level=1`, `debug-assertions=1`) `librustc_driver-*.so` went from just over 1GiB (1019MiB) down to 402MiB.\n\nIt's still bad, but the `.debug_*` sections themselves (as reported by `objdump`) went from something like 853MiB down to 236MiB, i.e. roughly a 3.6x reduction.\n\n<hr/>\n\nSadly, I don't think this is enough to justify *shipping* all of this debuginfo, but now it's more plausible that we could at least *build* with `debuginfo-level=1` *then* strip it.\nThat would give us real backtraces for e.g. ICEs during builds, but I don't know how often that's relevant.\n\nWe could also look into split DWARF, and maybe have a `rustc-debuginfo` component in `rustup`.\n\nThere's also the possibility of making it slimmer by omitting parameters to functions, or perhaps some deduplication (I think right now there is no DWARF reuse across CGUs? maybe ThinLTO helps?).\n\nr? @michaelwoerister cc @rust-lang/wg-codegen @alexcrichton @Mark-Simulacrum", "tree": {"sha": "e26c3f812a44817fd8136c8d39b047838f97030a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e26c3f812a44817fd8136c8d39b047838f97030a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/198024286ae7429e98d44fc290dee5f1eaf4aba1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeIFiCRBK7hj4Ov3rIwAAdHIIAGw4Yz6j+y7tIMXzsTuWPN5c\n01Qv+87Zg9n6zA9J31q86ecPOEg6oyeI8z7z1jhCJvbl9iSlaQ55taJ7PhiV321O\nVJ2j7865xIdADenRB2WJflaYbNDKztQ2zOI5gQpZv0ULwD49TfYEoeyGnRHFLPSo\nZZ9eNGJYhY3j3yWAoC1PG0+93na2KZsxpxq0akGCvzp01q9bW3adkepiWtSLg2yg\nC5fRD1cbL9XavAtrBTpeYEzud7ofjZdzMEp2KPBCsjZB3cr2+3/WxjrZ3vQkY+Fr\nIif4gzxacH6jijM+Khl6Um1+78OXtp5CdF2xvvBj2UG0fEUWiH9zzfOqEkZVqQ4=\n=fehp\n-----END PGP SIGNATURE-----\n", "payload": "tree e26c3f812a44817fd8136c8d39b047838f97030a\nparent 8ff785011be6625e32afceee3a08e5cff7470feb\nparent b5e78a2fa77438e93091f93866b72fdc50e254fb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584955745 +0100\ncommitter GitHub <noreply@github.com> 1584955745 +0100\n\nRollup merge of #69080 - eddyb:one-billion-dwarves-walk-into-a-bar, r=michaelwoerister\n\nrustc_codegen_llvm: don't generate any type debuginfo for -Cdebuginfo=1.\n\nWorks towards #69074 by adding more checks for `DebugInfo::Full` in a few places in `rustc_codegen_llvm`, bringing us in line with what `clang -g1` generates (no debuginfo types, nor debuginfo for `static`s).\n\n<hr/>\n\nMy local build's (`debuginfo-level=1`, `debug-assertions=1`) `librustc_driver-*.so` went from just over 1GiB (1019MiB) down to 402MiB.\n\nIt's still bad, but the `.debug_*` sections themselves (as reported by `objdump`) went from something like 853MiB down to 236MiB, i.e. roughly a 3.6x reduction.\n\n<hr/>\n\nSadly, I don't think this is enough to justify *shipping* all of this debuginfo, but now it's more plausible that we could at least *build* with `debuginfo-level=1` *then* strip it.\nThat would give us real backtraces for e.g. ICEs during builds, but I don't know how often that's relevant.\n\nWe could also look into split DWARF, and maybe have a `rustc-debuginfo` component in `rustup`.\n\nThere's also the possibility of making it slimmer by omitting parameters to functions, or perhaps some deduplication (I think right now there is no DWARF reuse across CGUs? maybe ThinLTO helps?).\n\nr? @michaelwoerister cc @rust-lang/wg-codegen @alexcrichton @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/198024286ae7429e98d44fc290dee5f1eaf4aba1", "html_url": "https://github.com/rust-lang/rust/commit/198024286ae7429e98d44fc290dee5f1eaf4aba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/198024286ae7429e98d44fc290dee5f1eaf4aba1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff785011be6625e32afceee3a08e5cff7470feb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff785011be6625e32afceee3a08e5cff7470feb", "html_url": "https://github.com/rust-lang/rust/commit/8ff785011be6625e32afceee3a08e5cff7470feb"}, {"sha": "b5e78a2fa77438e93091f93866b72fdc50e254fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e78a2fa77438e93091f93866b72fdc50e254fb", "html_url": "https://github.com/rust-lang/rust/commit/b5e78a2fa77438e93091f93866b72fdc50e254fb"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "13a36c36a309ae5c8954c6dc65130a3d5fe1f4bd", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/198024286ae7429e98d44fc290dee5f1eaf4aba1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198024286ae7429e98d44fc290dee5f1eaf4aba1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=198024286ae7429e98d44fc290dee5f1eaf4aba1", "patch": "@@ -1,11 +1,13 @@\n use super::metadata::{file_metadata, UNKNOWN_COLUMN_NUMBER, UNKNOWN_LINE_NUMBER};\n use super::utils::DIB;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext};\n+use rustc_codegen_ssa::traits::*;\n \n use crate::common::CodegenCx;\n use crate::llvm;\n use crate::llvm::debuginfo::{DIScope, DISubprogram};\n use rustc::mir::{Body, SourceScope};\n+use rustc_session::config::DebugInfo;\n \n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n@@ -19,10 +21,17 @@ pub fn compute_mir_scopes(\n ) {\n     // Find all the scopes with variables defined in them.\n     let mut has_variables = BitSet::new_empty(mir.source_scopes.len());\n-    // FIXME(eddyb) take into account that arguments always have debuginfo,\n-    // irrespective of their name (assuming full debuginfo is enabled).\n-    for var_debug_info in &mir.var_debug_info {\n-        has_variables.insert(var_debug_info.source_info.scope);\n+\n+    // Only consider variables when they're going to be emitted.\n+    // FIXME(eddyb) don't even allocate `has_variables` otherwise.\n+    if cx.sess().opts.debuginfo == DebugInfo::Full {\n+        // FIXME(eddyb) take into account that arguments always have debuginfo,\n+        // irrespective of their name (assuming full debuginfo is enabled).\n+        // NOTE(eddyb) actually, on second thought, those are always in the\n+        // function scope, which always exists.\n+        for var_debug_info in &mir.var_debug_info {\n+            has_variables.insert(var_debug_info.source_info.scope);\n+        }\n     }\n \n     // Instantiate all scopes."}, {"sha": "c867d8cf3c481021653549c266a17085e05cf4a0", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/198024286ae7429e98d44fc290dee5f1eaf4aba1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198024286ae7429e98d44fc290dee5f1eaf4aba1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=198024286ae7429e98d44fc290dee5f1eaf4aba1", "patch": "@@ -2299,6 +2299,11 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n         return;\n     }\n \n+    // Only create type information if full debuginfo is enabled\n+    if cx.sess().opts.debuginfo != DebugInfo::Full {\n+        return;\n+    }\n+\n     let tcx = cx.tcx;\n     let attrs = tcx.codegen_fn_attrs(def_id);\n \n@@ -2358,6 +2363,11 @@ pub fn create_vtable_metadata(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>, vtable: &\n         return;\n     }\n \n+    // Only create type information if full debuginfo is enabled\n+    if cx.sess().opts.debuginfo != DebugInfo::Full {\n+        return;\n+    }\n+\n     let type_metadata = type_metadata(cx, ty, rustc_span::DUMMY_SP);\n \n     unsafe {"}, {"sha": "4b8140263f1f25ade3797b44301f5ece1b3d92d5", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/198024286ae7429e98d44fc290dee5f1eaf4aba1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198024286ae7429e98d44fc290dee5f1eaf4aba1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=198024286ae7429e98d44fc290dee5f1eaf4aba1", "patch": "@@ -475,7 +475,12 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     // so avoid methods on other types (e.g., `<*mut T>::null`).\n                     match impl_self_ty.kind {\n                         ty::Adt(def, ..) if !def.is_box() => {\n-                            Some(type_metadata(cx, impl_self_ty, rustc_span::DUMMY_SP))\n+                            // Again, only create type information if full debuginfo is enabled\n+                            if cx.sess().opts.debuginfo == DebugInfo::Full {\n+                                Some(type_metadata(cx, impl_self_ty, rustc_span::DUMMY_SP))\n+                            } else {\n+                                Some(namespace::item_namespace(cx, def.did))\n+                            }\n                         }\n                         _ => None,\n                     }"}, {"sha": "fcaeaf2e4b07d397cbd5a0e83db73efabb6c1d76", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/198024286ae7429e98d44fc290dee5f1eaf4aba1/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/198024286ae7429e98d44fc290dee5f1eaf4aba1/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=198024286ae7429e98d44fc290dee5f1eaf4aba1", "patch": "@@ -151,6 +151,7 @@ fn main() {\n \n     if env::var_os(\"LLVM_NDEBUG\").is_some() {\n         cfg.define(\"NDEBUG\", None);\n+        cfg.debug(false);\n     }\n \n     build_helper::rerun_if_changed_anything_in_dir(Path::new(\"../rustllvm\"));"}]}