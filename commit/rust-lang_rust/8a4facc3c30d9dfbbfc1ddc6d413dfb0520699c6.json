{"sha": "8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNGZhY2MzYzMwZDlkZmJiZmMxZGRjNmQ0MTNkZmIwNTIwNjk5YzY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-08-08T15:21:20Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-08-12T06:14:50Z"}, "message": "syntax: #[allow_internal_unsafe] bypasses the unsafe_code lint in macros.", "tree": {"sha": "f17dec95c54f6880ef5a4705db742ecb648847ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f17dec95c54f6880ef5a4705db742ecb648847ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "html_url": "https://github.com/rust-lang/rust/commit/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa5340318111d562af2ef4897c75916731d55a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa5340318111d562af2ef4897c75916731d55a2", "html_url": "https://github.com/rust-lang/rust/commit/2fa5340318111d562af2ef4897c75916731d55a2"}], "stats": {"total": 186, "additions": 155, "deletions": 31}, "files": [{"sha": "adf7d901be9c02bb9cdeb68c97e8471bd75ad972", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -404,6 +404,7 @@ impl<'a> LoweringContext<'a> {\n                 format: codemap::CompilerDesugaring(Symbol::intern(reason)),\n                 span: Some(span),\n                 allow_internal_unstable: true,\n+                allow_internal_unsafe: false,\n             },\n         });\n         span.ctxt = SyntaxContext::empty().apply_mark(mark);"}, {"sha": "78b07a33389e2bca110edd7143e412e503537a4b", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -79,6 +79,7 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n                 format: MacroAttribute(Symbol::intern(name)),\n                 span: None,\n                 allow_internal_unstable: true,\n+                allow_internal_unsafe: false,\n             }\n         });\n         let span = Span {"}, {"sha": "7767cf434032af2213236a6732792005478b9bd6", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -195,24 +195,35 @@ impl LintPass for UnsafeCode {\n     }\n }\n \n+impl UnsafeCode {\n+    fn report_unsafe(&self, cx: &LateContext, span: Span, desc: &'static str) {\n+        // This comes from a macro that has #[allow_internal_unsafe].\n+        if span.allows_unsafe() {\n+            return;\n+        }\n+\n+        cx.span_lint(UNSAFE_CODE, span, desc);\n+    }\n+}\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         if let hir::ExprBlock(ref blk) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n             if blk.rules == hir::UnsafeBlock(hir::UserProvided) {\n-                cx.span_lint(UNSAFE_CODE, blk.span, \"usage of an `unsafe` block\");\n+                self.report_unsafe(cx, blk.span, \"usage of an `unsafe` block\");\n             }\n         }\n     }\n \n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n             hir::ItemTrait(hir::Unsafety::Unsafe, ..) => {\n-                cx.span_lint(UNSAFE_CODE, it.span, \"declaration of an `unsafe` trait\")\n+                self.report_unsafe(cx, it.span, \"declaration of an `unsafe` trait\")\n             }\n \n             hir::ItemImpl(hir::Unsafety::Unsafe, ..) => {\n-                cx.span_lint(UNSAFE_CODE, it.span, \"implementation of an `unsafe` trait\")\n+                self.report_unsafe(cx, it.span, \"implementation of an `unsafe` trait\")\n             }\n \n             _ => return,\n@@ -228,12 +239,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n                 _: ast::NodeId) {\n         match fk {\n             FnKind::ItemFn(_, _, hir::Unsafety::Unsafe, ..) => {\n-                cx.span_lint(UNSAFE_CODE, span, \"declaration of an `unsafe` function\")\n+                self.report_unsafe(cx, span, \"declaration of an `unsafe` function\")\n             }\n \n             FnKind::Method(_, sig, ..) => {\n                 if sig.unsafety == hir::Unsafety::Unsafe {\n-                    cx.span_lint(UNSAFE_CODE, span, \"implementation of an `unsafe` method\")\n+                    self.report_unsafe(cx, span, \"implementation of an `unsafe` method\")\n                 }\n             }\n \n@@ -244,9 +255,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n     fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n         if let hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(_)) = item.node {\n             if sig.unsafety == hir::Unsafety::Unsafe {\n-                cx.span_lint(UNSAFE_CODE,\n-                             item.span,\n-                             \"declaration of an `unsafe` method\")\n+                self.report_unsafe(cx, item.span, \"declaration of an `unsafe` method\")\n             }\n         }\n     }"}, {"sha": "aac21f2af0d963e4144989873a20dbddc0c1ec57", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -102,9 +102,19 @@ impl<'a> Registry<'a> {\n             panic!(\"user-defined macros may not be named `macro_rules`\");\n         }\n         self.syntax_exts.push((name, match extension {\n-            NormalTT(ext, _, allow_internal_unstable) => {\n+            NormalTT {\n+                expander,\n+                def_info: _,\n+                allow_internal_unstable,\n+                allow_internal_unsafe\n+            } => {\n                 let nid = ast::CRATE_NODE_ID;\n-                NormalTT(ext, Some((nid, self.krate_span)), allow_internal_unstable)\n+                NormalTT {\n+                    expander,\n+                    def_info: Some((nid, self.krate_span)),\n+                    allow_internal_unstable,\n+                    allow_internal_unsafe\n+                }\n             }\n             IdentTT(ext, _, allow_internal_unstable) => {\n                 IdentTT(ext, Some(self.krate_span), allow_internal_unstable)\n@@ -134,8 +144,12 @@ impl<'a> Registry<'a> {\n     /// It builds for you a `NormalTT` that calls `expander`,\n     /// and also takes care of interning the macro's name.\n     pub fn register_macro(&mut self, name: &str, expander: MacroExpanderFn) {\n-        self.register_syntax_extension(Symbol::intern(name),\n-                                       NormalTT(Box::new(expander), None, false));\n+        self.register_syntax_extension(Symbol::intern(name), NormalTT {\n+            expander: Box::new(expander),\n+            def_info: None,\n+            allow_internal_unstable: false,\n+            allow_internal_unsafe: false,\n+        });\n     }\n \n     /// Register a compiler lint pass."}, {"sha": "7572c4aa6802a423ce3d1b3eee1a2d54fed8b0a0", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -313,7 +313,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn check_unused_macros(&self) {\n         for did in self.unused_macros.iter() {\n             let id_span = match *self.macro_map[did] {\n-                SyntaxExtension::NormalTT(_, isp, _) => isp,\n+                SyntaxExtension::NormalTT { def_info, .. } => def_info,\n                 SyntaxExtension::DeclMacro(.., osp) => osp,\n                 _ => None,\n             };"}, {"sha": "72b2552f64fc662295fc1108d21c04b89a98b4af", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -532,10 +532,16 @@ pub enum SyntaxExtension {\n     /// A normal, function-like syntax extension.\n     ///\n     /// `bytes!` is a `NormalTT`.\n-    ///\n-    /// The `bool` dictates whether the contents of the macro can\n-    /// directly use `#[unstable]` things (true == yes).\n-    NormalTT(Box<TTMacroExpander>, Option<(ast::NodeId, Span)>, bool),\n+    NormalTT {\n+        expander: Box<TTMacroExpander>,\n+        def_info: Option<(ast::NodeId, Span)>,\n+        /// Whether the contents of the macro can\n+        /// directly use `#[unstable]` things (true == yes).\n+        allow_internal_unstable: bool,\n+        /// Whether the contents of the macro can use `unsafe`\n+        /// without triggering the `unsafe_code` lint.\n+        allow_internal_unsafe: bool,\n+    },\n \n     /// A function-like syntax extension that has an extra ident before\n     /// the block.\n@@ -562,7 +568,7 @@ impl SyntaxExtension {\n     pub fn kind(&self) -> MacroKind {\n         match *self {\n             SyntaxExtension::DeclMacro(..) |\n-            SyntaxExtension::NormalTT(..) |\n+            SyntaxExtension::NormalTT { .. } |\n             SyntaxExtension::IdentTT(..) |\n             SyntaxExtension::ProcMacro(..) =>\n                 MacroKind::Bang,"}, {"sha": "38715f7275de5add9d39a947fa4a95dacb9b4dcb", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -64,6 +64,7 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt, span: Span, traits: &[ast::Path]\n             format: ExpnFormat::MacroAttribute(Symbol::intern(&pretty_name)),\n             span: None,\n             allow_internal_unstable: true,\n+            allow_internal_unsafe: false,\n         },\n     });\n "}, {"sha": "9625602fa4a5a02bcdf96b1101ef922d648a2ff5", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -411,6 +411,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 format: MacroAttribute(Symbol::intern(&format!(\"{}\", attr.path))),\n                 span: None,\n                 allow_internal_unstable: false,\n+                allow_internal_unsafe: false,\n             }\n         });\n \n@@ -458,7 +459,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let path = &mac.node.path;\n \n         let ident = ident.unwrap_or_else(|| keywords::Invalid.ident());\n-        let validate_and_set_expn_info = |def_site_span, allow_internal_unstable| {\n+        let validate_and_set_expn_info = |def_site_span,\n+                                          allow_internal_unstable,\n+                                          allow_internal_unsafe| {\n             if ident.name != keywords::Invalid.name() {\n                 return Err(format!(\"macro {}! expects no ident argument, given '{}'\", path, ident));\n             }\n@@ -467,7 +470,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 callee: NameAndSpan {\n                     format: MacroBang(Symbol::intern(&format!(\"{}\", path))),\n                     span: def_site_span,\n-                    allow_internal_unstable: allow_internal_unstable,\n+                    allow_internal_unstable,\n+                    allow_internal_unsafe,\n                 },\n             });\n             Ok(())\n@@ -476,20 +480,26 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let opt_expanded = match *ext {\n             DeclMacro(ref expand, def_span) => {\n                 if let Err(msg) = validate_and_set_expn_info(def_span.map(|(_, s)| s),\n-                                                             false) {\n+                                                             false, false) {\n                     self.cx.span_err(path.span, &msg);\n                     return kind.dummy(span);\n                 }\n                 kind.make_from(expand.expand(self.cx, span, mac.node.stream()))\n             }\n \n-            NormalTT(ref expandfun, def_info, allow_internal_unstable) => {\n+            NormalTT {\n+                ref expander,\n+                def_info,\n+                allow_internal_unstable,\n+                allow_internal_unsafe\n+            } => {\n                 if let Err(msg) = validate_and_set_expn_info(def_info.map(|(_, s)| s),\n-                                                             allow_internal_unstable) {\n+                                                             allow_internal_unstable,\n+                                                             allow_internal_unsafe) {\n                     self.cx.span_err(path.span, &msg);\n                     return kind.dummy(span);\n                 }\n-                kind.make_from(expandfun.expand(self.cx, span, mac.node.stream()))\n+                kind.make_from(expander.expand(self.cx, span, mac.node.stream()))\n             }\n \n             IdentTT(ref expander, tt_span, allow_internal_unstable) => {\n@@ -504,7 +514,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     callee: NameAndSpan {\n                         format: MacroBang(Symbol::intern(&format!(\"{}\", path))),\n                         span: tt_span,\n-                        allow_internal_unstable: allow_internal_unstable,\n+                        allow_internal_unstable,\n+                        allow_internal_unsafe: false,\n                     }\n                 });\n \n@@ -540,6 +551,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         span: None,\n                         // FIXME probably want to follow macro_rules macros here.\n                         allow_internal_unstable: false,\n+                        allow_internal_unsafe: false,\n                     },\n                 });\n \n@@ -578,6 +590,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 format: MacroAttribute(pretty_name),\n                 span: None,\n                 allow_internal_unstable: false,\n+                allow_internal_unsafe: false,\n             }\n         };\n "}, {"sha": "7b3fe2bd993a9a6941232d00505a3cb4df39d448", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -269,7 +269,7 @@ pub fn compile(sess: &ParseSess, features: &RefCell<Features>, def: &ast::Item)\n         valid &= check_lhs_no_empty_seq(sess, &[lhs.clone()])\n     }\n \n-    let exp: Box<_> = Box::new(MacroRulesMacroExpander {\n+    let expander: Box<_> = Box::new(MacroRulesMacroExpander {\n         name: def.ident,\n         lhses: lhses,\n         rhses: rhses,\n@@ -278,9 +278,15 @@ pub fn compile(sess: &ParseSess, features: &RefCell<Features>, def: &ast::Item)\n \n     if body.legacy {\n         let allow_internal_unstable = attr::contains_name(&def.attrs, \"allow_internal_unstable\");\n-        NormalTT(exp, Some((def.id, def.span)), allow_internal_unstable)\n+        let allow_internal_unsafe = attr::contains_name(&def.attrs, \"allow_internal_unsafe\");\n+        NormalTT {\n+            expander,\n+            def_info: Some((def.id, def.span)),\n+            allow_internal_unstable,\n+            allow_internal_unsafe\n+        }\n     } else {\n-        SyntaxExtension::DeclMacro(exp, Some((def.id, def.span)))\n+        SyntaxExtension::DeclMacro(expander, Some((def.id, def.span)))\n     }\n }\n "}, {"sha": "46ee126b9d90132302dd4611736465b0d871c994", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -194,6 +194,14 @@ declare_features! (\n     // rustc internal\n     (active, allow_internal_unstable, \"1.0.0\", None),\n \n+    // Allows the use of #[allow_internal_unsafe]. This is an\n+    // attribute on macro_rules! and can't use the attribute handling\n+    // below (it has to be checked before expansion possibly makes\n+    // macros disappear).\n+    //\n+    // rustc internal\n+    (active, allow_internal_unsafe, \"1.0.0\", None),\n+\n     // #23121. Array patterns have some hazards yet.\n     (active, slice_patterns, \"1.0.0\", Some(23121)),\n \n@@ -735,6 +743,11 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                               EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n                                               cfg_fn!(allow_internal_unstable))),\n \n+    (\"allow_internal_unsafe\", Normal, Gated(Stability::Unstable,\n+                                            \"allow_internal_unsafe\",\n+                                            EXPLAIN_ALLOW_INTERNAL_UNSAFE,\n+                                            cfg_fn!(allow_internal_unsafe))),\n+\n     (\"fundamental\", Whitelisted, Gated(Stability::Unstable,\n                                        \"fundamental\",\n                                        \"the `#[fundamental]` attribute \\\n@@ -1045,6 +1058,8 @@ pub const EXPLAIN_TRACE_MACROS: &'static str =\n     \"`trace_macros` is not stable enough for use and is subject to change\";\n pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &'static str =\n     \"allow_internal_unstable side-steps feature gating and stability checks\";\n+pub const EXPLAIN_ALLOW_INTERNAL_UNSAFE: &'static str =\n+    \"allow_internal_unsafe side-steps the unsafe_code lint\";\n \n pub const EXPLAIN_CUSTOM_DERIVE: &'static str =\n     \"`#[derive]` for custom traits is deprecated and will be removed in the future.\";"}, {"sha": "430976e7d3ce4e98a29b25a0185a29daa6b03005", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -28,6 +28,7 @@ fn ignored_span(sp: Span) -> Span {\n             format: MacroAttribute(Symbol::intern(\"std_inject\")),\n             span: None,\n             allow_internal_unstable: true,\n+            allow_internal_unsafe: false,\n         }\n     });\n     Span { ctxt: SyntaxContext::empty().apply_mark(mark), ..sp }"}, {"sha": "c05e166e01331ef8a875bc12f3aec414f9ccc033", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -291,6 +291,7 @@ fn generate_test_harness(sess: &ParseSess,\n             format: MacroAttribute(Symbol::intern(\"test\")),\n             span: None,\n             allow_internal_unstable: true,\n+            allow_internal_unsafe: false,\n         }\n     });\n "}, {"sha": "439538a8b5ee311305babf8a9b5fb569df77bbb8", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -64,7 +64,12 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n     macro_rules! register {\n         ($( $name:ident: $f:expr, )*) => { $(\n             register(Symbol::intern(stringify!($name)),\n-                     NormalTT(Box::new($f as MacroExpanderFn), None, false));\n+                     NormalTT {\n+                        expander: Box::new($f as MacroExpanderFn),\n+                        def_info: None,\n+                        allow_internal_unstable: false,\n+                        allow_internal_unsafe: false,\n+                    });\n         )* }\n     }\n \n@@ -112,7 +117,12 @@ pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n \n     // format_args uses `unstable` things internally.\n     register(Symbol::intern(\"format_args\"),\n-             NormalTT(Box::new(format::expand_format_args), None, true));\n+             NormalTT {\n+                expander: Box::new(format::expand_format_args),\n+                def_info: None,\n+                allow_internal_unstable: true,\n+                allow_internal_unsafe: false,\n+            });\n \n     for (name, ext) in user_exts {\n         register(name, ext);"}, {"sha": "700386f68fee047e6b57a5f7fcf806fd6090fa0f", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -368,6 +368,7 @@ fn mk_registrar(cx: &mut ExtCtxt,\n             format: MacroAttribute(Symbol::intern(\"proc_macro\")),\n             span: None,\n             allow_internal_unstable: true,\n+            allow_internal_unsafe: false,\n         }\n     });\n     let span = Span { ctxt: SyntaxContext::empty().apply_mark(mark), ..DUMMY_SP };"}, {"sha": "514cc26666e39444d130fb56f3b4d9738b462ed7", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -310,6 +310,9 @@ pub struct NameAndSpan {\n     /// features internally without forcing the whole crate to opt-in\n     /// to them.\n     pub allow_internal_unstable: bool,\n+    /// Whether the macro is allowed to use `unsafe` internally\n+    /// even if the user crate has `#![forbid(unsafe_code)]`.\n+    pub allow_internal_unsafe: bool,\n     /// The span of the macro definition itself. The macro may not\n     /// have a sensible definition span (e.g. something defined\n     /// completely inside libsyntax) in which case this is None."}, {"sha": "e162bc26412f2c9f8e61a8c326d1eeae8bcf0a21", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -153,6 +153,16 @@ impl Span {\n         }\n     }\n \n+    /// Check if a span is \"internal\" to a macro in which `unsafe`\n+    /// can be used without triggering the `unsafe_code` lint\n+    //  (that is, a macro marked with `#[allow_internal_unsafe]`).\n+    pub fn allows_unsafe(&self) -> bool {\n+        match self.ctxt.outer().expn_info() {\n+            Some(info) => info.callee.allow_internal_unsafe,\n+            None => false,\n+        }\n+    }\n+\n     pub fn macro_backtrace(mut self) -> Vec<MacroBacktrace> {\n         let mut prev_span = DUMMY_SP;\n         let mut result = vec![];"}, {"sha": "590dc619f2f1aa3bc32f110f964cc82ba8dee167", "filename": "src/test/compile-fail/feature-gate-allow-internal-unsafe-nested-macro.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unsafe-nested-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unsafe-nested-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unsafe-nested-macro.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// gate-test-allow_internal_unsafe\n+\n+#![allow(unused_macros)]\n+\n+macro_rules! bar {\n+    () => {\n+        // more layers don't help:\n+        #[allow_internal_unsafe] //~ ERROR allow_internal_unsafe side-steps\n+        macro_rules! baz {\n+            () => {}\n+        }\n+    }\n+}\n+\n+bar!();\n+\n+fn main() {}"}, {"sha": "8da2ae8b29abe48dbb00b44ff555709b74c67453", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin_args.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs?ref=8a4facc3c30d9dfbbfc1ddc6d413dfb0520699c6", "patch": "@@ -48,5 +48,10 @@ impl TTMacroExpander for Expander {\n pub fn plugin_registrar(reg: &mut Registry) {\n     let args = reg.args().to_owned();\n     reg.register_syntax_extension(Symbol::intern(\"plugin_args\"),\n-        NormalTT(Box::new(Expander { args: args, }), None, false));\n+        NormalTT {\n+            expander: Box::new(Expander { args: args, }),\n+            def_info: None,\n+            allow_internal_unstable: false,\n+            allow_internal_unsafe: false,\n+        });\n }"}]}