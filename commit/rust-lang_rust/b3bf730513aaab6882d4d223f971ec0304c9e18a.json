{"sha": "b3bf730513aaab6882d4d223f971ec0304c9e18a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzYmY3MzA1MTNhYWFiNjg4MmQ0ZDIyM2Y5NzFlYzAzMDRjOWUxOGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T11:30:41Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T11:30:41Z"}, "message": "don't panic on invalid primval types, report an error instead", "tree": {"sha": "dda025e9c3c74f5db12572433f6034bc4db2653f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda025e9c3c74f5db12572433f6034bc4db2653f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3bf730513aaab6882d4d223f971ec0304c9e18a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYGx/hAAoJEFbW7qD8Z6xG398P/jFvOkjsibLM8qfeSSndhK16\ngA/qlnhSIHlHVrVUcvR+tqVAqEWaocx7vt1iE7ijYXhqr7QVBL7stRfbrtOf/0HY\nqyQ7LIRyHfjPCFJP5QLPRUTfuDbmrLOIu1WCYlcLsHaf8bTZ7P+1BSoNO1657dW6\n/q23eiHvsAsQt/9eLvW1/K1iOLtJJJjMeDWArE1z8qQvTzZWuBa/n1B6c2hF1nKj\nTDyoy+cCrAIx1cpO1+Q2ufjBnhk1N1a3Wr3mh+GcCdKWN3128DppGnzOtPorQRvW\nFvPD4b2i+vbS9Fm+og0MokceaawTF1Wo4CB0xB0GQ96RD3nFUQlOPUBt1eoCubYZ\nRZjfwBnx8yvPt05lc4EqETu5FvbHYq/arqHhT6dLvnX3Q6EgnEUwtFVaRkqAsNEC\np2ncPj3SOiQ+CI8dey8q70de0NAH38fivN8GyciUcSbqN7hG5Uxgy02nkBX4A0Tk\nOoqcc2B5LAERG7BJ4nKzMLqC14ixl6ywLUNSbzsdzTke/oxuhGHo9steJ/21P+X2\nOarn9rbqAoehQMJNhUxYiI5nG/aNKOCRSmk7t5zCjnbbZMhYPtVAvuOsBrrZ37qm\nebqcknSuw9uk9DpKxmHK6afqOvyDjbZWD+C3bTgJC8sQDY4goY6i7GYkw8mjuRjy\n8kqRBYtENtpt/yKXiRD8\n=Bkq8\n-----END PGP SIGNATURE-----", "payload": "tree dda025e9c3c74f5db12572433f6034bc4db2653f\nparent 19c44dab056ededb388d8336e85341c00f2a2570\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478172641 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478172641 +0100\n\ndon't panic on invalid primval types, report an error instead"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3bf730513aaab6882d4d223f971ec0304c9e18a", "html_url": "https://github.com/rust-lang/rust/commit/b3bf730513aaab6882d4d223f971ec0304c9e18a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3bf730513aaab6882d4d223f971ec0304c9e18a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c44dab056ededb388d8336e85341c00f2a2570", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c44dab056ededb388d8336e85341c00f2a2570", "html_url": "https://github.com/rust-lang/rust/commit/19c44dab056ededb388d8336e85341c00f2a2570"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "86f22d33a257e22fce6e4656eae420a6322ba4db", "filename": "src/error.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b3bf730513aaab6882d4d223f971ec0304c9e18a/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3bf730513aaab6882d4d223f971ec0304c9e18a/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=b3bf730513aaab6882d4d223f971ec0304c9e18a", "patch": "@@ -1,7 +1,7 @@\n use std::error::Error;\n use std::fmt;\n use rustc::mir;\n-use rustc::ty::BareFnTy;\n+use rustc::ty::{BareFnTy, Ty};\n use memory::Pointer;\n use rustc_const_math::ConstMathErr;\n use syntax::codemap::Span;\n@@ -46,6 +46,7 @@ pub enum EvalError<'tcx> {\n     ModifiedConstantMemory,\n     AssumptionNotHeld,\n     InlineAsm,\n+    TypeNotPrimitive(Ty<'tcx>),\n }\n \n pub type EvalResult<'tcx, T> = Result<T, EvalError<'tcx>>;\n@@ -106,6 +107,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"`assume` argument was false\",\n             EvalError::InlineAsm =>\n                 \"cannot evaluate inline assembly\",\n+            EvalError::TypeNotPrimitive(_) =>\n+                \"expected primitive type, got nonprimitive\",\n         }\n     }\n \n@@ -134,6 +137,8 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n             EvalError::AlignmentCheckFailed { required, has } =>\n                write!(f, \"tried to access memory with alignment {}, but alignment {} is required\",\n                       has, required),\n+            EvalError::TypeNotPrimitive(ref ty) =>\n+                write!(f, \"expected primitive type, got {}\", ty),\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "6454c7641274e1a2ce078c56c24e903e422b39c1", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3bf730513aaab6882d4d223f971ec0304c9e18a/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3bf730513aaab6882d4d223f971ec0304c9e18a/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=b3bf730513aaab6882d4d223f971ec0304c9e18a", "patch": "@@ -1325,11 +1325,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         PrimValKind::from_uint_size(size)\n                     }\n                 } else {\n-                    bug!(\"primitive read of non-clike enum: {:?}\", ty);\n+                    return Err(EvalError::TypeNotPrimitive(ty));\n                 }\n             },\n \n-            _ => bug!(\"primitive read of non-primitive type: {:?}\", ty),\n+            _ => return Err(EvalError::TypeNotPrimitive(ty)),\n         };\n \n         Ok(kind)"}]}