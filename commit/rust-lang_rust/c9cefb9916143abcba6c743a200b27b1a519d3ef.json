{"sha": "c9cefb9916143abcba6c743a200b27b1a519d3ef", "node_id": "C_kwDOAAsO6NoAKGM5Y2VmYjk5MTYxNDNhYmNiYTZjNzQzYTIwMGIyN2IxYTUxOWQzZWY", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-03-22T14:03:19Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-03-22T14:03:19Z"}, "message": "Improve readability of signature help tests", "tree": {"sha": "9252aef6307fccd8728f791c08ef1859e15131af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9252aef6307fccd8728f791c08ef1859e15131af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9cefb9916143abcba6c743a200b27b1a519d3ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cefb9916143abcba6c743a200b27b1a519d3ef", "html_url": "https://github.com/rust-lang/rust/commit/c9cefb9916143abcba6c743a200b27b1a519d3ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9cefb9916143abcba6c743a200b27b1a519d3ef/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2cd18765abb681cacc2a57aebde13fa1dc32c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2cd18765abb681cacc2a57aebde13fa1dc32c1", "html_url": "https://github.com/rust-lang/rust/commit/5d2cd18765abb681cacc2a57aebde13fa1dc32c1"}], "stats": {"total": 193, "additions": 99, "deletions": 94}, "files": [{"sha": "030790e470ee49ec6f6f293899828e515eb81b4c", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 99, "deletions": 94, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/c9cefb9916143abcba6c743a200b27b1a519d3ef/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cefb9916143abcba6c743a200b27b1a519d3ef/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=c9cefb9916143abcba6c743a200b27b1a519d3ef", "patch": "@@ -208,8 +208,11 @@ fn signature_help_for_generics(\n \n #[cfg(test)]\n mod tests {\n+    use std::iter;\n+\n     use expect_test::{expect, Expect};\n     use ide_db::base_db::{fixture::ChangeFixture, FilePosition};\n+    use stdx::format_to;\n \n     use crate::RootDatabase;\n \n@@ -233,26 +236,32 @@ mod tests {\n             \"#\n         );\n         let (db, position) = position(&fixture);\n-        let call_info = crate::signature_help::signature_help(&db, position);\n-        let actual = match call_info {\n-            Some(call_info) => {\n-                let docs = match &call_info.doc {\n-                    None => \"\".to_string(),\n-                    Some(docs) => format!(\"{}\\n------\\n\", docs.as_str()),\n-                };\n-                let params = call_info\n-                    .parameter_labels()\n-                    .enumerate()\n-                    .map(|(i, param)| {\n-                        if Some(i) == call_info.active_parameter {\n-                            format!(\"<{}>\", param)\n-                        } else {\n-                            param.to_string()\n-                        }\n-                    })\n-                    .collect::<Vec<_>>()\n-                    .join(\", \");\n-                format!(\"{}{}\\n({})\\n\", docs, call_info.signature, params)\n+        let sig_help = crate::signature_help::signature_help(&db, position);\n+        let actual = match sig_help {\n+            Some(sig_help) => {\n+                let mut rendered = String::new();\n+                if let Some(docs) = &sig_help.doc {\n+                    format_to!(rendered, \"{}\\n------\\n\", docs.as_str());\n+                }\n+                format_to!(rendered, \"{}\\n\", sig_help.signature);\n+                let mut offset = 0;\n+                for (i, range) in sig_help.parameter_ranges().iter().enumerate() {\n+                    let is_active = sig_help.active_parameter == Some(i);\n+\n+                    let start = u32::from(range.start());\n+                    let gap = start.checked_sub(offset).unwrap_or_else(|| {\n+                        panic!(\"parameter ranges out of order: {:?}\", sig_help.parameter_ranges())\n+                    });\n+                    rendered.extend(iter::repeat(' ').take(gap as usize));\n+                    let width = u32::from(range.end() - range.start());\n+                    let marker = if is_active { '^' } else { '-' };\n+                    rendered.extend(iter::repeat(marker).take(width as usize));\n+                    offset += gap + width;\n+                }\n+                if !sig_help.parameter_ranges().is_empty() {\n+                    format_to!(rendered, \"\\n\");\n+                }\n+                rendered\n             }\n             None => String::new(),\n         };\n@@ -268,7 +277,7 @@ fn bar() { foo($03, ); }\n \"#,\n             expect![[r#\"\n                 fn foo(x: u32, y: u32) -> u32\n-                (<x: u32>, y: u32)\n+                       ^^^^^^  ------\n             \"#]],\n         );\n         check(\n@@ -278,7 +287,7 @@ fn bar() { foo(3$0, ); }\n \"#,\n             expect![[r#\"\n                 fn foo(x: u32, y: u32) -> u32\n-                (<x: u32>, y: u32)\n+                       ^^^^^^  ------\n             \"#]],\n         );\n         check(\n@@ -288,7 +297,7 @@ fn bar() { foo(3,$0 ); }\n \"#,\n             expect![[r#\"\n                 fn foo(x: u32, y: u32) -> u32\n-                (x: u32, <y: u32>)\n+                       ------  ^^^^^^\n             \"#]],\n         );\n         check(\n@@ -298,7 +307,7 @@ fn bar() { foo(3, $0); }\n \"#,\n             expect![[r#\"\n                 fn foo(x: u32, y: u32) -> u32\n-                (x: u32, <y: u32>)\n+                       ------  ^^^^^^\n             \"#]],\n         );\n     }\n@@ -312,7 +321,7 @@ fn bar() { foo($0); }\n \"#,\n             expect![[r#\"\n                 fn foo(x: u32, y: u32) -> u32\n-                (<x: u32>, y: u32)\n+                       ^^^^^^  ------\n             \"#]],\n         );\n     }\n@@ -329,7 +338,7 @@ fn bar() { foo($03, ); }\n \"#,\n             expect![[r#\"\n                 fn foo(x: i32, y: {unknown}) -> u32\n-                (<x: i32>, y: {unknown})\n+                       ^^^^^^  ------------\n             \"#]],\n         );\n     }\n@@ -343,7 +352,6 @@ fn bar() { foo($0); }\n \"#,\n             expect![[r#\"\n                 fn foo() -> {unknown}\n-                ()\n             \"#]],\n         );\n     }\n@@ -360,7 +368,6 @@ fn bar() {\n \"#,\n             expect![[r#\"\n                 fn new()\n-                ()\n             \"#]],\n         );\n     }\n@@ -379,7 +386,6 @@ fn bar() {\n \"#,\n             expect![[r#\"\n                 fn do_it(&self)\n-                ()\n             \"#]],\n         );\n     }\n@@ -397,7 +403,7 @@ fn main() { S.foo($0); }\n \"#,\n             expect![[r#\"\n                 fn foo(&self, x: i32)\n-                (<x: i32>)\n+                              ^^^^^^\n             \"#]],\n         );\n     }\n@@ -415,7 +421,7 @@ fn main() { S(1u32).foo($0); }\n \"#,\n             expect![[r#\"\n                 fn foo(&self, x: u32)\n-                (<x: u32>)\n+                              ^^^^^^\n             \"#]],\n         );\n     }\n@@ -433,7 +439,7 @@ fn main() { S::foo($0); }\n \"#,\n             expect![[r#\"\n                 fn foo(self: &S, x: i32)\n-                (<self: &S>, x: i32)\n+                       ^^^^^^^^  ------\n             \"#]],\n         );\n     }\n@@ -453,11 +459,11 @@ fn bar() {\n }\n \"#,\n             expect![[r#\"\n-            test\n-            ------\n-            fn foo(j: u32) -> u32\n-            (<j: u32>)\n-        \"#]],\n+                test\n+                ------\n+                fn foo(j: u32) -> u32\n+                       ^^^^^^\n+            \"#]],\n         );\n     }\n \n@@ -482,19 +488,19 @@ pub fn do() {\n     add_one($0\n }\"#,\n             expect![[r##\"\n-            Adds one to the number given.\n+                Adds one to the number given.\n \n-            # Examples\n+                # Examples\n \n-            ```\n-            let five = 5;\n+                ```\n+                let five = 5;\n \n-            assert_eq!(6, my_crate::add_one(5));\n-            ```\n-            ------\n-            fn add_one(x: i32) -> i32\n-            (<x: i32>)\n-        \"##]],\n+                assert_eq!(6, my_crate::add_one(5));\n+                ```\n+                ------\n+                fn add_one(x: i32) -> i32\n+                           ^^^^^^\n+            \"##]],\n         );\n     }\n \n@@ -524,19 +530,19 @@ pub fn do_it() {\n }\n \"#,\n             expect![[r##\"\n-            Adds one to the number given.\n+                Adds one to the number given.\n \n-            # Examples\n+                # Examples\n \n-            ```\n-            let five = 5;\n+                ```\n+                let five = 5;\n \n-            assert_eq!(6, my_crate::add_one(5));\n-            ```\n-            ------\n-            fn add_one(x: i32) -> i32\n-            (<x: i32>)\n-        \"##]],\n+                assert_eq!(6, my_crate::add_one(5));\n+                ```\n+                ------\n+                fn add_one(x: i32) -> i32\n+                           ^^^^^^\n+            \"##]],\n         );\n     }\n \n@@ -568,13 +574,13 @@ pub fn foo(mut r: WriteHandler<()>) {\n }\n \"#,\n             expect![[r#\"\n-            Method is called when writer finishes.\n+                Method is called when writer finishes.\n \n-            By default this method stops actor's `Context`.\n-            ------\n-            fn finished(&mut self, ctx: &mut {unknown})\n-            (<ctx: &mut {unknown}>)\n-        \"#]],\n+                By default this method stops actor's `Context`.\n+                ------\n+                fn finished(&mut self, ctx: &mut {unknown})\n+                                       ^^^^^^^^^^^^^^^^^^^\n+            \"#]],\n         );\n     }\n \n@@ -605,7 +611,7 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 fn bar(&self, _: u32)\n-                (<_: u32>)\n+                              ^^^^^^\n             \"#]],\n         );\n     }\n@@ -621,11 +627,11 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-            A cool tuple struct\n-            ------\n-            struct S(u32, i32)\n-            (u32, <i32>)\n-        \"#]],\n+                A cool tuple struct\n+                ------\n+                struct S(u32, i32)\n+                         ---  ^^^\n+            \"#]],\n         );\n     }\n \n@@ -640,7 +646,7 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 struct S({unknown})\n-                (<{unknown}>)\n+                         ^^^^^^^^^\n             \"#]],\n         );\n     }\n@@ -663,11 +669,11 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-            A Variant\n-            ------\n-            enum E::A(i32)\n-            (<i32>)\n-        \"#]],\n+                A Variant\n+                ------\n+                enum E::A(i32)\n+                          ^^^\n+            \"#]],\n         );\n     }\n \n@@ -717,7 +723,6 @@ id! {\n \"#,\n             expect![[r#\"\n                 fn foo()\n-                ()\n             \"#]],\n         );\n     }\n@@ -734,7 +739,7 @@ fn main() {\n         \"#,\n             expect![[r#\"\n                 (S) -> i32\n-                (<S>)\n+                 ^\n             \"#]],\n         )\n     }\n@@ -749,7 +754,7 @@ fn main(f: fn(i32, f64) -> char) {\n         \"#,\n             expect![[r#\"\n                 (i32, f64) -> char\n-                (i32, <f64>)\n+                 ---  ^^^\n             \"#]],\n         )\n     }\n@@ -763,9 +768,9 @@ fn main() {\n     foo($0\n }\"#,\n             expect![[r#\"\n-            fn foo(foo: u32, bar: u32)\n-            (<foo: u32>, bar: u32)\n-        \"#]],\n+                fn foo(foo: u32, bar: u32)\n+                       ^^^^^^^^  --------\n+            \"#]],\n         );\n         // check with surrounding space\n         check(\n@@ -775,9 +780,9 @@ fn main() {\n     foo( $0\n }\"#,\n             expect![[r#\"\n-            fn foo(foo: u32, bar: u32)\n-            (<foo: u32>, bar: u32)\n-        \"#]],\n+                fn foo(foo: u32, bar: u32)\n+                       ^^^^^^^^  --------\n+            \"#]],\n         )\n     }\n \n@@ -799,7 +804,7 @@ fn f() {\n                 Option docs.\n                 ------\n                 enum Option<T>\n-                (<T>)\n+                            ^\n             \"#]],\n         );\n     }\n@@ -826,7 +831,7 @@ fn f() {\n                 None docs.\n                 ------\n                 enum Option<T>\n-                (<T>)\n+                            ^\n             \"#]],\n         );\n     }\n@@ -849,7 +854,7 @@ fn f() {\n         \"#,\n             expect![[r#\"\n                 fn f<G: Tr<()>, H>\n-                (G: Tr<()>, <H>)\n+                     ---------  ^\n             \"#]],\n         );\n     }\n@@ -872,7 +877,7 @@ fn f() {\n         \"#,\n             expect![[r#\"\n                 fn f<T: Tr, U>\n-                (<T: Tr>, U)\n+                     ^^^^^  -\n             \"#]],\n         );\n     }\n@@ -892,9 +897,9 @@ fn f() {\n }\n         \"#,\n             expect![[r#\"\n-            fn f<T>\n-            (<T>)\n-        \"#]],\n+                fn f<T>\n+                     ^\n+            \"#]],\n         );\n     }\n \n@@ -909,9 +914,9 @@ fn f() {\n }\n         \"#,\n             expect![[r#\"\n-            fn callee<'a, const A: (), T, const C: u8>\n-            ('a, <const A: ()>, T, const C: u8)\n-        \"#]],\n+                fn callee<'a, const A: (), T, const C: u8>\n+                          --  ^^^^^^^^^^^  -  -----------\n+            \"#]],\n         );\n     }\n }"}]}