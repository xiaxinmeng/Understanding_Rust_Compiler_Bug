{"sha": "fc9dfcacf87eb5bb24271cdbb3863345fd27d751", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOWRmY2FjZjg3ZWI1YmIyNDI3MWNkYmIzODYzMzQ1ZmQyN2Q3NTE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-01-09T16:27:20Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-01-09T16:27:20Z"}, "message": "trans/metadata: Remove obsolete CrateStore::can_have_local_instance()", "tree": {"sha": "99f92e574e8fabdb373126494cb6d158ea61e38a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99f92e574e8fabdb373126494cb6d158ea61e38a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc9dfcacf87eb5bb24271cdbb3863345fd27d751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9dfcacf87eb5bb24271cdbb3863345fd27d751", "html_url": "https://github.com/rust-lang/rust/commit/fc9dfcacf87eb5bb24271cdbb3863345fd27d751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc9dfcacf87eb5bb24271cdbb3863345fd27d751/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "622730ca10321549d0bc0f4653d8ba143bc7951b", "url": "https://api.github.com/repos/rust-lang/rust/commits/622730ca10321549d0bc0f4653d8ba143bc7951b", "html_url": "https://github.com/rust-lang/rust/commit/622730ca10321549d0bc0f4653d8ba143bc7951b"}], "stats": {"total": 57, "additions": 7, "deletions": 50}, "files": [{"sha": "496a3d4a498478ce148a59f0d7d9170ec81a7267", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc9dfcacf87eb5bb24271cdbb3863345fd27d751/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9dfcacf87eb5bb24271cdbb3863345fd27d751/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=fc9dfcacf87eb5bb24271cdbb3863345fd27d751", "patch": "@@ -259,11 +259,6 @@ pub trait CrateStore<'tcx> {\n     fn get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> Mir<'tcx>;\n     fn is_item_mir_available(&self, def: DefId) -> bool;\n \n-    /// Take a look if we need to inline or monomorphize this. If so, we\n-    /// will emit code for this item in the local crate, and thus\n-    /// create a translation item for it.\n-    fn can_have_local_instance<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> bool;\n-\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<CrateNum>;\n@@ -438,9 +433,6 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn is_item_mir_available(&self, def: DefId) -> bool {\n         bug!(\"is_item_mir_available\")\n     }\n-    fn can_have_local_instance<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> bool {\n-        bug!(\"can_have_local_instance\")\n-    }\n \n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that."}, {"sha": "7cd26df0246eab36eca935717958451e8f723384", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc9dfcacf87eb5bb24271cdbb3863345fd27d751/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9dfcacf87eb5bb24271cdbb3863345fd27d751/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=fc9dfcacf87eb5bb24271cdbb3863345fd27d751", "patch": "@@ -470,15 +470,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(def.krate).is_item_mir_available(def.index)\n     }\n \n-    fn can_have_local_instance<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> bool {\n-        if def.is_local() {\n-            true\n-        } else {\n-            self.dep_graph.read(DepNode::MetaData(def));\n-            self.get_crate_data(def.krate).can_have_local_instance(tcx, def.index)\n-        }\n-    }\n-\n     fn crates(&self) -> Vec<CrateNum>\n     {\n         let mut result = vec![];"}, {"sha": "4abdee345c2985011e4a2d9e87954652ef95d47f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 32, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fc9dfcacf87eb5bb24271cdbb3863345fd27d751/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9dfcacf87eb5bb24271cdbb3863345fd27d751/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=fc9dfcacf87eb5bb24271cdbb3863345fd27d751", "patch": "@@ -445,14 +445,6 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Closure(_) => return None,\n         })\n     }\n-    fn is_const_fn(&self, meta: &CrateMetadata) -> bool {\n-        let constness = match *self {\n-            EntryKind::Method(data) => data.decode(meta).fn_data.constness,\n-            EntryKind::Fn(data) => data.decode(meta).constness,\n-            _ => hir::Constness::NotConst,\n-        };\n-        constness == hir::Constness::Const\n-    }\n }\n \n impl<'a, 'tcx> CrateMetadata {\n@@ -804,29 +796,6 @@ impl<'a, 'tcx> CrateMetadata {\n         self.maybe_entry(id).and_then(|item| item.decode(self).mir).is_some()\n     }\n \n-    pub fn can_have_local_instance(&self,\n-                                   tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                   id: DefIndex) -> bool {\n-        self.maybe_entry(id).map_or(false, |item| {\n-            let item = item.decode(self);\n-            // if we don't have a MIR, then this item was never meant to be locally instantiated\n-            // or we have a bug in the metadata serialization\n-            item.mir.is_some() && (\n-                // items with generics always can have local instances if monomorphized\n-                item.generics.map_or(false, |generics| {\n-                    let generics = generics.decode((self, tcx));\n-                    generics.parent_types != 0 || !generics.types.is_empty()\n-                }) ||\n-                match item.kind {\n-                    EntryKind::Closure(_) => true,\n-                    _ => false,\n-                } ||\n-                item.kind.is_const_fn(self) ||\n-                attr::requests_inline(&self.get_attributes(&item))\n-            )\n-        })\n-    }\n-\n     pub fn maybe_get_item_mir(&self,\n                               tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                               id: DefIndex)\n@@ -1043,7 +1012,12 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn is_const_fn(&self, id: DefIndex) -> bool {\n-        self.entry(id).kind.is_const_fn(self)\n+        let constness = match self.entry(id).kind {\n+            EntryKind::Method(data) => data.decode(self).fn_data.constness,\n+            EntryKind::Fn(data) => data.decode(self).constness,\n+            _ => hir::Constness::NotConst,\n+        };\n+        constness == hir::Constness::Const\n     }\n \n     pub fn is_foreign_item(&self, id: DefIndex) -> bool {"}, {"sha": "5e409a2aa5520e076afd3a7d1dbb16d05f9c2c9b", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc9dfcacf87eb5bb24271cdbb3863345fd27d751/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc9dfcacf87eb5bb24271cdbb3863345fd27d751/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=fc9dfcacf87eb5bb24271cdbb3863345fd27d751", "patch": "@@ -698,7 +698,7 @@ fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             // crate\n             false\n         } else {\n-            if !tcx.sess.cstore.can_have_local_instance(tcx, def_id) {\n+            if !tcx.sess.cstore.is_item_mir_available(def_id) {\n                 bug!(\"Cannot create local trans-item for {:?}\", def_id)\n             }\n             true"}]}