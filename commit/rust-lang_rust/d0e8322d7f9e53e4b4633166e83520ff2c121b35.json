{"sha": "d0e8322d7f9e53e4b4633166e83520ff2c121b35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZTgzMjJkN2Y5ZTUzZTRiNDYzMzE2NmU4MzUyMGZmMmMxMjFiMzU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-09-17T23:36:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-17T23:36:08Z"}, "message": "Merge pull request #1160 from est31/master\n\nTwo improvements", "tree": {"sha": "abd0b4caf34941859ee100873b3e319980256dc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abd0b4caf34941859ee100873b3e319980256dc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0e8322d7f9e53e4b4633166e83520ff2c121b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e8322d7f9e53e4b4633166e83520ff2c121b35", "html_url": "https://github.com/rust-lang/rust/commit/d0e8322d7f9e53e4b4633166e83520ff2c121b35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0e8322d7f9e53e4b4633166e83520ff2c121b35/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "url": "https://api.github.com/repos/rust-lang/rust/commits/4418fab4f24e6497aa2a1f71bb4cf963c2971a28", "html_url": "https://github.com/rust-lang/rust/commit/4418fab4f24e6497aa2a1f71bb4cf963c2971a28"}, {"sha": "c6243c950ee3376f562cc2dd08a3d31c9c3818b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6243c950ee3376f562cc2dd08a3d31c9c3818b2", "html_url": "https://github.com/rust-lang/rust/commit/c6243c950ee3376f562cc2dd08a3d31c9c3818b2"}], "stats": {"total": 185, "additions": 168, "deletions": 17}, "files": [{"sha": "5a525f1bb23da4020479d75562ebd54deceb0de1", "filename": "src/comment.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -71,6 +71,16 @@ pub fn rewrite_comment(orig: &str,\n     let indent_str = offset.to_string(config);\n     let line_breaks = s.chars().filter(|&c| c == '\\n').count();\n \n+    let num_bare_lines = s.lines()\n+        .enumerate()\n+        .map(|(_, line)| line.trim())\n+        .filter(|l| !(l.starts_with('*') || l.starts_with(\"//\") || l.starts_with(\"/*\")))\n+        .count();\n+\n+    if num_bare_lines > 0 && !config.normalize_comments {\n+        return Some(orig.to_owned());\n+    }\n+\n     let lines = s.lines()\n         .enumerate()\n         .map(|(i, mut line)| {"}, {"sha": "f93a6e115a5f4f42256d1bf31e73515f1cf0d0f3", "filename": "src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -410,7 +410,12 @@ create_config! {\n                                                block indented. -1 means never use block indent.\";\n     space_before_type_annotation: bool, false,\n         \"Leave a space before the colon in a type annotation\";\n+    space_after_type_annotation_colon: bool, true,\n+        \"Leave a space after the colon in a type annotation\";\n     space_before_bound: bool, false, \"Leave a space before the colon in a trait or lifetime bound\";\n+    space_after_bound_colon: bool, true,\n+        \"Leave a space after the colon in a trait or lifetime bound\";\n+    spaces_around_ranges: bool, false, \"Put spaces around the  .. and ... range operators\";\n     use_try_shorthand: bool, false, \"Replace uses of the try! macro by the ? shorthand\";\n     write_mode: WriteMode, WriteMode::Replace,\n         \"What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage\";"}, {"sha": "11e2ca8814577ce7c9ca97944859108ea51a1201", "filename": "src/expr.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -219,13 +219,28 @@ fn format_expr(expr: &ast::Expr,\n \n             match (lhs.as_ref().map(|x| &**x), rhs.as_ref().map(|x| &**x)) {\n                 (Some(ref lhs), Some(ref rhs)) => {\n-                    rewrite_pair(&**lhs, &**rhs, \"\", delim, \"\", context, width, offset)\n+                    let sp_delim = if context.config.spaces_around_ranges {\n+                        format!(\" {} \", delim)\n+                    } else {\n+                        delim.into()\n+                    };\n+                    rewrite_pair(&**lhs, &**rhs, \"\", &sp_delim, \"\", context, width, offset)\n                 }\n                 (None, Some(ref rhs)) => {\n-                    rewrite_unary_prefix(context, delim, &**rhs, width, offset)\n+                    let sp_delim = if context.config.spaces_around_ranges {\n+                        format!(\"{} \", delim)\n+                    } else {\n+                        delim.into()\n+                    };\n+                    rewrite_unary_prefix(context, &sp_delim, &**rhs, width, offset)\n                 }\n                 (Some(ref lhs), None) => {\n-                    rewrite_unary_suffix(context, delim, &**lhs, width, offset)\n+                    let sp_delim = if context.config.spaces_around_ranges {\n+                        format!(\" {}\", delim)\n+                    } else {\n+                        delim.into()\n+                    };\n+                    rewrite_unary_suffix(context, &sp_delim, &**lhs, width, offset)\n                 }\n                 (None, None) => wrap_str(delim.into(), context.config.max_width, width, offset),\n             }\n@@ -1672,10 +1687,11 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n }\n \n pub fn type_annotation_separator(config: &Config) -> &str {\n-    if config.space_before_type_annotation {\n-        \" : \"\n-    } else {\n-        \": \"\n+    match (config.space_before_type_annotation, config.space_after_type_annotation_colon) {\n+        (true, true) => \" : \",\n+        (true, false) => \" :\",\n+        (false, true) => \": \",\n+        (false, false) => \":\",\n     }\n }\n "}, {"sha": "b381ba8b7b28880a8d535083d7789d4ba38b1a51", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -1049,12 +1049,17 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n     Some(result)\n }\n \n-fn type_annotation_spacing(config: &Config) -> &str {\n-    if config.space_before_type_annotation {\n+fn type_annotation_spacing(config: &Config) -> (&str, &str) {\n+    (if config.space_before_type_annotation {\n         \" \"\n     } else {\n         \"\"\n-    }\n+    },\n+     if config.space_after_type_annotation_colon {\n+        \" \"\n+    } else {\n+        \"\"\n+    })\n }\n \n impl Rewrite for ast::StructField {\n@@ -1075,7 +1080,14 @@ impl Rewrite for ast::StructField {\n \n         let type_annotation_spacing = type_annotation_spacing(context.config);\n         let result = match name {\n-            Some(name) => format!(\"{}{}{}{}: \", attr_str, vis, name, type_annotation_spacing),\n+            Some(name) => {\n+                format!(\"{}{}{}{}:{}\",\n+                        attr_str,\n+                        vis,\n+                        name,\n+                        type_annotation_spacing.0,\n+                        type_annotation_spacing.1)\n+            }\n             None => format!(\"{}{}\", attr_str, vis),\n         };\n \n@@ -1095,12 +1107,13 @@ pub fn rewrite_static(prefix: &str,\n                       context: &RewriteContext)\n                       -> Option<String> {\n     let type_annotation_spacing = type_annotation_spacing(context.config);\n-    let prefix = format!(\"{}{} {}{}{}: \",\n+    let prefix = format!(\"{}{} {}{}{}:{}\",\n                          format_visibility(vis),\n                          prefix,\n                          format_mutability(mutability),\n                          ident,\n-                         type_annotation_spacing);\n+                         type_annotation_spacing.0,\n+                         type_annotation_spacing.1);\n     // 2 = \" =\".len()\n     let ty_str = try_opt!(ty.rewrite(context,\n                                      context.config.max_width - context.block_indent.width() -\n@@ -1175,7 +1188,10 @@ impl Rewrite for ast::Arg {\n                 if context.config.space_before_type_annotation {\n                     result.push_str(\" \");\n                 }\n-                result.push_str(\": \");\n+                result.push_str(\":\");\n+                if context.config.space_after_type_annotation_colon {\n+                    result.push_str(\" \");\n+                }\n                 let max_width = try_opt!(width.checked_sub(result.len()));\n                 let ty_str = try_opt!(self.ty.rewrite(context, max_width, offset + result.len()));\n                 result.push_str(&ty_str);"}, {"sha": "a718750db955a7fbad0da4ff3ca7b9cadbe82ee2", "filename": "src/types.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -405,12 +405,21 @@ fn rewrite_bounded_lifetime<'b, I>(lt: &ast::Lifetime,\n         let appendix: Vec<_> = try_opt!(bounds.into_iter()\n             .map(|b| b.rewrite(context, width, offset))\n             .collect());\n-        let bound_spacing = if context.config.space_before_bound {\n+        let bound_spacing_before = if context.config.space_before_bound {\n             \" \"\n         } else {\n             \"\"\n         };\n-        let result = format!(\"{}{}: {}\", result, bound_spacing, appendix.join(\" + \"));\n+        let bound_spacing_after = if context.config.space_after_bound_colon {\n+            \" \"\n+        } else {\n+            \"\"\n+        };\n+        let result = format!(\"{}{}:{}{}\",\n+                             result,\n+                             bound_spacing_before,\n+                             bound_spacing_after,\n+                             appendix.join(\" + \"));\n         wrap_str(result, context.config.max_width, width, offset)\n     }\n }\n@@ -456,7 +465,10 @@ impl Rewrite for ast::TyParam {\n             if context.config.space_before_bound {\n                 result.push_str(\" \");\n             }\n-            result.push_str(\": \");\n+            result.push_str(\":\");\n+            if context.config.space_after_bound_colon {\n+                result.push_str(\" \");\n+            }\n \n             let bounds: String = try_opt!(self.bounds\n                 .iter()"}, {"sha": "0ed18ca8da12a70cc417e7c80453380bd4afce79", "filename": "tests/source/comment4.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Fsource%2Fcomment4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Fsource%2Fcomment4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcomment4.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -33,3 +33,15 @@ fn test() {\n   /// test123\n fn doc_comment() {\n }\n+\n+/*\n+Regression test for issue #956\n+\n+(some very important text)\n+*/\n+\n+/*\n+fn debug_function() {\n+    println!(\"hello\");\n+}\n+// */"}, {"sha": "86f829c83538b1d7d71dcf11b44763f10ed84972", "filename": "tests/source/space-not-after-type-annotation-colon.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Fsource%2Fspace-not-after-type-annotation-colon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Fsource%2Fspace-not-after-type-annotation-colon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspace-not-after-type-annotation-colon.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-space_before_type_annotation: true\n+// rustfmt-space_after_type_annotation_colon: false\n+\n+static staticVar: i32 = 42;\n+const constVar: i32 = 42;\n+fn foo(paramVar: i32) {\n+    let localVar: i32 = 42;\n+}\n+struct S {\n+    fieldVar: i32,\n+}\n+fn f() {\n+    S { fieldVar: 42 }\n+}"}, {"sha": "4ec569f7902f8bdd14df9f5c5bdbd6d6afd1b51b", "filename": "tests/source/space-not-before-bound-colon.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Fsource%2Fspace-not-before-bound-colon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Fsource%2Fspace-not-before-bound-colon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspace-not-before-bound-colon.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-space_before_bound: true\n+// rustfmt-space_after_bound_colon: false\n+\n+trait Trait {}\n+fn f<'a, 'b: 'a, T: Trait>() {}"}, {"sha": "188f8f9074f994a2e2187c0780984254631b409d", "filename": "tests/source/spaces-around-ranges.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Fsource%2Fspaces-around-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Fsource%2Fspaces-around-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-around-ranges.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-spaces_around_ranges: true\n+\n+fn bar(v: &[u8]) {}\n+\n+fn foo() {\n+    let a = vec![0; 20];\n+    for j in 0...20 {\n+        for i in 0..3 {\n+            bar(a[i..j]);\n+            bar(a[i..]);\n+            bar(a[..j]);\n+            bar(a[...(j + 1)]);\n+        }\n+    }\n+}"}, {"sha": "910bade6c88f46620e149f8d286d5b418e35deec", "filename": "tests/target/comment4.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Ftarget%2Fcomment4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Ftarget%2Fcomment4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment4.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -32,3 +32,15 @@ fn test() {\n \n /// test123\n fn doc_comment() {}\n+\n+/*\n+Regression test for issue #956\n+\n+(some very important text)\n+*/\n+\n+/*\n+fn debug_function() {\n+    println!(\"hello\");\n+}\n+// */"}, {"sha": "3bdfa57fb7395579f2dfc3fe9fb9aa158be20d4a", "filename": "tests/target/space-not-after-type-annotation-colon.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Ftarget%2Fspace-not-after-type-annotation-colon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Ftarget%2Fspace-not-after-type-annotation-colon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspace-not-after-type-annotation-colon.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -0,0 +1,14 @@\n+// rustfmt-space_before_type_annotation: true\n+// rustfmt-space_after_type_annotation_colon: false\n+\n+static staticVar :i32 = 42;\n+const constVar :i32 = 42;\n+fn foo(paramVar :i32) {\n+    let localVar :i32 = 42;\n+}\n+struct S {\n+    fieldVar :i32,\n+}\n+fn f() {\n+    S { fieldVar :42 }\n+}"}, {"sha": "ef48eca11149aef89c97431ea73b3221d48aaa49", "filename": "tests/target/space-not-before-bound-colon.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Ftarget%2Fspace-not-before-bound-colon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Ftarget%2Fspace-not-before-bound-colon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspace-not-before-bound-colon.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -0,0 +1,5 @@\n+// rustfmt-space_before_bound: true\n+// rustfmt-space_after_bound_colon: false\n+\n+trait Trait {}\n+fn f<'a, 'b :'a, T :Trait>() {}"}, {"sha": "7b280f1439d41e403fdcda2fe0ba0ebbc4348d3f", "filename": "tests/target/spaces-around-ranges.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Ftarget%2Fspaces-around-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e8322d7f9e53e4b4633166e83520ff2c121b35/tests%2Ftarget%2Fspaces-around-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-around-ranges.rs?ref=d0e8322d7f9e53e4b4633166e83520ff2c121b35", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-spaces_around_ranges: true\n+\n+fn bar(v: &[u8]) {}\n+\n+fn foo() {\n+    let a = vec![0; 20];\n+    for j in 0 ... 20 {\n+        for i in 0 .. 3 {\n+            bar(a[i .. j]);\n+            bar(a[i ..]);\n+            bar(a[.. j]);\n+            bar(a[... (j + 1)]);\n+        }\n+    }\n+}"}]}