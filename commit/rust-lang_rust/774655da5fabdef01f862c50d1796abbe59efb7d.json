{"sha": "774655da5fabdef01f862c50d1796abbe59efb7d", "node_id": "C_kwDOAAsO6NoAKDc3NDY1NWRhNWZhYmRlZjAxZjg2MmM1MGQxNzk2YWJiZTU5ZWZiN2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-14T16:24:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-14T16:24:57Z"}, "message": "Rollup merge of #93977 - compiler-errors:sized-generic-metadata, r=wesleywiser\n\nType params and assoc types have unit metadata if they are sized\n\nExtend the logic in `Pointee` projection to ensure that we can satisfy `<T as Pointee>::Metadata = ()` if `T: Sized`.\n\ncc: `@SimonSapin` and #93959", "tree": {"sha": "374bc036cc4afb9a781c72568eab013660251808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/374bc036cc4afb9a781c72568eab013660251808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774655da5fabdef01f862c50d1796abbe59efb7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiL2xaCRBK7hj4Ov3rIwAAEb4IAHUjKkYrUSG8D6Wo+ymundiL\n6014MdG61T2te1xabu2zk0SeH5tvqdgHsPFHoNCS+7r4P8QJNOjfhjUAVdmpbmMY\nEMJ2O0F6ajSe129GsuaP39htWJBRX5NzeoYrLjPk5E6EEPXDHYedWA8/XbrBmwSh\nemI4VyehB16PIUd7Wdj7fLlhQqPD1TH+7/r6Gsir48WMsx47t4kQ/B5dMQnmV4Sa\nygpP0hnZjU6QP4ugJvH5x7Rm+VGQtsy8qjc6CLm2QtsIdX75hZUX/V5P+jJTFuBV\nYgTBG14ZMpePYTqSRP9tItGrZUSUELRBOoNrKfsrOwwEaFHwMJ3X1ILxUAGegPI=\n=wtP8\n-----END PGP SIGNATURE-----\n", "payload": "tree 374bc036cc4afb9a781c72568eab013660251808\nparent 0e423932f89baeaa59ea710caeda7a3834506fdd\nparent 210e829010022d2a8e49a2519aec8ac6bee20ed1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1647275097 +0100\ncommitter GitHub <noreply@github.com> 1647275097 +0100\n\nRollup merge of #93977 - compiler-errors:sized-generic-metadata, r=wesleywiser\n\nType params and assoc types have unit metadata if they are sized\n\nExtend the logic in `Pointee` projection to ensure that we can satisfy `<T as Pointee>::Metadata = ()` if `T: Sized`.\n\ncc: `@SimonSapin` and #93959\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774655da5fabdef01f862c50d1796abbe59efb7d", "html_url": "https://github.com/rust-lang/rust/commit/774655da5fabdef01f862c50d1796abbe59efb7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774655da5fabdef01f862c50d1796abbe59efb7d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e423932f89baeaa59ea710caeda7a3834506fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e423932f89baeaa59ea710caeda7a3834506fdd", "html_url": "https://github.com/rust-lang/rust/commit/0e423932f89baeaa59ea710caeda7a3834506fdd"}, {"sha": "210e829010022d2a8e49a2519aec8ac6bee20ed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/210e829010022d2a8e49a2519aec8ac6bee20ed1", "html_url": "https://github.com/rust-lang/rust/commit/210e829010022d2a8e49a2519aec8ac6bee20ed1"}], "stats": {"total": 149, "additions": 134, "deletions": 15}, "files": [{"sha": "e89f68fd0ea0cac933ce25d0f00c8975dac2c098", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/774655da5fabdef01f862c50d1796abbe59efb7d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774655da5fabdef01f862c50d1796abbe59efb7d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=774655da5fabdef01f862c50d1796abbe59efb7d", "patch": "@@ -2252,12 +2252,13 @@ impl<'tcx> Ty<'tcx> {\n         }\n     }\n \n-    /// Returns the type of metadata for (potentially fat) pointers to this type.\n+    /// Returns the type of metadata for (potentially fat) pointers to this type,\n+    /// and a boolean signifying if this is conditional on this type being `Sized`.\n     pub fn ptr_metadata_ty(\n         self,\n         tcx: TyCtxt<'tcx>,\n         normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,\n-    ) -> Ty<'tcx> {\n+    ) -> (Ty<'tcx>, bool) {\n         let tail = tcx.struct_tail_with_normalize(self, normalize);\n         match tail.kind() {\n             // Sized types\n@@ -2277,28 +2278,30 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Closure(..)\n             | ty::Never\n             | ty::Error(_)\n+            // Extern types have metadata = ().\n             | ty::Foreign(..)\n             // If returned by `struct_tail_without_normalization` this is a unit struct\n             // without any fields, or not a struct, and therefore is Sized.\n             | ty::Adt(..)\n             // If returned by `struct_tail_without_normalization` this is the empty tuple,\n             // a.k.a. unit type, which is Sized\n-            | ty::Tuple(..) => tcx.types.unit,\n+            | ty::Tuple(..) => (tcx.types.unit, false),\n \n-            ty::Str | ty::Slice(_) => tcx.types.usize,\n+            ty::Str | ty::Slice(_) => (tcx.types.usize, false),\n             ty::Dynamic(..) => {\n                 let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();\n-                tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])\n+                (tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()]), false)\n             },\n \n-            ty::Projection(_)\n-            | ty::Param(_)\n-            | ty::Opaque(..)\n-            | ty::Infer(ty::TyVar(_))\n+            // type parameters only have unit metadata if they're sized, so return true\n+            // to make sure we double check this during confirmation\n+            ty::Param(_) |  ty::Projection(_) | ty::Opaque(..) => (tcx.types.unit, true),\n+\n+            ty::Infer(ty::TyVar(_))\n             | ty::Bound(..)\n             | ty::Placeholder(..)\n             | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n-                bug!(\"`ptr_metadata_ty` applied to unexpected type: {:?}\", tail)\n+                bug!(\"`ptr_metadata_ty` applied to unexpected type: {:?} (tail = {:?})\", self, tail)\n             }\n         }\n     }"}, {"sha": "11f0507d6fd61175d8c0125bad91df0de2cdd855", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/774655da5fabdef01f862c50d1796abbe59efb7d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774655da5fabdef01f862c50d1796abbe59efb7d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=774655da5fabdef01f862c50d1796abbe59efb7d", "patch": "@@ -1469,6 +1469,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n \n                 let tail = selcx.tcx().struct_tail_with_normalize(self_ty, |ty| {\n+                    // We throw away any obligations we get from this, since we normalize\n+                    // and confirm these obligations once again during confirmation\n                     normalize_with_depth(\n                         selcx,\n                         obligation.param_env,\n@@ -1485,7 +1487,6 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     | ty::Int(_)\n                     | ty::Uint(_)\n                     | ty::Float(_)\n-                    | ty::Foreign(_)\n                     | ty::Str\n                     | ty::Array(..)\n                     | ty::Slice(_)\n@@ -1498,6 +1499,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     | ty::Generator(..)\n                     | ty::GeneratorWitness(..)\n                     | ty::Never\n+                    // Extern types have unit metadata, according to RFC 2850\n+                    | ty::Foreign(_)\n                     // If returned by `struct_tail_without_normalization` this is a unit struct\n                     // without any fields, or not a struct, and therefore is Sized.\n                     | ty::Adt(..)\n@@ -1506,9 +1509,18 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                     // Integers and floats are always Sized, and so have unit type metadata.\n                     | ty::Infer(ty::InferTy::IntVar(_) | ty::InferTy::FloatVar(..)) => true,\n \n-                    ty::Projection(..)\n+                    // type parameters, opaques, and unnormalized projections have pointer\n+                    // metadata if they're known (e.g. by the param_env) to be sized\n+                    ty::Param(_) | ty::Projection(..) | ty::Opaque(..)\n+                        if tail.is_sized(selcx.tcx().at(obligation.cause.span), obligation.param_env) =>\n+                    {\n+                        true\n+                    }\n+\n+                    // FIXME(compiler-errors): are Bound and Placeholder types ever known sized?\n+                    ty::Param(_)\n+                    | ty::Projection(..)\n                     | ty::Opaque(..)\n-                    | ty::Param(..)\n                     | ty::Bound(..)\n                     | ty::Placeholder(..)\n                     | ty::Infer(..)\n@@ -1517,7 +1529,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                             candidate_set.mark_ambiguous();\n                         }\n                         false\n-                    },\n+                    }\n                 }\n             }\n             super::ImplSource::Param(..) => {\n@@ -1727,7 +1739,7 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n     let self_ty = selcx.infcx().shallow_resolve(obligation.predicate.self_ty());\n \n     let mut obligations = vec![];\n-    let metadata_ty = self_ty.ptr_metadata_ty(tcx, |ty| {\n+    let (metadata_ty, check_is_sized) = self_ty.ptr_metadata_ty(tcx, |ty| {\n         normalize_with_depth_to(\n             selcx,\n             obligation.param_env,\n@@ -1737,6 +1749,19 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n             &mut obligations,\n         )\n     });\n+    if check_is_sized {\n+        let sized_predicate = ty::Binder::dummy(ty::TraitRef::new(\n+            tcx.require_lang_item(LangItem::Sized, None),\n+            tcx.mk_substs_trait(self_ty, &[]),\n+        ))\n+        .without_const()\n+        .to_predicate(tcx);\n+        obligations.push(Obligation::new(\n+            obligation.cause.clone(),\n+            obligation.param_env,\n+            sized_predicate,\n+        ));\n+    }\n \n     let substs = tcx.mk_substs([self_ty.into()].iter());\n     let metadata_def_id = tcx.require_lang_item(LangItem::Metadata, None);"}, {"sha": "d081721aca275089adc8018be92c77150abf81ff", "filename": "src/test/ui/traits/pointee-tail-is-generic-errors.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/774655da5fabdef01f862c50d1796abbe59efb7d/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774655da5fabdef01f862c50d1796abbe59efb7d/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.rs?ref=774655da5fabdef01f862c50d1796abbe59efb7d", "patch": "@@ -0,0 +1,22 @@\n+// edition:2018\n+\n+#![feature(ptr_metadata)]\n+#![feature(type_alias_impl_trait)]\n+\n+type Opaque = impl std::fmt::Debug + ?Sized;\n+\n+fn opaque() -> &'static Opaque {\n+    &[1] as &[i32]\n+}\n+\n+fn a<T: ?Sized>() {\n+    is_thin::<T>();\n+    //~^ ERROR type mismatch resolving `<T as Pointee>::Metadata == ()`\n+\n+    is_thin::<Opaque>();\n+    //~^ ERROR type mismatch resolving `<impl Debug + ?Sized as Pointee>::Metadata == ()`\n+}\n+\n+fn is_thin<T: std::ptr::Pointee<Metadata = ()> + ?Sized>() {}\n+\n+fn main() {}"}, {"sha": "fa5fe67e53cb6b57232da0337e6412f23e697983", "filename": "src/test/ui/traits/pointee-tail-is-generic-errors.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/774655da5fabdef01f862c50d1796abbe59efb7d/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/774655da5fabdef01f862c50d1796abbe59efb7d/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic-errors.stderr?ref=774655da5fabdef01f862c50d1796abbe59efb7d", "patch": "@@ -0,0 +1,40 @@\n+error[E0271]: type mismatch resolving `<T as Pointee>::Metadata == ()`\n+  --> $DIR/pointee-tail-is-generic-errors.rs:13:5\n+   |\n+LL |     is_thin::<T>();\n+   |     ^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<T as Pointee>::Metadata`\n+   = help: consider constraining the associated type `<T as Pointee>::Metadata` to `()`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+note: required by a bound in `is_thin`\n+  --> $DIR/pointee-tail-is-generic-errors.rs:20:33\n+   |\n+LL | fn is_thin<T: std::ptr::Pointee<Metadata = ()> + ?Sized>() {}\n+   |                                 ^^^^^^^^^^^^^ required by this bound in `is_thin`\n+\n+error[E0271]: type mismatch resolving `<impl Debug + ?Sized as Pointee>::Metadata == ()`\n+  --> $DIR/pointee-tail-is-generic-errors.rs:16:5\n+   |\n+LL | type Opaque = impl std::fmt::Debug + ?Sized;\n+   |               ----------------------------- the found opaque type\n+...\n+LL |     is_thin::<Opaque>();\n+   |     ^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |\n+   = note:    expected unit type `()`\n+           found associated type `<impl Debug + ?Sized as Pointee>::Metadata`\n+note: required by a bound in `is_thin`\n+  --> $DIR/pointee-tail-is-generic-errors.rs:20:33\n+   |\n+LL | fn is_thin<T: std::ptr::Pointee<Metadata = ()> + ?Sized>() {}\n+   |                                 ^^^^^^^^^^^^^ required by this bound in `is_thin`\n+help: consider constraining the associated type `<impl Debug + ?Sized as Pointee>::Metadata` to `()`\n+   |\n+LL | type Opaque = impl std::fmt::Debug<Metadata = ()> + ?Sized;\n+   |                                   +++++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "e0da0fc38613d8a17c89fbcfa0f9d9bfa72aa556", "filename": "src/test/ui/traits/pointee-tail-is-generic.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/774655da5fabdef01f862c50d1796abbe59efb7d/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774655da5fabdef01f862c50d1796abbe59efb7d/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fpointee-tail-is-generic.rs?ref=774655da5fabdef01f862c50d1796abbe59efb7d", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(ptr_metadata)]\n+#![feature(type_alias_impl_trait)]\n+\n+type Opaque = impl std::future::Future;\n+\n+fn opaque() -> Opaque {\n+    async {}\n+}\n+\n+fn a<T>() {\n+    // type parameter T is known to be sized\n+    is_thin::<T>();\n+    // tail of ADT (which is a type param) is known to be sized\n+    is_thin::<std::cell::Cell<T>>();\n+    // opaque type is known to be sized\n+    is_thin::<Opaque>();\n+}\n+\n+fn a2<T: Iterator>() {\n+    // associated type is known to be sized\n+    is_thin::<T::Item>();\n+}\n+\n+fn is_thin<T: std::ptr::Pointee<Metadata = ()>>() {}\n+\n+fn main() {}"}]}