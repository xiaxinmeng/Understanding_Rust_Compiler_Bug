{"sha": "7bda9f24d6591799c8685af6bb97ff8145549cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZGE5ZjI0ZDY1OTE3OTljODY4NWFmNmJiOTdmZjgxNDU1NDljYmQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-23T06:02:47Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-23T06:02:47Z"}, "message": "Make `step` an `EvalContext` method and remove `Stepper`.", "tree": {"sha": "427fd934932f0e76aaee69e973f01d0b1e562725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/427fd934932f0e76aaee69e973f01d0b1e562725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bda9f24d6591799c8685af6bb97ff8145549cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bda9f24d6591799c8685af6bb97ff8145549cbd", "html_url": "https://github.com/rust-lang/rust/commit/7bda9f24d6591799c8685af6bb97ff8145549cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bda9f24d6591799c8685af6bb97ff8145549cbd/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c19db95b8105e49040d88a0d878aec404f6b288", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c19db95b8105e49040d88a0d878aec404f6b288", "html_url": "https://github.com/rust-lang/rust/commit/3c19db95b8105e49040d88a0d878aec404f6b288"}], "stats": {"total": 93, "additions": 41, "deletions": 52}, "files": [{"sha": "410b7a3d79e9a48f36a35a11b3f43283a4f55fac", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7bda9f24d6591799c8685af6bb97ff8145549cbd/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bda9f24d6591799c8685af6bb97ff8145549cbd/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=7bda9f24d6591799c8685af6bb97ff8145549cbd", "patch": "@@ -25,10 +25,6 @@ use std::collections::HashMap;\n \n mod stepper;\n \n-pub fn step<'ecx, 'a: 'ecx, 'tcx: 'a>(ecx: &'ecx mut EvalContext<'a, 'tcx>) -> EvalResult<'tcx, bool> {\n-    stepper::Stepper::new(ecx).step()\n-}\n-\n pub struct EvalContext<'a, 'tcx: 'a> {\n     /// The results of the type checker, from rustc.\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -1571,7 +1567,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     }\n \n     loop {\n-        match step(&mut ecx) {\n+        match ecx.step() {\n             Ok(true) => {}\n             Ok(false) => break,\n             // FIXME: diverging functions can end up here in some future miri"}, {"sha": "37a7aa4d01179f8863128ff375b019cbd4b1a322", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 40, "deletions": 46, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/7bda9f24d6591799c8685af6bb97ff8145549cbd/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bda9f24d6591799c8685af6bb97ff8145549cbd/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=7bda9f24d6591799c8685af6bb97ff8145549cbd", "patch": "@@ -1,3 +1,7 @@\n+//! This module contains the `EvalContext` methods for executing a single step of the interpreter.\n+//!\n+//! The main entry point is the `step` method.\n+\n use super::{\n     CachedMir,\n     ConstantId,\n@@ -12,57 +16,28 @@ use rustc::mir::visit::{Visitor, LvalueContext};\n use syntax::codemap::Span;\n use std::rc::Rc;\n \n-pub(super) struct Stepper<'ecx, 'a: 'ecx, 'tcx: 'a>{\n-    ecx: &'ecx mut EvalContext<'a, 'tcx>,\n-}\n-\n-impl<'ecx, 'a, 'tcx> Stepper<'ecx, 'a, 'tcx> {\n-    pub(super) fn new(ecx: &'ecx mut EvalContext<'a, 'tcx>) -> Self {\n-        Stepper {\n-            ecx: ecx,\n-        }\n-    }\n-\n-    fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> EvalResult<'tcx, ()> {\n-        trace!(\"{:?}\", stmt);\n-        let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n-        self.ecx.eval_assignment(lvalue, rvalue)?;\n-        self.ecx.frame_mut().stmt += 1;\n-        Ok(())\n-    }\n-\n-    fn terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> EvalResult<'tcx, ()> {\n-        // after a terminator we go to a new block\n-        self.ecx.frame_mut().stmt = 0;\n-        trace!(\"{:?}\", terminator.kind);\n-        self.ecx.eval_terminator(terminator)?;\n-        if !self.ecx.stack.is_empty() {\n-            trace!(\"// {:?}\", self.ecx.frame().block);\n-        }\n-        Ok(())\n-    }\n-\n-    // returns true as long as there are more things to do\n-    pub(super) fn step(&mut self) -> EvalResult<'tcx, bool> {\n-        if self.ecx.stack.is_empty() {\n+impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n+    /// Returns true as long as there are more things to do.\n+    pub fn step(&mut self) -> EvalResult<'tcx, bool> {\n+        if self.stack.is_empty() {\n             return Ok(false);\n         }\n \n-        let block = self.ecx.frame().block;\n-        let stmt = self.ecx.frame().stmt;\n-        let mir = self.ecx.mir();\n+        let block = self.frame().block;\n+        let stmt = self.frame().stmt;\n+        let mir = self.mir();\n         let basic_block = &mir.basic_blocks()[block];\n \n         if let Some(ref stmt) = basic_block.statements.get(stmt) {\n-            let current_stack = self.ecx.stack.len();\n+            let current_stack = self.stack.len();\n             ConstantExtractor {\n                 span: stmt.source_info.span,\n-                substs: self.ecx.substs(),\n-                def_id: self.ecx.frame().def_id,\n-                ecx: self.ecx,\n+                substs: self.substs(),\n+                def_id: self.frame().def_id,\n+                ecx: self,\n                 mir: &mir,\n             }.visit_statement(block, stmt);\n-            if current_stack == self.ecx.stack.len() {\n+            if current_stack == self.stack.len() {\n                 self.statement(stmt)?;\n             } else {\n                 // ConstantExtractor added some new frames for statics/constants/promoteds\n@@ -73,15 +48,15 @@ impl<'ecx, 'a, 'tcx> Stepper<'ecx, 'a, 'tcx> {\n         }\n \n         let terminator = basic_block.terminator();\n-        let current_stack = self.ecx.stack.len();\n+        let current_stack = self.stack.len();\n         ConstantExtractor {\n             span: terminator.source_info.span,\n-            substs: self.ecx.substs(),\n-            def_id: self.ecx.frame().def_id,\n-            ecx: self.ecx,\n+            substs: self.substs(),\n+            def_id: self.frame().def_id,\n+            ecx: self,\n             mir: &mir,\n         }.visit_terminator(block, terminator);\n-        if current_stack == self.ecx.stack.len() {\n+        if current_stack == self.stack.len() {\n             self.terminator(terminator)?;\n         } else {\n             // ConstantExtractor added some new frames for statics/constants/promoteds\n@@ -90,6 +65,25 @@ impl<'ecx, 'a, 'tcx> Stepper<'ecx, 'a, 'tcx> {\n         }\n         Ok(true)\n     }\n+\n+    fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> EvalResult<'tcx, ()> {\n+        trace!(\"{:?}\", stmt);\n+        let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n+        self.eval_assignment(lvalue, rvalue)?;\n+        self.frame_mut().stmt += 1;\n+        Ok(())\n+    }\n+\n+    fn terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> EvalResult<'tcx, ()> {\n+        // after a terminator we go to a new block\n+        self.frame_mut().stmt = 0;\n+        trace!(\"{:?}\", terminator.kind);\n+        self.eval_terminator(terminator)?;\n+        if !self.stack.is_empty() {\n+            trace!(\"// {:?}\", self.frame().block);\n+        }\n+        Ok(())\n+    }\n }\n \n // WARNING: make sure that any methods implemented on this type don't ever access ecx.stack"}, {"sha": "3745a960a271e939d97e349f5c0adb5bcab3e195", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7bda9f24d6591799c8685af6bb97ff8145549cbd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bda9f24d6591799c8685af6bb97ff8145549cbd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7bda9f24d6591799c8685af6bb97ff8145549cbd", "patch": "@@ -36,7 +36,6 @@ pub use interpreter::{\n     EvalContext,\n     Frame,\n     eval_main,\n-    step,\n };\n \n pub use memory::Memory;"}]}