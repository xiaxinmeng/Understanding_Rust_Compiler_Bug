{"sha": "446aef691e7223f31b18236fb9bf2d08bc25ba46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NmFlZjY5MWU3MjIzZjMxYjE4MjM2ZmI5YmYyZDA4YmMyNWJhNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-25T08:54:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-25T08:54:16Z"}, "message": "Auto merge of #51335 - mark-i-m:allocator, r=oli-obk\n\nProhibit `global_allocator` in submodules\n\nBackground: #44113 is caused by weird interactions with hygiene. Hygiene is hard. After a lot of playing around, we decided that the best path forward would be to prohibit `global_allocator`s from being in submodules for now. When somebody gets it working, we can re-enable it.\n\nThis PR contains the following\n- Some hygiene \"fixes\" -- things I suspect are the correct thing to do that will make life easier in the future. This includes using call_site hygiene for the generated module and passing the correct crate name to the expansion config.\n- Comments and minor formatting fixes\n- Some debugging code\n- Code to prohibit `global_allocator` in submodules\n- Test checking that the proper error occurs.\n\ncc #44113 #49320 #51241\n\nr? @alexcrichton", "tree": {"sha": "7e3a20d6f84ee32c84d09fd06c3e169dd66ad676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e3a20d6f84ee32c84d09fd06c3e169dd66ad676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/446aef691e7223f31b18236fb9bf2d08bc25ba46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/446aef691e7223f31b18236fb9bf2d08bc25ba46", "html_url": "https://github.com/rust-lang/rust/commit/446aef691e7223f31b18236fb9bf2d08bc25ba46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/446aef691e7223f31b18236fb9bf2d08bc25ba46/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f9c7f9e6d069e62027e168da557625d0b518f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9c7f9e6d069e62027e168da557625d0b518f3e", "html_url": "https://github.com/rust-lang/rust/commit/5f9c7f9e6d069e62027e168da557625d0b518f3e"}, {"sha": "16d7f87b6cd416175cf145a17230051f83b15bf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d7f87b6cd416175cf145a17230051f83b15bf8", "html_url": "https://github.com/rust-lang/rust/commit/16d7f87b6cd416175cf145a17230051f83b15bf8"}], "stats": {"total": 169, "additions": 140, "deletions": 29}, "files": [{"sha": "64eea50e3e07e54bc04d2a2e9b54ea76b9341d27", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=446aef691e7223f31b18236fb9bf2d08bc25ba46", "patch": "@@ -2035,6 +2035,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"rustc_allocator\"\n version = \"0.0.0\"\n dependencies = [\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_target 0.0.0\","}, {"sha": "1cbde181cafae7e80ebab6815e6fbb2a3284b822", "filename": "src/librustc_allocator/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Flibrustc_allocator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Flibrustc_allocator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2FCargo.toml?ref=446aef691e7223f31b18236fb9bf2d08bc25ba46", "patch": "@@ -14,3 +14,4 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+log = \"0.4\""}, {"sha": "60d28d8098b4ca656b7b86cbb6617c63adf3dba7", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 79, "deletions": 28, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=446aef691e7223f31b18236fb9bf2d08bc25ba46", "patch": "@@ -10,37 +10,45 @@\n \n use rustc::middle::allocator::AllocatorKind;\n use rustc_errors;\n-use syntax::ast::{Attribute, Crate, LitKind, StrStyle};\n-use syntax::ast::{Arg, FnHeader, Generics, Mac, Mutability, Ty, Unsafety};\n-use syntax::ast::{self, Expr, Ident, Item, ItemKind, TyKind, VisibilityKind};\n-use syntax::attr;\n-use syntax::codemap::respan;\n-use syntax::codemap::{ExpnInfo, MacroAttribute};\n-use syntax::ext::base::ExtCtxt;\n-use syntax::ext::base::Resolver;\n-use syntax::ext::build::AstBuilder;\n-use syntax::ext::expand::ExpansionConfig;\n-use syntax::ext::hygiene::{self, Mark, SyntaxContext};\n-use syntax::fold::{self, Folder};\n-use syntax::parse::ParseSess;\n-use syntax::ptr::P;\n-use syntax::symbol::Symbol;\n-use syntax::util::small_vector::SmallVector;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax::{\n+    ast::{\n+        self, Arg, Attribute, Crate, Expr, FnHeader, Generics, Ident, Item, ItemKind,\n+        LitKind, Mac, Mod, Mutability, StrStyle, Ty, TyKind, Unsafety, VisibilityKind,\n+    },\n+    attr,\n+    codemap::{\n+        respan, ExpnInfo, MacroAttribute,\n+    },\n+    ext::{\n+        base::{ExtCtxt, Resolver},\n+        build::AstBuilder,\n+        expand::ExpansionConfig,\n+        hygiene::{self, Mark, SyntaxContext},\n+    },\n+    fold::{self, Folder},\n+    parse::ParseSess,\n+    ptr::P,\n+    symbol::Symbol,\n+    util::small_vector::SmallVector,\n+};\n+use syntax_pos::Span;\n \n use {AllocatorMethod, AllocatorTy, ALLOCATOR_METHODS};\n \n pub fn modify(\n     sess: &ParseSess,\n     resolver: &mut Resolver,\n     krate: Crate,\n+    crate_name: String,\n     handler: &rustc_errors::Handler,\n ) -> ast::Crate {\n     ExpandAllocatorDirectives {\n         handler,\n         sess,\n         resolver,\n         found: false,\n+        crate_name: Some(crate_name),\n+        in_submod: -1, // -1 to account for the \"root\" module\n     }.fold_crate(krate)\n }\n \n@@ -49,10 +57,17 @@ struct ExpandAllocatorDirectives<'a> {\n     handler: &'a rustc_errors::Handler,\n     sess: &'a ParseSess,\n     resolver: &'a mut Resolver,\n+    crate_name: Option<String>,\n+\n+    // For now, we disallow `global_allocator` in submodules because hygiene is hard. Keep track of\n+    // whether we are in a submodule or not. If `in_submod > 0` we are in a submodule.\n+    in_submod: isize,\n }\n \n impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n     fn fold_item(&mut self, item: P<Item>) -> SmallVector<P<Item>> {\n+        debug!(\"in submodule {}\", self.in_submod);\n+\n         let name = if attr::contains_name(&item.attrs, \"global_allocator\") {\n             \"global_allocator\"\n         } else {\n@@ -67,57 +82,93 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n             }\n         }\n \n+        if self.in_submod > 0 {\n+            self.handler\n+                .span_err(item.span, \"`global_allocator` cannot be used in submodules\");\n+            return SmallVector::one(item);\n+        }\n+\n         if self.found {\n-            self.handler.span_err(\n-                item.span,\n-                \"cannot define more than one \\\n-                 #[global_allocator]\",\n-            );\n+            self.handler\n+                .span_err(item.span, \"cannot define more than one #[global_allocator]\");\n             return SmallVector::one(item);\n         }\n         self.found = true;\n \n+        // Create a fresh Mark for the new macro expansion we are about to do\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(ExpnInfo {\n-            call_site: DUMMY_SP,\n+            call_site: item.span, // use the call site of the static\n             def_site: None,\n             format: MacroAttribute(Symbol::intern(name)),\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n             edition: hygiene::default_edition(),\n         });\n+\n+        // Tie the span to the macro expansion info we just created\n         let span = item.span.with_ctxt(SyntaxContext::empty().apply_mark(mark));\n-        let ecfg = ExpansionConfig::default(name.to_string());\n+\n+        // Create an expansion config\n+        let ecfg = ExpansionConfig::default(self.crate_name.take().unwrap());\n+\n+        // Generate a bunch of new items using the AllocFnFactory\n         let mut f = AllocFnFactory {\n             span,\n             kind: AllocatorKind::Global,\n             global: item.ident,\n             core: Ident::from_str(\"core\"),\n             cx: ExtCtxt::new(self.sess, ecfg, self.resolver),\n         };\n+\n+        // We will generate a new submodule. To `use` the static from that module, we need to get\n+        // the `super::...` path.\n         let super_path = f.cx.path(f.span, vec![Ident::from_str(\"super\"), f.global]);\n+\n+        // Generate the items in the submodule\n         let mut items = vec![\n+            // import `core` to use allocators\n             f.cx.item_extern_crate(f.span, f.core),\n+            // `use` the `global_allocator` in `super`\n             f.cx.item_use_simple(\n                 f.span,\n                 respan(f.span.shrink_to_lo(), VisibilityKind::Inherited),\n                 super_path,\n             ),\n         ];\n-        for method in ALLOCATOR_METHODS {\n-            items.push(f.allocator_fn(method));\n-        }\n+\n+        // Add the allocator methods to the submodule\n+        items.extend(\n+            ALLOCATOR_METHODS\n+                .iter()\n+                .map(|method| f.allocator_fn(method)),\n+        );\n+\n+        // Generate the submodule itself\n         let name = f.kind.fn_name(\"allocator_abi\");\n         let allocator_abi = Ident::with_empty_ctxt(Symbol::gensym(&name));\n         let module = f.cx.item_mod(span, span, allocator_abi, Vec::new(), items);\n         let module = f.cx.monotonic_expander().fold_item(module).pop().unwrap();\n \n-        let mut ret = SmallVector::new();\n+        // Return the item and new submodule\n+        let mut ret = SmallVector::with_capacity(2);\n         ret.push(item);\n         ret.push(module);\n+\n         return ret;\n     }\n \n+    // If we enter a submodule, take note.\n+    fn fold_mod(&mut self, m: Mod) -> Mod {\n+        debug!(\"enter submodule\");\n+        self.in_submod += 1;\n+        let ret = fold::noop_fold_mod(m, self);\n+        self.in_submod -= 1;\n+        debug!(\"exit submodule\");\n+        ret\n+    }\n+\n+    // `fold_mac` is disabled by default. Enable it here.\n     fn fold_mac(&mut self, mac: Mac) -> Mac {\n         fold::noop_fold_mac(mac, self)\n     }"}, {"sha": "b217d3665a24542306a6dceb838acbf80f7ab428", "filename": "src/librustc_allocator/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Flibrustc_allocator%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Flibrustc_allocator%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Flib.rs?ref=446aef691e7223f31b18236fb9bf2d08bc25ba46", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(rustc_private)]\n \n+#[macro_use] extern crate log;\n extern crate rustc;\n extern crate rustc_errors;\n extern crate rustc_target;"}, {"sha": "feeac9d938b6a4b01a352293d6fa54b0a355d2b6", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=446aef691e7223f31b18236fb9bf2d08bc25ba46", "patch": "@@ -1051,10 +1051,19 @@ where\n         });\n     }\n \n+    // Expand global allocators, which are treated as an in-tree proc macro\n     krate = time(sess, \"creating allocators\", || {\n-        allocator::expand::modify(&sess.parse_sess, &mut resolver, krate, sess.diagnostic())\n+        allocator::expand::modify(\n+            &sess.parse_sess,\n+            &mut resolver,\n+            krate,\n+            crate_name.to_string(),\n+            sess.diagnostic(),\n+        )\n     });\n \n+    // Done with macro expansion!\n+\n     after_expand(&krate)?;\n \n     if sess.opts.debugging_opts.input_stats {"}, {"sha": "39b65766924f97d1dc0b62a0ee6f1193f8775349", "filename": "src/test/ui/allocator-submodule.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Ftest%2Fui%2Fallocator-submodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Ftest%2Fui%2Fallocator-submodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator-submodule.rs?ref=446aef691e7223f31b18236fb9bf2d08bc25ba46", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that it is possible to create a global allocator in a submodule, rather than in the crate\n+// root.\n+\n+#![feature(alloc, allocator_api, global_allocator)]\n+\n+extern crate alloc;\n+\n+use std::{\n+    alloc::{GlobalAlloc, Layout},\n+    ptr,\n+};\n+\n+struct MyAlloc;\n+\n+unsafe impl GlobalAlloc for MyAlloc {\n+    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+        ptr::null_mut()\n+    }\n+\n+    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {}\n+}\n+\n+mod submod {\n+    use super::MyAlloc;\n+\n+    #[global_allocator]\n+    static MY_HEAP: MyAlloc = MyAlloc; //~ ERROR global_allocator\n+}\n+\n+fn main() {}"}, {"sha": "06e0d36e8a2b15f7b8b308b971eddc6016eb41a7", "filename": "src/test/ui/allocator-submodule.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Ftest%2Fui%2Fallocator-submodule.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/446aef691e7223f31b18236fb9bf2d08bc25ba46/src%2Ftest%2Fui%2Fallocator-submodule.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator-submodule.stderr?ref=446aef691e7223f31b18236fb9bf2d08bc25ba46", "patch": "@@ -0,0 +1,8 @@\n+error: `global_allocator` cannot be used in submodules\n+  --> $DIR/allocator-submodule.rs:37:5\n+   |\n+LL |     static MY_HEAP: MyAlloc = MyAlloc; //~ ERROR global_allocator\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}