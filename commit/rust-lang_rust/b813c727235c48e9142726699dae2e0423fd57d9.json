{"sha": "b813c727235c48e9142726699dae2e0423fd57d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MTNjNzI3MjM1YzQ4ZTkxNDI3MjY2OTlkYWUyZTA0MjNmZDU3ZDk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-06T01:11:29Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-11-06T01:12:35Z"}, "message": "Clean up `StructuralEq` docs", "tree": {"sha": "5411b7f46411a50f49c37302a0f49921c679588f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5411b7f46411a50f49c37302a0f49921c679588f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b813c727235c48e9142726699dae2e0423fd57d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b813c727235c48e9142726699dae2e0423fd57d9", "html_url": "https://github.com/rust-lang/rust/commit/b813c727235c48e9142726699dae2e0423fd57d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b813c727235c48e9142726699dae2e0423fd57d9/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2bbdd0a3257cc980c934a92c5bf9808cf31728c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2bbdd0a3257cc980c934a92c5bf9808cf31728c", "html_url": "https://github.com/rust-lang/rust/commit/f2bbdd0a3257cc980c934a92c5bf9808cf31728c"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "29364d0ce9b89130650c8f2c788ddee8d19503c5", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b813c727235c48e9142726699dae2e0423fd57d9/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b813c727235c48e9142726699dae2e0423fd57d9/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=b813c727235c48e9142726699dae2e0423fd57d9", "patch": "@@ -156,18 +156,18 @@ pub trait StructuralPartialEq {\n /// Required trait for constants used in pattern matches.\n ///\n /// Any type that derives `Eq` automatically implements this trait, *regardless*\n-/// of whether its type-parameters implement `Eq`.\n+/// of whether its type parameters implement `Eq`.\n ///\n-/// This is a hack to workaround a limitation in our type-system.\n+/// This is a hack to work around a limitation in our type system.\n ///\n-/// Background:\n+/// # Background\n ///\n /// We want to require that types of consts used in pattern matches\n /// have the attribute `#[derive(PartialEq, Eq)]`.\n ///\n /// In a more ideal world, we could check that requirement by just checking that\n-/// the given type implements both (1.) the `StructuralPartialEq` trait *and*\n-/// (2.) the `Eq` trait. However, you can have ADTs that *do* `derive(PartialEq, Eq)`,\n+/// the given type implements both the `StructuralPartialEq` trait *and*\n+/// the `Eq` trait. However, you can have ADTs that *do* `derive(PartialEq, Eq)`,\n /// and be a case that we want the compiler to accept, and yet the constant's\n /// type fails to implement `Eq`.\n ///\n@@ -176,8 +176,11 @@ pub trait StructuralPartialEq {\n /// ```rust\n /// #[derive(PartialEq, Eq)]\n /// struct Wrap<X>(X);\n+///\n /// fn higher_order(_: &()) { }\n+///\n /// const CFN: Wrap<fn(&())> = Wrap(higher_order);\n+///\n /// fn main() {\n ///     match CFN {\n ///         CFN => {}"}]}