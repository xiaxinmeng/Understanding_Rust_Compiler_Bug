{"sha": "51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYjQ3ZGM0YTFhZjMyNjA3MzhhYTdjNWQ0ZTMxZThkNzdjMGMwYjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-24T02:42:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-24T02:42:15Z"}, "message": "Auto merge of #46833 - diwic:7c-abort-ffi, r=arielb1\n\nPrevent unwinding past FFI boundaries\n\nSecond attempt to write a patch to solve this.\n\nr? @nikomatsakis\n\n~~So, my biggest issue with this patch is the way the patch determines *what* functions should have an abort landing pad (in `construct_fn`). I would ideally have this code match [src/librustc_trans/callee.rs::get_fn](https://github.com/rust-lang/rust/blob/master/src/librustc_trans/callee.rs#L107-L115) but couldn't find an id that returns true for `is_foreign_item`. Also tried `tcx.has_attr(\"unwind\")` with no luck.~~ FIXED\n\nOther issues:\n\n * llvm.trap is an SIGILL on amd64. Ideally we could use panic-abort's version of aborting which is nicer but we don't want to depend on that library...\n\n * ~~Mir inlining is a stub currently.~~ FIXED (no-op)\n\nAlso, when reviewing please take into account that I'm new to the code and only partially know what I'm doing... and that I've mostly made made matches on `TerminatorKind::Abort` match either `TerminatorKind::Resume` or `TerminatorKind::Unreachable` based on what looked best.", "tree": {"sha": "8c963bcb1eeb6fcacfbdc6697e82cebacc10cee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c963bcb1eeb6fcacfbdc6697e82cebacc10cee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "html_url": "https://github.com/rust-lang/rust/commit/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4da4f4c4f097e6a95264cc527da64bfc133b0f", "html_url": "https://github.com/rust-lang/rust/commit/8d4da4f4c4f097e6a95264cc527da64bfc133b0f"}, {"sha": "4910ed2b1e12cfb9518ea1e1be0ec144fa0d95a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4910ed2b1e12cfb9518ea1e1be0ec144fa0d95a6", "html_url": "https://github.com/rust-lang/rust/commit/4910ed2b1e12cfb9518ea1e1be0ec144fa0d95a6"}], "stats": {"total": 121, "additions": 118, "deletions": 3}, "files": [{"sha": "f904bd5bf43e14c06420f79099a608a57cd3b76e", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -1919,6 +1919,7 @@ dependencies = [\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n+ \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\","}, {"sha": "7517281b0b2d246d440f91f7088f83ab6f7cd822", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -150,6 +150,7 @@ for mir::TerminatorKind<'gcx> {\n                 targets.hash_stable(hcx, hasher);\n             }\n             mir::TerminatorKind::Resume |\n+            mir::TerminatorKind::Abort |\n             mir::TerminatorKind::Return |\n             mir::TerminatorKind::GeneratorDrop |\n             mir::TerminatorKind::Unreachable => {}"}, {"sha": "befab6d436bb658082bd14f2d061cd67ed2cc737", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -637,6 +637,10 @@ pub enum TerminatorKind<'tcx> {\n     /// continue. Emitted by build::scope::diverge_cleanup.\n     Resume,\n \n+    /// Indicates that the landing pad is finished and that the process\n+    /// should abort. Used to prevent unwinding for foreign items.\n+    Abort,\n+\n     /// Indicates a normal return. The return place should have\n     /// been filled in by now. This should occur at most once.\n     Return,\n@@ -759,7 +763,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n         match *self {\n             Goto { target: ref b } => slice::from_ref(b).into_cow(),\n             SwitchInt { targets: ref b, .. } => b[..].into_cow(),\n-            Resume | GeneratorDrop => (&[]).into_cow(),\n+            Resume | Abort | GeneratorDrop => (&[]).into_cow(),\n             Return => (&[]).into_cow(),\n             Unreachable => (&[]).into_cow(),\n             Call { destination: Some((_, t)), cleanup: Some(c), .. } => vec![t, c].into_cow(),\n@@ -794,7 +798,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n         match *self {\n             Goto { target: ref mut b } => vec![b],\n             SwitchInt { targets: ref mut b, .. } => b.iter_mut().collect(),\n-            Resume | GeneratorDrop => Vec::new(),\n+            Resume | Abort | GeneratorDrop => Vec::new(),\n             Return => Vec::new(),\n             Unreachable => Vec::new(),\n             Call { destination: Some((_, ref mut t)), cleanup: Some(ref mut c), .. } => vec![t, c],\n@@ -823,6 +827,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n         match *self {\n             TerminatorKind::Goto { .. } |\n             TerminatorKind::Resume |\n+            TerminatorKind::Abort |\n             TerminatorKind::Return |\n             TerminatorKind::Unreachable |\n             TerminatorKind::GeneratorDrop |\n@@ -918,6 +923,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Return => write!(fmt, \"return\"),\n             GeneratorDrop => write!(fmt, \"generator_drop\"),\n             Resume => write!(fmt, \"resume\"),\n+            Abort => write!(fmt, \"abort\"),\n             Yield { ref value, .. } => write!(fmt, \"_1 = suspend({:?})\", value),\n             Unreachable => write!(fmt, \"unreachable\"),\n             Drop { ref location, .. } => write!(fmt, \"drop({:?})\", location),\n@@ -970,7 +976,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n     pub fn fmt_successor_labels(&self) -> Vec<Cow<'static, str>> {\n         use self::TerminatorKind::*;\n         match *self {\n-            Return | Resume | Unreachable | GeneratorDrop => vec![],\n+            Return | Resume | Abort | Unreachable | GeneratorDrop => vec![],\n             Goto { .. } => vec![\"\".into()],\n             SwitchInt { ref values, .. } => {\n                 values.iter()\n@@ -2102,6 +2108,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             },\n             GeneratorDrop => GeneratorDrop,\n             Resume => Resume,\n+            Abort => Abort,\n             Return => Return,\n             Unreachable => Unreachable,\n             FalseEdges { real_target, ref imaginary_targets } =>\n@@ -2143,6 +2150,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             },\n             Goto { .. } |\n             Resume |\n+            Abort |\n             Return |\n             GeneratorDrop |\n             Unreachable |"}, {"sha": "2a3f7384de2f2399eda593035652d2f62f62686c", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -432,6 +432,7 @@ macro_rules! make_mir_visitor {\n                     }\n \n                     TerminatorKind::Resume |\n+                    TerminatorKind::Abort |\n                     TerminatorKind::Return |\n                     TerminatorKind::GeneratorDrop |\n                     TerminatorKind::Unreachable => {"}, {"sha": "ad64244f7c5af1bcd779a0886fab3fa8bc30cae0", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -14,6 +14,7 @@ graphviz = { path = \"../libgraphviz\" }\n log = \"0.3\"\n log_settings = \"0.1.1\"\n rustc = { path = \"../librustc\" }\n+rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "4f07402d6027f120ca3124b5538d74933cd9813f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -552,6 +552,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 });\n             }\n             TerminatorKind::Goto { target: _ }\n+            | TerminatorKind::Abort\n             | TerminatorKind::Unreachable\n             | TerminatorKind::FalseEdges { .. } => {\n                 // no data used, thus irrelevant to borrowck"}, {"sha": "901b73c610e3b0f6fe82d1fd7c71d7f15990379e", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -780,6 +780,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         match term.kind {\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n+            | TerminatorKind::Abort\n             | TerminatorKind::Return\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Unreachable\n@@ -1082,6 +1083,9 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             TerminatorKind::Resume => if !is_cleanup {\n                 span_mirbug!(self, block_data, \"resume on non-cleanup block!\")\n             },\n+            TerminatorKind::Abort => if !is_cleanup {\n+                span_mirbug!(self, block_data, \"abort on non-cleanup block!\")\n+            },\n             TerminatorKind::Return => if is_cleanup {\n                 span_mirbug!(self, block_data, \"return on cleanup block\")\n             },"}, {"sha": "5d420d45aac86b651c30f54f2d8763d11c11c010", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -20,6 +20,7 @@ use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeMap;\n+use rustc_back::PanicStrategy;\n use rustc_const_eval::pattern::{BindingMode, PatternKind};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use shim;\n@@ -353,6 +354,27 @@ macro_rules! unpack {\n     };\n }\n \n+fn should_abort_on_panic<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                         fn_id: ast::NodeId,\n+                                         abi: Abi)\n+                                         -> bool {\n+\n+    // Not callable from C, so we can safely unwind through these\n+    if abi == Abi::Rust || abi == Abi::RustCall { return false; }\n+\n+    // We never unwind, so it's not relevant to stop an unwind\n+    if tcx.sess.panic_strategy() != PanicStrategy::Unwind { return false; }\n+\n+    // We cannot add landing pads, so don't add one\n+    if tcx.sess.no_landing_pads() { return false; }\n+\n+    // This is a special case: some functions have a C abi but are meant to\n+    // unwind anyway. Don't stop them.\n+    if tcx.has_attr(tcx.hir.local_def_id(fn_id), \"unwind\") { return false; }\n+\n+    return true;\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n /// the main entry point for building MIR for a function\n \n@@ -383,6 +405,10 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let source_info = builder.source_info(span);\n     let call_site_s = (call_site_scope, source_info);\n     unpack!(block = builder.in_scope(call_site_s, LintLevel::Inherited, block, |builder| {\n+        if should_abort_on_panic(tcx, fn_id, abi) {\n+            builder.schedule_abort();\n+        }\n+\n         let arg_scope_s = (arg_scope, source_info);\n         unpack!(block = builder.in_scope(arg_scope_s, LintLevel::Inherited, block, |builder| {\n             builder.args_and_body(block, &arguments, arg_scope, &body.value)"}, {"sha": "ddb4bf0e36ba758d91675318ac9449873d2d2d1a", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -612,6 +612,16 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    // Schedule an abort block - this is used for some ABIs that cannot unwind\n+    pub fn schedule_abort(&mut self) -> BasicBlock {\n+        self.scopes[0].needs_cleanup = true;\n+        let abortblk = self.cfg.start_new_cleanup_block();\n+        let source_info = self.scopes[0].source_info(self.fn_span);\n+        self.cfg.terminate(abortblk, source_info, TerminatorKind::Abort);\n+        self.cached_resume_block = Some(abortblk);\n+        abortblk\n+    }\n+\n     // Scheduling drops\n     // ================\n     /// Indicates that `place` should be dropped on exit from"}, {"sha": "a2f506afa6d09e6bfbea0aea19773c089e060bd3", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -496,6 +496,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n+            mir::TerminatorKind::Abort |\n             mir::TerminatorKind::SwitchInt {..} |\n             mir::TerminatorKind::Drop {..} |\n             mir::TerminatorKind::DropAndReplace {..} |"}, {"sha": "1597ba8aaa0030ae967479cd20fcbcce811abed2", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -771,6 +771,7 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n         match bb_data.terminator().kind {\n             mir::TerminatorKind::Return |\n             mir::TerminatorKind::Resume |\n+            mir::TerminatorKind::Abort |\n             mir::TerminatorKind::GeneratorDrop |\n             mir::TerminatorKind::Unreachable => {}\n             mir::TerminatorKind::Goto { ref target } |"}, {"sha": "f35e52497ce4af13c74f7327b0abcdd016718830", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -334,6 +334,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n         match term.kind {\n             TerminatorKind::Goto { target: _ } |\n             TerminatorKind::Resume |\n+            TerminatorKind::Abort |\n             TerminatorKind::GeneratorDrop |\n             TerminatorKind::FalseEdges { .. } |\n             TerminatorKind::Unreachable => { }"}, {"sha": "c8a0dbdd9030896549427ef41f9c392cfe318701", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -163,6 +163,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             GeneratorDrop => unimplemented!(),\n             DropAndReplace { .. } => unimplemented!(),\n             Resume => unimplemented!(),\n+            Abort => unimplemented!(),\n             FalseEdges { .. } => bug!(\"should have been eliminated by `simplify_branches` mir pass\"),\n             Unreachable => return err!(Unreachable),\n         }"}, {"sha": "4556a8ecc4bb9dbebae01b50f3e39e1b425377c8", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -49,6 +49,7 @@ extern crate rustc_errors;\n #[macro_use]\n extern crate syntax;\n extern crate syntax_pos;\n+extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate rustc_const_eval;\n extern crate core; // for NonZero"}, {"sha": "0b8666800a5a56196dea6cf2136ae59c0acbfd72", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -625,6 +625,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             mir::TerminatorKind::Goto { .. } |\n             mir::TerminatorKind::SwitchInt { .. } |\n             mir::TerminatorKind::Resume |\n+            mir::TerminatorKind::Abort |\n             mir::TerminatorKind::Return |\n             mir::TerminatorKind::Unreachable |\n             mir::TerminatorKind::Assert { .. } => {}"}, {"sha": "e9ba5de3cc6941265982e30811eaf52813ae444f", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -73,6 +73,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             TerminatorKind::DropAndReplace { .. } |\n             TerminatorKind::GeneratorDrop |\n             TerminatorKind::Resume |\n+            TerminatorKind::Abort |\n             TerminatorKind::Return |\n             TerminatorKind::Unreachable |\n             TerminatorKind::FalseEdges { .. } => {"}, {"sha": "43ee75d1e2ba255b7515530b2cda076464262fdc", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -806,6 +806,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                     *kind = TerminatorKind::Goto { target: tgt }\n                 }\n             }\n+            TerminatorKind::Abort => { }\n             TerminatorKind::Unreachable => { }\n             TerminatorKind::FalseEdges { ref mut real_target, ref mut imaginary_targets } => {\n                 *real_target = self.update_target(*real_target);"}, {"sha": "f0871bb188d494582c63225592bf173f031f6a40", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -324,6 +324,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::SwitchInt {..} |\n                 TerminatorKind::DropAndReplace { .. } |\n                 TerminatorKind::Resume |\n+                TerminatorKind::Abort |\n                 TerminatorKind::GeneratorDrop |\n                 TerminatorKind::Yield { .. } |\n                 TerminatorKind::Unreachable |"}, {"sha": "23274cdedf2c743a070eeb7f8d2448c1304074dd", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -76,6 +76,7 @@ impl RemoveNoopLandingPads {\n             TerminatorKind::GeneratorDrop |\n             TerminatorKind::Yield { .. } |\n             TerminatorKind::Return |\n+            TerminatorKind::Abort |\n             TerminatorKind::Unreachable |\n             TerminatorKind::Call { .. } |\n             TerminatorKind::Assert { .. } |"}, {"sha": "b379a174b23f61aba881f09c1861a369441bd5cb", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -113,6 +113,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             TerminatorKind::Goto { .. } => \"TerminatorKind::Goto\",\n             TerminatorKind::SwitchInt { .. } => \"TerminatorKind::SwitchInt\",\n             TerminatorKind::Resume => \"TerminatorKind::Resume\",\n+            TerminatorKind::Abort => \"TerminatorKind::Abort\",\n             TerminatorKind::Return => \"TerminatorKind::Return\",\n             TerminatorKind::Unreachable => \"TerminatorKind::Unreachable\",\n             TerminatorKind::Drop { .. } => \"TerminatorKind::Drop\","}, {"sha": "31cbb07dbe64cee39128602dba067d638ac84441", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -236,6 +236,7 @@ pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock\n             match data.terminator().kind {\n                 TerminatorKind::Goto { .. } |\n                 TerminatorKind::Resume |\n+                TerminatorKind::Abort |\n                 TerminatorKind::Return |\n                 TerminatorKind::GeneratorDrop |\n                 TerminatorKind::Unreachable |"}, {"sha": "422b8210b3544f6cb7b3356593d233300ab76008", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -180,6 +180,13 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 }\n             }\n \n+            mir::TerminatorKind::Abort => {\n+                // Call core::intrinsics::abort()\n+                let fnname = bcx.ccx.get_intrinsic(&(\"llvm.trap\"));\n+                bcx.call(fnname, &[], None);\n+                bcx.unreachable();\n+            }\n+\n             mir::TerminatorKind::Goto { target } => {\n                 funclet_br(self, bcx, target);\n             }"}, {"sha": "63fd934b0d0f4b1a3dc4aac3ba7447f361827e90", "filename": "src/test/run-pass/abort-on-c-abi.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabort-on-c-abi.rs?ref=51b47dc4a1af3260738aa7c5d4e31e8d77c0c0b6", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Since we mark some ABIs as \"nounwind\" to LLVM, we must make sure that\n+// we never unwind through them.\n+\n+// ignore-emscripten no processes\n+\n+use std::{env, panic};\n+use std::io::prelude::*;\n+use std::io;\n+use std::process::{Command, Stdio};\n+\n+extern \"C\" fn panic_in_ffi() {\n+    panic!(\"Test\");\n+}\n+\n+fn test() {\n+    let _ = panic::catch_unwind(|| { panic_in_ffi(); });\n+    // The process should have aborted by now.\n+    io::stdout().write(b\"This should never be printed.\\n\");\n+    let _ = io::stdout().flush();\n+}\n+\n+fn main() {\n+    let args: Vec<String> = env::args().collect();\n+    if args.len() > 1 && args[1] == \"test\" {\n+        return test();\n+    }\n+\n+    let mut p = Command::new(&args[0])\n+                        .stdout(Stdio::piped())\n+                        .stdin(Stdio::piped())\n+                        .arg(\"test\").spawn().unwrap();\n+    assert!(!p.wait().unwrap().success());\n+}"}]}