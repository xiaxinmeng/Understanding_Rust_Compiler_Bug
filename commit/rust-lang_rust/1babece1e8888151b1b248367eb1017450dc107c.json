{"sha": "1babece1e8888151b1b248367eb1017450dc107c", "node_id": "C_kwDOAAsO6NoAKDFiYWJlY2UxZTg4ODgxNTFiMWIyNDgzNjdlYjEwMTc0NTBkYzEwN2M", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-13T01:14:26Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-01-13T23:51:20Z"}, "message": "suggest fix for attempted integer identifier in patterns", "tree": {"sha": "9217eb814c5955ebbc5a52eba0a541cc7c7a3056", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9217eb814c5955ebbc5a52eba0a541cc7c7a3056"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1babece1e8888151b1b248367eb1017450dc107c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCAAzFiEEYSWD6p+RIeSP1N2eF81cKtrg00QFAmPB7ngVHGV6cmFzdXJl\nQG91dGxvb2suY29tAAoJEBfNXCra4NNEJyEP/Ak3aMK7urWdIaYVV/ttZoLwHN+F\n79TNlyNpxDCQTnG5wjPlWnUYXJVu1k+FWj0uGRTqBuZfncAHgiwsS8Xnrs9UR+Vo\n8aTnvLgkb9YPjWMmnHdRaWphTHsT+U9rCKdQNhgST/17ML7UOEDp8t6JVSWB/b71\nlTsgnUqWLw9s4XUgQ3nWxiuLB2S71adyKOPZ/LcwY0OfXfGjeXasv6N/nf+I1z/0\nxBwnEZ3gicUbIimdVUd8c1U2sRe1vKF5Hzkyq0Xee9hSDb3DUhHSBPdscRW+ZLJD\nA0sK6bYqyuw8By7zWWqdr3G8dlRDC9E3R5x7U7RI+TZbHskJnVZP1loPYEP9CyHz\nwposces6D9LMF1NFEHeCAZe4y14ZWAzNNXWzsz7Pa5D0H9Vg90AanhdJFxQKa/Vz\nHy/KpRBYhSMidHOFfQeHGt3f9SzDlpmps0qytI6BhbsiNOwz8gNE8EZ4DPGUM18w\nyCf3bX6rYNt3B0xmTjdyUvTFoRnZK1J75yJwIMU0eQJMufkx75AFCq+IIIO9uA3/\nwcmtfBGXyEqyObXRnksNRcDDNVRHTc52zskCIJbMGA2y2zys95voHbgrByv8oIGu\naMeR4ees9lxVUsjK+H7dyrDxt8nSAeEMpHe0zY7D52666Ecslr4YBKKXhtgwf6pH\nJqJFRa/LPnikZnxw\n=EPMs\n-----END PGP SIGNATURE-----", "payload": "tree 9217eb814c5955ebbc5a52eba0a541cc7c7a3056\nparent 61a415be590113b4935464ef0aaf3b4e7713a077\nauthor Ezra Shaw <ezrasure@outlook.com> 1673572466 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1673653880 +1300\n\nsuggest fix for attempted integer identifier in patterns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1babece1e8888151b1b248367eb1017450dc107c", "html_url": "https://github.com/rust-lang/rust/commit/1babece1e8888151b1b248367eb1017450dc107c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1babece1e8888151b1b248367eb1017450dc107c/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61a415be590113b4935464ef0aaf3b4e7713a077", "url": "https://api.github.com/repos/rust-lang/rust/commits/61a415be590113b4935464ef0aaf3b4e7713a077", "html_url": "https://github.com/rust-lang/rust/commit/61a415be590113b4935464ef0aaf3b4e7713a077"}], "stats": {"total": 103, "additions": 99, "deletions": 4}, "files": [{"sha": "224855fff8b56f35a7e02214a87749dd8cc89890", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1babece1e8888151b1b248367eb1017450dc107c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1babece1e8888151b1b248367eb1017450dc107c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=1babece1e8888151b1b248367eb1017450dc107c", "patch": "@@ -364,3 +364,5 @@ mir_build_suggest_let_else = you might want to use `let else` to handle the {$co\n         [one] variant that isn't\n         *[other] variants that aren't\n     } matched\n+\n+mir_build_suggest_attempted_int_lit = alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits"}, {"sha": "7f81aef1c73217d57f5013678b162a4bce27b82f", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1babece1e8888151b1b248367eb1017450dc107c/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1babece1e8888151b1b248367eb1017450dc107c/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=1babece1e8888151b1b248367eb1017450dc107c", "patch": "@@ -770,6 +770,8 @@ pub(crate) struct PatternNotCovered<'s, 'tcx> {\n     #[subdiagnostic]\n     pub let_suggestion: Option<SuggestLet>,\n     #[subdiagnostic]\n+    pub misc_suggestion: Option<MiscPatternSuggestion>,\n+    #[subdiagnostic]\n     pub res_defined_here: Option<ResDefinedHere>,\n }\n \n@@ -848,3 +850,16 @@ pub enum SuggestLet {\n         count: usize,\n     },\n }\n+\n+#[derive(Subdiagnostic)]\n+pub enum MiscPatternSuggestion {\n+    #[suggestion(\n+        mir_build_suggest_attempted_int_lit,\n+        code = \"_\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    AttemptedIntegerLiteral {\n+        #[primary_span]\n+        start_span: Span,\n+    },\n+}"}, {"sha": "34e637f594842687aaec93b1075bacb16eb8df0b", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1babece1e8888151b1b248367eb1017450dc107c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1babece1e8888151b1b248367eb1017450dc107c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=1babece1e8888151b1b248367eb1017450dc107c", "patch": "@@ -6,8 +6,9 @@ use super::{PatCtxt, PatternError};\n \n use crate::errors::*;\n \n+use hir::{ExprKind, PatKind};\n use rustc_arena::TypedArena;\n-use rustc_ast::Mutability;\n+use rustc_ast::{LitKind, Mutability};\n use rustc_errors::{\n     struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n };\n@@ -389,7 +390,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n             return;\n         }\n \n-        let (inform, interpreted_as_const, res_defined_here,let_suggestion) =\n+        let (inform, interpreted_as_const, res_defined_here,let_suggestion, misc_suggestion) =\n             if let hir::PatKind::Path(hir::QPath::Resolved(\n                 None,\n                 hir::Path {\n@@ -413,6 +414,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                         }\n                     },\n                     None,\n+                    None,\n                 )\n             } else if let Some(span) = sp && self.tcx.sess.source_map().is_span_accessible(span) {\n                 let mut bindings = vec![];\n@@ -426,10 +428,19 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                 let end_span = semi_span.shrink_to_lo();\n                 let count = witnesses.len();\n \n+                // If the pattern to match is an integer literal:\n+                let int_suggestion = if\n+                    let PatKind::Lit(expr) = &pat.kind\n+                    && bindings.is_empty()\n+                    && let ExprKind::Lit(Spanned { node: LitKind::Int(_, _), span }) = expr.kind {\n+                    // Then give a suggestion, the user might've meant to create a binding instead.\n+                    Some(MiscPatternSuggestion::AttemptedIntegerLiteral { start_span: span.shrink_to_lo() })\n+                } else { None };\n+\n                 let let_suggestion = if bindings.is_empty() {SuggestLet::If{start_span, semi_span, count}} else{ SuggestLet::Else{end_span, count }};\n-                (sp.map(|_|Inform), None, None, Some(let_suggestion))\n+                (sp.map(|_|Inform), None, None, Some(let_suggestion), int_suggestion)\n             } else{\n-                (sp.map(|_|Inform), None, None,  None)\n+                (sp.map(|_|Inform), None, None,  None, None)\n             };\n \n         let adt_defined_here = try {\n@@ -453,6 +464,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n             _p: (),\n             pattern_ty,\n             let_suggestion,\n+            misc_suggestion,\n             res_defined_here,\n             adt_defined_here,\n         });"}, {"sha": "08fcd1deab1d337549d3acac3b9050f95792a193", "filename": "tests/ui/consts/const-match-check.eval1.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1babece1e8888151b1b248367eb1017450dc107c/tests%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1babece1e8888151b1b248367eb1017450dc107c/tests%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr?ref=1babece1e8888151b1b248367eb1017450dc107c", "patch": "@@ -11,6 +11,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     A = { if let 0 = 0 { todo!() } 0 },\n    |           ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL |     A = { let _0 = 0; 0 },\n+   |               +\n \n error: aborting due to previous error\n "}, {"sha": "5d86ca4bfd17b632efd346068e0603a8afe5ae73", "filename": "tests/ui/consts/const-match-check.eval2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1babece1e8888151b1b248367eb1017450dc107c/tests%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1babece1e8888151b1b248367eb1017450dc107c/tests%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr?ref=1babece1e8888151b1b248367eb1017450dc107c", "patch": "@@ -11,6 +11,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     let x: [i32; { if let 0 = 0 { todo!() } 0 }] = [];\n    |                    ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL |     let x: [i32; { let _0 = 0; 0 }] = [];\n+   |                        +\n \n error: aborting due to previous error\n "}, {"sha": "c8f66bb0fc027f2d0a59322a3d75753c56633cc2", "filename": "tests/ui/consts/const-match-check.matchck.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1babece1e8888151b1b248367eb1017450dc107c/tests%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1babece1e8888151b1b248367eb1017450dc107c/tests%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr?ref=1babece1e8888151b1b248367eb1017450dc107c", "patch": "@@ -11,6 +11,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL | const X: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                  ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL | const X: i32 = { let _0 = 0; 0 };\n+   |                      +\n \n error[E0005]: refutable pattern in local binding\n   --> $DIR/const-match-check.rs:8:23\n@@ -25,6 +29,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL | static Y: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                   ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL | static Y: i32 = { let _0 = 0; 0 };\n+   |                       +\n \n error[E0005]: refutable pattern in local binding\n   --> $DIR/const-match-check.rs:13:26\n@@ -39,6 +47,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     const X: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                      ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL |     const X: i32 = { let _0 = 0; 0 };\n+   |                          +\n \n error[E0005]: refutable pattern in local binding\n   --> $DIR/const-match-check.rs:19:26\n@@ -53,6 +65,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     const X: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                      ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL |     const X: i32 = { let _0 = 0; 0 };\n+   |                          +\n \n error: aborting due to 4 previous errors\n "}, {"sha": "aa2c141e05ef268deef8bdcb9fb9bdc3249ae0a7", "filename": "tests/ui/pattern/issue-106552.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1babece1e8888151b1b248367eb1017450dc107c/tests%2Fui%2Fpattern%2Fissue-106552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1babece1e8888151b1b248367eb1017450dc107c/tests%2Fui%2Fpattern%2Fissue-106552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-106552.rs?ref=1babece1e8888151b1b248367eb1017450dc107c", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let 5 = 6;\n+    //~^ error refutable pattern in local binding [E0005]\n+\n+    let x @ 5 = 6;\n+    //~^ error refutable pattern in local binding [E0005]\n+}"}, {"sha": "ed5d40c0968505c82c3fe00ae42610d8acbeec19", "filename": "tests/ui/pattern/issue-106552.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1babece1e8888151b1b248367eb1017450dc107c/tests%2Fui%2Fpattern%2Fissue-106552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1babece1e8888151b1b248367eb1017450dc107c/tests%2Fui%2Fpattern%2Fissue-106552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-106552.stderr?ref=1babece1e8888151b1b248367eb1017450dc107c", "patch": "@@ -0,0 +1,35 @@\n+error[E0005]: refutable pattern in local binding\n+  --> $DIR/issue-106552.rs:2:9\n+   |\n+LL |     let 5 = 6;\n+   |         ^ patterns `i32::MIN..=4_i32` and `6_i32..=i32::MAX` not covered\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n+help: you might want to use `if let` to ignore the variants that aren't matched\n+   |\n+LL |     if let 5 = 6 { todo!() }\n+   |     ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL |     let _5 = 6;\n+   |         +\n+\n+error[E0005]: refutable pattern in local binding\n+  --> $DIR/issue-106552.rs:5:9\n+   |\n+LL |     let x @ 5 = 6;\n+   |         ^^^^^ patterns `i32::MIN..=4_i32` and `6_i32..=i32::MAX` not covered\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n+help: you might want to use `let else` to handle the variants that aren't matched\n+   |\n+LL |     let x @ 5 = 6 else { todo!() };\n+   |                   ++++++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0005`."}]}