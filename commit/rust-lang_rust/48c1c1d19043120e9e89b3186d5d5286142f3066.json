{"sha": "48c1c1d19043120e9e89b3186d5d5286142f3066", "node_id": "C_kwDOAAsO6NoAKDQ4YzFjMWQxOTA0MzEyMGU5ZTg5YjMxODZkNWQ1Mjg2MTQyZjMwNjY", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-09-16T11:02:45Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-09-18T04:10:53Z"}, "message": "avoid duplicating StorageLive in let-else", "tree": {"sha": "b7d1b915eff1b63dc22f4a6738dd7ce1f60d5fdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7d1b915eff1b63dc22f4a6738dd7ce1f60d5fdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48c1c1d19043120e9e89b3186d5d5286142f3066", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAmMmmk0ACgkQPNdIZH7v\nY1mnVQ//Rz0q/Z7cQTLx9MZia7eZptdsgy9g+KRTeJ3XsBdJtzpqygQTtudPpzJf\n/PmLHbwhtttyQg/apnvxaeUNx01I1MO86xUgAJLVbpudOgPq3ntPB6TN2HGQfvN2\neG4tqHZNV/f45CIPvSBrwpQqvwG5tJK4Cm3EoyfX6icgl4BxIYAj5VFe5lCywHyv\nWXUaxWEqvYwu1gMJhOGLot8nY1rtr3a1kUsQe49LItiHbn4EOt0SVz9xxnxSqugX\nZ/KNOC05Pg3FJPBeVgb6MeLqbw3RewJIRuZ7yYb4dlDLBu11yecznwFQQUp1TJRg\nfQb/DmU+W9PycPq6ZrGFSVq2UYX8s14CSLqqKSOhlLMc6YwLt481whpkm6tNB2xe\nBBcVAvRziwaI7bM2/bdLPlzCqFfR/95pnXGxNHeyQ3yfSn0UfSInzjpbWpWG5WfS\ntnaujaOXAI/Z056hTE6Mx0FlX8aWnf1GmRK0G7UdMlzmkTJJE0Qqt2iSAT6GWOb1\n6SUMKW+wdfKN9KeIZ/Svx+pWQEq9g+ooIifbw0m4Z9eUwypZaoIzQlCPQNO8IUNT\naAjjxJBo9Ipo8wusQEuX7VSRqeHjSwSjih2veZ9U3WxpSQLEyEstuSFS1w2qrttd\nk6UHUzSdYP+I8TbKMlTh1XQHOcDlV3l1cq2tOm+Ygeb3ZXr8+j8=\n=hC0+\n-----END PGP SIGNATURE-----", "payload": "tree b7d1b915eff1b63dc22f4a6738dd7ce1f60d5fdd\nparent bc7b17cfe3bf08b618d1c7b64838053faeb1f590\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1663326165 +0800\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1663474253 +0800\n\navoid duplicating StorageLive in let-else\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48c1c1d19043120e9e89b3186d5d5286142f3066", "html_url": "https://github.com/rust-lang/rust/commit/48c1c1d19043120e9e89b3186d5d5286142f3066", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48c1c1d19043120e9e89b3186d5d5286142f3066/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc7b17cfe3bf08b618d1c7b64838053faeb1f590", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7b17cfe3bf08b618d1c7b64838053faeb1f590", "html_url": "https://github.com/rust-lang/rust/commit/bc7b17cfe3bf08b618d1c7b64838053faeb1f590"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "4bab583c96018004d9791b25f0583fd1c30c7095", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48c1c1d19043120e9e89b3186d5d5286142f3066/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c1c1d19043120e9e89b3186d5d5286142f3066/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=48c1c1d19043120e9e89b3186d5d5286142f3066", "patch": "@@ -232,7 +232,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         pattern,\n                         UserTypeProjections::none(),\n                         &mut |this, _, _, _, node, span, _, _| {\n-                            this.storage_live_binding(block, node, span, OutsideGuard, false);\n+                            this.storage_live_binding(block, node, span, OutsideGuard, true);\n+                            this.schedule_drop_for_binding(node, span, OutsideGuard);\n                         },\n                     );\n                     let failure = unpack!("}, {"sha": "82067ceebfd6d899820f4f1393796f1ca8a1e6d7", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/48c1c1d19043120e9e89b3186d5d5286142f3066/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48c1c1d19043120e9e89b3186d5d5286142f3066/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=48c1c1d19043120e9e89b3186d5d5286142f3066", "patch": "@@ -371,6 +371,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         Some(arm.span),\n                         Some(arm.scope),\n                         Some(match_scope),\n+                        false,\n                     );\n \n                     if let Some(source_scope) = scope {\n@@ -416,6 +417,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         arm_span: Option<Span>,\n         arm_scope: Option<region::Scope>,\n         match_scope: Option<region::Scope>,\n+        storages_alive: bool,\n     ) -> BasicBlock {\n         if candidate.subcandidates.is_empty() {\n             // Avoid generating another `BasicBlock` when we only have one\n@@ -429,6 +431,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 arm_span,\n                 match_scope,\n                 true,\n+                storages_alive,\n             )\n         } else {\n             // It's helpful to avoid scheduling drops multiple times to save\n@@ -466,6 +469,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         arm_span,\n                         match_scope,\n                         schedule_drops,\n+                        storages_alive,\n                     );\n                     if arm_scope.is_none() {\n                         schedule_drops = false;\n@@ -641,6 +645,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             None,\n             None,\n             None,\n+            false,\n         )\n         .unit()\n     }\n@@ -1813,6 +1818,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             None,\n             None,\n             None,\n+            false,\n         );\n \n         post_guard_block.unit()\n@@ -1836,6 +1842,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         arm_span: Option<Span>,\n         match_scope: Option<region::Scope>,\n         schedule_drops: bool,\n+        storages_alive: bool,\n     ) -> BasicBlock {\n         debug!(\"bind_and_guard_matched_candidate(candidate={:?})\", candidate);\n \n@@ -2051,7 +2058,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.push_fake_read(post_guard_block, guard_end, cause, Place::from(local_id));\n             }\n             assert!(schedule_drops, \"patterns with guards must schedule drops\");\n-            self.bind_matched_candidate_for_arm_body(post_guard_block, true, by_value_bindings);\n+            self.bind_matched_candidate_for_arm_body(\n+                post_guard_block,\n+                true,\n+                by_value_bindings,\n+                storages_alive,\n+            );\n \n             post_guard_block\n         } else {\n@@ -2065,6 +2077,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .iter()\n                     .flat_map(|(bindings, _)| bindings)\n                     .chain(&candidate.bindings),\n+                storages_alive,\n             );\n             block\n         }\n@@ -2154,6 +2167,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         block: BasicBlock,\n         schedule_drops: bool,\n         bindings: impl IntoIterator<Item = &'b Binding<'tcx>>,\n+        storages_alive: bool,\n     ) where\n         'tcx: 'b,\n     {\n@@ -2163,13 +2177,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // Assign each of the bindings. This may trigger moves out of the candidate.\n         for binding in bindings {\n             let source_info = self.source_info(binding.span);\n-            let local = self.storage_live_binding(\n-                block,\n-                binding.var_id,\n-                binding.span,\n-                OutsideGuard,\n-                schedule_drops,\n-            );\n+            let local = if storages_alive {\n+                // Here storages are already alive, probably because this is a binding\n+                // from let-else.\n+                // We just need to schedule drop for the value.\n+                self.var_local_id(binding.var_id, OutsideGuard).into()\n+            } else {\n+                self.storage_live_binding(\n+                    block,\n+                    binding.var_id,\n+                    binding.span,\n+                    OutsideGuard,\n+                    schedule_drops,\n+                )\n+            };\n             if schedule_drops {\n                 self.schedule_drop_for_binding(binding.var_id, binding.span, OutsideGuard);\n             }\n@@ -2300,6 +2321,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 None,\n                 None,\n                 None,\n+                true,\n             );\n             // This block is for the failure case\n             let failure = this.bind_pattern(\n@@ -2311,6 +2333,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 None,\n                 None,\n                 None,\n+                true,\n             );\n             this.break_for_else(failure, *let_else_scope, this.source_info(initializer_span));\n             matching.unit()"}]}