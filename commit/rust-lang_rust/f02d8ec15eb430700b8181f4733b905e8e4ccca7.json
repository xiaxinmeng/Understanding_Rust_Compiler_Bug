{"sha": "f02d8ec15eb430700b8181f4733b905e8e4ccca7", "node_id": "C_kwDOAAsO6NoAKGYwMmQ4ZWMxNWViNDMwNzAwYjgxODFmNDczM2I5MDVlOGU0Y2NjYTc", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-01T07:13:36Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-14T20:22:09Z"}, "message": "More accurate spans for arg removal suggestion", "tree": {"sha": "267af0e22ea166bcbd9c67e0e8a44d6fcfe9d65e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/267af0e22ea166bcbd9c67e0e8a44d6fcfe9d65e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f02d8ec15eb430700b8181f4733b905e8e4ccca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f02d8ec15eb430700b8181f4733b905e8e4ccca7", "html_url": "https://github.com/rust-lang/rust/commit/f02d8ec15eb430700b8181f4733b905e8e4ccca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f02d8ec15eb430700b8181f4733b905e8e4ccca7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb6e60d1f1360234aae90c97964c0fa5524f141", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb6e60d1f1360234aae90c97964c0fa5524f141", "html_url": "https://github.com/rust-lang/rust/commit/9bb6e60d1f1360234aae90c97964c0fa5524f141"}], "stats": {"total": 310, "additions": 202, "deletions": 108}, "files": [{"sha": "5b2786fbb178747fc0119d6310daeb1a23a67dd9", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -612,7 +612,7 @@ impl Diagnostic {\n     pub fn multipart_suggestion_with_style(\n         &mut self,\n         msg: impl Into<SubdiagnosticMessage>,\n-        suggestion: Vec<(Span, String)>,\n+        mut suggestion: Vec<(Span, String)>,\n         applicability: Applicability,\n         style: SuggestionStyle,\n     ) -> &mut Self {\n@@ -634,6 +634,7 @@ impl Diagnostic {\n             None,\n             \"suggestion must not have overlapping parts\",\n         );\n+        suggestion.sort_by_key(|(span, _)| (span.lo(), span.hi()));\n \n         self.push_suggestion(CodeSuggestion {\n             substitutions: vec![Substitution { parts }],"}, {"sha": "211bbf4f50e68ee18a35b23f0dd031359c438ec3", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -1768,7 +1768,7 @@ impl EmitterWriter {\n \n         // Render the replacements for each suggestion\n         let suggestions = suggestion.splice_lines(sm);\n-        debug!(\"emit_suggestion_default: suggestions={:?}\", suggestions);\n+        debug!(?suggestions);\n \n         if suggestions.is_empty() {\n             // Suggestions coming from macros can have malformed spans. This is a heavy handed\n@@ -1797,6 +1797,7 @@ impl EmitterWriter {\n         for (complete, parts, highlights, only_capitalization) in\n             suggestions.iter().take(MAX_SUGGESTIONS)\n         {\n+            debug!(?complete, ?parts, ?highlights);\n             notice_capitalization |= only_capitalization;\n \n             let has_deletion = parts.iter().any(|p| p.is_deletion(sm));"}, {"sha": "5c5ed2929c02dae9b4e322bf97804f51e78ccf97", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 74, "deletions": 24, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -755,15 +755,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         errors.drain_filter(|error| {\n-                let Error::Invalid(provided_idx, expected_idx, Compatibility::Incompatible(Some(e))) = error else { return false };\n-                let (provided_ty, provided_span) = provided_arg_tys[*provided_idx];\n-                let trace = mk_trace(provided_span, formal_and_expected_inputs[*expected_idx], provided_ty);\n-                if !matches!(trace.cause.as_failure_code(*e), FailureCode::Error0308(_)) {\n-                    self.err_ctxt().report_and_explain_type_error(trace, *e).emit();\n-                    return true;\n-                }\n-                false\n-            });\n+            let Error::Invalid(\n+                provided_idx,\n+                expected_idx,\n+                Compatibility::Incompatible(Some(e)),\n+            ) = error else { return false };\n+            let (provided_ty, provided_span) = provided_arg_tys[*provided_idx];\n+            let trace = mk_trace(\n+                provided_span,\n+                formal_and_expected_inputs[*expected_idx],\n+                provided_ty,\n+            );\n+            if !matches!(trace.cause.as_failure_code(*e), FailureCode::Error0308(_)) {\n+                self.err_ctxt().report_and_explain_type_error(trace, *e).emit();\n+                return true;\n+            }\n+            false\n+        });\n \n         // We're done if we found errors, but we already emitted them.\n         if errors.is_empty() {\n@@ -864,7 +872,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         let mut suggestion_text = SuggestionText::None;\n \n+        let ty_to_snippet = |ty: Ty<'tcx>, expected_idx: ExpectedIdx| {\n+            if ty.is_unit() {\n+                \"()\".to_string()\n+            } else if ty.is_suggestable(tcx, false) {\n+                format!(\"/* {} */\", ty)\n+            } else if let Some(fn_def_id) = fn_def_id\n+                && self.tcx.def_kind(fn_def_id).is_fn_like()\n+                && let self_implicit =\n+                    matches!(call_expr.kind, hir::ExprKind::MethodCall(..)) as usize\n+                && let Some(arg) = self.tcx.fn_arg_names(fn_def_id)\n+                    .get(expected_idx.as_usize() + self_implicit)\n+                && arg.name != kw::SelfLower\n+            {\n+                format!(\"/* {} */\", arg.name)\n+            } else {\n+                \"/* value */\".to_string()\n+            }\n+        };\n+\n         let mut errors = errors.into_iter().peekable();\n+        let mut suggestions = vec![];\n         while let Some(error) = errors.next() {\n             match error {\n                 Error::Invalid(provided_idx, expected_idx, compatibility) => {\n@@ -906,6 +934,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     };\n                     labels\n                         .push((provided_span, format!(\"argument{} unexpected\", provided_ty_name)));\n+                    let mut span = provided_span;\n+                    if let Some((_, next)) = provided_arg_tys.get(\n+                        ProvidedIdx::from_usize(arg_idx.index() + 1),\n+                    ) {\n+                        // Include next comma\n+                        span = span.until(*next);\n+                    } else if arg_idx.index() > 0\n+                        && let Some((_, prev)) = provided_arg_tys\n+                            .get(ProvidedIdx::from_usize(arg_idx.index() - 1)\n+                    ) {\n+                        // Last argument, include previous comma\n+                        span = span.with_lo(prev.hi());\n+                    }\n+                    suggestions.push((span, String::new()));\n+\n                     suggestion_text = match suggestion_text {\n                         SuggestionText::None => SuggestionText::Remove(false),\n                         SuggestionText::Remove(_) => SuggestionText::Remove(true),\n@@ -1095,6 +1138,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n+        // Incorporate the argument changes in the removal suggestion.\n+        let mut prev = -1;\n+        for (expected_idx, provided_idx) in matched_inputs.iter_enumerated() {\n+            if let Some(provided_idx) = provided_idx {\n+                prev = provided_idx.index() as i64;\n+            }\n+            let idx = ProvidedIdx::from_usize((prev + 1) as usize);\n+            if let None = provided_idx\n+                && let Some((_, arg_span)) = provided_arg_tys.get(idx)\n+            {\n+                let (_, expected_ty) = formal_and_expected_inputs[expected_idx];\n+                suggestions.push((*arg_span, ty_to_snippet(expected_ty, expected_idx)));\n+            }\n+        }\n+\n         // If we have less than 5 things to say, it would be useful to call out exactly what's wrong\n         if labels.len() <= 5 {\n             for (span, label) in labels {\n@@ -1112,7 +1170,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(format!(\"provide the argument{}\", if plural { \"s\" } else { \"\" }))\n             }\n             SuggestionText::Remove(plural) => {\n-                Some(format!(\"remove the extra argument{}\", if plural { \"s\" } else { \"\" }))\n+                err.multipart_suggestion_verbose(\n+                    &format!(\"remove the extra argument{}\", if plural { \"s\" } else { \"\" }),\n+                    suggestions,\n+                    Applicability::HasPlaceholders,\n+                );\n+                None\n             }\n             SuggestionText::Swap => Some(\"swap these arguments\".to_string()),\n             SuggestionText::Reorder => Some(\"reorder these arguments\".to_string()),\n@@ -1151,20 +1214,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else {\n                     // Propose a placeholder of the correct type\n                     let (_, expected_ty) = formal_and_expected_inputs[expected_idx];\n-                    if expected_ty.is_unit() {\n-                        \"()\".to_string()\n-                    } else if expected_ty.is_suggestable(tcx, false) {\n-                        format!(\"/* {} */\", expected_ty)\n-                    } else if let Some(fn_def_id) = fn_def_id\n-                        && self.tcx.def_kind(fn_def_id).is_fn_like()\n-                        && let self_implicit = matches!(call_expr.kind, hir::ExprKind::MethodCall(..)) as usize\n-                        && let Some(arg) = self.tcx.fn_arg_names(fn_def_id).get(expected_idx.as_usize() + self_implicit)\n-                        && arg.name != kw::SelfLower\n-                    {\n-                        format!(\"/* {} */\", arg.name)\n-                    } else {\n-                        \"/* value */\".to_string()\n-                    }\n+                    ty_to_snippet(expected_ty, expected_idx)\n                 };\n                 suggestion += &suggestion_text;\n             }"}, {"sha": "147e7e246afe13d2205ba1bb6febe6db8085f8c5", "filename": "tests/ui/alloc-error/alloc-error-handler-bad-signature-3.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -17,8 +17,10 @@ LL | fn oom() -> ! {\n    = note: this error originates in the attribute macro `alloc_error_handler` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: remove the extra argument\n    |\n-LL | fn oom() -> !() {\n-   |              ++\n+LL - fn oom() -> ! {\n+LL -     loop {}\n+LL - }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "5333483e2e9c5e6ba6fc73c4cf95f717cf1c81df", "filename": "tests/ui/argument-suggestions/basic.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fargument-suggestions%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fargument-suggestions%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fbasic.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -25,8 +25,9 @@ LL | fn extra() {}\n    |    ^^^^^\n help: remove the extra argument\n    |\n-LL |     extra();\n-   |          ~~\n+LL -     extra(\"\");\n+LL +     extra();\n+   |\n \n error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/basic.rs:22:5"}, {"sha": "f46894ba4c72bbf376bd7baf56bec47addc8eb01", "filename": "tests/ui/argument-suggestions/exotic-calls.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fargument-suggestions%2Fexotic-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fargument-suggestions%2Fexotic-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fexotic-calls.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -11,8 +11,9 @@ LL | fn foo<T: Fn()>(t: T) {\n    |           ^^^^\n help: remove the extra argument\n    |\n-LL |     t();\n-   |      ~~\n+LL -     t(1i32);\n+LL +     t();\n+   |\n \n error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/exotic-calls.rs:7:5\n@@ -27,8 +28,9 @@ LL | fn bar(t: impl Fn()) {\n    |           ^^^^^^^^^\n help: remove the extra argument\n    |\n-LL |     t();\n-   |      ~~\n+LL -     t(1i32);\n+LL +     t();\n+   |\n \n error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/exotic-calls.rs:16:5\n@@ -43,8 +45,9 @@ LL | fn baz() -> impl Fn() {\n    |             ^^^^^^^^^\n help: remove the extra argument\n    |\n-LL |     baz()()\n-   |          ~~\n+LL -     baz()(1i32)\n+LL +     baz()()\n+   |\n \n error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/exotic-calls.rs:22:5\n@@ -59,8 +62,9 @@ LL |     let x = || {};\n    |             ^^\n help: remove the extra argument\n    |\n-LL |     x();\n-   |      ~~\n+LL -     x(1i32);\n+LL +     x();\n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0d4f223991711c59be0d2cc55dd2fecf67c99ba7", "filename": "tests/ui/argument-suggestions/extra_arguments.stderr", "status": "modified", "additions": 42, "deletions": 28, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fextra_arguments.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -11,8 +11,9 @@ LL | fn empty() {}\n    |    ^^^^^\n help: remove the extra argument\n    |\n-LL |   empty();\n-   |        ~~\n+LL -   empty(\"\");\n+LL +   empty();\n+   |\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/extra_arguments.rs:9:3\n@@ -27,8 +28,9 @@ LL | fn one_arg(_a: i32) {}\n    |    ^^^^^^^ -------\n help: remove the extra argument\n    |\n-LL |   one_arg(1);\n-   |          ~~~\n+LL -   one_arg(1, 1);\n+LL +   one_arg(1);\n+   |\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/extra_arguments.rs:10:3\n@@ -43,8 +45,9 @@ LL | fn one_arg(_a: i32) {}\n    |    ^^^^^^^ -------\n help: remove the extra argument\n    |\n-LL |   one_arg(1);\n-   |          ~~~\n+LL -   one_arg(1, \"\");\n+LL +   one_arg(1);\n+   |\n \n error[E0061]: this function takes 1 argument but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:11:3\n@@ -61,8 +64,9 @@ LL | fn one_arg(_a: i32) {}\n    |    ^^^^^^^ -------\n help: remove the extra arguments\n    |\n-LL |   one_arg(1);\n-   |          ~~~\n+LL -   one_arg(1, \"\", 1.0);\n+LL +   one_arg(1, );\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:13:3\n@@ -77,8 +81,9 @@ LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n help: remove the extra argument\n    |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n+LL -   two_arg_same(1, 1, 1);\n+LL +   two_arg_same(1, 1);\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:14:3\n@@ -93,8 +98,9 @@ LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n help: remove the extra argument\n    |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n+LL -   two_arg_same(1, 1, 1.0);\n+LL +   two_arg_same(1, 1);\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:16:3\n@@ -109,8 +115,9 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n help: remove the extra argument\n    |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n+LL -   two_arg_diff(1, 1, \"\");\n+LL +   two_arg_diff(1, \"\");\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:17:3\n@@ -125,8 +132,9 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n help: remove the extra argument\n    |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n+LL -   two_arg_diff(1, \"\", \"\");\n+LL +   two_arg_diff(1, \"\");\n+   |\n \n error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n   --> $DIR/extra_arguments.rs:18:3\n@@ -143,8 +151,9 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n help: remove the extra arguments\n    |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n+LL -   two_arg_diff(1, 1, \"\", \"\");\n+LL +   two_arg_diff(1, \"\");\n+   |\n \n error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n   --> $DIR/extra_arguments.rs:19:3\n@@ -161,8 +170,9 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n help: remove the extra arguments\n    |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n+LL -   two_arg_diff(1, \"\", 1, \"\");\n+LL +   two_arg_diff(1, \"\", );\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:22:3\n@@ -177,8 +187,9 @@ LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n help: remove the extra argument\n    |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n+LL -   two_arg_same(1, 1,     \"\");\n+LL +   two_arg_same(1, 1);\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:23:3\n@@ -193,8 +204,9 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n help: remove the extra argument\n    |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n+LL -   two_arg_diff(1, 1,     \"\");\n+LL +   two_arg_diff(1, \"\");\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:24:3\n@@ -212,8 +224,9 @@ LL | fn two_arg_same(_a: i32, _b: i32) {}\n    |    ^^^^^^^^^^^^ -------  -------\n help: remove the extra argument\n    |\n-LL |   two_arg_same(1, 1);\n-   |               ~~~~~~\n+LL -     1,\n+LL +     1\n+   |\n \n error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/extra_arguments.rs:30:3\n@@ -231,8 +244,9 @@ LL | fn two_arg_diff(_a: i32, _b: &str) {}\n    |    ^^^^^^^^^^^^ -------  --------\n help: remove the extra argument\n    |\n-LL |   two_arg_diff(1, \"\");\n-   |               ~~~~~~~\n+LL -     1,\n+LL +     \"\"\n+   |\n \n error: aborting due to 14 previous errors\n "}, {"sha": "95795a50fce27ab64a032b45dcd945471bc32fb7", "filename": "tests/ui/argument-suggestions/issue-97484.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -19,8 +19,9 @@ LL |     foo(&&A, B, C, D, &E, F, G);\n    |                       ~~\n help: remove the extra arguments\n    |\n-LL |     foo(&&A, D, /* &E */, G);\n-   |        ~~~~~~~~~~~~~~~~~~~~~\n+LL -     foo(&&A, B, C, D, E, F, G);\n+LL +     foo(&&A, D, /* &E */, G);\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "39eae28b8ca0a54221156da9e9f185b1495926e9", "filename": "tests/ui/argument-suggestions/mixed_cases.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fmixed_cases.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -13,8 +13,9 @@ LL | fn two_args(_a: i32, _b: f32) {}\n    |    ^^^^^^^^ -------  -------\n help: remove the extra argument\n    |\n-LL |   two_args(1, /* f32 */);\n-   |           ~~~~~~~~~~~~~~\n+LL -   two_args(1, \"\", X {});\n+LL +   two_args(1, /* f32 */);\n+   |\n \n error[E0061]: this function takes 3 arguments but 4 arguments were supplied\n   --> $DIR/mixed_cases.rs:11:3"}, {"sha": "fc973cd5ef5945bd061ce0f68183851cf3443579", "filename": "tests/ui/error-codes/E0057.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ferror-codes%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ferror-codes%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0057.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -27,8 +27,9 @@ LL |     let f = |x| x * 3;\n    |             ^^^\n help: remove the extra argument\n    |\n-LL |     let c = f(2);\n-   |              ~~~\n+LL -     let c = f(2, 3);\n+LL +     let c = f(2);\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "92e35b47fc8367abd7f8510516313b7e01361815", "filename": "tests/ui/issues/issue-16939.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fissues%2Fissue-16939.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fissues%2Fissue-16939.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-16939.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -11,8 +11,9 @@ LL | fn _foo<F: Fn()> (f: F) {\n    |            ^^^^\n help: remove the extra argument\n    |\n-LL |     |t| f();\n-   |          ~~\n+LL -     |t| f(t);\n+LL +     |t| f();\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "31bcea83e14e7c8beacac34e8ea848fe7921ef2d", "filename": "tests/ui/issues/issue-26094.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fissues%2Fissue-26094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fissues%2Fissue-26094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-26094.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -14,8 +14,9 @@ LL | fn some_function() {}\n    |    ^^^^^^^^^^^^^\n help: remove the extra argument\n    |\n-LL |         some_function()\n-   |         ~~~~~~~~~~~~~~~\n+LL -         $other(None)\n+LL +         $other()\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "8b4eeac731b6dd4c929ae03d50bd55ed4cc525a1", "filename": "tests/ui/issues/issue-4935.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fissues%2Fissue-4935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fissues%2Fissue-4935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-4935.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -11,8 +11,9 @@ LL | fn foo(a: usize) {}\n    |    ^^^ --------\n help: remove the extra argument\n    |\n-LL | fn main() { foo(5) }\n-   |                ~~~\n+LL - fn main() { foo(5, 6) }\n+LL + fn main() { foo(5) }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4b312ce28a4d8dd1951804150b4cab5159c16a78", "filename": "tests/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -11,8 +11,9 @@ LL |     fn zero(self) -> Foo { self }\n    |        ^^^^\n help: remove the extra argument\n    |\n-LL |     x.zero()\n-   |           ~~\n+LL -     x.zero(0)\n+LL +     x.zero()\n+   |\n \n error[E0061]: this method takes 1 argument but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:14:7"}, {"sha": "2fa0bd1e09646426477ce58ab7c28eee8a39bf3a", "filename": "tests/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -43,8 +43,9 @@ LL | impl FnMut<(isize,)> for S {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: remove the extra argument\n    |\n-LL |     let ans = s(/* isize */);\n-   |                ~~~~~~~~~~~~~\n+LL -     let ans = s(\"burma\", \"shave\");\n+LL +     let ans = s(/* isize */);\n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/overloaded-calls-bad.rs:40:7"}, {"sha": "f46b1073d840c430fd5f322cca8fdb61df9abe6d", "filename": "tests/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -30,8 +30,9 @@ note: function defined here\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n help: remove the extra argument\n    |\n-LL |     std::mem::size_of();\n-   |                      ~~\n+LL -     std::mem::size_of(u16);\n+LL +     std::mem::size_of();\n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8a27b2dabf12b80410e9bc85aba80515cedd29c1", "filename": "tests/ui/span/issue-34264.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-34264.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -63,8 +63,9 @@ LL | fn foo(Option<i32>, String) {}\n    |    ^^^ -----------  ------\n help: remove the extra argument\n    |\n-LL |     foo(Some(42), 2);\n-   |        ~~~~~~~~~~~~~\n+LL -     foo(Some(42), 2, \"\");\n+LL +     foo(Some(42), 2);\n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/issue-34264.rs:8:13\n@@ -93,8 +94,9 @@ LL | fn bar(x, y: usize) {}\n    |    ^^^ -  --------\n help: remove the extra argument\n    |\n-LL |     bar(1, 2);\n-   |        ~~~~~~\n+LL -     bar(1, 2, 3);\n+LL +     bar(1, 2);\n+   |\n \n error: aborting due to 6 previous errors\n "}, {"sha": "e592f3156cbd8482b89f57bb42ce9828da93803e", "filename": "tests/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -22,8 +22,9 @@ note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n help: remove the extra argument\n    |\n-LL |     let _: Option<(i32, bool)> = Some(/* (i32, bool) */);\n-   |                                      ~~~~~~~~~~~~~~~~~~~\n+LL -     let _: Option<(i32, bool)> = Some(1, 2);\n+LL +     let _: Option<(i32, bool)> = Some(/* (i32, bool) */);\n+   |\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:8:5\n@@ -45,8 +46,9 @@ LL | fn int_bool(_: (i32, bool)) {\n    |    ^^^^^^^^ --------------\n help: remove the extra argument\n    |\n-LL |     int_bool(/* (i32, bool) */);\n-   |             ~~~~~~~~~~~~~~~~~~~\n+LL -     int_bool(1, 2);\n+LL +     int_bool(/* (i32, bool) */);\n+   |\n \n error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/args-instead-of-tuple-errors.rs:11:28"}, {"sha": "d8ab265cfc9dc346e2a96b52767665d17d654af5", "filename": "tests/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -15,8 +15,9 @@ note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n help: remove the extra argument\n    |\n-LL |         groups.push(/* (Vec<String>, Vec<Process>) */);\n-   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL -         groups.push(new_group, vec![process]);\n+LL +         groups.push(/* (Vec<String>, Vec<Process>) */);\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "1ff4c3d49edd0f79694bc2e78e1e5bd20f479db3", "filename": "tests/ui/tuple/wrong_argument_ice-4.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -15,8 +15,9 @@ LL |     (|| {})(|| {\n    |      ^^\n help: remove the extra argument\n    |\n-LL |     (|| {})();\n-   |            ~~\n+LL -     (|| {})(|| {\n+LL +     (|| {})();\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b73d7cd144ee1890d37409cc23953327eb689c29", "filename": "tests/ui/type/type-ascription-instead-of-initializer.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -17,8 +17,9 @@ note: associated function defined here\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n help: remove the extra argument\n    |\n-LL |     let x: Vec::with_capacity(10);\n-   |                              ~~~~\n+LL -     let x: Vec::with_capacity(10, 20);\n+LL +     let x: Vec::with_capacity(10);\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c9d5c6b9fb22bacf40a616569c43bf8d68d3ff1f", "filename": "tests/ui/typeck/remove-extra-argument.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ftypeck%2Fremove-extra-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ftypeck%2Fremove-extra-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fremove-extra-argument.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -11,8 +11,9 @@ LL | fn l(_a: Vec<u8>) {}\n    |    ^ -----------\n help: remove the extra argument\n    |\n-LL |     l(vec![])\n-   |      ~~~~~~~~\n+LL -     l(vec![], vec![])\n+LL +     l(vec![])\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "71672f984c161ba1c33a7cec546e49cf2c10c43d", "filename": "tests/ui/typeck/struct-enum-wrong-args.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f02d8ec15eb430700b8181f4733b905e8e4ccca7/tests%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr?ref=f02d8ec15eb430700b8181f4733b905e8e4ccca7", "patch": "@@ -8,8 +8,9 @@ note: tuple variant defined here\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n help: remove the extra argument\n    |\n-LL |     let _ = Some(3);\n-   |                 ~~~\n+LL -     let _ = Some(3, 2);\n+LL +     let _ = Some(3);\n+   |\n \n error[E0061]: this enum variant takes 1 argument but 3 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:7:13\n@@ -23,8 +24,9 @@ note: tuple variant defined here\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n help: remove the extra arguments\n    |\n-LL |     let _ = Ok(3);\n-   |               ~~~\n+LL -     let _ = Ok(3, 6, 2);\n+LL +     let _ = Ok(3, );\n+   |\n \n error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:8:13\n@@ -68,8 +70,9 @@ LL | struct Wrapper(i32);\n    |        ^^^^^^^\n help: remove the extra argument\n    |\n-LL |     let _ = Wrapper(5);\n-   |                    ~~~\n+LL -     let _ = Wrapper(5, 2);\n+LL +     let _ = Wrapper(5);\n+   |\n \n error[E0061]: this struct takes 2 arguments but 0 arguments were supplied\n   --> $DIR/struct-enum-wrong-args.rs:11:13\n@@ -116,8 +119,9 @@ LL | struct DoubleWrapper(i32, i32);\n    |        ^^^^^^^^^^^^^\n help: remove the extra argument\n    |\n-LL |     let _ = DoubleWrapper(5, 2);\n-   |                          ~~~~~~\n+LL -     let _ = DoubleWrapper(5, 2, 7);\n+LL +     let _ = DoubleWrapper(5, 2);\n+   |\n \n error: aborting due to 8 previous errors\n "}]}