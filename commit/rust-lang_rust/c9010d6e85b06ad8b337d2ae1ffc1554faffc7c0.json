{"sha": "c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MDEwZDZlODViMDZhZDhiMzM3ZDJhZTFmZmMxNTU0ZmFmZmM3YzA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-17T21:09:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-17T21:09:15Z"}, "message": "Rollup merge of #74300 - lzutao:iterator-intra, r=jyn514\n\nUse intra-doc links in core::iter module\n\nThis will make core::iter doc depend less on std doc.", "tree": {"sha": "ecace04092d4aa6046f3dc6728822057ed532d2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecace04092d4aa6046f3dc6728822057ed532d2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEhN7CRBK7hj4Ov3rIwAAdHIIAJUsK3zMIuGt69o8i6Tn4Qrv\ncczjjRG+zuYZsp6onG55sS72gdDmRLDRQi2a94A7vp5tZAhr+vrSEPG7NosPLRFe\n0LaWbn7lM6AkLfCFovUXBIGT5SIe59/3Lri7m12j37eZ6CSLNW5nZLbe+y6cO226\nuQTuJLE01pepGSrdvRD+xuVQLxmGyTUV3tKGIEVP351y0vpUXgJmL/xInX2Q8Ka4\nfuF2v4t8r2FjYkTaWhuuJ6wnQsmoEenu96M8mKpiK4BGYbjCMilXk31c+QFOj2qi\n7IkmZTUfM92ZdgzareYywAYA7HbmOMm4qAmiQ5XLqgRD8qxdVRKU8zH1PEPjulE=\n=fw02\n-----END PGP SIGNATURE-----\n", "payload": "tree ecace04092d4aa6046f3dc6728822057ed532d2f\nparent 6b2ccc7180bc2a3c34a1874f725cc0b2533d5eaf\nparent 5ffdd7c5651508e4af85261a6cebdee43650ce1a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595020155 -0700\ncommitter GitHub <noreply@github.com> 1595020155 -0700\n\nRollup merge of #74300 - lzutao:iterator-intra, r=jyn514\n\nUse intra-doc links in core::iter module\n\nThis will make core::iter doc depend less on std doc.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0", "html_url": "https://github.com/rust-lang/rust/commit/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b2ccc7180bc2a3c34a1874f725cc0b2533d5eaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2ccc7180bc2a3c34a1874f725cc0b2533d5eaf", "html_url": "https://github.com/rust-lang/rust/commit/6b2ccc7180bc2a3c34a1874f725cc0b2533d5eaf"}, {"sha": "5ffdd7c5651508e4af85261a6cebdee43650ce1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffdd7c5651508e4af85261a6cebdee43650ce1a", "html_url": "https://github.com/rust-lang/rust/commit/5ffdd7c5651508e4af85261a6cebdee43650ce1a"}], "stats": {"total": 118, "additions": 40, "deletions": 78}, "files": [{"sha": "9b528cdbe30c4203c12aff07e1f66638b71b746b", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0", "patch": "@@ -39,11 +39,11 @@\n //! ```\n //!\n //! An iterator has a method, [`next`], which when called, returns an\n-//! [`Option`]`<Item>`. [`next`] will return `Some(Item)` as long as there\n+//! [`Option`]`<Item>`. [`next`] will return [`Some(Item)`] as long as there\n //! are elements, and once they've all been exhausted, will return `None` to\n //! indicate that iteration is finished. Individual iterators may choose to\n //! resume iteration, and so calling [`next`] again may or may not eventually\n-//! start returning `Some(Item)` again at some point (for example, see [`TryIter`]).\n+//! start returning [`Some(Item)`] again at some point (for example, see [`TryIter`]).\n //!\n //! [`Iterator`]'s full definition includes a number of other methods as well,\n //! but they are default methods, built on top of [`next`], and so you get\n@@ -53,9 +53,9 @@\n //! more complex forms of processing. See the [Adapters](#adapters) section\n //! below for more details.\n //!\n+//! [`Some(Item)`]: Some\n //! [`Iterator`]: trait.Iterator.html\n //! [`next`]: trait.Iterator.html#tymethod.next\n-//! [`Option`]: ../../std/option/enum.Option.html\n //! [`TryIter`]: ../../std/sync/mpsc/struct.TryIter.html\n //!\n //! # The three forms of iteration\n@@ -72,9 +72,9 @@\n //! # Implementing Iterator\n //!\n //! Creating an iterator of your own involves two steps: creating a `struct` to\n-//! hold the iterator's state, and then `impl`ementing [`Iterator`] for that\n-//! `struct`. This is why there are so many `struct`s in this module: there is\n-//! one for each iterator and iterator adapter.\n+//! hold the iterator's state, and then implementing [`Iterator`] for that `struct`.\n+//! This is why there are so many `struct`s in this module: there is one for\n+//! each iterator and iterator adapter.\n //!\n //! Let's make an iterator named `Counter` which counts from `1` to `5`:\n //!"}, {"sha": "494c75174ff831733c7bc312645229c4e1ea5541", "filename": "src/libcore/iter/traits/accum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs?ref=c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0", "patch": "@@ -9,9 +9,9 @@ use crate::ops::{Add, Mul};\n /// [`FromIterator`] this trait should rarely be called directly and instead\n /// interacted with through [`Iterator::sum`].\n ///\n-/// [`sum`]: ../../std/iter/trait.Sum.html#tymethod.sum\n-/// [`FromIterator`]: ../../std/iter/trait.FromIterator.html\n-/// [`Iterator::sum`]: ../../std/iter/trait.Iterator.html#method.sum\n+/// [`sum`]: #tymethod.sum\n+/// [`FromIterator`]: crate::iter::FromIterator\n+/// [`Iterator::sum`]: crate::iter::Iterator::sum\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Sum<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n@@ -28,9 +28,9 @@ pub trait Sum<A = Self>: Sized {\n /// [`FromIterator`] this trait should rarely be called directly and instead\n /// interacted with through [`Iterator::product`].\n ///\n-/// [`product`]: ../../std/iter/trait.Product.html#tymethod.product\n-/// [`FromIterator`]: ../../std/iter/trait.FromIterator.html\n-/// [`Iterator::product`]: ../../std/iter/trait.Iterator.html#method.product\n+/// [`product`]: #tymethod.product\n+/// [`FromIterator`]: crate::iter::FromIterator\n+/// [`Iterator::product`]: crate::iter::Iterator::product\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Product<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by"}, {"sha": "851a1e49a493b6d2d464ce5d07f43db52d5f934b", "filename": "src/libcore/iter/traits/double_ended.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0", "patch": "@@ -106,8 +106,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// `nth_back()` will return [`None`] if `n` is greater than or equal to the length of the\n     /// iterator.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`nth`]: ../../std/iter/trait.Iterator.html#method.nth\n+    /// [`nth`]: crate::iter::Iterator::nth\n     ///\n     /// # Examples\n     ///\n@@ -274,8 +273,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// argument is a double reference. You can see this effect in the\n     /// examples below, with `&&x`.\n     ///\n-    /// [`Some(element)`]: ../../std/option/enum.Option.html#variant.Some\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Some(element)`]: Some\n     ///\n     /// # Examples\n     ///"}, {"sha": "daf56a0d126a4a24224fbff7c9973b4119370dc5", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 21, "deletions": 56, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0", "patch": "@@ -106,8 +106,7 @@ pub trait Iterator {\n     /// again may or may not eventually start returning [`Some(Item)`] again at some\n     /// point.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`Some(Item)`]: ../../std/option/enum.Option.html#variant.Some\n+    /// [`Some(Item)`]: Some\n     ///\n     /// # Examples\n     ///\n@@ -160,9 +159,7 @@ pub trait Iterator {\n     /// The default implementation returns `(0, `[`None`]`)` which is correct for any\n     /// iterator.\n     ///\n-    /// [`usize`]: ../../std/primitive.usize.html\n-    /// [`Option`]: ../../std/option/enum.Option.html\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`usize`]: type@usize\n     ///\n     /// # Examples\n     ///\n@@ -214,8 +211,6 @@ pub trait Iterator {\n     /// called at least once even if the iterator does not have any elements.\n     ///\n     /// [`next`]: #tymethod.next\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n     ///\n     /// # Overflow Behavior\n     ///\n@@ -229,7 +224,7 @@ pub trait Iterator {\n     /// This function might panic if the iterator has more than [`usize::MAX`]\n     /// elements.\n     ///\n-    /// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n+    /// [`usize::MAX`]: crate::usize::MAX\n     ///\n     /// # Examples\n     ///\n@@ -263,8 +258,6 @@ pub trait Iterator {\n     /// doing so, it keeps track of the current element. After [`None`] is\n     /// returned, `last()` will then return the last element it saw.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -303,8 +296,6 @@ pub trait Iterator {\n     /// `nth()` will return [`None`] if `n` is greater than or equal to the length of the\n     /// iterator.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -537,9 +528,8 @@ pub trait Iterator {\n     /// assert_eq!((2, 'o'), zipper[2]);\n     /// ```\n     ///\n-    /// [`enumerate`]: trait.Iterator.html#method.enumerate\n-    /// [`next`]: ../../std/iter/trait.Iterator.html#tymethod.next\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`enumerate`]: #method.enumerate\n+    /// [`next`]: #tymethod.next\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn zip<U>(self, other: U) -> Zip<Self, U::IntoIter>\n@@ -568,7 +558,7 @@ pub trait Iterator {\n     /// more idiomatic to use [`for`] than `map()`.\n     ///\n     /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n-    /// [`FnMut`]: ../../std/ops/trait.FnMut.html\n+    /// [`FnMut`]: crate::ops::FnMut\n     ///\n     /// # Examples\n     ///\n@@ -777,9 +767,7 @@ pub trait Iterator {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     ///\n-    /// [`Option<T>`]: ../../std/option/enum.Option.html\n-    /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Option<T>`]: Option\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>\n@@ -812,8 +800,8 @@ pub trait Iterator {\n     /// The returned iterator might panic if the to-be-returned index would\n     /// overflow a [`usize`].\n     ///\n-    /// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n-    /// [`usize`]: ../../std/primitive.usize.html\n+    /// [`usize`]: type@usize\n+    /// [`usize::MAX`]: crate::usize::MAX\n     /// [`zip`]: #method.zip\n     ///\n     /// # Examples\n@@ -849,8 +837,8 @@ pub trait Iterator {\n     /// anything other than fetching the next value) of the [`next`] method\n     /// will occur.\n     ///\n-    /// [`peek`]: struct.Peekable.html#method.peek\n-    /// [`next`]: ../../std/iter/trait.Iterator.html#tymethod.next\n+    /// [`peek`]: crate::iter::Peekable::peek\n+    /// [`next`]: #tymethod.next\n     ///\n     /// # Examples\n     ///\n@@ -1116,8 +1104,6 @@ pub trait Iterator {\n     /// It is also not specified what this iterator returns after the first` None` is returned.\n     /// If you need fused iterator, use [`fuse`].\n     ///\n-    /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     /// [`fuse`]: #method.fuse\n     #[inline]\n     #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n@@ -1216,8 +1202,6 @@ pub trait Iterator {\n     /// iterator and the return value from the closure, an [`Option`], is\n     /// yielded by the iterator.\n     ///\n-    /// [`Option`]: ../../std/option/enum.Option.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1366,8 +1350,7 @@ pub trait Iterator {\n     /// [`Some(T)`] again. `fuse()` adapts an iterator, ensuring that after a\n     /// [`None`] is given, it will always return [`None`] forever.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`Some(T)`]: ../../std/option/enum.Option.html#variant.Some\n+    /// [`Some(T)`]: Some\n     ///\n     /// # Examples\n     ///\n@@ -1658,10 +1641,9 @@ pub trait Iterator {\n     /// assert_eq!(Ok(vec![1, 3]), result);\n     /// ```\n     ///\n-    /// [`iter`]: ../../std/iter/trait.Iterator.html#tymethod.next\n+    /// [`iter`]: #tymethod.next\n     /// [`String`]: ../../std/string/struct.String.html\n-    /// [`char`]: ../../std/primitive.char.html\n-    /// [`Result`]: ../../std/result/enum.Result.html\n+    /// [`char`]: type@char\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]\n@@ -2184,8 +2166,7 @@ pub trait Iterator {\n     /// argument is a double reference. You can see this effect in the\n     /// examples below, with `&&x`.\n     ///\n-    /// [`Some(element)`]: ../../std/option/enum.Option.html#variant.Some\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Some(element)`]: Some\n     ///\n     /// # Examples\n     ///\n@@ -2331,9 +2312,8 @@ pub trait Iterator {\n     /// This function might panic if the iterator has more than `usize::MAX`\n     /// non-matching elements.\n     ///\n-    /// [`Some(index)`]: ../../std/option/enum.Option.html#variant.Some\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n+    /// [`Some(index)`]: Some\n+    /// [`usize::MAX`]: crate::usize::MAX\n     ///\n     /// # Examples\n     ///\n@@ -2394,8 +2374,7 @@ pub trait Iterator {\n     /// `rposition()` is short-circuiting; in other words, it will stop\n     /// processing as soon as it finds a `true`.\n     ///\n-    /// [`Some(index)`]: ../../std/option/enum.Option.html#variant.Some\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`Some(index)`]: Some\n     ///\n     /// # Examples\n     ///\n@@ -2449,8 +2428,6 @@ pub trait Iterator {\n     /// If several elements are equally maximum, the last element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2477,8 +2454,6 @@ pub trait Iterator {\n     /// If several elements are equally minimum, the first element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2506,8 +2481,6 @@ pub trait Iterator {\n     /// If several elements are equally maximum, the last element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2541,8 +2514,6 @@ pub trait Iterator {\n     /// If several elements are equally maximum, the last element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2570,8 +2541,6 @@ pub trait Iterator {\n     /// If several elements are equally minimum, the first element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2605,8 +2574,6 @@ pub trait Iterator {\n     /// If several elements are equally minimum, the first element is\n     /// returned. If the iterator is empty, [`None`] is returned.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2747,7 +2714,7 @@ pub trait Iterator {\n     /// This is useful when you have an iterator over `&T`, but you need an\n     /// iterator over `T`.\n     ///\n-    /// [`clone`]: ../../std/clone/trait.Clone.html#tymethod.clone\n+    /// [`clone`]: crate::clone::Clone::clone\n     ///\n     /// # Examples\n     ///\n@@ -2779,8 +2746,6 @@ pub trait Iterator {\n     /// from the beginning. After iterating again, it will start at the\n     /// beginning again. And again. And again. Forever.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -3233,7 +3198,7 @@ pub trait Iterator {\n     /// assert!(![0.0, 1.0, f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n     /// ```\n     ///\n-    /// [`is_sorted`]: trait.Iterator.html#method.is_sorted\n+    /// [`is_sorted`]: #method.is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n     fn is_sorted_by<F>(mut self, mut compare: F) -> bool\n     where\n@@ -3262,7 +3227,7 @@ pub trait Iterator {\n     /// the elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see\n     /// its documentation for more information.\n     ///\n-    /// [`is_sorted`]: trait.Iterator.html#method.is_sorted\n+    /// [`is_sorted`]: #method.is_sorted\n     ///\n     /// # Examples\n     ///"}, {"sha": "3c893c039923ead483300501fbf4d8046b60f2e3", "filename": "src/libcore/iter/traits/marker.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fmarker.rs?ref=c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0", "patch": "@@ -9,9 +9,8 @@\n /// on the iterator. If the iterator is already fused, the additional [`Fuse`]\n /// wrapper will be a no-op with no performance penalty.\n ///\n-/// [`None`]: ../../std/option/enum.Option.html#variant.None\n-/// [`Iterator::fuse`]: ../../std/iter/trait.Iterator.html#method.fuse\n-/// [`Fuse`]: ../../std/iter/struct.Fuse.html\n+/// [`Iterator::fuse`]: crate::iter::Iterator::fuse\n+/// [`Fuse`]: crate::iter::Fuse\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n #[rustc_unsafe_specialization_marker]\n pub trait FusedIterator: Iterator {}\n@@ -35,9 +34,8 @@ impl<I: FusedIterator + ?Sized> FusedIterator for &mut I {}\n /// This trait must only be implemented when the contract is upheld.\n /// Consumers of this trait must inspect [`.size_hint`]\u2019s upper bound.\n ///\n-/// [`None`]: ../../std/option/enum.Option.html#variant.None\n-/// [`usize::MAX`]: ../../std/usize/constant.MAX.html\n-/// [`.size_hint`]: ../../std/iter/trait.Iterator.html#method.size_hint\n+/// [`usize::MAX`]: crate::usize::MAX\n+/// [`.size_hint`]: crate::iter::Iterator::size_hint\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n #[rustc_unsafe_specialization_marker]\n pub unsafe trait TrustedLen: Iterator {}"}, {"sha": "2f2206a117cf7bfc05541f76382541bf14f5be93", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c9010d6e85b06ad8b337d2ae1ffc1554faffc7c0", "patch": "@@ -151,6 +151,7 @@\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n #![feature(unsafe_block_in_unsafe_fn)]\n+#![deny(intra_doc_link_resolution_failure)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n #[prelude_import]"}]}