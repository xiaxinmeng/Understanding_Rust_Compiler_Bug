{"sha": "660930623eb002cfc56cd2a4e392ad40e8c53696", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MDkzMDYyM2ViMDAyY2ZjNTZjZDJhNGUzOTJhZDQwZThjNTM2OTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-03T19:24:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-03T19:24:36Z"}, "message": "feat: regenrate lint completions", "tree": {"sha": "8faeca4397e084980161b65de31abd10b04b31f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8faeca4397e084980161b65de31abd10b04b31f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/660930623eb002cfc56cd2a4e392ad40e8c53696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/660930623eb002cfc56cd2a4e392ad40e8c53696", "html_url": "https://github.com/rust-lang/rust/commit/660930623eb002cfc56cd2a4e392ad40e8c53696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/660930623eb002cfc56cd2a4e392ad40e8c53696/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58d2ece88a17030668e09e4aade7bb2ed27dcaac", "url": "https://api.github.com/repos/rust-lang/rust/commits/58d2ece88a17030668e09e4aade7bb2ed27dcaac", "html_url": "https://github.com/rust-lang/rust/commit/58d2ece88a17030668e09e4aade7bb2ed27dcaac"}], "stats": {"total": 153, "additions": 84, "deletions": 69}, "files": [{"sha": "face0c27fcc1997bdd240183c326d99e89b66a55", "filename": "crates/ide_completion/src/tests/sourcegen.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/660930623eb002cfc56cd2a4e392ad40e8c53696/crates%2Fide_completion%2Fsrc%2Ftests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660930623eb002cfc56cd2a4e392ad40e8c53696/crates%2Fide_completion%2Fsrc%2Ftests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fsourcegen.rs?ref=660930623eb002cfc56cd2a4e392ad40e8c53696", "patch": "@@ -14,8 +14,9 @@ use xshell::cmd;\n #[test]\n #[ignore]\n fn sourcegen_lint_completions() {\n-    if !project_root().join(\"./target/rust\").exists() {\n-        cmd!(\"git clone --depth=1 https://github.com/rust-lang/rust ./target/rust\").run().unwrap();\n+    let rust_repo = project_root().join(\"./target/rust\");\n+    if !rust_repo.exists() {\n+        cmd!(\"git clone --depth=1 https://github.com/rust-lang/rust {rust_repo}\").run().unwrap();\n     }\n \n     let mut contents = r\"\n@@ -33,6 +34,7 @@ pub struct Lint {\n \n     cmd!(\"curl https://rust-lang.github.io/rust-clippy/master/lints.json --output ./target/clippy_lints.json\").run().unwrap();\n     generate_descriptor_clippy(&mut contents, Path::new(\"./target/clippy_lints.json\"));\n+\n     let contents =\n         sourcegen::add_preamble(\"sourcegen_lint_completions\", sourcegen::reformat(contents));\n \n@@ -93,11 +95,10 @@ fn generate_feature_descriptor(buf: &mut String, src_dir: PathBuf) {\n         .collect::<Vec<_>>();\n     features.sort_by(|(feature_ident, _), (feature_ident2, _)| feature_ident.cmp(feature_ident2));\n \n+    buf.push_str(r#\"pub const FEATURES: &[Lint] = &[\"#);\n     for (feature_ident, doc) in features.into_iter() {\n         push_lint_completion(buf, &feature_ident, &doc)\n     }\n-\n-    buf.push_str(r#\"pub const FEATURES: &[Lint] = &[\"#);\n     buf.push('\\n');\n     buf.push_str(\"];\\n\");\n }"}, {"sha": "4ec63a234b07e64846d87e67c9be7e25fe9ad87b", "filename": "crates/ide_db/src/helpers/generated_lints.rs", "status": "modified", "additions": 79, "deletions": 65, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/660930623eb002cfc56cd2a4e392ad40e8c53696/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660930623eb002cfc56cd2a4e392ad40e8c53696/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs?ref=660930623eb002cfc56cd2a4e392ad40e8c53696", "patch": "@@ -1,10 +1,9 @@\n-//! Generated file, do not edit by hand, see `xtask/src/codegen`\n+//! Generated by `sourcegen_lint_completions`, do not edit by hand.\n \n pub struct Lint {\n     pub label: &'static str,\n     pub description: &'static str,\n }\n-\n pub const DEFAULT_LINTS: &[Lint] = &[\n     Lint {\n         label: \"absolute_paths_not_starting_with_crate\",\n@@ -71,8 +70,8 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         description: r##\"detects when an null pointer is dereferenced\"##,\n     },\n     Lint {\n-        label: \"disjoint_capture_migration\",\n-        description: r##\"Drop reorder and auto traits error because of `capture_disjoint_fields`\"##,\n+        label: \"disjoint_capture_drop_reorder\",\n+        description: r##\"Drop reorder because of `capture_disjoint_fields`\"##,\n     },\n     Lint { label: \"drop_bounds\", description: r##\"bounds of the form `T: Drop` are useless\"## },\n     Lint {\n@@ -98,7 +97,7 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n     },\n     Lint {\n         label: \"future_incompatible\",\n-        description: r##\"lint group for: keyword-idents, anonymous-parameters, ellipsis-inclusive-range-patterns, forbidden-lint-groups, illegal-floating-point-literal-pattern, private-in-public, pub-use-of-private-extern-crate, invalid-type-param-default, const-err, unaligned-references, patterns-in-fns-without-body, missing-fragment-specifier, late-bound-lifetime-arguments, order-dependent-trait-objects, coherence-leak-check, tyvar-behind-raw-pointer, bare-trait-objects, absolute-paths-not-starting-with-crate, unstable-name-collisions, where-clauses-object-safety, proc-macro-derive-resolution-fallback, macro-expanded-macro-exports-accessed-by-absolute-paths, ill-formed-attribute-input, conflicting-repr-hints, ambiguous-associated-items, mutable-borrow-reservation-conflict, indirect-structural-match, pointer-structural-match, nontrivial-structural-match, soft-unstable, cenum-impl-drop-cast, const-evaluatable-unchecked, uninhabited-static, unsupported-naked-functions, semicolon-in-expressions-from-macros, legacy-derive-helpers, proc-macro-back-compat, array-into-iter\"##,\n+        description: r##\"lint group for: keyword-idents, anonymous-parameters, forbidden-lint-groups, illegal-floating-point-literal-pattern, private-in-public, pub-use-of-private-extern-crate, invalid-type-param-default, const-err, unaligned-references, patterns-in-fns-without-body, missing-fragment-specifier, late-bound-lifetime-arguments, order-dependent-trait-objects, coherence-leak-check, tyvar-behind-raw-pointer, absolute-paths-not-starting-with-crate, unstable-name-collisions, where-clauses-object-safety, proc-macro-derive-resolution-fallback, macro-expanded-macro-exports-accessed-by-absolute-paths, ill-formed-attribute-input, conflicting-repr-hints, ambiguous-associated-items, mutable-borrow-reservation-conflict, indirect-structural-match, pointer-structural-match, nontrivial-structural-match, soft-unstable, cenum-impl-drop-cast, const-evaluatable-unchecked, uninhabited-static, unsupported-naked-functions, semicolon-in-expressions-from-macros, legacy-derive-helpers, proc-macro-back-compat, array-into-iter\"##,\n     },\n     Lint {\n         label: \"ill_formed_attribute_input\",\n@@ -139,7 +138,7 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n     },\n     Lint {\n         label: \"invalid_value\",\n-        description: r##\"an invalid value is being created (such as a null reference)\"##,\n+        description: r##\"an invalid value is being created (such as a NULL reference)\"##,\n     },\n     Lint {\n         label: \"irrefutable_let_patterns\",\n@@ -291,10 +290,6 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"rust_2018_idioms\",\n         description: r##\"lint group for: bare-trait-objects, unused-extern-crates, ellipsis-inclusive-range-patterns, elided-lifetimes-in-paths, explicit-outlives-requirements\"##,\n     },\n-    Lint {\n-        label: \"rust_2021_compatibility\",\n-        description: r##\"lint group for: ellipsis-inclusive-range-patterns, bare-trait-objects\"##,\n-    },\n     Lint {\n         label: \"semicolon_in_expressions_from_macros\",\n         description: r##\"trailing semicolon in macro body used as expression\"##,\n@@ -804,6 +799,7 @@ Inline assembly is currently supported on the following architectures:\n - Hexagon\n - MIPS32r2 and MIPS64r2\n - wasm32\n+- BPF\n \n ## Basic usage\n \n@@ -1229,7 +1225,7 @@ reg_spec := <register class> / \"<explicit register>\"\n operand_expr := expr / \"_\" / expr \"=>\" expr / expr \"=>\" \"_\"\n reg_operand := dir_spec \"(\" reg_spec \")\" operand_expr\n operand := reg_operand / \"const\" const_expr / \"sym\" path\n-option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\"\n+option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\" / \"raw\"\n options := \"options(\" option *[\",\" option] [\",\"] \")\"\n asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) [\",\" options] [\",\"] \")\"\n ```\n@@ -1344,6 +1340,8 @@ Here is the list of currently supported register classes:\n | PowerPC | `reg_nonzero` | | `r[1-31]` | `b` |\n | PowerPC | `freg` | `f[0-31]` | `f` |\n | wasm32 | `local` | None\\* | `r` |\n+| BPF | `reg` |\u00a0`r[0-10]` | `r` |\n+| BPF | `wreg` |\u00a0`w[0-10]` | `w` |\n \n > **Note**: On x86 we treat `reg_byte` differently from `reg` because the compiler can allocate `al` and `ah` separately whereas `reg` reserves the whole register.\n >\n@@ -1389,6 +1387,8 @@ Each register class has constraints on which value types they can be used with.\n | PowerPC | `reg_nonzero` | None | `i8`, `i16`, `i32` |\n | PowerPC | `freg` | None | `f32`, `f64` |\n | wasm32 | `local` | None | `i8` `i16` `i32` `i64` `f32` `f64` |\n+| BPF |\u00a0`reg` |\u00a0None | `i8` `i16` `i32` `i64` |\n+| BPF |\u00a0`wreg` |\u00a0`alu32` | `i8` `i16` `i32` |\n \n > **Note**: For the purposes of the above table pointers, function pointers and `isize`/`usize` are treated as the equivalent integer type (`i16`/`i32`/`i64` depending on the target).\n \n@@ -1448,6 +1448,7 @@ Some registers have multiple names. These are all treated by the compiler as ide\n | Hexagon | `r29` | `sp` |\n | Hexagon | `r30` | `fr` |\n | Hexagon | `r31` | `lr` |\n+| BPF | `r[0-10]` | `w[0-10]` |\n \n Some registers cannot be used for input or output operands:\n \n@@ -1549,6 +1550,7 @@ Currently the following options are defined:\n - `noreturn`: The `asm` block never returns, and its return type is defined as `!` (never). Behavior is undefined if execution falls through past the end of the asm code. A `noreturn` asm block behaves just like a function which doesn't return; notably, local variables in scope are not dropped before it is invoked.\n - `nostack`: The `asm` block does not push data to the stack, or write to the stack red-zone (if supported by the target). If this option is *not* used then the stack pointer is guaranteed to be suitably aligned (according to the target ABI) for a function call.\n - `att_syntax`: This option is only valid on x86, and causes the assembler to use the `.att_syntax prefix` mode of the GNU assembler. Register operands are substituted in with a leading `%`.\n+- `raw`: This causes the template string to be parsed as a raw assembly string, with no special handling for `{` and `}`. This is primarily useful when including raw assembly code from an external file using `include_str!`.\n \n The compiler performs some additional checks on options:\n - The `nomem` and `readonly` options are mutually exclusive: it is a compile-time error to specify both.\n@@ -3801,6 +3803,39 @@ fn cheap_clone<T: CheapToClone>(t: T) -> T {\n \n This is expected to replace the unstable `overlapping_marker_traits`\n feature, which applied to all empty traits (without needing an opt-in).\n+\"##,\n+    },\n+    Lint {\n+        label: \"more_qualified_paths\",\n+        description: r##\"# `more_qualified_paths`\n+\n+The `more_qualified_paths` feature can be used in order to enable the\n+use of qualified paths in patterns.\n+\n+## Example\n+\n+```rust\n+#![feature(more_qualified_paths)]\n+\n+fn main() {\n+    // destructure through a qualified path\n+    let <Foo as A>::Assoc { br } = StructStruct { br: 2 };\n+}\n+\n+struct StructStruct {\n+    br: i8,\n+}\n+\n+struct Foo;\n+\n+trait A {\n+    type Assoc;\n+}\n+\n+impl A for Foo {\n+    type Assoc = StructStruct;\n+}\n+```\n \"##,\n     },\n     Lint {\n@@ -4681,60 +4716,6 @@ let result: Result<i32, ParseIntError> = try {\n };\n assert!(result.is_err());\n ```\n-\"##,\n-    },\n-    Lint {\n-        label: \"try_trait\",\n-        description: r##\"# `try_trait`\n-\n-The tracking issue for this feature is: [#42327]\n-\n-[#42327]: https://github.com/rust-lang/rust/issues/42327\n-\n-------------------------\n-\n-This introduces a new trait `Try` for extending the `?` operator to types\n-other than `Result` (a part of [RFC 1859]).  The trait provides the canonical\n-way to _view_ a type in terms of a success/failure dichotomy.  This will\n-allow `?` to supplant the `try_opt!` macro on `Option` and the `try_ready!`\n-macro on `Poll`, among other things.\n-\n-[RFC 1859]: https://github.com/rust-lang/rfcs/pull/1859\n-\n-Here's an example implementation of the trait:\n-\n-```rust,ignore (cannot-reimpl-Try)\n-/// A distinct type to represent the `None` value of an `Option`.\n-///\n-/// This enables using the `?` operator on `Option`; it's rarely useful alone.\n-#[derive(Debug)]\n-#[unstable(feature = \"try_trait\", issue = \"42327\")]\n-pub struct None { _priv: () }\n-\n-#[unstable(feature = \"try_trait\", issue = \"42327\")]\n-impl<T> ops::Try for Option<T>  {\n-    type Ok = T;\n-    type Error = None;\n-\n-    fn into_result(self) -> Result<T, None> {\n-        self.ok_or(None { _priv: () })\n-    }\n-\n-    fn from_ok(v: T) -> Self {\n-        Some(v)\n-    }\n-\n-    fn from_error(_: None) -> Self {\n-        None\n-    }\n-}\n-```\n-\n-Note the `Error` associated type here is a new marker.  The `?` operator\n-allows interconversion between different `Try` implementers only when\n-the error type can be converted `Into` the error type of the enclosing\n-function (or catch block).  Having a distinct error type (as opposed to\n-just `()`, or similar) restricts this to where it's semantically meaningful.\n \"##,\n     },\n     Lint {\n@@ -5035,6 +5016,10 @@ checked.\"##,\n         label: \"clippy::almost_swapped\",\n         description: r##\"Checks for `foo = bar; bar = foo` sequences.\"##,\n     },\n+    Lint {\n+        label: \"clippy::append_instead_of_extend\",\n+        description: r##\"Checks for occurrences where one vector gets extended instead of append\"##,\n+    },\n     Lint {\n         label: \"clippy::approx_constant\",\n         description: r##\"Checks for floating point literals that approximate\n@@ -5371,6 +5356,25 @@ explicitly or vice versa.\"##,\n         label: \"clippy::disallowed_method\",\n         description: r##\"Denies the configured methods and functions in clippy.toml\"##,\n     },\n+    Lint {\n+        label: \"clippy::disallowed_script_idents\",\n+        description: r##\"Checks for usage of unicode scripts other than those explicitly allowed\n+by the lint config.\n+\n+This lint doesn't take into account non-text scripts such as `Unknown` and `Linear_A`.\n+It also ignores the `Common` script type.\n+While configuring, be sure to use official script name [aliases] from\n+[the list of supported scripts][supported_scripts].\n+\n+See also: [`non_ascii_idents`].\n+\n+[aliases]: http://www.unicode.org/reports/tr24/tr24-31.html#Script_Value_Aliases\n+[supported_scripts]: https://www.unicode.org/iso15924/iso15924-codes.html\"##,\n+    },\n+    Lint {\n+        label: \"clippy::disallowed_type\",\n+        description: r##\"Denies the configured types in clippy.toml.\"##,\n+    },\n     Lint {\n         label: \"clippy::diverging_sub_expression\",\n         description: r##\"Checks for diverging calls that are not match arms or\n@@ -6147,6 +6151,11 @@ used to clamp values, but switched so that the result is constant.\"##,\n         label: \"clippy::missing_docs_in_private_items\",\n         description: r##\"Warns if there is missing doc for any documentable item\n (public or private).\"##,\n+    },\n+    Lint {\n+        label: \"clippy::missing_enforced_import_renames\",\n+        description: r##\"Checks for imports that do not rename the item as specified\n+in the `enforce-import-renames` config option.\"##,\n     },\n     Lint {\n         label: \"clippy::missing_errors_doc\",\n@@ -6372,6 +6381,10 @@ concisely.\"##,\n         description: r##\"Checks for duplicate open options as well as combinations\n that make no sense.\"##,\n     },\n+    Lint {\n+        label: \"clippy::nonstandard_macro_braces\",\n+        description: r##\"Checks that common macros are used with consistent bracing.\"##,\n+    },\n     Lint {\n         label: \"clippy::not_unsafe_ptr_arg_deref\",\n         description: r##\"Checks for public functions that dereference raw pointer\n@@ -6560,6 +6573,7 @@ upper bound, e.g., `x..(y+1)`.\"##,\n         label: \"clippy::rc_buffer\",\n         description: r##\"Checks for `Rc<T>` and `Arc<T>` when `T` is a mutable buffer type such as `String` or `Vec`.\"##,\n     },\n+    Lint { label: \"clippy::rc_mutex\", description: r##\"Checks for `Rc<Mutex<T>>`.\"## },\n     Lint {\n         label: \"clippy::redundant_allocation\",\n         description: r##\"Checks for use of redundant allocations anywhere in the code.\"##,"}]}