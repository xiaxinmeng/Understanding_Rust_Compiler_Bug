{"sha": "7580826a1f600e1ce51fa16da120de8cc263712b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ODA4MjZhMWY2MDBlMWNlNTFmYTE2ZGExMjBkZThjYzI2MzcxMmI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-02-27T21:10:35Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-02-28T15:31:38Z"}, "message": "Avoid printing overwhelming info on -Znll-dump-cause", "tree": {"sha": "be3056389eef312e5483715f2fe393b9051a6759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3056389eef312e5483715f2fe393b9051a6759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7580826a1f600e1ce51fa16da120de8cc263712b", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlqWy1oACgkQiMlBzaHU\nZDLsCw//bGG9eDOSfgx2VOVHGes7oOZL9unK/ppoX973xQceoL0KcLr+2DprgLym\nwe3ZqksYYu7TObOaIqINbPFJL2PP/F3Wy+KtJr/xpIUwJReaZswh0c+xl6BB20Ui\npea9AcC6cmKngHgz0UBFzNv4HvHmJEzO4S9kcEBIDisphcY/oFxS01R5nLFPDGlS\nAVnu1jaOd45s3GNw/Wt/Aa0+iIpppHeuYxyeCWaKxCfyQkElC4UyGY1xqoMn9q3d\nmmyZZDVGUnjeUqPaT034+l+oG0zhzTwuwG09/0ewlL5GKK4y4r9gvB7uQNs92acG\nCQQmsykDt+ZB7MriHewBKsaJikdeM1Klxl4/2BmOQ+z2nFluYhTgvNEMgNGebSUr\nhZSgUiNK0+YChU4Kgv1yXLFQSzz5Mw8HBucZxOKkrZM3aub3VXpc11pVeUGAgEB+\nPt1+bgJte7mB6C58xT/UV9yRWK7UaV/0AjMOM3y3J7ZD8moCof8/4/kWEPzUEUuM\nQEXQ/+jxo56NBssYE9IgliecemJhYOugjPGPT1PZOBxRxQ4gRc2dusGgcvJw4523\nR1keR8UM7oph1oskLHh6HCULHNCoifxLdu7mkVKHdFUHyYATgY6NENlOHASVEXgb\nJu2wQ+NygGTrZPDftIFnOvLUz7fF/+iVu4h2L637B2mPfS8AANY=\n=nmUN\n-----END PGP SIGNATURE-----", "payload": "tree be3056389eef312e5483715f2fe393b9051a6759\nparent a17a2e3f839a6c5c00ee8f00ac4c7d92e2ad634b\nauthor Santiago Pastorino <spastorino@gmail.com> 1519765835 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1519831898 -0300\n\nAvoid printing overwhelming info on -Znll-dump-cause\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7580826a1f600e1ce51fa16da120de8cc263712b", "html_url": "https://github.com/rust-lang/rust/commit/7580826a1f600e1ce51fa16da120de8cc263712b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7580826a1f600e1ce51fa16da120de8cc263712b/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17a2e3f839a6c5c00ee8f00ac4c7d92e2ad634b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17a2e3f839a6c5c00ee8f00ac4c7d92e2ad634b", "html_url": "https://github.com/rust-lang/rust/commit/a17a2e3f839a6c5c00ee8f00ac4c7d92e2ad634b"}], "stats": {"total": 72, "additions": 2, "deletions": 70}, "files": [{"sha": "158e8c7a9929513ac599b7d273c892af0f8fbad0", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7580826a1f600e1ce51fa16da120de8cc263712b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7580826a1f600e1ce51fa16da120de8cc263712b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=7580826a1f600e1ce51fa16da120de8cc263712b", "patch": "@@ -71,7 +71,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     }\n \n                     _ => {\n-                        cause.label_diagnostic(mir, err);\n                     }\n                 }\n             }"}, {"sha": "d2f6d626c9eb4419a0e17aae4d917b74752054d5", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 69, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7580826a1f600e1ce51fa16da120de8cc263712b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7580826a1f600e1ce51fa16da120de8cc263712b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=7580826a1f600e1ce51fa16da120de8cc263712b", "patch": "@@ -26,7 +26,6 @@ use rustc::ty::{self, RegionVid, Ty, TypeFoldable};\n use rustc::util::common::ErrorReported;\n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_errors::DiagnosticBuilder;\n use std::fmt;\n use std::rc::Rc;\n use syntax::ast;\n@@ -435,7 +434,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         self.check_type_tests(infcx, mir, mir_def_id, outlives_requirements.as_mut());\n \n-        self.check_universal_regions(infcx, mir, mir_def_id, outlives_requirements.as_mut());\n+        self.check_universal_regions(infcx, mir_def_id, outlives_requirements.as_mut());\n \n         let outlives_requirements = outlives_requirements.unwrap_or(vec![]);\n \n@@ -897,7 +896,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn check_universal_regions<'gcx>(\n         &self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n         mut propagated_outlives_requirements: Option<&mut Vec<ClosureOutlivesRequirement<'gcx>>>,\n     ) {\n@@ -913,7 +911,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         for (fr, _) in universal_definitions {\n             self.check_universal_region(\n                 infcx,\n-                mir,\n                 mir_def_id,\n                 fr,\n                 &mut propagated_outlives_requirements,\n@@ -932,7 +929,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn check_universal_region<'gcx>(\n         &self,\n         infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-        mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n         longer_fr: RegionVid,\n         propagated_outlives_requirements: &mut Option<&mut Vec<ClosureOutlivesRequirement<'gcx>>>,\n@@ -990,7 +986,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // Note: in this case, we use the unapproximated regions\n             // to report the error. This gives better error messages\n             // in some cases.\n-            self.report_error(infcx, mir, mir_def_id, longer_fr, shorter_fr, blame_span);\n+            self.report_error(infcx, mir_def_id, longer_fr, shorter_fr, blame_span);\n         }\n     }\n \n@@ -1005,7 +1001,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     fn report_error(\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n-        mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n         outlived_fr: RegionVid,\n@@ -1039,12 +1034,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             &format!(\"{} does not outlive {}\", fr_string, outlived_fr_string,),\n         );\n \n-        // Find out why `fr` had to outlive `outlived_fr`...\n-        let inferred_values = self.inferred_values.as_ref().unwrap();\n-        if let Some(cause) = inferred_values.cause(fr, outlived_fr) {\n-            cause.label_diagnostic(mir, &mut diag);\n-        }\n-\n         diag.emit();\n     }\n \n@@ -1285,62 +1274,6 @@ impl CauseExt for Rc<Cause> {\n }\n \n impl Cause {\n-    pub(crate) fn label_diagnostic(&self, mir: &Mir<'_>, diag: &mut DiagnosticBuilder<'_>) {\n-        // The cause information is pretty messy. Only dump it as an\n-        // internal debugging aid if -Znll-dump-cause is given.\n-        let nll_dump_cause = ty::tls::with(|tcx| tcx.sess.nll_dump_cause());\n-        if !nll_dump_cause {\n-            return;\n-        }\n-\n-        let mut string = String::new();\n-        self.push_diagnostic_string(mir, &mut string);\n-        diag.note(&string);\n-    }\n-\n-    fn push_diagnostic_string(&self, mir: &Mir<'_>, string: &mut String) {\n-        match self {\n-            Cause::LiveVar(local, location) => {\n-                string.push_str(&format!(\"because `{:?}` is live at {:?}\", local, location));\n-            }\n-\n-            Cause::DropVar(local, location) => {\n-                string.push_str(&format!(\n-                    \"because `{:?}` is dropped at {:?}\",\n-                    local,\n-                    location\n-                ));\n-            }\n-\n-            Cause::LiveOther(location) => {\n-                string.push_str(&format!(\n-                    \"because of a general liveness constraint at {:?}\",\n-                    location\n-                ));\n-            }\n-\n-            Cause::UniversalRegion(region_vid) => {\n-                string.push_str(&format!(\n-                    \"because `{:?}` is universally quantified\",\n-                    region_vid\n-                ));\n-            }\n-\n-            Cause::Outlives {\n-                original_cause,\n-                constraint_location,\n-                constraint_span: _,\n-            } => {\n-                string.push_str(&format!(\n-                    \"because of an outlives relation created at `{:?}`\\n\",\n-                    constraint_location\n-                ));\n-\n-                original_cause.push_diagnostic_string(mir, string);\n-            }\n-        }\n-    }\n-\n     pub(crate) fn root_cause(&self) -> &Cause {\n         match self {\n             Cause::LiveVar(..) |"}]}