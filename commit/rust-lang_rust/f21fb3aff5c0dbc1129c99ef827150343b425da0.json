{"sha": "f21fb3aff5c0dbc1129c99ef827150343b425da0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMWZiM2FmZjVjMGRiYzExMjljOTllZjgyNzE1MDM0M2I0MjVkYTA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-18T00:27:44Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-18T04:41:54Z"}, "message": "rustc: Cleaning up bad copies and other XXXes", "tree": {"sha": "3d8d8e11b4f19425ffb5c259efa3d43d06d8426c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d8d8e11b4f19425ffb5c259efa3d43d06d8426c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f21fb3aff5c0dbc1129c99ef827150343b425da0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f21fb3aff5c0dbc1129c99ef827150343b425da0", "html_url": "https://github.com/rust-lang/rust/commit/f21fb3aff5c0dbc1129c99ef827150343b425da0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f21fb3aff5c0dbc1129c99ef827150343b425da0/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "799d9fa32b0f7c0598e5a0da477b7a817cfc203f", "url": "https://api.github.com/repos/rust-lang/rust/commits/799d9fa32b0f7c0598e5a0da477b7a817cfc203f", "html_url": "https://github.com/rust-lang/rust/commit/799d9fa32b0f7c0598e5a0da477b7a817cfc203f"}], "stats": {"total": 85, "additions": 37, "deletions": 48}, "files": [{"sha": "38f8d271f08b3ab65ce56bb01ffa09a4bc7c030c", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -602,7 +602,7 @@ pub fn GEP(cx: block, Pointer: ValueRef, Indices: &[ValueRef]) -> ValueRef {\n // Simple wrapper around GEP that takes an array of ints and wraps them\n // in C_i32()\n //\n-// XXX: Use a small-vector optimization to avoid allocations here.\n+// FIXME #6571: Use a small-vector optimization to avoid allocations here.\n pub fn GEPi(cx: block, base: ValueRef, ixs: &[uint]) -> ValueRef {\n     let v = do vec::map(ixs) |i| { C_i32(*i as i32) };\n     count_insn(cx, \"gepi\");"}, {"sha": "c6fa42cb8cbd3f8407d90d58174931297b1f775c", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -137,7 +137,7 @@ pub fn mk_tuplified_uniq_cbox_ty(tcx: ty::ctxt, cdata_ty: ty::t) -> ty::t {\n \n // Given a closure ty, emits a corresponding tuple ty\n pub fn mk_closure_tys(tcx: ty::ctxt,\n-                      bound_values: ~[EnvValue])\n+                      bound_values: &[EnvValue])\n                    -> ty::t {\n     // determine the types of the values in the env.  Note that this\n     // is the actual types that will be stored in the map, not the\n@@ -203,8 +203,7 @@ pub fn store_environment(bcx: block,\n     let ccx = bcx.ccx(), tcx = ccx.tcx;\n \n     // compute the shape of the closure\n-    // XXX: Bad copy.\n-    let cdata_ty = mk_closure_tys(tcx, copy bound_values);\n+    let cdata_ty = mk_closure_tys(tcx, bound_values);\n \n     // allocate closure in the heap\n     let Result {bcx: bcx, val: llbox} = allocate_cbox(bcx, sigil, cdata_ty);"}, {"sha": "547b54a6ef50fb186e1bd94086c498cbf41977e0", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -1325,7 +1325,7 @@ pub fn is_null(val: ValueRef) -> bool {\n // Used to identify cached monomorphized functions and vtables\n #[deriving(Eq)]\n pub enum mono_param_id {\n-    mono_precise(ty::t, Option<~[mono_id]>),\n+    mono_precise(ty::t, Option<@~[mono_id]>),\n     mono_any,\n     mono_repr(uint /* size */,\n               uint /* align */,"}, {"sha": "13f02b8fcac1d18f86b027f487dc815b910595d7", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -652,7 +652,7 @@ pub impl Datum {\n                     ByRef => {\n                         // Recast lv.val as a pointer to the newtype rather\n                         // than a pointer to the struct type.\n-                        // XXX: This isn't correct for structs with\n+                        // FIXME #6572: This isn't correct for structs with\n                         // destructors.\n                         (\n                             Some(Datum {"}, {"sha": "3ed08eade33a471df229441e191523164458a480", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -576,7 +576,7 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n             };\n         }\n         ast::expr_struct(_, ref fields, base) => {\n-            return trans_rec_or_struct(bcx, (*fields), base, expr.id, dest);\n+            return trans_rec_or_struct(bcx, (*fields), base, expr.span, expr.id, dest);\n         }\n         ast::expr_tup(ref args) => {\n             let repr = adt::represent_type(bcx.ccx(), expr_ty(bcx, expr));\n@@ -721,7 +721,7 @@ fn trans_def_dps_unadjusted(bcx: block, ref_expr: @ast::expr,\n         }\n         ast::def_struct(*) => {\n             // Nothing to do here.\n-            // XXX: May not be true in the case of classes with destructors.\n+            // FIXME #6572: May not be true in the case of classes with destructors.\n             return bcx;\n         }\n         _ => {\n@@ -1129,6 +1129,7 @@ pub fn with_field_tys<R>(tcx: ty::ctxt,\n fn trans_rec_or_struct(bcx: block,\n                        fields: &[ast::field],\n                        base: Option<@ast::expr>,\n+                       expr_span: codemap::span,\n                        id: ast::node_id,\n                        dest: Dest) -> block\n {\n@@ -1167,8 +1168,7 @@ fn trans_rec_or_struct(bcx: block,\n             }\n             None => {\n                 if need_base.any(|b| *b) {\n-                    // XXX should be span bug\n-                    tcx.sess.bug(~\"missing fields and no base expr\")\n+                    tcx.sess.span_bug(expr_span, ~\"missing fields and no base expr\")\n                 }\n                 None\n             }\n@@ -1232,8 +1232,8 @@ fn trans_adt(bcx: block, repr: &adt::Repr, discr: int,\n         temp_cleanups.push(dest);\n     }\n     for optbase.each |base| {\n-        // XXX is it sound to use the destination's repr on the base?\n-        // XXX would it ever be reasonable to be here with discr != 0?\n+        // FIXME #6573: is it sound to use the destination's repr on the base?\n+        // And, would it ever be reasonable to be here with discr != 0?\n         let base_datum = unpack_datum!(bcx, trans_to_datum(bcx, base.expr));\n         for base.fields.each |&(i, t)| {\n             let datum = do base_datum.get_element(bcx, t, ZeroMem) |srcval| {"}, {"sha": "13d8f854fb20f1cf913e7a4dc7aea7f711a95d15", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -550,14 +550,13 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n \n     let output_type = ty::ty_fn_ret(ty::node_id_to_type(ccx.tcx, item.id));\n \n-    // XXX: Bad copy.\n     let fcx = new_fn_ctxt_w_id(ccx,\n                                path,\n                                decl,\n                                item.id,\n                                output_type,\n                                None,\n-                               Some(copy substs),\n+                               Some(substs),\n                                Some(item.span));\n \n     // Set the fixed stack segment flag if necessary."}, {"sha": "f8aa3eca28476ef33c3a3be0d662f9c8b3ab980b", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -669,7 +669,7 @@ pub fn declare_tydesc(ccx: @CrateContext, t: ty::t) -> @mut tydesc_info {\n     let llsize = llsize_of(ccx, llty);\n     let llalign = llalign_of(ccx, llty);\n     let addrspace = declare_tydesc_addrspace(ccx, t);\n-    //XXX this triggers duplicate LLVM symbols\n+    // FIXME #6574: this triggers duplicate LLVM symbols\n     let name = @(if false /*ccx.sess.opts.debuginfo*/ {\n         mangle_internal_name_by_type_only(ccx, t, \"tydesc\")\n     } else {\n@@ -703,14 +703,13 @@ pub fn declare_generic_glue(ccx: @CrateContext, t: ty::t, llfnty: TypeRef,\n                             name: ~str) -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"declare_generic_glue\");\n     let name = name;\n-    //XXX this triggers duplicate LLVM symbols\n+    // FIXME #6574 this triggers duplicate LLVM symbols\n     let fn_nm = @(if false /*ccx.sess.opts.debuginfo*/ {\n         mangle_internal_name_by_type_only(ccx, t, (~\"glue_\" + name))\n     } else {\n         mangle_internal_name_by_seq(ccx, (~\"glue_\" + name))\n     });\n     debug!(\"%s is for type %s\", *fn_nm, ppaux::ty_to_str(ccx.tcx, t));\n-    // XXX: Bad copy.\n     note_unique_llvm_symbol(ccx, fn_nm);\n     let llfn = decl_cdecl_fn(ccx.llmod, *fn_nm, llfnty);\n     set_glue_inlining(llfn, t);"}, {"sha": "337e2a13b1fde7c29938c4c2f1164fce909dbf3f", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -401,7 +401,7 @@ pub fn method_with_name_or_default(ccx: @CrateContext,\n                       Some(pmis) => {\n                           for pmis.each |pmi| {\n                               if pmi.method_info.ident == name {\n-                                  debug!(\"XXX %?\", pmi.method_info.did);\n+                                  debug!(\"pmi.method_info.did = %?\", pmi.method_info.did);\n                                   return pmi.method_info.did;\n                               }\n                           }\n@@ -734,15 +734,15 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n }\n \n pub fn vtable_id(ccx: @CrateContext,\n-                 origin: typeck::vtable_origin)\n+                 origin: &typeck::vtable_origin)\n               -> mono_id {\n     match origin {\n-        typeck::vtable_static(impl_id, substs, sub_vtables) => {\n+        &typeck::vtable_static(impl_id, ref substs, sub_vtables) => {\n             monomorphize::make_mono_id(\n                 ccx,\n                 impl_id,\n-                substs,\n-                if (*sub_vtables).len() == 0u {\n+                *substs,\n+                if sub_vtables.is_empty() {\n                     None\n                 } else {\n                     Some(sub_vtables)\n@@ -759,8 +759,7 @@ pub fn vtable_id(ccx: @CrateContext,\n pub fn get_vtable(ccx: @CrateContext,\n                   origin: typeck::vtable_origin)\n                -> ValueRef {\n-    // XXX: Bad copy.\n-    let hash_id = vtable_id(ccx, copy origin);\n+    let hash_id = vtable_id(ccx, &origin);\n     match ccx.vtables.find(&hash_id) {\n       Some(&val) => val,\n       None => match origin {"}, {"sha": "40b92d336536c97242e5467ff8d1f4f672c7f84d", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -70,8 +70,7 @@ pub fn monomorphic_fn(ccx: @CrateContext,\n     for real_substs.each() |s| { assert!(!ty::type_has_params(*s)); }\n     for substs.each() |s| { assert!(!ty::type_has_params(*s)); }\n     let param_uses = type_use::type_uses_for(ccx, fn_id, substs.len());\n-    // XXX: Bad copy.\n-    let hash_id = make_mono_id(ccx, fn_id, copy substs, vtables, impl_did_opt,\n+    let hash_id = make_mono_id(ccx, fn_id, substs, vtables, impl_did_opt,\n                                Some(param_uses));\n     if vec::any(hash_id.params,\n                 |p| match *p { mono_precise(_, _) => false, _ => true }) {\n@@ -350,10 +349,10 @@ pub fn make_mono_id(ccx: @CrateContext,\n         vec::map_zip(*item_ty.generics.type_param_defs, substs, |type_param_def, subst| {\n             let mut v = ~[];\n             for type_param_def.bounds.trait_bounds.each |_bound| {\n-                v.push(meth::vtable_id(ccx, /*bad*/copy vts[i]));\n+                v.push(meth::vtable_id(ccx, &vts[i]));\n                 i += 1;\n             }\n-            (*subst, if !v.is_empty() { Some(v) } else { None })\n+            (*subst, if !v.is_empty() { Some(@v) } else { None })\n         })\n       }\n       None => {\n@@ -369,8 +368,7 @@ pub fn make_mono_id(ccx: @CrateContext,\n                 }\n             } else {\n                 match *id {\n-                    // XXX: Bad copy.\n-                    (a, copy b@Some(_)) => mono_precise(a, b),\n+                    (a, b@Some(_)) => mono_precise(a, b),\n                     (subst, None) => {\n                         if *uses == 0 {\n                             mono_any"}, {"sha": "0e82de86bc6dd61c658a0f4d2535f510f470adff", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -84,7 +84,7 @@ pub impl Reflector {\n           self.c_tydesc(mt.ty)]\n     }\n \n-    fn visit(&mut self, ty_name: ~str, args: ~[ValueRef]) {\n+    fn visit(&mut self, ty_name: ~str, args: &[ValueRef]) {\n         let tcx = self.bcx.tcx();\n         let mth_idx = ty::method_idx(\n             tcx.sess.ident_of(~\"visit_\" + ty_name),\n@@ -121,10 +121,9 @@ pub impl Reflector {\n \n     fn bracketed(&mut self,\n                  bracket_name: ~str,\n-                 extra: ~[ValueRef],\n+                 extra: &[ValueRef],\n                  inner: &fn(&mut Reflector)) {\n-        // XXX: Bad copy.\n-        self.visit(~\"enter_\" + bracket_name, copy extra);\n+        self.visit(~\"enter_\" + bracket_name, extra);\n         inner(self);\n         self.visit(~\"leave_\" + bracket_name, extra);\n     }\n@@ -226,7 +225,7 @@ pub impl Reflector {\n                           self.c_uint(sigilval),\n                           self.c_uint(fty.sig.inputs.len()),\n                           self.c_uint(retval)];\n-            self.visit(~\"enter_fn\", copy extra);    // XXX: Bad copy.\n+            self.visit(~\"enter_fn\", extra);\n             self.visit_sig(retval, &fty.sig);\n             self.visit(~\"leave_fn\", extra);\n           }\n@@ -241,7 +240,7 @@ pub impl Reflector {\n                           self.c_uint(sigilval),\n                           self.c_uint(fty.sig.inputs.len()),\n                           self.c_uint(retval)];\n-            self.visit(~\"enter_fn\", copy extra);    // XXX: Bad copy.\n+            self.visit(~\"enter_fn\", extra);\n             self.visit_sig(retval, &fty.sig);\n             self.visit(~\"leave_fn\", extra);\n           }"}, {"sha": "8d5721aeb651249630675d3338dd9c59ef1f82d7", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -45,7 +45,7 @@ pub fn type_of_fn(cx: @CrateContext, inputs: &[ty::t], output: ty::t)\n         if !output_is_immediate {\n             atys.push(T_ptr(lloutputtype));\n         } else {\n-            // XXX: Eliminate this.\n+            // FIXME #6575: Eliminate this.\n             atys.push(T_ptr(T_i8()));\n         }\n \n@@ -200,7 +200,6 @@ pub fn type_of(cx: @CrateContext, t: ty::t) -> TypeRef {\n         return llty;\n     }\n \n-    // XXX: This is a terrible terrible copy.\n     let llty = match ty::get(t).sty {\n       ty::ty_nil | ty::ty_bot => T_nil(),\n       ty::ty_bool => T_bool(),\n@@ -219,7 +218,7 @@ pub fn type_of(cx: @CrateContext, t: ty::t) -> TypeRef {\n         common::T_named_struct(llvm_type_name(cx,\n                                               an_enum,\n                                               did,\n-                                              /*bad*/copy substs.tps))\n+                                              substs.tps))\n       }\n       ty::ty_estr(ty::vstore_box) => {\n         T_box_ptr(T_box(cx, T_vec(cx, T_i8())))\n@@ -280,7 +279,7 @@ pub fn type_of(cx: @CrateContext, t: ty::t) -> TypeRef {\n           T_named_struct(llvm_type_name(cx,\n                                         a_struct,\n                                         did,\n-                                        /*bad*/ copy substs.tps))\n+                                        substs.tps))\n         }\n       }\n       ty::ty_self(*) => cx.tcx.sess.unimpl(~\"type_of: ty_self\"),"}, {"sha": "bb18948ce5d54b02da64651b0e372894e4c50612", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -681,7 +681,6 @@ pub enum type_err {\n     terr_trait_stores_differ(terr_vstore_kind, expected_found<TraitStore>),\n     terr_in_field(@type_err, ast::ident),\n     terr_sorts(expected_found<t>),\n-    terr_self_substs,\n     terr_integer_as_char,\n     terr_int_mismatch(expected_found<IntVarValue>),\n     terr_float_mismatch(expected_found<ast::float_ty>),\n@@ -3722,9 +3721,6 @@ pub fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n                      values.found.user_string(cx))\n             }\n         }\n-        terr_self_substs => {\n-            ~\"inconsistent self substitution\" // XXX this is more of a bug\n-        }\n         terr_integer_as_char => {\n             fmt!(\"expected an integral type but found char\")\n         }"}, {"sha": "7655212d9d64eb565fca9e4fae65f0e7a7aedfa1", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -438,7 +438,7 @@ pub impl<'self> LookupContext<'self> {\n                 return; // inapplicable\n             }\n             ast::sty_region(_) => vstore_slice(r)\n-            ast::sty_box(_) => vstore_box, // XXX NDM mutability\n+            ast::sty_box(_) => vstore_box, // NDM mutability, as per #5762\n             ast::sty_uniq(_) => vstore_uniq\n         }\n         */\n@@ -594,7 +594,7 @@ pub impl<'self> LookupContext<'self> {\n             let method = ty::method(self.tcx(),\n                                     provided_method_info.method_info.did);\n \n-            // XXX: Needs to support generics.\n+            // FIXME #4099 (?) Needs to support generics.\n             let dummy_substs = substs {\n                 self_r: None,\n                 self_ty: None,"}, {"sha": "6e272b9410f49a17acd6ea028d18939a68e30818", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -1817,7 +1817,6 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let mut class_field_map = HashMap::new();\n         let mut fields_found = 0;\n         for field_types.each |field| {\n-            // XXX: Check visibility here.\n             class_field_map.insert(field.ident, (field.id, false));\n         }\n "}, {"sha": "0efecefa3580efe1d48de819a41031bb9d580c2c", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21fb3aff5c0dbc1129c99ef827150343b425da0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=f21fb3aff5c0dbc1129c99ef827150343b425da0", "patch": "@@ -286,7 +286,9 @@ pub fn super_self_tys<C:Combine>(\n         // I think it should never happen that we unify two substs and\n         // one of them has a self_ty and one doesn't...? I could be\n         // wrong about this.\n-        Err(ty::terr_self_substs)\n+          this.infcx().tcx.sess.bug(\n+              fmt!(\"substitution a had a self_ty and substitution b didn't, \\\n+                    or vice versa\"));\n       }\n     }\n }"}]}