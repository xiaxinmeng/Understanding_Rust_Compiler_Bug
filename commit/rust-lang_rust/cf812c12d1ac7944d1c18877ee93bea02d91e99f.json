{"sha": "cf812c12d1ac7944d1c18877ee93bea02d91e99f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmODEyYzEyZDFhYzc5NDRkMWMxODg3N2VlOTNiZWEwMmQ5MWU5OWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T15:58:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T16:12:02Z"}, "message": "Assists are not generic", "tree": {"sha": "71e13733941e2c0520cfe5d16fb00f428f3233da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71e13733941e2c0520cfe5d16fb00f428f3233da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf812c12d1ac7944d1c18877ee93bea02d91e99f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf812c12d1ac7944d1c18877ee93bea02d91e99f", "html_url": "https://github.com/rust-lang/rust/commit/cf812c12d1ac7944d1c18877ee93bea02d91e99f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf812c12d1ac7944d1c18877ee93bea02d91e99f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8965ffafd5cf467b3f0482ca962ba2bfd090161", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8965ffafd5cf467b3f0482ca962ba2bfd090161", "html_url": "https://github.com/rust-lang/rust/commit/f8965ffafd5cf467b3f0482ca962ba2bfd090161"}], "stats": {"total": 143, "additions": 59, "deletions": 84}, "files": [{"sha": "f32072dbdb6097f370ccfc0ddf70a4636a2d35ee", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,6 +1,6 @@\n //! This module defines `AssistCtx` -- the API surface that is exposed to assists.\n use either::Either;\n-use hir::{db::HirDatabase, InFile, SourceAnalyzer, SourceBinder};\n+use hir::{InFile, SourceAnalyzer, SourceBinder};\n use ra_db::{FileRange, SourceDatabase};\n use ra_fmt::{leading_indent, reindent};\n use ra_ide_db::RootDatabase;\n@@ -50,14 +50,14 @@ pub(crate) enum Assist {\n /// moment, because the LSP API is pretty awkward in this place, and it's much\n /// easier to just compute the edit eagerly :-)\n #[derive(Debug)]\n-pub(crate) struct AssistCtx<'a, DB> {\n-    pub(crate) db: &'a DB,\n+pub(crate) struct AssistCtx<'a> {\n+    pub(crate) db: &'a RootDatabase,\n     pub(crate) frange: FileRange,\n     source_file: SourceFile,\n     should_compute_edit: bool,\n }\n \n-impl<'a, DB> Clone for AssistCtx<'a, DB> {\n+impl<'a> Clone for AssistCtx<'a> {\n     fn clone(&self) -> Self {\n         AssistCtx {\n             db: self.db,\n@@ -68,15 +68,15 @@ impl<'a, DB> Clone for AssistCtx<'a, DB> {\n     }\n }\n \n-impl<'a> AssistCtx<'a, RootDatabase> {\n+impl<'a> AssistCtx<'a> {\n     pub(crate) fn with_ctx<F, T>(\n         db: &RootDatabase,\n         frange: FileRange,\n         should_compute_edit: bool,\n         f: F,\n     ) -> T\n     where\n-        F: FnOnce(AssistCtx<RootDatabase>) -> T,\n+        F: FnOnce(AssistCtx) -> T,\n     {\n         let parse = db.parse(frange.file_id);\n \n@@ -85,7 +85,7 @@ impl<'a> AssistCtx<'a, RootDatabase> {\n     }\n }\n \n-impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n+impl<'a> AssistCtx<'a> {\n     pub(crate) fn add_assist(\n         self,\n         id: AssistId,\n@@ -149,7 +149,7 @@ impl<'a, DB: HirDatabase> AssistCtx<'a, DB> {\n     pub(crate) fn covering_element(&self) -> SyntaxElement {\n         find_covering_element(self.source_file.syntax(), self.frange.range)\n     }\n-    pub(crate) fn source_binder(&self) -> SourceBinder<'a, DB> {\n+    pub(crate) fn source_binder(&self) -> SourceBinder<'a, RootDatabase> {\n         SourceBinder::new(self.db)\n     }\n     pub(crate) fn source_analyzer("}, {"sha": "7fdd816bf82e9af08f0542ab2e94d8bef7b31679", "filename": "crates/ra_assists/src/assists/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use crate::{Assist, AssistCtx, AssistId};\n-use hir::db::HirDatabase;\n+\n use join_to_string::join;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -29,7 +29,7 @@ const DERIVE_TRAIT: &str = \"derive\";\n //\n // }\n // ```\n-pub(crate) fn add_custom_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n     let input = ctx.find_node_at_offset::<ast::AttrInput>()?;\n     let attr = input.syntax().parent().and_then(ast::Attr::cast)?;\n "}, {"sha": "b0d1a0a80dbafde6aafe55d2073a147a4c5b0dc5", "filename": "crates/ra_assists/src/assists/add_derive.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_derive.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner},\n     SyntaxKind::{COMMENT, WHITESPACE},\n@@ -25,7 +24,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     y: u32,\n // }\n // ```\n-pub(crate) fn add_derive(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_derive(ctx: AssistCtx) -> Option<Assist> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let node_start = derive_insertion_offset(&nominal)?;\n     ctx.add_assist(AssistId(\"add_derive\"), \"Add `#[derive]`\", |edit| {"}, {"sha": "2cb9d2f48ebf4e0b5527e0767b338a711641f896", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,4 @@\n-use hir::{db::HirDatabase, HirDisplay};\n+use hir::HirDisplay;\n use ra_syntax::{\n     ast::{self, AstNode, LetStmt, NameOwner, TypeAscriptionOwner},\n     TextRange,\n@@ -21,7 +21,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     let x: i32 = 92;\n // }\n // ```\n-pub(crate) fn add_explicit_type(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_explicit_type(ctx: AssistCtx) -> Option<Assist> {\n     let stmt = ctx.find_node_at_offset::<LetStmt>()?;\n     let expr = stmt.initializer()?;\n     let pat = stmt.pat()?;"}, {"sha": "241b085fd2265648c6e098ea26d94b8e90c3bf55", "filename": "crates/ra_assists/src/assists/add_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_impl.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,5 +1,5 @@\n use format_buf::format;\n-use hir::db::HirDatabase;\n+\n use join_to_string::join;\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner, TypeParamsOwner},\n@@ -27,7 +27,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //\n // }\n // ```\n-pub(crate) fn add_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_impl(ctx: AssistCtx) -> Option<Assist> {\n     let nominal = ctx.find_node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n     ctx.add_assist(AssistId(\"add_impl\"), format!(\"Implement {}\", name.text().as_str()), |edit| {"}, {"sha": "f03dddac8fcf8355692e5b626b0d02f51384023e", "filename": "crates/ra_assists/src/assists/add_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,4 @@\n-use hir::{self, db::HirDatabase, ModPath};\n+use hir::{self, ModPath};\n use ra_syntax::{\n     ast::{self, NameOwner},\n     AstNode, Direction, SmolStr,\n@@ -50,7 +50,7 @@ pub fn auto_import_text_edit(\n //\n // fn process(map: HashMap<String, String>) {}\n // ```\n-pub(crate) fn add_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_import(ctx: AssistCtx) -> Option<Assist> {\n     let path: ast::Path = ctx.find_node_at_offset()?;\n     // We don't want to mess with use statements\n     if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {"}, {"sha": "448697d3151749f9d5c98eb33744373a8206a939", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -43,7 +43,7 @@ enum AddMissingImplMembersMode {\n //\n // }\n // ```\n-pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_missing_impl_members(ctx: AssistCtx) -> Option<Assist> {\n     add_missing_impl_members_inner(\n         ctx,\n         AddMissingImplMembersMode::NoDefaultMethods,\n@@ -84,7 +84,7 @@ pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Opti\n //\n // }\n // ```\n-pub(crate) fn add_missing_default_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_missing_default_members(ctx: AssistCtx) -> Option<Assist> {\n     add_missing_impl_members_inner(\n         ctx,\n         AddMissingImplMembersMode::DefaultMethodsOnly,\n@@ -94,7 +94,7 @@ pub(crate) fn add_missing_default_members(ctx: AssistCtx<impl HirDatabase>) -> O\n }\n \n fn add_missing_impl_members_inner(\n-    ctx: AssistCtx<impl HirDatabase>,\n+    ctx: AssistCtx,\n     mode: AddMissingImplMembersMode,\n     assist_id: &'static str,\n     label: &'static str,"}, {"sha": "a08639311f4be5b941b01fa93d3e330b6902c4af", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,5 +1,5 @@\n use format_buf::format;\n-use hir::{db::HirDatabase, InFile};\n+use hir::InFile;\n use join_to_string::join;\n use ra_syntax::{\n     ast::{\n@@ -31,7 +31,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n //\n // ```\n-pub(crate) fn add_new(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_new(ctx: AssistCtx) -> Option<Assist> {\n     let strukt = ctx.find_node_at_offset::<ast::StructDef>()?;\n \n     // We want to only apply this to non-union structs with named fields\n@@ -128,10 +128,7 @@ fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n //\n // FIXME: change the new fn checking to a more semantic approach when that's more\n // viable (e.g. we process proc macros, etc)\n-fn find_struct_impl(\n-    ctx: &AssistCtx<impl HirDatabase>,\n-    strukt: &ast::StructDef,\n-) -> Option<Option<ast::ImplBlock>> {\n+fn find_struct_impl(ctx: &AssistCtx, strukt: &ast::StructDef) -> Option<Option<ast::ImplBlock>> {\n     let db = ctx.db;\n     let module = strukt.syntax().ancestors().find(|node| {\n         ast::Module::can_cast(node.kind()) || ast::SourceFile::can_cast(node.kind())"}, {"sha": "dac6280ad82a00c4d838e4c0d66f7689f35a3ae6", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,5 +1,4 @@\n use super::invert_if::invert_boolean_expression;\n-use hir::db::HirDatabase;\n use ra_syntax::ast::{self, AstNode};\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -23,7 +22,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     if !(x == 4 && y) {}\n // }\n // ```\n-pub(crate) fn apply_demorgan(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn apply_demorgan(ctx: AssistCtx) -> Option<Assist> {\n     let expr = ctx.find_node_at_offset::<ast::BinExpr>()?;\n     let op = expr.op_kind()?;\n     let op_range = expr.op_token()?.text_range();"}, {"sha": "48ab336b1a225e74ad2e317b2cfbf2fee04cb5e4", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,4 @@\n-use hir::{db::HirDatabase, ModPath};\n+use hir::ModPath;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxNode,\n@@ -27,7 +27,7 @@ use crate::{\n // }\n // ```\n pub(crate) fn auto_import<F: ImportsLocator>(\n-    ctx: AssistCtx<impl HirDatabase>,\n+    ctx: AssistCtx,\n     imports_locator: &mut F,\n ) -> Option<Assist> {\n     let path_to_import: ast::Path = ctx.find_node_at_offset()?;"}, {"sha": "f325b6f9225bf92290255b228bbee215d76ed932", "filename": "crates/ra_assists/src/assists/change_visibility.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, NameOwner, VisibilityOwner},\n     AstNode,\n@@ -22,14 +21,14 @@ use crate::{Assist, AssistCtx, AssistId};\n // ```\n // pub(crate) fn frobnicate() {}\n // ```\n-pub(crate) fn change_visibility(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn change_visibility(ctx: AssistCtx) -> Option<Assist> {\n     if let Some(vis) = ctx.find_node_at_offset::<ast::Visibility>() {\n         return change_vis(ctx, vis);\n     }\n     add_vis(ctx)\n }\n \n-fn add_vis(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+fn add_vis(ctx: AssistCtx) -> Option<Assist> {\n     let item_keyword = ctx.token_at_offset().find(|leaf| match leaf.kind() {\n         T![fn] | T![mod] | T![struct] | T![enum] | T![trait] => true,\n         _ => false,\n@@ -75,7 +74,7 @@ fn vis_offset(node: &SyntaxNode) -> TextUnit {\n         .unwrap_or_else(|| node.text_range().start())\n }\n \n-fn change_vis(ctx: AssistCtx<impl HirDatabase>, vis: ast::Visibility) -> Option<Assist> {\n+fn change_vis(ctx: AssistCtx, vis: ast::Visibility) -> Option<Assist> {\n     if vis.syntax().text() == \"pub\" {\n         return ctx.add_assist(\n             AssistId(\"change_visibility\"),"}, {"sha": "7d510b05526e0ca38492d1bbe426e17d7e48a803", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,6 +1,5 @@\n use std::{iter::once, ops::RangeInclusive};\n \n-use hir::db::HirDatabase;\n use ra_syntax::{\n     algo::replace_children,\n     ast::{self, edit::IndentLevel, make, Block, Pat::TupleStructPat},\n@@ -36,7 +35,7 @@ use crate::{\n //     bar();\n // }\n // ```\n-pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn convert_to_guarded_return(ctx: AssistCtx) -> Option<Assist> {\n     let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n     if if_expr.else_branch().is_some() {\n         return None;"}, {"sha": "0908fc2469f70217e28d1ff3f7f5f708048cbbea", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -31,7 +31,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     }\n // }\n // ```\n-pub(crate) fn fill_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn fill_match_arms(ctx: AssistCtx) -> Option<Assist> {\n     let match_expr = ctx.find_node_at_offset::<ast::MatchExpr>()?;\n     let match_arm_list = match_expr.match_arm_list()?;\n "}, {"sha": "bfcc09e909779d08a9b5ff6578182e80a45e0d60", "filename": "crates/ra_assists/src/assists/flip_binexpr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::ast::{AstNode, BinExpr, BinOp};\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -18,7 +17,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     let _ = 2 + 90;\n // }\n // ```\n-pub(crate) fn flip_binexpr(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn flip_binexpr(ctx: AssistCtx) -> Option<Assist> {\n     let expr = ctx.find_node_at_offset::<BinExpr>()?;\n     let lhs = expr.lhs()?.syntax().clone();\n     let rhs = expr.rhs()?.syntax().clone();"}, {"sha": "1dacf29f834280f3f0c0197a21a76ad94cdf4c57", "filename": "crates/ra_assists/src/assists/flip_comma.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{algo::non_trivia_sibling, Direction, T};\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -18,7 +17,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     ((3, 4), (1, 2));\n // }\n // ```\n-pub(crate) fn flip_comma(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn flip_comma(ctx: AssistCtx) -> Option<Assist> {\n     let comma = ctx.find_token_at_offset(T![,])?;\n     let prev = non_trivia_sibling(comma.clone().into(), Direction::Prev)?;\n     let next = non_trivia_sibling(comma.clone().into(), Direction::Next)?;"}, {"sha": "f56769624e7fcaf70b628648f77f7df47dff078f", "filename": "crates/ra_assists/src/assists/flip_trait_bound.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     algo::non_trivia_sibling,\n     ast::{self, AstNode},\n@@ -18,7 +17,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // ```\n // fn foo<T: Copy + Clone>() { }\n // ```\n-pub(crate) fn flip_trait_bound(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn flip_trait_bound(ctx: AssistCtx) -> Option<Assist> {\n     // We want to replicate the behavior of `flip_binexpr` by only suggesting\n     // the assist when the cursor is on a `+`\n     let plus = ctx.find_token_at_offset(T![+])?;"}, {"sha": "91b588243eb4f40ec82f71bc19b2f219639337a5", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AstToken},\n     TextRange,\n@@ -23,7 +22,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     (1 + 2) * 4;\n // }\n // ```\n-pub(crate) fn inline_local_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n     let let_stmt = ctx.find_node_at_offset::<ast::LetStmt>()?;\n     let bind_pat = match let_stmt.pat()? {\n         ast::Pat::BindPat(pat) => pat,"}, {"sha": "7312ce6871e0e64ad54200a597c6c1aa8656b922", "filename": "crates/ra_assists/src/assists/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,5 +1,4 @@\n use format_buf::format;\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxKind::{\n@@ -28,7 +27,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     var_name * 4;\n // }\n // ```\n-pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn introduce_variable(ctx: AssistCtx) -> Option<Assist> {\n     if ctx.frange.range.is_empty() {\n         return None;\n     }"}, {"sha": "694c3642c8d39949f26b3d85ebcc87426014ab3d", "filename": "crates/ra_assists/src/assists/invert_if.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::ast::{self, AstNode};\n use ra_syntax::T;\n \n@@ -23,7 +22,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // }\n // ```\n \n-pub(crate) fn invert_if(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn invert_if(ctx: AssistCtx) -> Option<Assist> {\n     let if_keyword = ctx.find_token_at_offset(T![if])?;\n     let expr = ast::IfExpr::cast(if_keyword.parent())?;\n     let if_range = if_keyword.text_range();"}, {"sha": "670614dd83df1b7aee8a717f62d30e0a3f5d3300", "filename": "crates/ra_assists/src/assists/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,6 +1,5 @@\n use std::iter::successors;\n \n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n     Direction, TextUnit,\n@@ -32,7 +31,7 @@ use crate::{Assist, AssistCtx, AssistId, TextRange};\n //     }\n // }\n // ```\n-pub(crate) fn merge_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn merge_match_arms(ctx: AssistCtx) -> Option<Assist> {\n     let current_arm = ctx.find_node_at_offset::<ast::MatchArm>()?;\n     // Don't try to handle arms with guards for now - can add support for this later\n     if current_arm.guard().is_some() {"}, {"sha": "90793b5fc3a16fbb89d593f3f7fc9267be7d6e85", "filename": "crates/ra_assists/src/assists/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, edit, make, AstNode, NameOwner, TypeBoundsOwner},\n     SyntaxElement,\n@@ -22,7 +21,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     f(x)\n // }\n // ```\n-pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx) -> Option<Assist> {\n     let type_param_list = ctx.find_node_at_offset::<ast::TypeParamList>()?;\n \n     let mut type_params = type_param_list.type_params();"}, {"sha": "2b91ce7c4dc7836a9491f79da4419e2a4597900f", "filename": "crates/ra_assists/src/assists/move_guard.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast,\n     ast::{AstNode, AstToken, IfExpr, MatchArm},\n@@ -32,7 +31,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     }\n // }\n // ```\n-pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx) -> Option<Assist> {\n     let match_arm = ctx.find_node_at_offset::<MatchArm>()?;\n     let guard = match_arm.guard()?;\n     let space_before_guard = guard.syntax().prev_sibling_or_token();\n@@ -89,7 +88,7 @@ pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx<impl HirDatabase>) -> Option\n //     }\n // }\n // ```\n-pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx) -> Option<Assist> {\n     let match_arm: MatchArm = ctx.find_node_at_offset::<MatchArm>()?;\n     let last_match_pat = match_arm.pats().last()?;\n "}, {"sha": "2c0a1e12656de1b191ccdeb2358c10d780310d70", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast, AstToken,\n     SyntaxKind::{RAW_STRING, STRING},\n@@ -22,7 +21,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     r#\"Hello, World!\"#;\n // }\n // ```\n-pub(crate) fn make_raw_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn make_raw_string(ctx: AssistCtx) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(STRING).and_then(ast::String::cast)?;\n     let value = token.value()?;\n     ctx.add_assist(AssistId(\"make_raw_string\"), \"Rewrite as raw string\", |edit| {\n@@ -51,7 +50,7 @@ pub(crate) fn make_raw_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n //     \"Hello, \\\"World!\\\"\";\n // }\n // ```\n-pub(crate) fn make_usual_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn make_usual_string(ctx: AssistCtx) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING).and_then(ast::RawString::cast)?;\n     let value = token.value()?;\n     ctx.add_assist(AssistId(\"make_usual_string\"), \"Rewrite as regular string\", |edit| {\n@@ -77,7 +76,7 @@ pub(crate) fn make_usual_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n //     r##\"Hello, World!\"##;\n // }\n // ```\n-pub(crate) fn add_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn add_hash(ctx: AssistCtx) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     ctx.add_assist(AssistId(\"add_hash\"), \"Add # to raw string\", |edit| {\n         edit.target(token.text_range());\n@@ -101,7 +100,7 @@ pub(crate) fn add_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n //     r\"Hello, World!\";\n // }\n // ```\n-pub(crate) fn remove_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn remove_hash(ctx: AssistCtx) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n     let text = token.text().as_str();\n     if text.starts_with(\"r\\\"\") {"}, {"sha": "5085649b42aaa05652f1cb76616d48c97f62db9f", "filename": "crates/ra_assists/src/assists/remove_dbg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fremove_dbg.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n     TextUnit, T,\n@@ -21,7 +20,7 @@ use crate::{Assist, AssistCtx, AssistId};\n //     92;\n // }\n // ```\n-pub(crate) fn remove_dbg(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn remove_dbg(ctx: AssistCtx) -> Option<Assist> {\n     let macro_call = ctx.find_node_at_offset::<ast::MacroCall>()?;\n \n     if !is_valid_macrocall(&macro_call, \"dbg\")? {"}, {"sha": "e6cd50bc1236ae3b6d6219b181442f0b7f61011f", "filename": "crates/ra_assists/src/assists/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,4 +1,3 @@\n-use hir::db::HirDatabase;\n use ra_fmt::unwrap_trivial_block;\n use ra_syntax::{\n     ast::{self, make},\n@@ -34,7 +33,7 @@ use ast::edit::IndentLevel;\n //     }\n // }\n // ```\n-pub(crate) fn replace_if_let_with_match(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n     let if_expr: ast::IfExpr = ctx.find_node_at_offset()?;\n     let cond = if_expr.condition()?;\n     let pat = cond.pat()?;"}, {"sha": "2c3f07a79dff4489727dc4da325988a992f682f4", "filename": "crates/ra_assists/src/assists/split_import.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -1,6 +1,5 @@\n use std::iter::successors;\n \n-use hir::db::HirDatabase;\n use ra_syntax::{ast, AstNode, TextUnit, T};\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -16,7 +15,7 @@ use crate::{Assist, AssistCtx, AssistId};\n // ```\n // use std::{collections::HashMap};\n // ```\n-pub(crate) fn split_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+pub(crate) fn split_import(ctx: AssistCtx) -> Option<Assist> {\n     let colon_colon = ctx.find_token_at_offset(T![::])?;\n     let path = ast::Path::cast(colon_colon.parent())?;\n     let top_path = successors(Some(path), |it| it.parent_path()).last()?;"}, {"sha": "ad8438b6caf8b05740f8f1be297fe6bcffb68199", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf812c12d1ac7944d1c18877ee93bea02d91e99f/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=cf812c12d1ac7944d1c18877ee93bea02d91e99f", "patch": "@@ -148,7 +148,6 @@ fn sort_assists(assists: &mut Vec<ResolvedAssist>) {\n \n mod assists {\n     use crate::{Assist, AssistCtx, ImportsLocator};\n-    use hir::db::HirDatabase;\n \n     mod add_derive;\n     mod add_explicit_type;\n@@ -176,7 +175,7 @@ mod assists {\n     mod move_bounds;\n     mod early_return;\n \n-    pub(crate) fn all<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assist>] {\n+    pub(crate) fn all() -> &'static [fn(AssistCtx) -> Option<Assist>] {\n         &[\n             add_derive::add_derive,\n             add_explicit_type::add_explicit_type,\n@@ -210,8 +209,8 @@ mod assists {\n         ]\n     }\n \n-    pub(crate) fn all_with_imports_locator<'a, DB: HirDatabase, F: ImportsLocator>(\n-    ) -> &'a [fn(AssistCtx<DB>, &mut F) -> Option<Assist>] {\n+    pub(crate) fn all_with_imports_locator<'a, F: ImportsLocator>(\n+    ) -> &'a [fn(AssistCtx, &mut F) -> Option<Assist>] {\n         &[auto_import::auto_import]\n     }\n }\n@@ -274,11 +273,7 @@ mod helpers {\n         }\n     }\n \n-    pub(crate) fn check_assist(\n-        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n-        before: &str,\n-        after: &str,\n-    ) {\n+    pub(crate) fn check_assist(assist: fn(AssistCtx) -> Option<Assist>, before: &str, after: &str) {\n         let (before_cursor_pos, before) = extract_offset(before);\n         let (db, file_id) = RootDatabase::with_single_file(&before);\n         let frange =\n@@ -303,7 +298,7 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_with_imports_locator<F: ImportsLocator>(\n-        assist: fn(AssistCtx<RootDatabase>, &mut F) -> Option<Assist>,\n+        assist: fn(AssistCtx, &mut F) -> Option<Assist>,\n         imports_locator_provider: fn(db: Arc<RootDatabase>, file_id: FileId) -> F,\n         before: &str,\n         after: &str,\n@@ -335,7 +330,7 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_range(\n-        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n+        assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,\n         after: &str,\n     ) {\n@@ -357,7 +352,7 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_target(\n-        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n+        assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,\n         target: &str,\n     ) {\n@@ -377,7 +372,7 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_range_target(\n-        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n+        assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,\n         target: &str,\n     ) {\n@@ -396,7 +391,7 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_not_applicable(\n-        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n+        assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n@@ -408,7 +403,7 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_with_imports_locator_not_applicable<F: ImportsLocator>(\n-        assist: fn(AssistCtx<RootDatabase>, &mut F) -> Option<Assist>,\n+        assist: fn(AssistCtx, &mut F) -> Option<Assist>,\n         imports_locator_provider: fn(db: Arc<RootDatabase>, file_id: FileId) -> F,\n         before: &str,\n     ) {\n@@ -424,7 +419,7 @@ mod helpers {\n     }\n \n     pub(crate) fn check_assist_range_not_applicable(\n-        assist: fn(AssistCtx<RootDatabase>) -> Option<Assist>,\n+        assist: fn(AssistCtx) -> Option<Assist>,\n         before: &str,\n     ) {\n         let (range, before) = extract_range(before);"}]}