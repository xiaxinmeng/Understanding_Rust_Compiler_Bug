{"sha": "0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70", "node_id": "C_kwDOAAsO6NoAKDBiZjBkOTM3YjgzZmZhOGRiNzBjN2ZiOWQ3YTA5MzViYzU2ZjNiNzA", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-01-31T16:53:38Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-01-31T16:53:38Z"}, "message": "unsize cast array only on pointer type", "tree": {"sha": "b9bac6073c237a7ac8cc447941e5ff9df6f3ef8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9bac6073c237a7ac8cc447941e5ff9df6f3ef8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70", "html_url": "https://github.com/rust-lang/rust/commit/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fcef7fdd3ac25c41aa4f92525debec1a1662a76", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fcef7fdd3ac25c41aa4f92525debec1a1662a76", "html_url": "https://github.com/rust-lang/rust/commit/0fcef7fdd3ac25c41aa4f92525debec1a1662a76"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "58744dd0c0f9858176d9ee1d2b4e05479611bf74", "filename": "crates/hir-ty/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fautoderef.rs?ref=0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70", "patch": "@@ -17,11 +17,13 @@ use crate::{\n \n static AUTODEREF_RECURSION_LIMIT: Limit = Limit::new(10);\n \n+#[derive(Debug)]\n pub(crate) enum AutoderefKind {\n     Builtin,\n     Overloaded,\n }\n \n+#[derive(Debug)]\n pub(crate) struct Autoderef<'a, 'db> {\n     pub(crate) table: &'a mut InferenceTable<'db>,\n     ty: Ty,"}, {"sha": "8c7714b9a697b2315fd67b4e3c5d3b3a47f5f489", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70", "patch": "@@ -5,7 +5,7 @@\n use std::{ops::ControlFlow, sync::Arc};\n \n use base_db::{CrateId, Edition};\n-use chalk_ir::{cast::Cast, Mutability, UniverseIndex};\n+use chalk_ir::{cast::Cast, Mutability, TyKind, UniverseIndex};\n use hir_def::{\n     data::ImplData, item_scope::ItemScope, lang_item::LangItem, nameres::DefMap, AssocItemId,\n     BlockId, ConstId, FunctionId, HasModule, ImplId, ItemContainerId, Lookup, ModuleDefId,\n@@ -25,7 +25,7 @@ use crate::{\n     static_lifetime, to_chalk_trait_id,\n     utils::all_super_traits,\n     AdtId, Canonical, CanonicalVarKinds, DebruijnIndex, ForeignDefId, InEnvironment, Interner,\n-    Scalar, Substitution, TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyExt, TyKind,\n+    Scalar, Substitution, TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyExt,\n };\n \n /// This is used as a key for indexing impls.\n@@ -588,25 +588,31 @@ impl ReceiverAdjustments {\n                 }\n             }\n         }\n+        if let Some(m) = self.autoref {\n+            ty = TyKind::Ref(m, static_lifetime(), ty).intern(Interner);\n+            adjust\n+                .push(Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(m)), target: ty.clone() });\n+        }\n         if self.unsize_array {\n-            ty = match ty.kind(Interner) {\n-                TyKind::Array(inner, _) => TyKind::Slice(inner.clone()).intern(Interner),\n-                _ => {\n-                    never!(\"unsize_array with non-array {:?}\", ty);\n-                    ty\n+            ty = 'x: {\n+                if let TyKind::Ref(m, l, inner) = ty.kind(Interner) {\n+                    if let TyKind::Array(inner, _) = inner.kind(Interner) {\n+                        break 'x TyKind::Ref(\n+                            m.clone(),\n+                            l.clone(),\n+                            TyKind::Slice(inner.clone()).intern(Interner),\n+                        )\n+                        .intern(Interner);\n+                    }\n                 }\n+                never!(\"unsize_array with non-reference-to-array {:?}\", ty);\n+                ty\n             };\n-            // FIXME this is kind of wrong since the unsize needs to happen to a pointer/reference\n             adjust.push(Adjustment {\n                 kind: Adjust::Pointer(PointerCast::Unsize),\n                 target: ty.clone(),\n             });\n         }\n-        if let Some(m) = self.autoref {\n-            ty = TyKind::Ref(m, static_lifetime(), ty).intern(Interner);\n-            adjust\n-                .push(Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(m)), target: ty.clone() });\n-        }\n         (ty, adjust)\n     }\n "}, {"sha": "42fb685abf907ac6c677f0fd920bb39c0023e513", "filename": "crates/hir-ty/src/tests/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70", "patch": "@@ -1725,14 +1725,13 @@ fn test() {\n \n #[test]\n fn receiver_adjustment_unsize_array() {\n-    // FIXME not quite correct\n     check(\n         r#\"\n //- minicore: slice\n fn test() {\n     let a = [1, 2, 3];\n     a.len();\n-} //^ adjustments: Pointer(Unsize), Borrow(Ref(Not))\n+} //^ adjustments: Borrow(Ref(Not)), Pointer(Unsize)\n \"#,\n     );\n }"}, {"sha": "5634bafd062f294ce4dd9221285ba3d1ed62b3ff", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=0bf0d937b83ffa8db70c7fb9d7a0935bc56f3b70", "patch": "@@ -273,6 +273,24 @@ pub mod ops {\n             }\n         }\n \n+        impl<T, I, const N: usize> Index<I> for [T; N]\n+        where\n+            I: SliceIndex<[T]>,\n+        {\n+            type Output = I::Output;\n+            fn index(&self, index: I) -> &I::Output {\n+                loop {}\n+            }\n+        }\n+        impl<T, I, const N: usize> IndexMut<I> for [T; N]\n+        where\n+            I: SliceIndex<[T]>,\n+        {\n+            fn index_mut(&mut self, index: I) -> &mut I::Output {\n+                loop {}\n+            }\n+        }\n+\n         pub unsafe trait SliceIndex<T: ?Sized> {\n             type Output: ?Sized;\n         }"}]}