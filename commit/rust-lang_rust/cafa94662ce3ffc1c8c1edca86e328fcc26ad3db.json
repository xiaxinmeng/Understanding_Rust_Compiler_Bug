{"sha": "cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZmE5NDY2MmNlM2ZmYzFjOGMxZWRjYTg2ZTMyOGZjYzI2YWQzZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-20T12:51:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-20T12:51:28Z"}, "message": "Auto merge of #5582 - vtmargaryan:match_wildcard_for_single_variants, r=flip1995\n\nNew lint: `match_wildcard_for_single_variants`\n\nchangelog: Added a new lint match_wildcard_for_single_variants to warn on enum matches where a wildcard is used to match a single variant\n\nCloses #5556", "tree": {"sha": "b5326dbb19148d0e9e9fabfc4656f23225cb0dba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5326dbb19148d0e9e9fabfc4656f23225cb0dba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "html_url": "https://github.com/rust-lang/rust/commit/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34ba597ccb92e290c9385d6bc891d06963f974f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/34ba597ccb92e290c9385d6bc891d06963f974f6", "html_url": "https://github.com/rust-lang/rust/commit/34ba597ccb92e290c9385d6bc891d06963f974f6"}, {"sha": "d90625385e8ed0a9030e3ab2ea0990fce39c28bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d90625385e8ed0a9030e3ab2ea0990fce39c28bf", "html_url": "https://github.com/rust-lang/rust/commit/d90625385e8ed0a9030e3ab2ea0990fce39c28bf"}], "stats": {"total": 238, "additions": 227, "deletions": 11}, "files": [{"sha": "2ac9057199ff33ff2f451a31900efe89b207c3ab", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -1439,6 +1439,7 @@ Released 2018-09-13\n [`match_same_arms`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms\n [`match_single_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_single_binding\n [`match_wild_err_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wild_err_arm\n+[`match_wildcard_for_single_variants`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants\n [`maybe_infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#maybe_infinite_iter\n [`mem_discriminant_non_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_discriminant_non_enum\n [`mem_forget`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_forget"}, {"sha": "4c604cd01075e66f783ce87beb7a7f062a82dd19", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatLiteral {\n                 let type_suffix = match lit_float_ty {\n                     LitFloatType::Suffixed(FloatTy::F32) => Some(\"f32\"),\n                     LitFloatType::Suffixed(FloatTy::F64) => Some(\"f64\"),\n-                    _ => None\n+                    LitFloatType::Unsuffixed => None\n                 };\n                 let (is_whole, mut float_str) = match fty {\n                     FloatTy::F32 => {"}, {"sha": "4d4fff883b3e2382c31bb6b9654cf660c3ee784c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -638,6 +638,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &matches::MATCH_OVERLAPPING_ARM,\n         &matches::MATCH_REF_PATS,\n         &matches::MATCH_SINGLE_BINDING,\n+        &matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n         &matches::MATCH_WILD_ERR_ARM,\n         &matches::REST_PAT_IN_FULLY_BOUND_STRUCTS,\n         &matches::SINGLE_MATCH,\n@@ -1139,6 +1140,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&macro_use::MACRO_USE_IMPORTS),\n         LintId::of(&match_on_vec_items::MATCH_ON_VEC_ITEMS),\n         LintId::of(&matches::MATCH_BOOL),\n+        LintId::of(&matches::MATCH_WILDCARD_FOR_SINGLE_VARIANTS),\n         LintId::of(&matches::SINGLE_MATCH_ELSE),\n         LintId::of(&methods::FILTER_MAP),\n         LintId::of(&methods::FILTER_MAP_NEXT),"}, {"sha": "4106e5013b947cc5d3a676c18c1cbd29e90f7d6c", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 64, "deletions": 4, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -220,7 +220,7 @@ declare_clippy_lint! {\n     /// # enum Foo { A(usize), B(usize) }\n     /// # let x = Foo::B(1);\n     /// match x {\n-    ///     A => {},\n+    ///     Foo::A(_) => {},\n     ///     _ => {},\n     /// }\n     /// ```\n@@ -229,6 +229,40 @@ declare_clippy_lint! {\n     \"a wildcard enum match arm using `_`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for wildcard enum matches for a single variant.\n+    ///\n+    /// **Why is this bad?** New enum variants added by library updates can be missed.\n+    ///\n+    /// **Known problems:** Suggested replacements may not use correct path to enum\n+    /// if it's not present in the current scope.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// # enum Foo { A, B, C }\n+    /// # let x = Foo::B;\n+    /// match x {\n+    ///     Foo::A => {},\n+    ///     Foo::B => {},\n+    ///     _ => {},\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # enum Foo { A, B, C }\n+    /// # let x = Foo::B;\n+    /// match x {\n+    ///     Foo::A => {},\n+    ///     Foo::B => {},\n+    ///     Foo::C => {},\n+    /// }\n+    /// ```\n+    pub MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n+    pedantic,\n+    \"a wildcard enum match for a single variant\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for wildcard pattern used with others patterns in same match arm.\n     ///\n@@ -356,6 +390,7 @@ impl_lint_pass!(Matches => [\n     MATCH_WILD_ERR_ARM,\n     MATCH_AS_REF,\n     WILDCARD_ENUM_MATCH_ARM,\n+    MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n     WILDCARD_IN_OR_PATTERNS,\n     MATCH_SINGLE_BINDING,\n     INFALLIBLE_DESTRUCTURING_MATCH,\n@@ -729,9 +764,21 @@ fn check_wild_enum_match(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_\n                 if let QPath::Resolved(_, p) = path {\n                     missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n                 }\n-            } else if let PatKind::TupleStruct(ref path, ..) = arm.pat.kind {\n+            } else if let PatKind::TupleStruct(ref path, ref patterns, ..) = arm.pat.kind {\n                 if let QPath::Resolved(_, p) = path {\n-                    missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n+                    // Some simple checks for exhaustive patterns.\n+                    // There is a room for improvements to detect more cases,\n+                    // but it can be more expensive to do so.\n+                    let is_pattern_exhaustive = |pat: &&Pat<'_>| {\n+                        if let PatKind::Wild | PatKind::Binding(.., None) = pat.kind {\n+                            true\n+                        } else {\n+                            false\n+                        }\n+                    };\n+                    if patterns.iter().all(is_pattern_exhaustive) {\n+                        missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n+                    }\n                 }\n             }\n         }\n@@ -766,14 +813,27 @@ fn check_wild_enum_match(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_\n             }\n         }\n \n+        if suggestion.len() == 1 {\n+            // No need to check for non-exhaustive enum as in that case len would be greater than 1\n+            span_lint_and_sugg(\n+                cx,\n+                MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n+                wildcard_span,\n+                message,\n+                \"try this\",\n+                suggestion[0].clone(),\n+                Applicability::MaybeIncorrect,\n+            )\n+        };\n+\n         span_lint_and_sugg(\n             cx,\n             WILDCARD_ENUM_MATCH_ARM,\n             wildcard_span,\n             message,\n             \"try this\",\n             suggestion.join(\" | \"),\n-            Applicability::MachineApplicable,\n+            Applicability::MaybeIncorrect,\n         )\n     }\n }"}, {"sha": "552222eba2ee2164abbd717f8d92f1db0cfd1cb0", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -379,7 +379,7 @@ impl EarlyLintPass for MiscEarlyLints {\n             let left_binding = match left {\n                 BindingMode::ByRef(Mutability::Mut) => \"ref mut \",\n                 BindingMode::ByRef(Mutability::Not) => \"ref \",\n-                _ => \"\",\n+                BindingMode::ByValue(..) => \"\",\n             };\n \n             if let PatKind::Wild = right.kind {"}, {"sha": "9cfc8d1913497882f4da26a404b768d7ceaf0b28", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n                     return;\n                 }\n             },\n-            _ => return,\n+            FnKind::Closure(..) => return,\n         }\n \n         let mir = cx.tcx.optimized_mir(def_id);"}, {"sha": "dc5dbdc5ba7c98e4b0a7e9ef9bc1e13c8c8a6d0f", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                 }\n             },\n             FnKind::Method(..) => (),\n-            _ => return,\n+            FnKind::Closure(..) => return,\n         }\n \n         // Exclude non-inherent impls"}, {"sha": "8e0cb94317affc2ce1bf3c0e81d3407fda751bf9", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -161,7 +161,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n                 }\n             },\n             FnKind::Method(..) => (),\n-            _ => return,\n+            FnKind::Closure(..) => return,\n         }\n \n         // Exclude non-inherent impls"}, {"sha": "0291a2b549e45063d44a6f0b8f3d26a7ff0aa892", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -358,7 +358,7 @@ pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'_, 'tcx>, hir_id: HirId) -> O\n pub fn has_drop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.ty_adt_def() {\n         Some(def) => def.has_dtor(cx.tcx),\n-        _ => false,\n+        None => false,\n     }\n }\n "}, {"sha": "0bf46491d31d0595893039248b398fad4b124fe7", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -1200,6 +1200,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"matches\",\n     },\n+    Lint {\n+        name: \"match_wildcard_for_single_variants\",\n+        group: \"pedantic\",\n+        desc: \"a wildcard enum match for a single variant\",\n+        deprecation: None,\n+        module: \"matches\",\n+    },\n     Lint {\n         name: \"maybe_infinite_iter\",\n         group: \"pedantic\","}, {"sha": "a3df9d5ccbd161e22dab653a5b2fea127932ebf2", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -44,7 +44,7 @@ fn third_party_crates() -> String {\n     for entry in fs::read_dir(dep_dir).unwrap() {\n         let path = match entry {\n             Ok(entry) => entry.path(),\n-            _ => continue,\n+            Err(_) => continue,\n         };\n         if let Some(name) = path.file_name().and_then(OsStr::to_str) {\n             for dep in CRATES {"}, {"sha": "519200977a798d4356e29bf8bea1b55dcce5fa16", "filename": "tests/ui/match_wildcard_for_single_variants.fixed", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wildcard_for_single_variants.fixed?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -0,0 +1,59 @@\n+// run-rustfix\n+\n+#![warn(clippy::match_wildcard_for_single_variants)]\n+#![allow(dead_code)]\n+\n+enum Foo {\n+    A,\n+    B,\n+    C,\n+}\n+\n+enum Color {\n+    Red,\n+    Green,\n+    Blue,\n+    Rgb(u8, u8, u8),\n+}\n+\n+fn main() {\n+    let f = Foo::A;\n+    match f {\n+        Foo::A => {},\n+        Foo::B => {},\n+        Foo::C => {},\n+    }\n+\n+    let color = Color::Red;\n+\n+    // check exhaustive bindings\n+    match color {\n+        Color::Red => {},\n+        Color::Green => {},\n+        Color::Rgb(_r, _g, _b) => {},\n+        Color::Blue => {},\n+    }\n+\n+    // check exhaustive wild\n+    match color {\n+        Color::Red => {},\n+        Color::Green => {},\n+        Color::Rgb(..) => {},\n+        Color::Blue => {},\n+    }\n+    match color {\n+        Color::Red => {},\n+        Color::Green => {},\n+        Color::Rgb(_, _, _) => {},\n+        Color::Blue => {},\n+    }\n+\n+    // shouldn't lint as there is one missing variant\n+    // and one that isn't exhaustively covered\n+    match color {\n+        Color::Red => {},\n+        Color::Green => {},\n+        Color::Rgb(255, _, _) => {},\n+        _ => {},\n+    }\n+}"}, {"sha": "1df917e085c7123a947294226dae591e207e0f3f", "filename": "tests/ui/match_wildcard_for_single_variants.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/tests%2Fui%2Fmatch_wildcard_for_single_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/tests%2Fui%2Fmatch_wildcard_for_single_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wildcard_for_single_variants.rs?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -0,0 +1,59 @@\n+// run-rustfix\n+\n+#![warn(clippy::match_wildcard_for_single_variants)]\n+#![allow(dead_code)]\n+\n+enum Foo {\n+    A,\n+    B,\n+    C,\n+}\n+\n+enum Color {\n+    Red,\n+    Green,\n+    Blue,\n+    Rgb(u8, u8, u8),\n+}\n+\n+fn main() {\n+    let f = Foo::A;\n+    match f {\n+        Foo::A => {},\n+        Foo::B => {},\n+        _ => {},\n+    }\n+\n+    let color = Color::Red;\n+\n+    // check exhaustive bindings\n+    match color {\n+        Color::Red => {},\n+        Color::Green => {},\n+        Color::Rgb(_r, _g, _b) => {},\n+        _ => {},\n+    }\n+\n+    // check exhaustive wild\n+    match color {\n+        Color::Red => {},\n+        Color::Green => {},\n+        Color::Rgb(..) => {},\n+        _ => {},\n+    }\n+    match color {\n+        Color::Red => {},\n+        Color::Green => {},\n+        Color::Rgb(_, _, _) => {},\n+        _ => {},\n+    }\n+\n+    // shouldn't lint as there is one missing variant\n+    // and one that isn't exhaustively covered\n+    match color {\n+        Color::Red => {},\n+        Color::Green => {},\n+        Color::Rgb(255, _, _) => {},\n+        _ => {},\n+    }\n+}"}, {"sha": "82790aa9e80bba14c4c5e652ac67654dc78f3554", "filename": "tests/ui/match_wildcard_for_single_variants.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cafa94662ce3ffc1c8c1edca86e328fcc26ad3db/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_wildcard_for_single_variants.stderr?ref=cafa94662ce3ffc1c8c1edca86e328fcc26ad3db", "patch": "@@ -0,0 +1,28 @@\n+error: wildcard match will miss any future added variants\n+  --> $DIR/match_wildcard_for_single_variants.rs:24:9\n+   |\n+LL |         _ => {},\n+   |         ^ help: try this: `Foo::C`\n+   |\n+   = note: `-D clippy::match-wildcard-for-single-variants` implied by `-D warnings`\n+\n+error: wildcard match will miss any future added variants\n+  --> $DIR/match_wildcard_for_single_variants.rs:34:9\n+   |\n+LL |         _ => {},\n+   |         ^ help: try this: `Color::Blue`\n+\n+error: wildcard match will miss any future added variants\n+  --> $DIR/match_wildcard_for_single_variants.rs:42:9\n+   |\n+LL |         _ => {},\n+   |         ^ help: try this: `Color::Blue`\n+\n+error: wildcard match will miss any future added variants\n+  --> $DIR/match_wildcard_for_single_variants.rs:48:9\n+   |\n+LL |         _ => {},\n+   |         ^ help: try this: `Color::Blue`\n+\n+error: aborting due to 4 previous errors\n+"}]}