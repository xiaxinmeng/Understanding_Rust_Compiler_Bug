{"sha": "ad36f8febad77942b4f1f0e2ba0f422b69276d7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMzZmOGZlYmFkNzc5NDJiNGYxZjBlMmJhMGY0MjJiNjkyNzZkN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-29T12:30:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-29T12:30:12Z"}, "message": "Auto merge of #43534 - alexcrichton:cargo-target-runner, r=Mark-Simulacrum\n\nrustbuild: Use Cargo's \"target runner\"\n\nThis commit leverages a relatively new feature in Cargo to execute\ncross-compiled tests, the `target.$target.runner` configuration. We configure it\nthrough environment variables in rustbuild and this avoids the need for us to\nlocate and run tests after-the-fact, instead relying on Cargo to do all that\nexecution for us.", "tree": {"sha": "88762c0feeff2b04d3d99fc489e24a36f4dd9cea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88762c0feeff2b04d3d99fc489e24a36f4dd9cea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad36f8febad77942b4f1f0e2ba0f422b69276d7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad36f8febad77942b4f1f0e2ba0f422b69276d7b", "html_url": "https://github.com/rust-lang/rust/commit/ad36f8febad77942b4f1f0e2ba0f422b69276d7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad36f8febad77942b4f1f0e2ba0f422b69276d7b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91aff5775d3b4a95e2b0c2fe50785f3d28fa3dd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/91aff5775d3b4a95e2b0c2fe50785f3d28fa3dd8", "html_url": "https://github.com/rust-lang/rust/commit/91aff5775d3b4a95e2b0c2fe50785f3d28fa3dd8"}, {"sha": "8e7849e766730f9e210330485386731cac40d346", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7849e766730f9e210330485386731cac40d346", "html_url": "https://github.com/rust-lang/rust/commit/8e7849e766730f9e210330485386731cac40d346"}], "stats": {"total": 95, "additions": 26, "deletions": 69}, "files": [{"sha": "c65f5a9fb48bf6a45c8a7e7737adc641fc0f0b08", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 13, "deletions": 67, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ad36f8febad77942b4f1f0e2ba0f422b69276d7b/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad36f8febad77942b4f1f0e2ba0f422b69276d7b/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=ad36f8febad77942b4f1f0e2ba0f422b69276d7b", "patch": "@@ -1050,11 +1050,8 @@ impl Step for Crate {\n         dylib_path.insert(0, PathBuf::from(&*builder.sysroot_libdir(compiler, target)));\n         cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n-        if target.contains(\"emscripten\") || build.remote_tested(target) {\n-            cargo.arg(\"--no-run\");\n-        }\n-\n         cargo.arg(\"--\");\n+        cargo.args(&build.flags.cmd.test_args());\n \n         if build.config.quiet_tests {\n             cargo.arg(\"--quiet\");\n@@ -1063,75 +1060,24 @@ impl Step for Crate {\n         let _time = util::timeit();\n \n         if target.contains(\"emscripten\") {\n-            build.run(&mut cargo);\n-            krate_emscripten(build, compiler, target, mode);\n+            cargo.env(format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target)),\n+                      build.config.nodejs.as_ref().expect(\"nodejs not configured\"));\n         } else if build.remote_tested(target) {\n-            build.run(&mut cargo);\n-            krate_remote(builder, compiler, target, mode);\n-        } else {\n-            cargo.args(&build.flags.cmd.test_args());\n-            try_run(build, &mut cargo);\n-        }\n-    }\n-}\n-\n-fn krate_emscripten(build: &Build,\n-                    compiler: Compiler,\n-                    target: Interned<String>,\n-                    mode: Mode) {\n-    let out_dir = build.cargo_out(compiler, mode, target);\n-    let tests = find_tests(&out_dir.join(\"deps\"), target);\n-\n-    let nodejs = build.config.nodejs.as_ref().expect(\"nodejs not configured\");\n-    for test in tests {\n-        println!(\"running {}\", test.display());\n-        let mut cmd = Command::new(nodejs);\n-        cmd.arg(&test);\n-        if build.config.quiet_tests {\n-            cmd.arg(\"--quiet\");\n-        }\n-        try_run(build, &mut cmd);\n-    }\n-}\n-\n-fn krate_remote(builder: &Builder,\n-                compiler: Compiler,\n-                target: Interned<String>,\n-                mode: Mode) {\n-    let build = builder.build;\n-    let out_dir = build.cargo_out(compiler, mode, target);\n-    let tests = find_tests(&out_dir.join(\"deps\"), target);\n-\n-    let tool = builder.tool_exe(Tool::RemoteTestClient);\n-    for test in tests {\n-        let mut cmd = Command::new(&tool);\n-        cmd.arg(\"run\")\n-           .arg(&test);\n-        if build.config.quiet_tests {\n-            cmd.arg(\"--quiet\");\n+            cargo.env(format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target)),\n+                      format!(\"{} run\",\n+                              builder.tool_exe(Tool::RemoteTestClient).display()));\n         }\n-        cmd.args(&build.flags.cmd.test_args());\n-        try_run(build, &mut cmd);\n+        try_run(build, &mut cargo);\n     }\n }\n \n-fn find_tests(dir: &Path, target: Interned<String>) -> Vec<PathBuf> {\n-    let mut dst = Vec::new();\n-    for e in t!(dir.read_dir()).map(|e| t!(e)) {\n-        let file_type = t!(e.file_type());\n-        if !file_type.is_file() {\n-            continue\n-        }\n-        let filename = e.file_name().into_string().unwrap();\n-        if (target.contains(\"windows\") && filename.ends_with(\".exe\")) ||\n-           (!target.contains(\"windows\") && !filename.contains(\".\")) ||\n-           (target.contains(\"emscripten\") &&\n-            filename.ends_with(\".js\") &&\n-            !filename.ends_with(\".asm.js\")) {\n-            dst.push(e.path());\n+fn envify(s: &str) -> String {\n+    s.chars().map(|c| {\n+        match c {\n+            '-' => '_',\n+            c => c,\n         }\n-    }\n-    dst\n+    }).flat_map(|c| c.to_uppercase()).collect()\n }\n \n /// Some test suites are run inside emulators or on remote devices, and most"}, {"sha": "a872e7eee0609b617caf9ce5dd2b6cf524792714", "filename": "src/libstd/process.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ad36f8febad77942b4f1f0e2ba0f422b69276d7b/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad36f8febad77942b4f1f0e2ba0f422b69276d7b/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=ad36f8febad77942b4f1f0e2ba0f422b69276d7b", "patch": "@@ -1417,8 +1417,19 @@ mod tests {\n         let output = String::from_utf8(result.stdout).unwrap();\n \n         for (ref k, ref v) in env::vars() {\n-            // don't check android RANDOM variables\n-            if cfg!(target_os = \"android\") && *k == \"RANDOM\" {\n+            // Don't check android RANDOM variable which seems to change\n+            // whenever the shell runs, and our `env_cmd` is indeed running a\n+            // shell which means it'll get a different RANDOM than we probably\n+            // have.\n+            //\n+            // Also skip env vars with `-` in the name on android because, well,\n+            // I'm not sure. It appears though that the `set` command above does\n+            // not print env vars with `-` in the name, so we just skip them\n+            // here as we won't find them in the output. Note that most env vars\n+            // use `_` instead of `-`, but our build system sets a few env vars\n+            // with `-` in the name.\n+            if cfg!(target_os = \"android\") &&\n+               (*k == \"RANDOM\" || k.contains(\"-\")) {\n                 continue\n             }\n "}]}