{"sha": "f004cae5360c4a3f365c7f7525b4293559201ce2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMDRjYWU1MzYwYzRhM2YzNjVjN2Y3NTI1YjQyOTM1NTkyMDFjZTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-18T09:06:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-18T09:06:42Z"}, "message": "Auto merge of #54319 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #53522 (Add doc for impl From for Addr)\n - #54097 (rustdoc: Remove namespace for keywords)\n - #54205 (Add treat-err-as-bug flag in rustdoc)\n - #54225 (Regression test for rust-lang/rust#53675.)\n - #54232 (add `-Z dont-buffer-diagnostics`)\n - #54273 (Suggest to change numeric literal instead of casting)\n - #54299 (Issue 54246)\n - #54311 (Remove README with now-out-of-date docs about docs.)\n - #54313 (OsStr: Document that it's not NUL terminated)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "a7b22fceebae88f7eceb23b669c63d88c4a37102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7b22fceebae88f7eceb23b669c63d88c4a37102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f004cae5360c4a3f365c7f7525b4293559201ce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f004cae5360c4a3f365c7f7525b4293559201ce2", "html_url": "https://github.com/rust-lang/rust/commit/f004cae5360c4a3f365c7f7525b4293559201ce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f004cae5360c4a3f365c7f7525b4293559201ce2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36c0ee97b9f888d576fe4302b0aad846b4446e6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/36c0ee97b9f888d576fe4302b0aad846b4446e6c", "html_url": "https://github.com/rust-lang/rust/commit/36c0ee97b9f888d576fe4302b0aad846b4446e6c"}, {"sha": "85d214e7bdbb587878b2ff691eaba23611729511", "url": "https://api.github.com/repos/rust-lang/rust/commits/85d214e7bdbb587878b2ff691eaba23611729511", "html_url": "https://github.com/rust-lang/rust/commit/85d214e7bdbb587878b2ff691eaba23611729511"}], "stats": {"total": 314, "additions": 230, "deletions": 84}, "files": [{"sha": "5f25894afd76d4bbb5437fbc4c23b7590d250e8a", "filename": "src/doc/README.md", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/36c0ee97b9f888d576fe4302b0aad846b4446e6c/src%2Fdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/36c0ee97b9f888d576fe4302b0aad846b4446e6c/src%2Fdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2FREADME.md?ref=36c0ee97b9f888d576fe4302b0aad846b4446e6c", "patch": "@@ -1,32 +0,0 @@\n-# Rust documentations\n-\n-## Building\n-\n-To generate all the docs, follow the \"Building Documentation\" instructions in\n-the README in the root of the repository. This will convert the distributed\n-Markdown docs to HTML and generate HTML doc for the books, 'std' and 'extra'\n-libraries.\n-\n-To generate HTML documentation from one source file/crate, do something like:\n-\n-~~~~text\n-rustdoc --output html-doc/ --output-format html ../src/libstd/path.rs\n-~~~~\n-\n-(This, of course, requires a working build of the `rustdoc` tool.)\n-\n-## Additional notes\n-\n-To generate an HTML version of a doc from Markdown manually, you can do\n-something like:\n-\n-~~~~text\n-rustdoc reference.md\n-~~~~\n-\n-(`reference.md` being the Rust Reference Manual.)\n-\n-An overview of how to use the `rustdoc` command is available [in the docs][1].\n-Further details are available from the command line by with `rustdoc --help`.\n-\n-[1]: https://github.com/rust-lang/rust/blob/master/src/doc/rustdoc/src/what-is-rustdoc.md"}, {"sha": "e4d633c3f2cf27ccb1e1bb4a2025f699f0145016", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -1331,6 +1331,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"disable user provided type assertion in NLL\"),\n     nll_dont_emit_read_for_match: bool = (false, parse_bool, [UNTRACKED],\n         \"in match codegen, do not include ReadForMatch statements (used by mir-borrowck)\"),\n+    dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n+        \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting).\"),\n     polonius: bool = (false, parse_bool, [UNTRACKED],\n         \"enable polonius-based borrow-checker\"),\n     codegen_time_graph: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "52e1ab477038d9b1906991f8dd285be0d7b7a9ab", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -1012,6 +1012,7 @@ pub fn build_session_with_source_map(\n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n \n     let treat_err_as_bug = sopts.debugging_opts.treat_err_as_bug;\n+    let dont_buffer_diagnostics = sopts.debugging_opts.dont_buffer_diagnostics;\n     let report_delayed_bugs = sopts.debugging_opts.report_delayed_bugs;\n \n     let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n@@ -1059,6 +1060,7 @@ pub fn build_session_with_source_map(\n             can_emit_warnings,\n             treat_err_as_bug,\n             report_delayed_bugs,\n+            dont_buffer_diagnostics,\n             external_macro_backtrace,\n             ..Default::default()\n         },"}, {"sha": "5e962a4af32f6de741db62fcb5748ba3f522ff8b", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -21,6 +21,10 @@ use std::thread::panicking;\n use syntax_pos::{MultiSpan, Span};\n \n /// Used for emitting structured error messages and other diagnostic information.\n+///\n+/// If there is some state in a downstream crate you would like to\n+/// access in the methods of `DiagnosticBuilder` here, consider\n+/// extending `HandlerFlags`, accessed via `self.handler.flags`.\n #[must_use]\n #[derive(Clone)]\n pub struct DiagnosticBuilder<'a> {\n@@ -89,8 +93,14 @@ impl<'a> DiagnosticBuilder<'a> {\n         self.cancel();\n     }\n \n-    /// Buffers the diagnostic for later emission.\n-    pub fn buffer(self, buffered_diagnostics: &mut Vec<Diagnostic>) {\n+    /// Buffers the diagnostic for later emission, unless handler\n+    /// has disabled such buffering.\n+    pub fn buffer(mut self, buffered_diagnostics: &mut Vec<Diagnostic>) {\n+        if self.handler.flags.dont_buffer_diagnostics || self.handler.flags.treat_err_as_bug {\n+            self.emit();\n+            return;\n+        }\n+\n         // We need to use `ptr::read` because `DiagnosticBuilder`\n         // implements `Drop`.\n         let diagnostic;"}, {"sha": "d0ea6fba5ebb31ac60e59d098f9d1383d58fb681", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -303,9 +303,20 @@ thread_local!(pub static TRACK_DIAGNOSTICS: Cell<fn(&Diagnostic)> =\n \n #[derive(Default)]\n pub struct HandlerFlags {\n+    /// If false, warning-level lints are suppressed.\n+    /// (rustc: see `--allow warnings` and `--cap-lints`)\n     pub can_emit_warnings: bool,\n+    /// If true, error-level diagnostics are upgraded to bug-level.\n+    /// (rustc: see `-Z treat-err-as-bug`)\n     pub treat_err_as_bug: bool,\n+    /// If true, immediately emit diagnostics that would otherwise be buffered.\n+    /// (rustc: see `-Z dont-buffer-diagnostics` and `-Z treat-err-as-bug`)\n+    pub dont_buffer_diagnostics: bool,\n+    /// If true, immediately print bugs registered with `delay_span_bug`.\n+    /// (rustc: see `-Z report-delayed-bugs`)\n     pub report_delayed_bugs: bool,\n+    /// show macro backtraces even for non-local macros.\n+    /// (rustc: see `-Z external-macro-backtrace`)\n     pub external_macro_backtrace: bool,\n }\n "}, {"sha": "f9e717f8d456ec9b5da4a2d3184d2fd341449b8c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -783,7 +783,7 @@ impl EarlyLintPass for DeprecatedAttr {\n     fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n         for &&(n, _, ref g) in &self.depr_attrs {\n             if attr.name() == n {\n-                if let &AttributeGate::Gated(Stability::Deprecated(link),\n+                if let &AttributeGate::Gated(Stability::Deprecated(link, suggestion),\n                                              ref name,\n                                              ref reason,\n                                              _) = g {\n@@ -792,7 +792,7 @@ impl EarlyLintPass for DeprecatedAttr {\n                     let mut err = cx.struct_span_lint(DEPRECATED, attr.span, &msg);\n                     err.span_suggestion_short_with_applicability(\n                         attr.span,\n-                        \"remove this attribute\",\n+                        suggestion.unwrap_or(\"remove this attribute\"),\n                         String::new(),\n                         Applicability::MachineApplicable\n                     );"}, {"sha": "e78cd4891a5ea99fa4004b55a02b508b29c74a9e", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 60, "deletions": 21, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -415,10 +415,55 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                           src,\n                                           if needs_paren { \")\" } else { \"\" },\n                                           expected_ty);\n-            let into_suggestion = format!(\"{}{}{}.into()\",\n-                                          if needs_paren { \"(\" } else { \"\" },\n-                                          src,\n-                                          if needs_paren { \")\" } else { \"\" });\n+            let into_suggestion = format!(\n+                \"{}{}{}.into()\",\n+                if needs_paren { \"(\" } else { \"\" },\n+                src,\n+                if needs_paren { \")\" } else { \"\" },\n+            );\n+            let literal_is_ty_suffixed = |expr: &hir::Expr| {\n+                if let hir::ExprKind::Lit(lit) = &expr.node {\n+                    lit.node.is_suffixed()\n+                } else {\n+                    false\n+                }\n+            };\n+\n+            let into_sugg = into_suggestion.clone();\n+            let suggest_to_change_suffix_or_into = |err: &mut DiagnosticBuilder,\n+                                                    note: Option<&str>| {\n+                let suggest_msg = if literal_is_ty_suffixed(expr) {\n+                    format!(\n+                        \"change the type of the numeric literal from `{}` to `{}`\",\n+                        checked_ty,\n+                        expected_ty,\n+                    )\n+                } else {\n+                    match note {\n+                        Some(note) => format!(\"{}, which {}\", msg, note),\n+                        _ => format!(\"{} in a lossless way\", msg),\n+                    }\n+                };\n+\n+                let suffix_suggestion = format!(\n+                    \"{}{}{}{}\",\n+                    if needs_paren { \"(\" } else { \"\" },\n+                    src.trim_right_matches(&checked_ty.to_string()),\n+                    expected_ty,\n+                    if needs_paren { \")\" } else { \"\" },\n+                );\n+\n+                err.span_suggestion_with_applicability(\n+                    expr.span,\n+                    &suggest_msg,\n+                    if literal_is_ty_suffixed(expr) {\n+                        suffix_suggestion\n+                    } else {\n+                        into_sugg\n+                    },\n+                    Applicability::MachineApplicable,\n+                );\n+            };\n \n             match (&expected_ty.sty, &checked_ty.sty) {\n                 (&ty::Int(ref exp), &ty::Int(ref found)) => {\n@@ -444,11 +489,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         }\n                         _ => {\n-                            err.span_suggestion_with_applicability(\n-                                expr.span,\n-                                &format!(\"{}, which {}\", msg, will_sign_extend),\n-                                into_suggestion,\n-                                Applicability::MachineApplicable\n+                            suggest_to_change_suffix_or_into(\n+                                err,\n+                                Some(will_sign_extend),\n                             );\n                         }\n                     }\n@@ -477,12 +520,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             }\n                         }\n                         _ => {\n-                            err.span_suggestion_with_applicability(\n-                                expr.span,\n-                                &format!(\"{}, which {}\", msg, will_zero_extend),\n-                                into_suggestion,\n-                                Applicability::MachineApplicable\n-                            );\n+                           suggest_to_change_suffix_or_into(\n+                               err,\n+                               Some(will_zero_extend),\n+                           );\n                         }\n                     }\n                     true\n@@ -583,12 +624,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 (&ty::Float(ref exp), &ty::Float(ref found)) => {\n                     if found.bit_width() < exp.bit_width() {\n-                        err.span_suggestion_with_applicability(\n-                            expr.span,\n-                            &format!(\"{} in a lossless way\", msg),\n-                            into_suggestion,\n-                            Applicability::MachineApplicable\n-                        );\n+                       suggest_to_change_suffix_or_into(\n+                           err,\n+                           None,\n+                       );\n                     } else if can_cast {\n                         err.span_suggestion_with_applicability(\n                             expr.span,"}, {"sha": "2feeecb388f38d0976be7f8d641930ceab98bd6e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -260,9 +260,10 @@ impl DocAccessLevels for AccessLevels<DefId> {\n ///\n /// If the given `error_format` is `ErrorOutputType::Json` and no `SourceMap` is given, a new one\n /// will be created for the handler.\n-pub fn new_handler(error_format: ErrorOutputType, source_map: Option<Lrc<source_map::SourceMap>>)\n-    -> errors::Handler\n-{\n+pub fn new_handler(error_format: ErrorOutputType,\n+                   source_map: Option<Lrc<source_map::SourceMap>>,\n+                   treat_err_as_bug: bool,\n+) -> errors::Handler {\n     // rustdoc doesn't override (or allow to override) anything from this that is relevant here, so\n     // stick to the defaults\n     let sessopts = Options::default();\n@@ -299,7 +300,7 @@ pub fn new_handler(error_format: ErrorOutputType, source_map: Option<Lrc<source_\n         emitter,\n         errors::HandlerFlags {\n             can_emit_warnings: true,\n-            treat_err_as_bug: false,\n+            treat_err_as_bug,\n             report_delayed_bugs: false,\n             external_macro_backtrace: false,\n             ..Default::default()\n@@ -323,9 +324,9 @@ pub fn run_core(search_paths: SearchPaths,\n                 lint_cap: Option<lint::Level>,\n                 describe_lints: bool,\n                 mut manual_passes: Vec<String>,\n-                mut default_passes: passes::DefaultPassOption)\n-    -> (clean::Crate, RenderInfo, Vec<String>)\n-{\n+                mut default_passes: passes::DefaultPassOption,\n+                treat_err_as_bug: bool,\n+) -> (clean::Crate, RenderInfo, Vec<String>) {\n     // Parse, resolve, and typecheck the given crate.\n \n     let cpath = match input {\n@@ -388,7 +389,9 @@ pub fn run_core(search_paths: SearchPaths,\n     };\n     driver::spawn_thread_pool(sessopts, move |sessopts| {\n         let source_map = Lrc::new(source_map::SourceMap::new(sessopts.file_path_mapping()));\n-        let diagnostic_handler = new_handler(error_format, Some(source_map.clone()));\n+        let diagnostic_handler = new_handler(error_format,\n+                                             Some(source_map.clone()),\n+                                             treat_err_as_bug);\n \n         let mut sess = session::build_session_(\n             sessopts, cpath, diagnostic_handler, source_map,"}, {"sha": "1879abe659c831345510638b29befed8f3cde964", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -1830,8 +1830,8 @@ impl Context {\n             *slot.borrow_mut() = self.current.clone();\n         });\n \n-        let mut title = if it.is_primitive() {\n-            // No need to include the namespace for primitive types\n+        let mut title = if it.is_primitive() || it.is_keyword() {\n+            // No need to include the namespace for primitive types and keywords\n             String::new()\n         } else {\n             self.current.join(\"::\")"}, {"sha": "5f373a635dd7a671a53402b4c5e677218a22e176", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -404,8 +404,11 @@ fn main_args(args: &[String]) -> isize {\n                                   `short` (instead was `{}`)\", arg));\n         }\n     };\n+    let treat_err_as_bug = matches.opt_strs(\"Z\").iter().any(|x| {\n+        *x == \"treat-err-as-bug\"\n+    });\n \n-    let diag = core::new_handler(error_format, None);\n+    let diag = core::new_handler(error_format, None, treat_err_as_bug);\n \n     // check for deprecated options\n     check_deprecated_options(&matches, &diag);\n@@ -560,7 +563,7 @@ fn main_args(args: &[String]) -> isize {\n     let res = acquire_input(PathBuf::from(input), externs, edition, cg, &matches, error_format,\n                             move |out| {\n         let Output { krate, passes, renderinfo } = out;\n-        let diag = core::new_handler(error_format, None);\n+        let diag = core::new_handler(error_format, None, treat_err_as_bug);\n         info!(\"going to format\");\n         match output_format.as_ref().map(|s| &**s) {\n             Some(\"html\") | None => {\n@@ -694,6 +697,9 @@ where R: 'static + Send,\n     let force_unstable_if_unmarked = matches.opt_strs(\"Z\").iter().any(|x| {\n         *x == \"force-unstable-if-unmarked\"\n     });\n+    let treat_err_as_bug = matches.opt_strs(\"Z\").iter().any(|x| {\n+        *x == \"treat-err-as-bug\"\n+    });\n \n     let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -706,7 +712,8 @@ where R: 'static + Send,\n             core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n                            display_warnings, crate_name.clone(),\n                            force_unstable_if_unmarked, edition, cg, error_format,\n-                           lint_opts, lint_cap, describe_lints, manual_passes, default_passes);\n+                           lint_opts, lint_cap, describe_lints, manual_passes, default_passes,\n+                           treat_err_as_bug);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "e9390630445a106fbf878479492c212778880e5f", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -34,7 +34,9 @@ use sys_common::{AsInner, IntoInner, FromInner};\n ///\n /// `OsString` and [`OsStr`] bridge this gap by simultaneously representing Rust\n /// and platform-native string values, and in particular allowing a Rust string\n-/// to be converted into an \"OS\" string with no cost if possible.\n+/// to be converted into an \"OS\" string with no cost if possible.  A consequence\n+/// of this is that `OsString` instances are *not* `NUL` terminated; in order\n+/// to pass to e.g. Unix system call, you should create a [`CStr`].\n ///\n /// `OsString` is to [`&OsStr`] as [`String`] is to [`&str`]: the former\n /// in each pair are owned strings; the latter are borrowed\n@@ -65,6 +67,7 @@ use sys_common::{AsInner, IntoInner, FromInner};\n ///\n /// [`OsStr`]: struct.OsStr.html\n /// [`&OsStr`]: struct.OsStr.html\n+/// [`CStr`]: struct.CStr.html\n /// [`From`]: ../convert/trait.From.html\n /// [`String`]: ../string/struct.String.html\n /// [`&str`]: ../primitive.str.html"}, {"sha": "ff35325ab4fdaaacded38db1c1cb484410f67926", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -554,20 +554,28 @@ impl FromInner<c::sockaddr_in6> for SocketAddrV6 {\n \n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<SocketAddrV4> for SocketAddr {\n+    /// Converts a [`SocketAddrV4`] into a [`SocketAddr::V4`].\n     fn from(sock4: SocketAddrV4) -> SocketAddr {\n         SocketAddr::V4(sock4)\n     }\n }\n \n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<SocketAddrV6> for SocketAddr {\n+    /// Converts a [`SocketAddrV6`] into a [`SocketAddr::V6`].\n     fn from(sock6: SocketAddrV6) -> SocketAddr {\n         SocketAddr::V6(sock6)\n     }\n }\n \n #[stable(feature = \"addr_from_into_ip\", since = \"1.17.0\")]\n impl<I: Into<IpAddr>> From<(I, u16)> for SocketAddr {\n+    /// Converts a tuple struct (Into<[`IpAddr`]>, `u16`) into a [`SocketAddr`].\n+    ///\n+    /// This conversion creates a [`SocketAddr::V4`] for a [`IpAddr::V4`]\n+    /// and creates a [`SocketAddr::V6`] for a [`IpAddr::V6`].\n+    ///\n+    /// `u16` is treated as port of the newly created [`SocketAddr`].\n     fn from(pieces: (I, u16)) -> SocketAddr {\n         SocketAddr::new(pieces.0.into(), pieces.1)\n     }"}, {"sha": "67a9601fb12f1c897f3eae09da4d6b8ceb6ae4e5", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -711,7 +711,7 @@ pub enum AttributeGate {\n impl AttributeGate {\n     fn is_deprecated(&self) -> bool {\n         match *self {\n-            Gated(Stability::Deprecated(_), ..) => true,\n+            Gated(Stability::Deprecated(_, _), ..) => true,\n             _ => false,\n         }\n     }\n@@ -720,8 +720,9 @@ impl AttributeGate {\n #[derive(Copy, Clone, Debug)]\n pub enum Stability {\n     Unstable,\n-    // Argument is tracking issue link.\n-    Deprecated(&'static str),\n+    // First argument is tracking issue link; second argument is an optional\n+    // help message, which defaults to \"remove this attribute\"\n+    Deprecated(&'static str, Option<&'static str>),\n }\n \n // fn() is not Debug\n@@ -1048,7 +1049,7 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n     (\"no_builtins\", Whitelisted, Ungated),\n     (\"no_mangle\", Whitelisted, Ungated),\n     (\"no_debug\", Whitelisted, Gated(\n-        Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29721\"),\n+        Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29721\", None),\n         \"no_debug\",\n         \"the `#[no_debug]` attribute was an experimental feature that has been \\\n          deprecated due to lack of demand\",\n@@ -1061,7 +1062,8 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                        cfg_fn!(omit_gdb_pretty_printer_section))),\n     (\"unsafe_destructor_blind_to_params\",\n      Normal,\n-     Gated(Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/34761\"),\n+     Gated(Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/34761\",\n+                                 Some(\"replace this attribute with `#[may_dangle]`\")),\n            \"dropck_parametricity\",\n            \"unsafe_destructor_blind_to_params has been replaced by \\\n             may_dangle and will be removed in the future\",\n@@ -1140,9 +1142,10 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n     (\"panic_implementation\",\n      Normal,\n      Gated(Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/44489\\\n-                                  #issuecomment-415140224\"),\n+                                  #issuecomment-415140224\",\n+                                 Some(\"replace this attribute with `#[panic_handler]`\")),\n            \"panic_implementation\",\n-           \"This attribute was renamed to `panic_handler`\",\n+           \"this attribute was renamed to `panic_handler`\",\n            cfg_fn!(panic_implementation))),\n \n     // RFC 2070"}, {"sha": "73a026c581be55563a5e3ae4e01f35f5ef1a191f", "filename": "src/test/rustdoc/keyword.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Frustdoc%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Frustdoc%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fkeyword.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -15,6 +15,7 @@\n // @has foo/index.html '//h2[@id=\"keywords\"]' 'Keywords'\n // @has foo/index.html '//a[@href=\"keyword.match.html\"]' 'match'\n // @has foo/keyword.match.html '//a[@class=\"keyword\"]' 'match'\n+// @has foo/keyword.match.html '//span[@class=\"in-band\"]' 'Keyword match'\n // @has foo/keyword.match.html '//section[@id=\"main\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @!has foo/index.html '//a/@href' 'foo/index.html'\n // @!has foo/foo/index.html"}, {"sha": "d3d5bd498cfe8084777a7eb9de586d47b503872b", "filename": "src/test/ui/feature-gates/feature-gate-dropck-ugeh-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-dropck-ugeh-2.stderr?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -2,7 +2,7 @@ error: use of deprecated attribute `dropck_parametricity`: unsafe_destructor_bli\n   --> $DIR/feature-gate-dropck-ugeh-2.rs:17:5\n    |\n LL |     #[unsafe_destructor_blind_to_params]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this attribute with `#[may_dangle]`\n    |\n note: lint level defined here\n   --> $DIR/feature-gate-dropck-ugeh-2.rs:11:9"}, {"sha": "ca51154884f1227fb047c5df0bc3940fbcb87993", "filename": "src/test/ui/feature-gates/feature-gate-panic-implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -15,7 +15,7 @@\n \n use core::panic::PanicInfo;\n \n-#[panic_implementation] //~ ERROR This attribute was renamed to `panic_handler` (see issue #44489)\n+#[panic_implementation] //~ ERROR this attribute was renamed to `panic_handler` (see issue #44489)\n fn panic(info: &PanicInfo) -> ! {\n     loop {}\n }"}, {"sha": "a54780468c42de97a4c48303f78e7fe4d8435237", "filename": "src/test/ui/feature-gates/feature-gate-panic-implementation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-panic-implementation.stderr?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -1,7 +1,7 @@\n-error[E0658]: This attribute was renamed to `panic_handler` (see issue #44489)\n+error[E0658]: this attribute was renamed to `panic_handler` (see issue #44489)\n   --> $DIR/feature-gate-panic-implementation.rs:18:1\n    |\n-LL | #[panic_implementation] //~ ERROR This attribute was renamed to `panic_handler` (see issue #44489)\n+LL | #[panic_implementation] //~ ERROR this attribute was renamed to `panic_handler` (see issue #44489)\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(panic_implementation)] to the crate attributes to enable"}, {"sha": "8a35b36d46d64f49d0a3aeafe1e3aa0d042d5711", "filename": "src/test/ui/issues/issue-53675-a-test-called-panic.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Fissues%2Fissue-53675-a-test-called-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Fissues%2Fissue-53675-a-test-called-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53675-a-test-called-panic.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -0,0 +1,36 @@\n+// rust-lang/rust#53675: At one point the compiler errored when a test\n+// named `panic` used the `assert!` macro in expression position.\n+\n+// compile-pass\n+// compile-flags: --test\n+\n+mod in_expression_position {\n+    #[test]\n+    fn panic() {\n+        assert!(true)\n+    }\n+}\n+\n+mod in_statement_position {\n+    #[test]\n+    fn panic() {\n+        assert!(true);\n+    }\n+}\n+\n+mod what_if_we_use_panic_directly_in_expr {\n+    #[test]\n+    #[should_panic]\n+    fn panic() {\n+        panic!(\"in expr\")\n+    }\n+}\n+\n+\n+mod what_if_we_use_panic_directly_in_stmt {\n+    #[test]\n+    #[should_panic]\n+    fn panic() {\n+        panic!(\"in stmt\");\n+    }\n+}"}, {"sha": "516b2e8dd30bfec3403206898feb70faad717314", "filename": "src/test/ui/mismatched_types/numeric-literal-cast.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.rs?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(_: u16) {}\n+fn foo1(_: f64) {}\n+fn foo2(_: i32) {}\n+\n+fn main() {\n+    foo(1u8);\n+    foo1(2f32);\n+    foo2(3i16);\n+}\n+"}, {"sha": "e2fe1a0914d4f22af6cf167b7f60a00bf729b87b", "filename": "src/test/ui/mismatched_types/numeric-literal-cast.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fnumeric-literal-cast.stderr?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-literal-cast.rs:16:9\n+   |\n+LL |     foo(1u8);\n+   |         ^^^ expected u16, found u8\n+help: change the type of the numeric literal from `u8` to `u16`\n+   |\n+LL |     foo(1u16);\n+   |         ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-literal-cast.rs:17:10\n+   |\n+LL |     foo1(2f32);\n+   |          ^^^^ expected f64, found f32\n+help: change the type of the numeric literal from `f32` to `f64`\n+   |\n+LL |     foo1(2f64);\n+   |          ^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/numeric-literal-cast.rs:18:10\n+   |\n+LL |     foo2(3i16);\n+   |          ^^^^ expected i32, found i16\n+help: change the type of the numeric literal from `i16` to `i32`\n+   |\n+LL |     foo2(3i32);\n+   |          ^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "fabfba94878f520548230e5db2c5b80fd808f10c", "filename": "src/test/ui/panic-implementation/panic-implementation-deprecated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Fpanic-implementation%2Fpanic-implementation-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f004cae5360c4a3f365c7f7525b4293559201ce2/src%2Ftest%2Fui%2Fpanic-implementation%2Fpanic-implementation-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-implementation%2Fpanic-implementation-deprecated.stderr?ref=f004cae5360c4a3f365c7f7525b4293559201ce2", "patch": "@@ -1,8 +1,8 @@\n-error: use of deprecated attribute `panic_implementation`: This attribute was renamed to `panic_handler`. See https://github.com/rust-lang/rust/issues/44489#issuecomment-415140224\n+error: use of deprecated attribute `panic_implementation`: this attribute was renamed to `panic_handler`. See https://github.com/rust-lang/rust/issues/44489#issuecomment-415140224\n   --> $DIR/panic-implementation-deprecated.rs:19:1\n    |\n LL | #[panic_implementation]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ help: replace this attribute with `#[panic_handler]`\n    |\n note: lint level defined here\n   --> $DIR/panic-implementation-deprecated.rs:13:9"}]}