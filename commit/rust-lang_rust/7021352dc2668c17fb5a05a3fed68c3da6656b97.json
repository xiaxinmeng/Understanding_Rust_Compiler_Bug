{"sha": "7021352dc2668c17fb5a05a3fed68c3da6656b97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMjEzNTJkYzI2NjhjMTdmYjVhMDVhM2ZlZDY4YzNkYTY2NTZiOTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-25T19:23:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T19:23:15Z"}, "message": "Merge #4113 #4136 #4141 #4142\n\n4113: Support returning non-hierarchical symbols r=matklad a=kjeremy\n\nIf `hierarchicalDocumentSymbolSupport` is not true in the client capabilites\r\nthen it does not support the `DocumentSymbol[]` return type from the\r\n`textDocument/documentSymbol` request and we must fall back to `SymbolInformation[]`.\r\n\r\nThis is one of the few requests that use the client capabilities to\r\ndifferentiate between return types and could cause problems for clients.\r\n\r\nSee https://github.com/microsoft/language-server-protocol/pull/538#issuecomment-442510767 for more context.\r\n\r\nFound while looking at #144\n\n4136: add support for cfg feature attributes on expression #4063 r=matklad a=bnjjj\n\nclose issue #4063\n\n4141: Fix typo r=matklad a=Veetaha\n\n\n\n4142: Remove unnecessary async from vscode language client creation r=matklad a=Veetaha\n\n\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\nCo-authored-by: veetaha <veetaha2@gmail.com>", "tree": {"sha": "b29af7a79f8658c5c6674db4346db4fa3b092164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b29af7a79f8658c5c6674db4346db4fa3b092164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7021352dc2668c17fb5a05a3fed68c3da6656b97", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepI4jCRBK7hj4Ov3rIwAAdHIIADdDAqHnakD+FErPwREsGXBm\nyITH/dzK5wFRw1vaHzFNb5EHaFjgQ/s4CMyOEi3mveXvQ7agF3iNiBa0So8GJK1+\nwOfhBGSgKBq0xOMxN7T8MKiQnGRFjLZSg691aYrctz0kD9uLehWlzX1vpBK3iDbY\nIlTpqxd/kYcxou3DDvI6BED4BsSUcVSHdWMAMucGuzcbhiY3dN2sfWEprozMC10Y\nsKPqdrGufBxhviyqpFw0sl8aFi2Oj+qM4wdzLGGfVszjIixqVo+97KxWPjZQ4xLc\n9EPKONQRA5wNvgxRSNAH+6cdFkJg3d/X91wg6eRAe6XySwmpGnYLIfgfAP1ff+8=\n=Dn3c\n-----END PGP SIGNATURE-----\n", "payload": "tree b29af7a79f8658c5c6674db4346db4fa3b092164\nparent 5671bacfa66a9d83daa1cc42f72ec8701412ccdc\nparent 0619c67ac6b2f503750058437ce0af08d17d1018\nparent b87b335e6859ead3baa7fde20e3ea2ac69f63d85\nparent f52e2f6840280ef1302604d90cd3b338a2e488cc\nparent 5f88df82a67d3d17bbead1179f82ad7261f68692\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587842595 +0000\ncommitter GitHub <noreply@github.com> 1587842595 +0000\n\nMerge #4113 #4136 #4141 #4142\n\n4113: Support returning non-hierarchical symbols r=matklad a=kjeremy\n\nIf `hierarchicalDocumentSymbolSupport` is not true in the client capabilites\r\nthen it does not support the `DocumentSymbol[]` return type from the\r\n`textDocument/documentSymbol` request and we must fall back to `SymbolInformation[]`.\r\n\r\nThis is one of the few requests that use the client capabilities to\r\ndifferentiate between return types and could cause problems for clients.\r\n\r\nSee https://github.com/microsoft/language-server-protocol/pull/538#issuecomment-442510767 for more context.\r\n\r\nFound while looking at #144\n\n4136: add support for cfg feature attributes on expression #4063 r=matklad a=bnjjj\n\nclose issue #4063\n\n4141: Fix typo r=matklad a=Veetaha\n\n\n\n4142: Remove unnecessary async from vscode language client creation r=matklad a=Veetaha\n\n\n\nCo-authored-by: kjeremy <kjeremy@gmail.com>\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\nCo-authored-by: veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7021352dc2668c17fb5a05a3fed68c3da6656b97", "html_url": "https://github.com/rust-lang/rust/commit/7021352dc2668c17fb5a05a3fed68c3da6656b97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7021352dc2668c17fb5a05a3fed68c3da6656b97/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5671bacfa66a9d83daa1cc42f72ec8701412ccdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5671bacfa66a9d83daa1cc42f72ec8701412ccdc", "html_url": "https://github.com/rust-lang/rust/commit/5671bacfa66a9d83daa1cc42f72ec8701412ccdc"}, {"sha": "0619c67ac6b2f503750058437ce0af08d17d1018", "url": "https://api.github.com/repos/rust-lang/rust/commits/0619c67ac6b2f503750058437ce0af08d17d1018", "html_url": "https://github.com/rust-lang/rust/commit/0619c67ac6b2f503750058437ce0af08d17d1018"}, {"sha": "b87b335e6859ead3baa7fde20e3ea2ac69f63d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/b87b335e6859ead3baa7fde20e3ea2ac69f63d85", "html_url": "https://github.com/rust-lang/rust/commit/b87b335e6859ead3baa7fde20e3ea2ac69f63d85"}, {"sha": "f52e2f6840280ef1302604d90cd3b338a2e488cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52e2f6840280ef1302604d90cd3b338a2e488cc", "html_url": "https://github.com/rust-lang/rust/commit/f52e2f6840280ef1302604d90cd3b338a2e488cc"}, {"sha": "5f88df82a67d3d17bbead1179f82ad7261f68692", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f88df82a67d3d17bbead1179f82ad7261f68692", "html_url": "https://github.com/rust-lang/rust/commit/5f88df82a67d3d17bbead1179f82ad7261f68692"}], "stats": {"total": 85, "additions": 78, "deletions": 7}, "files": [{"sha": "890cefcafbe4694fbd893f865f1d00e4cfdf292d", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7021352dc2668c17fb5a05a3fed68c3da6656b97/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7021352dc2668c17fb5a05a3fed68c3da6656b97/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=7021352dc2668c17fb5a05a3fed68c3da6656b97", "patch": "@@ -27,7 +27,7 @@ use crate::{\n     AsMacroCall, DefWithBodyId, HasModule, Lookup, ModuleId,\n };\n \n-/// A subser of Exander that only deals with cfg attributes. We only need it to\n+/// A subset of Exander that only deals with cfg attributes. We only need it to\n /// avoid cyclic queries in crate def map during enum processing.\n pub(crate) struct CfgExpander {\n     cfg_options: CfgOptions,"}, {"sha": "5716038543866df2e070c8bafd786983290e9e22", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7021352dc2668c17fb5a05a3fed68c3da6656b97/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7021352dc2668c17fb5a05a3fed68c3da6656b97/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=7021352dc2668c17fb5a05a3fed68c3da6656b97", "patch": "@@ -141,6 +141,10 @@ impl ExprCollector<'_> {\n \n     fn collect_expr(&mut self, expr: ast::Expr) -> ExprId {\n         let syntax_ptr = AstPtr::new(&expr);\n+        let attrs = self.expander.parse_attrs(&expr);\n+        if !self.expander.is_cfg_enabled(&attrs) {\n+            return self.missing_expr();\n+        }\n         match expr {\n             ast::Expr::IfExpr(e) => {\n                 let then_branch = self.collect_block_opt(e.then_branch());"}, {"sha": "588d812820a8971a8ed19d32fb0d437e390cae50", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7021352dc2668c17fb5a05a3fed68c3da6656b97/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7021352dc2668c17fb5a05a3fed68c3da6656b97/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=7021352dc2668c17fb5a05a3fed68c3da6656b97", "patch": "@@ -390,6 +390,38 @@ fn no_such_field_with_feature_flag_diagnostics_on_struct_lit() {\n     assert_snapshot!(diagnostics, @r###\"\"###);\n }\n \n+#[test]\n+fn no_such_field_with_feature_flag_diagnostics_on_block_expr() {\n+    let diagnostics = TestDB::with_files(\n+        r#\"\n+        //- /lib.rs crate:foo cfg:feature=foo\n+        struct S {\n+            #[cfg(feature = \"foo\")]\n+            foo: u32,\n+            #[cfg(not(feature = \"foo\"))]\n+            bar: u32,\n+        }\n+\n+        impl S {\n+            fn new(bar: u32) -> Self {\n+                #[cfg(feature = \"foo\")]\n+                {\n+                Self { foo: bar }\n+                }\n+                #[cfg(not(feature = \"foo\"))]\n+                {\n+                Self { bar }\n+                }\n+            }\n+        }\n+        \"#,\n+    )\n+    .diagnostics()\n+    .0;\n+\n+    assert_snapshot!(diagnostics, @r###\"\"###);\n+}\n+\n #[test]\n fn no_such_field_with_feature_flag_diagnostics_on_struct_fields() {\n     let diagnostics = TestDB::with_files("}, {"sha": "74a63e32a302f04ba0738f21da577b91bb7ef2e4", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7021352dc2668c17fb5a05a3fed68c3da6656b97/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7021352dc2668c17fb5a05a3fed68c3da6656b97/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=7021352dc2668c17fb5a05a3fed68c3da6656b97", "patch": "@@ -69,6 +69,7 @@ pub enum RustfmtConfig {\n pub struct ClientCapsConfig {\n     pub location_link: bool,\n     pub line_folding_only: bool,\n+    pub hierarchical_symbols: bool,\n }\n \n impl Default for Config {\n@@ -215,6 +216,11 @@ impl Config {\n         if let Some(value) = caps.folding_range.as_ref().and_then(|it| it.line_folding_only) {\n             self.client_caps.line_folding_only = value\n         }\n+        if let Some(value) =\n+            caps.document_symbol.as_ref().and_then(|it| it.hierarchical_document_symbol_support)\n+        {\n+            self.client_caps.hierarchical_symbols = value\n+        }\n         self.completion.allow_snippets(false);\n         if let Some(completion) = &caps.completion {\n             if let Some(completion_item) = &completion.completion_item {"}, {"sha": "e87e8db5d34b74ba8a42610ac68a6a5d2b6d6564", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7021352dc2668c17fb5a05a3fed68c3da6656b97/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7021352dc2668c17fb5a05a3fed68c3da6656b97/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=7021352dc2668c17fb5a05a3fed68c3da6656b97", "patch": "@@ -16,7 +16,7 @@ use lsp_types::{\n     Hover, HoverContents, Location, MarkupContent, MarkupKind, Position, PrepareRenameResponse,\n     Range, RenameParams, SemanticTokensParams, SemanticTokensRangeParams,\n     SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, TextDocumentIdentifier,\n-    TextEdit, WorkspaceEdit,\n+    TextEdit, Url, WorkspaceEdit,\n };\n use ra_ide::{\n     Assist, AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n@@ -219,6 +219,7 @@ pub fn handle_document_symbol(\n     let _p = profile(\"handle_document_symbol\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n+    let url = file_id.try_conv_with(&world)?;\n \n     let mut parents: Vec<(DocumentSymbol, Option<usize>)> = Vec::new();\n \n@@ -234,10 +235,10 @@ pub fn handle_document_symbol(\n         };\n         parents.push((doc_symbol, symbol.parent));\n     }\n-    let mut res = Vec::new();\n+    let mut document_symbols = Vec::new();\n     while let Some((node, parent)) = parents.pop() {\n         match parent {\n-            None => res.push(node),\n+            None => document_symbols.push(node),\n             Some(i) => {\n                 let children = &mut parents[i].0.children;\n                 if children.is_none() {\n@@ -248,7 +249,35 @@ pub fn handle_document_symbol(\n         }\n     }\n \n-    Ok(Some(res.into()))\n+    if world.config.client_caps.hierarchical_symbols {\n+        Ok(Some(document_symbols.into()))\n+    } else {\n+        let mut symbol_information = Vec::<SymbolInformation>::new();\n+        for symbol in document_symbols {\n+            flatten_document_symbol(&symbol, None, &url, &mut symbol_information);\n+        }\n+\n+        Ok(Some(symbol_information.into()))\n+    }\n+}\n+\n+fn flatten_document_symbol(\n+    symbol: &DocumentSymbol,\n+    container_name: Option<String>,\n+    url: &Url,\n+    res: &mut Vec<SymbolInformation>,\n+) {\n+    res.push(SymbolInformation {\n+        name: symbol.name.clone(),\n+        kind: symbol.kind,\n+        deprecated: symbol.deprecated,\n+        location: Location::new(url.clone(), symbol.range),\n+        container_name: container_name,\n+    });\n+\n+    for child in symbol.children.iter().flatten() {\n+        flatten_document_symbol(child, Some(symbol.name.clone()), url, res);\n+    }\n }\n \n pub fn handle_workspace_symbol("}, {"sha": "97e794091564d587e7fa912fd089f43e9cee1e4e", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7021352dc2668c17fb5a05a3fed68c3da6656b97/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7021352dc2668c17fb5a05a3fed68c3da6656b97/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=7021352dc2668c17fb5a05a3fed68c3da6656b97", "patch": "@@ -4,7 +4,7 @@ import * as vscode from 'vscode';\n import { CallHierarchyFeature } from 'vscode-languageclient/lib/callHierarchy.proposed';\n import { SemanticTokensFeature, DocumentSemanticsTokensSignature } from 'vscode-languageclient/lib/semanticTokens.proposed';\n \n-export async function createClient(serverPath: string, cwd: string): Promise<lc.LanguageClient> {\n+export function createClient(serverPath: string, cwd: string): lc.LanguageClient {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file."}, {"sha": "41df119910a4416e99ec78fffc75bdd2526eda2e", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7021352dc2668c17fb5a05a3fed68c3da6656b97/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7021352dc2668c17fb5a05a3fed68c3da6656b97/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=7021352dc2668c17fb5a05a3fed68c3da6656b97", "patch": "@@ -21,7 +21,7 @@ export class Ctx {\n         serverPath: string,\n         cwd: string,\n     ): Promise<Ctx> {\n-        const client = await createClient(serverPath, cwd);\n+        const client = createClient(serverPath, cwd);\n         const res = new Ctx(config, extCtx, client, serverPath);\n         res.pushCleanup(client.start());\n         await client.onReady();"}]}