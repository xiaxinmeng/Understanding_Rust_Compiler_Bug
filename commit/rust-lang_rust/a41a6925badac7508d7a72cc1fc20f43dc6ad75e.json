{"sha": "a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "node_id": "C_kwDOAAsO6NoAKGE0MWE2OTI1YmFkYWM3NTA4ZDdhNzJjYzFmYzIwZjQzZGM2YWQ3NWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T09:31:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T09:31:37Z"}, "message": "Auto merge of #91957 - nnethercote:rm-SymbolStr, r=oli-obk\n\nRemove `SymbolStr`\n\nThis was originally proposed in https://github.com/rust-lang/rust/pull/74554#discussion_r466203544. As well as removing the icky `SymbolStr` type, it allows the removal of a lot of `&` and `*` occurrences.\n\nBest reviewed one commit at a time.\n\nr? `@oli-obk`", "tree": {"sha": "224de9d17e4b466061b457662dd9d2dfc9b9ce14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/224de9d17e4b466061b457662dd9d2dfc9b9ce14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "html_url": "https://github.com/rust-lang/rust/commit/a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f540619007c1aa62dfc915409d881f52f21dc84", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f540619007c1aa62dfc915409d881f52f21dc84", "html_url": "https://github.com/rust-lang/rust/commit/8f540619007c1aa62dfc915409d881f52f21dc84"}, {"sha": "b1c934ebb8b881977a93c05c15caa88921792d3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c934ebb8b881977a93c05c15caa88921792d3b", "html_url": "https://github.com/rust-lang/rust/commit/b1c934ebb8b881977a93c05c15caa88921792d3b"}], "stats": {"total": 769, "additions": 354, "deletions": 415}, "files": [{"sha": "1cc5ddfd8ee29b39fc4288a857911e57c1064219", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -35,12 +35,12 @@ impl LitKind {\n                 LitKind::Bool(symbol == kw::True)\n             }\n             token::Byte => {\n-                return unescape_byte(&symbol.as_str())\n+                return unescape_byte(symbol.as_str())\n                     .map(LitKind::Byte)\n                     .map_err(|_| LitError::LexerError);\n             }\n             token::Char => {\n-                return unescape_char(&symbol.as_str())\n+                return unescape_char(symbol.as_str())\n                     .map(LitKind::Char)\n                     .map_err(|_| LitError::LexerError);\n             }"}, {"sha": "92cae4da89ab50059902811575dc9a049ce470f2", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -1278,7 +1278,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     pub(super) fn lower_abi(&mut self, abi: StrLit) -> abi::Abi {\n-        abi::lookup(&abi.symbol_unescaped.as_str()).unwrap_or_else(|| {\n+        abi::lookup(abi.symbol_unescaped.as_str()).unwrap_or_else(|| {\n             self.error_on_invalid_abi(abi);\n             abi::Abi::Rust\n         })"}, {"sha": "3c3ea2bfd3591fa3dee9beab824508882c1c8fb4", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -580,8 +580,7 @@ impl<'a> AstValidator<'a> {\n \n     /// An item in `extern { ... }` cannot use non-ascii identifier.\n     fn check_foreign_item_ascii_only(&self, ident: Ident) {\n-        let symbol_str = ident.as_str();\n-        if !symbol_str.is_ascii() {\n+        if !ident.as_str().is_ascii() {\n             let n = 83942;\n             self.err_handler()\n                 .struct_span_err("}, {"sha": "85e35c942b903119495a6d04d5768d57ef1c0cf7", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -61,7 +61,7 @@ impl<'a> PostExpansionVisitor<'a> {\n     fn check_abi(&self, abi: ast::StrLit) {\n         let ast::StrLit { symbol_unescaped, span, .. } = abi;\n \n-        match &*symbol_unescaped.as_str() {\n+        match symbol_unescaped.as_str() {\n             // Stable\n             \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n             | \"system\" => {}"}, {"sha": "6c5b38bc4bb15f9bedef20ce9efc9907f057530c", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -204,7 +204,7 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n     };\n \n     if let Some(suffix) = suffix {\n-        out.push_str(&suffix.as_str())\n+        out.push_str(suffix.as_str())\n     }\n \n     out\n@@ -384,7 +384,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn print_symbol(&mut self, sym: Symbol, style: ast::StrStyle) {\n-        self.print_string(&sym.as_str(), style);\n+        self.print_string(sym.as_str(), style);\n     }\n \n     fn print_inner_attributes(&mut self, attrs: &[ast::Attribute]) {"}, {"sha": "bab50df3dd543351cafc2b394791b4454b9f4ef1", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -236,7 +236,7 @@ where\n \n                                     // These unwraps are safe because `get` ensures the meta item\n                                     // is a name/value pair string literal.\n-                                    issue_num = match &*issue.unwrap().as_str() {\n+                                    issue_num = match issue.unwrap().as_str() {\n                                         \"none\" => None,\n                                         issue => {\n                                             let emit_diag = |msg: &str| {\n@@ -301,7 +301,7 @@ where\n \n                     match (feature, reason, issue) {\n                         (Some(feature), reason, Some(_)) => {\n-                            if !rustc_lexer::is_ident(&feature.as_str()) {\n+                            if !rustc_lexer::is_ident(feature.as_str()) {\n                                 handle_errors(\n                                     &sess.parse_sess,\n                                     attr.span,\n@@ -535,7 +535,7 @@ pub fn eval_condition(\n                     return false;\n                 }\n             };\n-            let min_version = match parse_version(&min_version.as_str(), false) {\n+            let min_version = match parse_version(min_version.as_str(), false) {\n                 Some(ver) => ver,\n                 None => {\n                     sess.span_diagnostic"}, {"sha": "a24b7cff9e75c0c2227d029c036c41103c0affba", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -416,7 +416,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             tcx,\n                             generics,\n                             &mut err,\n-                            &param.name.as_str(),\n+                            param.name.as_str(),\n                             \"Copy\",\n                             None,\n                         );"}, {"sha": "e2eb125981f138b718742eaab4a5ca1bd6eab131", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -206,7 +206,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             {\n                 let local_info = &self.body.local_decls[local].local_info;\n                 if let Some(box LocalInfo::StaticRef { def_id, .. }) = *local_info {\n-                    buf.push_str(&self.infcx.tcx.item_name(def_id).as_str());\n+                    buf.push_str(self.infcx.tcx.item_name(def_id).as_str());\n                 } else {\n                     unreachable!();\n                 }\n@@ -318,7 +318,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let decl = &self.body.local_decls[local];\n         match self.local_names[local] {\n             Some(name) if !decl.from_compiler_desugaring() => {\n-                buf.push_str(&name.as_str());\n+                buf.push_str(name.as_str());\n                 Ok(())\n             }\n             _ => Err(()),"}, {"sha": "418567619169f633e0ab08444e0c7a5e3e457060", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -573,7 +573,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n             template_snippet.as_ref().map(|s| Symbol::intern(s)),\n             template_sp,\n         ));\n-        let template_str = &template_str.as_str();\n+        let template_str = template_str.as_str();\n \n         if let Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) = ecx.sess.asm_arch {\n             let find_span = |needle: &str| -> Span {"}, {"sha": "59361510a672e7a91fcacb65d9314f8705d8a23c", "filename": "compiler/rustc_builtin_macros/src/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -21,7 +21,7 @@ pub fn expand_concat(\n         match e.kind {\n             ast::ExprKind::Lit(ref lit) => match lit.kind {\n                 ast::LitKind::Str(ref s, _) | ast::LitKind::Float(ref s, _) => {\n-                    accumulator.push_str(&s.as_str());\n+                    accumulator.push_str(s.as_str());\n                 }\n                 ast::LitKind::Char(c) => {\n                     accumulator.push(c);"}, {"sha": "239bafb266a524192d7696d4781f84cc5249e3f2", "filename": "compiler/rustc_builtin_macros/src/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -29,7 +29,7 @@ pub fn expand_concat_idents<'cx>(\n         } else {\n             if let TokenTree::Token(token) = e {\n                 if let Some((ident, _)) = token.ident() {\n-                    res_str.push_str(&ident.name.as_str());\n+                    res_str.push_str(ident.name.as_str());\n                     continue;\n                 }\n             }"}, {"sha": "47d7b6c259e33536ed9c43cf4053639a00c7daae", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -121,7 +121,7 @@ fn report_bad_target(sess: &Session, item: &Annotatable, span: Span) -> bool {\n \n fn report_unexpected_literal(sess: &Session, lit: &ast::Lit) {\n     let help_msg = match lit.token.kind {\n-        token::Str if rustc_lexer::is_ident(&lit.token.symbol.as_str()) => {\n+        token::Str if rustc_lexer::is_ident(lit.token.symbol.as_str()) => {\n             format!(\"try using `#[derive({})]`\", lit.token.symbol)\n         }\n         _ => \"for example, write `#[derive(Debug)]` for `Debug`\".to_string(),"}, {"sha": "285027fc632d727c7dd2e08e4db69ad24dea34aa", "filename": "compiler/rustc_builtin_macros/src/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -80,11 +80,11 @@ pub fn expand_env<'cx>(\n     }\n \n     let sp = cx.with_def_site_ctxt(sp);\n-    let value = env::var(&*var.as_str()).ok().as_deref().map(Symbol::intern);\n+    let value = env::var(var.as_str()).ok().as_deref().map(Symbol::intern);\n     cx.sess.parse_sess.env_depinfo.borrow_mut().insert((var, value));\n     let e = match value {\n         None => {\n-            cx.span_err(sp, &msg.as_str());\n+            cx.span_err(sp, msg.as_str());\n             return DummyResult::any(sp);\n         }\n         Some(value) => cx.expr_str(sp, value),"}, {"sha": "407aaacb88999562350ff62843ecaf6f16f76648", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -955,7 +955,7 @@ pub fn expand_preparsed_format_args(\n         ast::StrStyle::Raw(raw) => Some(raw as usize),\n     };\n \n-    let fmt_str = &fmt_str.as_str(); // for the suggestions below\n+    let fmt_str = fmt_str.as_str(); // for the suggestions below\n     let fmt_snippet = ecx.source_map().span_to_snippet(fmt_sp).ok();\n     let mut parser = parse::Parser::new(\n         fmt_str,"}, {"sha": "9a6c45ae98d5f5aeffeb09dd2c16f36fb6ecacef", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -369,7 +369,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n             TodoItem::Static(def_id) => {\n                 //println!(\"static {:?}\", def_id);\n \n-                let section_name = tcx.codegen_fn_attrs(def_id).link_section.map(|s| s.as_str());\n+                let section_name = tcx.codegen_fn_attrs(def_id).link_section;\n \n                 let alloc = tcx.eval_static_initializer(def_id).unwrap();\n \n@@ -388,6 +388,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n \n         if let Some(section_name) = section_name {\n             let (segment_name, section_name) = if tcx.sess.target.is_like_osx {\n+                let section_name = section_name.as_str();\n                 if let Some(names) = section_name.split_once(',') {\n                     names\n                 } else {\n@@ -397,7 +398,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     ));\n                 }\n             } else {\n-                (\"\", &*section_name)\n+                (\"\", section_name.as_str())\n             };\n             data_ctx.set_segment_section(segment_name, section_name);\n         }"}, {"sha": "c09be5f75979fc530fa6d800257e4230d438a745", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -84,7 +84,7 @@ fn reuse_workproduct_for_cgu(\n     let work_product = cgu.work_product(tcx);\n     if let Some(saved_file) = &work_product.saved_file {\n         let obj_out =\n-            tcx.output_filenames(()).temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n+            tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n         object = Some(obj_out.clone());\n         let source_file = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, &saved_file);\n         if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n@@ -176,7 +176,7 @@ fn module_codegen(\n         )\n     });\n \n-    codegen_global_asm(tcx, &cgu.name().as_str(), &cx.global_asm);\n+    codegen_global_asm(tcx, cgu.name().as_str(), &cx.global_asm);\n \n     codegen_result\n }\n@@ -207,7 +207,7 @@ pub(crate) fn run_aot(\n         cgus.iter()\n             .map(|cgu| {\n                 let cgu_reuse = determine_cgu_reuse(tcx, cgu);\n-                tcx.sess.cgu_reuse_tracker.set_actual_reuse(&cgu.name().as_str(), cgu_reuse);\n+                tcx.sess.cgu_reuse_tracker.set_actual_reuse(cgu.name().as_str(), cgu_reuse);\n \n                 match cgu_reuse {\n                     _ if backend_config.disable_incr_cache => {}"}, {"sha": "ec542e55681e5be898ab0be9f2c4671b40c7950c", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -33,7 +33,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             return value;\n         }\n \n-        let global = self.global_string(&*symbol.as_str());\n+        let global = self.global_string(symbol.as_str());\n \n         self.const_cstr_cache.borrow_mut().insert(symbol, global);\n         global"}, {"sha": "dbee505a4977b26f1853acb52643f194fd5c437b", "filename": "compiler/rustc_codegen_gcc/src/declare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fdeclare.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -17,7 +17,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n                 global.set_tls_model(self.tls_model);\n             }\n             if let Some(link_section) = link_section {\n-                global.set_link_section(&link_section.as_str());\n+                global.set_link_section(link_section.as_str());\n             }\n             global\n         }\n@@ -53,7 +53,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             global.set_tls_model(self.tls_model);\n         }\n         if let Some(link_section) = link_section {\n-            global.set_link_section(&link_section.as_str());\n+            global.set_link_section(link_section.as_str());\n         }\n         let global_address = global.get_address(None);\n         self.globals.borrow_mut().insert(name.to_string(), global_address);"}, {"sha": "0782adeb6a175bad86a826ab561d2dbe17c60f99", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fmod.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         let arg_tys = sig.inputs();\n         let ret_ty = sig.output();\n         let name = tcx.item_name(def_id);\n-        let name_str = &*name.as_str();\n+        let name_str = name.as_str();\n \n         let llret_ty = self.layout_of(ret_ty).gcc_type(self, true);\n         let result = PlaceRef::new_sized(llresult, fn_abi.ret.layout);"}, {"sha": "aff27f71d91c464612577e5a275c452a65a674d2", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -52,7 +52,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n     let sig =\n         tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), callee_ty.fn_sig(tcx));\n     let arg_tys = sig.inputs();\n-    let name_str = &*name.as_str();\n+    let name_str = name.as_str();\n \n     // every intrinsic below takes a SIMD vector as its first argument\n     require_simd!(arg_tys[0], \"input\");"}, {"sha": "7f82ce307d5263ba1f829fd9850fbccb021fcf64", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -326,7 +326,7 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         .target_features\n         .iter()\n         .flat_map(|f| {\n-            let feature = &f.as_str();\n+            let feature = f.as_str();\n             llvm_util::to_llvm_feature(cx.tcx.sess, feature)\n                 .into_iter()\n                 .map(|f| format!(\"+{}\", f))\n@@ -351,7 +351,7 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n \n             let name =\n                 codegen_fn_attrs.link_name.unwrap_or_else(|| cx.tcx.item_name(instance.def_id()));\n-            let name = CString::new(&name.as_str()[..]).unwrap();\n+            let name = CString::new(name.as_str()).unwrap();\n             llvm::AddFunctionAttrStringValue(\n                 llfn,\n                 llvm::AttributePlace::Function,"}, {"sha": "7b6ce5ea89bedd17bc54d6d8ccbc2c8f3559892f", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -79,7 +79,7 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'_>, cgu_name: Symbol) -> (ModuleCodegen\n             &[cgu_name.to_string(), cgu.size_estimate().to_string()],\n         );\n         // Instantiate monomorphizations without filling out definitions yet...\n-        let llvm_module = ModuleLlvm::new(tcx, &cgu_name.as_str());\n+        let llvm_module = ModuleLlvm::new(tcx, cgu_name.as_str());\n         {\n             let cx = CodegenCx::new(tcx, cgu, &llvm_module);\n             let mono_items = cx.codegen_unit.items_in_deterministic_order(cx.tcx);\n@@ -143,7 +143,7 @@ pub fn set_link_section(llval: &Value, attrs: &CodegenFnAttrs) {\n         None => return,\n     };\n     unsafe {\n-        let buf = SmallCStr::new(&sect.as_str());\n+        let buf = SmallCStr::new(sect.as_str());\n         llvm::LLVMSetSection(llval, buf.as_ptr());\n     }\n }"}, {"sha": "9f24a95482c606ed4d82460a7d90ecc65f5fa330", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -320,7 +320,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n \n         let dbg_cx = if tcx.sess.opts.debuginfo != DebugInfo::None {\n             let dctx = debuginfo::CrateDebugContext::new(llmod);\n-            debuginfo::metadata::compile_unit_metadata(tcx, &codegen_unit.name().as_str(), &dctx);\n+            debuginfo::metadata::compile_unit_metadata(tcx, codegen_unit.name().as_str(), &dctx);\n             Some(dctx)\n         } else {\n             None"}, {"sha": "5f9c41891685b0833cc50f84f70d186682f641cf", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -1037,7 +1037,7 @@ pub fn compile_unit_metadata<'ll, 'tcx>(\n ) -> &'ll DIDescriptor {\n     let mut name_in_debuginfo = match tcx.sess.local_crate_source_file {\n         Some(ref path) => path.clone(),\n-        None => PathBuf::from(&*tcx.crate_name(LOCAL_CRATE).as_str()),\n+        None => PathBuf::from(tcx.crate_name(LOCAL_CRATE).as_str()),\n     };\n \n     // To avoid breaking split DWARF, we need to ensure that each codegen unit\n@@ -1371,7 +1371,7 @@ fn closure_saved_names_of_captured_variables(tcx: TyCtxt<'_>, def_id: DefId) ->\n                 _ => return None,\n             };\n             let prefix = if is_ref { \"_ref__\" } else { \"\" };\n-            Some(prefix.to_owned() + &var.name.as_str())\n+            Some(prefix.to_owned() + var.name.as_str())\n         })\n         .collect::<Vec<_>>()\n }\n@@ -1949,7 +1949,7 @@ enum VariantInfo<'a, 'tcx> {\n impl<'tcx> VariantInfo<'_, 'tcx> {\n     fn map_struct_name<R>(&self, f: impl FnOnce(&str) -> R) -> R {\n         match self {\n-            VariantInfo::Adt(variant) => f(&variant.ident.as_str()),\n+            VariantInfo::Adt(variant) => f(variant.ident.as_str()),\n             VariantInfo::Generator { variant_index, .. } => {\n                 f(&GeneratorSubsts::variant_name(*variant_index))\n             }\n@@ -2114,8 +2114,8 @@ fn prepare_enum_metadata<'ll, 'tcx>(\n                 let item_name;\n                 let discriminant_name = match enum_type.kind() {\n                     ty::Adt(..) => {\n-                        item_name = tcx.item_name(enum_def_id).as_str();\n-                        &*item_name\n+                        item_name = tcx.item_name(enum_def_id);\n+                        item_name.as_str()\n                     }\n                     ty::Generator(..) => enum_name.as_str(),\n                     _ => bug!(),\n@@ -2448,7 +2448,7 @@ fn compute_type_parameters<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -\n                             cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                         let actual_type_metadata =\n                             type_metadata(cx, actual_type, rustc_span::DUMMY_SP);\n-                        let name = &name.as_str();\n+                        let name = name.as_str();\n                         Some(unsafe {\n                             Some(llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n                                 DIB(cx),\n@@ -2590,7 +2590,8 @@ pub fn create_global_var_metadata<'ll>(cx: &CodegenCx<'ll, '_>, def_id: DefId, g\n     let is_local_to_unit = is_node_local_to_unit(cx, def_id);\n     let variable_type = Instance::mono(cx.tcx, def_id).ty(cx.tcx, ty::ParamEnv::reveal_all());\n     let type_metadata = type_metadata(cx, variable_type, span);\n-    let var_name = tcx.item_name(def_id).as_str();\n+    let var_name = tcx.item_name(def_id);\n+    let var_name = var_name.as_str();\n     let linkage_name = mangled_name_of_instance(cx, Instance::mono(tcx, def_id)).name;\n     // When empty, linkage_name field is omitted,\n     // which is what we want for no_mangle statics"}, {"sha": "17071ba1b5bf343575266ca5cbff2fe051d1730b", "filename": "compiler/rustc_codegen_ssa/src/back/command.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fcommand.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -48,7 +48,7 @@ impl Command {\n     }\n \n     pub fn sym_arg(&mut self, arg: Symbol) -> &mut Command {\n-        self.arg(&*arg.as_str());\n+        self.arg(arg.as_str());\n         self\n     }\n "}, {"sha": "42a28f9429845a0c00e55f250bd3cb0e427e724b", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -88,7 +88,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n                 sess,\n                 crate_type,\n                 outputs,\n-                &codegen_results.crate_info.local_crate_name.as_str(),\n+                codegen_results.crate_info.local_crate_name.as_str(),\n             );\n             match crate_type {\n                 CrateType::Rlib => {"}, {"sha": "49b785afa69e9ab5435924fc85df171455aa61fb", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -672,7 +672,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         }\n \n         let cgu_reuse = cgu_reuse[i];\n-        tcx.sess.cgu_reuse_tracker.set_actual_reuse(&cgu.name().as_str(), cgu_reuse);\n+        tcx.sess.cgu_reuse_tracker.set_actual_reuse(cgu.name().as_str(), cgu_reuse);\n \n         match cgu_reuse {\n             CguReuse::No => {"}, {"sha": "00e76800d474cc6510a318b90a6c0804f4d4fac0", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -516,7 +516,7 @@ fn push_unqualified_item_name(\n ) {\n     match disambiguated_data.data {\n         DefPathData::CrateRoot => {\n-            output.push_str(&tcx.crate_name(def_id.krate).as_str());\n+            output.push_str(tcx.crate_name(def_id.krate).as_str());\n         }\n         DefPathData::ClosureExpr if tcx.generator_kind(def_id).is_some() => {\n             // Generators look like closures, but we want to treat them differently\n@@ -529,7 +529,7 @@ fn push_unqualified_item_name(\n         }\n         _ => match disambiguated_data.data.name() {\n             DefPathDataName::Named(name) => {\n-                output.push_str(&name.as_str());\n+                output.push_str(name.as_str());\n             }\n             DefPathDataName::Anon { namespace } => {\n                 if cpp_like_names(tcx) {"}, {"sha": "3657f80c2de80072298c508be2ebce7141ac1c70", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -68,7 +68,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let arg_tys = sig.inputs();\n         let ret_ty = sig.output();\n         let name = bx.tcx().item_name(def_id);\n-        let name_str = &*name.as_str();\n+        let name_str = name.as_str();\n \n         let llret_ty = bx.backend_type(bx.layout_of(ret_ty));\n         let result = PlaceRef::new_sized(llresult, fn_abi.ret.layout);\n@@ -375,7 +375,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 use crate::common::AtomicOrdering::*;\n                 use crate::common::{AtomicRmwBinOp, SynchronizationScope};\n \n-                let split: Vec<&str> = name_str.split('_').collect();\n+                let split: Vec<_> = name_str.split('_').collect();\n \n                 let is_cxchg = split[1] == \"cxchg\" || split[1] == \"cxchgweak\";\n                 let (order, failorder) = match split.len() {"}, {"sha": "058903dcdee55f90d0b8b807852173033082faff", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -82,7 +82,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> MPlaceTy<'tcx, M::PointerTag> {\n         let loc_details = &self.tcx.sess.opts.debugging_opts.location_detail;\n         let file = if loc_details.file {\n-            self.allocate_str(&filename.as_str(), MemoryKind::CallerLocation, Mutability::Not)\n+            self.allocate_str(filename.as_str(), MemoryKind::CallerLocation, Mutability::Not)\n         } else {\n             // FIXME: This creates a new allocation each time. It might be preferable to\n             // perform this allocation only once, and re-use the `MPlaceTy`."}, {"sha": "ca000f93eb6b5c521bb4614f186f046aa2344cce", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n     }\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-        self.path.push_str(&self.tcx.crate_name(cnum).as_str());\n+        self.path.push_str(self.tcx.crate_name(cnum).as_str());\n         Ok(self)\n     }\n "}, {"sha": "db0dea4870876d9a78c3c51632fc239ed7f11fd8", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -171,7 +171,7 @@ fn get_features(\n             }\n \n             if let Some(allowed) = sess.opts.debugging_opts.allow_features.as_ref() {\n-                if allowed.iter().all(|f| name.as_str() != *f) {\n+                if allowed.iter().all(|f| name.as_str() != f) {\n                     struct_span_err!(\n                         span_handler,\n                         mi.span(),"}, {"sha": "e9532dbe2cecad601031d8dfa21ee888ad4ee817", "filename": "compiler/rustc_expand/src/module.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmodule.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -103,10 +103,10 @@ crate fn mod_dir_path(\n             if let DirOwnership::Owned { relative } = &mut dir_ownership {\n                 if let Some(ident) = relative.take() {\n                     // Remove the relative offset.\n-                    dir_path.push(&*ident.as_str());\n+                    dir_path.push(ident.as_str());\n                 }\n             }\n-            dir_path.push(&*ident.as_str());\n+            dir_path.push(ident.as_str());\n \n             (dir_path, dir_ownership)\n         }\n@@ -170,8 +170,8 @@ fn mod_file_path_from_attr(\n ) -> Option<PathBuf> {\n     // Extract path string from first `#[path = \"path_string\"]` attribute.\n     let first_path = attrs.iter().find(|at| at.has_name(sym::path))?;\n-    let path_string = match first_path.value_str() {\n-        Some(s) => s.as_str(),\n+    let path_sym = match first_path.value_str() {\n+        Some(s) => s,\n         None => {\n             // This check is here mainly to catch attempting to use a macro,\n             // such as #[path = concat!(...)]. This isn't currently supported\n@@ -189,14 +189,16 @@ fn mod_file_path_from_attr(\n         }\n     };\n \n+    let path_str = path_sym.as_str();\n+\n     // On windows, the base path might have the form\n     // `\\\\?\\foo\\bar` in which case it does not tolerate\n     // mixed `/` and `\\` separators, so canonicalize\n     // `/` to `\\`.\n     #[cfg(windows)]\n-    let path_string = path_string.replace(\"/\", \"\\\\\");\n+    let path_str = path_str.replace(\"/\", \"\\\\\");\n \n-    Some(dir_path.join(&*path_string))\n+    Some(dir_path.join(path_str))\n }\n \n /// Returns a path to a module."}, {"sha": "56564656556ef8ab68d6151f8186f5edd6c242f6", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -331,9 +331,9 @@ pub struct Ident {\n \n impl Ident {\n     fn new(sess: &ParseSess, sym: Symbol, is_raw: bool, span: Span) -> Ident {\n-        let sym = nfc_normalize(&sym.as_str());\n+        let sym = nfc_normalize(sym.as_str());\n         let string = sym.as_str();\n-        if !rustc_lexer::is_ident(&string) {\n+        if !rustc_lexer::is_ident(string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)\n         }\n         if is_raw && !sym.can_be_raw() {"}, {"sha": "ed7afcc07b101a6afc37529aff4abf70bc5e7a8d", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -173,7 +173,7 @@ impl DisambiguatedDefPathData {\n                 if verbose && self.disambiguator != 0 {\n                     write!(writer, \"{}#{}\", name, self.disambiguator)\n                 } else {\n-                    writer.write_str(&name.as_str())\n+                    writer.write_str(name.as_str())\n                 }\n             }\n             DefPathDataName::Anon { namespace } => {\n@@ -499,7 +499,7 @@ impl DefPathData {\n impl fmt::Display for DefPathData {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.name() {\n-            DefPathDataName::Named(name) => f.write_str(&name.as_str()),\n+            DefPathDataName::Named(name) => f.write_str(name.as_str()),\n             // FIXME(#70334): this will generate legacy {{closure}}, {{impl}}, etc\n             DefPathDataName::Anon { namespace } => write!(f, \"{{{{{}}}}}\", namespace),\n         }"}, {"sha": "0d0d09bde5b992e45ec75aa6918805ec642b2487", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> IfThisChanged<'tcx> {\n                         DepNode::from_def_path_hash(self.tcx, def_path_hash, DepKind::hir_owner)\n                     }\n                     Some(n) => {\n-                        match DepNode::from_label_string(self.tcx, &n.as_str(), def_path_hash) {\n+                        match DepNode::from_label_string(self.tcx, n.as_str(), def_path_hash) {\n                             Ok(n) => n,\n                             Err(()) => {\n                                 self.tcx.sess.span_fatal(\n@@ -147,7 +147,7 @@ impl<'tcx> IfThisChanged<'tcx> {\n                 let dep_node_interned = self.argument(attr);\n                 let dep_node = match dep_node_interned {\n                     Some(n) => {\n-                        match DepNode::from_label_string(self.tcx, &n.as_str(), def_path_hash) {\n+                        match DepNode::from_label_string(self.tcx, n.as_str(), def_path_hash) {\n                             Ok(n) => n,\n                             Err(()) => {\n                                 self.tcx.sess.span_fatal("}, {"sha": "4b235213f7f5ce65fc50c16bf8ee13068b13c3e6", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> AssertModuleSource<'tcx> {\n \n         debug!(\"mapping '{}' to cgu name '{}'\", self.field(attr, sym::module), cgu_name);\n \n-        if !self.available_cgus.contains(&*cgu_name.as_str()) {\n+        if !self.available_cgus.contains(cgu_name.as_str()) {\n             self.tcx.sess.span_err(\n                 attr.span,\n                 &format!("}, {"sha": "6b190dad925f6adbab21c532e9bab0e1842fea23", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -2252,8 +2252,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             .map(|p| p.name.as_str()),\n                     );\n                 }\n-                let lts = lts_names.iter().map(|s| -> &str { &*s }).collect::<Vec<_>>();\n-                possible.find(|candidate| !lts.contains(&candidate.as_str()))\n+                possible.find(|candidate| !lts_names.contains(&&candidate[..]))\n             })\n             .unwrap_or(\"'lt\".to_string());\n         let add_lt_sugg = generics"}, {"sha": "d11cc52b50860fd7e222fc4c99350afd110e250b", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -324,7 +324,7 @@ pub fn configure_and_expand(\n         let crate_attrs = krate.attrs.clone();\n         let extern_mod_loaded = |ident: Ident, attrs, items, span| {\n             let krate = ast::Crate { attrs, items, span, is_placeholder: None };\n-            pre_expansion_lint(sess, lint_store, &krate, &crate_attrs, &ident.name.as_str());\n+            pre_expansion_lint(sess, lint_store, &krate, &crate_attrs, ident.name.as_str());\n             (krate.attrs, krate.items)\n         };\n         let mut ecx = ExtCtxt::new(sess, cfg, resolver, Some(&extern_mod_loaded));\n@@ -631,7 +631,7 @@ fn write_out_deps(\n         // (e.g. accessed in proc macros).\n         let file_depinfo = sess.parse_sess.file_depinfo.borrow();\n         let extra_tracked_files = file_depinfo.iter().map(|path_sym| {\n-            let path = PathBuf::from(&*path_sym.as_str());\n+            let path = PathBuf::from(path_sym.as_str());\n             let file = FileName::from(path);\n             escape_dep_filename(&file.prefer_local().to_string())\n         });\n@@ -1049,8 +1049,8 @@ fn encode_and_write_metadata(\n \n     let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n     if need_metadata_file {\n-        let crate_name = &tcx.crate_name(LOCAL_CRATE).as_str();\n-        let out_filename = filename_for_metadata(tcx.sess, crate_name, outputs);\n+        let crate_name = tcx.crate_name(LOCAL_CRATE);\n+        let out_filename = filename_for_metadata(tcx.sess, crate_name.as_str(), outputs);\n         // To avoid races with another rustc process scanning the output directory,\n         // we need to write the file somewhere else and atomically move it to its\n         // final destination, with an `fs::rename` call. In order for the rename to"}, {"sha": "c0384875a47c9b917450f4bafb6d36b07ceabffd", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -3181,7 +3181,7 @@ impl<'tcx> LateLintPass<'tcx> for NamedAsmLabels {\n         } = expr\n         {\n             for (template_sym, template_snippet, template_span) in template_strs.iter() {\n-                let template_str = &template_sym.as_str();\n+                let template_str = template_sym.as_str();\n                 let find_label_span = |needle: &str| -> Option<Span> {\n                     if let Some(template_snippet) = template_snippet {\n                         let snippet = template_snippet.as_str();"}, {"sha": "f024b4bb74c2486741ccb15924e6ca7bb697971b", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -381,10 +381,10 @@ impl LintStore {\n             lint_name,\n             self.lint_groups.keys().collect::<Vec<_>>()\n         );\n-        let lint_name_str = &*lint_name.as_str();\n-        self.lint_groups.contains_key(&lint_name_str) || {\n+        let lint_name_str = lint_name.as_str();\n+        self.lint_groups.contains_key(lint_name_str) || {\n             let warnings_name_str = crate::WARNINGS.name_lower();\n-            lint_name_str == &*warnings_name_str\n+            lint_name_str == warnings_name_str\n         }\n     }\n "}, {"sha": "fc99d759a03f594d45afb1db5b2bf65eea5a4ba9", "filename": "compiler/rustc_lint/src/hidden_unicode_codepoints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -127,7 +127,7 @@ impl HiddenUnicodeCodepoints {\n impl EarlyLintPass for HiddenUnicodeCodepoints {\n     fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {\n         if let ast::AttrKind::DocComment(_, comment) = attr.kind {\n-            if contains_text_flow_control_chars(&comment.as_str()) {\n+            if contains_text_flow_control_chars(comment.as_str()) {\n                 self.lint_text_direction_codepoint(cx, comment, attr.span, 0, false, \"doc comment\");\n             }\n         }\n@@ -138,7 +138,7 @@ impl EarlyLintPass for HiddenUnicodeCodepoints {\n         let (text, span, padding) = match &expr.kind {\n             ast::ExprKind::Lit(ast::Lit { token, kind, span }) => {\n                 let text = token.symbol;\n-                if !contains_text_flow_control_chars(&text.as_str()) {\n+                if !contains_text_flow_control_chars(text.as_str()) {\n                     return;\n                 }\n                 let padding = match kind {"}, {"sha": "d3fa08650d8740937c6b132553831cf5133b5dae", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -154,7 +154,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         LintLevelSource::Node(_, forbid_source_span, reason) => {\n                             diag_builder.span_label(forbid_source_span, \"`forbid` level set here\");\n                             if let Some(rationale) = reason {\n-                                diag_builder.note(&rationale.as_str());\n+                                diag_builder.note(rationale.as_str());\n                             }\n                         }\n                         LintLevelSource::CommandLine(_, _) => {"}, {"sha": "a570206f1eef771bcf9f4cfbf66e19a4378870ea", "filename": "compiler/rustc_lint/src/non_ascii_idents.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_ascii_idents.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -218,8 +218,7 @@ impl EarlyLintPass for NonAsciiIdents {\n                             cx.struct_span_lint(CONFUSABLE_IDENTS, sp, |lint| {\n                                 lint.build(&format!(\n                                     \"identifier pair considered confusable between `{}` and `{}`\",\n-                                    existing_symbol.as_str(),\n-                                    symbol.as_str()\n+                                    existing_symbol, symbol\n                                 ))\n                                 .span_label(\n                                     *existing_span,"}, {"sha": "a919b3c82aa028b71ba7834f1ddb902657b3f3ed", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_parse_format::{ParseMode, Parser, Piece};\n use rustc_session::lint::FutureIncompatibilityReason;\n use rustc_span::edition::Edition;\n-use rustc_span::{hygiene, sym, symbol::kw, symbol::SymbolStr, InnerSpan, Span, Symbol};\n+use rustc_span::{hygiene, sym, symbol::kw, InnerSpan, Span, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n declare_lint! {\n@@ -71,14 +71,14 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n     if let hir::ExprKind::Lit(lit) = &arg.kind {\n         if let ast::LitKind::Str(sym, _) = lit.node {\n             // The argument is a string literal.\n-            check_panic_str(cx, f, arg, &sym.as_str());\n+            check_panic_str(cx, f, arg, sym.as_str());\n             return;\n         }\n     }\n \n     // The argument is *not* a string literal.\n \n-    let (span, panic, symbol_str) = panic_call(cx, f);\n+    let (span, panic, symbol) = panic_call(cx, f);\n \n     if in_external_macro(cx.sess(), span) {\n         // Nothing that can be done about it in the current crate.\n@@ -103,7 +103,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n \n     cx.struct_span_lint(NON_FMT_PANICS, arg_span, |lint| {\n         let mut l = lint.build(\"panic message is not a string literal\");\n-        l.note(&format!(\"this usage of {}!() is deprecated; it will be a hard error in Rust 2021\", symbol_str));\n+        l.note(&format!(\"this usage of {}!() is deprecated; it will be a hard error in Rust 2021\", symbol));\n         l.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\");\n         if !is_arg_inside_call(arg_span, span) {\n             // No clue where this argument is coming from.\n@@ -112,7 +112,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         }\n         if arg_macro.map_or(false, |id| cx.tcx.is_diagnostic_item(sym::format_macro, id)) {\n             // A case of `panic!(format!(..))`.\n-            l.note(format!(\"the {}!() macro supports formatting, so there's no need for the format!() macro here\", symbol_str).as_str());\n+            l.note(format!(\"the {}!() macro supports formatting, so there's no need for the format!() macro here\", symbol).as_str());\n             if let Some((open, close, _)) = find_delimiters(cx, arg_span) {\n                 l.multipart_suggestion(\n                     \"remove the `format!(..)` macro call\",\n@@ -301,7 +301,7 @@ fn find_delimiters<'tcx>(cx: &LateContext<'tcx>, span: Span) -> Option<(Span, Sp\n     ))\n }\n \n-fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span, Symbol, SymbolStr) {\n+fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span, Symbol, Symbol) {\n     let mut expn = f.span.ctxt().outer_expn_data();\n \n     let mut panic_macro = kw::Empty;\n@@ -328,7 +328,7 @@ fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span,\n \n     let macro_symbol =\n         if let hygiene::ExpnKind::Macro(_, symbol) = expn.kind { symbol } else { sym::panic };\n-    (expn.call_site, panic_macro, macro_symbol.as_str())\n+    (expn.call_site, panic_macro, macro_symbol)\n }\n \n fn is_arg_inside_call(arg: Span, call: Span) -> bool {"}, {"sha": "be7756b0f28f6c97e2df3ff9fbf2992bc3640c74", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -133,7 +133,7 @@ fn to_camel_case(s: &str) -> String {\n \n impl NonCamelCaseTypes {\n     fn check_case(&self, cx: &EarlyContext<'_>, sort: &str, ident: &Ident) {\n-        let name = &ident.name.as_str();\n+        let name = ident.name.as_str();\n \n         if !is_camel_case(name) {\n             cx.struct_span_lint(NON_CAMEL_CASE_TYPES, ident.span, |lint| {\n@@ -276,7 +276,7 @@ impl NonSnakeCase {\n             })\n         }\n \n-        let name = &ident.name.as_str();\n+        let name = ident.name.as_str();\n \n         if !is_snake_case(name) {\n             cx.struct_span_lint(NON_SNAKE_CASE, ident.span, |lint| {\n@@ -484,7 +484,7 @@ declare_lint_pass!(NonUpperCaseGlobals => [NON_UPPER_CASE_GLOBALS]);\n \n impl NonUpperCaseGlobals {\n     fn check_upper_case(cx: &LateContext<'_>, sort: &str, ident: &Ident) {\n-        let name = &ident.name.as_str();\n+        let name = ident.name.as_str();\n         if name.chars().any(|c| c.is_lowercase()) {\n             cx.struct_span_lint(NON_UPPER_CASE_GLOBALS, ident.span, |lint| {\n                 let uc = NonSnakeCase::to_snake_case(&name).to_uppercase();"}, {"sha": "755e24d541398a47139422053152839b87040704", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -315,7 +315,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         let mut err = lint.build(&msg);\n                         // check for #[must_use = \"...\"]\n                         if let Some(note) = attr.value_str() {\n-                            err.note(&note.as_str());\n+                            err.note(note.as_str());\n                         }\n                         err.emit();\n                     });"}, {"sha": "c0da386edfdf19c8b0a0e39bcfbd9536d1aa83cc", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -292,7 +292,7 @@ impl<'a> CrateLoader<'a> {\n             // `source` stores paths which are normalized which may be different\n             // from the strings on the command line.\n             let source = self.cstore.get_crate_data(cnum).cdata.source();\n-            if let Some(entry) = self.sess.opts.externs.get(&name.as_str()) {\n+            if let Some(entry) = self.sess.opts.externs.get(name.as_str()) {\n                 // Only use `--extern crate_name=path` here, not `--extern crate_name`.\n                 if let Some(mut files) = entry.files() {\n                     if files.any(|l| {\n@@ -381,7 +381,7 @@ impl<'a> CrateLoader<'a> {\n         let host_hash = host_lib.as_ref().map(|lib| lib.metadata.get_root().hash());\n \n         let private_dep =\n-            self.sess.opts.externs.get(&name.as_str()).map_or(false, |e| e.is_private_dep);\n+            self.sess.opts.externs.get(name.as_str()).map_or(false, |e| e.is_private_dep);\n \n         // Claim this crate number and cache it\n         let cnum = self.cstore.alloc_new_crate_num();\n@@ -997,7 +997,7 @@ impl<'a> CrateLoader<'a> {\n                 );\n                 let name = match orig_name {\n                     Some(orig_name) => {\n-                        validate_crate_name(self.sess, &orig_name.as_str(), Some(item.span));\n+                        validate_crate_name(self.sess, orig_name.as_str(), Some(item.span));\n                         orig_name\n                     }\n                     None => item.ident.name,"}, {"sha": "13ea089e245a63048d16668c47627c4a72a9a801", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -315,7 +315,7 @@ impl<'a> CrateLocator<'a> {\n             exact_paths: if hash.is_none() {\n                 sess.opts\n                     .externs\n-                    .get(&crate_name.as_str())\n+                    .get(crate_name.as_str())\n                     .into_iter()\n                     .filter_map(|entry| entry.files())\n                     .flatten()\n@@ -976,7 +976,8 @@ impl CrateError {\n                 let candidates = libraries\n                     .iter()\n                     .map(|lib| {\n-                        let crate_name = &lib.metadata.get_root().name().as_str();\n+                        let crate_name = lib.metadata.get_root().name();\n+                        let crate_name = crate_name.as_str();\n                         let mut paths = lib.source.paths();\n \n                         // This `unwrap()` should be okay because there has to be at least one\n@@ -1174,7 +1175,7 @@ impl CrateError {\n                     } else if crate_name\n                         == Symbol::intern(&sess.opts.debugging_opts.profiler_runtime)\n                     {\n-                        err.note(&\"the compiler may have been built without the profiler runtime\");\n+                        err.note(\"the compiler may have been built without the profiler runtime\");\n                     } else if crate_name.as_str().starts_with(\"rustc_\") {\n                         err.help(\n                             \"maybe you need to install the missing components with: \\"}, {"sha": "639d2e617c77a4ad6f09c89920daeae986a66880", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                         Some(name) => name,\n                         None => continue, // skip like historical compilers\n                     };\n-                    lib.kind = match &*kind.as_str() {\n+                    lib.kind = match kind.as_str() {\n                         \"static\" => NativeLibKind::Static { bundle: None, whole_archive: None },\n                         \"static-nobundle\" => {\n                             sess.struct_span_warn("}, {"sha": "66857625e88af03d9a837b7ac43ce1dbaecbfa25", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -319,7 +319,7 @@ pub fn struct_lint_level<'s, 'd>(\n             }\n             LintLevelSource::Node(lint_attr_name, src, reason) => {\n                 if let Some(rationale) = reason {\n-                    err.note(&rationale.as_str());\n+                    err.note(rationale.as_str());\n                 }\n                 sess.diag_span_note_once(\n                     &mut err,"}, {"sha": "fc35cafcc77a16bc30e1080404ddb121a3b435dc", "filename": "compiler/rustc_middle/src/middle/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -21,7 +21,7 @@ pub mod lib_features {\n                 .map(|(f, s)| (*f, Some(*s)))\n                 .chain(self.unstable.iter().map(|f| (*f, None)))\n                 .collect();\n-            all_features.sort_unstable_by_key(|f| f.0.as_str());\n+            all_features.sort_unstable_by(|a, b| a.0.as_str().partial_cmp(b.0.as_str()).unwrap());\n             all_features\n         }\n     }"}, {"sha": "acc8b92b97ac0ae298f927d2f0653dbfb789b5d0", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -131,8 +131,7 @@ pub fn report_unstable(\n /// deprecated (i.e., whether X is not greater than the current rustc version).\n pub fn deprecation_in_effect(depr: &Deprecation) -> bool {\n     let is_since_rustc_version = depr.is_since_rustc_version;\n-    let since = depr.since.map(Symbol::as_str);\n-    let since = since.as_deref();\n+    let since = depr.since.as_ref().map(Symbol::as_str);\n \n     fn parse_version(ver: &str) -> Vec<u32> {\n         // We ignore non-integer components of the version (e.g., \"nightly\").\n@@ -197,7 +196,7 @@ fn deprecation_message(\n     let message = if is_in_effect {\n         format!(\"use of deprecated {} `{}`\", kind, path)\n     } else {\n-        let since = since.map(Symbol::as_str);\n+        let since = since.as_ref().map(Symbol::as_str);\n \n         if since.as_deref() == Some(\"TBD\") {\n             format!(\"use of {} `{}` that will be deprecated in a future Rust version\", kind, path)"}, {"sha": "0028f8a79466eba1a4a9dd75c7aa83e459fef14a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -2444,7 +2444,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             CtorKind::Fictive => {\n                                 let mut struct_fmt = fmt.debug_struct(&name);\n                                 for (field, place) in iter::zip(&variant_def.fields, places) {\n-                                    struct_fmt.field(&field.ident.as_str(), place);\n+                                    struct_fmt.field(field.ident.as_str(), place);\n                                 }\n                                 struct_fmt.finish()\n                             }\n@@ -2473,7 +2473,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n                                 for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                     let var_name = tcx.hir().name(var_id);\n-                                    struct_fmt.field(&var_name.as_str(), place);\n+                                    struct_fmt.field(var_name.as_str(), place);\n                                 }\n                             }\n \n@@ -2493,7 +2493,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n                                 for (&var_id, place) in iter::zip(upvars.keys(), places) {\n                                     let var_name = tcx.hir().name(var_id);\n-                                    struct_fmt.field(&var_name.as_str(), place);\n+                                    struct_fmt.field(var_name.as_str(), place);\n                                 }\n                             }\n "}, {"sha": "facd7abbc9da180a20ab4040b33f837a2ef64f00", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -338,7 +338,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n     }\n \n     pub fn work_product_id(&self) -> WorkProductId {\n-        WorkProductId::from_cgu_name(&self.name().as_str())\n+        WorkProductId::from_cgu_name(self.name().as_str())\n     }\n \n     pub fn work_product(&self, tcx: TyCtxt<'_>) -> WorkProduct {\n@@ -470,7 +470,7 @@ impl CodegenUnitNameBuilder<'tcx> {\n         if self.tcx.sess.opts.debugging_opts.human_readable_cgu_names {\n             cgu_name\n         } else {\n-            Symbol::intern(&CodegenUnit::mangle_name(&cgu_name.as_str()))\n+            Symbol::intern(&CodegenUnit::mangle_name(cgu_name.as_str()))\n         }\n     }\n "}, {"sha": "0c31adebda09229e410288e09cf9ab08347d80c7", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -1216,8 +1216,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {\n-        let cname = self.crate_name(LOCAL_CRATE).as_str();\n-        self.sess.consider_optimizing(&cname, msg)\n+        let cname = self.crate_name(LOCAL_CRATE);\n+        self.sess.consider_optimizing(cname.as_str(), msg)\n     }\n \n     /// Obtain all lang items of this crate and all dependencies (recursively)"}, {"sha": "dfb73e99d461af9a9d49d72b82cdb5934eeb3cb3", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -303,7 +303,7 @@ pub trait PrettyPrinter<'tcx>:\n         match self.tcx().trimmed_def_paths(()).get(&def_id) {\n             None => Ok((self, false)),\n             Some(symbol) => {\n-                self.write_str(&symbol.as_str())?;\n+                self.write_str(symbol.as_str())?;\n                 Ok((self, true))\n             }\n         }"}, {"sha": "09cadc907b18a96dd566e28547ce84686f7a4827", "filename": "compiler/rustc_monomorphize/src/partitioning/merging.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmerging.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -3,7 +3,7 @@ use std::cmp;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder};\n-use rustc_span::symbol::{Symbol, SymbolStr};\n+use rustc_span::symbol::Symbol;\n \n use super::PartitioningCx;\n use crate::partitioning::PreInliningPartitioning;\n@@ -24,11 +24,11 @@ pub fn merge_codegen_units<'tcx>(\n     // smallest into each other) we're sure to start off with a deterministic\n     // order (sorted by name). This'll mean that if two cgus have the same size\n     // the stable sort below will keep everything nice and deterministic.\n-    codegen_units.sort_by_cached_key(|cgu| cgu.name().as_str());\n+    codegen_units.sort_by(|a, b| a.name().as_str().partial_cmp(b.name().as_str()).unwrap());\n \n     // This map keeps track of what got merged into what.\n-    let mut cgu_contents: FxHashMap<Symbol, Vec<SymbolStr>> =\n-        codegen_units.iter().map(|cgu| (cgu.name(), vec![cgu.name().as_str()])).collect();\n+    let mut cgu_contents: FxHashMap<Symbol, Vec<Symbol>> =\n+        codegen_units.iter().map(|cgu| (cgu.name(), vec![cgu.name()])).collect();\n \n     // Merge the two smallest codegen units until the target size is reached.\n     while codegen_units.len() > cx.target_cgu_count {\n@@ -69,7 +69,7 @@ pub fn merge_codegen_units<'tcx>(\n             // were actually modified by merging.\n             .filter(|(_, cgu_contents)| cgu_contents.len() > 1)\n             .map(|(current_cgu_name, cgu_contents)| {\n-                let mut cgu_contents: Vec<&str> = cgu_contents.iter().map(|s| &s[..]).collect();\n+                let mut cgu_contents: Vec<&str> = cgu_contents.iter().map(|s| s.as_str()).collect();\n \n                 // Sort the names, so things are deterministic and easy to\n                 // predict."}, {"sha": "dc22ffc6747ac8c4eda8473265610e612bd9f9ef", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -208,7 +208,7 @@ pub fn partition<'tcx>(\n         internalization_candidates: _,\n     } = post_inlining;\n \n-    result.sort_by_cached_key(|cgu| cgu.name().as_str());\n+    result.sort_by(|a, b| a.name().as_str().partial_cmp(b.name().as_str()).unwrap());\n \n     result\n }\n@@ -366,7 +366,7 @@ fn collect_and_partition_mono_items<'tcx>(\n         for cgu in codegen_units {\n             tcx.prof.artifact_size(\n                 \"codegen_unit_size_estimate\",\n-                &cgu.name().as_str()[..],\n+                cgu.name().as_str(),\n                 cgu.size_estimate() as u64,\n             );\n         }\n@@ -401,7 +401,7 @@ fn collect_and_partition_mono_items<'tcx>(\n                 cgus.dedup();\n                 for &(ref cgu_name, (linkage, _)) in cgus.iter() {\n                     output.push(' ');\n-                    output.push_str(&cgu_name.as_str());\n+                    output.push_str(cgu_name.as_str());\n \n                     let linkage_abbrev = match linkage {\n                         Linkage::External => \"External\","}, {"sha": "f706a98a4fcfa76fa625eed83bad1f2556b19f61", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -1639,7 +1639,7 @@ impl<'a> Parser<'a> {\n                     next_token.kind\n                 {\n                     if self.token.span.hi() == next_token.span.lo() {\n-                        let s = String::from(\"0.\") + &symbol.as_str();\n+                        let s = String::from(\"0.\") + symbol.as_str();\n                         let kind = TokenKind::lit(token::Float, Symbol::intern(&s), suffix);\n                         return Some(Token::new(kind, self.token.span.to(next_token.span)));\n                     }\n@@ -1710,7 +1710,8 @@ impl<'a> Parser<'a> {\n                 );\n             }\n             LitError::InvalidIntSuffix => {\n-                let suf = suffix.expect(\"suffix error with no suffix\").as_str();\n+                let suf = suffix.expect(\"suffix error with no suffix\");\n+                let suf = suf.as_str();\n                 if looks_like_width_suffix(&['i', 'u'], &suf) {\n                     // If it looks like a width, try to be helpful.\n                     let msg = format!(\"invalid width `{}` for integer literal\", &suf[1..]);\n@@ -1726,8 +1727,9 @@ impl<'a> Parser<'a> {\n                 }\n             }\n             LitError::InvalidFloatSuffix => {\n-                let suf = suffix.expect(\"suffix error with no suffix\").as_str();\n-                if looks_like_width_suffix(&['f'], &suf) {\n+                let suf = suffix.expect(\"suffix error with no suffix\");\n+                let suf = suf.as_str();\n+                if looks_like_width_suffix(&['f'], suf) {\n                     // If it looks like a width, try to be helpful.\n                     let msg = format!(\"invalid width `{}` for float literal\", &suf[1..]);\n                     self.struct_span_err(span, &msg).help(\"valid widths are 32 and 64\").emit();"}, {"sha": "d7b00699491d4d71f4efb8959b497aa8edd4f271", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -607,7 +607,7 @@ impl CheckAttrVisitor<'_> {\n             return err_fn(meta.span(), &format!(\"isn't allowed on {}\", err));\n         }\n         let item_name = self.tcx.hir().name(hir_id);\n-        if &*item_name.as_str() == doc_alias {\n+        if item_name.as_str() == doc_alias {\n             return err_fn(meta.span(), \"is the same as the item's name\");\n         }\n         let span = meta.span();\n@@ -636,7 +636,7 @@ impl CheckAttrVisitor<'_> {\n                         LitKind::Str(s, _) => {\n                             if !self.check_doc_alias_value(\n                                 v,\n-                                &s.as_str(),\n+                                s.as_str(),\n                                 hir_id,\n                                 target,\n                                 true,"}, {"sha": "9ee305b712f61ba495a9db0356fe4c2627be2f0a", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -1464,7 +1464,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         if name == kw::Empty {\n             return None;\n         }\n-        let name: &str = &name.as_str();\n+        let name = name.as_str();\n         if name.as_bytes()[0] == b'_' {\n             return None;\n         }"}, {"sha": "da318fc762290344b4fc65ebcfaf42ac62cdb5a5", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -61,8 +61,8 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n \n         match def_key.disambiguated_data.data {\n             DefPathData::CrateRoot => {\n-                crate_name = self.tcx.crate_name(def_id.krate).as_str();\n-                name = &*crate_name;\n+                crate_name = self.tcx.crate_name(def_id.krate);\n+                name = crate_name.as_str();\n                 dis = \"\";\n                 end_index = 3;\n             }"}, {"sha": "babfa8015af6c359f7b93addc9d16261e47d69c9", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -1,4 +1,3 @@\n-use std::cmp::Reverse;\n use std::ptr;\n \n use rustc_ast::{self as ast, Path};\n@@ -784,7 +783,7 @@ impl<'a> Resolver<'a> {\n         });\n \n         // Make sure error reporting is deterministic.\n-        suggestions.sort_by_cached_key(|suggestion| suggestion.candidate.as_str());\n+        suggestions.sort_by(|a, b| a.candidate.as_str().partial_cmp(b.candidate.as_str()).unwrap());\n \n         match find_best_match_for_name(\n             &suggestions.iter().map(|suggestion| suggestion.candidate).collect::<Vec<Symbol>>(),\n@@ -1186,7 +1185,7 @@ impl<'a> Resolver<'a> {\n                 (\"\", \" from prelude\")\n             } else if b.is_extern_crate()\n                 && !b.is_import()\n-                && self.session.opts.externs.get(&ident.as_str()).is_some()\n+                && self.session.opts.externs.get(ident.as_str()).is_some()\n             {\n                 (\"\", \" passed with `--extern`\")\n             } else if add_built_in {\n@@ -1481,12 +1480,12 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             return None;\n         }\n \n-        // Sort extern crate names in reverse order to get\n+        // Sort extern crate names in *reverse* order to get\n         // 1) some consistent ordering for emitted diagnostics, and\n         // 2) `std` suggestions before `core` suggestions.\n         let mut extern_crate_names =\n             self.r.extern_prelude.iter().map(|(ident, _)| ident.name).collect::<Vec<_>>();\n-        extern_crate_names.sort_by_key(|name| Reverse(name.as_str()));\n+        extern_crate_names.sort_by(|a, b| b.as_str().partial_cmp(a.as_str()).unwrap());\n \n         for name in extern_crate_names.into_iter() {\n             // Replace first ident with a crate name and check if that is valid."}, {"sha": "e74a7a956508062be874e5baab6914c02a2bcc8c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -231,7 +231,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         let is_assoc_fn = self.self_type_is_available(span);\n         // Emit help message for fake-self from other languages (e.g., `this` in Javascript).\n-        if [\"this\", \"my\"].contains(&&*item_str.as_str()) && is_assoc_fn {\n+        if [\"this\", \"my\"].contains(&item_str.as_str()) && is_assoc_fn {\n             err.span_suggestion_short(\n                 span,\n                 \"you might have meant to use `self` here instead\",\n@@ -1358,7 +1358,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         let name = path[path.len() - 1].ident.name;\n         // Make sure error reporting is deterministic.\n-        names.sort_by_cached_key(|suggestion| suggestion.candidate.as_str());\n+        names.sort_by(|a, b| a.candidate.as_str().partial_cmp(b.candidate.as_str()).unwrap());\n \n         match find_best_match_for_name(\n             &names.iter().map(|suggestion| suggestion.candidate).collect::<Vec<Symbol>>(),\n@@ -1377,7 +1377,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     fn likely_rust_type(path: &[Segment]) -> Option<Symbol> {\n         let name = path[path.len() - 1].ident.as_str();\n         // Common Java types\n-        Some(match &*name {\n+        Some(match name {\n             \"byte\" => sym::u8, // In Java, bytes are signed, but in practice one almost always wants unsigned bytes.\n             \"short\" => sym::i16,\n             \"boolean\" => sym::bool,\n@@ -2345,7 +2345,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                         _ => None,\n                     });\n                 }\n-                suggest_existing(err, &name.as_str()[..], suggs);\n+                suggest_existing(err, name.as_str(), suggs);\n             }\n             [] => {\n                 let mut suggs = Vec::new();"}, {"sha": "02e57109bbd830cd56f86146fd3e8e533853f899", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -689,11 +689,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         hir_id: hir::HirId,\n     ) {\n         let name = match fk {\n-            intravisit::FnKind::ItemFn(id, _, _, _) => id.as_str(),\n-            intravisit::FnKind::Method(id, _, _) => id.as_str(),\n-            intravisit::FnKind::Closure => Symbol::intern(\"closure\").as_str(),\n+            intravisit::FnKind::ItemFn(id, _, _, _) => id.name,\n+            intravisit::FnKind::Method(id, _, _) => id.name,\n+            intravisit::FnKind::Closure => sym::closure,\n         };\n-        let name: &str = &name;\n+        let name = name.as_str();\n         let span = span!(Level::DEBUG, \"visit_fn\", name);\n         let _enter = span.enter();\n         match fk {"}, {"sha": "84ce492ba720386a3a2939d4ac20be8e64545ebe", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -3481,7 +3481,7 @@ fn names_to_string(names: &[Symbol]) -> String {\n         if Ident::with_dummy_span(*name).is_raw_guess() {\n             result.push_str(\"r#\");\n         }\n-        result.push_str(&name.as_str());\n+        result.push_str(name.as_str());\n     }\n     result\n }"}, {"sha": "52685ec697ce8a8ca53545a3ce7150d4b38143f0", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -105,7 +105,7 @@ fn fast_print_path(path: &ast::Path) -> Symbol {\n                 path_str.push_str(\"::\");\n             }\n             if segment.ident.name != kw::PathRoot {\n-                path_str.push_str(&segment.ident.as_str())\n+                path_str.push_str(segment.ident.as_str())\n             }\n         }\n         Symbol::intern(&path_str)"}, {"sha": "7ec619e07ff9bb7cd5090589df83fee4f3f9ad8d", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -825,7 +825,7 @@ impl<'tcx> SaveContext<'tcx> {\n         for attr in attrs {\n             if let Some(val) = attr.doc_str() {\n                 // FIXME: Should save-analysis beautify doc strings itself or leave it to users?\n-                result.push_str(&beautify_doc_string(val).as_str());\n+                result.push_str(beautify_doc_string(val).as_str());\n                 result.push('\\n');\n             }\n         }"}, {"sha": "e43344ad6d9eff888d516d082d52d2cec971fe67", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -616,7 +616,7 @@ impl<'hir> Sig for hir::Generics<'hir> {\n             if let hir::GenericParamKind::Const { .. } = param.kind {\n                 param_text.push_str(\"const \");\n             }\n-            param_text.push_str(&param.name.ident().as_str());\n+            param_text.push_str(param.name.ident().as_str());\n             defs.push(SigElement {\n                 id: id_from_hir_id(param.hir_id, scx),\n                 start: offset + text.len(),"}, {"sha": "bca19e84cf87579b626f2a2deaa60ca540b8398f", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -60,7 +60,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n \n     if let Some(ref s) = sess.opts.crate_name {\n         if let Some((attr, name)) = attr_crate_name {\n-            if name.as_str() != *s {\n+            if name.as_str() != s {\n                 let msg = format!(\n                     \"`--crate-name` and `#[crate_name]` are \\\n                                    required to match, but `{}` != `{}`\","}, {"sha": "aed699e4839e90a0fb2c0b21c7045f989df91755", "filename": "compiler/rustc_span/src/lev_distance.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -55,7 +55,7 @@ pub fn find_best_match_for_name(\n     lookup: Symbol,\n     dist: Option<usize>,\n ) -> Option<Symbol> {\n-    let lookup = &lookup.as_str();\n+    let lookup = lookup.as_str();\n     let max_dist = dist.unwrap_or_else(|| cmp::max(lookup.len(), 3) / 3);\n \n     // Priority of matches:\n@@ -70,7 +70,7 @@ pub fn find_best_match_for_name(\n     let levenshtein_match = name_vec\n         .iter()\n         .filter_map(|&name| {\n-            let dist = lev_distance(lookup, &name.as_str());\n+            let dist = lev_distance(lookup, name.as_str());\n             if dist <= max_dist { Some((name, dist)) } else { None }\n         })\n         // Here we are collecting the next structure:\n@@ -88,7 +88,7 @@ pub fn find_best_match_for_name(\n \n fn find_match_by_sorted_words(iter_names: &[Symbol], lookup: &str) -> Option<Symbol> {\n     iter_names.iter().fold(None, |result, candidate| {\n-        if sort_by_words(&candidate.as_str()) == sort_by_words(lookup) {\n+        if sort_by_words(candidate.as_str()) == sort_by_words(lookup) {\n             Some(*candidate)\n         } else {\n             result"}, {"sha": "51a7a2644f69545d350481a927a1360b11926805", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 22, "deletions": 82, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -1512,9 +1512,12 @@ impl Ident {\n         Ident::new(self.name, self.span.normalize_to_macro_rules())\n     }\n \n-    /// Convert the name to a `SymbolStr`. This is a slowish operation because\n-    /// it requires locking the symbol interner.\n-    pub fn as_str(self) -> SymbolStr {\n+    /// Access the underlying string. This is a slowish operation because it\n+    /// requires locking the symbol interner.\n+    ///\n+    /// Note that the lifetime of the return value is a lie. See\n+    /// `Symbol::as_str()` for details.\n+    pub fn as_str(&self) -> &str {\n         self.name.as_str()\n     }\n }\n@@ -1650,12 +1653,17 @@ impl Symbol {\n         with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))\n     }\n \n-    /// Convert to a `SymbolStr`. This is a slowish operation because it\n+    /// Access the underlying string. This is a slowish operation because it\n     /// requires locking the symbol interner.\n-    pub fn as_str(self) -> SymbolStr {\n-        with_session_globals(|session_globals| {\n-            let symbol_str = session_globals.symbol_interner.get(self);\n-            unsafe { SymbolStr { string: std::mem::transmute::<&str, &str>(symbol_str) } }\n+    ///\n+    /// Note that the lifetime of the return value is a lie. It's not the same\n+    /// as `&self`, but actually tied to the lifetime of the underlying\n+    /// interner. Interners are long-lived, and there are very few of them, and\n+    /// this function is typically used for short-lived things, so in practice\n+    /// it works out ok.\n+    pub fn as_str(&self) -> &str {\n+        with_session_globals(|session_globals| unsafe {\n+            std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))\n         })\n     }\n \n@@ -1678,19 +1686,19 @@ impl Symbol {\n \n impl fmt::Debug for Symbol {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Debug::fmt(&self.as_str(), f)\n+        fmt::Debug::fmt(self.as_str(), f)\n     }\n }\n \n impl fmt::Display for Symbol {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(&self.as_str(), f)\n+        fmt::Display::fmt(self.as_str(), f)\n     }\n }\n \n impl<S: Encoder> Encodable<S> for Symbol {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(&self.as_str())\n+        s.emit_str(self.as_str())\n     }\n }\n \n@@ -1709,11 +1717,10 @@ impl<CTX> HashStable<CTX> for Symbol {\n }\n \n impl<CTX> ToStableHashKey<CTX> for Symbol {\n-    type KeyType = SymbolStr;\n-\n+    type KeyType = String;\n     #[inline]\n-    fn to_stable_hash_key(&self, _: &CTX) -> SymbolStr {\n-        self.as_str()\n+    fn to_stable_hash_key(&self, _: &CTX) -> String {\n+        self.as_str().to_string()\n     }\n }\n \n@@ -1905,70 +1912,3 @@ impl Ident {\n         self.name.can_be_raw() && self.is_reserved()\n     }\n }\n-\n-/// An alternative to [`Symbol`], useful when the chars within the symbol need to\n-/// be accessed. It deliberately has limited functionality and should only be\n-/// used for temporary values.\n-///\n-/// Because the interner outlives any thread which uses this type, we can\n-/// safely treat `string` which points to interner data, as an immortal string,\n-/// as long as this type never crosses between threads.\n-//\n-// FIXME: ensure that the interner outlives any thread which uses `SymbolStr`,\n-// by creating a new thread right after constructing the interner.\n-#[derive(Clone, Eq, PartialOrd, Ord)]\n-pub struct SymbolStr {\n-    string: &'static str,\n-}\n-\n-// This impl allows a `SymbolStr` to be directly equated with a `String` or\n-// `&str`.\n-impl<T: std::ops::Deref<Target = str>> std::cmp::PartialEq<T> for SymbolStr {\n-    fn eq(&self, other: &T) -> bool {\n-        self.string == other.deref()\n-    }\n-}\n-\n-impl !Send for SymbolStr {}\n-impl !Sync for SymbolStr {}\n-\n-/// This impl means that if `ss` is a `SymbolStr`:\n-/// - `*ss` is a `str`;\n-/// - `&*ss` is a `&str` (and `match &*ss { ... }` is a common pattern).\n-/// - `&ss as &str` is a `&str`, which means that `&ss` can be passed to a\n-///   function expecting a `&str`.\n-impl std::ops::Deref for SymbolStr {\n-    type Target = str;\n-    #[inline]\n-    fn deref(&self) -> &str {\n-        self.string\n-    }\n-}\n-\n-impl fmt::Debug for SymbolStr {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Debug::fmt(self.string, f)\n-    }\n-}\n-\n-impl fmt::Display for SymbolStr {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(self.string, f)\n-    }\n-}\n-\n-impl<CTX> HashStable<CTX> for SymbolStr {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        self.string.hash_stable(hcx, hasher)\n-    }\n-}\n-\n-impl<CTX> ToStableHashKey<CTX> for SymbolStr {\n-    type KeyType = SymbolStr;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self, _: &CTX) -> SymbolStr {\n-        self.clone()\n-    }\n-}"}, {"sha": "eebf618a5ded48f3749d16d33dc08da20898d426", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -255,7 +255,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n     }\n \n     fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n-        self.write_str(&self.tcx.crate_name(cnum).as_str())?;\n+        self.write_str(self.tcx.crate_name(cnum).as_str())?;\n         Ok(self)\n     }\n     fn path_qualified("}, {"sha": "c2519adcbe416c53f8f177b2666312868f318f7f", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::print::{Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{self, FloatTy, Instance, IntTy, Ty, TyCtxt, TypeFoldable, UintTy};\n+use rustc_span::symbol::kw;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::Integer;\n use rustc_target::spec::abi::Abi;\n@@ -559,7 +560,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                     ty::ExistentialPredicate::Projection(projection) => {\n                         let name = cx.tcx.associated_item(projection.item_def_id).ident;\n                         cx.push(\"p\");\n-                        cx.push_ident(&name.as_str());\n+                        cx.push_ident(name.as_str());\n                         cx = projection.ty.print(cx)?;\n                     }\n                     ty::ExistentialPredicate::AutoTrait(def_id) => {\n@@ -702,12 +703,11 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                                     // just to be able to handle disambiguators.\n                                     let disambiguated_field =\n                                         self.tcx.def_key(field_def.did).disambiguated_data;\n-                                    let field_name =\n-                                        disambiguated_field.data.get_opt_name().map(|s| s.as_str());\n+                                    let field_name = disambiguated_field.data.get_opt_name();\n                                     self.push_disambiguator(\n                                         disambiguated_field.disambiguator as u64,\n                                     );\n-                                    self.push_ident(&field_name.as_ref().map_or(\"\", |s| &s[..]));\n+                                    self.push_ident(field_name.unwrap_or(kw::Empty).as_str());\n \n                                     self = field.print(self)?;\n                                 }\n@@ -736,8 +736,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n         self.push(\"C\");\n         let stable_crate_id = self.tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n         self.push_disambiguator(stable_crate_id.to_u64());\n-        let name = self.tcx.crate_name(cnum).as_str();\n-        self.push_ident(&name);\n+        let name = self.tcx.crate_name(cnum);\n+        self.push_ident(name.as_str());\n         Ok(self)\n     }\n \n@@ -793,13 +793,13 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             }\n         };\n \n-        let name = disambiguated_data.data.get_opt_name().map(|s| s.as_str());\n+        let name = disambiguated_data.data.get_opt_name();\n \n         self.path_append_ns(\n             print_prefix,\n             ns,\n             disambiguated_data.disambiguator as u64,\n-            name.as_ref().map_or(\"\", |s| &s[..]),\n+            name.unwrap_or(kw::Empty).as_str(),\n         )\n     }\n "}, {"sha": "9128e54682f3dbba83ed26923de8b44bb26c444f", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -298,43 +298,43 @@ impl InlineAsmReg {\n         let name = name.as_str();\n         Ok(match arch {\n             InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n-                Self::X86(X86InlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::X86(X86InlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Arm => {\n-                Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::AArch64 => {\n-                Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n-                Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Nvptx64 => {\n-                Self::Nvptx(NvptxInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Nvptx(NvptxInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::PowerPC | InlineAsmArch::PowerPC64 => {\n-                Self::PowerPC(PowerPCInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::PowerPC(PowerPCInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Hexagon => {\n-                Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Mips | InlineAsmArch::Mips64 => {\n-                Self::Mips(MipsInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Mips(MipsInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::S390x => {\n-                Self::S390x(S390xInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::S390x(S390xInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::SpirV => {\n-                Self::SpirV(SpirVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::SpirV(SpirVInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Wasm32 | InlineAsmArch::Wasm64 => {\n-                Self::Wasm(WasmInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Wasm(WasmInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Bpf => {\n-                Self::Bpf(BpfInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Bpf(BpfInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n             InlineAsmArch::Avr => {\n-                Self::Avr(AvrInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+                Self::Avr(AvrInlineAsmReg::parse(arch, has_feature, target, name)?)\n             }\n         })\n     }\n@@ -798,7 +798,7 @@ impl InlineAsmClobberAbi {\n         target: &Target,\n         name: Symbol,\n     ) -> Result<Self, &'static [&'static str]> {\n-        let name = &*name.as_str();\n+        let name = name.as_str();\n         match arch {\n             InlineAsmArch::X86 => match name {\n                 \"C\" | \"system\" | \"efiapi\" | \"cdecl\" | \"stdcall\" | \"fastcall\" => {"}, {"sha": "4840995275afaab42460166295f33b6197b8f975", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -269,7 +269,7 @@ impl<'tcx> OnUnimplementedFormatString {\n         let name = tcx.item_name(trait_def_id);\n         let generics = tcx.generics_of(trait_def_id);\n         let s = self.0.as_str();\n-        let parser = Parser::new(&s, None, None, false, ParseMode::Format);\n+        let parser = Parser::new(s, None, None, false, ParseMode::Format);\n         let mut result = Ok(());\n         for token in parser {\n             match token {\n@@ -347,7 +347,7 @@ impl<'tcx> OnUnimplementedFormatString {\n         let empty_string = String::new();\n \n         let s = self.0.as_str();\n-        let parser = Parser::new(&s, None, None, false, ParseMode::Format);\n+        let parser = Parser::new(s, None, None, false, ParseMode::Format);\n         let item_context = (options.get(&sym::ItemContext)).unwrap_or(&empty_string);\n         parser\n             .map(|p| match p {"}, {"sha": "d54b1d62ee913b635a9c57b951e99d9647f839a8", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -609,7 +609,7 @@ fn check_must_not_suspend_def(\n                     // Add optional reason note\n                     if let Some(note) = attr.value_str() {\n                         // FIXME(guswynn): consider formatting this better\n-                        err.span_note(data.source_span, &note.as_str());\n+                        err.span_note(data.source_span, note.as_str());\n                     }\n \n                     // Add some quick suggestions on what to do"}, {"sha": "5615a08369dffc9af3c4921be94303065b6e3e3a", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -1038,7 +1038,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             .collect();\n \n         // Sort them by the name so we have a stable result.\n-        names.sort_by_cached_key(|n| n.as_str());\n+        names.sort_by(|a, b| a.as_str().partial_cmp(b.as_str()).unwrap());\n         names\n     }\n \n@@ -1908,7 +1908,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     .associated_items(def_id)\n                     .in_definition_order()\n                     .filter(|x| {\n-                        let dist = lev_distance(&*name.as_str(), &x.ident.as_str());\n+                        let dist = lev_distance(name.as_str(), x.ident.as_str());\n                         x.kind.namespace() == Namespace::ValueNS && dist > 0 && dist <= max_dist\n                     })\n                     .copied()"}, {"sha": "e7b728d491b67d4a0f984522db46c5512f2a0dfd", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -2849,7 +2849,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             );\n         } else if attr.has_name(sym::linkage) {\n             if let Some(val) = attr.value_str() {\n-                codegen_fn_attrs.linkage = Some(linkage_by_name(tcx, id, &val.as_str()));\n+                codegen_fn_attrs.linkage = Some(linkage_by_name(tcx, id, val.as_str()));\n             }\n         } else if attr.has_name(sym::link_section) {\n             if let Some(val) = attr.value_str() {"}, {"sha": "dfee2b702c1c8f3796a8588da72702c1b5d557e9", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -466,7 +466,7 @@ impl<'a> fmt::Display for Display<'a> {\n                     (sym::unix, None) => \"Unix\",\n                     (sym::windows, None) => \"Windows\",\n                     (sym::debug_assertions, None) => \"debug-assertions enabled\",\n-                    (sym::target_os, Some(os)) => match &*os.as_str() {\n+                    (sym::target_os, Some(os)) => match os.as_str() {\n                         \"android\" => \"Android\",\n                         \"dragonfly\" => \"DragonFly BSD\",\n                         \"emscripten\" => \"Emscripten\",\n@@ -487,7 +487,7 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"windows\" => \"Windows\",\n                         _ => \"\",\n                     },\n-                    (sym::target_arch, Some(arch)) => match &*arch.as_str() {\n+                    (sym::target_arch, Some(arch)) => match arch.as_str() {\n                         \"aarch64\" => \"AArch64\",\n                         \"arm\" => \"ARM\",\n                         \"asmjs\" => \"JavaScript\",\n@@ -504,14 +504,14 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"x86_64\" => \"x86-64\",\n                         _ => \"\",\n                     },\n-                    (sym::target_vendor, Some(vendor)) => match &*vendor.as_str() {\n+                    (sym::target_vendor, Some(vendor)) => match vendor.as_str() {\n                         \"apple\" => \"Apple\",\n                         \"pc\" => \"PC\",\n                         \"sun\" => \"Sun\",\n                         \"fortanix\" => \"Fortanix\",\n                         _ => \"\",\n                     },\n-                    (sym::target_env, Some(env)) => match &*env.as_str() {\n+                    (sym::target_env, Some(env)) => match env.as_str() {\n                         \"gnu\" => \"GNU\",\n                         \"msvc\" => \"MSVC\",\n                         \"musl\" => \"musl\",\n@@ -545,14 +545,14 @@ impl<'a> fmt::Display for Display<'a> {\n                         write!(\n                             fmt,\n                             r#\"<code>{}=\"{}\"</code>\"#,\n-                            Escape(&name.as_str()),\n-                            Escape(&v.as_str())\n+                            Escape(name.as_str()),\n+                            Escape(v.as_str())\n                         )\n                     } else {\n                         write!(fmt, r#\"`{}=\"{}\"`\"#, name, v)\n                     }\n                 } else if self.1.is_html() {\n-                    write!(fmt, \"<code>{}</code>\", Escape(&name.as_str()))\n+                    write!(fmt, \"<code>{}</code>\", Escape(name.as_str()))\n                 } else {\n                     write!(fmt, \"`{}`\", name)\n                 }"}, {"sha": "c41617665a859832d82c14e8ce94c8d6311e6bfb", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -25,7 +25,7 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DUMMY_SP;\n-use rustc_span::symbol::{kw, sym, Ident, Symbol, SymbolStr};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, FileName, Loc};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n@@ -200,7 +200,7 @@ impl ExternalCrate {\n         // See if there's documentation generated into the local directory\n         // WARNING: since rustdoc creates these directories as it generates documentation, this check is only accurate before rendering starts.\n         // Make sure to call `location()` by that time.\n-        let local_location = dst.join(&*self.name(tcx).as_str());\n+        let local_location = dst.join(self.name(tcx).as_str());\n         if local_location.is_dir() {\n             return Local;\n         }\n@@ -2009,10 +2009,6 @@ impl Path {\n         self.segments.last().expect(\"segments were empty\").name\n     }\n \n-    crate fn last_name(&self) -> SymbolStr {\n-        self.segments.last().expect(\"segments were empty\").name.as_str()\n-    }\n-\n     crate fn whole_name(&self) -> String {\n         self.segments\n             .iter()"}, {"sha": "4d80abc98c7d5f46dfb3079aba5d908f7d5c09f6", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -162,7 +162,7 @@ crate fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n             s.push_str(\"::\");\n         }\n         if seg.ident.name != kw::PathRoot {\n-            s.push_str(&seg.ident.as_str());\n+            s.push_str(seg.ident.as_str());\n         }\n     }\n     s"}, {"sha": "5813062ceab773ff0825b9e0c5f002af2a2d7f80", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -150,8 +150,7 @@ impl Cache {\n \n             let name = e.name(tcx);\n             let render_options = &cx.render_options;\n-            let extern_url =\n-                render_options.extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n+            let extern_url = render_options.extern_html_root_urls.get(name.as_str()).map(|u| &**u);\n             let extern_url_takes_precedence = render_options.extern_html_root_takes_precedence;\n             let dst = &render_options.output;\n             let location = e.location(extern_url, extern_url_takes_precedence, dst, tcx);"}, {"sha": "b7af8c9801f975e6ee9264a3d4de36a562140ef8", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -90,7 +90,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n         // FIXME: checking `item.name.is_some()` is very implicit and leads to lots of special\n         // cases. Use an explicit match instead.\n         } else if item.name.is_some() && !item.is_extern_crate() {\n-            prof.generic_activity_with_arg(\"render_item\", &*item.name.unwrap_or(unknown).as_str())\n+            prof.generic_activity_with_arg(\"render_item\", item.name.unwrap_or(unknown).as_str())\n                 .run(|| cx.item(item))?;\n         }\n     }"}, {"sha": "3a2effa625cf364333d293cf140a499f91b2b136", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -175,7 +175,7 @@ impl clean::GenericParamDef {\n                 Ok(())\n             }\n             clean::GenericParamDefKind::Type { bounds, default, .. } => {\n-                f.write_str(&*self.name.as_str())?;\n+                f.write_str(self.name.as_str())?;\n \n                 if !bounds.is_empty() {\n                     if f.alternate() {\n@@ -638,7 +638,7 @@ fn resolved_path<'cx>(\n                 last.name.to_string()\n             }\n         } else {\n-            anchor(did, &*last.name.as_str(), cx).to_string()\n+            anchor(did, last.name.as_str(), cx).to_string()\n         };\n         write!(w, \"{}{}\", path, last.args.print(cx))?;\n     }\n@@ -667,20 +667,18 @@ fn primitive_link(\n                 needs_termination = true;\n             }\n             Some(&def_id) => {\n-                let cname_str;\n+                let cname_sym;\n                 let loc = match m.extern_locations[&def_id.krate] {\n                     ExternalLocation::Remote(ref s) => {\n-                        cname_str =\n-                            ExternalCrate { crate_num: def_id.krate }.name(cx.tcx()).as_str();\n-                        Some(vec![s.trim_end_matches('/'), &cname_str[..]])\n+                        cname_sym = ExternalCrate { crate_num: def_id.krate }.name(cx.tcx());\n+                        Some(vec![s.trim_end_matches('/'), cname_sym.as_str()])\n                     }\n                     ExternalLocation::Local => {\n-                        cname_str =\n-                            ExternalCrate { crate_num: def_id.krate }.name(cx.tcx()).as_str();\n-                        Some(if cx.current.first().map(|x| &x[..]) == Some(&cname_str[..]) {\n+                        cname_sym = ExternalCrate { crate_num: def_id.krate }.name(cx.tcx());\n+                        Some(if cx.current.first().map(|x| &x[..]) == Some(cname_sym.as_str()) {\n                             iter::repeat(\"..\").take(cx.current.len() - 1).collect()\n                         } else {\n-                            let cname = iter::once(&cname_str[..]);\n+                            let cname = iter::once(cname_sym.as_str());\n                             iter::repeat(\"..\").take(cx.current.len()).chain(cname).collect()\n                         })\n                     }\n@@ -775,7 +773,7 @@ fn fmt_type<'cx>(\n         clean::Primitive(clean::PrimitiveType::Never) => {\n             primitive_link(f, PrimitiveType::Never, \"!\", cx)\n         }\n-        clean::Primitive(prim) => primitive_link(f, prim, &*prim.as_sym().as_str(), cx),\n+        clean::Primitive(prim) => primitive_link(f, prim, prim.as_sym().as_str(), cx),\n         clean::BareFunction(ref decl) => {\n             if f.alternate() {\n                 write!(\n@@ -1271,7 +1269,7 @@ impl clean::Visibility {\n                     debug!(\"path={:?}\", path);\n                     // modified from `resolved_path()` to work with `DefPathData`\n                     let last_name = path.data.last().unwrap().data.get_opt_name().unwrap();\n-                    let anchor = anchor(vis_did, &last_name.as_str(), cx).to_string();\n+                    let anchor = anchor(vis_did, last_name.as_str(), cx).to_string();\n \n                     let mut s = \"pub(in \".to_owned();\n                     for seg in &path.data[..path.data.len() - 1] {\n@@ -1402,9 +1400,9 @@ impl clean::ImportSource {\n                 for seg in &self.path.segments[..self.path.segments.len() - 1] {\n                     write!(f, \"{}::\", seg.name)?;\n                 }\n-                let name = self.path.last_name();\n+                let name = self.path.last();\n                 if let hir::def::Res::PrimTy(p) = self.path.res {\n-                    primitive_link(f, PrimitiveType::from(p), &*name, cx)?;\n+                    primitive_link(f, PrimitiveType::from(p), name.as_str(), cx)?;\n                 } else {\n                     write!(f, \"{}\", name)?;\n                 }\n@@ -1420,7 +1418,7 @@ impl clean::TypeBinding {\n         cx: &'a Context<'tcx>,\n     ) -> impl fmt::Display + 'a + Captures<'tcx> {\n         display_fn(move |f| {\n-            f.write_str(&*self.name.as_str())?;\n+            f.write_str(self.name.as_str())?;\n             match self.kind {\n                 clean::TypeBindingKind::Equality { ref ty } => {\n                     if f.alternate() {"}, {"sha": "c4d326e7711a39a503a5eb263f5b85a4ce92dd9a", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> Context<'tcx> {\n     fn render_item(&self, it: &clean::Item, is_module: bool) -> String {\n         let mut title = String::new();\n         if !is_module {\n-            title.push_str(&it.name.unwrap().as_str());\n+            title.push_str(it.name.unwrap().as_str());\n         }\n         if !it.is_primitive() && !it.is_keyword() {\n             if !is_module {\n@@ -315,7 +315,7 @@ impl<'tcx> Context<'tcx> {\n         };\n         let file = &file;\n \n-        let symbol;\n+        let krate_sym;\n         let (krate, path) = if cnum == LOCAL_CRATE {\n             if let Some(path) = self.shared.local_sources.get(file) {\n                 (self.shared.layout.krate.as_str(), path)\n@@ -343,8 +343,8 @@ impl<'tcx> Context<'tcx> {\n             let mut fname = file.file_name().expect(\"source has no filename\").to_os_string();\n             fname.push(\".html\");\n             path.push_str(&fname.to_string_lossy());\n-            symbol = krate.as_str();\n-            (&*symbol, &path)\n+            krate_sym = krate;\n+            (krate_sym.as_str(), &path)\n         };\n \n         let anchor = if with_lines {\n@@ -549,7 +549,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n \n     fn after_krate(&mut self) -> Result<(), Error> {\n         let crate_name = self.tcx().crate_name(LOCAL_CRATE);\n-        let final_file = self.dst.join(&*crate_name.as_str()).join(\"all.html\");\n+        let final_file = self.dst.join(crate_name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n \n         let mut root_path = self.dst.to_str().expect(\"invalid path\").to_owned();\n@@ -619,9 +619,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         if let Some(ref redirections) = self.shared.redirections {\n             if !redirections.borrow().is_empty() {\n                 let redirect_map_path =\n-                    self.dst.join(&*crate_name.as_str()).join(\"redirect-map.json\");\n+                    self.dst.join(crate_name.as_str()).join(\"redirect-map.json\");\n                 let paths = serde_json::to_string(&*redirections.borrow()).unwrap();\n-                self.shared.ensure_dir(&self.dst.join(&*crate_name.as_str()))?;\n+                self.shared.ensure_dir(&self.dst.join(crate_name.as_str()))?;\n                 self.shared.fs.write(redirect_map_path, paths)?;\n             }\n         }\n@@ -703,7 +703,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         if !buf.is_empty() {\n             let name = item.name.as_ref().unwrap();\n             let item_type = item.type_();\n-            let file_name = &item_path(item_type, &name.as_str());\n+            let file_name = &item_path(item_type, name.as_str());\n             self.shared.ensure_dir(&self.dst)?;\n             let joint_dst = self.dst.join(file_name);\n             self.shared.fs.write(joint_dst, buf)?;"}, {"sha": "cd89164a25470b85c524ab21e638107336e4c2ae", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -640,9 +640,9 @@ fn short_item_info(\n         // We display deprecation messages for #[deprecated] and #[rustc_deprecated]\n         // but only display the future-deprecation messages for #[rustc_deprecated].\n         let mut message = if let Some(since) = since {\n-            let since = &since.as_str();\n+            let since = since.as_str();\n             if !stability::deprecation_in_effect(&depr) {\n-                if *since == \"TBD\" {\n+                if since == \"TBD\" {\n                     String::from(\"Deprecating in a future Rust version\")\n                 } else {\n                     format!(\"Deprecating in {}\", Escape(since))\n@@ -658,7 +658,7 @@ fn short_item_info(\n             let note = note.as_str();\n             let mut ids = cx.id_map.borrow_mut();\n             let html = MarkdownHtml(\n-                &note,\n+                note,\n                 &mut ids,\n                 error_codes,\n                 cx.shared.edition(),\n@@ -683,7 +683,7 @@ fn short_item_info(\n         let mut message =\n             \"<span class=\\\"emoji\\\">\ud83d\udd2c</span> This is a nightly-only experimental API.\".to_owned();\n \n-        let mut feature = format!(\"<code>{}</code>\", Escape(&feature.as_str()));\n+        let mut feature = format!(\"<code>{}</code>\", Escape(feature.as_str()));\n         if let (Some(url), Some(issue)) = (&cx.shared.issue_tracker_base_url, issue) {\n             feature.push_str(&format!(\n                 \"&nbsp;<a href=\\\"{url}{issue}\\\">#{issue}</a>\",\n@@ -1414,7 +1414,7 @@ fn render_impl(\n                     let source_id = trait_\n                         .and_then(|trait_| {\n                             trait_.items.iter().find(|item| {\n-                                item.name.map(|n| n.as_str().eq(&name.as_str())).unwrap_or(false)\n+                                item.name.map(|n| n.as_str().eq(name.as_str())).unwrap_or(false)\n                             })\n                         })\n                         .map(|item| format!(\"{}.{}\", item.type_(), name));"}, {"sha": "44a9ec5ea42108000788e2d382a36dfab9161ada", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -136,7 +136,7 @@ pub(super) fn print_item(\n         page: page,\n         static_root_path: page.get_static_root_path(),\n         typ: typ,\n-        name: &item.name.as_ref().unwrap().as_str(),\n+        name: item.name.as_ref().unwrap().as_str(),\n         item_type: &item.type_().to_string(),\n         path_components: path_components,\n         stability_since_raw: &stability_since_raw,\n@@ -239,9 +239,9 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                 (true, false) => return Ordering::Greater,\n             }\n         }\n-        let lhs = i1.name.unwrap_or(kw::Empty).as_str();\n-        let rhs = i2.name.unwrap_or(kw::Empty).as_str();\n-        compare_names(&lhs, &rhs)\n+        let lhs = i1.name.unwrap_or(kw::Empty);\n+        let rhs = i2.name.unwrap_or(kw::Empty);\n+        compare_names(lhs.as_str(), rhs.as_str())\n     }\n \n     if cx.shared.sort_modules_alphabetically {\n@@ -315,7 +315,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                         w,\n                         \"<div class=\\\"item-left\\\"><code>{}extern crate {} as {};\",\n                         myitem.visibility.print_with_space(myitem.def_id, cx),\n-                        anchor(myitem.def_id.expect_def_id(), &*src.as_str(), cx),\n+                        anchor(myitem.def_id.expect_def_id(), src.as_str(), cx),\n                         myitem.name.as_ref().unwrap(),\n                     ),\n                     None => write!(\n@@ -324,7 +324,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                         myitem.visibility.print_with_space(myitem.def_id, cx),\n                         anchor(\n                             myitem.def_id.expect_def_id(),\n-                            &*myitem.name.as_ref().unwrap().as_str(),\n+                            myitem.name.as_ref().unwrap().as_str(),\n                             cx\n                         ),\n                     ),\n@@ -405,7 +405,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n                     add = add,\n                     stab = stab.unwrap_or_default(),\n                     unsafety_flag = unsafety_flag,\n-                    href = item_path(myitem.type_(), &myitem.name.unwrap().as_str()),\n+                    href = item_path(myitem.type_(), myitem.name.unwrap().as_str()),\n                     title = [full_path(cx, myitem), myitem.type_().to_string()]\n                         .iter()\n                         .filter_map(|s| if !s.is_empty() { Some(s.as_str()) } else { None })\n@@ -1308,7 +1308,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n             document_non_exhaustive(w, it);\n             for (index, (field, ty)) in fields.enumerate() {\n                 let field_name =\n-                    field.name.map_or_else(|| index.to_string(), |sym| (*sym.as_str()).to_string());\n+                    field.name.map_or_else(|| index.to_string(), |sym| sym.as_str().to_string());\n                 let id = cx.derive_id(format!(\"{}.{}\", ItemType::StructField, field_name));\n                 write!(\n                     w,\n@@ -1410,7 +1410,7 @@ crate fn compare_names(mut lhs: &str, mut rhs: &str) -> Ordering {\n pub(super) fn full_path(cx: &Context<'_>, item: &clean::Item) -> String {\n     let mut s = cx.current.join(\"::\");\n     s.push_str(\"::\");\n-    s.push_str(&item.name.unwrap().as_str());\n+    s.push_str(item.name.unwrap().as_str());\n     s\n }\n "}, {"sha": "563f4ae7385ce3d3f6503e2bc9b5257410e6c5db", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -418,7 +418,7 @@ pub(super) fn write_shared(\n         let dst = cx.dst.join(&format!(\"source-files{}.js\", cx.shared.resource_suffix));\n         let make_sources = || {\n             let (mut all_sources, _krates) =\n-                try_err!(collect(&dst, &krate.name(cx.tcx()).as_str(), \"sourcesIndex\"), &dst);\n+                try_err!(collect(&dst, krate.name(cx.tcx()).as_str(), \"sourcesIndex\"), &dst);\n             all_sources.push(format!(\n                 \"sourcesIndex[\\\"{}\\\"] = {};\",\n                 &krate.name(cx.tcx()),\n@@ -437,7 +437,7 @@ pub(super) fn write_shared(\n     // Update the search index and crate list.\n     let dst = cx.dst.join(&format!(\"search-index{}.js\", cx.shared.resource_suffix));\n     let (mut all_indexes, mut krates) =\n-        try_err!(collect_json(&dst, &krate.name(cx.tcx()).as_str()), &dst);\n+        try_err!(collect_json(&dst, krate.name(cx.tcx()).as_str()), &dst);\n     all_indexes.push(search_index);\n     krates.push(krate.name(cx.tcx()).to_string());\n     krates.sort();\n@@ -575,7 +575,7 @@ pub(super) fn write_shared(\n         mydst.push(&format!(\"{}.{}.js\", remote_item_type, remote_path[remote_path.len() - 1]));\n \n         let (mut all_implementors, _) =\n-            try_err!(collect(&mydst, &krate.name(cx.tcx()).as_str(), \"implementors\"), &mydst);\n+            try_err!(collect(&mydst, krate.name(cx.tcx()).as_str(), \"implementors\"), &mydst);\n         all_implementors.push(implementors);\n         // Sort the implementors by crate so the file will be generated\n         // identically even with rustdoc running in parallel."}, {"sha": "ba70ed8622a0b82df65af95f7bb50fca7229ded3", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -19,7 +19,7 @@ use std::path::{Component, Path, PathBuf};\n crate fn render(cx: &mut Context<'_>, krate: &clean::Crate) -> Result<(), Error> {\n     info!(\"emitting source files\");\n \n-    let dst = cx.dst.join(\"src\").join(&*krate.name(cx.tcx()).as_str());\n+    let dst = cx.dst.join(\"src\").join(krate.name(cx.tcx()).as_str());\n     cx.shared.ensure_dir(&dst)?;\n \n     let mut collector = SourceCollector { dst, cx, emitted_local_sources: FxHashSet::default() };"}, {"sha": "c8efa4bbbcc300b8cfde8075f2ad07874de4ad6d", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -609,7 +609,7 @@ impl FromWithTcx<clean::Import> for Import {\n             },\n             Glob => Import {\n                 source: import.source.path.whole_name(),\n-                name: import.source.path.last_name().to_string(),\n+                name: import.source.path.last().to_string(),\n                 id: import.source.did.map(ItemId::from).map(from_item_id),\n                 glob: true,\n             },"}, {"sha": "53620669fddb86fa92301559383c566abda24284", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -2153,8 +2153,8 @@ fn privacy_error(cx: &DocContext<'_>, diag_info: &DiagnosticInfo<'_>, path_str:\n     let sym;\n     let item_name = match diag_info.item.name {\n         Some(name) => {\n-            sym = name.as_str();\n-            &*sym\n+            sym = name;\n+            sym.as_str()\n         }\n         None => \"<unknown>\",\n     };"}, {"sha": "98ba8b12256562733b41e8d2bab6a63adc9da338", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -21,7 +21,7 @@ declare_lint_pass!(Pass => [TEST_LINT, PLEASE_LINT]);\n \n impl<'tcx> LateLintPass<'tcx> for Pass {\n     fn check_item(&mut self, cx: &LateContext, it: &rustc_hir::Item) {\n-        match &*it.ident.as_str() {\n+        match it.ident.as_str() {\n             \"lintme\" => cx.lint(TEST_LINT, |lint| {\n                 lint.build(\"item is named 'lintme'\").set_span(it.span).emit()\n             }),"}, {"sha": "489945b513da4a975740c70031cb53cf9cd22e15", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -17,7 +17,7 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n-use rustc_span::symbol::{Symbol, SymbolStr};\n+use rustc_span::symbol::Symbol;\n use semver::Version;\n \n static UNIX_SYSTEMS: &[&str] = &[\n@@ -310,8 +310,8 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n                                             || is_word(lint, sym::deprecated)\n                                             || is_word(lint, sym!(unreachable_pub))\n                                             || is_word(lint, sym!(unused))\n-                                            || extract_clippy_lint(lint).map_or(false, |s| s == \"wildcard_imports\")\n-                                            || extract_clippy_lint(lint).map_or(false, |s| s == \"enum_glob_use\")\n+                                            || extract_clippy_lint(lint).map_or(false, |s| s.as_str() == \"wildcard_imports\")\n+                                            || extract_clippy_lint(lint).map_or(false, |s| s.as_str() == \"enum_glob_use\")\n                                         {\n                                             return;\n                                         }\n@@ -370,15 +370,15 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n }\n \n /// Returns the lint name if it is clippy lint.\n-fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n+fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<Symbol> {\n     if_chain! {\n         if let Some(meta_item) = lint.meta_item();\n         if meta_item.path.segments.len() > 1;\n         if let tool_name = meta_item.path.segments[0].ident;\n         if tool_name.name == sym::clippy;\n         then {\n             let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n-            return Some(lint_name.as_str());\n+            return Some(lint_name);\n         }\n     }\n     None\n@@ -387,7 +387,7 @@ fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n fn check_clippy_lint_names(cx: &LateContext<'_>, name: Symbol, items: &[NestedMetaItem]) {\n     for lint in items {\n         if let Some(lint_name) = extract_clippy_lint(lint) {\n-            if lint_name == \"restriction\" && name != sym::allow {\n+            if lint_name.as_str() == \"restriction\" && name != sym::allow {\n                 span_lint_and_help(\n                     cx,\n                     BLANKET_CLIPPY_RESTRICTION_LINTS,\n@@ -486,7 +486,7 @@ fn check_attrs(cx: &LateContext<'_>, span: Span, name: Symbol, attrs: &[Attribut\n \n fn check_semver(cx: &LateContext<'_>, span: Span, lit: &Lit) {\n     if let LitKind::Str(is, _) = lit.kind {\n-        if Version::parse(&is.as_str()).is_ok() {\n+        if Version::parse(is.as_str()).is_ok() {\n             return;\n         }\n     }\n@@ -619,7 +619,7 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n                     MetaItemKind::Word => {\n                         if_chain! {\n                             if let Some(ident) = meta.ident();\n-                            if let Some(os) = find_os(&*ident.name.as_str());\n+                            if let Some(os) = find_os(ident.name.as_str());\n                             then {\n                                 mismatched.push((os, ident.span));\n                             }"}, {"sha": "43ad0f7605c106bdf4ce1a4899a99c955e295a00", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -272,7 +272,7 @@ fn simplify_not(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n                 .copied()\n                 .flat_map(|(a, b)| vec![(a, b), (b, a)])\n                 .find(|&(a, _)| {\n-                    let path: &str = &path.ident.name.as_str();\n+                    let path: &str = path.ident.name.as_str();\n                     a == path\n                 })\n                 .and_then(|(_, neg_method)| Some(format!(\"{}.{}()\", snippet_opt(cx, args[0].span)?, neg_method)))"}, {"sha": "31cc3698592b35d26440a901ef34a3cb926bda92", "filename": "src/tools/clippy/clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -321,8 +321,8 @@ fn get_implementing_type<'a>(path: &QPath<'_>, candidates: &'a [&str], function:\n         if let TyKind::Path(QPath::Resolved(None, tp)) = &ty.kind;\n         if let [int] = &*tp.segments;\n         then {\n-            let name = &int.ident.name.as_str();\n-            candidates.iter().find(|c| name == *c).copied()\n+            let name = int.ident.name.as_str();\n+            candidates.iter().find(|c| &name == *c).copied()\n         } else {\n             None\n         }\n@@ -335,8 +335,8 @@ fn int_ty_to_sym<'tcx>(path: &QPath<'_>) -> Option<&'tcx str> {\n         if let QPath::Resolved(_, path) = *path;\n         if let [ty] = &*path.segments;\n         then {\n-            let name = &ty.ident.name.as_str();\n-            INTS.iter().find(|c| name == *c).copied()\n+            let name = ty.ident.name.as_str();\n+            INTS.iter().find(|c| &name == *c).copied()\n         } else {\n             None\n         }"}, {"sha": "3650e4f91a001020c8952f518ae89af0b3bc3a19", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -437,7 +437,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n \n     for attr in attrs {\n         if let AttrKind::DocComment(comment_kind, comment) = attr.kind {\n-            let (comment, current_spans) = strip_doc_comment_decoration(&comment.as_str(), comment_kind, attr.span);\n+            let (comment, current_spans) = strip_doc_comment_decoration(comment.as_str(), comment_kind, attr.span);\n             spans.extend_from_slice(&current_spans);\n             doc.push_str(&comment);\n         } else if attr.has_name(sym::doc) {"}, {"sha": "50dd0d84fda518f0d3d4663c694187f8e0d55128", "filename": "src/tools/clippy/clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduration_subsec.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for DurationSubsec {\n             if match_type(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), &paths::DURATION);\n             if let Some((Constant::Int(divisor), _)) = constant(cx, cx.typeck_results(), right);\n             then {\n-                let suggested_fn = match (method_path.ident.as_str().as_ref(), divisor) {\n+                let suggested_fn = match (method_path.ident.as_str(), divisor) {\n                     (\"subsec_micros\", 1_000) | (\"subsec_nanos\", 1_000_000) => \"subsec_millis\",\n                     (\"subsec_nanos\", 1_000) => \"subsec_micros\",\n                     _ => return,"}, {"sha": "689ac6184bffb1d7b5762a5e6dc9bc47474b5d08", "filename": "src/tools/clippy/clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -153,7 +153,7 @@ fn check_variant(\n             );\n         }\n     }\n-    let first = &def.variants[0].ident.name.as_str();\n+    let first = def.variants[0].ident.name.as_str();\n     let mut pre = &first[..str_utils::camel_case_until(&*first).byte_index];\n     let mut post = &first[str_utils::camel_case_start(&*first).byte_index..];\n     for var in def.variants {"}, {"sha": "6903073fbcd85760aaba967cf135d9f37d0165d8", "filename": "src/tools/clippy/clippy_lints/src/float_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloat_literal.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatLiteral {\n             if let LitKind::Float(sym, lit_float_ty) = lit.node;\n             then {\n                 let sym_str = sym.as_str();\n-                let formatter = FloatFormat::new(&sym_str);\n+                let formatter = FloatFormat::new(sym_str);\n                 // Try to bail out if the float is for sure fine.\n                 // If its within the 2 decimal digits of being out of precision we\n                 // check if the parsed representation is the same as the string"}, {"sha": "a70e58c9c3a5efdd3316e553c334fd6df6d7d7b0", "filename": "src/tools/clippy/clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -595,7 +595,7 @@ fn are_same_base_logs(cx: &LateContext<'_>, expr_a: &Expr<'_>, expr_b: &Expr<'_>\n             return method_name_a.as_str() == method_name_b.as_str() &&\n                 args_a.len() == args_b.len() &&\n                 (\n-                    [\"ln\", \"log2\", \"log10\"].contains(&&*method_name_a.as_str()) ||\n+                    [\"ln\", \"log2\", \"log10\"].contains(&method_name_a.as_str()) ||\n                     method_name_a.as_str() == \"log\" && args_a.len() == 2 && eq_expr_value(cx, &args_a[1], &args_b[1])\n                 );\n         }\n@@ -692,7 +692,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n             let recv_ty = cx.typeck_results().expr_ty(&args[0]);\n \n             if recv_ty.is_floating_point() {\n-                match &*path.ident.name.as_str() {\n+                match path.ident.name.as_str() {\n                     \"ln\" => check_ln1p(cx, expr, args),\n                     \"log\" => check_log_base(cx, expr, args),\n                     \"powf\" => check_powf(cx, expr, args),"}, {"sha": "0af6b3b7d464ef67ab1e7b1ba16dcbe2ac802dca", "filename": "src/tools/clippy/clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -42,7 +42,7 @@ declare_lint_pass!(IterNotReturningIterator => [ITER_NOT_RETURNING_ITERATOR]);\n \n impl LateLintPass<'_> for IterNotReturningIterator {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'tcx>) {\n-        let name: &str = &impl_item.ident.name.as_str();\n+        let name = impl_item.ident.name.as_str();\n         if_chain! {\n             if let ImplItemKind::Fn(fn_sig, _) = &impl_item.kind;\n             let ret_ty = return_ty(cx, impl_item.hir_id());"}, {"sha": "b03445b8cd6b08df5008424ec994f9e15a46266f", "filename": "src/tools/clippy/clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -659,7 +659,7 @@ fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n \n     if let ExprKind::MethodCall(method, _, [self_arg], _) = arg.kind {\n-        let method_name = &*method.ident.as_str();\n+        let method_name = method.ident.as_str();\n         // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n         match method_name {\n             \"iter\" | \"iter_mut\" => explicit_iter_loop::check(cx, self_arg, arg, method_name),"}, {"sha": "ba895f35faa267a1d7e0545bdc6f8bdf978f3afd", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -31,7 +31,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             let mut applicability = Applicability::MaybeIncorrect;\n             let is_empty_sugg = \"next().is_none()\".to_string();\n-            let method_name = &*method.ident.name.as_str();\n+            let method_name = method.ident.name.as_str();\n             let sugg = if is_type_diagnostic_item(cx, ty, sym::Vec) ||\n                         is_type_diagnostic_item(cx, ty, sym::VecDeque) ||\n                         is_type_diagnostic_item(cx, ty, sym::LinkedList) ||\n@@ -210,7 +210,7 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor<'_, 'tcx> {\n                     if let Some(hir_id) = self.current_statement_hir_id {\n                         self.hir_id_uses_map.insert(hir_id, self.uses.len());\n                     }\n-                    match &*method_name.ident.name.as_str() {\n+                    match method_name.ident.name.as_str() {\n                         \"into_iter\" => self.uses.push(Some(IterFunction {\n                             func: IterFunctionKind::IntoIter,\n                             span: expr.span,"}, {"sha": "dbf103143d93cc7dc3f4e76cd3e1712d44aa9844", "filename": "src/tools/clippy/clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n@@ -71,8 +71,8 @@ impl LateLintPass<'_> for MatchStrCaseMismatch {\n                 visitor.visit_expr(match_expr);\n \n                 if let Some(case_method) = visitor.case_method {\n-                    if let Some((bad_case_span, bad_case_str)) = verify_case(&case_method, arms) {\n-                        lint(cx, &case_method, bad_case_span, &bad_case_str);\n+                    if let Some((bad_case_span, bad_case_sym)) = verify_case(&case_method, arms) {\n+                        lint(cx, &case_method, bad_case_span, bad_case_sym.as_str());\n                     }\n                 }\n             }\n@@ -95,7 +95,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchExprVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n         match ex.kind {\n             ExprKind::MethodCall(segment, _, [receiver], _)\n-                if self.case_altered(&*segment.ident.as_str(), receiver) => {},\n+                if self.case_altered(segment.ident.as_str(), receiver) => {},\n             _ => walk_expr(self, ex),\n         }\n     }\n@@ -126,7 +126,7 @@ fn get_case_method(segment_ident_str: &str) -> Option<CaseMethod> {\n     }\n }\n \n-fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(Span, SymbolStr)> {\n+fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(Span, Symbol)> {\n     let case_check = match case_method {\n         CaseMethod::LowerCase => |input: &str| -> bool { input.chars().all(|c| c.to_lowercase().next() == Some(c)) },\n         CaseMethod::AsciiLowerCase => |input: &str| -> bool { !input.chars().any(|c| c.is_ascii_uppercase()) },\n@@ -144,7 +144,7 @@ fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(\n             let input = symbol.as_str();\n             if !case_check(&input);\n             then {\n-                return Some((lit.span, input));\n+                return Some((lit.span, symbol));\n             }\n         }\n     }"}, {"sha": "22970507f964c2c9416ab1fadead327da3637995", "filename": "src/tools/clippy/clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -966,7 +966,7 @@ fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm\n                         for pat in inner.iter() {\n                             if let PatKind::Binding(_, id, ident, None) = pat.kind {\n                                 if ident.as_str().starts_with('_') && !is_local_used(cx, arm.body, id) {\n-                                    ident_bind_name = (&ident.name.as_str()).to_string();\n+                                    ident_bind_name = ident.name.as_str().to_string();\n                                     matching_wild = true;\n                                 }\n                             }\n@@ -1127,7 +1127,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n             if let CommonPrefixSearcher::Path(path_prefix) = path_prefix {\n                 let mut s = String::new();\n                 for seg in path_prefix {\n-                    s.push_str(&seg.ident.as_str());\n+                    s.push_str(seg.ident.as_str());\n                     s.push_str(\"::\");\n                 }\n                 s"}, {"sha": "4307cbf00507a1fcb130f83793770af35a4c334d", "filename": "src/tools/clippy/clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -81,7 +81,7 @@ fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<M\n         if args.is_empty();\n         if let hir::ExprKind::Path(hir::QPath::TypeRelative(_, segment)) = &func.kind;\n         then {\n-            match &*segment.ident.as_str() {\n+            match segment.ident.as_str() {\n                 \"max_value\" => return Some(MinMax::Max),\n                 \"min_value\" => return Some(MinMax::Min),\n                 _ => {}"}, {"sha": "4934240abfc46c2feca8983bf17bab4a4758abc7", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -80,7 +80,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::symbol::SymbolStr;\n+use rustc_span::symbol::Symbol;\n use rustc_span::{sym, Span};\n use rustc_typeck::hir_ty_to_ty;\n \n@@ -1997,21 +1997,21 @@ impl_lint_pass!(Methods => [\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n-fn method_call<'tcx>(recv: &'tcx hir::Expr<'tcx>) -> Option<(SymbolStr, &'tcx [hir::Expr<'tcx>], Span)> {\n+fn method_call<'tcx>(recv: &'tcx hir::Expr<'tcx>) -> Option<(Symbol, &'tcx [hir::Expr<'tcx>], Span)> {\n     if let ExprKind::MethodCall(path, span, args, _) = recv.kind {\n         if !args.iter().any(|e| e.span.from_expansion()) {\n-            return Some((path.ident.name.as_str(), args, span));\n+            return Some((path.ident.name, args, span));\n         }\n     }\n     None\n }\n \n-/// Same as `method_call` but the `SymbolStr` is dereferenced into a temporary `&str`\n+/// Same as `method_call` but the `Symbol` is dereferenced into a temporary `&str`\n macro_rules! method_call {\n     ($expr:expr) => {\n         method_call($expr)\n             .as_ref()\n-            .map(|&(ref name, args, span)| (&**name, args, span))\n+            .map(|&(ref name, args, span)| (name.as_str(), args, span))\n     };\n }\n \n@@ -2028,8 +2028,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 from_iter_instead_of_collect::check(cx, expr, args, func);\n             },\n             hir::ExprKind::MethodCall(method_call, ref method_span, args, _) => {\n-                or_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n-                expect_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n+                or_fun_call::check(cx, expr, *method_span, method_call.ident.as_str(), args);\n+                expect_fun_call::check(cx, expr, *method_span, method_call.ident.as_str(), args);\n                 clone_on_copy::check(cx, expr, method_call.ident.name, args);\n                 clone_on_ref_ptr::check(cx, expr, method_call.ident.name, args);\n                 inefficient_to_string::check(cx, expr, method_call.ident.name, args);\n@@ -2184,7 +2184,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n                 wrong_self_convention::check(\n                     cx,\n-                    &item.ident.name.as_str(),\n+                    item.ident.name.as_str(),\n                     self_ty,\n                     first_arg_ty,\n                     first_arg_span,"}, {"sha": "70f20da1d6db795f4e452d1c618d6efeb790d552", "filename": "src/tools/clippy/clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -140,7 +140,7 @@ fn parse_iter_usage(\n             let did = cx.typeck_results().type_dependent_def_id(e.hir_id)?;\n             let iter_id = cx.tcx.get_diagnostic_item(sym::Iterator)?;\n \n-            match (&*name.ident.as_str(), args) {\n+            match (name.ident.as_str(), args) {\n                 (\"next\", []) if cx.tcx.trait_of_item(did) == Some(iter_id) => {\n                     if reverse {\n                         (IterUsageKind::Second, e.span)\n@@ -298,7 +298,7 @@ fn check_iter(\n                 if let Some(did) = cx.typeck_results().type_dependent_def_id(e.hir_id);\n                 if let Some(iter_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n                 then {\n-                    match (&*name.ident.as_str(), args) {\n+                    match (name.ident.as_str(), args) {\n                         (\"next\", []) if cx.tcx.trait_of_item(did) == Some(iter_id) => {\n                             return true;\n                         },"}, {"sha": "401dc27811dc3aa05ca5de9c822c9bb41c7a7bd5", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -407,6 +407,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n             // Don't lint things expanded by #[derive(...)], etc or `await` desugaring\n             return;\n         }\n+        let sym;\n         let binding = match expr.kind {\n             ExprKind::Path(ref qpath) if !matches!(qpath, hir::QPath::LangItem(..)) => {\n                 let binding = last_path_segment(qpath).ident.as_str();\n@@ -423,7 +424,8 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n                 }\n             },\n             ExprKind::Field(_, ident) => {\n-                let name = ident.as_str();\n+                sym = ident.name;\n+                let name = sym.as_str();\n                 if name.starts_with('_') && !name.starts_with(\"__\") {\n                     Some(name)\n                 } else {"}, {"sha": "566e15ab2a6d640aff7e55090733d58c4313762b", "filename": "src/tools/clippy/clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -75,7 +75,7 @@ impl LateLintPass<'_> for ImportRename {\n             if let Some(import) = match snip.split_once(\" as \") {\n                 None => Some(snip.as_str()),\n                 Some((import, rename)) => {\n-                    if rename.trim() == &*name.as_str() {\n+                    if rename.trim() == name.as_str() {\n                         None\n                     } else {\n                         Some(import.trim())"}, {"sha": "1f9db39cf8ca6a7e9742a2761d4bb89b466614f6", "filename": "src/tools/clippy/clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -48,15 +48,15 @@ impl LateLintPass<'_> for MultipleCrateVersions {\n         }\n \n         let metadata = unwrap_cargo_metadata!(cx, MULTIPLE_CRATE_VERSIONS, true);\n-        let local_name = cx.tcx.crate_name(LOCAL_CRATE).as_str();\n+        let local_name = cx.tcx.crate_name(LOCAL_CRATE);\n         let mut packages = metadata.packages;\n         packages.sort_by(|a, b| a.name.cmp(&b.name));\n \n         if_chain! {\n             if let Some(resolve) = &metadata.resolve;\n             if let Some(local_id) = packages\n                 .iter()\n-                .find_map(|p| if p.name == *local_name { Some(&p.id) } else { None });\n+                .find_map(|p| if p.name == local_name.as_str() { Some(&p.id) } else { None });\n             then {\n                 for (name, group) in &packages.iter().group_by(|p| p.name.clone()) {\n                     let group: Vec<&Package> = group.collect();"}, {"sha": "22834cf61ee038224db9e08d897bd65d67a7e14d", "filename": "src/tools/clippy/clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_reference.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n                 let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n-                check_arguments(cx, arguments, method_type, &path.ident.as_str(), \"method\");\n+                check_arguments(cx, arguments, method_type, path.ident.as_str(), \"method\");\n             },\n             _ => (),\n         }"}, {"sha": "0931fec149ebfe557ec6edef687b93671e981cc0", "filename": "src/tools/clippy/clippy_lints/src/needless_option_as_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_option_as_deref.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for OptionNeedlessDeref {\n             if is_type_diagnostic_item(cx,outer_ty,sym::Option);\n             if let ExprKind::MethodCall(path, _, [sub_expr], _) = expr.kind;\n             let symbol = path.ident.as_str();\n-            if symbol==\"as_deref\" || symbol==\"as_deref_mut\";\n+            if symbol == \"as_deref\" || symbol == \"as_deref_mut\";\n             if TyS::same_type( outer_ty, typeck.expr_ty(sub_expr) );\n             then{\n                 span_lint_and_sugg("}, {"sha": "25fbcb3c6094bb828802221a63e3b8c539654921", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -224,14 +224,14 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             match existing_name.len.cmp(&count) {\n                 Ordering::Greater => {\n                     if existing_name.len - count != 1\n-                        || levenstein_not_1(&interned_name, &existing_name.interned.as_str())\n+                        || levenstein_not_1(&interned_name, existing_name.interned.as_str())\n                     {\n                         continue;\n                     }\n                 },\n                 Ordering::Less => {\n                     if count - existing_name.len != 1\n-                        || levenstein_not_1(&existing_name.interned.as_str(), &interned_name)\n+                        || levenstein_not_1(existing_name.interned.as_str(), &interned_name)\n                     {\n                         continue;\n                     }"}, {"sha": "4722c031006be465d66049cbab8acfc4ea59c4a8", "filename": "src/tools/clippy/clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -104,7 +104,7 @@ fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a Mac\n     };\n     if_chain! {\n         if let ExpnKind::Macro(MacroKind::Bang, mac_name) = span.ctxt().outer_expn_data().kind;\n-        let name = &*mac_name.as_str();\n+        let name = mac_name.as_str();\n         if let Some(braces) = mac_braces.macro_braces.get(name);\n         if let Some(snip) = snippet_opt(cx, span.ctxt().outer_expn_data().call_site);\n         // we must check only invocation sites"}, {"sha": "1b9285c2298df7f48e5ae9f9fe1da0a942a1c7df", "filename": "src/tools/clippy/clippy_lints/src/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fopen_options.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -82,7 +82,7 @@ fn get_open_options(cx: &LateContext<'_>, argument: &Expr<'_>, options: &mut Vec\n                 _ => Argument::Unknown,\n             };\n \n-            match &*path.ident.as_str() {\n+            match path.ident.as_str() {\n                 \"create\" => {\n                     options.push((OpenOption::Create, argument_option));\n                 },"}, {"sha": "e58ca95fa042000639a305af32ea1aa8999b2f7b", "filename": "src/tools/clippy/clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for PathBufPushOverwrite {\n             if let Some(get_index_arg) = args.get(1);\n             if let ExprKind::Lit(ref lit) = get_index_arg.kind;\n             if let LitKind::Str(ref path_lit, _) = lit.node;\n-            if let pushed_path = Path::new(&*path_lit.as_str());\n+            if let pushed_path = Path::new(path_lit.as_str());\n             if let Some(pushed_path_lit) = pushed_path.to_str();\n             if pushed_path.has_root();\n             if let Some(root) = pushed_path.components().next();"}, {"sha": "b6d04334de9e50e71b538e4f81cb40b525c65036", "filename": "src/tools/clippy/clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -150,7 +150,7 @@ fn check_regex<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, utf8: bool) {\n \n     if let ExprKind::Lit(ref lit) = expr.kind {\n         if let LitKind::Str(ref r, style) = lit.node {\n-            let r = &r.as_str();\n+            let r = r.as_str();\n             let offset = if let StrStyle::Raw(n) = style { 2 + n } else { 1 };\n             match parser.parse(r) {\n                 Ok(r) => {"}, {"sha": "398e2c200de3ca777db90fcf9295a8c06217f6a8", "filename": "src/tools/clippy/clippy_lints/src/serde_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fserde_api.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> LateLintPass<'tcx> for SerdeApi {\n                     let mut seen_str = None;\n                     let mut seen_string = None;\n                     for item in items {\n-                        match &*item.ident.as_str() {\n+                        match item.ident.as_str() {\n                             \"visit_str\" => seen_str = Some(item.span),\n                             \"visit_string\" => seen_string = Some(item.span),\n                             _ => {},"}, {"sha": "20e38dc564eb4138e197cbe05c2e8975fb58fdeb", "filename": "src/tools/clippy/clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -89,7 +89,7 @@ fn detect_stable_sort_primitive(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option\n     if_chain! {\n         if let ExprKind::MethodCall(method_name, _, args, _) = &expr.kind;\n         if let Some(slice) = &args.get(0);\n-        if let Some(method) = SortingKind::from_stable_name(&method_name.ident.name.as_str());\n+        if let Some(method) = SortingKind::from_stable_name(method_name.ident.name.as_str());\n         if let Some(slice_type) = is_slice_of_primitives(cx, slice);\n         then {\n             let args_str = args.iter().skip(1).map(|arg| Sugg::hir(cx, arg, \"..\").to_string()).collect::<Vec<String>>().join(\", \");"}, {"sha": "ad8e72ad764e133ff3b4ce29bbda643b8d4c830b", "filename": "src/tools/clippy/clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fstrings.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -327,7 +327,7 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n             if let ExprKind::MethodCall(path, _, [recv], _) = &e.kind;\n             if path.ident.name == sym!(into_bytes);\n             if let ExprKind::MethodCall(path, _, [recv], _) = &recv.kind;\n-            if matches!(&*path.ident.name.as_str(), \"to_owned\" | \"to_string\");\n+            if matches!(path.ident.name.as_str(), \"to_owned\" | \"to_string\");\n             if let ExprKind::Lit(lit) = &recv.kind;\n             if let LitKind::Str(lit_content, _) = &lit.node;\n "}, {"sha": "6d9aff474214c30420508b7390b28d874f2e5f32", "filename": "src/tools/clippy/clippy_lints/src/unit_types/unit_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -12,7 +12,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n                 if let ExprKind::Binary(ref cmp, left, _) = expr.kind {\n                     let op = cmp.node;\n                     if op.is_comparison() && cx.typeck_results().expr_ty(left).is_unit() {\n-                        let result = match &*symbol.as_str() {\n+                        let result = match symbol.as_str() {\n                             \"assert_eq\" | \"debug_assert_eq\" => \"succeed\",\n                             \"assert_ne\" | \"debug_assert_ne\" => \"fail\",\n                             _ => return,"}, {"sha": "004530db0861d28a1373e34b91a3cf82fb23dc14", "filename": "src/tools/clippy/clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_io_amount.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n                     check_map_error(cx, res, expr);\n                 }\n             },\n-            hir::ExprKind::MethodCall(path, _, [ref arg_0, ..], _) => match &*path.ident.as_str() {\n+            hir::ExprKind::MethodCall(path, _, [ref arg_0, ..], _) => match path.ident.as_str() {\n                 \"expect\" | \"unwrap\" | \"unwrap_or\" | \"unwrap_or_else\" => {\n                     check_map_error(cx, arg_0, expr);\n                 },\n@@ -71,7 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     let mut call = call;\n     while let hir::ExprKind::MethodCall(path, _, args, _) = call.kind {\n-        if matches!(&*path.ident.as_str(), \"or\" | \"or_else\" | \"ok\") {\n+        if matches!(path.ident.as_str(), \"or\" | \"or_else\" | \"ok\") {\n             call = &args[0];\n         } else {\n             break;\n@@ -82,7 +82,7 @@ fn check_map_error(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<\n \n fn check_method_call(cx: &LateContext<'_>, call: &hir::Expr<'_>, expr: &hir::Expr<'_>) {\n     if let hir::ExprKind::MethodCall(path, _, _, _) = call.kind {\n-        let symbol = &*path.ident.as_str();\n+        let symbol = path.ident.as_str();\n         let read_trait = match_trait_method(cx, call, &paths::IO_READ);\n         let write_trait = match_trait_method(cx, call, &paths::IO_WRITE);\n "}, {"sha": "bfd17a6874994390a025d51c58922b10f99ed6b6", "filename": "src/tools/clippy/clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -94,7 +94,7 @@ impl EarlyLintPass for UnusedUnit {\n \n         if_chain! {\n             if segments.len() == 1;\n-            if [\"Fn\", \"FnMut\", \"FnOnce\"].contains(&&*segments[0].ident.name.as_str());\n+            if [\"Fn\", \"FnMut\", \"FnOnce\"].contains(&segments[0].ident.name.as_str());\n             if let Some(args) = &segments[0].args;\n             if let ast::GenericArgs::Parenthesized(generic_args) = &**args;\n             if let ast::FnRetTy::Ty(ty) = &generic_args.output;"}, {"sha": "01a5691223bfc6ef4db924e6424432aa37970eb2", "filename": "src/tools/clippy/clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funwrap.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -158,7 +158,7 @@ fn collect_unwrap_info<'tcx>(\n             if let Some(local_id) = path_to_local(&args[0]);\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             let name = method_name.ident.as_str();\n-            if is_relevant_option_call(cx, ty, &name) || is_relevant_result_call(cx, ty, &name);\n+            if is_relevant_option_call(cx, ty, name) || is_relevant_result_call(cx, ty, name);\n             then {\n                 assert!(args.len() == 1);\n                 let unwrappable = match name.as_ref() {"}, {"sha": "0c62161e53d437372e120404b5862f8aa03f4d73", "filename": "src/tools/clippy/clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -79,7 +79,7 @@ fn correct_ident(ident: &str) -> String {\n \n fn check_ident(cx: &LateContext<'_>, ident: &Ident, be_aggressive: bool) {\n     let span = ident.span;\n-    let ident = &ident.as_str();\n+    let ident = ident.as_str();\n     let corrected = correct_ident(ident);\n     // warn if we have pure-uppercase idents\n     // assume that two-letter words are some kind of valid abbreviation like FP for false positive"}, {"sha": "abd8a3623703b2f14ea8232a8e9eaa0fc69d128c", "filename": "src/tools/clippy/clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n             },\n \n             ExprKind::MethodCall(name, .., args, _) => {\n-                if is_trait_method(cx, e, sym::Into) && &*name.ident.as_str() == \"into\" {\n+                if is_trait_method(cx, e, sym::Into) && name.ident.as_str() == \"into\" {\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n                     if same_type_and_consts(a, b) {"}, {"sha": "f9add927b49b86d7c3b993750b91993decb6fba8", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -371,9 +371,9 @@ impl EarlyLintPass for Write {\n /// Return this and a boolean indicating whether it only consisted of a newline.\n fn newline_span(fmtstr: &StrLit) -> (Span, bool) {\n     let sp = fmtstr.span;\n-    let contents = &fmtstr.symbol.as_str();\n+    let contents = fmtstr.symbol.as_str();\n \n-    if *contents == r\"\\n\" {\n+    if contents == r\"\\n\" {\n         return (sp, true);\n     }\n \n@@ -484,7 +484,7 @@ impl Write {\n             StrStyle::Raw(n) => Some(n as usize),\n         };\n \n-        let mut parser = Parser::new(&str_sym, style, snippet_opt(cx, str_lit.span), false, ParseMode::Format);\n+        let mut parser = Parser::new(str_sym, style, snippet_opt(cx, str_lit.span), false, ParseMode::Format);\n         let mut args = SimpleFormatArgs::default();\n \n         while let Some(arg) = parser.next() {\n@@ -589,7 +589,7 @@ impl Write {\n                     lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::StrRaw(_) | LitKind::Str | LitKind::ByteStrRaw(_) | LitKind::ByteStr => continue,\n-                LitKind::Byte | LitKind::Char => match &*lit.token.symbol.as_str() {\n+                LitKind::Byte | LitKind::Char => match lit.token.symbol.as_str() {\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Cooked) => \"\\\\\\\"\",\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Raw(0)) => continue,\n                     \"\\\\\\\\\" if matches!(fmtstr.style, StrStyle::Raw(_)) => \"\\\\\",\n@@ -671,7 +671,7 @@ fn check_newlines(fmtstr: &StrLit) -> bool {\n     let mut last_was_cr = false;\n     let mut should_lint = false;\n \n-    let contents = &fmtstr.symbol.as_str();\n+    let contents = fmtstr.symbol.as_str();\n \n     let mut cb = |r: Range<usize>, c: Result<char, EscapeError>| {\n         let c = c.unwrap();"}, {"sha": "25a84d16650896e090c49bfa0f68237f9a616b9d", "filename": "src/tools/clippy/clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -113,7 +113,7 @@ pub fn get_attr<'a>(\n fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'static str, mut f: F) {\n     for attr in get_attr(sess, attrs, name) {\n         if let Some(ref value) = attr.value_str() {\n-            if let Ok(value) = FromStr::from_str(&value.as_str()) {\n+            if let Ok(value) = FromStr::from_str(value.as_str()) {\n                 f(value);\n             } else {\n                 sess.span_err(attr.span, \"not a number\");"}, {"sha": "dc5ec5f229518eda886895e80a633a30aefb8052", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -319,8 +319,8 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     if let ExprKind::Path(qpath) = &callee.kind;\n                     let res = self.typeck_results.qpath_res(qpath, callee.hir_id);\n                     if let Some(def_id) = res.opt_def_id();\n-                    let def_path: Vec<_> = self.lcx.get_def_path(def_id).into_iter().map(Symbol::as_str).collect();\n-                    let def_path: Vec<&str> = def_path.iter().take(4).map(|s| &**s).collect();\n+                    let def_path = self.lcx.get_def_path(def_id);\n+                    let def_path: Vec<&str> = def_path.iter().take(4).map(|s| s.as_str()).collect();\n                     if let [\"core\", \"num\", int_impl, \"max_value\"] = *def_path;\n                     then {\n                        let value = match int_impl {"}, {"sha": "61e529a6079c935b65c3345b68dffaf5fded8f9e", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -47,7 +47,7 @@ impl ops::BitOrAssign for EagernessSuggestion {\n /// Determine the eagerness of the given function call.\n fn fn_eagerness(cx: &LateContext<'tcx>, fn_id: DefId, name: Symbol, args: &'tcx [Expr<'_>]) -> EagernessSuggestion {\n     use EagernessSuggestion::{Eager, Lazy, NoChange};\n-    let name = &*name.as_str();\n+    let name = name.as_str();\n \n     let ty = match cx.tcx.impl_of_method(fn_id) {\n         Some(id) => cx.tcx.type_of(id),"}, {"sha": "1a4da1627b7842eecb83d3f85f5f7f3271cad66b", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -372,7 +372,7 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> b\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262.\n                 crate::meets_msrv(\n                     msrv,\n-                    &RustcVersion::parse(&since.as_str())\n+                    &RustcVersion::parse(since.as_str())\n                         .expect(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted\"),\n                 )\n             } else {"}, {"sha": "3887a8051f20995efc83e20c88b789e8d162ef84", "filename": "src/tools/rustfmt/src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -337,7 +337,7 @@ impl Rewrite for ast::Attribute {\n         } else {\n             let should_skip = self\n                 .ident()\n-                .map(|s| context.skip_context.skip_attribute(&s.name.as_str()))\n+                .map(|s| context.skip_context.skip_attribute(s.name.as_str()))\n                 .unwrap_or(false);\n             let prefix = attr_prefix(self);\n \n@@ -356,7 +356,7 @@ impl Rewrite for ast::Attribute {\n \n                         let literal_str = literal.as_str();\n                         let doc_comment_formatter =\n-                            DocCommentFormatter::new(&*literal_str, comment_style);\n+                            DocCommentFormatter::new(literal_str, comment_style);\n                         let doc_comment = format!(\"{}\", doc_comment_formatter);\n                         return rewrite_doc_comment(\n                             &doc_comment,"}, {"sha": "b7dd6b06ff8276adfdec82a2d58641606b229941", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -616,10 +616,10 @@ impl<'a> FmtVisitor<'a> {\n                 (TyAlias(lty), TyAlias(rty))\n                     if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                 {\n-                    a.ident.as_str().cmp(&b.ident.as_str())\n+                    a.ident.as_str().cmp(b.ident.as_str())\n                 }\n                 (Const(..), Const(..)) | (MacCall(..), MacCall(..)) => {\n-                    a.ident.as_str().cmp(&b.ident.as_str())\n+                    a.ident.as_str().cmp(b.ident.as_str())\n                 }\n                 (Fn(..), Fn(..)) => a.span.lo().cmp(&b.span.lo()),\n                 (TyAlias(ty), _) if is_type(&ty.ty) => Ordering::Less,\n@@ -1029,7 +1029,7 @@ pub(crate) fn format_trait(\n         if !bounds.is_empty() {\n             let ident_hi = context\n                 .snippet_provider\n-                .span_after(item.span, &item.ident.as_str());\n+                .span_after(item.span, item.ident.as_str());\n             let bound_hi = bounds.last().unwrap().span().hi();\n             let snippet = context.snippet(mk_sp(ident_hi, bound_hi));\n             if contains_comment(snippet) {"}, {"sha": "9d438a80d942f8aca16f74f7412a01e23ca1d11e", "filename": "src/tools/rustfmt/src/modules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmodules.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -455,7 +455,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n \n     fn push_inline_mod_directory(&mut self, id: symbol::Ident, attrs: &[ast::Attribute]) {\n         if let Some(path) = find_path_value(attrs) {\n-            self.directory.path.push(&*path.as_str());\n+            self.directory.path.push(path.as_str());\n             self.directory.ownership = DirectoryOwnership::Owned { relative: None };\n         } else {\n             // We have to push on the current module name in the case of relative\n@@ -467,10 +467,10 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             if let DirectoryOwnership::Owned { relative } = &mut self.directory.ownership {\n                 if let Some(ident) = relative.take() {\n                     // remove the relative offset\n-                    self.directory.path.push(&*ident.as_str());\n+                    self.directory.path.push(ident.as_str());\n                 }\n             }\n-            self.directory.path.push(&*id.as_str());\n+            self.directory.path.push(id.as_str());\n         }\n     }\n "}, {"sha": "13bfc92507d0a9d5d676cc0c50874f6923d16c95", "filename": "src/tools/rustfmt/src/reorder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Freorder.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -26,14 +26,14 @@ use crate::visitor::FmtVisitor;\n fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n     match (&a.kind, &b.kind) {\n         (&ast::ItemKind::Mod(..), &ast::ItemKind::Mod(..)) => {\n-            a.ident.as_str().cmp(&b.ident.as_str())\n+            a.ident.as_str().cmp(b.ident.as_str())\n         }\n         (&ast::ItemKind::ExternCrate(ref a_name), &ast::ItemKind::ExternCrate(ref b_name)) => {\n             // `extern crate foo as bar;`\n             //               ^^^ Comparing this.\n-            let a_orig_name = a_name.map_or_else(|| a.ident.as_str(), rustc_span::Symbol::as_str);\n-            let b_orig_name = b_name.map_or_else(|| b.ident.as_str(), rustc_span::Symbol::as_str);\n-            let result = a_orig_name.cmp(&b_orig_name);\n+            let a_orig_name = a_name.unwrap_or(a.ident.name);\n+            let b_orig_name = b_name.unwrap_or(b.ident.name);\n+            let result = a_orig_name.as_str().cmp(b_orig_name.as_str());\n             if result != Ordering::Equal {\n                 return result;\n             }\n@@ -44,7 +44,7 @@ fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n                 (Some(..), None) => Ordering::Greater,\n                 (None, Some(..)) => Ordering::Less,\n                 (None, None) => Ordering::Equal,\n-                (Some(..), Some(..)) => a.ident.as_str().cmp(&b.ident.as_str()),\n+                (Some(..), Some(..)) => a.ident.as_str().cmp(b.ident.as_str()),\n             }\n         }\n         _ => unreachable!(),"}, {"sha": "23d065c9cc95ae3113ddf12a53e5a12f8fc3cd03", "filename": "src/tools/rustfmt/src/syntux/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fparser.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -95,15 +95,17 @@ pub(crate) enum ParserError {\n \n impl<'a> Parser<'a> {\n     pub(crate) fn submod_path_from_attr(attrs: &[ast::Attribute], path: &Path) -> Option<PathBuf> {\n-        let path_string = first_attr_value_str_by_name(attrs, sym::path)?.as_str();\n+        let path_sym = first_attr_value_str_by_name(attrs, sym::path)?;\n+        let path_str = path_sym.as_str();\n+\n         // On windows, the base path might have the form\n         // `\\\\?\\foo\\bar` in which case it does not tolerate\n         // mixed `/` and `\\` separators, so canonicalize\n         // `/` to `\\`.\n         #[cfg(windows)]\n-        let path_string = path_string.replace(\"/\", \"\\\\\");\n+        let path_str = path_str.replace(\"/\", \"\\\\\");\n \n-        Some(path.join(&*path_string))\n+        Some(path.join(path_str))\n     }\n \n     pub(crate) fn parse_file_as_module("}, {"sha": "0c0b789a6efd1a63614621af60b8c89aa21753f0", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41a6925badac7508d7a72cc1fc20f43dc6ad75e/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=a41a6925badac7508d7a72cc1fc20f43dc6ad75e", "patch": "@@ -260,7 +260,7 @@ fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.kind {\n         MetaItemKind::Word => {\n             let path_str = pprust::path_to_string(&meta_item.path);\n-            path_str == *skip_annotation().as_str() || path_str == *depr_skip_annotation().as_str()\n+            path_str == skip_annotation().as_str() || path_str == depr_skip_annotation().as_str()\n         }\n         MetaItemKind::List(ref l) => {\n             meta_item.has_name(sym::cfg_attr) && l.len() == 2 && is_skip_nested(&l[1])"}]}