{"sha": "f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZTQ3YmEzZjEyMTNkZmI0MTQzYTA3OGZjM2RmM2ExMjdlNGFkYjY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-16T08:07:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-16T08:07:59Z"}, "message": "Rollup merge of #86983 - wesleywiser:natvis_std_types, r=michaelwoerister\n\nAdd or improve natvis definitions for common standard library types\n\nNatvis definitions are used by Windows debuggers to provide a better experience when inspecting a value for types with natvis definitions. Many of our standard library types and intrinsic Rust types like slices and `str` already have natvis definitions.\n\nThis PR adds natvis definitions for missing types (like all of the `Atomic*` types) and improves some of the existing ones (such as showing the ref count on `Arc<T>` and `Rc<T>` and showing the borrow state of `RefCell<T>`). I've also added cdb tests to cover these definitions and updated existing tests with the new visualizations.\n\nWith this PR, the following types now visualize in a much more intuitive way:\n\n### Type: `NonZero{I,U}{8,16,32,64,128,size}`, `Atomic{I,U}{8,16,32,64,size}`, `AtomicBool` and `Wrapping<T>`\n\n<details><summary>Example:</summary>\n\n```rust\nlet a_u32 = AtomicU32::new(32i32);\n```\n\n```\n0:000> dx a_u32\na_u32            : 32 [Type: core::sync::atomic::AtomicU32]\n    [<Raw View>]     [Type: core::sync::atomic::AtomicU32]\n```\n\n</details>\n\n### Type: `Cell<T>` and `UnsafeCell<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet cell = Cell::new(123u8);\nlet unsafecell = UnsafeCell::new((42u16, 30u16));\n```\n\n```\n0:000> dx cell\ncell             : 123 [Type: core::cell::Cell<u8>]\n    [<Raw View>]     [Type: core::cell::Cell<u8>]\n\n0:000> dx unsafecell\nunsafecell       : (42, 30) [Type: core::cell::UnsafeCell<tuple<u16, u16>>]\n    [<Raw View>]     [Type: core::cell::UnsafeCell<tuple<u16, u16>>]\n    [0]              : 42 [Type: unsigned short]\n    [1]              : 30 [Type: unsigned short]\n```\n\n</details>\n\n### Type: `RefCell<T>`\n\n<details><summary>Example:</summary>\n\n```rust\nlet refcell = RefCell::new((123u16, 456u32));\n```\n\n```\n0:000> dx refcell\nrefcell          : (123, 456) [Type: core::cell::RefCell<tuple<u16, u32>>]\n    [<Raw View>]     [Type: core::cell::RefCell<tuple<u16, u32>>]\n    [Borrow state]   : Unborrowed\n    [0]              : 123 [Type: unsigned short]\n    [1]              : 456 [Type: unsigned int]\n```\n\n</details>\n\n### Type: `NonNull<T>` and `Unique<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet nonnull: NonNull<_> = (&(10, 20)).into();\n```\n\n```\n0:000> dx nonnull\nnonnull          : NonNull(0x7ff6a5d9c390: (10, 20)) [Type: core::ptr::non_null::NonNull<tuple<i32, i32>>]\n    [<Raw View>]     [Type: core::ptr::non_null::NonNull<tuple<i32, i32>>]\n    [0]              : 10 [Type: int]\n    [1]              : 20 [Type: int]\n```\n\n</details>\n\n### Type: `Range<T>`, `RangeFrom<T>`, `RangeInclusive<T>`, `RangeTo<T>` and `RangeToInclusive<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet range = (1..12);\nlet rangefrom = (9..);\nlet rangeinclusive = (32..=80);\nlet rangeto = (..42);\nlet rangetoinclusive = (..=120);\n```\n\n```\n0:000> dx range\nrange            : (1..12) [Type: core::ops::range::Range<i32>]\n    [<Raw View>]     [Type: core::ops::range::Range<i32>]\n\n0:000> dx rangefrom\nrangefrom        : (9..) [Type: core::ops::range::RangeFrom<i32>]\n    [<Raw View>]     [Type: core::ops::range::RangeFrom<i32>]\n\n0:000> dx rangeinclusive\nrangeinclusive   : (32..=80) [Type: core::ops::range::RangeInclusive<i32>]\n    [<Raw View>]     [Type: core::ops::range::RangeInclusive<i32>]\n\n0:000> dx rangeto\nrangeto          : (..42) [Type: core::ops::range::RangeTo<i32>]\n    [<Raw View>]     [Type: core::ops::range::RangeTo<i32>]\n\n0:000> dx rangetoinclusive\nrangetoinclusive : (..=120) [Type: core::ops::range::RangeToInclusive<i32>]\n    [<Raw View>]     [Type: core::ops::range::RangeToInclusive<i32>]\n```\n\n</details>\n\n### Type: `Duration`\n<details><summary>Example:</summary>\n\n```rust\nlet duration = Duration::new(5, 12);\n```\n\n```\n0:000> dx duration\nduration         : 5s 12ns [Type: core::time::Duration]\n    [<Raw View>]     [Type: core::time::Duration]\n    seconds          : 5 [Type: unsigned __int64]\n    nanoseconds      : 12 [Type: unsigned int]\n```\n\n</details>\n\n### Type: `ManuallyDrop<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet manuallydrop = ManuallyDrop::new((123, 456));\n```\n\n```\n0:000> dx manuallydrop\nmanuallydrop     : (123, 456) [Type: core::mem::manually_drop::ManuallyDrop<tuple<i32, i32>>]\n    [<Raw View>]     [Type: core::mem::manually_drop::ManuallyDrop<tuple<i32, i32>>]\n    [0]              : 123 [Type: int]\n    [1]              : 456 [Type: int]\n```\n\n</details>\n\n### Type: `Pin<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet mut s = \"this\".to_string();\nlet pin = Pin::new(&mut s);\n```\n\n```\n0:000> dx pin\npin              : Pin(0x11a0ff6f0: \"this\") [Type: core::pin::Pin<mut alloc::string::String*>]\n    [<Raw View>]     [Type: core::pin::Pin<mut alloc::string::String*>]\n    [len]            : 4 [Type: unsigned __int64]\n    [capacity]       : 4 [Type: unsigned __int64]\n    [chars]\n```\n\n</details>\n\n### Type: `Rc<T>` and `Arc<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet rc = Rc::new(42i8);\nlet rc_weak = Rc::downgrade(&rc);\n```\n\n```\n0:000> dx rc\nrc               : 42 [Type: alloc::rc::Rc<i8>]\n    [<Raw View>]     [Type: alloc::rc::Rc<i8>]\n    [Reference count] : 1 [Type: core::cell::Cell<usize>]\n\n0:000> dx rc_weak\nrc_weak          : 42 [Type: alloc::rc::Weak<i8>]\n    [<Raw View>]     [Type: alloc::rc::Weak<i8>]\n```\n\n</details>\n\nr? ```@michaelwoerister```\ncc ```@nanguye2496```", "tree": {"sha": "677de75e0a1512d015f78d5399b9d8e0fb9263af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/677de75e0a1512d015f78d5399b9d8e0fb9263af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8T5fCRBK7hj4Ov3rIwAACK4IAASKwKNja6xP3AbrxsBIXlge\nbAw/XbYx9gwsR5cduzzTtjBXBRadqLa0G4scWiy2BW5JTnzh3Pek5SjgfgBJMVZF\naOB4bbFceXyUE6vqngArOc1u+eFY3V4Kf0cFzQ9/RjEiOYlLm4S28wWgR5YMalet\nS5fiEKcZri9OFu70KYqp5BH5PYyWKOW3zGE3qOwbcImJsaYvsvcm0clSUK7fXBG5\nTvGNSqzerv/KlkmmXmg1HoUk0aKzh8v9C8yu/xuIbAOW4pB2htTOozd1WlqXra00\nQnvWR1s8Nw+iUyC8jRNPLdqc5c6rDdSEungHfzpht+sZIKoYBrAmAtHQYDewpgk=\n=cO9n\n-----END PGP SIGNATURE-----\n", "payload": "tree 677de75e0a1512d015f78d5399b9d8e0fb9263af\nparent 057050a95bdfc5849a893208c53c7b2a081c6808\nparent 6e357bce5db7c14aa132acc6707a685d978b2efa\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626422879 +0200\ncommitter GitHub <noreply@github.com> 1626422879 +0200\n\nRollup merge of #86983 - wesleywiser:natvis_std_types, r=michaelwoerister\n\nAdd or improve natvis definitions for common standard library types\n\nNatvis definitions are used by Windows debuggers to provide a better experience when inspecting a value for types with natvis definitions. Many of our standard library types and intrinsic Rust types like slices and `str` already have natvis definitions.\n\nThis PR adds natvis definitions for missing types (like all of the `Atomic*` types) and improves some of the existing ones (such as showing the ref count on `Arc<T>` and `Rc<T>` and showing the borrow state of `RefCell<T>`). I've also added cdb tests to cover these definitions and updated existing tests with the new visualizations.\n\nWith this PR, the following types now visualize in a much more intuitive way:\n\n### Type: `NonZero{I,U}{8,16,32,64,128,size}`, `Atomic{I,U}{8,16,32,64,size}`, `AtomicBool` and `Wrapping<T>`\n\n<details><summary>Example:</summary>\n\n```rust\nlet a_u32 = AtomicU32::new(32i32);\n```\n\n```\n0:000> dx a_u32\na_u32            : 32 [Type: core::sync::atomic::AtomicU32]\n    [<Raw View>]     [Type: core::sync::atomic::AtomicU32]\n```\n\n</details>\n\n### Type: `Cell<T>` and `UnsafeCell<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet cell = Cell::new(123u8);\nlet unsafecell = UnsafeCell::new((42u16, 30u16));\n```\n\n```\n0:000> dx cell\ncell             : 123 [Type: core::cell::Cell<u8>]\n    [<Raw View>]     [Type: core::cell::Cell<u8>]\n\n0:000> dx unsafecell\nunsafecell       : (42, 30) [Type: core::cell::UnsafeCell<tuple<u16, u16>>]\n    [<Raw View>]     [Type: core::cell::UnsafeCell<tuple<u16, u16>>]\n    [0]              : 42 [Type: unsigned short]\n    [1]              : 30 [Type: unsigned short]\n```\n\n</details>\n\n### Type: `RefCell<T>`\n\n<details><summary>Example:</summary>\n\n```rust\nlet refcell = RefCell::new((123u16, 456u32));\n```\n\n```\n0:000> dx refcell\nrefcell          : (123, 456) [Type: core::cell::RefCell<tuple<u16, u32>>]\n    [<Raw View>]     [Type: core::cell::RefCell<tuple<u16, u32>>]\n    [Borrow state]   : Unborrowed\n    [0]              : 123 [Type: unsigned short]\n    [1]              : 456 [Type: unsigned int]\n```\n\n</details>\n\n### Type: `NonNull<T>` and `Unique<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet nonnull: NonNull<_> = (&(10, 20)).into();\n```\n\n```\n0:000> dx nonnull\nnonnull          : NonNull(0x7ff6a5d9c390: (10, 20)) [Type: core::ptr::non_null::NonNull<tuple<i32, i32>>]\n    [<Raw View>]     [Type: core::ptr::non_null::NonNull<tuple<i32, i32>>]\n    [0]              : 10 [Type: int]\n    [1]              : 20 [Type: int]\n```\n\n</details>\n\n### Type: `Range<T>`, `RangeFrom<T>`, `RangeInclusive<T>`, `RangeTo<T>` and `RangeToInclusive<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet range = (1..12);\nlet rangefrom = (9..);\nlet rangeinclusive = (32..=80);\nlet rangeto = (..42);\nlet rangetoinclusive = (..=120);\n```\n\n```\n0:000> dx range\nrange            : (1..12) [Type: core::ops::range::Range<i32>]\n    [<Raw View>]     [Type: core::ops::range::Range<i32>]\n\n0:000> dx rangefrom\nrangefrom        : (9..) [Type: core::ops::range::RangeFrom<i32>]\n    [<Raw View>]     [Type: core::ops::range::RangeFrom<i32>]\n\n0:000> dx rangeinclusive\nrangeinclusive   : (32..=80) [Type: core::ops::range::RangeInclusive<i32>]\n    [<Raw View>]     [Type: core::ops::range::RangeInclusive<i32>]\n\n0:000> dx rangeto\nrangeto          : (..42) [Type: core::ops::range::RangeTo<i32>]\n    [<Raw View>]     [Type: core::ops::range::RangeTo<i32>]\n\n0:000> dx rangetoinclusive\nrangetoinclusive : (..=120) [Type: core::ops::range::RangeToInclusive<i32>]\n    [<Raw View>]     [Type: core::ops::range::RangeToInclusive<i32>]\n```\n\n</details>\n\n### Type: `Duration`\n<details><summary>Example:</summary>\n\n```rust\nlet duration = Duration::new(5, 12);\n```\n\n```\n0:000> dx duration\nduration         : 5s 12ns [Type: core::time::Duration]\n    [<Raw View>]     [Type: core::time::Duration]\n    seconds          : 5 [Type: unsigned __int64]\n    nanoseconds      : 12 [Type: unsigned int]\n```\n\n</details>\n\n### Type: `ManuallyDrop<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet manuallydrop = ManuallyDrop::new((123, 456));\n```\n\n```\n0:000> dx manuallydrop\nmanuallydrop     : (123, 456) [Type: core::mem::manually_drop::ManuallyDrop<tuple<i32, i32>>]\n    [<Raw View>]     [Type: core::mem::manually_drop::ManuallyDrop<tuple<i32, i32>>]\n    [0]              : 123 [Type: int]\n    [1]              : 456 [Type: int]\n```\n\n</details>\n\n### Type: `Pin<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet mut s = \"this\".to_string();\nlet pin = Pin::new(&mut s);\n```\n\n```\n0:000> dx pin\npin              : Pin(0x11a0ff6f0: \"this\") [Type: core::pin::Pin<mut alloc::string::String*>]\n    [<Raw View>]     [Type: core::pin::Pin<mut alloc::string::String*>]\n    [len]            : 4 [Type: unsigned __int64]\n    [capacity]       : 4 [Type: unsigned __int64]\n    [chars]\n```\n\n</details>\n\n### Type: `Rc<T>` and `Arc<T>`\n<details><summary>Example:</summary>\n\n```rust\nlet rc = Rc::new(42i8);\nlet rc_weak = Rc::downgrade(&rc);\n```\n\n```\n0:000> dx rc\nrc               : 42 [Type: alloc::rc::Rc<i8>]\n    [<Raw View>]     [Type: alloc::rc::Rc<i8>]\n    [Reference count] : 1 [Type: core::cell::Cell<usize>]\n\n0:000> dx rc_weak\nrc_weak          : 42 [Type: alloc::rc::Weak<i8>]\n    [<Raw View>]     [Type: alloc::rc::Weak<i8>]\n```\n\n</details>\n\nr? ```@michaelwoerister```\ncc ```@nanguye2496```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "html_url": "https://github.com/rust-lang/rust/commit/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "057050a95bdfc5849a893208c53c7b2a081c6808", "url": "https://api.github.com/repos/rust-lang/rust/commits/057050a95bdfc5849a893208c53c7b2a081c6808", "html_url": "https://github.com/rust-lang/rust/commit/057050a95bdfc5849a893208c53c7b2a081c6808"}, {"sha": "6e357bce5db7c14aa132acc6707a685d978b2efa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e357bce5db7c14aa132acc6707a685d978b2efa", "html_url": "https://github.com/rust-lang/rust/commit/6e357bce5db7c14aa132acc6707a685d978b2efa"}], "stats": {"total": 645, "additions": 596, "deletions": 49}, "files": [{"sha": "558536fa613a5abae81809ef20ead310cb1850e8", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -1,8 +1,8 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n   <Type Name=\"str\">\n-    <DisplayString>{data_ptr,[length]s8}</DisplayString>\n-    <StringView>data_ptr,[length]s8</StringView>\n+    <DisplayString>{(char*)data_ptr,[length]s8}</DisplayString>\n+    <StringView>(char*)data_ptr,[length]s8</StringView>\n     <Expand>\n       <Item Name=\"[len]\" ExcludeView=\"simple\">length</Item>\n       <Synthetic Name=\"[chars]\">"}, {"sha": "d001f40fccbc7d573c526511f5772f162bc2403e", "filename": "src/etc/natvis/liballoc.natvis", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fliballoc.natvis?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -48,6 +48,7 @@\n       <Item Name=\"[len]\" ExcludeView=\"simple\">vec.len</Item>\n       <Item Name=\"[capacity]\" ExcludeView=\"simple\">vec.buf.cap</Item>\n       <Synthetic Name=\"[chars]\">\n+        <DisplayString>{(char*)vec.buf.ptr.pointer,[vec.len]s8}</DisplayString>\n         <Expand>\n           <ArrayItems>\n             <Size>vec.len</Size>\n@@ -57,22 +58,38 @@\n       </Synthetic>\n     </Expand>\n   </Type>\n+\n   <Type Name=\"alloc::rc::Rc&lt;*&gt;\">\n     <DisplayString>{ptr.pointer->value}</DisplayString>\n     <Expand>\n       <ExpandedItem>ptr.pointer->value</ExpandedItem>\n+      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n     </Expand>\n   </Type>\n+  <Type Name=\"alloc::rc::Weak&lt;*&gt;\">\n+    <DisplayString>{ptr.pointer->value}</DisplayString>\n+    <Expand>\n+      <ExpandedItem>ptr.pointer->value</ExpandedItem>\n+      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n+    </Expand>\n+  </Type>\n+\n   <Type Name=\"alloc::sync::Arc&lt;*&gt;\">\n     <DisplayString>{ptr.pointer->data}</DisplayString>\n     <Expand>\n       <ExpandedItem>ptr.pointer->data</ExpandedItem>\n+      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n     </Expand>\n   </Type>\n   <Type Name=\"alloc::sync::Weak&lt;*&gt;\">\n     <DisplayString>{ptr.pointer->data}</DisplayString>\n     <Expand>\n       <ExpandedItem>ptr.pointer->data</ExpandedItem>\n+      <Item Name=\"[Reference count]\">ptr.pointer->strong</Item>\n+      <Item Name=\"[Weak reference count]\">ptr.pointer->weak</Item>\n     </Expand>\n   </Type>\n   <Type Name=\"alloc::borrow::Cow&lt;*&gt;\">"}, {"sha": "fa8ee2d70bbab4a775a38ca7e401639b4f74b564", "filename": "src/etc/natvis/libcore.natvis", "status": "modified", "additions": 149, "deletions": 9, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Fetc%2Fnatvis%2Flibcore.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Fetc%2Fnatvis%2Flibcore.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibcore.natvis?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -1,23 +1,163 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n-  <Type Name=\"core::ptr::Unique&lt;*&gt;\">\n-    <DisplayString>{{ Unique {pointer} }}</DisplayString>\n+  <Type Name=\"core::cell::Cell&lt;*&gt;\">\n+    <DisplayString>{value.value}</DisplayString>\n     <Expand>\n-      <Item Name=\"[ptr]\">pointer</Item>\n+      <ExpandedItem>value.value</ExpandedItem>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::cell::Ref&lt;*&gt;\">\n+    <DisplayString>{value}</DisplayString>\n+    <Expand>\n+      <ExpandedItem>value</ExpandedItem>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::cell::RefMut&lt;*&gt;\">\n+    <DisplayString>{value}</DisplayString>\n+    <Expand>\n+      <ExpandedItem>value</ExpandedItem>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::cell::RefCell&lt;*&gt;\">\n+    <DisplayString>{value.value}</DisplayString>\n+    <Expand>\n+      <Item Name=\"[Borrow state]\" Condition=\"borrow.value.value == 0\">\"Unborrowed\",sb</Item>\n+      <Item Name=\"[Borrow state]\" Condition=\"borrow.value.value &gt; 0\">\"Immutably borrowed\",sb</Item>\n+      <Item Name=\"[Borrow state]\" Condition=\"borrow.value.value &lt; 0\">\"Mutably borrowed\",sb</Item>\n+      <ExpandedItem>value.value</ExpandedItem>\n+    </Expand>\n+  </Type>\n+  <Type Name=\"core::cell::UnsafeCell&lt;*&gt;\">\n+    <DisplayString>{value}</DisplayString>\n+    <Expand>\n+      <ExpandedItem>value</ExpandedItem>\n     </Expand>\n   </Type>\n \n-  <Type Name=\"core::ptr::Shared&lt;*&gt;\">\n-    <DisplayString>{{ Shared {pointer} }}</DisplayString>\n+  <Type Name=\"core::mem::manually_drop::ManuallyDrop&lt;*&gt;\">\n+    <DisplayString>{value}</DisplayString>\n     <Expand>\n-      <Item Name=\"[ptr]\">pointer</Item>\n+      <ExpandedItem>value</ExpandedItem>\n+    </Expand>\n+  </Type>\n+\n+  <Type Name=\"core::num::nonzero::NonZeroI8\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroI16\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroI32\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroI64\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroI128\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroIsize\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroU8\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroU16\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroU32\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroU64\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroU128\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::num::nonzero::NonZeroUsize\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+\n+  <Type Name=\"core::num::wrapping::Wrapping&lt;*&gt;\">\n+    <DisplayString>{__0}</DisplayString>\n+  </Type>\n+\n+  <Type Name=\"core::ops::range::Range&lt;*&gt;\">\n+    <DisplayString>({start}..{end})</DisplayString>\n+  </Type>\n+  <Type Name=\"core::ops::range::RangeFrom&lt;*&gt;\">\n+    <DisplayString>({start}..)</DisplayString>\n+  </Type>\n+  <Type Name=\"core::ops::range::RangeInclusive&lt;*&gt;\">\n+    <DisplayString>({start}..={end})</DisplayString>\n+  </Type>\n+  <Type Name=\"core::ops::range::RangeTo&lt;*&gt;\">\n+    <DisplayString>(..{end})</DisplayString>\n+  </Type>\n+  <Type Name=\"core::ops::range::RangeToInclusive&lt;*&gt;\">\n+    <DisplayString>(..={end})</DisplayString>\n+  </Type>\n+\n+  <Type Name=\"core::pin::Pin&lt;*&gt;\">\n+    <DisplayString>Pin({(void*)pointer}: {pointer})</DisplayString>\n+    <Expand>\n+      <ExpandedItem>pointer</ExpandedItem>\n     </Expand>\n   </Type>\n \n   <Type Name=\"core::ptr::non_null::NonNull&lt;*&gt;\">\n-    <DisplayString>{(void*) pointer}</DisplayString>\n+    <DisplayString>NonNull({(void*) pointer}: {pointer})</DisplayString>\n+    <Expand>\n+      <ExpandedItem>pointer</ExpandedItem>\n+    </Expand>\n+  </Type>\n+\n+  <Type Name=\"core::ptr::unique::Unique&lt;*&gt;\">\n+    <DisplayString>Unique({(void*)pointer}: {pointer})</DisplayString>\n+    <Expand>\n+      <ExpandedItem>pointer</ExpandedItem>\n+    </Expand>\n+  </Type>\n+\n+  <Type Name=\"core::sync::atomic::AtomicBool\">\n+    <DisplayString>{(bool)v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI8\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI16\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI32\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicI64\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicIsize\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+    <Type Name=\"core::sync::atomic::AtomicU8\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicU16\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicU32\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicU64\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+  <Type Name=\"core::sync::atomic::AtomicUsize\">\n+    <DisplayString>{v.value}</DisplayString>\n+  </Type>\n+\n+  <Type Name=\"core::time::Duration\">\n+    <DisplayString>{secs,d}s {nanos,d}ns</DisplayString>\n     <Expand>\n-      <Item Name=\"[value]\">*pointer</Item>\n+      <Item Name=\"seconds\">secs,d</Item>\n+      <Item Name=\"nanoseconds\">nanos,d</Item>\n     </Expand>\n   </Type>\n-</AutoVisualizer>\n\\ No newline at end of file\n+</AutoVisualizer>"}, {"sha": "c7be0167de9fdb8233f84cb35333688c3e0e36de", "filename": "src/etc/natvis/libstd.natvis", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Fetc%2Fnatvis%2Flibstd.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Fetc%2Fnatvis%2Flibstd.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibstd.natvis?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -74,9 +74,10 @@\n   </Type>\n \n   <Type Name=\"std::ffi::c_str::CString\">\n-    <DisplayString>{inner.data_ptr,s}</DisplayString>\n+    <DisplayString>{(char*)inner.data_ptr}</DisplayString>\n     <Expand>\n       <Synthetic Name=\"[chars]\">\n+        <DisplayString>{(char*)inner.data_ptr}</DisplayString>\n         <Expand>\n           <ArrayItems>\n             <Size>inner.length</Size>\n@@ -101,4 +102,19 @@\n       </Synthetic>\n     </Expand>\n   </Type>\n+\n+  <Type Name=\"std::ffi::os_str::OsString\">\n+    <DisplayString>{(char*)inner.inner.bytes.buf.ptr.pointer,[inner.inner.bytes.len]}</DisplayString>\n+    <Expand>\n+      <Synthetic Name=\"[chars]\">\n+        <DisplayString>{(char*)inner.inner.bytes.buf.ptr.pointer,[inner.inner.bytes.len]}</DisplayString>\n+        <Expand>\n+          <ArrayItems>\n+            <Size>inner.inner.bytes.len</Size>\n+            <ValuePointer>(char*)inner.inner.bytes.buf.ptr.pointer</ValuePointer>\n+          </ArrayItems>\n+        </Expand>\n+      </Synthetic>\n+    </Expand>\n+  </Type>\n </AutoVisualizer>"}, {"sha": "bc0266d644ec15a380ff7420b87ea6a97890ab34", "filename": "src/test/debuginfo/duration-type.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Fduration-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Fduration-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fduration-type.rs?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -0,0 +1,22 @@\n+// only-cdb\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command: dx duration\n+// cdb-check:duration         : 5s 12ns [Type: core::time::Duration]\n+// cdb-check:    [<Raw View>]     [Type: core::time::Duration]\n+// cdb-check:    seconds          : 5 [Type: unsigned __int64]\n+// cdb-check:    nanoseconds      : 12 [Type: unsigned int]\n+\n+use std::time::Duration;\n+\n+fn main() {\n+    let duration = Duration::new(5, 12);\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { }"}, {"sha": "8373d7856bb376a5093cdfa9ef32d37dfd8b2d93", "filename": "src/test/debuginfo/marker-types.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Fmarker-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Fmarker-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmarker-types.rs?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -0,0 +1,49 @@\n+// only-cdb\n+// compile-flags:-g\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// cdb-command: dx nonnull\n+// cdb-check:nonnull          : NonNull(0x[...]: 0xc) [Type: core::ptr::non_null::NonNull<u32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ptr::non_null::NonNull<u32>]\n+// cdb-check:    0xc [Type: unsigned int]\n+\n+// cdb-command: dx manuallydrop\n+// cdb-check:manuallydrop     : 12345 [Type: core::mem::manually_drop::ManuallyDrop<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::mem::manually_drop::ManuallyDrop<i32>]\n+\n+// cdb-command: dx pin\n+// cdb-check:pin              : Pin(0x[...]: \"this\") [Type: core::pin::Pin<ref_mut$<alloc::string::String> >]\n+// cdb-check:    [<Raw View>]     [Type: core::pin::Pin<ref_mut$<alloc::string::String> >]\n+// cdb-check:    [len]            : 0x4 [Type: unsigned [...]]\n+// cdb-check:    [capacity]       : 0x4 [Type: unsigned [...]]\n+// cdb-check:    [chars]          : \"this\"\n+\n+// cdb-command: dx unique\n+// cdb-check:unique           : Unique(0x[...]: (0x2a, 4321)) [Type: core::ptr::unique::Unique<tuple$<u64,i32> >]\n+// cdb-check:    [<Raw View>]     [Type: core::ptr::unique::Unique<tuple$<u64,i32> >]\n+// cdb-check:    [0]              : 0x2a [Type: unsigned __int64]\n+// cdb-check:    [1]              : 4321 [Type: int]\n+\n+#![feature(ptr_internals)]\n+\n+use std::mem::ManuallyDrop;\n+use std::pin::Pin;\n+use std::ptr::{NonNull, Unique};\n+\n+fn main() {\n+    let nonnull: NonNull<_> = (&12u32).into();\n+\n+    let manuallydrop = ManuallyDrop::new(12345i32);\n+\n+    let mut s = \"this\".to_string();\n+    let pin = Pin::new(&mut s);\n+\n+    let unique: Unique<_> = (&mut (42u64, 4321i32)).into();\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { }"}, {"sha": "688483e43e4dbdbf6e0e90895bce185fc90bcc66", "filename": "src/test/debuginfo/mutable-locs.rs", "status": "modified", "additions": 65, "deletions": 12, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Fmutable-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Fmutable-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmutable-locs.rs?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -9,26 +9,64 @@\n // cdb-command: g\n \n // cdb-command:dx static_c,d\n-// cdb-check:static_c,d       [Type: core::cell::Cell<i32>]\n-// cdb-check:    [...] value            [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:static_c,d       : 10 [Type: core::cell::Cell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::Cell<i32>]\n \n // cdb-command: dx static_c.value,d\n-// cdb-check:static_c.value,d [Type: core::cell::UnsafeCell<i32>]\n-// cdb-check:    [...] value            : 10 [Type: int]\n+// cdb-check:static_c.value,d : 10 [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::UnsafeCell<i32>]\n \n // cdb-command:  dx dynamic_c,d\n-// cdb-check:dynamic_c,d      [Type: core::cell::RefCell<i32>]\n-// cdb-check:    [...] borrow           [Type: core::cell::Cell<isize>]\n-// cdb-check:    [...] value            [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:dynamic_c,d      : 15 [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [Borrow state]   : Unborrowed\n \n // cdb-command: dx dynamic_c.value,d\n-// cdb-check:dynamic_c.value,d [Type: core::cell::UnsafeCell<i32>]\n-// cdb-check:    [...] value            : 15 [Type: int]\n+// cdb-check:dynamic_c.value,d : 15 [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::UnsafeCell<i32>]\n \n // cdb-command: dx b,d\n-// cdb-check:b,d              [Type: core::cell::RefMut<i32>]\n-// cdb-check:    [...] value            : [...] : 42 [Type: int *]\n-// cdb-check:    [...] borrow           [Type: core::cell::BorrowRefMut]\n+// cdb-check:b,d              : 42 [Type: core::cell::RefMut<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefMut<i32>]\n+// cdb-check:    42 [Type: int]\n+\n+// cdb-command: g\n+\n+// cdb-command: dx dynamic_c,d\n+// cdb-check:dynamic_c,d      : 15 [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [Borrow state]   : Immutably borrowed\n+\n+// cdb-command: dx r_borrow,d\n+// cdb-check:r_borrow,d       : 15 [Type: core::cell::Ref<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::Ref<i32>]\n+// cdb-check:    15 [Type: int]\n+\n+// cdb-command: g\n+\n+// cdb-command: dx dynamic_c,d\n+// cdb-check:dynamic_c,d      : 15 [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [Borrow state]   : Unborrowed\n+\n+// cdb-command: g\n+\n+// cdb-command: dx dynamic_c,d\n+// cdb-check:dynamic_c,d      : 15 [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [Borrow state]   : Mutably borrowed\n+\n+// cdb-command: dx r_borrow_mut,d\n+// cdb-check:r_borrow_mut,d   : 15 [Type: core::cell::RefMut<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefMut<i32>]\n+// cdb-check:    15 [Type: int]\n+\n+// cdb-command: g\n+\n+// cdb-command: dx dynamic_c,d\n+// cdb-check:dynamic_c,d      : 15 [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::RefCell<i32>]\n+// cdb-check:    [Borrow state]   : Unborrowed\n \n #![allow(unused_variables)]\n \n@@ -46,6 +84,21 @@ fn main() {\n     *b = 42;\n \n     zzz(); // #break\n+\n+    // Check that `RefCell`'s borrow state visualizes correctly\n+    {\n+        let r_borrow = dynamic_c.borrow();\n+        zzz(); // #break\n+    }\n+\n+    zzz(); // #break\n+\n+    {\n+        let r_borrow_mut = dynamic_c.borrow_mut();\n+        zzz(); // #break\n+    }\n+\n+    zzz(); // #break\n }\n \n fn zzz() {()}"}, {"sha": "2eae9239b6118018d0a504441d9b8f704f4a4dd7", "filename": "src/test/debuginfo/numeric-types.rs", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Fnumeric-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Fnumeric-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fnumeric-types.rs?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -0,0 +1,206 @@\n+// only-cdb\n+// compile-flags:-g\n+\n+// Tests the visualizations for `NonZero{I,U}{8,16,32,64,128,size}`, `Wrapping<T>` and\n+// `Atomic{Bool,I8,I16,I32,I64,Isize,U8,U16,U32,U64,Usize}` located in `libcore.natvis`.\n+\n+// === CDB TESTS ==================================================================================\n+// cdb-command: g\n+\n+// cdb-command: dx nz_i8\n+// cdb-check:nz_i8            : 11 [Type: core::num::nonzero::NonZeroI8]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroI8]\n+\n+// cdb-command: dx nz_i16\n+// cdb-check:nz_i16           : 22 [Type: core::num::nonzero::NonZeroI16]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroI16]\n+\n+// cdb-command: dx nz_i32\n+// cdb-check:nz_i32           : 33 [Type: core::num::nonzero::NonZeroI32]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroI32]\n+\n+// cdb-command: dx nz_i64\n+// cdb-check:nz_i64           : 44 [Type: core::num::nonzero::NonZeroI64]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroI64]\n+\n+// 128-bit integers don't seem to work in CDB\n+// cdb-command: dx nz_i128\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroI128]\n+\n+// cdb-command: dx nz_isize\n+// cdb-check:nz_isize         : 66 [Type: core::num::nonzero::NonZeroIsize]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroIsize]\n+\n+// cdb-command: dx nz_u8\n+// cdb-check:nz_u8            : 0x4d [Type: core::num::nonzero::NonZeroU8]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroU8]\n+\n+// cdb-command: dx nz_u16\n+// cdb-check:nz_u16           : 0x58 [Type: core::num::nonzero::NonZeroU16]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroU16]\n+\n+// cdb-command: dx nz_u32\n+// cdb-check:nz_u32           : 0x63 [Type: core::num::nonzero::NonZeroU32]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroU32]\n+\n+// cdb-command: dx nz_u64\n+// cdb-check:nz_u64           : 0x64 [Type: core::num::nonzero::NonZeroU64]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroU64]\n+\n+// 128-bit integers don't seem to work in CDB\n+// cdb-command: dx nz_u128\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroU128]\n+\n+// cdb-command: dx nz_usize\n+// cdb-check:nz_usize         : 0x7a [Type: core::num::nonzero::NonZeroUsize]\n+// cdb-check:    [<Raw View>]     [Type: core::num::nonzero::NonZeroUsize]\n+\n+// cdb-command: dx w_i8\n+// cdb-check:w_i8             : 10 [Type: core::num::wrapping::Wrapping<i8>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<i8>]\n+\n+// cdb-command: dx w_i16\n+// cdb-check:w_i16            : 20 [Type: core::num::wrapping::Wrapping<i16>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<i16>]\n+\n+// cdb-command: dx w_i32\n+// cdb-check:w_i32            : 30 [Type: core::num::wrapping::Wrapping<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<i32>]\n+\n+// cdb-command: dx w_i64\n+// cdb-check:w_i64            : 40 [Type: core::num::wrapping::Wrapping<i64>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<i64>]\n+\n+// 128-bit integers don't seem to work in CDB\n+// cdb-command: dx w_i128\n+// cdb-check:w_i128           [Type: core::num::wrapping::Wrapping<i128>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<i128>]\n+\n+// cdb-command: dx w_isize\n+// cdb-check:w_isize          : 60 [Type: core::num::wrapping::Wrapping<isize>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<isize>]\n+\n+// cdb-command: dx w_u8\n+// cdb-check:w_u8             : 0x46 [Type: core::num::wrapping::Wrapping<u8>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<u8>]\n+\n+// cdb-command: dx w_u16\n+// cdb-check:w_u16            : 0x50 [Type: core::num::wrapping::Wrapping<u16>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<u16>]\n+\n+// cdb-command: dx w_u32\n+// cdb-check:w_u32            : 0x5a [Type: core::num::wrapping::Wrapping<u32>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<u32>]\n+\n+// cdb-command: dx w_u64\n+// cdb-check:w_u64            : 0x64 [Type: core::num::wrapping::Wrapping<u64>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<u64>]\n+\n+// 128-bit integers don't seem to work in CDB\n+// cdb-command: dx w_u128\n+// cdb-check:w_u128           [Type: core::num::wrapping::Wrapping<u128>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<u128>]\n+\n+// cdb-command: dx w_usize\n+// cdb-check:w_usize          : 0x78 [Type: core::num::wrapping::Wrapping<usize>]\n+// cdb-check:    [<Raw View>]     [Type: core::num::wrapping::Wrapping<usize>]\n+\n+// cdb-command: dx a_bool_t\n+// cdb-check:a_bool_t         : true [Type: core::sync::atomic::AtomicBool]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicBool]\n+\n+// cdb-command: dx a_bool_f\n+// cdb-check:a_bool_f         : false [Type: core::sync::atomic::AtomicBool]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicBool]\n+\n+// cdb-command: dx a_i8\n+// cdb-check:a_i8             : 2 [Type: core::sync::atomic::AtomicI8]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI8]\n+\n+// cdb-command: dx a_i16\n+// cdb-check:a_i16            : 4 [Type: core::sync::atomic::AtomicI16]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI16]\n+\n+// cdb-command: dx a_i32\n+// cdb-check:a_i32            : 8 [Type: core::sync::atomic::AtomicI32]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI32]\n+\n+// cdb-command: dx a_i64\n+// cdb-check:a_i64            : 16 [Type: core::sync::atomic::AtomicI64]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicI64]\n+\n+// cdb-command: dx a_isize\n+// cdb-check:a_isize          : 32 [Type: core::sync::atomic::AtomicIsize]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicIsize]\n+\n+// cdb-command: dx a_u8\n+// cdb-check:a_u8             : 0x40 [Type: core::sync::atomic::AtomicU8]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU8]\n+\n+// cdb-command: dx a_u16\n+// cdb-check:a_u16            : 0x80 [Type: core::sync::atomic::AtomicU16]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU16]\n+\n+// cdb-command: dx a_u32\n+// cdb-check:a_u32            : 0x100 [Type: core::sync::atomic::AtomicU32]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU32]\n+\n+// cdb-command: dx a_u64\n+// cdb-check:a_u64            : 0x200 [Type: core::sync::atomic::AtomicU64]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicU64]\n+\n+// cdb-command: dx a_usize\n+// cdb-check:a_usize          : 0x400 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [<Raw View>]     [Type: core::sync::atomic::AtomicUsize]\n+\n+use std::num::*;\n+use std::sync::atomic::*;\n+\n+fn main() {\n+    let nz_i8 = NonZeroI8::new(11).unwrap();\n+    let nz_i16 = NonZeroI16::new(22).unwrap();\n+    let nz_i32 = NonZeroI32::new(33).unwrap();\n+    let nz_i64 = NonZeroI64::new(44).unwrap();\n+    let nz_i128 = NonZeroI128::new(55).unwrap();\n+    let nz_isize = NonZeroIsize::new(66).unwrap();\n+\n+    let nz_u8 = NonZeroU8::new(77).unwrap();\n+    let nz_u16 = NonZeroU16::new(88).unwrap();\n+    let nz_u32 = NonZeroU32::new(99).unwrap();\n+    let nz_u64 = NonZeroU64::new(100).unwrap();\n+    let nz_u128 = NonZeroU128::new(111).unwrap();\n+    let nz_usize = NonZeroUsize::new(122).unwrap();\n+\n+    let w_i8 = Wrapping(10i8);\n+    let w_i16 = Wrapping(20i16);\n+    let w_i32 = Wrapping(30i32);\n+    let w_i64 = Wrapping(40i64);\n+    let w_i128 = Wrapping(50i128);\n+    let w_isize = Wrapping(60isize);\n+\n+    let w_u8 = Wrapping(70u8);\n+    let w_u16 = Wrapping(80u16);\n+    let w_u32 = Wrapping(90u32);\n+    let w_u64 = Wrapping(100u64);\n+    let w_u128 = Wrapping(110u128);\n+    let w_usize = Wrapping(120usize);\n+\n+    let a_bool_t = AtomicBool::new(true);\n+    let a_bool_f = AtomicBool::new(false);\n+\n+    let a_i8 = AtomicI8::new(2);\n+    let a_i16 = AtomicI16::new(4);\n+    let a_i32 = AtomicI32::new(8);\n+    let a_i64 = AtomicI64::new(16);\n+    let a_isize = AtomicIsize::new(32);\n+\n+    let a_u8 = AtomicU8::new(64);\n+    let a_u16 = AtomicU16::new(128);\n+    let a_u32 = AtomicU32::new(256);\n+    let a_u64 = AtomicU64::new(512);\n+    let a_usize = AtomicUsize::new(1024);\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() { }"}, {"sha": "d5a6e148b7a66e8b30348bdf687f6935869a18c2", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -111,8 +111,9 @@\n // cdb-check:    [11]             : 33 '!' [Type: char]\n \n // cdb-command: dx os_string\n-// cdb-check:os_string        [Type: [...]::OsString]\n-// NOTE: OsString doesn't have a .natvis entry yet.\n+// cdb-check:os_string        : \"IAMA OS string \ud83d\ude03\" [Type: std::ffi::os_str::OsString]\n+// cdb-check:    [<Raw View>]     [Type: std::ffi::os_str::OsString]\n+// cdb-check:    [chars]          : \"IAMA OS string \ud83d\ude03\"\n \n // cdb-command: dx some\n // cdb-check:some             : Some [Type: enum$<core::option::Option<i16> >]\n@@ -129,10 +130,24 @@\n // NOTE: cdb fails to interpret debug info of Option enums on i686.\n // cdb-check:some_string      [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n \n+// cdb-command: dx linkedlist\n+// cdb-check:linkedlist       : { len=0x2 } [Type: alloc::collections::linked_list::LinkedList<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::collections::linked_list::LinkedList<i32>]\n+// cdb-check:    [0x0]            : 128 [Type: int]\n+// cdb-check:    [0x1]            : 42 [Type: int]\n+\n+// cdb-command: dx vecdeque\n+// cdb-check:vecdeque         : { len=0x2 } [Type: alloc::collections::vec_deque::VecDeque<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::collections::vec_deque::VecDeque<i32>]\n+// cdb-check:    [len]            : 0x2\n+// cdb-check:    [capacity]       : 0x8 [Type: unsigned [...]]\n+// cdb-check:    [0x0]            : 90 [Type: int]\n+// cdb-check:    [0x1]            : 20 [Type: int]\n+\n #![allow(unused_variables)]\n+use std::collections::{LinkedList, VecDeque};\n use std::ffi::OsString;\n \n-\n fn main() {\n \n     // &[]\n@@ -156,6 +171,16 @@ fn main() {\n \n     let some_string = Some(\"IAMA optional string!\".to_owned());\n \n+    // LinkedList\n+    let mut linkedlist = LinkedList::new();\n+    linkedlist.push_back(42);\n+    linkedlist.push_front(128);\n+\n+    // VecDeque\n+    let mut vecdeque = VecDeque::new();\n+    vecdeque.push_back(20);\n+    vecdeque.push_front(90);\n+\n     zzz(); // #break\n }\n "}, {"sha": "7362a50a0301510e79e706103f11a7d76a130b68", "filename": "src/test/debuginfo/range-types.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Frange-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Frange-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frange-types.rs?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -9,38 +9,40 @@\n // cdb-command: g\n \n // cdb-command: dx r1,d\n-// cdb-check:r1,d             [Type: core::ops::range::Range<i32>]\n-// cdb-check:    [...] start            : 3 [Type: int]\n-// cdb-check:    [...] end              : 5 [Type: int]\n+// cdb-check:r1,d             : (3..5) [Type: core::ops::range::Range<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ops::range::Range<i32>]\n \n // cdb-command: dx r2,d\n-// cdb-check:r2,d             [Type: core::ops::range::RangeFrom<i32>]\n-// cdb-check:    [...] start            : 2 [Type: int]\n+// cdb-check:r2,d             : (2..) [Type: core::ops::range::RangeFrom<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ops::range::RangeFrom<i32>]\n \n // cdb-command: dx r3,d\n-// cdb-check:r3,d             [Type: core::ops::range::RangeInclusive<i32>]\n-// cdb-check:    [...] start            : 1 [Type: int]\n-// cdb-check:    [...] end              : 4 [Type: int]\n-// cdb-check:    [...] exhausted        : false [Type: bool]\n+// cdb-check:r3,d             : (1..=4) [Type: core::ops::range::RangeInclusive<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ops::range::RangeInclusive<i32>]\n \n // cdb-command: dx r4,d\n-// cdb-check:r4,d             [Type: core::ops::range::RangeToInclusive<i32>]\n-// cdb-check:    [...] end              : 3 [Type: int]\n+// cdb-check:r4,d             : (..10) [Type: core::ops::range::RangeTo<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ops::range::RangeTo<i32>]\n \n // cdb-command: dx r5,d\n-// cdb-check:r5,d             [Type: core::ops::range::RangeFull]\n+// cdb-check:r5,d             : (..=3) [Type: core::ops::range::RangeToInclusive<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::ops::range::RangeToInclusive<i32>]\n+\n+// cdb-command: dx r6,d\n+// cdb-check:r6,d             [Type: core::ops::range::RangeFull]\n \n #[allow(unused_variables)]\n \n use std::ops::{Range, RangeFrom, RangeFull, RangeInclusive, RangeToInclusive};\n \n fn main()\n {\n-    let r1 = Range{start: 3, end: 5};\n-    let r2 = RangeFrom{start: 2};\n-    let r3 = RangeInclusive::new(1, 4);\n-    let r4 = RangeToInclusive{end: 3};\n-    let r5 = RangeFull{};\n+    let r1 = (3..5);\n+    let r2 = (2..);\n+    let r3 = (1..=4);\n+    let r4 = (..10);\n+    let r5 = (..=3);\n+    let r6 = (..);\n     zzz(); // #break\n }\n "}, {"sha": "55cddf7c6c6b4d762231e39b34578098fcddee20", "filename": "src/test/debuginfo/rc_arc.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frc_arc.rs?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -29,22 +29,39 @@\n \n // cdb-command:dx r,d\n // cdb-check:r,d              : 42 [Type: alloc::rc::Rc<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::rc::Rc<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n \n // cdb-command:dx r1,d\n // cdb-check:r1,d             : 42 [Type: alloc::rc::Rc<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::rc::Rc<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n \n // cdb-command:dx w1,d\n-// cdb-check:w1,d             [Type: alloc::rc::Weak<i32>]\n-// cdb-check:    [...] ptr              : [...] [Type: core::ptr::non_null::NonNull<alloc::rc::RcBox<i32> >]\n+// cdb-check:w1,d             : 42 [Type: alloc::rc::Weak<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::rc::Weak<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::cell::Cell<usize>]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::cell::Cell<usize>]\n \n // cdb-command:dx a,d\n // cdb-check:a,d              : 42 [Type: alloc::sync::Arc<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::sync::Arc<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n \n // cdb-command:dx a1,d\n // cdb-check:a1,d             : 42 [Type: alloc::sync::Arc<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::sync::Arc<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n \n // cdb-command:dx w2,d\n // cdb-check:w2,d             : 42 [Type: alloc::sync::Weak<i32>]\n+// cdb-check:    [<Raw View>]     [Type: alloc::sync::Weak<i32>]\n+// cdb-check:    [Reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n+// cdb-check:    [Weak reference count] : 2 [Type: core::sync::atomic::AtomicUsize]\n \n use std::rc::Rc;\n use std::sync::Arc;"}, {"sha": "e1c10a4d37fc317bfa6c3c9b4418d9dab6f38e88", "filename": "src/test/debuginfo/rwlock-read.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e47ba3f1213dfb4143a078fc3df3a127e4adb6/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs?ref=f4e47ba3f1213dfb4143a078fc3df3a127e4adb6", "patch": "@@ -11,15 +11,15 @@\n // cdb-command:dx l\n // cdb-check:l                [Type: std::sync::rwlock::RwLock<i32>]\n // cdb-check:    [...] poison           [Type: std::sync::poison::Flag]\n-// cdb-check:    [...] data             [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [...] data             : 0 [Type: core::cell::UnsafeCell<i32>]\n //\n // cdb-command:dx r\n // cdb-check:r                [Type: std::sync::rwlock::RwLockReadGuard<i32>]\n // cdb-check:    [...] lock             : [...] [Type: std::sync::rwlock::RwLock<i32> *]\n //\n // cdb-command:dx r.lock->data,d\n-// cdb-check:r.lock->data,d   [Type: core::cell::UnsafeCell<i32>]\n-// cdb-check:    [...] value            : 0 [Type: int]\n+// cdb-check:r.lock->data,d   : 0 [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [<Raw View>]     [Type: core::cell::UnsafeCell<i32>]\n \n #[allow(unused_variables)]\n "}]}