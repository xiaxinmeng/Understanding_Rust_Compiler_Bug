{"sha": "70e0c6e27d54779e718aef866d6ab569af3c6a28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZTBjNmUyN2Q1NDc3OWU3MThhZWY4NjZkNmFiNTY5YWYzYzZhMjg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-07T00:18:41Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-07T19:21:14Z"}, "message": "syntax: Permit splicing anything into a quote that implements ToTokens.", "tree": {"sha": "88b36cf0a7162b41721ffa0219e6fc9101b23a03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b36cf0a7162b41721ffa0219e6fc9101b23a03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e0c6e27d54779e718aef866d6ab569af3c6a28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e0c6e27d54779e718aef866d6ab569af3c6a28", "html_url": "https://github.com/rust-lang/rust/commit/70e0c6e27d54779e718aef866d6ab569af3c6a28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e0c6e27d54779e718aef866d6ab569af3c6a28/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9872058e4d7f4dfa5824c441b02094bdd883b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9872058e4d7f4dfa5824c441b02094bdd883b5", "html_url": "https://github.com/rust-lang/rust/commit/7e9872058e4d7f4dfa5824c441b02094bdd883b5"}], "stats": {"total": 202, "additions": 192, "deletions": 10}, "files": [{"sha": "60918121e95473ba247d228f7139e149dc3a6694", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 190, "deletions": 7, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/70e0c6e27d54779e718aef866d6ab569af3c6a28/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e0c6e27d54779e718aef866d6ab569af3c6a28/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=70e0c6e27d54779e718aef866d6ab569af3c6a28", "patch": "@@ -19,10 +19,10 @@ use token::*;\n *\n * Quasiquoting works via token trees.\n *\n-* This is registered as a set of expression syntax extension called quote! that lifts\n-* its argument token-tree to an AST representing the construction of the same\n-* token tree, with ast::tt_nonterminal nodes interpreted as antiquotes\n-* (splices).\n+* This is registered as a set of expression syntax extension called quote!\n+* that lifts its argument token-tree to an AST representing the\n+* construction of the same token tree, with ast::tt_nonterminal nodes\n+* interpreted as antiquotes (splices).\n *\n */\n \n@@ -32,6 +32,176 @@ pub mod rt {\n     pub use parse::new_parser_from_tts;\n     pub use codemap::BytePos;\n     pub use codemap::span;\n+\n+    use print::pprust;\n+    use pprust::{item_to_str, ty_to_str};\n+\n+    trait ToTokens {\n+        pub fn to_tokens(_cx: ext_ctxt) -> ~[token_tree];\n+    }\n+\n+    impl ~[token_tree]: ToTokens {\n+        pub fn to_tokens(_cx: ext_ctxt) -> ~[token_tree] {\n+            copy self\n+        }\n+    }\n+\n+    /* Should be (when bugs in default methods are fixed):\n+\n+    trait ToSource : ToTokens {\n+        // Takes a thing and generates a string containing rust code for it.\n+        pub fn to_source(cx: ext_ctxt) -> ~str;\n+\n+        // If you can make source, you can definitely make tokens.\n+        pub fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    */\n+\n+    trait ToSource {\n+        // Takes a thing and generates a string containing rust code for it.\n+        pub fn to_source(cx: ext_ctxt) -> ~str;\n+    }\n+\n+    impl ast::ident: ToSource {\n+        fn to_source(cx: ext_ctxt) -> ~str {\n+            copy *cx.parse_sess().interner.get(self)\n+        }\n+    }\n+\n+    impl @ast::item: ToSource {\n+        fn to_source(cx: ext_ctxt) -> ~str {\n+            item_to_str(self, cx.parse_sess().interner)\n+        }\n+    }\n+\n+    impl ~[@ast::item]: ToSource {\n+        fn to_source(cx: ext_ctxt) -> ~str {\n+            str::connect(self.map(|i| i.to_source(cx)), ~\"\\n\\n\")\n+        }\n+    }\n+\n+    impl @ast::Ty: ToSource {\n+        fn to_source(cx: ext_ctxt) -> ~str {\n+            ty_to_str(self, cx.parse_sess().interner)\n+        }\n+    }\n+\n+    impl ~[@ast::Ty]: ToSource {\n+        fn to_source(cx: ext_ctxt) -> ~str {\n+            str::connect(self.map(|i| i.to_source(cx)), ~\", \")\n+        }\n+    }\n+\n+    impl ~[ast::ty_param]: ToSource {\n+        fn to_source(cx: ext_ctxt) -> ~str {\n+            pprust::typarams_to_str(self, cx.parse_sess().interner)\n+        }\n+    }\n+\n+    impl @ast::expr: ToSource {\n+        fn to_source(cx: ext_ctxt) -> ~str {\n+            pprust::expr_to_str(self, cx.parse_sess().interner)\n+        }\n+    }\n+\n+    // Alas ... we write these out instead. All redundant.\n+\n+    impl ast::ident: ToTokens {\n+        fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl @ast::item: ToTokens {\n+        fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ~[@ast::item]: ToTokens {\n+        fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl @ast::Ty: ToTokens {\n+        fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ~[@ast::Ty]: ToTokens {\n+        fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl ~[ast::ty_param]: ToTokens {\n+        fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    impl @ast::expr: ToTokens {\n+        fn to_tokens(cx: ext_ctxt) -> ~[token_tree] {\n+            cx.parse_tts(self.to_source(cx))\n+        }\n+    }\n+\n+    trait ExtParseUtils {\n+        fn parse_item(s: ~str) -> @ast::item;\n+        fn parse_expr(s: ~str) -> @ast::expr;\n+        fn parse_stmt(s: ~str) -> @ast::stmt;\n+        fn parse_tts(s: ~str) -> ~[ast::token_tree];\n+    }\n+\n+    impl ext_ctxt: ExtParseUtils {\n+\n+        fn parse_item(s: ~str) -> @ast::item {\n+            let res = parse::parse_item_from_source_str(\n+                ~\"<quote expansion>\",\n+                @(copy s),\n+                self.cfg(),\n+                ~[],\n+                self.parse_sess());\n+            match res {\n+                Some(ast) => ast,\n+                None => {\n+                    error!(\"Parse error with ```\\n%s\\n```\", s);\n+                    fail\n+                }\n+            }\n+        }\n+\n+        fn parse_stmt(s: ~str) -> @ast::stmt {\n+            parse::parse_stmt_from_source_str(\n+                ~\"<quote expansion>\",\n+                @(copy s),\n+                self.cfg(),\n+                ~[],\n+                self.parse_sess())\n+        }\n+\n+        fn parse_expr(s: ~str) -> @ast::expr {\n+            parse::parse_expr_from_source_str(\n+                ~\"<quote expansion>\",\n+                @(copy s),\n+                self.cfg(),\n+                self.parse_sess())\n+        }\n+\n+        fn parse_tts(s: ~str) -> ~[ast::token_tree] {\n+            parse::parse_tts_from_source_str(\n+                ~\"<quote expansion>\",\n+                @(copy s),\n+                self.cfg(),\n+                self.parse_sess())\n+        }\n+    }\n+\n }\n \n pub fn expand_quote_tokens(cx: ext_ctxt,\n@@ -288,14 +458,27 @@ fn mk_tt(cx: ext_ctxt, sp: span, tt: &ast::token_tree)\n         ast::tt_seq(*) => fail ~\"tt_seq in quote!\",\n \n         ast::tt_nonterminal(sp, ident) => {\n+\n+            // tt.push_all_move($ident.to_tokens(ext_cx))\n+\n+            let e_to_toks =\n+                build::mk_call_(cx, sp,\n+                                build::mk_access\n+                                (cx, sp,\n+                                 ~[ident],\n+                                 id_ext(cx, ~\"to_tokens\")),\n+                                ~[build::mk_path(cx, sp,\n+                                        ids_ext(cx, ~[~\"ext_cx\"]))]);\n+\n             let e_push =\n                 build::mk_call_(cx, sp,\n                                 build::mk_access\n                                 (cx, sp,\n                                  ids_ext(cx, ~[~\"tt\"]),\n                                  id_ext(cx, ~\"push_all_move\")),\n-                                ~[build::mk_path(cx, sp, ~[ident])]);\n-            ~[build::mk_stmt(cx, sp, e_push)]            \n+                                ~[e_to_toks]);\n+\n+            ~[build::mk_stmt(cx, sp, e_push)]\n         }\n     }\n }\n@@ -367,7 +550,7 @@ fn expand_tts(cx: ext_ctxt,\n     let stmt_let_sp = build::mk_local(cx, sp, false,\n                                       id_ext(cx, ~\"sp\"),\n                                       e_sp);\n-    \n+\n     let stmt_let_tt = build::mk_local(cx, sp, true,\n                                       id_ext(cx, ~\"tt\"),\n                                       build::mk_uniq_vec_e(cx, sp, ~[]));"}, {"sha": "d36fc4a37ba41521341418a100efd3c19677f721", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70e0c6e27d54779e718aef866d6ab569af3c6a28/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e0c6e27d54779e718aef866d6ab569af3c6a28/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=70e0c6e27d54779e718aef866d6ab569af3c6a28", "patch": "@@ -8,14 +8,13 @@ fn syntax_extension(ext_cx: @ext_ctxt) {\n     let e_toks : ~[syntax::ast::token_tree] = quote_tokens!(1 + 2);\n     let p_toks : ~[syntax::ast::token_tree] = quote_tokens!((x, 1 .. 4, *));\n \n-    let _a: @syntax::ast::expr = quote_expr!(1 + 2);\n+    let a: @syntax::ast::expr = quote_expr!(1 + 2);\n     let _b: Option<@syntax::ast::item> = quote_item!( const foo : int = $e_toks; );\n     let _c: @syntax::ast::pat = quote_pat!( (x, 1 .. 4, *) );\n-    let _d: @syntax::ast::stmt = quote_stmt!( let x = $e_toks; );\n+    let _d: @syntax::ast::stmt = quote_stmt!( let x = $a; );\n     let _e: @syntax::ast::expr = quote_expr!( match foo { $p_toks => 10 } );\n }\n \n fn main() {\n-    let _x: ~[syntax::ast::token_tree] = quote_tokens!(a::Foo::foo());\n }\n "}]}