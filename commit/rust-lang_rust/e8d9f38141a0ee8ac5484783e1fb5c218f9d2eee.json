{"sha": "e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee", "node_id": "C_kwDOAAsO6NoAKGU4ZDlmMzgxNDFhMGVlOGFjNTQ4NDc4M2UxZmI1YzIxOGY5ZDJlZWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-16T20:08:04Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-19T16:22:33Z"}, "message": "Do not allow typeck children items to constrain outer RPITs", "tree": {"sha": "d00ebdfbc1f535346fb1229c80938a5ab1d65efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00ebdfbc1f535346fb1229c80938a5ab1d65efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee", "html_url": "https://github.com/rust-lang/rust/commit/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bd12e8cca3f28f302b9cc0f1f47bb64bd1f98fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd12e8cca3f28f302b9cc0f1f47bb64bd1f98fd", "html_url": "https://github.com/rust-lang/rust/commit/8bd12e8cca3f28f302b9cc0f1f47bb64bd1f98fd"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "4776c11e309082d90a229fde4c696e56b3b83af0", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee", "patch": "@@ -21,6 +21,7 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::{\n     InferCtxt, InferOk, LateBoundRegion, LateBoundRegionConversionTime, NllRegionVariableOrigin,\n };\n+use rustc_infer::traits::ObligationCause;\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::AssertKind;\n@@ -224,6 +225,34 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                     )\n                     .unwrap();\n                     let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type);\n+                    // Check that RPITs are only constrained in their outermost\n+                    // function, otherwise report a mismatched types error.\n+                    if let hir::Node::Item(hir::Item {\n+                        kind:\n+                            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n+                                origin:\n+                                    hir::OpaqueTyOrigin::AsyncFn(parent)\n+                                    | hir::OpaqueTyOrigin::FnReturn(parent),\n+                                ..\n+                            }),\n+                        ..\n+                    }) = infcx.tcx.hir().get_by_def_id(opaque_type_key.def_id.expect_local()) &&\n+                        parent.to_def_id() != body.source.def_id()\n+                    {\n+                        infcx\n+                            .report_mismatched_types(\n+                                &ObligationCause::misc(\n+                                    hidden_type.span,\n+                                    infcx.tcx.hir().local_def_id_to_hir_id(\n+                                        body.source.def_id().expect_local(),\n+                                    ),\n+                                ),\n+                                infcx.tcx.mk_opaque(opaque_type_key.def_id, opaque_type_key.substs),\n+                                hidden_type.ty,\n+                                ty::error::TypeError::Mismatch,\n+                            )\n+                            .emit();\n+                    }\n                     trace!(\n                         \"finalized opaque type {:?} to {:#?}\",\n                         opaque_type_key,"}, {"sha": "bebd8286de9fec2060420df8abaadb25aec45aac", "filename": "src/test/ui/impl-trait/issue-99073-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs?ref=e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee", "patch": "@@ -0,0 +1,17 @@\n+use std::fmt::Display;\n+\n+fn main() {\n+    test(\"hi\", true);\n+}\n+\n+fn test<T: Display>(t: T, recurse: bool) -> impl Display {\n+    let f = || {\n+        let i: u32 = test::<i32>(-1, false);\n+        //~^ ERROR mismatched types\n+        println!(\"{i}\");\n+    };\n+    if recurse {\n+        f();\n+    }\n+    t\n+}"}, {"sha": "c1e4b823c08e7873bb4a5ba5618cba50e5e66f99", "filename": "src/test/ui/impl-trait/issue-99073-2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr?ref=e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-99073-2.rs:9:22\n+   |\n+LL | fn test<T: Display>(t: T, recurse: bool) -> impl Display {\n+   |                                             ------------ the expected opaque type\n+LL |     let f = || {\n+LL |         let i: u32 = test::<i32>(-1, false);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^ types differ\n+   |\n+   = note: expected opaque type `impl std::fmt::Display`\n+                     found type `u32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1d75f6086664fd6db66f24379727b7388495ff86", "filename": "src/test/ui/impl-trait/issue-99073.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs?ref=e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let _ = fix(|_: &dyn Fn()| {});\n+}\n+\n+fn fix<F: Fn(G), G: Fn()>(f: F) -> impl Fn() {\n+    move || f(fix(&f))\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "b35d58093d5fc89c00f20762a201a11db5084879", "filename": "src/test/ui/impl-trait/issue-99073.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr?ref=e8d9f38141a0ee8ac5484783e1fb5c218f9d2eee", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-99073.rs:6:13\n+   |\n+LL | fn fix<F: Fn(G), G: Fn()>(f: F) -> impl Fn() {\n+   |                                    --------- the expected opaque type\n+LL |     move || f(fix(&f))\n+   |             ^^^^^^^^^^ types differ\n+   |\n+   = note: expected opaque type `impl Fn()`\n+           found type parameter `G`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}