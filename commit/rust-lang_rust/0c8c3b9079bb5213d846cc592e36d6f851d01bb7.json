{"sha": "0c8c3b9079bb5213d846cc592e36d6f851d01bb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOGMzYjkwNzliYjUyMTNkODQ2Y2M1OTJlMzZkNmY4NTFkMDFiYjc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-14T21:46:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-14T21:46:56Z"}, "message": "Rollup merge of #75511 - estebank:elide-trait-object-lt-error, r=lcnr\n\nDo not emit E0228 when it is implied by E0106\n\nEmit E0288 (lifetime bound for trait object cannot be deduced) only on bare trait objects. When the trait object is in the form of `&dyn Trait`, E0106 (missing lifetime specifier) will have been emitted, making the former redundant.", "tree": {"sha": "905b96fd5653814c1f57e21398e1e1581c74f1f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/905b96fd5653814c1f57e21398e1e1581c74f1f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c8c3b9079bb5213d846cc592e36d6f851d01bb7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNwZQCRBK7hj4Ov3rIwAAdHIIAA+Hg/wTb9+E4Eb/5KkiZzac\nOqQct8AOCXI43PfnAydrZpRoHWfh5iKq6kSoSpjkt3O20Irhdmzcy+g5Aez3/B/k\nZkV9h215QcPIeVnlJr/kMXSikr2ZQo5/hNFKIGn0LILvJVBrgxi8RY9t0uu2Dilw\naQOrcKgIZa3JeHqXpVAu5fkPIlOR3MfHmK6zOHkRc9W18waXZt6z6BfZ5CM0eZLf\nMcFdzHKECinBWtJaskRDdwHT45UnsRnfMwzlgp9P57rkI6bkXZy7gsOXxtrfp8aH\nqhXQRyq1kRCMFAd50nd2Ut9jj2+n110bVgvvLT44Vw8mQ9iS+StPa2z4YNYuaMo=\n=fNyM\n-----END PGP SIGNATURE-----\n", "payload": "tree 905b96fd5653814c1f57e21398e1e1581c74f1f3\nparent 2fb2af4f1d12bd65e0b58adf701f7598c51ca831\nparent b77c40e42d9249de3ac38829c8cfa22aa609e3a9\nauthor Tyler Mandry <tmandry@gmail.com> 1597441616 -0700\ncommitter GitHub <noreply@github.com> 1597441616 -0700\n\nRollup merge of #75511 - estebank:elide-trait-object-lt-error, r=lcnr\n\nDo not emit E0228 when it is implied by E0106\n\nEmit E0288 (lifetime bound for trait object cannot be deduced) only on bare trait objects. When the trait object is in the form of `&dyn Trait`, E0106 (missing lifetime specifier) will have been emitted, making the former redundant.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8c3b9079bb5213d846cc592e36d6f851d01bb7", "html_url": "https://github.com/rust-lang/rust/commit/0c8c3b9079bb5213d846cc592e36d6f851d01bb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c8c3b9079bb5213d846cc592e36d6f851d01bb7/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "html_url": "https://github.com/rust-lang/rust/commit/2fb2af4f1d12bd65e0b58adf701f7598c51ca831"}, {"sha": "b77c40e42d9249de3ac38829c8cfa22aa609e3a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b77c40e42d9249de3ac38829c8cfa22aa609e3a9", "html_url": "https://github.com/rust-lang/rust/commit/b77c40e42d9249de3ac38829c8cfa22aa609e3a9"}], "stats": {"total": 104, "additions": 37, "deletions": 67}, "files": [{"sha": "3093ddbeaf1ae05de8418b436a00ff5dd51e31b3", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0c8c3b9079bb5213d846cc592e36d6f851d01bb7/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8c3b9079bb5213d846cc592e36d6f851d01bb7/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=0c8c3b9079bb5213d846cc592e36d6f851d01bb7", "patch": "@@ -1623,6 +1623,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         span: Span,\n         trait_bounds: &[hir::PolyTraitRef<'_>],\n         lifetime: &hir::Lifetime,\n+        borrowed: bool,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx();\n \n@@ -1837,15 +1838,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     self.ast_region_to_region(lifetime, None)\n                 } else {\n                     self.re_infer(None, span).unwrap_or_else(|| {\n-                        // FIXME: these can be redundant with E0106, but not always.\n-                        struct_span_err!(\n+                        let mut err = struct_span_err!(\n                             tcx.sess,\n                             span,\n                             E0228,\n                             \"the lifetime bound for this object type cannot be deduced \\\n                              from context; please supply an explicit bound\"\n-                        )\n-                        .emit();\n+                        );\n+                        if borrowed {\n+                            // We will have already emitted an error E0106 complaining about a\n+                            // missing named lifetime in `&dyn Trait`, so we elide this one.\n+                            err.delay_as_bug();\n+                        } else {\n+                            err.emit();\n+                        }\n                         tcx.lifetimes.re_static\n                     })\n                 }\n@@ -2873,6 +2879,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// Parses the programmer's textual representation of a type into our\n     /// internal notion of a type.\n     pub fn ast_ty_to_ty(&self, ast_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n+        self.ast_ty_to_ty_inner(ast_ty, false)\n+    }\n+\n+    /// Turns a `hir::Ty` into a `Ty`. For diagnostics' purposes we keep track of whether trait\n+    /// objects are borrowed like `&dyn Trait` to avoid emitting redundant errors.\n+    fn ast_ty_to_ty_inner(&self, ast_ty: &hir::Ty<'_>, borrowed: bool) -> Ty<'tcx> {\n         debug!(\"ast_ty_to_ty(id={:?}, ast_ty={:?} ty_ty={:?})\", ast_ty.hir_id, ast_ty, ast_ty.kind);\n \n         let tcx = self.tcx();\n@@ -2885,7 +2897,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::TyKind::Rptr(ref region, ref mt) => {\n                 let r = self.ast_region_to_region(region, None);\n                 debug!(\"ast_ty_to_ty: r={:?}\", r);\n-                let t = self.ast_ty_to_ty(&mt.ty);\n+                let t = self.ast_ty_to_ty_inner(&mt.ty, true);\n                 tcx.mk_ref(r, ty::TypeAndMut { ty: t, mutbl: mt.mutbl })\n             }\n             hir::TyKind::Never => tcx.types.never,\n@@ -2903,7 +2915,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 ))\n             }\n             hir::TyKind::TraitObject(ref bounds, ref lifetime) => {\n-                self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime)\n+                self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed)\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(ref maybe_qself, ref path)) => {\n                 debug!(\"ast_ty_to_ty: maybe_qself={:?} path={:?}\", maybe_qself, path);"}, {"sha": "fe88d105c78bf19f697db21bb7c47be77cb1a4df", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c8c3b9079bb5213d846cc592e36d6f851d01bb7/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8c3b9079bb5213d846cc592e36d6f851d01bb7/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs?ref=0c8c3b9079bb5213d846cc592e36d6f851d01bb7", "patch": "@@ -25,8 +25,6 @@ thread_local! {\n     //~| ERROR missing lifetime specifier\n     //~| ERROR missing lifetime specifier\n     //~| ERROR missing lifetime specifier\n-    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n-    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n }\n thread_local! {\n     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n@@ -39,8 +37,6 @@ thread_local! {\n     //~| ERROR missing lifetime specifier\n     //~| ERROR missing lifetime specifier\n     //~| ERROR missing lifetime specifier\n-    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n-    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n }\n \n thread_local! {\n@@ -52,9 +48,7 @@ thread_local! {\n }\n thread_local! {\n     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-    //~^ ERROR the lifetime bound for this object type cannot be deduced from context\n-    //~| ERROR the lifetime bound for this object type cannot be deduced from context\n-    //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n+    //~^ ERROR wrong number of lifetime arguments: expected 2, found 1\n     //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n     //~| ERROR wrong number of lifetime arguments: expected 2, found 1\n     //~| ERROR wrong number of lifetime arguments: expected 2, found 1"}, {"sha": "9838ac72ad7675f9b3906f4bf736a138c45fca32", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.stderr", "status": "modified", "additions": 18, "deletions": 54, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0c8c3b9079bb5213d846cc592e36d6f851d01bb7/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8c3b9079bb5213d846cc592e36d6f851d01bb7/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr?ref=0c8c3b9079bb5213d846cc592e36d6f851d01bb7", "patch": "@@ -71,7 +71,7 @@ LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar<'static, 'static>>>>> = Ref\n    |                                             ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0106]: missing lifetime specifiers\n-  --> $DIR/missing-lifetime-specifier.rs:32:48\n+  --> $DIR/missing-lifetime-specifier.rs:30:48\n    |\n LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n    |                                                ^ expected 2 lifetime parameters\n@@ -83,7 +83,7 @@ LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> =\n    |                                                ^^^^^^^^^^^^^^^^^\n \n error[E0106]: missing lifetime specifiers\n-  --> $DIR/missing-lifetime-specifier.rs:32:48\n+  --> $DIR/missing-lifetime-specifier.rs:30:48\n    |\n LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n    |                                                ^ expected 2 lifetime parameters\n@@ -95,7 +95,7 @@ LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> =\n    |                                                ^^^^^^^^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/missing-lifetime-specifier.rs:37:44\n+  --> $DIR/missing-lifetime-specifier.rs:35:44\n    |\n LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^ expected named lifetime parameter\n@@ -107,7 +107,7 @@ LL |     static d: RefCell<HashMap<i32, Vec<Vec<&'static Tar<i32>>>>> = RefCell:\n    |                                            ^^^^^^^^\n \n error[E0106]: missing lifetime specifiers\n-  --> $DIR/missing-lifetime-specifier.rs:37:49\n+  --> $DIR/missing-lifetime-specifier.rs:35:49\n    |\n LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n    |                                                 ^ expected 2 lifetime parameters\n@@ -119,7 +119,7 @@ LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>>\n    |                                                 ^^^^^^^^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/missing-lifetime-specifier.rs:37:44\n+  --> $DIR/missing-lifetime-specifier.rs:35:44\n    |\n LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^ expected named lifetime parameter\n@@ -131,7 +131,7 @@ LL |     static d: RefCell<HashMap<i32, Vec<Vec<&'static Tar<i32>>>>> = RefCell:\n    |                                            ^^^^^^^^\n \n error[E0106]: missing lifetime specifiers\n-  --> $DIR/missing-lifetime-specifier.rs:37:49\n+  --> $DIR/missing-lifetime-specifier.rs:35:49\n    |\n LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n    |                                                 ^ expected 2 lifetime parameters\n@@ -143,7 +143,7 @@ LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>>\n    |                                                 ^^^^^^^^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/missing-lifetime-specifier.rs:54:44\n+  --> $DIR/missing-lifetime-specifier.rs:50:44\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^ expected named lifetime parameter\n@@ -155,7 +155,7 @@ LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> =\n    |                                            ^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/missing-lifetime-specifier.rs:54:44\n+  --> $DIR/missing-lifetime-specifier.rs:50:44\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^ expected named lifetime parameter\n@@ -166,91 +166,55 @@ help: consider using the `'static` lifetime\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^\n \n-error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n-  --> $DIR/missing-lifetime-specifier.rs:23:45\n-   |\n-LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n-   |                                             ^^^\n-\n-error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n-  --> $DIR/missing-lifetime-specifier.rs:23:45\n-   |\n-LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n-   |                                             ^^^\n-\n-error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n-  --> $DIR/missing-lifetime-specifier.rs:37:45\n-   |\n-LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n-   |                                             ^^^^^^^^\n-\n-error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n-  --> $DIR/missing-lifetime-specifier.rs:37:45\n-   |\n-LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n-   |                                             ^^^^^^^^\n-\n error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n-  --> $DIR/missing-lifetime-specifier.rs:47:44\n+  --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n \n error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n-  --> $DIR/missing-lifetime-specifier.rs:47:44\n+  --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n \n error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n-  --> $DIR/missing-lifetime-specifier.rs:47:44\n+  --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n \n error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n-  --> $DIR/missing-lifetime-specifier.rs:47:44\n+  --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n \n error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n-  --> $DIR/missing-lifetime-specifier.rs:54:45\n+  --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n \n error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n-  --> $DIR/missing-lifetime-specifier.rs:54:45\n+  --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n \n-error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n-  --> $DIR/missing-lifetime-specifier.rs:54:45\n-   |\n-LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                             ^^^^^^^^^^^^^^^^^\n-\n error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n-  --> $DIR/missing-lifetime-specifier.rs:54:45\n+  --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n \n-error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n-  --> $DIR/missing-lifetime-specifier.rs:54:45\n-   |\n-LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                             ^^^^^^^^^^^^^^^^^\n-\n error[E0107]: wrong number of lifetime arguments: expected 2, found 1\n-  --> $DIR/missing-lifetime-specifier.rs:54:45\n+  --> $DIR/missing-lifetime-specifier.rs:50:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                             ^^^^^^^^^^^^^^^^^ expected 2 lifetime arguments\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 22 previous errors\n \n-Some errors have detailed explanations: E0106, E0107, E0228.\n+Some errors have detailed explanations: E0106, E0107.\n For more information about an error, try `rustc --explain E0106`."}]}