{"sha": "74853eedfe811c5942a4744974e3738bc8fd87f5", "node_id": "C_kwDOAAsO6NoAKDc0ODUzZWVkZmU4MTFjNTk0MmE0NzQ0OTc0ZTM3MzhiYzhmZDg3ZjU", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-25T08:09:36Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-25T08:09:36Z"}, "message": "simplify `describe_field` func in borrowck's diagnostics part", "tree": {"sha": "0a3fce45991a3c5723d65b35dabeda1bf0be4106", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a3fce45991a3c5723d65b35dabeda1bf0be4106"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74853eedfe811c5942a4744974e3738bc8fd87f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74853eedfe811c5942a4744974e3738bc8fd87f5", "html_url": "https://github.com/rust-lang/rust/commit/74853eedfe811c5942a4744974e3738bc8fd87f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74853eedfe811c5942a4744974e3738bc8fd87f5/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f631e8e93681ddc6e62d6ba6065cac7c449534c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f631e8e93681ddc6e62d6ba6065cac7c449534c", "html_url": "https://github.com/rust-lang/rust/commit/1f631e8e93681ddc6e62d6ba6065cac7c449534c"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "b81360fd6aab401b8bc2c0c597b5235bb9c451ad", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/74853eedfe811c5942a4744974e3738bc8fd87f5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74853eedfe811c5942a4744974e3738bc8fd87f5/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=74853eedfe811c5942a4744974e3738bc8fd87f5", "patch": "@@ -40,6 +40,7 @@ crate use outlives_suggestion::OutlivesSuggestionBuilder;\n crate use region_errors::{ErrorConstraintInfo, RegionErrorKind, RegionErrors};\n crate use region_name::{RegionName, RegionNameSource};\n crate use rustc_const_eval::util::CallKind;\n+use rustc_middle::mir::tcx::PlaceTy;\n \n pub(super) struct IncludingDowncast(pub(super) bool);\n \n@@ -329,30 +330,20 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     /// End-user visible description of the `field`nth field of `base`\n     fn describe_field(&self, place: PlaceRef<'tcx>, field: Field) -> String {\n-        // FIXME Place2 Make this work iteratively\n-        match place {\n-            PlaceRef { local, projection: [] } => {\n-                let local = &self.body.local_decls[local];\n-                self.describe_field_from_ty(local.ty, field, None)\n-            }\n+        let place_ty = match place {\n+            PlaceRef { local, projection: [] } => PlaceTy::from_ty(self.body.local_decls[local].ty),\n             PlaceRef { local, projection: [proj_base @ .., elem] } => match elem {\n-                ProjectionElem::Deref => {\n-                    self.describe_field(PlaceRef { local, projection: proj_base }, field)\n-                }\n-                ProjectionElem::Downcast(_, variant_index) => {\n-                    let base_ty = place.ty(self.body, self.infcx.tcx).ty;\n-                    self.describe_field_from_ty(base_ty, field, Some(*variant_index))\n-                }\n-                ProjectionElem::Field(_, field_type) => {\n-                    self.describe_field_from_ty(*field_type, field, None)\n-                }\n-                ProjectionElem::Index(..)\n+                ProjectionElem::Deref\n+                | ProjectionElem::Index(..)\n                 | ProjectionElem::ConstantIndex { .. }\n                 | ProjectionElem::Subslice { .. } => {\n-                    self.describe_field(PlaceRef { local, projection: proj_base }, field)\n+                    PlaceRef { local, projection: proj_base }.ty(self.body, self.infcx.tcx)\n                 }\n+                ProjectionElem::Downcast(..) => place.ty(self.body, self.infcx.tcx),\n+                ProjectionElem::Field(_, field_type) => PlaceTy::from_ty(*field_type),\n             },\n-        }\n+        };\n+        self.describe_field_from_ty(place_ty.ty, field, place_ty.variant_index)\n     }\n \n     /// End-user visible description of the `field_index`nth field of `ty`"}]}