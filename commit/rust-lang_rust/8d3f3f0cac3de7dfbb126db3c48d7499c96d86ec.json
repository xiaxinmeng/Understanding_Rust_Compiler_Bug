{"sha": "8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkM2YzZjBjYWMzZGU3ZGZiYjEyNmRiM2M0OGQ3NDk5Yzk2ZDg2ZWM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-22T09:51:25Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-22T14:43:37Z"}, "message": "Rollup merge of #49117 - nivkner:fixme_fixup3, r=estebank\n\naddress some FIXME whose associated issues were marked as closed\n\npart of #44366", "tree": {"sha": "1ea48d9447fff532f6598dee6899a42ec36a687c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ea48d9447fff532f6598dee6899a42ec36a687c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqzwRkACgkQ/vbIBR0O\nATzYrw//fH1g9grR/iDhMVp3S8XPiXVN6NzU90E0gYXlEQ4h7BRvUZrou1dHRrOP\nIVC4xn28h3PcxPcTuqXqkJbZU5Tv8FqNLqkjOM7nSLvmO7jVXaShEHHLouFYp05P\nV/Wdqgl7y930/NxCHKUh+hJx42RMGs0DWPTyKio5hU+HvFG6UF3btgkgEwDtXxJC\nddVvaIgQZRhtgBsf2yLXNOSUL4SDaxiRdE1s65yEYFNuBWPa5NJ1VtTYiKijZoQk\nqc7lDosVwRwM7g1T1J28aanuRAIAUGjfxzaeBpKqQlhRoJaDYxCkYd7lxUSfDc0L\n1nNPVAzsWF2aOlSprNLdewi5D0G6LG8B4JMXrlfOm821r6F61x9sGUjxEBwl/OE5\nIyn2w3Tf8F6NVzeYNSTD0A7JO/t6o0tT39n/ylbh9yxsy5FRnpo5BsAJCVUiruHZ\nTMz50OiXGRHO3IH8CzPhYUIivPU1wl85qGRKYajwduisF8bZsPWdvXbq5Ir8I3cr\n91kOasyqLcAdUJG+CEbKZ5CJPXq1428tr6oIKh3EgS5tjwW34Hwdi/Jht5NtQ2EJ\n7+07dC2pqyPVWzySZV5rJ8zeVrxbhf+dxlclafmAXosFOcbX5vXepUgk/tOQxxqZ\n4ajSu1aEkVI283i55FqNNbmCVmAKfmREZNLM2QDsXiVEXWhipcE=\n=jjCE\n-----END PGP SIGNATURE-----", "payload": "tree 1ea48d9447fff532f6598dee6899a42ec36a687c\nparent 245f4c4631401c9a25ed62e8f75b97607b3b38bb\nparent 66d120cd263ea77a44fcde9409a71ac673a5262c\nauthor kennytm <kennytm@gmail.com> 1521712285 +0800\ncommitter kennytm <kennytm@gmail.com> 1521729817 +0800\n\nRollup merge of #49117 - nivkner:fixme_fixup3, r=estebank\n\naddress some FIXME whose associated issues were marked as closed\n\npart of #44366\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "html_url": "https://github.com/rust-lang/rust/commit/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "245f4c4631401c9a25ed62e8f75b97607b3b38bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/245f4c4631401c9a25ed62e8f75b97607b3b38bb", "html_url": "https://github.com/rust-lang/rust/commit/245f4c4631401c9a25ed62e8f75b97607b3b38bb"}, {"sha": "66d120cd263ea77a44fcde9409a71ac673a5262c", "url": "https://api.github.com/repos/rust-lang/rust/commits/66d120cd263ea77a44fcde9409a71ac673a5262c", "html_url": "https://github.com/rust-lang/rust/commit/66d120cd263ea77a44fcde9409a71ac673a5262c"}], "stats": {"total": 117, "additions": 40, "deletions": 77}, "files": [{"sha": "3f679d81f08de9bd59a5019ddfd12033ebd59310", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -1351,7 +1351,7 @@ fn test_copy_from_slice_dst_shorter() {\n const MAX_LEN: usize = 80;\n \n static DROP_COUNTS: [AtomicUsize; MAX_LEN] = [\n-    // FIXME #5244: AtomicUsize is not Copy.\n+    // FIXME(RFC 1109): AtomicUsize is not Copy.\n     AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n     AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n     AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),"}, {"sha": "2206910c93f61b66b18e5da619132c5d2ebe6721", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -382,7 +382,7 @@ impl<'a, T: ?Sized, U: ?Sized> AsRef<U> for &'a mut T where T: AsRef<U>\n     }\n }\n \n-// FIXME (#23442): replace the above impls for &/&mut with the following more general one:\n+// FIXME (#45742): replace the above impls for &/&mut with the following more general one:\n // // As lifts over Deref\n // impl<D: ?Sized + Deref, U: ?Sized> AsRef<U> for D where D::Target: AsRef<U> {\n //     fn as_ref(&self) -> &U {\n@@ -399,7 +399,7 @@ impl<'a, T: ?Sized, U: ?Sized> AsMut<U> for &'a mut T where T: AsMut<U>\n     }\n }\n \n-// FIXME (#23442): replace the above impl for &mut with the following more general one:\n+// FIXME (#45742): replace the above impl for &mut with the following more general one:\n // // AsMut lifts over DerefMut\n // impl<D: ?Sized + Deref, U: ?Sized> AsMut<U> for D where D::Target: AsMut<U> {\n //     fn as_mut(&mut self) -> &mut U {"}, {"sha": "1e8476d3880c8a4fc197c0c95e647ebca69ccf62", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -1872,7 +1872,7 @@ impl<I: Iterator> Iterator for Peekable<I> {\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        // FIXME(#6393): merge these when borrow-checking gets better.\n+        // FIXME(#43234): merge these when borrow-checking gets better.\n         if n == 0 {\n             match self.peeked.take() {\n                 Some(v) => v,"}, {"sha": "7281fb59663881ee222345491332af71b5721070", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -117,10 +117,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     // Evaluate the initializer, if present.\n                     if let Some(init) = initializer {\n                         unpack!(block = this.in_opt_scope(\n-                            opt_destruction_scope.map(|de|(de, source_info)), block, move |this| {\n+                            opt_destruction_scope.map(|de|(de, source_info)), block, |this| {\n                                 let scope = (init_scope, source_info);\n-                                this.in_scope(scope, lint_level, block, move |this| {\n-                                    // FIXME #30046                             ^~~~\n+                                this.in_scope(scope, lint_level, block, |this| {\n                                     this.expr_into_pattern(block, pattern, init)\n                                 })\n                             }));"}, {"sha": "19f33ef5d45a83f6a6b4b964c613f6574bfa924b", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -177,7 +177,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 });\n             }\n             DropStyle::Conditional => {\n-                let unwind = self.unwind; // FIXME(#6393)\n+                let unwind = self.unwind; // FIXME(#43234)\n                 let succ = self.succ;\n                 let drop_bb = self.complete_drop(Some(DropFlagMode::Deep), succ, unwind);\n                 self.elaborator.patch().patch_terminator(bb, TerminatorKind::Goto {\n@@ -268,7 +268,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         // Clear the \"master\" drop flag at the end. This is needed\n         // because the \"master\" drop protects the ADT's discriminant,\n         // which is invalidated after the ADT is dropped.\n-        let (succ, unwind) = (self.succ, self.unwind); // FIXME(#6393)\n+        let (succ, unwind) = (self.succ, self.unwind); // FIXME(#43234)\n         (\n             self.drop_flag_reset_block(DropFlagMode::Shallow, succ, unwind),\n             unwind.map(|unwind| {\n@@ -344,7 +344,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let interior = self.place.clone().deref();\n         let interior_path = self.elaborator.deref_subpath(self.path);\n \n-        let succ = self.succ; // FIXME(#6393)\n+        let succ = self.succ; // FIXME(#43234)\n         let unwind = self.unwind;\n         let succ = self.box_free_block(ty, succ, unwind);\n         let unwind_succ = self.unwind.map(|unwind| {\n@@ -717,7 +717,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                            ptr_based)\n         });\n \n-        let succ = self.succ; // FIXME(#6393)\n+        let succ = self.succ; // FIXME(#43234)\n         let loop_block = self.drop_loop(\n             succ,\n             cur,\n@@ -798,7 +798,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 self.open_drop_for_adt(def, substs)\n             }\n             ty::TyDynamic(..) => {\n-                let unwind = self.unwind; // FIXME(#6393)\n+                let unwind = self.unwind; // FIXME(#43234)\n                 let succ = self.succ;\n                 self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n             }\n@@ -849,7 +849,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n \n     fn elaborated_drop_block<'a>(&mut self) -> BasicBlock {\n         debug!(\"elaborated_drop_block({:?})\", self);\n-        let unwind = self.unwind; // FIXME(#6393)\n+        let unwind = self.unwind; // FIXME(#43234)\n         let succ = self.succ;\n         let blk = self.drop_block(succ, unwind);\n         self.elaborate_drop(blk);\n@@ -882,7 +882,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             args: vec![Operand::Move(self.place.clone())],\n             destination: Some((unit_temp, target)),\n             cleanup: None\n-        }; // FIXME(#6393)\n+        }; // FIXME(#43234)\n         let free_block = self.new_block(unwind, call);\n \n         let block_start = Location { block: free_block, statement_index: 0 };"}, {"sha": "644a2ffe3c379bfc9c7864bfe8e7c51502c0132e", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -1025,28 +1025,9 @@ fn import_path_to_string(names: &[SpannedIdent],\n         if names.is_empty() {\n             import_directive_subclass_to_string(subclass)\n         } else {\n-            // FIXME: Remove this entire logic after #48116 is fixed.\n-            //\n-            // Note that this code looks a little wonky, it's currently here to\n-            // hopefully help debug #48116, but otherwise isn't intended to\n-            // cause any problems.\n-            let x = format!(\n-                \"{}::{}\",\n-                names_to_string(names),\n-                import_directive_subclass_to_string(subclass),\n-            );\n-            if names.is_empty() || x.starts_with(\"::\") {\n-                span_bug!(\n-                    span,\n-                    \"invalid name `{}` at {:?}; global = {}, names = {:?}, subclass = {:?}\",\n-                    x,\n-                    span,\n-                    global,\n-                    names,\n-                    subclass\n-                );\n-            }\n-            return x\n+            format!(\"{}::{}\",\n+                    names_to_string(names),\n+                    import_directive_subclass_to_string(subclass))\n         }\n     }\n }"}, {"sha": "47bbd67fb5c70840cc5fdf85e8cfca77338df991", "filename": "src/librustc_trans_utils/symbol_names_test.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibrustc_trans_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibrustc_trans_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fsymbol_names_test.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -15,7 +15,6 @@\n //! paths etc in all kinds of annoying scenarios.\n \n use rustc::hir;\n-use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::ty::TyCtxt;\n use syntax::ast;\n \n@@ -34,8 +33,7 @@ pub fn report_symbol_names<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     tcx.dep_graph.with_ignore(|| {\n         let mut visitor = SymbolNamesTest { tcx: tcx };\n-        // FIXME(#37712) could use ItemLikeVisitor if trait items were item-like\n-        tcx.hir.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n+        tcx.hir.krate().visit_all_item_likes(&mut visitor);\n     })\n }\n \n@@ -66,23 +64,16 @@ impl<'a, 'tcx> SymbolNamesTest<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for SymbolNamesTest<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::None\n-    }\n-\n+impl<'a, 'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         self.process_attrs(item.id);\n-        intravisit::walk_item(self, item);\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n-        self.process_attrs(ti.id);\n-        intravisit::walk_trait_item(self, ti)\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+        self.process_attrs(trait_item.id);\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n-        self.process_attrs(ii.id);\n-        intravisit::walk_impl_item(self, ii)\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+        self.process_attrs(impl_item.id);\n     }\n }"}, {"sha": "69879bbe85d6e4e50d22af815d071c08be95a4f2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -2884,27 +2884,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let origin = self.misc(call_span);\n                 let ures = self.at(&origin, self.param_env).sup(ret_ty, formal_ret);\n \n-                // FIXME(#15760) can't use try! here, FromError doesn't default\n+                // FIXME(#27336) can't use ? here, Try::from_error doesn't default\n                 // to identity so the resulting type is not constrained.\n                 match ures {\n                     Ok(ok) => {\n                         // Process any obligations locally as much as\n                         // we can.  We don't care if some things turn\n                         // out unconstrained or ambiguous, as we're\n                         // just trying to get hints here.\n-                        let result = self.save_and_restore_in_snapshot_flag(|_| {\n+                        self.save_and_restore_in_snapshot_flag(|_| {\n                             let mut fulfill = FulfillmentContext::new();\n-                            let ok = ok; // FIXME(#30046)\n                             for obligation in ok.obligations {\n                                 fulfill.register_predicate_obligation(self, obligation);\n                             }\n                             fulfill.select_where_possible(self)\n-                        });\n-\n-                        match result {\n-                            Ok(()) => { }\n-                            Err(_) => return Err(()),\n-                        }\n+                        }).map_err(|_| ())?;\n                     }\n                     Err(_) => return Err(()),\n                 }"}, {"sha": "33d7053852246a9bf4c63d02d94682f989f888ba", "filename": "src/libstd/num.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -169,7 +169,6 @@ mod tests {\n \n     macro_rules! test_checked_next_power_of_two {\n         ($test_name:ident, $T:ident) => (\n-            #[cfg_attr(target_os = \"emscripten\", ignore)] // FIXME(#39119)\n             fn $test_name() {\n                 #![test]\n                 assert_eq!((0 as $T).checked_next_power_of_two(), Some(1));"}, {"sha": "202dc03eaa41d511452cb28880e194460d610dc9", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -298,7 +298,6 @@ pub fn str_lit(lit: &str, diag: Option<(Span, &Handler)>) -> String {\n     debug!(\"parse_str_lit: given {}\", escape_default(lit));\n     let mut res = String::with_capacity(lit.len());\n \n-    // FIXME #8372: This could be a for-loop if it didn't borrow the iterator\n     let error = |i| format!(\"lexer should have rejected {} at {}\", lit, i);\n \n     /// Eat everything up to a non-whitespace\n@@ -503,7 +502,6 @@ pub fn byte_lit(lit: &str) -> (u8, usize) {\n pub fn byte_str_lit(lit: &str) -> Lrc<Vec<u8>> {\n     let mut res = Vec::with_capacity(lit.len());\n \n-    // FIXME #8372: This could be a for-loop if it didn't borrow the iterator\n     let error = |i| format!(\"lexer should have rejected {} at {}\", lit, i);\n \n     /// Eat everything up to a non-whitespace"}, {"sha": "5264b627e96137b0b933adce4c3bdcab30115ae5", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -628,8 +628,15 @@ fn path_node(ids: Vec<Ident>) -> ast::Path {\n }\n \n fn path_name_i(idents: &[Ident]) -> String {\n-    // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")\n-    idents.iter().map(|i| i.to_string()).collect::<Vec<String>>().join(\"::\")\n+    let mut path_name = \"\".to_string();\n+    let mut idents_iter = idents.iter().peekable();\n+    while let Some(ident) = idents_iter.next() {\n+        path_name.push_str(&ident.name.as_str());\n+        if let Some(_) = idents_iter.peek() {\n+            path_name.push_str(\"::\")\n+        }\n+    }\n+    path_name\n }\n \n fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n@@ -682,7 +689,6 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n     // gensym information.\n \n     let span = ignored_span(cx, test.span);\n-    let path = test.path.clone();\n     let ecx = &cx.ext_cx;\n     let self_id = ecx.ident_of(\"self\");\n     let test_id = ecx.ident_of(\"test\");\n@@ -694,10 +700,11 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n     // creates $name: $expr\n     let field = |name, expr| ecx.field_imm(span, ecx.ident_of(name), expr);\n \n-    debug!(\"encoding {}\", path_name_i(&path[..]));\n-\n     // path to the #[test] function: \"foo::bar::baz\"\n-    let path_string = path_name_i(&path[..]);\n+    let path_string = path_name_i(&test.path[..]);\n+\n+    debug!(\"encoding {}\", path_string);\n+\n     let name_expr = ecx.expr_str(span, Symbol::intern(&path_string));\n \n     // self::test::StaticTestName($name_expr)\n@@ -744,7 +751,7 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n             diag.bug(\"expected to find top-level re-export name, but found None\");\n         }\n     };\n-    visible_path.extend(path);\n+    visible_path.extend_from_slice(&test.path[..]);\n \n     // Rather than directly give the test function to the test\n     // harness, we create a wrapper like one of the following:"}, {"sha": "29a5f6dd24bd0c0f874fc32fb33c9461e33b25b0", "filename": "src/test/run-pass/issue-27889.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Ftest%2Frun-pass%2Fissue-27889.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Ftest%2Frun-pass%2Fissue-27889.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-27889.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -10,7 +10,6 @@\n \n // Test that a field can have the same name in different variants\n // of an enum\n-// FIXME #27889\n \n pub enum Foo {\n     X { foo: u32 },"}, {"sha": "e21e487fedd1c81d5618a491e3530b3a75f99907", "filename": "src/test/run-pass/issue-28561.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Ftest%2Frun-pass%2Fissue-28561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Ftest%2Frun-pass%2Fissue-28561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-28561.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -45,7 +45,7 @@ struct Array<T> {\n     f32: [T; 32],\n }\n \n-// FIXME(#7622): merge with `Array` once `[T; N]: Clone` where `T: Clone`\n+// FIXME(#44580): merge with `Array` once `[T; N]: Clone` where `T: Clone`\n #[derive(Clone, Copy)]\n struct CopyArray<T: Copy> {\n     f00: [T; 00],"}, {"sha": "ee348cddb3cfcc825b1f73b9e7ef6fab33c2dec5", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=8d3f3f0cac3de7dfbb126db3c48d7499c96d86ec", "patch": "@@ -2358,11 +2358,6 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn run_rmake_test(&self) {\n-        // FIXME(#11094): we should fix these tests\n-        if self.config.host != self.config.target {\n-            return;\n-        }\n-\n         let cwd = env::current_dir().unwrap();\n         let src_root = self.config\n             .src_base"}]}