{"sha": "e2424a2c1f4d5502b8900a1701c7a8a3a2a28bf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNDI0YTJjMWY0ZDU1MDJiODkwMGExNzAxYzdhOGEzYTJhMjhiZjk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-10T19:49:31Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-10T19:49:31Z"}, "message": "Fix query docs\n\nThey were not formatted correctly, so rustdoc was interpreting some\nparts as code. Also cleaned up some other query docs that weren't\ncausing issues, but were formatted incorrectly.", "tree": {"sha": "d431227a69a447cbc2e8bdb7a0fc172be698484b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d431227a69a447cbc2e8bdb7a0fc172be698484b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2424a2c1f4d5502b8900a1701c7a8a3a2a28bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2424a2c1f4d5502b8900a1701c7a8a3a2a28bf9", "html_url": "https://github.com/rust-lang/rust/commit/e2424a2c1f4d5502b8900a1701c7a8a3a2a28bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2424a2c1f4d5502b8900a1701c7a8a3a2a28bf9/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5883d3de9c5536a3bdd69959fbf6e74ebccda729", "url": "https://api.github.com/repos/rust-lang/rust/commits/5883d3de9c5536a3bdd69959fbf6e74ebccda729", "html_url": "https://github.com/rust-lang/rust/commit/5883d3de9c5536a3bdd69959fbf6e74ebccda729"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "1acb44f6d22f3b80873d463932845a8fe2dd9631", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e2424a2c1f4d5502b8900a1701c7a8a3a2a28bf9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2424a2c1f4d5502b8900a1701c7a8a3a2a28bf9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=e2424a2c1f4d5502b8900a1701c7a8a3a2a28bf9", "patch": "@@ -92,7 +92,7 @@ rustc_queries! {\n         /// Computes the `DefId` of the corresponding const parameter in case the `key` is a\n         /// const argument and returns `None` otherwise.\n         ///\n-        /// ```rust\n+        /// ```ignore (incomplete)\n         /// let a = foo::<7>();\n         /// //            ^ Calling `opt_const_param_of` for this argument,\n         ///\n@@ -162,10 +162,12 @@ rustc_queries! {\n         /// Specifically this is the bounds written on the trait's type\n         /// definition, or those after the `impl` keyword\n         ///\n+        /// ```ignore (incomplete)\n         /// type X: Bound + 'lt\n-        ///         ^^^^^^^^^^^\n+        /// //      ^^^^^^^^^^^\n         /// impl Debug + Display\n-        ///      ^^^^^^^^^^^^^^^\n+        /// //   ^^^^^^^^^^^^^^^\n+        /// ```\n         ///\n         /// `key` is the `DefId` of the associated type or opaque type.\n         ///\n@@ -176,18 +178,22 @@ rustc_queries! {\n \n         /// Elaborated version of the predicates from `explicit_item_bounds`.\n         ///\n-        /// Example for\n+        /// For example:\n         ///\n+        /// ```\n         /// trait MyTrait {\n-        ///     type MyAType: Eq + ?Sized`\n+        ///     type MyAType: Eq + ?Sized;\n         /// }\n+        /// ```\n         ///\n         /// `explicit_item_bounds` returns `[<Self as MyTrait>::MyAType: Eq]`,\n         /// and `item_bounds` returns\n+        /// ```text\n         /// [\n         ///     <Self as Trait>::MyAType: Eq,\n         ///     <Self as Trait>::MyAType: PartialEq<<Self as Trait>::MyAType>\n         /// ]\n+        /// ```\n         ///\n         /// Bounds from the parent (e.g. with nested impl trait) are not included.\n         query item_bounds(key: DefId) -> &'tcx ty::List<ty::Predicate<'tcx>> {"}]}