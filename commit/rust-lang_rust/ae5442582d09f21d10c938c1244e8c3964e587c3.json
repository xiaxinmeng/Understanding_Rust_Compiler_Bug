{"sha": "ae5442582d09f21d10c938c1244e8c3964e587c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNTQ0MjU4MmQwOWYyMWQxMGM5MzhjMTI0NGU4YzM5NjRlNTg3YzM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-26T23:45:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-26T23:45:04Z"}, "message": "Rollup merge of #78348 - jyn514:pub-crate, r=GuillaumeGomez\n\nMake some functions private that don't have to be public\n\nr? @GuillaumeGomez", "tree": {"sha": "d2f2256cff74f96ef54c16e620d7f67cc6eb0719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2f2256cff74f96ef54c16e620d7f67cc6eb0719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae5442582d09f21d10c938c1244e8c3964e587c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfl1+BCRBK7hj4Ov3rIwAAdHIIACgWpknu/O1Ilw/QLV0kHn/o\nVgEeeIk9FutELxkeQy3Ai34eYtLH9tUm6WZt4a4gCCjNPtBKUIxvj/svGnqxeou7\nnni8wn2oeac4cxDvKhHUluC7Nk05dy5IZS02TYXvQKuCgbUdgn6e3OuI9FKUDoHF\n2qA/KMFn3s6ulNYNrEv8ia9L6LSH6UzgrRpBDDSfnzrsEuITeusZNOfMbwhiXw38\ndquTs7kpfCMqVHabPq9AbHdUq8rj0jlqNj2qUN2Buu/3m/Yd6I1bgDsMWuxGjTAv\nD11cD62fep23dMBuNrYzX73kpV9gN2ZKljm6f7NEaGXDcUK5YIZfW1AGc/KRhAE=\n=pm5u\n-----END PGP SIGNATURE-----\n", "payload": "tree d2f2256cff74f96ef54c16e620d7f67cc6eb0719\nparent 727e93dc747b4f4af0f0b300b659f5f3a0c32493\nparent e2183801b592464a56f9979dd12929500421948a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603755904 +0900\ncommitter GitHub <noreply@github.com> 1603755904 +0900\n\nRollup merge of #78348 - jyn514:pub-crate, r=GuillaumeGomez\n\nMake some functions private that don't have to be public\n\nr? @GuillaumeGomez\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5442582d09f21d10c938c1244e8c3964e587c3", "html_url": "https://github.com/rust-lang/rust/commit/ae5442582d09f21d10c938c1244e8c3964e587c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae5442582d09f21d10c938c1244e8c3964e587c3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "727e93dc747b4f4af0f0b300b659f5f3a0c32493", "url": "https://api.github.com/repos/rust-lang/rust/commits/727e93dc747b4f4af0f0b300b659f5f3a0c32493", "html_url": "https://github.com/rust-lang/rust/commit/727e93dc747b4f4af0f0b300b659f5f3a0c32493"}, {"sha": "e2183801b592464a56f9979dd12929500421948a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2183801b592464a56f9979dd12929500421948a", "html_url": "https://github.com/rust-lang/rust/commit/e2183801b592464a56f9979dd12929500421948a"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b3de70e590574da44660114e83a802559a8d6be6", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae5442582d09f21d10c938c1244e8c3964e587c3/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae5442582d09f21d10c938c1244e8c3964e587c3/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ae5442582d09f21d10c938c1244e8c3964e587c3", "patch": "@@ -37,7 +37,7 @@ type Attrs<'hir> = rustc_middle::ty::Attributes<'hir>;\n /// and `Some` of a vector of items if it was successfully expanded.\n ///\n /// `parent_module` refers to the parent of the *re-export*, not the original item.\n-pub fn try_inline(\n+crate fn try_inline(\n     cx: &DocContext<'_>,\n     parent_module: DefId,\n     res: Res,\n@@ -137,7 +137,7 @@ pub fn try_inline(\n     Some(ret)\n }\n \n-pub fn try_inline_glob(\n+crate fn try_inline_glob(\n     cx: &DocContext<'_>,\n     res: Res,\n     visited: &mut FxHashSet<DefId>,\n@@ -160,15 +160,15 @@ pub fn try_inline_glob(\n     }\n }\n \n-pub fn load_attrs<'hir>(cx: &DocContext<'hir>, did: DefId) -> Attrs<'hir> {\n+crate fn load_attrs<'hir>(cx: &DocContext<'hir>, did: DefId) -> Attrs<'hir> {\n     cx.tcx.get_attrs(did)\n }\n \n /// Record an external fully qualified name in the external_paths cache.\n ///\n /// These names are used later on by HTML rendering to generate things like\n /// source links back to the original item.\n-pub fn record_extern_fqn(cx: &DocContext<'_>, did: DefId, kind: clean::TypeKind) {\n+crate fn record_extern_fqn(cx: &DocContext<'_>, did: DefId, kind: clean::TypeKind) {\n     let crate_name = cx.tcx.crate_name(did.krate).to_string();\n \n     let relative = cx.tcx.def_path(did).data.into_iter().filter_map(|elem| {\n@@ -189,7 +189,7 @@ pub fn record_extern_fqn(cx: &DocContext<'_>, did: DefId, kind: clean::TypeKind)\n     }\n }\n \n-pub fn build_external_trait(cx: &DocContext<'_>, did: DefId) -> clean::Trait {\n+crate fn build_external_trait(cx: &DocContext<'_>, did: DefId) -> clean::Trait {\n     let trait_items =\n         cx.tcx.associated_items(did).in_definition_order().map(|item| item.clean(cx)).collect();\n \n@@ -284,7 +284,7 @@ fn build_type_alias_type(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type>\n     type_.def_id().and_then(|did| build_ty(cx, did))\n }\n \n-pub fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n+crate fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n     match cx.tcx.def_kind(did) {\n         DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::Const | DefKind::Static => {\n             Some(cx.tcx.type_of(did).clean(cx))\n@@ -295,7 +295,7 @@ pub fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n }\n \n /// Builds all inherent implementations of an ADT (struct/union/enum) or Trait item/path/reexport.\n-pub fn build_impls(\n+crate fn build_impls(\n     cx: &DocContext<'_>,\n     parent_module: Option<DefId>,\n     did: DefId,\n@@ -338,7 +338,7 @@ fn merge_attrs(\n }\n \n /// Builds a specific implementation of a type. The `did` could be a type method or trait method.\n-pub fn build_impl(\n+crate fn build_impl(\n     cx: &DocContext<'_>,\n     parent_module: impl Into<Option<DefId>>,\n     did: DefId,\n@@ -527,7 +527,7 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n     }\n }\n \n-pub fn print_inlined_const(cx: &DocContext<'_>, did: DefId) -> String {\n+crate fn print_inlined_const(cx: &DocContext<'_>, did: DefId) -> String {\n     if let Some(did) = did.as_local() {\n         let hir_id = cx.tcx.hir().local_def_id_to_hir_id(did);\n         rustc_hir_pretty::id_to_string(&cx.tcx.hir(), hir_id)\n@@ -644,7 +644,7 @@ fn separate_supertrait_bounds(\n     (g, ty_bounds)\n }\n \n-pub fn record_extern_trait(cx: &DocContext<'_>, did: DefId) {\n+crate fn record_extern_trait(cx: &DocContext<'_>, did: DefId) {\n     if did.is_local() {\n         return;\n     }"}]}