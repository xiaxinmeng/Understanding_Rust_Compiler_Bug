{"sha": "902460d2182198e096de47850c3e8ab72fbbafc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMjQ2MGQyMTgyMTk4ZTA5NmRlNDc4NTBjM2U4YWI3MmZiYmFmYzU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-10-02T00:11:45Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-03T10:08:19Z"}, "message": "Add line number and filename in error message", "tree": {"sha": "e107071f0a79ffbdb483c9c25801695b1e50f944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e107071f0a79ffbdb483c9c25801695b1e50f944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/902460d2182198e096de47850c3e8ab72fbbafc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/902460d2182198e096de47850c3e8ab72fbbafc5", "html_url": "https://github.com/rust-lang/rust/commit/902460d2182198e096de47850c3e8ab72fbbafc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/902460d2182198e096de47850c3e8ab72fbbafc5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "230234f3a8eb38dcfa26d086c9c6e61be48f46ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/230234f3a8eb38dcfa26d086c9c6e61be48f46ac", "html_url": "https://github.com/rust-lang/rust/commit/230234f3a8eb38dcfa26d086c9c6e61be48f46ac"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "50f748deb0b9e840a4d7d407bd6773e9fa1d9081", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/902460d2182198e096de47850c3e8ab72fbbafc5/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902460d2182198e096de47850c3e8ab72fbbafc5/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=902460d2182198e096de47850c3e8ab72fbbafc5", "patch": "@@ -154,7 +154,7 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n     let mut collector = Collector::new(input.to_string(), cfgs, libs, externs,\n-                                       true, opts, maybe_sysroot);\n+                                       true, opts, maybe_sysroot, &input_str, \"input\".to_string());\n     find_testable_code(&input_str, &mut collector);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests);"}, {"sha": "a772a52da727ac32f403b6761daa72a656a79da8", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 54, "deletions": 5, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/902460d2182198e096de47850c3e8ab72fbbafc5/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/902460d2182198e096de47850c3e8ab72fbbafc5/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=902460d2182198e096de47850c3e8ab72fbbafc5", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::collections::HashMap;\n use std::env;\n use std::ffi::OsString;\n+use std::fs::File;\n use std::io::prelude::*;\n use std::io;\n use std::path::PathBuf;\n@@ -96,13 +98,24 @@ pub fn run(input: &str,\n         link::find_crate_name(None, &hir_forest.krate().attrs, &input)\n     });\n     let opts = scrape_test_config(hir_forest.krate());\n+    let filename = input_path.to_str().unwrap_or(\"\").to_owned();\n+    let mut f = match File::open(input_path) {\n+        Ok(f) => f,\n+        _ => return 1,\n+    };\n+    let mut file_content = String::new();\n+    if let Err(_) = f.read_to_string(&mut file_content) {\n+        return 1;\n+    }\n     let mut collector = Collector::new(crate_name,\n                                        cfgs,\n                                        libs,\n                                        externs,\n                                        false,\n                                        opts,\n-                                       maybe_sysroot);\n+                                       maybe_sysroot,\n+                                       &file_content,\n+                                       filename);\n \n     {\n         let dep_graph = DepGraph::new(false);\n@@ -162,11 +175,12 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n            should_panic: bool, no_run: bool, as_test_harness: bool,\n            compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n            maybe_sysroot: Option<PathBuf>,\n-           original: &str) {\n+           original: &str, line_number: u32, filename: &str) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let new_test = maketest(test, Some(cratename), as_test_harness, opts);\n-    let test = format!(\"```{}\\n{}\\n```\\n\", original, test);\n+    let test = format!(\"Error on {}:{}\\n\\n```{}\\n{}\\n```\\n\",\n+                       filename, line_number, original, test);\n     let input = config::Input::Str {\n         name: driver::anon_src(),\n         input: new_test.to_owned(),\n@@ -389,11 +403,27 @@ pub struct Collector {\n     cratename: String,\n     opts: TestOptions,\n     maybe_sysroot: Option<PathBuf>,\n+    code_blocks: HashMap<String, Vec<u32>>,\n+    filename: String,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n-               use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>) -> Collector {\n+               use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n+               file_content: &str, filename: String) -> Collector {\n+        let mut line_number = 1;\n+        let mut block_lines = HashMap::new();\n+        for (pos, block) in file_content.split(\"```\").enumerate() {\n+            if (pos & 1) != 0 {\n+                let key = format!(\"{}\", block.replace(\"/// \", \"\").replace(\"//!\", \"\"));\n+                if !block_lines.contains_key(&key) {\n+                    block_lines.insert(key.clone(), Vec::new());\n+                }\n+                block_lines.get_mut(&key).unwrap().push(line_number);\n+            }\n+            line_number += block.lines().count() as u32 - 1;\n+        }\n+\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -406,7 +436,22 @@ impl Collector {\n             cratename: cratename,\n             opts: opts,\n             maybe_sysroot: maybe_sysroot,\n+            code_blocks: block_lines,\n+            filename: filename,\n+        }\n+    }\n+\n+    fn get_line_from_key(&mut self, key: &String) -> u32 {\n+        let (line, need_removal) = if let Some(l) = self.code_blocks.get_mut(key) {\n+            let need_removal = l.len() > 1;\n+            (l.pop().unwrap_or(1), need_removal)\n+        } else {\n+            return 1;\n+        };\n+        if need_removal {\n+            self.code_blocks.remove(key);\n         }\n+        line\n     }\n \n     pub fn add_test(&mut self, test: String,\n@@ -427,6 +472,8 @@ impl Collector {\n         let opts = self.opts.clone();\n         let maybe_sysroot = self.maybe_sysroot.clone();\n         debug!(\"Creating test {}: {}\", name, test);\n+        let line_number = self.get_line_from_key(&format!(\"{}\\n{}\\n\", original, test));\n+        let filename = self.filename.clone();\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n                 name: testing::DynTestName(name),\n@@ -453,7 +500,9 @@ impl Collector {\n                                 error_codes,\n                                 &opts,\n                                 maybe_sysroot,\n-                                &original)\n+                                &original,\n+                                line_number,\n+                                &filename)\n                     })\n                 } {\n                     Ok(()) => (),"}]}