{"sha": "aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "node_id": "C_kwDOAAsO6NoAKGFjYTFiMWUwYjM4MjBhZTAzNjIyYzM3ZmIxYjMyZTAwNWQ3MzdmYmY", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-14T12:53:04Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-23T10:22:48Z"}, "message": "rustc_interface: Add a new query `pre_configure`\n\nIt partially expands crate attributes before the main expansion pass (without modifying the crate), and the produced preliminary crate attribute list is used for querying a few attributes that are required very early.\n\nCrate-level cfg attributes are then expanded normally during the main expansion pass, like attributes on any other nodes.", "tree": {"sha": "0a055bcc4ff0cd57199f47c733696395e0132d45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a055bcc4ff0cd57199f47c733696395e0132d45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "html_url": "https://github.com/rust-lang/rust/commit/aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f26da39e041b149f77e4b579bc2d38117af41c73", "url": "https://api.github.com/repos/rust-lang/rust/commits/f26da39e041b149f77e4b579bc2d38117af41c73", "html_url": "https://github.com/rust-lang/rust/commit/f26da39e041b149f77e4b579bc2d38117af41c73"}], "stats": {"total": 192, "additions": 108, "deletions": 84}, "files": [{"sha": "6493c6f13d54138ff2dc51830fdd210d4267eacd", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -8,14 +8,20 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::DUMMY_SP;\n use thin_vec::thin_vec;\n \n-pub fn inject(krate: &mut ast::Crate, resolver: &mut dyn ResolverExpand, sess: &Session) {\n+pub fn inject(\n+    krate: &mut ast::Crate,\n+    pre_configured_attrs: &[ast::Attribute],\n+    resolver: &mut dyn ResolverExpand,\n+    sess: &Session,\n+) -> usize {\n+    let orig_num_items = krate.items.len();\n     let edition = sess.parse_sess.edition;\n \n     // the first name in this list is the crate name of the crate with the prelude\n-    let names: &[Symbol] = if attr::contains_name(&krate.attrs, sym::no_core) {\n-        return;\n-    } else if attr::contains_name(&krate.attrs, sym::no_std) {\n-        if attr::contains_name(&krate.attrs, sym::compiler_builtins) {\n+    let names: &[Symbol] = if attr::contains_name(pre_configured_attrs, sym::no_core) {\n+        return 0;\n+    } else if attr::contains_name(pre_configured_attrs, sym::no_std) {\n+        if attr::contains_name(pre_configured_attrs, sym::compiler_builtins) {\n             &[sym::core]\n         } else {\n             &[sym::core, sym::compiler_builtins]\n@@ -84,4 +90,5 @@ pub fn inject(krate: &mut ast::Crate, resolver: &mut dyn ResolverExpand, sess: &\n     );\n \n     krate.items.insert(0, use_item);\n+    krate.items.len() - orig_num_items\n }"}, {"sha": "14d6569271eeb50a6b16411ae8bd3f7b6d21cccf", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -353,7 +353,7 @@ fn run_compiler(\n \n             {\n                 let plugins = queries.register_plugins()?;\n-                let (_, lint_store) = &*plugins.borrow();\n+                let (.., lint_store) = &*plugins.borrow();\n \n                 // Lint plugins are registered; now we can process command line flags.\n                 if sess.opts.describe_lints {"}, {"sha": "d32af10914e59c049716249c061f24b1ffa64472", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -1002,6 +1002,7 @@ pub struct ExpansionData {\n pub struct ExtCtxt<'a> {\n     pub sess: &'a Session,\n     pub ecfg: expand::ExpansionConfig<'a>,\n+    pub num_standard_library_imports: usize,\n     pub reduced_recursion_limit: Option<Limit>,\n     pub root_path: PathBuf,\n     pub resolver: &'a mut dyn ResolverExpand,\n@@ -1030,6 +1031,7 @@ impl<'a> ExtCtxt<'a> {\n         ExtCtxt {\n             sess,\n             ecfg,\n+            num_standard_library_imports: 0,\n             reduced_recursion_limit: None,\n             resolver,\n             lint_store,"}, {"sha": "a78dc0678d5da50c126078ac4d24545ce50be249", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -24,7 +24,6 @@ use rustc_session::Session;\n use rustc_span::edition::{Edition, ALL_EDITIONS};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use thin_vec::ThinVec;\n \n /// A folder that strips out items that do not belong in the current configuration.\n pub struct StripUnconfigured<'a> {\n@@ -37,7 +36,7 @@ pub struct StripUnconfigured<'a> {\n     pub lint_node_id: NodeId,\n }\n \n-fn get_features(sess: &Session, krate_attrs: &[ast::Attribute]) -> Features {\n+pub fn features(sess: &Session, krate_attrs: &[Attribute]) -> Features {\n     fn feature_removed(sess: &Session, span: Span, reason: Option<&str>) {\n         sess.emit_err(FeatureRemoved {\n             span,\n@@ -191,33 +190,16 @@ fn get_features(sess: &Session, krate_attrs: &[ast::Attribute]) -> Features {\n     features\n }\n \n-/// `cfg_attr`-process the crate's attributes and compute the crate's features.\n-pub fn features(sess: &Session, krate: &mut ast::Crate, lint_node_id: NodeId) -> Features {\n-    let mut strip_unconfigured =\n-        StripUnconfigured { sess, features: None, config_tokens: false, lint_node_id };\n-\n-    let mut unconfigured_attrs = krate.attrs.clone();\n-    let diag = &sess.parse_sess.span_diagnostic;\n-    let err_count = diag.err_count();\n-\n-    krate.attrs.flat_map_in_place(|attr| strip_unconfigured.process_cfg_attr(&attr));\n-    if !strip_unconfigured.in_cfg(&krate.attrs) {\n-        // The entire crate is unconfigured.\n-        krate.attrs = ast::AttrVec::new();\n-        krate.items = ThinVec::new();\n-        Features::default()\n-    } else {\n-        let features = get_features(sess, &krate.attrs);\n-        if err_count == diag.err_count() {\n-            // Avoid reconfiguring malformed `cfg_attr`s.\n-            strip_unconfigured.features = Some(&features);\n-            // Run configuration again, this time with features available\n-            // so that we can perform feature-gating.\n-            unconfigured_attrs.flat_map_in_place(|attr| strip_unconfigured.process_cfg_attr(&attr));\n-            strip_unconfigured.in_cfg(&unconfigured_attrs);\n-        }\n-        features\n-    }\n+pub fn pre_configure_attrs(sess: &Session, attrs: &[Attribute]) -> ast::AttrVec {\n+    let strip_unconfigured = StripUnconfigured {\n+        sess,\n+        features: None,\n+        config_tokens: false,\n+        lint_node_id: ast::CRATE_NODE_ID,\n+    };\n+    let attrs: ast::AttrVec =\n+        attrs.iter().flat_map(|attr| strip_unconfigured.process_cfg_attr(attr)).collect();\n+    if strip_unconfigured.in_cfg(&attrs) { attrs } else { ast::AttrVec::new() }\n }\n \n #[macro_export]"}, {"sha": "ec40911545f500fab659171ad0be4897e06ba010", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -1038,6 +1038,9 @@ trait InvocationCollectorNode: HasAttrs + HasNodeId + Sized {\n     ) -> Result<Self::OutputTy, Self> {\n         Ok(noop_flat_map(node, collector))\n     }\n+    fn expand_cfg_false(&mut self, collector: &mut InvocationCollector<'_, '_>, span: Span) {\n+        collector.cx.emit_err(RemoveNodeNotSupported { span, descr: Self::descr() });\n+    }\n }\n \n impl InvocationCollectorNode for P<ast::Item> {\n@@ -1378,6 +1381,11 @@ impl InvocationCollectorNode for ast::Crate {\n     fn noop_visit<V: MutVisitor>(&mut self, visitor: &mut V) {\n         noop_visit_crate(self, visitor)\n     }\n+    fn expand_cfg_false(&mut self, collector: &mut InvocationCollector<'_, '_>, _span: Span) {\n+        self.attrs.clear();\n+        // Standard prelude imports are left in the crate for backward compatibility.\n+        self.items.truncate(collector.cx.num_standard_library_imports);\n+    }\n }\n \n impl InvocationCollectorNode for P<ast::Ty> {\n@@ -1756,7 +1764,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                             continue;\n                         }\n \n-                        self.cx.emit_err(RemoveNodeNotSupported { span, descr: Node::descr() });\n+                        node.expand_cfg_false(self, span);\n                         continue;\n                     }\n                     sym::cfg_attr => {"}, {"sha": "7623c5f7327f84ae0c4a73c932c0738458f2c12e", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -3,7 +3,6 @@ use crate::interface::{Compiler, Result};\n use crate::proc_macro_decls;\n use crate::util;\n \n-use ast::CRATE_NODE_ID;\n use rustc_ast::{self as ast, visit};\n use rustc_borrowck as mir_borrowck;\n use rustc_codegen_ssa::traits::CodegenBackend;\n@@ -76,22 +75,14 @@ pub fn register_plugins<'a>(\n     sess: &'a Session,\n     metadata_loader: &'a dyn MetadataLoader,\n     register_lints: impl Fn(&Session, &mut LintStore),\n-    krate: &mut ast::Crate,\n+    pre_configured_attrs: &[ast::Attribute],\n     crate_name: Symbol,\n ) -> Result<LintStore> {\n-    sess.time(\"attributes_injection\", || {\n-        rustc_builtin_macros::cmdline_attrs::inject(\n-            krate,\n-            &sess.parse_sess,\n-            &sess.opts.unstable_opts.crate_attr,\n-        )\n-    });\n-\n-    let features = rustc_expand::config::features(sess, krate, CRATE_NODE_ID);\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n+    let features = rustc_expand::config::features(sess, pre_configured_attrs);\n     sess.init_features(features);\n \n-    let crate_types = util::collect_crate_types(sess, &krate.attrs);\n+    let crate_types = util::collect_crate_types(sess, pre_configured_attrs);\n     sess.init_crate_types(crate_types);\n \n     let stable_crate_id = StableCrateId::new(\n@@ -117,8 +108,9 @@ pub fn register_plugins<'a>(\n     let mut lint_store = rustc_lint::new_lint_store(sess.enable_internal_lints());\n     register_lints(sess, &mut lint_store);\n \n-    let registrars = sess\n-        .time(\"plugin_loading\", || plugin::load::load_plugins(sess, metadata_loader, &krate.attrs));\n+    let registrars = sess.time(\"plugin_loading\", || {\n+        plugin::load::load_plugins(sess, metadata_loader, pre_configured_attrs)\n+    });\n     sess.time(\"plugin_registration\", || {\n         let mut registry = plugin::Registry { lint_store: &mut lint_store };\n         for registrar in registrars {\n@@ -173,19 +165,29 @@ impl LintStoreExpand for LintStoreExpandImpl<'_> {\n /// harness if one is to be provided, injection of a dependency on the\n /// standard library and prelude, and name resolution.\n #[instrument(level = \"trace\", skip(krate, resolver))]\n-fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>) -> ast::Crate {\n+fn configure_and_expand(\n+    mut krate: ast::Crate,\n+    pre_configured_attrs: &[ast::Attribute],\n+    resolver: &mut Resolver<'_, '_>,\n+) -> ast::Crate {\n     let tcx = resolver.tcx();\n     let sess = tcx.sess;\n     let lint_store = unerased_lint_store(tcx);\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n-    pre_expansion_lint(sess, lint_store, tcx.registered_tools(()), &krate, crate_name);\n+    let lint_check_node = (&krate, pre_configured_attrs);\n+    pre_expansion_lint(sess, lint_store, tcx.registered_tools(()), lint_check_node, crate_name);\n     rustc_builtin_macros::register_builtin_macros(resolver);\n \n-    sess.time(\"crate_injection\", || {\n-        rustc_builtin_macros::standard_library_imports::inject(&mut krate, resolver, sess)\n+    let num_standard_library_imports = sess.time(\"crate_injection\", || {\n+        rustc_builtin_macros::standard_library_imports::inject(\n+            &mut krate,\n+            pre_configured_attrs,\n+            resolver,\n+            sess,\n+        )\n     });\n \n-    util::check_attr_crate_type(sess, &krate.attrs, &mut resolver.lint_buffer());\n+    util::check_attr_crate_type(sess, pre_configured_attrs, &mut resolver.lint_buffer());\n \n     // Expand all macros\n     krate = sess.time(\"macro_expand_crate\", || {\n@@ -222,7 +224,7 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n \n         // Create the config for macro expansion\n         let features = sess.features_untracked();\n-        let recursion_limit = get_recursion_limit(&krate.attrs, sess);\n+        let recursion_limit = get_recursion_limit(pre_configured_attrs, sess);\n         let cfg = rustc_expand::expand::ExpansionConfig {\n             features: Some(features),\n             recursion_limit,\n@@ -235,6 +237,7 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n \n         let lint_store = LintStoreExpandImpl(lint_store);\n         let mut ecx = ExtCtxt::new(sess, cfg, resolver, Some(&lint_store));\n+        ecx.num_standard_library_imports = num_standard_library_imports;\n         // Expand macros now!\n         let krate = sess.time(\"expand_crate\", || ecx.monotonic_expander().expand_crate(krate));\n \n@@ -356,7 +359,7 @@ fn early_lint_checks(tcx: TyCtxt<'_>, (): ()) {\n         tcx.registered_tools(()),\n         Some(lint_buffer),\n         rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n-        &**krate,\n+        (&**krate, &*krate.attrs),\n     )\n }\n \n@@ -557,9 +560,9 @@ fn resolver_for_lowering<'tcx>(\n ) -> &'tcx Steal<(ty::ResolverAstLowering, Lrc<ast::Crate>)> {\n     let arenas = Resolver::arenas();\n     let _ = tcx.registered_tools(()); // Uses `crate_for_resolver`.\n-    let krate = tcx.crate_for_resolver(()).steal();\n-    let mut resolver = Resolver::new(tcx, &krate, &arenas);\n-    let krate = configure_and_expand(krate, &mut resolver);\n+    let (krate, pre_configured_attrs) = tcx.crate_for_resolver(()).steal();\n+    let mut resolver = Resolver::new(tcx, &pre_configured_attrs, krate.spans.inner_span, &arenas);\n+    let krate = configure_and_expand(krate, &pre_configured_attrs, &mut resolver);\n \n     // Make sure we don't mutate the cstore from here on.\n     tcx.untracked().cstore.leak();"}, {"sha": "d2293780836d559ece0df9734940d5a0d2c83a67", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -88,8 +88,9 @@ pub struct Queries<'tcx> {\n \n     dep_graph_future: Query<Option<DepGraphFuture>>,\n     parse: Query<ast::Crate>,\n+    pre_configure: Query<(ast::Crate, ast::AttrVec)>,\n     crate_name: Query<Symbol>,\n-    register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n+    register_plugins: Query<(ast::Crate, ast::AttrVec, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n     // This just points to what's in `gcx_cell`.\n     gcx: Query<&'tcx GlobalCtxt<'tcx>>,\n@@ -106,6 +107,7 @@ impl<'tcx> Queries<'tcx> {\n             hir_arena: WorkerLocal::new(|_| rustc_hir::Arena::default()),\n             dep_graph_future: Default::default(),\n             parse: Default::default(),\n+            pre_configure: Default::default(),\n             crate_name: Default::default(),\n             register_plugins: Default::default(),\n             dep_graph: Default::default(),\n@@ -133,17 +135,36 @@ impl<'tcx> Queries<'tcx> {\n             .compute(|| passes::parse(self.session()).map_err(|mut parse_error| parse_error.emit()))\n     }\n \n-    pub fn register_plugins(&self) -> Result<QueryResult<'_, (ast::Crate, Lrc<LintStore>)>> {\n+    pub fn pre_configure(&self) -> Result<QueryResult<'_, (ast::Crate, ast::AttrVec)>> {\n+        self.pre_configure.compute(|| {\n+            let mut krate = self.parse()?.steal();\n+\n+            let sess = self.session();\n+            rustc_builtin_macros::cmdline_attrs::inject(\n+                &mut krate,\n+                &sess.parse_sess,\n+                &sess.opts.unstable_opts.crate_attr,\n+            );\n+\n+            let pre_configured_attrs =\n+                rustc_expand::config::pre_configure_attrs(sess, &krate.attrs);\n+            Ok((krate, pre_configured_attrs))\n+        })\n+    }\n+\n+    pub fn register_plugins(\n+        &self,\n+    ) -> Result<QueryResult<'_, (ast::Crate, ast::AttrVec, Lrc<LintStore>)>> {\n         self.register_plugins.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n-            let mut krate = self.parse()?.steal();\n+            let (krate, pre_configured_attrs) = self.pre_configure()?.steal();\n \n             let empty: &(dyn Fn(&Session, &mut LintStore) + Sync + Send) = &|_, _| {};\n             let lint_store = passes::register_plugins(\n                 self.session(),\n                 &*self.codegen_backend().metadata_loader(),\n                 self.compiler.register_lints.as_deref().unwrap_or_else(|| empty),\n-                &mut krate,\n+                &pre_configured_attrs,\n                 crate_name,\n             )?;\n \n@@ -154,17 +175,17 @@ impl<'tcx> Queries<'tcx> {\n             // called, which happens within passes::register_plugins().\n             self.dep_graph_future().ok();\n \n-            Ok((krate, Lrc::new(lint_store)))\n+            Ok((krate, pre_configured_attrs, Lrc::new(lint_store)))\n         })\n     }\n \n     fn crate_name(&self) -> Result<QueryResult<'_, Symbol>> {\n         self.crate_name.compute(|| {\n             Ok({\n-                let parse_result = self.parse()?;\n-                let krate = parse_result.borrow();\n+                let pre_configure_result = self.pre_configure()?;\n+                let (_, pre_configured_attrs) = &*pre_configure_result.borrow();\n                 // parse `#[crate_name]` even if `--crate-name` was passed, to make sure it matches.\n-                find_crate_name(self.session(), &krate.attrs)\n+                find_crate_name(self.session(), pre_configured_attrs)\n             })\n         })\n     }\n@@ -188,7 +209,7 @@ impl<'tcx> Queries<'tcx> {\n     pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, &'tcx GlobalCtxt<'tcx>>> {\n         self.gcx.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n-            let (krate, lint_store) = self.register_plugins()?.steal();\n+            let (krate, pre_configured_attrs, lint_store) = self.register_plugins()?.steal();\n \n             let sess = self.session();\n \n@@ -215,7 +236,7 @@ impl<'tcx> Queries<'tcx> {\n                 feed.crate_name(crate_name);\n \n                 let feed = tcx.feed_unit_query();\n-                feed.crate_for_resolver(tcx.arena.alloc(Steal::new(krate)));\n+                feed.crate_for_resolver(tcx.arena.alloc(Steal::new((krate, pre_configured_attrs))));\n                 feed.metadata_loader(\n                     tcx.arena.alloc(Steal::new(self.codegen_backend().metadata_loader())),\n                 );"}, {"sha": "9b0d8d6c0723b7bbc173736ee71ea6c283f033df", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -341,23 +341,23 @@ pub trait EarlyCheckNode<'a>: Copy {\n         'a: 'b;\n }\n \n-impl<'a> EarlyCheckNode<'a> for &'a ast::Crate {\n+impl<'a> EarlyCheckNode<'a> for (&'a ast::Crate, &'a [ast::Attribute]) {\n     fn id(self) -> ast::NodeId {\n         ast::CRATE_NODE_ID\n     }\n     fn attrs<'b>(self) -> &'b [ast::Attribute]\n     where\n         'a: 'b,\n     {\n-        &self.attrs\n+        &self.1\n     }\n     fn check<'b, T: EarlyLintPass>(self, cx: &mut EarlyContextAndPass<'b, T>)\n     where\n         'a: 'b,\n     {\n-        lint_callback!(cx, check_crate, self);\n-        ast_visit::walk_crate(cx, self);\n-        lint_callback!(cx, check_crate_post, self);\n+        lint_callback!(cx, check_crate, self.0);\n+        ast_visit::walk_crate(cx, self.0);\n+        lint_callback!(cx, check_crate_post, self.0);\n     }\n }\n "}, {"sha": "9f16ecbdaa9334373dbddfc7eace93d48b490a5d", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -36,7 +36,7 @@ macro_rules! arena_types {\n             )>,\n             [] output_filenames: std::sync::Arc<rustc_session::config::OutputFilenames>,\n             [] metadata_loader: rustc_data_structures::steal::Steal<Box<rustc_session::cstore::MetadataLoaderDyn>>,\n-            [] crate_for_resolver: rustc_data_structures::steal::Steal<rustc_ast::ast::Crate>,\n+            [] crate_for_resolver: rustc_data_structures::steal::Steal<(rustc_ast::Crate, rustc_ast::AttrVec)>,\n             [] resolutions: rustc_middle::ty::ResolverGlobalCtxt,\n             [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult,\n             [decode] code_region: rustc_middle::mir::coverage::CodeRegion,"}, {"sha": "9203dd59a7e6382f78413c853605cbbd227af3a8", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -2116,7 +2116,7 @@ rustc_queries! {\n         desc { \"raw operations for metadata file access\" }\n     }\n \n-    query crate_for_resolver((): ()) -> &'tcx Steal<rustc_ast::ast::Crate> {\n+    query crate_for_resolver((): ()) -> &'tcx Steal<(rustc_ast::Crate, rustc_ast::AttrVec)> {\n         feedable\n         no_hash\n         desc { \"the ast before macro expansion and name resolution\" }"}, {"sha": "bcc83c5b4ce5c61cb8f25fbc432ffa1af45cd653", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -1180,7 +1180,8 @@ impl<'tcx> Resolver<'_, 'tcx> {\n impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n-        krate: &Crate,\n+        attrs: &[ast::Attribute],\n+        crate_span: Span,\n         arenas: &'a ResolverArenas<'a>,\n     ) -> Resolver<'a, 'tcx> {\n         let root_def_id = CRATE_DEF_ID.to_def_id();\n@@ -1189,8 +1190,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             None,\n             ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),\n             ExpnId::root(),\n-            krate.spans.inner_span,\n-            attr::contains_name(&krate.attrs, sym::no_implicit_prelude),\n+            crate_span,\n+            attr::contains_name(attrs, sym::no_implicit_prelude),\n             &mut module_map,\n         );\n         let empty_module = arenas.new_module(\n@@ -1222,9 +1223,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             .map(|(name, _)| (Ident::from_str(name), Default::default()))\n             .collect();\n \n-        if !attr::contains_name(&krate.attrs, sym::no_core) {\n+        if !attr::contains_name(attrs, sym::no_core) {\n             extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());\n-            if !attr::contains_name(&krate.attrs, sym::no_std) {\n+            if !attr::contains_name(attrs, sym::no_std) {\n                 extern_prelude.insert(Ident::with_dummy_span(sym::std), Default::default());\n             }\n         }"}, {"sha": "48707d37a101cd38971673889d9b1577b38a9476", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aca1b1e0b3820ae03622c37fb1b32e005d737fbf/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=aca1b1e0b3820ae03622c37fb1b32e005d737fbf", "patch": "@@ -112,8 +112,8 @@ fn fast_print_path(path: &ast::Path) -> Symbol {\n \n pub(crate) fn registered_tools(tcx: TyCtxt<'_>, (): ()) -> RegisteredTools {\n     let mut registered_tools = RegisteredTools::default();\n-    let krate = tcx.crate_for_resolver(()).borrow();\n-    for attr in attr::filter_by_name(&krate.attrs, sym::register_tool) {\n+    let (_, pre_configured_attrs) = &*tcx.crate_for_resolver(()).borrow();\n+    for attr in attr::filter_by_name(pre_configured_attrs, sym::register_tool) {\n         for nested_meta in attr.meta_item_list().unwrap_or_default() {\n             match nested_meta.ident() {\n                 Some(ident) => {"}]}