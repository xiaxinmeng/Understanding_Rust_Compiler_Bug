{"sha": "0f06320c2491acc8cf9e61c976041785acb06aca", "node_id": "C_kwDOAAsO6NoAKDBmMDYzMjBjMjQ5MWFjYzhjZjllNjFjOTc2MDQxNzg1YWNiMDZhY2E", "commit": {"author": {"name": "Luis Cardoso", "email": "61982523+LuisCardosoOliveira@users.noreply.github.com", "date": "2022-09-02T17:29:52Z"}, "committer": {"name": "Luis Cardoso", "email": "61982523+LuisCardosoOliveira@users.noreply.github.com", "date": "2022-09-08T06:30:57Z"}, "message": "translations(rustc_session): migrate TargetDataLayout::parse", "tree": {"sha": "de50cca4153ecb4a61f211c4156b1df4d97d2709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de50cca4153ecb4a61f211c4156b1df4d97d2709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f06320c2491acc8cf9e61c976041785acb06aca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f06320c2491acc8cf9e61c976041785acb06aca", "html_url": "https://github.com/rust-lang/rust/commit/0f06320c2491acc8cf9e61c976041785acb06aca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f06320c2491acc8cf9e61c976041785acb06aca/comments", "author": {"login": "LuisCardosoOliveira", "id": 61982523, "node_id": "MDQ6VXNlcjYxOTgyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/61982523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuisCardosoOliveira", "html_url": "https://github.com/LuisCardosoOliveira", "followers_url": "https://api.github.com/users/LuisCardosoOliveira/followers", "following_url": "https://api.github.com/users/LuisCardosoOliveira/following{/other_user}", "gists_url": "https://api.github.com/users/LuisCardosoOliveira/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuisCardosoOliveira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuisCardosoOliveira/subscriptions", "organizations_url": "https://api.github.com/users/LuisCardosoOliveira/orgs", "repos_url": "https://api.github.com/users/LuisCardosoOliveira/repos", "events_url": "https://api.github.com/users/LuisCardosoOliveira/events{/privacy}", "received_events_url": "https://api.github.com/users/LuisCardosoOliveira/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LuisCardosoOliveira", "id": 61982523, "node_id": "MDQ6VXNlcjYxOTgyNTIz", "avatar_url": "https://avatars.githubusercontent.com/u/61982523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LuisCardosoOliveira", "html_url": "https://github.com/LuisCardosoOliveira", "followers_url": "https://api.github.com/users/LuisCardosoOliveira/followers", "following_url": "https://api.github.com/users/LuisCardosoOliveira/following{/other_user}", "gists_url": "https://api.github.com/users/LuisCardosoOliveira/gists{/gist_id}", "starred_url": "https://api.github.com/users/LuisCardosoOliveira/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LuisCardosoOliveira/subscriptions", "organizations_url": "https://api.github.com/users/LuisCardosoOliveira/orgs", "repos_url": "https://api.github.com/users/LuisCardosoOliveira/repos", "events_url": "https://api.github.com/users/LuisCardosoOliveira/events{/privacy}", "received_events_url": "https://api.github.com/users/LuisCardosoOliveira/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60b49581c4bbbb94967f5ac170bf6152e4eba5cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/60b49581c4bbbb94967f5ac170bf6152e4eba5cf", "html_url": "https://github.com/rust-lang/rust/commit/60b49581c4bbbb94967f5ac170bf6152e4eba5cf"}], "stats": {"total": 143, "additions": 111, "deletions": 32}, "files": [{"sha": "c5d23f2925011457b73e5afe5fa5bfd1a158f87c", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f06320c2491acc8cf9e61c976041785acb06aca/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0f06320c2491acc8cf9e61c976041785acb06aca/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=0f06320c2491acc8cf9e61c976041785acb06aca", "patch": "@@ -40,3 +40,17 @@ session_sanitizer_cfi_enabled = `-Zsanitizer=cfi` requires `-Clto`\n session_unstable_virtual_function_elimination = `-Zvirtual-function-elimination` requires `-Clto`\n \n session_unsupported_dwarf_version = requested DWARF version {$dwarf_version} is greater than 5\n+\n+session_target_invalid_address_space = invalid address space `{$addr_space}` for `{$cause}` in \"data-layout\": {$err}\n+\n+session_target_invalid_bits = invalid {$kind} `{$bit}` for `{$cause}` in \"data-layout\": {$err}\n+\n+session_target_missing_alignment = missing alignment for `{$cause}` in \"data-layout\"\n+\n+session_target_invalid_alignment = invalid alignment for `{$cause}` in \"data-layout\": {$err}\n+\n+session_target_inconsistent_architecture = inconsistent target specification: \"data-layout\" claims architecture is {$dl}-endian, while \"target-endian\" is `{$target}`\n+\n+session_target_inconsistent_pointer_width = inconsistent target specification: \"data-layout\" claims pointers are {$pointer_size}-bit, while \"target-pointer-width\" is `{$target}`\n+\n+session_target_invalid_bits_size = {$err}"}, {"sha": "b88292b893cea7f58dd79254167986f021f6b9f3", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f06320c2491acc8cf9e61c976041785acb06aca/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f06320c2491acc8cf9e61c976041785acb06aca/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=0f06320c2491acc8cf9e61c976041785acb06aca", "patch": "@@ -14,6 +14,7 @@ use rustc_target::spec::PanicStrategy;\n use std::borrow::Cow;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n+use std::num::ParseIntError;\n use std::path::{Path, PathBuf};\n \n /// Error type for `Diagnostic`'s `suggestions` field, indicating that\n@@ -91,6 +92,7 @@ into_diagnostic_arg_using_display!(\n     Edition,\n     Ident,\n     MacroRulesNormalizedIdent,\n+    ParseIntError,\n );\n \n impl IntoDiagnosticArg for bool {"}, {"sha": "583f682f568c3348910f4a126c86682e2a182b4f", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f06320c2491acc8cf9e61c976041785acb06aca/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f06320c2491acc8cf9e61c976041785acb06aca/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0f06320c2491acc8cf9e61c976041785acb06aca", "patch": "@@ -52,6 +52,7 @@ use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{CrateType, OutputFilenames};\n use rustc_session::cstore::CrateStoreDyn;\n+use rustc_session::errors::TargetDataLayoutParseError;\n use rustc_session::lint::{Level, Lint};\n use rustc_session::Limit;\n use rustc_session::Session;\n@@ -1251,7 +1252,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         output_filenames: OutputFilenames,\n     ) -> GlobalCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {\n-            s.fatal(&err);\n+            s.emit_fatal(TargetDataLayoutParseError { err });\n         });\n         let interners = CtxtInterners::new(arena);\n         let common_types = CommonTypes::new("}, {"sha": "226e09589276fdc58eafc70f2cd87edabd65f274", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0f06320c2491acc8cf9e61c976041785acb06aca/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f06320c2491acc8cf9e61c976041785acb06aca/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=0f06320c2491acc8cf9e61c976041785acb06aca", "patch": "@@ -1,10 +1,12 @@\n use std::num::NonZeroU32;\n \n use crate::cgu_reuse_tracker::CguReuse;\n+use crate::parse::ParseSess;\n use crate::{self as rustc_session};\n-use rustc_errors::MultiSpan;\n+use rustc_errors::{fluent, MultiSpan};\n use rustc_macros::SessionDiagnostic;\n use rustc_span::{Span, Symbol};\n+use rustc_target::abi::TargetDataLayoutErrors;\n \n #[derive(SessionDiagnostic)]\n #[diag(session::incorrect_cgu_reuse_type)]\n@@ -44,10 +46,59 @@ pub struct FeatureDiagnosticHelp {\n     pub feature: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(session::target_data_layout_parse_error)]\n-pub struct TargetDataLayoutParseError {\n-    pub err: String,\n+pub struct TargetDataLayoutParseError<'a> {\n+    pub err: TargetDataLayoutErrors<'a>,\n+}\n+\n+impl crate::SessionDiagnostic<'_, !> for TargetDataLayoutParseError<'_> {\n+    fn into_diagnostic(self, sess: &ParseSess) -> rustc_errors::DiagnosticBuilder<'_, !> {\n+        let mut diag;\n+        match self.err {\n+            TargetDataLayoutErrors::InvalidAddressSpace { addr_space, err, cause } => {\n+                diag = sess.struct_fatal(fluent::session::target_invalid_address_space);\n+                diag.set_arg(\"addr_space\", addr_space);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidBits { kind, bit, cause, err } => {\n+                diag = sess.struct_fatal(fluent::session::target_invalid_bits);\n+                diag.set_arg(\"kind\", kind);\n+                diag.set_arg(\"bit\", bit);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::MissingAlignment { cause } => {\n+                diag = sess.struct_fatal(fluent::session::target_missing_alignment);\n+                diag.set_arg(\"cause\", cause);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidAlignment { cause, err } => {\n+                diag = sess.struct_fatal(fluent::session::target_invalid_alignment);\n+                diag.set_arg(\"cause\", cause);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InconsistentTargetArchitecture { dl, target } => {\n+                diag = sess.struct_fatal(fluent::session::target_inconsistent_architecture);\n+                diag.set_arg(\"dl\", dl);\n+                diag.set_arg(\"target\", target);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InconsistentTargetPointerWidth { pointer_size, target } => {\n+                diag = sess.struct_fatal(fluent::session::target_inconsistent_pointer_width);\n+                diag.set_arg(\"pointer_size\", pointer_size);\n+                diag.set_arg(\"target\", target);\n+                diag\n+            }\n+            TargetDataLayoutErrors::InvalidBitsSize { err } => {\n+                diag = sess.struct_fatal(fluent::session::target_invalid_bits_size);\n+                diag.set_arg(\"err\", err);\n+                diag\n+            }\n+        }\n+    }\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "ec334e5887ab765bfcacababdd2823bfe026a7f1", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0f06320c2491acc8cf9e61c976041785acb06aca/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f06320c2491acc8cf9e61c976041785acb06aca/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=0f06320c2491acc8cf9e61c976041785acb06aca", "patch": "@@ -7,7 +7,7 @@ use crate::spec::Target;\n use std::convert::{TryFrom, TryInto};\n use std::fmt;\n use std::iter::Step;\n-use std::num::NonZeroUsize;\n+use std::num::{NonZeroUsize, ParseIntError};\n use std::ops::{Add, AddAssign, Deref, Mul, RangeInclusive, Sub};\n use std::str::FromStr;\n \n@@ -69,34 +69,46 @@ impl Default for TargetDataLayout {\n     }\n }\n \n+pub enum TargetDataLayoutErrors<'a> {\n+    InvalidAddressSpace { addr_space: &'a str, cause: &'a str, err: ParseIntError },\n+    InvalidBits { kind: &'a str, bit: &'a str, cause: &'a str, err: ParseIntError },\n+    MissingAlignment { cause: &'a str },\n+    InvalidAlignment { cause: &'a str, err: String },\n+    InconsistentTargetArchitecture { dl: &'a str, target: &'a str },\n+    InconsistentTargetPointerWidth { pointer_size: u64, target: u32 },\n+    InvalidBitsSize { err: String },\n+}\n+\n impl TargetDataLayout {\n-    pub fn parse(target: &Target) -> Result<TargetDataLayout, String> {\n+    pub fn parse<'a>(target: &'a Target) -> Result<TargetDataLayout, TargetDataLayoutErrors<'a>> {\n         // Parse an address space index from a string.\n-        let parse_address_space = |s: &str, cause: &str| {\n+        let parse_address_space = |s: &'a str, cause: &'a str| {\n             s.parse::<u32>().map(AddressSpace).map_err(|err| {\n-                format!(\"invalid address space `{}` for `{}` in \\\"data-layout\\\": {}\", s, cause, err)\n+                TargetDataLayoutErrors::InvalidAddressSpace { addr_space: s, cause, err }\n             })\n         };\n \n         // Parse a bit count from a string.\n-        let parse_bits = |s: &str, kind: &str, cause: &str| {\n-            s.parse::<u64>().map_err(|err| {\n-                format!(\"invalid {} `{}` for `{}` in \\\"data-layout\\\": {}\", kind, s, cause, err)\n+        let parse_bits = |s: &'a str, kind: &'a str, cause: &'a str| {\n+            s.parse::<u64>().map_err(|err| TargetDataLayoutErrors::InvalidBits {\n+                kind,\n+                bit: s,\n+                cause,\n+                err,\n             })\n         };\n \n         // Parse a size string.\n-        let size = |s: &str, cause: &str| parse_bits(s, \"size\", cause).map(Size::from_bits);\n+        let size = |s: &'a str, cause: &'a str| parse_bits(s, \"size\", cause).map(Size::from_bits);\n \n         // Parse an alignment string.\n-        let align = |s: &[&str], cause: &str| {\n+        let align = |s: &[&'a str], cause: &'a str| {\n             if s.is_empty() {\n-                return Err(format!(\"missing alignment for `{}` in \\\"data-layout\\\"\", cause));\n+                return Err(TargetDataLayoutErrors::MissingAlignment { cause });\n             }\n             let align_from_bits = |bits| {\n-                Align::from_bits(bits).map_err(|err| {\n-                    format!(\"invalid alignment for `{}` in \\\"data-layout\\\": {}\", cause, err)\n-                })\n+                Align::from_bits(bits)\n+                    .map_err(|err| TargetDataLayoutErrors::InvalidAlignment { cause, err })\n             };\n             let abi = parse_bits(s[0], \"alignment\", cause)?;\n             let pref = s.get(1).map_or(Ok(abi), |pref| parse_bits(pref, \"alignment\", cause))?;\n@@ -158,25 +170,24 @@ impl TargetDataLayout {\n \n         // Perform consistency checks against the Target information.\n         if dl.endian != target.endian {\n-            return Err(format!(\n-                \"inconsistent target specification: \\\"data-layout\\\" claims \\\n-                 architecture is {}-endian, while \\\"target-endian\\\" is `{}`\",\n-                dl.endian.as_str(),\n-                target.endian.as_str(),\n-            ));\n+            return Err(TargetDataLayoutErrors::InconsistentTargetArchitecture {\n+                dl: dl.endian.as_str(),\n+                target: target.endian.as_str(),\n+            });\n         }\n \n         let target_pointer_width: u64 = target.pointer_width.into();\n         if dl.pointer_size.bits() != target_pointer_width {\n-            return Err(format!(\n-                \"inconsistent target specification: \\\"data-layout\\\" claims \\\n-                 pointers are {}-bit, while \\\"target-pointer-width\\\" is `{}`\",\n-                dl.pointer_size.bits(),\n-                target.pointer_width\n-            ));\n+            return Err(TargetDataLayoutErrors::InconsistentTargetPointerWidth {\n+                pointer_size: dl.pointer_size.bits(),\n+                target: target.pointer_width,\n+            });\n         }\n \n-        dl.c_enum_min_size = Integer::from_size(Size::from_bits(target.c_enum_min_bits))?;\n+        dl.c_enum_min_size = match Integer::from_size(Size::from_bits(target.c_enum_min_bits)) {\n+            Ok(bits) => bits,\n+            Err(err) => return Err(TargetDataLayoutErrors::InvalidBitsSize { err }),\n+        };\n \n         Ok(dl)\n     }"}]}