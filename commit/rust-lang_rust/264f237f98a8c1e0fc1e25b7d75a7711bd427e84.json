{"sha": "264f237f98a8c1e0fc1e25b7d75a7711bd427e84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NGYyMzdmOThhOGMxZTBmYzFlMjViN2Q3NWE3NzExYmQ0MjdlODQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-14T19:33:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-21T21:26:53Z"}, "message": "make `reachable_set` ref-counted\n\nOnce it is computed, no need to deep clone the set.", "tree": {"sha": "e827db44624898b48c44c1dfa664d71a9f286ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e827db44624898b48c44c1dfa664d71a9f286ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/264f237f98a8c1e0fc1e25b7d75a7711bd427e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/264f237f98a8c1e0fc1e25b7d75a7711bd427e84", "html_url": "https://github.com/rust-lang/rust/commit/264f237f98a8c1e0fc1e25b7d75a7711bd427e84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/264f237f98a8c1e0fc1e25b7d75a7711bd427e84/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c446cb086bfaf098730b310d386853adf7f5240a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c446cb086bfaf098730b310d386853adf7f5240a", "html_url": "https://github.com/rust-lang/rust/commit/c446cb086bfaf098730b310d386853adf7f5240a"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "be4ec16cd63aab3038176482046aa024893b9564", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/264f237f98a8c1e0fc1e25b7d75a7711bd427e84/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264f237f98a8c1e0fc1e25b7d75a7711bd427e84/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=264f237f98a8c1e0fc1e25b7d75a7711bd427e84", "patch": "@@ -18,6 +18,7 @@\n use hir::map as hir_map;\n use hir::def::Def;\n use hir::def_id::{DefId, CrateNum};\n+use std::rc::Rc;\n use ty::{self, TyCtxt};\n use ty::maps::Providers;\n use middle::privacy;\n@@ -362,11 +363,11 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n     }\n }\n \n-pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> NodeSet {\n+pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Rc<NodeSet> {\n     ty::queries::reachable_set::get(tcx, DUMMY_SP, LOCAL_CRATE)\n }\n \n-fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) -> NodeSet {\n+fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) -> Rc<NodeSet> {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n@@ -411,7 +412,7 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     reachable_context.propagate();\n \n     // Return the set of reachable symbols.\n-    reachable_context.reachable_symbols\n+    Rc::new(reachable_context.reachable_symbols)\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "648923d6f04e581e7c66988dfe0da9fb38164e9c", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/264f237f98a8c1e0fc1e25b7d75a7711bd427e84/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264f237f98a8c1e0fc1e25b7d75a7711bd427e84/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=264f237f98a8c1e0fc1e25b7d75a7711bd427e84", "patch": "@@ -451,7 +451,7 @@ define_maps! { <'tcx>\n     /// Performs the privacy check and computes \"access levels\".\n     pub privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Rc<AccessLevels>,\n \n-    pub reachable_set: reachability_dep_node(CrateNum) -> NodeSet,\n+    pub reachable_set: reachability_dep_node(CrateNum) -> Rc<NodeSet>,\n \n     pub mir_shims: mir_shim(ty::InstanceDef<'tcx>) -> &'tcx RefCell<mir::Mir<'tcx>>\n }"}, {"sha": "2507941aacafbeb1ae6135d2ed6e24346217b25b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/264f237f98a8c1e0fc1e25b7d75a7711bd427e84/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264f237f98a8c1e0fc1e25b7d75a7711bd427e84/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=264f237f98a8c1e0fc1e25b7d75a7711bd427e84", "patch": "@@ -114,7 +114,7 @@ mod sty;\n #[derive(Clone)]\n pub struct CrateAnalysis {\n     pub access_levels: Rc<AccessLevels>,\n-    pub reachable: NodeSet,\n+    pub reachable: Rc<NodeSet>,\n     pub name: String,\n     pub glob_map: Option<hir::GlobMap>,\n }"}, {"sha": "6c0f6049e5026a3589e0dcbb4f8fbcd7dbe1087e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/264f237f98a8c1e0fc1e25b7d75a7711bd427e84/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264f237f98a8c1e0fc1e25b7d75a7711bd427e84/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=264f237f98a8c1e0fc1e25b7d75a7711bd427e84", "patch": "@@ -810,7 +810,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n         defs: resolver.definitions,\n         analysis: ty::CrateAnalysis {\n             access_levels: Rc::new(AccessLevels::default()),\n-            reachable: NodeSet(),\n+            reachable: Rc::new(NodeSet()),\n             name: crate_name.to_string(),\n             glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n         },"}, {"sha": "ba119bd9ef069b01be558592183d795bacca7e73", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/264f237f98a8c1e0fc1e25b7d75a7711bd427e84/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/264f237f98a8c1e0fc1e25b7d75a7711bd427e84/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=264f237f98a8c1e0fc1e25b7d75a7711bd427e84", "patch": "@@ -1012,8 +1012,8 @@ fn iter_functions(llmod: llvm::ModuleRef) -> ValueIter {\n ///\n /// This list is later used by linkers to determine the set of symbols needed to\n /// be exposed from a dynamic library and it's also encoded into the metadata.\n-pub fn find_exported_symbols(tcx: TyCtxt, reachable: NodeSet) -> NodeSet {\n-    reachable.into_iter().filter(|&id| {\n+pub fn find_exported_symbols(tcx: TyCtxt, reachable: &NodeSet) -> NodeSet {\n+    reachable.iter().cloned().filter(|&id| {\n         // Next, we want to ignore some FFI functions that are not exposed from\n         // this crate. Reachable FFI functions can be lumped into two\n         // categories:\n@@ -1065,7 +1065,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let krate = tcx.hir.krate();\n \n     let ty::CrateAnalysis { reachable, .. } = analysis;\n-    let exported_symbols = find_exported_symbols(tcx, reachable);\n+    let exported_symbols = find_exported_symbols(tcx, &reachable);\n \n     let check_overflow = tcx.sess.overflow_checks();\n "}]}