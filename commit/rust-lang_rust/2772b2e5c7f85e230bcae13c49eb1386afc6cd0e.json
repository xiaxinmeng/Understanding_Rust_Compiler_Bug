{"sha": "2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NzJiMmU1YzdmODVlMjMwYmNhZTEzYzQ5ZWIxMzg2YWZjNmNkMGU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-07T00:14:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-07T19:23:43Z"}, "message": "syntax: Make match arm parsing more restrictive again\n\nRequire comma separators for all expression types except the plain block", "tree": {"sha": "6161076f339dc2adeffcfbc8bcb6e86882b7b16d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6161076f339dc2adeffcfbc8bcb6e86882b7b16d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "html_url": "https://github.com/rust-lang/rust/commit/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abf4421e7c2fce4e768eb20c126989501081f4f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/abf4421e7c2fce4e768eb20c126989501081f4f9", "html_url": "https://github.com/rust-lang/rust/commit/abf4421e7c2fce4e768eb20c126989501081f4f9"}], "stats": {"total": 263, "additions": 107, "deletions": 156}, "files": [{"sha": "0d96e029fb79718ee292b0afedcd54e5ae5d7cca", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -30,18 +30,18 @@ impl private_methods<T> for dlist_node<T> {\n             some(neighbour) => match neighbour.prev {\n               some(me) => if !box::ptr_eq(*self, *me) {\n                   fail ~\"Asymmetric next-link in dlist node.\"\n-              }\n+              },\n               none => fail ~\"One-way next-link in dlist node.\"\n-            }\n+            },\n             none => ()\n         }\n         match self.prev {\n             some(neighbour) => match neighbour.next {\n               some(me) => if !box::ptr_eq(*me, *self) {\n                   fail ~\"Asymmetric prev-link in dlist node.\"\n-              }\n+              },\n               none => fail ~\"One-way prev-link in dlist node.\"\n-            }\n+            },\n             none => ()\n         }\n     }"}, {"sha": "516b3f3c9292aa5f3e11fbc2f2d744b8686395c2", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -445,7 +445,7 @@ fn homedir() -> option<path> {\n           some(p)\n         } else {\n           secondary()\n-        }\n+        },\n         none => secondary()\n     };\n "}, {"sha": "9bdff8292640c8737f8a4ce893e9800ade15412b", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -425,7 +425,7 @@ fn try_recv<T: send, Tbuffer: send>(-p: recv_packet_buffered<T, Tbuffer>)\n           }\n           blocked => if first {\n             fail ~\"blocking on already blocked packet\"\n-          }\n+          },\n           full => {\n             let mut payload = none;\n             payload <-> p.payload;\n@@ -717,7 +717,7 @@ struct send_packet_buffered<T: send, Tbuffer: send> {\n             let header = ptr::addr_of(packet.header);\n             //forget(packet);\n             header\n-          }\n+          },\n           none => fail ~\"packet already consumed\"\n         }\n     }\n@@ -778,7 +778,7 @@ struct recv_packet_buffered<T: send, Tbuffer: send> : selectable {\n             let header = ptr::addr_of(packet.header);\n             //forget(packet);\n             header\n-          }\n+          },\n           none => fail ~\"packet already consumed\"\n         }\n     }"}, {"sha": "e865bac41ed40d66d69c29bc0eeb22368cbf1354", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -118,7 +118,7 @@ mod linear {\n                 match buckets[i] {\n                   some(bkt) => if bkt.hash == hash && self.eqfn(k, &bkt.key) {\n                     return found_entry(i);\n-                  }\n+                  },\n                   none => return found_hole(i)\n                 }\n             };"}, {"sha": "b0189139f42469f5a28ea8528fc83849ba094805", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -186,9 +186,9 @@ class bitv {\n                   intersect  => s.intersect(s1),\n                   assign     => s.become(s1),\n                   difference => s.difference(s1)\n-                }\n+                },\n                 big(s1) => self.die()\n-              }\n+              },\n               big(s) => match other.rep {\n                 small(_) => self.die(),\n                 big(s1) => match op {\n@@ -282,7 +282,7 @@ class bitv {\n         small(b) => match v1.rep {\n           small(b1) => b.equals(b1),\n           _ => false\n-        }\n+        },\n         big(s) => match v1.rep {\n           big(s1) => s.equals(s1),\n           small(_) => return false"}, {"sha": "c7d0d1e5be8660d5214ee969462bc9c9e93e1089", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -242,11 +242,11 @@ mod tests {\n               one(a1) => match b {\n                 one(b1) => return a1 == b1,\n                 _ => return false\n-              }\n+              },\n               two(a1, a2) => match b {\n                 two(b1, b2) => return a1 == b1 && a2 == b2,\n                 _ => return false\n-              }\n+              },\n               three(a1, a2, a3) => match b {\n                 three(b1, b2, b3) => return a1 == b1 && a2 == b2 && a3 == b3,\n                 _ => return false\n@@ -258,11 +258,11 @@ mod tests {\n               onepar::<T>(a1) => match b {\n                 onepar::<T>(b1) => return a1 == b1,\n                 _ => return false\n-              }\n+              },\n               twopar::<T>(a1, a2) => match b {\n                 twopar::<T>(b1, b2) => return a1 == b1 && a2 == b2,\n                 _ => return false\n-              }\n+              },\n               threepar::<T>(a1, a2, a3) => match b {\n                 threepar::<T>(b1, b2, b3) => {\n                     return a1 == b1 && a2 == b2 && a3 == b3"}, {"sha": "882c6147b241f28dbfe1390f72566d0a114881f1", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -172,7 +172,7 @@ impl parser for parser {\n           '\"' => match self.parse_str() {\n             ok(s) => ok(string(s)),\n             err(e) => err(e)\n-          }\n+          },\n           '[' => self.parse_list(),\n           '{' => self.parse_object(),\n           _ => self.error(~\"invalid syntax\")"}, {"sha": "00c489c1daaab984a149943eec69c3b656707a36", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -54,7 +54,7 @@ fn format_addr(ip: ip_addr) -> ~str {\n             fail ~\"failed to convert inner sockaddr_in address to str\"\n         }\n         result\n-      }\n+      },\n       ipv6(addr) => unsafe {\n         let result = uv_ip6_name(&addr);\n         if result == ~\"\" {"}, {"sha": "ce9b73af4719ba63509e16c5a697c7d9f8482cba", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -245,7 +245,7 @@ fn serialize_option<S: serializer,T>(s: S, v: option<T>, st: fn(T)) {\n     do s.emit_enum(~\"option\") {\n         match v {\n           none => do s.emit_enum_variant(~\"none\", 0u, 0u) {\n-          }\n+          },\n \n           some(v) => do s.emit_enum_variant(~\"some\", 1u, 1u) {\n             do s.emit_enum_variant_arg(0u) {"}, {"sha": "de9af5d44f4a876fc6b53bf83664f88ab14ae01c", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -104,7 +104,7 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n         let mut idx = 0u, l = self.v.len();\n         while idx < l {\n             match self.v.get_elt(idx) {\n-              some(elt) => if !it(idx, elt) { break }\n+              some(elt) => if !it(idx, elt) { break },\n               none => ()\n             }\n             idx += 1u;\n@@ -120,7 +120,7 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n         let mut idx = 0u, l = self.v.len();\n         while idx < l {\n             match self.v.get_elt(idx) {\n-              some(elt) => if !it(&idx, &elt) { break }\n+              some(elt) => if !it(&idx, &elt) { break },\n               none => ()\n             }\n             idx += 1u;"}, {"sha": "6dd0ec209f507660a3e063a02d0efeadcb9f2aee", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -146,7 +146,7 @@ fn run_tests_console(opts: test_opts,\n           result::err(s) => {\n               fail(fmt!{\"can't open output file: %s\", s})\n           }\n-        }\n+        },\n         none => none\n     };\n "}, {"sha": "b654b0f1d4f2df72f7df9ac6bd0eef7b18f31245", "filename": "src/libstd/time.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -220,7 +220,7 @@ fn strptime(s: ~str, format: ~str) -> result<tm, ~str> {\n           ]) {\n             some(item) => { let (v, pos) = item; tm.tm_wday = v; ok(pos) }\n             none => err(~\"Invalid day\")\n-          }\n+          },\n           'a' => match match_strs(s, pos, ~[\n               (~\"Sun\", 0_i32),\n               (~\"Mon\", 1_i32),\n@@ -232,7 +232,7 @@ fn strptime(s: ~str, format: ~str) -> result<tm, ~str> {\n           ]) {\n             some(item) => { let (v, pos) = item; tm.tm_wday = v; ok(pos) }\n             none => err(~\"Invalid day\")\n-          }\n+          },\n           'B' => match match_strs(s, pos, ~[\n               (~\"January\", 0_i32),\n               (~\"February\", 1_i32),\n@@ -249,7 +249,7 @@ fn strptime(s: ~str, format: ~str) -> result<tm, ~str> {\n           ]) {\n             some(item) => { let (v, pos) = item; tm.tm_mon = v; ok(pos) }\n             none => err(~\"Invalid month\")\n-          }\n+          },\n           'b' | 'h' => match match_strs(s, pos, ~[\n               (~\"Jan\", 0_i32),\n               (~\"Feb\", 1_i32),\n@@ -266,15 +266,15 @@ fn strptime(s: ~str, format: ~str) -> result<tm, ~str> {\n           ]) {\n             some(item) => { let (v, pos) = item; tm.tm_mon = v; ok(pos) }\n             none => err(~\"Invalid month\")\n-          }\n+          },\n           'C' => match match_digits(s, pos, 2u, false) {\n             some(item) => {\n                 let (v, pos) = item;\n                   tm.tm_year += (v * 100_i32) - 1900_i32;\n                   ok(pos)\n               }\n             none => err(~\"Invalid year\")\n-          }\n+          },\n           'c' => {\n             parse_type(s, pos, 'a', tm)\n                 .chain(|pos| parse_char(s, pos, ' '))\n@@ -296,11 +296,11 @@ fn strptime(s: ~str, format: ~str) -> result<tm, ~str> {\n           'd' => match match_digits(s, pos, 2u, false) {\n             some(item) => { let (v, pos) = item; tm.tm_mday = v; ok(pos) }\n             none => err(~\"Invalid day of the month\")\n-          }\n+          },\n           'e' => match match_digits(s, pos, 2u, true) {\n             some(item) => { let (v, pos) = item; tm.tm_mday = v; ok(pos) }\n             none => err(~\"Invalid day of the month\")\n-          }\n+          },\n           'F' => {\n             parse_type(s, pos, 'Y', tm)\n                 .chain(|pos| parse_char(s, pos, '-'))\n@@ -379,13 +379,13 @@ fn strptime(s: ~str, format: ~str) -> result<tm, ~str> {\n \n             some(item) => { let (v, pos) = item; tm.tm_hour += v; ok(pos) }\n             none => err(~\"Invalid hour\")\n-          }\n+          },\n           'p' => match match_strs(s, pos,\n                                   ~[(~\"AM\", 0_i32), (~\"PM\", 12_i32)]) {\n \n             some(item) => { let (v, pos) = item; tm.tm_hour += v; ok(pos) }\n             none => err(~\"Invalid hour\")\n-          }\n+          },\n           'R' => {\n             parse_type(s, pos, 'H', tm)\n                 .chain(|pos| parse_char(s, pos, ':'))\n@@ -542,7 +542,7 @@ fn strptime(s: ~str, format: ~str) -> result<tm, ~str> {\n               '%' => match parse_type(s, pos, rdr.read_char(), tm) {\n                 ok(next) => pos = next,\n                   err(e) => { result = err(e); break; }\n-              }\n+              },\n               c => {\n                 if c != ch { break }\n                 pos = next;\n@@ -581,7 +581,7 @@ fn strftime(format: ~str, tm: tm) -> ~str {\n             4 => ~\"Thursday\",\n             5 => ~\"Friday\",\n             6 => ~\"Saturday\"\n-          }\n+          },\n           'a' => match check tm.tm_wday as int {\n             0 => ~\"Sun\",\n             1 => ~\"Mon\",\n@@ -590,7 +590,7 @@ fn strftime(format: ~str, tm: tm) -> ~str {\n             4 => ~\"Thu\",\n             5 => ~\"Fri\",\n             6 => ~\"Sat\"\n-          }\n+          },\n           'B' => match check tm.tm_mon as int {\n             0 => ~\"January\",\n             1 => ~\"February\",\n@@ -604,7 +604,7 @@ fn strftime(format: ~str, tm: tm) -> ~str {\n             9 => ~\"October\",\n             10 => ~\"November\",\n             11 => ~\"December\"\n-          }\n+          },\n           'b' | 'h' => match check tm.tm_mon as int {\n             0 => ~\"Jan\",\n             1 => ~\"Feb\",\n@@ -618,7 +618,7 @@ fn strftime(format: ~str, tm: tm) -> ~str {\n             9 => ~\"Oct\",\n             10 => ~\"Nov\",\n             11 => ~\"Dec\",\n-          }\n+          },\n           'C' => fmt!{\"%02d\", (tm.tm_year as int + 1900) / 100},\n           'c' => {\n             fmt!{\"%s %s %s %s %s\",\n@@ -662,8 +662,8 @@ fn strftime(format: ~str, tm: tm) -> ~str {\n           'M' => fmt!{\"%02d\", tm.tm_min as int},\n           'm' => fmt!{\"%02d\", tm.tm_mon as int + 1},\n           'n' => ~\"\\n\",\n-          'P' => if tm.tm_hour as int < 12 { ~\"am\" } else { ~\"pm\" }\n-          'p' => if tm.tm_hour as int < 12 { ~\"AM\" } else { ~\"PM\" }\n+          'P' => if tm.tm_hour as int < 12 { ~\"am\" } else { ~\"pm\" },\n+          'p' => if tm.tm_hour as int < 12 { ~\"AM\" } else { ~\"PM\" },\n           'R' => {\n             fmt!{\"%s:%s\",\n                 parse_type('H', tm),"}, {"sha": "acd62b6a536d2066074cd55c150ae0f69b0e4980", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -270,7 +270,7 @@ fn map_view_item(vi: @view_item, cx: ctx, _v: vt) {\n           }\n         };\n         cx.map.insert(id, node_export(vp, extend(cx, name)));\n-      }\n+      },\n       _ => ()\n     }\n }"}, {"sha": "deb8bb5963dfd9fa0758362abf0eebc6cd8e93af", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -192,7 +192,7 @@ fn is_exported(i: ident, m: _mod) -> bool {\n                 local = true;\n                 parent_enum = some(/* FIXME (#2543) */ copy it.ident);\n             }\n-          }\n+          },\n           _ => ()\n         }\n         if local { break; }\n@@ -476,7 +476,7 @@ fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n         visit_item: fn@(i: @item) {\n             vfn(i.id);\n             match i.node {\n-              item_enum(vs, _) => for vs.each |v| { vfn(v.node.id); }\n+              item_enum(vs, _) => for vs.each |v| { vfn(v.node.id); },\n               _ => ()\n             }\n         },\n@@ -603,10 +603,10 @@ fn walk_pat(pat: @pat, it: fn(@pat)) {\n     match pat.node {\n       pat_ident(_, pth, some(p)) => walk_pat(p, it),\n       pat_rec(fields, _) | pat_struct(_, fields, _) =>\n-        for fields.each |f| { walk_pat(f.pat, it) }\n+        for fields.each |f| { walk_pat(f.pat, it) },\n       pat_enum(_, some(s)) | pat_tup(s) => for s.each |p| {\n         walk_pat(p, it)\n-      }\n+      },\n       pat_box(s) | pat_uniq(s) => walk_pat(s, it),\n       pat_wild | pat_lit(_) | pat_range(_, _) | pat_ident(_, _, _)\n         | pat_enum(_, _) => ()"}, {"sha": "65c2e00faca911a04206724fa2ab3ece0da49c9f", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -130,7 +130,7 @@ fn get_meta_item_value_str(meta: @ast::meta_item) -> option<@~str> {\n       ast::meta_name_value(_, v) => match v.node {\n         ast::lit_str(s) => option::some(s),\n         _ => option::none\n-      }\n+      },\n       _ => option::none\n     }\n }\n@@ -207,11 +207,11 @@ fn eq(a: @ast::meta_item, b: @ast::meta_item) -> bool {\n           ast::meta_word(na) => match b.node {\n             ast::meta_word(nb) => na == nb,\n             _ => false\n-          }\n+          },\n           ast::meta_name_value(na, va) => match b.node {\n             ast::meta_name_value(nb, vb) => na == nb && va.node == vb.node,\n             _ => false\n-          }\n+          },\n           ast::meta_list(na, la) => {\n \n             // ~[Fixme-sorting]\n@@ -257,7 +257,7 @@ fn last_meta_item_value_str_by_name(\n       some(item) => match attr::get_meta_item_value_str(item) {\n         some(value) => some(value),\n         none => none\n-      }\n+      },\n       none => none\n     }\n }"}, {"sha": "0f163e73c813785c0ea744c4d2d1442cd91ac012", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -214,7 +214,7 @@ fn expr_to_str(cx: ext_ctxt, expr: @ast::expr, error: ~str) -> ~str {\n       ast::expr_lit(l) => match l.node {\n         ast::lit_str(s) => return *s,\n         _ => cx.span_fatal(l.span, error)\n-      }\n+      },\n       _ => cx.span_fatal(expr.span, error)\n     }\n }\n@@ -257,7 +257,7 @@ fn get_mac_args(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n         _ => {\n             cx.span_fatal(sp, fmt!{\"#%s: malformed invocation\", name})\n           }\n-      }\n+      },\n       none => cx.span_fatal(sp, fmt!{\"#%s: missing arguments\", name})\n     }\n }\n@@ -302,7 +302,7 @@ fn tt_args_to_original_flavor(cx: ext_ctxt, sp: span, arg: ~[ast::token_tree])\n               }\n               _ => fail ~\"badly-structured parse result\"\n             }\n-          }\n+          },\n           _ => fail ~\"badly-structured parse result\"\n         };\n "}, {"sha": "f8966196749346803df85450c5b56e105a7df951", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -84,7 +84,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n               ty_hex(c) => match c {\n                 case_upper => rt_type = ~\"ty_hex_upper\",\n                 case_lower => rt_type = ~\"ty_hex_lower\"\n-              }\n+              },\n               ty_bits => rt_type = ~\"ty_bits\",\n               ty_octal => rt_type = ~\"ty_octal\",\n               _ => rt_type = ~\"ty_default\"\n@@ -125,7 +125,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n               ty_int(s) => match s {\n                 signed => return true,\n                 unsigned => return false\n-              }\n+              },\n               ty_float => return true,\n               _ => return false\n             }\n@@ -173,7 +173,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n             unsigned => {\n                 return make_conv_call(cx, arg.span, ~\"uint\", cnv, arg)\n             }\n-          }\n+          },\n           ty_bool => return make_conv_call(cx, arg.span, ~\"bool\", cnv, arg),\n           ty_char => return make_conv_call(cx, arg.span, ~\"char\", cnv, arg),\n           ty_hex(_) => {\n@@ -224,12 +224,12 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n           ty_int(s) => match s {\n             signed => debug!{\"type: signed\"},\n             unsigned => debug!{\"type: unsigned\"}\n-          }\n+          },\n           ty_bits => debug!{\"type: bits\"},\n           ty_hex(cs) => match cs {\n             case_upper => debug!{\"type: uhex\"},\n             case_lower => debug!{\"type: lhex\"},\n-          }\n+          },\n           ty_octal => debug!{\"type: octal\"},\n           ty_float => debug!{\"type: float\"},\n           ty_poly => debug!{\"type: poly\"}"}, {"sha": "8d219ec43951602c8be90ae053e5587f6883764b", "filename": "src/libsyntax/ext/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fqquote.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -312,7 +312,7 @@ fn replace_expr(repls: ~[fragment],\n       ast::expr_mac({node: mac_var(i), _}) => match (repls[i]) {\n         from_expr(r) => (r.node, r.span),\n         _ => fail /* fixme error message */\n-      }\n+      },\n       _ => orig(e,s,fld)\n     }\n }\n@@ -326,7 +326,7 @@ fn replace_ty(repls: ~[fragment],\n       ast::ty_mac({node: mac_var(i), _}) => match (repls[i]) {\n         from_ty(r) => (r.node, r.span),\n         _ => fail /* fixme error message */\n-      }\n+      },\n       _ => orig(e,s,fld)\n     }\n }"}, {"sha": "426fea346b908704c156820c64a0c5a03d1277b8", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -77,7 +77,7 @@ fn elts_to_ell(cx: ext_ctxt, elts: ~[@expr]) ->\n                           post: vec::slice(elts, idx + 1u, vec::len(elts))});\n             }\n             _ => ()\n-          }\n+          },\n           _ => ()\n         }\n         idx += 1u;\n@@ -518,7 +518,7 @@ fn block_to_ident(blk: blk_) -> option<ident> {\n           some(expr) => match expr.node {\n             expr_path(pth) => path_to_ident(pth),\n             _ => none\n-          }\n+          },\n           none => none\n         }\n }\n@@ -530,7 +530,7 @@ fn p_t_s_r_mac(cx: ext_ctxt, mac: ast::mac, _s: selector, _b: binders) {\n               match_expr(e) => match e.node {\n                 expr_mac(mac) => fn_m(mac),\n                 _ => none\n-              }\n+              },\n               _ => cx.bug(~\"broken traversal in p_t_s_r\")\n             }\n     }\n@@ -650,7 +650,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                                           ~\"macro name must be \" +\n                                           ~\"consistent\");\n                         }\n-                      }\n+                      },\n                       none => cx.span_fatal(pth.span,\n                                             ~\"macro name must not be a path\")\n                     }"}, {"sha": "d84eb3ec48885df44ed242b0e3ca9901981cf082", "filename": "src/libsyntax/ext/tt/earley_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fearley_parser.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -322,7 +322,7 @@ fn parse_nt(p: parser, name: ~str) -> nonterminal {\n       ~\"item\" => match p.parse_item(~[]) {\n         some(i) => token::nt_item(i),\n         none => p.fatal(~\"expected an item keyword\")\n-      }\n+      },\n       ~\"block\" => token::nt_block(p.parse_block()),\n       ~\"stmt\" => token::nt_stmt(p.parse_stmt(~[])),\n       ~\"pat\" => token::nt_pat(p.parse_pat(true)),\n@@ -333,7 +333,7 @@ fn parse_nt(p: parser, name: ~str) -> nonterminal {\n         token::IDENT(sn,b) => { p.bump(); token::nt_ident(sn,b) }\n         _ => p.fatal(~\"expected ident, found \"\n                      + token::to_str(*p.reader.interner(), copy p.token))\n-      }\n+      },\n       ~\"path\" => token::nt_path(p.parse_path_with_tps(false)),\n       ~\"tt\" => {\n         p.quote_depth += 1u; //but in theory, non-quoted tts might be useful"}, {"sha": "a77c613cb60077b4ea0b41d9c7139dad2a79831f", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -13,6 +13,13 @@ fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     }\n }\n \n+fn expr_is_simple_block(e: @ast::expr) -> bool {\n+    match e.node {\n+      ast::expr_block({node: {rules: ast::default_blk, _}, _}) => true,\n+      _ => false\n+    }\n+}\n+\n fn stmt_ends_with_semi(stmt: ast::stmt) -> bool {\n     match stmt.node {\n       ast::stmt_decl(d, _) => {\n@@ -52,7 +59,7 @@ fn ends_in_lit_int(ex: @ast::expr) -> bool {\n         @{node: ast::lit_int(_, ast::ty_i), _}\n         | @{node: ast::lit_int_unsuffixed(_), _} => true,\n         _ => false\n-      }\n+      },\n       ast::expr_binary(_, _, sub) | ast::expr_unary(_, sub) |\n       ast::expr_move(_, sub) | ast::expr_copy(sub) |\n       ast::expr_assign(_, sub) |\n@@ -63,7 +70,7 @@ fn ends_in_lit_int(ex: @ast::expr) -> bool {\n       ast::expr_fail(osub) | ast::expr_ret(osub) => match osub {\n         some(ex) => ends_in_lit_int(ex),\n         _ => false\n-      }\n+      },\n       _ => false\n     }\n }"}, {"sha": "c675af6803cf174d4a89eb29002446d69dff7194", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -963,7 +963,7 @@ class parser {\n                 hi = self.span.hi;\n                 ex = expr_vstore(self.mk_expr(lo, hi, ex), vstore_fixed(v));\n             }\n-          }\n+          },\n           _ => ()\n         }\n \n@@ -1579,7 +1579,7 @@ class parser {\n             let expr = self.parse_expr_res(RESTRICT_STMT_EXPR);\n \n             let require_comma =\n-                classify::expr_requires_semi_to_be_stmt(expr)\n+                !classify::expr_is_simple_block(expr)\n                 && self.token != token::RBRACE;\n \n             if require_comma {\n@@ -1839,7 +1839,7 @@ class parser {\n                                             (token::COMMA),\n                                         |p| p.parse_pat(refutable));\n                                   }\n-                              }\n+                              },\n                               _ => ()\n                             }\n                             // at this point, we're not sure whether it's a"}, {"sha": "865af11ee8ba371a50b38b0afb15ba2b2b422f00", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -649,7 +649,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n /// expression arguments as expressions). It can be done! I think.\n fn print_tt(s: ps, tt: ast::token_tree) {\n     match tt {\n-      ast::tt_delim(tts) => for tts.each() |tt_elt| { print_tt(s, tt_elt); }\n+      ast::tt_delim(tts) => for tts.each() |tt_elt| { print_tt(s, tt_elt); },\n       ast::tt_tok(_, tk) => {\n         match tk {\n           parse::token::IDENT(*) => { // don't let idents run together\n@@ -953,7 +953,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n             print_vstore(s, v);\n               print_expr(s, e);\n           }\n-      }\n+      },\n       ast::expr_vec(exprs, mutbl) => {\n         ibox(s, indent_unit);\n         word(s.s, ~\"[\");\n@@ -1114,7 +1114,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n               some(expr) => {\n                 end(s); // close the ibox for the pattern\n                 print_expr(s, expr);\n-                if expr_requires_semi_to_be_stmt(expr)\n+                if !expr_is_simple_block(expr)\n                     && i < len - 1 {\n                     word(s.s, ~\",\");\n                 }"}, {"sha": "db84e0974ffbb4862e6deffdc4371861ca16ff4d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -93,7 +93,7 @@ fn visit_crate_directive<E>(cd: @crate_directive, e: E, v: vt<E>) {\n       cdir_src_mod(_, _) => (),\n       cdir_dir_mod(_, cdirs, _) => for cdirs.each |cdir| {\n         visit_crate_directive(cdir, e, v);\n-      }\n+      },\n       cdir_view_item(vi) => v.visit_view_item(vi, e, v),\n       cdir_syntax(_) => ()\n     }\n@@ -191,10 +191,10 @@ fn visit_ty<E>(t: @ty, e: E, v: vt<E>) {\n       }\n       ty_rec(flds) => for flds.each |f| {\n         v.visit_ty(f.node.mt.ty, e, v);\n-      }\n+      },\n       ty_tup(ts) => for ts.each |tt| {\n         v.visit_ty(tt, e, v);\n-      }\n+      },\n       ty_fn(_, bounds, decl) => {\n         for decl.inputs.each |a| { v.visit_ty(a.ty, e, v); }\n         visit_ty_param_bounds(bounds, e, v);\n@@ -222,7 +222,7 @@ fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n       }\n       pat_rec(fields, _) => for fields.each |f| {\n         v.visit_pat(f.pat, e, v)\n-      }\n+      },\n       pat_struct(path, fields, _) => {\n         visit_path(path, e, v);\n         for fields.each |f| {\n@@ -231,7 +231,7 @@ fn visit_pat<E>(p: @pat, e: E, v: vt<E>) {\n       }\n       pat_tup(elts) => for elts.each |elt| {\n         v.visit_pat(elt, e, v)\n-      }\n+      },\n       pat_box(inner) | pat_uniq(inner) => v.visit_pat(inner, e, v),\n       pat_ident(_, path, inner) => {\n           visit_path(path, e, v);\n@@ -339,7 +339,7 @@ fn visit_decl<E>(d: @decl, e: E, v: vt<E>) {\n     match d.node {\n       decl_local(locs) => for locs.each |loc| {\n         v.visit_local(loc, e, v)\n-      }\n+      },\n       decl_item(it) => v.visit_item(it, e, v)\n     }\n }\n@@ -380,7 +380,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         for flds.each |f| { v.visit_expr(f.node.expr, e, v); }\n         visit_expr_opt(base, e, v);\n       }\n-      expr_tup(elts) => for elts.each |el| { v.visit_expr(el, e, v); }\n+      expr_tup(elts) => for elts.each |el| { v.visit_expr(el, e, v); },\n       expr_call(callee, args, _) => {\n         visit_exprs(args, e, v);\n         v.visit_expr(callee, e, v);"}, {"sha": "0cddd359b55cf26487b983c21287229b4d133e0e", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -46,7 +46,7 @@ fn check_pat(p: @pat, &&_is_const: bool, v: visit::vt<bool>) {\n     }\n     match p.node {\n       // Let through plain ~-string literals here\n-      pat_lit(a) => if !is_str(a) { v.visit_expr(a, true, v); }\n+      pat_lit(a) => if !is_str(a) { v.visit_expr(a, true, v); },\n       pat_range(a, b) => {\n         if !is_str(a) { v.visit_expr(a, true, v); }\n         if !is_str(b) { v.visit_expr(b, true, v); }"}, {"sha": "0daec1693f1ff2573e6b4e54279ef0fec89ae228", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -1190,7 +1190,7 @@ class liveness {\n           expr_field(e, nm, _) => match self.as_self_field(e, nm) {\n             some(_) => succ,\n             none => self.propagate_through_expr(e, succ)\n-          }\n+          },\n           _ => self.propagate_through_expr(expr, succ)\n         }\n     }\n@@ -1208,7 +1208,7 @@ class liveness {\n                 ln\n             }\n             none => succ\n-          }\n+          },\n \n           // We do not track other lvalues, so just propagate through\n           // to their subcomponents.  Also, it may happen that"}, {"sha": "0b625a63d5a4f4fce2e5b0f640a5bc28bf3d8201", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -27,7 +27,7 @@ fn pat_is_variant(dm: resolve3::DefMap, pat: @pat) -> bool {\n       pat_ident(_, _, none) => match dm.find(pat.id) {\n         some(def_variant(_, _)) => true,\n         _ => false\n-      }\n+      },\n       _ => false\n     }\n }"}, {"sha": "15ebe1c14d052c2bcc263097e7924ce2e752ccae", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -582,7 +582,7 @@ class NameBindings {\n               none => return none,\n               some(def_id) => return some(def_mod(def_id))\n             }\n-          }\n+          },\n           ImplNS => {\n             // Danger: Be careful what you use this for! def_ty is not\n             // necessarily the right def."}, {"sha": "2993d23d1808363a100519f106f0e856973bf343", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -2851,7 +2851,7 @@ fn trans_arg_expr(cx: block, arg: ty::arg, lldestty: TypeRef, e: @ast::expr,\n             let bcx = trans_loop_body(cx, e, ret_flag, save_in(scratch));\n             {bcx: bcx, val: scratch, kind: lv_temporary}\n         }\n-      }\n+      },\n       none => {\n         trans_temp_lval(cx, e)\n       }"}, {"sha": "325ce55d28f01a8ad5a7868a17ccb76323a57542", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -300,14 +300,14 @@ fn create_basic_type(cx: @crate_ctxt, t: ty::t, ty: ast::prim_ty, span: span)\n         ast::ty_i16 => (~\"i16\", DW_ATE_signed),\n         ast::ty_i32 => (~\"i32\", DW_ATE_signed),\n         ast::ty_i64 => (~\"i64\", DW_ATE_signed)\n-      }\n+      },\n       ast::ty_uint(m) => match m {\n         ast::ty_u => (~\"uint\", DW_ATE_unsigned),\n         ast::ty_u8 => (~\"u8\", DW_ATE_unsigned_char),\n         ast::ty_u16 => (~\"u16\", DW_ATE_unsigned),\n         ast::ty_u32 => (~\"u32\", DW_ATE_unsigned),\n         ast::ty_u64 => (~\"u64\", DW_ATE_unsigned)\n-      }\n+      },\n       ast::ty_float(m) => match m {\n         ast::ty_f => (~\"float\", DW_ATE_float),\n         ast::ty_f32 => (~\"f32\", DW_ATE_float),"}, {"sha": "3eac4a7e663f6ee0ceed8475867f148d112b858f", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -1165,7 +1165,7 @@ fn abi_of_foreign_fn(ccx: @crate_ctxt, i: @ast::foreign_item)\n     match attr::first_attr_value_str_by_name(i.attrs, ~\"abi\") {\n       none => match check ccx.tcx.items.get(i.id) {\n         ast_map::node_foreign_item(_, abi, _) => abi\n-      }\n+      },\n       some(_) => match attr::foreign_abi(i.attrs) {\n         either::right(abi) => abi,\n         either::left(msg) => ccx.sess.span_fatal(i.span, msg)"}, {"sha": "1f79774256d9d0bb8749fbe830b742a499fd82d3", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -612,7 +612,7 @@ fn mk_t(cx: ctxt, st: sty) -> t { mk_t_with_id(cx, st, none) }\n fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n     let key = {struct: st, o_def_id: o_def_id};\n     match cx.interner.find(key) {\n-      some(t) => unsafe { return unsafe::reinterpret_cast(t); }\n+      some(t) => unsafe { return unsafe::reinterpret_cast(t); },\n       _ => ()\n     }\n     let mut flags = 0u;\n@@ -655,8 +655,8 @@ fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n         flags |= rflags(r);\n         flags |= get(m.ty).flags;\n       }\n-      ty_rec(flds) => for flds.each |f| { flags |= get(f.mt.ty).flags; }\n-      ty_tup(ts) => for ts.each |tt| { flags |= get(tt).flags; }\n+      ty_rec(flds) => for flds.each |f| { flags |= get(f.mt.ty).flags; },\n+      ty_tup(ts) => for ts.each |tt| { flags |= get(tt).flags; },\n       ty_fn(f) => {\n         for f.inputs.each |a| { flags |= get(a.ty).flags; }\n         flags |= get(f.output).flags;\n@@ -2189,19 +2189,19 @@ pure fn hash_type_structure(st: sty) -> uint {\n         ast::ty_i16 => 5u,\n         ast::ty_i32 => 6u,\n         ast::ty_i64 => 7u\n-      }\n+      },\n       ty_uint(t) => match t {\n         ast::ty_u => 8u,\n         ast::ty_u8 => 9u,\n         ast::ty_u16 => 10u,\n         ast::ty_u32 => 11u,\n         ast::ty_u64 => 12u\n-      }\n+      },\n       ty_float(t) => match t {\n         ast::ty_f => 13u,\n         ast::ty_f32 => 14u,\n         ast::ty_f64 => 15u\n-      }\n+      },\n       ty_estr(_) => 16u,\n       ty_enum(did, substs) => {\n         let mut h = hash_def(18u, did);\n@@ -2473,7 +2473,7 @@ fn canon<T:copy>(tbl: hashmap<ast::node_id, ast::inferable<T>>,\n             if cm1 != m1 { tbl.insert(id, cm1); }\n             cm1\n         }\n-      }\n+      },\n       _ => m0\n     }\n }"}, {"sha": "1012542c6ad9d18161481fea070d0ac6a88c91a1", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -1319,7 +1319,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n               ast::box(_) | ast::uniq(_) => match sty {\n                 ty::ty_box(mt) | ty::ty_uniq(mt) => some(mt.ty),\n                 _ => none\n-              }\n+              },\n               ast::not | ast::neg => expected,\n               ast::deref => none\n             }\n@@ -1430,7 +1430,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n                     expr.span,\n                     ~\"`return;` in function returning non-nil\");\n             }\n-          }\n+          },\n           some(e) => { check_expr_with(fcx, e, ret_ty); }\n         }\n         fcx.write_bot(id);\n@@ -1933,7 +1933,7 @@ fn check_stmt(fcx: @fn_ctxt, stmt: @ast::stmt) -> bool {\n         match decl.node {\n           ast::decl_local(ls) => for ls.each |l| {\n             bot |= check_decl_local(fcx, l);\n-          }\n+          },\n           ast::decl_item(_) => {/* ignore for now */ }\n         }\n       }"}, {"sha": "2e3003ed68784fb8b272c0073d6008f6fff0f7e7", "filename": "src/rustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -48,7 +48,7 @@ fn replace_bound_regions_in_fn_ty(\n         some(s) => match check t_self {\n           some(t) => some({self_ty: t, node_id: s.node_id})\n           // this 'none' case shouldn't happen\n-        }\n+        },\n         none => none\n     };\n "}, {"sha": "b4c28b19354e91005bf48a3e5c5168cdabea74a4", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772b2e5c7f85e230bcae13c49eb1386afc6cd0e/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=2772b2e5c7f85e230bcae13c49eb1386afc6cd0e", "patch": "@@ -258,14 +258,14 @@ fn convert_integral_ty_to_int_ty_set(tcx: ty::ctxt, t: ty::t)\n         ast::ty_i    => int_ty_set(INT_TY_SET_i),\n         ast::ty_char => tcx.sess.bug(\n             ~\"char type passed to convert_integral_ty_to_int_ty_set()\")\n-      }\n+      },\n       ty_uint(uint_ty) => match uint_ty {\n         ast::ty_u8  => int_ty_set(INT_TY_SET_u8),\n         ast::ty_u16 => int_ty_set(INT_TY_SET_u16),\n         ast::ty_u32 => int_ty_set(INT_TY_SET_u32),\n         ast::ty_u64 => int_ty_set(INT_TY_SET_u64),\n         ast::ty_u   => int_ty_set(INT_TY_SET_u)\n-      }\n+      },\n       _ => tcx.sess.bug(~\"non-integral type passed to \\\n                           convert_integral_ty_to_int_ty_set()\")\n     }"}, {"sha": "289018013d3532f0f1600c58f21c0990efb98a6d", "filename": "src/test/run-pass/alt-arrows-blocky-commas.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/abf4421e7c2fce4e768eb20c126989501081f4f9/src%2Ftest%2Frun-pass%2Falt-arrows-blocky-commas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf4421e7c2fce4e768eb20c126989501081f4f9/src%2Ftest%2Frun-pass%2Falt-arrows-blocky-commas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-arrows-blocky-commas.rs?ref=abf4421e7c2fce4e768eb20c126989501081f4f9", "patch": "@@ -1,56 +0,0 @@\n-// no-reformat\n-// Testing the presense or absense of commas separating block-structure\n-// match arm expressions\n-\n-fn fun(_f: fn()) {\n-}\n-\n-fn it(_f: fn() -> bool) {\n-}\n-\n-fn main() {\n-\n-    match 0 {\n-      00 => {\n-      }\n-      01 => if true {\n-      } else {\n-      }\n-      03 => match 0 {\n-        _ => ()\n-      }\n-      04 => do fun {\n-      }\n-      05 => for it {\n-      }\n-      06 => while false {\n-      }\n-      07 => loop {\n-      }\n-      08 => unsafe {\n-      }\n-      09 => unchecked {\n-      }\n-      10 => {\n-      },\n-      11 => if true {\n-      } else {\n-      },\n-      13 => match 0 {\n-        _ => ()\n-      },\n-      14 => do fun {\n-      },\n-      15 => for it {\n-      },\n-      16 => while false {\n-      },\n-      17 => loop {\n-      },\n-      18 => unsafe {\n-      },\n-      19 => unchecked {\n-      },\n-      _ => ()\n-    }\n-}\n\\ No newline at end of file"}]}