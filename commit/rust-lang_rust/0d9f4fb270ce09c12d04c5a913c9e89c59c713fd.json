{"sha": "0d9f4fb270ce09c12d04c5a913c9e89c59c713fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOWY0ZmIyNzBjZTA5YzEyZDA0YzVhOTEzYzllODljNTljNzEzZmQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-05T14:52:31Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-07T16:40:31Z"}, "message": "Remove trivial function.", "tree": {"sha": "51069c309522a01316bfd207904c53ed88001d65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51069c309522a01316bfd207904c53ed88001d65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d9f4fb270ce09c12d04c5a913c9e89c59c713fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9f4fb270ce09c12d04c5a913c9e89c59c713fd", "html_url": "https://github.com/rust-lang/rust/commit/0d9f4fb270ce09c12d04c5a913c9e89c59c713fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d9f4fb270ce09c12d04c5a913c9e89c59c713fd/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1afe6a9c9f8339134513857dd26dccb20df88d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1afe6a9c9f8339134513857dd26dccb20df88d2", "html_url": "https://github.com/rust-lang/rust/commit/c1afe6a9c9f8339134513857dd26dccb20df88d2"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "144e3bc9c8bc6d16cb5e6962948ce2d01a29a3a2", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d9f4fb270ce09c12d04c5a913c9e89c59c713fd/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9f4fb270ce09c12d04c5a913c9e89c59c713fd/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=0d9f4fb270ce09c12d04c5a913c9e89c59c713fd", "patch": "@@ -96,15 +96,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         // ```\n         // forest.is_empty()\n         // ```\n-        self.ty_inhabitedness_forest(ty).contains(self, module)\n+        ty.uninhabited_from(self).contains(self, module)\n     }\n \n     pub fn is_ty_uninhabited_from_any_module(self, ty: Ty<'tcx>) -> bool {\n-        !self.ty_inhabitedness_forest(ty).is_empty()\n-    }\n-\n-    fn ty_inhabitedness_forest(self, ty: Ty<'tcx>) -> DefIdForest {\n-        ty.uninhabited_from(self)\n+        !ty.uninhabited_from(self).is_empty()\n     }\n }\n "}]}