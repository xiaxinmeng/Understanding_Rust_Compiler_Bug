{"sha": "161ab76008c6eae1fc4278ed7a82c83189b9064d", "node_id": "C_kwDOAAsO6NoAKDE2MWFiNzYwMDhjNmVhZTFmYzQyNzhlZDdhODJjODMxODliOTA2NGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-24T20:57:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-24T20:57:05Z"}, "message": "Auto merge of #12376 - Veykril:completion, r=Veykril\n\nfix: Insert whitespace into trait-impl completions when coming from macros\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/12278", "tree": {"sha": "b3bef23cc085b6593c8961a123162bbd46182363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3bef23cc085b6593c8961a123162bbd46182363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/161ab76008c6eae1fc4278ed7a82c83189b9064d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/161ab76008c6eae1fc4278ed7a82c83189b9064d", "html_url": "https://github.com/rust-lang/rust/commit/161ab76008c6eae1fc4278ed7a82c83189b9064d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/161ab76008c6eae1fc4278ed7a82c83189b9064d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ca47b3432061883757ab9456ea2a4e9a33119cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca47b3432061883757ab9456ea2a4e9a33119cd", "html_url": "https://github.com/rust-lang/rust/commit/4ca47b3432061883757ab9456ea2a4e9a33119cd"}, {"sha": "86d1d9067e34b322e7eca500ada0364733bdbd1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d1d9067e34b322e7eca500ada0364733bdbd1a", "html_url": "https://github.com/rust-lang/rust/commit/86d1d9067e34b322e7eca500ada0364733bdbd1a"}], "stats": {"total": 192, "additions": 100, "deletions": 92}, "files": [{"sha": "573c362c8185577d8c4e51951a691007f6e8ade5", "filename": "crates/ide-assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=161ab76008c6eae1fc4278ed7a82c83189b9064d", "patch": "@@ -939,7 +939,6 @@ struct Foo(usize);\n \n impl FooB for Foo {\n     $0fn foo< 'lt>(& 'lt self){}\n-\n }\n \"#,\n         )"}, {"sha": "873db300b84c7f7353e488282ee207bfea3bfb1d", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=161ab76008c6eae1fc4278ed7a82c83189b9064d", "patch": "@@ -114,7 +114,6 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n         || ctx.is_path_disallowed()\n         || ctx.expects_item()\n         || ctx.expects_assoc_item()\n-        || ctx.expects_variant()\n     {\n         return None;\n     }"}, {"sha": "54bd77526e9aabeefb4e1bcaf3355ee5ba31c4b4", "filename": "crates/ide-completion/src/completions/trait_impl.rs", "status": "modified", "additions": 91, "deletions": 17, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=161ab76008c6eae1fc4278ed7a82c83189b9064d", "patch": "@@ -32,10 +32,12 @@\n //! ```\n \n use hir::{self, HasAttrs};\n-use ide_db::{path_transform::PathTransform, traits::get_missing_assoc_items, SymbolKind};\n+use ide_db::{\n+    path_transform::PathTransform, syntax_helpers::insert_whitespace_into_node,\n+    traits::get_missing_assoc_items, SymbolKind,\n+};\n use syntax::{\n     ast::{self, edit_in_place::AttrsOwnerEdit},\n-    display::function_declaration,\n     AstNode, SyntaxElement, SyntaxKind, SyntaxNode, TextRange, T,\n };\n use text_edit::TextEdit;\n@@ -179,7 +181,7 @@ fn add_function_impl(\n                 _ => unreachable!(),\n             };\n \n-            let function_decl = function_declaration(&transformed_fn);\n+            let function_decl = function_declaration(&transformed_fn, source.file_id.is_macro());\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n                     let snippet = format!(\"{} {{\\n    $0\\n}}\", function_decl);\n@@ -260,7 +262,7 @@ fn add_const_impl(\n                     _ => unreachable!(),\n                 };\n \n-                let label = make_const_compl_syntax(&transformed_const);\n+                let label = make_const_compl_syntax(&transformed_const, source.file_id.is_macro());\n                 let replacement = format!(\"{} \", label);\n \n                 let mut item = CompletionItem::new(SymbolKind::Const, replacement_range, label);\n@@ -283,29 +285,55 @@ fn add_const_impl(\n     }\n }\n \n-fn make_const_compl_syntax(const_: &ast::Const) -> String {\n+fn make_const_compl_syntax(const_: &ast::Const, needs_whitespace: bool) -> String {\n     const_.remove_attrs_and_docs();\n+    let const_ = if needs_whitespace {\n+        insert_whitespace_into_node::insert_ws_into(const_.syntax().clone())\n+    } else {\n+        const_.syntax().clone()\n+    };\n \n-    let const_start = const_.syntax().text_range().start();\n-    let const_end = const_.syntax().text_range().end();\n-\n-    let start =\n-        const_.syntax().first_child_or_token().map_or(const_start, |f| f.text_range().start());\n+    let start = const_.text_range().start();\n+    let const_end = const_.text_range().end();\n \n     let end = const_\n-        .syntax()\n         .children_with_tokens()\n         .find(|s| s.kind() == T![;] || s.kind() == T![=])\n         .map_or(const_end, |f| f.text_range().start());\n \n     let len = end - start;\n     let range = TextRange::new(0.into(), len);\n \n-    let syntax = const_.syntax().text().slice(range).to_string();\n+    let syntax = const_.text().slice(range).to_string();\n \n     format!(\"{} =\", syntax.trim_end())\n }\n \n+fn function_declaration(node: &ast::Fn, needs_whitespace: bool) -> String {\n+    node.remove_attrs_and_docs();\n+\n+    let node = if needs_whitespace {\n+        insert_whitespace_into_node::insert_ws_into(node.syntax().clone())\n+    } else {\n+        node.syntax().clone()\n+    };\n+\n+    let start = node.text_range().start();\n+    let end = node.text_range().end();\n+\n+    let end = node\n+        .last_child_or_token()\n+        .filter(|s| s.kind() == T![;] || s.kind() == SyntaxKind::BLOCK_EXPR)\n+        .map_or(end, |f| f.text_range().start());\n+\n+    let len = end - start;\n+    let range = TextRange::new(0.into(), len);\n+\n+    let syntax = node.text().slice(range).to_string();\n+\n+    syntax.trim_end().to_owned()\n+}\n+\n fn replacement_range(ctx: &CompletionContext, item: &SyntaxNode) -> TextRange {\n     let first_child = item\n         .children_with_tokens()\n@@ -655,8 +683,7 @@ trait Test {\n struct T;\n \n impl Test for T {\n-    fn foo<T>()\n-where T: Into<String> {\n+    fn foo<T>() where T: Into<String> {\n     $0\n }\n }\n@@ -992,7 +1019,7 @@ trait SomeTrait<T> {}\n \n trait Foo<T> {\n     fn function()\n-    where Self: SomeTrait<T>;\n+        where Self: SomeTrait<T>;\n }\n struct Bar;\n \n@@ -1005,13 +1032,13 @@ trait SomeTrait<T> {}\n \n trait Foo<T> {\n     fn function()\n-    where Self: SomeTrait<T>;\n+        where Self: SomeTrait<T>;\n }\n struct Bar;\n \n impl Foo<u32> for Bar {\n     fn function()\n-where Self: SomeTrait<u32> {\n+        where Self: SomeTrait<u32> {\n     $0\n }\n }\n@@ -1052,4 +1079,51 @@ impl Tr for () {\n         \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn fixes_up_macro_generated() {\n+        check_edit(\n+            \"fn foo\",\n+            r#\"\n+macro_rules! noop {\n+    ($($item: item)*) => {\n+        $($item)*\n+    }\n+}\n+\n+noop! {\n+    trait Foo {\n+        fn foo(&mut self, bar: i64, baz: &mut u32) -> Result<(), u32>;\n+    }\n+}\n+\n+struct Test;\n+\n+impl Foo for Test {\n+    $0\n+}\n+\"#,\n+            r#\"\n+macro_rules! noop {\n+    ($($item: item)*) => {\n+        $($item)*\n+    }\n+}\n+\n+noop! {\n+    trait Foo {\n+        fn foo(&mut self, bar: i64, baz: &mut u32) -> Result<(), u32>;\n+    }\n+}\n+\n+struct Test;\n+\n+impl Foo for Test {\n+    fn foo(&mut self,bar:i64,baz: &mut u32) -> Result<(),u32> {\n+    $0\n+}\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "5e2118ae14b0fff954f7a6a754844bebbe7dd412", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=161ab76008c6eae1fc4278ed7a82c83189b9064d", "patch": "@@ -322,10 +322,6 @@ impl<'a> CompletionContext<'a> {\n         matches!(self.completion_location, Some(ImmediateLocation::Trait | ImmediateLocation::Impl))\n     }\n \n-    pub(crate) fn expects_variant(&self) -> bool {\n-        matches!(self.name_ctx(), Some(NameContext { kind: NameKind::Variant, .. }))\n-    }\n-\n     pub(crate) fn expects_non_trait_assoc_item(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::Impl))\n     }\n@@ -379,10 +375,7 @@ impl<'a> CompletionContext<'a> {\n     pub(crate) fn is_path_disallowed(&self) -> bool {\n         self.previous_token_is(T![unsafe])\n             || matches!(self.prev_sibling, Some(ImmediatePrevSibling::Visibility))\n-            || matches!(\n-                self.name_ctx(),\n-                Some(NameContext { kind: NameKind::Module(_) | NameKind::Rename, .. })\n-            )\n+            || (matches!(self.name_ctx(), Some(NameContext { .. })) && self.pattern_ctx.is_none())\n             || matches!(self.pattern_ctx, Some(PatternContext { record_pat: Some(_), .. }))\n             || matches!(\n                 self.nameref_ctx(),"}, {"sha": "a06f18543fc0bb4d1511c0380f476fb7c95329ea", "filename": "crates/ide-db/src/syntax_helpers/insert_whitespace_into_node.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Finsert_whitespace_into_node.rs?ref=161ab76008c6eae1fc4278ed7a82c83189b9064d", "patch": "@@ -114,6 +114,10 @@ pub fn insert_ws_into(syn: SyntaxNode) -> SyntaxNode {\n         ted::insert(pos, insert);\n     }\n \n+    if let Some(it) = syn.last_token().filter(|it| it.kind() == SyntaxKind::WHITESPACE) {\n+        ted::remove(it);\n+    }\n+\n     syn\n }\n "}, {"sha": "806f816898bd8564a75c017751f83e961383811b", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=161ab76008c6eae1fc4278ed7a82c83189b9064d", "patch": "@@ -250,8 +250,7 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 bar\n-                for _ in 0..42{}\n-                \"#]],\n+                for _ in 0..42{}\"#]],\n         );\n     }\n \n@@ -273,7 +272,6 @@ f$0oo!();\n             expect![[r#\"\n                 foo\n                 fn b(){}\n-\n             \"#]],\n         );\n     }\n@@ -297,8 +295,7 @@ f$0oo!();\n                 fn some_thing() -> u32 {\n                   let a = 0;\n                   a+10\n-                }\n-            \"#]],\n+                }\"#]],\n         );\n     }\n \n@@ -359,8 +356,7 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 match_ast\n-                {}\n-            \"#]],\n+                {}\"#]],\n         );\n     }\n \n@@ -421,8 +417,7 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 foo\n-                fn f<T>(_: &dyn ::std::marker::Copy){}\n-            \"#]],\n+                fn f<T>(_: &dyn ::std::marker::Copy){}\"#]],\n         );\n     }\n \n@@ -440,7 +435,6 @@ struct Foo {}\n             expect![[r#\"\n                 Clone\n                 impl < >core::clone::Clone for Foo< >{}\n-\n             \"#]],\n         );\n     }\n@@ -458,7 +452,6 @@ struct Foo {}\n             expect![[r#\"\n                 Copy\n                 impl < >core::marker::Copy for Foo< >{}\n-\n             \"#]],\n         );\n     }\n@@ -475,7 +468,6 @@ struct Foo {}\n             expect![[r#\"\n                 Copy\n                 impl < >core::marker::Copy for Foo< >{}\n-\n             \"#]],\n         );\n         check(\n@@ -488,7 +480,6 @@ struct Foo {}\n             expect![[r#\"\n                 Clone\n                 impl < >core::clone::Clone for Foo< >{}\n-\n             \"#]],\n         );\n     }"}, {"sha": "f7322656a3e0c449c118d86be7142af796322307", "filename": "crates/syntax/src/display.rs", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4ca47b3432061883757ab9456ea2a4e9a33119cd/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca47b3432061883757ab9456ea2a4e9a33119cd/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=4ca47b3432061883757ab9456ea2a4e9a33119cd", "patch": "@@ -1,51 +0,0 @@\n-//! This module contains utilities for rendering syntax nodes into a string representing their signature.\n-\n-use crate::ast::{self, HasGenericParams, HasName};\n-\n-use ast::HasVisibility;\n-use stdx::format_to;\n-\n-pub fn function_declaration(node: &ast::Fn) -> String {\n-    let mut buf = String::new();\n-    if let Some(vis) = node.visibility() {\n-        format_to!(buf, \"{} \", vis);\n-    }\n-    if node.async_token().is_some() {\n-        format_to!(buf, \"async \");\n-    }\n-    if node.const_token().is_some() {\n-        format_to!(buf, \"const \");\n-    }\n-    if node.unsafe_token().is_some() {\n-        format_to!(buf, \"unsafe \");\n-    }\n-    if let Some(abi) = node.abi() {\n-        // Keyword `extern` is included in the string.\n-        format_to!(buf, \"{} \", abi);\n-    }\n-    if let Some(name) = node.name() {\n-        format_to!(buf, \"fn {}\", name);\n-    }\n-    if let Some(type_params) = node.generic_param_list() {\n-        format_to!(buf, \"{}\", type_params);\n-    }\n-    if let Some(param_list) = node.param_list() {\n-        let params: Vec<String> = param_list\n-            .self_param()\n-            .into_iter()\n-            .map(|self_param| self_param.to_string())\n-            .chain(param_list.params().map(|param| param.to_string()))\n-            .collect();\n-        // Useful to inline parameters\n-        format_to!(buf, \"({})\", params.join(\", \"));\n-    }\n-    if let Some(ret_type) = node.ret_type() {\n-        if ret_type.ty().is_some() {\n-            format_to!(buf, \" {}\", ret_type);\n-        }\n-    }\n-    if let Some(where_clause) = node.where_clause() {\n-        format_to!(buf, \"\\n{}\", where_clause);\n-    }\n-    buf\n-}"}, {"sha": "e0309756b8a054c778b1d94cba0f942d15735be6", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/161ab76008c6eae1fc4278ed7a82c83189b9064d/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=161ab76008c6eae1fc4278ed7a82c83189b9064d", "patch": "@@ -33,7 +33,6 @@ mod token_text;\n #[cfg(test)]\n mod tests;\n \n-pub mod display;\n pub mod algo;\n pub mod ast;\n #[doc(hidden)]"}]}