{"sha": "9d9306828c08a997c4994c9bb4ec36205dddd5cd", "node_id": "C_kwDOAAsO6NoAKDlkOTMwNjgyOGMwOGE5OTdjNDk5NGM5YmI0ZWMzNjIwNWRkZGQ1Y2Q", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-15T15:05:03Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-15T15:05:03Z"}, "message": "Replace more manual TypeFoldable and TypeVisitable impls with derives", "tree": {"sha": "8f2a36ed59eca6e567281277ff32bf2a628f828e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f2a36ed59eca6e567281277ff32bf2a628f828e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d9306828c08a997c4994c9bb4ec36205dddd5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d9306828c08a997c4994c9bb4ec36205dddd5cd", "html_url": "https://github.com/rust-lang/rust/commit/9d9306828c08a997c4994c9bb4ec36205dddd5cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d9306828c08a997c4994c9bb4ec36205dddd5cd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5ab8da1e22c2cbfca30209ef30cd469a913f08a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5ab8da1e22c2cbfca30209ef30cd469a913f08a", "html_url": "https://github.com/rust-lang/rust/commit/a5ab8da1e22c2cbfca30209ef30cd469a913f08a"}], "stats": {"total": 124, "additions": 15, "deletions": 109}, "files": [{"sha": "5e3dfcbcc496221c9bd1c09abb3a7f9eda8beac4", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9306828c08a997c4994c9bb4ec36205dddd5cd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9306828c08a997c4994c9bb4ec36205dddd5cd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=9d9306828c08a997c4994c9bb4ec36205dddd5cd", "patch": "@@ -137,7 +137,7 @@ pub use self::pointer::{Pointer, PointerArithmetic, Provenance};\n /// - A constant\n /// - A static\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, Lift)]\n+#[derive(HashStable, Lift, TypeFoldable, TypeVisitable)]\n pub struct GlobalId<'tcx> {\n     /// For a constant or static, the `Instance` of the item itself.\n     /// For a promoted global, the `Instance` of the function they belong to."}, {"sha": "2f7352e0aff247ffcc7f0bd8aa1d5ba921359942", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9306828c08a997c4994c9bb4ec36205dddd5cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9306828c08a997c4994c9bb4ec36205dddd5cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=9d9306828c08a997c4994c9bb4ec36205dddd5cd", "patch": "@@ -50,7 +50,7 @@ impl<'tcx, P: Default> Unevaluated<'tcx, P> {\n \n /// Represents a constant in Rust.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable)]\n-#[derive(Hash, HashStable)]\n+#[derive(Hash, HashStable, TypeFoldable, TypeVisitable)]\n pub enum ConstKind<'tcx> {\n     /// A const generic parameter.\n     Param(ty::ParamConst),"}, {"sha": "9afd662075620fcc89a4ae00265cb6ce866144d6", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9306828c08a997c4994c9bb4ec36205dddd5cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9306828c08a997c4994c9bb4ec36205dddd5cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=9d9306828c08a997c4994c9bb4ec36205dddd5cd", "patch": "@@ -20,7 +20,7 @@ use std::fmt;\n /// simply couples a potentially generic `InstanceDef` with some substs, and codegen and const eval\n /// will do all required substitution as they run.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, Lift)]\n+#[derive(HashStable, Lift, TypeFoldable, TypeVisitable)]\n pub struct Instance<'tcx> {\n     pub def: InstanceDef<'tcx>,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "e8fe37e7dab730f9f5a080e6971a626ed46ed61c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d9306828c08a997c4994c9bb4ec36205dddd5cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9306828c08a997c4994c9bb4ec36205dddd5cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9d9306828c08a997c4994c9bb4ec36205dddd5cd", "patch": "@@ -1526,16 +1526,15 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n         Ok(ParamEnv::new(\n             self.caller_bounds().try_fold_with(folder)?,\n             self.reveal().try_fold_with(folder)?,\n-            self.constness().try_fold_with(folder)?,\n+            self.constness(),\n         ))\n     }\n }\n \n impl<'tcx> TypeVisitable<'tcx> for ParamEnv<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n-        self.reveal().visit_with(visitor)?;\n-        self.constness().visit_with(visitor)\n+        self.reveal().visit_with(visitor)\n     }\n }\n "}, {"sha": "ecbb2a16b69dfee4970365cc88da4ef3b0b23897", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 103, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/9d9306828c08a997c4994c9bb4ec36205dddd5cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9306828c08a997c4994c9bb4ec36205dddd5cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=9d9306828c08a997c4994c9bb4ec36205dddd5cd", "patch": "@@ -9,7 +9,6 @@ use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use crate::ty::{self, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n-use rustc_hir as hir;\n use rustc_hir::def::Namespace;\n use rustc_index::vec::{Idx, IndexVec};\n \n@@ -241,6 +240,16 @@ TrivialTypeTraversalAndLiftImpls! {\n     Field,\n     interpret::Scalar,\n     rustc_target::abi::Size,\n+    ty::DelaySpanBugEmitted,\n+    rustc_type_ir::DebruijnIndex,\n+    ty::BoundVar,\n+    ty::Placeholder<ty::BoundVar>,\n+}\n+\n+TrivialTypeTraversalAndLiftImpls! {\n+    for<'tcx> {\n+        ty::ValTree<'tcx>,\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -613,68 +622,6 @@ impl<'tcx> TypeVisitable<'tcx> for &'tcx ty::List<ProjectionKind> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        use crate::ty::InstanceDef::*;\n-        Ok(Self {\n-            substs: self.substs.try_fold_with(folder)?,\n-            def: match self.def {\n-                Item(def) => Item(def.try_fold_with(folder)?),\n-                VTableShim(did) => VTableShim(did.try_fold_with(folder)?),\n-                ReifyShim(did) => ReifyShim(did.try_fold_with(folder)?),\n-                Intrinsic(did) => Intrinsic(did.try_fold_with(folder)?),\n-                FnPtrShim(did, ty) => {\n-                    FnPtrShim(did.try_fold_with(folder)?, ty.try_fold_with(folder)?)\n-                }\n-                Virtual(did, i) => Virtual(did.try_fold_with(folder)?, i),\n-                ClosureOnceShim { call_once, track_caller } => {\n-                    ClosureOnceShim { call_once: call_once.try_fold_with(folder)?, track_caller }\n-                }\n-                DropGlue(did, ty) => {\n-                    DropGlue(did.try_fold_with(folder)?, ty.try_fold_with(folder)?)\n-                }\n-                CloneShim(did, ty) => {\n-                    CloneShim(did.try_fold_with(folder)?, ty.try_fold_with(folder)?)\n-                }\n-            },\n-        })\n-    }\n-}\n-\n-impl<'tcx> TypeVisitable<'tcx> for ty::instance::Instance<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        use crate::ty::InstanceDef::*;\n-        self.substs.visit_with(visitor)?;\n-        match self.def {\n-            Item(def) => def.visit_with(visitor),\n-            VTableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {\n-                did.visit_with(visitor)\n-            }\n-            FnPtrShim(did, ty) | CloneShim(did, ty) => {\n-                did.visit_with(visitor)?;\n-                ty.visit_with(visitor)\n-            }\n-            DropGlue(did, ty) => {\n-                did.visit_with(visitor)?;\n-                ty.visit_with(visitor)\n-            }\n-            ClosureOnceShim { call_once, track_caller: _ } => call_once.visit_with(visitor),\n-        }\n-    }\n-}\n-\n-impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        Ok(Self { instance: self.instance.try_fold_with(folder)?, promoted: self.promoted })\n-    }\n-}\n-\n-impl<'tcx> TypeVisitable<'tcx> for interpret::GlobalId<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.instance.visit_with(visitor)\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_ty(self)\n@@ -902,34 +849,6 @@ impl<'tcx> TypeSuperVisitable<'tcx> for ty::Const<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        Ok(match self {\n-            ty::ConstKind::Infer(ic) => ty::ConstKind::Infer(ic.try_fold_with(folder)?),\n-            ty::ConstKind::Param(p) => ty::ConstKind::Param(p.try_fold_with(folder)?),\n-            ty::ConstKind::Unevaluated(uv) => ty::ConstKind::Unevaluated(uv.try_fold_with(folder)?),\n-            ty::ConstKind::Value(_)\n-            | ty::ConstKind::Bound(..)\n-            | ty::ConstKind::Placeholder(..)\n-            | ty::ConstKind::Error(_) => self,\n-        })\n-    }\n-}\n-\n-impl<'tcx> TypeVisitable<'tcx> for ty::ConstKind<'tcx> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        match *self {\n-            ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n-            ty::ConstKind::Param(p) => p.visit_with(visitor),\n-            ty::ConstKind::Unevaluated(uv) => uv.visit_with(visitor),\n-            ty::ConstKind::Value(_)\n-            | ty::ConstKind::Bound(..)\n-            | ty::ConstKind::Placeholder(_)\n-            | ty::ConstKind::Error(_) => ControlFlow::CONTINUE,\n-        }\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n@@ -984,15 +903,3 @@ impl<'tcx> TypeVisitable<'tcx> for ty::Unevaluated<'tcx, ()> {\n         self.expand().visit_with(visitor)\n     }\n }\n-\n-impl<'tcx> TypeFoldable<'tcx> for hir::Constness {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n-        Ok(self)\n-    }\n-}\n-\n-impl<'tcx> TypeVisitable<'tcx> for hir::Constness {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::CONTINUE\n-    }\n-}"}]}