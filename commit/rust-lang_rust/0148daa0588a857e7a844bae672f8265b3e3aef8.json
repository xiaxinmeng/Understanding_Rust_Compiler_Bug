{"sha": "0148daa0588a857e7a844bae672f8265b3e3aef8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDhkYWEwNTg4YTg1N2U3YTg0NGJhZTY3MmY4MjY1YjNlM2FlZjg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-29T00:06:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-30T05:58:33Z"}, "message": "Reorganize structure of build directory\n\nEach stage is organized more according to Unix standards and to\naccommodate multiple target architectures.\n\nstageN/\n  bin - rustc lives here\n  lib - libraries that rustc needs\n  lib/rustc/$(target_triple/ - target libraries", "tree": {"sha": "cc037d5fbd94b5ee4b8a2321e4e23299a6852505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc037d5fbd94b5ee4b8a2321e4e23299a6852505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0148daa0588a857e7a844bae672f8265b3e3aef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0148daa0588a857e7a844bae672f8265b3e3aef8", "html_url": "https://github.com/rust-lang/rust/commit/0148daa0588a857e7a844bae672f8265b3e3aef8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0148daa0588a857e7a844bae672f8265b3e3aef8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e4961c7f77da43ba90feb4b4a44b0ba80a77a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e4961c7f77da43ba90feb4b4a44b0ba80a77a3", "html_url": "https://github.com/rust-lang/rust/commit/79e4961c7f77da43ba90feb4b4a44b0ba80a77a3"}], "stats": {"total": 240, "additions": 126, "deletions": 114}, "files": [{"sha": "360c76214b0cc76bbd63a09523b52106fd656e55", "filename": "Makefile.in", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0148daa0588a857e7a844bae672f8265b3e3aef8/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/0148daa0588a857e7a844bae672f8265b3e3aef8/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=0148daa0588a857e7a844bae672f8265b3e3aef8", "patch": "@@ -56,7 +56,7 @@ CFG_LIBRUSTC :=$(call CFG_LIB_NAME,rustc)\n ifdef CFG_DISABLE_SHAREDSTD\n   CFG_STDLIB_DEFAULT = $(1)/lib/libstd.rlib\n else\n-  CFG_STDLIB_DEFAULT = $(2)/$(CFG_STDLIB)\n+  CFG_STDLIB_DEFAULT = $(2)/lib/$(CFG_STDLIB)\n endif\n \n # version-string calculation\n@@ -168,21 +168,24 @@ LLC := $(CFG_LLVM_BINDIR)/llc$(X)\n \n define SREQ\n ifdef CFG_DISABLE_SHAREDSTD\n-SREQ$(1) = stage$(1)/rustc$(X)          \\\n-           stage$(1)/$$(CFG_RUNTIME)     \\\n+SREQ$(1)$(2) = stage$(1)/bin/rustc$(X)          \\\n+           stage$(1)/lib/$$(CFG_RUNTIME)     \\\n            $$(call CFG_STDLIB_DEFAULT,stage$(1),stage$(1)) \\\n-           stage$(1)/$$(CFG_RUSTLLVM)    \\\n-           stage$(1)/lib/main.o          \\\n-           stage$(1)/lib/$$(CFG_RUNTIME) \\\n+           stage$(1)/lib/$$(CFG_RUSTLLVM)    \\\n+           stage$(1)/lib/rustc/$(2)/$$(CFG_RUNTIME) \\\n+           stage$(1)/lib/rustc/$(2)/$$(CFG_STDLIB) \\\n+           stage$(1)/lib/rustc/$(2)/intrinsics.bc \\\n+           stage$(1)/lib/rustc/$(2)/main.o \\\n            $$(MKFILES)\n else\n-SREQ$(1) = stage$(1)/rustc$(X)          \\\n-           stage$(1)/$$(CFG_RUNTIME)     \\\n+SREQ$(1)$(2) = stage$(1)/bin/rustc$(X)          \\\n+           stage$(1)/lib/$$(CFG_RUNTIME)     \\\n            $$(call CFG_STDLIB_DEFAULT,stage$(1),stage$(1)) \\\n-           stage$(1)/$$(CFG_RUSTLLVM)    \\\n-           stage$(1)/lib/main.o          \\\n-           stage$(1)/lib/$$(CFG_RUNTIME) \\\n-           stage$(1)/lib/$$(CFG_STDLIB)  \\\n+           stage$(1)/lib/$$(CFG_RUSTLLVM)    \\\n+           stage$(1)/lib/rustc/$(2)/$$(CFG_RUNTIME) \\\n+           stage$(1)/lib/rustc/$(2)/$$(CFG_STDLIB) \\\n+           stage$(1)/lib/rustc/$(2)/intrinsics.bc \\\n+           stage$(1)/lib/rustc/$(2)/main.o \\\n            $$(MKFILES)\n endif\n \n@@ -194,16 +197,17 @@ CFG_VALGRIND_COMPILE$(1) = $$(CFG_VALGRIND_COMPILE)\n endif\n \n STAGE$(1) := $$(Q)$$(call CFG_RUN_TARG,stage$(1), \\\n-                $$(CFG_VALGRIND_COMPILE$(1)) stage$(1)/rustc$$(X) \\\n-                $$(CFG_RUSTC_FLAGS))\n+                $$(CFG_VALGRIND_COMPILE$(1)) stage$(1)/bin/rustc$$(X) \\\n+                $$(CFG_RUSTC_FLAGS) --target=$(2))\n endef\n \n-FUZZ := stage1/fuzzer$(X)\n+FUZZ := stage1/bin/fuzzer$(X)\n \n-$(eval $(call SREQ,0))\n-$(eval $(call SREQ,1))\n-$(eval $(call SREQ,2))\n-$(eval $(call SREQ,3))\n+$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+ $(eval $(call SREQ,0,$(target))) \\\n+ $(eval $(call SREQ,1,$(target))) \\\n+ $(eval $(call SREQ,2,$(target))) \\\n+ $(eval $(call SREQ,3,$(target))))\n \n ######################################################################\n # Entrypoint rule"}, {"sha": "aacd9504130f08840d20f9abc2e120d36232eefd", "filename": "mk/fuzzer.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0148daa0588a857e7a844bae672f8265b3e3aef8/mk%2Ffuzzer.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0148daa0588a857e7a844bae672f8265b3e3aef8/mk%2Ffuzzer.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ffuzzer.mk?ref=0148daa0588a857e7a844bae672f8265b3e3aef8", "patch": "@@ -3,7 +3,7 @@\n FUZZER_CRATE := $(S)src/fuzzer/fuzzer.rc\n FUZZER_INPUTS := $(wildcard $(addprefix $(S)src/fuzzer/, *.rs))\n \n-stage1/fuzzer$(X): $(FUZZER_CRATE) $(FUZZER_INPUTS) $(SREQ1) \\\n-                   stage1/lib/$(CFG_LIBRUSTC)\n+stage1/bin/fuzzer$(X): $(FUZZER_CRATE) $(FUZZER_INPUTS) $(SREQ1) \\\n+                   stage1/lib/rustc/$(CFG_HOST_TRIPLE)/$(CFG_LIBRUSTC)\n \t@$(call E, compile_and_link: $@)\n \t$(STAGE1) -o $@ $<"}, {"sha": "dc2bacd00a6380bc6324c62a1cff45e3dfba11e3", "filename": "mk/platform.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0148daa0588a857e7a844bae672f8265b3e3aef8/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0148daa0588a857e7a844bae672f8265b3e3aef8/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=0148daa0588a857e7a844bae672f8265b3e3aef8", "patch": "@@ -98,7 +98,7 @@ ifdef CFG_UNIXY\n   CFG_EXE_SUFFIX :=\n   CFG_LDPATH :=\n   CFG_RUN=$(CFG_LDENV)=$(1) $(2)\n-  CFG_RUN_TARG=$(call CFG_RUN,$(CFG_BUILD_DIR)/$(1),$(2))\n+  CFG_RUN_TARG=$(call CFG_RUN,$(CFG_BUILD_DIR)/$(1)/lib,$(2))\n   CFG_RUN_TEST=$(call CFG_RUN,$(call CFG_TESTLIB,$(1)),\\\n       $(CFG_VALGRIND) $(1))\n   CFG_LIBUV_LINK_FLAGS=-lpthread"}, {"sha": "bc552fdb4392ff0c8381c5505d9815691437bb23", "filename": "mk/stage0.mk", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0148daa0588a857e7a844bae672f8265b3e3aef8/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0148daa0588a857e7a844bae672f8265b3e3aef8/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=0148daa0588a857e7a844bae672f8265b3e3aef8", "patch": "@@ -1,25 +1,31 @@\n # FIXME: temporary hack: stdlib and rustrt come in the lib/ directory,\n # but we want them in the base directory, so we move them out.\n-stage0/rustc$(X): $(S)src/snapshots.txt $(S)src/etc/get-snapshot.py $(MKFILES)\n+stage0/bin/rustc$(X): $(S)src/snapshots.txt $(S)src/etc/get-snapshot.py $(MKFILES)\n \t@$(call E, fetch: $@)\n \t$(Q)$(S)src/etc/get-snapshot.py\n-\t$(Q)mv stage0/lib/$(CFG_STDLIB) stage0/$(CFG_STDLIB)\n+\t$(Q)cp stage0/rustc$(X) stage0/bin/rustc$(X)\n+\t$(Q)cp stage0/$(CFG_RUNTIME) stage0/lib/$(CFG_RUNTIME)\n+\t$(Q)cp stage0/$(CFG_RUSTLLVM) stage0/lib/$(CFG_RUSTLLVM)\n+\t$(Q)mkdir -p stage0/bin/lib\n+\t$(Q)cp stage0/lib/intrinsics.bc stage0/bin/lib/intrinsics.bc\n+\t$(Q)cp stage0/lib/glue.o stage0/bin/lib/glue.o\n+\t$(Q)cp stage0/lib/main.o stage0/bin/lib/main.o\n \t$(Q)touch $@\n \n # Host libs will be made in the process of making rustc above.\n \n-stage0/$(CFG_RUNTIME): stage0/rustc$(X)\n+stage0/lib/$(CFG_RUNTIME): stage0/bin/rustc$(X)\n \t$(Q)touch $@\n \n-stage0/$(CFG_STDLIB): stage0/rustc$(X)\n+stage0/lib/$(CFG_STDLIB): stage0/bin/rustc$(X)\n \t$(Q)touch $@\n \n-stage0/$(CFG_RUSTLLVM): stage0/rustc$(X)\n+stage0/lib/$(CFG_RUSTLLVM): stage0/bin/rustc$(X)\n \t$(Q)touch $@\n \n # Instantiate template (in stageN.mk) for building\n # target libraries.\n \n-SREQpre = stage0/lib/main.o $(MKFILES)\n+SREQpre = stage0/lib/$(CFG_HOST_TRIPLE)/main.o $(MKFILES)\n $(eval $(call TARGET_LIBS,pre,0,$(CFG_HOST_TRIPLE)))\n "}, {"sha": "0f890ee802233d416ec920c013f6ae9ba4a81351", "filename": "mk/stageN.mk", "status": "modified", "additions": 37, "deletions": 59, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/0148daa0588a857e7a844bae672f8265b3e3aef8/mk%2FstageN.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0148daa0588a857e7a844bae672f8265b3e3aef8/mk%2FstageN.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2FstageN.mk?ref=0148daa0588a857e7a844bae672f8265b3e3aef8", "patch": "@@ -20,34 +20,41 @@ define STAGE_N\n # compiler that relies on a .o file.\n \n STAGE$(2) := $$(Q)$$(call CFG_RUN_TARG,stage$(2), \\\n-                $$(CFG_VALGRIND_COMPILE) stage$(2)/rustc$$(X) \\\n-                $$(CFG_RUSTC_FLAGS))\n+                $$(CFG_VALGRIND_COMPILE) stage$(2)/bin/rustc$$(X) \\\n+                $$(CFG_RUSTC_FLAGS) --target=$(3))\n \n PERF_STAGE$(2) := $$(Q)$$(call CFG_RUN_TARG,stage$(2), \\\n-                $$(CFG_PERF_TOOL) stage$(2)/rustc$$(X) \\\n-                $$(CFG_RUSTC_FLAGS))\n+                $$(CFG_PERF_TOOL) stage$(2)/bin/rustc$$(X) \\\n+                $$(CFG_RUSTC_FLAGS) --target=$(3))\n \n-stage$(2)/%.o: stage$(2)/%.s\n+stage$(2)/bin/%.o: stage$(2)/bin/%.s\n \t@$$(call E, assemble [gcc]: $$@)\n \t$$(Q)gcc $$(CFG_GCCISH_CFLAGS) -o $$@ -c $$<\n \n-stage$(2)/rustc$$(X): $$(COMPILER_CRATE) $$(COMPILER_INPUTS)          \\\n-                      stage$(2)/$$(CFG_RUNTIME)                       \\\n-                      $$(call CFG_STDLIB_DEFAULT,stage$(1),stage$(2)) \\\n-                      stage$(2)/$$(CFG_RUSTLLVM)                      \\\n-                      $$(SREQ$(1))\n+stage$(2)/lib/%.o: stage$(2)/lib/%.s\n+\t@$$(call E, assemble [gcc]: $$@)\n+\t$$(Q)gcc $$(CFG_GCCISH_CFLAGS) -o $$@ -c $$<\n+\n+# FIXME: the bin/lib/libstd.so dep is transitional\n+\n+stage$(2)/bin/rustc$$(X): $$(COMPILER_CRATE) $$(COMPILER_INPUTS)          \\\n+                          stage$(2)/lib/$$(CFG_RUNTIME)                       \\\n+                          $$(call CFG_STDLIB_DEFAULT,stage$(1),stage$(2)) \\\n+                          stage$(2)/lib/$$(CFG_RUSTLLVM)                      \\\n+                          stage$(1)/bin/lib/$$(CFG_STDLIB) \\\n+                          $$(SREQ$(1)$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)) -L stage$(2) -o $$@ $$<\n \n-stage$(2)/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n+stage$(2)/lib/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-stage$(2)/$$(CFG_STDLIB): stage$(1)/lib/$$(CFG_STDLIB)\n+stage$(2)/lib/$$(CFG_STDLIB): stage$(1)/lib/rustc/$$(CFG_HOST_TRIPLE)/$$(CFG_STDLIB)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-stage$(2)/$$(CFG_RUSTLLVM): rustllvm/$$(CFG_RUSTLLVM)\n+stage$(2)/lib/$$(CFG_RUSTLLVM): rustllvm/$$(CFG_RUSTLLVM)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n@@ -59,41 +66,6 @@ endef\n \n \n define TARGET_LIBS\n-stage$(2)/lib/intrinsics.bc: $$(INTRINSICS_BC)\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-stage$(2)/lib/main.o: rt/main.o\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-stage$(2)/lib/$$(CFG_LIBRUSTC): $$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n-                                $$(SREQ$(2))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(2)) --lib -o $$@ $$<\n-\n-stage$(2)/lib/$$(CFG_STDLIB): $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-                              stage$(2)/rustc$$(X)               \\\n-                              stage$(2)/$$(CFG_RUNTIME)          \\\n-                              stage$(2)/$$(CFG_RUSTLLVM)         \\\n-                              stage$(2)/lib/intrinsics.bc        \\\n-                              $$(SREQ$(1))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(2))  --lib -o $$@ $$<\n-\n-stage$(2)/lib/libstd.rlib: $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-                           stage$(2)/rustc$$(X)               \\\n-                           stage$(2)/$$(CFG_RUNTIME)          \\\n-                           stage$(2)/$$(CFG_RUSTLLVM)         \\\n-                           stage$(2)/lib/intrinsics.bc        \\\n-                           $$(SREQ$(1))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(2)) --lib --static -o $$@ $$<\n-\n-stage$(2)/lib/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n \n # New per-target-arch target libraries; when we've transitioned to\n # using these exclusively, you should delete the non-arch-prefixed\n@@ -109,30 +81,36 @@ stage$(2)/lib/rustc/$(3)/main.o: rt/main.o\n \n stage$(2)/lib/rustc/$(3)/$$(CFG_LIBRUSTC): \\\n           $$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n-          $$(SREQ$(2))\n+          $$(SREQ$(2)$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2)) --lib -o $$@ $$<\n \n stage$(2)/lib/rustc/$(3)/$$(CFG_STDLIB): \\\n         $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-        stage$(2)/rustc$$(X)               \\\n-        stage$(2)/$$(CFG_RUNTIME)          \\\n-        stage$(2)/$$(CFG_RUSTLLVM)         \\\n-        stage$(2)/lib/intrinsics.bc        \\\n-        $$(SREQ$(1))\n+        stage$(2)/bin/rustc$$(X)               \\\n+        stage$(2)/lib/$$(CFG_RUNTIME)          \\\n+        stage$(2)/lib/$$(CFG_RUSTLLVM)         \\\n+        stage$(2)/lib/rustc/$(3)/intrinsics.bc        \\\n+        $$(SREQ$(1)$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2))  --lib -o $$@ $$<\n \n stage$(2)/lib/rustc/$(3)/libstd.rlib: \\\n         $$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-        stage$(2)/rustc$$(X)               \\\n-        stage$(2)/$$(CFG_RUNTIME)          \\\n-        stage$(2)/$$(CFG_RUSTLLVM)         \\\n-        stage$(2)/lib/intrinsics.bc        \\\n-        $$(SREQ$(1))\n+        stage$(2)/bin/rustc$$(X)               \\\n+        stage$(2)/lib/$$(CFG_RUNTIME)          \\\n+        stage$(2)/lib/$$(CFG_RUSTLLVM)         \\\n+        stage$(2)/lib/rustc/$(3)/intrinsics.bc        \\\n+        $$(SREQ$(1)$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2)) --lib --static -o $$@ $$<\n \n+# FIXME: Transitional so that stage0 can find std when building stage1/rustc\n+stage$(2)/bin/lib/$$(CFG_STDLIB): stage$(2)/lib/rustc/$(3)/$$(CFG_STDLIB)\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)mkdir -p stage$(2)/bin/lib\n+\t$$(Q)cp $$< $$@\n+\n stage$(2)/lib/rustc/$(3)/$$(CFG_RUNTIME): rt/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@"}, {"sha": "6032b5bd506d9ad823926f6ef37957f545902e67", "filename": "mk/tests.mk", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0148daa0588a857e7a844bae672f8265b3e3aef8/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0148daa0588a857e7a844bae672f8265b3e3aef8/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=0148daa0588a857e7a844bae672f8265b3e3aef8", "patch": "@@ -131,7 +131,7 @@ check-stage$(2): tidy \\\n check-stage$(2)-std: test/stdtest.stage$(2).out \\\n \n test/stdtest.stage$(2)$$(X): $$(STDTEST_CRATE) $$(STDTEST_INPUTS) \\\n-                             $$(SREQ$(2))\n+                             $$(SREQ$(2)$(CFG_HOST_TRIPLE))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2)) -o $$@ $$< --test\n \n@@ -146,16 +146,16 @@ test/stdtest.stage$(2).out.tmp: test/stdtest.stage$(2)$$(X)\n check-stage$(2)-rustc: test/rustctest.stage$(2).out \\\n \n test/rustctest.stage$(2)$$(X): $$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n-                           stage$(2)/$$(CFG_RUNTIME) \\\n+                           stage$(2)/lib/$$(CFG_RUNTIME) \\\n                            $$(call CFG_STDLIB_DEFAULT,stage$(1),stage$(2)) \\\n-                           stage$(2)/$$(CFG_RUSTLLVM) \\\n-                           $$(SREQ$(1))\n+                           stage$(2)/lib/$$(CFG_RUSTLLVM) \\\n+                           $$(SREQ$(1)$(CFG_HOST_TRIPLE))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)) -o $$@ $$< --test\n \n test/rustctest.stage$(2).out.tmp: test/rustctest.stage$(2)$$(X)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN,stage$(2),$$(CFG_VALGRIND) $$<) \\\n+\t$$(Q)$$(call CFG_RUN,$(CFG_BUILD_DIR)/stage$(2)/lib,$$(CFG_VALGRIND) $$<) \\\n \t  $$(TESTARGS)\n \t$$(Q)touch $$@\n \n@@ -185,11 +185,11 @@ check-stage$(2)-pretty: check-stage$(2)-pretty-rpass \\\n                         check-stage$(2)-pretty-bench \\\n                         check-stage$(2)-pretty-pretty \\\n \n-CTEST_COMMON_ARGS$(2) := --compile-lib-path stage$(2) \\\n-                         --run-lib-path stage$(2)/lib \\\n-                         --rustc-path stage$(2)/rustc$$(X) \\\n+CTEST_COMMON_ARGS$(2) := --compile-lib-path stage$(2)/lib \\\n+                         --run-lib-path stage$(2)/lib/$$(CFG_HOST_TRIPLE) \\\n+                         --rustc-path stage$(2)/bin/rustc$$(X) \\\n                          --stage-id stage$(2) \\\n-                         --rustcflags \"$$(CFG_RUSTC_FLAGS)\" \\\n+                         --rustcflags \"--target=$$(CFG_HOST_TRIPLE) $$(CFG_RUSTC_FLAGS)\" \\\n                          $$(CTEST_TESTARGS) \\\n \n CFAIL_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n@@ -243,7 +243,7 @@ PRETTY_PRETTY_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n \n test/compiletest.stage$(2)$$(X): $$(COMPILETEST_CRATE) \\\n                                  $$(COMPILETEST_INPUTS) \\\n-                                 $$(SREQ$(2))\n+                                 $$(SREQ$(2)$(CFG_HOST_TRIPLE))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(2)) -o $$@ $$<\n \n@@ -320,13 +320,13 @@ test/$(FT).rc test/$(FT_DRIVER).rs: $(TEST_RPASS_SOURCES_STAGE2) \\\n \t@$(call E, check: building combined stage2 test runner)\n \t$(Q)$(S)src/etc/combine-tests.py\n \n-stage2/lib/$(FT_LIB): test/$(FT).rc $(SREQ2)\n+stage2/lib/$(FT_LIB): test/$(FT).rc $(SREQ2$(CFG_HOST_TRIPLE))\n \t@$(call E, compile_and_link: $@)\n \t$(STAGE2) --lib -o $@ $<\n \n-test/$(FT_DRIVER)$(X): test/$(FT_DRIVER).rs stage2/lib/$(FT_LIB) $(SREQ2)\n+test/$(FT_DRIVER)$(X): test/$(FT_DRIVER).rs stage2/lib/$(FT_LIB) $(SREQ2$(CFG_HOST_TRIPLE))\n \t@$(call E, compile_and_link: $@)\n \t$(STAGE2) -o $@ $<\n \n-test/$(FT_DRIVER).out: test/$(FT_DRIVER)$(X) $(SREQ2)\n+test/$(FT_DRIVER).out: test/$(FT_DRIVER)$(X) $(SREQ2$(CFG_HOST_TRIPLE))\n \t$(Q)$(call CFG_RUN_TEST, $<)"}, {"sha": "c1d417afa16afd1c7bb18ef734a8e23293a1f94d", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0148daa0588a857e7a844bae672f8265b3e3aef8/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0148daa0588a857e7a844bae672f8265b3e3aef8/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=0148daa0588a857e7a844bae672f8265b3e3aef8", "patch": "@@ -39,8 +39,23 @@ fn llvm_err(sess: session::session, msg: str) {\n     } else { sess.fatal(msg + \": \" + str::str_from_cstr(buf)); }\n }\n \n+fn get_target_lib_path(sess: session::session) -> fs::path {\n+    let path = [\n+        sess.get_opts().sysroot,\n+        \"lib/rustc\",\n+        sess.get_opts().target_triple];\n+    check vec::is_not_empty(path);\n+    let path = fs::connect_many(path);\n+    ret path;\n+}\n+\n+fn get_target_lib_file_path(sess: session::session,\n+                            file: fs::path) -> fs::path {\n+    fs::connect(get_target_lib_path(sess), file)\n+}\n+\n fn link_intrinsics(sess: session::session, llmod: ModuleRef) {\n-    let path = fs::connect(sess.get_opts().sysroot, \"lib/intrinsics.bc\");\n+    let path = get_target_lib_file_path(sess, \"intrinsics.bc\");\n     let membuf = str::as_buf(path, {|buf|\n         llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n     });\n@@ -495,10 +510,9 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n // If the user wants an exe generated we need to invoke\n // gcc to link the object file with some libs\n fn link_binary(sess: session::session,\n-               binary_dir: str,\n                saved_out_filename: str) {\n-    let main: str = binary_dir + \"/lib/main.o\";\n-    let stage: str = \"-L\" + binary_dir + \"/lib\";\n+    let main: str = get_target_lib_file_path(sess, \"main.o\");\n+    let stage: str = \"-L\" + get_target_lib_path(sess);\n     let prog: str = \"gcc\";\n     // The invocations of gcc share some flags across platforms\n "}, {"sha": "9ed3aaa2e70db4b2a61ee77ce530f24f8fc7b670", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0148daa0588a857e7a844bae672f8265b3e3aef8/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0148daa0588a857e7a844bae672f8265b3e3aef8/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=0148daa0588a857e7a844bae672f8265b3e3aef8", "patch": "@@ -294,8 +294,8 @@ fn get_arch(triple: str) -> session::arch {\n \n fn get_default_sysroot(binary: str) -> str {\n     let dirname = fs::dirname(binary);\n-    if str::eq(dirname, binary) { ret \".\"; }\n-    ret dirname;\n+    if str::eq(dirname, binary) { ret \"../\"; }\n+    ret fs::connect(dirname, \"../\");\n }\n \n fn build_target_config(sopts: @session::options) -> @session::config {\n@@ -312,7 +312,7 @@ fn host_triple() -> str {\n     str::str_from_cstr(llvm::llvm::LLVMRustGetHostTriple())\n }\n \n-fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n+fn build_session_options(binary: str, match: getopts::match)\n    -> @session::options {\n     let library = opt_present(match, \"lib\");\n     let static = opt_present(match, \"static\");\n@@ -370,8 +370,9 @@ fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n             some(s) { s }\n         };\n \n-    let library_search_paths = [binary_dir + \"/lib\", // FIXME: legacy\n-                                binary_dir + \"/lib/rustc/\" + target ];\n+    let library_search_paths = [\n+        fs::connect(sysroot, \"lib\"), // FIXME: legacy\n+        fs::connect(sysroot, \"lib/rustc/\" + target )];\n     let lsp_vec = getopts::opt_strs(match, \"L\");\n     for lsp: str in lsp_vec { library_search_paths += [lsp]; }\n \n@@ -436,7 +437,6 @@ fn opts() -> [getopts::opt] {\n \n fn main(args: [str]) {\n     let binary = vec::shift(args);\n-    let binary_dir = fs::dirname(binary);\n     let match =\n         alt getopts::getopts(args, opts()) {\n           getopts::success(m) { m }\n@@ -453,7 +453,7 @@ fn main(args: [str]) {\n         version(binary);\n         ret;\n     }\n-    let sopts = build_session_options(binary, match, binary_dir);\n+    let sopts = build_session_options(binary, match);\n     let sess = build_session(sopts);\n     let n_inputs = vec::len::<str>(match.free);\n     let output_file = getopts::opt_maybe_str(match, \"o\");\n@@ -521,7 +521,7 @@ fn main(args: [str]) {\n \n     if stop_after_codegen { ret; }\n \n-    link::link_binary(sess, binary_dir, saved_out_filename);\n+    link::link_binary(sess, saved_out_filename);\n }\n \n #[cfg(test)]\n@@ -534,7 +534,7 @@ mod test {\n             alt getopts::getopts([\"--test\"], opts()) {\n               getopts::success(m) { m }\n             };\n-        let sessopts = build_session_options(\"whatever\", match, \"whatever\");\n+        let sessopts = build_session_options(\"whatever\", match);\n         let sess = build_session(sessopts);\n         let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n         assert (attr::contains_name(cfg, \"test\"));\n@@ -548,7 +548,7 @@ mod test {\n             alt getopts::getopts([\"--test\", \"--cfg=test\"], opts()) {\n               getopts::success(m) { m }\n             };\n-        let sessopts = build_session_options(\"whatever\", match, \"whatever\");\n+        let sessopts = build_session_options(\"whatever\", match);\n         let sess = build_session(sessopts);\n         let cfg = build_configuration(sess, \"whatever\", \"whatever\");\n         let test_items = attr::find_meta_items_by_name(cfg, \"test\");"}, {"sha": "06243b6d3aa13f5daf0cf6d52aff7a9c0f783ee8", "filename": "src/lib/fs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0148daa0588a857e7a844bae672f8265b3e3aef8/src%2Flib%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0148daa0588a857e7a844bae672f8265b3e3aef8/src%2Flib%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffs.rs?ref=0148daa0588a857e7a844bae672f8265b3e3aef8", "patch": "@@ -41,6 +41,16 @@ fn connect(pre: path, post: path) -> path {\n         } else { pre + path_sep() + post };\n }\n \n+fn connect_many(paths: [path]) : vec::is_not_empty(paths) -> path {\n+    ret if vec::len(paths) == 1u {\n+        paths[0]\n+    } else {\n+        let rest = vec::slice(paths, 1u, vec::len(paths));\n+        check vec::is_not_empty(rest);\n+        connect(paths[0], connect_many(rest))\n+    }\n+}\n+\n fn file_is_dir(p: path) -> bool {\n     ret str::as_buf(p, {|buf| rustrt::rust_file_is_dir(buf) != 0 });\n }"}]}