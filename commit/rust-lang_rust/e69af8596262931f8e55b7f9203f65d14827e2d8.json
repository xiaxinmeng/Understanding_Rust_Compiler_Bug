{"sha": "e69af8596262931f8e55b7f9203f65d14827e2d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OWFmODU5NjI2MjkzMWY4ZTU1YjdmOTIwM2Y2NWQxNDgyN2UyZDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T14:08:57Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T14:10:19Z"}, "message": "Refactor PerNs construction", "tree": {"sha": "0a56660b8c14cb46cee93470a1e7608136b67b5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a56660b8c14cb46cee93470a1e7608136b67b5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e69af8596262931f8e55b7f9203f65d14827e2d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e69af8596262931f8e55b7f9203f65d14827e2d8", "html_url": "https://github.com/rust-lang/rust/commit/e69af8596262931f8e55b7f9203f65d14827e2d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e69af8596262931f8e55b7f9203f65d14827e2d8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe38fffaa90f656abbeff7b8a167afc45cc492a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe38fffaa90f656abbeff7b8a167afc45cc492a9", "html_url": "https://github.com/rust-lang/rust/commit/fe38fffaa90f656abbeff7b8a167afc45cc492a9"}], "stats": {"total": 101, "additions": 52, "deletions": 49}, "files": [{"sha": "a96b5cfd2614176325ac04dd4223bb18a8dec0b6", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e69af8596262931f8e55b7f9203f65d14827e2d8/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69af8596262931f8e55b7f9203f65d14827e2d8/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=e69af8596262931f8e55b7f9203f65d14827e2d8", "patch": "@@ -5,7 +5,7 @@ use hir_expand::name::Name;\n use once_cell::sync::Lazy;\n use rustc_hash::FxHashMap;\n \n-use crate::{per_ns::PerNs, BuiltinType, ImplId, MacroDefId, ModuleDefId, TraitId};\n+use crate::{per_ns::PerNs, AdtId, BuiltinType, ImplId, MacroDefId, ModuleDefId, TraitId};\n \n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ItemScope {\n@@ -153,3 +153,21 @@ pub struct Resolution {\n     pub def: PerNs,\n     pub(crate) import: bool,\n }\n+\n+impl From<ModuleDefId> for PerNs {\n+    fn from(def: ModuleDefId) -> PerNs {\n+        match def {\n+            ModuleDefId::ModuleId(_) => PerNs::types(def),\n+            ModuleDefId::FunctionId(_) => PerNs::values(def),\n+            ModuleDefId::AdtId(adt) => match adt {\n+                AdtId::StructId(_) | AdtId::UnionId(_) => PerNs::both(def, def),\n+                AdtId::EnumId(_) => PerNs::types(def),\n+            },\n+            ModuleDefId::EnumVariantId(_) => PerNs::both(def, def),\n+            ModuleDefId::ConstId(_) | ModuleDefId::StaticId(_) => PerNs::values(def),\n+            ModuleDefId::TraitId(_) => PerNs::types(def),\n+            ModuleDefId::TypeAliasId(_) => PerNs::types(def),\n+            ModuleDefId::BuiltinType(_) => PerNs::types(def),\n+        }\n+    }\n+}"}, {"sha": "b4e438257aea66454273c1267b8d8ecc366d9c22", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 33, "deletions": 48, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e69af8596262931f8e55b7f9203f65d14827e2d8/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69af8596262931f8e55b7f9203f65d14827e2d8/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e69af8596262931f8e55b7f9203f65d14827e2d8", "patch": "@@ -714,12 +714,9 @@ where\n             modules[res].scope.define_legacy_macro(name, mac)\n         }\n         modules[self.module_id].children.insert(name.clone(), res);\n-        let resolution = Resolution {\n-            def: PerNs::types(\n-                ModuleId { krate: self.def_collector.def_map.krate, local_id: res }.into(),\n-            ),\n-            import: false,\n-        };\n+        let module = ModuleId { krate: self.def_collector.def_map.krate, local_id: res };\n+        let def: ModuleDefId = module.into();\n+        let resolution = Resolution { def: def.into(), import: false };\n         self.def_collector.update(self.module_id, None, &[(name, resolution)]);\n         res\n     }\n@@ -734,63 +731,51 @@ where\n \n         let name = def.name.clone();\n         let container = ContainerId::ModuleId(module);\n-        let def: PerNs = match def.kind {\n-            raw::DefKind::Function(ast_id) => {\n-                let def = FunctionLoc {\n-                    container: container.into(),\n-                    ast_id: AstId::new(self.file_id, ast_id),\n-                }\n-                .intern(self.def_collector.db);\n-\n-                PerNs::values(def.into())\n+        let def: ModuleDefId = match def.kind {\n+            raw::DefKind::Function(ast_id) => FunctionLoc {\n+                container: container.into(),\n+                ast_id: AstId::new(self.file_id, ast_id),\n             }\n+            .intern(self.def_collector.db)\n+            .into(),\n             raw::DefKind::Struct(ast_id) => {\n-                let def = StructLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n-                    .intern(self.def_collector.db);\n-                PerNs::both(def.into(), def.into())\n+                StructLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db)\n+                    .into()\n             }\n             raw::DefKind::Union(ast_id) => {\n-                let def = UnionLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n-                    .intern(self.def_collector.db);\n-                PerNs::both(def.into(), def.into())\n+                UnionLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db)\n+                    .into()\n             }\n             raw::DefKind::Enum(ast_id) => {\n-                let def = EnumLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n-                    .intern(self.def_collector.db);\n-                PerNs::types(def.into())\n+                EnumLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db)\n+                    .into()\n             }\n             raw::DefKind::Const(ast_id) => {\n-                let def = ConstLoc {\n-                    container: container.into(),\n-                    ast_id: AstId::new(self.file_id, ast_id),\n-                }\n-                .intern(self.def_collector.db);\n-\n-                PerNs::values(def.into())\n+                ConstLoc { container: container.into(), ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db)\n+                    .into()\n             }\n             raw::DefKind::Static(ast_id) => {\n-                let def = StaticLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n-                    .intern(self.def_collector.db);\n-\n-                PerNs::values(def.into())\n+                StaticLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db)\n+                    .into()\n             }\n             raw::DefKind::Trait(ast_id) => {\n-                let def = TraitLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n-                    .intern(self.def_collector.db);\n-\n-                PerNs::types(def.into())\n+                TraitLoc { container, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db)\n+                    .into()\n             }\n-            raw::DefKind::TypeAlias(ast_id) => {\n-                let def = TypeAliasLoc {\n-                    container: container.into(),\n-                    ast_id: AstId::new(self.file_id, ast_id),\n-                }\n-                .intern(self.def_collector.db);\n-\n-                PerNs::types(def.into())\n+            raw::DefKind::TypeAlias(ast_id) => TypeAliasLoc {\n+                container: container.into(),\n+                ast_id: AstId::new(self.file_id, ast_id),\n             }\n+            .intern(self.def_collector.db)\n+            .into(),\n         };\n-        let resolution = Resolution { def, import: false };\n+        let resolution = Resolution { def: def.into(), import: false };\n         self.def_collector.update(self.module_id, None, &[(name, resolution)])\n     }\n "}]}