{"sha": "b946ecd02018d1671c990057d7136176df60da35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NDZlY2QwMjAxOGQxNjcxYzk5MDA1N2Q3MTM2MTc2ZGY2MGRhMzU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-03-23T22:14:45Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-04-02T16:33:41Z"}, "message": "Suggest using enum when a variant is used as a type\n\nGiven a file:\n\n```rust\nenum Fruit {\n    Apple(i64),\n    Orange(i64),\n}\n\nfn should_return_fruit() -> Apple {\n    Apple(5)\n}\n```\n\nProvide the following output:\n\n```rust\nerror[E0412]: cannot find type `Apple` in this scope\n  --> file.rs:16:29\n   |\n16 | fn should_return_fruit() -> Apple {\n   |                             ^^^^^ not found in this scope\n   |\nhelp: there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n  --> file.rs:12:5\n   |\n12 |     Apple(i64),\n   |     ^^^^^^^^^^\n\nerror[E0425]: cannot find function `Apple` in this scope\n  --> file.rs:17:5\n   |\n17 |     Apple(5)\n   |     ^^^^^ not found in this scope\n   |\n   = help: possible candidate is found in another module, you can import it into scope:\n             `use Fruit::Apple;`\n```", "tree": {"sha": "cbce6be0c58b69cef93fa14656a0e13a9b5c0291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbce6be0c58b69cef93fa14656a0e13a9b5c0291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b946ecd02018d1671c990057d7136176df60da35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b946ecd02018d1671c990057d7136176df60da35", "html_url": "https://github.com/rust-lang/rust/commit/b946ecd02018d1671c990057d7136176df60da35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b946ecd02018d1671c990057d7136176df60da35/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e122f59ba23494d460466cca53c71646d99c767", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e122f59ba23494d460466cca53c71646d99c767", "html_url": "https://github.com/rust-lang/rust/commit/5e122f59ba23494d460466cca53c71646d99c767"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "a39cd3b0d551c059c26579d9abc0c1abbc2385a0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b946ecd02018d1671c990057d7136176df60da35/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b946ecd02018d1671c990057d7136176df60da35/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b946ecd02018d1671c990057d7136176df60da35", "patch": "@@ -2220,6 +2220,7 @@ impl<'a> Resolver<'a> {\n                                    -> PathResolution {\n         let ns = source.namespace();\n         let is_expected = &|def| source.is_expected(def);\n+        let is_enum_variant = &|def| if let Def::Variant(..) = def { true } else { false };\n \n         // Base error is amended with one short label and possibly some longer helps/notes.\n         let report_errors = |this: &mut Self, def: Option<Def>| {\n@@ -2270,6 +2271,19 @@ impl<'a> Resolver<'a> {\n             if !candidates.is_empty() {\n                 // Report import candidates as help and proceed searching for labels.\n                 show_candidates(&mut err, &candidates, def.is_some());\n+            } else if is_expected(Def::Enum(DefId::local(CRATE_DEF_INDEX))) {\n+                let enum_candidates = this.lookup_import_candidates(name, ns, is_enum_variant);\n+                for suggestion in enum_candidates {\n+                    let (variant_path, enum_path) = import_candidate_to_paths(&suggestion);\n+                    let msg = format!(\"there is an enum variant `{}`, did you mean to use `{}`?\",\n+                                      variant_path,\n+                                      enum_path);\n+                    if suggestion.path.span == DUMMY_SP {\n+                        err.help(&msg);\n+                    } else {\n+                        err.span_help(suggestion.path.span, &msg);\n+                    }\n+                }\n             }\n             if path.len() == 1 && this.self_type_is_available() {\n                 if let Some(candidate) = this.lookup_assoc_candidate(name, ns, is_expected) {\n@@ -3422,6 +3436,22 @@ fn path_names_to_string(path: &Path) -> String {\n     names_to_string(&path.segments.iter().map(|seg| seg.identifier).collect::<Vec<_>>())\n }\n \n+/// Get the path for an enum and the variant from an `ImportSuggestion` for an enum variant.\n+fn import_candidate_to_paths(suggestion: &ImportSuggestion) -> (String, String) {\n+    let variant_path = &suggestion.path;\n+    let variant_path_string = path_names_to_string(variant_path);\n+\n+    let path_len = suggestion.path.segments.len();\n+    let enum_path = ast::Path {\n+        span: suggestion.path.span,\n+        segments: suggestion.path.segments[0..path_len - 1].to_vec(),\n+    };\n+    let enum_path_string = path_names_to_string(&enum_path);\n+\n+    (variant_path_string, enum_path_string)\n+}\n+\n+\n /// When an entity with a given name is not available in scope, we search for\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way"}, {"sha": "ff29f3ad4078ba482d41bbf21cefbafe42b10c7c", "filename": "src/test/ui/did_you_mean/issue-35675.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b946ecd02018d1671c990057d7136176df60da35/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b946ecd02018d1671c990057d7136176df60da35/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35675.rs?ref=b946ecd02018d1671c990057d7136176df60da35", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Fruit {\n+    Apple(i64),\n+    Orange(i64),\n+}\n+\n+fn should_return_fruit() -> Apple {\n+    Apple(5)\n+}\n+\n+fn should_return_fruit_too() -> Fruit::Apple {\n+    Apple(5)\n+}\n+\n+fn foo() -> Ok {\n+    Ok(())\n+}\n+\n+fn bar() -> Variant3 {\n+}\n+\n+fn qux() -> Some {\n+    Some(1)\n+}\n+\n+fn main() {}\n+\n+mod x {\n+    enum Enum {\n+        Variant1,\n+        Variant2(),\n+        Variant3(usize),\n+        Variant4 {},\n+    }\n+}"}, {"sha": "43851d76029df307fe5db6a0f134d129f9fe8b0c", "filename": "src/test/ui/did_you_mean/issue-35675.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b946ecd02018d1671c990057d7136176df60da35/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b946ecd02018d1671c990057d7136176df60da35/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35675.stderr?ref=b946ecd02018d1671c990057d7136176df60da35", "patch": "@@ -0,0 +1,74 @@\n+error[E0412]: cannot find type `Apple` in this scope\n+  --> $DIR/issue-35675.rs:16:29\n+   |\n+16 | fn should_return_fruit() -> Apple {\n+   |                             ^^^^^ not found in this scope\n+   |\n+help: there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n+  --> $DIR/issue-35675.rs:12:5\n+   |\n+12 |     Apple(i64),\n+   |     ^^^^^^^^^^\n+\n+error[E0425]: cannot find function `Apple` in this scope\n+  --> $DIR/issue-35675.rs:17:5\n+   |\n+17 |     Apple(5)\n+   |     ^^^^^ not found in this scope\n+   |\n+   = help: possible candidate is found in another module, you can import it into scope:\n+             `use Fruit::Apple;`\n+\n+error[E0573]: expected type, found variant `Fruit::Apple`\n+  --> $DIR/issue-35675.rs:20:33\n+   |\n+20 | fn should_return_fruit_too() -> Fruit::Apple {\n+   |                                 ^^^^^^^^^^^^ not a type\n+   |\n+help: there is an enum variant `Fruit::Apple`, did you mean to use `Fruit`?\n+  --> $DIR/issue-35675.rs:12:5\n+   |\n+12 |     Apple(i64),\n+   |     ^^^^^^^^^^\n+\n+error[E0425]: cannot find function `Apple` in this scope\n+  --> $DIR/issue-35675.rs:21:5\n+   |\n+21 |     Apple(5)\n+   |     ^^^^^ not found in this scope\n+   |\n+   = help: possible candidate is found in another module, you can import it into scope:\n+             `use Fruit::Apple;`\n+\n+error[E0573]: expected type, found variant `Ok`\n+  --> $DIR/issue-35675.rs:24:13\n+   |\n+24 | fn foo() -> Ok {\n+   |             ^^ not a type\n+   |\n+   = help: there is an enum variant `std::result::Result::Ok`, did you mean to use `std::result::Result`?\n+   = help: there is an enum variant `std::prelude::v1::Ok`, did you mean to use `std::prelude::v1`?\n+\n+error[E0412]: cannot find type `Variant3` in this scope\n+  --> $DIR/issue-35675.rs:28:13\n+   |\n+28 | fn bar() -> Variant3 {\n+   |             ^^^^^^^^ not found in this scope\n+   |\n+help: there is an enum variant `x::Enum::Variant3`, did you mean to use `x::Enum`?\n+  --> $DIR/issue-35675.rs:41:9\n+   |\n+41 |         Variant3(usize),\n+   |         ^^^^^^^^^^^^^^^\n+\n+error[E0573]: expected type, found variant `Some`\n+  --> $DIR/issue-35675.rs:31:13\n+   |\n+31 | fn qux() -> Some {\n+   |             ^^^^ not a type\n+   |\n+   = help: there is an enum variant `std::prelude::v1::Some`, did you mean to use `std::prelude::v1`?\n+   = help: there is an enum variant `std::prelude::v1::Option::Some`, did you mean to use `std::prelude::v1::Option`?\n+\n+error: aborting due to 7 previous errors\n+"}]}