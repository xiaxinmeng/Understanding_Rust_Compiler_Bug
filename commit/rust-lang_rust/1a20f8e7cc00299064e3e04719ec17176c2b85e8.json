{"sha": "1a20f8e7cc00299064e3e04719ec17176c2b85e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMjBmOGU3Y2MwMDI5OTA2NGUzZTA0NzE5ZWMxNzE3NmMyYjg1ZTg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-20T14:05:14Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-20T14:05:14Z"}, "message": "rustc: Be more careful about spans in 'unexpected token' errors\n\nCloses #2017", "tree": {"sha": "5764b94075d2dc40e02e0ae9ff0b7fa1a0cd0ce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5764b94075d2dc40e02e0ae9ff0b7fa1a0cd0ce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a20f8e7cc00299064e3e04719ec17176c2b85e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a20f8e7cc00299064e3e04719ec17176c2b85e8", "html_url": "https://github.com/rust-lang/rust/commit/1a20f8e7cc00299064e3e04719ec17176c2b85e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a20f8e7cc00299064e3e04719ec17176c2b85e8/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a34ac589008c4861022ca66da769fe42466a0d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a34ac589008c4861022ca66da769fe42466a0d2", "html_url": "https://github.com/rust-lang/rust/commit/7a34ac589008c4861022ca66da769fe42466a0d2"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "06d59be06545b755d482b43ef0805ba0b465aa46", "filename": "src/rustc/syntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a20f8e7cc00299064e3e04719ec17176c2b85e8/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a20f8e7cc00299064e3e04719ec17176c2b85e8/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs?ref=1a20f8e7cc00299064e3e04719ec17176c2b85e8", "patch": "@@ -156,10 +156,13 @@ fn bad_expr_word_table() -> hashmap<str, ()> {\n     words\n }\n \n-fn unexpected(p: parser, t: token::token) -> ! {\n-    let s: str = \"unexpected token: '\" + token::to_str(p.reader, t) +\n-        \"'\";\n-    p.fatal(s);\n+fn unexpected_last(p: parser, t: token::token) -> ! {\n+    p.span_fatal(p.last_span,\n+                 \"unexpected token: '\" + token::to_str(p.reader, t) + \"'\");\n+}\n+\n+fn unexpected(p: parser) -> ! {\n+    p.fatal(\"unexpected token: '\" + token::to_str(p.reader, p.token) + \"'\");\n }\n \n fn expect(p: parser, t: token::token) {\n@@ -483,7 +486,7 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n         let elems =\n             parse_seq(token::LBRACE, token::RBRACE, seq_sep_opt(token::COMMA),\n                       parse_ty_field, p);\n-        if vec::len(elems.node) == 0u { unexpected(p, token::RBRACE); }\n+        if vec::len(elems.node) == 0u { unexpected_last(p, token::RBRACE); }\n         let hi = elems.span.hi;\n \n         let t = ast::ty_rec(elems.node);\n@@ -669,7 +672,7 @@ fn lit_from_token(p: parser, tok: token::token) -> ast::lit_ {\n       token::LIT_FLOAT(s, ft) { ast::lit_float(p.get_str(s), ft) }\n       token::LIT_STR(s) { ast::lit_str(p.get_str(s)) }\n       token::LPAREN { expect(p, token::RPAREN); ast::lit_nil }\n-      _ { unexpected(p, tok); }\n+      _ { unexpected_last(p, tok); }\n     }\n }\n \n@@ -1065,7 +1068,7 @@ fn parse_dot_or_call_expr_with(p: parser, e0: pexpr) -> pexpr {\n                                              p.get_str(i),\n                                              tys));\n               }\n-              t { unexpected(p, t); }\n+              _ { unexpected(p); }\n             }\n             cont;\n         }\n@@ -2200,7 +2203,7 @@ fn parse_fn_purity(p: parser) -> ast::purity {\n     if eat_word(p, \"fn\") { ast::impure_fn }\n     else if eat_word(p, \"pure\") { expect_word(p, \"fn\"); ast::pure_fn }\n     else if eat_word(p, \"unsafe\") { expect_word(p, \"fn\"); ast::unsafe_fn }\n-    else { unexpected(p, p.token); }\n+    else { unexpected(p); }\n }\n \n fn parse_native_item(p: parser, attrs: [ast::attribute]) ->\n@@ -2738,7 +2741,7 @@ fn parse_crate_directive(p: parser, first_outer_attr: [ast::attribute]) ->\n             ret spanned(lo, hi,\n                         ast::cdir_dir_mod(id, cdirs, mod_attrs));\n           }\n-          t { unexpected(p, t); }\n+          _ { unexpected(p); }\n         }\n     } else if is_view_item(p) {\n         let vi = parse_view_item(p);"}]}