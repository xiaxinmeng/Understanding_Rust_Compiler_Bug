{"sha": "c8c4d85b5014a947f57acd9a1e14b7864689f73d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YzRkODViNTAxNGE5NDdmNTdhY2Q5YTFlMTRiNzg2NDY4OWY3M2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-04T12:19:26Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-05T07:08:32Z"}, "message": "Rollup merge of #22764 - ivanradanov:fileline_help, r=huonw\n\n When warnings and errors occur, the associated help message should not print the same code snippet.\nhttps://github.com/rust-lang/rust/issues/21938", "tree": {"sha": "0050171f1130396271d588b6a44f90f6f712245e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0050171f1130396271d588b6a44f90f6f712245e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8c4d85b5014a947f57acd9a1e14b7864689f73d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c4d85b5014a947f57acd9a1e14b7864689f73d", "html_url": "https://github.com/rust-lang/rust/commit/c8c4d85b5014a947f57acd9a1e14b7864689f73d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8c4d85b5014a947f57acd9a1e14b7864689f73d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4de4234795b9fabe14482f817ab2936a6439b7dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4de4234795b9fabe14482f817ab2936a6439b7dd", "html_url": "https://github.com/rust-lang/rust/commit/4de4234795b9fabe14482f817ab2936a6439b7dd"}, {"sha": "7496539a00b36d86620699576bc7c82ce03dca7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7496539a00b36d86620699576bc7c82ce03dca7e", "html_url": "https://github.com/rust-lang/rust/commit/7496539a00b36d86620699576bc7c82ce03dca7e"}], "stats": {"total": 126, "additions": 76, "deletions": 50}, "files": [{"sha": "8486bf782b00bc1048a34ad6b0020de7be49c3f9", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -354,7 +354,7 @@ impl<'a> Context<'a> {\n             }\n         }\n         if self.rejected_via_kind.len() > 0 {\n-            self.sess.span_help(self.span, \"please recompile this crate using \\\n+            self.sess.fileline_help(self.span, \"please recompile this crate using \\\n                                             --crate-type lib\");\n             let mismatches = self.rejected_via_kind.iter();\n             for (i, &CrateMismatch { ref path, .. }) in mismatches.enumerate() {"}, {"sha": "19a29b8eb1b334d6972b7e32faf06b67aa5f2cfe", "filename": "src/librustc/metadata/macro_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fmacro_import.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'v> Visitor<'v> for MacroLoader<'a> {\n                 }\n                 \"plugin\" => {\n                     self.sess.span_err(attr.span, \"#[plugin] on `extern crate` is deprecated\");\n-                    self.sess.span_help(attr.span, &format!(\"use a crate attribute instead, \\\n+                    self.sess.fileline_help(attr.span, &format!(\"use a crate attribute instead, \\\n                                                             i.e. #![plugin({})]\",\n                                                             item.ident.as_str()));\n                 }"}, {"sha": "10885359985069eabaed3869240966c63f3e049c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -246,7 +246,7 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n                                 \"pattern binding `{}` is named the same as one \\\n                                  of the variants of the type `{}`\",\n                                 &token::get_ident(ident.node), ty_to_string(cx.tcx, pat_ty));\n-                            span_help!(cx.tcx.sess, p.span,\n+                            fileline_help!(cx.tcx.sess, p.span,\n                                 \"if you meant to match on a variant, \\\n                                  consider making the path in the pattern qualified: `{}::{}`\",\n                                 ty_to_string(cx.tcx, pat_ty), &token::get_ident(ident.node));"}, {"sha": "a7f5c2c843711b6aec3a2d2a6fec0ae25156ab56", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -444,7 +444,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                 // Does the required lifetime have a nice name we can print?\n                 span_err!(self.tcx.sess, origin.span(), E0309,\n                     \"{} may not live long enough\", labeled_user_string);\n-                self.tcx.sess.span_help(\n+                self.tcx.sess.fileline_help(\n                     origin.span(),\n                     &format!(\n                         \"consider adding an explicit lifetime bound `{}: {}`...\",\n@@ -456,7 +456,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                 // Does the required lifetime have a nice name we can print?\n                 span_err!(self.tcx.sess, origin.span(), E0310,\n                     \"{} may not live long enough\", labeled_user_string);\n-                self.tcx.sess.span_help(\n+                self.tcx.sess.fileline_help(\n                     origin.span(),\n                     &format!(\n                         \"consider adding an explicit lifetime bound `{}: 'static`...\",\n@@ -468,7 +468,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                 span_err!(self.tcx.sess, origin.span(), E0311,\n                         \"{} may not live long enough\",\n                         labeled_user_string);\n-                self.tcx.sess.span_help(\n+                self.tcx.sess.fileline_help(\n                     origin.span(),\n                     &format!(\n                         \"consider adding an explicit lifetime bound for `{}`\","}, {"sha": "84636ebaae42b608d7ce09f161bfbb5574d7e075", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -165,7 +165,7 @@ fn note_move_destination(bccx: &BorrowckCtxt,\n         bccx.span_note(\n             move_to_span,\n             \"attempting to move value to here\");\n-        bccx.span_help(\n+        bccx.fileline_help(\n             move_to_span,\n             &format!(\"to prevent the move, \\\n                      use `ref {0}` or `ref mut {0}` to capture value by \\"}, {"sha": "42b3555b54edef926dc7d2aadddd436630c4aa9a", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -643,7 +643,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             ol,\n                             moved_lp_msg,\n                             pat_ty.user_string(self.tcx)));\n-                self.tcx.sess.span_help(span,\n+                self.tcx.sess.fileline_help(span,\n                     \"use `ref` to override\");\n             }\n \n@@ -675,7 +675,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                             moved_lp_msg,\n                             expr_ty.user_string(self.tcx),\n                             suggestion));\n-                self.tcx.sess.span_help(expr_span, help);\n+                self.tcx.sess.fileline_help(expr_span, help);\n             }\n         }\n \n@@ -741,6 +741,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         self.tcx.sess.span_help(s, m);\n     }\n \n+    pub fn fileline_help(&self, s: Span, m: &str) {\n+        self.tcx.sess.fileline_help(s, m);\n+    }\n+\n     pub fn bckerr_to_string(&self, err: &BckError<'tcx>) -> String {\n         match err.code {\n             err_mutbl => {\n@@ -870,7 +874,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n \n         if is_closure {\n-            self.tcx.sess.span_help(\n+            self.tcx.sess.fileline_help(\n                 span,\n                 \"closures behind references must be called via `&mut`\");\n         }"}, {"sha": "56b1f269e17872c9a513c8f15185c84c2978ed76", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -1921,7 +1921,8 @@ impl LintPass for UnconditionalRecursion {\n                 for call in &self_call_spans {\n                     sess.span_note(*call, \"recursive call site\")\n                 }\n-                sess.span_help(sp, \"a `loop` may express intention better if this is on purpose\")\n+                sess.fileline_help(sp, \"a `loop` may express intention \\\n+                                        better if this is on purpose\")\n             }\n         }\n "}, {"sha": "0ddfd707f0089391eb1c0b93a9672a7500e17100", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -4115,10 +4115,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                           uses it like a function name\",\n                                          path_name));\n \n-                        self.session.span_help(expr.span,\n-                            &format!(\"Did you mean to write: \\\n-                                     `{} {{ /* fields */ }}`?\",\n-                                     path_name));\n+                        let msg = format!(\"Did you mean to write: \\\n+                                           `{} {{ /* fields */ }}`?\",\n+                                          path_name);\n+                        if self.emit_errors {\n+                            self.session.fileline_help(expr.span, &msg);\n+                        } else {\n+                            self.session.span_help(expr.span, &msg);\n+                        }\n                     } else {\n                         // Write the result into the def map.\n                         debug!(\"(resolving expr) resolved `{}`\",\n@@ -4146,18 +4150,21 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     match type_res.map(|r| r.base_def) {\n                         Some(DefTy(struct_id, _))\n                             if self.structs.contains_key(&struct_id) => {\n-                            self.resolve_error(expr.span,\n+                                self.resolve_error(expr.span,\n                                     &format!(\"`{}` is a structure name, but \\\n                                                 this expression \\\n                                                 uses it like a function name\",\n                                                 path_name));\n \n-                            self.session.span_help(expr.span,\n-                                &format!(\"Did you mean to write: \\\n-                                            `{} {{ /* fields */ }}`?\",\n-                                            path_name));\n-\n-                        }\n+                                let msg = format!(\"Did you mean to write: \\\n+                                                     `{} {{ /* fields */ }}`?\",\n+                                                    path_name);\n+                                if self.emit_errors {\n+                                    self.session.fileline_help(expr.span, &msg);\n+                                } else {\n+                                    self.session.span_help(expr.span, &msg);\n+                                }\n+                            }\n                         _ => {\n                             // Keep reporting some errors even if they're ignored above.\n                             self.resolve_path(expr.id, path, 0, ValueNS, true);"}, {"sha": "b0383e355e489477f2ac37c2612f0d35b1cf701c", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -440,7 +440,7 @@ fn gate_simd_ffi(tcx: &ty::ctxt, decl: &ast::FnDecl, ty: &ty::BareFnTy) {\n                               &format!(\"use of SIMD type `{}` in FFI is highly experimental and \\\n                                         may result in invalid code\",\n                                        pprust::ty_to_string(ast_ty)));\n-                tcx.sess.span_help(ast_ty.span,\n+                tcx.sess.fileline_help(ast_ty.span,\n                                    \"add #![feature(simd_ffi)] to the crate attributes to enable\");\n             }\n         };"}, {"sha": "aba039a8e9dc2ed0acf1ce9fb9cc32b4c36edf56", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -212,18 +212,18 @@ pub fn opt_ast_region_to_region<'tcx>(\n                                 }\n                             }\n                             if len == 1 {\n-                                span_help!(this.tcx().sess, default_span,\n+                                fileline_help!(this.tcx().sess, default_span,\n                                     \"this function's return type contains a borrowed value, but \\\n                                      the signature does not say which {} it is borrowed from\",\n                                     m);\n                             } else if len == 0 {\n-                                span_help!(this.tcx().sess, default_span,\n+                                fileline_help!(this.tcx().sess, default_span,\n                                     \"this function's return type contains a borrowed value, but \\\n                                      there is no value for it to be borrowed from\");\n-                                span_help!(this.tcx().sess, default_span,\n+                                fileline_help!(this.tcx().sess, default_span,\n                                     \"consider giving it a 'static lifetime\");\n                             } else {\n-                                span_help!(this.tcx().sess, default_span,\n+                                fileline_help!(this.tcx().sess, default_span,\n                                     \"this function's return type contains a borrowed value, but \\\n                                      the signature does not say whether it is borrowed from {}\",\n                                     m);\n@@ -705,7 +705,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n                 span_err!(this.tcx().sess, span, E0215,\n                                          \"angle-bracket notation is not stable when \\\n                                          used with the `Fn` family of traits, use parentheses\");\n-                span_help!(this.tcx().sess, span,\n+                fileline_help!(this.tcx().sess, span,\n                            \"add `#![feature(unboxed_closures)]` to \\\n                             the crate attributes to enable\");\n             }\n@@ -719,7 +719,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n                 span_err!(this.tcx().sess, span, E0216,\n                                          \"parenthetical notation is only stable when \\\n                                          used with the `Fn` family of traits\");\n-                span_help!(this.tcx().sess, span,\n+                fileline_help!(this.tcx().sess, span,\n                            \"add `#![feature(unboxed_closures)]` to \\\n                             the crate attributes to enable\");\n             }\n@@ -944,14 +944,14 @@ fn ast_ty_to_trait_ref<'tcx>(this: &AstConv<'tcx>,\n                       pprust::ty_to_string(ty));\n             match ty.node {\n                 ast::TyRptr(None, ref mut_ty) => {\n-                    span_help!(this.tcx().sess, ty.span,\n+                    fileline_help!(this.tcx().sess, ty.span,\n                                \"perhaps you meant `&{}({} +{})`? (per RFC 438)\",\n                                ppaux::mutability_to_string(mut_ty.mutbl),\n                                pprust::ty_to_string(&*mut_ty.ty),\n                                pprust::bounds_to_string(bounds));\n                 }\n                ast::TyRptr(Some(ref lt), ref mut_ty) => {\n-                    span_help!(this.tcx().sess, ty.span,\n+                    fileline_help!(this.tcx().sess, ty.span,\n                                \"perhaps you meant `&{} {}({} +{})`? (per RFC 438)\",\n                                pprust::lifetime_to_string(lt),\n                                ppaux::mutability_to_string(mut_ty.mutbl),\n@@ -960,7 +960,7 @@ fn ast_ty_to_trait_ref<'tcx>(this: &AstConv<'tcx>,\n                 }\n \n                 _ => {\n-                    span_help!(this.tcx().sess, ty.span,\n+                    fileline_help!(this.tcx().sess, ty.span,\n                                \"perhaps you forgot parentheses? (per RFC 438)\");\n                 }\n             }"}, {"sha": "6ba21e25e1fe5c62d48f4ca1c1f65465893005a5", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -63,7 +63,7 @@ pub fn check_legal_trait_for_method_call(ccx: &CrateCtxt, span: Span, trait_id:\n         span_err!(tcx.sess, span, E0174,\n                   \"explicit use of unboxed closure method `{}` is experimental\",\n                   method);\n-        span_help!(tcx.sess, span,\n+        fileline_help!(tcx.sess, span,\n                    \"add `#![feature(unboxed_closures)]` to the crate attributes to enable\");\n     }\n }"}, {"sha": "48fb12ce833fff5ce6d328da2503afb9cb22dbc3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -3098,7 +3098,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                 },\n                 expr_t, None);\n \n-            tcx.sess.span_help(field.span,\n+            tcx.sess.fileline_help(field.span,\n                                \"maybe a `()` to call it is missing? \\\n                                If not, try an anonymous function\");\n         } else {\n@@ -4480,7 +4480,7 @@ pub fn check_instantiable(tcx: &ty::ctxt,\n         span_err!(tcx.sess, sp, E0073,\n             \"this type cannot be instantiated without an \\\n              instance of itself\");\n-        span_help!(tcx.sess, sp, \"consider using `Option<{}>`\",\n+        fileline_help!(tcx.sess, sp, \"consider using `Option<{}>`\",\n             ppaux::ty_to_string(tcx, item_ty));\n         false\n     } else {"}, {"sha": "ee567575106231f91ac185ea811b1ccf295bafa8", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -400,7 +400,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n \n         match suggested_marker_id {\n             Some(def_id) => {\n-                self.tcx().sess.span_help(\n+                self.tcx().sess.fileline_help(\n                     span,\n                     format!(\"consider removing `{}` or using a marker such as `{}`\",\n                             param_name.user_string(self.tcx()),"}, {"sha": "9a8545f3dd5159c87a33d06a9bbabf9bdad64afe", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -524,7 +524,7 @@ fn enforce_trait_manually_implementable(tcx: &ty::ctxt, sp: Span, trait_def_id:\n         return // everything OK\n     };\n     span_err!(tcx.sess, sp, E0183, \"manual implementations of `{}` are experimental\", trait_name);\n-    span_help!(tcx.sess, sp,\n+    fileline_help!(tcx.sess, sp,\n                \"add `#![feature(unboxed_closures)]` to the crate attributes to enable\");\n }\n "}, {"sha": "9e63382acb1bd42211a8bd7076df004f60d169ee", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -1217,7 +1217,7 @@ fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             it.span,\n             \"the `#[rustc_paren_sugar]` attribute is a temporary means of controlling \\\n              which traits can use parenthetical notation\");\n-        span_help!(ccx.tcx.sess, it.span,\n+        fileline_help!(ccx.tcx.sess, it.span,\n                    \"add `#![feature(unboxed_closures)]` to \\\n                     the crate attributes to use it\");\n     }"}, {"sha": "055ade46a3f01ab482ce08674ca5cb0eb9462f1b", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -52,6 +52,13 @@ macro_rules! span_help {\n     })\n }\n \n+#[macro_export]\n+macro_rules! fileline_help {\n+    ($session:expr, $span:expr, $($message:tt)*) => ({\n+        ($session).fileline_help($span, &format!($($message)*))\n+    })\n+}\n+\n #[macro_export]\n macro_rules! register_diagnostics {\n     ($($code:tt),*) => ("}, {"sha": "a8c35c1fdb14b782b273c1bec2bc685449386dfe", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -753,6 +753,10 @@ impl<'a> ExtCtxt<'a> {\n         self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_help(sp, msg);\n     }\n+    pub fn fileline_help(&self, sp: Span, msg: &str) {\n+        self.print_backtrace();\n+        self.parse_sess.span_diagnostic.fileline_help(sp, msg);\n+    }\n     pub fn bug(&self, msg: &str) -> ! {\n         self.print_backtrace();\n         self.parse_sess.span_diagnostic.handler().bug(msg);"}, {"sha": "8896a8e0c4fd9a0af941a38b5cfa891a868379d4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -571,7 +571,7 @@ fn contains_macro_use(fld: &mut MacroExpander, attrs: &[ast::Attribute]) -> bool\n             fld.cx.span_warn(attr.span, \"macro_escape is a deprecated synonym for macro_use\");\n             is_use = true;\n             if let ast::AttrInner = attr.node.style {\n-                fld.cx.span_help(attr.span, \"consider an outer attribute, \\\n+                fld.cx.fileline_help(attr.span, \"consider an outer attribute, \\\n                                              #[macro_use] mod ...\");\n             }\n         };"}, {"sha": "c2ad8554674c0f951e5dab72124b3a909bb0935e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -362,15 +362,15 @@ impl<'a> Context<'a> {\n \n pub fn emit_feature_err(diag: &SpanHandler, feature: &str, span: Span, explain: &str) {\n     diag.span_err(span, explain);\n-    diag.span_help(span, &format!(\"add #![feature({})] to the \\\n+    diag.fileline_help(span, &format!(\"add #![feature({})] to the \\\n                                    crate attributes to enable\",\n                                   feature));\n }\n \n pub fn emit_feature_warn(diag: &SpanHandler, feature: &str, span: Span, explain: &str) {\n     diag.span_warn(span, explain);\n     if diag.handler.can_emit_warnings {\n-        diag.span_help(span, &format!(\"add #![feature({})] to the \\\n+        diag.fileline_help(span, &format!(\"add #![feature({})] to the \\\n                                        crate attributes to silence this warning\",\n                                       feature));\n     }"}, {"sha": "db5583cf13ac193e119436b1c9ca512f798272c6", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -77,7 +77,7 @@ impl<'a> ParserAttr for Parser<'a> {\n                         self.span_err(span,\n                                       \"an inner attribute is not permitted in \\\n                                        this context\");\n-                        self.span_help(span,\n+                        self.fileline_help(span,\n                                        \"place inner attribute at the top of the module or block\");\n                     }\n                     ast::AttrInner"}, {"sha": "72ff501c6481eb2c2627dcca68e26c97d59dd227", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -781,7 +781,7 @@ impl<'a> StringReader<'a> {\n         self.span_diagnostic\n             .span_warn(sp, \"\\\\U00ABCD12 and \\\\uABCD escapes are deprecated\");\n         self.span_diagnostic\n-            .span_help(sp, \"use \\\\u{ABCD12} escapes instead\");\n+            .fileline_help(sp, \"use \\\\u{ABCD12} escapes instead\");\n     }\n \n     /// Scan for a single (possibly escaped) byte or char"}, {"sha": "58d58551df363715365f717735e0770acbe13284", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -724,7 +724,7 @@ pub fn integer_lit(s: &str, suffix: Option<&str>, sd: &SpanHandler, sp: Span) ->\n                                               &suf[1..]));\n                 } else {\n                     sd.span_err(sp, &*format!(\"illegal suffix `{}` for numeric literal\", suf));\n-                    sd.span_help(sp, \"the suffix must be one of the integral types \\\n+                    sd.fileline_help(sp, \"the suffix must be one of the integral types \\\n                                       (`u32`, `isize`, etc)\");\n                 }\n "}, {"sha": "28d757e9be96397b2cd7d85771dc941fd0dd1e58", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c4d85b5014a947f57acd9a1e14b7864689f73d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c8c4d85b5014a947f57acd9a1e14b7864689f73d", "patch": "@@ -974,7 +974,7 @@ impl<'a> Parser<'a> {\n     }\n     pub fn span_fatal_help(&self, sp: Span, m: &str, help: &str) -> ! {\n         self.span_err(sp, m);\n-        self.span_help(sp, help);\n+        self.fileline_help(sp, help);\n         panic!(diagnostic::FatalError);\n     }\n     pub fn span_note(&self, sp: Span, m: &str) {\n@@ -983,6 +983,9 @@ impl<'a> Parser<'a> {\n     pub fn span_help(&self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.span_help(sp, m)\n     }\n+    pub fn fileline_help(&self, sp: Span, m: &str) {\n+        self.sess.span_diagnostic.fileline_help(sp, m)\n+    }\n     pub fn bug(&self, m: &str) -> ! {\n         self.sess.span_diagnostic.span_bug(self.span, m)\n     }\n@@ -2532,7 +2535,7 @@ impl<'a> Parser<'a> {\n                             Some(f) => f,\n                             None => continue,\n                         };\n-                        self.span_help(last_span,\n+                        self.fileline_help(last_span,\n                             &format!(\"try parenthesizing the first index; e.g., `(foo.{}){}`\",\n                                     float.trunc() as usize,\n                                     &float.fract().to_string()[1..]));\n@@ -2943,7 +2946,7 @@ impl<'a> Parser<'a> {\n                 self.span_err(op_span,\n                     \"chained comparison operators require parentheses\");\n                 if op.node == BiLt && outer_op == BiGt {\n-                    self.span_help(op_span,\n+                    self.fileline_help(op_span,\n                         \"use `::<...>` instead of `<...>` if you meant to specify type arguments\");\n                 }\n             }\n@@ -4699,7 +4702,7 @@ impl<'a> Parser<'a> {\n         match visa {\n             Public => {\n                 self.span_err(span, \"can't qualify macro invocation with `pub`\");\n-                self.span_help(span, \"try adjusting the macro to put `pub` inside \\\n+                self.fileline_help(span, \"try adjusting the macro to put `pub` inside \\\n                                       the invocation\");\n             }\n             Inherited => (),\n@@ -5445,7 +5448,7 @@ impl<'a> Parser<'a> {\n                     if self.token.is_ident() { self.bump(); }\n \n                     self.span_err(span, \"expected `;`, found `as`\");\n-                    self.span_help(span,\n+                    self.fileline_help(span,\n                                    &format!(\"perhaps you meant to enclose the crate name `{}` in \\\n                                            a string?\",\n                                           the_ident.as_str()));\n@@ -5756,7 +5759,7 @@ impl<'a> Parser<'a> {\n             if self.eat_keyword(keywords::Mut) {\n                 let last_span = self.last_span;\n                 self.span_err(last_span, \"const globals cannot be mutable\");\n-                self.span_help(last_span, \"did you mean to declare a static?\");\n+                self.fileline_help(last_span, \"did you mean to declare a static?\");\n             }\n             let (ident, item_, extra_attrs) = self.parse_item_const(None);\n             let last_span = self.last_span;"}]}