{"sha": "42a44191203e43c8fa7040992715aeb17476fb47", "node_id": "C_kwDOAAsO6NoAKDQyYTQ0MTkxMjAzZTQzYzhmYTcwNDA5OTI3MTVhZWIxNzQ3NmZiNDc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-24T21:25:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-24T21:27:03Z"}, "message": "Do not prefer module parents which are `doc(hidden)` in visibility map", "tree": {"sha": "427fa33f9d6981967037c56609374c119d7730b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/427fa33f9d6981967037c56609374c119d7730b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42a44191203e43c8fa7040992715aeb17476fb47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42a44191203e43c8fa7040992715aeb17476fb47", "html_url": "https://github.com/rust-lang/rust/commit/42a44191203e43c8fa7040992715aeb17476fb47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42a44191203e43c8fa7040992715aeb17476fb47/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d1100fa79e5dcd35a5af387e05135e2c716c032", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1100fa79e5dcd35a5af387e05135e2c716c032", "html_url": "https://github.com/rust-lang/rust/commit/6d1100fa79e5dcd35a5af387e05135e2c716c032"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "6bf237b8ed5dfc5482e3fa76b1408b050768980b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42a44191203e43c8fa7040992715aeb17476fb47/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42a44191203e43c8fa7040992715aeb17476fb47/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=42a44191203e43c8fa7040992715aeb17476fb47", "patch": "@@ -375,9 +375,13 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n             use std::collections::vec_deque::VecDeque;\n \n             let mut visible_parent_map: DefIdMap<DefId> = Default::default();\n-            // This is a secondary visible_parent_map, storing the DefId of parents that re-export\n-            // the child as `_`. Since we prefer parents that don't do this, merge this map at the\n-            // end, only if we're missing any keys from the former.\n+            // This is a secondary visible_parent_map, storing the DefId of\n+            // parents that re-export the child as `_` or module parents\n+            // which are `#[doc(hidden)]`. Since we prefer paths that don't\n+            // do this, merge this map at the end, only if we're missing\n+            // keys from the former.\n+            // This is a rudimentary check that does not catch all cases,\n+            // just the easiest.\n             let mut fallback_map: DefIdMap<DefId> = Default::default();\n \n             // Issue 46112: We want the map to prefer the shortest\n@@ -412,6 +416,11 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                         return;\n                     }\n \n+                    if ty::util::is_doc_hidden(tcx, parent) {\n+                        fallback_map.insert(def_id, parent);\n+                        return;\n+                    }\n+\n                     match visible_parent_map.entry(def_id) {\n                         Entry::Occupied(mut entry) => {\n                             // If `child` is defined in crate `cnum`, ensure\n@@ -439,8 +448,9 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                 }\n             }\n \n-            // Fill in any missing entries with the (less preferable) path ending in `::_`.\n-            // We still use this path in a diagnostic that suggests importing `::*`.\n+            // Fill in any missing entries with the less preferable path.\n+            // If this path re-exports the child as `_`, we still use this\n+            // path in a diagnostic that suggests importing `::*`.\n             for (child, parent) in fallback_map {\n                 visible_parent_map.entry(child).or_insert(parent);\n             }"}, {"sha": "d92b8127910141c9a703d6afd543a1148dfa8773", "filename": "src/test/ui/suggestions/dont-suggest-doc-hidden-variant-for-enum/hidden-parent.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42a44191203e43c8fa7040992715aeb17476fb47/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-doc-hidden-variant-for-enum%2Fhidden-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42a44191203e43c8fa7040992715aeb17476fb47/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-doc-hidden-variant-for-enum%2Fhidden-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-doc-hidden-variant-for-enum%2Fhidden-parent.stderr?ref=42a44191203e43c8fa7040992715aeb17476fb47", "patch": "@@ -8,10 +8,10 @@ LL |     let x: Option<i32> = 1i32;\n    |\n    = note: expected enum `Option<i32>`\n               found type `i32`\n-help: try wrapping the expression in `hidden_parent::__private::Some`\n+help: try wrapping the expression in `Some`\n    |\n-LL |     let x: Option<i32> = hidden_parent::__private::Some(1i32);\n-   |                          +++++++++++++++++++++++++++++++    +\n+LL |     let x: Option<i32> = Some(1i32);\n+   |                          +++++    +\n \n error: aborting due to previous error\n "}]}