{"sha": "a718051f63308638ecf40a7570dbd18f4fc99703", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MTgwNTFmNjMzMDg2MzhlY2Y0MGE3NTcwZGJkMThmNGZjOTk3MDM=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-03-21T01:38:03Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-03-21T19:46:20Z"}, "message": "Unit test heapsort", "tree": {"sha": "4a0c488b1fa8fcef586b4fc81459675435134e60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a0c488b1fa8fcef586b4fc81459675435134e60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a718051f63308638ecf40a7570dbd18f4fc99703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a718051f63308638ecf40a7570dbd18f4fc99703", "html_url": "https://github.com/rust-lang/rust/commit/a718051f63308638ecf40a7570dbd18f4fc99703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a718051f63308638ecf40a7570dbd18f4fc99703/comments", "author": null, "committer": null, "parents": [{"sha": "a18b2aa641da7c000fea9e9ac62d2da89fa034ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/a18b2aa641da7c000fea9e9ac62d2da89fa034ad", "html_url": "https://github.com/rust-lang/rust/commit/a18b2aa641da7c000fea9e9ac62d2da89fa034ad"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "6f8b199f886b71e77380566d8a79c7e012d9f87e", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a718051f63308638ecf40a7570dbd18f4fc99703/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a718051f63308638ecf40a7570dbd18f4fc99703/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=a718051f63308638ecf40a7570dbd18f4fc99703", "patch": "@@ -2253,6 +2253,15 @@ pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n     mem::transmute(Repr { data: p, len: len })\n }\n \n+// This function is public only because there is no other way to unit test heapsort.\n+#[unstable(feature = \"sort_internals\", reason = \"internal to sort module\", issue = \"0\")]\n+#[doc(hidden)]\n+pub fn heapsort<T, F>(v: &mut [T], mut is_less: F)\n+    where F: FnMut(&T, &T) -> bool\n+{\n+    sort::heapsort(v, &mut is_less);\n+}\n+\n //\n // Comparison traits\n //"}, {"sha": "fdfba33f8a9d951cac86bf639a736a43dc487ba9", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a718051f63308638ecf40a7570dbd18f4fc99703/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a718051f63308638ecf40a7570dbd18f4fc99703/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=a718051f63308638ecf40a7570dbd18f4fc99703", "patch": "@@ -57,7 +57,7 @@ fn shift_head<T, F>(v: &mut [T], is_less: &mut F)\n             ptr::copy_nonoverlapping(v.get_unchecked(1), v.get_unchecked_mut(0), 1);\n \n             for i in 2..len {\n-                if !is_less(&v[i], &tmp.value) {\n+                if !is_less(v.get_unchecked(i), &tmp.value) {\n                     break;\n                 }\n \n@@ -159,7 +159,7 @@ fn insertion_sort<T, F>(v: &mut [T], is_less: &mut F)\n \n /// Sorts `v` using heapsort, which guarantees `O(n log n)` worst-case.\n #[cold]\n-fn heapsort<T, F>(v: &mut [T], is_less: &mut F)\n+pub fn heapsort<T, F>(v: &mut [T], is_less: &mut F)\n     where F: FnMut(&T, &T) -> bool\n {\n     // This binary heap respects the invariant `parent >= child`."}, {"sha": "d92c378160d2e0e4ba3eabcc5fcdc813675b07c4", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a718051f63308638ecf40a7570dbd18f4fc99703/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a718051f63308638ecf40a7570dbd18f4fc99703/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=a718051f63308638ecf40a7570dbd18f4fc99703", "patch": "@@ -26,6 +26,7 @@\n #![feature(raw)]\n #![feature(sip_hash_13)]\n #![feature(slice_patterns)]\n+#![feature(sort_internals)]\n #![feature(sort_unstable)]\n #![feature(step_by)]\n #![feature(test)]"}, {"sha": "89bd3be08519ccd1259f808b7f8b8aafdee42acc", "filename": "src/libcoretest/slice.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a718051f63308638ecf40a7570dbd18f4fc99703/src%2Flibcoretest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a718051f63308638ecf40a7570dbd18f4fc99703/src%2Flibcoretest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fslice.rs?ref=a718051f63308638ecf40a7570dbd18f4fc99703", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::slice::heapsort;\n use core::result::Result::{Ok, Err};\n use rand::{Rng, XorShiftRng};\n \n@@ -226,26 +227,43 @@ fn get_unchecked_mut_range() {\n #[test]\n fn sort_unstable() {\n     let mut v = [0; 600];\n-    let mut v1 = [0; 600];\n+    let mut tmp = [0; 600];\n     let mut rng = XorShiftRng::new_unseeded();\n \n     for len in (2..25).chain(500..510) {\n-        for &modulus in &[10, 1000] {\n+        let v = &mut v[0..len];\n+        let tmp = &mut tmp[0..len];\n+\n+        for &modulus in &[5, 10, 100, 1000] {\n             for _ in 0..100 {\n                 for i in 0..len {\n-                    let num = rng.gen::<i32>() % modulus;\n-                    v[i] = num;\n-                    v1[i] = num;\n+                    v[i] = rng.gen::<i32>() % modulus;\n                 }\n \n-                v.sort_unstable();\n-                assert!(v.windows(2).all(|w| w[0] <= w[1]));\n-\n-                v1.sort_unstable_by(|a, b| a.cmp(b));\n-                assert!(v1.windows(2).all(|w| w[0] <= w[1]));\n-\n-                v1.sort_unstable_by(|a, b| b.cmp(a));\n-                assert!(v1.windows(2).all(|w| w[0] >= w[1]));\n+                // Sort in default order.\n+                tmp.copy_from_slice(v);\n+                tmp.sort_unstable();\n+                assert!(tmp.windows(2).all(|w| w[0] <= w[1]));\n+\n+                // Sort in ascending order.\n+                tmp.copy_from_slice(v);\n+                tmp.sort_unstable_by(|a, b| a.cmp(b));\n+                assert!(tmp.windows(2).all(|w| w[0] <= w[1]));\n+\n+                // Sort in descending order.\n+                tmp.copy_from_slice(v);\n+                tmp.sort_unstable_by(|a, b| b.cmp(a));\n+                assert!(tmp.windows(2).all(|w| w[0] >= w[1]));\n+\n+                // Test heapsort using `<` operator.\n+                tmp.copy_from_slice(v);\n+                heapsort(tmp, |a, b| a < b);\n+                assert!(tmp.windows(2).all(|w| w[0] <= w[1]));\n+\n+                // Test heapsort using `>` operator.\n+                tmp.copy_from_slice(v);\n+                heapsort(tmp, |a, b| a > b);\n+                assert!(tmp.windows(2).all(|w| w[0] >= w[1]));\n             }\n         }\n     }"}]}