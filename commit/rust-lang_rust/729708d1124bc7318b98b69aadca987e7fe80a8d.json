{"sha": "729708d1124bc7318b98b69aadca987e7fe80a8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOTcwOGQxMTI0YmM3MzE4Yjk4YjY5YWFkY2E5ODdlN2ZlODBhOGQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-02T15:11:15Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-15T03:10:46Z"}, "message": "rustc: rename ty::method to ty::Method and add ctor", "tree": {"sha": "cad4e5943bc14d4747fa025aefe991a32be0e74a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cad4e5943bc14d4747fa025aefe991a32be0e74a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/729708d1124bc7318b98b69aadca987e7fe80a8d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/729708d1124bc7318b98b69aadca987e7fe80a8d", "html_url": "https://github.com/rust-lang/rust/commit/729708d1124bc7318b98b69aadca987e7fe80a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/729708d1124bc7318b98b69aadca987e7fe80a8d/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18f6a51d0ae87fbd4b8e62c567d121aa065dc4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/18f6a51d0ae87fbd4b8e62c567d121aa065dc4d3", "html_url": "https://github.com/rust-lang/rust/commit/18f6a51d0ae87fbd4b8e62c567d121aa065dc4d3"}], "stats": {"total": 184, "additions": 108, "deletions": 76}, "files": [{"sha": "e6b8432854d32d32e5b93fd7b06ffb050799f81c", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=729708d1124bc7318b98b69aadca987e7fe80a8d", "patch": "@@ -22,7 +22,7 @@ use syntax::ast_map;\n use syntax::diagnostic::expect;\n \n pub struct ProvidedTraitMethodInfo {\n-    ty: ty::method,\n+    ty: ty::Method,\n     def_id: ast::def_id\n }\n \n@@ -129,7 +129,7 @@ pub fn get_impls_for_mod(cstore: @mut cstore::CStore, def: ast::def_id,\n }\n \n pub fn get_method(tcx: ty::ctxt,\n-                  def: ast::def_id) -> ty::method\n+                  def: ast::def_id) -> ty::Method\n {\n     let cdata = cstore::get_crate_data(tcx.cstore, def.crate);\n     decoder::get_method(tcx.cstore.intr, cdata, def.node, tcx)"}, {"sha": "48bfe209f1fddecd0b4be504681ebf5cb26159e6", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=729708d1124bc7318b98b69aadca987e7fe80a8d", "patch": "@@ -760,7 +760,7 @@ pub fn get_method_name_and_explicit_self(\n }\n \n pub fn get_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n-                  tcx: ty::ctxt) -> ty::method\n+                  tcx: ty::ctxt) -> ty::Method\n {\n     let method_doc = lookup_item(id, cdata.data);\n     let def_id = item_def_id(method_doc, cdata);\n@@ -771,18 +771,19 @@ pub fn get_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n     let fty = doc_method_fty(method_doc, tcx, cdata);\n     let vis = item_visibility(method_doc);\n     let explicit_self = get_explicit_self(method_doc);\n-    ty::method {\n-        ident: name,\n-        generics: ty::Generics {\n+\n+    ty::Method::new(\n+        name,\n+        ty::Generics {\n             type_param_defs: type_param_defs,\n             region_param: None\n         },\n-        transformed_self_ty: transformed_self_ty,\n-        fty: fty,\n-        explicit_self: explicit_self,\n-        vis: vis,\n-        def_id: def_id\n-    }\n+        transformed_self_ty,\n+        fty,\n+        explicit_self,\n+        vis,\n+        def_id\n+    )\n }\n \n pub fn get_trait_method_def_ids(cdata: cmd,\n@@ -824,18 +825,19 @@ pub fn get_provided_trait_methods(intr: @ident_interner, cdata: cmd,\n \n         let transformed_self_ty = doc_transformed_self_ty(mth, tcx, cdata);\n         let explicit_self = get_explicit_self(mth);\n-        let ty_method = ty::method {\n-            ident: name,\n-            generics: ty::Generics {\n+\n+        let ty_method = ty::Method::new(\n+            name,\n+            ty::Generics {\n                 type_param_defs: type_param_defs,\n                 region_param: None\n             },\n-            transformed_self_ty: transformed_self_ty,\n-            fty: fty,\n-            explicit_self: explicit_self,\n-            vis: ast::public,\n-            def_id: did\n-        };\n+            transformed_self_ty,\n+            fty,\n+            explicit_self,\n+            ast::public,\n+            did\n+        );\n         let provided_trait_method_info = ProvidedTraitMethodInfo {\n             ty: ty_method,\n             def_id: did"}, {"sha": "d27bfd081bc65708fe2ebcbce6fa7b99efdf12dc", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=729708d1124bc7318b98b69aadca987e7fe80a8d", "patch": "@@ -366,7 +366,7 @@ fn encode_path(ecx: @EncodeContext,\n fn encode_reexported_static_method(ecx: @EncodeContext,\n                                    ebml_w: &mut writer::Encoder,\n                                    exp: &middle::resolve::Export2,\n-                                   m: @ty::method) {\n+                                   m: @ty::Method) {\n     debug!(\"(encode static trait method) reexport '%s::%s'\",\n             *exp.name, *ecx.tcx.sess.str_of(m.ident));\n     ebml_w.start_tag(tag_items_data_item_reexport);\n@@ -625,7 +625,7 @@ fn encode_info_for_struct_ctor(ecx: @EncodeContext,\n \n fn encode_method_ty_fields(ecx: @EncodeContext,\n                            ebml_w: &mut writer::Encoder,\n-                           method_ty: &ty::method) {\n+                           method_ty: &ty::Method) {\n     encode_def_id(ebml_w, method_ty.def_id);\n     encode_name(ecx, ebml_w, method_ty.ident);\n     encode_ty_type_param_defs(ebml_w, ecx,\n@@ -652,7 +652,7 @@ fn encode_info_for_method(ecx: @EncodeContext,\n     ebml_w.start_tag(tag_items_data_item);\n \n     let method_def_id = local_def(m.id);\n-    let method_ty: @ty::method = ty::method(ecx.tcx, method_def_id);\n+    let method_ty = ty::method(ecx.tcx, method_def_id);\n     encode_method_ty_fields(ecx, ebml_w, method_ty);\n \n     match m.explicit_self.node {\n@@ -948,7 +948,7 @@ fn encode_info_for_item(ecx: @EncodeContext,\n         for ty::trait_method_def_ids(tcx, local_def(item.id)).eachi |i, &method_def_id| {\n             assert!(method_def_id.crate == ast::local_crate);\n \n-            let method_ty: @ty::method = ty::method(tcx, method_def_id);\n+            let method_ty = ty::method(tcx, method_def_id);\n \n             index.push(entry {val: method_def_id.node, pos: ebml_w.writer.tell()});\n "}, {"sha": "714444af7b2088e11337e9dd0389c371d1666b12", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=729708d1124bc7318b98b69aadca987e7fe80a8d", "patch": "@@ -35,7 +35,7 @@ use syntax::parse::token::special_idents;\n \n pub struct Reflector {\n     visitor_val: ValueRef,\n-    visitor_methods: @~[@ty::method],\n+    visitor_methods: @~[@ty::Method],\n     final_bcx: block,\n     tydesc_ty: TypeRef,\n     bcx: block"}, {"sha": "f10ec1d7ac7f3c995da57868f34f4e5a324973e2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=729708d1124bc7318b98b69aadca987e7fe80a8d", "patch": "@@ -53,7 +53,7 @@ pub struct field {\n     mt: mt\n }\n \n-pub struct method {\n+pub struct Method {\n     ident: ast::ident,\n     generics: ty::Generics,\n     transformed_self_ty: Option<ty::t>,\n@@ -63,6 +63,33 @@ pub struct method {\n     def_id: ast::def_id\n }\n \n+pub impl Method {\n+    fn new(ident: ast::ident,\n+           generics: ty::Generics,\n+           transformed_self_ty: Option<ty::t>,\n+           fty: BareFnTy,\n+           explicit_self: ast::explicit_self_,\n+           vis: ast::visibility,\n+           def_id: ast::def_id) -> Method {\n+        // Check the invariants.\n+        if explicit_self == ast::sty_static {\n+            assert!(transformed_self_ty.is_none());\n+        } else {\n+            assert!(transformed_self_ty.is_some());\n+        }\n+\n+       Method {\n+            ident: ident,\n+            generics: generics,\n+            transformed_self_ty: transformed_self_ty,\n+            fty: fty,\n+            explicit_self: explicit_self,\n+            vis: vis,\n+            def_id: def_id\n+        }\n+    }\n+}\n+\n #[deriving(Eq)]\n pub struct mt {\n     ty: t,\n@@ -254,13 +281,13 @@ struct ctxt_ {\n     node_type_substs: @mut HashMap<node_id, ~[t]>,\n \n     // Maps from a method to the method \"descriptor\"\n-    methods: @mut HashMap<def_id, @method>,\n+    methods: @mut HashMap<def_id, @Method>,\n \n     // Maps from a trait def-id to a list of the def-ids of its methods\n     trait_method_def_ids: @mut HashMap<def_id, @~[def_id]>,\n \n     // A cache for the trait_methods() routine\n-    trait_methods_cache: @mut HashMap<def_id, @~[@method]>,\n+    trait_methods_cache: @mut HashMap<def_id, @~[@Method]>,\n \n     trait_refs: @mut HashMap<node_id, @TraitRef>,\n     trait_defs: @mut HashMap<def_id, @TraitDef>,\n@@ -3498,7 +3525,7 @@ pub fn field_idx_strict(tcx: ty::ctxt, id: ast::ident, fields: &[field])\n         fields.map(|f| tcx.sess.str_of(f.ident))));\n }\n \n-pub fn method_idx(id: ast::ident, meths: &[@method]) -> Option<uint> {\n+pub fn method_idx(id: ast::ident, meths: &[@Method]) -> Option<uint> {\n     vec::position(meths, |m| m.ident == id)\n }\n \n@@ -3822,12 +3849,12 @@ fn lookup_locally_or_in_crate_store<V:Copy>(\n     return v;\n }\n \n-pub fn trait_method(cx: ctxt, trait_did: ast::def_id, idx: uint) -> @method {\n+pub fn trait_method(cx: ctxt, trait_did: ast::def_id, idx: uint) -> @Method {\n     let method_def_id = ty::trait_method_def_ids(cx, trait_did)[idx];\n     ty::method(cx, method_def_id)\n }\n \n-pub fn trait_methods(cx: ctxt, trait_did: ast::def_id) -> @~[@method] {\n+pub fn trait_methods(cx: ctxt, trait_did: ast::def_id) -> @~[@Method] {\n     match cx.trait_methods_cache.find(&trait_did) {\n         Some(&methods) => methods,\n         None => {\n@@ -3839,7 +3866,7 @@ pub fn trait_methods(cx: ctxt, trait_did: ast::def_id) -> @~[@method] {\n     }\n }\n \n-pub fn method(cx: ctxt, id: ast::def_id) -> @method {\n+pub fn method(cx: ctxt, id: ast::def_id) -> @Method {\n     lookup_locally_or_in_crate_store(\n         \"methods\", id, cx.methods,\n         || @csearch::get_method(cx, id))"}, {"sha": "9e8103f4527f6fabf46a76919280f63bd6910ccc", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=729708d1124bc7318b98b69aadca987e7fe80a8d", "patch": "@@ -170,7 +170,7 @@ pub struct LookupContext<'self> {\n pub struct Candidate {\n     rcvr_ty: ty::t,\n     rcvr_substs: ty::substs,\n-    method_ty: @ty::method,\n+    method_ty: @ty::Method,\n     origin: method_origin,\n }\n \n@@ -469,7 +469,7 @@ pub impl<'self> LookupContext<'self> {\n                                           did: def_id,\n                                           substs: &ty::substs) {\n         struct MethodInfo {\n-            method_ty: @ty::method,\n+            method_ty: @ty::Method,\n             trait_def_id: ast::def_id,\n             index: uint\n         }"}, {"sha": "c64a0235eb1f0db6a25b4f23c72987bab65d28c5", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=729708d1124bc7318b98b69aadca987e7fe80a8d", "patch": "@@ -527,7 +527,7 @@ pub impl CoherenceChecker {\n     #[cfg(stage0)]\n     fn each_provided_trait_method(&self,\n             trait_did: ast::def_id,\n-            f: &fn(x: @ty::method) -> bool) {\n+            f: &fn(@ty::Method) -> bool) {\n         // Make a list of all the names of the provided methods.\n         // XXX: This is horrible.\n         let mut provided_method_idents = HashSet::new();\n@@ -547,7 +547,7 @@ pub impl CoherenceChecker {\n     #[cfg(not(stage0))]\n     fn each_provided_trait_method(&self,\n             trait_did: ast::def_id,\n-            f: &fn(x: @ty::method) -> bool) -> bool {\n+            f: &fn(x: @ty::Method) -> bool) -> bool {\n         // Make a list of all the names of the provided methods.\n         // XXX: This is horrible.\n         let mut provided_method_idents = HashSet::new();\n@@ -1073,7 +1073,7 @@ fn subst_receiver_types_in_method_ty(\n     impl_id: ast::node_id,\n     trait_ref: &ty::TraitRef,\n     new_def_id: ast::def_id,\n-    method: &ty::method) -> ty::method\n+    method: &ty::Method) -> ty::Method\n {\n     /*!\n      * Substitutes the values for the receiver's type parameters\n@@ -1117,19 +1117,22 @@ fn subst_receiver_types_in_method_ty(\n         tps: combined_tps\n     };\n \n-    ty::method {\n-        ident: method.ident,\n+    ty::Method::new(\n+        method.ident,\n+\n+        // method types *can* appear in the generic bounds\n+        method.generics.subst(tcx, &combined_substs),\n \n         // method tps cannot appear in the self_ty, so use `substs` from trait ref\n-        transformed_self_ty: method.transformed_self_ty.subst(tcx, &trait_ref.substs),\n-\n-        // method types *can* appear in the generic bounds or the fty\n-        generics: method.generics.subst(tcx, &combined_substs),\n-        fty: method.fty.subst(tcx, &combined_substs),\n-        explicit_self: method.explicit_self,\n-        vis: method.vis,\n-        def_id: new_def_id\n-    }\n+        method.transformed_self_ty.subst(tcx, &trait_ref.substs),\n+\n+        // method types *can* appear in the fty\n+        method.fty.subst(tcx, &combined_substs),\n+\n+        method.explicit_self,\n+        method.vis,\n+        new_def_id\n+    )\n }\n \n pub fn check_coherence(crate_context: @mut CrateCtxt, crate: @crate) {"}, {"sha": "39305dc62b18ba81c3cff148476e8cadaac3d027", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=729708d1124bc7318b98b69aadca987e7fe80a8d", "patch": "@@ -227,7 +227,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n         }, _) => {\n             let trait_ty_generics = ty_generics(ccx, region_paramd, generics, 0);\n \n-            // For each method, construct a suitable ty::method and\n+            // For each method, construct a suitable ty::Method and\n             // store it into the `tcx.methods` table:\n             for ms.each |m| {\n                 let ty_method = @match m {\n@@ -270,7 +270,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n \n     fn make_static_method_ty(ccx: &CrateCtxt,\n                              trait_id: ast::node_id,\n-                             m: &ty::method,\n+                             m: &ty::Method,\n                              trait_ty_generics: &ty::Generics) {\n         // If declaration is\n         //\n@@ -379,24 +379,24 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n                                  m_explicit_self: &ast::explicit_self,\n                                  m_generics: &ast::Generics,\n                                  m_purity: &ast::purity,\n-                                 m_decl: &ast::fn_decl) -> ty::method\n+                                 m_decl: &ast::fn_decl) -> ty::Method\n     {\n         let trait_self_ty = ty::mk_self(this.tcx, local_def(trait_id));\n         let rscope = MethodRscope::new(m_explicit_self.node, trait_rp, trait_generics);\n         let (transformed_self_ty, fty) =\n             astconv::ty_of_method(this, &rscope, *m_purity, &m_generics.lifetimes,\n                                   trait_self_ty, *m_explicit_self, m_decl);\n         let num_trait_type_params = trait_generics.ty_params.len();\n-        ty::method {\n-            ident: *m_ident,\n-            generics: ty_generics(this, None, m_generics, num_trait_type_params),\n-            transformed_self_ty: transformed_self_ty,\n-            fty: fty,\n-            explicit_self: m_explicit_self.node,\n+        ty::Method::new(\n+            *m_ident,\n+            ty_generics(this, None, m_generics, num_trait_type_params),\n+            transformed_self_ty,\n+            fty,\n+            m_explicit_self.node,\n             // assume public, because this is only invoked on trait methods\n-            vis: ast::public,\n-            def_id: local_def(*m_id)\n-        }\n+            ast::public,\n+            local_def(*m_id)\n+        )\n     }\n }\n \n@@ -444,7 +444,7 @@ pub fn ensure_supertraits(ccx: &CrateCtxt,\n pub fn compare_impl_method(tcx: ty::ctxt,\n                            impl_tps: uint,\n                            cm: &ConvertedMethod,\n-                           trait_m: &ty::method,\n+                           trait_m: &ty::Method,\n                            trait_substs: &ty::substs,\n                            self_ty: ty::t) {\n     debug!(\"compare_impl_method()\");\n@@ -723,7 +723,7 @@ pub fn convert_field(ccx: &CrateCtxt,\n }\n \n pub struct ConvertedMethod {\n-    mty: @ty::method,\n+    mty: @ty::Method,\n     id: ast::node_id,\n     span: span,\n     body_id: ast::node_id\n@@ -776,7 +776,7 @@ pub fn convert_methods(ccx: &CrateCtxt,\n                     untransformed_rcvr_ty: ty::t,\n                     rcvr_generics: &ast::Generics,\n                     rcvr_visibility: ast::visibility,\n-                    method_generics: &ast::Generics) -> ty::method\n+                    method_generics: &ast::Generics) -> ty::Method\n     {\n         let rscope = MethodRscope::new(m.explicit_self.node,\n                                        rp,\n@@ -794,15 +794,15 @@ pub fn convert_methods(ccx: &CrateCtxt,\n         let method_vis = m.vis.inherit_from(rcvr_visibility);\n \n         let num_rcvr_type_params = rcvr_generics.ty_params.len();\n-        ty::method {\n-            ident: m.ident,\n-            generics: ty_generics(ccx, None, &m.generics, num_rcvr_type_params),\n-            transformed_self_ty: transformed_self_ty,\n-            fty: fty,\n-            explicit_self: m.explicit_self.node,\n-            vis: method_vis,\n-            def_id: local_def(m.id)\n-        }\n+        ty::Method::new(\n+            m.ident,\n+            ty_generics(ccx, None, &m.generics, num_rcvr_type_params),\n+            transformed_self_ty,\n+            fty,\n+            m.explicit_self.node,\n+            method_vis,\n+            local_def(m.id)\n+        )\n     }\n }\n "}, {"sha": "62b5eed1435f083feb905d17d3fa11eda49937a2", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/729708d1124bc7318b98b69aadca987e7fe80a8d/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=729708d1124bc7318b98b69aadca987e7fe80a8d", "patch": "@@ -11,7 +11,7 @@\n use metadata::encoder;\n use middle::ty::{ReSkolemized, ReVar};\n use middle::ty::{bound_region, br_anon, br_named, br_self, br_cap_avoid};\n-use middle::ty::{br_fresh, ctxt, field, method};\n+use middle::ty::{br_fresh, ctxt, field};\n use middle::ty::{mt, t, param_ty};\n use middle::ty::{re_bound, re_free, re_scope, re_infer, re_static, Region,\n                  re_empty};\n@@ -375,7 +375,7 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n             }\n         }\n     }\n-    fn method_to_str(cx: ctxt, m: method) -> ~str {\n+    fn method_to_str(cx: ctxt, m: ty::Method) -> ~str {\n         bare_fn_to_str(cx,\n                        m.fty.purity,\n                        m.fty.abis,\n@@ -633,7 +633,7 @@ impl Repr for ty::Generics {\n     }\n }\n \n-impl Repr for ty::method {\n+impl Repr for ty::Method {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         fmt!(\"method {ident: %s, generics: %s, transformed_self_ty: %s, \\\n               fty: %s, explicit_self: %s, vis: %s, def_id: %s}\","}]}