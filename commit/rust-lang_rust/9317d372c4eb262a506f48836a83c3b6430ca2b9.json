{"sha": "9317d372c4eb262a506f48836a83c3b6430ca2b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMTdkMzcyYzRlYjI2MmE1MDZmNDg4MzZhODNjM2I2NDMwY2EyYjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-15T23:36:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-22T19:55:56Z"}, "message": "two more style nits", "tree": {"sha": "026a5066a14ebee6cb4b289e7a4f1b34d2c5ef27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/026a5066a14ebee6cb4b289e7a4f1b34d2c5ef27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9317d372c4eb262a506f48836a83c3b6430ca2b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9317d372c4eb262a506f48836a83c3b6430ca2b9", "html_url": "https://github.com/rust-lang/rust/commit/9317d372c4eb262a506f48836a83c3b6430ca2b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9317d372c4eb262a506f48836a83c3b6430ca2b9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45dd0632bc63a04cdc1499a392d83139e2e8c348", "url": "https://api.github.com/repos/rust-lang/rust/commits/45dd0632bc63a04cdc1499a392d83139e2e8c348", "html_url": "https://github.com/rust-lang/rust/commit/45dd0632bc63a04cdc1499a392d83139e2e8c348"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "c49df4b1ad9ea8bd6f564ccb08a9eb546a3cea44", "filename": "src/librustc/traits/README.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9317d372c4eb262a506f48836a83c3b6430ca2b9/src%2Flibrustc%2Ftraits%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/9317d372c4eb262a506f48836a83c3b6430ca2b9/src%2Flibrustc%2Ftraits%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2FREADME.md?ref=9317d372c4eb262a506f48836a83c3b6430ca2b9", "patch": "@@ -418,16 +418,16 @@ before, and hence the cache lookup would succeed, yielding\n One subtle interaction is that the results of trait lookup will vary\n depending on what where clauses are in scope. Therefore, we actually\n have *two* caches, a local and a global cache. The local cache is\n-attached to ParamEnv` and the global cache attached\n-to the `tcx`. We use the local cache whenever the result might depend\n-on the where clauses that are in scope. The determination of which\n-cache to use is done by the method `pick_candidate_cache` in\n-`select.rs`. At the moment, we use a very simple, conservative rule:\n-if there are any where-clauses in scope, then we use the local cache.\n-We used to try and draw finer-grained distinctions, but that led to a\n-serious of annoying and weird bugs like #22019 and #18290. This simple\n-rule seems to be pretty clearly safe and also still retains a very\n-high hit rate (~95% when compiling rustc).\n+attached to the `ParamEnv` and the global cache attached to the\n+`tcx`. We use the local cache whenever the result might depend on the\n+where clauses that are in scope. The determination of which cache to\n+use is done by the method `pick_candidate_cache` in `select.rs`. At\n+the moment, we use a very simple, conservative rule: if there are any\n+where-clauses in scope, then we use the local cache.  We used to try\n+and draw finer-grained distinctions, but that led to a serious of\n+annoying and weird bugs like #22019 and #18290. This simple rule seems\n+to be pretty clearly safe and also still retains a very high hit rate\n+(~95% when compiling rustc).\n \n # Specialization\n "}, {"sha": "01fed11fc97affd7e8ad22cb0f275e7b5ec1faef", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9317d372c4eb262a506f48836a83c3b6430ca2b9/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9317d372c4eb262a506f48836a83c3b6430ca2b9/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=9317d372c4eb262a506f48836a83c3b6430ca2b9", "patch": "@@ -16,7 +16,6 @@ use infer::InferCtxt;\n use ich::{StableHashingContext, NodeIdHashingMode};\n use traits::{self, Reveal};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n-use ty::ParamEnv;\n use ty::fold::TypeVisitor;\n use ty::layout::{Layout, LayoutError};\n use ty::subst::{Subst, Kind};\n@@ -148,7 +147,7 @@ pub enum Representability {\n     SelfRecursive(Vec<Span>),\n }\n \n-impl<'tcx> ParamEnv<'tcx> {\n+impl<'tcx> ty::ParamEnv<'tcx> {\n     /// Construct a trait environment suitable for contexts where\n     /// there are no where clauses in scope.\n     pub fn empty() -> Self {\n@@ -720,23 +719,23 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n impl<'a, 'tcx> ty::TyS<'tcx> {\n     pub fn moves_by_default(&'tcx self,\n                             tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                            param_env: ParamEnv<'tcx>,\n+                            param_env: ty::ParamEnv<'tcx>,\n                             span: Span)\n                             -> bool {\n         !tcx.at(span).is_copy_raw(param_env.and(self))\n     }\n \n     pub fn is_sized(&'tcx self,\n                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    param_env: ParamEnv<'tcx>,\n+                    param_env: ty::ParamEnv<'tcx>,\n                     span: Span)-> bool\n     {\n         tcx.at(span).is_sized_raw(param_env.and(self))\n     }\n \n     pub fn is_freeze(&'tcx self,\n                      tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                     param_env: ParamEnv<'tcx>,\n+                     param_env: ty::ParamEnv<'tcx>,\n                      span: Span)-> bool\n     {\n         tcx.at(span).is_freeze_raw(param_env.and(self))"}]}