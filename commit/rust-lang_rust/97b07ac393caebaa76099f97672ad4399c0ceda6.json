{"sha": "97b07ac393caebaa76099f97672ad4399c0ceda6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YjA3YWMzOTNjYWViYWE3NjA5OWY5NzY3MmFkNDM5OWMwY2VkYTY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-08T18:20:11Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-08T18:20:11Z"}, "message": "Merge #265\n\n265: Refactor symbol resolve API r=matklad a=matklad\n\nIntroduce ReferenceResolution to avoid nesting to many non-nominal\r\ntypes.\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "fa7a1b323011fc2e2a1b9edc3191b424b9bb9e90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa7a1b323011fc2e2a1b9edc3191b424b9bb9e90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97b07ac393caebaa76099f97672ad4399c0ceda6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97b07ac393caebaa76099f97672ad4399c0ceda6", "html_url": "https://github.com/rust-lang/rust/commit/97b07ac393caebaa76099f97672ad4399c0ceda6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97b07ac393caebaa76099f97672ad4399c0ceda6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "51f669606cfbd29f3e9a3695810ead4124f49e84", "url": "https://api.github.com/repos/rust-lang/rust/commits/51f669606cfbd29f3e9a3695810ead4124f49e84", "html_url": "https://github.com/rust-lang/rust/commit/51f669606cfbd29f3e9a3695810ead4124f49e84"}, {"sha": "7fd6a41127dc9a60efe703f7d588f8555b8bffc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fd6a41127dc9a60efe703f7d588f8555b8bffc6", "html_url": "https://github.com/rust-lang/rust/commit/7fd6a41127dc9a60efe703f7d588f8555b8bffc6"}], "stats": {"total": 83, "additions": 59, "deletions": 24}, "files": [{"sha": "03d17de0ddd9e9f89e2bf7bdfb5ad61678bf13bf", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/97b07ac393caebaa76099f97672ad4399c0ceda6/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b07ac393caebaa76099f97672ad4399c0ceda6/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=97b07ac393caebaa76099f97672ad4399c0ceda6", "patch": "@@ -27,6 +27,7 @@ use crate::{\n     symbol_index::{SymbolIndex, SymbolsDatabase},\n     AnalysisChange, Cancelable, CrateId, Diagnostic, FileId,\n     FileSystemEdit, FilePosition, Query, SourceChange, SourceFileNodeEdit,\n+    ReferenceResolution,\n };\n \n #[derive(Debug, Default)]\n@@ -206,10 +207,11 @@ impl AnalysisImpl {\n     pub fn approximately_resolve_symbol(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Option<(TextRange, Vec<(FileId, FileSymbol)>)>> {\n+    ) -> Cancelable<Option<ReferenceResolution>> {\n         let file = self.db.source_file(position.file_id);\n         let syntax = file.syntax();\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n+            let mut rr = ReferenceResolution::new(name_ref.syntax().range());\n             if let Some(fn_descr) = source_binder::function_from_child_node(\n                 &*self.db,\n                 position.file_id,\n@@ -218,24 +220,25 @@ impl AnalysisImpl {\n                 let scope = fn_descr.scope(&*self.db);\n                 // First try to resolve the symbol locally\n                 if let Some(entry) = scope.resolve_local_name(name_ref) {\n-                    let vec = vec![(\n+                    rr.add_resolution(\n                         position.file_id,\n                         FileSymbol {\n                             name: entry.name().clone(),\n                             node_range: entry.ptr().range(),\n                             kind: NAME,\n                         },\n-                    )];\n-                    return Ok(Some((name_ref.syntax().range(), vec)));\n+                    );\n+                    return Ok(Some(rr));\n                 };\n             }\n             // If that fails try the index based approach.\n-            return Ok(Some((\n-                name_ref.syntax().range(),\n-                self.index_resolve(name_ref)?,\n-            )));\n+            for (file_id, symbol) in self.index_resolve(name_ref)? {\n+                rr.add_resolution(file_id, symbol);\n+            }\n+            return Ok(Some(rr));\n         }\n         if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset) {\n+            let mut rr = ReferenceResolution::new(name.syntax().range());\n             if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n                 if module.has_semi() {\n                     let parent_module =\n@@ -250,18 +253,16 @@ impl AnalysisImpl {\n                                     node_range: TextRange::offset_len(0.into(), 0.into()),\n                                     kind: MODULE,\n                                 };\n-                                return Ok(Some((name.syntax().range(), vec![(file_id, symbol)])));\n+                                rr.add_resolution(file_id, symbol);\n+                                return Ok(Some(rr));\n                             }\n                         }\n                         _ => (),\n                     }\n                 }\n             }\n         }\n-        let range =\n-            ctry!(ra_syntax::algo::find_leaf_at_offset(syntax, position.offset).left_biased())\n-                .range();\n-        Ok(Some((range, vec![])))\n+        Ok(None)\n     }\n \n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {"}, {"sha": "eaf24cb369ab625ee5df22a30390afb74a67767f", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/97b07ac393caebaa76099f97672ad4399c0ceda6/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b07ac393caebaa76099f97672ad4399c0ceda6/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=97b07ac393caebaa76099f97672ad4399c0ceda6", "patch": "@@ -178,6 +178,30 @@ impl Query {\n     }\n }\n \n+/// Result of \"goto def\" query.\n+#[derive(Debug)]\n+pub struct ReferenceResolution {\n+    /// The range of the reference itself. Client does not know what constitutes\n+    /// a reference, it handles us only the offset. It's helpful to tell the\n+    /// client where the reference was.\n+    pub reference_range: TextRange,\n+    /// What this reference resolves to.\n+    pub resolves_to: Vec<(FileId, FileSymbol)>,\n+}\n+\n+impl ReferenceResolution {\n+    fn new(reference_range: TextRange) -> ReferenceResolution {\n+        ReferenceResolution {\n+            reference_range,\n+            resolves_to: Vec::new(),\n+        }\n+    }\n+\n+    fn add_resolution(&mut self, file_id: FileId, symbol: FileSymbol) {\n+        self.resolves_to.push((file_id, symbol))\n+    }\n+}\n+\n /// Analysis is a snapshot of a world state at a moment in time. It is the main\n /// entry point for asking semantic information about the world. When the world\n /// state is advanced using `AnalysisHost::apply_change` method, all existing\n@@ -236,7 +260,7 @@ impl Analysis {\n     pub fn approximately_resolve_symbol(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Option<(TextRange, Vec<(FileId, FileSymbol)>)>> {\n+    ) -> Cancelable<Option<ReferenceResolution>> {\n         self.imp.approximately_resolve_symbol(position)\n     }\n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {"}, {"sha": "889b568b9a5dd6366de10787ac4290083a62ddbd", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/97b07ac393caebaa76099f97672ad4399c0ceda6/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b07ac393caebaa76099f97672ad4399c0ceda6/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=97b07ac393caebaa76099f97672ad4399c0ceda6", "patch": "@@ -23,7 +23,10 @@ fn approximate_resolve_works_in_items() {\n \n     let symbols = analysis.approximately_resolve_symbol(pos).unwrap().unwrap();\n     assert_eq_dbg(\n-        r#\"([23; 26), [(FileId(1), FileSymbol { name: \"Foo\", node_range: [0; 11), kind: STRUCT_DEF })])\"#,\n+        r#\"ReferenceResolution {\n+            reference_range: [23; 26),\n+            resolves_to: [(FileId(1), FileSymbol { name: \"Foo\", node_range: [0; 11), kind: STRUCT_DEF })]\n+        }\"#,\n         &symbols,\n     );\n }\n@@ -41,7 +44,10 @@ fn test_resolve_module() {\n \n     let symbols = analysis.approximately_resolve_symbol(pos).unwrap().unwrap();\n     assert_eq_dbg(\n-        r#\"([4; 7), [(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })])\"#,\n+        r#\"ReferenceResolution {\n+            reference_range: [4; 7),\n+            resolves_to: [(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\n+        }\"#,\n         &symbols,\n     );\n \n@@ -56,7 +62,10 @@ fn test_resolve_module() {\n \n     let symbols = analysis.approximately_resolve_symbol(pos).unwrap().unwrap();\n     assert_eq_dbg(\n-        r#\"([4; 7), [(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })])\"#,\n+        r#\"ReferenceResolution {\n+            reference_range: [4; 7),\n+            resolves_to: [(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\n+        }\"#,\n         &symbols,\n     );\n }"}, {"sha": "92e92f8363e1819cdcd2bbbea9d993041f6ae938", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/97b07ac393caebaa76099f97672ad4399c0ceda6/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b07ac393caebaa76099f97672ad4399c0ceda6/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=97b07ac393caebaa76099f97672ad4399c0ceda6", "patch": "@@ -203,11 +203,12 @@ pub fn handle_goto_definition(\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::GotoDefinitionResponse>> {\n     let position = params.try_conv_with(&world)?;\n-    let mut res = Vec::new();\n-    for (file_id, symbol) in match world.analysis().approximately_resolve_symbol(position)? {\n+    let rr = match world.analysis().approximately_resolve_symbol(position)? {\n         None => return Ok(None),\n-        Some(it) => it.1,\n-    } {\n+        Some(it) => it,\n+    };\n+    let mut res = Vec::new();\n+    for (file_id, symbol) in rr.resolves_to {\n         let line_index = world.analysis().file_line_index(file_id);\n         let location = to_location(file_id, symbol.node_range, &world, &line_index)?;\n         res.push(location)\n@@ -510,17 +511,17 @@ pub fn handle_hover(\n     // TODO: Cut down on number of allocations\n     let position = params.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(position.file_id);\n-    let (range, resolved) = match world.analysis().approximately_resolve_symbol(position)? {\n+    let rr = match world.analysis().approximately_resolve_symbol(position)? {\n         None => return Ok(None),\n         Some(it) => it,\n     };\n     let mut result = Vec::new();\n-    for (file_id, symbol) in resolved {\n+    for (file_id, symbol) in rr.resolves_to {\n         if let Some(docs) = world.analysis().doc_text_for(file_id, symbol)? {\n             result.push(docs);\n         }\n     }\n-    let range = range.conv_with(&line_index);\n+    let range = rr.reference_range.conv_with(&line_index);\n     if result.len() > 0 {\n         return Ok(Some(Hover {\n             contents: HoverContents::Scalar(MarkedString::String(result.join(\"\\n\\n---\\n\"))),"}]}