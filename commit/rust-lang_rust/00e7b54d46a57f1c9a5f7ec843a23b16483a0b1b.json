{"sha": "00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "node_id": "C_kwDOAAsO6NoAKDAwZTdiNTRkNDZhNTdmMWM5YTVmN2VjODQzYTIzYjE2NDgzYTBiMWI", "commit": {"author": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "eduardosm-dev@e64.io", "date": "2022-12-07T16:11:17Z"}, "committer": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "eduardosm-dev@e64.io", "date": "2022-12-07T16:11:17Z"}, "message": "Make some trivial functions `#[inline(always)]`", "tree": {"sha": "5f68a3aee56a4821a73ec7176c3f676f790f44f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f68a3aee56a4821a73ec7176c3f676f790f44f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "html_url": "https://github.com/rust-lang/rust/commit/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/comments", "author": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91b8f34ac2272e3c94a97bebc033abe8e2f17101", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b8f34ac2272e3c94a97bebc033abe8e2f17101", "html_url": "https://github.com/rust-lang/rust/commit/91b8f34ac2272e3c94a97bebc033abe8e2f17101"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "398437d9a023dcb7e386d669e30615f88d869cd7", "filename": "library/core/src/clone.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fclone.rs?ref=00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "patch": "@@ -176,7 +176,6 @@ pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n /// are implemented in `traits::SelectionContext::copy_clone_conditions()`\n /// in `rustc_trait_selection`.\n mod impls {\n-\n     use super::Clone;\n \n     macro_rules! impl_clone {\n@@ -185,7 +184,7 @@ mod impls {\n                 #[stable(feature = \"rust1\", since = \"1.0.0\")]\n                 #[rustc_const_unstable(feature = \"const_clone\", issue = \"91805\")]\n                 impl const Clone for $t {\n-                    #[inline]\n+                    #[inline(always)]\n                     fn clone(&self) -> Self {\n                         *self\n                     }\n@@ -213,7 +212,7 @@ mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_clone\", issue = \"91805\")]\n     impl<T: ?Sized> const Clone for *const T {\n-        #[inline]\n+        #[inline(always)]\n         fn clone(&self) -> Self {\n             *self\n         }\n@@ -222,7 +221,7 @@ mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_clone\", issue = \"91805\")]\n     impl<T: ?Sized> const Clone for *mut T {\n-        #[inline]\n+        #[inline(always)]\n         fn clone(&self) -> Self {\n             *self\n         }\n@@ -232,7 +231,7 @@ mod impls {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_clone\", issue = \"91805\")]\n     impl<T: ?Sized> const Clone for &T {\n-        #[inline]\n+        #[inline(always)]\n         #[rustc_diagnostic_item = \"noop_method_clone\"]\n         fn clone(&self) -> Self {\n             *self"}, {"sha": "f95b880df34d37b3b3fc2a8b920bcde4bf6186c5", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "patch": "@@ -99,7 +99,7 @@ pub use num::FloatToInt;\n /// ```\n #[stable(feature = \"convert_id\", since = \"1.33.0\")]\n #[rustc_const_stable(feature = \"const_identity\", since = \"1.33.0\")]\n-#[inline]\n+#[inline(always)]\n pub const fn identity<T>(x: T) -> T {\n     x\n }\n@@ -789,29 +789,31 @@ where\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> AsRef<[T]> for [T] {\n+    #[inline(always)]\n     fn as_ref(&self) -> &[T] {\n         self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> AsMut<[T]> for [T] {\n+    #[inline(always)]\n     fn as_mut(&mut self) -> &mut [T] {\n         self\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRef<str> for str {\n-    #[inline]\n+    #[inline(always)]\n     fn as_ref(&self) -> &str {\n         self\n     }\n }\n \n #[stable(feature = \"as_mut_str_for_str\", since = \"1.51.0\")]\n impl AsMut<str> for str {\n-    #[inline]\n+    #[inline(always)]\n     fn as_mut(&mut self) -> &mut str {\n         self\n     }"}, {"sha": "e8d724ab1ef4eed662ac5ab2810878e6ee8e2904", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "patch": "@@ -160,7 +160,7 @@ pub const unsafe fn unreachable_unchecked() -> ! {\n /// ```\n ///\n /// [`thread::yield_now`]: ../../std/thread/fn.yield_now.html\n-#[inline]\n+#[inline(always)]\n #[stable(feature = \"renamed_spin_loop\", since = \"1.49.0\")]\n pub fn spin_loop() {\n     #[cfg(target_arch = \"x86\")]\n@@ -345,6 +345,7 @@ pub const fn black_box<T>(dummy: T) -> T {\n #[unstable(feature = \"hint_must_use\", issue = \"94745\")]\n #[rustc_const_unstable(feature = \"hint_must_use\", issue = \"94745\")]\n #[must_use] // <-- :)\n+#[inline(always)]\n pub const fn must_use<T>(value: T) -> T {\n     value\n }"}, {"sha": "d348135991a231a2f560b8886ecd72a7d999234e", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "patch": "@@ -45,7 +45,7 @@ impl<T: ?Sized> *const T {\n     /// Casts to a pointer of another type.\n     #[stable(feature = \"ptr_cast\", since = \"1.38.0\")]\n     #[rustc_const_stable(feature = \"const_ptr_cast\", since = \"1.38.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn cast<U>(self) -> *const U {\n         self as _\n     }\n@@ -95,6 +95,7 @@ impl<T: ?Sized> *const T {\n     /// refactored.\n     #[stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n     #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n+    #[inline(always)]\n     pub const fn cast_mut(self) -> *mut T {\n         self as _\n     }\n@@ -126,6 +127,7 @@ impl<T: ?Sized> *const T {\n         note = \"replaced by the `exposed_addr` method, or update your code \\\n             to follow the strict provenance rules using its APIs\"\n     )]\n+    #[inline(always)]\n     pub fn to_bits(self) -> usize\n     where\n         T: Sized,\n@@ -155,6 +157,7 @@ impl<T: ?Sized> *const T {\n             your code to follow the strict provenance rules using its APIs\"\n     )]\n     #[allow(fuzzy_provenance_casts)] // this is an unstable and semi-deprecated cast function\n+    #[inline(always)]\n     pub fn from_bits(bits: usize) -> Self\n     where\n         T: Sized,\n@@ -186,7 +189,7 @@ impl<T: ?Sized> *const T {\n     /// might change in the future (including possibly weakening this so it becomes wholly\n     /// equivalent to `self as usize`). See the [module documentation][crate::ptr] for details.\n     #[must_use]\n-    #[inline]\n+    #[inline(always)]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n     pub fn addr(self) -> usize\n     where\n@@ -223,7 +226,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// [`from_exposed_addr`]: from_exposed_addr\n     #[must_use]\n-    #[inline]\n+    #[inline(always)]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n     pub fn expose_addr(self) -> usize\n     where"}, {"sha": "73f7eae0402e6765fc4f8864a8c17fa0b6113aaa", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "patch": "@@ -613,7 +613,7 @@ pub const fn invalid_mut<T>(addr: usize) -> *mut T {\n /// This API and its claimed semantics are part of the Strict Provenance experiment, see the\n /// [module documentation][crate::ptr] for details.\n #[must_use]\n-#[inline]\n+#[inline(always)]\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n #[allow(fuzzy_provenance_casts)] // this *is* the strict provenance API one should use instead\n@@ -651,7 +651,7 @@ where\n /// This API and its claimed semantics are part of the Strict Provenance experiment, see the\n /// [module documentation][crate::ptr] for details.\n #[must_use]\n-#[inline]\n+#[inline(always)]\n #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n #[allow(fuzzy_provenance_casts)] // this *is* the strict provenance API one should use instead\n@@ -1801,7 +1801,7 @@ pub(crate) const unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usiz\n /// assert!(!std::ptr::eq(&a[0..2], &a[1..3]));\n /// ```\n #[stable(feature = \"ptr_eq\", since = \"1.17.0\")]\n-#[inline]\n+#[inline(always)]\n pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n     a == b\n }"}, {"sha": "c924a90b1ff3596bf773b9b11de3235de1e65e13", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "patch": "@@ -100,6 +100,7 @@ impl<T: ?Sized> *mut T {\n     /// [`cast_mut`]: #method.cast_mut\n     #[stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n     #[rustc_const_stable(feature = \"ptr_const_cast\", since = \"1.65.0\")]\n+    #[inline(always)]\n     pub const fn cast_const(self) -> *const T {\n         self as _\n     }\n@@ -132,6 +133,7 @@ impl<T: ?Sized> *mut T {\n         note = \"replaced by the `exposed_addr` method, or update your code \\\n             to follow the strict provenance rules using its APIs\"\n     )]\n+    #[inline(always)]\n     pub fn to_bits(self) -> usize\n     where\n         T: Sized,\n@@ -161,6 +163,7 @@ impl<T: ?Sized> *mut T {\n             update your code to follow the strict provenance rules using its APIs\"\n     )]\n     #[allow(fuzzy_provenance_casts)] // this is an unstable and semi-deprecated cast function\n+    #[inline(always)]\n     pub fn from_bits(bits: usize) -> Self\n     where\n         T: Sized,\n@@ -192,7 +195,7 @@ impl<T: ?Sized> *mut T {\n     /// might change in the future (including possibly weakening this so it becomes wholly\n     /// equivalent to `self as usize`). See the [module documentation][crate::ptr] for details.\n     #[must_use]\n-    #[inline]\n+    #[inline(always)]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n     pub fn addr(self) -> usize\n     where\n@@ -229,7 +232,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`from_exposed_addr_mut`]: from_exposed_addr_mut\n     #[must_use]\n-    #[inline]\n+    #[inline(always)]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n     pub fn expose_addr(self) -> usize\n     where"}, {"sha": "c4348169c78c7e391e975f6d67cd9415264e8aa9", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "patch": "@@ -330,7 +330,7 @@ impl<T: ?Sized> NonNull<T> {\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_as_ptr\", since = \"1.32.0\")]\n     #[must_use]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn as_ptr(self) -> *mut T {\n         self.pointer as *mut T\n     }\n@@ -378,7 +378,7 @@ impl<T: ?Sized> NonNull<T> {\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[must_use]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn as_ref<'a>(&self) -> &'a T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n@@ -429,7 +429,7 @@ impl<T: ?Sized> NonNull<T> {\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[must_use]\n-    #[inline]\n+    #[inline(always)]\n     pub const unsafe fn as_mut<'a>(&mut self) -> &'a mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a mutable reference.\n@@ -703,7 +703,7 @@ impl<T> NonNull<[T]> {\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[rustc_const_unstable(feature = \"const_clone\", issue = \"91805\")]\n impl<T: ?Sized> const Clone for NonNull<T> {\n-    #[inline]\n+    #[inline(always)]\n     fn clone(&self) -> Self {\n         *self\n     }"}, {"sha": "b9f0cd4d2e777284a677160f56317403e1382834", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "patch": "@@ -465,7 +465,7 @@ impl<T> [T] {\n     /// [`as_mut_ptr`]: slice::as_mut_ptr\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_slice_as_ptr\", since = \"1.32.0\")]\n-    #[inline]\n+    #[inline(always)]\n     #[must_use]\n     pub const fn as_ptr(&self) -> *const T {\n         self as *const [T] as *const T\n@@ -495,7 +495,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[rustc_allow_const_fn_unstable(const_mut_refs)]\n-    #[inline]\n+    #[inline(always)]\n     #[must_use]\n     pub const fn as_mut_ptr(&mut self) -> *mut T {\n         self as *mut [T] as *mut T"}, {"sha": "45fd2caae52f4f27efe70ac4054c9660fc3bec99", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=00e7b54d46a57f1c9a5f7ec843a23b16483a0b1b", "patch": "@@ -396,7 +396,7 @@ impl str {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]\n     #[must_use]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn as_ptr(&self) -> *const u8 {\n         self as *const str as *const u8\n     }\n@@ -411,7 +411,7 @@ impl str {\n     /// modified in a way that it remains valid UTF-8.\n     #[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]\n     #[must_use]\n-    #[inline]\n+    #[inline(always)]\n     pub fn as_mut_ptr(&mut self) -> *mut u8 {\n         self as *mut str as *mut u8\n     }"}]}