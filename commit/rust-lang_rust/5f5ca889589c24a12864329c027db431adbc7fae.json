{"sha": "5f5ca889589c24a12864329c027db431adbc7fae", "node_id": "C_kwDOAAsO6NoAKDVmNWNhODg5NTg5YzI0YTEyODY0MzI5YzAyN2RiNDMxYWRiYzdmYWU", "commit": {"author": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-07-03T09:38:49Z"}, "committer": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2022-07-03T09:46:20Z"}, "message": "Add size assert in transmute_copy", "tree": {"sha": "2229e5c5a90ddb184f573b16f2d667b29ebaf81f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2229e5c5a90ddb184f573b16f2d667b29ebaf81f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f5ca889589c24a12864329c027db431adbc7fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5ca889589c24a12864329c027db431adbc7fae", "html_url": "https://github.com/rust-lang/rust/commit/5f5ca889589c24a12864329c027db431adbc7fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f5ca889589c24a12864329c027db431adbc7fae/comments", "author": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "committer": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3", "html_url": "https://github.com/rust-lang/rust/commit/8c52a83c455f0044e00add954cb7d9ddb0dfb9a3"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "66af491607435f1d2d72c47fee787376c585237a", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5ca889589c24a12864329c027db431adbc7fae/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5ca889589c24a12864329c027db431adbc7fae/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=5f5ca889589c24a12864329c027db431adbc7fae", "patch": "@@ -1040,6 +1040,8 @@ pub fn copy<T: Copy>(x: &T) -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_transmute_copy\", issue = \"83165\")]\n pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {\n+    assert!(size_of::<T>() >= size_of::<U>(), \"cannot transmute_copy if U is larger than T\");\n+\n     // If U has a higher alignment requirement, src might not be suitably aligned.\n     if align_of::<U>() > align_of::<T>() {\n         // SAFETY: `src` is a reference which is guaranteed to be valid for reads."}, {"sha": "6856d1a1f51aeee2062c1ff4a6286116a42da783", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5f5ca889589c24a12864329c027db431adbc7fae/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5ca889589c24a12864329c027db431adbc7fae/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=5f5ca889589c24a12864329c027db431adbc7fae", "patch": "@@ -97,6 +97,46 @@ fn test_transmute_copy() {\n     assert_eq!(1, unsafe { transmute_copy(&1) });\n }\n \n+#[test]\n+fn test_transmute_copy_shrink() {\n+    assert_eq!(0_u8, unsafe { transmute_copy(&0_u64) });\n+}\n+\n+#[test]\n+fn test_transmute_copy_unaligned() {\n+    #[repr(C)]\n+    #[derive(Default)]\n+    struct Unaligned {\n+        a: u8,\n+        b: [u8; 8],\n+    }\n+\n+    let u = Unaligned::default();\n+    assert_eq!(0_u64, unsafe { transmute_copy(&u.b) });\n+}\n+\n+#[test]\n+#[cfg(panic = \"unwind\")]\n+fn test_transmute_copy_grow_panics() {\n+    use std::panic;\n+\n+    let err = panic::catch_unwind(panic::AssertUnwindSafe(|| unsafe {\n+        let _unused: u64 = transmute_copy(&1_u8);\n+    }));\n+\n+    match err {\n+        Ok(_) => unreachable!(),\n+        Err(payload) => {\n+            payload\n+                .downcast::<&'static str>()\n+                .and_then(|s| {\n+                    if *s == \"cannot transmute_copy if U is larger than T\" { Ok(s) } else { Err(s) }\n+                })\n+                .unwrap_or_else(|p| panic::resume_unwind(p));\n+        }\n+    }\n+}\n+\n #[test]\n #[allow(dead_code)]\n fn test_discriminant_send_sync() {"}]}