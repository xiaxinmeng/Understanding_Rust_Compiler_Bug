{"sha": "9618e5b459198865ab70ba7cf3a3edffdef1f7f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MThlNWI0NTkxOTg4NjVhYjcwYmE3Y2YzYTNlZGZmZGVmMWY3ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-19T01:51:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-19T01:51:49Z"}, "message": "auto merge of #5938 : thestinger/rust/iterator, r=pcwalton", "tree": {"sha": "1a688aaa56d3dd11c5eafa598f38bd9da48c2732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a688aaa56d3dd11c5eafa598f38bd9da48c2732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9618e5b459198865ab70ba7cf3a3edffdef1f7f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9618e5b459198865ab70ba7cf3a3edffdef1f7f5", "html_url": "https://github.com/rust-lang/rust/commit/9618e5b459198865ab70ba7cf3a3edffdef1f7f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9618e5b459198865ab70ba7cf3a3edffdef1f7f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "225d74f2115e858b3df640acace5729c3ac1ff81", "url": "https://api.github.com/repos/rust-lang/rust/commits/225d74f2115e858b3df640acace5729c3ac1ff81", "html_url": "https://github.com/rust-lang/rust/commit/225d74f2115e858b3df640acace5729c3ac1ff81"}, {"sha": "a523abd75c619be64cb8c0613431150e0913c934", "url": "https://api.github.com/repos/rust-lang/rust/commits/a523abd75c619be64cb8c0613431150e0913c934", "html_url": "https://github.com/rust-lang/rust/commit/a523abd75c619be64cb8c0613431150e0913c934"}], "stats": {"total": 108, "additions": 99, "deletions": 9}, "files": [{"sha": "8bd6c73fc7dbbd1c53dc43459de9e15551d152ad", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9618e5b459198865ab70ba7cf3a3edffdef1f7f5/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9618e5b459198865ab70ba7cf3a3edffdef1f7f5/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=9618e5b459198865ab70ba7cf3a3edffdef1f7f5", "patch": "@@ -22,6 +22,8 @@ pub trait IteratorUtil<A> {\n     // FIXME: #5898: should be called map\n     fn transform<'r, B>(self, f: &'r fn(A) -> B) -> MapIterator<'r, A, B, Self>;\n     fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> FilterIterator<'r, A, Self>;\n+    fn dropwhile<'r>(self, predicate: &'r fn(&A) -> bool) -> DropWhileIterator<'r, A, Self>;\n+    fn takewhile<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhileIterator<'r, A, Self>;\n     fn enumerate(self) -> EnumerateIterator<Self>;\n     fn advance(&mut self, f: &fn(A) -> bool);\n }\n@@ -48,6 +50,16 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         EnumerateIterator{iter: self, count: 0}\n     }\n \n+    #[inline(always)]\n+    fn dropwhile<'r>(self, predicate: &'r fn(&A) -> bool) -> DropWhileIterator<'r, A, T> {\n+        DropWhileIterator{iter: self, flag: false, predicate: predicate}\n+    }\n+\n+    #[inline(always)]\n+    fn takewhile<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhileIterator<'r, A, T> {\n+        TakeWhileIterator{iter: self, flag: false, predicate: predicate}\n+    }\n+\n     /// A shim implementing the `for` loop iteration protocol for iterator objects\n     #[inline]\n     fn advance(&mut self, f: &fn(A) -> bool) {\n@@ -129,3 +141,61 @@ impl<A, T: Iterator<A>> Iterator<(uint, A)> for EnumerateIterator<T> {\n         }\n     }\n }\n+\n+pub struct DropWhileIterator<'self, A, T> {\n+    priv iter: T,\n+    priv flag: bool,\n+    priv predicate: &'self fn(&A) -> bool\n+}\n+\n+impl<'self, A, T: Iterator<A>> Iterator<A> for DropWhileIterator<'self, A, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        let mut next = self.iter.next();\n+        if self.flag {\n+            next\n+        } else {\n+            loop {\n+                match next {\n+                    Some(x) => {\n+                        if (self.predicate)(&x) {\n+                            next = self.iter.next();\n+                            loop\n+                        } else {\n+                            self.flag = true;\n+                            return Some(x)\n+                        }\n+                    }\n+                    None => return None\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+pub struct TakeWhileIterator<'self, A, T> {\n+    priv iter: T,\n+    priv flag: bool,\n+    priv predicate: &'self fn(&A) -> bool\n+}\n+\n+impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhileIterator<'self, A, T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        if self.flag {\n+            None\n+        } else {\n+            match self.iter.next() {\n+                Some(x) => {\n+                    if (self.predicate)(&x) {\n+                        Some(x)\n+                    } else {\n+                        self.flag = true;\n+                        None\n+                    }\n+                }\n+                None => None\n+            }\n+        }\n+    }\n+}"}, {"sha": "45cc9618f59b0bf7e6817d9dbe991d93a8fc4f1a", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9618e5b459198865ab70ba7cf3a3edffdef1f7f5/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9618e5b459198865ab70ba7cf3a3edffdef1f7f5/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=9618e5b459198865ab70ba7cf3a3edffdef1f7f5", "patch": "@@ -4478,18 +4478,38 @@ mod tests {\n     #[test]\n     fn test_iterator_enumerate() {\n         use iterator::*;\n-        let xs = [0u,1,2,3,4,5];\n+        let xs = [0u, 1, 2, 3, 4, 5];\n         let mut it = xs.iter().enumerate();\n         for it.advance |(i, &x): (uint, &uint)| {\n             assert_eq!(i, x);\n         }\n     }\n-}\n \n-// Local Variables:\n-// mode: rust;\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n+    #[test]\n+    fn test_iterator_takewhile() {\n+        use iterator::*;\n+        let xs = [0u, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n+        let ys = [0u, 1, 2, 3, 5, 13];\n+        let mut it = xs.iter().takewhile(|&x| *x < 15u);\n+        let mut i = 0;\n+        for it.advance |&x: &uint| {\n+            assert_eq!(x, ys[i]);\n+            i += 1;\n+        }\n+        assert_eq!(i, ys.len());\n+    }\n+\n+    #[test]\n+    fn test_iterator_dropwhile() {\n+        use iterator::*;\n+        let xs = [0u, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n+        let ys = [15, 16, 17, 19];\n+        let mut it = xs.iter().dropwhile(|&x| *x < 15u);\n+        let mut i = 0;\n+        for it.advance |&x: &uint| {\n+            assert_eq!(x, ys[i]);\n+            i += 1;\n+        }\n+        assert_eq!(i, ys.len());\n+    }\n+}"}]}