{"sha": "dd41422b66242bb53af9e8dc090718b7602243bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNDE0MjJiNjYyNDJiYjUzYWY5ZThkYzA5MDcxOGI3NjAyMjQzYmI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-19T15:13:33Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-19T16:01:56Z"}, "message": "Rollup merge of #45377 - topecongiro:fix-typos/librustc-ty-README, r=kennytm\n\nFix typos in librustc/ty/README.md", "tree": {"sha": "f85a250a6b5cce53f56d136cb1fd29ee5f53dc13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f85a250a6b5cce53f56d136cb1fd29ee5f53dc13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd41422b66242bb53af9e8dc090718b7602243bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlnozHQACgkQ/vbIBR0O\nATxR+w//WMCELeQ1LNz1zx1IIP6wLoqEDT4btOycl9fAK1618dxig+8jmXn2JUPR\n8pD3gnOCh3mc3pX5J9OQ8uE13YA/J7mq8zpz2ZVEJ0CNPAGXjpZkej7gRbDhq56s\nn9gjZ5/aP8J2zX+npOvftJrQgSjnWpIXXUPQO7VnNI8tU7SoxUr7wWkokqUlwCUN\nCYo3pyUAjX/LqeVJGCAkRuMFvu6CBYmOaPGR/jmxr1O8CJKKRvCoAchGYuh5emrc\nv/Z984FIOwBEXM9hsYmoy/+0PgvS1KPfZ09T/EbwZ+UF1QHpoYiSV/sscU0Fp4gv\n5YLWP+h1Dj/qNS2jwkbiDYdfpNAsHXrB/1iN+mtvQiCjOv9J1+cwCKqTDtcCb3Cf\nVdvtcBaJHXrw6V3AhaawaIRV5ICSRpktrexUivAvZ2S8quhH64rT2MIgipIZgfwR\nmOfFEykzf+2MQ3wB9DQ6wOxnc30Xy8MFQHrMkrBc9YorRo40FkCsiJbE4RfCevNX\nBEDPNDCO0oJp6VXPgKXlGEdX2SZjH8HxYE/MgUfQyt91yvXqz0MKCKtofYtOOM83\n2OcjIJzv8VNc176KiRL/Z5+ZaxdMlurmMwQ/Abaau0R0P3eM/qhwfa2z4to007vQ\nU9KyPHe1R/j7eBAmTeLp2SJDjVMaCVjRWQ9oxSozCPbxAvd5awc=\n=exbW\n-----END PGP SIGNATURE-----", "payload": "tree f85a250a6b5cce53f56d136cb1fd29ee5f53dc13\nparent 3477715582e9185435c823bf8ce493fd4d65d132\nparent 622d20a85ab234a24ab74ea4afcb4014909754af\nauthor kennytm <kennytm@gmail.com> 1508426013 +0800\ncommitter kennytm <kennytm@gmail.com> 1508428916 +0800\n\nRollup merge of #45377 - topecongiro:fix-typos/librustc-ty-README, r=kennytm\n\nFix typos in librustc/ty/README.md\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd41422b66242bb53af9e8dc090718b7602243bb", "html_url": "https://github.com/rust-lang/rust/commit/dd41422b66242bb53af9e8dc090718b7602243bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd41422b66242bb53af9e8dc090718b7602243bb/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3477715582e9185435c823bf8ce493fd4d65d132", "url": "https://api.github.com/repos/rust-lang/rust/commits/3477715582e9185435c823bf8ce493fd4d65d132", "html_url": "https://github.com/rust-lang/rust/commit/3477715582e9185435c823bf8ce493fd4d65d132"}, {"sha": "622d20a85ab234a24ab74ea4afcb4014909754af", "url": "https://api.github.com/repos/rust-lang/rust/commits/622d20a85ab234a24ab74ea4afcb4014909754af", "html_url": "https://github.com/rust-lang/rust/commit/622d20a85ab234a24ab74ea4afcb4014909754af"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "3fd956ecfb87dea7f60567b9cf192103b7b5c8e2", "filename": "src/librustc/ty/README.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd41422b66242bb53af9e8dc090718b7602243bb/src%2Flibrustc%2Fty%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/dd41422b66242bb53af9e8dc090718b7602243bb/src%2Flibrustc%2Fty%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2FREADME.md?ref=dd41422b66242bb53af9e8dc090718b7602243bb", "patch": "@@ -42,7 +42,7 @@ wasteful.\n Often, we wish to write code that explicitly asserts that it is not\n taking place during inference. In that case, there is no \"local\"\n arena, and all the types that you can access are allocated in the\n-global arena.  To express this, the idea is to us the same lifetime\n+global arena.  To express this, the idea is to use the same lifetime\n for the `'gcx` and `'tcx` parameters of `TyCtxt`. Just to be a touch\n confusing, we tend to use the name `'tcx` in such contexts. Here is an\n example:\n@@ -100,10 +100,10 @@ fn test_type<'tcx>(ty: Ty<'tcx>) {\n \n The `sty` field (the origin of this name is unclear to me; perhaps\n structural type?) is of type `TypeVariants<'tcx>`, which is an enum\n-definined all of the different kinds of types in the compiler.\n+defining all of the different kinds of types in the compiler.\n \n > NB: inspecting the `sty` field on types during type inference can be\n-> risky, as there are may be inference variables and other things to\n+> risky, as there may be inference variables and other things to\n > consider, or sometimes types are not yet known that will become\n > known later.).\n \n@@ -132,7 +132,7 @@ a safe approximation, so that is what you get back.\n > you are going to be testing for type equality, you probably need to\n > start looking into the inference code to do it right.\n \n-You can also find various common types in the tcx itself by accessing\n+You can also find various common types in the `tcx` itself by accessing\n `tcx.types.bool`, `tcx.types.char`, etc (see `CommonTypes` for more).\n \n ### Beyond types: Other kinds of arena-allocated data structures\n@@ -143,7 +143,7 @@ module. Here are a few examples:\n \n - `Substs`, allocated with `mk_substs` -- this will intern a slice of types, often used to\n   specify the values to be substituted for generics (e.g., `HashMap<i32, u32>`\n-  would be represented as a slice `&'tcx [tcx.types.i32, tcx.types.u32]`.\n+  would be represented as a slice `&'tcx [tcx.types.i32, tcx.types.u32]`).\n - `TraitRef`, typically passed by value -- a **trait reference**\n   consists of a reference to a trait along with its various type\n   parameters (including `Self`), like `i32: Display` (here, the def-id"}]}