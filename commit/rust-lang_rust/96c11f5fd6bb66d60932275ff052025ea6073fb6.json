{"sha": "96c11f5fd6bb66d60932275ff052025ea6073fb6", "node_id": "C_kwDOAAsO6NoAKDk2YzExZjVmZDZiYjY2ZDYwOTMyMjc1ZmYwNTIwMjVlYTYwNzNmYjY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-05T23:48:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-05T23:48:54Z"}, "message": "Merge #11630\n\n11630: fix: Recognize `Self` as a proper keyword r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11627\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "cc0c32c59e082b379abd048606e551ad1a6a4a54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc0c32c59e082b379abd048606e551ad1a6a4a54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96c11f5fd6bb66d60932275ff052025ea6073fb6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiI/bmCRBK7hj4Ov3rIwAAe8QIADAa/zTGzKeqdDnTAvIBh8GJ\nrWlJBYmH4EZz0SqrPLKqa6PHj3RuO/mOuPAhTaHHQvyT1Jb6ARZVOSi+uQEDxqbk\nlhLzJqoVHIzgGjbeCN+gUkb66flfsFc8L1WgCt963n5rhPaL8zG8x+XLMzMg3tvo\nm+1qF+lt59wsNx9fJ/okluqmjdseDi6qWDIlrSOJDIoLI0c1+dkoh8fWgLfjYvkR\n4q+ns5ThkkSHYiRKUrGDCTgTUjGVJaQWOR4sz2vO1a+ezNVaxHHH7IXQfOuucrgW\n9AYeAmB1g67ELPKGgE992MPdMeZ53NQuSGCXNuNxNEjaClWXk1WTtRR/zbGl1Yk=\n=wCb1\n-----END PGP SIGNATURE-----\n", "payload": "tree cc0c32c59e082b379abd048606e551ad1a6a4a54\nparent b032993733d82ecca50e61f93454b49bca4ba236\nparent e8edbb5d6fa43db893fc5eb2a3c75b7b23713919\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646524134 +0000\ncommitter GitHub <noreply@github.com> 1646524134 +0000\n\nMerge #11630\n\n11630: fix: Recognize `Self` as a proper keyword r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11627\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96c11f5fd6bb66d60932275ff052025ea6073fb6", "html_url": "https://github.com/rust-lang/rust/commit/96c11f5fd6bb66d60932275ff052025ea6073fb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96c11f5fd6bb66d60932275ff052025ea6073fb6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b032993733d82ecca50e61f93454b49bca4ba236", "url": "https://api.github.com/repos/rust-lang/rust/commits/b032993733d82ecca50e61f93454b49bca4ba236", "html_url": "https://github.com/rust-lang/rust/commit/b032993733d82ecca50e61f93454b49bca4ba236"}, {"sha": "e8edbb5d6fa43db893fc5eb2a3c75b7b23713919", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8edbb5d6fa43db893fc5eb2a3c75b7b23713919", "html_url": "https://github.com/rust-lang/rust/commit/e8edbb5d6fa43db893fc5eb2a3c75b7b23713919"}], "stats": {"total": 300, "additions": 226, "deletions": 74}, "files": [{"sha": "f1b559f4059e547ffb56d14f796be8ca7f0381f0", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -1833,9 +1833,9 @@ checksum = \"0685c84d5d54d1c26f7d3eb96cd41550adb97baed141a761cf335d3d33bcd0ae\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.16.0\"\n+version = \"1.16.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a62374cbbda72c1459ce5e7bfcdf1bd284c812a4faf2324aa083e5d9ea87880f\"\n+checksum = \"a3e5df347f0bf3ec1d670aad6ca5c6a1859cd9ea61d2113125794654ccced68f\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "80205f7fbc4adf1e9c26fa5a0a4b509333394aff", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -10,7 +10,10 @@ use hir_def::{\n     resolver::{self, HasResolver, Resolver, TypeNs},\n     AsMacroCall, FunctionId, TraitId, VariantId,\n };\n-use hir_expand::{name::AsName, ExpansionInfo, MacroCallId};\n+use hir_expand::{\n+    name::{known, AsName},\n+    ExpansionInfo, MacroCallId,\n+};\n use hir_ty::Interner;\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -910,13 +913,14 @@ impl<'db> SemanticsImpl<'db> {\n \n     fn resolve_extern_crate(&self, extern_crate: &ast::ExternCrate) -> Option<Crate> {\n         let krate = self.scope(extern_crate.syntax()).krate()?;\n-        krate.dependencies(self.db).into_iter().find_map(|dep| {\n-            if dep.name == extern_crate.name_ref()?.as_name() {\n-                Some(dep.krate)\n-            } else {\n-                None\n-            }\n-        })\n+        let name = extern_crate.name_ref()?.as_name();\n+        if name == known::SELF_PARAM {\n+            return Some(krate);\n+        }\n+        krate\n+            .dependencies(self.db)\n+            .into_iter()\n+            .find_map(|dep| (dep.name == name).then(|| dep.krate))\n     }\n \n     fn resolve_variant(&self, record_lit: ast::RecordExpr) -> Option<VariantId> {"}, {"sha": "f86d87d5cc8d951fb95c67846f01cb889b4cd42b", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -302,6 +302,7 @@ fn pretty_print_macro_expansion(expn: SyntaxNode, map: Option<&TokenMap>) -> Str\n             (T![fn], T!['(']) => \"\",\n             (T![']'], _) if curr_kind.is_keyword() => \" \",\n             (T![']'], T![#]) => \"\\n\",\n+            (T![Self], T![::]) => \"\",\n             _ if prev_kind.is_keyword() => \" \",\n             _ => \"\",\n         };"}, {"sha": "550f12dabdcec9e7a15a7ead6f82bd1d2ff2f959", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -53,6 +53,10 @@ pub(super) fn lower_path(mut path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n                     }\n                 }\n             }\n+            ast::PathSegmentKind::SelfTypeKw => {\n+                segments.push(name![Self]);\n+                generic_args.push(None)\n+            }\n             ast::PathSegmentKind::Type { type_ref, trait_ref } => {\n                 assert!(path.qualifier().is_none()); // this can only occur at the first segment\n "}, {"sha": "5e264d0398d8a9a3f37524621e7e83d13a655adf", "filename": "crates/hir_expand/src/mod_path.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fhir_expand%2Fsrc%2Fmod_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fhir_expand%2Fsrc%2Fmod_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fmod_path.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -5,7 +5,11 @@ use std::{\n     iter,\n };\n \n-use crate::{db::AstDatabase, hygiene::Hygiene, name::Name};\n+use crate::{\n+    db::AstDatabase,\n+    hygiene::Hygiene,\n+    name::{known, Name},\n+};\n use base_db::CrateId;\n use either::Either;\n use syntax::{ast, AstNode};\n@@ -162,6 +166,12 @@ fn convert_path(\n                 }\n             }\n         }\n+        ast::PathSegmentKind::SelfTypeKw => {\n+            if prefix.is_some() {\n+                return None;\n+            }\n+            ModPath::from_segments(PathKind::Plain, Some(known::SELF_TYPE))\n+        }\n         ast::PathSegmentKind::CrateKw => {\n             if prefix.is_some() {\n                 return None;"}, {"sha": "5520ee55286c959bc4f5c266a66003f27d96c451", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -246,7 +246,7 @@ fn pick_best(l: SyntaxToken, r: SyntaxToken) -> SyntaxToken {\n     fn priority(n: &SyntaxToken) -> usize {\n         match n.kind() {\n             WHITESPACE => 0,\n-            IDENT | T![self] | T![super] | T![crate] | LIFETIME_IDENT => 2,\n+            IDENT | T![self] | T![super] | T![crate] | T![Self] | LIFETIME_IDENT => 2,\n             _ => 1,\n         }\n     }"}, {"sha": "cb2cddc20da0f7239876fa981a0020457db3ac40", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -18,7 +18,7 @@ pub(crate) fn goto_declaration(\n     let file = sema.parse(position.file_id).syntax().clone();\n     let original_token = file\n         .token_at_offset(position.offset)\n-        .find(|it| matches!(it.kind(), IDENT | T![self] | T![super] | T![crate]))?;\n+        .find(|it| matches!(it.kind(), IDENT | T![self] | T![super] | T![crate] | T![Self]))?;\n     let range = original_token.text_range();\n     let info: Vec<NavigationTarget> = sema\n         .descend_into_macros(original_token)"}, {"sha": "d664e2ca6535234089ef12bba371d3db6aeada53", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -30,7 +30,14 @@ pub(crate) fn goto_definition(\n     let file = sema.parse(position.file_id).syntax().clone();\n     let original_token =\n         pick_best_token(file.token_at_offset(position.offset), |kind| match kind {\n-            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] | COMMENT => 2,\n+            IDENT\n+            | INT_NUMBER\n+            | LIFETIME_IDENT\n+            | T![self]\n+            | T![super]\n+            | T![crate]\n+            | T![Self]\n+            | COMMENT => 2,\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n         })?;"}, {"sha": "30d0d3435814b482a9e11abba657f6fb5fface54", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -100,7 +100,7 @@ pub(crate) fn hover(\n     let offset = range.start();\n \n     let original_token = pick_best_token(file.token_at_offset(offset), |kind| match kind {\n-        IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] => 3,\n+        IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] | T![Self] => 3,\n         T!['('] | T![')'] => 2,\n         kind if kind.is_trivia() => 0,\n         _ => 1,"}, {"sha": "f8ac43bbddbbad96b1254f855bd0c11691125718", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -545,7 +545,6 @@ fn keyword_hints(\n                 },\n             }\n         }\n-\n         T![fn] => {\n             let module = match ast::FnPtrType::cast(parent) {\n                 // treat fn keyword inside function pointer type as primitive\n@@ -554,7 +553,7 @@ fn keyword_hints(\n             };\n             KeywordHint::new(token.text().to_string(), module)\n         }\n-\n+        T![Self] => KeywordHint::new(token.text().to_string(), \"self_upper_keyword\".into()),\n         _ => KeywordHint::new(token.text().to_string(), format!(\"{}_keyword\", token.text())),\n     }\n }"}, {"sha": "2e93d895f0524b3b6b06cd390a09a76bd60f33ff", "filename": "crates/ide/src/moniker.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fmoniker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fmoniker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmoniker.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -69,7 +69,14 @@ pub(crate) fn moniker(\n     let file = sema.parse(file_id).syntax().clone();\n     let current_crate = crate_for_file(db, file_id)?;\n     let original_token = pick_best_token(file.token_at_offset(offset), |kind| match kind {\n-        IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] | COMMENT => 2,\n+        IDENT\n+        | INT_NUMBER\n+        | LIFETIME_IDENT\n+        | T![self]\n+        | T![super]\n+        | T![crate]\n+        | T![Self]\n+        | COMMENT => 2,\n         kind if kind.is_trivia() => 0,\n         _ => 1,\n     })?;"}, {"sha": "fb94342a7850aa7baeb91edeb4f2d0bd97dff293", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -126,7 +126,7 @@ impl StaticIndex<'_> {\n         let tokens = tokens.filter(|token| {\n             matches!(\n                 token.kind(),\n-                IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate]\n+                IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] | T![Self]\n             )\n         });\n         let mut result = StaticIndexedFile { file_id, inlay_hints, folds, tokens: vec![] };"}, {"sha": "968aa331164b5084d614d8e03b9c8058a7c4ba89", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -118,6 +118,7 @@ pub struct HlRange {\n // parameter:: Emitted for non-self function parameters.\n // property:: Emitted for struct and union fields.\n // selfKeyword:: Emitted for the self function parameter and self path-specifier.\n+// selfTypeKeyword:: Emitted for the Self type parameter.\n // toolModule:: Emitted for tool modules.\n // typeParameter:: Emitted for type parameters.\n // unresolvedReference:: Emitted for unresolved references, names that rust-analyzer can't find the definition of.\n@@ -327,7 +328,7 @@ fn traverse(\n                     // as otherwise we won't ever visit them\n                     match (token.kind(), parent.kind()) {\n                         (T![ident], NAME | NAME_REF) => parent.into(),\n-                        (T![self] | T![super] | T![crate], NAME_REF) => parent.into(),\n+                        (T![self] | T![super] | T![crate] | T![Self], NAME_REF) => parent.into(),\n                         (INT_NUMBER, NAME_REF) => parent.into(),\n                         (LIFETIME_IDENT, LIFETIME) => parent.into(),\n                         _ => token.into(),"}, {"sha": "43a3fb2d71bb46c35f0717ab784673e4ea1ed1b8", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -192,9 +192,11 @@ fn keyword(\n         T![true] | T![false] => HlTag::BoolLiteral.into(),\n         // crate is handled just as a token if it's in an `extern crate`\n         T![crate] if parent_matches::<ast::ExternCrate>(&token) => h,\n-        // self, crate and super are handled as either a Name or NameRef already, unless they\n+        // self, crate, super and `Self` are handled as either a Name or NameRef already, unless they\n         // are inside unmapped token trees\n-        T![self] | T![crate] | T![super] if parent_matches::<ast::NameRef>(&token) => return None,\n+        T![self] | T![crate] | T![super] | T![Self] if parent_matches::<ast::NameRef>(&token) => {\n+            return None\n+        }\n         T![self] if parent_matches::<ast::Name>(&token) => return None,\n         T![ref] => match token.parent().and_then(ast::IdentPat::cast) {\n             Some(ident) if sema.is_unsafe_ident_pat(&ident) => h | HlMod::Unsafe,\n@@ -269,12 +271,13 @@ fn highlight_name_ref(\n         }\n         NameRefClass::FieldShorthand { .. } => SymbolKind::Field.into(),\n     };\n-    if name_ref.self_token().is_some() {\n-        h.tag = HlTag::Symbol(SymbolKind::SelfParam);\n-    }\n-    if name_ref.crate_token().is_some() || name_ref.super_token().is_some() {\n-        h.tag = HlTag::Keyword;\n-    }\n+\n+    h.tag = match name_ref.token_kind() {\n+        T![Self] => HlTag::Symbol(SymbolKind::SelfType),\n+        T![self] => HlTag::Symbol(SymbolKind::SelfParam),\n+        T![super] | T![crate] => HlTag::Keyword,\n+        _ => h.tag,\n+    };\n     h\n }\n "}, {"sha": "cb9d36f8304c91276df07d258227d6e2dadc54b8", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -141,6 +141,7 @@ impl HlTag {\n                 SymbolKind::Macro => \"macro\",\n                 SymbolKind::Module => \"module\",\n                 SymbolKind::SelfParam => \"self_keyword\",\n+                SymbolKind::SelfType => \"self_type_keyword\",\n                 SymbolKind::Static => \"static\",\n                 SymbolKind::Struct => \"struct\",\n                 SymbolKind::ToolModule => \"tool_module\","}, {"sha": "86ed8dbd77768a350f33e1c11d3bf68dcf0599da", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_general.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -59,11 +59,11 @@\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"keyword\">where</span> <span class=\"type_param\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"keyword\">where</span> <span class=\"self_type\">Self</span><span class=\"colon\">:</span> <span class=\"brace\">{</span>\n+<span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait\">bar</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword reference\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n     <span class=\"brace\">}</span>\n@@ -210,7 +210,7 @@\n \n <span class=\"keyword\">impl</span> <span class=\"enum public\">Bool</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated consuming declaration public\">to_primitive</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n-        <span class=\"unresolved_reference\">matches</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"keyword\">self</span><span class=\"comma\">,</span> Self<span class=\"colon\">:</span><span class=\"colon\">:</span>True<span class=\"parenthesis\">)</span>\n+        <span class=\"bool_literal\">true</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n <span class=\"keyword\">const</span> <span class=\"constant declaration\">USAGE_OF_BOOL</span><span class=\"colon\">:</span><span class=\"builtin_type\">bool</span> <span class=\"operator\">=</span> <span class=\"enum public\">Bool</span><span class=\"operator\">::</span><span class=\"enum_variant public\">True</span><span class=\"operator\">.</span><span class=\"function associated consuming public\">to_primitive</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "145bba2a06c1e39a3d0633b62980ed041e64227c", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_keywords.html", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -0,0 +1,57 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.label              { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.intra_doc_link     { font-style: italic; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.trait.unsafe       { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.derive             { color: #94BFF3; font-style: italic; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.control            { font-style: italic; }\n+.reference          { font-style: italic; font-weight: bold; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"self_keyword crate_root\">self</span><span class=\"semicolon\">;</span>\n+\n+<span class=\"keyword\">use</span> <span class=\"keyword crate_root\">crate</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">use</span> <span class=\"self_keyword crate_root\">self</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">mod</span> <span class=\"module declaration\">__</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">use</span> <span class=\"keyword crate_root\">super</span><span class=\"operator\">::</span><span class=\"punctuation\">*</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">void</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+<span class=\"macro\">void</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"keyword\">Self</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">__</span> <span class=\"keyword\">where</span> <span class=\"self_type_keyword\">Self</span><span class=\"colon\">:</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">__</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">_</span><span class=\"colon\">:</span> <span class=\"unresolved_reference\">Self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "0af743431b66514af6e0240bf58b84ffa169e707", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -113,11 +113,11 @@ struct Foo {\n     x: u32,\n }\n \n-trait Bar where Self: {\n+trait Bar {\n     fn bar(&self) -> i32;\n }\n \n-impl Bar for Foo where Self: {\n+impl Bar for Foo {\n     fn bar(&self) -> i32 {\n         self.x\n     }\n@@ -264,7 +264,7 @@ pub enum Bool { True, False }\n \n impl Bool {\n     pub const fn to_primitive(self) -> bool {\n-        matches!(self, Self::True)\n+        true\n     }\n }\n const USAGE_OF_BOOL:bool = Bool::True.to_primitive();\n@@ -334,6 +334,30 @@ where\n     );\n }\n \n+#[test]\n+fn test_keyword_highlighting() {\n+    check_highlighting(\n+        r#\"\n+extern crate self;\n+\n+use crate;\n+use self;\n+mod __ {\n+    use super::*;\n+}\n+\n+macro_rules! void {\n+    ($($tt:tt)) => {}\n+}\n+void!(Self);\n+struct __ where Self:;\n+fn __(_: Self) {}\n+\"#,\n+        expect_file![\"./test_data/highlight_keywords.html\"],\n+        false,\n+    );\n+}\n+\n #[test]\n fn test_string_highlighting() {\n     // The format string detection is based on macro-expansion,"}, {"sha": "32b14764a109d906766dc2cb48f8397f7b789dfb", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -260,6 +260,7 @@ impl CompletionItemKind {\n                 SymbolKind::Macro => \"ma\",\n                 SymbolKind::Module => \"md\",\n                 SymbolKind::SelfParam => \"sp\",\n+                SymbolKind::SelfType => \"sy\",\n                 SymbolKind::Static => \"sc\",\n                 SymbolKind::Struct => \"st\",\n                 SymbolKind::ToolModule => \"tm\","}, {"sha": "efb704b253d7c6318681a24f37d2227647eba73d", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -238,7 +238,9 @@ impl ImportGroup {\n                 \"core\" => ImportGroup::Std,\n                 _ => ImportGroup::ExternCrate,\n             },\n-            PathSegmentKind::Type { .. } => unreachable!(),\n+            // these aren't valid use paths, so fall back to something random\n+            PathSegmentKind::SelfTypeKw => ImportGroup::ExternCrate,\n+            PathSegmentKind::Type { .. } => ImportGroup::ExternCrate,\n         }\n     }\n }"}, {"sha": "3f64c0a124394d93486ba68c2d41512024c7bf6f", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -163,6 +163,7 @@ pub enum SymbolKind {\n     Macro,\n     Module,\n     SelfParam,\n+    SelfType,\n     Static,\n     Struct,\n     ToolModule,"}, {"sha": "b4a60574e51ed46259058fd14d96852905ae06b3", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -1,10 +1,10 @@\n use super::*;\n \n pub(super) const PATH_FIRST: TokenSet =\n-    TokenSet::new(&[IDENT, T![self], T![super], T![crate], T![:], T![<]]);\n+    TokenSet::new(&[IDENT, T![self], T![super], T![crate], T![Self], T![:], T![<]]);\n \n pub(super) fn is_path_start(p: &Parser) -> bool {\n-    is_use_path_start(p) || p.at(T![<])\n+    is_use_path_start(p) || p.at(T![<]) || p.at(T![Self])\n }\n \n pub(super) fn is_use_path_start(p: &Parser) -> bool {\n@@ -88,7 +88,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n             }\n             // test crate_path\n             // use crate::foo;\n-            T![self] | T![super] | T![crate] => {\n+            T![self] | T![super] | T![crate] | T![Self] => {\n                 let m = p.start();\n                 p.bump_any();\n                 m.complete(p, NAME_REF);"}, {"sha": "ff067f5293d74664c19c9dc1e28f9feba29eef75", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -14,6 +14,7 @@ pub(super) const TYPE_FIRST: TokenSet = paths::PATH_FIRST.union(TokenSet::new(&[\n     T![for],\n     T![impl],\n     T![dyn],\n+    T![Self],\n ]));\n \n const TYPE_RECOVERY_SET: TokenSet = TokenSet::new(&[\n@@ -46,7 +47,7 @@ fn type_with_bounds_cond(p: &mut Parser, allow_bounds: bool) {\n         T![dyn] => dyn_trait_type(p),\n         // Some path types are not allowed to have bounds (no plus)\n         T![<] => path_type_(p, allow_bounds),\n-        _ if paths::is_use_path_start(p) => path_or_macro_type_(p, allow_bounds),\n+        _ if paths::is_path_start(p) => path_or_macro_type_(p, allow_bounds),\n         _ => {\n             p.err_recover(\"expected type\", TYPE_RECOVERY_SET);\n         }"}, {"sha": "297809976eea9560e055a39c5ab0f880ae4afa23", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -90,6 +90,7 @@ pub enum SyntaxKind {\n     REF_KW,\n     RETURN_KW,\n     SELF_KW,\n+    SELF_TYPE_KW,\n     STATIC_KW,\n     STRUCT_KW,\n     SUPER_KW,\n@@ -264,10 +265,10 @@ impl SyntaxKind {\n             AS_KW | ASYNC_KW | AWAIT_KW | BOX_KW | BREAK_KW | CONST_KW | CONTINUE_KW | CRATE_KW\n             | DYN_KW | ELSE_KW | ENUM_KW | EXTERN_KW | FALSE_KW | FN_KW | FOR_KW | IF_KW\n             | IMPL_KW | IN_KW | LET_KW | LOOP_KW | MACRO_KW | MATCH_KW | MOD_KW | MOVE_KW\n-            | MUT_KW | PUB_KW | REF_KW | RETURN_KW | SELF_KW | STATIC_KW | STRUCT_KW | SUPER_KW\n-            | TRAIT_KW | TRUE_KW | TRY_KW | TYPE_KW | UNSAFE_KW | USE_KW | WHERE_KW | WHILE_KW\n-            | YIELD_KW | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW | RAW_KW\n-            | MACRO_RULES_KW => true,\n+            | MUT_KW | PUB_KW | REF_KW | RETURN_KW | SELF_KW | SELF_TYPE_KW | STATIC_KW\n+            | STRUCT_KW | SUPER_KW | TRAIT_KW | TRUE_KW | TRY_KW | TYPE_KW | UNSAFE_KW | USE_KW\n+            | WHERE_KW | WHILE_KW | YIELD_KW | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW\n+            | RAW_KW | MACRO_RULES_KW => true,\n             _ => false,\n         }\n     }\n@@ -319,6 +320,7 @@ impl SyntaxKind {\n             \"ref\" => REF_KW,\n             \"return\" => RETURN_KW,\n             \"self\" => SELF_KW,\n+            \"Self\" => SELF_TYPE_KW,\n             \"static\" => STATIC_KW,\n             \"struct\" => STRUCT_KW,\n             \"super\" => SUPER_KW,\n@@ -383,5 +385,5 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [Self] => { $ crate :: SyntaxKind :: SELF_TYPE_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [yield] => { $ crate :: SyntaxKind :: YIELD_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n pub use T;"}, {"sha": "a0b562629624e186e1b3e732b9ddeddb85b394a0", "filename": "crates/parser/test_data/parser/inline/ok/0018_arb_self_types.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.txt", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.txt?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -29,7 +29,7 @@ SOURCE_FILE\n                 PATH\n                   PATH_SEGMENT\n                     NAME_REF\n-                      IDENT \"Self\"\n+                      SELF_TYPE_KW \"Self\"\n           R_PAREN \")\"\n         WHITESPACE \" \"\n         BLOCK_EXPR\n@@ -63,7 +63,7 @@ SOURCE_FILE\n                         PATH\n                           PATH_SEGMENT\n                             NAME_REF\n-                              IDENT \"Self\"\n+                              SELF_TYPE_KW \"Self\"\n                     R_ANGLE \">\"\n           R_PAREN \")\"\n         WHITESPACE \" \""}, {"sha": "dd7f76eb939704acb724192965185b615490a80c", "filename": "crates/parser/test_data/parser/inline/ok/0041_trait_item.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.txt", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0041_trait_item.txt?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -24,7 +24,7 @@ SOURCE_FILE\n             PATH\n               PATH_SEGMENT\n                 NAME_REF\n-                  IDENT \"Self\"\n+                  SELF_TYPE_KW \"Self\"\n         SEMICOLON \";\"\n       WHITESPACE \" \"\n       R_CURLY \"}\""}, {"sha": "46cd8ee66545e3615e99ab8b5c0d4eb7f1d8fd8c", "filename": "crates/parser/test_data/parser/inline/ok/0176_trait_item_where_clause.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0176_trait_item_where_clause.txt", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0176_trait_item_where_clause.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0176_trait_item_where_clause.txt?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -13,7 +13,7 @@ SOURCE_FILE\n           PATH\n             PATH_SEGMENT\n               NAME_REF\n-                IDENT \"Self\"\n+                SELF_TYPE_KW \"Self\"\n         COLON \":\"\n         WHITESPACE \" \"\n         TYPE_BOUND_LIST"}, {"sha": "4443d9d142630f0e42c0d60c1598d9f03cf2478f", "filename": "crates/parser/test_data/parser/inline/ok/0177_trait_alias_where_clause.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0177_trait_alias_where_clause.txt", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0177_trait_alias_where_clause.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0177_trait_alias_where_clause.txt?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -73,7 +73,7 @@ SOURCE_FILE\n           PATH\n             PATH_SEGMENT\n               NAME_REF\n-                IDENT \"Self\"\n+                SELF_TYPE_KW \"Self\"\n         COLON \":\"\n         WHITESPACE \" \"\n         TYPE_BOUND_LIST"}, {"sha": "9684bb11cd8adbeaf3e6bcf2082887528824d3d9", "filename": "crates/parser/test_data/parser/ok/0045_block_attrs.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0045_block_attrs.txt?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -199,7 +199,7 @@ SOURCE_FILE\n                                       PATH\n                                         PATH_SEGMENT\n                                           NAME_REF\n-                                            IDENT \"Self\"\n+                                            SELF_TYPE_KW \"Self\"\n                                   R_ANGLE \">\"\n           R_PAREN \")\"\n         WHITESPACE \" \""}, {"sha": "f8b11e7782c91b2fe1cca665bddd6d75db8dfafb", "filename": "crates/parser/test_data/parser/ok/0051_parameter_attrs.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.txt?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -494,7 +494,7 @@ SOURCE_FILE\n               PATH\n                 PATH_SEGMENT\n                   NAME_REF\n-                    IDENT \"Self\"\n+                    SELF_TYPE_KW \"Self\"\n           R_PAREN \")\"\n         WHITESPACE \" \"\n         BLOCK_EXPR\n@@ -536,7 +536,7 @@ SOURCE_FILE\n                         PATH\n                           PATH_SEGMENT\n                             NAME_REF\n-                              IDENT \"Self\"\n+                              SELF_TYPE_KW \"Self\"\n                     R_ANGLE \">\"\n           R_PAREN \")\"\n         WHITESPACE \" \""}, {"sha": "5fb945ea98727c50875ae87fabba8b9297a45ac9", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -66,6 +66,7 @@ define_semantic_token_types![\n     (PARENTHESIS, \"parenthesis\"),\n     (PUNCTUATION, \"punctuation\"),\n     (SELF_KEYWORD, \"selfKeyword\"),\n+    (SELF_TYPE_KEYWORD, \"selfTypeKeyword\"),\n     (SEMICOLON, \"semicolon\"),\n     (TYPE_ALIAS, \"typeAlias\"),\n     (TOOL_MODULE, \"toolModule\"),"}, {"sha": "4a2b3a1b47ba5f2d12b07413588ab252d8bcb516", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -55,7 +55,9 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         | SymbolKind::Attribute\n         | SymbolKind::Derive => lsp_types::SymbolKind::FUNCTION,\n         SymbolKind::Module | SymbolKind::ToolModule => lsp_types::SymbolKind::MODULE,\n-        SymbolKind::TypeAlias | SymbolKind::TypeParam => lsp_types::SymbolKind::TYPE_PARAMETER,\n+        SymbolKind::TypeAlias | SymbolKind::TypeParam | SymbolKind::SelfType => {\n+            lsp_types::SymbolKind::TYPE_PARAMETER\n+        }\n         SymbolKind::Field => lsp_types::SymbolKind::FIELD,\n         SymbolKind::Static => lsp_types::SymbolKind::CONSTANT,\n         SymbolKind::Const => lsp_types::SymbolKind::CONSTANT,\n@@ -124,6 +126,7 @@ pub(crate) fn completion_item_kind(\n             SymbolKind::Macro => lsp_types::CompletionItemKind::FUNCTION,\n             SymbolKind::Module => lsp_types::CompletionItemKind::MODULE,\n             SymbolKind::SelfParam => lsp_types::CompletionItemKind::VALUE,\n+            SymbolKind::SelfType => lsp_types::CompletionItemKind::TYPE_PARAMETER,\n             SymbolKind::Static => lsp_types::CompletionItemKind::VALUE,\n             SymbolKind::Struct => lsp_types::CompletionItemKind::STRUCT,\n             SymbolKind::Trait => lsp_types::CompletionItemKind::INTERFACE,\n@@ -483,6 +486,7 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::Label => semantic_tokens::LABEL,\n             SymbolKind::ValueParam => lsp_types::SemanticTokenType::PARAMETER,\n             SymbolKind::SelfParam => semantic_tokens::SELF_KEYWORD,\n+            SymbolKind::SelfType => semantic_tokens::SELF_TYPE_KEYWORD,\n             SymbolKind::Local => lsp_types::SemanticTokenType::VARIABLE,\n             SymbolKind::Function => {\n                 if highlight.mods.contains(HlMod::Associated) {"}, {"sha": "d8f829074559f5504afbfddf91ce393c5259a8f4", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -30,7 +30,7 @@ rayon = \"1\"\n expect-test = \"1.2.0-pre.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"=1.16.0\"\n+ungrammar = \"=1.16.1\"\n \n test_utils = { path = \"../test_utils\" }\n sourcegen = { path = \"../sourcegen\" }"}, {"sha": "6f236c01ce1537a3d248851be45b417a6cc70946", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -1,5 +1,6 @@\n //! Generated by `sourcegen_ast`, do not edit by hand.\n \n+#![allow(non_snake_case)]\n use crate::{\n     ast::{self, support, AstChildren, AstNode},\n     SyntaxKind::{self, *},\n@@ -24,6 +25,7 @@ impl NameRef {\n     pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n     pub fn super_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![super]) }\n     pub fn crate_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![crate]) }\n+    pub fn Self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![Self]) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "19a007e072a7f5695440708ca458a6260639b826", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -185,7 +185,7 @@ pub(crate) fn generic_arg_list() -> ast::GenericArgList {\n }\n \n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n-    ast_from_text(&format!(\"use {};\", name_ref))\n+    ast_from_text(&format!(\"type __ = {};\", name_ref))\n }\n \n pub fn path_segment_ty(type_ref: ast::Type, trait_ref: Option<ast::PathType>) -> ast::PathSegment {\n@@ -209,15 +209,15 @@ pub fn path_segment_crate() -> ast::PathSegment {\n }\n \n pub fn path_unqualified(segment: ast::PathSegment) -> ast::Path {\n-    ast_from_text(&format!(\"use {}\", segment))\n+    ast_from_text(&format!(\"type __ = {};\", segment))\n }\n \n pub fn path_qualified(qual: ast::Path, segment: ast::PathSegment) -> ast::Path {\n     ast_from_text(&format!(\"{}::{}\", qual, segment))\n }\n // FIXME: path concatenation operation doesn't make sense as AST op.\n pub fn path_concat(first: ast::Path, second: ast::Path) -> ast::Path {\n-    ast_from_text(&format!(\"{}::{}\", first, second))\n+    ast_from_text(&format!(\"type __ = {}::{};\", first, second))\n }\n \n pub fn path_from_segments(\n@@ -234,7 +234,7 @@ pub fn path_from_segments(\n \n pub fn join_paths(paths: impl IntoIterator<Item = ast::Path>) -> ast::Path {\n     let paths = paths.into_iter().map(|it| it.syntax().clone()).join(\"::\");\n-    ast_from_text(&format!(\"use {};\", paths))\n+    ast_from_text(&format!(\"type __ = {};\", paths))\n }\n \n // FIXME: should not be pub\n@@ -782,6 +782,7 @@ pub fn struct_(\n     ))\n }\n \n+#[track_caller]\n fn ast_from_text<N: AstNode>(text: &str) -> N {\n     let parse = SourceFile::parse(text);\n     let node = match parse.tree().syntax().descendants().find_map(N::cast) {"}, {"sha": "333ee35d636a7a3032acf8ca53caef03d4378ad4", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -34,6 +34,10 @@ impl ast::NameRef {\n     pub fn as_tuple_field(&self) -> Option<usize> {\n         self.text().parse().ok()\n     }\n+\n+    pub fn token_kind(&self) -> SyntaxKind {\n+        self.syntax().first_token().map_or(SyntaxKind::ERROR, |it| it.kind())\n+    }\n }\n \n fn text_of_first_token(node: &SyntaxNode) -> TokenText<'_> {\n@@ -183,6 +187,7 @@ impl ast::Attr {\n pub enum PathSegmentKind {\n     Name(ast::NameRef),\n     Type { type_ref: Option<ast::Type>, trait_ref: Option<ast::PathType> },\n+    SelfTypeKw,\n     SelfKw,\n     SuperKw,\n     CrateKw,\n@@ -204,16 +209,21 @@ impl ast::PathSegment {\n         self.name_ref().and_then(|it| it.self_token())\n     }\n \n+    pub fn self_type_token(&self) -> Option<SyntaxToken> {\n+        self.name_ref().and_then(|it| it.Self_token())\n+    }\n+\n     pub fn super_token(&self) -> Option<SyntaxToken> {\n         self.name_ref().and_then(|it| it.super_token())\n     }\n \n     pub fn kind(&self) -> Option<PathSegmentKind> {\n         let res = if let Some(name_ref) = self.name_ref() {\n-            match name_ref.syntax().first_token().map(|it| it.kind()) {\n-                Some(T![self]) => PathSegmentKind::SelfKw,\n-                Some(T![super]) => PathSegmentKind::SuperKw,\n-                Some(T![crate]) => PathSegmentKind::CrateKw,\n+            match name_ref.token_kind() {\n+                T![Self] => PathSegmentKind::SelfTypeKw,\n+                T![self] => PathSegmentKind::SelfKw,\n+                T![super] => PathSegmentKind::SuperKw,\n+                T![crate] => PathSegmentKind::CrateKw,\n                 _ => PathSegmentKind::Name(name_ref),\n             }\n         } else {"}, {"sha": "e808cb4be444bc0408c3c9ba55017d4371780753", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -67,8 +67,8 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n     keywords: &[\n         \"as\", \"async\", \"await\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"dyn\", \"else\",\n         \"enum\", \"extern\", \"false\", \"fn\", \"for\", \"if\", \"impl\", \"in\", \"let\", \"loop\", \"macro\",\n-        \"match\", \"mod\", \"move\", \"mut\", \"pub\", \"ref\", \"return\", \"self\", \"static\", \"struct\", \"super\",\n-        \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n+        \"match\", \"mod\", \"move\", \"mut\", \"pub\", \"ref\", \"return\", \"self\", \"Self\", \"static\", \"struct\",\n+        \"super\", \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n     ],\n     contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\"],\n     literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],"}, {"sha": "cb38abfe891f91533fed049a81f2e673f99d08c0", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -297,6 +297,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n     }\n \n     let ast = quote! {\n+        #![allow(non_snake_case)]\n         use crate::{\n             SyntaxNode, SyntaxToken, SyntaxKind::{self, *},\n             ast::{self, AstNode, AstChildren, support},\n@@ -356,21 +357,24 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> String {\n     let punctuation =\n         grammar.punct.iter().map(|(_token, name)| format_ident!(\"{}\", name)).collect::<Vec<_>>();\n \n-    let full_keywords_values = &grammar.keywords;\n-    let full_keywords =\n-        full_keywords_values.iter().map(|kw| format_ident!(\"{}_KW\", to_upper_snake_case(kw)));\n+    let x = |&name| match name {\n+        \"Self\" => format_ident!(\"SELF_TYPE_KW\"),\n+        name => format_ident!(\"{}_KW\", to_upper_snake_case(name)),\n+    };\n+    let full_keywords_values = grammar.keywords;\n+    let full_keywords = full_keywords_values.iter().map(x);\n \n     let contextual_keywords_values = &grammar.contextual_keywords;\n-    let contextual_keywords =\n-        contextual_keywords_values.iter().map(|kw| format_ident!(\"{}_KW\", to_upper_snake_case(kw)));\n+    let contextual_keywords = contextual_keywords_values.iter().map(x);\n \n-    let all_keywords_values =\n-        grammar.keywords.iter().chain(grammar.contextual_keywords.iter()).collect::<Vec<_>>();\n-    let all_keywords_idents = all_keywords_values.iter().map(|kw| format_ident!(\"{}\", kw));\n-    let all_keywords = all_keywords_values\n+    let all_keywords_values = grammar\n+        .keywords\n         .iter()\n-        .map(|name| format_ident!(\"{}_KW\", to_upper_snake_case(name)))\n+        .chain(grammar.contextual_keywords.iter())\n+        .copied()\n         .collect::<Vec<_>>();\n+    let all_keywords_idents = all_keywords_values.iter().map(|kw| format_ident!(\"{}\", kw));\n+    let all_keywords = all_keywords_values.iter().map(x).collect::<Vec<_>>();\n \n     let literals =\n         grammar.literals.iter().map(|name| format_ident!(\"{}\", name)).collect::<Vec<_>>();"}, {"sha": "4843ea84218b02f8508e51e387c4bac21a6793d0", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96c11f5fd6bb66d60932275ff052025ea6073fb6/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/96c11f5fd6bb66d60932275ff052025ea6073fb6/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=96c11f5fd6bb66d60932275ff052025ea6073fb6", "patch": "@@ -1294,6 +1294,11 @@\n                 \"description\": \"Style for the self keyword\",\n                 \"superType\": \"keyword\"\n             },\n+            {\n+                \"id\": \"selfTypeKeyword\",\n+                \"description\": \"Style for the self type keyword\",\n+                \"superType\": \"keyword\"\n+            },\n             {\n                 \"id\": \"semicolon\",\n                 \"description\": \"Style for ;\","}]}