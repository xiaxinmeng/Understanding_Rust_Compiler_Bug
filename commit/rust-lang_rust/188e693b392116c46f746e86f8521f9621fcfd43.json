{"sha": "188e693b392116c46f746e86f8521f9621fcfd43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OGU2OTNiMzkyMTE2YzQ2Zjc0NmU4NmY4NTIxZjk2MjFmY2ZkNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-26T18:41:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-26T18:41:38Z"}, "message": "Auto merge of #49101 - mark-i-m:stabilize_i128, r=nagisa\n\nStabilize 128-bit integers :tada:\n\ncc #35118\n\nEDIT: This should be merged only after the following have been merged:\n- [x] https://github.com/rust-lang-nursery/compiler-builtins/pull/236\n- [x] https://github.com/rust-lang/book/pull/1230", "tree": {"sha": "21205e49317c0c351e2ef53a584559a213e862b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21205e49317c0c351e2ef53a584559a213e862b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/188e693b392116c46f746e86f8521f9621fcfd43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/188e693b392116c46f746e86f8521f9621fcfd43", "html_url": "https://github.com/rust-lang/rust/commit/188e693b392116c46f746e86f8521f9621fcfd43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/188e693b392116c46f746e86f8521f9621fcfd43/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "html_url": "https://github.com/rust-lang/rust/commit/ab8b961677ac5c74762dcea955aa0ff4d7fe4915"}, {"sha": "140bf949bf65bb0479dbe31bd3474d5546ef59e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/140bf949bf65bb0479dbe31bd3474d5546ef59e1", "html_url": "https://github.com/rust-lang/rust/commit/140bf949bf65bb0479dbe31bd3474d5546ef59e1"}], "stats": {"total": 407, "additions": 106, "deletions": 301}, "files": [{"sha": "a850b7644c3a76fee296606cf1ea858640251c41", "filename": "src/doc/unstable-book/src/language-features/i128-type.md", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fi128-type.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fi128-type.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fi128-type.md?ref=ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "patch": "@@ -1,25 +0,0 @@\n-# `i128_type`\n-\n-The tracking issue for this feature is: [#35118]\n-\n-[#35118]: https://github.com/rust-lang/rust/issues/35118\n-\n-------------------------\n-\n-The `i128_type` feature adds support for 128 bit signed and unsigned integer\n-types.\n-\n-```rust\n-#![feature(i128_type)]\n-\n-fn main() {\n-    assert_eq!(1u128 + 1u128, 2u128);\n-    assert_eq!(u128::min_value(), 0);\n-    assert_eq!(u128::max_value(), 340282366920938463463374607431768211455);\n-\n-    assert_eq!(1i128 - 2i128, -1i128);\n-    assert_eq!(i128::min_value(), -170141183460469231731687303715884105728);\n-    assert_eq!(i128::max_value(), 170141183460469231731687303715884105727);\n-}\n-```\n-"}, {"sha": "0858988952c105c3e987f16e977ed8510209aa61", "filename": "src/doc/unstable-book/src/language-features/repr128.md", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr128.md", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr128.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr128.md?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -0,0 +1,18 @@\n+# `repr128`\n+\n+The tracking issue for this feature is: [#35118]\n+\n+[#35118]: https://github.com/rust-lang/rust/issues/35118\n+\n+------------------------\n+\n+The `repr128` feature adds support for `#[repr(u128)]` on `enum`s.\n+\n+```rust\n+#![feature(repr128)]\n+\n+#[repr(u128)]\n+enum Foo {\n+    Bar(u64),\n+}\n+```"}, {"sha": "09685d1bb40b0c5449251157f617afeaf3220e97", "filename": "src/liballoc/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Fliballoc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Fliballoc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -10,7 +10,7 @@\n \n #![deny(warnings)]\n \n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(rand)]\n #![feature(repr_simd)]\n #![feature(test)]"}, {"sha": "19d64d8fea9ecbed5765eaa59b85cfd578c12fed", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -97,7 +97,7 @@\n #![feature(from_ref)]\n #![feature(fundamental)]\n #![feature(generic_param_attrs)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(iter_rfold)]\n #![feature(lang_items)]\n #![feature(needs_allocator)]"}, {"sha": "263a703b10351d8930e48045b4fd09768991b867", "filename": "src/libcompiler_builtins", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -1 +1 @@\n-Subproject commit 266ea0740a5bdd262a38bbd88fb55fc3d2a7a96e\n+Subproject commit 263a703b10351d8930e48045b4fd09768991b867"}, {"sha": "3e1f21cafe4124dfa754242990dd7fd8932ab662", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -308,7 +308,7 @@ pub trait Hasher {\n     }\n     /// Writes a single `u128` into this hasher.\n     #[inline]\n-    #[unstable(feature = \"i128\", issue = \"35118\")]\n+    #[stable(feature = \"i128\", since = \"1.26.0\")]\n     fn write_u128(&mut self, i: u128) {\n         self.write(&unsafe { mem::transmute::<_, [u8; 16]>(i) })\n     }\n@@ -348,7 +348,7 @@ pub trait Hasher {\n     }\n     /// Writes a single `i128` into this hasher.\n     #[inline]\n-    #[unstable(feature = \"i128\", issue = \"35118\")]\n+    #[stable(feature = \"i128\", since = \"1.26.0\")]\n     fn write_i128(&mut self, i: i128) {\n         self.write_u128(i as u128)\n     }"}, {"sha": "11fecde395164379c1314376c98fdef125d31a9a", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -78,7 +78,7 @@\n #![feature(doc_spotlight)]\n #![feature(fn_must_use)]\n #![feature(fundamental)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(intrinsics)]\n #![feature(iterator_flatten)]"}, {"sha": "989376d1ac2d2021f891c83d4432791ddf6ee1d4", "filename": "src/libcore/num/i128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Fnum%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Fnum%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi128.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -12,6 +12,6 @@\n //!\n //! *[See also the `i128` primitive type](../../std/primitive.i128.html).*\n \n-#![unstable(feature = \"i128\", issue=\"35118\")]\n+#![stable(feature = \"i128\", since = \"1.26.0\")]\n \n-int_module! { i128, #[unstable(feature = \"i128\", issue=\"35118\")] }\n+int_module! { i128, #[stable(feature = \"i128\", since=\"1.26.0\")] }"}, {"sha": "a5ba0bcdf7e6688923a191ad45c21825e549c80e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -97,14 +97,8 @@ nonzero_integers! {\n     NonZeroU16(u16); NonZeroI16(i16);\n     NonZeroU32(u32); NonZeroI32(i32);\n     NonZeroU64(u64); NonZeroI64(i64);\n-    NonZeroUsize(usize); NonZeroIsize(isize);\n-}\n-\n-nonzero_integers! {\n-    // Change this to `#[unstable(feature = \"i128\", issue = \"35118\")]`\n-    // if other NonZero* integer types are stabilizied before 128-bit integers\n-    #[unstable(feature = \"nonzero\", issue = \"49137\")]\n     NonZeroU128(u128); NonZeroI128(i128);\n+    NonZeroUsize(usize); NonZeroIsize(isize);\n }\n \n /// Provides intentionally-wrapped arithmetic on `T`.\n@@ -1635,11 +1629,7 @@ impl i64 {\n #[lang = \"i128\"]\n impl i128 {\n     int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n-        170141183460469231731687303715884105727, \"#![feature(i128_type)]\n-#![feature(i128)]\n-# fn main() {\n-\", \"\n-# }\" }\n+        170141183460469231731687303715884105727, \"\", \"\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n@@ -3493,12 +3483,7 @@ impl u64 {\n \n #[lang = \"u128\"]\n impl u128 {\n-    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"#![feature(i128_type)]\n-#![feature(i128)]\n-\n-# fn main() {\n-\", \"\n-# }\" }\n+    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n@@ -4055,39 +4040,39 @@ macro_rules! impl_from {\n impl_from! { u8, u16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { u8, u32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { u8, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n-impl_from! { u8, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u8, u128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n impl_from! { u8, usize, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { u16, u32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { u16, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n-impl_from! { u16, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u16, u128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n impl_from! { u32, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n-impl_from! { u32, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n-impl_from! { u64, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u32, u128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n+impl_from! { u64, u128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n \n // Signed -> Signed\n impl_from! { i8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { i8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { i8, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n-impl_from! { i8, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { i8, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n impl_from! { i8, isize, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { i16, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { i16, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n-impl_from! { i16, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { i16, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n impl_from! { i32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n-impl_from! { i32, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n-impl_from! { i64, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { i32, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n+impl_from! { i64, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n \n // Unsigned -> Signed\n impl_from! { u8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { u8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { u8, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n-impl_from! { u8, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u8, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n impl_from! { u16, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n impl_from! { u16, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n-impl_from! { u16, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u16, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n impl_from! { u32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n-impl_from! { u32, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n-impl_from! { u64, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u32, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n+impl_from! { u64, i128, #[stable(feature = \"i128\", since = \"1.26.0\")] }\n \n // Note: integers can only be represented with full precision in a float if\n // they fit in the significand, which is 24 bits in f32 and 53 bits in f64."}, {"sha": "e8c783a1bb542e20f573a3d6648a38cd61c36c83", "filename": "src/libcore/num/u128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Fnum%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Fnum%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu128.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -12,5 +12,5 @@\n //!\n //! *[See also the `u128` primitive type](../../std/primitive.u128.html).*\n \n-#![unstable(feature = \"i128\", issue=\"35118\")]\n-uint_module! { u128, #[unstable(feature = \"i128\", issue=\"35118\")] }\n+#![stable(feature = \"i128\", since = \"1.26.0\")]\n+uint_module! { u128, #[stable(feature = \"i128\", since=\"1.26.0\")] }"}, {"sha": "0b70f692403676c6093ccc282448518b63bbcf9e", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -23,7 +23,7 @@\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n #![feature(iterator_step_by)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(iterator_try_fold)]\n #![feature(iterator_flatten)]"}, {"sha": "716a2cc6cbb11f24ff0a9fcdd7cf583a9a476330", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -34,7 +34,7 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(lang_items)]"}, {"sha": "e835d6192e5477f804bf41ca4e2e2aef87fdfe0a", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -52,8 +52,7 @@\n #![feature(entry_or_default)]\n #![feature(from_ref)]\n #![feature(fs_read_write)]\n-#![feature(i128)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type, i128))]\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![cfg_attr(windows, feature(libc))]\n #![feature(match_default_bindings)]"}, {"sha": "2ee7bea84765c42b6987affaea7ea37b969176c8", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -46,8 +46,8 @@\n #![deny(warnings)]\n #![forbid(unsafe_code)]\n \n-#![feature(i128_type)]\n #![cfg_attr(stage0, feature(slice_patterns))]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(try_from)]\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this."}, {"sha": "627d79724b28a463568723c97dedc96728eaa13d", "filename": "src/librustc_apfloat/tests/ieee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n \n #[macro_use]\n extern crate rustc_apfloat;"}, {"sha": "2620448927d86e5f283537ff44b67f6fe40dd5c6", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -23,7 +23,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(macro_lifetime_matcher)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(from_ref)]\n \n extern crate arena;"}, {"sha": "7177e2818fbcc8029b98c4d0b95b0f40cb87c0d3", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -19,8 +19,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![feature(i128)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type, i128))]\n \n extern crate rustc_apfloat;\n "}, {"sha": "378a06dd9120a6887553549cce1257e49f305aab", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -26,9 +26,8 @@\n #![feature(unboxed_closures)]\n #![feature(fn_traits)]\n #![feature(unsize)]\n-#![feature(i128_type)]\n-#![feature(i128)]\n #![cfg_attr(stage0, feature(conservative_impl_trait))]\n+#![cfg_attr(stage0, feature(i128_type, i128))]\n #![feature(specialization)]\n #![feature(optin_builtin_traits)]\n #![feature(underscore_lifetimes)]"}, {"sha": "37ae64cef572562f1467ca98c75e93e5de0096e2", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -18,7 +18,7 @@\n #![feature(range_contains)]\n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(stage0, feature(conservative_impl_trait))]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(optin_builtin_traits)]\n \n extern crate atty;"}, {"sha": "5a33f566e903a393bc97754628c47f36101a6e20", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -17,7 +17,7 @@\n \n #![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(fs_read_write)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(specialization)]\n "}, {"sha": "d024adad9d0305af87d052541c06f26fd7934a8e", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -27,7 +27,7 @@\n #![cfg_attr(test, feature(test))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(macro_vis_matcher)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "4af5ec9ae08ea0d023e23e1516d9f36b5899644b", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -16,7 +16,7 @@\n #![feature(box_patterns)]\n #![cfg_attr(stage0, feature(conservative_impl_trait))]\n #![feature(fs_read_write)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(libc)]\n #![feature(macro_lifetime_matcher)]\n #![feature(proc_macro_internals)]"}, {"sha": "a1f096b2a382acd85894e2523a13a93cc9b7392a", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -27,7 +27,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(decl_macro)]\n #![feature(dyn_trait)]\n #![feature(fs_read_write)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(macro_vis_matcher)]\n #![feature(match_default_bindings)]"}, {"sha": "97dcf081f8c8d8f85a7626ada6e8260366895a2e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -57,7 +57,7 @@ use syntax::ast::{FnDecl, ForeignItem, ForeignItemKind, GenericParam, Generics};\n use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Label, Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n-use syntax::feature_gate::{feature_err, emit_feature_err, GateIssue};\n+use syntax::feature_gate::{feature_err, GateIssue};\n use syntax::parse::token;\n use syntax::ptr::P;\n \n@@ -3172,17 +3172,6 @@ impl<'a> Resolver<'a> {\n                        self.primitive_type_table.primitive_types\n                            .contains_key(&path[0].node.name) => {\n                 let prim = self.primitive_type_table.primitive_types[&path[0].node.name];\n-                match prim {\n-                    TyUint(UintTy::U128) | TyInt(IntTy::I128) => {\n-                        if !self.session.features_untracked().i128_type {\n-                            emit_feature_err(&self.session.parse_sess,\n-                                                \"i128_type\", span, GateIssue::Language,\n-                                                \"128-bit type is unstable\");\n-\n-                        }\n-                    }\n-                    _ => {}\n-                }\n                 PathResolution::with_unresolved_segments(Def::PrimTy(prim), path.len() - 1)\n             }\n             PathResult::Module(module) => PathResolution::new(module.def().unwrap()),"}, {"sha": "bd33707b1c6f77fca9bbd5fce1d4edc9d7abbf88", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -24,8 +24,7 @@\n #![feature(custom_attribute)]\n #![feature(fs_read_write)]\n #![allow(unused_attributes)]\n-#![feature(i128_type)]\n-#![feature(i128)]\n+#![cfg_attr(stage0, feature(i128_type, i128))]\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]\n #![feature(libc)]\n #![feature(quote)]"}, {"sha": "99de124c6e1ad7fb510965230fda017e7468f255", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -21,7 +21,7 @@\n #![feature(box_syntax)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![cfg_attr(stage0, feature(conservative_impl_trait))]"}, {"sha": "8b3d5af3edd021e68a07d5b062e10f449b231c80", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -86,7 +86,7 @@ This API is completely unstable and subject to change.\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![cfg_attr(stage0, feature(never_type))]\n \n #[macro_use] extern crate log;"}, {"sha": "ee95252346223fa86d2869822a8b2d41b302767d", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -23,7 +23,7 @@ Core encoding and decoding interfaces.\n \n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(specialization)]\n #![cfg_attr(test, feature(test))]\n "}, {"sha": "93996868f16c790f721c0f049f10472f3c126382", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -269,8 +269,7 @@\n #![feature(generic_param_attrs)]\n #![feature(hashmap_internals)]\n #![feature(heap_api)]\n-#![feature(i128)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type, i128))]\n #![feature(int_error_internals)]\n #![feature(integer_atomics)]\n #![feature(into_cow)]\n@@ -435,7 +434,7 @@ pub use core::i16;\n pub use core::i32;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::i64;\n-#[unstable(feature = \"i128\", issue = \"35118\")]\n+#[stable(feature = \"i128\", since = \"1.26.0\")]\n pub use core::i128;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::usize;\n@@ -465,7 +464,7 @@ pub use alloc::string;\n pub use alloc::vec;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use std_unicode::char;\n-#[unstable(feature = \"i128\", issue = \"35118\")]\n+#[stable(feature = \"i128\", since = \"1.26.0\")]\n pub use core::u128;\n \n pub mod f32;"}, {"sha": "25fa9095536381c44179d228611603baaaffa619", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -1355,7 +1355,7 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n     }\n }\n \n-#[unstable(feature = \"i128\", issue = \"35118\")]\n+#[stable(feature = \"i128\", since = \"1.26.0\")]\n impl From<Ipv6Addr> for u128 {\n     fn from(ip: Ipv6Addr) -> u128 {\n         let ip = ip.segments();\n@@ -1364,7 +1364,7 @@ impl From<Ipv6Addr> for u128 {\n             ((ip[6] as u128) << 16) + (ip[7] as u128)\n     }\n }\n-#[unstable(feature = \"i128\", issue = \"35118\")]\n+#[stable(feature = \"i128\", since = \"1.26.0\")]\n impl From<u128> for Ipv6Addr {\n     fn from(ip: u128) -> Ipv6Addr {\n         Ipv6Addr::new("}, {"sha": "547b8c7c925dcfc7032cc1b5501ed65fd2759bcf", "filename": "src/libstd/num.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -24,14 +24,9 @@ pub use core::num::Wrapping;\n #[unstable(feature = \"nonzero\", issue = \"49137\")]\n pub use core::num::{\n     NonZeroU8, NonZeroI8, NonZeroU16, NonZeroI16, NonZeroU32, NonZeroI32,\n-    NonZeroU64, NonZeroI64, NonZeroUsize, NonZeroIsize,\n+    NonZeroU64, NonZeroI64, NonZeroU128, NonZeroI128, NonZeroUsize, NonZeroIsize,\n };\n \n-// Change this to `#[unstable(feature = \"i128\", issue = \"35118\")]`\n-// if other NonZero* integer types are stabilizied before 128-bit integers\n-#[unstable(feature = \"nonzero\", issue = \"49137\")]\n-pub use core::num::{NonZeroU128, NonZeroI128};\n-\n #[cfg(test)] use fmt;\n #[cfg(test)] use ops::{Add, Sub, Mul, Div, Rem};\n "}, {"sha": "ce4bbfffc2e47b0644c11821f7f7e41eba69c79f", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -751,7 +751,7 @@ mod prim_i64 { }\n /// The 128-bit signed integer type.\n ///\n /// *[See also the `std::i128` module](i128/index.html).*\n-#[unstable(feature = \"i128\", issue=\"35118\")]\n+#[stable(feature = \"i128\", since=\"1.26.0\")]\n mod prim_i128 { }\n \n #[doc(primitive = \"u8\")]\n@@ -791,7 +791,7 @@ mod prim_u64 { }\n /// The 128-bit unsigned integer type.\n ///\n /// *[See also the `std::u128` module](u128/index.html).*\n-#[unstable(feature = \"i128\", issue=\"35118\")]\n+#[stable(feature = \"i128\", since=\"1.26.0\")]\n mod prim_u128 { }\n \n #[doc(primitive = \"isize\")]"}, {"sha": "bb7988e64bce9b9f7a9e0a272151a27e16a607a4", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -250,7 +250,10 @@ An unstable feature was used.\n Erroneous code example:\n \n ```compile_fail,E658\n-let x = ::std::u128::MAX; // error: use of unstable library feature 'i128'\n+#[repr(u128)] // error: use of unstable library feature 'repr128'\n+enum Foo {\n+    Bar(u64),\n+}\n ```\n \n If you're using a stable or a beta version of rustc, you won't be able to use\n@@ -261,10 +264,11 @@ If you're using a nightly version of rustc, just add the corresponding feature\n to be able to use it:\n \n ```\n-#![feature(i128)]\n+#![feature(repr128)]\n \n-fn main() {\n-    let x = ::std::u128::MAX; // ok!\n+#[repr(u128)] // ok!\n+enum Foo {\n+    Bar(u64),\n }\n ```\n \"##,"}, {"sha": "4e3c77d5e46594ff58b1f6de40c8a7dabcdca8ff", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -303,9 +303,6 @@ declare_features! (\n     // `extern \"ptx-*\" fn()`\n     (active, abi_ptx, \"1.15.0\", None, None),\n \n-    // The `i128` type\n-    (active, i128_type, \"1.16.0\", Some(35118), None),\n-\n     // The `repr(i128)` annotation for enums\n     (active, repr128, \"1.16.0\", Some(35118), None),\n \n@@ -564,6 +561,8 @@ declare_features! (\n     (accepted, universal_impl_trait, \"1.26.0\", Some(34511), None),\n     // Allows `impl Trait` in function return types.\n     (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n+    // The `i128` type\n+    (accepted, i128_type, \"1.26.0\", Some(35118), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1641,18 +1640,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                   e.span,\n                                   \"yield syntax is experimental\");\n             }\n-            ast::ExprKind::Lit(ref lit) => {\n-                if let ast::LitKind::Int(_, ref ty) = lit.node {\n-                    match *ty {\n-                        ast::LitIntType::Signed(ast::IntTy::I128) |\n-                        ast::LitIntType::Unsigned(ast::UintTy::U128) => {\n-                            gate_feature_post!(&self, i128_type, e.span,\n-                                               \"128-bit integers are not stable\");\n-                        }\n-                        _ => {}\n-                    }\n-                }\n-            }\n             ast::ExprKind::Catch(_) => {\n                 gate_feature_post!(&self, catch_expr, e.span, \"`catch` expression is experimental\");\n             }"}, {"sha": "2218b396685136e0eb685bec17256fbd6a161198", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -24,7 +24,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(match_default_bindings)]\n #![feature(non_exhaustive)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(const_atomic_usize_new)]\n #![feature(rustc_attrs)]\n "}, {"sha": "eb345200f413db0ce24ee7ae43521d58f9098484", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -21,7 +21,7 @@\n \n #![feature(const_fn)]\n #![feature(custom_attribute)]\n-#![feature(i128_type)]\n+#![cfg_attr(stage0, feature(i128_type))]\n #![feature(optin_builtin_traits)]\n #![allow(unused_attributes)]\n #![feature(specialization)]"}, {"sha": "87ebaaeec320cb4c94baa86b79feb96b6d58578b", "filename": "src/test/codegen/unchecked-float-casts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fcodegen%2Funchecked-float-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fcodegen%2Funchecked-float-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funchecked-float-casts.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -14,7 +14,6 @@\n // -Z saturating-float-casts is not enabled.\n \n #![crate_type = \"lib\"]\n-#![feature(i128_type)]\n \n // CHECK-LABEL: @f32_to_u32\n #[no_mangle]"}, {"sha": "b29ac50fd377f5a3af7765459dda5b03b9988f7d", "filename": "src/test/compile-fail/i128-feature-libs.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Ftest%2Fcompile-fail%2Fi128-feature-libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Ftest%2Fcompile-fail%2Fi128-feature-libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fi128-feature-libs.rs?ref=ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn testl() {\n-    ::std::u128::MAX; //~ ERROR use of unstable library feature 'i128'\n-}\n-\n-fn testl2() {\n-    ::std::i128::MAX; //~ ERROR use of unstable library feature 'i128'\n-}"}, {"sha": "d7586b1aa4b10a138f02efeb9946b894f8f45b9e", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -15,7 +15,6 @@\n \n // compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=yes\n \n-#![feature(i128_type)]\n #![feature(const_fn)]\n \n static TEST_SIGNED: i128 = const_signed(-222);"}, {"sha": "341682debeb350524835b5cc7abbf3a9aabf884e", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -15,7 +15,6 @@\n \n // compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=no\n \n-#![feature(i128_type)]\n #![feature(const_fn)]\n \n static TEST_SIGNED: i128 = const_signed(-222);"}, {"sha": "f84432abbfa0b13b13527a2262a2a60615cebd01", "filename": "src/test/run-pass/float-int-invalid-const-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Ffloat-int-invalid-const-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Ffloat-int-invalid-const-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-int-invalid-const-cast.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-emscripten no i128 support\n \n-#![feature(i128_type)]\n #![deny(const_err)]\n \n use std::{f32, f64};"}, {"sha": "edf278cbf64a5d4a6f0fe73d0490426e3617cefa", "filename": "src/test/run-pass/i128-ffi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fi128-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi128-ffi.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -15,8 +15,6 @@\n // ignore-windows\n // ignore-32bit\n \n-#![feature(i128_type)]\n-\n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern \"C\" {\n     fn identity(f: u128) -> u128;"}, {"sha": "baf3b3399849a9143c9545c592c7f2d8551c787a", "filename": "src/test/run-pass/i128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi128.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -12,7 +12,7 @@\n \n // compile-flags: -Z borrowck=compare\n \n-#![feature(i128_type, test)]\n+#![feature(test)]\n \n extern crate test;\n use test::black_box as b;"}, {"sha": "7a8ff1befc7f079cffedf66b6beede6a0d9b6ac2", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-emscripten no i128 support\n \n-#![feature(intrinsics, i128_type)]\n+#![feature(intrinsics)]\n \n mod rusti {\n     extern \"rust-intrinsic\" {"}, {"sha": "e038062ff9ae79edd80c3ebc380a858e5c957b83", "filename": "src/test/run-pass/issue-38763.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fissue-38763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fissue-38763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38763.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten\n \n-#![feature(i128_type)]\n-\n #[repr(C)]\n pub struct Foo(i128);\n "}, {"sha": "31a3b7233d8cd1f4f66179c0f2e0d612d8c6ae65", "filename": "src/test/run-pass/issue-38987.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fissue-38987.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fissue-38987.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38987.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(i128_type)]\n \n fn main() {\n     let _ = -0x8000_0000_0000_0000_0000_0000_0000_0000i128;"}, {"sha": "2135b3f8764c005f9d077bb229029d0afae59be5", "filename": "src/test/run-pass/next-power-of-two-overflow-debug.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-debug.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -12,8 +12,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n // ignore-emscripten dies with an LLVM error\n \n-#![feature(i128_type)]\n-\n use std::panic;\n \n fn main() {"}, {"sha": "b05c1863d902da1fe4f2687b8dbab394da94d85e", "filename": "src/test/run-pass/next-power-of-two-overflow-ndebug.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-ndebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-ndebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnext-power-of-two-overflow-ndebug.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -11,8 +11,6 @@\n // compile-flags: -C debug_assertions=no\n // ignore-emscripten dies with an LLVM error\n \n-#![feature(i128_type)]\n-\n fn main() {\n     for i in 129..256 {\n         assert_eq!((i as u8).next_power_of_two(), 0);"}, {"sha": "ad3b4b172594e47836ecdb6510f54b56e64cc04c", "filename": "src/test/run-pass/saturating-float-casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -11,7 +11,7 @@\n // Tests saturating float->int casts. See u128-as-f32.rs for the opposite direction.\n // compile-flags: -Z saturating-float-casts\n \n-#![feature(test, i128, i128_type, stmt_expr_attributes)]\n+#![feature(test, stmt_expr_attributes)]\n #![deny(overflowing_literals)]\n extern crate test;\n "}, {"sha": "2848fb2d51a6be67c34c88e79d184b8e2995d7ff", "filename": "src/test/run-pass/u128-as-f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fu128-as-f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fu128-as-f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu128-as-f32.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-emscripten u128 not supported\n \n-#![feature(test, i128, i128_type)]\n+#![feature(test)]\n #![deny(overflowing_literals)]\n extern crate test;\n "}, {"sha": "d649b3b74d39a451838f8289e616ea76467099f8", "filename": "src/test/run-pass/u128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Frun-pass%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu128.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -12,7 +12,7 @@\n \n // compile-flags: -Z borrowck=compare\n \n-#![feature(i128_type, test)]\n+#![feature(test)]\n \n extern crate test;\n use test::black_box as b;"}, {"sha": "dcfa25e528ac3b4bcc84633bb82e83f109fbf7fe", "filename": "src/test/ui/error-codes/E0658.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fui%2Ferror-codes%2FE0658.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fui%2Ferror-codes%2FE0658.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0658.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n-    let _ = ::std::u128::MAX; //~ ERROR E0658\n+#[repr(u128)]\n+enum Foo { //~ ERROR E0658\n+    Bar(u64),\n }\n+\n+fn main() {}"}, {"sha": "b338b384a117e87c27cd4fbf289da36665dee928", "filename": "src/test/ui/error-codes/E0658.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0658.stderr?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -1,10 +1,12 @@\n-error[E0658]: use of unstable library feature 'i128' (see issue #35118)\n-  --> $DIR/E0658.rs:12:13\n+error[E0658]: repr with 128-bit type is unstable (see issue #35118)\n+  --> $DIR/E0658.rs:12:1\n    |\n-LL |     let _ = ::std::u128::MAX; //~ ERROR E0658\n-   |             ^^^^^^^^^^^^^^^^\n+LL | / enum Foo { //~ ERROR E0658\n+LL | |     Bar(u64),\n+LL | | }\n+   | |_^\n    |\n-   = help: add #![feature(i128)] to the crate attributes to enable\n+   = help: add #![feature(repr128)] to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "ddb49a3e5d92a934d853e1553693a8481035d5f2", "filename": "src/test/ui/feature-gate-i128_type.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Ftest%2Fui%2Ffeature-gate-i128_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Ftest%2Fui%2Ffeature-gate-i128_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type.rs?ref=ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn test2() {\n-    0i128; //~ ERROR 128-bit integers are not stable\n-}\n-\n-fn test2_2() {\n-    0u128; //~ ERROR 128-bit integers are not stable\n-}\n-"}, {"sha": "eb3b29f4f5594eed50a9414dfbd9e97849a248ef", "filename": "src/test/ui/feature-gate-i128_type.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr?ref=ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "patch": "@@ -1,19 +0,0 @@\n-error[E0658]: 128-bit integers are not stable (see issue #35118)\n-  --> $DIR/feature-gate-i128_type.rs:12:5\n-   |\n-LL |     0i128; //~ ERROR 128-bit integers are not stable\n-   |     ^^^^^\n-   |\n-   = help: add #![feature(i128_type)] to the crate attributes to enable\n-\n-error[E0658]: 128-bit integers are not stable (see issue #35118)\n-  --> $DIR/feature-gate-i128_type.rs:16:5\n-   |\n-LL |     0u128; //~ ERROR 128-bit integers are not stable\n-   |     ^^^^^\n-   |\n-   = help: add #![feature(i128_type)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "8a7d316ed8384af9a8f04e8e97b321dc80b6f702", "filename": "src/test/ui/feature-gate-i128_type2.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs?ref=ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// gate-test-i128_type\n-\n-fn test1() -> i128 { //~ ERROR 128-bit type is unstable\n-    0\n-}\n-\n-fn test1_2() -> u128 { //~ ERROR 128-bit type is unstable\n-    0\n-}\n-\n-fn test3() {\n-    let x: i128 = 0; //~ ERROR 128-bit type is unstable\n-}\n-\n-fn test3_2() {\n-    let x: u128 = 0; //~ ERROR 128-bit type is unstable\n-}\n-\n-#[repr(u128)]\n-enum A { //~ ERROR 128-bit type is unstable\n-    A(u64)\n-}\n-\n-fn main() {}"}, {"sha": "23d4d6c98d90ae93d368ba8d1e28db865c0e07cf", "filename": "src/test/ui/feature-gate-i128_type2.stderr", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab8b961677ac5c74762dcea955aa0ff4d7fe4915/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr?ref=ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "patch": "@@ -1,45 +0,0 @@\n-error[E0658]: 128-bit type is unstable (see issue #35118)\n-  --> $DIR/feature-gate-i128_type2.rs:13:15\n-   |\n-LL | fn test1() -> i128 { //~ ERROR 128-bit type is unstable\n-   |               ^^^^\n-   |\n-   = help: add #![feature(i128_type)] to the crate attributes to enable\n-\n-error[E0658]: 128-bit type is unstable (see issue #35118)\n-  --> $DIR/feature-gate-i128_type2.rs:17:17\n-   |\n-LL | fn test1_2() -> u128 { //~ ERROR 128-bit type is unstable\n-   |                 ^^^^\n-   |\n-   = help: add #![feature(i128_type)] to the crate attributes to enable\n-\n-error[E0658]: 128-bit type is unstable (see issue #35118)\n-  --> $DIR/feature-gate-i128_type2.rs:22:12\n-   |\n-LL |     let x: i128 = 0; //~ ERROR 128-bit type is unstable\n-   |            ^^^^\n-   |\n-   = help: add #![feature(i128_type)] to the crate attributes to enable\n-\n-error[E0658]: 128-bit type is unstable (see issue #35118)\n-  --> $DIR/feature-gate-i128_type2.rs:26:12\n-   |\n-LL |     let x: u128 = 0; //~ ERROR 128-bit type is unstable\n-   |            ^^^^\n-   |\n-   = help: add #![feature(i128_type)] to the crate attributes to enable\n-\n-error[E0658]: repr with 128-bit type is unstable (see issue #35118)\n-  --> $DIR/feature-gate-i128_type2.rs:30:1\n-   |\n-LL | / enum A { //~ ERROR 128-bit type is unstable\n-LL | |     A(u64)\n-LL | | }\n-   | |_^\n-   |\n-   = help: add #![feature(repr128)] to the crate attributes to enable\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "85957831653e723dd463aa0c2b3257f0b05653c5", "filename": "src/test/ui/lint-ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fui%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fui%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![deny(improper_ctypes)]\n-#![feature(libc, i128_type, repr_transparent)]\n+#![feature(libc, repr_transparent)]\n \n extern crate libc;\n "}, {"sha": "30e6fb2883b8b1f86237619f87bea50d7628544d", "filename": "src/test/ui/lint/type-overflow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.rs?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -10,8 +10,6 @@\n \n // must-compile-successfully\n \n-#![feature(i128_type)]\n-\n fn main() {\n     let error = 255i8; //~WARNING literal out of range for i8\n "}, {"sha": "6f5d3d07aea2dfbdecefc797c4dd8ab38ae9d800", "filename": "src/test/ui/lint/type-overflow.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/188e693b392116c46f746e86f8521f9621fcfd43/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr?ref=188e693b392116c46f746e86f8521f9621fcfd43", "patch": "@@ -1,37 +1,37 @@\n warning: literal out of range for i8\n-  --> $DIR/type-overflow.rs:16:17\n+  --> $DIR/type-overflow.rs:14:17\n    |\n LL |     let error = 255i8; //~WARNING literal out of range for i8\n    |                 ^^^^^\n    |\n    = note: #[warn(overflowing_literals)] on by default\n \n warning: literal out of range for i8\n-  --> $DIR/type-overflow.rs:21:16\n+  --> $DIR/type-overflow.rs:19:16\n    |\n LL |     let fail = 0b1000_0001i8; //~WARNING literal out of range for i8\n    |                ^^^^^^^^^^^^^ help: consider using `u8` instead: `0b1000_0001u8`\n    |\n    = note: the literal `0b1000_0001i8` (decimal `129`) does not fit into an `i8` and will become `-127i8`\n \n warning: literal out of range for i64\n-  --> $DIR/type-overflow.rs:23:16\n+  --> $DIR/type-overflow.rs:21:16\n    |\n LL |     let fail = 0x8000_0000_0000_0000i64; //~WARNING literal out of range for i64\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x8000_0000_0000_0000u64`\n    |\n    = note: the literal `0x8000_0000_0000_0000i64` (decimal `9223372036854775808`) does not fit into an `i64` and will become `-9223372036854775808i64`\n \n warning: literal out of range for u32\n-  --> $DIR/type-overflow.rs:25:16\n+  --> $DIR/type-overflow.rs:23:16\n    |\n LL |     let fail = 0x1_FFFF_FFFFu32; //~WARNING literal out of range for u32\n    |                ^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x1_FFFF_FFFFu64`\n    |\n    = note: the literal `0x1_FFFF_FFFFu32` (decimal `8589934591`) does not fit into an `u32` and will become `4294967295u32`\n \n warning: literal out of range for i128\n-  --> $DIR/type-overflow.rs:27:22\n+  --> $DIR/type-overflow.rs:25:22\n    |\n LL |     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -40,7 +40,7 @@ LL |     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n    = help: consider using `u128` instead\n \n warning: literal out of range for i32\n-  --> $DIR/type-overflow.rs:30:16\n+  --> $DIR/type-overflow.rs:28:16\n    |\n LL |     let fail = 0x8FFF_FFFF_FFFF_FFFE; //~WARNING literal out of range for i32\n    |                ^^^^^^^^^^^^^^^^^^^^^\n@@ -49,7 +49,7 @@ LL |     let fail = 0x8FFF_FFFF_FFFF_FFFE; //~WARNING literal out of range for i\n    = help: consider using `i128` instead\n \n warning: literal out of range for i8\n-  --> $DIR/type-overflow.rs:32:17\n+  --> $DIR/type-overflow.rs:30:17\n    |\n LL |     let fail = -0b1111_1111i8; //~WARNING literal out of range for i8\n    |                 ^^^^^^^^^^^^^ help: consider using `i16` instead: `0b1111_1111i16`"}]}