{"sha": "37d417868e575fe3da5ee23e7a35db88d2e7bc97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZDQxNzg2OGU1NzVmZTNkYTVlZTIzZTdhMzVkYjg4ZDJlN2JjOTc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T22:22:02Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T22:26:08Z"}, "message": "move goto_declaration fall back into handlers", "tree": {"sha": "f00d8a2d83e1084106646cb23d1b72e2b34e0553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f00d8a2d83e1084106646cb23d1b72e2b34e0553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37d417868e575fe3da5ee23e7a35db88d2e7bc97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37d417868e575fe3da5ee23e7a35db88d2e7bc97", "html_url": "https://github.com/rust-lang/rust/commit/37d417868e575fe3da5ee23e7a35db88d2e7bc97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37d417868e575fe3da5ee23e7a35db88d2e7bc97/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a74e93c334506a8b865b6b03b2d4cd4a94d6973", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a74e93c334506a8b865b6b03b2d4cd4a94d6973", "html_url": "https://github.com/rust-lang/rust/commit/5a74e93c334506a8b865b6b03b2d4cd4a94d6973"}], "stats": {"total": 68, "additions": 26, "deletions": 42}, "files": [{"sha": "e390616365ff1c85f18d58d4a7cbae0822ce1dd8", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/37d417868e575fe3da5ee23e7a35db88d2e7bc97/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d417868e575fe3da5ee23e7a35db88d2e7bc97/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=37d417868e575fe3da5ee23e7a35db88d2e7bc97", "patch": "@@ -5,46 +5,41 @@ use ide_db::{\n };\n use syntax::{ast, match_ast, AstNode, SyntaxKind::*, T};\n \n-use crate::{goto_definition, FilePosition, NavigationTarget, RangeInfo};\n+use crate::{FilePosition, NavigationTarget, RangeInfo};\n \n // Feature: Go to Declaration\n //\n-// Navigates to the declaration of an identifier. This is the same as the definition except for\n-// modules where this goes to the identifier of the declaration instead of the contents.\n+// Navigates to the declaration of an identifier.\n pub(crate) fn goto_declaration(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n     let sema = Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n-    let res = (|| {\n-        // try\n-        let original_token = file\n-            .token_at_offset(position.offset)\n-            .find(|it| matches!(it.kind(), IDENT | T![self] | T![super] | T![crate]))?;\n-        let token = sema.descend_into_macros(original_token.clone());\n-        let parent = token.parent()?;\n-        let def = match_ast! {\n-            match parent {\n-                ast::NameRef(name_ref) => {\n-                    let name_kind = NameRefClass::classify(&sema, &name_ref)?;\n-                    name_kind.referenced(sema.db)\n-                },\n-                ast::Name(name) => {\n-                    NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db)\n-                },\n-                _ => return None,\n-            }\n-        };\n-        match def {\n-            Definition::ModuleDef(hir::ModuleDef::Module(module)) => Some(RangeInfo::new(\n-                original_token.text_range(),\n-                vec![NavigationTarget::from_module_to_decl(db, module)],\n-            )),\n+    let original_token = file\n+        .token_at_offset(position.offset)\n+        .find(|it| matches!(it.kind(), IDENT | T![self] | T![super] | T![crate]))?;\n+    let token = sema.descend_into_macros(original_token.clone());\n+    let parent = token.parent()?;\n+    let def = match_ast! {\n+        match parent {\n+            ast::NameRef(name_ref) => {\n+                let name_kind = NameRefClass::classify(&sema, &name_ref)?;\n+                name_kind.referenced(sema.db)\n+            },\n+            ast::Name(name) => {\n+                NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db)\n+            },\n             _ => return None,\n         }\n-    })();\n-    res.or_else(|| goto_definition::goto_definition(db, position))\n+    };\n+    match def {\n+        Definition::ModuleDef(hir::ModuleDef::Module(module)) => Some(RangeInfo::new(\n+            original_token.text_range(),\n+            vec![NavigationTarget::from_module_to_decl(db, module)],\n+        )),\n+        _ => return None,\n+    }\n }\n \n #[cfg(test)]\n@@ -90,17 +85,6 @@ mod foo {\n  // ^^^\n     use self$0;\n }\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn goto_decl_falls_back_to_goto_def() {\n-        check(\n-            r#\"\n-struct Foo;\n-    // ^^^\n-use self::Foo$0;\n \"#,\n         )\n     }"}, {"sha": "bfed068fccb51cbc27aa711cf05a12c2055c7c64", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37d417868e575fe3da5ee23e7a35db88d2e7bc97/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d417868e575fe3da5ee23e7a35db88d2e7bc97/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=37d417868e575fe3da5ee23e7a35db88d2e7bc97", "patch": "@@ -561,9 +561,9 @@ pub(crate) fn handle_goto_declaration(\n     params: lsp_types::request::GotoDeclarationParams,\n ) -> Result<Option<lsp_types::request::GotoDeclarationResponse>> {\n     let _p = profile::span(\"handle_goto_declaration\");\n-    let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n+    let position = from_proto::file_position(&snap, params.text_document_position_params.clone())?;\n     let nav_info = match snap.analysis.goto_declaration(position)? {\n-        None => return Ok(None),\n+        None => return handle_goto_definition(snap, params),\n         Some(it) => it,\n     };\n     let src = FileRange { file_id: position.file_id, range: nav_info.range };"}]}