{"sha": "85edd159f7400a3667a73e248a4dd2d41f967094", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZWRkMTU5Zjc0MDBhMzY2N2E3M2UyNDhhNGRkMmQ0MWY5NjcwOTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-17T05:34:58Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-17T05:34:58Z"}, "message": "Merge pull request #185 from birkenfeld/iter_next_loop\n\nnew lint: iterating over any Iterator::next() result (fixes #182)", "tree": {"sha": "1aa01c0869a4328a51ec3ee6aebc1271935e52bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aa01c0869a4328a51ec3ee6aebc1271935e52bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85edd159f7400a3667a73e248a4dd2d41f967094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85edd159f7400a3667a73e248a4dd2d41f967094", "html_url": "https://github.com/rust-lang/rust/commit/85edd159f7400a3667a73e248a4dd2d41f967094", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85edd159f7400a3667a73e248a4dd2d41f967094/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4b07ead17aed2734e796de7c3b6fae98f1f485e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b07ead17aed2734e796de7c3b6fae98f1f485e", "html_url": "https://github.com/rust-lang/rust/commit/c4b07ead17aed2734e796de7c3b6fae98f1f485e"}, {"sha": "e9a41e2374878d8537fab4f607f8f1c1401b0389", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a41e2374878d8537fab4f607f8f1c1401b0389", "html_url": "https://github.com/rust-lang/rust/commit/e9a41e2374878d8537fab4f607f8f1c1401b0389"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "5ec1040b2c41ceeb91bfc451cb515d9675c088ce", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85edd159f7400a3667a73e248a4dd2d41f967094/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/85edd159f7400a3667a73e248a4dd2d41f967094/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=85edd159f7400a3667a73e248a4dd2d41f967094", "patch": "@@ -20,6 +20,7 @@ float_cmp            | warn    | using `==` or `!=` on float values (as floating\n identity_op          | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n ineffective_bit_mask | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n inline_always        | warn    | `#[inline(always)]` is a bad idea in most cases\n+iter_next_loop       | warn    | for-looping over `_.next()` which is probably not intended\n len_without_is_empty | warn    | traits and impls that have `.len()` but not `.is_empty()`\n len_zero             | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n let_and_return       | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a function"}, {"sha": "4c0617b1696314383e7ddb2f28ac30613dd5a9ad", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85edd159f7400a3667a73e248a4dd2d41f967094/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85edd159f7400a3667a73e248a4dd2d41f967094/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=85edd159f7400a3667a73e248a4dd2d41f967094", "patch": "@@ -80,6 +80,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         len_zero::LEN_ZERO,\n         lifetimes::NEEDLESS_LIFETIMES,\n         loops::EXPLICIT_ITER_LOOP,\n+        loops::ITER_NEXT_LOOP,\n         loops::NEEDLESS_RANGE_LOOP,\n         methods::OPTION_UNWRAP_USED,\n         methods::RESULT_UNWRAP_USED,"}, {"sha": "44827d08bcd3e288f94d9d32225b8b14de0397f1", "filename": "src/loops.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/85edd159f7400a3667a73e248a4dd2d41f967094/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85edd159f7400a3667a73e248a4dd2d41f967094/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=85edd159f7400a3667a73e248a4dd2d41f967094", "patch": "@@ -1,22 +1,26 @@\n use rustc::lint::*;\n use syntax::ast::*;\n use syntax::visit::{Visitor, walk_expr};\n+use rustc::middle::ty;\n use std::collections::HashSet;\n \n-use utils::{snippet, span_lint, get_parent_expr};\n+use utils::{snippet, span_lint, get_parent_expr, match_def_path};\n \n declare_lint!{ pub NEEDLESS_RANGE_LOOP, Warn,\n                \"for-looping over a range of indices where an iterator over items would do\" }\n \n declare_lint!{ pub EXPLICIT_ITER_LOOP, Warn,\n                \"for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\" }\n \n+declare_lint!{ pub ITER_NEXT_LOOP, Warn,\n+               \"for-looping over `_.next()` which is probably not intended\" }\n+\n #[derive(Copy, Clone)]\n pub struct LoopsPass;\n \n impl LintPass for LoopsPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_RANGE_LOOP, EXPLICIT_ITER_LOOP)\n+        lint_array!(NEEDLESS_RANGE_LOOP, EXPLICIT_ITER_LOOP, ITER_NEXT_LOOP)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n@@ -47,11 +51,11 @@ impl LintPass for LoopsPass {\n                 }\n             }\n \n-            // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n             if let ExprMethodCall(ref method, _, ref args) = arg.node {\n-                // just the receiver, no arguments to iter() or iter_mut()\n+                // just the receiver, no arguments\n                 if args.len() == 1 {\n                     let method_name = method.node.name;\n+                    // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n                     if method_name == \"iter\" {\n                         let object = snippet(cx, args[0].span, \"_\");\n                         span_lint(cx, EXPLICIT_ITER_LOOP, expr.span, &format!(\n@@ -62,6 +66,19 @@ impl LintPass for LoopsPass {\n                         span_lint(cx, EXPLICIT_ITER_LOOP, expr.span, &format!(\n                             \"it is more idiomatic to loop over `&mut {}` instead of `{}.iter_mut()`\",\n                             object, object));\n+                    // check for looping over Iterator::next() which is not what you want\n+                    } else if method_name == \"next\" {\n+                        let method_call = ty::MethodCall::expr(arg.id);\n+                        let trt_id = cx.tcx.tables\n+                                           .borrow().method_map.get(&method_call)\n+                                           .and_then(|callee| cx.tcx.trait_of_item(callee.def_id));\n+                        if let Some(trt_id) = trt_id {\n+                            if match_def_path(cx, trt_id, &[\"core\", \"iter\", \"Iterator\"]) {\n+                                span_lint(cx, ITER_NEXT_LOOP, expr.span,\n+                                          \"you are iterating over `Iterator::next()` which is an Option; \\\n+                                           this will compile but is probably not what you want\");\n+                            }\n+                        }\n                     }\n                 }\n             }"}, {"sha": "a4e3cc31a8834e6097f7f99ceb078a898e695ee5", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85edd159f7400a3667a73e248a4dd2d41f967094/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85edd159f7400a3667a73e248a4dd2d41f967094/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=85edd159f7400a3667a73e248a4dd2d41f967094", "patch": "@@ -1,7 +1,14 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#[deny(needless_range_loop, explicit_iter_loop)]\n+struct Unrelated(Vec<u8>);\n+impl Unrelated {\n+    fn next(&self) -> std::slice::Iter<u8> {\n+        self.0.iter()\n+    }\n+}\n+\n+#[deny(needless_range_loop, explicit_iter_loop, iter_next_loop)]\n fn main() {\n     let mut vec = vec![1, 2, 3, 4];\n     let vec2 = vec![1, 2, 3, 4];\n@@ -20,4 +27,9 @@ fn main() {\n \n     for _v in &vec { } // these are fine\n     for _v in &mut vec { } // these are fine\n+\n+    for _v in vec.iter().next() { } //~ERROR you are iterating over `Iterator::next()`\n+\n+    let u = Unrelated(vec![]);\n+    for _v in u.next() { } // no error\n }"}]}