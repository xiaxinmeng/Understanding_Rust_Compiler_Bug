{"sha": "506008f9a0334fe5381397cac2f2f3ca85f1a6d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNjAwOGY5YTAzMzRmZTUzODEzOTdjYWMyZjJmM2NhODVmMWE2ZDY=", "commit": {"author": {"name": "Richard Diamond", "email": "wichard@hahbee.co", "date": "2014-04-17T17:22:02Z"}, "committer": {"name": "Richard Diamond", "email": "wichard@hahbee.co", "date": "2014-04-17T17:22:02Z"}, "message": "Add #[deriving(Hash)] to Result.", "tree": {"sha": "ca11146136c35bd239937b27a8b47c2244ab5347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca11146136c35bd239937b27a8b47c2244ab5347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/506008f9a0334fe5381397cac2f2f3ca85f1a6d6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/506008f9a0334fe5381397cac2f2f3ca85f1a6d6", "html_url": "https://github.com/rust-lang/rust/commit/506008f9a0334fe5381397cac2f2f3ca85f1a6d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/506008f9a0334fe5381397cac2f2f3ca85f1a6d6/comments", "author": null, "committer": null, "parents": [{"sha": "903fbd263553c105b7b8c5f5ee19fab89d4618bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/903fbd263553c105b7b8c5f5ee19fab89d4618bd", "html_url": "https://github.com/rust-lang/rust/commit/903fbd263553c105b7b8c5f5ee19fab89d4618bd"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "493ff8c485fe95a684065530f48aaede4b9e4905", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/506008f9a0334fe5381397cac2f2f3ca85f1a6d6/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/506008f9a0334fe5381397cac2f2f3ca85f1a6d6/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=506008f9a0334fe5381397cac2f2f3ca85f1a6d6", "patch": "@@ -275,7 +275,7 @@ use option::{None, Option, Some};\n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///\n /// See the [`std::result`](index.html) module documentation for details.\n-#[deriving(Clone, Eq, Ord, TotalEq, TotalOrd, Show)]\n+#[deriving(Clone, Eq, Ord, TotalEq, TotalOrd, Show, Hash)]\n #[must_use]\n pub enum Result<T, E> {\n     /// Contains the success value"}]}