{"sha": "5d53921eff41f54586c370be1a72cb1b82d17e6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNTM5MjFlZmY0MWY1NDU4NmMzNzBiZTFhNzJjYjFiODJkMTdlNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-07T17:41:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-07T17:41:43Z"}, "message": "Auto merge of #26747 - huonw:stability-issue, r=alexcrichton\n\nThis takes an issue number and points people to it in the printed error\r\nmessage. This commit does not make it an error to have no `issue` field.", "tree": {"sha": "b0748f342a8b84de384fabf00ca11c4cab63efc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0748f342a8b84de384fabf00ca11c4cab63efc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d53921eff41f54586c370be1a72cb1b82d17e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d53921eff41f54586c370be1a72cb1b82d17e6d", "html_url": "https://github.com/rust-lang/rust/commit/5d53921eff41f54586c370be1a72cb1b82d17e6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d53921eff41f54586c370be1a72cb1b82d17e6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed14593d98ce89eb52cc0354e90bec6802c9d041", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed14593d98ce89eb52cc0354e90bec6802c9d041", "html_url": "https://github.com/rust-lang/rust/commit/ed14593d98ce89eb52cc0354e90bec6802c9d041"}, {"sha": "69d340a40d0ca37e91731026bd5d7041a145aa34", "url": "https://api.github.com/repos/rust-lang/rust/commits/69d340a40d0ca37e91731026bd5d7041a145aa34", "html_url": "https://github.com/rust-lang/rust/commit/69d340a40d0ca37e91731026bd5d7041a145aa34"}], "stats": {"total": 117, "additions": 92, "deletions": 25}, "files": [{"sha": "30553d62719bfbf8b96a4535965e7ea4d75539e3", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d53921eff41f54586c370be1a72cb1b82d17e6d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d53921eff41f54586c370be1a72cb1b82d17e6d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=5d53921eff41f54586c370be1a72cb1b82d17e6d", "patch": "@@ -289,15 +289,19 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n         if !cross_crate { return }\n \n         match *stab {\n-            Some(&Stability { level: attr::Unstable, ref feature, ref reason, .. }) => {\n+            Some(&Stability { level: attr::Unstable, ref feature, ref reason, issue, .. }) => {\n                 self.used_features.insert(feature.clone(), attr::Unstable);\n \n                 if !self.active_features.contains(feature) {\n-                    let msg = match *reason {\n+                    let mut msg = match *reason {\n                         Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n                                                &feature, &r),\n                         None => format!(\"use of unstable library feature '{}'\", &feature)\n                     };\n+                    if let Some(n) = issue {\n+                        use std::fmt::Write;\n+                        write!(&mut msg, \" (see issue #{})\", n).unwrap();\n+                    }\n \n                     emit_feature_err(&self.tcx.sess.parse_sess.span_diagnostic,\n                                       &feature, span, &msg);"}, {"sha": "ed3ee768708775821248678fae6241d41fcc5ab3", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 45, "deletions": 23, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5d53921eff41f54586c370be1a72cb1b82d17e6d/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d53921eff41f54586c370be1a72cb1b82d17e6d/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=5d53921eff41f54586c370be1a72cb1b82d17e6d", "patch": "@@ -378,6 +378,8 @@ pub struct Stability {\n     // The reason for the current stability level. If deprecated, the\n     // reason for deprecation.\n     pub reason: Option<InternedString>,\n+    // The relevant rust-lang issue\n+    pub issue: Option<u32>\n }\n \n /// The available stability levels.\n@@ -412,41 +414,54 @@ fn find_stability_generic<'a,\n \n         used_attrs.push(attr);\n \n-        let (feature, since, reason) = match attr.meta_item_list() {\n+        let (feature, since, reason, issue) = match attr.meta_item_list() {\n             Some(metas) => {\n                 let mut feature = None;\n                 let mut since = None;\n                 let mut reason = None;\n+                let mut issue = None;\n                 for meta in metas {\n-                    if meta.name() == \"feature\" {\n-                        match meta.value_str() {\n-                            Some(v) => feature = Some(v),\n-                            None => {\n-                                diagnostic.span_err(meta.span, \"incorrect meta item\");\n-                                continue 'outer;\n+                    match &*meta.name() {\n+                        \"feature\" => {\n+                            match meta.value_str() {\n+                                Some(v) => feature = Some(v),\n+                                None => {\n+                                    diagnostic.span_err(meta.span, \"incorrect meta item\");\n+                                    continue 'outer;\n+                                }\n                             }\n                         }\n-                    }\n-                    if &meta.name()[..] == \"since\" {\n-                        match meta.value_str() {\n-                            Some(v) => since = Some(v),\n-                            None => {\n-                                diagnostic.span_err(meta.span, \"incorrect meta item\");\n-                                continue 'outer;\n+                        \"since\" => {\n+                            match meta.value_str() {\n+                                Some(v) => since = Some(v),\n+                                None => {\n+                                    diagnostic.span_err(meta.span, \"incorrect meta item\");\n+                                    continue 'outer;\n+                                }\n                             }\n                         }\n-                    }\n-                    if &meta.name()[..] == \"reason\" {\n-                        match meta.value_str() {\n-                            Some(v) => reason = Some(v),\n-                            None => {\n-                                diagnostic.span_err(meta.span, \"incorrect meta item\");\n-                                continue 'outer;\n+                        \"reason\" => {\n+                            match meta.value_str() {\n+                                Some(v) => reason = Some(v),\n+                                None => {\n+                                    diagnostic.span_err(meta.span, \"incorrect meta item\");\n+                                    continue 'outer;\n+                                }\n+                            }\n+                        }\n+                        \"issue\" => {\n+                            match meta.value_str().and_then(|s| s.parse().ok()) {\n+                                Some(v) => issue = Some(v),\n+                                None => {\n+                                    diagnostic.span_err(meta.span, \"incorrect meta item\");\n+                                    continue 'outer;\n+                                }\n                             }\n                         }\n+                        _ => {}\n                     }\n                 }\n-                (feature, since, reason)\n+                (feature, since, reason, issue)\n             }\n             None => {\n                 diagnostic.span_err(attr.span(), \"incorrect stability attribute type\");\n@@ -480,7 +495,8 @@ fn find_stability_generic<'a,\n                 feature: feature.unwrap_or(intern_and_get_ident(\"bogus\")),\n                 since: since,\n                 deprecated_since: None,\n-                reason: reason\n+                reason: reason,\n+                issue: issue,\n             });\n         } else { // \"deprecated\"\n             if deprecated.is_some() {\n@@ -504,6 +520,12 @@ fn find_stability_generic<'a,\n                                               either stable or unstable attribute\");\n             }\n         }\n+    } else if stab.as_ref().map_or(false, |s| s.level == Unstable && s.issue.is_none()) {\n+        // non-deprecated unstable items need to point to issues.\n+        // FIXME: uncomment this error\n+        // diagnostic.span_err(item_sp,\n+        //                     \"non-deprecated unstable items need to point \\\n+        //                      to an issue with `issue = \\\"NNN\\\"`\");\n     }\n \n     (stab, used_attrs)"}, {"sha": "69560d15b5ff7845cf1d4062ba777c3533dd6be5", "filename": "src/test/auxiliary/stability_attribute_issue.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d53921eff41f54586c370be1a72cb1b82d17e6d/src%2Ftest%2Fauxiliary%2Fstability_attribute_issue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d53921eff41f54586c370be1a72cb1b82d17e6d/src%2Ftest%2Fauxiliary%2Fstability_attribute_issue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstability_attribute_issue.rs?ref=5d53921eff41f54586c370be1a72cb1b82d17e6d", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(staged_api)]\n+#![staged_api]\n+#![stable(feature = \"foo\", since = \"1.2.0\")]\n+\n+\n+#[unstable(feature = \"foo\", issue = \"1\")]\n+pub fn unstable() {}\n+\n+#[unstable(feature = \"foo\", reason = \"message\", issue = \"2\")]\n+pub fn unstable_msg() {}"}, {"sha": "c473bdd23b5c40000b3f45e946b8c74470baeef7", "filename": "src/test/compile-fail/stability-attribute-issue.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d53921eff41f54586c370be1a72cb1b82d17e6d/src%2Ftest%2Fcompile-fail%2Fstability-attribute-issue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d53921eff41f54586c370be1a72cb1b82d17e6d/src%2Ftest%2Fcompile-fail%2Fstability-attribute-issue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-issue.rs?ref=5d53921eff41f54586c370be1a72cb1b82d17e6d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:stability_attribute_issue.rs\n+\n+#![deny(deprecated)]\n+\n+extern crate stability_attribute_issue;\n+use stability_attribute_issue::*;\n+\n+fn main() {\n+    unstable(); //~ ERROR use of unstable library feature 'foo' (see issue #1)\n+    unstable_msg(); //~ ERROR use of unstable library feature 'foo': message (see issue #2)\n+}"}]}