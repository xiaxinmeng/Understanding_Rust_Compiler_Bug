{"sha": "e58cfac458aad876e1a6e8b07626519d5178badb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OGNmYWM0NThhYWQ4NzZlMWE2ZThiMDc2MjY1MTlkNTE3OGJhZGI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-09T07:13:22Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-09T07:43:51Z"}, "message": "Rustup to rust-lang/rust#67979", "tree": {"sha": "0b868edf092c3a54da773006cd609113a76ab8e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b868edf092c3a54da773006cd609113a76ab8e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58cfac458aad876e1a6e8b07626519d5178badb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58cfac458aad876e1a6e8b07626519d5178badb", "html_url": "https://github.com/rust-lang/rust/commit/e58cfac458aad876e1a6e8b07626519d5178badb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58cfac458aad876e1a6e8b07626519d5178badb/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c24251b5fd178a19729561d41b43f5dab0e2aa5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c24251b5fd178a19729561d41b43f5dab0e2aa5c", "html_url": "https://github.com/rust-lang/rust/commit/c24251b5fd178a19729561d41b43f5dab0e2aa5c"}], "stats": {"total": 288, "additions": 200, "deletions": 88}, "files": [{"sha": "0fe10a1f589db70392d74b76bad420a0f2027996", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,16 +1,16 @@\n+use crate::utils::{\n+    get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, trait_ref_of_method, SpanlessEq,\n+};\n+use crate::utils::{higher, sugg};\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_session::declare_tool_lint;\n \n-use crate::utils::{\n-    get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, trait_ref_of_method, SpanlessEq,\n-};\n-use crate::utils::{higher, sugg};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for `a = a op b` or `a = b commutative_op a`\n     /// patterns.\n@@ -246,14 +246,16 @@ struct ExprVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         if SpanlessEq::new(self.cx).ignore_fn().eq_expr(self.assignee, expr) {\n             self.counter += 1;\n         }\n \n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "721314fb666997c58b1d3034d56a195cb9d59b88", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,8 +1,9 @@\n use crate::utils::*;\n use matches::matches;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n \n@@ -51,6 +52,8 @@ struct ExVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         if let ExprKind::Closure(_, _, eid, _, _) = expr.kind {\n             let body = self.cx.tcx.hir().body(eid);\n@@ -62,7 +65,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n         }\n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "dd0a021ea3889079e57bb0b5c791a50c2300647b", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -4,10 +4,11 @@ use crate::utils::{\n };\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit;\n-use rustc::hir::intravisit::*;\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc_errors::Applicability;\n+use rustc_hir::intravisit;\n+use rustc_hir::intravisit::*;\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n use rustc_span::source_map::Span;\n@@ -438,6 +439,8 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n         if in_macro(e.span) {\n             return;\n@@ -456,7 +459,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n             _ => walk_expr(self, e),\n         }\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -471,6 +474,8 @@ struct NotSimplificationVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if let ExprKind::Unary(UnOp::UnNot, inner) = &expr.kind {\n             if let Some(suggestion) = simplify_not(self.cx, inner) {\n@@ -488,7 +493,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n \n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "50a7f24cadc8aeaec8c65e0bbf5a6d4c78b0bb3c", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,8 +1,9 @@\n //! calculate cognitive complexity and warn about overly complex functions\n \n-use rustc::hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::impl_lint_pass;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n use rustc_span::source_map::Span;\n@@ -141,6 +142,8 @@ struct CCHelper {\n }\n \n impl<'tcx> Visitor<'tcx> for CCHelper {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n         walk_expr(self, e);\n         match e.kind {\n@@ -154,7 +157,7 @@ impl<'tcx> Visitor<'tcx> for CCHelper {\n             _ => {},\n         }\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "7a91dd53c2f54049557ca64628347defcc2c31e9", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -3,9 +3,10 @@ use crate::utils::{get_item_name, higher, match_type, paths, snippet, snippet_op\n use crate::utils::{snippet_with_applicability, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc_errors::Applicability;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n use rustc_span::source_map::Span;\n@@ -136,6 +137,8 @@ struct InsertVisitor<'a, 'tcx, 'b> {\n }\n \n impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             if let ExprKind::MethodCall(ref path, _, ref params) = expr.kind;\n@@ -179,7 +182,7 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n             walk_expr(self, expr);\n         }\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "899e288b6ef91c03f0eee7a751418bf7ae861fc1", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,8 +1,8 @@\n-use rustc::hir::intravisit as visit;\n use rustc::impl_lint_pass;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, Ty};\n+use rustc_hir::intravisit as visit;\n use rustc_hir::HirIdSet;\n use rustc_hir::{self, *};\n use rustc_session::declare_tool_lint;"}, {"sha": "84545ed6967d38200c52ca008c89dc430b533b41", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,9 +1,10 @@\n use crate::utils::{get_parent_expr, span_lint, span_note_and_lint};\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n \n@@ -124,6 +125,8 @@ impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n         match e.kind {\n             ExprKind::Continue(_) | ExprKind::Break(_, _) | ExprKind::Ret(_) => self.report_diverging_sub_expr(e),\n@@ -156,7 +159,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n     fn visit_block(&mut self, _: &'tcx Block<'_>) {\n         // don't continue over blocks, LateLintPass already does that\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -288,6 +291,8 @@ struct ReadVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if expr.hir_id == self.last_expr.hir_id {\n             return;\n@@ -337,7 +342,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n \n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "6aafb5e1ef15b8ad21ae3ab7386560f335235332", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -2,6 +2,7 @@ use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESU\n use crate::utils::{is_expn_of, match_def_path, method_chain_args, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::{self, Ty};\n use rustc_hir as hir;\n@@ -47,7 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n }\n \n fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef<'_>]) {\n-    use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+    use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n     use rustc_hir::*;\n \n     struct FindPanicUnwrap<'a, 'tcx> {\n@@ -57,6 +58,8 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n     }\n \n     impl<'a, 'tcx> Visitor<'tcx> for FindPanicUnwrap<'a, 'tcx> {\n+        type Map = Map<'tcx>;\n+\n         fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n             // check for `begin_panic`\n             if_chain! {\n@@ -83,7 +86,7 @@ fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_it\n             intravisit::walk_expr(self, expr);\n         }\n \n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n     }"}, {"sha": "65a5e7be830e1a043ab4d9ac97712a1019445d58", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -4,13 +4,14 @@ use crate::utils::{\n     type_is_unsafe_function,\n };\n use matches::matches;\n-use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::impl_lint_pass;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::intravisit;\n use rustc_hir::{def::Res, def_id::DefId};\n use rustc_session::declare_tool_lint;\n use rustc_span::source_map::Span;\n@@ -538,6 +539,8 @@ struct DerefVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         match expr.kind {\n             hir::ExprKind::Call(ref f, args) => {\n@@ -566,7 +569,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n         intravisit::walk_expr(self, expr);\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n }\n@@ -594,6 +597,8 @@ struct StaticMutVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         use hir::ExprKind::*;\n \n@@ -627,7 +632,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n }"}, {"sha": "ef1e7ea96dcf64de5cebd618cade3c3055273d26", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -6,10 +6,10 @@ use crate::utils::{\n use if_chain::if_chain;\n use rustc::{\n     declare_lint_pass,\n-    hir::intravisit::FnKind,\n     lint::{LateContext, LateLintPass, LintArray, LintPass},\n };\n use rustc_errors::Applicability;\n+use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, MatchSource, StmtKind};\n use rustc_session::declare_tool_lint;\n use rustc_span::source_map::Span;"}, {"sha": "2b430f71f225345044586ef2f35cfe2273250d25", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,11 +1,12 @@\n use crate::utils::{higher, qpath_res, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n+use rustc_hir::intravisit;\n use rustc_hir::BindingAnnotation;\n use rustc_session::declare_tool_lint;\n \n@@ -144,6 +145,8 @@ struct UsedVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n             if let hir::ExprKind::Path(ref qpath) = expr.kind;\n@@ -156,7 +159,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n         }\n         intravisit::walk_expr(self, expr);\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n }"}, {"sha": "83f9cf9eac5f1b6c5f9b99bec8a61b5c332d7a9c", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,9 +1,10 @@\n use matches::matches;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::*;\n+use rustc::hir::map::Map;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::intravisit::*;\n use rustc_hir::FunctionRetTy::Return;\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n@@ -359,6 +360,8 @@ impl<'v, 't> RefVisitor<'v, 't> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n         self.record(&Some(*lifetime));\n@@ -398,7 +401,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         }\n         walk_ty(self, ty);\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -453,6 +456,8 @@ struct LifetimeChecker {\n }\n \n impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n+    type Map = Map<'tcx>;\n+\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n         self.map.remove(&lifetime.name.ident().name);\n@@ -468,7 +473,7 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n             walk_generic_param(self, param)\n         }\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -502,14 +507,16 @@ struct BodyLifetimeChecker {\n }\n \n impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n+    type Map = Map<'tcx>;\n+\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n         if lifetime.name.ident().name != kw::Invalid && lifetime.name.ident().name != kw::StaticLifetime {\n             self.lifetimes_used_in_body = true;\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "1c7407eebc686dddbac9071d3caa258c845217d8", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -2,17 +2,18 @@ use crate::reexport::*;\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::{walk_block, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::middle::region;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id;\n+use rustc_hir::intravisit::{walk_block, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n // use rustc::middle::region::CodeExtent;\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sext, sugg};\n+use rustc::hir::map::Map;\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n@@ -1706,6 +1707,8 @@ struct UsedVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for UsedVisitor {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if match_var(expr, self.var) {\n             self.used = true;\n@@ -1714,7 +1717,7 @@ impl<'tcx> Visitor<'tcx> for UsedVisitor {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -1726,6 +1729,8 @@ struct LocalUsedVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for LocalUsedVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if same_var(self.cx, expr, self.local) {\n             self.used = true;\n@@ -1734,7 +1739,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LocalUsedVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -1824,6 +1829,8 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // a range index op\n@@ -1905,7 +1912,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n         }\n         self.prefer_mutable = old;\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -1950,6 +1957,8 @@ struct VarUsedAfterLoopVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VarUsedAfterLoopVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.past_while_let {\n             if Some(self.def_id) == var_def_id(self.cx, expr) {\n@@ -1960,7 +1969,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarUsedAfterLoopVisitor<'a, 'tcx> {\n         }\n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -2058,6 +2067,8 @@ struct IncrementVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.done {\n             return;\n@@ -2100,7 +2111,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n         }\n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -2117,6 +2128,8 @@ struct InitializeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         // Look for declarations of the variable\n         if let StmtKind::Local(ref local) = stmt.kind {\n@@ -2190,7 +2203,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.cx.tcx.hir())\n     }\n }\n@@ -2285,6 +2298,8 @@ struct LoopNestVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n+    type Map = Map<'tcx>;\n+\n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         if stmt.hir_id == self.hir_id {\n             self.nesting = LookFurther;\n@@ -2324,7 +2339,7 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n         walk_pat(self, pat)\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -2392,6 +2407,8 @@ struct HasBreakOrReturnVisitor {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for HasBreakOrReturnVisitor {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.has_break_or_return {\n             return;\n@@ -2408,7 +2425,7 @@ impl<'a, 'tcx> Visitor<'tcx> for HasBreakOrReturnVisitor {\n         walk_expr(self, expr);\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -2447,6 +2464,8 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, ex: &'tcx Expr<'_>) {\n         match ex.kind {\n             ExprKind::Path(_) => self.insert_def_id(ex),\n@@ -2457,7 +2476,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "3f621cb8b2877ccaffc18ad8ce1f3fab1cc567c3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -10,11 +10,12 @@ use std::iter;\n use if_chain::if_chain;\n use matches::matches;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, Lint, LintArray, LintContext, LintPass};\n use rustc::ty::{self, Predicate, Ty};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_session::declare_tool_lint;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Symbol, SymbolStr};\n@@ -1412,6 +1413,8 @@ fn lint_or_fun_call<'a, 'tcx>(\n     }\n \n     impl<'a, 'tcx> intravisit::Visitor<'tcx> for FunCallFinder<'a, 'tcx> {\n+        type Map = Map<'tcx>;\n+\n         fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n             let call_found = match &expr.kind {\n                 // ignore enum and struct constructors\n@@ -1429,7 +1432,7 @@ fn lint_or_fun_call<'a, 'tcx>(\n             }\n         }\n \n-        fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n             intravisit::NestedVisitorMap::None\n         }\n     }\n@@ -3188,6 +3191,8 @@ fn contains_return(expr: &hir::Expr<'_>) -> bool {\n     }\n \n     impl<'tcx> intravisit::Visitor<'tcx> for RetCallFinder {\n+        type Map = Map<'tcx>;\n+\n         fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n             if self.found {\n                 return;\n@@ -3199,7 +3204,7 @@ fn contains_return(expr: &hir::Expr<'_>) -> bool {\n             }\n         }\n \n-        fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n             intravisit::NestedVisitorMap::None\n         }\n     }"}, {"sha": "6381c32d395dc3f41036e9dca278e148245c9992", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,9 +1,10 @@\n use crate::utils::{differing_macro_contexts, paths, snippet_with_applicability, span_lint_and_then};\n use crate::utils::{is_copy, match_type};\n-use rustc::hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::LateContext;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n+use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n use rustc_hir::{self, *};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -91,12 +92,14 @@ struct UnwrapVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         self.identifiers.insert(ident(path));\n         walk_path(self, path);\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.cx.tcx.hir())\n     }\n }\n@@ -108,6 +111,8 @@ struct MapExprVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         if self.identifiers.contains(&ident(path)) {\n             self.found_identifier = true;\n@@ -116,7 +121,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n         walk_path(self, path);\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.cx.tcx.hir())\n     }\n }"}, {"sha": "62b30baef18a961b8a2411c24011ef774562c333", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,10 +1,11 @@\n use crate::utils::paths;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{match_qpath, match_trait_method, span_lint};\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::LateContext;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n \n use if_chain::if_chain;\n \n@@ -123,6 +124,8 @@ impl<'a, 'tcx> ReturnVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReturnVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         if let hir::ExprKind::Ret(Some(expr)) = &expr.kind {\n             let (found_mapping, found_filtering) = check_expression(self.cx, self.arg_id, expr);\n@@ -133,7 +136,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReturnVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "2195b486fd9ce5a88fe548bd393d03bff8b08e61", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,10 +1,10 @@\n use if_chain::if_chain;\n use matches::matches;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::FnKind;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n use rustc_errors::Applicability;\n+use rustc_hir::intravisit::FnKind;\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n use rustc_span::source_map::{ExpnKind, Span};"}, {"sha": "de734ccb677486dc81a33a1b76d9da0a547fe25f", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,8 +1,8 @@\n use crate::utils::{has_drop, is_entrypoint_fn, span_lint, trait_ref_of_method};\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::FnKind;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintPass};\n use rustc_hir as hir;\n+use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, HirId};\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n use rustc_session::declare_tool_lint;"}, {"sha": "5cc5993685216708c12e5d0f21cda5ab4434edd9", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,9 +1,10 @@\n use crate::utils::{higher, span_lint};\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n use rustc_hir as hir;\n+use rustc_hir::intravisit;\n use rustc_session::declare_tool_lint;\n \n declare_clippy_lint! {\n@@ -33,7 +34,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutMut {\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'a, 'tcx>, ty: &'tcx hir::Ty<'_>) {\n-        use rustc::hir::intravisit::Visitor;\n+        use rustc_hir::intravisit::Visitor;\n \n         MutVisitor { cx }.visit_ty(ty);\n     }\n@@ -44,6 +45,8 @@ pub struct MutVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         if in_external_macro(self.cx.sess(), expr.span) {\n             return;\n@@ -105,7 +108,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n \n         intravisit::walk_ty(self, ty);\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n }"}, {"sha": "0918886a9793436fe36683600f930a172799db38", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,9 +1,10 @@\n use crate::utils::{is_direct_expn_of, span_lint};\n use if_chain::if_chain;\n use matches::matches;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, ty};\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, StmtKind, UnOp};\n use rustc_session::declare_tool_lint;\n use rustc_span::Span;\n@@ -127,6 +128,8 @@ impl<'a, 'tcx> MutArgVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match expr.kind {\n             ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, _) => {\n@@ -150,7 +153,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n         walk_expr(self, expr)\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.cx.tcx.hir())\n     }\n }"}, {"sha": "12be861a9ff3aab6f135b8cc4ba907662d5dfe42", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -6,13 +6,13 @@ use crate::utils::{\n use if_chain::if_chain;\n use matches::matches;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::FnKind;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::traits;\n use rustc::traits::misc::can_type_implement_copy;\n use rustc::ty::{self, RegionKind, TypeFoldable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n+use rustc_hir::intravisit::FnKind;\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n use rustc_span::{Span, Symbol};"}, {"sha": "c11dfb06a66ad781dcd16da18f2b140ae5755ecd", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -5,7 +5,6 @@ use crate::utils::{\n use if_chain::if_chain;\n use matches::matches;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::FnKind;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::mir::{\n     self, traversal,\n@@ -14,6 +13,7 @@ use rustc::mir::{\n use rustc::ty::{self, fold::TypeVisitor, Ty};\n use rustc_data_structures::{fx::FxHashMap, transitive_relation::TransitiveRelation};\n use rustc_errors::Applicability;\n+use rustc_hir::intravisit::FnKind;\n use rustc_hir::{def_id, Body, FnDecl, HirId};\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_mir::dataflow::{"}, {"sha": "825f9ee3a41385e10e5c21a2f8ae200aca5357dc", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,9 +1,9 @@\n use crate::reexport::*;\n use crate::utils::{contains_name, higher, iter_input_pats, snippet, span_lint_and_then};\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::FnKind;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n+use rustc_hir::intravisit::FnKind;\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n use rustc_span::source_map::Span;"}, {"sha": "512bf21a9f3c0d9d9130bf6c53120e744be6f93c", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -2,9 +2,10 @@ use crate::utils::sugg::Sugg;\n use crate::utils::{get_enclosing_block, match_qpath, span_lint_and_then, SpanlessEq};\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::{walk_block, walk_expr, walk_stmt, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n use rustc_errors::Applicability;\n+use rustc_hir::intravisit::{walk_block, walk_expr, walk_stmt, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n use rustc_span::symbol::Symbol;\n@@ -279,6 +280,8 @@ impl<'a, 'tcx> VectorInitializationVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         if self.initialization_found {\n             match stmt.kind {\n@@ -316,7 +319,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "7092397619a5dda6e1f6e218f8ef04fbdabd45cb", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,9 +1,10 @@\n use crate::utils::{get_trait_def_id, span_lint, trait_ref_of_method};\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_session::declare_tool_lint;\n \n declare_clippy_lint! {\n@@ -185,6 +186,8 @@ struct BinaryExprVisitor {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for BinaryExprVisitor {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         match expr.kind {\n             hir::ExprKind::Binary(..)\n@@ -195,7 +198,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BinaryExprVisitor {\n \n         walk_expr(self, expr);\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "f8a6a2acd8a683f30ed01058044308bda860cc09", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -3,13 +3,13 @@ use std::cmp;\n use crate::utils::{is_copy, is_self_ty, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n use matches::matches;\n-use rustc::hir::intravisit::FnKind;\n use rustc::impl_lint_pass;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::session::config::Config as SessionConfig;\n use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::intravisit::FnKind;\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n use rustc_span::Span;"}, {"sha": "3edc220eda419eea516c8b6b4f8446ea503a6c4a", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -5,13 +5,14 @@ use std::cmp::Ordering;\n use std::collections::BTreeMap;\n \n use if_chain::if_chain;\n-use rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, InferTy, Ty, TyCtxt, TypeckTables};\n use rustc::{declare_lint_pass, impl_lint_pass};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -1493,6 +1494,8 @@ struct TypeComplexityVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n+    type Map = Map<'tcx>;\n+\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         let (add_score, sub_nest) = match ty.kind {\n             // _, &x and *x have only small overhead; don't mess with nesting level\n@@ -1527,7 +1530,7 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n         walk_ty(self, ty);\n         self.nest -= sub_nest;\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -2272,6 +2275,8 @@ impl<'a, 'tcx> ImplicitHasherTypeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_ty(&mut self, t: &'tcx hir::Ty<'_>) {\n         if let Some(target) = ImplicitHasherType::new(self.cx, t) {\n             self.found.push(target);\n@@ -2280,7 +2285,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n         walk_ty(self, t);\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -2305,6 +2310,8 @@ impl<'a, 'b, 'tcx> ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_body(&mut self, body: &'tcx Body<'_>) {\n         let prev_body = self.body;\n         self.body = self.cx.tcx.body_tables(body.id());\n@@ -2355,7 +2362,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ImplicitHasherConstructorVisitor<'a, 'b, 't\n         walk_expr(self, e);\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.cx.tcx.hir())\n     }\n }"}, {"sha": "b145d354c8942b8bd9287dd7de3736d70e3f69c8", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,8 +1,9 @@\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc_hir::def::Res;\n+use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n use rustc_hir::{AssocItemKind, HirId, ImplItemKind, ImplItemRef, Item, ItemKind, Path};\n use rustc_session::declare_tool_lint;\n \n@@ -86,6 +87,8 @@ struct UnusedSelfVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UnusedSelfVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         if self.uses_self {\n             // This function already uses `self`\n@@ -97,7 +100,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnusedSelfVisitor<'a, 'tcx> {\n         walk_path(self, path);\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.cx.tcx.hir())\n     }\n }"}, {"sha": "7a4fe159d8be6847eb1cef578d50ded08740652d", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,11 +1,11 @@\n+use crate::utils::{higher::if_block, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc_session::declare_tool_lint;\n-\n-use crate::utils::{higher::if_block, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};\n-use rustc::hir::intravisit::*;\n+use rustc_hir::intravisit::*;\n use rustc_hir::*;\n+use rustc_session::declare_tool_lint;\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n@@ -136,6 +136,8 @@ impl<'a, 'tcx> UnwrappableVariablesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if let Some((cond, then, els)) = if_block(&expr) {\n             walk_expr(self, cond);\n@@ -179,7 +181,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.cx.tcx.hir())\n     }\n }"}, {"sha": "81e6e2e99cc5d3c33368350446d64c55f1f67b11", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,12 +1,13 @@\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::{walk_item, walk_path, walk_ty, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n use rustc::ty::{DefIdTree, Ty};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::intravisit::{walk_item, walk_path, walk_ty, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n use rustc_span::symbol::kw;\n@@ -84,6 +85,8 @@ struct TraitImplTyVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_ty(&mut self, t: &'tcx hir::Ty<'_>) {\n         let trait_ty = self.trait_type_walker.next();\n         let impl_ty = self.impl_type_walker.next();\n@@ -107,7 +110,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n         walk_ty(self, t)\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }\n@@ -223,6 +226,8 @@ struct UseSelfVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n         if !path.segments.iter().any(|p| p.ident.span.is_dummy()) {\n             if path.segments.len() >= 2 {\n@@ -272,7 +277,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.cx.tcx.hir())\n     }\n }"}, {"sha": "902c3e2b7e727e288932a5a748f472bef291be6e", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -3,11 +3,12 @@\n \n use crate::utils::{get_attr, higher};\n use rustc::declare_lint_pass;\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n+use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n use rustc_session::declare_tool_lint;\n use syntax::ast::{Attribute, LitFloatType, LitKind};\n@@ -188,6 +189,8 @@ struct PrintVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for PrintVisitor {\n+    type Map = Map<'tcx>;\n+\n     #[allow(clippy::too_many_lines)]\n     fn visit_expr(&mut self, expr: &Expr<'_>) {\n         // handle if desugarings\n@@ -686,7 +689,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "e63b29be965735e719852c2ffede625445a4243d", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -3,13 +3,14 @@ use crate::utils::{\n     walk_ptrs_ty,\n };\n use if_chain::if_chain;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, impl_lint_pass};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_session::declare_tool_lint;\n use rustc_span::source_map::Span;\n@@ -239,6 +240,8 @@ struct LintCollector<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         walk_expr(self, expr);\n     }\n@@ -248,7 +251,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n             self.output.insert(path.segments[0].ident.name);\n         }\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.cx.tcx.hir())\n     }\n }"}, {"sha": "803a962f221fa011886f907a7759540e4d3d8440", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -25,7 +25,7 @@ use std::mem;\n \n use if_chain::if_chain;\n use matches::matches;\n-use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::{LateContext, Level, Lint, LintContext};\n use rustc::traits;\n use rustc::traits::predicate_for_trait_def;\n@@ -39,6 +39,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_hir::*;\n use rustc_span::hygiene::ExpnKind;\n@@ -455,12 +456,14 @@ struct ContainsName {\n }\n \n impl<'tcx> Visitor<'tcx> for ContainsName {\n+    type Map = Map<'tcx>;\n+\n     fn visit_name(&mut self, _: Span, name: Name) {\n         if self.name == name {\n             self.result = true;\n         }\n     }\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}, {"sha": "03170fde4a65120886563373965fcc0b1d7eb7e8", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58cfac458aad876e1a6e8b07626519d5178badb/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=e58cfac458aad876e1a6e8b07626519d5178badb", "patch": "@@ -1,6 +1,7 @@\n use crate::utils::{get_pat_name, match_var, snippet};\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint::LateContext;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_span::source_map::Span;\n use std::borrow::Cow;\n@@ -52,6 +53,8 @@ struct PtrCloneVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.abort {\n             return;\n@@ -75,7 +78,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PtrCloneVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n }"}]}