{"sha": "675319e5586817143fef60243d319395ae858ad1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NTMxOWU1NTg2ODE3MTQzZmVmNjAyNDNkMzE5Mzk1YWU4NThhZDE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-10-25T22:55:12Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-16T13:29:44Z"}, "message": "lint if a private item has doctests", "tree": {"sha": "b835717f6a78cb87e6deb5d749b2c07f1ccd41bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b835717f6a78cb87e6deb5d749b2c07f1ccd41bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/675319e5586817143fef60243d319395ae858ad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/675319e5586817143fef60243d319395ae858ad1", "html_url": "https://github.com/rust-lang/rust/commit/675319e5586817143fef60243d319395ae858ad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/675319e5586817143fef60243d319395ae858ad1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b9b97bd9b704f85f0184f7a213cc4d62bd9654c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c", "html_url": "https://github.com/rust-lang/rust/commit/6b9b97bd9b704f85f0184f7a213cc4d62bd9654c"}], "stats": {"total": 201, "additions": 158, "deletions": 43}, "files": [{"sha": "22f2023eefbd874693121105c5deefbe6a9c39e8", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/675319e5586817143fef60243d319395ae858ad1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675319e5586817143fef60243d319395ae858ad1/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=675319e5586817143fef60243d319395ae858ad1", "patch": "@@ -318,6 +318,12 @@ declare_lint! {\n     \"warn about missing code example in an item's documentation\"\n }\n \n+declare_lint! {\n+    pub PRIVATE_DOC_TESTS,\n+    Allow,\n+    \"warn about doc test in private item\"\n+}\n+\n declare_lint! {\n     pub WHERE_CLAUSES_OBJECT_SAFETY,\n     Warn,\n@@ -415,6 +421,7 @@ impl LintPass for HardwiredLints {\n             DUPLICATE_MACRO_EXPORTS,\n             INTRA_DOC_LINK_RESOLUTION_FAILURE,\n             MISSING_DOC_CODE_EXAMPLES,\n+            PRIVATE_DOC_TESTS,\n             WHERE_CLAUSES_OBJECT_SAFETY,\n             PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n             MACRO_USE_EXTERN_CRATE,"}, {"sha": "aac0f9f94e32933ee7dafb0e97c05f594d2e0b2d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/675319e5586817143fef60243d319395ae858ad1/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675319e5586817143fef60243d319395ae858ad1/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=675319e5586817143fef60243d319395ae858ad1", "patch": "@@ -351,13 +351,15 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     let warnings_lint_name = lint::builtin::WARNINGS.name;\n     let missing_docs = rustc_lint::builtin::MISSING_DOCS.name;\n     let missing_doc_example = rustc_lint::builtin::MISSING_DOC_CODE_EXAMPLES.name;\n+    let private_doc_tests = rustc_lint::builtin::PRIVATE_DOC_TESTS.name;\n \n     // In addition to those specific lints, we also need to whitelist those given through\n     // command line, otherwise they'll get ignored and we don't want that.\n     let mut whitelisted_lints = vec![warnings_lint_name.to_owned(),\n                                      intra_link_resolution_failure_name.to_owned(),\n                                      missing_docs.to_owned(),\n-                                     missing_doc_example.to_owned()];\n+                                     missing_doc_example.to_owned(),\n+                                     private_doc_tests.to_owned()];\n \n     whitelisted_lints.extend(lint_opts.iter().map(|(lint, _)| lint).cloned());\n "}, {"sha": "675e3e9be1e6298e1f6c6700d06ec09cf821bba1", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/675319e5586817143fef60243d319395ae858ad1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675319e5586817143fef60243d319395ae858ad1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=675319e5586817143fef60243d319395ae858ad1", "patch": "@@ -24,9 +24,9 @@ use std::ops::Range;\n \n use core::DocContext;\n use fold::DocFolder;\n-use html::markdown::{find_testable_code, markdown_links, ErrorCodes, LangString};\n+use html::markdown::markdown_links;\n \n-use passes::Pass;\n+use passes::{look_for_tests, Pass};\n \n pub const COLLECT_INTRA_DOC_LINKS: Pass =\n     Pass::early(\"collect-intra-doc-links\", collect_intra_doc_links,\n@@ -214,43 +214,6 @@ impl<'a, 'tcx, 'rcx, 'cstore> LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n     }\n }\n \n-fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx>(\n-    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n-    dox: &str,\n-    item: &Item,\n-) {\n-    if (item.is_mod() && cx.tcx.hir.as_local_node_id(item.def_id).is_none()) ||\n-       cx.as_local_node_id(item.def_id).is_none() {\n-        // If non-local, no need to check anything.\n-        return;\n-    }\n-\n-    struct Tests {\n-        found_tests: usize,\n-    }\n-\n-    impl ::test::Tester for Tests {\n-        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n-            self.found_tests += 1;\n-        }\n-    }\n-\n-    let mut tests = Tests {\n-        found_tests: 0,\n-    };\n-\n-    if find_testable_code(&dox, &mut tests, ErrorCodes::No).is_ok() {\n-        if tests.found_tests == 0 {\n-            let mut diag = cx.tcx.struct_span_lint_node(\n-                lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n-                NodeId::from_u32(0),\n-                span_of_attrs(&item.attrs),\n-                \"Missing code example in this documentation\");\n-            diag.emit();\n-        }\n-    }\n-}\n-\n impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         let item_node_id = if item.is_mod() {\n@@ -313,7 +276,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstor\n         let cx = self.cx;\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n \n-        look_for_tests(&cx, &dox, &item);\n+        look_for_tests(&cx, &dox, &item, true);\n \n         if !self.is_nightly_build {\n             return None;\n@@ -488,7 +451,7 @@ fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n     None\n }\n \n-fn span_of_attrs(attrs: &Attributes) -> syntax_pos::Span {\n+pub fn span_of_attrs(attrs: &Attributes) -> syntax_pos::Span {\n     if attrs.doc_strings.is_empty() {\n         return DUMMY_SP;\n     }"}, {"sha": "eee7278e4f0a910e2819a16a3a920d54dfa9cd4f", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/675319e5586817143fef60243d319395ae858ad1/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675319e5586817143fef60243d319395ae858ad1/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=675319e5586817143fef60243d319395ae858ad1", "patch": "@@ -12,16 +12,22 @@\n //! process.\n \n use rustc::hir::def_id::DefId;\n+use rustc::lint as lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::util::nodemap::DefIdSet;\n use std::mem;\n use std::fmt;\n+use syntax::ast::NodeId;\n \n use clean::{self, GetDefId, Item};\n-use core::DocContext;\n+use core::{DocContext, DocAccessLevels};\n use fold;\n use fold::StripItem;\n \n+use html::markdown::{find_testable_code, ErrorCodes, LangString};\n+\n+use self::collect_intra_doc_links::span_of_attrs;\n+\n mod collapse_docs;\n pub use self::collapse_docs::COLLAPSE_DOCS;\n \n@@ -43,6 +49,9 @@ pub use self::propagate_doc_cfg::PROPAGATE_DOC_CFG;\n mod collect_intra_doc_links;\n pub use self::collect_intra_doc_links::COLLECT_INTRA_DOC_LINKS;\n \n+mod private_items_doc_tests;\n+pub use self::private_items_doc_tests::CHECK_PRIVATE_ITEMS_DOC_TESTS;\n+\n mod collect_trait_impls;\n pub use self::collect_trait_impls::COLLECT_TRAIT_IMPLS;\n \n@@ -128,6 +137,7 @@ impl Pass {\n \n /// The full list of passes.\n pub const PASSES: &'static [Pass] = &[\n+    CHECK_PRIVATE_ITEMS_DOC_TESTS,\n     STRIP_HIDDEN,\n     UNINDENT_COMMENTS,\n     COLLAPSE_DOCS,\n@@ -141,6 +151,7 @@ pub const PASSES: &'static [Pass] = &[\n /// The list of passes run by default.\n pub const DEFAULT_PASSES: &'static [&'static str] = &[\n     \"collect-trait-impls\",\n+    \"check-private-items-doc-tests\",\n     \"strip-hidden\",\n     \"strip-private\",\n     \"collect-intra-doc-links\",\n@@ -152,6 +163,7 @@ pub const DEFAULT_PASSES: &'static [&'static str] = &[\n /// The list of default passes run with `--document-private-items` is passed to rustdoc.\n pub const DEFAULT_PRIVATE_PASSES: &'static [&'static str] = &[\n     \"collect-trait-impls\",\n+    \"check-private-items-doc-tests\",\n     \"strip-priv-imports\",\n     \"collect-intra-doc-links\",\n     \"collapse-docs\",\n@@ -348,3 +360,49 @@ impl fold::DocFolder for ImportStripper {\n         }\n     }\n }\n+\n+pub fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx>(\n+    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+    dox: &str,\n+    item: &Item,\n+    check_missing_code: bool,\n+) {\n+    if cx.as_local_node_id(item.def_id).is_none() {\n+        // If non-local, no need to check anything.\n+        return;\n+    }\n+\n+    struct Tests {\n+        found_tests: usize,\n+    }\n+\n+    impl ::test::Tester for Tests {\n+        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n+            self.found_tests += 1;\n+        }\n+    }\n+\n+    let mut tests = Tests {\n+        found_tests: 0,\n+    };\n+\n+    if find_testable_code(&dox, &mut tests, ErrorCodes::No).is_ok() {\n+        if check_missing_code == true && tests.found_tests == 0 {\n+            let mut diag = cx.tcx.struct_span_lint_node(\n+                lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n+                NodeId::from_u32(0),\n+                span_of_attrs(&item.attrs),\n+                \"Missing code example in this documentation\");\n+            diag.emit();\n+        } else if check_missing_code == false &&\n+                  tests.found_tests > 0 &&\n+                  !cx.renderinfo.borrow().access_levels.is_doc_reachable(item.def_id) {\n+            let mut diag = cx.tcx.struct_span_lint_node(\n+                lint::builtin::PRIVATE_DOC_TESTS,\n+                NodeId::from_u32(0),\n+                span_of_attrs(&item.attrs),\n+                \"Documentation test in private item\");\n+            diag.emit();\n+        }\n+    }\n+}"}, {"sha": "7c5ce8894b1065c6305c1144092be145555626ee", "filename": "src/librustdoc/passes/private_items_doc_tests.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/675319e5586817143fef60243d319395ae858ad1/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675319e5586817143fef60243d319395ae858ad1/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fprivate_items_doc_tests.rs?ref=675319e5586817143fef60243d319395ae858ad1", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use clean::*;\n+\n+use core::DocContext;\n+use fold::DocFolder;\n+\n+use passes::{look_for_tests, Pass};\n+\n+pub const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass =\n+    Pass::early(\"check-private-items-doc-tests\", check_private_items_doc_tests,\n+                \"check private items doc tests\");\n+\n+struct PrivateItemDocTestLinter<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx> {\n+    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+}\n+\n+impl<'a, 'tcx, 'rcx, 'cstore> PrivateItemDocTestLinter<'a, 'tcx, 'rcx, 'cstore> {\n+    fn new(cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>) -> Self {\n+        PrivateItemDocTestLinter {\n+            cx,\n+        }\n+    }\n+}\n+\n+pub fn check_private_items_doc_tests(krate: Crate, cx: &DocContext) -> Crate {\n+    let mut coll = PrivateItemDocTestLinter::new(cx);\n+\n+    coll.fold_crate(krate)\n+}\n+\n+impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for PrivateItemDocTestLinter<'a, 'tcx, 'rcx, 'cstore> {\n+    fn fold_item(&mut self, item: Item) -> Option<Item> {\n+        let cx = self.cx;\n+        let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n+\n+        look_for_tests(&cx, &dox, &item, false);\n+\n+        self.fold_item_recur(item)\n+    }\n+}"}, {"sha": "5a13fe359f5270869907d13e3755c11bc24295ec", "filename": "src/test/rustdoc-ui/private-item-doc-test.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/675319e5586817143fef60243d319395ae858ad1/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675319e5586817143fef60243d319395ae858ad1/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs?ref=675319e5586817143fef60243d319395ae858ad1", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(private_doc_tests)]\n+\n+mod foo {\n+    /// private doc test\n+    ///\n+    /// ```\n+    /// assert!(false);\n+    /// ```\n+    fn bar() {}\n+}"}, {"sha": "b43add7ea505f24569bfe210a6e97764291963eb", "filename": "src/test/rustdoc-ui/private-item-doc-test.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/675319e5586817143fef60243d319395ae858ad1/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/675319e5586817143fef60243d319395ae858ad1/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr?ref=675319e5586817143fef60243d319395ae858ad1", "patch": "@@ -0,0 +1,16 @@\n+error: Documentation test in private item\n+  --> $DIR/private-item-doc-test.rs:14:5\n+   |\n+LL | /     /// private doc test\n+LL | |     ///\n+LL | |     /// ```\n+LL | |     /// assert!(false);\n+LL | |     /// ```\n+   | |___________^\n+   |\n+note: lint level defined here\n+  --> $DIR/private-item-doc-test.rs:11:9\n+   |\n+LL | #![deny(private_doc_tests)]\n+   |         ^^^^^^^^^^^^^^^^^\n+"}]}