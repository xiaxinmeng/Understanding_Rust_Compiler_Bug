{"sha": "6e8a625674b6624fec6f7d40f10df27ca0c316bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOGE2MjU2NzRiNjYyNGZlYzZmN2Q0MGYxMGRmMjdjYTBjMzE2YmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-20T22:32:01Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-20T22:32:01Z"}, "message": "Remove pattern consideration from split_grouped_constructors", "tree": {"sha": "342ba1d4bfa5c8b8d5cf330943aac7c1ece7be7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/342ba1d4bfa5c8b8d5cf330943aac7c1ece7be7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e8a625674b6624fec6f7d40f10df27ca0c316bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8a625674b6624fec6f7d40f10df27ca0c316bf", "html_url": "https://github.com/rust-lang/rust/commit/6e8a625674b6624fec6f7d40f10df27ca0c316bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e8a625674b6624fec6f7d40f10df27ca0c316bf/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87463c3962a24f4a102374711d268ac30fd5a88d", "url": "https://api.github.com/repos/rust-lang/rust/commits/87463c3962a24f4a102374711d268ac30fd5a88d", "html_url": "https://github.com/rust-lang/rust/commit/87463c3962a24f4a102374711d268ac30fd5a88d"}], "stats": {"total": 30, "additions": 4, "deletions": 26}, "files": [{"sha": "8c6f1d6759f8adbb74a0677cb3f63095628b7bf6", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6e8a625674b6624fec6f7d40f10df27ca0c316bf/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e8a625674b6624fec6f7d40f10df27ca0c316bf/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=6e8a625674b6624fec6f7d40f10df27ca0c316bf", "patch": "@@ -1047,7 +1047,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n \n     if let Some(constructors) = pat_constructors(cx, v[0], pcx) {\n         debug!(\"is_useful - expanding constructors: {:#?}\", constructors);\n-        split_grouped_constructors(cx.tcx, constructors, matrix, v, pcx.ty).into_iter().map(|c|\n+        split_grouped_constructors(cx.tcx, constructors, matrix, pcx.ty).into_iter().map(|c|\n             is_useful_specialized(cx, matrix, v, c.clone(), pcx.ty, witness)\n         ).find(|result| result.is_useful()).unwrap_or(NotUseful)\n     } else {\n@@ -1095,7 +1095,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         let is_non_exhaustive = is_privately_empty || is_declared_nonexhaustive;\n \n         if missing_ctors.is_empty() && !is_non_exhaustive {\n-            split_grouped_constructors(cx.tcx, all_ctors, matrix, v, pcx.ty).into_iter().map(|c| {\n+            split_grouped_constructors(cx.tcx, all_ctors, matrix, pcx.ty).into_iter().map(|c| {\n                 is_useful_specialized(cx, matrix, v, c.clone(), pcx.ty, witness)\n             }).find(|result| result.is_useful()).unwrap_or(NotUseful)\n         } else {\n@@ -1411,11 +1411,8 @@ fn split_grouped_constructors<'p, 'a: 'p, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ctors: Vec<Constructor<'tcx>>,\n     &Matrix(ref m): &Matrix<'p, 'tcx>,\n-    p: &[&'p Pattern<'tcx>],\n     ty: Ty<'tcx>,\n ) -> Vec<Constructor<'tcx>> {\n-    let pat = &p[0];\n-\n     let mut split_ctors = Vec::with_capacity(ctors.len());\n \n     for ctor in ctors.into_iter() {\n@@ -1427,27 +1424,8 @@ fn split_grouped_constructors<'p, 'a: 'p, 'tcx: 'a>(\n                 // of the new pattern `p_({m + 1},1)` (here `pat`) and the constructor range.\n                 // Anything else is irrelevant, because it is guaranteed to result in `NotUseful`,\n                 // which is the default case anyway, and can be ignored.\n-                let mut ctor_range = IntRange::from_ctor(tcx, &ctor).unwrap();\n-                if let Some(pat_range) = IntRange::from_pat(tcx, pat) {\n-                    if let Some(new_range) = ctor_range.intersection(&pat_range) {\n-                        ctor_range = new_range;\n-                    } else {\n-                        // If the intersection between `pat` and the constructor is empty, the\n-                        // entire range is `NotUseful`.\n-                        continue;\n-                    }\n-                } else {\n-                    match pat.kind {\n-                        box PatternKind::Wild => {\n-                            // A wild pattern matches the entire range of values,\n-                            // so the current values are fine.\n-                        }\n-                        // If the pattern is not a value (i.e. a degenerate range), a range or a\n-                        // wildcard (which stands for the entire range), then it's guaranteed to\n-                        // be `NotUseful`.\n-                        _ => continue,\n-                    }\n-                }\n+                let ctor_range = IntRange::from_ctor(tcx, &ctor).unwrap();\n+\n                 // We're going to collect all the endpoints in the new pattern so we can create\n                 // subranges between them.\n                 // If there's a single point, we need to identify it as belonging"}]}