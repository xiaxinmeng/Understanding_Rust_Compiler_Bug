{"sha": "4c62ab109b8bc4da7218c5fab0be1509a8f21664", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNjJhYjEwOWI4YmM0ZGE3MjE4YzVmYWIwYmUxNTA5YThmMjE2NjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-13T12:51:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-13T12:51:52Z"}, "message": "auto merge of #13469 : kmcallister/rust/utf16, r=huonw\n\nThis fixes two separate issues related to character encoding.\r\n\r\n* Add `encode_utf16` to the `Char` trait, analogous to `encode_utf8`.  `&str` already supports UTF-16 encoding but only with a heap allocation.  Also fix `encode_utf8` docs and add tests.\r\n\r\n* Correctly decode non-BMP hex escapes in JSON (#13064).", "tree": {"sha": "165676a2e6ed3a133105366ba3aaa4d5e611074d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/165676a2e6ed3a133105366ba3aaa4d5e611074d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c62ab109b8bc4da7218c5fab0be1509a8f21664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c62ab109b8bc4da7218c5fab0be1509a8f21664", "html_url": "https://github.com/rust-lang/rust/commit/4c62ab109b8bc4da7218c5fab0be1509a8f21664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c62ab109b8bc4da7218c5fab0be1509a8f21664/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "770b2fea06f96714b4602d54c0681dce8ad315b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/770b2fea06f96714b4602d54c0681dce8ad315b1", "html_url": "https://github.com/rust-lang/rust/commit/770b2fea06f96714b4602d54c0681dce8ad315b1"}, {"sha": "cee9a83629336fa3ae218d2876fa9395a68d4370", "url": "https://api.github.com/repos/rust-lang/rust/commits/cee9a83629336fa3ae218d2876fa9395a68d4370", "html_url": "https://github.com/rust-lang/rust/commit/cee9a83629336fa3ae218d2876fa9395a68d4370"}], "stats": {"total": 170, "additions": 126, "deletions": 44}, "files": [{"sha": "02afdb713ff2d3d54e5fea6483ac85a6a2ed4047", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 65, "deletions": 25, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4c62ab109b8bc4da7218c5fab0be1509a8f21664/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c62ab109b8bc4da7218c5fab0be1509a8f21664/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=4c62ab109b8bc4da7218c5fab0be1509a8f21664", "patch": "@@ -239,6 +239,7 @@ use std::io::MemWriter;\n use std::io;\n use std::num;\n use std::str;\n+use std::str::ScalarValue;\n use std::strbuf::StrBuf;\n \n use Encodable;\n@@ -1129,6 +1130,35 @@ impl<T : Iterator<char>> Parser<T> {\n         Ok(res)\n     }\n \n+    fn decode_hex_escape(&mut self) -> DecodeResult<u16> {\n+        let mut i = 0u;\n+        let mut n = 0u16;\n+        while i < 4u && !self.eof() {\n+            self.bump();\n+            n = match self.ch_or_null() {\n+                c @ '0' .. '9' => n * 16_u16 + ((c as u16) - ('0' as u16)),\n+                'a' | 'A' => n * 16_u16 + 10_u16,\n+                'b' | 'B' => n * 16_u16 + 11_u16,\n+                'c' | 'C' => n * 16_u16 + 12_u16,\n+                'd' | 'D' => n * 16_u16 + 13_u16,\n+                'e' | 'E' => n * 16_u16 + 14_u16,\n+                'f' | 'F' => n * 16_u16 + 15_u16,\n+                _ => return self.error(\n+                    ~\"invalid \\\\u escape (unrecognized hex)\")\n+            };\n+\n+            i += 1u;\n+        }\n+\n+        // Error out if we didn't parse 4 digits.\n+        if i != 4u {\n+            return self.error(\n+                ~\"invalid \\\\u escape (not four digits)\");\n+        }\n+\n+        Ok(n)\n+    }\n+\n     fn parse_str(&mut self) -> DecodeResult<~str> {\n         let mut escape = false;\n         let mut res = StrBuf::new();\n@@ -1149,35 +1179,35 @@ impl<T : Iterator<char>> Parser<T> {\n                     'n' => res.push_char('\\n'),\n                     'r' => res.push_char('\\r'),\n                     't' => res.push_char('\\t'),\n-                    'u' => {\n-                        // Parse \\u1234.\n-                        let mut i = 0u;\n-                        let mut n = 0u;\n-                        while i < 4u && !self.eof() {\n-                            self.bump();\n-                            n = match self.ch_or_null() {\n-                                c @ '0' .. '9' => n * 16u + (c as uint) - ('0' as uint),\n-                                'a' | 'A' => n * 16u + 10u,\n-                                'b' | 'B' => n * 16u + 11u,\n-                                'c' | 'C' => n * 16u + 12u,\n-                                'd' | 'D' => n * 16u + 13u,\n-                                'e' | 'E' => n * 16u + 14u,\n-                                'f' | 'F' => n * 16u + 15u,\n+                    'u' => match try!(self.decode_hex_escape()) {\n+                        0xDC00 .. 0xDFFF => return self.error(\n+                                ~\"lone trailing surrogate in hex escape\"),\n+\n+                        // Non-BMP characters are encoded as a sequence of\n+                        // two hex escapes, representing UTF-16 surrogates.\n+                        n1 @ 0xD800 .. 0xDBFF => {\n+                            let c1 = self.next_char();\n+                            let c2 = self.next_char();\n+                            match (c1, c2) {\n+                                (Some('\\\\'), Some('u')) => (),\n                                 _ => return self.error(\n-                                    ~\"invalid \\\\u escape (unrecognized hex)\")\n-                            };\n-\n-                            i += 1u;\n-                        }\n+                                    ~\"unexpected end of non-BMP hex escape\"),\n+                            }\n \n-                        // Error out if we didn't parse 4 digits.\n-                        if i != 4u {\n-                            return self.error(\n-                                ~\"invalid \\\\u escape (not four digits)\");\n+                            let buf = [n1, try!(self.decode_hex_escape())];\n+                            match str::utf16_items(buf.as_slice()).next() {\n+                                Some(ScalarValue(c)) => res.push_char(c),\n+                                _ => return self.error(\n+                                    ~\"lone leading surrogate in hex escape\"),\n+                            }\n                         }\n \n-                        res.push_char(char::from_u32(n as u32).unwrap());\n-                    }\n+                        n => match char::from_u32(n as u32) {\n+                            Some(c) => res.push_char(c),\n+                            None => return self.error(\n+                                format!(\"invalid Unicode codepoint {:u}\", n)),\n+                        },\n+                    },\n                     _ => return self.error(~\"invalid escape\"),\n                 }\n                 escape = false;\n@@ -2139,6 +2169,16 @@ mod tests {\n         assert_eq!(from_str(\" \\\"foo\\\" \"), Ok(String(~\"foo\")));\n         assert_eq!(from_str(\"\\\"\\\\u12ab\\\"\"), Ok(String(~\"\\u12ab\")));\n         assert_eq!(from_str(\"\\\"\\\\uAB12\\\"\"), Ok(String(~\"\\uAB12\")));\n+\n+        // Non-BMP escapes.  The exact error messages and positions are kind of\n+        // arbitrary.\n+        assert_eq!(from_str(\"\\\"\\\\ud83d\\\\udca9\\\"\"), Ok(String(~\"\\U0001F4A9\")));\n+        assert!(from_str(\"\\\"\\\\ud83d\\\"\").is_err());\n+        assert!(from_str(\"\\\"\\\\udca9\\\"\").is_err());\n+        assert!(from_str(\"\\\"\\\\ud83d\\\\ud83d\\\"\").is_err());\n+        assert!(from_str(\"\\\"\\\\ud83dx\\\"\").is_err());\n+        assert!(from_str(\"\\\"\\\\udca9\\\\udca9\\\"\").is_err());\n+        assert!(from_str(\"\\\"\\\\udca9x\\\"\").is_err());\n     }\n \n     #[test]"}, {"sha": "67c046986d3c17cd5c7ac11ee12b6d5398d2db58", "filename": "src/libstd/char.rs", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4c62ab109b8bc4da7218c5fab0be1509a8f21664/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c62ab109b8bc4da7218c5fab0be1509a8f21664/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=4c62ab109b8bc4da7218c5fab0be1509a8f21664", "patch": "@@ -32,6 +32,7 @@ use unicode::{derived_property, property, general_category, decompose, conversio\n \n #[cfg(test)] use str::Str;\n #[cfg(test)] use strbuf::StrBuf;\n+#[cfg(test)] use slice::ImmutableVector;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n #[cfg(not(test))] use default::Default;\n@@ -560,11 +561,19 @@ pub trait Char {\n \n     /// Encodes this character as UTF-8 into the provided byte buffer.\n     ///\n-    /// The buffer must be at least 4 bytes long or a runtime failure will\n+    /// The buffer must be at least 4 bytes long or a runtime failure may\n     /// occur.\n     ///\n-    /// This will then return the number of characters written to the slice.\n+    /// This will then return the number of bytes written to the slice.\n     fn encode_utf8(&self, dst: &mut [u8]) -> uint;\n+\n+    /// Encodes this character as UTF-16 into the provided `u16` buffer.\n+    ///\n+    /// The buffer must be at least 2 elements long or a runtime failure may\n+    /// occur.\n+    ///\n+    /// This will then return the number of `u16`s written to the slice.\n+    fn encode_utf16(&self, dst: &mut [u16]) -> uint;\n }\n \n impl Char for char {\n@@ -602,7 +611,7 @@ impl Char for char {\n \n     fn len_utf8_bytes(&self) -> uint { len_utf8_bytes(*self) }\n \n-    fn encode_utf8<'a>(&self, dst: &'a mut [u8]) -> uint {\n+    fn encode_utf8(&self, dst: &mut [u8]) -> uint {\n         let code = *self as uint;\n         if code < MAX_ONE_B {\n             dst[0] = code as u8;\n@@ -624,6 +633,24 @@ impl Char for char {\n             return 4;\n         }\n     }\n+\n+    fn encode_utf16(&self, dst: &mut [u16]) -> uint {\n+        let mut ch = *self as uint;\n+        if (ch & 0xFFFF_u) == ch {\n+            // The BMP falls through (assuming non-surrogate, as it\n+            // should)\n+            assert!(ch <= 0xD7FF_u || ch >= 0xE000_u);\n+            dst[0] = ch as u16;\n+            1\n+        } else {\n+            // Supplementary planes break into surrogates.\n+            assert!(ch >= 0x1_0000_u && ch <= 0x10_FFFF_u);\n+            ch -= 0x1_0000_u;\n+            dst[0] = 0xD800_u16 | ((ch >> 10) as u16);\n+            dst[1] = 0xDC00_u16 | ((ch as u16) & 0x3FF_u16);\n+            2\n+        }\n+    }\n }\n \n #[cfg(not(test))]\n@@ -788,3 +815,31 @@ fn test_to_str() {\n     let s = 't'.to_str();\n     assert_eq!(s, ~\"t\");\n }\n+\n+#[test]\n+fn test_encode_utf8() {\n+    fn check(input: char, expect: &[u8]) {\n+        let mut buf = [0u8, ..4];\n+        let n = input.encode_utf8(buf /* as mut slice! */);\n+        assert_eq!(buf.slice_to(n), expect);\n+    }\n+\n+    check('x', [0x78]);\n+    check('\\u00e9', [0xc3, 0xa9]);\n+    check('\\ua66e', [0xea, 0x99, 0xae]);\n+    check('\\U0001f4a9', [0xf0, 0x9f, 0x92, 0xa9]);\n+}\n+\n+#[test]\n+fn test_encode_utf16() {\n+    fn check(input: char, expect: &[u16]) {\n+        let mut buf = [0u16, ..2];\n+        let n = input.encode_utf16(buf /* as mut slice! */);\n+        assert_eq!(buf.slice_to(n), expect);\n+    }\n+\n+    check('x', [0x0078]);\n+    check('\\u00e9', [0x00e9]);\n+    check('\\ua66e', [0xa66e]);\n+    check('\\U0001f4a9', [0xd83d, 0xdca9]);\n+}"}, {"sha": "449329ce63aa421a21493a9474bed29879b1c4a0", "filename": "src/libstd/str.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c62ab109b8bc4da7218c5fab0be1509a8f21664/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c62ab109b8bc4da7218c5fab0be1509a8f21664/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=4c62ab109b8bc4da7218c5fab0be1509a8f21664", "patch": "@@ -2555,22 +2555,9 @@ impl<'a> StrSlice<'a> for &'a str {\n     fn to_utf16(&self) -> ~[u16] {\n         let mut u = ~[];\n         for ch in self.chars() {\n-            // Arithmetic with u32 literals is easier on the eyes than chars.\n-            let mut ch = ch as u32;\n-\n-            if (ch & 0xFFFF_u32) == ch {\n-                // The BMP falls through (assuming non-surrogate, as it\n-                // should)\n-                assert!(ch <= 0xD7FF_u32 || ch >= 0xE000_u32);\n-                u.push(ch as u16)\n-            } else {\n-                // Supplementary planes break into surrogates.\n-                assert!(ch >= 0x1_0000_u32 && ch <= 0x10_FFFF_u32);\n-                ch -= 0x1_0000_u32;\n-                let w1 = 0xD800_u16 | ((ch >> 10) as u16);\n-                let w2 = 0xDC00_u16 | ((ch as u16) & 0x3FF_u16);\n-                u.push_all([w1, w2])\n-            }\n+            let mut buf = [0u16, ..2];\n+            let n = ch.encode_utf16(buf /* as mut slice! */);\n+            u.push_all(buf.slice_to(n));\n         }\n         u\n     }"}]}