{"sha": "814ff01620730f3406797d7aaf210e0bec8f2754", "node_id": "C_kwDOAAsO6NoAKDgxNGZmMDE2MjA3MzBmMzQwNjc5N2Q3YWFmMjEwZTBiZWM4ZjI3NTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T11:24:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T11:24:44Z"}, "message": "Auto merge of #13458 - cameron1024:suggest-checked-wrapping-saturating, r=Veykril\n\nadd wrapping/checked/saturating assist\n\nThis addresses #13452\n\nI'm not sure about the structure of the code. I'm not sure if it needs to be 3 separate assists, and if that means it needs to be in 3 separate files as well.\n\nMost of the logic is in `util.rs`, which feels funny to me, but there seems to be a pattern of 1 assist per file, and this seems better than duplicating the logic.\n\nLet me know if anything needs changes :grin:", "tree": {"sha": "0ac64995b2196c577eb080dc5446df87f106cf7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ac64995b2196c577eb080dc5446df87f106cf7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/814ff01620730f3406797d7aaf210e0bec8f2754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/814ff01620730f3406797d7aaf210e0bec8f2754", "html_url": "https://github.com/rust-lang/rust/commit/814ff01620730f3406797d7aaf210e0bec8f2754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/814ff01620730f3406797d7aaf210e0bec8f2754/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25717af4aa82da8ef9c93ff3428bd929e4b3dfe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/25717af4aa82da8ef9c93ff3428bd929e4b3dfe8", "html_url": "https://github.com/rust-lang/rust/commit/25717af4aa82da8ef9c93ff3428bd929e4b3dfe8"}, {"sha": "0dd26821783ccc809fb0995f178fd6c53f6eebd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd26821783ccc809fb0995f178fd6c53f6eebd7", "html_url": "https://github.com/rust-lang/rust/commit/0dd26821783ccc809fb0995f178fd6c53f6eebd7"}], "stats": {"total": 288, "additions": 288, "deletions": 0}, "files": [{"sha": "08fd4453dfca5c4e9aef4fecf4ed814020730b2d", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/814ff01620730f3406797d7aaf210e0bec8f2754/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814ff01620730f3406797d7aaf210e0bec8f2754/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=814ff01620730f3406797d7aaf210e0bec8f2754", "patch": "@@ -2926,6 +2926,13 @@ impl Type {\n         matches!(self.ty.kind(Interner), TyKind::Scalar(Scalar::Uint(UintTy::Usize)))\n     }\n \n+    pub fn is_int_or_uint(&self) -> bool {\n+        match self.ty.kind(Interner) {\n+            TyKind::Scalar(Scalar::Int(_) | Scalar::Uint(_)) => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn remove_ref(&self) -> Option<Type> {\n         match &self.ty.kind(Interner) {\n             TyKind::Ref(.., ty) => Some(self.derived(ty.clone())),"}, {"sha": "f1ca35cafc3a4761c75b3ec6351abbf960f7f243", "filename": "crates/ide-assists/src/handlers/replace_arith_op.rs", "status": "added", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/814ff01620730f3406797d7aaf210e0bec8f2754/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814ff01620730f3406797d7aaf210e0bec8f2754/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_arith_op.rs?ref=814ff01620730f3406797d7aaf210e0bec8f2754", "patch": "@@ -0,0 +1,226 @@\n+use ide_db::assists::{AssistId, AssistKind, GroupLabel};\n+use syntax::{\n+    ast::{self, ArithOp, BinaryOp},\n+    AstNode, TextRange,\n+};\n+\n+use crate::assist_context::{AssistContext, Assists};\n+\n+// Assist: replace_arith_with_checked\n+//\n+// Replaces arithmetic on integers with the `checked_*` equivalent.\n+//\n+// ```\n+// fn main() {\n+//   let x = 1 $0+ 2;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//   let x = 1.checked_add(2);\n+// }\n+// ```\n+pub(crate) fn replace_arith_with_checked(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    replace_arith(acc, ctx, ArithKind::Checked)\n+}\n+\n+// Assist: replace_arith_with_saturating\n+//\n+// Replaces arithmetic on integers with the `saturating_*` equivalent.\n+//\n+// ```\n+// fn main() {\n+//   let x = 1 $0+ 2;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//   let x = 1.saturating_add(2);\n+// }\n+// ```\n+pub(crate) fn replace_arith_with_saturating(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    replace_arith(acc, ctx, ArithKind::Saturating)\n+}\n+\n+// Assist: replace_arith_with_wrapping\n+//\n+// Replaces arithmetic on integers with the `wrapping_*` equivalent.\n+//\n+// ```\n+// fn main() {\n+//   let x = 1 $0+ 2;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//   let x = 1.wrapping_add(2);\n+// }\n+// ```\n+pub(crate) fn replace_arith_with_wrapping(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n+    replace_arith(acc, ctx, ArithKind::Wrapping)\n+}\n+\n+fn replace_arith(acc: &mut Assists, ctx: &AssistContext<'_>, kind: ArithKind) -> Option<()> {\n+    let (lhs, op, rhs) = parse_binary_op(ctx)?;\n+\n+    if !is_primitive_int(ctx, &lhs) || !is_primitive_int(ctx, &rhs) {\n+        return None;\n+    }\n+\n+    let start = lhs.syntax().text_range().start();\n+    let end = rhs.syntax().text_range().end();\n+    let range = TextRange::new(start, end);\n+\n+    acc.add_group(\n+        &GroupLabel(\"replace_arith\".into()),\n+        kind.assist_id(),\n+        kind.label(),\n+        range,\n+        |builder| {\n+            let method_name = kind.method_name(op);\n+\n+            builder.replace(range, format!(\"{lhs}.{method_name}({rhs})\"))\n+        },\n+    )\n+}\n+\n+fn is_primitive_int(ctx: &AssistContext<'_>, expr: &ast::Expr) -> bool {\n+    match ctx.sema.type_of_expr(expr) {\n+        Some(ty) => ty.adjusted().is_int_or_uint(),\n+        _ => false,\n+    }\n+}\n+\n+/// Extract the operands of an arithmetic expression (e.g. `1 + 2` or `1.checked_add(2)`)\n+fn parse_binary_op(ctx: &AssistContext<'_>) -> Option<(ast::Expr, ArithOp, ast::Expr)> {\n+    let expr = ctx.find_node_at_offset::<ast::BinExpr>()?;\n+\n+    let op = match expr.op_kind() {\n+        Some(BinaryOp::ArithOp(ArithOp::Add)) => ArithOp::Add,\n+        Some(BinaryOp::ArithOp(ArithOp::Sub)) => ArithOp::Sub,\n+        Some(BinaryOp::ArithOp(ArithOp::Mul)) => ArithOp::Mul,\n+        Some(BinaryOp::ArithOp(ArithOp::Div)) => ArithOp::Div,\n+        _ => return None,\n+    };\n+\n+    let lhs = expr.lhs()?;\n+    let rhs = expr.rhs()?;\n+\n+    Some((lhs, op, rhs))\n+}\n+\n+pub(crate) enum ArithKind {\n+    Saturating,\n+    Wrapping,\n+    Checked,\n+}\n+\n+impl ArithKind {\n+    fn assist_id(&self) -> AssistId {\n+        let s = match self {\n+            ArithKind::Saturating => \"replace_arith_with_saturating\",\n+            ArithKind::Checked => \"replace_arith_with_checked\",\n+            ArithKind::Wrapping => \"replace_arith_with_wrapping\",\n+        };\n+\n+        AssistId(s, AssistKind::RefactorRewrite)\n+    }\n+\n+    fn label(&self) -> &'static str {\n+        match self {\n+            ArithKind::Saturating => \"Replace arithmetic with call to saturating_*\",\n+            ArithKind::Checked => \"Replace arithmetic with call to checked_*\",\n+            ArithKind::Wrapping => \"Replace arithmetic with call to wrapping_*\",\n+        }\n+    }\n+\n+    fn method_name(&self, op: ArithOp) -> String {\n+        let prefix = match self {\n+            ArithKind::Checked => \"checked_\",\n+            ArithKind::Wrapping => \"wrapping_\",\n+            ArithKind::Saturating => \"saturating_\",\n+        };\n+\n+        let suffix = match op {\n+            ArithOp::Add => \"add\",\n+            ArithOp::Sub => \"sub\",\n+            ArithOp::Mul => \"mul\",\n+            ArithOp::Div => \"div\",\n+            _ => unreachable!(\"this function should only be called with +, -, / or *\"),\n+        };\n+        format!(\"{prefix}{suffix}\")\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn arith_kind_method_name() {\n+        assert_eq!(ArithKind::Saturating.method_name(ArithOp::Add), \"saturating_add\");\n+        assert_eq!(ArithKind::Checked.method_name(ArithOp::Sub), \"checked_sub\");\n+    }\n+\n+    #[test]\n+    fn replace_arith_with_checked_add() {\n+        check_assist(\n+            replace_arith_with_checked,\n+            r#\"\n+fn main() {\n+    let x = 1 $0+ 2;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = 1.checked_add(2);\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_arith_with_saturating_add() {\n+        check_assist(\n+            replace_arith_with_saturating,\n+            r#\"\n+fn main() {\n+    let x = 1 $0+ 2;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = 1.saturating_add(2);\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_arith_with_wrapping_add() {\n+        check_assist(\n+            replace_arith_with_wrapping,\n+            r#\"\n+fn main() {\n+    let x = 1 $0+ 2;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = 1.wrapping_add(2);\n+}\n+\"#,\n+        )\n+    }\n+}"}, {"sha": "06dd0efa2b1e7e985021cfa9b76e6f5bacda812f", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/814ff01620730f3406797d7aaf210e0bec8f2754/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814ff01620730f3406797d7aaf210e0bec8f2754/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=814ff01620730f3406797d7aaf210e0bec8f2754", "patch": "@@ -186,6 +186,7 @@ mod handlers {\n     mod replace_derive_with_manual_impl;\n     mod replace_if_let_with_match;\n     mod replace_or_with_or_else;\n+    mod replace_arith_op;\n     mod introduce_named_generic;\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n@@ -293,6 +294,9 @@ mod handlers {\n             replace_or_with_or_else::replace_or_with_or_else,\n             replace_turbofish_with_explicit_type::replace_turbofish_with_explicit_type,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n+            replace_arith_op::replace_arith_with_wrapping,\n+            replace_arith_op::replace_arith_with_checked,\n+            replace_arith_op::replace_arith_with_saturating,\n             sort_items::sort_items,\n             split_import::split_import,\n             toggle_ignore::toggle_ignore,"}, {"sha": "6b340c79c89b8d8a168685b7fc8f0cec69c8c237", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/814ff01620730f3406797d7aaf210e0bec8f2754/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/814ff01620730f3406797d7aaf210e0bec8f2754/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=814ff01620730f3406797d7aaf210e0bec8f2754", "patch": "@@ -2066,6 +2066,57 @@ impl Foo for Bar {\n     )\n }\n \n+#[test]\n+fn doctest_replace_arith_with_checked() {\n+    check_doc_test(\n+        \"replace_arith_with_checked\",\n+        r#####\"\n+fn main() {\n+  let x = 1 $0+ 2;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+  let x = 1.checked_add(2);\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_replace_arith_with_saturating() {\n+    check_doc_test(\n+        \"replace_arith_with_saturating\",\n+        r#####\"\n+fn main() {\n+  let x = 1 $0+ 2;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+  let x = 1.saturating_add(2);\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_replace_arith_with_wrapping() {\n+    check_doc_test(\n+        \"replace_arith_with_wrapping\",\n+        r#####\"\n+fn main() {\n+  let x = 1 $0+ 2;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+  let x = 1.wrapping_add(2);\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_char_with_string() {\n     check_doc_test("}]}