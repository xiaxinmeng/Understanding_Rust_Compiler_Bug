{"sha": "2ce7019b8791b11283495493e1db45735480d9b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZTcwMTliODc5MWIxMTI4MzQ5NTQ5M2UxZGI0NTczNTQ4MGQ5YjI=", "commit": {"author": {"name": "Arcterus", "email": "Arcterus@mail.com", "date": "2014-02-05T00:15:03Z"}, "committer": {"name": "Arcterus", "email": "Arcterus@mail.com", "date": "2014-02-06T18:04:26Z"}, "message": "getopts: unify tests", "tree": {"sha": "55e9de167f1ff5ea95774690331353979c97ef6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55e9de167f1ff5ea95774690331353979c97ef6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ce7019b8791b11283495493e1db45735480d9b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce7019b8791b11283495493e1db45735480d9b2", "html_url": "https://github.com/rust-lang/rust/commit/2ce7019b8791b11283495493e1db45735480d9b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ce7019b8791b11283495493e1db45735480d9b2/comments", "author": {"login": "Arcterus", "id": 829813, "node_id": "MDQ6VXNlcjgyOTgxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/829813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arcterus", "html_url": "https://github.com/Arcterus", "followers_url": "https://api.github.com/users/Arcterus/followers", "following_url": "https://api.github.com/users/Arcterus/following{/other_user}", "gists_url": "https://api.github.com/users/Arcterus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arcterus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arcterus/subscriptions", "organizations_url": "https://api.github.com/users/Arcterus/orgs", "repos_url": "https://api.github.com/users/Arcterus/repos", "events_url": "https://api.github.com/users/Arcterus/events{/privacy}", "received_events_url": "https://api.github.com/users/Arcterus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Arcterus", "id": 829813, "node_id": "MDQ6VXNlcjgyOTgxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/829813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arcterus", "html_url": "https://github.com/Arcterus", "followers_url": "https://api.github.com/users/Arcterus/followers", "following_url": "https://api.github.com/users/Arcterus/following{/other_user}", "gists_url": "https://api.github.com/users/Arcterus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arcterus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arcterus/subscriptions", "organizations_url": "https://api.github.com/users/Arcterus/orgs", "repos_url": "https://api.github.com/users/Arcterus/repos", "events_url": "https://api.github.com/users/Arcterus/events{/privacy}", "received_events_url": "https://api.github.com/users/Arcterus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09ca940e540e2ef77a9b4bf1f9807276b300f3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c09ca940e540e2ef77a9b4bf1f9807276b300f3d", "html_url": "https://github.com/rust-lang/rust/commit/c09ca940e540e2ef77a9b4bf1f9807276b300f3d"}], "stats": {"total": 514, "additions": 150, "deletions": 364}, "files": [{"sha": "4af0fa162336100dcb48595e57c7124c112fd4f0", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce7019b8791b11283495493e1db45735480d9b2/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce7019b8791b11283495493e1db45735480d9b2/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=2ce7019b8791b11283495493e1db45735480d9b2", "patch": "@@ -15,9 +15,9 @@\n // simplest interface possible for representing and running tests\n // while providing a base that other test frameworks may build off of.\n \n+extern mod getopts;\n extern mod term;\n \n-use getopts;\n use json::ToJson;\n use json;\n use serialize::Decodable;"}, {"sha": "75578caa966d1d5c4c6db8839514353bfc12dd86", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 148, "deletions": 362, "changes": 510, "blob_url": "https://github.com/rust-lang/rust/blob/2ce7019b8791b11283495493e1db45735480d9b2/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce7019b8791b11283495493e1db45735480d9b2/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=2ce7019b8791b11283495493e1db45735480d9b2", "patch": "@@ -818,6 +818,22 @@ fn each_split_within<'a>(ss: &'a str, lim: uint, it: |&'a str| -> bool)\n     return cont;\n }\n \n+#[test]\n+fn test_split_within() {\n+    fn t(s: &str, i: uint, u: &[~str]) {\n+        let mut v = ~[];\n+        each_split_within(s, i, |s| { v.push(s.to_owned()); true });\n+        assert!(v.iter().zip(u.iter()).all(|(a,b)| a == b));\n+    }\n+    t(\"\", 0, []);\n+    t(\"\", 15, []);\n+    t(\"hello\", 15, [~\"hello\"]);\n+    t(\"\\nMary had a little lamb\\nLittle lamb\\n\", 15,\n+        [~\"Mary had a\", ~\"little lamb\", ~\"Little lamb\"]);\n+    t(\"\\nMary had a little lamb\\nLittle lamb\\n\", ::std::uint::MAX,\n+        [~\"Mary had a little lamb\\nLittle lamb\"]);\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -835,86 +851,35 @@ mod tests {\n         }\n     }\n \n-    #[test]\n-    fn test_split_within() {\n-        fn t(s: &str, i: uint, u: &[~str]) {\n-            let mut v = ~[];\n-            each_split_within(s, i, |s| { v.push(s.to_owned()); true });\n-            assert!(v.iter().zip(u.iter()).all(|(a,b)| a == b));\n-        }\n-        t(\"\", 0, []);\n-        t(\"\", 15, []);\n-        t(\"hello\", 15, [~\"hello\"]);\n-        t(\"\\nMary had a little lamb\\nLittle lamb\\n\", 15,\n-            [~\"Mary had a\", ~\"little lamb\", ~\"Little lamb\"]);\n-        t(\"\\nMary had a little lamb\\nLittle lamb\\n\", ::std::uint::MAX,\n-            [~\"Mary had a little lamb\\nLittle lamb\"]);\n-    }\n-\n     // Tests for reqopt\n     #[test]\n-    fn test_reqopt_long() {\n-        let args = ~[~\"--test=20\"];\n+    fn test_reqopt() {\n+        let long_args = ~[~\"--test=20\"];\n         let opts = ~[reqopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n+        let rs = getopts(long_args, opts);\n         match rs {\n           Ok(ref m) => {\n             assert!(m.opt_present(\"test\"));\n             assert_eq!(m.opt_str(\"test\").unwrap(), ~\"20\");\n+            assert!(m.opt_present(\"t\"));\n+            assert_eq!(m.opt_str(\"t\").unwrap(), ~\"20\");\n           }\n-          _ => { fail!(\"test_reqopt_long failed\"); }\n-        }\n-    }\n-\n-    #[test]\n-    fn test_reqopt_long_missing() {\n-        let args = ~[~\"blah\"];\n-        let opts = ~[reqopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n-          Err(f) => check_fail_type(f, OptionMissing_),\n-          _ => fail!()\n+          _ => { fail!(\"test_reqopt failed (long arg)\"); }\n         }\n-    }\n-\n-    #[test]\n-    fn test_reqopt_long_no_arg() {\n-        let args = ~[~\"--test\"];\n-        let opts = ~[reqopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n-          Err(f) => check_fail_type(f, ArgumentMissing_),\n-          _ => fail!()\n-        }\n-    }\n-\n-    #[test]\n-    fn test_reqopt_long_multi() {\n-        let args = ~[~\"--test=20\", ~\"--test=30\"];\n-        let opts = ~[reqopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n-          Err(f) => check_fail_type(f, OptionDuplicated_),\n-          _ => fail!()\n-        }\n-    }\n-\n-    #[test]\n-    fn test_reqopt_short() {\n-        let args = ~[~\"-t\", ~\"20\"];\n-        let opts = ~[reqopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n+        let short_args = ~[~\"-t\", ~\"20\"];\n+        match getopts(short_args, opts) {\n           Ok(ref m) => {\n-            assert!(m.opt_present(\"t\"));\n+            assert!((m.opt_present(\"test\")));\n+            assert_eq!(m.opt_str(\"test\").unwrap(), ~\"20\");\n+            assert!((m.opt_present(\"t\")));\n             assert_eq!(m.opt_str(\"t\").unwrap(), ~\"20\");\n           }\n-          _ => fail!()\n+          _ => { fail!(\"test_reqopt failed (short arg)\"); }\n         }\n     }\n \n     #[test]\n-    fn test_reqopt_short_missing() {\n+    fn test_reqopt_missing() {\n         let args = ~[~\"blah\"];\n         let opts = ~[reqopt(\"t\", \"test\", \"testing\", \"TEST\")];\n         let rs = getopts(args, opts);\n@@ -925,19 +890,24 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_reqopt_short_no_arg() {\n-        let args = ~[~\"-t\"];\n+    fn test_reqopt_no_arg() {\n+        let long_args = ~[~\"--test\"];\n         let opts = ~[reqopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n+        let rs = getopts(long_args, opts);\n         match rs {\n           Err(f) => check_fail_type(f, ArgumentMissing_),\n           _ => fail!()\n         }\n+        let short_args = ~[~\"-t\"];\n+        match getopts(short_args, opts) {\n+          Err(f) => check_fail_type(f, ArgumentMissing_),\n+          _ => fail!()\n+        }\n     }\n \n     #[test]\n-    fn test_reqopt_short_multi() {\n-        let args = ~[~\"-t\", ~\"20\", ~\"-t\", ~\"30\"];\n+    fn test_reqopt_multi() {\n+        let args = ~[~\"--test=20\", ~\"-t\", ~\"30\"];\n         let opts = ~[reqopt(\"t\", \"test\", \"testing\", \"TEST\")];\n         let rs = getopts(args, opts);\n         match rs {\n@@ -946,62 +916,26 @@ mod tests {\n         }\n     }\n \n-\n     // Tests for optopt\n     #[test]\n-    fn test_optopt_long() {\n-        let args = ~[~\"--test=20\"];\n+    fn test_optopt() {\n+        let long_args = ~[~\"--test=20\"];\n         let opts = ~[optopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n+        let rs = getopts(long_args, opts);\n         match rs {\n           Ok(ref m) => {\n             assert!(m.opt_present(\"test\"));\n             assert_eq!(m.opt_str(\"test\").unwrap(), ~\"20\");\n+            assert!((m.opt_present(\"t\")));\n+            assert_eq!(m.opt_str(\"t\").unwrap(), ~\"20\");\n           }\n           _ => fail!()\n         }\n-    }\n-\n-    #[test]\n-    fn test_optopt_long_missing() {\n-        let args = ~[~\"blah\"];\n-        let opts = ~[optopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n-          Ok(ref m) => assert!(!m.opt_present(\"test\")),\n-          _ => fail!()\n-        }\n-    }\n-\n-    #[test]\n-    fn test_optopt_long_no_arg() {\n-        let args = ~[~\"--test\"];\n-        let opts = ~[optopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n-          Err(f) => check_fail_type(f, ArgumentMissing_),\n-          _ => fail!()\n-        }\n-    }\n-\n-    #[test]\n-    fn test_optopt_long_multi() {\n-        let args = ~[~\"--test=20\", ~\"--test=30\"];\n-        let opts = ~[optopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n-          Err(f) => check_fail_type(f, OptionDuplicated_),\n-          _ => fail!()\n-        }\n-    }\n-\n-    #[test]\n-    fn test_optopt_short() {\n-        let args = ~[~\"-t\", ~\"20\"];\n-        let opts = ~[optopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n+        let short_args = ~[~\"-t\", ~\"20\"];\n+        match getopts(short_args, opts) {\n           Ok(ref m) => {\n+            assert!((m.opt_present(\"test\")));\n+            assert_eq!(m.opt_str(\"test\").unwrap(), ~\"20\");\n             assert!((m.opt_present(\"t\")));\n             assert_eq!(m.opt_str(\"t\").unwrap(), ~\"20\");\n           }\n@@ -1010,30 +944,38 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_optopt_short_missing() {\n+    fn test_optopt_missing() {\n         let args = ~[~\"blah\"];\n         let opts = ~[optopt(\"t\", \"test\", \"testing\", \"TEST\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(ref m) => assert!(!m.opt_present(\"t\")),\n+          Ok(ref m) => {\n+            assert!(!m.opt_present(\"test\"));\n+            assert!(!m.opt_present(\"t\"));\n+          }\n           _ => fail!()\n         }\n     }\n \n     #[test]\n-    fn test_optopt_short_no_arg() {\n-        let args = ~[~\"-t\"];\n+    fn test_optopt_no_arg() {\n+        let long_args = ~[~\"--test\"];\n         let opts = ~[optopt(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n+        let rs = getopts(long_args, opts);\n         match rs {\n           Err(f) => check_fail_type(f, ArgumentMissing_),\n           _ => fail!()\n         }\n+        let short_args = ~[~\"-t\"];\n+        match getopts(short_args, opts) {\n+          Err(f) => check_fail_type(f, ArgumentMissing_),\n+          _ => fail!()\n+        }\n     }\n \n     #[test]\n-    fn test_optopt_short_multi() {\n-        let args = ~[~\"-t\", ~\"20\", ~\"-t\", ~\"30\"];\n+    fn test_optopt_multi() {\n+        let args = ~[~\"--test=20\", ~\"-t\", ~\"30\"];\n         let opts = ~[optopt(\"t\", \"test\", \"testing\", \"TEST\")];\n         let rs = getopts(args, opts);\n         match rs {\n@@ -1042,34 +984,47 @@ mod tests {\n         }\n     }\n \n-\n     // Tests for optflag\n     #[test]\n-    fn test_optflag_long() {\n-        let args = ~[~\"--test\"];\n-        let opts = ~[optflag(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n+    fn test_optflag() {\n+        let long_args = ~[~\"--test\"];\n+        let opts = ~[optflag(\"t\", \"test\", \"testing\")];\n+        let rs = getopts(long_args, opts);\n         match rs {\n-          Ok(ref m) => assert!(m.opt_present(\"test\")),\n+          Ok(ref m) => {\n+            assert!(m.opt_present(\"test\"));\n+            assert!(m.opt_present(\"t\"));\n+          }\n+          _ => fail!()\n+        }\n+        let short_args = ~[~\"-t\"];\n+        match getopts(short_args, opts) {\n+          Ok(ref m) => {\n+            assert!(m.opt_present(\"test\"));\n+            assert!(m.opt_present(\"t\"));\n+          }\n           _ => fail!()\n         }\n     }\n \n     #[test]\n-    fn test_optflag_long_missing() {\n+    fn test_optflag_missing() {\n         let args = ~[~\"blah\"];\n-        let opts = ~[optflag(\"t\", \"test\", \"testing\", \"TEST\")];\n+        let opts = ~[optflag(\"t\", \"test\", \"testing\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(ref m) => assert!(!m.opt_present(\"test\")),\n+          Ok(ref m) => {\n+            assert!(!m.opt_present(\"test\"));\n+            assert!(!m.opt_present(\"t\"));\n+          }\n           _ => fail!()\n         }\n     }\n \n     #[test]\n     fn test_optflag_long_arg() {\n         let args = ~[~\"--test=20\"];\n-        let opts = ~[optflag(\"t\", \"test\", \"testing\", \"TEST\")];\n+        let opts = ~[optflag(\"t\", \"test\", \"testing\")];\n         let rs = getopts(args, opts);\n         match rs {\n           Err(f) => {\n@@ -1081,42 +1036,20 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_optflag_long_multi() {\n-        let args = ~[~\"--test\", ~\"--test\"];\n-        let opts = ~[optflag(\"t\", \"test\", \"testing\", \"TEST\")];\n+    fn test_optflag_multi() {\n+        let args = ~[~\"--test\", ~\"-t\"];\n+        let opts = ~[optflag(\"t\", \"test\", \"testing\")];\n         let rs = getopts(args, opts);\n         match rs {\n           Err(f) => check_fail_type(f, OptionDuplicated_),\n           _ => fail!()\n         }\n     }\n \n-    #[test]\n-    fn test_optflag_short() {\n-        let args = ~[~\"-t\"];\n-        let opts = ~[optflag(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n-          Ok(ref m) => assert!(m.opt_present(\"t\")),\n-          _ => fail!()\n-        }\n-    }\n-\n-    #[test]\n-    fn test_optflag_short_missing() {\n-        let args = ~[~\"blah\"];\n-        let opts = ~[optflag(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n-          Ok(ref m) => assert!(!m.opt_present(\"t\")),\n-          _ => fail!()\n-        }\n-    }\n-\n     #[test]\n     fn test_optflag_short_arg() {\n         let args = ~[~\"-t\", ~\"20\"];\n-        let opts = ~[optflag(\"t\", \"test\", \"testing\", \"TEST\")];\n+        let opts = ~[optflag(\"t\", \"test\", \"testing\")];\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => {\n@@ -1128,22 +1061,11 @@ mod tests {\n         }\n     }\n \n-    #[test]\n-    fn test_optflag_short_multi() {\n-        let args = ~[~\"-t\", ~\"-t\"];\n-        let opts = ~[optflag(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n-          Err(f) => check_fail_type(f, OptionDuplicated_),\n-          _ => fail!()\n-        }\n-    }\n-\n     // Tests for optflagmulti\n     #[test]\n     fn test_optflagmulti_short1() {\n         let args = ~[~\"-v\"];\n-        let opts = ~[optflagmulti(\"v\", \"verbose\", \"verbosity\", \"VERBOSITY\")];\n+        let opts = ~[optflagmulti(\"v\", \"verbose\", \"verbosity\")];\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => {\n@@ -1156,7 +1078,7 @@ mod tests {\n     #[test]\n     fn test_optflagmulti_short2a() {\n         let args = ~[~\"-v\", ~\"-v\"];\n-        let opts = ~[optflagmulti(\"v\", \"verbose\", \"verbosity\", \"VERBOSITY\")];\n+        let opts = ~[optflagmulti(\"v\", \"verbose\", \"verbosity\")];\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => {\n@@ -1169,7 +1091,7 @@ mod tests {\n     #[test]\n     fn test_optflagmulti_short2b() {\n         let args = ~[~\"-vv\"];\n-        let opts = ~[optflagmulti(\"v\", \"verbose\", \"verbosity\", \"VERBOSITY\")];\n+        let opts = ~[optflagmulti(\"v\", \"verbose\", \"verbosity\")];\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => {\n@@ -1182,7 +1104,7 @@ mod tests {\n     #[test]\n     fn test_optflagmulti_long1() {\n         let args = ~[~\"--verbose\"];\n-        let opts = ~[optflagmulti(\"v\", \"verbose\", \"verbosity\", \"VERBOSITY\")];\n+        let opts = ~[optflagmulti(\"v\", \"verbose\", \"verbosity\")];\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => {\n@@ -1195,7 +1117,7 @@ mod tests {\n     #[test]\n     fn test_optflagmulti_long2() {\n         let args = ~[~\"--verbose\", ~\"--verbose\"];\n-        let opts = ~[optflagmulti(\"v\", \"verbose\", \"verbosity\", \"VERBOSITY\")];\n+        let opts = ~[optflagmulti(\"v\", \"verbose\", \"verbosity\")];\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => {\n@@ -1205,67 +1127,40 @@ mod tests {\n         }\n     }\n \n-    // Tests for optmulti\n     #[test]\n-    fn test_optmulti_long() {\n-        let args = ~[~\"--test=20\"];\n-        let opts = ~[optmulti(\"t\", \"test\", \"testing\", \"TEST\")];\n+    fn test_optflagmulti_mix() {\n+        let args = ~[~\"--verbose\", ~\"-v\", ~\"-vv\", ~\"verbose\"];\n+        let opts = ~[optflagmulti(\"v\", \"verbose\", \"verbosity\")];\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => {\n-            assert!((m.opt_present(\"test\")));\n-            assert_eq!(m.opt_str(\"test\").unwrap(), ~\"20\");\n+            assert_eq!(m.opt_count(\"verbose\"), 4);\n+            assert_eq!(m.opt_count(\"v\"), 4);\n           }\n           _ => fail!()\n         }\n     }\n \n+    // Tests for optmulti\n     #[test]\n-    fn test_optmulti_long_missing() {\n-        let args = ~[~\"blah\"];\n-        let opts = ~[optmulti(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n-          Ok(ref m) => assert!(!m.opt_present(\"test\")),\n-          _ => fail!()\n-        }\n-    }\n-\n-    #[test]\n-    fn test_optmulti_long_no_arg() {\n-        let args = ~[~\"--test\"];\n-        let opts = ~[optmulti(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n-          Err(f) => check_fail_type(f, ArgumentMissing_),\n-          _ => fail!()\n-        }\n-    }\n-\n-    #[test]\n-    fn test_optmulti_long_multi() {\n-        let args = ~[~\"--test=20\", ~\"--test=30\"];\n+    fn test_optmulti() {\n+        let long_args = ~[~\"--test=20\"];\n         let opts = ~[optmulti(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n+        let rs = getopts(long_args, opts);\n         match rs {\n           Ok(ref m) => {\n-              assert!(m.opt_present(\"test\"));\n-              assert_eq!(m.opt_str(\"test\").unwrap(), ~\"20\");\n-              let pair = m.opt_strs(\"test\");\n-              assert!(pair[0] == ~\"20\");\n-              assert!(pair[1] == ~\"30\");\n+            assert!((m.opt_present(\"test\")));\n+            assert_eq!(m.opt_str(\"test\").unwrap(), ~\"20\");\n+            assert!((m.opt_present(\"t\")));\n+            assert_eq!(m.opt_str(\"t\").unwrap(), ~\"20\");\n           }\n           _ => fail!()\n         }\n-    }\n-\n-    #[test]\n-    fn test_optmulti_short() {\n-        let args = ~[~\"-t\", ~\"20\"];\n-        let opts = ~[optmulti(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n+        let short_args = ~[~\"-t\", ~\"20\"];\n+        match getopts(short_args, opts) {\n           Ok(ref m) => {\n+            assert!((m.opt_present(\"test\")));\n+            assert_eq!(m.opt_str(\"test\").unwrap(), ~\"20\");\n             assert!((m.opt_present(\"t\")));\n             assert_eq!(m.opt_str(\"t\").unwrap(), ~\"20\");\n           }\n@@ -1274,61 +1169,65 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_optmulti_short_missing() {\n+    fn test_optmulti_missing() {\n         let args = ~[~\"blah\"];\n         let opts = ~[optmulti(\"t\", \"test\", \"testing\", \"TEST\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(ref m) => assert!(!m.opt_present(\"t\")),\n+          Ok(ref m) => {\n+            assert!(!m.opt_present(\"test\"));\n+            assert!(!m.opt_present(\"t\"));\n+          }\n           _ => fail!()\n         }\n     }\n \n     #[test]\n-    fn test_optmulti_short_no_arg() {\n-        let args = ~[~\"-t\"];\n+    fn test_optmulti_no_arg() {\n+        let long_args = ~[~\"--test\"];\n         let opts = ~[optmulti(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n+        let rs = getopts(long_args, opts);\n         match rs {\n           Err(f) => check_fail_type(f, ArgumentMissing_),\n           _ => fail!()\n         }\n+        let short_args = ~[~\"-t\"];\n+        match getopts(short_args, opts) {\n+          Err(f) => check_fail_type(f, ArgumentMissing_),\n+          _ => fail!()\n+        }\n     }\n \n     #[test]\n-    fn test_optmulti_short_multi() {\n-        let args = ~[~\"-t\", ~\"20\", ~\"-t\", ~\"30\"];\n+    fn test_optmulti_multi() {\n+        let args = ~[~\"--test=20\", ~\"-t\", ~\"30\"];\n         let opts = ~[optmulti(\"t\", \"test\", \"testing\", \"TEST\")];\n         let rs = getopts(args, opts);\n         match rs {\n           Ok(ref m) => {\n-            assert!((m.opt_present(\"t\")));\n-            assert_eq!(m.opt_str(\"t\").unwrap(), ~\"20\");\n-            let pair = m.opt_strs(\"t\");\n-            assert!(pair[0] == ~\"20\");\n-            assert!(pair[1] == ~\"30\");\n+              assert!(m.opt_present(\"test\"));\n+              assert_eq!(m.opt_str(\"test\").unwrap(), ~\"20\");\n+              assert!(m.opt_present(\"t\"));\n+              assert_eq!(m.opt_str(\"t\").unwrap(), ~\"20\");\n+              let pair = m.opt_strs(\"test\");\n+              assert!(pair[0] == ~\"20\");\n+              assert!(pair[1] == ~\"30\");\n           }\n           _ => fail!()\n         }\n     }\n \n     #[test]\n-    fn test_unrecognized_option_long() {\n-        let args = ~[~\"--untest\"];\n+    fn test_unrecognized_option() {\n+        let long_args = ~[~\"--untest\"];\n         let opts = ~[optmulti(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n+        let rs = getopts(long_args, opts);\n         match rs {\n           Err(f) => check_fail_type(f, UnrecognizedOption_),\n           _ => fail!()\n         }\n-    }\n-\n-    #[test]\n-    fn test_unrecognized_option_short() {\n-        let args = ~[~\"-t\"];\n-        let opts = ~[optmulti(\"t\", \"test\", \"testing\", \"TEST\")];\n-        let rs = getopts(args, opts);\n-        match rs {\n+        let short_args = ~[~\"-u\"];\n+        match getopts(short_args, opts) {\n           Err(f) => check_fail_type(f, UnrecognizedOption_),\n           _ => fail!()\n         }\n@@ -1342,9 +1241,9 @@ mod tests {\n               ~\"-m\", ~\"50\", ~\"-n\", ~\"-A B\", ~\"-n\", ~\"-60 70\"];\n         let opts =\n             ~[optopt(\"s\", \"something\", \"something\", \"SOMETHING\"),\n-              optflag(\"\", \"flag\", \"a flag\", \"FLAG\"),\n+              optflag(\"\", \"flag\", \"a flag\"),\n               reqopt(\"\", \"long\", \"hi\", \"LONG\"),\n-              optflag(\"f\", \"\", \"another flag\", \"FLAG\"),\n+              optflag(\"f\", \"\", \"another flag\"),\n               optmulti(\"m\", \"\", \"mmmmmm\", \"YUM\"),\n               optmulti(\"n\", \"\", \"nothing\", \"NOTHING\"),\n               optopt(\"\", \"notpresent\", \"nothing to see here\", \"NOPE\")];\n@@ -1428,67 +1327,12 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_groups_reqopt() {\n-        let opt = reqopt(\"b\", \"banana\", \"some bananas\", \"VAL\");\n-        assert!(opt == OptGroup { short_name: ~\"b\",\n-                        long_name: ~\"banana\",\n-                        hint: ~\"VAL\",\n-                        desc: ~\"some bananas\",\n-                        hasarg: Yes,\n-                        occur: Req })\n-    }\n-\n-    #[test]\n-    fn test_groups_optopt() {\n-        let opt = optopt(\"a\", \"apple\", \"some apples\", \"VAL\");\n-        assert!(opt == OptGroup { short_name: ~\"a\",\n-                        long_name: ~\"apple\",\n-                        hint: ~\"VAL\",\n-                        desc: ~\"some apples\",\n-                        hasarg: Yes,\n-                        occur: Optional })\n-    }\n-\n-    #[test]\n-    fn test_groups_optflag() {\n-        let opt = optflag(\"k\", \"kiwi\", \"some kiwis\");\n-        assert!(opt == OptGroup { short_name: ~\"k\",\n-                        long_name: ~\"kiwi\",\n-                        hint: ~\"\",\n-                        desc: ~\"some kiwis\",\n-                        hasarg: No,\n-                        occur: Optional })\n-    }\n-\n-    #[test]\n-    fn test_groups_optflagopt() {\n-        let opt = optflagopt(\"p\", \"pineapple\", \"some pineapples\", \"VAL\");\n-        assert!(opt == OptGroup { short_name: ~\"p\",\n-                        long_name: ~\"pineapple\",\n-                        hint: ~\"VAL\",\n-                        desc: ~\"some pineapples\",\n-                        hasarg: Maybe,\n-                        occur: Optional })\n-    }\n-\n-    #[test]\n-    fn test_groups_optmulti() {\n-        let opt = optmulti(\"l\", \"lime\", \"some limes\", \"VAL\");\n-        assert!(opt == OptGroup { short_name: ~\"l\",\n-                        long_name: ~\"lime\",\n-                        hint: ~\"VAL\",\n-                        desc: ~\"some limes\",\n-                        hasarg: Yes,\n-                        occur: Multi })\n-    }\n-\n-    #[test]\n-    fn test_groups_long_to_short() {\n-        let mut short = Opt { name: ~\"banana\",\n+    fn test_long_to_short() {\n+        let mut short = Opt { name: Long(~\"banana\"),\n                               hasarg: Yes,\n                               occur: Req,\n                               aliases: ~[] };\n-        short.aliases = ~[Opt { name: ~\"b\",\n+        short.aliases = ~[Opt { name: Short('b'),\n                                 hasarg: Yes,\n                                 occur: Req,\n                                 aliases: ~[] }];\n@@ -1498,65 +1342,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_groups_getopts() {\n-        let mut banana = Opt { name: ~\"banana\",\n-                               hasarg: Yes,\n-                               occur: Req,\n-                               aliases: ~[] };\n-        banana.aliases = ~[Opt { name: ~\"b\",\n-                                 hasarg: Yes,\n-                                 occur: Req,\n-                                 aliases: ~[] }];\n-        let mut apple = Opt { name: ~\"apple\",\n-                              hasarg: Yes,\n-                              occur: Optional,\n-                              aliases: ~[] };\n-        apple.aliases = ~[Opt { name: ~\"a\",\n-                                hasarg: Yes,\n-                                occur: Optional,\n-                                aliases: ~[] }];\n-        let mut kiwi = Opt { name: ~\"kiwi\",\n-                             hasarg: No,\n-                             occur: Optional,\n-                             aliases: ~[] };\n-        kiwi.aliases = ~[Opt { name: ~\"k\",\n-                               hasarg: No,\n-                               occur: Optional,\n-                               aliases: ~[] }];\n-        let short = ~[\n-            banana,\n-            apple,\n-            kiwi,\n-            Opt { name: ~\"p\",\n-                  hasarg: Maybe,\n-                  occur: Optional,\n-                  aliases: ~[] },\n-            Opt { name: ~\"l\",\n-                  hasarg: Yes,\n-                  occur: Multi,\n-                  aliases: ~[] }\n-        ];\n-\n-        // short and verbose should always be in the same order. if they\n-        // aren't the test will fail (and in mysterious ways)\n-\n-        let verbose = ~[\n-            reqopt(\"b\", \"banana\", \"Desc\", \"VAL\"),\n-            optopt(\"a\", \"apple\", \"Desc\", \"VAL\"),\n-            optflag(\"k\", \"kiwi\", \"Desc\"),\n-            optflagopt(\"p\", \"\", \"Desc\", \"VAL\"),\n-            optmulti(\"l\", \"\", \"Desc\", \"VAL\"),\n-        ];\n-\n-        let sample_args = ~[~\"--kiwi\", ~\"15\", ~\"--apple\", ~\"1\", ~\"k\",\n-                            ~\"-p\", ~\"16\", ~\"l\", ~\"35\"];\n-\n-        assert!(getopts(sample_args, short)\n-            == getopts(sample_args, verbose));\n-    }\n-\n-    #[test]\n-    fn test_groups_aliases_long_and_short() {\n+    fn test_aliases_long_and_short() {\n         let opts = ~[\n             optflagmulti(\"a\", \"apple\", \"Desc\"),\n         ];\n@@ -1569,7 +1355,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_groups_usage() {\n+    fn test_usage() {\n         let optgroups = ~[\n             reqopt(\"b\", \"banana\", \"Desc\", \"VAL\"),\n             optopt(\"a\", \"012345678901234567890123456789\",\n@@ -1599,7 +1385,7 @@ Options:\n     }\n \n     #[test]\n-    fn test_groups_usage_description_wrapping() {\n+    fn test_usage_description_wrapping() {\n         // indentation should be 24 spaces\n         // lines wrap after 78: or rather descriptions wrap after 54\n \n@@ -1627,7 +1413,7 @@ Options:\n     }\n \n     #[test]\n-    fn test_groups_usage_description_multibyte_handling() {\n+    fn test_usage_description_multibyte_handling() {\n         let optgroups = ~[\n             optflag(\"k\", \"k\\u2013w\\u2013\",\n                 \"The word kiwi is normally spelled with two i's\"),"}, {"sha": "86a2043527e21b06f2a59830c01df7d89ba2fb0d", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce7019b8791b11283495493e1db45735480d9b2/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce7019b8791b11283495493e1db45735480d9b2/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=2ce7019b8791b11283495493e1db45735480d9b2", "patch": "@@ -53,7 +53,7 @@ struct Config {\n }\n \n fn parse_opts(argv: ~[~str]) -> Config {\n-    let opts = ~[getopts::optflag(\"stress\")];\n+    let opts = ~[getopts::optflag(\"\", \"stress\", \"\")];\n \n     let opt_args = argv.slice(1, argv.len());\n "}]}