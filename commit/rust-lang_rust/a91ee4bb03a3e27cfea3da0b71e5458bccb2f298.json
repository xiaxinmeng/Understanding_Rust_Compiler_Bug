{"sha": "a91ee4bb03a3e27cfea3da0b71e5458bccb2f298", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MWVlNGJiMDNhM2UyN2NmZWEzZGEwYjcxZTU0NThiY2NiMmYyOTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-20T06:39:18Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:20:45Z"}, "message": "validate boxes", "tree": {"sha": "8709ea5a6e3392eb76c54363342dd66ac6207293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8709ea5a6e3392eb76c54363342dd66ac6207293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a91ee4bb03a3e27cfea3da0b71e5458bccb2f298", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll2/10ACgkQpp+NIls6\n19nZrhAApm0ZZDCPdo+Is1op2hDZMDdNXGn8QMZiTM47hsxilFFrVK1fXF31E4jh\n9Hy0zqzw3rwwPAfvL5dJMKr5A3aZQcmeVZ7Q1h7K1Am5Y3O51ajqxgIErzx5weVG\nKwcOwXbp0XsrU1kf0VspQXHITudlgu9qCzOuoJyiU+7sxLOFRybg4ZPKb5wxkQjz\n4OLYcl2xkcbRojKVPYQKR9SKZfHrUgpqC0DuBX2FhYb7k7BeRejWp18leDK0ntUk\nG1aKO/yMmGw8fO2DpZ/hzN/Ogj0gD4sZ7t0f9hUshlVA1+gDrtTuW9uTUU4XQuIj\nbb5Cc0M+RjxiUByuGqsdRX0trJqmJXWEAEfMAqMMIU0Zayyiz+OkHkrU37dSizmV\nR3/DaMCwEBXLjMASRSdHxdbq+QcpcITUzpPM3XOn5zC/Rqb7q5FzzJod/ND2KqZ6\nUnuOlpKNgzs87E93JzFut146gAvQQuNPDpYspJB7ssOt2SOrlePLkhQVLcAJEj1S\nBAXeC6SM3PX+0K8/EicPFpoNqgfJhs45jCg38COB/m7G8afj6BfZPLrb2t7iBLsD\nwYNVqgcU9pGEZjslgxWhAJVIWa7uQYCzRX0WgpM61ugNjxYadGJRYa+jvJus6cZH\nAygtKRuVuVAywXzZyHndPEkYA79vS/QoayugrY6VOzTj81Nk0sU=\n=zJ2+\n-----END PGP SIGNATURE-----", "payload": "tree 8709ea5a6e3392eb76c54363342dd66ac6207293\nparent 22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441\nauthor Ralf Jung <post@ralfj.de> 1497940758 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500970845 +0200\n\nvalidate boxes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a91ee4bb03a3e27cfea3da0b71e5458bccb2f298", "html_url": "https://github.com/rust-lang/rust/commit/a91ee4bb03a3e27cfea3da0b71e5458bccb2f298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a91ee4bb03a3e27cfea3da0b71e5458bccb2f298/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441", "html_url": "https://github.com/rust-lang/rust/commit/22f43e2d2b2cdd5e6e6d771a01542a0e5afc6441"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "6693b89baaee9af27147926a49681cd88f70b044", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a91ee4bb03a3e27cfea3da0b71e5458bccb2f298/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a91ee4bb03a3e27cfea3da0b71e5458bccb2f298/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=a91ee4bb03a3e27cfea3da0b71e5458bccb2f298", "patch": "@@ -2,6 +2,7 @@ use rustc::hir::Mutability as TyMutability;\n use rustc::mir;\n use rustc::ty::layout::{Size, Align};\n use rustc::ty::{self, Ty};\n+use rustc::middle::region::CodeExtent;\n use rustc_data_structures::indexed_vec::Idx;\n use syntax::ast::Mutability;\n \n@@ -469,7 +470,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n // Validity checks\n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n-    fn variant_check_valid(\n+    fn validate_variant(\n         &mut self,\n         lvalue: Lvalue<'tcx>,\n         ty: Ty<'tcx>,\n@@ -486,6 +487,20 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n+    fn validate_ptr(&mut self, val: Value, region: Option<CodeExtent>, pointee_ty: Ty<'tcx>, mutbl: TyMutability) -> EvalResult<'tcx> {\n+        use self::TyMutability::*;\n+\n+        // Acquire lock\n+        let (len, _) = self.size_and_align_of_dst(pointee_ty, val)?;\n+        let ptr = val.into_ptr(&mut self.memory)?.to_ptr()?;\n+        let access = match mutbl { MutMutable => AccessKind::Write, MutImmutable => AccessKind::Read };\n+        self.memory.acquire_lock(ptr, len, region, access)?;\n+\n+        // Recurse\n+        let pointee_lvalue = self.val_to_lvalue(val, pointee_ty)?;\n+        self.acquire_valid(pointee_lvalue, pointee_ty, mutbl)\n+    }\n+\n     pub(super) fn acquire_valid(&mut self, lvalue: Lvalue<'tcx>, ty: Ty<'tcx>, outer_mutbl: TyMutability) -> EvalResult<'tcx> {\n         use rustc::ty::TypeVariants::*;\n         use rustc::ty::RegionKind::*;\n@@ -504,21 +519,18 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 Ok(())\n             }\n             TyRef(region, ty::TypeAndMut { ty: pointee_ty, mutbl }) => {\n-                // Acquire lock\n                 let val = self.read_lvalue(lvalue)?;\n-                let (len, _) = self.size_and_align_of_dst(pointee_ty, val)?;\n-                let ptr = val.into_ptr(&mut self.memory)?.to_ptr()?;\n                 let combined_mutbl = match outer_mutbl { MutMutable => mutbl, MutImmutable => MutImmutable };\n-                let access = match combined_mutbl { MutMutable => AccessKind::Write, MutImmutable => AccessKind::Read };\n-                let region = match *region {\n+                let extent = match *region {\n                     ReScope(extent) => Some(extent),\n                     _ => None,\n                 };\n-                self.memory.acquire_lock(ptr, len, region, access)?;\n-\n-                // Recurse\n-                let pointee_lvalue = self.val_to_lvalue(val, pointee_ty)?;\n-                self.acquire_valid(pointee_lvalue, pointee_ty, combined_mutbl)\n+                self.validate_ptr(val, extent, pointee_ty, combined_mutbl)\n+            }\n+            TyAdt(adt, _) if adt.is_box() => {\n+                let val = self.read_lvalue(lvalue)?;\n+                // TODO: The region can't always be None.  It must take outer borrows into account.\n+                self.validate_ptr(val, None, ty.boxed_ty(), outer_mutbl)\n             }\n             TySlice(elem_ty) => {\n                 let len = match lvalue {\n@@ -555,10 +567,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                         // Recursively validate the fields\n                         let variant = &adt.variants[variant_idx];\n-                        self.variant_check_valid(lvalue, ty, variant, subst, outer_mutbl)\n+                        self.validate_variant(lvalue, ty, variant, subst, outer_mutbl)\n                     }\n                     AdtKind::Struct => {\n-                        self.variant_check_valid(lvalue, ty, adt.struct_variant(), subst, outer_mutbl)\n+                        self.validate_variant(lvalue, ty, adt.struct_variant(), subst, outer_mutbl)\n                     }\n                     AdtKind::Union => {\n                         // No guarantees are provided for union types."}]}