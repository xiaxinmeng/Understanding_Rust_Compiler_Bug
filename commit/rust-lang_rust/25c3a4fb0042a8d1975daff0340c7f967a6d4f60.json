{"sha": "25c3a4fb0042a8d1975daff0340c7f967a6d4f60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YzNhNGZiMDA0MmE4ZDE5NzVkYWZmMDM0MGM3Zjk2N2E2ZDRmNjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-14T14:35:03Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-24T09:41:15Z"}, "message": "drop all temporary closure allocations", "tree": {"sha": "8fc0ce82c429c6290f7b8288b887d8eb290d235d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fc0ce82c429c6290f7b8288b887d8eb290d235d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c3a4fb0042a8d1975daff0340c7f967a6d4f60", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAliv/7sACgkQpp+NIls6\n19l5Gw//RqTt7/k1bS6E+j5520uJ4swlGPaKCnCO5+ouFDj3Ou0XWlMfYpAyOayj\npFB5h3jllUPCjrLblnrNfWXguC8bbJSZQiToGWK0eOryvUXChxIXH6GMZMVSveZa\n22rfk8e3KjxnMUEKmcfRn0EzGb8dI4jZ+vDdvaeLGK6pwaPJmOyCGlPsFsaPR8Ct\nUZET0dtXEVi50oMTksRU9zPX6+Szj1NMq/m2RMIYRnRKXtGtozbjJHUTDmUGmLRZ\ni2PbXy/twAnloYLPTrO8LOw7Fd6NKEZpVhwgaJZtI5XtBfawy7squ/qHhrg037rn\ncZftkd6rHa7+6WYXjXTc8I9/0uPbHG7K5kipc1EgxxgQDu+DHQR+wEzgvVZkDwG8\nG8Ro1Q1LgJxyJg7sYY0ZA5qRtykF6KqrHtNxYXcHQ9Cf83kieShXdqRO5SnF9kaj\n/tqm0lshw4oepdbOvlnM5p1Ky9cbaNQN7E9Tmq7iJaxZjHmuzaKh0VRvSAlgoQqx\nNgJoukzAJwy6NTO7SDL7n0UPDQHXhH/+L2pfJrEIpt9zMzNUqQVkv1RSlYGaVDkK\nwqVLwfINAM4xjF9wv6zX1Q0H01nZqMgUWWCyllMwYqO0wKq4QKGHSQe2yinhSr78\nRamMuIuVS2a8f4oEmkRYB8qCqNPUo/GtNq8hl9NCzUWnUgt+6Js=\n=QJFL\n-----END PGP SIGNATURE-----", "payload": "tree 8fc0ce82c429c6290f7b8288b887d8eb290d235d\nparent 35502fd47daf3a95d01e3a538e429c7ceb9de03b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1487082903 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1487929275 +0100\n\ndrop all temporary closure allocations"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c3a4fb0042a8d1975daff0340c7f967a6d4f60", "html_url": "https://github.com/rust-lang/rust/commit/25c3a4fb0042a8d1975daff0340c7f967a6d4f60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c3a4fb0042a8d1975daff0340c7f967a6d4f60/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35502fd47daf3a95d01e3a538e429c7ceb9de03b", "url": "https://api.github.com/repos/rust-lang/rust/commits/35502fd47daf3a95d01e3a538e429c7ceb9de03b", "html_url": "https://github.com/rust-lang/rust/commit/35502fd47daf3a95d01e3a538e429c7ceb9de03b"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "1bf71e149dc34914689f5caecf59866b17b69ab9", "filename": "src/eval_context.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/25c3a4fb0042a8d1975daff0340c7f967a6d4f60/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c3a4fb0042a8d1975daff0340c7f967a6d4f60/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=25c3a4fb0042a8d1975daff0340c7f967a6d4f60", "patch": "@@ -81,8 +81,8 @@ pub struct Frame<'tcx> {\n     /// Temporary allocations introduced to save stackframes\n     /// This is pure interpreter magic and has nothing to do with how rustc does it\n     /// An example is calling an FnMut closure that has been converted to a FnOnce closure\n-    /// The memory will be freed when the stackframe finishes\n-    pub interpreter_temporaries: Vec<Pointer>,\n+    /// The value's destructor will be called and the memory freed when the stackframe finishes\n+    pub interpreter_temporaries: Vec<(Pointer, Ty<'tcx>)>,\n \n     ////////////////////////////////////////////////////////////////////////////////\n     // Current position within the function\n@@ -273,7 +273,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         substs: &'tcx Substs<'tcx>,\n         return_lvalue: Lvalue<'tcx>,\n         return_to_block: StackPopCleanup,\n-        temporaries: Vec<Pointer>,\n+        temporaries: Vec<(Pointer, Ty<'tcx>)>,\n     ) -> EvalResult<'tcx> {\n         ::log_settings::settings().indentation += 1;\n \n@@ -347,11 +347,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n         }\n-        // deallocate all temporary allocations\n-        for ptr in frame.interpreter_temporaries {\n-            trace!(\"deallocating temporary allocation\");\n-            self.memory.dump_alloc(ptr.alloc_id);\n-            self.memory.deallocate(ptr)?;\n+        // drop and deallocate all temporary allocations\n+        for (ptr, ty) in frame.interpreter_temporaries {\n+            trace!(\"dropping temporary allocation\");\n+            let mut drops = Vec::new();\n+            self.drop(Lvalue::from_ptr(ptr), ty, &mut drops)?;\n+            self.eval_drop_impls(drops, frame.span)?;\n         }\n         Ok(())\n     }"}, {"sha": "a46d6096dfc952095402abed38baccc54e0049e6", "filename": "src/traits.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25c3a4fb0042a8d1975daff0340c7f967a6d4f60/src%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c3a4fb0042a8d1975daff0340c7f967a6d4f60/src%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftraits.rs?ref=25c3a4fb0042a8d1975daff0340c7f967a6d4f60", "patch": "@@ -23,7 +23,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         def_id: DefId,\n         substs: &'tcx Substs<'tcx>,\n         args: &mut Vec<(Value, Ty<'tcx>)>,\n-    ) -> EvalResult<'tcx, (DefId, &'tcx Substs<'tcx>, Vec<Pointer>)> {\n+    ) -> EvalResult<'tcx, (DefId, &'tcx Substs<'tcx>, Vec<(Pointer, Ty<'tcx>)>)> {\n         let trait_ref = ty::TraitRef::from_method(self.tcx, trait_id, substs);\n         let trait_ref = self.tcx.normalize_associated_type(&ty::Binder(trait_ref));\n \n@@ -72,16 +72,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 let ptr = self.alloc_ptr(args[0].1)?;\n                                 let size = self.type_size(args[0].1)?.expect(\"closures are sized\");\n                                 self.memory.write_primval(ptr, primval, size)?;\n-                                temporaries.push(ptr);\n                                 ptr\n                             },\n                             Value::ByValPair(a, b) => {\n                                 let ptr = self.alloc_ptr(args[0].1)?;\n                                 self.write_pair_to_ptr(a, b, ptr, args[0].1)?;\n-                                temporaries.push(ptr);\n                                 ptr\n                             },\n                         };\n+                        temporaries.push((ptr, args[0].1));\n                         args[0].0 = Value::ByVal(PrimVal::Ptr(ptr));\n                         args[0].1 = self.tcx.mk_mut_ptr(args[0].1);\n                     }"}, {"sha": "e3e66c6f80fecfeb0946db5a63fc1bb7c3300bf9", "filename": "tests/run-pass/move_fn_closure.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/25c3a4fb0042a8d1975daff0340c7f967a6d4f60/tests%2Frun-pass%2Fmove_fn_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c3a4fb0042a8d1975daff0340c7f967a6d4f60/tests%2Frun-pass%2Fmove_fn_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmove_fn_closure.rs?ref=25c3a4fb0042a8d1975daff0340c7f967a6d4f60", "patch": "@@ -0,0 +1,24 @@\n+struct Foo<'a>(&'a mut bool);\n+\n+impl<'a> Drop for Foo<'a> {\n+    fn drop(&mut self) {\n+        *self.0 = true;\n+    }\n+}\n+\n+fn f<T: FnOnce()>(t: T) {\n+    t()\n+}\n+\n+fn main() {\n+    let mut ran_drop = false;\n+    {\n+        let x = Foo(&mut ran_drop);\n+        // this closure never by val uses its captures\n+        // so it's basically a fn(&self)\n+        // the shim used to not drop the `x`\n+        let x = move || { let _ = x; };\n+        f(x);\n+    }\n+    assert!(ran_drop);\n+}"}]}