{"sha": "ad60b4e6ea1cbbb4c611f56833af90b43c4a5a3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNjBiNGU2ZWExY2JiYjRjNjExZjU2ODMzYWY5MGI0M2M0YTVhM2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-26T11:41:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-26T11:41:20Z"}, "message": "Merge #5890\n\n5890: Simplify\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7cb422505b7cf2d7620f2d25f42f0a7d241b6ff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cb422505b7cf2d7620f2d25f42f0a7d241b6ff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad60b4e6ea1cbbb4c611f56833af90b43c4a5a3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfRkpgCRBK7hj4Ov3rIwAAdHIIAE9gY209uBg1jUCiLxHAzWbN\nxfoBJo7YdNOv8ifKFNxG46fpJKWXVzTY6QFEm3+zVCJE3AwFK+OMHp7iJQSoghvr\nNyZDOac1K3oNlN8SuhnugaAFjVDtHhHiE8hiM4jDZIXbpp3xKNbTQ9y4O/sDll+r\nfIo0u1I3xr1Qf8ra8tfe4jf/gt/ibhVIRmjEAjbUiqxPT9DIiScwyBOW7jH8YULO\nlZU5f1Itj8MW9kHXr2gg2R2O9XR4HTDmeDH5y9iF3ncWzkC8duWIRt+OVasgQPW1\n+Q0XwHR2uFMcUfmFcIgLgFODLUzQLAEM3uQk9gyOLHUgnnYWg+uL3ri+Iehhql8=\n=Yirr\n-----END PGP SIGNATURE-----\n", "payload": "tree 7cb422505b7cf2d7620f2d25f42f0a7d241b6ff3\nparent 868aaf2bc61627ae8e5d920c38b2666756743515\nparent 7431ec82c985516213f3283e370b81d067ec0367\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1598442080 +0000\ncommitter GitHub <noreply@github.com> 1598442080 +0000\n\nMerge #5890\n\n5890: Simplify\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad60b4e6ea1cbbb4c611f56833af90b43c4a5a3e", "html_url": "https://github.com/rust-lang/rust/commit/ad60b4e6ea1cbbb4c611f56833af90b43c4a5a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad60b4e6ea1cbbb4c611f56833af90b43c4a5a3e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "868aaf2bc61627ae8e5d920c38b2666756743515", "url": "https://api.github.com/repos/rust-lang/rust/commits/868aaf2bc61627ae8e5d920c38b2666756743515", "html_url": "https://github.com/rust-lang/rust/commit/868aaf2bc61627ae8e5d920c38b2666756743515"}, {"sha": "7431ec82c985516213f3283e370b81d067ec0367", "url": "https://api.github.com/repos/rust-lang/rust/commits/7431ec82c985516213f3283e370b81d067ec0367", "html_url": "https://github.com/rust-lang/rust/commit/7431ec82c985516213f3283e370b81d067ec0367"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "8ddf1e031dfe3127c43b49eef4ddaa6e8a40ff9c", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ad60b4e6ea1cbbb4c611f56833af90b43c4a5a3e/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad60b4e6ea1cbbb4c611f56833af90b43c4a5a3e/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=ad60b4e6ea1cbbb4c611f56833af90b43c4a5a3e", "patch": "@@ -3,7 +3,7 @@\n //! If run started args, we run the LSP server loop. With a subcommand, we do a\n //! one-time batch processing.\n \n-use std::{env, fmt::Write, path::PathBuf};\n+use std::{env, path::PathBuf};\n \n use anyhow::{bail, format_err, Result};\n use pico_args::Arguments;\n@@ -108,7 +108,7 @@ impl Args {\n         let mut matches = Arguments::from_env();\n \n         if matches.contains(\"--version\") {\n-            matches.finish().or_else(handle_extra_flags)?;\n+            matches.finish()?;\n             return Ok(Args {\n                 verbosity: Verbosity::Normal,\n                 log_file: None,\n@@ -138,7 +138,7 @@ impl Args {\n         let subcommand = match matches.subcommand()? {\n             Some(it) => it,\n             None => {\n-                matches.finish().or_else(handle_extra_flags)?;\n+                matches.finish()?;\n                 return Ok(Args { verbosity, log_file, command: Command::RunServer });\n             }\n         };\n@@ -217,20 +217,7 @@ impl Args {\n                 return Ok(Args { verbosity, log_file: None, command: Command::Help });\n             }\n         };\n-        matches.finish().or_else(handle_extra_flags)?;\n+        matches.finish()?;\n         Ok(Args { verbosity, log_file, command })\n     }\n }\n-\n-fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n-    if let pico_args::Error::UnusedArgsLeft(flags) = e {\n-        let mut invalid_flags = String::new();\n-        for flag in flags {\n-            write!(&mut invalid_flags, \"{}, \", flag)?;\n-        }\n-        let (invalid_flags, _) = invalid_flags.split_at(invalid_flags.len() - 2);\n-        bail!(\"Invalid flags: {}\", invalid_flags);\n-    } else {\n-        bail!(e);\n-    }\n-}"}]}