{"sha": "c46f91324434d46472bd4aa15286240b7ba537d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NmY5MTMyNDQzNGQ0NjQ3MmJkNGFhMTUyODYyNDBiN2JhNTM3ZDY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-07-26T00:55:35Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-07-26T21:31:08Z"}, "message": "typeck: handle unsized structs in type hints by recursing into their last field.", "tree": {"sha": "a60bdf4394190db41f2671da795095c206d678e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a60bdf4394190db41f2671da795095c206d678e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c46f91324434d46472bd4aa15286240b7ba537d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c46f91324434d46472bd4aa15286240b7ba537d6", "html_url": "https://github.com/rust-lang/rust/commit/c46f91324434d46472bd4aa15286240b7ba537d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c46f91324434d46472bd4aa15286240b7ba537d6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7e825ecdb00023f481e5648b356d40b606fa35", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7e825ecdb00023f481e5648b356d40b606fa35", "html_url": "https://github.com/rust-lang/rust/commit/cf7e825ecdb00023f481e5648b356d40b606fa35"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "0c60cdc4ca2cfe1bd21e18bdf8086fa5c54a8c14", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c46f91324434d46472bd4aa15286240b7ba537d6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f91324434d46472bd4aa15286240b7ba537d6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c46f91324434d46472bd4aa15286240b7ba537d6", "patch": "@@ -2490,7 +2490,7 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 // The special-cased logic below has three functions:\n                 // 1. Provide as good of an expected type as possible.\n                 let expected = expected_arg_tys.get(i).map(|&ty| {\n-                    Expectation::rvalue_hint(ty)\n+                    Expectation::rvalue_hint(fcx.tcx(), ty)\n                 });\n \n                 check_expr_with_unifier(fcx, &**arg,\n@@ -3268,7 +3268,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             match unop {\n                 ast::UnUniq => match ty.sty {\n                     ty::TyBox(ty) => {\n-                        Expectation::rvalue_hint(ty)\n+                        Expectation::rvalue_hint(tcx, ty)\n                     }\n                     _ => {\n                         NoExpectation\n@@ -3345,7 +3345,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                         // the last field of a struct can be unsized.\n                         ExpectHasType(mt.ty)\n                     } else {\n-                        Expectation::rvalue_hint(mt.ty)\n+                        Expectation::rvalue_hint(tcx, mt.ty)\n                     }\n                 }\n                 _ => NoExpectation\n@@ -3982,8 +3982,8 @@ impl<'tcx> Expectation<'tcx> {\n     /// which still is useful, because it informs integer literals and the like.\n     /// See the test case `test/run-pass/coerce-expect-unsized.rs` and #20169\n     /// for examples of where this comes up,.\n-    fn rvalue_hint(ty: Ty<'tcx>) -> Expectation<'tcx> {\n-        match ty.sty {\n+    fn rvalue_hint(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> Expectation<'tcx> {\n+        match tcx.struct_tail(ty).sty {\n             ty::TySlice(_) | ty::TyTrait(..) => {\n                 ExpectRvalueLikeUnsized(ty)\n             }"}, {"sha": "ee4ec24b7e3dad97370ca4831ad9d57806656861", "filename": "src/test/run-pass/coerce-expect-unsized.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c46f91324434d46472bd4aa15286240b7ba537d6/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f91324434d46472bd4aa15286240b7ba537d6/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs?ref=c46f91324434d46472bd4aa15286240b7ba537d6", "patch": "@@ -13,7 +13,9 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n+use std::cell::RefCell;\n use std::fmt::Debug;\n+use std::rc::Rc;\n \n // Check that coercions apply at the pointer level and don't cause\n // rvalue expressions to be unsized. See #20169 for more information.\n@@ -45,6 +47,9 @@ pub fn main() {\n     let _: Box<[isize]> = Box::new([1, 2, 3]);\n     let _: Box<Fn(isize) -> _> = Box::new(|x| (x as u8));\n \n+    let _: Rc<RefCell<[isize]>> = Rc::new(RefCell::new([1, 2, 3]));\n+    let _: Rc<RefCell<FnMut(isize) -> _>> = Rc::new(RefCell::new(|x| (x as u8)));\n+\n     let _: Vec<Box<Fn(isize) -> _>> = vec![\n         Box::new(|x| (x as u8)),\n         Box::new(|x| (x as i16 as u8)),"}]}