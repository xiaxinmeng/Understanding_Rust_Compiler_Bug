{"sha": "a36386210293cf12f771adb6bc775a45cab6b4da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNjM4NjIxMDI5M2NmMTJmNzcxYWRiNmJjNzc1YTQ1Y2FiNmI0ZGE=", "commit": {"author": {"name": "Ben Kelly", "email": "ben@wanderview.com", "date": "2013-03-10T17:27:11Z"}, "committer": {"name": "Ben Kelly", "email": "ben@wanderview.com", "date": "2013-03-10T21:27:31Z"}, "message": "Fix formatting and errors in std::getopts example.\n\nThere were three issues effecting the example in the getopts rustdoc:\n\n1. The blockquote was incorrectly formatted.  Fixed by switching to using\n   an explicit markdown code section with ```.\n2. The `fail fail_str(f)` would not compile.  Fixed by using `fail!()` instead\n   of `fail`.\n3. The line `matches.free[0]` produced a compile error about moving from\n   an immutable vector.  Fix by using `copy`.", "tree": {"sha": "e44a5524d330dbc9939493c973b8ff9c53975143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e44a5524d330dbc9939493c973b8ff9c53975143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a36386210293cf12f771adb6bc775a45cab6b4da", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a36386210293cf12f771adb6bc775a45cab6b4da", "html_url": "https://github.com/rust-lang/rust/commit/a36386210293cf12f771adb6bc775a45cab6b4da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a36386210293cf12f771adb6bc775a45cab6b4da/comments", "author": {"login": "wanderview", "id": 1256526, "node_id": "MDQ6VXNlcjEyNTY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1256526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanderview", "html_url": "https://github.com/wanderview", "followers_url": "https://api.github.com/users/wanderview/followers", "following_url": "https://api.github.com/users/wanderview/following{/other_user}", "gists_url": "https://api.github.com/users/wanderview/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanderview/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanderview/subscriptions", "organizations_url": "https://api.github.com/users/wanderview/orgs", "repos_url": "https://api.github.com/users/wanderview/repos", "events_url": "https://api.github.com/users/wanderview/events{/privacy}", "received_events_url": "https://api.github.com/users/wanderview/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wanderview", "id": 1256526, "node_id": "MDQ6VXNlcjEyNTY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1256526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanderview", "html_url": "https://github.com/wanderview", "followers_url": "https://api.github.com/users/wanderview/followers", "following_url": "https://api.github.com/users/wanderview/following{/other_user}", "gists_url": "https://api.github.com/users/wanderview/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanderview/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanderview/subscriptions", "organizations_url": "https://api.github.com/users/wanderview/orgs", "repos_url": "https://api.github.com/users/wanderview/repos", "events_url": "https://api.github.com/users/wanderview/events{/privacy}", "received_events_url": "https://api.github.com/users/wanderview/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "267f6c212f471c100060edaaf85a26e9a7ba820f", "url": "https://api.github.com/repos/rust-lang/rust/commits/267f6c212f471c100060edaaf85a26e9a7ba820f", "html_url": "https://github.com/rust-lang/rust/commit/267f6c212f471c100060edaaf85a26e9a7ba820f"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "d3f1ed72edcebb528873df86e0d579f6068a4ddf", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a36386210293cf12f771adb6bc775a45cab6b4da/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36386210293cf12f771adb6bc775a45cab6b4da/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=a36386210293cf12f771adb6bc775a45cab6b4da", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2011-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -29,8 +29,10 @@\n  * The following example shows simple command line parsing for an application\n  * that requires an input file to be specified, accepts an optional output\n  * file name following -o, and accepts both -h and --help as optional flags.\n- * extern mod std;\n- * use std::getopts::*;\n+ *\n+ * ```\n+ *    extern mod std;\n+ *    use std::getopts::*;\n  *\n  *    fn do_work(in: &str, out: Option<~str>) {\n  *      io::println(in);\n@@ -58,21 +60,22 @@\n  *        ];\n  *        let matches = match getopts(vec::tail(args), opts) {\n  *            result::Ok(m) => { m }\n- *            result::Err(f) => { fail fail_str(f) }\n+ *            result::Err(f) => { fail!(fail_str(f)) }\n  *        };\n  *        if opt_present(&matches, \"h\") || opt_present(&matches, \"help\") {\n  *            print_usage(program, opts);\n  *            return;\n  *        }\n  *        let output = opt_maybe_str(&matches, \"o\");\n  *        let input: &str = if !matches.free.is_empty() {\n- *            matches.free[0]\n+ *            copy matches.free[0]\n  *        } else {\n  *            print_usage(program, opts);\n  *            return;\n  *        };\n  *        do_work(input, output);\n  *    }\n+ * ```\n  */\n \n use core::cmp::Eq;"}]}