{"sha": "6edea2cfda2818f0a76f4bac2d18a30feb54c137", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZGVhMmNmZGEyODE4ZjBhNzZmNGJhYzJkMThhMzBmZWI1NGMxMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-16T10:49:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-16T10:49:55Z"}, "message": "Auto merge of #34216 - jseyfried:nested_cfg_attr, r=nrc\n\nSupport nested `cfg_attr` attributes\n\nSupport arbitrarily deeply nested `cfg_attr` attributes (e.g. `#[cfg_attr(foo, cfg_attr(bar, baz))]`).\nThis makes configuration idempotent.\n\nCurrently, the nighties do not support any `cfg_attr` nesting. Stable and beta support just one level of `cfg_attr` nesting (expect for attributes on macro-expanded nodes, where no nesting is supported).\n\nThis is a [breaking-change]. For example, the following would break:\n```rust\nmacro_rules! m { () => {\n    #[cfg_attr(all(), cfg_attr(all(), cfg(foo)))]\n    fn f() {}\n} }\nm!();\n\nfn main() { f() } //~ ERROR unresolved name `f`\n```\nr? @nrc", "tree": {"sha": "7e1059c82609fdf0a9560c9aa6a524d22fb821ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e1059c82609fdf0a9560c9aa6a524d22fb821ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6edea2cfda2818f0a76f4bac2d18a30feb54c137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6edea2cfda2818f0a76f4bac2d18a30feb54c137", "html_url": "https://github.com/rust-lang/rust/commit/6edea2cfda2818f0a76f4bac2d18a30feb54c137", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6edea2cfda2818f0a76f4bac2d18a30feb54c137/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a479a6a7a6fa1bfe1f18d7d7411ad14e7b8ca17b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a479a6a7a6fa1bfe1f18d7d7411ad14e7b8ca17b", "html_url": "https://github.com/rust-lang/rust/commit/a479a6a7a6fa1bfe1f18d7d7411ad14e7b8ca17b"}, {"sha": "65d256e82a26ca6e72e6668adb66a284b4ad7ba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d256e82a26ca6e72e6668adb66a284b4ad7ba1", "html_url": "https://github.com/rust-lang/rust/commit/65d256e82a26ca6e72e6668adb66a284b4ad7ba1"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "efd92ab3240267a33d3dcf00b0cc1f73c94a6c55", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edea2cfda2818f0a76f4bac2d18a30feb54c137/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edea2cfda2818f0a76f4bac2d18a30feb54c137/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=6edea2cfda2818f0a76f4bac2d18a30feb54c137", "patch": "@@ -73,7 +73,7 @@ impl<'a> StripUnconfigured<'a> {\n         };\n \n         if attr::cfg_matches(self.config, &cfg, &mut self.diag) {\n-            Some(respan(mi.span, ast::Attribute_ {\n+            self.process_cfg_attr(respan(mi.span, ast::Attribute_ {\n                 id: attr::mk_attr_id(),\n                 style: attr.node.style,\n                 value: mi.clone(),"}, {"sha": "6010b1e695e9bd5dc7a35b8bb95e74b6a7c7e267", "filename": "src/test/compile-fail/nested-cfg-attrs.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6edea2cfda2818f0a76f4bac2d18a30feb54c137/src%2Ftest%2Fcompile-fail%2Fnested-cfg-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edea2cfda2818f0a76f4bac2d18a30feb54c137/src%2Ftest%2Fcompile-fail%2Fnested-cfg-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnested-cfg-attrs.rs?ref=6edea2cfda2818f0a76f4bac2d18a30feb54c137", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[cfg_attr(all(), cfg_attr(all(), cfg(foo)))]\n+fn f() {}\n+\n+fn main() { f() } //~ ERROR unresolved name `f`"}]}