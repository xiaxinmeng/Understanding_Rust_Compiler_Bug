{"sha": "56f5a19e4561434919ecda627c5409a3b16ba1d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZjVhMTllNDU2MTQzNDkxOWVjZGE2MjdjNTQwOWEzYjE2YmExZDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-10-10T19:29:14Z"}, "committer": {"name": "Tatsuyuki Ishi", "email": "ishitatsuyuki@gmail.com", "date": "2017-10-17T05:33:36Z"}, "message": "Update ThinLTO for LLVM 5", "tree": {"sha": "fd0949f5179b36551ce4d0c136f9f4d536f52ff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd0949f5179b36551ce4d0c136f9f4d536f52ff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56f5a19e4561434919ecda627c5409a3b16ba1d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56f5a19e4561434919ecda627c5409a3b16ba1d0", "html_url": "https://github.com/rust-lang/rust/commit/56f5a19e4561434919ecda627c5409a3b16ba1d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56f5a19e4561434919ecda627c5409a3b16ba1d0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ishitatsuyuki", "id": 12389383, "node_id": "MDQ6VXNlcjEyMzg5Mzgz", "avatar_url": "https://avatars.githubusercontent.com/u/12389383?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ishitatsuyuki", "html_url": "https://github.com/ishitatsuyuki", "followers_url": "https://api.github.com/users/ishitatsuyuki/followers", "following_url": "https://api.github.com/users/ishitatsuyuki/following{/other_user}", "gists_url": "https://api.github.com/users/ishitatsuyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/ishitatsuyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ishitatsuyuki/subscriptions", "organizations_url": "https://api.github.com/users/ishitatsuyuki/orgs", "repos_url": "https://api.github.com/users/ishitatsuyuki/repos", "events_url": "https://api.github.com/users/ishitatsuyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/ishitatsuyuki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90691c8c1f8b4ece2a4f831a130ae087056b0083", "url": "https://api.github.com/repos/rust-lang/rust/commits/90691c8c1f8b4ece2a4f831a130ae087056b0083", "html_url": "https://github.com/rust-lang/rust/commit/90691c8c1f8b4ece2a4f831a130ae087056b0083"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "c7d966fcdfdd5baaef7e6903668f5bd7387d844c", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/56f5a19e4561434919ecda627c5409a3b16ba1d0/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/56f5a19e4561434919ecda627c5409a3b16ba1d0/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=56f5a19e4561434919ecda627c5409a3b16ba1d0", "patch": "@@ -26,11 +26,13 @@\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n \n #if LLVM_VERSION_GE(4, 0)\n-#include \"llvm/Object/ModuleSummaryIndexObjectFile.h\"\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n #include \"llvm/Transforms/IPO/FunctionImport.h\"\n #include \"llvm/Transforms/Utils/FunctionImportUtils.h\"\n #include \"llvm/LTO/LTO.h\"\n+#if LLVM_VERSION_LE(4, 0)\n+#include \"llvm/Object/ModuleSummaryIndexObjectFile.h\"\n+#endif\n #endif\n \n #include \"llvm-c/Transforms/PassManagerBuilder.h\"\n@@ -888,6 +890,28 @@ addPreservedGUID(const ModuleSummaryIndex &Index,\n     return;\n   Preserved.insert(GUID);\n \n+#if LLVM_VERSION_GE(5, 0)\n+  auto Info = Index.getValueInfo(GUID);\n+  if (!Info) {\n+    return;\n+  }\n+  for (auto &Summary : Info.getSummaryList()) {\n+    for (auto &Ref : Summary->refs()) {\n+      addPreservedGUID(Index, Preserved, Ref.getGUID());\n+    }\n+\n+    GlobalValueSummary *GVSummary = Summary.get();\n+    if (isa<FunctionSummary>(GVSummary)) {\n+      FunctionSummary *FS = cast<FunctionSummary>(GVSummary);\n+      for (auto &Call: FS->calls()) {\n+        addPreservedGUID(Index, Preserved, Call.first.getGUID());\n+      }\n+      for (auto &GUID: FS->type_tests()) {\n+        addPreservedGUID(Index, Preserved, GUID);\n+      }\n+    }\n+  }\n+#else\n   auto SummaryList = Index.findGlobalValueSummaryList(GUID);\n   if (SummaryList == Index.end())\n     return;\n@@ -919,6 +943,7 @@ addPreservedGUID(const ModuleSummaryIndex &Index,\n       addPreservedGUID(Index, Preserved, GUID);\n     }\n   }\n+#endif\n }\n \n // The main entry point for creating the global ThinLTO analysis. The structure\n@@ -939,6 +964,12 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n \n     Ret->ModuleMap[module->identifier] = mem_buffer;\n \n+#if LLVM_VERSION_GE(5, 0)\n+    if (Error Err = readModuleSummaryIndex(mem_buffer, Ret->Index, i)) {\n+      LLVMRustSetLastError(toString(std::move(Err)).c_str());\n+      return nullptr;\n+    }\n+#else\n     Expected<std::unique_ptr<object::ModuleSummaryIndexObjectFile>> ObjOrErr =\n       object::ModuleSummaryIndexObjectFile::create(mem_buffer);\n     if (!ObjOrErr) {\n@@ -947,6 +978,7 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n     }\n     auto Index = (*ObjOrErr)->takeIndex();\n     Ret->Index.mergeFrom(std::move(Index), i);\n+#endif\n   }\n \n   // Collect for each module the list of function it defines (GUID -> Summary)\n@@ -981,8 +1013,13 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   StringMap<std::map<GlobalValue::GUID, GlobalValue::LinkageTypes>> ResolvedODR;\n   DenseMap<GlobalValue::GUID, const GlobalValueSummary *> PrevailingCopy;\n   for (auto &I : Ret->Index) {\n+#if LLVM_VERSION_GE(5, 0)\n+    if (I.second.SummaryList.size() > 1)\n+      PrevailingCopy[I.first] = getFirstDefinitionForLinker(I.second.SummaryList);\n+#else\n     if (I.second.size() > 1)\n       PrevailingCopy[I.first] = getFirstDefinitionForLinker(I.second);\n+#endif\n   }\n   auto isPrevailing = [&](GlobalValue::GUID GUID, const GlobalValueSummary *S) {\n     const auto &Prevailing = PrevailingCopy.find(GUID);"}]}