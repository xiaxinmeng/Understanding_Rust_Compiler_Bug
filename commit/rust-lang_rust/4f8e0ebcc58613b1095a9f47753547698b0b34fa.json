{"sha": "4f8e0ebcc58613b1095a9f47753547698b0b34fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOGUwZWJjYzU4NjEzYjEwOTVhOWY0Nzc1MzU0NzY5OGIwYjM0ZmE=", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-06-16T22:11:13Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-06-16T23:04:54Z"}, "message": "Use `AttrVec` for `Arm`, `FieldDef`, and `Variant`", "tree": {"sha": "d9cc3c28cd8e13f037a0cb06c21ece5468be0188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9cc3c28cd8e13f037a0cb06c21ece5468be0188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f8e0ebcc58613b1095a9f47753547698b0b34fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmDKg5YACgkQ2rpbBylh\nwYpuAg//UgGDwIzCbAP1PBIeySaDLjsihBb7aVDaLyW7V2PGBRSMIKTVSULFc5FL\nTAvJHjPL0TosnKhKPJYpAt6tzMwEaVECmQGfFQpOa0CMokBN8W0M+NQbOpI6zCaQ\nyycHyE26NHYeSk0NdVZB/z2axCLX9lUkdGsizSUsLohcSmDg8VDscAqDMF4z5QQv\nlqo4Eqp2DLgWWdNrFvQzQIcbD9Y7uMmOGFvb0noAjVHpAkQhyQ3ImUxL/8pPyVuG\n1L3ZnHIiBpVe02wJRj/0Cj9BBt+PNg5XHxrmhNMFT64cdRZLK7y8iw+5lLVafkRs\nv+LDaygK2hnWKJFw3erfDM2/4Ec7JsT13/kBK1zByvUDmpXe8i6ZEA/dCGrXnNCN\nEnO7RqlY5v01Pvt3BD9APzBHgr2NlCPMqEtG4J7z5UjA2Tv5XK0HGoXTjMrBy291\nsk3fx16YrnbZ1+9sctgRjJ3sWLDoztu9aglBUde7hfcTcv9dL4bl2hGKa+RMRFxJ\nExX1FFpCYyXdtzi0JBJwU/TxzWSjKLUNxEzqhy4tOjFLNi/7mP0JNh0cB3wjdIEC\nd4nLJfOqMZN5lCy0lHYo0ZAmQeu1cPw9gE7U1Y27et3lbmbUTMd0hyT+RrKKS1Kw\nnlbif3RPAvqhyKT3ZDWvNCon+Lj24oarQM4CCOj4lxxc6YBTq+k=\n=4hmb\n-----END PGP SIGNATURE-----", "payload": "tree d9cc3c28cd8e13f037a0cb06c21ece5468be0188\nparent 9fef8d91b4a6c5bfe07c025c434f2d623ad83337\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1623881473 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1623884694 +0900\n\nUse `AttrVec` for `Arm`, `FieldDef`, and `Variant`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8e0ebcc58613b1095a9f47753547698b0b34fa", "html_url": "https://github.com/rust-lang/rust/commit/4f8e0ebcc58613b1095a9f47753547698b0b34fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f8e0ebcc58613b1095a9f47753547698b0b34fa/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fef8d91b4a6c5bfe07c025c434f2d623ad83337", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fef8d91b4a6c5bfe07c025c434f2d623ad83337", "html_url": "https://github.com/rust-lang/rust/commit/9fef8d91b4a6c5bfe07c025c434f2d623ad83337"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "d3f5a37fd6e09729e51fe087d0be87037e7fdc9b", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=4f8e0ebcc58613b1095a9f47753547698b0b34fa", "patch": "@@ -1017,7 +1017,7 @@ pub struct Local {\n /// ```\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct Arm {\n-    pub attrs: Vec<Attribute>,\n+    pub attrs: AttrVec,\n     /// Match arm pattern, e.g. `10` in `match foo { 10 => {}, _ => {} }`\n     pub pat: P<Pat>,\n     /// Match arm guard, e.g. `n > 10` in `match foo { n if n > 10 => {}, _ => {} }`\n@@ -2293,7 +2293,7 @@ pub struct EnumDef {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct Variant {\n     /// Attributes of the variant.\n-    pub attrs: Vec<Attribute>,\n+    pub attrs: AttrVec,\n     /// Id of the variant (not the constructor, see `VariantData::ctor_id()`).\n     pub id: NodeId,\n     /// Span\n@@ -2474,7 +2474,7 @@ impl VisibilityKind {\n /// E.g., `bar: usize` as in `struct Foo { bar: usize }`.\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct FieldDef {\n-    pub attrs: Vec<Attribute>,\n+    pub attrs: AttrVec,\n     pub id: NodeId,\n     pub span: Span,\n     pub vis: Visibility,"}, {"sha": "296766f80191c51ddacda724718e3ce7b89b2b85", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=4f8e0ebcc58613b1095a9f47753547698b0b34fa", "patch": "@@ -420,7 +420,7 @@ pub fn noop_visit_use_tree<T: MutVisitor>(use_tree: &mut UseTree, vis: &mut T) {\n \n pub fn noop_flat_map_arm<T: MutVisitor>(mut arm: Arm, vis: &mut T) -> SmallVec<[Arm; 1]> {\n     let Arm { attrs, pat, guard, body, span, id, is_placeholder: _ } = &mut arm;\n-    visit_attrs(attrs, vis);\n+    visit_thin_attrs(attrs, vis);\n     vis.visit_id(id);\n     vis.visit_pat(pat);\n     visit_opt(guard, |guard| vis.visit_expr(guard));\n@@ -504,7 +504,7 @@ pub fn noop_flat_map_variant<T: MutVisitor>(\n     let Variant { ident, vis, attrs, id, data, disr_expr, span, is_placeholder: _ } = &mut variant;\n     visitor.visit_ident(ident);\n     visitor.visit_vis(vis);\n-    visit_attrs(attrs, visitor);\n+    visit_thin_attrs(attrs, visitor);\n     visitor.visit_id(id);\n     visitor.visit_variant_data(data);\n     visit_opt(disr_expr, |disr_expr| visitor.visit_anon_const(disr_expr));\n@@ -918,7 +918,7 @@ pub fn noop_flat_map_field_def<T: MutVisitor>(\n     visitor.visit_vis(vis);\n     visitor.visit_id(id);\n     visitor.visit_ty(ty);\n-    visit_attrs(attrs, visitor);\n+    visit_thin_attrs(attrs, visitor);\n     smallvec![fd]\n }\n "}, {"sha": "8abd85a5a5214e9f9c20e429fc5ce0272e37560f", "filename": "compiler/rustc_ast_pretty/src/pprust/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Ftests.rs?ref=4f8e0ebcc58613b1095a9f47753547698b0b34fa", "patch": "@@ -49,7 +49,7 @@ fn test_variant_to_string() {\n                 kind: ast::VisibilityKind::Inherited,\n                 tokens: None,\n             },\n-            attrs: Vec::new(),\n+            attrs: ast::AttrVec::new(),\n             id: ast::DUMMY_NODE_ID,\n             data: ast::VariantData::Unit(ast::DUMMY_NODE_ID),\n             disr_expr: None,"}, {"sha": "824df2757ea90eb2bc231a4483db31d5b695881a", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=4f8e0ebcc58613b1095a9f47753547698b0b34fa", "patch": "@@ -432,7 +432,7 @@ impl<'a> ExtCtxt<'a> {\n \n     pub fn arm(&self, span: Span, pat: P<ast::Pat>, expr: P<ast::Expr>) -> ast::Arm {\n         ast::Arm {\n-            attrs: vec![],\n+            attrs: AttrVec::new(),\n             pat,\n             guard: None,\n             body: expr,"}, {"sha": "88ebf4aca23749ffc96759f71eed9847b83ba775", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=4f8e0ebcc58613b1095a9f47753547698b0b34fa", "patch": "@@ -2116,7 +2116,7 @@ impl<'a> Parser<'a> {\n                     let span = body.span;\n                     return Ok((\n                         ast::Arm {\n-                            attrs,\n+                            attrs: attrs.into(),\n                             pat,\n                             guard,\n                             body,\n@@ -2170,7 +2170,7 @@ impl<'a> Parser<'a> {\n \n             Ok((\n                 ast::Arm {\n-                    attrs,\n+                    attrs: attrs.into(),\n                     pat,\n                     guard,\n                     body: expr,"}, {"sha": "2daa9e2485b1b7a02de77e9bb064ccdc8d068759", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8e0ebcc58613b1095a9f47753547698b0b34fa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=4f8e0ebcc58613b1095a9f47753547698b0b34fa", "patch": "@@ -1143,7 +1143,7 @@ impl<'a> Parser<'a> {\n                     ident,\n                     vis,\n                     id: DUMMY_NODE_ID,\n-                    attrs: variant_attrs,\n+                    attrs: variant_attrs.into(),\n                     data: struct_def,\n                     disr_expr,\n                     span: vlo.to(this.prev_token.span),\n@@ -1286,7 +1286,7 @@ impl<'a> Parser<'a> {\n                         ident: None,\n                         id: DUMMY_NODE_ID,\n                         ty,\n-                        attrs,\n+                        attrs: attrs.into(),\n                         is_placeholder: false,\n                     },\n                     TrailingToken::MaybeComma,\n@@ -1460,7 +1460,7 @@ impl<'a> Parser<'a> {\n             vis,\n             id: DUMMY_NODE_ID,\n             ty,\n-            attrs,\n+            attrs: attrs.into(),\n             is_placeholder: false,\n         })\n     }"}, {"sha": "974c0c5990c7ddb38f015d1aae4ccccd35645a69", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f8e0ebcc58613b1095a9f47753547698b0b34fa/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8e0ebcc58613b1095a9f47753547698b0b34fa/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=4f8e0ebcc58613b1095a9f47753547698b0b34fa", "patch": "@@ -1,7 +1,7 @@\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n-use rustc_ast::ast::{self, FnRetTy, Mutability};\n+use rustc_ast::ast::{self, AttrVec, FnRetTy, Mutability};\n use rustc_span::{symbol::kw, symbol::Ident, BytePos, Pos, Span};\n \n use crate::config::lists::*;\n@@ -776,7 +776,7 @@ impl Rewrite for ast::Ty {\n                 );\n                 let data = ast::VariantData::Struct(fields.clone(), recovered);\n                 let variant = ast::Variant {\n-                    attrs: vec![],\n+                    attrs: AttrVec::new(),\n                     id: self.id,\n                     span: self.span,\n                     vis: DEFAULT_VISIBILITY,\n@@ -800,7 +800,7 @@ impl Rewrite for ast::Ty {\n                 );\n                 let data = ast::VariantData::Struct(fields.clone(), recovered);\n                 let variant = ast::Variant {\n-                    attrs: vec![],\n+                    attrs: AttrVec::new(),\n                     id: self.id,\n                     span: self.span,\n                     vis: DEFAULT_VISIBILITY,"}]}