{"sha": "eac0a8bc3070e45047fff57e7b024a059289a36d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYzBhOGJjMzA3MGU0NTA0N2ZmZjU3ZTdiMDI0YTA1OTI4OWEzNmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-01-21T23:36:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-11T19:12:32Z"}, "message": "bootstrap: Add directives to not double-link libs\n\nHave all Cargo-built crates pass `--cfg cargobuild` and then add appropriate\n`#[cfg]` definitions to all crates to avoid linking anything if this is passed.\nThis should help allow libstd to compile with both the makefiles and with Cargo.", "tree": {"sha": "cbcaa9dc371f2b11fe2e9b9d3ee7a3f7a9cfdb8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbcaa9dc371f2b11fe2e9b9d3ee7a3f7a9cfdb8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eac0a8bc3070e45047fff57e7b024a059289a36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eac0a8bc3070e45047fff57e7b024a059289a36d", "html_url": "https://github.com/rust-lang/rust/commit/eac0a8bc3070e45047fff57e7b024a059289a36d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eac0a8bc3070e45047fff57e7b024a059289a36d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4da4970767ae8fc2e3b6d0c280312bb0f4efeed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6", "html_url": "https://github.com/rust-lang/rust/commit/4da4970767ae8fc2e3b6d0c280312bb0f4efeed6"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "4bc752af48eee5fdfb58a41b5fbb5b37ea987bc5", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -17,6 +17,8 @@ use std::process::Command;\n use build_helper::run;\n \n fn main() {\n+    println!(\"cargo:rustc-cfg=cargobuild\");\n+\n     let target = env::var(\"TARGET\").unwrap();\n     let host = env::var(\"HOST\").unwrap();\n     let build_dir = PathBuf::from(env::var_os(\"OUT_DIR\").unwrap());"}, {"sha": "2c46e37ac32b20e7aa7efe7c83975c8f1da58990", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -38,7 +38,10 @@ use libc::{c_int, c_void, size_t};\n                not(target_os = \"android\"),\n                not(target_env = \"musl\")),\n            link(name = \"pthread\"))]\n-extern \"C\" {\n+#[cfg(not(cargobuild))]\n+extern {}\n+\n+extern {\n     fn je_mallocx(size: size_t, flags: c_int) -> *mut c_void;\n     fn je_rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n     fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;"}, {"sha": "245c705dfcc2a41c657ec505d62107fdf94f30b6", "filename": "src/libflate/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibflate%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibflate%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Fbuild.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -11,6 +11,7 @@\n extern crate gcc;\n \n fn main() {\n+    println!(\"cargo:rustc-cfg=cargobuild\");\n     gcc::Config::new()\n         .file(\"../rt/miniz.c\")\n         .compile(\"libminiz.a\");"}, {"sha": "a6bf735e459de53f4945f381c0d96bf9778843c5", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -79,7 +79,10 @@ impl Drop for Bytes {\n }\n \n #[link(name = \"miniz\", kind = \"static\")]\n-extern \"C\" {\n+#[cfg(not(cargobuild))]\n+extern {}\n+\n+extern {\n     /// Raw miniz compression function.\n     fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,\n                                   src_buf_len: size_t,"}, {"sha": "1c9982790cf4ae15e10465980341610422439d28", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -18,6 +18,8 @@ use std::path::PathBuf;\n use build_helper::output;\n \n fn main() {\n+    println!(\"cargo:rustc-cfg=cargobuild\");\n+\n     let target = env::var(\"TARGET\").unwrap();\n     let llvm_config = env::var_os(\"LLVM_CONFIG\").map(PathBuf::from)\n                            .unwrap_or_else(|| {"}, {"sha": "8877479104e5539cd1e9c0d63b7cac963f9cede4", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -609,6 +609,9 @@ pub mod debuginfo {\n // automatically updated whenever LLVM is updated to include an up-to-date\n // set of the libraries we need to link to LLVM for.\n #[link(name = \"rustllvm\", kind = \"static\")]\n+#[cfg(not(cargobuild))]\n+extern {}\n+\n #[linked_from = \"rustllvm\"] // not quite true but good enough\n extern {\n     /* Create and destroy contexts. */\n@@ -2486,6 +2489,7 @@ impl Drop for OperandBundleDef {\n // parts of LLVM that rustllvm depends on aren't thrown away by the linker.\n // Works to the above fix for #15460 to ensure LLVM dependencies that\n // are only used by rustllvm don't get stripped by the linker.\n+#[cfg(not(cargobuild))]\n mod llvmdeps {\n     include! { env!(\"CFG_LLVM_LINKAGE_FILE\") }\n }"}, {"sha": "171954f325a5e5dbcafd82003efb2283109cd06d", "filename": "src/librustdoc/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -11,6 +11,7 @@\n extern crate gcc;\n \n fn main() {\n+    println!(\"cargo:rustc-cfg=cargobuild\");\n     let mut cfg = gcc::Config::new();\n     cfg.file(\"../rt/hoedown/src/autolink.c\")\n        .file(\"../rt/hoedown/src/buffer.c\")"}, {"sha": "c0846cae687014291d5a5f6703d75e1e6f2cd271", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -157,6 +157,9 @@ struct hoedown_buffer {\n \n // hoedown FFI\n #[link(name = \"hoedown\", kind = \"static\")]\n+#[cfg(not(cargobuild))]\n+extern {}\n+\n extern {\n     fn hoedown_html_renderer_new(render_flags: libc::c_uint,\n                                  nesting_level: libc::c_int)"}, {"sha": "8fb49a1be4ea6add15f85bcf006551066b403938", "filename": "src/libstd/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -19,6 +19,8 @@ use std::process::Command;\n use build_helper::run;\n \n fn main() {\n+    println!(\"cargo:rustc-cfg=cargobuild\");\n+\n     let target = env::var(\"TARGET\").unwrap();\n     let host = env::var(\"HOST\").unwrap();\n     if !target.contains(\"apple\") && !target.contains(\"msvc\") {"}, {"sha": "8a422246514bcc833c3734cc08b24c705a77fcbe", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -269,7 +269,10 @@ mod imp {\n     const kSecRandomDefault: *const SecRandom = ptr::null();\n \n     #[link(name = \"Security\", kind = \"framework\")]\n-    extern \"C\" {\n+    #[cfg(not(cargobuild))]\n+    extern {}\n+\n+    extern {\n         fn SecRandomCopyBytes(rnd: *const SecRandom,\n                               count: size_t, bytes: *mut u8) -> c_int;\n     }"}, {"sha": "a11200873d500b980ea89326f7f621689e0f87c1", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -12,6 +12,8 @@\n //! the standard library This varies per-platform, but these libraries are\n //! necessary for running libstd.\n \n+#![cfg(not(cargobuild))]\n+\n // LLVM implements the `frem` instruction as a call to `fmod`, which lives in\n // libm. Hence, we must explicitly link to it.\n //"}, {"sha": "8b3cb04030c8272753e8e62a790551f29c40e2ac", "filename": "src/libstd/sys/common/gnu/libbacktrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fgnu%2Flibbacktrace.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -40,7 +40,7 @@ pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n                       errnum: libc::c_int);\n     enum backtrace_state {}\n     #[link(name = \"backtrace\", kind = \"static\")]\n-    #[cfg(not(test))]\n+    #[cfg(all(not(test), not(cargobuild)))]\n     extern {}\n \n     extern {"}, {"sha": "7cf9e2a54bd900ff7d575dd0ecded2fe9cffc3f7", "filename": "src/libstd/sys/common/unwind/gcc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fgcc.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -252,6 +252,9 @@ pub mod eh_frame_registry {\n     // See also: rtbegin.rs, `unwind` module.\n \n     #[link(name = \"gcc_eh\")]\n+    #[cfg(not(cargobuild))]\n+    extern {}\n+\n     extern {\n         fn __register_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n         fn __deregister_frame_info(eh_frame_begin: *const u8, object: *mut u8);"}, {"sha": "b6a0bd844094b1ddeeb9999aa4ae8c6bff4169db", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -339,14 +339,15 @@ pub fn args() -> Args {\n pub fn args() -> Args {\n     use mem;\n \n-    #[link(name = \"objc\")]\n     extern {\n         fn sel_registerName(name: *const libc::c_uchar) -> Sel;\n         fn objc_msgSend(obj: NsId, sel: Sel, ...) -> NsId;\n         fn objc_getClass(class_name: *const libc::c_uchar) -> NsId;\n     }\n \n     #[link(name = \"Foundation\", kind = \"framework\")]\n+    #[link(name = \"objc\")]\n+    #[cfg(not(cargobuild))]\n     extern {}\n \n     type Sel = *const libc::c_void;"}, {"sha": "9fdeb0aef14c8317527531f07ee8b12ee8ecb584", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac0a8bc3070e45047fff57e7b024a059289a36d/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=eac0a8bc3070e45047fff57e7b024a059289a36d", "patch": "@@ -966,6 +966,9 @@ pub enum EXCEPTION_DISPOSITION {\n #[link(name = \"userenv\")]\n #[link(name = \"shell32\")]\n #[link(name = \"advapi32\")]\n+#[cfg(not(cargobuild))]\n+extern {}\n+\n extern \"system\" {\n     pub fn WSAStartup(wVersionRequested: WORD,\n                       lpWSAData: LPWSADATA) -> c_int;"}]}