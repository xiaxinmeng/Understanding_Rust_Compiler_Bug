{"sha": "34d197de97b5f750b38ad4cbaf228467302e6bf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZDE5N2RlOTdiNWY3NTBiMzhhZDRjYmFmMjI4NDY3MzAyZTZiZjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T00:34:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T19:14:32Z"}, "message": "Remove last users of str::sbuf. Issue #855", "tree": {"sha": "4be7dfd5637e175025c33795542012b62423fbca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4be7dfd5637e175025c33795542012b62423fbca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34d197de97b5f750b38ad4cbaf228467302e6bf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34d197de97b5f750b38ad4cbaf228467302e6bf1", "html_url": "https://github.com/rust-lang/rust/commit/34d197de97b5f750b38ad4cbaf228467302e6bf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34d197de97b5f750b38ad4cbaf228467302e6bf1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b714150487253d85f1a3cfa2e34818ed0647ac91", "url": "https://api.github.com/repos/rust-lang/rust/commits/b714150487253d85f1a3cfa2e34818ed0647ac91", "html_url": "https://github.com/rust-lang/rust/commit/b714150487253d85f1a3cfa2e34818ed0647ac91"}], "stats": {"total": 164, "additions": 91, "deletions": 73}, "files": [{"sha": "32df07b9c76844c6388e5da9dd89357f2da42aff", "filename": "src/lib/generic_os.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgeneric_os.rs?ref=34d197de97b5f750b38ad4cbaf228467302e6bf1", "patch": "@@ -1,12 +1,13 @@\n-import str::sbuf;\n+import istr::sbuf;\n \n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n fn getenv(n: &istr) -> option::t<istr> {\n-    let n = istr::to_estr(n);\n-    let s = os::libc::getenv(str::buf(n));\n-    ret if s as int == 0 {\n+    let s = istr::as_buf(n, { |buf|\n+        os::libc::getenv(buf)\n+    });\n+    ret if unsafe::reinterpret_cast(s) == 0 {\n         option::none::<istr>\n     } else {\n         let s = unsafe::reinterpret_cast(s);\n@@ -17,39 +18,43 @@ fn getenv(n: &istr) -> option::t<istr> {\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n fn setenv(n: &istr, v: &istr) {\n-    let n = istr::to_estr(n);\n-    let v = istr::to_estr(v);\n-    let nbuf = str::buf(n);\n-    let vbuf = str::buf(v);\n-    os::libc::setenv(nbuf, vbuf, 1);\n+    // FIXME (868)\n+    let _: () = istr::as_buf(n, { |nbuf|\n+        // FIXME (868)\n+        let _: () = istr::as_buf(v, { |vbuf|\n+            os::libc::setenv(nbuf, vbuf, 1);\n+        });\n+    });\n }\n \n #[cfg(target_os = \"win32\")]\n fn getenv(n: &istr) -> option::t<istr> {\n-    let n = istr::to_estr(n);\n-    let nbuf = str::buf(n);\n     let nsize = 256u;\n     while true {\n-        let vstr = str::alloc(nsize - 1u);\n-        let vbuf = str::buf(vstr);\n-        let res = os::kernel32::GetEnvironmentVariableA(nbuf, vbuf, nsize);\n+        let v: [u8] = [];\n+        vec::reserve(v, nsize);\n+        let res = istr::as_buf(n, { |nbuf|\n+            let vbuf = vec::to_ptr(v);\n+            os::kernel32::GetEnvironmentVariableA(nbuf, vbuf, nsize)\n+        });\n         if res == 0u {\n             ret option::none;\n         } else if res < nsize {\n-            let vbuf = unsafe::reinterpret_cast(vbuf);\n-            ret option::some(istr::str_from_cstr(vbuf));\n+            vec::unsafe::set_len(v, res);\n+            ret option::some(istr::unsafe_from_bytes(v));\n         } else { nsize = res; }\n     }\n     fail;\n }\n \n #[cfg(target_os = \"win32\")]\n fn setenv(n: &istr, v: &istr) {\n-    let n = istr::to_estr(n);\n-    let v = istr::to_estr(v);\n-    let nbuf = str::buf(n);\n-    let vbuf = str::buf(v);\n-    os::kernel32::SetEnvironmentVariableA(nbuf, vbuf);\n+    // FIXME (868)\n+    let _: () = istr::as_buf(n, { |nbuf|\n+        let _: () = istr::as_buf(v, { |vbuf|\n+            os::kernel32::SetEnvironmentVariableA(nbuf, vbuf);\n+        });\n+    });\n }\n \n // Local Variables:"}, {"sha": "50cb1c668c3c0f6e8a3b242dfb1d44726f42432c", "filename": "src/lib/io.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=34d197de97b5f750b38ad4cbaf228467302e6bf1", "patch": "@@ -175,10 +175,12 @@ fn stdin() -> reader {\n }\n \n fn file_reader(path: &istr) -> reader {\n-    let path = istr::to_estr(path);\n-    let mode = \"r\";\n-    let f = os::libc::fopen(str::buf(path), str::buf(mode));\n-    if f as uint == 0u { log_err \"error opening \" + path; fail; }\n+    let f = istr::as_buf(path, { |pathbuf|\n+        istr::as_buf(~\"r\", { |modebuf|\n+            os::libc::fopen(pathbuf, modebuf)\n+        })\n+    });\n+    if f as uint == 0u { log_err ~\"error opening \" + path; fail; }\n     ret new_reader(FILE_buf_reader(f, option::some(@FILE_res(f))));\n }\n \n@@ -278,7 +280,6 @@ obj fd_buf_writer(fd: int, res: option::t<@fd_res>) {\n }\n \n fn file_buf_writer(path: &istr, flags: &[fileflag]) -> buf_writer {\n-    let path = istr::to_estr(path);\n     let fflags: int =\n         os::libc_constants::O_WRONLY() | os::libc_constants::O_BINARY();\n     for f: fileflag in flags {\n@@ -289,10 +290,11 @@ fn file_buf_writer(path: &istr, flags: &[fileflag]) -> buf_writer {\n           none. { }\n         }\n     }\n-    let fd =\n-        os::libc::open(str::buf(path), fflags,\n+    let fd = istr::as_buf(path, { |pathbuf|\n+        os::libc::open(pathbuf, fflags,\n                        os::libc_constants::S_IRUSR() |\n-                           os::libc_constants::S_IWUSR());\n+                           os::libc_constants::S_IWUSR())\n+    });\n     if fd < 0 {\n         log_err \"error opening file for writing\";\n         log_err sys::rustrt::last_os_error();\n@@ -365,10 +367,12 @@ fn file_writer(path: &istr, flags: &[fileflag]) -> writer {\n \n // FIXME: fileflags\n fn buffered_file_buf_writer(path: &istr) -> buf_writer {\n-    let path = istr::to_estr(path);\n-    let mode = \"w\";\n-    let f = os::libc::fopen(str::buf(path), str::buf(mode));\n-    if f as uint == 0u { log_err \"error opening \" + path; fail; }\n+    let f = istr::as_buf(path, { |pathbuf|\n+        istr::as_buf(~\"w\", { |modebuf|\n+            os::libc::fopen(pathbuf, modebuf)\n+        })\n+    });\n+    if f as uint == 0u { log_err ~\"error opening \" + path; fail; }\n     ret FILE_writer(f, option::some(@FILE_res(f)));\n }\n "}, {"sha": "8e2e24ffff3722abd3e081d4f526a6caacd7eca5", "filename": "src/lib/linux_os.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Flinux_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Flinux_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flinux_os.rs?ref=34d197de97b5f750b38ad4cbaf228467302e6bf1", "patch": "@@ -1,6 +1,4 @@\n \n-import str::sbuf;\n-\n \n // FIXME Somehow merge stuff duplicated here and macosx_os.rs. Made difficult\n // by https://github.com/graydon/rust/issues#issue/268\n@@ -9,25 +7,25 @@ native \"cdecl\" mod libc = \"\" {\n     fn write(fd: int, buf: *u8, count: uint) -> int;\n     fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n     fn fwrite(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n-    fn open(s: sbuf, flags: int, mode: uint) -> int;\n+    fn open(s: istr::sbuf, flags: int, mode: uint) -> int;\n     fn close(fd: int) -> int;\n     type FILE;\n-    fn fopen(path: sbuf, mode: sbuf) -> FILE;\n-    fn fdopen(fd: int, mode: sbuf) -> FILE;\n+    fn fopen(path: istr::sbuf, mode: istr::sbuf) -> FILE;\n+    fn fdopen(fd: int, mode: istr::sbuf) -> FILE;\n     fn fclose(f: FILE);\n     fn fgetc(f: FILE) -> int;\n     fn ungetc(c: int, f: FILE);\n     fn feof(f: FILE) -> int;\n     fn fseek(f: FILE, offset: int, whence: int) -> int;\n     fn ftell(f: FILE) -> int;\n     type dir;\n-    fn opendir(d: sbuf) -> dir;\n+    fn opendir(d: istr::sbuf) -> dir;\n     fn closedir(d: dir) -> int;\n     type dirent;\n     fn readdir(d: dir) -> dirent;\n-    fn getenv(n: sbuf) -> sbuf;\n-    fn setenv(n: sbuf, v: sbuf, overwrite: int) -> int;\n-    fn unsetenv(n: sbuf) -> int;\n+    fn getenv(n: istr::sbuf) -> istr::sbuf;\n+    fn setenv(n: istr::sbuf, v: istr::sbuf, overwrite: int) -> int;\n+    fn unsetenv(n: istr::sbuf) -> int;\n     fn pipe(buf: *mutable int) -> int;\n     fn waitpid(pid: int, status: &mutable int, options: int) -> int;\n }\n@@ -64,7 +62,11 @@ fn pipe() -> {in: int, out: int} {\n     ret {in: fds.in, out: fds.out};\n }\n \n-fn fd_FILE(fd: int) -> libc::FILE { ret libc::fdopen(fd, str::buf(\"r\")); }\n+fn fd_FILE(fd: int) -> libc::FILE {\n+    ret istr::as_buf(~\"r\", { |modebuf|\n+        libc::fdopen(fd, modebuf)\n+    });\n+}\n \n fn waitpid(pid: int) -> int {\n     let status = 0;"}, {"sha": "7f2a1df5541f548ba5081c5795f1ff1a19695415", "filename": "src/lib/macos_os.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Fmacos_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Fmacos_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmacos_os.rs?ref=34d197de97b5f750b38ad4cbaf228467302e6bf1", "patch": "@@ -1,30 +1,28 @@\n \n-import str::sbuf;\n-\n native \"cdecl\" mod libc = \"\" {\n     fn read(fd: int, buf: *u8, count: uint) -> int;\n     fn write(fd: int, buf: *u8, count: uint) -> int;\n     fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n     fn fwrite(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n-    fn open(s: sbuf, flags: int, mode: uint) -> int;\n+    fn open(s: istr::sbuf, flags: int, mode: uint) -> int;\n     fn close(fd: int) -> int;\n     type FILE;\n-    fn fopen(path: sbuf, mode: sbuf) -> FILE;\n-    fn fdopen(fd: int, mode: sbuf) -> FILE;\n+    fn fopen(path: istr::sbuf, mode: istr::sbuf) -> FILE;\n+    fn fdopen(fd: int, mode: istr::sbuf) -> FILE;\n     fn fclose(f: FILE);\n     fn fgetc(f: FILE) -> int;\n     fn ungetc(c: int, f: FILE);\n     fn feof(f: FILE) -> int;\n     fn fseek(f: FILE, offset: int, whence: int) -> int;\n     fn ftell(f: FILE) -> int;\n     type dir;\n-    fn opendir(d: sbuf) -> dir;\n+    fn opendir(d: istr::sbuf) -> dir;\n     fn closedir(d: dir) -> int;\n     type dirent;\n     fn readdir(d: dir) -> dirent;\n-    fn getenv(n: sbuf) -> sbuf;\n-    fn setenv(n: sbuf, v: sbuf, overwrite: int) -> int;\n-    fn unsetenv(n: sbuf) -> int;\n+    fn getenv(n: istr::sbuf) -> istr::sbuf;\n+    fn setenv(n: istr::sbuf, v: istr::sbuf, overwrite: int) -> int;\n+    fn unsetenv(n: istr::sbuf) -> int;\n     fn pipe(buf: *mutable int) -> int;\n     fn waitpid(pid: int, status: &mutable int, options: int) -> int;\n }\n@@ -61,7 +59,11 @@ fn pipe() -> {in: int, out: int} {\n     ret {in: fds.in, out: fds.out};\n }\n \n-fn fd_FILE(fd: int) -> libc::FILE { ret libc::fdopen(fd, str::buf(\"r\")); }\n+fn fd_FILE(fd: int) -> libc::FILE {\n+    ret istr::as_buf(~\"r\", { |modebuf|\n+        libc::fdopen(fd, modebuf)\n+    });\n+}\n \n fn waitpid(pid: int) -> int {\n     let status = 0;"}, {"sha": "4fc546b07b16275c740393cf0eea620754acf5a8", "filename": "src/lib/run_program.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Frun_program.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Frun_program.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Frun_program.rs?ref=34d197de97b5f750b38ad4cbaf228467302e6bf1", "patch": "@@ -1,5 +1,5 @@\n \n-import str::sbuf;\n+import istr::sbuf;\n \n export program;\n export run_program;\n@@ -12,19 +12,21 @@ native \"rust\" mod rustrt {\n        int;\n }\n \n-fn arg_vec(prog: str, args: &[str]) -> [sbuf] {\n-    let argptrs = [str::buf(prog)];\n-    for arg: str in args { argptrs += [str::buf(arg)]; }\n-    argptrs += [0 as sbuf];\n+fn arg_vec(prog: &istr, args: &[@istr]) -> [sbuf] {\n+    let argptrs = istr::as_buf(prog, { |buf| [buf] });\n+    for arg in args {\n+        argptrs += istr::as_buf(*arg, { |buf| [buf] });\n+    }\n+    argptrs += [unsafe::reinterpret_cast(0)];\n     ret argptrs;\n }\n \n fn spawn_process(prog: &istr, args: &[istr], in_fd: int, out_fd: int,\n                  err_fd: int) -> int {\n-    let prog = istr::to_estr(prog);\n-    let args = istr::to_estrs(args);\n-    // Note: we have to hold on to this vector reference while we hold a\n-    // pointer to its buffer\n+    // Note: we have to hold on to these vector references while we hold a\n+    // pointer to their buffers\n+    let prog = prog;\n+    let args = vec::map({ |&arg| @arg }, args);\n     let argv = arg_vec(prog, args);\n     let pid =\n         rustrt::rust_run_program(vec::unsafe::to_ptr(argv),"}, {"sha": "4c1ae9c49ff415227b637dfb100a283e29190799", "filename": "src/lib/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=34d197de97b5f750b38ad4cbaf228467302e6bf1", "patch": "@@ -1,7 +1,7 @@\n \n import rustrt::sbuf;\n import uint::le;\n-export sbuf;\n+// export sbuf;\n // export rustrt;\n // export eq;\n // export lteq;\n@@ -10,7 +10,7 @@ export sbuf;\n // export is_ascii;\n export alloc;\n // export byte_len;\n-export buf;\n+// export buf;\n // export bytes;\n // export unsafe_from_byte;\n // export str_from_cstr;"}, {"sha": "b01f748d109b05fd53af65cb0b35b46fda1d280e", "filename": "src/lib/win32_os.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Fwin32_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Flib%2Fwin32_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_os.rs?ref=34d197de97b5f750b38ad4cbaf228467302e6bf1", "patch": "@@ -1,16 +1,14 @@\n \n-import str::sbuf;\n-\n native \"cdecl\" mod libc = \"\" {\n     fn read(fd: int, buf: *u8, count: uint) -> int;\n     fn write(fd: int, buf: *u8, count: uint) -> int;\n     fn fread(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n     fn fwrite(buf: *u8, size: uint, n: uint, f: libc::FILE) -> uint;\n-    fn open(s: sbuf, flags: int, mode: uint) -> int = \"_open\";\n+    fn open(s: istr::sbuf, flags: int, mode: uint) -> int = \"_open\";\n     fn close(fd: int) -> int = \"_close\";\n     type FILE;\n-    fn fopen(path: sbuf, mode: sbuf) -> FILE;\n-    fn _fdopen(fd: int, mode: sbuf) -> FILE;\n+    fn fopen(path: istr::sbuf, mode: istr::sbuf) -> FILE;\n+    fn _fdopen(fd: int, mode: istr::sbuf) -> FILE;\n     fn fclose(f: FILE);\n     fn fgetc(f: FILE) -> int;\n     fn ungetc(c: int, f: FILE);\n@@ -42,8 +40,9 @@ mod libc_constants {\n }\n \n native \"x86stdcall\" mod kernel32 {\n-    fn GetEnvironmentVariableA(n: sbuf, v: sbuf, nsize: uint) -> uint;\n-    fn SetEnvironmentVariableA(n: sbuf, v: sbuf) -> int;\n+    fn GetEnvironmentVariableA(n: istr::sbuf, v: istr::sbuf,\n+                               nsize: uint) -> uint;\n+    fn SetEnvironmentVariableA(n: istr::sbuf, v: istr::sbuf) -> int;\n }\n \n fn exec_suffix() -> istr { ret ~\".exe\"; }\n@@ -69,7 +68,11 @@ fn pipe() -> {in: int, out: int} {\n     ret {in: fds.in, out: fds.out};\n }\n \n-fn fd_FILE(fd: int) -> libc::FILE { ret libc::_fdopen(fd, str::buf(\"r\")); }\n+fn fd_FILE(fd: int) -> libc::FILE {\n+    ret istr::as_buf(~\"r\", { |modebuf|\n+        libc::_fdopen(fd, modebuf)\n+    });\n+}\n \n native \"rust\" mod rustrt {\n     fn rust_process_wait(handle: int) -> int;"}, {"sha": "d2c28ae47f18b1c08f652c8425bfa45f4bee63c5", "filename": "src/test/compile-fail/native-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34d197de97b5f750b38ad4cbaf228467302e6bf1/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnative-type-mismatch.rs?ref=34d197de97b5f750b38ad4cbaf228467302e6bf1", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected native but found native\n+// error-pattern:expected *Mb but found native\n use std;\n \n fn main() {"}]}