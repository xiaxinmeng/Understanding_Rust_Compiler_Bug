{"sha": "0afae85bc2889226fa4bb2f2a7e58947a58327dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZmFlODViYzI4ODkyMjZmYTRiYjJmMmE3ZTU4OTQ3YTU4MzI3ZGQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T22:12:45Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:36Z"}, "message": "librustc: De-`@mut` `inherent_candidates` and `extension_candidates` in\nmethod lookup", "tree": {"sha": "3632a72e8ad52e2cd474abc87b7e80b5e11b5eb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3632a72e8ad52e2cd474abc87b7e80b5e11b5eb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0afae85bc2889226fa4bb2f2a7e58947a58327dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0afae85bc2889226fa4bb2f2a7e58947a58327dd", "html_url": "https://github.com/rust-lang/rust/commit/0afae85bc2889226fa4bb2f2a7e58947a58327dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0afae85bc2889226fa4bb2f2a7e58947a58327dd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a6c1e5d3238cd9817e72006735b59a578e0ac13", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6c1e5d3238cd9817e72006735b59a578e0ac13", "html_url": "https://github.com/rust-lang/rust/commit/1a6c1e5d3238cd9817e72006735b59a578e0ac13"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "efee8c2353541d8f1118b12be6cfe9aae9f662fd", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0afae85bc2889226fa4bb2f2a7e58947a58327dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afae85bc2889226fa4bb2f2a7e58947a58327dd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=0afae85bc2889226fa4bb2f2a7e58947a58327dd", "patch": "@@ -142,8 +142,8 @@ pub fn lookup(\n         m_name: m_name,\n         supplied_tps: supplied_tps,\n         impl_dups: impl_dups,\n-        inherent_candidates: @mut ~[],\n-        extension_candidates: @mut ~[],\n+        inherent_candidates: @RefCell::new(~[]),\n+        extension_candidates: @RefCell::new(~[]),\n         deref_args: deref_args,\n         check_traits: check_traits,\n         autoderef_receiver: autoderef_receiver,\n@@ -176,8 +176,8 @@ pub struct LookupContext<'a> {\n     m_name: ast::Name,\n     supplied_tps: &'a [ty::t],\n     impl_dups: @RefCell<HashSet<DefId>>,\n-    inherent_candidates: @mut ~[Candidate],\n-    extension_candidates: @mut ~[Candidate],\n+    inherent_candidates: @RefCell<~[Candidate]>,\n+    extension_candidates: @RefCell<~[Candidate]>,\n     deref_args: check::DerefArgs,\n     check_traits: CheckTraitsFlag,\n     autoderef_receiver: AutoderefReceiverFlag,\n@@ -279,8 +279,8 @@ impl<'a> LookupContext<'a> {\n     // Candidate collection (see comment at start of file)\n \n     fn reset_candidates(&self) {\n-        *self.inherent_candidates = ~[];\n-        *self.extension_candidates = ~[];\n+        self.inherent_candidates.set(~[]);\n+        self.extension_candidates.set(~[]);\n     }\n \n     fn push_inherent_candidates(&self, self_ty: ty::t) {\n@@ -358,8 +358,10 @@ impl<'a> LookupContext<'a> {\n                 let opt_impl_infos = trait_impls.get().find(trait_did);\n                 for impl_infos in opt_impl_infos.iter() {\n                     for impl_info in impl_infos.iter() {\n+                        let mut extension_candidates =\n+                            self.extension_candidates.borrow_mut();\n                         self.push_candidates_from_impl(\n-                            self.extension_candidates, *impl_info);\n+                            extension_candidates.get(), *impl_info);\n \n                     }\n                 }\n@@ -511,7 +513,9 @@ impl<'a> LookupContext<'a> {\n                                        pos, this_bound_idx);\n \n                     debug!(\"pushing inherent candidate for param: {:?}\", cand);\n-                    self.inherent_candidates.push(cand);\n+                    let mut inherent_candidates = self.inherent_candidates\n+                                                      .borrow_mut();\n+                    inherent_candidates.get().push(cand);\n                 }\n                 None => {\n                     debug!(\"trait doesn't contain method: {:?}\",\n@@ -533,8 +537,10 @@ impl<'a> LookupContext<'a> {\n         let opt_impl_infos = inherent_impls.get().find(&did);\n         for impl_infos in opt_impl_infos.iter() {\n             for impl_info in impl_infos.iter() {\n-                self.push_candidates_from_impl(\n-                    self.inherent_candidates, *impl_info);\n+                let mut inherent_candidates = self.inherent_candidates\n+                                                  .borrow_mut();\n+                self.push_candidates_from_impl(inherent_candidates.get(),\n+                                               *impl_info);\n             }\n         }\n     }\n@@ -828,15 +834,17 @@ impl<'a> LookupContext<'a> {\n         // existing code.\n \n         debug!(\"searching inherent candidates\");\n-        match self.consider_candidates(rcvr_ty, self.inherent_candidates) {\n+        let mut inherent_candidates = self.inherent_candidates.borrow_mut();\n+        match self.consider_candidates(rcvr_ty, inherent_candidates.get()) {\n             None => {}\n             Some(mme) => {\n                 return Some(mme);\n             }\n         }\n \n         debug!(\"searching extension candidates\");\n-        match self.consider_candidates(rcvr_ty, self.extension_candidates) {\n+        let mut extension_candidates = self.extension_candidates.borrow_mut();\n+        match self.consider_candidates(rcvr_ty, extension_candidates.get()) {\n             None => {\n                 return None;\n             }\n@@ -847,9 +855,9 @@ impl<'a> LookupContext<'a> {\n     }\n \n     fn consider_candidates(&self,\n-                               rcvr_ty: ty::t,\n-                               candidates: &mut ~[Candidate])\n-                               -> Option<method_map_entry> {\n+                           rcvr_ty: ty::t,\n+                           candidates: &mut ~[Candidate])\n+                           -> Option<method_map_entry> {\n         // XXX(pcwalton): Do we need to clone here?\n         let relevant_candidates: ~[Candidate] =\n             candidates.iter().map(|c| (*c).clone())."}]}