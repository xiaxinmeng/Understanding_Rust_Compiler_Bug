{"sha": "9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "node_id": "C_kwDOAAsO6NoAKDlhOWQwZjQwYjhmMDFjNTY0MDdlMTA3NzIzMWVkZjYxZmZjZjE0ZmE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-19T02:32:55Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-19T02:34:37Z"}, "message": "Improve spans for RPITIT object-safety errors", "tree": {"sha": "81edc66d3399d04d9d1d6cd0e35fb8dd5e782409", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81edc66d3399d04d9d1d6cd0e35fb8dd5e782409"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "html_url": "https://github.com/rust-lang/rust/commit/9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a9d0f40b8f01c56407e1077231edf61ffcf14fa/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4165f3a965e258531928180195637455299c6f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4165f3a965e258531928180195637455299c6f3", "html_url": "https://github.com/rust-lang/rust/commit/c4165f3a965e258531928180195637455299c6f3"}], "stats": {"total": 83, "additions": 69, "deletions": 14}, "files": [{"sha": "1890c0e24bb4419c1ec17750293b75764b4a0167", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a9d0f40b8f01c56407e1077231edf61ffcf14fa/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9d0f40b8f01c56407e1077231edf61ffcf14fa/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "patch": "@@ -924,10 +924,13 @@ impl ObjectSafetyViolation {\n             }\n             ObjectSafetyViolation::Method(\n                 name,\n-                MethodViolationCode::ReferencesImplTraitInTrait,\n+                MethodViolationCode::ReferencesImplTraitInTrait(_),\n                 _,\n             ) => format!(\"method `{}` references an `impl Trait` type in its return type\", name)\n                 .into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::AsyncFn, _) => {\n+                format!(\"method `{}` is `async`\", name).into()\n+            }\n             ObjectSafetyViolation::Method(\n                 name,\n                 MethodViolationCode::WhereClauseReferencesSelf,\n@@ -1035,7 +1038,10 @@ pub enum MethodViolationCode {\n     ReferencesSelfOutput,\n \n     /// e.g., `fn foo(&self) -> impl Sized`\n-    ReferencesImplTraitInTrait,\n+    ReferencesImplTraitInTrait(Span),\n+\n+    /// e.g., `async fn foo(&self)`\n+    AsyncFn,\n \n     /// e.g., `fn foo(&self) where Self: Clone`\n     WhereClauseReferencesSelf,"}, {"sha": "9745e0137ee9f63f0dc95218d4579ac2d22fd3ad", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a9d0f40b8f01c56407e1077231edf61ffcf14fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9d0f40b8f01c56407e1077231edf61ffcf14fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "patch": "@@ -375,6 +375,7 @@ fn object_safety_violation_for_method(\n         let span = match (&v, node) {\n             (MethodViolationCode::ReferencesSelfInput(Some(span)), _) => *span,\n             (MethodViolationCode::UndispatchableReceiver(Some(span)), _) => *span,\n+            (MethodViolationCode::ReferencesImplTraitInTrait(span), _) => *span,\n             (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n                 node.fn_decl().map_or(method.ident(tcx).span, |decl| decl.output.span())\n             }\n@@ -437,8 +438,8 @@ fn virtual_call_violation_for_method<'tcx>(\n     if contains_illegal_self_type_reference(tcx, trait_def_id, sig.output()) {\n         return Some(MethodViolationCode::ReferencesSelfOutput);\n     }\n-    if contains_illegal_impl_trait_in_trait(tcx, sig.output()) {\n-        return Some(MethodViolationCode::ReferencesImplTraitInTrait);\n+    if let Some(code) = contains_illegal_impl_trait_in_trait(tcx, method.def_id, sig.output()) {\n+        return Some(code);\n     }\n \n     // We can't monomorphize things like `fn foo<A>(...)`.\n@@ -864,16 +865,24 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n \n pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    fn_def_id: DefId,\n     ty: ty::Binder<'tcx, Ty<'tcx>>,\n-) -> bool {\n+) -> Option<MethodViolationCode> {\n+    // This would be caught below, but rendering the error as a separate\n+    // `async-specific` message is better.\n+    if tcx.asyncness(fn_def_id).is_async() {\n+        return Some(MethodViolationCode::AsyncFn);\n+    }\n+\n     // FIXME(RPITIT): Perhaps we should use a visitor here?\n-    ty.skip_binder().walk().any(|arg| {\n+    ty.skip_binder().walk().find_map(|arg| {\n         if let ty::GenericArgKind::Type(ty) = arg.unpack()\n             && let ty::Projection(proj) = ty.kind()\n+            && tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n         {\n-            tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+            Some(MethodViolationCode::ReferencesImplTraitInTrait(tcx.def_span(proj.item_def_id)))\n         } else {\n-            false\n+            None\n         }\n     })\n }"}, {"sha": "a8bc35f7e0c59cfc0ad9944ed6b4ded6bedeb700", "filename": "src/test/ui/async-await/in-trait/object-safety.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9a9d0f40b8f01c56407e1077231edf61ffcf14fa/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a9d0f40b8f01c56407e1077231edf61ffcf14fa/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs?ref=9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "patch": "@@ -0,0 +1,13 @@\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait Foo {\n+    async fn foo(&self);\n+}\n+\n+fn main() {\n+    let x: &dyn Foo = todo!();\n+    //~^ ERROR the trait `Foo` cannot be made into an object\n+}"}, {"sha": "0b318f71f395d85d4e68c25efe84c66ecd25f044", "filename": "src/test/ui/async-await/in-trait/object-safety.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a9d0f40b8f01c56407e1077231edf61ffcf14fa/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a9d0f40b8f01c56407e1077231edf61ffcf14fa/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr?ref=9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/object-safety.rs:3:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:11:12\n+   |\n+LL |     let x: &dyn Foo = todo!();\n+   |            ^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:7:14\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     async fn foo(&self);\n+   |              ^^^ ...because method `foo` is `async`\n+   = help: consider moving `foo` to another trait\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "ca0e760ff6d35fcad92ad1fa7baca2ad132009d3", "filename": "src/test/ui/impl-trait/in-trait/object-safety.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a9d0f40b8f01c56407e1077231edf61ffcf14fa/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a9d0f40b8f01c56407e1077231edf61ffcf14fa/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr?ref=9a9d0f40b8f01c56407e1077231edf61ffcf14fa", "patch": "@@ -5,12 +5,12 @@ LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n@@ -20,12 +20,12 @@ LL |     let s = i.baz();\n    |             ^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n@@ -35,12 +35,12 @@ LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n    = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n    = note: required by cast to type `Box<dyn Foo>`"}]}