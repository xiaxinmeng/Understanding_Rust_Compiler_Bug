{"sha": "ce795d9ca88bc676aa22efcf2292c475cd1ae39e", "node_id": "C_kwDOAAsO6NoAKGNlNzk1ZDljYTg4YmM2NzZhYTIyZWZjZjIyOTJjNDc1Y2QxYWUzOWU", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-12T03:36:43Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-12T03:39:15Z"}, "message": "rustdoc: collapse edit distance state into an object", "tree": {"sha": "f5f641eb0dc8dd1b676cf01cef8740b4901ebd7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5f641eb0dc8dd1b676cf01cef8740b4901ebd7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce795d9ca88bc676aa22efcf2292c475cd1ae39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce795d9ca88bc676aa22efcf2292c475cd1ae39e", "html_url": "https://github.com/rust-lang/rust/commit/ce795d9ca88bc676aa22efcf2292c475cd1ae39e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce795d9ca88bc676aa22efcf2292c475cd1ae39e/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd9e5e3fab422684f1768561e19869fbf5f6277", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd9e5e3fab422684f1768561e19869fbf5f6277", "html_url": "https://github.com/rust-lang/rust/commit/dfd9e5e3fab422684f1768561e19869fbf5f6277"}], "stats": {"total": 166, "additions": 86, "deletions": 80}, "files": [{"sha": "00d3ef9374d48c8a1dce4cd5b181803e62376aa3", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 86, "deletions": 80, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/ce795d9ca88bc676aa22efcf2292c475cd1ae39e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/ce795d9ca88bc676aa22efcf2292c475cd1ae39e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=ce795d9ca88bc676aa22efcf2292c475cd1ae39e", "patch": "@@ -90,91 +90,97 @@ function printTab(nb) {\n  * algorithm should not matter to the caller of the methods, which is why it is not noted in the\n  * documentation.\n  */\n-let editDistanceCurrent = [];\n-let editDistancePrev = [];\n-let editDistancePrevPrev = [];\n-function editDistance(a, b, limit) {\n-    // Ensure that `b` is the shorter string, minimizing memory use.\n-    if (a.length < b.length) {\n-        const aTmp = a;\n-        a = b;\n-        b = aTmp;\n-    }\n-\n-    const minDist = a.length - b.length;\n-    // If we know the limit will be exceeded, we can return early.\n-    if (minDist > limit) {\n-        return limit + 1;\n-    }\n-\n-    // Strip common prefix.\n-    // We know that `b` is the shorter string, so we don't need to check\n-    // `a.length`.\n-    while (b.length > 0 && b[0] === a[0]) {\n-        a = a.substring(1);\n-        b = b.substring(1);\n-    }\n-    // Strip common suffix.\n-    while (b.length > 0 && b[b.length - 1] === a[a.length - 1]) {\n-        a = a.substring(0, a.length - 1);\n-        b = b.substring(0, b.length - 1);\n-    }\n-\n-    // If either string is empty, the distance is the length of the other.\n-    // We know that `b` is the shorter string, so we don't need to check `a`.\n-    if (b.length === 0) {\n-        return minDist;\n-    }\n-\n-    const aLength = a.length;\n-    const bLength = b.length;\n-\n-    for (let i = 0; i <= bLength; ++i) {\n-        editDistanceCurrent[i] = 0;\n-        editDistancePrev[i] = i;\n-        editDistancePrevPrev[i] = Number.MAX_VALUE;\n-    }\n-\n-    // row by row\n-    for (let i = 1; i <= aLength; ++i) {\n-        editDistanceCurrent[0] = i;\n-        const aIdx = i - 1;\n-\n-        // column by column\n-        for (let j = 1; j <= bLength; ++j) {\n-            const bIdx = j - 1;\n-\n-            // There is no cost to substitute a character with itself.\n-            const substitutionCost = a[aIdx] === b[bIdx] ? 0 : 1;\n-\n-            editDistanceCurrent[j] = Math.min(\n-                // deletion\n-                editDistancePrev[j] + 1,\n-                // insertion\n-                editDistanceCurrent[j - 1] + 1,\n-                // substitution\n-                editDistancePrev[j - 1] + substitutionCost\n-            );\n-\n-            if ((i > 1) && (j > 1) && (a[aIdx] === b[bIdx - 1]) && (a[aIdx - 1] === b[bIdx])) {\n-                // transposition\n-                editDistanceCurrent[j] = Math.min(\n-                    editDistanceCurrent[j],\n-                    editDistancePrevPrev[j - 2] + 1\n+const editDistanceState = {\n+    current: [],\n+    prev: [],\n+    prevPrev: [],\n+    calculate: function calculate(a, b, limit) {\n+        // Ensure that `b` is the shorter string, minimizing memory use.\n+        if (a.length < b.length) {\n+            const aTmp = a;\n+            a = b;\n+            b = aTmp;\n+        }\n+\n+        const minDist = a.length - b.length;\n+        // If we know the limit will be exceeded, we can return early.\n+        if (minDist > limit) {\n+            return limit + 1;\n+        }\n+\n+        // Strip common prefix.\n+        // We know that `b` is the shorter string, so we don't need to check\n+        // `a.length`.\n+        while (b.length > 0 && b[0] === a[0]) {\n+            a = a.substring(1);\n+            b = b.substring(1);\n+        }\n+        // Strip common suffix.\n+        while (b.length > 0 && b[b.length - 1] === a[a.length - 1]) {\n+            a = a.substring(0, a.length - 1);\n+            b = b.substring(0, b.length - 1);\n+        }\n+\n+        // If either string is empty, the distance is the length of the other.\n+        // We know that `b` is the shorter string, so we don't need to check `a`.\n+        if (b.length === 0) {\n+            return minDist;\n+        }\n+\n+        const aLength = a.length;\n+        const bLength = b.length;\n+\n+        for (let i = 0; i <= bLength; ++i) {\n+            this.current[i] = 0;\n+            this.prev[i] = i;\n+            this.prevPrev[i] = Number.MAX_VALUE;\n+        }\n+\n+        // row by row\n+        for (let i = 1; i <= aLength; ++i) {\n+            this.current[0] = i;\n+            const aIdx = i - 1;\n+\n+            // column by column\n+            for (let j = 1; j <= bLength; ++j) {\n+                const bIdx = j - 1;\n+\n+                // There is no cost to substitute a character with itself.\n+                const substitutionCost = a[aIdx] === b[bIdx] ? 0 : 1;\n+\n+                this.current[j] = Math.min(\n+                    // deletion\n+                    this.prev[j] + 1,\n+                    // insertion\n+                    this.current[j - 1] + 1,\n+                    // substitution\n+                    this.prev[j - 1] + substitutionCost\n                 );\n+\n+                if ((i > 1) && (j > 1) && (a[aIdx] === b[bIdx - 1]) && (a[aIdx - 1] === b[bIdx])) {\n+                    // transposition\n+                    this.current[j] = Math.min(\n+                        this.current[j],\n+                        this.prevPrev[j - 2] + 1\n+                    );\n+                }\n             }\n+\n+            // Rotate the buffers, reusing the memory\n+            const prevPrevTmp = this.prevPrev;\n+            this.prevPrev = this.prev;\n+            this.prev = this.current;\n+            this.current = prevPrevTmp;\n         }\n \n-        // Rotate the buffers, reusing the memory\n-        const prevPrevTmp = editDistancePrevPrev;\n-        editDistancePrevPrev = editDistancePrev;\n-        editDistancePrev = editDistanceCurrent;\n-        editDistanceCurrent = prevPrevTmp;\n-    }\n+        // `prev` because we already rotated the buffers.\n+        const distance = this.prev[bLength];\n+        return distance <= limit ? distance : (limit + 1);\n+    },\n+};\n \n-    // `prev` because we already rotated the buffers.\n-    const distance = editDistancePrev[bLength];\n-    return distance <= limit ? distance : (limit + 1);\n+function editDistance(a, b, limit) {\n+    return editDistanceState.calculate(a, b, limit);\n }\n \n function initSearch(rawSearchIndex) {"}]}