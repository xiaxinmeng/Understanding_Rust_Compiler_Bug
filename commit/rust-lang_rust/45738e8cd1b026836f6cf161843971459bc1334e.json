{"sha": "45738e8cd1b026836f6cf161843971459bc1334e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzM4ZThjZDFiMDI2ODM2ZjZjZjE2MTg0Mzk3MTQ1OWJjMTMzNGU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-22T23:31:58Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-12T18:19:07Z"}, "message": "Increase verbosity of bound restriction suggestions\n\n- Make the bound restriction suggestion `span_suggestion_verbose`.\n- Fix whitespace typo.", "tree": {"sha": "4ac1d34dcfbbc6376b0b3bd1a8457c403b8132c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ac1d34dcfbbc6376b0b3bd1a8457c403b8132c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45738e8cd1b026836f6cf161843971459bc1334e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45738e8cd1b026836f6cf161843971459bc1334e", "html_url": "https://github.com/rust-lang/rust/commit/45738e8cd1b026836f6cf161843971459bc1334e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45738e8cd1b026836f6cf161843971459bc1334e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "545320a22ff61c30e932200c07466ba3f2be76aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/545320a22ff61c30e932200c07466ba3f2be76aa", "html_url": "https://github.com/rust-lang/rust/commit/545320a22ff61c30e932200c07466ba3f2be76aa"}], "stats": {"total": 338, "additions": 215, "deletions": 123}, "files": [{"sha": "c9eb2ee6c5a333fbe98a67a6a6df5bdd51c2f809", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -156,7 +156,7 @@ fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, St\n     (\n         generics.where_clause.span_for_predicates_or_empty_place().shrink_to_hi(),\n         format!(\n-            \"{} {} \",\n+            \"{} {}\",\n             if !generics.where_clause.predicates.is_empty() { \",\" } else { \" where\" },\n             pred,\n         ),\n@@ -263,7 +263,7 @@ fn suggest_restriction(\n         );\n     } else {\n         // Trivial case: `T` needs an extra bound: `T: Bound`.\n-        let (sp, sugg) = match super_traits {\n+        let (sp, suggestion) = match super_traits {\n             None => {\n                 predicate_constraint(generics, trait_ref.without_const().to_predicate().to_string())\n             }\n@@ -279,8 +279,12 @@ fn suggest_restriction(\n             },\n         };\n \n-        let appl = Applicability::MachineApplicable;\n-        err.span_suggestion(sp, &format!(\"consider further restricting {}\", msg), sugg, appl);\n+        err.span_suggestion_verbose(\n+            sp,\n+            &format!(\"consider further restricting {}\", msg),\n+            suggestion,\n+            Applicability::MachineApplicable,\n+        );\n     }\n }\n "}, {"sha": "cbacc3610dcf721c5dbbb1657ffc854c1491cb3b", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -16,11 +16,13 @@ error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterato\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n    |\n LL | fn assume_case1<T: Case1>() {\n-   |                    ^^^^^   - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator`\n-   |                    |\n-   |                    `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n+   |                    ^^^^^ `<<T as Case1>::C as std::iter::Iterator>::Item` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n+help: consider further restricting the associated type\n+   |\n+LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as std::iter::Iterator>::Item: std::iter::Iterator {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n@@ -32,11 +34,13 @@ LL |         Send + Iterator<Item:\n    |         ---- required by this bound in `Case1`\n ...\n LL | fn assume_case1<T: Case1>() {\n-   |                    ^^^^^   - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send`\n-   |                    |\n-   |                    `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n+   |                    ^^^^^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n+help: consider further restricting the associated type\n+   |\n+LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20\n@@ -48,11 +52,13 @@ LL |         > + Sync>;\n    |             ---- required by this bound in `Case1`\n ...\n LL | fn assume_case1<T: Case1>() {\n-   |                    ^^^^^   - help: consider further restricting the associated type: `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync`\n-   |                    |\n-   |                    `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n+   |                    ^^^^^ `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n+help: consider further restricting the associated type\n+   |\n+LL | fn assume_case1<T: Case1>() where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync {\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:36:20"}, {"sha": "68ee38d16b3f3ce457ca8e350a1b28b5eb55d4ac", "filename": "src/test/ui/associated-types/associated-types-bound-failure.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.fixed?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -14,7 +14,7 @@ pub trait GetToInt\n }\n \n fn foo<G>(g: G) -> isize\n-    where G : GetToInt, <G as GetToInt>::R: ToInt \n+    where G : GetToInt, <G as GetToInt>::R: ToInt\n {\n     ToInt::to_int(&g.get()) //~ ERROR E0277\n }"}, {"sha": "ab8909d1092baf3411cead06af2b90de50634cd3", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -4,11 +4,13 @@ error[E0277]: the trait bound `<G as GetToInt>::R: ToInt` is not satisfied\n LL |     fn to_int(&self) -> isize;\n    |     -------------------------- required by `ToInt::to_int`\n ...\n-LL |     where G : GetToInt\n-   |                       - help: consider further restricting the associated type: `, <G as GetToInt>::R: ToInt`\n-LL | {\n LL |     ToInt::to_int(&g.get())\n    |                   ^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n+   |\n+help: consider further restricting the associated type\n+   |\n+LL |     where G : GetToInt, <G as GetToInt>::R: ToInt\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "80bbef17469db31ecb96ff0b785ab0180ca6451b", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.fixed?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -7,7 +7,7 @@ trait Get {\n }\n \n trait Other {\n-    fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get  {}\n+    fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}\n     //~^ ERROR the trait bound `Self: Get` is not satisfied\n }\n "}, {"sha": "6d7289bd0712ba897074def15916d9b3a83d9b34", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -2,10 +2,12 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-for-unimpl-trait.rs:10:5\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^^\n-   |     |                                                       |\n-   |     |                                                       help: consider further restricting `Self`: `where Self: Get`\n-   |     the trait `Get` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}\n+   |                                                              ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "dfe62aa5d6b00b8e5d0ec23137ee721eeb62c42e", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -2,10 +2,12 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait-2.rs:17:5\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^^\n-   |     |                                                       |\n-   |     |                                                       help: consider further restricting `Self`: `where Self: Get`\n-   |     the trait `Get` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}\n+   |                                                              ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f0f2451a1eceac5216475e92a120c398991f7e20", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -2,10 +2,12 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait.rs:17:5\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^^\n-   |     |                                                       |\n-   |     |                                                       help: consider further restricting `Self`: `where Self: Get`\n-   |     the trait `Get` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}\n+   |                                                              ^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `(T, U): Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait.rs:22:5"}, {"sha": "9bc308465ebdd5291eec215eddfbeb38bdcbbffd", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.fixed?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -7,7 +7,7 @@ trait Get {\n }\n \n trait Other {\n-    fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get ;\n+    fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get;\n     //~^ ERROR E0277\n }\n "}, {"sha": "4528f03c54a639b276004f2fc0eb1727ee0f770f", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -2,10 +2,12 @@ error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:10:5\n    |\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |                                                       |\n-   |     |                                                       help: consider further restricting `Self`: `where Self: Get`\n-   |     the trait `Get` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get;\n+   |                                                              ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9837796e308def5a45c55b7211b60e6cf62b9061", "filename": "src/test/ui/associated-types/associated-types-unsized.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.fixed?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -6,7 +6,7 @@ trait Get {\n     fn get(&self) -> <Self as Get>::Value;\n }\n \n-fn foo<T:Get>(t: T) where <T as Get>::Value: std::marker::Sized  {\n+fn foo<T:Get>(t: T) where <T as Get>::Value: std::marker::Sized {\n     let x = t.get(); //~ ERROR the size for values of type\n }\n "}, {"sha": "6daba54ac69694a7c33a768231ce1c6b26afe5ac", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -1,15 +1,17 @@\n error[E0277]: the size for values of type `<T as Get>::Value` cannot be known at compilation time\n   --> $DIR/associated-types-unsized.rs:10:9\n    |\n-LL | fn foo<T:Get>(t: T) {\n-   |                    - help: consider further restricting the associated type: `where <T as Get>::Value: std::marker::Sized`\n LL |     let x = t.get();\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<T as Get>::Value`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider further restricting the associated type\n+   |\n+LL | fn foo<T:Get>(t: T) where <T as Get>::Value: std::marker::Sized {\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8676c1fa223193aa718dde9d21519743d595bf1c", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -85,25 +85,29 @@ error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not\n   --> $DIR/defaults-suitability.rs:72:15\n    |\n LL | trait Foo2<T> {\n-   | -------------- help: consider further restricting the associated type: `where <Self as Foo2<T>>::Baz: std::clone::Clone`\n-   | |\n-   | required by `Foo2`\n+   | ------------- required by `Foo2`\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n    |\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo2<T>>::Baz>`\n+help: consider further restricting the associated type\n+   |\n+LL | trait Foo2<T> where <Self as Foo2<T>>::Baz: std::clone::Clone {\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:81:15\n    |\n LL | trait Foo25<T: Clone> {\n-   | ---------------------- help: consider further restricting the associated type: `where <Self as Foo25<T>>::Baz: std::clone::Clone`\n-   | |\n-   | required by `Foo25`\n+   | --------------------- required by `Foo25`\n LL |     type Bar: Clone = Vec<Self::Baz>;\n    |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n    |\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo25<T>>::Baz>`\n+help: consider further restricting the associated type\n+   |\n+LL | trait Foo25<T: Clone> where <Self as Foo25<T>>::Baz: std::clone::Clone {\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:90:16"}, {"sha": "69c310766c1ccf5d5c76cb2c038ab81ed1294b82", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -2,50 +2,60 @@ error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:21:18\n    |\n LL | trait UncheckedCopy: Sized {\n-   | --------------------------- help: consider further restricting `Self`: `+ std::marker::Copy`\n-   | |\n-   | required by `UncheckedCopy`\n+   | -------------------------- required by `UncheckedCopy`\n ...\n LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait UncheckedCopy: Sized + std::marker::Copy {\n+   |                            ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-1.rs:25:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | --------------------------- help: consider further restricting `Self`: `+ std::ops::AddAssign<&'static str>`\n-   | |\n-   | required by `UncheckedCopy`\n+   | -------------------------- required by `UncheckedCopy`\n ...\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n+help: consider further restricting `Self`\n+   |\n+LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:23:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | --------------------------- help: consider further restricting `Self`: `+ std::ops::Deref`\n-   | |\n-   | required by `UncheckedCopy`\n+   | -------------------------- required by `UncheckedCopy`\n ...\n LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait UncheckedCopy: Sized + std::ops::Deref {\n+   |                            ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-1.rs:28:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | --------------------------- help: consider further restricting `Self`: `+ std::fmt::Display`\n-   | |\n-   | required by `UncheckedCopy`\n+   | -------------------------- required by `UncheckedCopy`\n ...\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Self`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+help: consider further restricting `Self`\n+   |\n+LL | trait UncheckedCopy: Sized + std::fmt::Display {\n+   |                            ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-1.rs:41:9"}, {"sha": "84f0ba7529ea2cd40e41c71b92193405b546348b", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -2,50 +2,60 @@ error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:21:18\n    |\n LL | trait UncheckedCopy: Sized {\n-   | --------------------------- help: consider further restricting `Self`: `+ std::marker::Copy`\n-   | |\n-   | required by `UncheckedCopy`\n+   | -------------------------- required by `UncheckedCopy`\n ...\n LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait UncheckedCopy: Sized + std::marker::Copy {\n+   |                            ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-2.rs:25:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | --------------------------- help: consider further restricting `Self`: `+ std::ops::AddAssign<&'static str>`\n-   | |\n-   | required by `UncheckedCopy`\n+   | -------------------------- required by `UncheckedCopy`\n ...\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n+help: consider further restricting `Self`\n+   |\n+LL | trait UncheckedCopy: Sized + std::ops::AddAssign<&'static str> {\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:23:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | --------------------------- help: consider further restricting `Self`: `+ std::ops::Deref`\n-   | |\n-   | required by `UncheckedCopy`\n+   | -------------------------- required by `UncheckedCopy`\n ...\n LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait UncheckedCopy: Sized + std::ops::Deref {\n+   |                            ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-2.rs:28:7\n    |\n LL | trait UncheckedCopy: Sized {\n-   | --------------------------- help: consider further restricting `Self`: `+ std::fmt::Display`\n-   | |\n-   | required by `UncheckedCopy`\n+   | -------------------------- required by `UncheckedCopy`\n ...\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Self`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+help: consider further restricting `Self`\n+   |\n+LL | trait UncheckedCopy: Sized + std::fmt::Display {\n+   |                            ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-2.rs:41:9"}, {"sha": "82e76ff0b7cb50d2126a364ff3d832535109689d", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -2,14 +2,16 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n   --> $DIR/issue-63593.rs:9:5\n    |\n LL | trait MyTrait {\n-   | -------------- help: consider further restricting `Self`: `: std::marker::Sized`\n-   | |\n-   | required by `MyTrait`\n+   | ------------- required by `MyTrait`\n LL |     type This = Self;\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider further restricting `Self`\n+   |\n+LL | trait MyTrait: std::marker::Sized {\n+   |              ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a37573dffff4403be106a8ca50310312c1b5424a", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n   --> $DIR/trait-with-supertraits-needing-sized-self.rs:3:22\n    |\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> {}\n-   |                      ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time               - help: consider further restricting `Self`: `+ std::marker::Sized`\n+   |                      ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    | \n   ::: $SRC_DIR/libcore/ops/arith.rs:LL:COL\n    |\n@@ -11,6 +11,10 @@ LL | pub trait Add<Rhs = Self> {\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider further restricting `Self`\n+   |\n+LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + std::marker::Sized {}\n+   |                                                                                                ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "038490bbd7c7b6aee3a98edd1557f806d4be382f", "filename": "src/test/ui/issues/issue-22872.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22872.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: `<P as Process<'_>>::Item` is not an iterator\n   --> $DIR/issue-22872.rs:20:40\n    |\n-LL | fn push_process<P>(process: P) where P: Process<'static> {\n-   |                                                         - help: consider further restricting the associated type: `, <P as Process<'_>>::Item: std::iter::Iterator`\n LL |     let _: Box<dyn for<'b> Wrap<'b>> = Box::new(Wrapper(process));\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ `<P as Process<'_>>::Item` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `<P as Process<'_>>::Item`\n    = note: required because of the requirements on the impl of `for<'b> Wrap<'b>` for `Wrapper<P>`\n    = note: required for the cast to the object type `dyn for<'b> Wrap<'b>`\n+help: consider further restricting the associated type\n+   |\n+LL | fn push_process<P>(process: P) where P: Process<'static>, <P as Process<'_>>::Item: std::iter::Iterator {\n+   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3eb9d3c62039f0b945b1feacecd12d790205c135", "filename": "src/test/ui/issues/issue-27078.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27078.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -2,14 +2,16 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n   --> $DIR/issue-27078.rs:5:12\n    |\n LL |     fn foo(self) -> &'static i32 {\n-   |            ^^^^                 - help: consider further restricting `Self`: `where Self: std::marker::Sized`\n-   |            |\n-   |            doesn't have a size known at compile-time\n+   |            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider further restricting `Self`\n+   |\n+LL |     fn foo(self) -> &'static i32 where Self: std::marker::Sized {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0d4797a7a067353359371a75bba3175e2d7a3e57", "filename": "src/test/ui/issues/issue-42312.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42312.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -2,14 +2,16 @@ error[E0277]: the size for values of type `<Self as std::ops::Deref>::Target` ca\n   --> $DIR/issue-42312.rs:4:12\n    |\n LL |     fn baz(_: Self::Target) where Self: Deref {}\n-   |            ^                                 - help: consider further restricting the associated type: `, <Self as std::ops::Deref>::Target: std::marker::Sized`\n-   |            |\n-   |            doesn't have a size known at compile-time\n+   |            ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<Self as std::ops::Deref>::Target`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: all function arguments must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider further restricting the associated type\n+   |\n+LL |     fn baz(_: Self::Target) where Self: Deref, <Self as std::ops::Deref>::Target: std::marker::Sized {}\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `(dyn std::string::ToString + 'static)` cannot be known at compilation time\n   --> $DIR/issue-42312.rs:8:10"}, {"sha": "fb0914a8743e833d41bdddd56a99f27b82a3f64e", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -10,7 +10,7 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn foo<I: Iterator>(constraints: I) where <I as std::iter::Iterator>::Item: std::fmt::Debug  {\n+LL | fn foo<I: Iterator>(constraints: I) where <I as std::iter::Iterator>::Item: std::fmt::Debug {\n    |       ^^^^^^^^^^^^^              ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<impl Iterator as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n@@ -25,7 +25,7 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn bar<T, I: Iterator>(t: T, constraints: I) where T: std::fmt::Debug, <I as std::iter::Iterator>::Item: std::fmt::Debug  {\n+LL | fn bar<T, I: Iterator>(t: T, constraints: I) where T: std::fmt::Debug, <I as std::iter::Iterator>::Item: std::fmt::Debug {\n    |         ^^^^^^^^^^^^^                     ^                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<impl Iterator as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n@@ -40,7 +40,7 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn baz<I: Iterator>(t: impl std::fmt::Debug, constraints: I) where <I as std::iter::Iterator>::Item: std::fmt::Debug  {\n+LL | fn baz<I: Iterator>(t: impl std::fmt::Debug, constraints: I) where <I as std::iter::Iterator>::Item: std::fmt::Debug {\n    |       ^^^^^^^^^^^^^                                       ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<impl Iterator as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n@@ -55,7 +55,7 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn bat<I, T: std::fmt::Debug, U: Iterator>(t: T, constraints: U, _: I) where <U as std::iter::Iterator>::Item: std::fmt::Debug  {\n+LL | fn bat<I, T: std::fmt::Debug, U: Iterator>(t: T, constraints: U, _: I) where <U as std::iter::Iterator>::Item: std::fmt::Debug {\n    |                             ^^^^^^^^^^^^^                     ^        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `<impl Iterator + std::fmt::Debug as std::iter::Iterator>::Item` doesn't implement `std::fmt::Debug`\n@@ -70,7 +70,7 @@ LL | fn qux(_: impl std::fmt::Debug) {}\n    = help: the trait `std::fmt::Debug` is not implemented for `<impl Iterator + std::fmt::Debug as std::iter::Iterator>::Item`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n-LL | fn bak<I: Iterator + std::fmt::Debug>(constraints: I) where <I as std::iter::Iterator>::Item: std::fmt::Debug  {\n+LL | fn bak<I: Iterator + std::fmt::Debug>(constraints: I) where <I as std::iter::Iterator>::Item: std::fmt::Debug {\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^              ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors"}, {"sha": "a8ea2147961839c9fcda2bccd00c66660a0e6210", "filename": "src/test/ui/suggestions/missing-assoc-type-bound-restriction.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-assoc-type-bound-restriction.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -8,9 +8,12 @@ LL |     type Assoc: Child<Self::Ty>;\n    |                 --------------- required by this bound in `Parent`\n ...\n LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n-   |                   ^^^^^^                              - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n-   |                   |\n-   |                   the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+   |                   ^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+   |\n+help: consider further restricting the associated type\n+   |\n+LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> where <T as Parent>::Assoc: Child<A> {\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n   --> $DIR/missing-assoc-type-bound-restriction.rs:20:18\n@@ -21,13 +24,14 @@ LL |     type Ty;\n LL |     type Assoc: Child<Self::Ty>;\n    |                 --------------- required by this bound in `Parent`\n ...\n-LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n-   |                                                       - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n-...\n LL |     type Assoc = ChildWrapper<T::Assoc>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n    |\n    = note: required because of the requirements on the impl of `Child<A>` for `ChildWrapper<<T as Parent>::Assoc>`\n+help: consider further restricting the associated type\n+   |\n+LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> where <T as Parent>::Assoc: Child<A> {\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `<T as Parent>::Assoc: Child<A>` is not satisfied\n   --> $DIR/missing-assoc-type-bound-restriction.rs:20:5\n@@ -38,11 +42,13 @@ LL |     type Ty;\n LL |     type Assoc: Child<Self::Ty>;\n    |                 --------------- required by this bound in `Parent`\n ...\n-LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n-   |                                                       - help: consider further restricting the associated type: `where <T as Parent>::Assoc: Child<A>`\n-...\n LL |     type Assoc = ChildWrapper<T::Assoc>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Child<A>` is not implemented for `<T as Parent>::Assoc`\n+   |\n+help: consider further restricting the associated type\n+   |\n+LL | impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> where <T as Parent>::Assoc: Child<A> {\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e0039f2a316026c57f3a6a298d06cb98cc60a8d7", "filename": "src/test/ui/type/type-params-in-different-spaces-2.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -4,21 +4,27 @@ error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n LL |     fn op(_: T) -> Self;\n    |     -------------------- required by `Tr::op`\n ...\n-LL |     fn test<U>(u: U) -> Self {\n-   |                             - help: consider further restricting `Self`: `where Self: Tr<U>`\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn test<U>(u: U) -> Self where Self: Tr<U> {\n+   |                              ^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n   --> $DIR/type-params-in-different-spaces-2.rs:16:9\n    |\n LL |     fn op(_: T) -> Self;\n    |     -------------------- required by `Tr::op`\n ...\n-LL |     fn test<U>(u: U) -> Self {\n-   |                             - help: consider further restricting `Self`: `where Self: Tr<U>`\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn test<U>(u: U) -> Self where Self: Tr<U> {\n+   |                              ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dd1195b99f694d536110be9c53de6f2f76a85c37", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.fixed?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -7,7 +7,7 @@ trait Trait {\n     type AssocType;\n     fn dummy(&self) { }\n }\n-fn bar<T:Trait+Send>() where <T as Trait>::AssocType: std::marker::Send  {\n+fn bar<T:Trait+Send>() where <T as Trait>::AssocType: std::marker::Send {\n     is_send::<T::AssocType>(); //~ ERROR E0277\n }\n "}, {"sha": "f97d41637ba0460396084fad19f5852315c78416", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -1,15 +1,17 @@\n error[E0277]: `<T as Trait>::AssocType` cannot be sent between threads safely\n   --> $DIR/typeck-default-trait-impl-assoc-type.rs:11:5\n    |\n-LL | fn bar<T:Trait+Send>() {\n-   |                       - help: consider further restricting the associated type: `where <T as Trait>::AssocType: std::marker::Send`\n LL |     is_send::<T::AssocType>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `<T as Trait>::AssocType` cannot be sent between threads safely\n ...\n LL | fn is_send<T:Send>() {\n    |              ---- required by this bound in `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<T as Trait>::AssocType`\n+help: consider further restricting the associated type\n+   |\n+LL | fn bar<T:Trait+Send>() where <T as Trait>::AssocType: std::marker::Send {\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e2892e3d24888702fac98389bdca3879ce764883", "filename": "src/test/ui/wf/wf-trait-associated-type-trait.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -3,12 +3,14 @@ error[E0277]: the trait bound `<Self as SomeTrait>::Type1: std::marker::Copy` is\n    |\n LL | struct IsCopy<T:Copy> { x: T }\n    |                 ---- required by this bound in `IsCopy`\n-LL | \n-LL | trait SomeTrait {\n-   |                - help: consider further restricting the associated type: `where <Self as SomeTrait>::Type1: std::marker::Copy`\n-LL |     type Type1;\n+...\n LL |     type Type2 = IsCopy<Self::Type1>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `<Self as SomeTrait>::Type1`\n+   |\n+help: consider further restricting the associated type\n+   |\n+LL | trait SomeTrait where <Self as SomeTrait>::Type1: std::marker::Copy {\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "23d886e25ff158364ca450c72934d6ae2926afd2", "filename": "src/test/ui/wf/wf-trait-default-fn-arg.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -5,9 +5,12 @@ LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    |              -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self, x: &Bar<Self>) {\n-   |                      ^^^^^^^^^^ - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |                      |\n-   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                      ^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn bar(&self, x: &Bar<Self>) where Self: std::cmp::Eq {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0214064017204a1d0cf1f44a3fd5845cbe4e0d4f", "filename": "src/test/ui/wf/wf-trait-default-fn-ret.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -5,9 +5,12 @@ LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    |              -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self) -> Bar<Self> {\n-   |                      ^^^^^^^^^- help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |                      |\n-   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                      ^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn bar(&self) -> Bar<Self> where Self: std::cmp::Eq {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3664c8b25aaef5dc8cccc1890b1692cbbe78082f", "filename": "src/test/ui/wf/wf-trait-default-fn-where-clause.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -5,9 +5,12 @@ LL | trait Bar<T:Eq+?Sized> { }\n    |             -- required by this bound in `Bar`\n ...\n LL |     fn bar<A>(&self) where A: Bar<Self> {\n-   |                               ^^^^^^^^^- help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n-   |                               |\n-   |                               the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                               ^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn bar<A>(&self) where A: Bar<Self>, Self: std::cmp::Eq {\n+   |                                        ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b5f5f70ce8176dd001c3e7577bbc829eb56a8f60", "filename": "src/test/ui/wf/wf-trait-fn-arg.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -5,9 +5,12 @@ LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    |              -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self, x: &Bar<Self>);\n-   |                      ^^^^^^^^^^ - help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |                      |\n-   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                      ^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn bar(&self, x: &Bar<Self>) where Self: std::cmp::Eq;\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5e7d8cbfea610b018a5a0fb75ac42eec65539df4", "filename": "src/test/ui/wf/wf-trait-fn-ret.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -5,9 +5,12 @@ LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    |              -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self) -> &Bar<Self>;\n-   |                      ^^^^^^^^^^- help: consider further restricting `Self`: `where Self: std::cmp::Eq`\n-   |                      |\n-   |                      the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                      ^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn bar(&self) -> &Bar<Self> where Self: std::cmp::Eq;\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2d9ba56c585480af6a57074710a436da723cd97e", "filename": "src/test/ui/wf/wf-trait-fn-where-clause.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45738e8cd1b026836f6cf161843971459bc1334e/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr?ref=45738e8cd1b026836f6cf161843971459bc1334e", "patch": "@@ -5,9 +5,12 @@ LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n    |              -- required by this bound in `Bar`\n ...\n LL |     fn bar(&self) where Self: Sized, Bar<Self>: Copy;\n-   |                                                 ^^^^- help: consider further restricting `Self`: `, Self: std::cmp::Eq`\n-   |                                                 |\n-   |                                                 the trait `std::cmp::Eq` is not implemented for `Self`\n+   |                                                 ^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL |     fn bar(&self) where Self: Sized, Bar<Self>: Copy, Self: std::cmp::Eq;\n+   |                                                     ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}