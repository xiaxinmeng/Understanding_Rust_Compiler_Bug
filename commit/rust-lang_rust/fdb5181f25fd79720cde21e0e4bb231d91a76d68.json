{"sha": "fdb5181f25fd79720cde21e0e4bb231d91a76d68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYjUxODFmMjVmZDc5NzIwY2RlMjFlMGU0YmIyMzFkOTFhNzZkNjg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-12T16:54:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-12T16:54:24Z"}, "message": "Rollup merge of #48201 - NovemberZulu:master, r=steveklabnik\n\nrephrase UnsafeCell doc\n\nAs shown by discussions on users.rust-lang.org [[1]], [[2]], UnsafeCell doc is not totally clear. I tried to made the doc univocal regarding what is allowed and what is not. The edits are based on my understanding following [[1]].\n\n[1]: https://users.rust-lang.org/t/unsafecell-behavior-details/1560\n[2]: https://users.rust-lang.org/t/is-there-a-better-way-to-overload-index-indexmut-for-a-rc-refcell/15591/12", "tree": {"sha": "0395697eea39b02f96a8f945b554c8a0d8d0a230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0395697eea39b02f96a8f945b554c8a0d8d0a230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdb5181f25fd79720cde21e0e4bb231d91a76d68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaprDACRBK7hj4Ov3rIwAAdHIIAK/8JrIO80+QZtUjdIh36/IZ\nf31w/nWRFdyNT1Xp1dxgeCWQRxTBOZRFgeS2Qskb5hN7YgvlL3LnzFJKoHBdP2Tb\nnnBny2xywSxb7YfnhKJrTQotoHqOpLSfFWP3DmywBVuGZeGqvxhpbIauBXcvKQr6\nbKFY3CDRCr0B/N9ypb6k54xBqBI9GZfw92tzQ/GyiY3h/v+tA+JWyJKCaBRaKQL1\n3Yy/NI/UBHDCPZdbs1Qs1V96P5IcMdPH358BWnNvktNj8qxNOBN0g4E0UYC1JUqg\nnAwYsAm32peKYKLAu4dN9tC1SGfSEUEFA4O06a55Il7ChYsbT7b7UFFU1PR3pto=\n=XeTt\n-----END PGP SIGNATURE-----\n", "payload": "tree 0395697eea39b02f96a8f945b554c8a0d8d0a230\nparent 883e74645d350b6752cb94d48f46363f6f8789e9\nparent 55be28367413e01262e4fb72d4af36cee368b65d\nauthor kennytm <kennytm@gmail.com> 1520873664 +0800\ncommitter GitHub <noreply@github.com> 1520873664 +0800\n\nRollup merge of #48201 - NovemberZulu:master, r=steveklabnik\n\nrephrase UnsafeCell doc\n\nAs shown by discussions on users.rust-lang.org [[1]], [[2]], UnsafeCell doc is not totally clear. I tried to made the doc univocal regarding what is allowed and what is not. The edits are based on my understanding following [[1]].\n\n[1]: https://users.rust-lang.org/t/unsafecell-behavior-details/1560\n[2]: https://users.rust-lang.org/t/is-there-a-better-way-to-overload-index-indexmut-for-a-rc-refcell/15591/12\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb5181f25fd79720cde21e0e4bb231d91a76d68", "html_url": "https://github.com/rust-lang/rust/commit/fdb5181f25fd79720cde21e0e4bb231d91a76d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdb5181f25fd79720cde21e0e4bb231d91a76d68/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883e74645d350b6752cb94d48f46363f6f8789e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/883e74645d350b6752cb94d48f46363f6f8789e9", "html_url": "https://github.com/rust-lang/rust/commit/883e74645d350b6752cb94d48f46363f6f8789e9"}, {"sha": "55be28367413e01262e4fb72d4af36cee368b65d", "url": "https://api.github.com/repos/rust-lang/rust/commits/55be28367413e01262e4fb72d4af36cee368b65d", "html_url": "https://github.com/rust-lang/rust/commit/55be28367413e01262e4fb72d4af36cee368b65d"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "36618e86968b5ea3d0fecf4c684bed1b6b0f0ca2", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/fdb5181f25fd79720cde21e0e4bb231d91a76d68/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdb5181f25fd79720cde21e0e4bb231d91a76d68/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=fdb5181f25fd79720cde21e0e4bb231d91a76d68", "patch": "@@ -1203,21 +1203,42 @@ impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n /// The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered\n /// mutable. In general, transmuting an `&T` type into an `&mut T` is considered undefined behavior.\n ///\n-/// The compiler makes optimizations based on the knowledge that `&T` is not mutably aliased or\n-/// mutated, and that `&mut T` is unique. When building abstractions like `Cell`, `RefCell`,\n-/// `Mutex`, etc, you need to turn these optimizations off. `UnsafeCell` is the only legal way\n-/// to do this. When `UnsafeCell<T>` is immutably aliased, it is still safe to obtain a mutable\n-/// reference to its interior and/or to mutate it. However, it is up to the abstraction designer\n-/// to ensure that no two mutable references obtained this way are active at the same time, and\n-/// that there are no active mutable references or mutations when an immutable reference is obtained\n-/// from the cell. This is often done via runtime checks.\n+/// If you have a reference `&SomeStruct`, then normally in Rust all fields of `SomeStruct` are\n+/// immutable. The compiler makes optimizations based on the knowledge that `&T` is not mutably\n+/// aliased or mutated, and that `&mut T` is unique. `UnsafeCel<T>` is the only core language\n+/// feature to work around this restriction. All other types that allow internal mutability, such as\n+/// `Cell<T>` and `RefCell<T>` use `UnsafeCell` to wrap their internal data.\n ///\n-/// Note that while mutating or mutably aliasing the contents of an `& UnsafeCell<T>` is\n-/// okay (provided you enforce the invariants some other way); it is still undefined behavior\n-/// to have multiple `&mut UnsafeCell<T>` aliases.\n+/// The `UnsafeCell` API itself is technically very simple: it gives you a raw pointer `*mut T` to\n+/// its contents. It is up to _you_ as the abstraction designer to use that raw pointer correctly.\n+///\n+/// The precise Rust aliasing rules are somewhat in flux, but the main points are not contentious:\n+///\n+/// - If you create a safe reference with lifetime `'a` (either a `&T` or `&mut T` reference) that\n+/// is accessible by safe code (for example, because you returned it), then you must not access\n+/// the data in any way that contradicts that reference for the remainder of `'a`. For example, that\n+/// means that if you take the `*mut T` from an `UnsafeCell<T>` and case it to an `&T`, then until\n+/// that reference's lifetime expires, the data in `T` must remain immutable (modulo any\n+/// `UnsafeCell` data found within `T`, of course). Similarly, if you create an `&mut T` reference\n+/// that is released to safe code, then you must not access the data within the `UnsafeCell` until\n+/// that reference expires.\n+///\n+/// - At all times, you must avoid data races, meaning that if multiple threads have access to\n+/// the same `UnsafeCell`, then any writes must have a proper happens-before relation to all other\n+/// accesses (or use atomics).\n ///\n+/// To assist with proper design, the following scenarios are explicitly declared legal\n+/// for single-threaded code:\n ///\n-/// Types like `Cell<T>` and `RefCell<T>` use this type to wrap their internal data.\n+/// 1. A `&T` reference can be released to safe code and there it can co-exit with other `&T`\n+/// references, but not with a `&mut T`\n+///\n+/// 2. A `&mut T` reference may be released to safe code, provided neither other `&mut T` nor `&T`\n+/// co-exist with it. A `&mut T` must always be unique.\n+///\n+/// Note that while mutating or mutably aliasing the contents of an `& UnsafeCell<T>` is\n+/// okay (provided you enforce the invariants some other way), it is still undefined behavior\n+/// to have multiple `&mut UnsafeCell<T>` aliases.\n ///\n /// # Examples\n ///\n@@ -1282,9 +1303,9 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// Gets a mutable pointer to the wrapped value.\n     ///\n     /// This can be cast to a pointer of any kind.\n-    /// Ensure that the access is unique when casting to\n-    /// `&mut T`, and ensure that there are no mutations or mutable\n-    /// aliases going on when casting to `&T`\n+    /// Ensure that the access is unique (no active references, mutable or not)\n+    /// when casting to `&mut T`, and ensure that there are no mutations\n+    /// or mutable aliases going on when casting to `&T`\n     ///\n     /// # Examples\n     ///"}]}