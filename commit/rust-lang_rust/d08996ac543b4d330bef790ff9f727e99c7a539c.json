{"sha": "d08996ac543b4d330bef790ff9f727e99c7a539c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwODk5NmFjNTQzYjRkMzMwYmVmNzkwZmY5ZjcyN2U5OWM3YTUzOWM=", "commit": {"author": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2020-08-26T06:59:04Z"}, "committer": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2020-08-30T20:13:47Z"}, "message": "Get rid of bounds check in slice::chunks_exact() and related functions during construction\n\nLLVM can't figure out in\n\n    let rem = self.len() % chunk_size;\n    let len = self.len() - rem;\n    let (fst, snd) = self.split_at(len);\n\nand\n\n    let rem = self.len() % chunk_size;\n    let (fst, snd) = self.split_at(rem);\n\nthat the index passed to split_at() is smaller than the slice length and\nadds a bounds check plus panic for it.\n\nApart from removing the overhead of the bounds check this also allows\nLLVM to optimize code around the ChunksExact iterator better.", "tree": {"sha": "554b264fd6cb49b27723ea87533224ed82b38df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/554b264fd6cb49b27723ea87533224ed82b38df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d08996ac543b4d330bef790ff9f727e99c7a539c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d08996ac543b4d330bef790ff9f727e99c7a539c", "html_url": "https://github.com/rust-lang/rust/commit/d08996ac543b4d330bef790ff9f727e99c7a539c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d08996ac543b4d330bef790ff9f727e99c7a539c/comments", "author": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30dc32b10eb53e4a92c61a42062983db58838217", "url": "https://api.github.com/repos/rust-lang/rust/commits/30dc32b10eb53e4a92c61a42062983db58838217", "html_url": "https://github.com/rust-lang/rust/commit/30dc32b10eb53e4a92c61a42062983db58838217"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "1f207198dedfd685351991b98e3f36ccde871e64", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d08996ac543b4d330bef790ff9f727e99c7a539c/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08996ac543b4d330bef790ff9f727e99c7a539c/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=d08996ac543b4d330bef790ff9f727e99c7a539c", "patch": "@@ -865,8 +865,9 @@ impl<T> [T] {\n     pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<'_, T> {\n         assert_ne!(chunk_size, 0);\n         let rem = self.len() % chunk_size;\n-        let len = self.len() - rem;\n-        let (fst, snd) = self.split_at(len);\n+        let fst_len = self.len() - rem;\n+        // SAFETY: 0 <= fst_len <= self.len() by construction above\n+        let (fst, snd) = unsafe { self.split_at_unchecked(fst_len) };\n         ChunksExact { v: fst, rem: snd, chunk_size }\n     }\n \n@@ -910,8 +911,9 @@ impl<T> [T] {\n     pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<'_, T> {\n         assert_ne!(chunk_size, 0);\n         let rem = self.len() % chunk_size;\n-        let len = self.len() - rem;\n-        let (fst, snd) = self.split_at_mut(len);\n+        let fst_len = self.len() - rem;\n+        // SAFETY: 0 <= fst_len <= self.len() by construction above\n+        let (fst, snd) = unsafe { self.split_at_mut_unchecked(fst_len) };\n         ChunksExactMut { v: fst, rem: snd, chunk_size }\n     }\n \n@@ -1063,7 +1065,8 @@ impl<T> [T] {\n     pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<'_, T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n-        let (fst, snd) = self.split_at(rem);\n+        // SAFETY: 0 <= rem <= self.len() by construction above\n+        let (fst, snd) = unsafe { self.split_at_unchecked(rem) };\n         RChunksExact { v: snd, rem: fst, chunk_size }\n     }\n \n@@ -1108,7 +1111,8 @@ impl<T> [T] {\n     pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<'_, T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n-        let (fst, snd) = self.split_at_mut(rem);\n+        // SAFETY: 0 <= rem <= self.len() by construction above\n+        let (fst, snd) = unsafe { self.split_at_mut_unchecked(rem) };\n         RChunksExactMut { v: snd, rem: fst, chunk_size }\n     }\n "}]}