{"sha": "93dc55518840ee3cbd570c0d85aa7a445752af8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZGM1NTUxODg0MGVlM2NiZDU3MGMwZDg1YWE3YTQ0NTc1MmFmOGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-14T14:06:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-16T02:45:00Z"}, "message": "native: Fix a race in select()\n\nDuring selection, libnative would erroneously re-acquire ownership of a task\nwhen a separate thread still had ownership of the task. The loop in select()\nwas rewritten to acknowledge this race and instead block waiting to re-acquire\nownership rather than plowing through.\n\nCloses #13494", "tree": {"sha": "b0e338768e2b094d97d0ca533e94e1f723d59ae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0e338768e2b094d97d0ca533e94e1f723d59ae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93dc55518840ee3cbd570c0d85aa7a445752af8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93dc55518840ee3cbd570c0d85aa7a445752af8b", "html_url": "https://github.com/rust-lang/rust/commit/93dc55518840ee3cbd570c0d85aa7a445752af8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93dc55518840ee3cbd570c0d85aa7a445752af8b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ca7abb1c4c76b4a23024baacdb7a023692c1d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca7abb1c4c76b4a23024baacdb7a023692c1d2d", "html_url": "https://github.com/rust-lang/rust/commit/4ca7abb1c4c76b4a23024baacdb7a023692c1d2d"}], "stats": {"total": 85, "additions": 76, "deletions": 9}, "files": [{"sha": "8a82ae55faa37554a127028d91377a3e6ac180ab", "filename": "src/libnative/task.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/93dc55518840ee3cbd570c0d85aa7a445752af8b/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dc55518840ee3cbd570c0d85aa7a445752af8b/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=93dc55518840ee3cbd570c0d85aa7a445752af8b", "patch": "@@ -201,19 +201,30 @@ impl rt::Runtime for Ops {\n                     Err(task) => { cast::forget(task.wake()); }\n                 }\n             } else {\n-                let mut iter = task.make_selectable(times);\n+                let iter = task.make_selectable(times);\n                 let guard = (*me).lock.lock();\n                 (*me).awoken = false;\n-                let success = iter.all(|task| {\n-                    match f(task) {\n-                        Ok(()) => true,\n-                        Err(task) => {\n-                            cast::forget(task.wake());\n-                            false\n+\n+                // Apply the given closure to all of the \"selectable tasks\",\n+                // bailing on the first one that produces an error. Note that\n+                // care must be taken such that when an error is occurred, we\n+                // may not own the task, so we may still have to wait for the\n+                // task to become available. In other words, if task.wake()\n+                // returns `None`, then someone else has ownership and we must\n+                // wait for their signal.\n+                match iter.map(f).filter_map(|a| a.err()).next() {\n+                    None => {}\n+                    Some(task) => {\n+                        match task.wake() {\n+                            Some(task) => {\n+                                cast::forget(task);\n+                                (*me).awoken = true;\n+                            }\n+                            None => {}\n                         }\n                     }\n-                });\n-                while success && !(*me).awoken {\n+                }\n+                while !(*me).awoken {\n                     guard.wait();\n                 }\n             }"}, {"sha": "84da2d814d946d0d15669a0c92ed7c30235b2152", "filename": "src/test/run-pass/issue-13494.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/93dc55518840ee3cbd570c0d85aa7a445752af8b/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93dc55518840ee3cbd570c0d85aa7a445752af8b/src%2Ftest%2Frun-pass%2Fissue-13494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13494.rs?ref=93dc55518840ee3cbd570c0d85aa7a445752af8b", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test may not always fail, but it can be flaky if the race it used to\n+// expose is still present.\n+\n+extern crate green;\n+extern crate rustuv;\n+extern crate native;\n+\n+#[start]\n+fn start(argc: int, argv: **u8) -> int {\n+    green::start(argc, argv, rustuv::event_loop, main)\n+}\n+\n+fn helper(rx: Receiver<Sender<()>>) {\n+    for tx in rx.iter() {\n+        let _ = tx.send_opt(());\n+    }\n+}\n+\n+fn test() {\n+    let (tx, rx) = channel();\n+    spawn(proc() { helper(rx) });\n+    let (snd, rcv) = channel();\n+    for _ in range(1, 100000) {\n+        snd.send(1);\n+        let (tx2, rx2) = channel();\n+        tx.send(tx2);\n+        select! {\n+            () = rx2.recv() => (),\n+            _ = rcv.recv() => ()\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let (tx, rx) = channel();\n+    spawn(proc() {\n+        tx.send(test());\n+    });\n+    rx.recv();\n+\n+    let (tx, rx) = channel();\n+    native::task::spawn(proc() {\n+        tx.send(test());\n+    });\n+    rx.recv();\n+}"}]}