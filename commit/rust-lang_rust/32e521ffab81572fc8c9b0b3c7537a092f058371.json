{"sha": "32e521ffab81572fc8c9b0b3c7537a092f058371", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZTUyMWZmYWI4MTU3MmZjOGM5YjBiM2M3NTM3YTA5MmYwNTgzNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-26T22:46:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-26T22:46:13Z"}, "message": "auto merge of #15941 : treeman/rust/doc-lru, r=alexcrichton", "tree": {"sha": "863a9e00ef146336fce380bda51829af9afa9222", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863a9e00ef146336fce380bda51829af9afa9222"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32e521ffab81572fc8c9b0b3c7537a092f058371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32e521ffab81572fc8c9b0b3c7537a092f058371", "html_url": "https://github.com/rust-lang/rust/commit/32e521ffab81572fc8c9b0b3c7537a092f058371", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32e521ffab81572fc8c9b0b3c7537a092f058371/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6e544f261035509a1448933da21b4f4111bcf57", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e544f261035509a1448933da21b4f4111bcf57", "html_url": "https://github.com/rust-lang/rust/commit/e6e544f261035509a1448933da21b4f4111bcf57"}, {"sha": "6bbe92e6eff6cc1b1cc4b9fddf11bfe79c430579", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bbe92e6eff6cc1b1cc4b9fddf11bfe79c430579", "html_url": "https://github.com/rust-lang/rust/commit/6bbe92e6eff6cc1b1cc4b9fddf11bfe79c430579"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "45e971a675f56c6095bec4e001e45706cd2ea7d2", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/32e521ffab81572fc8c9b0b3c7537a092f058371/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32e521ffab81572fc8c9b0b3c7537a092f058371/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=32e521ffab81572fc8c9b0b3c7537a092f058371", "patch": "@@ -92,6 +92,13 @@ impl<K, V> LruEntry<K, V> {\n \n impl<K: Hash + Eq, V> LruCache<K, V> {\n     /// Create an LRU Cache that holds at most `capacity` items.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache: LruCache<int, &str> = LruCache::new(10);\n+    /// ```\n     pub fn new(capacity: uint) -> LruCache<K, V> {\n         let cache = LruCache {\n             map: HashMap::new(),\n@@ -106,6 +113,18 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     }\n \n     /// Put a key-value pair into cache.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache = LruCache::new(2);\n+    ///\n+    /// cache.put(1i, \"a\");\n+    /// cache.put(2, \"b\");\n+    /// assert_eq!(cache.get(&1), Some(&\"a\"));\n+    /// assert_eq!(cache.get(&2), Some(&\"b\"));\n+    /// ```\n     pub fn put(&mut self, k: K, v: V) {\n         let (node_ptr, node_opt) = match self.map.find_mut(&KeyRef{k: &k}) {\n             Some(node) => {\n@@ -137,6 +156,21 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     }\n \n     /// Return a value corresponding to the key in the cache.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache = LruCache::new(2);\n+    ///\n+    /// cache.put(1i, \"a\");\n+    /// cache.put(2, \"b\");\n+    /// cache.put(2, \"c\");\n+    /// cache.put(3, \"d\");\n+    ///\n+    /// assert_eq!(cache.get(&1), None);\n+    /// assert_eq!(cache.get(&2), Some(&\"c\"));\n+    /// ```\n     pub fn get<'a>(&'a mut self, k: &K) -> Option<&'a V> {\n         let (value, node_ptr_opt) = match self.map.find_mut(&KeyRef{k: k}) {\n             None => (None, None),\n@@ -156,6 +190,20 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     }\n \n     /// Remove and return a value corresponding to the key from the cache.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache = LruCache::new(2);\n+    ///\n+    /// cache.put(2i, \"a\");\n+    ///\n+    /// assert_eq!(cache.pop(&1), None);\n+    /// assert_eq!(cache.pop(&2), Some(\"a\"));\n+    /// assert_eq!(cache.pop(&2), None);\n+    /// assert_eq!(cache.len(), 0);\n+    /// ```\n     pub fn pop(&mut self, k: &K) -> Option<V> {\n         match self.map.pop(&KeyRef{k: k}) {\n             None => None,\n@@ -164,12 +212,49 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     }\n \n     /// Return the maximum number of key-value pairs the cache can hold.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache: LruCache<int, &str> = LruCache::new(2);\n+    /// assert_eq!(cache.capacity(), 2);\n+    /// ```\n     pub fn capacity(&self) -> uint {\n         self.max_size\n     }\n \n     /// Change the number of key-value pairs the cache can hold. Remove\n     /// least-recently-used key-value pairs if necessary.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache = LruCache::new(2);\n+    ///\n+    /// cache.put(1i, \"a\");\n+    /// cache.put(2, \"b\");\n+    /// cache.put(3, \"c\");\n+    ///\n+    /// assert_eq!(cache.get(&1), None);\n+    /// assert_eq!(cache.get(&2), Some(&\"b\"));\n+    /// assert_eq!(cache.get(&3), Some(&\"c\"));\n+    ///\n+    /// cache.change_capacity(3);\n+    /// cache.put(1i, \"a\");\n+    /// cache.put(2, \"b\");\n+    ///\n+    /// assert_eq!(cache.get(&1), Some(&\"a\"));\n+    /// assert_eq!(cache.get(&2), Some(&\"b\"));\n+    /// assert_eq!(cache.get(&3), Some(&\"c\"));\n+    ///\n+    /// cache.change_capacity(1);\n+    ///\n+    /// assert_eq!(cache.get(&1), None);\n+    /// assert_eq!(cache.get(&2), None);\n+    /// assert_eq!(cache.get(&3), Some(&\"c\"));\n+    /// ```\n     pub fn change_capacity(&mut self, capacity: uint) {\n         for _ in range(capacity, self.len()) {\n             self.remove_lru();"}]}