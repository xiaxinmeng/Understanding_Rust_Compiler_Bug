{"sha": "caaf8679d8d22d75511fb0fc2adef585990ef397", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYWY4Njc5ZDhkMjJkNzU1MTFmYjBmYzJhZGVmNTg1OTkwZWYzOTc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-10T07:14:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-10T07:14:26Z"}, "message": "Teach bind to actually bind typarams, as it claims to.", "tree": {"sha": "4d453d134514ffb2393eb7e7331c59b357a2f3e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d453d134514ffb2393eb7e7331c59b357a2f3e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caaf8679d8d22d75511fb0fc2adef585990ef397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caaf8679d8d22d75511fb0fc2adef585990ef397", "html_url": "https://github.com/rust-lang/rust/commit/caaf8679d8d22d75511fb0fc2adef585990ef397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caaf8679d8d22d75511fb0fc2adef585990ef397/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc963842d1c6adaa696615469723437b3ec22a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc963842d1c6adaa696615469723437b3ec22a2", "html_url": "https://github.com/rust-lang/rust/commit/9fc963842d1c6adaa696615469723437b3ec22a2"}], "stats": {"total": 173, "additions": 112, "deletions": 61}, "files": [{"sha": "15c35b3c644819da2d5d947cd50522b9ea0bc1fd", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caaf8679d8d22d75511fb0fc2adef585990ef397/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/caaf8679d8d22d75511fb0fc2adef585990ef397/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=caaf8679d8d22d75511fb0fc2adef585990ef397", "patch": "@@ -475,6 +475,7 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       foreach-simple.rs \\\n                       fun-call-variants.rs \\\n                       fun-indirect-call.rs \\\n+                      generic-bind.rs \\\n                       generic-derived-type.rs \\\n                       generic-drop-glue.rs \\\n                       generic-exterior-box.rs \\"}, {"sha": "9ea085b55502dccdb0d1072f7cb271235f22d636", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/caaf8679d8d22d75511fb0fc2adef585990ef397/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/caaf8679d8d22d75511fb0fc2adef585990ef397/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=caaf8679d8d22d75511fb0fc2adef585990ef397", "patch": "@@ -63,8 +63,8 @@ let fn_field_code = binding_field_dispatch;;\n let fn_field_box = binding_field_bound_data;;\n \n let closure_body_elt_bound_args_tydesc = 0;;\n-let closure_body_elt_target_tydesc = 1;;\n-let closure_body_elt_target = 2;;\n+let closure_body_elt_target = 1;;\n+let closure_body_elt_bound_ty_params = 2;;\n let closure_body_elt_bound_args = 3;;\n \n let tag_elt_discriminant = 0;;"}, {"sha": "15105ab384d87cb3acc8d888f9d346f9e82c5892", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/caaf8679d8d22d75511fb0fc2adef585990ef397/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/caaf8679d8d22d75511fb0fc2adef585990ef397/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=caaf8679d8d22d75511fb0fc2adef585990ef397", "patch": "@@ -2190,7 +2190,11 @@ let obj_rty (word_bits:Il.bits) : Il.referent_ty =\n     r [| obj_vtbl_ptr; obj_box_ptr |]\n ;;\n \n-let rec closure_box_rty (cx:ctxt) (bs:Ast.slot array) : Il.referent_ty =\n+let rec closure_box_rty\n+    (cx:ctxt)\n+    (n_ty_params:int)\n+    (bs:Ast.slot array)\n+    : Il.referent_ty =\n   let s t = Il.ScalarTy t in\n   let p t = Il.AddrTy t in\n   let sp t = s (p t) in\n@@ -2200,10 +2204,13 @@ let rec closure_box_rty (cx:ctxt) (bs:Ast.slot array) : Il.referent_ty =\n   let rc = word_rty word_bits in\n   let tydesc = sp (tydesc_rty word_bits) in\n   let targ = fn_rty cx true in\n+  let ty_param_rtys =\n+      r (Array.init n_ty_params (fun _ -> tydesc))\n+  in\n   let bound_args = r (Array.map (slot_referent_type cx) bs) in\n     (* First tydesc is the one describing bound_args; second tydesc is the one\n      * to pass to targ when invoking it.  *)\n-    r [| rc; r [| tydesc; tydesc; targ; bound_args |] |]\n+    r [| rc; r [| tydesc; targ; ty_param_rtys; bound_args |] |]\n \n and fn_rty (cx:ctxt) (opaque_box_body:bool) : Il.referent_ty =\n   let s t = Il.ScalarTy t in\n@@ -2216,7 +2223,7 @@ and fn_rty (cx:ctxt) (opaque_box_body:bool) : Il.referent_ty =\n   let box =\n     if opaque_box_body\n     then r [| word; Il.OpaqueTy |]\n-    else closure_box_rty cx [||]\n+    else closure_box_rty cx 0 [||]\n   in\n   let box_ptr = sp box in\n   let code_ptr = sp Il.CodeTy in"}, {"sha": "b3544a856afa171f4f04605693ab7c86e0edc78f", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 91, "deletions": 56, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/caaf8679d8d22d75511fb0fc2adef585990ef397/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/caaf8679d8d22d75511fb0fc2adef585990ef397/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=caaf8679d8d22d75511fb0fc2adef585990ef397", "patch": "@@ -1663,6 +1663,7 @@ let trans_visitor\n   (* FIXME (issue #2): this should eventually use tail calling logic *)\n \n   and emit_fn_thunk_glue\n+      (n_ty_params:int)\n       (arg_slots:Ast.slot array)\n       (arg_bound_flags:bool array)\n       (fix:fixup)\n@@ -1683,14 +1684,14 @@ let trans_visitor\n     let (self_ty:Ast.ty) = mk_simple_ty_fn unbound_slots in\n     let (callee_ty:Ast.ty) = mk_simple_ty_fn arg_slots in\n \n-    let self_box_rty = closure_box_rty cx bound_slots in\n+    let self_box_rty = closure_box_rty cx n_ty_params bound_slots in\n \n     let self_args_rty =\n       call_args_referent_type cx 0 self_ty (Some self_box_rty)\n     in\n \n     let callee_args_rty =\n-      call_args_referent_type cx 0 callee_ty (Some Il.OpaqueTy)\n+      call_args_referent_type cx n_ty_params callee_ty (Some Il.OpaqueTy)\n     in\n \n     let callsz = Il.referent_ty_size word_bits callee_args_rty in\n@@ -1729,6 +1730,7 @@ let trans_visitor\n       in\n \n         merge_bound_args\n+          n_ty_params\n           self_args_rty callee_args_rty\n           arg_slots arg_bound_flags;\n         iflog (fun _ -> annotate \"call through to closure target fn\");\n@@ -1747,6 +1749,7 @@ let trans_visitor\n \n   and get_fn_thunk_glue\n       (bind_id:node_id)\n+      (n_ty_params:int)\n       (arg_slots:Ast.slot array)\n       (arg_bound_flags:bool array)\n       : fixup =\n@@ -1755,7 +1758,7 @@ let trans_visitor\n           Some code -> code.code_fixup\n         | None ->\n             let fix = new_fixup (glue_str cx g) in\n-              emit_fn_thunk_glue arg_slots arg_bound_flags fix g;\n+              emit_fn_thunk_glue n_ty_params arg_slots arg_bound_flags fix g;\n               fix\n \n \n@@ -4186,6 +4189,7 @@ let trans_visitor\n       (closure_cell:Il.cell)\n       (target_fn_ptr:Il.operand)\n       (target_binding_ptr:Il.operand)\n+      (ty_params:Ast.ty array)\n       (bound_arg_slots:Ast.slot array)\n       (bound_args:Ast.atom array)\n       : unit =\n@@ -4196,6 +4200,9 @@ let trans_visitor\n     let bound_args_tydesc_cell =\n       get_element_ptr body_cell Abi.closure_body_elt_bound_args_tydesc\n     in\n+    let bound_ty_params_cell =\n+      get_element_ptr body_cell Abi.closure_body_elt_bound_ty_params\n+    in\n     let args_cell =\n       get_element_ptr body_cell Abi.closure_body_elt_bound_args\n     in\n@@ -4219,6 +4226,16 @@ let trans_visitor\n       (get_element_ptr targ_cell Abi.fn_field_box)\n       (reify_ptr target_binding_ptr);\n \n+    iflog (fun _ -> annotate \"set closure bound tydescs\");\n+    Array.iteri\n+      begin\n+        fun i ty ->\n+          mov\n+            (get_element_ptr bound_ty_params_cell i)\n+            (Il.Cell (get_tydesc None ty))\n+      end\n+      ty_params;\n+\n     iflog (fun _ -> annotate \"set closure bound args\");\n     copy_bound_args args_cell bound_arg_slots bound_args\n \n@@ -4233,6 +4250,12 @@ let trans_visitor\n       : unit =\n     let (dst_cell, _) = trans_lval_maybe_init initializing dst in\n     let (target_ptr, _) = trans_callee flv in\n+    let ty_params =\n+      match htab_search cx.ctxt_call_lval_params (lval_base_id flv) with\n+          Some params -> params\n+        | None -> [| |]\n+    in\n+    let n_ty_params = Array.length ty_params in\n     let arg_bound_flags = Array.map bool_of_option args in\n     let arg_slots =\n       arr_map2\n@@ -4244,11 +4267,12 @@ let trans_visitor\n     let bound_arg_slots = arr_filter_some arg_slots in\n     let bound_args = arr_filter_some args in\n     let thunk_fixup =\n-      get_fn_thunk_glue bind_id fn_sig.Ast.sig_input_slots arg_bound_flags\n+      get_fn_thunk_glue bind_id n_ty_params\n+        fn_sig.Ast.sig_input_slots arg_bound_flags\n     in\n     let target_code_ptr = callee_code_ptr target_ptr cc in\n     let target_box_ptr = callee_box_ptr flv cc in\n-    let closure_box_rty = closure_box_rty cx bound_arg_slots in\n+    let closure_box_rty = closure_box_rty cx n_ty_params bound_arg_slots in\n     let closure_box_sz =\n       calculate_sz_in_current_frame\n         (Il.referent_ty_size word_bits closure_box_rty)\n@@ -4268,6 +4292,7 @@ let trans_visitor\n         (deref pair_box_cell)\n         target_code_ptr\n         target_box_ptr\n+        ty_params\n         bound_arg_slots\n         bound_args\n \n@@ -4466,14 +4491,15 @@ let trans_visitor\n         bound_arg_slots\n \n   and merge_bound_args\n+      (n_ty_params:int)\n       (all_self_args_rty:Il.referent_ty)\n       (all_callee_args_rty:Il.referent_ty)\n       (arg_slots:Ast.slot array)\n       (arg_bound_flags:bool array)\n       : unit =\n     begin\n       (* \n-       * NB: 'all_*_args', both self and callee, are always 4-tuples: \n+       * NB: 'all_*_args', both self and callee, are always 5-tuples: \n        * \n        *    [out_ptr, task_ptr, indirect_args, ty_params, [args]]\n        * \n@@ -4486,17 +4512,31 @@ let trans_visitor\n       let self_args_cell =\n         get_element_ptr all_self_args_cell Abi.calltup_elt_args\n       in\n-      let self_ty_params_cell =\n-        get_element_ptr all_self_args_cell Abi.calltup_elt_ty_params\n+      let self_indirect_args_cell =\n+        get_element_ptr all_self_args_cell Abi.calltup_elt_indirect_args\n+      in\n+      let closure_box_cell =\n+        deref (get_element_ptr self_indirect_args_cell\n+                 Abi.indirect_args_elt_closure)\n+      in\n+      let closure_cell =\n+        get_element_ptr closure_box_cell Abi.box_rc_field_body\n+      in\n+      let closure_args_cell =\n+        get_element_ptr closure_cell Abi.closure_body_elt_bound_args\n+      in\n+      let closure_ty_params_cell =\n+        get_element_ptr closure_cell Abi.closure_body_elt_bound_ty_params\n+      in\n+      let callee_ty_params_cell =\n+        get_element_ptr all_callee_args_cell Abi.calltup_elt_ty_params\n       in\n       let callee_args_cell =\n         (* FIXME (issue #81):  Once we've actually got proper ty_params,\n          * we should GEP dynamically here to get the args, since they may\n          * be aligned dynamically if they have parameterized type. *)\n-        get_element_ptr all_callee_args_cell Abi.calltup_elt_args\n-      in\n-      let self_indirect_args_cell =\n-        get_element_ptr all_self_args_cell Abi.calltup_elt_indirect_args\n+        get_element_ptr_dyn closure_ty_params_cell\n+          all_callee_args_cell Abi.calltup_elt_args\n       in\n \n       let n_args = Array.length arg_bound_flags in\n@@ -4515,51 +4555,46 @@ let trans_visitor\n           (Il.Cell (get_element_ptr all_self_args_cell\n                       Abi.calltup_elt_task_ptr));\n \n-        iflog (fun _ -> annotate \"extract closure indirect-arg\");\n-        let closure_box_cell =\n-          deref (get_element_ptr self_indirect_args_cell\n-                   Abi.indirect_args_elt_closure)\n-        in\n-        let closure_cell =\n-          get_element_ptr closure_box_cell Abi.box_rc_field_body\n-        in\n-\n-        let closure_args_cell =\n-          get_element_ptr closure_cell Abi.closure_body_elt_bound_args\n-        in\n+        iflog (fun _ -> annotate \"copy ty-params\");\n+        for ty_i = 0 to (n_ty_params - 1) do\n+          mov\n+            (get_element_ptr callee_ty_params_cell ty_i)\n+            (Il.Cell (get_element_ptr closure_ty_params_cell ty_i))\n+        done;\n \n-          for arg_i = 0 to (n_args - 1) do\n-            let dst_cell = get_element_ptr callee_args_cell arg_i in\n-            let slot = arg_slots.(arg_i) in\n-            let is_bound = arg_bound_flags.(arg_i) in\n-            let src_cell =\n-              if is_bound then\n-                begin\n-                  iflog (fun _ -> annotate\n-                           (Printf.sprintf\n-                              \"extract bound arg %d as actual arg %d\"\n-                              !bound_i arg_i));\n-                  get_element_ptr closure_args_cell (!bound_i)\n-                end\n-              else\n-                begin\n-                  iflog (fun _ -> annotate\n-                           (Printf.sprintf\n-                              \"extract unbound arg %d as actual arg %d\"\n-                              !unbound_i arg_i));\n-                  get_element_ptr self_args_cell (!unbound_i);\n-                end\n-            in\n-              iflog (fun _ -> annotate\n-                       (Printf.sprintf\n-                          \"copy into actual-arg %d\" arg_i));\n-              trans_init_slot_from_cell\n-                self_ty_params_cell CLONE_none\n-                dst_cell slot\n-                (deref_slot false src_cell slot) (slot_ty slot);\n-              incr (if is_bound then bound_i else unbound_i);\n-          done;\n-          assert ((!bound_i + !unbound_i) == n_args)\n+        iflog (fun _ -> annotate \"copy args\");\n+        for arg_i = 0 to (n_args - 1) do\n+          let dst_cell = get_element_ptr callee_args_cell arg_i in\n+          let slot = arg_slots.(arg_i) in\n+          let is_bound = arg_bound_flags.(arg_i) in\n+          let src_cell =\n+            if is_bound then\n+              begin\n+                iflog (fun _ -> annotate\n+                         (Printf.sprintf\n+                            \"extract bound arg %d as actual arg %d\"\n+                            !bound_i arg_i));\n+                get_element_ptr closure_args_cell (!bound_i)\n+              end\n+            else\n+              begin\n+                iflog (fun _ -> annotate\n+                         (Printf.sprintf\n+                            \"extract unbound arg %d as actual arg %d\"\n+                            !unbound_i arg_i));\n+                get_element_ptr self_args_cell (!unbound_i);\n+              end\n+          in\n+            iflog (fun _ -> annotate\n+                     (Printf.sprintf\n+                        \"copy into actual-arg %d\" arg_i));\n+            trans_init_slot_from_cell\n+              closure_ty_params_cell CLONE_none\n+              dst_cell slot\n+              (deref_slot false src_cell slot) (slot_ty slot);\n+            incr (if is_bound then bound_i else unbound_i);\n+        done;\n+        assert ((!bound_i + !unbound_i) == n_args)\n     end\n \n "}, {"sha": "851f28317197377bc71c90f76684079c1600fda3", "filename": "src/test/run-pass/generic-bind.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caaf8679d8d22d75511fb0fc2adef585990ef397/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caaf8679d8d22d75511fb0fc2adef585990ef397/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs?ref=caaf8679d8d22d75511fb0fc2adef585990ef397", "patch": "@@ -0,0 +1,8 @@\n+fn id[T](T t) -> T {\n+  ret t;\n+}\n+\n+fn main() {\n+  auto f = bind id[int](_);\n+  check (f(10) == 10);\n+}\n\\ No newline at end of file"}]}