{"sha": "ee5cfb0c2dae046bac18e42231074d5063b1e740", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNWNmYjBjMmRhZTA0NmJhYzE4ZTQyMjMxMDc0ZDUwNjNiMWU3NDA=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-08T00:26:15Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-12T17:19:17Z"}, "message": "Don't use unkillable in UnsafeArc dtor when there's no unwrapper. Close #8382.", "tree": {"sha": "b26d5a0399da24fe071e471be09054d340c4a14d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b26d5a0399da24fe071e471be09054d340c4a14d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee5cfb0c2dae046bac18e42231074d5063b1e740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5cfb0c2dae046bac18e42231074d5063b1e740", "html_url": "https://github.com/rust-lang/rust/commit/ee5cfb0c2dae046bac18e42231074d5063b1e740", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee5cfb0c2dae046bac18e42231074d5063b1e740/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecfc9a82231eef47bf522e6d18138a0f3414d914", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecfc9a82231eef47bf522e6d18138a0f3414d914", "html_url": "https://github.com/rust-lang/rust/commit/ecfc9a82231eef47bf522e6d18138a0f3414d914"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "adbf9fc757819092ca22f21091e4a7a273d8ba87", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ee5cfb0c2dae046bac18e42231074d5063b1e740/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee5cfb0c2dae046bac18e42231074d5063b1e740/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=ee5cfb0c2dae046bac18e42231074d5063b1e740", "patch": "@@ -229,20 +229,22 @@ impl<T> Drop for UnsafeAtomicRcBox<T>{\n             if self.data.is_null() {\n                 return; // Happens when destructing an unwrapper's handle.\n             }\n-            do task::unkillable {\n-                let mut data: ~AtomicRcBoxData<T> = cast::transmute(self.data);\n-                // Must be acquire+release, not just release, to make sure this\n-                // doesn't get reordered to after the unwrapper pointer load.\n-                let old_count = data.count.fetch_sub(1, SeqCst);\n-                assert!(old_count >= 1);\n-                if old_count == 1 {\n-                    // Were we really last, or should we hand off to an\n-                    // unwrapper? It's safe to not xchg because the unwrapper\n-                    // will set the unwrap lock *before* dropping his/her\n-                    // reference. In effect, being here means we're the only\n-                    // *awake* task with the data.\n-                    match data.unwrapper.take(Acquire) {\n-                        Some(~(message,response)) => {\n+            let mut data: ~AtomicRcBoxData<T> = cast::transmute(self.data);\n+            // Must be acquire+release, not just release, to make sure this\n+            // doesn't get reordered to after the unwrapper pointer load.\n+            let old_count = data.count.fetch_sub(1, SeqCst);\n+            assert!(old_count >= 1);\n+            if old_count == 1 {\n+                // Were we really last, or should we hand off to an\n+                // unwrapper? It's safe to not xchg because the unwrapper\n+                // will set the unwrap lock *before* dropping his/her\n+                // reference. In effect, being here means we're the only\n+                // *awake* task with the data.\n+                match data.unwrapper.take(Acquire) {\n+                    Some(~(message,response)) => {\n+                        let cell = Cell::new((message, response, data));\n+                        do task::unkillable {\n+                            let (message, response, data) = cell.take();\n                             // Send 'ready' and wait for a response.\n                             message.send(());\n                             // Unkillable wait. Message guaranteed to come.\n@@ -253,13 +255,13 @@ impl<T> Drop for UnsafeAtomicRcBox<T>{\n                                 // Other task was killed. drop glue takes over.\n                             }\n                         }\n-                        None => {\n-                            // drop glue takes over.\n-                        }\n                     }\n-                } else {\n-                    cast::forget(data);\n+                    None => {\n+                        // drop glue takes over.\n+                    }\n                 }\n+            } else {\n+                cast::forget(data);\n             }\n         }\n     }"}]}