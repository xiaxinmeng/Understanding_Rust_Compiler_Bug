{"sha": "58f8cc21352613639fdc58f4f8a59f5c579b5372", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZjhjYzIxMzUyNjEzNjM5ZmRjNThmNGY4YTU5ZjVjNTc5YjUzNzI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-02T21:24:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-06T21:41:49Z"}, "message": "rename visit_primitive -> try_visit_primitive, and comments", "tree": {"sha": "a5a87a3a8e9fb30f77b9463f1bd0699811909411", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5a87a3a8e9fb30f77b9463f1bd0699811909411"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58f8cc21352613639fdc58f4f8a59f5c579b5372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58f8cc21352613639fdc58f4f8a59f5c579b5372", "html_url": "https://github.com/rust-lang/rust/commit/58f8cc21352613639fdc58f4f8a59f5c579b5372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58f8cc21352613639fdc58f4f8a59f5c579b5372/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0586f9aea1948fe208751f8183d58f9af1116b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0586f9aea1948fe208751f8183d58f9af1116b6", "html_url": "https://github.com/rust-lang/rust/commit/f0586f9aea1948fe208751f8183d58f9af1116b6"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "29d18e87c4f6ed479f0b7e3174b394501d32ee22", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58f8cc21352613639fdc58f4f8a59f5c579b5372/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f8cc21352613639fdc58f4f8a59f5c579b5372/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=58f8cc21352613639fdc58f4f8a59f5c579b5372", "patch": "@@ -406,7 +406,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n \n     /// Check if this is a value of primitive type, and if yes check the validity of the value\n     /// at that type.  Return `true` if the type is indeed primitive.\n-    fn visit_primitive(&mut self, value: OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, bool> {\n+    fn try_visit_primitive(&mut self, value: OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, bool> {\n         // Go over all the primitive types\n         let ty = value.layout.ty;\n         match ty.kind {\n@@ -477,7 +477,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                 // Nothing to check.\n                 Ok(true)\n             }\n-            // This should be all the (inhabited) primitive types. The rest is compound, we\n+            // The above should be all the (inhabited) primitive types. The rest is compound, we\n             // check them by visiting their fields/variants.\n             // (`Str` UTF-8 check happens in `visit_aggregate`, too.)\n             ty::Adt(..)\n@@ -489,7 +489,8 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..) => Ok(false),\n-            // Some types only occur during inference, we should not see them here.\n+            // Some types only occur during typechecking, they have no layout.\n+            // We should not see them here and we could not check them anyway.\n             ty::Error\n             | ty::Infer(..)\n             | ty::Placeholder(..)\n@@ -618,7 +619,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         trace!(\"visit_value: {:?}, {:?}\", *op, op.layout);\n \n         // Check primitive types -- the leafs of our recursive descend.\n-        if self.visit_primitive(op)? {\n+        if self.try_visit_primitive(op)? {\n             return Ok(());\n         }\n         // Sanity check: `builtin_deref` does not know any pointers that are not primitive."}]}