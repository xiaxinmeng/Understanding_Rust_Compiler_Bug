{"sha": "af32db21c8e1b1970886eb64b9955f9590e4c445", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMzJkYjIxYzhlMWIxOTcwODg2ZWI2NGI5OTU1Zjk1OTBlNGM0NDU=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-11T18:39:12Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-13T03:51:08Z"}, "message": "Add drop check test & MaybeUninit::first_ptr_mut\n\nAlso in drop check test add hacky workaround for platforms that don't support\npanic=unwind", "tree": {"sha": "beb6fb56af2dd4f6714b38985e5cf9d714bb67e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb6fb56af2dd4f6714b38985e5cf9d714bb67e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af32db21c8e1b1970886eb64b9955f9590e4c445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af32db21c8e1b1970886eb64b9955f9590e4c445", "html_url": "https://github.com/rust-lang/rust/commit/af32db21c8e1b1970886eb64b9955f9590e4c445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af32db21c8e1b1970886eb64b9955f9590e4c445/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "412417d807ec3c0999e281f21e63cf3537c73803", "url": "https://api.github.com/repos/rust-lang/rust/commits/412417d807ec3c0999e281f21e63cf3537c73803", "html_url": "https://github.com/rust-lang/rust/commit/412417d807ec3c0999e281f21e63cf3537c73803"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "6b28ab7d755631f68860ed2cd402f9d1cb20c418", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af32db21c8e1b1970886eb64b9955f9590e4c445/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af32db21c8e1b1970886eb64b9955f9590e4c445/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=af32db21c8e1b1970886eb64b9955f9590e4c445", "patch": "@@ -413,7 +413,8 @@ impl<T, const N: usize> [T; N] {\n             }\n         }\n         let mut dst = MaybeUninit::uninit_array::<N>();\n-        let mut guard: Guard<U, N> = Guard { dst: &mut dst as *mut _ as *mut U, initialized: 0 };\n+        let mut guard: Guard<U, N> =\n+            Guard { dst: MaybeUninit::first_ptr_mut(&mut dst), initialized: 0 };\n         for (src, dst) in IntoIter::new(self).zip(&mut dst) {\n             dst.write(f(src));\n             guard.initialized += 1;\n@@ -423,6 +424,6 @@ impl<T, const N: usize> [T; N] {\n         crate::mem::forget(guard);\n         // SAFETY: At this point we've properly initialized the whole array\n         // and we just need to cast it to the correct type.\n-        unsafe { (&mut dst as *mut _ as *mut [U; N]).read() }\n+        unsafe { crate::mem::transmute_copy::<_, [U; N]>(&dst) }\n     }\n }"}, {"sha": "5aba1a5d958d1dfe38f66230be09f0a5b3deec99", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/af32db21c8e1b1970886eb64b9955f9590e4c445/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af32db21c8e1b1970886eb64b9955f9590e4c445/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=af32db21c8e1b1970886eb64b9955f9590e4c445", "patch": "@@ -301,3 +301,32 @@ fn array_map() {\n     let b = a.map(|v| v as u64);\n     assert_eq!(b, [1, 2, 3]);\n }\n+\n+// See note on above test for why `should_panic` is used.\n+#[test]\n+#[should_panic(expected = \"test succeeded\")]\n+fn array_map_drop_safety() {\n+    use core::sync::atomic::AtomicUsize;\n+    use core::sync::atomic::Ordering;\n+    static DROPPED: AtomicUsize = AtomicUsize::new(0);\n+    struct DropCounter;\n+    impl Drop for DropCounter {\n+        fn drop(&mut self) {\n+            DROPPED.fetch_add(1, Ordering::SeqCst);\n+        }\n+    }\n+\n+    let num_to_create = 5;\n+    let success = std::panic::catch_unwind(|| {\n+        let items = [0; 10];\n+        let mut nth = 0;\n+        items.map(|_| {\n+            assert!(nth < num_to_create);\n+            nth += 1;\n+            DropCounter\n+        });\n+    });\n+    assert!(success.is_err());\n+    assert_eq!(DROPPED.load(Ordering::SeqCst), num_to_create);\n+    panic!(\"test succeeded\")\n+}"}]}