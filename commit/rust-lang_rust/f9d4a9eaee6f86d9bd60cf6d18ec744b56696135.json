{"sha": "f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZDRhOWVhZWU2Zjg2ZDliZDYwY2Y2ZDE4ZWM3NDRiNTY2OTYxMzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-17T14:41:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-17T14:41:56Z"}, "message": "Merge #8795\n\n8795: Allow semantic tokens for strings to be disabled r=matklad a=djrenren\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/7111\r\n\r\nPretty straightforward change, but open to any suggestions if there's a more recommended testing strategy than what I went with.\n\nCo-authored-by: John Renner <john@jrenner.net>", "tree": {"sha": "31c5c36a446ca3cd123309ac85dc39e0e23cdc74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c5c36a446ca3cd123309ac85dc39e0e23cdc74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgooC0CRBK7hj4Ov3rIwAACVUIADO5j4jR7+TZWHxSafr4iGsQ\npv8X1qcSselEE1YEfcyJr+GciCSjTc4iZ+niDp+0TjDucLwulawJTUDhpSasQpeK\n8oJUpLz5BbX/L1PCLbrw9acXBLS10yN7OjpGv998Qrs0UnSxr1xRUF2RrzcffSo/\nexR6nwt+q2POeoBX8evYWF5Jr3+wJZ056Azi9BPZEjvfm0nGUcGVnsW3QcMffKt3\nqECkvax9GYUpCWVtKhr0xi7hivkuKDUh5CNU9zYDpWznUABploo4TPTk3Nb5IYGu\n758f/JCJH595cVt0RPFGq/n7FqHFiopARJmS6xRtSqHEkRqy4lV5s8/wIojThJ8=\n=C0VM\n-----END PGP SIGNATURE-----\n", "payload": "tree 31c5c36a446ca3cd123309ac85dc39e0e23cdc74\nparent fa02911078cfa1b3d3b9fb2cbbed9d1de98cd88e\nparent 7ae3967e5739b786fcd3f7b7b333c73f2c38e8dd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621262516 +0000\ncommitter GitHub <noreply@github.com> 1621262516 +0000\n\nMerge #8795\n\n8795: Allow semantic tokens for strings to be disabled r=matklad a=djrenren\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/7111\r\n\r\nPretty straightforward change, but open to any suggestions if there's a more recommended testing strategy than what I went with.\n\nCo-authored-by: John Renner <john@jrenner.net>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "html_url": "https://github.com/rust-lang/rust/commit/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa02911078cfa1b3d3b9fb2cbbed9d1de98cd88e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa02911078cfa1b3d3b9fb2cbbed9d1de98cd88e", "html_url": "https://github.com/rust-lang/rust/commit/fa02911078cfa1b3d3b9fb2cbbed9d1de98cd88e"}, {"sha": "7ae3967e5739b786fcd3f7b7b333c73f2c38e8dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae3967e5739b786fcd3f7b7b333c73f2c38e8dd", "html_url": "https://github.com/rust-lang/rust/commit/7ae3967e5739b786fcd3f7b7b333c73f2c38e8dd"}], "stats": {"total": 88, "additions": 78, "deletions": 10}, "files": [{"sha": "905a6ee55759e5b0e15571410444b75af3280a60", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "patch": "@@ -208,6 +208,13 @@ config_data! {\n         /// Advanced option, fully override the command rust-analyzer uses for\n         /// formatting.\n         rustfmt_overrideCommand: Option<Vec<String>> = \"null\",\n+\n+        /// Use semantic tokens for strings.\n+        ///\n+        /// In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n+        /// By disabling semantic tokens for strings, other grammars can be used to highlight\n+        /// their contents.\n+        semanticStringTokens: bool = \"true\",\n     }\n }\n \n@@ -381,6 +388,9 @@ impl Config {\n     pub fn line_folding_only(&self) -> bool {\n         try_or!(self.caps.text_document.as_ref()?.folding_range.as_ref()?.line_folding_only?, false)\n     }\n+    pub fn semantic_strings(&self) -> bool {\n+        self.data.semanticStringTokens\n+    }\n     pub fn hierarchical_symbols(&self) -> bool {\n         try_or!(\n             self.caps"}, {"sha": "85e45337c6facdac880cbb792faa0b3a2f9cb8a6", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "patch": "@@ -1394,7 +1394,9 @@ pub(crate) fn handle_semantic_tokens_full(\n     let line_index = snap.file_line_index(file_id)?;\n \n     let highlights = snap.analysis.highlight(file_id)?;\n-    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n+    let semantic_strings = snap.config.semantic_strings();\n+    let semantic_tokens =\n+        to_proto::semantic_tokens(&text, &line_index, highlights, semantic_strings);\n \n     // Unconditionally cache the tokens\n     snap.semantic_tokens_cache.lock().insert(params.text_document.uri, semantic_tokens.clone());\n@@ -1413,8 +1415,9 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n     let line_index = snap.file_line_index(file_id)?;\n \n     let highlights = snap.analysis.highlight(file_id)?;\n-\n-    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n+    let semantic_strings = snap.config.semantic_strings();\n+    let semantic_tokens =\n+        to_proto::semantic_tokens(&text, &line_index, highlights, semantic_strings);\n \n     let mut cache = snap.semantic_tokens_cache.lock();\n     let cached_tokens = cache.entry(params.text_document.uri).or_default();\n@@ -1443,7 +1446,9 @@ pub(crate) fn handle_semantic_tokens_range(\n     let line_index = snap.file_line_index(frange.file_id)?;\n \n     let highlights = snap.analysis.highlight_range(frange)?;\n-    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n+    let semantic_strings = snap.config.semantic_strings();\n+    let semantic_tokens =\n+        to_proto::semantic_tokens(&text, &line_index, highlights, semantic_strings);\n     Ok(Some(semantic_tokens.into()))\n }\n "}, {"sha": "6dc9f82ab6ff69bc6f58eec55f27c8174a53258f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "patch": "@@ -381,6 +381,7 @@ pub(crate) fn semantic_tokens(\n     text: &str,\n     line_index: &LineIndex,\n     highlights: Vec<HlRange>,\n+    include_strings: bool,\n ) -> lsp_types::SemanticTokens {\n     let id = TOKEN_RESULT_COUNTER.fetch_add(1, Ordering::SeqCst).to_string();\n     let mut builder = semantic_tokens::SemanticTokensBuilder::new(id);\n@@ -389,8 +390,11 @@ pub(crate) fn semantic_tokens(\n         if highlight_range.highlight.is_empty() {\n             continue;\n         }\n-        let (type_, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n-        let token_index = semantic_tokens::type_index(type_);\n+        let (typ, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n+        if !include_strings && typ == lsp_types::SemanticTokenType::STRING {\n+            continue;\n+        }\n+        let token_index = semantic_tokens::type_index(typ);\n         let modifier_bitset = mods.0;\n \n         for mut text_range in line_index.index.lines(highlight_range.range) {"}, {"sha": "920c43f25dc9793b1eb8a0b5674e844836077bea", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "patch": "@@ -18,15 +18,16 @@ use lsp_types::{\n     notification::DidOpenTextDocument,\n     request::{\n         CodeActionRequest, Completion, Formatting, GotoTypeDefinition, HoverRequest,\n-        WillRenameFiles,\n+        SemanticTokensRangeRequest, WillRenameFiles,\n     },\n     CodeActionContext, CodeActionParams, CompletionParams, DidOpenTextDocumentParams,\n     DocumentFormattingParams, FileRename, FormattingOptions, GotoDefinitionParams, HoverParams,\n-    PartialResultParams, Position, Range, RenameFilesParams, TextDocumentItem,\n-    TextDocumentPositionParams, WorkDoneProgressParams,\n+    PartialResultParams, Position, Range, RenameFilesParams, SemanticTokens,\n+    SemanticTokensRangeParams, TextDocumentItem, TextDocumentPositionParams,\n+    WorkDoneProgressParams,\n };\n use rust_analyzer::lsp_ext::{OnEnter, Runnables, RunnablesParams};\n-use serde_json::json;\n+use serde_json::{from_value, json};\n use test_utils::skip_slow_tests;\n \n use crate::{\n@@ -37,6 +38,40 @@ use crate::{\n const PROFILE: &str = \"\";\n // const PROFILE: &'static str = \"*@3>100\";\n \n+#[test]\n+fn can_disable_semantic_strings() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    [true, false].iter().for_each(|semantic_strings| {\n+        let server = Project::with_fixture(\n+            r#\"\n+//- /Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- /src/lib.rs\n+const foo: &'static str = \"hi\";\n+\"#,\n+        )\n+        .with_config(serde_json::json!({ \"semanticStringTokens\": semantic_strings }))\n+        .server()\n+        .wait_until_workspace_is_loaded();\n+\n+        let res = server.send_request::<SemanticTokensRangeRequest>(SemanticTokensRangeParams {\n+            text_document: server.doc_id(\"src/lib.rs\"),\n+            partial_result_params: PartialResultParams::default(),\n+            work_done_progress_params: WorkDoneProgressParams::default(),\n+            range: Range::new(Position::new(0, 26), Position::new(0, 30)),\n+        });\n+\n+        let tok_res: SemanticTokens = from_value(res).expect(\"invalid server response\");\n+        assert!(tok_res.data.len() == *semantic_strings as usize);\n+    });\n+}\n+\n #[test]\n fn completes_items_from_standard_library() {\n     if skip_slow_tests() {"}, {"sha": "e2d74e164ca0273122001ed5cec3f8e412f7029d", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "patch": "@@ -332,3 +332,12 @@ Additional arguments to `rustfmt`.\n Advanced option, fully override the command rust-analyzer uses for\n formatting.\n --\n+[[rust-analyzer.semanticStringTokens]]rust-analyzer.semanticStringTokens (default: `true`)::\n++\n+--\n+Use semantic tokens for strings.\n+\n+In some editors (e.g. vscode) semantic tokens override other highlighting grammars.\n+By disabling semantic tokens for strings, other grammars can be used to highlight\n+their contents.\n+--"}, {"sha": "14cffac06efdc7e0e42f45eccc26d26ed37fa90d", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/f9d4a9eaee6f86d9bd60cf6d18ec744b56696135/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=f9d4a9eaee6f86d9bd60cf6d18ec744b56696135", "patch": "@@ -778,6 +778,11 @@\n                         \"type\": \"string\"\n                     }\n                 },\n+                \"rust-analyzer.semanticStringTokens\": {\n+                    \"markdownDescription\": \"Use semantic tokens for strings.\\n\\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\\nBy disabling semantic tokens for strings, other grammars can be used to highlight\\ntheir contents.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"$generated-end\": false\n             }\n         },"}]}