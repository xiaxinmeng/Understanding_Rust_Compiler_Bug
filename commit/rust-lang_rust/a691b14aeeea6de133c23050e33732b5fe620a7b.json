{"sha": "a691b14aeeea6de133c23050e33732b5fe620a7b", "node_id": "C_kwDOAAsO6NoAKGE2OTFiMTRhZWVlYTZkZTEzM2MyMzA1MGUzMzczMmI1ZmU2MjBhN2I", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-05T15:15:48Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-13T16:39:59Z"}, "message": "Allow skipping tests from the commandline", "tree": {"sha": "3e73720217921c6461976c35202ee44673f593e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e73720217921c6461976c35202ee44673f593e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a691b14aeeea6de133c23050e33732b5fe620a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a691b14aeeea6de133c23050e33732b5fe620a7b", "html_url": "https://github.com/rust-lang/rust/commit/a691b14aeeea6de133c23050e33732b5fe620a7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a691b14aeeea6de133c23050e33732b5fe620a7b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c1c84d79e26e5250d3ad1ee894843c01785787a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c1c84d79e26e5250d3ad1ee894843c01785787a", "html_url": "https://github.com/rust-lang/rust/commit/8c1c84d79e26e5250d3ad1ee894843c01785787a"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "41d0d6f23198a1f9ada0fedb8c86b2925671c23c", "filename": "build_system/main.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a691b14aeeea6de133c23050e33732b5fe620a7b/build_system%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a691b14aeeea6de133c23050e33732b5fe620a7b/build_system%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmain.rs?ref=a691b14aeeea6de133c23050e33732b5fe620a7b", "patch": "@@ -90,6 +90,7 @@ fn main() {\n     let mut sysroot_kind = SysrootKind::Clif;\n     let mut use_unstable_features = true;\n     let mut frozen = false;\n+    let mut skip_tests = vec![];\n     let mut use_backend = None;\n     while let Some(arg) = args.next().as_deref() {\n         match arg {\n@@ -115,6 +116,12 @@ fn main() {\n             }\n             \"--no-unstable-features\" => use_unstable_features = false,\n             \"--frozen\" => frozen = true,\n+            \"--skip-test\" => {\n+                // FIXME check that all passed in tests actually exist\n+                skip_tests.push(args.next().unwrap_or_else(|| {\n+                    arg_error!(\"--skip-test requires argument\");\n+                }));\n+            }\n             \"--use-backend\" => {\n                 use_backend = Some(match args.next() {\n                     Some(name) => name,\n@@ -218,6 +225,7 @@ fn main() {\n                 channel,\n                 sysroot_kind,\n                 use_unstable_features,\n+                &skip_tests.iter().map(|test| &**test).collect::<Vec<_>>(),\n                 &cg_clif_dylib,\n                 &bootstrap_host_compiler,\n                 rustup_toolchain_name.as_deref(),"}, {"sha": "08d8f708c7da474e2b2bc987a1e0a6345dba8b8c", "filename": "build_system/tests.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a691b14aeeea6de133c23050e33732b5fe620a7b/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a691b14aeeea6de133c23050e33732b5fe620a7b/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=a691b14aeeea6de133c23050e33732b5fe620a7b", "patch": "@@ -19,15 +19,15 @@ struct TestCase {\n }\n \n enum TestCaseCmd {\n-    Custom { func: &'static dyn Fn(&TestRunner) },\n+    Custom { func: &'static dyn Fn(&TestRunner<'_>) },\n     BuildLib { source: &'static str, crate_types: &'static str },\n     BuildBinAndRun { source: &'static str, args: &'static [&'static str] },\n     JitBin { source: &'static str, args: &'static str },\n }\n \n impl TestCase {\n     // FIXME reduce usage of custom test case commands\n-    const fn custom(config: &'static str, func: &'static dyn Fn(&TestRunner)) -> Self {\n+    const fn custom(config: &'static str, func: &'static dyn Fn(&TestRunner<'_>)) -> Self {\n         Self { config, cmd: TestCaseCmd::Custom { func } }\n     }\n \n@@ -247,6 +247,7 @@ pub(crate) fn run_tests(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     use_unstable_features: bool,\n+    skip_tests: &[&str],\n     cg_clif_dylib: &CodegenBackend,\n     bootstrap_host_compiler: &Compiler,\n     rustup_toolchain_name: Option<&str>,\n@@ -256,7 +257,7 @@ pub(crate) fn run_tests(\n         get_default_sysroot(&bootstrap_host_compiler.rustc).join(\"lib/rustlib/src/rust\");\n     assert!(stdlib_source.exists());\n \n-    if config::get_bool(\"testsuite.no_sysroot\") {\n+    if config::get_bool(\"testsuite.no_sysroot\") && !skip_tests.contains(&\"testsuite.no_sysroot\") {\n         let target_compiler = build_sysroot::build_sysroot(\n             dirs,\n             channel,\n@@ -271,6 +272,7 @@ pub(crate) fn run_tests(\n             dirs.clone(),\n             target_compiler,\n             use_unstable_features,\n+            skip_tests,\n             bootstrap_host_compiler.triple == target_triple,\n             stdlib_source.clone(),\n         );\n@@ -281,8 +283,10 @@ pub(crate) fn run_tests(\n         eprintln!(\"[SKIP] no_sysroot tests\");\n     }\n \n-    let run_base_sysroot = config::get_bool(\"testsuite.base_sysroot\");\n-    let run_extended_sysroot = config::get_bool(\"testsuite.extended_sysroot\");\n+    let run_base_sysroot = config::get_bool(\"testsuite.base_sysroot\")\n+        && !skip_tests.contains(&\"testsuite.base_sysroot\");\n+    let run_extended_sysroot = config::get_bool(\"testsuite.extended_sysroot\")\n+        && !skip_tests.contains(&\"testsuite.extended_sysroot\");\n \n     if run_base_sysroot || run_extended_sysroot {\n         let mut target_compiler = build_sysroot::build_sysroot(\n@@ -302,6 +306,7 @@ pub(crate) fn run_tests(\n             dirs.clone(),\n             target_compiler,\n             use_unstable_features,\n+            skip_tests,\n             bootstrap_host_compiler.triple == target_triple,\n             stdlib_source,\n         );\n@@ -320,20 +325,22 @@ pub(crate) fn run_tests(\n     }\n }\n \n-struct TestRunner {\n+struct TestRunner<'a> {\n     is_native: bool,\n     jit_supported: bool,\n     use_unstable_features: bool,\n+    skip_tests: &'a [&'a str],\n     dirs: Dirs,\n     target_compiler: Compiler,\n     stdlib_source: PathBuf,\n }\n \n-impl TestRunner {\n+impl<'a> TestRunner<'a> {\n     fn new(\n         dirs: Dirs,\n         mut target_compiler: Compiler,\n         use_unstable_features: bool,\n+        skip_tests: &'a [&'a str],\n         is_native: bool,\n         stdlib_source: PathBuf,\n     ) -> Self {\n@@ -360,6 +367,7 @@ impl TestRunner {\n             is_native,\n             jit_supported,\n             use_unstable_features,\n+            skip_tests,\n             dirs,\n             target_compiler,\n             stdlib_source,\n@@ -372,7 +380,10 @@ impl TestRunner {\n             let tag = tag.to_uppercase();\n             let is_jit_test = tag == \"JIT\";\n \n-            if !config::get_bool(config) || (is_jit_test && !self.jit_supported) {\n+            if !config::get_bool(config)\n+                || (is_jit_test && !self.jit_supported)\n+                || self.skip_tests.contains(&config)\n+            {\n                 eprintln!(\"[{tag}] {testname} (skipped)\");\n                 continue;\n             } else {"}, {"sha": "6d3b3a13d6e755a2966581b5835091a2005da307", "filename": "build_system/usage.txt", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a691b14aeeea6de133c23050e33732b5fe620a7b/build_system%2Fusage.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a691b14aeeea6de133c23050e33732b5fe620a7b/build_system%2Fusage.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fusage.txt?ref=a691b14aeeea6de133c23050e33732b5fe620a7b", "patch": "@@ -3,7 +3,7 @@ The build system of cg_clif.\n USAGE:\n     ./y.sh prepare [--out-dir DIR] [--download-dir DIR]\n     ./y.sh build [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]\n-    ./y.sh test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]\n+    ./y.sh test [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen] [--skip-test TESTNAME]\n     ./y.sh abi-cafe [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]\n     ./y.sh bench [--debug] [--sysroot none|clif|llvm] [--out-dir DIR] [--download-dir DIR] [--no-unstable-features] [--frozen]\n \n@@ -32,6 +32,9 @@ OPTIONS:\n     --frozen\n             Require Cargo.lock and cache are up to date\n \n+    --skip-test TESTNAME\n+            Skip testing the TESTNAME test. The test name format is the same as config.txt.\n+\n     --use-backend NAME\n             Use the existing Cranelift (or other) backend of the rustc with which we built.\n             Warning: This is meant for use in rust's CI only!"}]}