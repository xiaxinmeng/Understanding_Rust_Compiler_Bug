{"sha": "c4559ebfde5d6cae587d4f099d758c1d7c74998f", "node_id": "C_kwDOAAsO6NoAKGM0NTU5ZWJmZGU1ZDZjYWU1ODdkNGYwOTlkNzU4YzFkN2M3NDk5OGY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-09-12T19:18:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-12T19:18:59Z"}, "message": "Improve Attribute doc methods", "tree": {"sha": "36f1fe533e53f7152cebc915170230fd7823b2ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36f1fe533e53f7152cebc915170230fd7823b2ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4559ebfde5d6cae587d4f099d758c1d7c74998f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjH4YjCRBK7hj4Ov3rIwAA0zYIAIDWyQ3hj+Oj7sIj9tBBEsAk\n4SAn5n29yfZnrkJbzjzzGQNZKhEndibL2J2z2VW3O32ojL8sZvvdFtTC4Zm2ibH+\nK3qn1oManps9pcbiNhz8j814mq+yJADP5dTziVsOYbiRXsdmRq3cSbz6FHNRs8Je\ntn6UyVvycqDkRzOn7OL9MtpgjJtRJ7kmYfqLC4mA0uxeFFW8AV+3DzS2mAIRowoA\nq+DBkruvsuwraVQUq6cgQTJEI9EGGXVbC05BrKFk2gH6aX6UN56CaeK0aTSQPm9/\nYnkZ1urgBZKzbSPftI4vQQQM532B+pd1Ij/hvjLg3+Pb/SiXdgiM/UdcUViC+SU=\n=51eq\n-----END PGP SIGNATURE-----\n", "payload": "tree 36f1fe533e53f7152cebc915170230fd7823b2ad\nparent 52e003a6e93940ae49cbfc806c72ed5b0217cf4e\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1663010339 +0200\ncommitter GitHub <noreply@github.com> 1663010339 +0200\n\nImprove Attribute doc methods"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4559ebfde5d6cae587d4f099d758c1d7c74998f", "html_url": "https://github.com/rust-lang/rust/commit/c4559ebfde5d6cae587d4f099d758c1d7c74998f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4559ebfde5d6cae587d4f099d758c1d7c74998f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52e003a6e93940ae49cbfc806c72ed5b0217cf4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/52e003a6e93940ae49cbfc806c72ed5b0217cf4e", "html_url": "https://github.com/rust-lang/rust/commit/52e003a6e93940ae49cbfc806c72ed5b0217cf4e"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "686a0d6a5c9d33920321d710a57c2d50e9086ffc", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4559ebfde5d6cae587d4f099d758c1d7c74998f/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4559ebfde5d6cae587d4f099d758c1d7c74998f/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=c4559ebfde5d6cae587d4f099d758c1d7c74998f", "patch": "@@ -233,14 +233,20 @@ impl AttrItem {\n \n impl Attribute {\n     /// Returns `true` if it is a sugared doc comment (`///` or `//!` for example).\n-    /// So `#[doc = \"doc\"]` will return `false`.\n+    /// So `#[doc = \"doc\"]` (which is a doc comment) and `#[doc(...)]` (which is not\n+    /// a doc comment) will return `false`.\n     pub fn is_doc_comment(&self) -> bool {\n         match self.kind {\n             AttrKind::Normal(..) => false,\n             AttrKind::DocComment(..) => true,\n         }\n     }\n \n+    /// Returns the documentation and its kind if this is a doc comment or a sugared doc comment.\n+    /// * `///doc` returns `Some((\"doc\", CommentKind::Line))`.\n+    /// * `/** doc */` returns `Some((\"doc\", CommentKind::Block))`.\n+    /// * `#[doc = \"doc\"]` returns `Some((\"doc\", CommentKind::Line))`.\n+    /// * `#[doc(...)]` returns `None`.\n     pub fn doc_str_and_comment_kind(&self) -> Option<(Symbol, CommentKind)> {\n         match self.kind {\n             AttrKind::DocComment(kind, data) => Some((data, kind)),\n@@ -253,6 +259,10 @@ impl Attribute {\n         }\n     }\n \n+    /// Returns the documentation if this is a doc comment or a sugared doc comment.\n+    /// * `///doc` returns `Some(\"doc\")`.\n+    /// * `#[doc = \"doc\"]` returns `Some(\"doc\")`.\n+    /// * `#[doc(...)]` returns `None`.\n     pub fn doc_str(&self) -> Option<Symbol> {\n         match self.kind {\n             AttrKind::DocComment(.., data) => Some(data),"}]}