{"sha": "3088ca0a53540e0d7ae14f0d18efcad16cad0735", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwODhjYTBhNTM1NDBlMGQ3YWUxNGYwZDE4ZWZjYWQxNmNhZDA3MzU=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-19T13:08:13Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:49:44Z"}, "message": "Take substitutions into account.", "tree": {"sha": "d4adc50c7bddda2470c64dff00a080f522a5ecac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4adc50c7bddda2470c64dff00a080f522a5ecac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3088ca0a53540e0d7ae14f0d18efcad16cad0735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3088ca0a53540e0d7ae14f0d18efcad16cad0735", "html_url": "https://github.com/rust-lang/rust/commit/3088ca0a53540e0d7ae14f0d18efcad16cad0735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3088ca0a53540e0d7ae14f0d18efcad16cad0735/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e16f413582ea45d6b318337ea2c7838fdc3b82a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e16f413582ea45d6b318337ea2c7838fdc3b82a4", "html_url": "https://github.com/rust-lang/rust/commit/e16f413582ea45d6b318337ea2c7838fdc3b82a4"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "992bb868222bb3feca2662053b0fa28fc2ebe97f", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3088ca0a53540e0d7ae14f0d18efcad16cad0735/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3088ca0a53540e0d7ae14f0d18efcad16cad0735/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=3088ca0a53540e0d7ae14f0d18efcad16cad0735", "patch": "@@ -39,8 +39,8 @@ pub(crate) struct Pat {\n }\n \n impl Pat {\n-    pub(crate) fn wildcard_from_ty(ty: &Ty) -> Self {\n-        Pat { ty: ty.clone(), kind: Box::new(PatKind::Wild) }\n+    pub(crate) fn wildcard_from_ty(ty: Ty) -> Self {\n+        Pat { ty, kind: Box::new(PatKind::Wild) }\n     }\n }\n \n@@ -1145,6 +1145,22 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn pattern_type_is_of_substitution() {\n+        cov_mark::check!(match_check_wildcard_expanded_to_substitutions);\n+        check_diagnostics(\n+            r#\"\n+struct Foo<T>(T);\n+struct Bar;\n+fn main() {\n+    match Foo(Bar) {\n+        _ | Foo(Bar) => {}\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     mod false_negatives {\n         //! The implementation of match checking here is a work in progress. As we roll this out, we\n         //! prefer false negatives to false positives (ideally there would be no false positives). This"}, {"sha": "a470826174c4520ad4334b2db197b8fe1d45b484", "filename": "crates/hir_ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3088ca0a53540e0d7ae14f0d18efcad16cad0735/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3088ca0a53540e0d7ae14f0d18efcad16cad0735/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=3088ca0a53540e0d7ae14f0d18efcad16cad0735", "patch": "@@ -632,10 +632,7 @@ impl Fields {\n     }\n \n     /// Convenience; internal use.\n-    fn wildcards_from_tys<'a>(\n-        cx: &MatchCheckCtx<'_>,\n-        tys: impl IntoIterator<Item = &'a Ty>,\n-    ) -> Self {\n+    fn wildcards_from_tys(cx: &MatchCheckCtx<'_>, tys: impl IntoIterator<Item = Ty>) -> Self {\n         let wilds = tys.into_iter().map(Pat::wildcard_from_ty);\n         let pats = wilds.map(|pat| cx.alloc_pat(pat)).collect();\n         Fields::Vec(pats)\n@@ -645,13 +642,13 @@ impl Fields {\n     pub(crate) fn wildcards(pcx: PatCtxt<'_>, constructor: &Constructor) -> Self {\n         let ty = pcx.ty;\n         let cx = pcx.cx;\n-        let wildcard_from_ty = |ty| cx.alloc_pat(Pat::wildcard_from_ty(ty));\n+        let wildcard_from_ty = |ty: &Ty| cx.alloc_pat(Pat::wildcard_from_ty(ty.clone()));\n \n         let ret = match constructor {\n             Single | Variant(_) => match ty.kind(&Interner) {\n                 TyKind::Tuple(_, substs) => {\n                     let tys = substs.iter(&Interner).map(|ty| ty.assert_ty_ref(&Interner));\n-                    Fields::wildcards_from_tys(cx, tys)\n+                    Fields::wildcards_from_tys(cx, tys.cloned())\n                 }\n                 TyKind::Ref(.., rty) => Fields::from_single_pattern(wildcard_from_ty(rty)),\n                 &TyKind::Adt(AdtId(adt), ref substs) => {\n@@ -666,14 +663,20 @@ impl Fields {\n                         // Whether we must not match the fields of this variant exhaustively.\n                         let is_non_exhaustive =\n                             is_field_list_non_exhaustive(variant_id, cx) && !adt_is_local;\n-                        let field_ty_arena = cx.db.field_types(variant_id);\n-                        let field_tys =\n-                            || field_ty_arena.iter().map(|(_, binders)| binders.skip_binders());\n+\n+                        cov_mark::hit!(match_check_wildcard_expanded_to_substitutions);\n+                        let field_ty_data = cx.db.field_types(variant_id);\n+                        let field_tys = || {\n+                            field_ty_data\n+                                .iter()\n+                                .map(|(_, binders)| binders.clone().substitute(&Interner, substs))\n+                        };\n+\n                         // In the following cases, we don't need to filter out any fields. This is\n                         // the vast majority of real cases, since uninhabited fields are uncommon.\n                         let has_no_hidden_fields = (matches!(adt, hir_def::AdtId::EnumId(_))\n                             && !is_non_exhaustive)\n-                            || !field_tys().any(|ty| cx.is_uninhabited(ty));\n+                            || !field_tys().any(|ty| cx.is_uninhabited(&ty));\n \n                         if has_no_hidden_fields {\n                             Fields::wildcards_from_tys(cx, field_tys())\n@@ -759,7 +762,7 @@ impl Fields {\n             FloatRange(..) => UNHANDLED,\n             Constructor::IntRange(_) => UNHANDLED,\n             NonExhaustive => PatKind::Wild,\n-            Wildcard => return Pat::wildcard_from_ty(pcx.ty),\n+            Wildcard => return Pat::wildcard_from_ty(pcx.ty.clone()),\n             Opaque => pcx.cx.bug(\"we should not try to apply an opaque constructor\"),\n             Missing => pcx.cx.bug(\n                 \"trying to apply the `Missing` constructor;\\"}, {"sha": "61fba41bf8db11413791049e0457a30a07ca793c", "filename": "crates/hir_ty/src/diagnostics/match_check/usefulness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3088ca0a53540e0d7ae14f0d18efcad16cad0735/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3088ca0a53540e0d7ae14f0d18efcad16cad0735/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs?ref=3088ca0a53540e0d7ae14f0d18efcad16cad0735", "patch": "@@ -1152,7 +1152,7 @@ pub(crate) fn compute_match_usefulness(\n         .collect();\n \n     let wild_pattern =\n-        cx.pattern_arena.borrow_mut().alloc(Pat::wildcard_from_ty(&cx.infer[cx.match_expr]));\n+        cx.pattern_arena.borrow_mut().alloc(Pat::wildcard_from_ty(cx.infer[cx.match_expr].clone()));\n     let v = PatStack::from_pattern(wild_pattern);\n     let usefulness = is_useful(cx, &matrix, &v, ConstructWitness, false, true);\n     let non_exhaustiveness_witnesses = match usefulness {"}]}