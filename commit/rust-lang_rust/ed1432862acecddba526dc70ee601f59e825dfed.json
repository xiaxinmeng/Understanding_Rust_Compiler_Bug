{"sha": "ed1432862acecddba526dc70ee601f59e825dfed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMTQzMjg2MmFjZWNkZGJhNTI2ZGM3MGVlNjAxZjU5ZTgyNWRmZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-02T07:32:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-02T07:32:44Z"}, "message": "Auto merge of #1283 - RalfJung:backtrace, r=RalfJung\n\nMake backtrace function names and spans match up\n\nThis is the Miri side of https://github.com/rust-lang/rust/pull/70590.\nFixes https://github.com/rust-lang/miri/issues/521", "tree": {"sha": "4eb0af07b605028ec52c7808e137a8d815391569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb0af07b605028ec52c7808e137a8d815391569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed1432862acecddba526dc70ee601f59e825dfed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1432862acecddba526dc70ee601f59e825dfed", "html_url": "https://github.com/rust-lang/rust/commit/ed1432862acecddba526dc70ee601f59e825dfed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed1432862acecddba526dc70ee601f59e825dfed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77a307fe7dddb81f8857144a7dd7362751508090", "url": "https://api.github.com/repos/rust-lang/rust/commits/77a307fe7dddb81f8857144a7dd7362751508090", "html_url": "https://github.com/rust-lang/rust/commit/77a307fe7dddb81f8857144a7dd7362751508090"}, {"sha": "5ce2466892126a3ea92138df67f09243a22dcb96", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce2466892126a3ea92138df67f09243a22dcb96", "html_url": "https://github.com/rust-lang/rust/commit/5ce2466892126a3ea92138df67f09243a22dcb96"}], "stats": {"total": 50, "additions": 18, "deletions": 32}, "files": [{"sha": "6ed19772cad9ceb0ef0a4299942aa74e3962e95e", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed1432862acecddba526dc70ee601f59e825dfed/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/ed1432862acecddba526dc70ee601f59e825dfed/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=ed1432862acecddba526dc70ee601f59e825dfed", "patch": "@@ -1 +1 @@\n-235938d1acdd93d6641a741c81f64e415b786751\n+b793f403bdfbcc0ff3e15ed8177a81d79ba4a29b"}, {"sha": "9ff434021150f12fba18587374d1f9bce49dc211", "filename": "src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ed1432862acecddba526dc70ee601f59e825dfed/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1432862acecddba526dc70ee601f59e825dfed/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=ed1432862acecddba526dc70ee601f59e825dfed", "patch": "@@ -129,15 +129,12 @@ fn report_msg<'tcx, 'mir>(\n         err.help(help);\n     }\n     // Add backtrace\n-    let frames = ecx.generate_stacktrace(None);\n-    // We iterate with indices because we need to look at the next frame (the caller).\n-    for idx in 0..frames.len() {\n-        let frame_info = &frames[idx];\n-        let call_site_is_local = frames\n-            .get(idx + 1)\n-            .map_or(false, |caller_info| caller_info.instance.def_id().is_local());\n-        if call_site_is_local {\n-            err.span_note(frame_info.call_site, &frame_info.to_string());\n+    let frames = ecx.generate_stacktrace();\n+    for (idx, frame_info) in frames.iter().enumerate() {\n+        let is_local = frame_info.instance.def_id().is_local();\n+        // No span for non-local frames and the first frame (which is the error site).\n+        if is_local && idx > 0 {\n+            err.span_note(frame_info.span, &frame_info.to_string());\n         } else {\n             err.note(&frame_info.to_string());\n         }"}, {"sha": "7b1ac1aacfc8be50acf0e790df18e7040734a47e", "filename": "src/helpers.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ed1432862acecddba526dc70ee601f59e825dfed/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1432862acecddba526dc70ee601f59e825dfed/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=ed1432862acecddba526dc70ee601f59e825dfed", "patch": "@@ -10,7 +10,6 @@ use rustc_middle::ty::{\n     List, TyCtxt,\n };\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n-use rustc_span::source_map::DUMMY_SP;\n \n use rand::RngCore;\n \n@@ -170,13 +169,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // Push frame.\n         let mir = &*this.load_mir(f.def, None)?;\n-        let span = this\n-            .stack()\n-            .last()\n-            .and_then(Frame::current_source_info)\n-            .map(|si| si.span)\n-            .unwrap_or(DUMMY_SP);\n-        this.push_stack_frame(f, span, mir, dest, stack_pop)?;\n+        this.push_stack_frame(f, mir, dest, stack_pop)?;\n \n         // Initialize arguments.\n         let mut callee_args = this.frame().body.args_iter();\n@@ -331,19 +324,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 fields: impl Iterator<Item = InterpResult<'tcx, MPlaceTy<'tcx, Tag>>>,\n             ) -> InterpResult<'tcx> {\n                 match place.layout.fields {\n-                    layout::FieldPlacement::Array { .. } => {\n+                    layout::FieldsShape::Array { .. } => {\n                         // For the array layout, we know the iterator will yield sorted elements so\n                         // we can avoid the allocation.\n                         self.walk_aggregate(place, fields)\n                     }\n-                    layout::FieldPlacement::Arbitrary { .. } => {\n+                    layout::FieldsShape::Arbitrary { .. } => {\n                         // Gather the subplaces and sort them before visiting.\n                         let mut places =\n                             fields.collect::<InterpResult<'tcx, Vec<MPlaceTy<'tcx, Tag>>>>()?;\n                         places.sort_by_key(|place| place.ptr.assert_ptr().offset);\n                         self.walk_aggregate(place, places.into_iter().map(Ok))\n                     }\n-                    layout::FieldPlacement::Union { .. } => {\n+                    layout::FieldsShape::Union { .. } => {\n                         // Uh, what?\n                         bug!(\"a union is not an aggregate we should ever visit\")\n                     }"}, {"sha": "61c9f71407bf5930d94c8f45a95e99397c05bb58", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed1432862acecddba526dc70ee601f59e825dfed/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1432862acecddba526dc70ee601f59e825dfed/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=ed1432862acecddba526dc70ee601f59e825dfed", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::{\n     Ty,\n };\n use rustc_ast::attr;\n-use rustc_span::{source_map::Span, symbol::{sym, Symbol}};\n+use rustc_span::symbol::{sym, Symbol};\n \n use crate::*;\n \n@@ -253,7 +253,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     #[inline(always)]\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n@@ -276,13 +275,12 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     #[inline(always)]\n     fn call_intrinsic(\n         ecx: &mut rustc_mir::interpret::InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        ecx.call_intrinsic(span, instance, args, ret, unwind)\n+        ecx.call_intrinsic(instance, args, ret, unwind)\n     }\n \n     #[inline(always)]"}, {"sha": "b7900bfaa5d5fac6b0894206d2eb562e269476bb", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed1432862acecddba526dc70ee601f59e825dfed/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1432862acecddba526dc70ee601f59e825dfed/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=ed1432862acecddba526dc70ee601f59e825dfed", "patch": "@@ -5,22 +5,20 @@ use rustc_middle::mir;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::{Align, LayoutOf};\n use rustc_apfloat::Float;\n-use rustc_span::source_map::Span;\n \n use crate::*;\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn call_intrinsic(\n         &mut self,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        if this.emulate_intrinsic(span, instance, args, ret)? {\n+        if this.emulate_intrinsic(instance, args, ret)? {\n             return Ok(());\n         }\n         let substs = instance.substs;"}, {"sha": "3474945980a90f34e2b5386b856a0b69fed7b6ed", "filename": "src/shims/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed1432862acecddba526dc70ee601f59e825dfed/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1432862acecddba526dc70ee601f59e825dfed/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=ed1432862acecddba526dc70ee601f59e825dfed", "patch": "@@ -51,7 +51,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n-        trace!(\"miri_start_panic: {:?}\", this.frame().span);\n+        trace!(\"miri_start_panic: {:?}\", this.frame().instance);\n \n         // Get the raw pointer stored in arg[0] (the panic payload).\n         let payload = this.read_scalar(args[0])?.not_undef()?;\n@@ -133,7 +133,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let (true, Some(catch_unwind)) = (unwinding, extra.catch_unwind.take()) {\n             // We've just popped a frame that was pushed by `try`,\n             // and we are unwinding, so we should catch that.\n-            trace!(\"unwinding: found catch_panic frame during unwinding: {:?}\", this.frame().span);\n+            trace!(\"unwinding: found catch_panic frame during unwinding: {:?}\", this.frame().instance);\n \n             // We set the return value of `try` to 1, since there was a panic.\n             this.write_scalar(Scalar::from_i32(1), catch_unwind.dest)?;"}, {"sha": "5e9e2ac204ea1a9077ce1daa3ffa96f9c3bd4539", "filename": "tests/compile-fail/never_transmute_void.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed1432862acecddba526dc70ee601f59e825dfed/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed1432862acecddba526dc70ee601f59e825dfed/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_void.rs?ref=ed1432862acecddba526dc70ee601f59e825dfed", "patch": "@@ -7,12 +7,12 @@\n enum Void {}\n \n fn f(v: Void) -> ! {\n-    match v {} //~ ERROR  entering unreachable code\n+    match v {} //~ ERROR entering unreachable code\n }\n \n fn main() {\n     let v: Void = unsafe {\n         std::mem::transmute::<(), Void>(())\n     };\n-    f(v); //~ inside call to `f`\n+    f(v); //~ inside `main`\n }"}]}