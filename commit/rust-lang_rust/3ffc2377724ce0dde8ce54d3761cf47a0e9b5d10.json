{"sha": "3ffc2377724ce0dde8ce54d3761cf47a0e9b5d10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZmMyMzc3NzI0Y2UwZGRlOGNlNTRkMzc2MWNmNDdhMGU5YjVkMTA=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-07T08:48:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-07T08:48:43Z"}, "message": "Merge pull request #373 from bjorn3/alloc_fix\n\nAlloc api fix and tmp disable validation_op because of ICE", "tree": {"sha": "6dd5e842383fb217168f2886adb055df9e9fdbf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dd5e842383fb217168f2886adb055df9e9fdbf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ffc2377724ce0dde8ce54d3761cf47a0e9b5d10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa8BLrCRBK7hj4Ov3rIwAAdHIIAGhIrHMwlS/L5u32mQenrkrI\nX3J2FJN3zUUM5ctljIKwCljhXDWQt1l9Evbjvx2nmXY+7+3pZ7sByyDQq34JjzAt\nhPpz6AZcn9cNPebus0pOvLz/8tAIRPC3bppU4valutgRtmVaVkIrmiWflLOrJxG5\nU8kGEYZnwh7bjqnj8G0Gh8KXnkTO5Cu15zI3Z+rdbqxOL+K1ZN2+C3rIo/TlKPdo\nljjrODRnoCwtd8pcGdomlQodHWZZ6OkqB3rceQ8hlG6xmH2EAJd5UkxNGJlpkYSK\n5Xu568GTeMSg4GtLmmaWIxikdPNbAp74FRjcO/Gg4Ym0qrSYFaEAeECLeavVz/4=\n=zeqb\n-----END PGP SIGNATURE-----\n", "payload": "tree 6dd5e842383fb217168f2886adb055df9e9fdbf5\nparent 696dda84cacabe6bc81471e01b4f79929678d78f\nparent 42ab1351f45ba602eba583288c28db26870d5e52\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1525682923 +0200\ncommitter GitHub <noreply@github.com> 1525682923 +0200\n\nMerge pull request #373 from bjorn3/alloc_fix\n\nAlloc api fix and tmp disable validation_op because of ICE"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ffc2377724ce0dde8ce54d3761cf47a0e9b5d10", "html_url": "https://github.com/rust-lang/rust/commit/3ffc2377724ce0dde8ce54d3761cf47a0e9b5d10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ffc2377724ce0dde8ce54d3761cf47a0e9b5d10/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "696dda84cacabe6bc81471e01b4f79929678d78f", "url": "https://api.github.com/repos/rust-lang/rust/commits/696dda84cacabe6bc81471e01b4f79929678d78f", "html_url": "https://github.com/rust-lang/rust/commit/696dda84cacabe6bc81471e01b4f79929678d78f"}, {"sha": "42ab1351f45ba602eba583288c28db26870d5e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/42ab1351f45ba602eba583288c28db26870d5e52", "html_url": "https://github.com/rust-lang/rust/commit/42ab1351f45ba602eba583288c28db26870d5e52"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "de69c58fb4ac647e145d4ae06c73ddf0ccbb6818", "filename": "miri/fn_call.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3ffc2377724ce0dde8ce54d3761cf47a0e9b5d10/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffc2377724ce0dde8ce54d3761cf47a0e9b5d10/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=3ffc2377724ce0dde8ce54d3761cf47a0e9b5d10", "patch": "@@ -626,7 +626,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n \n         match &path[..] {\n             // Allocators are magic.  They have no MIR, even when the rest of libstd does.\n-            \"alloc::heap::::__rust_alloc\" => {\n+            \"alloc::alloc::::__rust_alloc\" => {\n                 let size = self.value_to_primval(args[0])?.to_u64()?;\n                 let align = self.value_to_primval(args[1])?.to_u64()?;\n                 if size == 0 {\n@@ -640,7 +640,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                                                Some(MemoryKind::Rust.into()))?;\n                 self.write_primval(dest, PrimVal::Ptr(ptr), dest_ty)?;\n             }\n-            \"alloc::heap::::__rust_alloc_zeroed\" => {\n+            \"alloc::alloc::::__rust_alloc_zeroed\" => {\n                 let size = self.value_to_primval(args[0])?.to_u64()?;\n                 let align = self.value_to_primval(args[1])?.to_u64()?;\n                 if size == 0 {\n@@ -655,7 +655,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                 self.memory.write_repeat(ptr.into(), 0, size)?;\n                 self.write_primval(dest, PrimVal::Ptr(ptr), dest_ty)?;\n             }\n-            \"alloc::heap::::__rust_dealloc\" => {\n+            \"alloc::alloc::::__rust_dealloc\" => {\n                 let ptr = self.into_ptr(args[0].value)?.to_ptr()?;\n                 let old_size = self.value_to_primval(args[1])?.to_u64()?;\n                 let align = self.value_to_primval(args[2])?.to_u64()?;\n@@ -671,27 +671,23 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                     MemoryKind::Rust.into(),\n                 )?;\n             }\n-            \"alloc::heap::::__rust_realloc\" => {\n+            \"alloc::alloc::::__rust_realloc\" => {\n                 let ptr = self.into_ptr(args[0].value)?.to_ptr()?;\n                 let old_size = self.value_to_primval(args[1])?.to_u64()?;\n-                let old_align = self.value_to_primval(args[2])?.to_u64()?;\n+                let align = self.value_to_primval(args[2])?.to_u64()?;\n                 let new_size = self.value_to_primval(args[3])?.to_u64()?;\n-                let new_align = self.value_to_primval(args[4])?.to_u64()?;\n                 if old_size == 0 || new_size == 0 {\n                     return err!(HeapAllocZeroBytes);\n                 }\n-                if !old_align.is_power_of_two() {\n-                    return err!(HeapAllocNonPowerOfTwoAlignment(old_align));\n-                }\n-                if !new_align.is_power_of_two() {\n-                    return err!(HeapAllocNonPowerOfTwoAlignment(new_align));\n+                if !align.is_power_of_two() {\n+                    return err!(HeapAllocNonPowerOfTwoAlignment(align));\n                 }\n                 let new_ptr = self.memory.reallocate(\n                     ptr,\n                     old_size,\n-                    Align::from_bytes(old_align, old_align).unwrap(),\n+                    Align::from_bytes(align, align).unwrap(),\n                     new_size,\n-                    Align::from_bytes(new_align, new_align).unwrap(),\n+                    Align::from_bytes(align, align).unwrap(),\n                     MemoryKind::Rust.into(),\n                 )?;\n                 self.write_primval(dest, PrimVal::Ptr(new_ptr), dest_ty)?;"}, {"sha": "ca479e765ce5a27d2d8634d5a689629f9c12ff42", "filename": "miri/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ffc2377724ce0dde8ce54d3761cf47a0e9b5d10/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ffc2377724ce0dde8ce54d3761cf47a0e9b5d10/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=3ffc2377724ce0dde8ce54d3761cf47a0e9b5d10", "patch": "@@ -448,6 +448,8 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         op: ::rustc::mir::ValidationOp,\n         operand: &::rustc::mir::ValidationOperand<'tcx, ::rustc::mir::Place<'tcx>>,\n     ) -> EvalResult<'tcx> {\n-        ecx.validation_op(op, operand)\n+        // FIXME: prevent this from ICEing\n+        //ecx.validation_op(op, operand)\n+        Ok(())\n     }\n }"}]}