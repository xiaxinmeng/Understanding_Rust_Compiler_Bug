{"sha": "c659ba41186325f75750be5c0d3f5e8991f2077a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NTliYTQxMTg2MzI1Zjc1NzUwYmU1YzBkM2Y1ZTg5OTFmMjA3N2E=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-10T21:49:50Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-10T21:50:01Z"}, "message": "Update docs on record type and value syntax.", "tree": {"sha": "1a592c24bd735c5360bd30ce46122b6c42227226", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a592c24bd735c5360bd30ce46122b6c42227226"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c659ba41186325f75750be5c0d3f5e8991f2077a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c659ba41186325f75750be5c0d3f5e8991f2077a", "html_url": "https://github.com/rust-lang/rust/commit/c659ba41186325f75750be5c0d3f5e8991f2077a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c659ba41186325f75750be5c0d3f5e8991f2077a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bc42917645669ba0453e23d7c930e3671a5cfad", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc42917645669ba0453e23d7c930e3671a5cfad", "html_url": "https://github.com/rust-lang/rust/commit/8bc42917645669ba0453e23d7c930e3671a5cfad"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "4cc254de4451ea0962337635ce32c7c917aa9f50", "filename": "doc/rust.texi", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c659ba41186325f75750be5c0d3f5e8991f2077a/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/c659ba41186325f75750be5c0d3f5e8991f2077a/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=c659ba41186325f75750be5c0d3f5e8991f2077a", "patch": "@@ -692,8 +692,7 @@ The keywords are:\n @tab @code{i32}\n @tab @code{i64}\n @tab @code{f64}\n-@item @code{rec}\n-@tab @code{tup}\n+@item @code{tup}\n @tab @code{tag}\n @tab @code{vec}\n @tab @code{str}\n@@ -1349,7 +1348,7 @@ Alias slots are indicated by the @emph{ampersand} sigil @code{&}.\n \n An example function that accepts an alias parameter:\n @example\n-type point3d = rec(int x, int y, int z);\n+type point3d = @{x: int, y: int, z: int@};\n \n fn extract_z(&point3d p) -> int @{\n     ret p.z;\n@@ -2006,7 +2005,7 @@ aspects of a value include:\n @item The storage layer the value resides in (immutable, state or gc).\n @end itemize\n \n-For example, the type @code{rec(u8 x, u8 y)} defines the set of immutable\n+For example, the type @code{@{x: u8, y: u8@}} defines the set of immutable\n values that are composite records, each containing two unsigned 8-bit integers\n accessed through the components @code{x} and @code{y}, and laid out in memory\n with the @code{x} component preceding the @code{y} component.\n@@ -2257,17 +2256,17 @@ A value of type @code{str} is a Unicode string, represented as a vector of\n @cindex Record types\n @cindex Structure types, see @i{Record types}\n \n-The record type-constructor @code{rec} forms a new heterogeneous product of\n-values.@footnote{The @code{rec} type-constructor is analogous to the\n-@code{struct} type-constructor in the Algol/C family, the @emph{record} types\n-of the ML family, or the @emph{structure} types of the Lisp family.} Fields of\n-a @code{rec} type are accessed by name and are arranged in memory in the order\n-specified by the @code{rec} type.\n+The record type-constructor forms a new heterogeneous product of\n+values.@footnote{The record type-constructor is analogous to the @code{struct}\n+type-constructor in the Algol/C family, the @emph{record} types of the ML\n+family, or the @emph{structure} types of the Lisp family.} Fields of a record\n+type are accessed by name and are arranged in memory in the order specified by\n+the record type.\n \n-An example of a @code{rec} type and its use:\n+An example of a record type and its use:\n @example\n-type point = rec(int x, int y);\n-let point p = rec(x=10, y=11);\n+type point = @{x: int, y: int@};\n+let point p = @{x: 10, y: 11@};\n let int px = p.x;\n @end example\n \n@@ -2276,7 +2275,7 @@ let int px = p.x;\n @cindex Tuple types\n \n The tuple type-constructor @code{tup} forms a new heterogeneous product of\n-values exactly as the @code{rec} type-constructor does, with the difference\n+values exactly as the record type-constructor does, with the difference\n that tuple members are automatically assigned implicit field names, given by\n ascending integers prefixed by the underscore character: @code{_0}, @code{_1},\n @code{_2}, etc. The members of a tuple are laid out in memory contiguously,\n@@ -2553,12 +2552,12 @@ declared. @xref{Ref.Expr.Check}.\n \n An example of a constrained type with two separate instantiations:\n @example\n-type ordered_range = rec(int low, int high) : less_than(*.low, *.high);\n+type ordered_range = @{low: int, high: int@} : less_than(*.low, *.high);\n \n-let ordered_range rng1 = rec(low=5, high=7);\n+let ordered_range rng1 = @{low: 5, high: 7@};\n // implicit: 'check less_than(rng1.low, rng1.high);'\n \n-let ordered_range rng2 = rec(low=15, high=17);\n+let ordered_range rng2 = @{low: 15, high: 17@};\n // implicit: 'check less_than(rng2.low, rng2.high);'\n @end example\n "}]}