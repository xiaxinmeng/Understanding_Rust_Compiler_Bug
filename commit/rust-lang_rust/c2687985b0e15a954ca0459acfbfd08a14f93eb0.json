{"sha": "c2687985b0e15a954ca0459acfbfd08a14f93eb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNjg3OTg1YjBlMTVhOTU0Y2EwNDU5YWNmYmZkMDhhMTRmOTNlYjA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-08T17:22:35Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-21T12:35:28Z"}, "message": "Update tests for GATs\n\n* Make some run-pass or check-pass\n* Use `#![allow(incomplete_features)]`\n* Update FIXMEs now that some of the issues have been addressed\n* Add regression tests", "tree": {"sha": "061cdf7ca13ad4cd6920f921b111f9e313b0e2ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/061cdf7ca13ad4cd6920f921b111f9e313b0e2ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2687985b0e15a954ca0459acfbfd08a14f93eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2687985b0e15a954ca0459acfbfd08a14f93eb0", "html_url": "https://github.com/rust-lang/rust/commit/c2687985b0e15a954ca0459acfbfd08a14f93eb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2687985b0e15a954ca0459acfbfd08a14f93eb0/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "html_url": "https://github.com/rust-lang/rust/commit/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f"}], "stats": {"total": 1306, "additions": 760, "deletions": 546}, "files": [{"sha": "7ff348aca7cc1e37349a952c89a3a9936e10dca6", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -3,9 +3,11 @@ use std::ops::Deref;\n trait PointerFamily<U> {\n     type Pointer<T>: Deref<Target = T>;\n     //~^ ERROR generic associated types are unstable\n+    //~| ERROR type-generic associated types are not yet implemented\n     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n     //~^ ERROR generic associated types are unstable\n     //~| ERROR where clauses on associated types are unstable\n+    //~| ERROR type-generic associated types are not yet implemented\n }\n \n struct Foo;"}, {"sha": "ab17c9a28ae9bc3c0be1f6e54a31a275696a984b", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -8,7 +8,7 @@ LL |     type Pointer<T>: Deref<Target = T>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:6:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n    |\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:6:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n    |\n LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:14:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n    |\n LL |     type Pointer<Usize> = Box<Usize>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     type Pointer<Usize> = Box<Usize>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: generic associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:16:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:18:5\n    |\n LL |     type Pointer2<U32> = Box<U32>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     type Pointer2<U32> = Box<U32>;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:21:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:23:5\n    |\n LL |     type Assoc where Self: Sized;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,14 +53,30 @@ LL |     type Assoc where Self: Sized;\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n error[E0658]: where clauses on associated types are unstable\n-  --> $DIR/feature-gate-generic_associated_types.rs:26:5\n+  --> $DIR/feature-gate-generic_associated_types.rs:28:5\n    |\n LL |     type Assoc where Self: Sized = Foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n    = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n \n-error: aborting due to 7 previous errors\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/feature-gate-generic_associated_types.rs:4:5\n+   |\n+LL |     type Pointer<T>: Deref<Target = T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/feature-gate-generic_associated_types.rs:7:5\n+   |\n+LL |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "6f018f04018630912848cf1d5ddca3f6da5abb03", "filename": "src/test/ui/generic-associated-types/collections.rs", "status": "renamed", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -1,10 +1,7 @@\n+#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n #![feature(associated_type_defaults)]\n \n-// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n-// follow-up PR.\n-\n // A Collection trait and collection families. Based on\n // http://smallcultfollowing.com/babysteps/blog/2016/11/03/\n // associated-type-constructors-part-2-family-traits/\n@@ -15,18 +12,18 @@ trait Collection<T> {\n     // Test associated type defaults with parameters\n     type Sibling<U>: Collection<U> =\n         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n+    //~^^ ERROR type-generic associated types are not yet implemented\n \n     fn empty() -> Self;\n \n     fn add(&mut self, value: T);\n \n     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n trait CollectionFamily {\n     type Member<T>: Collection<T, Family = Self>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n }\n \n struct VecFamily;\n@@ -48,13 +45,11 @@ impl<T> Collection<T> for Vec<T> {\n     }\n \n     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n         self.iter()\n     }\n }\n \n fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n-//~^ ERROR type arguments are not allowed for this type [E0109]\n where\n     C: Collection<i32>,\n {\n@@ -66,7 +61,6 @@ where\n }\n \n fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n-//~^ ERROR type arguments are not allowed for this type [E0109]\n where\n     C: Collection<i32>,\n {", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/collections.rs"}, {"sha": "e99ae78f71454d90c91159bb54e6b899acf8c730", "filename": "src/test/ui/generic-associated-types/collections.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,19 @@\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/collections.rs:13:5\n+   |\n+LL | /     type Sibling<U>: Collection<U> =\n+LL | |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n+   | |_________________________________________________________________________^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/collections.rs:25:5\n+   |\n+LL |     type Member<T>: Collection<T, Family = Self>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2198b99db25c1d985f76bd27df24a21300f19ac6", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,26 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+// FIXME(#30472) normalize enough to handle this.\n+\n+use std::ops::Deref;\n+\n+trait Foo {\n+    type Bar<'a, 'b>;\n+}\n+\n+trait Baz {\n+    type Quux<'a>: Foo where Self: 'a;\n+\n+    // This weird type tests that we can use universal function call syntax to access the Item on\n+    type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>  where Self: 'a;\n+}\n+\n+impl<T> Baz for T where T: Foo {\n+//~^ ERROR type mismatch resolving\n+    type Quux<'a> where T: 'a = T;\n+\n+    type Baa<'a> where T: 'a = &'a <T as Foo>::Bar<'a, 'static>;\n+}\n+\n+fn main() {}"}, {"sha": "bad746f7ef12181ae0b728e9ed12bf716e22e640", "filename": "src/test/ui/generic-associated-types/construct_with_other_type.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconstruct_with_other_type.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,13 @@\n+error[E0271]: type mismatch resolving `for<'a> <<T as Baz>::Baa<'a> as std::ops::Deref>::Target == <<T as Baz>::Quux<'a> as Foo>::Bar<'a, 'static>`\n+  --> $DIR/construct_with_other_type.rs:19:9\n+   |\n+LL | impl<T> Baz for T where T: Foo {\n+   |         ^^^ expected type parameter `T`, found associated type\n+   |\n+   = note: expected associated type `<T as Foo>::Bar<'_, 'static>`\n+              found associated type `<<T as Baz>::Quux<'_> as Foo>::Bar<'_, 'static>`\n+   = note: you might be missing a type parameter or trait bound\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "522e23ca43d78f8d8f30ba8f8e749f4f82e4587d", "filename": "src/test/ui/generic-associated-types/empty_generics.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -1,5 +1,5 @@\n+#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n \n trait Foo {\n     type Bar<,>;", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.rs"}, {"sha": "d3acad47831bee6723ff6ff20fbae940647fd320", "filename": "src/test/ui/generic-associated-types/empty_generics.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fempty_generics.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n+  --> $DIR/empty_generics.rs:5:14\n+   |\n+LL |     type Bar<,>;\n+   |              ^ expected one of `>`, `const`, identifier, or lifetime\n+\n+error: aborting due to previous error\n+"}, {"sha": "f88df6a608aa33c0e70d53987199071abd53ef64", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,17 @@\n+// rust-lang/rust#60654: Do not ICE on an attempt to use GATs that is\n+// missing the feature gate.\n+\n+struct Foo;\n+\n+trait MyTrait {\n+    type Item<T>;\n+    //~^ ERROR generic associated types are unstable [E0658]\n+    //~| ERROR type-generic associated types are not yet implemented\n+}\n+\n+impl MyTrait for Foo {\n+    type Item<T> = T;\n+    //~^ ERROR generic associated types are unstable [E0658]\n+}\n+\n+fn main() { }"}, {"sha": "a7d280d635911ade42b0dee10a3759c6e708fea5", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature-2.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature-2.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,29 @@\n+error[E0658]: generic associated types are unstable\n+  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:7:5\n+   |\n+LL |     type Item<T>;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n+\n+error[E0658]: generic associated types are unstable\n+  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:13:5\n+   |\n+LL |     type Item<T> = T;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/gat-dont-ice-on-absent-feature-2.rs:7:5\n+   |\n+LL |     type Item<T>;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e8fc47d2a59f9d01edacbac1f11235e600e5b5b9", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -4,7 +4,9 @@\n struct Foo;\n \n impl Iterator for Foo {\n-    type Item<'b> = &'b Foo; //~ ERROR generic associated types are unstable [E0658]\n+    type Item<'b> = &'b Foo;\n+    //~^ ERROR generic associated types are unstable [E0658]\n+    //~| ERROR lifetime parameters or bounds on type `Item` do not match the trait declaration\n \n     fn next(&mut self) -> Option<Self::Item> {\n         None", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/gat-dont-ice-on-absent-feature.rs"}, {"sha": "9031071ff69babd123d2c019363b4b736a678168", "filename": "src/test/ui/generic-associated-types/gat-dont-ice-on-absent-feature.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-dont-ice-on-absent-feature.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: generic associated types are unstable\n+  --> $DIR/gat-dont-ice-on-absent-feature.rs:7:5\n+   |\n+LL |     type Item<'b> = &'b Foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n+\n+error[E0195]: lifetime parameters or bounds on type `Item` do not match the trait declaration\n+  --> $DIR/gat-dont-ice-on-absent-feature.rs:7:14\n+   |\n+LL |     type Item<'b> = &'b Foo;\n+   |              ^^^^ lifetimes do not match type in trait\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0195, E0658.\n+For more information about an error, try `rustc --explain E0195`."}, {"sha": "33593884de31f724e72884fc3bd99498c5f58ab1", "filename": "src/test/ui/generic-associated-types/gat-incomplete-warning.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/gat-incomplete-warning.rs"}, {"sha": "d75f9fb8451b9d6856b8fdc0d5d31208fe4fe4c4", "filename": "src/test/ui/generic-associated-types/gat-incomplete-warning.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-incomplete-warning.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/gat-incomplete-warning.stderr"}, {"sha": "589024e162166821a06597534970444c568fc1e3", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.rs", "status": "renamed", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -1,4 +1,5 @@\n-#![feature(generic_associated_types)] //~ WARN `generic_associated_types` is incomplete\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n \n // Checking the interaction with this other feature\n #![feature(associated_type_defaults)]\n@@ -8,8 +9,11 @@ use std::fmt::{Display, Debug};\n trait Foo {\n     type Assoc where Self: Sized;\n     type Assoc2<T> where T: Display;\n+    //~^ ERROR type-generic associated types are not yet implemented\n     type Assoc3<T>;\n-    type WithDefault<T> where T: Debug = dyn Iterator<Item=T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n+    type WithDefault<'a, T: Debug + 'a> = dyn Iterator<Item=T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n     type NoGenerics;\n }\n \n@@ -19,7 +23,7 @@ impl Foo for Bar {\n     type Assoc = usize;\n     type Assoc2<T> = Vec<T>;\n     type Assoc3<T> where T: Iterator = Vec<T>;\n-    type WithDefault<'a, T> = &'a dyn Iterator<T>;\n+    type WithDefault<'a, T: Debug + 'a> = &'a dyn Iterator<Item=T>;\n     type NoGenerics = ::std::cell::Cell<i32>;\n }\n ", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.rs"}, {"sha": "2144a5e7d9cd827bf7a2adca76746a54dc28cf10", "filename": "src/test/ui/generic-associated-types/generic-associated-types-where.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-types-where.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,26 @@\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/generic-associated-types-where.rs:11:5\n+   |\n+LL |     type Assoc2<T> where T: Display;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/generic-associated-types-where.rs:13:5\n+   |\n+LL |     type Assoc3<T>;\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/generic-associated-types-where.rs:15:5\n+   |\n+LL |     type WithDefault<'a, T: Debug + 'a> = dyn Iterator<Item=T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "4b4e59a512462791c0e639b7c87794e16c6bb5c9", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,16 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+use std::ops::Deref;\n+\n+trait Iterable {\n+    type Item<'a>;\n+    type Iter<'a>: Iterator<Item = Self::Item<'a>>\n+        + Deref<Target = Self::Item<'b>>;\n+    //~^ ERROR undeclared lifetime\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n+    //~^ ERROR undeclared lifetime\n+}\n+\n+fn main() {}"}, {"sha": "81137e81dc4891a1cf12a88d03093ccf082703b0", "filename": "src/test/ui/generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,15 @@\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:9:37\n+   |\n+LL |         + Deref<Target = Self::Item<'b>>;\n+   |                                     ^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'undeclared`\n+  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:12:41\n+   |\n+LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n+   |                                         ^^^^^^^^^^^ undeclared lifetime\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "3ffa6c6eec4a58aeb389e3b3bd6701e7091f80d2", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,23 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+trait Foo {\n+    type A<'a> where Self: 'a;\n+    type B<'a, 'b> where 'a: 'b;\n+    type C where Self: Clone;\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Fooy<T>(T);\n+\n+impl<T> Foo for Fooy<T> {\n+    type A<'a> where Self: 'static = (&'a ());\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+    //~^ ERROR lifetime bound not satisfied\n+    type C where Self: Copy = String;\n+    //~^ ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "017990076931bdff276322bfb199d15057368e42", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,46 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/impl_bounds.rs:15:5\n+   |\n+LL |     type A<'a> where Self: 'static = (&'a ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+note: ...so that the type `Fooy<T>` will meet its required lifetime bounds\n+  --> $DIR/impl_bounds.rs:15:5\n+   |\n+LL |     type A<'a> where Self: 'static = (&'a ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/impl_bounds.rs:17:5\n+   |\n+LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lifetime parameter instantiated with the lifetime `'b` as defined on the associated item at 17:16\n+  --> $DIR/impl_bounds.rs:17:16\n+   |\n+LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+   |                ^^\n+note: but lifetime parameter must outlive the lifetime `'a` as defined on the associated item at 17:12\n+  --> $DIR/impl_bounds.rs:17:12\n+   |\n+LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n+   |            ^^\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/impl_bounds.rs:19:5\n+   |\n+LL | impl<T> Foo for Fooy<T> {\n+   |      - help: consider restricting this bound: `T: std::marker::Copy`\n+...\n+LL |     type C where Self: Copy = String;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = note: required because of the requirements on the impl of `std::marker::Copy` for `Fooy<T>`\n+   = note: the requirement `Fooy<T>: std::marker::Copy` appears on the associated impl typebut not on the corresponding associated trait type\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0310, E0478.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "2387b891755247cbca1dab8a0882b19e85103871", "filename": "src/test/ui/generic-associated-types/impl_bounds_ok.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds_ok.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+trait Foo {\n+    type A<'a> where Self: 'a;\n+    type B<'a, 'b> where 'a: 'b;\n+    type C where Self: Clone;\n+}\n+\n+struct Fooy;\n+\n+impl Foo for Fooy {\n+    type A<'a> = (&'a ());\n+    type B<'a, 'b> = (&'a(), &'b ());\n+    type C = String;\n+}\n+\n+#[derive(Clone)]\n+struct Fooer<T>(T);\n+\n+impl<T> Foo for Fooer<T> {\n+    type A<'x> where T: 'x = (&'x ());\n+    type B<'u, 'v> where 'u: 'v = (&'v &'u ());\n+    type C where Self: ToOwned = String;\n+}\n+\n+fn main() {}"}, {"sha": "53e350aacf88e35448c8c1c9e9c0618917fe4625", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,17 @@\n+// Check that this program doesn't cause the compiler to error without output.\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Foo {\n+    type Assoc3<T>;\n+    //~^ type-generic associated types are not yet implemented\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    type Assoc3<T> where T: Iterator = Vec<T>;\n+}\n+\n+fn main() {}"}, {"sha": "52207d759b9e5f2dbc6f6fcfd07916177510eb98", "filename": "src/test/ui/generic-associated-types/issue-47206-where-clause.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-47206-where-clause.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,10 @@\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/issue-47206-where-clause.rs:7:5\n+   |\n+LL |     type Assoc3<T>;\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to previous error\n+"}, {"sha": "2298aa5b0b751d3c9ae1732044fba53c141e23ef", "filename": "src/test/ui/generic-associated-types/issue-58694-parameter-out-of-range.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-58694-parameter-out-of-range.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait Cert {\n+    type PublicKey<'a>: From<&'a [u8]>;\n+}\n+\n+fn main() {}"}, {"sha": "db0da40aab08dab84695770326201d353b2f964d", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,12 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+// FIXME(generic-associated-types) Investigate why this doesn't compile.\n+\n+trait Iterator {\n+//~^ ERROR the requirement `for<'a> <Self as Iterator>::Item<'a> : 'a` is not satisfied\n+    type Item<'a>: 'a;\n+}\n+\n+\n+fn main() {}"}, {"sha": "07169700f39359c507f5dc84b0b8d5a88c4d3de9", "filename": "src/test/ui/generic-associated-types/issue-62326-parameter-out-of-range.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-62326-parameter-out-of-range.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,15 @@\n+error[E0280]: the requirement `for<'a> <Self as Iterator>::Item<'a> : 'a` is not satisfied\n+  --> $DIR/issue-62326-parameter-out-of-range.rs:6:1\n+   |\n+LL |   trait Iterator {\n+   |   ^-------------\n+   |   |\n+   |  _required by `Iterator`\n+   | |\n+LL | |\n+LL | |     type Item<'a>: 'a;\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "105ab4a8adc380b3cc140552176f36c4ae1e52ec", "filename": "src/test/ui/generic-associated-types/iterable.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,51 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+// FIXME(#30472) normalize enough to handle this.\n+\n+trait Iterable {\n+    type Item<'a> where Self: 'a;\n+    type Iter<'a>: Iterator<Item = Self::Item<'a>> where Self: 'a;\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'a>;\n+}\n+\n+// Impl for struct type\n+impl<T> Iterable for Vec<T> {\n+    type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n+    //~^ ERROR type mismatch resolving\n+    type Iter<'a> where T: 'a = std::slice::Iter<'a, T>;\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+    //~^ ERROR type mismatch resolving\n+        self.iter()\n+    }\n+}\n+\n+// Impl for a primitive type\n+impl<T> Iterable for [T] {\n+    type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n+    //~^ ERROR type mismatch resolving\n+    type Iter<'a> where T: 'a = std::slice::Iter<'a, T>;\n+\n+    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+    //~^ ERROR type mismatch resolving\n+        self.iter()\n+    }\n+}\n+\n+fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n+    it.iter()\n+}\n+\n+fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n+    it.iter().next()\n+}\n+\n+fn main() {\n+    let v = vec![1, 2, 3];\n+    assert_eq!(v, make_iter(&v).copied().collect());\n+    assert_eq!(v, make_iter(&*v).copied().collect());\n+    assert_eq!(1, get_first(&v));\n+    assert_eq!(1, get_first(&*v));\n+}"}, {"sha": "d0d75f3cc633678997783d8119e80538b14eb6b5", "filename": "src/test/ui/generic-associated-types/iterable.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fiterable.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,63 @@\n+error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n+  --> $DIR/iterable.rs:15:5\n+   |\n+LL | impl<T> Iterable for Vec<T> {\n+   | --------------------------- in this `impl` item\n+LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n+   |\n+   = note:    expected reference `&T`\n+           found associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n+   = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n+  --> $DIR/iterable.rs:27:5\n+   |\n+LL | impl<T> Iterable for [T] {\n+   | ------------------------ in this `impl` item\n+LL |     type Item<'a> where T: 'a = <std::slice::Iter<'a, T> as Iterator>::Item;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected reference, found associated type\n+   |\n+   = note:    expected reference `&T`\n+           found associated type `<[T] as Iterable>::Item<'_>`\n+   = note: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0271]: type mismatch resolving `for<'a> <<std::vec::Vec<T> as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <std::vec::Vec<T> as Iterable>::Item<'a>`\n+  --> $DIR/iterable.rs:19:5\n+   |\n+LL |   trait Iterable {\n+   |   -------------- required by `Iterable`\n+...\n+LL | /     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+LL | |\n+LL | |         self.iter()\n+LL | |     }\n+   | |_____^ expected associated type, found reference\n+   |\n+   = note: expected associated type `<std::vec::Vec<T> as Iterable>::Item<'_>`\n+                    found reference `&T`\n+   = note: consider constraining the associated type `<std::vec::Vec<T> as Iterable>::Item<'_>` to `&_` or calling a method that returns `<std::vec::Vec<T> as Iterable>::Item<'_>`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error[E0271]: type mismatch resolving `for<'a> <<[T] as Iterable>::Iter<'a> as std::iter::Iterator>::Item == <[T] as Iterable>::Item<'a>`\n+  --> $DIR/iterable.rs:31:5\n+   |\n+LL |   trait Iterable {\n+   |   -------------- required by `Iterable`\n+...\n+LL | /     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n+LL | |\n+LL | |         self.iter()\n+LL | |     }\n+   | |_____^ expected associated type, found reference\n+   |\n+   = note: expected associated type `<[T] as Iterable>::Item<'_>`\n+                    found reference `&T`\n+   = note: consider constraining the associated type `<[T] as Iterable>::Item<'_>` to `&_` or calling a method that returns `<[T] as Iterable>::Item<'_>`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "0edc5c48c01af48773a97edc1c94b5540f755ae3", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,24 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+trait Foo {\n+    type A<'a>;\n+    type B<'a, 'b>;\n+    type C;\n+    type D<T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n+    type E<'a, T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n+    // Test parameters in default values\n+    type FOk<T> = Self::E<'static, T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n+    type FErr1 = Self::E<'static, 'static>;\n+    //~^ ERROR wrong number of lifetime arguments: expected 1, found 2\n+    //~| ERROR wrong number of type arguments: expected 1, found 0\n+    type FErr2<T> = Self::E<'static, T, u32>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n+    //~| ERROR wrong number of type arguments: expected 1, found 2\n+}\n+\n+fn main() {}"}, {"sha": "6b5683611a281ee9843df7cc631cd22f4b1cb4cb", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,53 @@\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/parameter_number_and_kind.rs:9:5\n+   |\n+LL |     type D<T>;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/parameter_number_and_kind.rs:11:5\n+   |\n+LL |     type E<'a, T>;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/parameter_number_and_kind.rs:14:5\n+   |\n+LL |     type FOk<T> = Self::E<'static, T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/parameter_number_and_kind.rs:19:5\n+   |\n+LL |     type FErr2<T> = Self::E<'static, T, u32>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error[E0107]: wrong number of lifetime arguments: expected 1, found 2\n+  --> $DIR/parameter_number_and_kind.rs:16:35\n+   |\n+LL |     type FErr1 = Self::E<'static, 'static>;\n+   |                                   ^^^^^^^ unexpected lifetime argument\n+\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/parameter_number_and_kind.rs:16:18\n+   |\n+LL |     type FErr1 = Self::E<'static, 'static>;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 type argument\n+\n+error[E0107]: wrong number of type arguments: expected 1, found 2\n+  --> $DIR/parameter_number_and_kind.rs:19:41\n+   |\n+LL |     type FErr2<T> = Self::E<'static, T, u32>;\n+   |                                         ^^^ unexpected type argument\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "74b9cec1da3fa2cfb3af9321057c0ae5358e4e94", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind_impl.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,35 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+#![feature(associated_type_defaults)]\n+\n+// FIXME(#44265) add tests for type-generic and const-genertic associated types.\n+\n+trait Foo {\n+    type A<'a>;\n+    type B<'a, 'b>;\n+    type C;\n+}\n+\n+struct Fooy;\n+\n+impl Foo for Fooy {\n+    type A = u32;\n+    //~^ ERROR lifetime parameters or bounds on type `A` do not match the trait declaration\n+    type B<'a, T> = Vec<T>;\n+    //~^ ERROR type `B` has 1 type parameter but its trait declaration has 0 type parameters\n+    type C<'a> = u32;\n+    //~^ ERROR lifetime parameters or bounds on type `C` do not match the trait declaration\n+}\n+\n+struct Fooer;\n+\n+impl Foo for Fooer {\n+    type A<T> = u32;\n+    //~^ ERROR type `A` has 1 type parameter but its trait declaration has 0 type parameters\n+    type B<'a> = u32;\n+    //~^ ERROR lifetime parameters or bounds on type `B` do not match the trait declaration\n+    type C<T> = T;\n+    //~^ ERROR type `C` has 1 type parameter but its trait declaration has 0 type parameters\n+}\n+\n+fn main() {}"}, {"sha": "bdd1c895fd911cdb982c2545b31b185f4cb5cc4b", "filename": "src/test/ui/generic-associated-types/parameter_number_and_kind_impl.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparameter_number_and_kind_impl.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,62 @@\n+error[E0195]: lifetime parameters or bounds on type `A` do not match the trait declaration\n+  --> $DIR/parameter_number_and_kind_impl.rs:16:11\n+   |\n+LL |     type A<'a>;\n+   |           ---- lifetimes in impl do not match this type in trait\n+...\n+LL |     type A = u32;\n+   |           ^ lifetimes do not match type in trait\n+\n+error[E0049]: type `B` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/parameter_number_and_kind_impl.rs:18:12\n+   |\n+LL |     type B<'a, 'b>;\n+   |            --  --\n+   |            |\n+   |            expected 0 type parameters\n+...\n+LL |     type B<'a, T> = Vec<T>;\n+   |            ^^  ^\n+   |            |\n+   |            found 1 type parameter\n+\n+error[E0195]: lifetime parameters or bounds on type `C` do not match the trait declaration\n+  --> $DIR/parameter_number_and_kind_impl.rs:20:11\n+   |\n+LL |     type C;\n+   |           - lifetimes in impl do not match this type in trait\n+...\n+LL |     type C<'a> = u32;\n+   |           ^^^^ lifetimes do not match type in trait\n+\n+error[E0049]: type `A` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/parameter_number_and_kind_impl.rs:27:12\n+   |\n+LL |     type A<'a>;\n+   |            -- expected 0 type parameters\n+...\n+LL |     type A<T> = u32;\n+   |            ^ found 1 type parameter\n+\n+error[E0195]: lifetime parameters or bounds on type `B` do not match the trait declaration\n+  --> $DIR/parameter_number_and_kind_impl.rs:29:11\n+   |\n+LL |     type B<'a, 'b>;\n+   |           -------- lifetimes in impl do not match this type in trait\n+...\n+LL |     type B<'a> = u32;\n+   |           ^^^^ lifetimes do not match type in trait\n+\n+error[E0049]: type `C` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/parameter_number_and_kind_impl.rs:31:12\n+   |\n+LL |     type C;\n+   |           - expected 0 type parameters\n+...\n+LL |     type C<T> = T;\n+   |            ^ found 1 type parameter\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0049, E0195.\n+For more information about an error, try `rustc --explain E0049`."}, {"sha": "7f4775ddbb0789ef295b964c13d270c70575a364", "filename": "src/test/ui/generic-associated-types/parse/in-trait-impl.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait-impl.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags: -Z parse-only\n \n #![feature(generic_associated_types)]", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/parse/in-trait-impl.rs"}, {"sha": "d438795eb1d976744fa0da0bc9d250f9757ef69f", "filename": "src/test/ui/generic-associated-types/parse/in-trait.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Fin-trait.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -1,9 +1,10 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags: -Z parse-only\n \n #![feature(generic_associated_types)]\n \n use std::ops::Deref;\n+use std::fmt::Debug;\n \n trait Foo {\n     type Bar<'a>;", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/parse/in-trait.rs"}, {"sha": "1668759b4e39c00ec9db1b4b9d654796ca819114", "filename": "src/test/ui/generic-associated-types/pointer_family.rs", "status": "renamed", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -1,24 +1,23 @@\n+#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n \n-// FIXME(#44265): \"type argument not allowed\" errors will be addressed in a follow-up PR.\n+// FIXME(#44265): allow type-generic associated types.\n \n use std::rc::Rc;\n use std::sync::Arc;\n use std::ops::Deref;\n \n trait PointerFamily {\n     type Pointer<T>: Deref<Target = T>;\n+    //~^ ERROR type-generic associated types are not yet implemented\n     fn new<T>(value: T) -> Self::Pointer<T>;\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n }\n \n struct ArcFamily;\n \n impl PointerFamily for ArcFamily {\n     type Pointer<T> = Arc<T>;\n     fn new<T>(value: T) -> Self::Pointer<T> {\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n         Arc::new(value)\n     }\n }\n@@ -28,14 +27,12 @@ struct RcFamily;\n impl PointerFamily for RcFamily {\n     type Pointer<T> = Rc<T>;\n     fn new<T>(value: T) -> Self::Pointer<T> {\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n         Rc::new(value)\n     }\n }\n \n struct Foo<P: PointerFamily> {\n     bar: P::Pointer<String>,\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n }\n \n fn main() {}", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.rs"}, {"sha": "2a784f8b9d78cd9a8fc0f1c2bcf113e07508f771", "filename": "src/test/ui/generic-associated-types/pointer_family.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fpointer_family.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -0,0 +1,10 @@\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/pointer_family.rs:11:5\n+   |\n+LL |     type Pointer<T>: Deref<Target = T>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to previous error\n+"}, {"sha": "7277c0d87c6ffc958ce0a85e18328ef30c9b05ad", "filename": "src/test/ui/generic-associated-types/shadowing.rs", "status": "renamed", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -16,15 +16,19 @@ impl<'a> NoShadow<'a> for &'a u32 {\n }\n \n trait ShadowT<T> {\n-    type Bar<T>; //~ ERROR the name `T` is already used\n+    type Bar<T>;\n+    //~^ ERROR the name `T` is already used\n+    //~| ERROR type-generic associated types are not yet implemented\n }\n \n trait NoShadowT<T> {\n     type Bar<U>; // OK\n+    //~^ ERROR type-generic associated types are not yet implemented\n }\n \n impl<T> NoShadowT<T> for Option<T> {\n-    type Bar<T> = i32; //~ ERROR the name `T` is already used\n+    type Bar<T> = i32;\n+    //~^ ERROR the name `T` is already used\n }\n \n fn main() {}", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.rs"}, {"sha": "50c12e822e7db2fed5bdc4ea9c544b10c80bae1e", "filename": "src/test/ui/generic-associated-types/shadowing.stderr", "status": "renamed", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fshadowing.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -7,13 +7,29 @@ LL |     type Bar<T>;\n    |              ^ already used\n \n error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/shadowing.rs:27:14\n+  --> $DIR/shadowing.rs:30:14\n    |\n LL | impl<T> NoShadowT<T> for Option<T> {\n    |      - first use of `T`\n LL |     type Bar<T> = i32;\n    |              ^ already used\n \n-error: aborting due to 2 previous errors\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/shadowing.rs:19:5\n+   |\n+LL |     type Bar<T>;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: type-generic associated types are not yet implemented\n+  --> $DIR/shadowing.rs:25:5\n+   |\n+LL |     type Bar<U>; // OK\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0403`.", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.stderr"}, {"sha": "d814f7140d9299797405e6271a0544cd506eb242", "filename": "src/test/ui/generic-associated-types/streaming_iterator.rs", "status": "renamed", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -1,30 +1,26 @@\n-#![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n+// run-pass\n \n-// FIXME(#44265): \"lifetime argument not allowed on this type\" errors will be addressed in a\n-// follow-up PR\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n \n use std::fmt::Display;\n \n trait StreamingIterator {\n     type Item<'a>;\n     // Applying the lifetime parameter `'a` to `Self::Item` inside the trait.\n-    fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n+    fn next<'a>(&'a mut self) -> Option<Self::Item<'a>>;\n }\n \n struct Foo<T: StreamingIterator> {\n     // Applying a concrete lifetime to the constructor outside the trait.\n     bar: <T as StreamingIterator>::Item<'static>,\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n }\n \n // Users can bound parameters by the type constructed by that trait's associated type constructor\n // of a trait using HRTB. Both type equality bounds and trait bounds of this kind are valid:\n-//FIXME(sunjay): This next line should parse and be valid\n-//fn foo<T: for<'a> StreamingIterator<Item<'a>=&'a [i32]>>(iter: T) { /* ... */ }\n-fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n-//~^ ERROR lifetime arguments are not allowed for this type [E0109]\n+//FIXME(#44265): This next line should parse and be valid\n+//fn foo<T: for<'a> StreamingIterator<Item<'a>=&'a [i32]>>(_iter: T) { /* ... */ }\n+fn _foo<T>(_iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n \n // Full example of enumerate iterator\n \n@@ -36,9 +32,7 @@ struct StreamEnumerate<I> {\n \n impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n     type Item<'a> = (usize, I::Item<'a>);\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-    fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n-        //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n+    fn next<'a>(&'a mut self) -> Option<Self::Item<'a>> {\n         match self.iter.next() {\n             None => None,\n             Some(val) => {\n@@ -50,24 +44,34 @@ impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n     }\n }\n \n+impl<I: Iterator> StreamingIterator for I {\n+    type Item<'a> = <I as Iterator>::Item;\n+    fn next(&mut self) -> Option<<I as StreamingIterator>::Item<'_>> {\n+        Iterator::next(self)\n+    }\n+}\n+\n impl<I> StreamEnumerate<I> {\n     pub fn new(iter: I) -> Self {\n         StreamEnumerate {\n             count: 0,\n-            iter: iter,\n+            iter,\n         }\n     }\n }\n \n fn test_stream_enumerate() {\n     let v = vec![\"a\", \"b\", \"c\"];\n-    let se = StreamEnumerate::new(v.iter());\n-    let a: &str = se.next().unwrap().1;\n-    for (i, s) in se {\n-        println!(\"{} {}\", i, s);\n+    let mut se = StreamEnumerate::new(v.iter());\n+    while let Some(item) = se.next() {\n+        assert_eq!(v[item.0], *item.1);\n     }\n-    println!(\"{}\", a);\n+    let x = Foo::<std::slice::Iter<'static, u32>> {\n+        bar: &0u32,\n+    };\n+    assert_eq!(*x.bar, 0u32);\n }\n \n-\n-fn main() {}\n+fn main() {\n+    test_stream_enumerate();\n+}", "previous_filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs"}, {"sha": "9c321c4bd0d741049382bfb205c3271ba7c81b9e", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -19,4 +19,5 @@ impl X {\n     //~| ERROR associated types are not yet supported in inherent impls\n     type W where Self: Eq;\n     //~^ ERROR associated type in `impl` without body\n+    //~| ERROR associated types are not yet supported in inherent impls\n }"}, {"sha": "65e1981e3ac781971aea559ac3874d3c4c93efeb", "filename": "src/test/ui/parser/impl-item-type-no-body-semantic-fail.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-type-no-body-semantic-fail.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -68,6 +68,12 @@ error[E0202]: associated types are not yet supported in inherent impls (see #899\n LL |     type W: Ord where Self: Eq;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n+  --> $DIR/impl-item-type-no-body-semantic-fail.rs:20:5\n+   |\n+LL |     type W where Self: Eq;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0202`."}, {"sha": "d0cc1fa3d51721dc8e2d0797a3842830e2e80f6d", "filename": "src/test/ui/qualified/qualified-path-params-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -16,7 +16,6 @@ impl S {\n }\n \n type A = <S as Tr>::A::f<u8>;\n-//~^ ERROR type arguments are not allowed for this type\n-//~| ERROR ambiguous associated type\n+//~^ ERROR ambiguous associated type\n \n fn main() {}"}, {"sha": "948f21fce4bdba4c1176ce55983232e2a5c0e42c", "filename": "src/test/ui/qualified/qualified-path-params-2.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params-2.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -1,16 +1,9 @@\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/qualified-path-params-2.rs:18:26\n-   |\n-LL | type A = <S as Tr>::A::f<u8>;\n-   |                          ^^ type argument not allowed\n-\n error[E0223]: ambiguous associated type\n   --> $DIR/qualified-path-params-2.rs:18:10\n    |\n LL | type A = <S as Tr>::A::f<u8>;\n    |          ^^^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<<S as Tr>::A as Trait>::f`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0109, E0223.\n-For more information about an error, try `rustc --explain E0109`.\n+For more information about this error, try `rustc --explain E0223`."}, {"sha": "fa8fcc99240c69c8c0d311681841425d69037b93", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.stderr", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,41 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/collections.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/collections.rs:56:90\n-   |\n-LL | fn floatify<C>(ints: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>\n-   |                                                                                          ^^^ type argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/collections.rs:68:69\n-   |\n-LL | fn floatify_sibling<C>(ints: &C) -> <C as Collection<i32>>::Sibling<f32>\n-   |                                                                     ^^^ type argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/collections.rs:17:71\n-   |\n-LL |         <<Self as Collection<T>>::Family as CollectionFamily>::Member<U>;\n-   |                                                                       ^ type argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/collections.rs:24:50\n-   |\n-LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n-   |                                                  ^^^^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/collections.rs:50:50\n-   |\n-LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n-   |                                                  ^^^^^ lifetime argument not allowed\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "3a459a4551c8df815153c716b3a2d1dfd429e97f", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.rs?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,29 +0,0 @@\n-#![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n-\n-use std::ops::Deref;\n-\n-// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n-// follow-up PR.\n-\n-trait Foo {\n-    type Bar<'a, 'b>;\n-}\n-\n-trait Baz {\n-    type Quux<'a>: Foo;\n-\n-    // This weird type tests that we can use universal function call syntax to access the Item on\n-    type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n-}\n-\n-impl<T> Baz for T where T: Foo {\n-    type Quux<'a> = T;\n-\n-    type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-}\n-\n-fn main() {}"}, {"sha": "ab161ae21bb67c84c4603c09304d65c4b9e9e9ce", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,29 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/construct_with_other_type.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/construct_with_other_type.rs:17:46\n-   |\n-LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-   |                                              ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/construct_with_other_type.rs:17:63\n-   |\n-LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-   |                                                               ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/construct_with_other_type.rs:25:40\n-   |\n-LL |     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n-   |                                        ^^ lifetime argument not allowed\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "9c8d3f192da2aa9dd224392660a877a704a463d1", "filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,16 +0,0 @@\n-error: expected one of `>`, `const`, identifier, or lifetime, found `,`\n-  --> $DIR/empty_generics.rs:5:14\n-   |\n-LL |     type Bar<,>;\n-   |              ^ expected one of `>`, `const`, identifier, or lifetime\n-\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/empty_generics.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error: aborting due to previous error\n-"}, {"sha": "fb43a50df782393eb47189a0b0df1d90be7a0d2d", "filename": "src/test/ui/rfc1598-generic-associated-types/gat-dont-ice-on-absent-feature.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-dont-ice-on-absent-feature.stderr?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: generic associated types are unstable\n-  --> $DIR/gat-dont-ice-on-absent-feature.rs:7:5\n-   |\n-LL |     type Item<'b> = &'b Foo;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44265\n-   = help: add `#![feature(generic_associated_types)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "0d319a7a599f68a91b22711019213e724aebe0cd", "filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,8 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/generic-associated-types-where.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-"}, {"sha": "150899a034b86c4d440d9726e057a0a03f9080e2", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.rs?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,22 +0,0 @@\n-#![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n-\n-use std::ops::Deref;\n-\n-// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n-// follow-up PR.\n-\n-trait Iterable {\n-    type Item<'a>;\n-    type Iter<'a>: Iterator<Item = Self::Item<'a>>\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-        + Deref<Target = Self::Item<'b>>;\n-    //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n-\n-    fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n-    //~^ ERROR undeclared lifetime\n-    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n-}\n-\n-fn main() {}"}, {"sha": "40ea42f62431dd7254e900afc1c86cb5492f10f5", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,42 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:13:37\n-   |\n-LL |         + Deref<Target = Self::Item<'b>>;\n-   |                                     ^^ undeclared lifetime\n-\n-error[E0261]: use of undeclared lifetime name `'undeclared`\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:17:41\n-   |\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n-   |                                         ^^^^^^^^^^^ undeclared lifetime\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:11:47\n-   |\n-LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>\n-   |                                               ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:13:37\n-   |\n-LL |         + Deref<Target = Self::Item<'b>>;\n-   |                                     ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/generic_associated_type_undeclared_lifetimes.rs:17:41\n-   |\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n-   |                                         ^^^^^^^^^^^ lifetime argument not allowed\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors have detailed explanations: E0109, E0261.\n-For more information about an error, try `rustc --explain E0109`."}, {"sha": "29953b9db1a3130d02a1141f1fe25d7e8324932d", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.rs?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,50 +0,0 @@\n-#![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n-\n-use std::ops::Deref;\n-\n-// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n-// follow-up PR.\n-\n-trait Iterable {\n-    type Item<'a>;\n-    type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-\n-    fn iter<'a>(&'a self) -> Self::Iter<'a>;\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-}\n-\n-// Impl for struct type\n-impl<T> Iterable for Vec<T> {\n-    type Item<'a> = &'a T;\n-    type Iter<'a> = std::slice::Iter<'a, T>;\n-\n-    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-        self.iter()\n-    }\n-}\n-\n-// Impl for a primitive type\n-impl<T> Iterable for [T] {\n-    type Item<'a> = &'a T;\n-    type Iter<'a> = std::slice::Iter<'a, T>;\n-\n-    fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-        self.iter()\n-    }\n-}\n-\n-fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-    it.iter()\n-}\n-\n-fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-    it.iter().next()\n-}\n-\n-fn main() {}"}, {"sha": "51246d3c9027fa795308bea1dd6666a4f595ea18", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,47 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/iterable.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:11:47\n-   |\n-LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-   |                                               ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:40:53\n-   |\n-LL | fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n-   |                                                     ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:45:60\n-   |\n-LL | fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n-   |                                                            ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:14:41\n-   |\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n-   |                                         ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:23:41\n-   |\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                                         ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/iterable.rs:34:41\n-   |\n-LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                                         ^^ lifetime argument not allowed\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "aa3f4b186da83d998a8babba6b497a5fe74b2bcb", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.rs?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,47 +0,0 @@\n-#![feature(generic_associated_types)]\n-//~^ WARNING the feature `generic_associated_types` is incomplete\n-#![feature(associated_type_defaults)]\n-\n-// FIXME(#44265): \"lifetime arguments are not allowed for this type\" errors will be addressed in a\n-// follow-up PR.\n-\n-// FIXME(#44265): Update expected errors once E110 is resolved, now does not get past `trait Foo`.\n-\n-trait Foo {\n-    type A<'a>;\n-    type B<'a, 'b>;\n-    type C;\n-    type D<T>;\n-    type E<'a, T>;\n-    // Test parameters in default values\n-    type FOk<T> = Self::E<'static, T>;\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n-    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n-    type FErr1 = Self::E<'static, 'static>; // Error\n-    //~^ ERROR lifetime arguments are not allowed for this type [E0109]\n-    type FErr2<T> = Self::E<'static, T, u32>; // Error\n-    //~^ ERROR type arguments are not allowed for this type [E0109]\n-    //~| ERROR lifetime arguments are not allowed for this type [E0109]\n-}\n-\n-struct Fooy;\n-\n-impl Foo for Fooy {\n-    type A = u32; // Error: parameter expected\n-    type B<'a, T> = Vec<T>; // Error: lifetime param expected\n-    type C<'a> = u32; // Error: no param expected\n-    type D<'a> = u32; // Error: type param expected\n-    type E<T, U> = u32; // Error: lifetime expected as the first param\n-}\n-\n-struct Fooer;\n-\n-impl Foo for Fooer {\n-    type A<T> = u32; // Error: lifetime parameter expected\n-    type B<'a> = u32; // Error: another lifetime param expected\n-    type C<T> = T; // Error: no param expected\n-    type D<'b, T> = u32; // Error: unexpected lifetime param\n-    type E<'a, 'b> = u32; // Error: type expected as the second param\n-}\n-\n-fn main() {}"}, {"sha": "65dbd00c5b12138ed726fad09392e5711859d306", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.stderr", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,41 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/parameter_number_and_kind.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/parameter_number_and_kind.rs:17:27\n-   |\n-LL |     type FOk<T> = Self::E<'static, T>;\n-   |                           ^^^^^^^ lifetime argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/parameter_number_and_kind.rs:17:36\n-   |\n-LL |     type FOk<T> = Self::E<'static, T>;\n-   |                                    ^ type argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/parameter_number_and_kind.rs:20:26\n-   |\n-LL |     type FErr1 = Self::E<'static, 'static>; // Error\n-   |                          ^^^^^^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/parameter_number_and_kind.rs:22:29\n-   |\n-LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n-   |                             ^^^^^^^ lifetime argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/parameter_number_and_kind.rs:22:38\n-   |\n-LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n-   |                                      ^ type argument not allowed\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "626495350a7e6940cc3b9e75d5dc95422430e474", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,35 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/pointer_family.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/pointer_family.rs:37:21\n-   |\n-LL |     bar: P::Pointer<String>,\n-   |                     ^^^^^^ type argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/pointer_family.rs:12:42\n-   |\n-LL |     fn new<T>(value: T) -> Self::Pointer<T>;\n-   |                                          ^ type argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/pointer_family.rs:20:42\n-   |\n-LL |     fn new<T>(value: T) -> Self::Pointer<T> {\n-   |                                          ^ type argument not allowed\n-\n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/pointer_family.rs:30:42\n-   |\n-LL |     fn new<T>(value: T) -> Self::Pointer<T> {\n-   |                                          ^ type argument not allowed\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "09dd654b575afaff9a2608e33678c958852d37f2", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.stderr", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a5c91c1293bcc0ece70c9bde849eb619fd6a64f/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr?ref=0a5c91c1293bcc0ece70c9bde849eb619fd6a64f", "patch": "@@ -1,41 +0,0 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/streaming_iterator.rs:1:12\n-   |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/streaming_iterator.rs:18:41\n-   |\n-LL |     bar: <T as StreamingIterator>::Item<'static>,\n-   |                                         ^^^^^^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/streaming_iterator.rs:26:64\n-   |\n-LL | fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n-   |                                                                ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/streaming_iterator.rs:12:48\n-   |\n-LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n-   |                                                ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/streaming_iterator.rs:38:37\n-   |\n-LL |     type Item<'a> = (usize, I::Item<'a>);\n-   |                                     ^^ lifetime argument not allowed\n-\n-error[E0109]: lifetime arguments are not allowed for this type\n-  --> $DIR/streaming_iterator.rs:40:48\n-   |\n-LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n-   |                                                ^^ lifetime argument not allowed\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0109`."}, {"sha": "e44a203b7832a70e16fa3dfffd163350edc739e3", "filename": "src/test/ui/structs/struct-path-associated-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -31,7 +31,6 @@ fn g<T: Tr<A = S>>() {\n fn main() {\n     let s = S::A {}; //~ ERROR ambiguous associated type\n     let z = S::A::<u8> {}; //~ ERROR ambiguous associated type\n-    //~^ ERROR type arguments are not allowed for this type\n     match S {\n         S::A {} => {} //~ ERROR ambiguous associated type\n     }"}, {"sha": "f8a2c7c6b6c20a3dd4109af6d2cdce28a5d81038", "filename": "src/test/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -34,25 +34,19 @@ error[E0223]: ambiguous associated type\n LL |     let s = S::A {};\n    |             ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/struct-path-associated-type.rs:33:20\n-   |\n-LL |     let z = S::A::<u8> {};\n-   |                    ^^ type argument not allowed\n-\n error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:33:13\n    |\n LL |     let z = S::A::<u8> {};\n    |             ^^^^^^^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/struct-path-associated-type.rs:36:9\n+  --> $DIR/struct-path-associated-type.rs:35:9\n    |\n LL |         S::A {} => {}\n    |         ^^^^ help: use fully-qualified syntax: `<S as Trait>::A`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0071, E0109, E0223.\n For more information about an error, try `rustc --explain E0071`."}, {"sha": "06ee421fc32794051dfdc529fac56201ec1d7683", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.rs?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -1,7 +1,6 @@\n pub fn foo(num: i32) -> i32 {\n     let foo: i32::from_be(num);\n     //~^ ERROR expected type, found local variable `num`\n-    //~| ERROR type arguments are not allowed for this type\n     //~| ERROR parenthesized type parameters may only be used with a `Fn` trait\n     //~| ERROR ambiguous associated type\n     foo"}, {"sha": "63ba7893f041478105335e64f2bda6b5099729e8", "filename": "src/test/ui/suggestions/let-binding-init-expr-as-ty.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2687985b0e15a954ca0459acfbfd08a14f93eb0/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flet-binding-init-expr-as-ty.stderr?ref=c2687985b0e15a954ca0459acfbfd08a14f93eb0", "patch": "@@ -15,19 +15,13 @@ LL |     let foo: i32::from_be(num);\n    |                   only `Fn` traits may use parentheses\n    |                   help: use angle brackets instead: `from_be<num>`\n \n-error[E0109]: type arguments are not allowed for this type\n-  --> $DIR/let-binding-init-expr-as-ty.rs:2:27\n-   |\n-LL |     let foo: i32::from_be(num);\n-   |                           ^^^ type argument not allowed\n-\n error[E0223]: ambiguous associated type\n   --> $DIR/let-binding-init-expr-as-ty.rs:2:14\n    |\n LL |     let foo: i32::from_be(num);\n    |              ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<i32 as Trait>::from_be`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0109, E0214, E0223, E0573.\n-For more information about an error, try `rustc --explain E0109`.\n+Some errors have detailed explanations: E0214, E0223, E0573.\n+For more information about an error, try `rustc --explain E0214`."}]}