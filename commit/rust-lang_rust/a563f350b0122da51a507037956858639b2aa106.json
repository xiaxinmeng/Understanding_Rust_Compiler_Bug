{"sha": "a563f350b0122da51a507037956858639b2aa106", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NjNmMzUwYjAxMjJkYTUxYTUwNzAzNzk1Njg1ODYzOWIyYWExMDY=", "commit": {"author": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-05-25T11:59:13Z"}, "committer": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-05-25T11:59:13Z"}, "message": "Remove irrelevant tests and unused testing attribute", "tree": {"sha": "1dd88f33bad350006ee8d75837eede8ac109bba9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dd88f33bad350006ee8d75837eede8ac109bba9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a563f350b0122da51a507037956858639b2aa106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a563f350b0122da51a507037956858639b2aa106", "html_url": "https://github.com/rust-lang/rust/commit/a563f350b0122da51a507037956858639b2aa106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a563f350b0122da51a507037956858639b2aa106/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb9ca16b3b7cf034f885de28879c4d50261ce3ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9ca16b3b7cf034f885de28879c4d50261ce3ef", "html_url": "https://github.com/rust-lang/rust/commit/fb9ca16b3b7cf034f885de28879c4d50261ce3ef"}], "stats": {"total": 535, "additions": 0, "deletions": 535}, "files": [{"sha": "933cce13549fe138eaa53c6fa245c1aa82dd8464", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a563f350b0122da51a507037956858639b2aa106/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563f350b0122da51a507037956858639b2aa106/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a563f350b0122da51a507037956858639b2aa106", "patch": "@@ -659,12 +659,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                            \"rustc_attrs\",\n                                            \"internal rustc attributes will never be stable\",\n                                            cfg_fn!(rustc_attrs))),\n-    (\"rustc_move_fragments\", Normal, Gated(Stability::Unstable,\n-                                           \"rustc_attrs\",\n-                                           \"the `#[rustc_move_fragments]` attribute \\\n-                                            is just used for rustc unit tests \\\n-                                            and will never be stable\",\n-                                           cfg_fn!(rustc_attrs))),\n     (\"rustc_mir\", Whitelisted, Gated(Stability::Unstable,\n                                      \"rustc_attrs\",\n                                      \"the `#[rustc_mir]` attribute \\"}, {"sha": "8cfd3e020c69a47da7d3eeb1cf1eb8be261a62fa", "filename": "src/test/compile-fail/feature-gate-rustc-attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a563f350b0122da51a507037956858639b2aa106/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563f350b0122da51a507037956858639b2aa106/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc-attrs.rs?ref=a563f350b0122da51a507037956858639b2aa106", "patch": "@@ -14,7 +14,6 @@\n \n #[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n-#[rustc_move_fragments] //~ ERROR the `#[rustc_move_fragments]` attribute is just used for rustc unit tests and will never be stable\n #[rustc_foo]\n //~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n "}, {"sha": "0219f5b6becb3bae271892a3cc559bebacc8ae56", "filename": "src/test/compile-fail/move-fragments-1.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs?ref=fb9ca16b3b7cf034f885de28879c4d50261ce3ef", "patch": "@@ -1,58 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we correctly compute the move fragments for a fn.\n-//\n-// Note that the code below is not actually incorrect; the\n-// `rustc_move_fragments` attribute is a hack that uses the error\n-// reporting mechanisms as a channel for communicating from the\n-// internals of the compiler.\n-\n-// These are all fairly trivial cases: unused variables or direct\n-// drops of substructure.\n-\n-#![feature(rustc_attrs)]\n-\n-pub struct D { d: isize }\n-impl Drop for D { fn drop(&mut self) { } }\n-\n-#[rustc_move_fragments]\n-pub fn test_noop() {\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_take(_x: D) {\n-    //~^ ERROR                  assigned_leaf_path: `$(local _x)`\n-}\n-\n-pub struct Pair<X,Y> { x: X, y: Y }\n-\n-#[rustc_move_fragments]\n-pub fn test_take_struct(_p: Pair<D, D>) {\n-    //~^ ERROR                  assigned_leaf_path: `$(local _p)`\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_drop_struct_part(p: Pair<D, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                     moved_leaf_path: `$(local p).x`\n-    //~| ERROR                    unmoved_fragment: `$(local p).y`\n-    drop(p.x);\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_drop_tuple_part(p: (D, D)) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                     moved_leaf_path: `$(local p).#0`\n-    //~| ERROR                    unmoved_fragment: `$(local p).#1`\n-    drop(p.0);\n-}\n-\n-pub fn main() { }"}, {"sha": "15c28ec2713e967d160e67bd20c1f047407afd53", "filename": "src/test/compile-fail/move-fragments-2.rs", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs?ref=fb9ca16b3b7cf034f885de28879c4d50261ce3ef", "patch": "@@ -1,87 +0,0 @@\n-// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we correctly compute the move fragments for a fn.\n-//\n-// Note that the code below is not actually incorrect; the\n-// `rustc_move_fragments` attribute is a hack that uses the error\n-// reporting mechanisms as a channel for communicating from the\n-// internals of the compiler.\n-\n-// These are checking that enums are tracked; note that their output\n-// paths include \"downcasts\" of the path to a particular enum.\n-\n-#![feature(rustc_attrs)]\n-\n-use self::Lonely::{Zero, One, Two};\n-\n-pub struct D { d: isize }\n-impl Drop for D { fn drop(&mut self) { } }\n-\n-pub enum Lonely<X,Y> { Zero, One(X), Two(X, Y) }\n-\n-#[rustc_move_fragments]\n-pub fn test_match_partial(p: Lonely<D, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n-    match p {\n-        Zero => {}\n-        _ => {}\n-    }\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_match_full(p: Lonely<D, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::One)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Two)`\n-    match p {\n-        Zero => {}\n-        One(..) => {}\n-        Two(..) => {}\n-    }\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_match_bind_one(p: Lonely<D, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n-    //~| ERROR                 parent_of_fragments: `($(local p) as Lonely::One)`\n-    //~| ERROR                     moved_leaf_path: `($(local p) as Lonely::One).#0`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Two)`\n-    //~| ERROR                  assigned_leaf_path: `$(local data)`\n-    match p {\n-        Zero => {}\n-        One(data) => {}\n-        Two(..) => {}\n-    }\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_match_bind_many(p: Lonely<D, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n-    //~| ERROR                 parent_of_fragments: `($(local p) as Lonely::One)`\n-    //~| ERROR                     moved_leaf_path: `($(local p) as Lonely::One).#0`\n-    //~| ERROR                  assigned_leaf_path: `$(local data)`\n-    //~| ERROR                 parent_of_fragments: `($(local p) as Lonely::Two)`\n-    //~| ERROR                     moved_leaf_path: `($(local p) as Lonely::Two).#0`\n-    //~| ERROR                     moved_leaf_path: `($(local p) as Lonely::Two).#1`\n-    //~| ERROR                  assigned_leaf_path: `$(local left)`\n-    //~| ERROR                  assigned_leaf_path: `$(local right)`\n-    match p {\n-        Zero => {}\n-        One(data) => {}\n-        Two(left, right) => {}\n-    }\n-}\n-\n-pub fn main() { }"}, {"sha": "a1152333900a0f455b4d096acf7b3b4b6e5a69a1", "filename": "src/test/compile-fail/move-fragments-3.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs?ref=fb9ca16b3b7cf034f885de28879c4d50261ce3ef", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we correctly compute the move fragments for a fn.\n-//\n-// Note that the code below is not actually incorrect; the\n-// `rustc_move_fragments` attribute is a hack that uses the error\n-// reporting mechanisms as a channel for communicating from the\n-// internals of the compiler.\n-\n-// This checks the handling of `_` within variants, especially when mixed\n-// with bindings.\n-\n-#![feature(rustc_attrs)]\n-\n-use self::Lonely::{Zero, One, Two};\n-\n-pub struct D { d: isize }\n-impl Drop for D { fn drop(&mut self) { } }\n-\n-pub enum Lonely<X,Y> { Zero, One(X), Two(X, Y) }\n-\n-#[rustc_move_fragments]\n-pub fn test_match_bind_and_underscore(p: Lonely<D, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::Zero)`\n-    //~| ERROR                  assigned_leaf_path: `($(local p) as Lonely::One)`\n-    //~| ERROR                 parent_of_fragments: `($(local p) as Lonely::Two)`\n-    //~| ERROR                     moved_leaf_path: `($(local p) as Lonely::Two).#0`\n-    //~| ERROR                    unmoved_fragment: `($(local p) as Lonely::Two).#1`\n-    //~| ERROR                  assigned_leaf_path: `$(local left)`\n-\n-    match p {\n-        Zero => {}\n-\n-        One(_) => {}       // <-- does not fragment `($(local p) as One)` ...\n-\n-        Two(left, _) => {} // <-- ... *does* fragment `($(local p) as Two)`.\n-    }\n-}\n-\n-pub fn main() { }"}, {"sha": "191e23a28638b59c8119386ae18525d6f172cc36", "filename": "src/test/compile-fail/move-fragments-4.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs?ref=fb9ca16b3b7cf034f885de28879c4d50261ce3ef", "patch": "@@ -1,41 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we correctly compute the move fragments for a fn.\n-//\n-// Note that the code below is not actually incorrect; the\n-// `rustc_move_fragments` attribute is a hack that uses the error\n-// reporting mechanisms as a channel for communicating from the\n-// internals of the compiler.\n-\n-// This checks that a move of deep structure is properly tracked. (An\n-// early draft of the code did not properly traverse up through all of\n-// the parents of the leaf fragment.)\n-\n-#![feature(rustc_attrs)]\n-\n-pub struct D { d: isize }\n-impl Drop for D { fn drop(&mut self) { } }\n-\n-pub struct Pair<X,Y> { x: X, y: Y }\n-\n-#[rustc_move_fragments]\n-pub fn test_move_substructure(pppp: Pair<Pair<Pair<Pair<D,D>, D>, D>, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local pppp)`\n-    //~| ERROR                 parent_of_fragments: `$(local pppp).x`\n-    //~| ERROR                 parent_of_fragments: `$(local pppp).x.x`\n-    //~| ERROR                    unmoved_fragment: `$(local pppp).x.x.x`\n-    //~| ERROR                     moved_leaf_path: `$(local pppp).x.x.y`\n-    //~| ERROR                    unmoved_fragment: `$(local pppp).x.y`\n-    //~| ERROR                    unmoved_fragment: `$(local pppp).y`\n-    drop(pppp.x.x.y);\n-}\n-\n-pub fn main() { }"}, {"sha": "38a385eacac5c07795c9a19e49c5d9288b3b7e63", "filename": "src/test/compile-fail/move-fragments-5.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs?ref=fb9ca16b3b7cf034f885de28879c4d50261ce3ef", "patch": "@@ -1,94 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we correctly compute the move fragments for a fn.\n-//\n-// Note that the code below is not actually incorrect; the\n-// `rustc_move_fragments` attribute is a hack that uses the error\n-// reporting mechanisms as a channel for communicating from the\n-// internals of the compiler.\n-\n-// This is the first test that checks moving into local variables.\n-\n-#![feature(rustc_attrs)]\n-\n-pub struct D { d: isize }\n-impl Drop for D { fn drop(&mut self) { } }\n-\n-pub struct Pair<X,Y> { x: X, y: Y }\n-\n-#[rustc_move_fragments]\n-pub fn test_move_field_to_local(p: Pair<D, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                     moved_leaf_path: `$(local p).x`\n-    //~| ERROR                    unmoved_fragment: `$(local p).y`\n-    //~| ERROR                  assigned_leaf_path: `$(local _x)`\n-    let _x = p.x;\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_move_field_to_local_to_local(p: Pair<D, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                     moved_leaf_path: `$(local p).x`\n-    //~| ERROR                    unmoved_fragment: `$(local p).y`\n-    //~| ERROR                  assigned_leaf_path: `$(local _x)`\n-    //~| ERROR                     moved_leaf_path: `$(local _x)`\n-    //~| ERROR                  assigned_leaf_path: `$(local _y)`\n-    let _x = p.x;\n-    let _y = _x;\n-}\n-\n-// In the following fn's `test_move_field_to_local_delayed` and\n-// `test_uninitialized_local` , the instrumentation reports that `_x`\n-// is moved. This is unlike `test_move_field_to_local`, where `_x` is\n-// just reported as an assigned_leaf_path. Presumably because this is\n-// how we represent that it did not have an initializing expression at\n-// the binding site.\n-\n-#[rustc_move_fragments]\n-pub fn test_uninitialized_local(_p: Pair<D, D>) {\n-    //~^ ERROR                  assigned_leaf_path: `$(local _p)`\n-    //~| ERROR                     moved_leaf_path: `$(local _x)`\n-    let _x: D;\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_move_field_to_local_delayed(p: Pair<D, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                     moved_leaf_path: `$(local p).x`\n-    //~| ERROR                    unmoved_fragment: `$(local p).y`\n-    //~| ERROR                  assigned_leaf_path: `$(local _x)`\n-    //~| ERROR                     moved_leaf_path: `$(local _x)`\n-    let _x;\n-    _x = p.x;\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_move_field_mut_to_local(mut p: Pair<D, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local mut p)`\n-    //~| ERROR                     moved_leaf_path: `$(local mut p).x`\n-    //~| ERROR                    unmoved_fragment: `$(local mut p).y`\n-    //~| ERROR                  assigned_leaf_path: `$(local _x)`\n-    let _x = p.x;\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_move_field_to_local_to_local_mut(p: Pair<D, D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                     moved_leaf_path: `$(local p).x`\n-    //~| ERROR                    unmoved_fragment: `$(local p).y`\n-    //~| ERROR                  assigned_leaf_path: `$(local mut _x)`\n-    //~| ERROR                     moved_leaf_path: `$(local mut _x)`\n-    //~| ERROR                  assigned_leaf_path: `$(local _y)`\n-    let mut _x = p.x;\n-    let _y = _x;\n-}\n-\n-pub fn main() {}"}, {"sha": "122727c3f6b64a0c1cf75e4ca4a216cf51df98b3", "filename": "src/test/compile-fail/move-fragments-6.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs?ref=fb9ca16b3b7cf034f885de28879c4d50261ce3ef", "patch": "@@ -1,61 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we correctly compute the move fragments for a fn.\n-//\n-// Note that the code below is not actually incorrect; the\n-// `rustc_move_fragments` attribute is a hack that uses the error\n-// reporting mechanisms as a channel for communicating from the\n-// internals of the compiler.\n-\n-// Test that moving into a field (i.e. overwriting it) fragments the\n-// receiver.\n-\n-#![feature(rustc_attrs)]\n-\n-use std::mem::drop;\n-\n-pub struct Pair<X,Y> { x: X, y: Y }\n-\n-#[rustc_move_fragments]\n-pub fn test_overwrite_uninit_field<Z>(z: Z) {\n-    //~^ ERROR                 parent_of_fragments: `$(local mut p)`\n-    //~| ERROR                  assigned_leaf_path: `$(local z)`\n-    //~| ERROR                     moved_leaf_path: `$(local z)`\n-    //~| ERROR                  assigned_leaf_path: `$(local mut p).x`\n-    //~| ERROR                    unmoved_fragment: `$(local mut p).y`\n-\n-    let mut p: Pair<Z,Z>;\n-    p.x = z;\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_overwrite_moved_field<Z>(mut p: Pair<Z,Z>, z: Z) {\n-    //~^ ERROR                 parent_of_fragments: `$(local mut p)`\n-    //~| ERROR                  assigned_leaf_path: `$(local z)`\n-    //~| ERROR                     moved_leaf_path: `$(local z)`\n-    //~| ERROR                  assigned_leaf_path: `$(local mut p).y`\n-    //~| ERROR                    unmoved_fragment: `$(local mut p).x`\n-\n-    drop(p);\n-    p.y = z;\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_overwrite_same_field<Z>(mut p: Pair<Z,Z>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local mut p)`\n-    //~| ERROR                     moved_leaf_path: `$(local mut p).x`\n-    //~| ERROR                  assigned_leaf_path: `$(local mut p).x`\n-    //~| ERROR                    unmoved_fragment: `$(local mut p).y`\n-\n-    p.x = p.x;\n-}\n-\n-pub fn main() { }"}, {"sha": "a2a37208cd6168b61f4dcbdce75f59cf93e4b65d", "filename": "src/test/compile-fail/move-fragments-7.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs?ref=fb9ca16b3b7cf034f885de28879c4d50261ce3ef", "patch": "@@ -1,48 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we correctly compute the move fragments for a fn.\n-//\n-// Note that the code below is not actually incorrect; the\n-// `rustc_move_fragments` attribute is a hack that uses the error\n-// reporting mechanisms as a channel for communicating from the\n-// internals of the compiler.\n-\n-// Test that moving a Box<T> fragments its containing structure, for\n-// both moving out of the structure (i.e. reading `*p.x`) and writing\n-// into the container (i.e. writing `*p.x`).\n-\n-#![feature(rustc_attrs)]\n-\n-pub struct D { d: isize }\n-impl Drop for D { fn drop(&mut self) { } }\n-\n-pub struct Pair<X,Y> { x: X, y: Y }\n-\n-#[rustc_move_fragments]\n-pub fn test_deref_box_field(p: Pair<Box<D>, Box<D>>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                 parent_of_fragments: `$(local p).x`\n-    //~| ERROR                     moved_leaf_path: `$(local p).x.*`\n-    //~| ERROR                    unmoved_fragment: `$(local p).y`\n-    //~| ERROR                  assigned_leaf_path: `$(local i)`\n-    let i : D = *p.x;\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_overwrite_deref_box_field(mut p: Pair<Box<D>, Box<D>>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local mut p)`\n-    //~| ERROR                 parent_of_fragments: `$(local mut p).x`\n-    //~| ERROR                  assigned_leaf_path: `$(local mut p).x.*`\n-    //~| ERROR                    unmoved_fragment: `$(local mut p).y`\n-    *p.x = D { d: 3 };\n-}\n-\n-pub fn main() { }"}, {"sha": "e57268dbfa32aa985afb154168824b5916186a22", "filename": "src/test/compile-fail/move-fragments-8.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs?ref=fb9ca16b3b7cf034f885de28879c4d50261ce3ef", "patch": "@@ -1,41 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that we correctly compute the move fragments for a fn.\n-//\n-// Note that the code below is not actually incorrect; the\n-// `rustc_move_fragments` attribute is a hack that uses the error\n-// reporting mechanisms as a channel for communicating from the\n-// internals of the compiler.\n-\n-// Test that assigning into a `&T` within structured container does\n-// *not* fragment its containing structure.\n-//\n-// Compare against the `Box<T>` handling in move-fragments-7.rs. Note\n-// also that in this case we cannot do a move out of `&T`, so we only\n-// test writing `*p.x` here.\n-\n-#![feature(rustc_attrs)]\n-\n-pub struct D { d: isize }\n-impl Drop for D { fn drop(&mut self) { } }\n-\n-pub struct Pair<X,Y> { x: X, y: Y }\n-\n-#[rustc_move_fragments]\n-pub fn test_overwrite_deref_ampersand_field<'a>(p: Pair<&'a mut D, &'a D>) {\n-    //~^ ERROR                 parent_of_fragments: `$(local p)`\n-    //~| ERROR                 parent_of_fragments: `$(local p).x`\n-    //~| ERROR                  assigned_leaf_path: `$(local p).x.*`\n-    //~| ERROR                    unmoved_fragment: `$(local p).y`\n-    *p.x = D { d: 3 };\n-}\n-\n-pub fn main() { }"}, {"sha": "350f4169034004620cae6bf2cb6367532dfb27b2", "filename": "src/test/compile-fail/move-fragments-9.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9ca16b3b7cf034f885de28879c4d50261ce3ef/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs?ref=fb9ca16b3b7cf034f885de28879c4d50261ce3ef", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test moving array structures, e.g. `[T; 3]` as well as moving\n-// elements in and out of such arrays.\n-//\n-// Note also that the `test_move_array_then_overwrite` tests represent\n-// cases that we probably should make illegal.\n-\n-#![feature(rustc_attrs)]\n-\n-pub struct D { d: isize }\n-impl Drop for D { fn drop(&mut self) { } }\n-\n-#[rustc_move_fragments]\n-pub fn test_move_array_via_return(a: [D; 3]) -> [D; 3] {\n-    //~^ ERROR                  assigned_leaf_path: `$(local a)`\n-    //~| ERROR                     moved_leaf_path: `$(local a)`\n-    return a;\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_move_array_into_recv(a: [D; 3], recv: &mut [D; 3]) {\n-    //~^ ERROR                 parent_of_fragments: `$(local recv)`\n-    //~| ERROR                  assigned_leaf_path: `$(local a)`\n-    //~| ERROR                     moved_leaf_path: `$(local a)`\n-    //~| ERROR                  assigned_leaf_path: `$(local recv).*`\n-    *recv = a;\n-}\n-\n-#[rustc_move_fragments]\n-pub fn test_overwrite_array_elem(mut a: [D; 3], i: usize, d: D) {\n-    //~^ ERROR                 parent_of_fragments: `$(local mut a)`\n-    //~| ERROR                  assigned_leaf_path: `$(local i)`\n-    //~| ERROR                  assigned_leaf_path: `$(local d)`\n-    //~| ERROR                     moved_leaf_path: `$(local d)`\n-    //~| ERROR                  assigned_leaf_path: `$(local mut a).[]`\n-    //~| ERROR                    unmoved_fragment: `$(allbutone $(local mut a).[])`\n-    a[i] = d;\n-}\n-\n-pub fn main() { }"}]}