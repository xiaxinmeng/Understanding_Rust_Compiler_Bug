{"sha": "bc096549e84d1edbd051f0b42662c038dd935ff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMDk2NTQ5ZTg0ZDFlZGJkMDUxZjBiNDI2NjJjMDM4ZGQ5MzVmZjY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-24T04:11:31Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-28T02:18:10Z"}, "message": "rustc: desugar `use a::{b,c};` into `use a::b; use a::c;` in HIR.", "tree": {"sha": "7badba7d27fb7a03e9b87250665b56b83276997d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7badba7d27fb7a03e9b87250665b56b83276997d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc096549e84d1edbd051f0b42662c038dd935ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc096549e84d1edbd051f0b42662c038dd935ff6", "html_url": "https://github.com/rust-lang/rust/commit/bc096549e84d1edbd051f0b42662c038dd935ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc096549e84d1edbd051f0b42662c038dd935ff6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ebc6d8154eb80eef585603a143d1b0008b93e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ebc6d8154eb80eef585603a143d1b0008b93e91", "html_url": "https://github.com/rust-lang/rust/commit/6ebc6d8154eb80eef585603a143d1b0008b93e91"}], "stats": {"total": 623, "additions": 228, "deletions": 395}, "files": [{"sha": "3de788b8c1af1818800e2efecacb6a4fcc656485", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -250,9 +250,6 @@ pub trait Visitor<'v> : Sized {\n     fn visit_path(&mut self, path: &'v Path, _id: NodeId) {\n         walk_path(self, path)\n     }\n-    fn visit_path_list_item(&mut self, prefix: &'v Path, item: &'v PathListItem) {\n-        walk_path_list_item(self, prefix, item)\n-    }\n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment) {\n         walk_path_segment(self, path_span, path_segment)\n     }\n@@ -352,23 +349,9 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_id(item.id);\n             walk_opt_name(visitor, item.span, opt_name)\n         }\n-        ItemUse(ref vp) => {\n+        ItemUse(ref path, _) => {\n             visitor.visit_id(item.id);\n-            match vp.node {\n-                ViewPathSimple(name, ref path) => {\n-                    visitor.visit_name(vp.span, name);\n-                    visitor.visit_path(path, item.id);\n-                }\n-                ViewPathGlob(ref path) => {\n-                    visitor.visit_path(path, item.id);\n-                }\n-                ViewPathList(ref prefix, ref list) => {\n-                    visitor.visit_path(prefix, item.id);\n-                    for item in list {\n-                        visitor.visit_path_list_item(prefix, item)\n-                    }\n-                }\n-            }\n+            visitor.visit_path(path, item.id);\n         }\n         ItemStatic(ref typ, _, ref expr) |\n         ItemConst(ref typ, ref expr) => {\n@@ -529,14 +512,6 @@ pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) {\n     }\n }\n \n-pub fn walk_path_list_item<'v, V>(visitor: &mut V, _prefix: &'v Path, item: &'v PathListItem)\n-    where V: Visitor<'v>,\n-{\n-    visitor.visit_id(item.node.id);\n-    visitor.visit_name(item.span, item.node.name);\n-    walk_opt_name(visitor, item.span, item.node.rename);\n-}\n-\n pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              path_span: Span,\n                                              segment: &'v PathSegment) {"}, {"sha": "af0448cc27755993d13d70fc3b28cf0cb22bc29b", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 121, "deletions": 73, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -55,6 +55,7 @@ use syntax::ptr::P;\n use syntax::codemap::{respan, Spanned};\n use syntax::std_inject;\n use syntax::symbol::{Symbol, keywords};\n+use syntax::util::small_vector::SmallVector;\n use syntax::visit::{self, Visitor};\n use syntax_pos::Span;\n \n@@ -67,6 +68,11 @@ pub struct LoweringContext<'a> {\n     // a definition, then we can properly create the def id.\n     parent_def: Option<DefIndex>,\n     resolver: &'a mut Resolver,\n+\n+    /// The items being lowered are collected here.\n+    items: BTreeMap<NodeId, hir::Item>,\n+\n+    impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem>,\n }\n \n pub trait Resolver {\n@@ -98,6 +104,8 @@ pub fn lower_crate(sess: &Session,\n         sess: sess,\n         parent_def: None,\n         resolver: resolver,\n+        items: BTreeMap::new(),\n+        impl_items: BTreeMap::new(),\n     }.lower_crate(krate)\n }\n \n@@ -110,41 +118,35 @@ enum ParamMode {\n }\n \n impl<'a> LoweringContext<'a> {\n-    fn lower_crate(&mut self, c: &Crate) -> hir::Crate {\n+    fn lower_crate(mut self, c: &Crate) -> hir::Crate {\n         struct ItemLowerer<'lcx, 'interner: 'lcx> {\n-            items: BTreeMap<NodeId, hir::Item>,\n-            impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem>,\n             lctx: &'lcx mut LoweringContext<'interner>,\n         }\n \n         impl<'lcx, 'interner> Visitor for ItemLowerer<'lcx, 'interner> {\n             fn visit_item(&mut self, item: &Item) {\n-                self.items.insert(item.id, self.lctx.lower_item(item));\n+                let hir_item = self.lctx.lower_item(item);\n+                self.lctx.items.insert(item.id, hir_item);\n                 visit::walk_item(self, item);\n             }\n \n             fn visit_impl_item(&mut self, item: &ImplItem) {\n                 let id = self.lctx.lower_impl_item_ref(item).id;\n-                self.impl_items.insert(id, self.lctx.lower_impl_item(item));\n+                let hir_item = self.lctx.lower_impl_item(item);\n+                self.lctx.impl_items.insert(id, hir_item);\n                 visit::walk_impl_item(self, item);\n             }\n         }\n \n-        let (items, impl_items) = {\n-            let mut item_lowerer = ItemLowerer { items: BTreeMap::new(),\n-                                                 impl_items: BTreeMap::new(),\n-                                                 lctx: self };\n-            visit::walk_crate(&mut item_lowerer, c);\n-            (item_lowerer.items, item_lowerer.impl_items)\n-        };\n+        visit::walk_crate(&mut ItemLowerer { lctx: &mut self }, c);\n \n         hir::Crate {\n             module: self.lower_mod(&c.module),\n             attrs: self.lower_attrs(&c.attrs),\n             span: c.span,\n             exported_macros: c.exported_macros.iter().map(|m| self.lower_macro_def(m)).collect(),\n-            items: items,\n-            impl_items: impl_items,\n+            items: self.items,\n+            impl_items: self.impl_items,\n         }\n     }\n \n@@ -183,38 +185,6 @@ impl<'a> LoweringContext<'a> {\n         attrs.clone().into()\n     }\n \n-    fn lower_view_path(&mut self, view_path: &ViewPath) -> P<hir::ViewPath> {\n-        P(Spanned {\n-            node: match view_path.node {\n-                ViewPathSimple(ident, ref path) => {\n-                    hir::ViewPathSimple(ident.name,\n-                                        self.lower_path(path, ParamMode::Explicit))\n-                }\n-                ViewPathGlob(ref path) => {\n-                    hir::ViewPathGlob(self.lower_path(path, ParamMode::Explicit))\n-                }\n-                ViewPathList(ref path, ref path_list_idents) => {\n-                    hir::ViewPathList(self.lower_path(path, ParamMode::Explicit),\n-                                      path_list_idents.iter()\n-                                                      .map(|item| self.lower_path_list_item(item))\n-                                                      .collect())\n-                }\n-            },\n-            span: view_path.span,\n-        })\n-    }\n-\n-    fn lower_path_list_item(&mut self, path_list_ident: &PathListItem) -> hir::PathListItem {\n-        Spanned {\n-            node: hir::PathListItem_ {\n-                id: path_list_ident.node.id,\n-                name: path_list_ident.node.name.name,\n-                rename: path_list_ident.node.rename.map(|rename| rename.name),\n-            },\n-            span: path_list_ident.span,\n-        }\n-    }\n-\n     fn lower_arm(&mut self, arm: &Arm) -> hir::Arm {\n         hir::Arm {\n             attrs: self.lower_attrs(&arm.attrs),\n@@ -382,19 +352,32 @@ impl<'a> LoweringContext<'a> {\n                   proj_start, p.segments.len())\n     }\n \n-    fn lower_path(&mut self,\n-                  p: &Path,\n-                  param_mode: ParamMode)\n-                  -> hir::Path {\n+    fn lower_path_extra(&mut self,\n+                        p: &Path,\n+                        name: Option<Name>,\n+                        param_mode: ParamMode)\n+                        -> hir::Path {\n         hir::Path {\n             global: p.global,\n             segments: p.segments.iter().map(|segment| {\n                 self.lower_path_segment(segment, param_mode)\n-            }).collect(),\n+            }).chain(name.map(|name| {\n+                hir::PathSegment {\n+                    name: name,\n+                    parameters: hir::PathParameters::none()\n+                }\n+            })).collect(),\n             span: p.span,\n         }\n     }\n \n+    fn lower_path(&mut self,\n+                  p: &Path,\n+                  param_mode: ParamMode)\n+                  -> hir::Path {\n+        self.lower_path_extra(p, None, param_mode)\n+    }\n+\n     fn lower_path_segment(&mut self,\n                           segment: &PathSegment,\n                           param_mode: ParamMode)\n@@ -661,12 +644,10 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_block(&mut self, b: &Block) -> P<hir::Block> {\n-        let mut stmts = Vec::new();\n         let mut expr = None;\n \n-        if let Some((last, rest)) = b.stmts.split_last() {\n-            stmts = rest.iter().map(|s| self.lower_stmt(s)).collect::<Vec<_>>();\n-            let last = self.lower_stmt(last);\n+        let mut stmts = b.stmts.iter().flat_map(|s| self.lower_stmt(s)).collect::<Vec<_>>();\n+        if let Some(last) = stmts.pop() {\n             if let hir::StmtExpr(e, _) = last.node {\n                 expr = Some(e);\n             } else {\n@@ -683,11 +664,65 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n-    fn lower_item_kind(&mut self, i: &ItemKind) -> hir::Item_ {\n+    fn lower_item_kind(&mut self,\n+                       name: &mut Name,\n+                       attrs: &hir::HirVec<Attribute>,\n+                       vis: &mut hir::Visibility,\n+                       i: &ItemKind)\n+                       -> hir::Item_ {\n         match *i {\n             ItemKind::ExternCrate(string) => hir::ItemExternCrate(string),\n             ItemKind::Use(ref view_path) => {\n-                hir::ItemUse(self.lower_view_path(view_path))\n+                let path = match view_path.node {\n+                    ViewPathSimple(_, ref path) => path,\n+                    ViewPathGlob(ref path) => path,\n+                    ViewPathList(ref path, ref path_list_idents) => {\n+                        for &Spanned { node: ref import, span } in path_list_idents {\n+                            // `use a::{self as x, b as y};` lowers to\n+                            // `use a as x; use a::b as y;`\n+                            let mut ident = import.name;\n+                            let suffix = if ident.name == keywords::SelfValue.name() {\n+                                if let Some(last) = path.segments.last() {\n+                                    ident = last.identifier;\n+                                }\n+                                None\n+                            } else {\n+                                Some(ident.name)\n+                            };\n+\n+                            let mut path = self.lower_path_extra(path, suffix,\n+                                                                 ParamMode::Explicit);\n+                            path.span = span;\n+                            self.items.insert(import.id, hir::Item {\n+                                id: import.id,\n+                                name: import.rename.unwrap_or(ident).name,\n+                                attrs: attrs.clone(),\n+                                node: hir::ItemUse(P(path), hir::UseKind::Single),\n+                                vis: vis.clone(),\n+                                span: span,\n+                            });\n+                        }\n+                        path\n+                    }\n+                };\n+                let path = P(self.lower_path(path, ParamMode::Explicit));\n+                let kind = match view_path.node {\n+                    ViewPathSimple(ident, _) => {\n+                        *name = ident.name;\n+                        hir::UseKind::Single\n+                    }\n+                    ViewPathGlob(_) => {\n+                        hir::UseKind::Glob\n+                    }\n+                    ViewPathList(..) => {\n+                        // Privatize the degenerate import base, used only to check\n+                        // the stability of `use a::{};`, to avoid it showing up as\n+                        // a reexport by accident when `pub`, e.g. in documentation.\n+                        *vis = hir::Inherited;\n+                        hir::UseKind::ListStem\n+                    }\n+                };\n+                hir::ItemUse(path, kind)\n             }\n             ItemKind::Static(ref t, m, ref e) => {\n                 hir::ItemStatic(self.lower_ty(t),\n@@ -835,7 +870,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_mod(&mut self, m: &Mod) -> hir::Mod {\n         hir::Mod {\n             inner: m.inner,\n-            item_ids: m.items.iter().map(|x| self.lower_item_id(x)).collect(),\n+            item_ids: m.items.iter().flat_map(|x| self.lower_item_id(x)).collect(),\n         }\n     }\n \n@@ -851,21 +886,30 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_item_id(&mut self, i: &Item) -> hir::ItemId {\n-        hir::ItemId { id: i.id }\n+    fn lower_item_id(&mut self, i: &Item) -> SmallVector<hir::ItemId> {\n+        if let ItemKind::Use(ref view_path) = i.node {\n+            if let ViewPathList(_, ref imports) = view_path.node {\n+                return iter::once(i.id).chain(imports.iter().map(|import| import.node.id))\n+                    .map(|id| hir::ItemId { id: id }).collect();\n+            }\n+        }\n+        SmallVector::one(hir::ItemId { id: i.id })\n     }\n \n     pub fn lower_item(&mut self, i: &Item) -> hir::Item {\n+        let mut name = i.ident.name;\n+        let attrs = self.lower_attrs(&i.attrs);\n+        let mut vis = self.lower_visibility(&i.vis);\n         let node = self.with_parent_def(i.id, |this| {\n-            this.lower_item_kind(&i.node)\n+            this.lower_item_kind(&mut name, &attrs, &mut vis, &i.node)\n         });\n \n         hir::Item {\n             id: i.id,\n-            name: i.ident.name,\n-            attrs: self.lower_attrs(&i.attrs),\n+            name: name,\n+            attrs: attrs,\n             node: node,\n-            vis: self.lower_visibility(&i.vis),\n+            vis: vis,\n             span: i.span,\n         }\n     }\n@@ -1701,22 +1745,26 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_stmt(&mut self, s: &Stmt) -> hir::Stmt {\n-        match s.node {\n+    fn lower_stmt(&mut self, s: &Stmt) -> SmallVector<hir::Stmt> {\n+        SmallVector::one(match s.node {\n             StmtKind::Local(ref l) => Spanned {\n                 node: hir::StmtDecl(P(Spanned {\n                     node: hir::DeclLocal(self.lower_local(l)),\n                     span: s.span,\n                 }), s.id),\n                 span: s.span,\n             },\n-            StmtKind::Item(ref it) => Spanned {\n-                node: hir::StmtDecl(P(Spanned {\n-                    node: hir::DeclItem(self.lower_item_id(it)),\n+            StmtKind::Item(ref it) => {\n+                // Can only use the ID once.\n+                let mut id = Some(s.id);\n+                return self.lower_item_id(it).into_iter().map(|item_id| Spanned {\n+                    node: hir::StmtDecl(P(Spanned {\n+                        node: hir::DeclItem(item_id),\n+                        span: s.span,\n+                    }), id.take().unwrap_or_else(|| self.next_id())),\n                     span: s.span,\n-                }), s.id),\n-                span: s.span,\n-            },\n+                }).collect();\n+            }\n             StmtKind::Expr(ref e) => {\n                 Spanned {\n                     node: hir::StmtExpr(P(self.lower_expr(e)), s.id),\n@@ -1730,7 +1778,7 @@ impl<'a> LoweringContext<'a> {\n                 }\n             }\n             StmtKind::Mac(..) => panic!(\"Shouldn't exist here\"),\n-        }\n+        })\n     }\n \n     fn lower_capture_clause(&mut self, c: CaptureBy) -> hir::CaptureClause {"}, {"sha": "67e9b24f42d2200d2c54107990bfbb23b8aaa239", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -124,16 +124,6 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                         this.insert(struct_def.id(), NodeStructCtor(struct_def));\n                     }\n                 }\n-                ItemUse(ref view_path) => {\n-                    match view_path.node {\n-                        ViewPathList(_, ref paths) => {\n-                            for path in paths {\n-                                this.insert(path.node.id, NodeItem(i));\n-                            }\n-                        }\n-                        _ => ()\n-                    }\n-                }\n                 _ => {}\n             }\n             intravisit::walk_item(this, i);"}, {"sha": "9d1c7d41faa261278490480ed1476bd8f90375a3", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -155,7 +155,20 @@ impl<'a> visit::Visitor for DefCollector<'a> {\n                 DefPathData::ValueNs(i.ident.name.as_str()),\n             ItemKind::Mac(..) if i.id == DUMMY_NODE_ID => return, // Scope placeholder\n             ItemKind::Mac(..) => return self.visit_macro_invoc(i.id, false),\n-            ItemKind::Use(..) => DefPathData::Misc,\n+            ItemKind::Use(ref view_path) => {\n+                match view_path.node {\n+                    ViewPathGlob(..) => {}\n+\n+                    // FIXME(eddyb) Should use the real name. Which namespace?\n+                    ViewPathSimple(..) => {}\n+                    ViewPathList(_, ref imports) => {\n+                        for import in imports {\n+                            self.create_def(import.node.id, DefPathData::Misc);\n+                        }\n+                    }\n+                }\n+                DefPathData::Misc\n+            }\n         };\n         let def = self.create_def(i.id, def_data);\n "}, {"sha": "a8986530d1d3d91242604767d25189d5da672231", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -250,16 +250,8 @@ impl<'ast> Map<'ast> {\n             loop {\n                 match map[id.as_usize()] {\n                     EntryItem(_, item) => {\n-                        let def_id = self.local_def_id(item.id);\n-                        // NB                          ^~~~~~~\n-                        //\n-                        // You would expect that `item.id == id`, but this\n-                        // is not always the case. In particular, for a\n-                        // ViewPath item like `use self::{mem, foo}`, we\n-                        // map the ids for `mem` and `foo` to the\n-                        // enclosing view path item. This seems mega super\n-                        // ultra wrong, but then who am I to judge?\n-                        // -nmatsakis\n+                        assert_eq!(id, item.id);\n+                        let def_id = self.local_def_id(id);\n                         assert!(!self.is_inlined_def_id(def_id));\n                         return DepNode::Hir(def_id);\n                     }"}, {"sha": "da759b2d4daca5eb4b35b9cd6b6992fbb86fc517", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -27,7 +27,6 @@ pub use self::Ty_::*;\n pub use self::TyParamBound::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n-pub use self::ViewPath_::*;\n pub use self::Visibility::{Public, Inherited};\n pub use self::PathParameters::*;\n \n@@ -1385,32 +1384,20 @@ pub struct Variant_ {\n \n pub type Variant = Spanned<Variant_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub struct PathListItem_ {\n-    pub name: Name,\n-    /// renamed in list, eg `use foo::{bar as baz};`\n-    pub rename: Option<Name>,\n-    pub id: NodeId,\n-}\n-\n-pub type PathListItem = Spanned<PathListItem_>;\n-\n-pub type ViewPath = Spanned<ViewPath_>;\n-\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum ViewPath_ {\n-    /// `foo::bar::baz as quux`\n-    ///\n-    /// or just\n-    ///\n-    /// `foo::bar::baz` (with `as baz` implicitly on the right)\n-    ViewPathSimple(Name, Path),\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum UseKind {\n+    /// One import, e.g. `use foo::bar` or `use foo::bar as baz`.\n+    /// Also produced for each element of a list `use`, e.g.\n+    // `use foo::{a, b}` lowers to `use foo::a; use foo::b;`.\n+    Single,\n \n-    /// `foo::bar::*`\n-    ViewPathGlob(Path),\n+    /// Glob import, e.g. `use foo::*`.\n+    Glob,\n \n-    /// `foo::bar::{a,b,c}`\n-    ViewPathList(Path, HirVec<PathListItem>),\n+    /// Degenerate list import, e.g. `use foo::{a, b}` produces\n+    /// an additional `use foo::{}` for performing checks such as\n+    /// unstable feature gating. May be removed in the future.\n+    ListStem,\n }\n \n /// TraitRef's appear in impls.\n@@ -1544,8 +1531,13 @@ pub enum Item_ {\n     ///\n     /// e.g. `extern crate foo` or `extern crate foo_bar as foo`\n     ItemExternCrate(Option<Name>),\n-    /// A `use` or `pub use` item\n-    ItemUse(P<ViewPath>),\n+\n+    /// `use foo::bar::*;` or `use foo::bar::baz as quux;`\n+    ///\n+    /// or just\n+    ///\n+    /// `use foo::bar::baz;` (with `as baz` implicitly on the right)\n+    ItemUse(P<Path>, UseKind),\n \n     /// A `static` item\n     ItemStatic(P<Ty>, Mutability, P<Expr>),"}, {"sha": "4dd08def251e96c9053d7f41d5d876675a65e12c", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 15, "deletions": 35, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -669,10 +669,22 @@ impl<'a> State<'a> {\n                 self.end()?; // end inner head-block\n                 self.end()?; // end outer head-block\n             }\n-            hir::ItemUse(ref vp) => {\n+            hir::ItemUse(ref path, kind) => {\n                 self.head(&visibility_qualified(&item.vis, \"use\"))?;\n-                self.print_view_path(&vp)?;\n-                word(&mut self.s, \";\")?;\n+                self.print_path(path, false)?;\n+\n+                match kind {\n+                    hir::UseKind::Single => {\n+                        if path.segments.last().unwrap().name != item.name {\n+                            space(&mut self.s)?;\n+                            self.word_space(\"as\")?;\n+                            self.print_name(item.name)?;\n+                        }\n+                        word(&mut self.s, \";\")?;\n+                    }\n+                    hir::UseKind::Glob => word(&mut self.s, \"::*;\")?,\n+                    hir::UseKind::ListStem => word(&mut self.s, \"::{};\")?\n+                }\n                 self.end()?; // end inner head-block\n                 self.end()?; // end outer head-block\n             }\n@@ -2153,38 +2165,6 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n-    pub fn print_view_path(&mut self, vp: &hir::ViewPath) -> io::Result<()> {\n-        match vp.node {\n-            hir::ViewPathSimple(name, ref path) => {\n-                self.print_path(path, false)?;\n-\n-                if path.segments.last().unwrap().name != name {\n-                    space(&mut self.s)?;\n-                    self.word_space(\"as\")?;\n-                    self.print_name(name)?;\n-                }\n-\n-                Ok(())\n-            }\n-\n-            hir::ViewPathGlob(ref path) => {\n-                self.print_path(path, false)?;\n-                word(&mut self.s, \"::*\")\n-            }\n-\n-            hir::ViewPathList(ref path, ref segments) => {\n-                if path.segments.is_empty() {\n-                    word(&mut self.s, \"{\")?;\n-                } else {\n-                    self.print_path(path, false)?;\n-                    word(&mut self.s, \"::{\")?;\n-                }\n-                self.commasep(Inconsistent, &segments[..], |s, w| s.print_name(w.node.name))?;\n-                word(&mut self.s, \"}\")\n-            }\n-        }\n-    }\n-\n     pub fn print_mutability(&mut self, mutbl: hir::Mutability) -> io::Result<()> {\n         match mutbl {\n             hir::MutMutable => self.word_nbsp(\"mut\"),"}, {"sha": "41c8d413486dc72c37bf4fcec4a64d26be0b733a", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -948,11 +948,6 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         hir_visit::walk_path(self, p);\n     }\n \n-    fn visit_path_list_item(&mut self, prefix: &'tcx hir::Path, item: &'tcx hir::PathListItem) {\n-        run_lints!(self, check_path_list_item, late_passes, item);\n-        hir_visit::walk_path_list_item(self, prefix, item);\n-    }\n-\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n         check_lint_name_attribute(self, attr);\n         run_lints!(self, check_attribute, late_passes, attr);"}, {"sha": "4e06e0abf0148b6543348e1eac670a8c59a3274d", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -168,7 +168,6 @@ pub trait LateLintPass: LintPass {\n     fn check_lifetime(&mut self, _: &LateContext, _: &hir::Lifetime) { }\n     fn check_lifetime_def(&mut self, _: &LateContext, _: &hir::LifetimeDef) { }\n     fn check_path(&mut self, _: &LateContext, _: &hir::Path, _: ast::NodeId) { }\n-    fn check_path_list_item(&mut self, _: &LateContext, _: &hir::PathListItem) { }\n     fn check_attribute(&mut self, _: &LateContext, _: &ast::Attribute) { }\n \n     /// Called when entering a syntax node that can have lint attributes such"}, {"sha": "ec064e264ab3ce89fd12fa8bf493dc81fcaac791", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -297,11 +297,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n         self.lookup_and_handle_definition(id);\n         intravisit::walk_path(self, path);\n     }\n-\n-    fn visit_path_list_item(&mut self, path: &hir::Path, item: &hir::PathListItem) {\n-        self.lookup_and_handle_definition(item.node.id);\n-        intravisit::walk_path_list_item(self, path, item);\n-    }\n }\n \n fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool {"}, {"sha": "91c1c63d89063609f2f0671dd4748b8ff685ad99", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -265,7 +265,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     // These are normal, nothing reachable about these\n                     // inherently and their children are already in the\n                     // worklist, as determined by the privacy pass\n-                    hir::ItemExternCrate(_) | hir::ItemUse(_) |\n+                    hir::ItemExternCrate(_) | hir::ItemUse(..) |\n                     hir::ItemTy(..) | hir::ItemStatic(..) |\n                     hir::ItemMod(..) | hir::ItemForeignMod(..) |\n                     hir::ItemImpl(..) | hir::ItemTrait(..) |"}, {"sha": "f256d6d9b4f847b766c7fef37546381bbb52d2f5", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -151,7 +151,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     intravisit::walk_item(this, item);\n                 }\n                 hir::ItemExternCrate(_) |\n-                hir::ItemUse(_) |\n+                hir::ItemUse(..) |\n                 hir::ItemMod(..) |\n                 hir::ItemDefaultImpl(..) |\n                 hir::ItemForeignMod(..) |"}, {"sha": "d7a29e190a8f1203ad0dd550269f89c468c784be", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -474,12 +474,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         intravisit::walk_path(self, path)\n     }\n \n-    fn visit_path_list_item(&mut self, prefix: &'tcx hir::Path, item: &'tcx hir::PathListItem) {\n-        check_path_list_item(self.tcx, item,\n-                   &mut |id, sp, stab, depr| self.check(id, sp, stab, depr));\n-        intravisit::walk_path_list_item(self, prefix, item)\n-    }\n-\n     fn visit_pat(&mut self, pat: &'tcx hir::Pat) {\n         check_pat(self.tcx, pat,\n                   &mut |id, sp, stab, depr| self.check(id, sp, stab, depr));\n@@ -628,14 +622,6 @@ pub fn check_path<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-pub fn check_path_list_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                      item: &hir::PathListItem,\n-                                      cb: &mut FnMut(DefId, Span,\n-                                                     &Option<&Stability>,\n-                                                     &Option<DeprecationEntry>)) {\n-    maybe_do_stability_check(tcx, tcx.expect_def(item.node.id).def_id(), item.span, cb);\n-}\n-\n pub fn check_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &hir::Pat,\n                            cb: &mut FnMut(DefId, Span,\n                                           &Option<&Stability>,"}, {"sha": "8c6d8dffa1db53857c011164df584144f5026386", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -189,7 +189,6 @@ enum SawAbiComponent<'a> {\n     SawPath(bool),\n     SawPathSegment,\n     SawPathParameters,\n-    SawPathListItem,\n     SawBlock,\n     SawPat(SawPatComponent),\n     SawLocal,\n@@ -357,7 +356,7 @@ fn saw_lit(lit: &ast::Lit) -> SawExprComponent<'static> {\n #[derive(Hash)]\n enum SawItemComponent {\n     SawItemExternCrate,\n-    SawItemUse,\n+    SawItemUse(UseKind),\n     SawItemStatic(Mutability),\n     SawItemConst,\n     SawItemFn(Unsafety, Constness, Abi),\n@@ -375,7 +374,7 @@ enum SawItemComponent {\n fn saw_item(node: &Item_) -> SawItemComponent {\n     match *node {\n         ItemExternCrate(..) => SawItemExternCrate,\n-        ItemUse(..) => SawItemUse,\n+        ItemUse(_, kind) => SawItemUse(kind),\n         ItemStatic(_, mutability, _) => SawItemStatic(mutability),\n         ItemConst(..) =>SawItemConst,\n         ItemFn(_, unsafety, constness, abi, _, _) => SawItemFn(unsafety, constness, abi),\n@@ -747,14 +746,6 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n         visit::walk_poly_trait_ref(self, t, m)\n     }\n \n-    fn visit_path_list_item(&mut self, prefix: &'tcx Path, item: &'tcx PathListItem) {\n-        debug!(\"visit_path_list_item: st={:?}\", self.st);\n-        SawPathListItem.hash(self.st);\n-        self.hash_discriminant(&item.node);\n-        hash_span!(self, item.span);\n-        visit::walk_path_list_item(self, prefix, item)\n-    }\n-\n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'tcx PathSegment) {\n         debug!(\"visit_path_segment: st={:?}\", self.st);\n         SawPathSegment.hash(self.st);"}, {"sha": "d91327bc86bf8406e7c76aa26eef6cf0f5b59db8", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -704,14 +704,6 @@ impl LateLintPass for Deprecated {\n                               &mut |id, sp, stab, depr| self.lint(cx, id, sp, &stab, &depr));\n     }\n \n-    fn check_path_list_item(&mut self, cx: &LateContext, item: &hir::PathListItem) {\n-        stability::check_path_list_item(cx.tcx,\n-                                        item,\n-                                        &mut |id, sp, stab, depr| {\n-                                            self.lint(cx, id, sp, &stab, &depr)\n-                                        });\n-    }\n-\n     fn check_pat(&mut self, cx: &LateContext, pat: &hir::Pat) {\n         stability::check_pat(cx.tcx,\n                              pat,"}, {"sha": "0b92107c81708e945c5375600de629247d57da77", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -111,6 +111,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n     add_early_builtin!(sess,\n                        UnusedParens,\n+                       UnusedImportBraces,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -129,7 +130,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  NonCamelCaseTypes,\n                  NonSnakeCase,\n                  NonUpperCaseGlobals,\n-                 UnusedImportBraces,\n                  NonShorthandFieldPatterns,\n                  UnusedUnsafe,\n                  UnsafeCode,"}, {"sha": "324cbd17ab36bc90c8b599a46fa213c10bc4c580", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -406,11 +406,11 @@ impl LintPass for UnusedImportBraces {\n     }\n }\n \n-impl LateLintPass for UnusedImportBraces {\n-    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n-        if let hir::ItemUse(ref view_path) = item.node {\n-            if let hir::ViewPathList(_, ref items) = view_path.node {\n-                if items.len() == 1 && items[0].node.name != keywords::SelfValue.name() {\n+impl EarlyLintPass for UnusedImportBraces {\n+    fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n+        if let ast::ItemKind::Use(ref view_path) = item.node {\n+            if let ast::ViewPathList(_, ref items) = view_path.node {\n+                if items.len() == 1 && items[0].node.name.name != keywords::SelfValue.name() {\n                     let msg = format!(\"braces around {} is unnecessary\", items[0].node.name);\n                     cx.span_lint(UNUSED_IMPORT_BRACES, item.span, &msg);\n                 }"}, {"sha": "8f3e8a48b1ab5969b926f3b8c211cbd4edf68b8e", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -729,7 +729,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 EntryKind::Trait(self.lazy(&data))\n             }\n             hir::ItemExternCrate(_) |\n-            hir::ItemUse(_) => bug!(\"cannot encode info for item {:?}\", item),\n+            hir::ItemUse(..) => bug!(\"cannot encode info for item {:?}\", item),\n         };\n \n         Entry {\n@@ -982,7 +982,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> {\n         let def_id = self.index.tcx.map.local_def_id(item.id);\n         match item.node {\n             hir::ItemExternCrate(_) |\n-            hir::ItemUse(_) => (), // ignore these\n+            hir::ItemUse(..) => (), // ignore these\n             _ => self.index.record(def_id, EncodeContext::encode_info_for_item, (def_id, item)),\n         }\n         self.index.encode_addl_info_for_item(item);"}, {"sha": "ba236ea93a4bc37df3c71b5a4e5fa83ed0979256", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -226,12 +226,6 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         self.record(\"Path\", Id::None, path);\n         hir_visit::walk_path(self, path)\n     }\n-    fn visit_path_list_item(&mut self,\n-                            prefix: &'v hir::Path,\n-                            item: &'v hir::PathListItem) {\n-        self.record(\"PathListItem\", Id::Node(item.node.id), item);\n-        hir_visit::walk_path_list_item(self, prefix, item)\n-    }\n     fn visit_path_segment(&mut self,\n                           path_span: Span,\n                           path_segment: &'v hir::PathSegment) {"}, {"sha": "0034a85f8e29e0b156da2ddf5d281f872b691189", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -45,17 +45,8 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for UnusedTraitImportVisitor<'a, 'tcx> {\n         if item.vis == hir::Public || item.span == DUMMY_SP {\n             return;\n         }\n-        if let hir::ItemUse(ref path) = item.node {\n-            match path.node {\n-                hir::ViewPathSimple(..) | hir::ViewPathGlob(..) => {\n-                    self.check_import(item.id, path.span);\n-                }\n-                hir::ViewPathList(_, ref path_list) => {\n-                    for path_item in path_list {\n-                        self.check_import(path_item.node.id, path_item.span);\n-                    }\n-                }\n-            }\n+        if let hir::ItemUse(ref path, _) = item.node {\n+            self.check_import(item.id, path.span);\n         }\n     }\n "}, {"sha": "b83e453b2de783cb61fc465d46c3d61360ba2a47", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -696,7 +696,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n     debug!(\"convert: item {} with id {}\", it.name, it.id);\n     match it.node {\n         // These don't define types.\n-        hir::ItemExternCrate(_) | hir::ItemUse(_) | hir::ItemMod(_) => {\n+        hir::ItemExternCrate(_) | hir::ItemUse(..) | hir::ItemMod(_) => {\n         }\n         hir::ItemForeignMod(ref foreign_mod) => {\n             for item in &foreign_mod.items {"}, {"sha": "686d1a4a7716d823e38a204e5346d68c7b85d2aa", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n             }\n \n             hir::ItemExternCrate(_) |\n-            hir::ItemUse(_) |\n+            hir::ItemUse(..) |\n             hir::ItemStatic(..) |\n             hir::ItemConst(..) |\n             hir::ItemFn(..) |"}, {"sha": "851cfcd87231f8a8790a1c6fafa1ec75ba1c8d48", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n             }\n \n             hir::ItemExternCrate(_) |\n-            hir::ItemUse(_) |\n+            hir::ItemUse(..) |\n             hir::ItemDefaultImpl(..) |\n             hir::ItemImpl(..) |\n             hir::ItemStatic(..) |"}, {"sha": "5e1b12e80d4fbcbb9b505e7d6b21be16532ad176", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 60, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -2589,47 +2589,19 @@ impl Clean<Vec<Item>> for doctree::Import {\n                 None => false,\n             }\n         });\n-        let (mut ret, inner) = match self.node {\n-            hir::ViewPathGlob(ref p) => {\n-                (vec![], Import::Glob(resolve_use_source(cx, p.clean(cx), self.id)))\n-            }\n-            hir::ViewPathList(ref p, ref list) => {\n-                // Attempt to inline all reexported items, but be sure\n-                // to keep any non-inlineable reexports so they can be\n-                // listed in the documentation.\n-                let mut ret = vec![];\n-                let remaining = if !denied {\n-                    let mut remaining = vec![];\n-                    for path in list {\n-                        match inline::try_inline(cx, path.node.id, path.node.rename) {\n-                            Some(items) => {\n-                                ret.extend(items);\n-                            }\n-                            None => {\n-                                remaining.push(path.clean(cx));\n-                            }\n-                        }\n-                    }\n-                    remaining\n-                } else {\n-                    list.clean(cx)\n-                };\n-                if remaining.is_empty() {\n-                    return ret;\n-                }\n-                (ret, Import::List(resolve_use_source(cx, p.clean(cx), self.id), remaining))\n-            }\n-            hir::ViewPathSimple(name, ref p) => {\n-                if !denied {\n-                    if let Some(items) = inline::try_inline(cx, self.id, Some(name)) {\n-                        return items;\n-                    }\n+        let path = self.path.clean(cx);\n+        let inner = if self.glob {\n+            Import::Glob(resolve_use_source(cx, path, self.id))\n+        } else {\n+            let name = self.name;\n+            if !denied {\n+                if let Some(items) = inline::try_inline(cx, self.id, Some(name)) {\n+                    return items;\n                 }\n-                (vec![], Import::Simple(name.clean(cx),\n-                                        resolve_use_source(cx, p.clean(cx), self.id)))\n             }\n+            Import::Simple(name.clean(cx), resolve_use_source(cx, path, self.id))\n         };\n-        ret.push(Item {\n+        vec![Item {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n@@ -2638,8 +2610,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n             stability: None,\n             deprecation: None,\n             inner: ImportItem(inner)\n-        });\n-        ret\n+        }]\n     }\n }\n \n@@ -2648,9 +2619,7 @@ pub enum Import {\n     // use source as str;\n     Simple(String, ImportSource),\n     // use source::*;\n-    Glob(ImportSource),\n-    // use source::{a, b, c};\n-    List(ImportSource, Vec<ViewListIdent>),\n+    Glob(ImportSource)\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n@@ -2659,23 +2628,6 @@ pub struct ImportSource {\n     pub did: Option<DefId>,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct ViewListIdent {\n-    pub name: String,\n-    pub rename: Option<String>,\n-    pub source: Option<DefId>,\n-}\n-\n-impl Clean<ViewListIdent> for hir::PathListItem {\n-    fn clean(&self, cx: &DocContext) -> ViewListIdent {\n-        ViewListIdent {\n-            name: self.node.name.clean(cx),\n-            rename: self.node.rename.map(|r| r.clean(cx)),\n-            source: resolve_def(cx, self.node.id)\n-        }\n-    }\n-}\n-\n impl Clean<Vec<Item>> for hir::ForeignMod {\n     fn clean(&self, cx: &DocContext) -> Vec<Item> {\n         let mut items = self.items.clean(cx);"}, {"sha": "21fc135eaadae7c0822de78e97d2130bce50702e", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -254,10 +254,12 @@ pub struct ExternCrate {\n }\n \n pub struct Import {\n+    pub name: Name,\n     pub id: NodeId,\n     pub vis: hir::Visibility,\n     pub attrs: hir::HirVec<ast::Attribute>,\n-    pub node: hir::ViewPath_,\n+    pub path: hir::Path,\n+    pub glob: bool,\n     pub whence: Span,\n }\n "}, {"sha": "aed41916f5c536594c73d9f557e681e36bf832af", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -969,16 +969,6 @@ impl fmt::Display for clean::Import {\n             clean::Import::Glob(ref src) => {\n                 write!(f, \"use {}::*;\", *src)\n             }\n-            clean::Import::List(ref src, ref names) => {\n-                write!(f, \"use {}::{{\", *src)?;\n-                for (i, n) in names.iter().enumerate() {\n-                    if i > 0 {\n-                        write!(f, \", \")?;\n-                    }\n-                    write!(f, \"{}\", *n)?;\n-                }\n-                write!(f, \"}};\")\n-            }\n         }\n     }\n }\n@@ -1000,23 +990,6 @@ impl fmt::Display for clean::ImportSource {\n     }\n }\n \n-impl fmt::Display for clean::ViewListIdent {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match self.source {\n-            Some(did) => {\n-                let path = clean::Path::singleton(self.name.clone());\n-                resolved_path(f, did, &path, false)?;\n-            }\n-            _ => write!(f, \"{}\", self.name)?,\n-        }\n-\n-        if let Some(ref name) = self.rename {\n-            write!(f, \" as {}\", name)?;\n-        }\n-        Ok(())\n-    }\n-}\n-\n impl fmt::Display for clean::TypeBinding {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if f.alternate() {"}, {"sha": "fcf747a7c1796a4d0700da845e07261787ba52a0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 13, "deletions": 46, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -225,42 +225,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         om\n     }\n \n-    fn visit_view_path(&mut self, path: hir::ViewPath_,\n-                       om: &mut Module,\n-                       id: ast::NodeId,\n-                       please_inline: bool) -> Option<hir::ViewPath_> {\n-        match path {\n-            hir::ViewPathSimple(dst, base) => {\n-                if self.maybe_inline_local(id, Some(dst), false, om, please_inline) {\n-                    None\n-                } else {\n-                    Some(hir::ViewPathSimple(dst, base))\n-                }\n-            }\n-            hir::ViewPathList(p, paths) => {\n-                let mine = paths.into_iter().filter(|path| {\n-                    !self.maybe_inline_local(path.node.id, path.node.rename,\n-                                             false, om, please_inline)\n-                }).collect::<hir::HirVec<hir::PathListItem>>();\n-\n-                if mine.is_empty() {\n-                    None\n-                } else {\n-                    Some(hir::ViewPathList(p, mine))\n-                }\n-            }\n-\n-            hir::ViewPathGlob(base) => {\n-                if self.maybe_inline_local(id, None, true, om, please_inline) {\n-                    None\n-                } else {\n-                    Some(hir::ViewPathGlob(base))\n-                }\n-            }\n-        }\n-\n-    }\n-\n     /// Tries to resolve the target of a `pub use` statement and inlines the\n     /// target if it is defined locally and would not be documented otherwise,\n     /// or when it is specifically requested with `please_inline`.\n@@ -388,11 +352,13 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     whence: item.span,\n                 })\n             }\n-            hir::ItemUse(ref vpath) => {\n-                let node = vpath.node.clone();\n+            hir::ItemUse(_, hir::UseKind::ListStem) => {}\n+            hir::ItemUse(ref path, kind) => {\n+                let is_glob = kind == hir::UseKind::Glob;\n+\n                 // If there was a private module in the current path then don't bother inlining\n                 // anything as it will probably be stripped anyway.\n-                let node = if item.vis == hir::Public && self.inside_public_path {\n+                if item.vis == hir::Public && self.inside_public_path {\n                     let please_inline = item.attrs.iter().any(|item| {\n                         match item.meta_item_list() {\n                             Some(list) if item.check_name(\"doc\") => {\n@@ -401,18 +367,19 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                             _ => false,\n                         }\n                     });\n-                    match self.visit_view_path(node, om, item.id, please_inline) {\n-                        None => return,\n-                        Some(p) => p\n+                    let name = if is_glob { None } else { Some(name) };\n+                    if self.maybe_inline_local(item.id, name, is_glob, om, please_inline) {\n+                        return;\n                     }\n-                } else {\n-                    node\n-                };\n+                }\n+\n                 om.imports.push(Import {\n+                    name: item.name,\n                     id: item.id,\n                     vis: item.vis.clone(),\n                     attrs: item.attrs.clone(),\n-                    node: node,\n+                    path: (**path).clone(),\n+                    glob: is_glob,\n                     whence: item.span,\n                 });\n             }"}, {"sha": "4b6843d33f7ac367dac45ea5b5122b3ac335ce46", "filename": "src/test/rustdoc/viewpath-rename.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Ftest%2Frustdoc%2Fviewpath-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Ftest%2Frustdoc%2Fviewpath-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fviewpath-rename.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -21,8 +21,11 @@ pub enum Maybe<A> {\n \n // @has foo/prelude/index.html\n pub mod prelude {\n-    // @has foo/prelude/index.html '//code' 'pub use io::{self as FooIo, Reader as FooReader}'\n+    // @has foo/prelude/index.html '//code' 'pub use io as FooIo;'\n+    // @has foo/prelude/index.html '//code' 'pub use io::Reader as FooReader;'\n     #[doc(no_inline)] pub use io::{self as FooIo, Reader as FooReader};\n-    // @has foo/prelude/index.html '//code' 'pub use Maybe::{self, Just as MaybeJust, Nothing}'\n+    // @has foo/prelude/index.html '//code' 'pub use Maybe;'\n+    // @has foo/prelude/index.html '//code' 'pub use Maybe::Just as MaybeJust;'\n+    // @has foo/prelude/index.html '//code' 'pub use Maybe::Nothing;'\n     #[doc(no_inline)] pub use Maybe::{self, Just as MaybeJust, Nothing};\n }"}, {"sha": "000960ad972abf867eeedb2e18c797a1615227da", "filename": "src/test/rustdoc/viewpath-self.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Ftest%2Frustdoc%2Fviewpath-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc096549e84d1edbd051f0b42662c038dd935ff6/src%2Ftest%2Frustdoc%2Fviewpath-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fviewpath-self.rs?ref=bc096549e84d1edbd051f0b42662c038dd935ff6", "patch": "@@ -21,8 +21,11 @@ pub enum Maybe<A> {\n \n // @has foo/prelude/index.html\n pub mod prelude {\n-    // @has foo/prelude/index.html '//code' 'pub use io::{self, Reader}'\n+    // @has foo/prelude/index.html '//code' 'pub use io;'\n+    // @has foo/prelude/index.html '//code' 'pub use io::Reader;'\n     #[doc(no_inline)] pub use io::{self, Reader};\n-    // @has foo/prelude/index.html '//code' 'pub use Maybe::{self, Just, Nothing}'\n+    // @has foo/prelude/index.html '//code' 'pub use Maybe;'\n+    // @has foo/prelude/index.html '//code' 'pub use Maybe::Just;'\n+    // @has foo/prelude/index.html '//code' 'pub use Maybe::Nothing;'\n     #[doc(no_inline)] pub use Maybe::{self, Just, Nothing};\n }"}]}