{"sha": "aefc5ec11065728c99dd9636b736733e2c6544f0", "node_id": "C_kwDOAAsO6NoAKGFlZmM1ZWMxMTA2NTcyOGM5OWRkOTYzNmI3MzY3MzNlMmM2NTQ0ZjA", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-12-09T17:26:20Z"}, "committer": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-02-19T22:16:22Z"}, "message": "remove cfgs", "tree": {"sha": "ddb866342eb6599011590158ee9ae948a0a5cb1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddb866342eb6599011590158ee9ae948a0a5cb1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aefc5ec11065728c99dd9636b736733e2c6544f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aefc5ec11065728c99dd9636b736733e2c6544f0", "html_url": "https://github.com/rust-lang/rust/commit/aefc5ec11065728c99dd9636b736733e2c6544f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aefc5ec11065728c99dd9636b736733e2c6544f0/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d2bccf7515710b38edb45fe359e84d4a617a402", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2bccf7515710b38edb45fe359e84d4a617a402", "html_url": "https://github.com/rust-lang/rust/commit/2d2bccf7515710b38edb45fe359e84d4a617a402"}], "stats": {"total": 287, "additions": 78, "deletions": 209}, "files": [{"sha": "de09f9626a514e1941b83c569fe3bfe421f4901e", "filename": "Cargo.lock", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/aefc5ec11065728c99dd9636b736733e2c6544f0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/aefc5ec11065728c99dd9636b736733e2c6544f0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=aefc5ec11065728c99dd9636b736733e2c6544f0", "patch": "@@ -2003,9 +2003,15 @@ dependencies = [\n \n [[package]]\n name = \"http-auth\"\n+<<<<<<< HEAD\n version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"5430cacd7a1f9a02fbeb350dfc81a0e5ed42d81f3398cb0ba184017f85bdcfbc\"\n+=======\n+version = \"0.1.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c0b40b39d66c28829a0cf4d09f7e139ff8201f7500a5083732848ed3b4b4d850\"\n+>>>>>>> 570ad623189 (remove cfgs)\n dependencies = [\n  \"memchr\",\n ]\n@@ -6271,6 +6277,7 @@ checksum = \"8c9864e83243fdec7fc9c5444389dcbbfd258f745e7853198f365e3c4968a608\"\n \n [[package]]\n name = \"windows_aarch64_msvc\"\n+<<<<<<< HEAD\n version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4c8b1b673ffc16c47a9ff48570a9d85e25d265735c503681332589af6253c6c7\"\n@@ -6292,6 +6299,29 @@ name = \"windows_x86_64_gnu\"\n version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"c1040f221285e17ebccbc2591ffdc2d44ee1f9186324dd3e84e99ac68d699c45\"\n+=======\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"dd0f252f5a35cac83d6311b2e795981f5ee6e67eb1f9a7f64eb4500fbc4dcdb4\"\n+\n+[[package]]\n+name = \"windows_i686_gnu\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fbeae19f6716841636c28d695375df17562ca208b2b7d0dc47635a50ae6c5de7\"\n+\n+[[package]]\n+name = \"windows_i686_msvc\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"84c12f65daa39dd2babe6e442988fc329d6243fdce47d7d2d155b8d874862246\"\n+\n+[[package]]\n+name = \"windows_x86_64_gnu\"\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bf7b1b21b5362cbc318f686150e5bcea75ecedc74dd157d874d754a2ca44b0ed\"\n+>>>>>>> 570ad623189 (remove cfgs)\n \n [[package]]\n name = \"windows_x86_64_gnullvm\"\n@@ -6301,9 +6331,15 @@ checksum = \"628bfdf232daa22b0d64fdb62b09fcc36bb01f05a3939e20ab73aaf9470d0463\"\n \n [[package]]\n name = \"windows_x86_64_msvc\"\n+<<<<<<< HEAD\n version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"447660ad36a13288b1db4d4248e857b510e8c3a225c822ba4fb748c0aafecffd\"\n+=======\n+version = \"0.42.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f40009d85759725a34da6d89a94e63d7bdc50a862acf0dbc7c8e488f1edcb6f5\"\n+>>>>>>> 570ad623189 (remove cfgs)\n \n [[package]]\n name = \"writeable\""}, {"sha": "bc0b0d30f819ca950daaad96aa03e3a9d7ecd9de", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=aefc5ec11065728c99dd9636b736733e2c6544f0", "patch": "@@ -97,7 +97,6 @@ use nll::{PoloniusOutput, ToRegionVid};\n use place_ext::PlaceExt;\n use places_conflict::{places_conflict, PlaceConflictBias};\n use region_infer::RegionInferenceContext;\n-#[cfg(debug_assertions)]\n use renumber::RegionCtxt;\n \n // FIXME(eddyb) perhaps move this somewhere more centrally.\n@@ -488,28 +487,14 @@ pub struct BodyWithBorrowckFacts<'tcx> {\n \n pub struct BorrowckInferCtxt<'cx, 'tcx> {\n     pub(crate) infcx: &'cx InferCtxt<'tcx>,\n-\n-    #[cfg(debug_assertions)]\n     pub(crate) reg_var_to_origin: RefCell<FxHashMap<ty::RegionVid, RegionCtxt>>,\n }\n \n impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n-    #[cfg(not(debug_assertions))]\n-    pub(crate) fn new(infcx: &'cx InferCtxt<'tcx>) -> Self {\n-        BorrowckInferCtxt { infcx }\n-    }\n-\n-    #[cfg(debug_assertions)]\n     pub(crate) fn new(infcx: &'cx InferCtxt<'tcx>) -> Self {\n         BorrowckInferCtxt { infcx, reg_var_to_origin: RefCell::new(Default::default()) }\n     }\n \n-    #[cfg(not(debug_assertions))]\n-    pub(crate) fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {\n-        self.infcx.next_region_var(origin)\n-    }\n-\n-    #[cfg(debug_assertions)]\n     pub(crate) fn next_region_var(\n         &self,\n         origin: RegionVariableOrigin,\n@@ -533,12 +518,6 @@ impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n         next_region\n     }\n \n-    #[cfg(not(debug_assertions))]\n-    pub(crate) fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {\n-        self.infcx.next_nll_region_var(origin)\n-    }\n-\n-    #[cfg(debug_assertions)]\n     #[instrument(skip(self), level = \"debug\")]\n     pub(crate) fn next_nll_region_var(\n         &self,"}, {"sha": "79a72d46353b31cf3df4c641cf01afb0356a9747", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=aefc5ec11065728c99dd9636b736733e2c6544f0", "patch": "@@ -244,7 +244,6 @@ pub enum ExtraConstraintInfo {\n     PlaceholderFromPredicate(Span),\n }\n \n-#[cfg(debug_assertions)]\n #[instrument(skip(infcx, sccs), level = \"debug\")]\n fn sccs_info<'cx, 'tcx>(\n     infcx: &'cx BorrowckInferCtxt<'cx, 'tcx>,\n@@ -278,7 +277,7 @@ fn sccs_info<'cx, 'tcx>(\n         .map(|(scc_idx, region_ctxts)| {\n             let repr = region_ctxts\n                 .into_iter()\n-                .max_by(|x, y| x._preference_value().cmp(&y._preference_value()))\n+                .max_by(|x, y| x.preference_value().cmp(&y.preference_value()))\n                 .unwrap();\n \n             (ConstraintSccIndex::from_usize(scc_idx), repr)\n@@ -334,10 +333,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let fr_static = universal_regions.fr_static;\n         let constraint_sccs = Rc::new(constraints.compute_sccs(&constraint_graph, fr_static));\n \n-        #[cfg(debug_assertions)]\n-        {\n-            sccs_info(_infcx, constraint_sccs.clone());\n-        }\n+        sccs_info(_infcx, constraint_sccs.clone());\n \n         let mut scc_values =\n             RegionValues::new(elements, universal_regions.len(), &placeholder_indices);"}, {"sha": "89b9fd18ac24dd12d03b249fa2bbcb2a25f2795e", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 1, "deletions": 66, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=aefc5ec11065728c99dd9636b736733e2c6544f0", "patch": "@@ -8,7 +8,6 @@ use rustc_middle::mir::Constant;\n use rustc_middle::mir::{Body, Location, Promoted};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n-#[cfg(debug_assertions)]\n use rustc_span::{Span, Symbol};\n \n /// Replaces all free regions appearing in the MIR with fresh\n@@ -32,21 +31,6 @@ pub fn renumber_mir<'tcx>(\n \n /// Replaces all regions appearing in `value` with fresh inference\n /// variables.\n-#[cfg(not(debug_assertions))]\n-#[instrument(skip(infcx), level = \"debug\")]\n-pub(crate) fn renumber_regions<'tcx, T>(infcx: &BorrowckInferCtxt<'_, 'tcx>, value: T) -> T\n-where\n-    T: TypeFoldable<'tcx>,\n-{\n-    infcx.tcx.fold_regions(value, |_region, _depth| {\n-        let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n-        infcx.next_nll_region_var(origin)\n-    })\n-}\n-\n-/// Replaces all regions appearing in `value` with fresh inference\n-/// variables.\n-#[cfg(debug_assertions)]\n #[instrument(skip(infcx), level = \"debug\")]\n pub(crate) fn renumber_regions<'tcx, T>(\n     infcx: &BorrowckInferCtxt<'_, 'tcx>,\n@@ -62,14 +46,12 @@ where\n     })\n }\n \n-#[cfg(debug_assertions)]\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n pub(crate) enum BoundRegionInfo {\n     Name(Symbol),\n     Span(Span),\n }\n \n-#[cfg(debug_assertions)]\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n pub(crate) enum RegionCtxt {\n     Location(Location),\n@@ -82,12 +64,11 @@ pub(crate) enum RegionCtxt {\n     Unknown,\n }\n \n-#[cfg(debug_assertions)]\n impl RegionCtxt {\n     /// Used to determine the representative of a component in the strongly connected\n     /// constraint graph\n     /// FIXME: don't use underscore here. Got a 'not used' error for some reason\n-    pub(crate) fn _preference_value(self) -> usize {\n+    pub(crate) fn preference_value(self) -> usize {\n         let _anon = Symbol::intern(\"anon\");\n \n         match self {\n@@ -106,70 +87,33 @@ struct NllVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> NllVisitor<'a, 'tcx> {\n-    #[cfg(debug_assertions)]\n     fn renumber_regions<T>(&mut self, value: T, ctxt: RegionCtxt) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n         renumber_regions(self.infcx, value, ctxt)\n     }\n-\n-    #[cfg(not(debug_assertions))]\n-    fn renumber_regions<T>(&mut self, value: T) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        renumber_regions(self.infcx, value)\n-    }\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n-    #[cfg(not(debug_assertions))]\n-    #[instrument(skip(self), level = \"debug\")]\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _ty_context: TyContext) {\n-        *ty = self.renumber_regions(*ty);\n-\n-        debug!(?ty);\n-    }\n-\n-    #[cfg(debug_assertions)]\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _ty_context: TyContext) {\n         *ty = self.renumber_regions(*ty, RegionCtxt::TyContext(_ty_context));\n \n         debug!(?ty);\n     }\n \n-    #[cfg(not(debug_assertions))]\n-    #[instrument(skip(self), level = \"debug\")]\n-    fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {\n-        *substs = self.renumber_regions(*substs);\n-\n-        debug!(?substs);\n-    }\n-\n-    #[cfg(debug_assertions)]\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {\n         *substs = self.renumber_regions(*substs, RegionCtxt::Location(location));\n \n         debug!(?substs);\n     }\n \n-    #[cfg(not(debug_assertions))]\n-    #[instrument(skip(self), level = \"debug\")]\n-    fn visit_region(&mut self, region: &mut ty::Region<'tcx>, location: Location) {\n-        let old_region = *region;\n-        *region = self.renumber_regions(old_region);\n-\n-        debug!(?region);\n-    }\n-\n-    #[cfg(debug_assertions)]\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_region(&mut self, region: &mut ty::Region<'tcx>, location: Location) {\n         let old_region = *region;\n@@ -178,15 +122,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n         debug!(?region);\n     }\n \n-    #[cfg(not(debug_assertions))]\n-    #[instrument(skip(self), level = \"debug\")]\n-    fn visit_constant(&mut self, constant: &mut Constant<'tcx>, _location: Location) {\n-        let literal = constant.literal;\n-        constant.literal = self.renumber_regions(literal);\n-        debug!(\"constant: {:#?}\", constant);\n-    }\n-\n-    #[cfg(debug_assertions)]\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, _location: Location) {\n         let literal = constant.literal;"}, {"sha": "e7f22fc79a7c34f4f303395c66986695a76bb573", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=aefc5ec11065728c99dd9636b736733e2c6544f0", "patch": "@@ -1335,43 +1335,27 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     }\n                 };\n                 let (sig, map) = tcx.replace_late_bound_regions(sig, |br| {\n-                    #[cfg(not(debug_assertions))]\n-                    {\n-                        self.infcx.next_region_var(LateBoundRegion(\n+                    use crate::renumber::{BoundRegionInfo, RegionCtxt};\n+                    use rustc_span::Symbol;\n+\n+                    let reg_info = match br.kind {\n+                        // FIXME Probably better to use the `Span` here\n+                        ty::BoundRegionKind::BrAnon(_, Some(span)) => BoundRegionInfo::Span(span),\n+                        ty::BoundRegionKind::BrAnon(..) => {\n+                            BoundRegionInfo::Name(Symbol::intern(\"anon\"))\n+                        }\n+                        ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n+                        ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(Symbol::intern(\"env\")),\n+                    };\n+\n+                    self.infcx.next_region_var(\n+                        LateBoundRegion(\n                             term.source_info.span,\n                             br.kind,\n                             LateBoundRegionConversionTime::FnCall,\n-                        ))\n-                    }\n-\n-                    #[cfg(debug_assertions)]\n-                    {\n-                        use crate::renumber::{BoundRegionInfo, RegionCtxt};\n-                        use rustc_span::Symbol;\n-\n-                        let reg_info = match br.kind {\n-                            // FIXME Probably better to use the `Span` here\n-                            ty::BoundRegionKind::BrAnon(_, Some(span)) => {\n-                                BoundRegionInfo::Span(span)\n-                            }\n-                            ty::BoundRegionKind::BrAnon(..) => {\n-                                BoundRegionInfo::Name(Symbol::intern(\"anon\"))\n-                            }\n-                            ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n-                            ty::BoundRegionKind::BrEnv => {\n-                                BoundRegionInfo::Name(Symbol::intern(\"env\"))\n-                            }\n-                        };\n-\n-                        self.infcx.next_region_var(\n-                            LateBoundRegion(\n-                                term.source_info.span,\n-                                br.kind,\n-                                LateBoundRegionConversionTime::FnCall,\n-                            ),\n-                            RegionCtxt::LateBound(reg_info),\n-                        )\n-                    }\n+                        ),\n+                        RegionCtxt::LateBound(reg_info),\n+                    )\n                 });\n                 debug!(?sig);\n                 // IMPORTANT: We have to prove well formed for the function signature before"}, {"sha": "0b7858ec04dab3a92e1f6517b3008a586759f08f", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=aefc5ec11065728c99dd9636b736733e2c6544f0", "patch": "@@ -9,7 +9,6 @@ use rustc_trait_selection::traits::query::Fallible;\n \n use crate::constraints::OutlivesConstraint;\n use crate::diagnostics::UniverseInfo;\n-#[cfg(debug_assertions)]\n use crate::renumber::{BoundRegionInfo, RegionCtxt};\n use crate::type_check::{InstantiateOpaqueType, Locations, TypeChecker};\n \n@@ -110,10 +109,6 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n     ) -> ty::Region<'tcx> {\n         let origin = NllRegionVariableOrigin::Existential { from_forall };\n \n-        #[cfg(not(debug_assertions))]\n-        let reg_var = self.type_checker.infcx.next_nll_region_var(origin);\n-\n-        #[cfg(debug_assertions)]\n         let reg_var =\n             self.type_checker.infcx.next_nll_region_var(origin, RegionCtxt::Existential(_name));\n \n@@ -128,23 +123,19 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             .constraints\n             .placeholder_region(self.type_checker.infcx, placeholder);\n \n-        #[cfg(debug_assertions)]\n-        {\n-            let reg_info = match placeholder.name {\n-                // FIXME Probably better to use the `Span` here\n-                ty::BoundRegionKind::BrAnon(_, Some(span)) => BoundRegionInfo::Span(span),\n-                ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(Symbol::intern(\"anon\")),\n-                ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n-                ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(Symbol::intern(\"env\")),\n-            };\n-\n-            let reg_var = reg\n-                .try_get_var()\n-                .unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n-            let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n-            let prev = var_to_origin.insert(reg_var, RegionCtxt::Placeholder(reg_info));\n-            assert!(matches!(prev, None));\n-        }\n+        let reg_info = match placeholder.name {\n+            ty::BoundRegionKind::BrAnon(_, Some(span)) => BoundRegionInfo::Span(span),\n+            ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(Symbol::intern(\"anon\")),\n+            ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n+            ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(Symbol::intern(\"env\")),\n+        };\n+\n+        let reg_var = reg\n+            .try_get_var()\n+            .unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n+        let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n+        let prev = var_to_origin.insert(reg_var, RegionCtxt::Placeholder(reg_info));\n+        assert!(matches!(prev, None));\n \n         reg\n     }\n@@ -156,15 +147,12 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n             universe,\n         );\n \n-        #[cfg(debug_assertions)]\n-        {\n-            let reg_var = reg\n-                .try_get_var()\n-                .unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n-            let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n-            let prev = var_to_origin.insert(reg_var, RegionCtxt::Existential(None));\n-            assert!(matches!(prev, None));\n-        }\n+        let reg_var = reg\n+            .try_get_var()\n+            .unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n+        let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n+        let prev = var_to_origin.insert(reg_var, RegionCtxt::Existential(None));\n+        assert!(matches!(prev, None));\n \n         reg\n     }"}, {"sha": "242995a6a294f0ad8eaa485ee5a6cfa4d70cfff4", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 51, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefc5ec11065728c99dd9636b736733e2c6544f0/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=aefc5ec11065728c99dd9636b736733e2c6544f0", "patch": "@@ -26,12 +26,10 @@ use rustc_middle::ty::{\n     self, DefIdTree, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt,\n };\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n-#[cfg(debug_assertions)]\n use rustc_span::Symbol;\n use std::iter;\n \n use crate::nll::ToRegionVid;\n-#[cfg(debug_assertions)]\n use crate::renumber::{BoundRegionInfo, RegionCtxt};\n use crate::BorrowckInferCtxt;\n \n@@ -408,9 +406,6 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         assert_eq!(FIRST_GLOBAL_INDEX, self.infcx.num_region_vars());\n \n         // Create the \"global\" region that is always free in all contexts: 'static.\n-        #[cfg(not(debug_assertions))]\n-        let fr_static = self.infcx.next_nll_region_var(FR).to_region_vid();\n-        #[cfg(debug_assertions)]\n         let fr_static = self\n             .infcx\n             .next_nll_region_var(FR, RegionCtxt::Free(Symbol::intern(\"static\")))\n@@ -446,10 +441,6 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 |r| {\n                     debug!(?r);\n                     if !indices.indices.contains_key(&r) {\n-                        #[cfg(not(debug_assertions))]\n-                        let region_vid = self.infcx.next_nll_region_var(FR);\n-\n-                        #[cfg(debug_assertions)]\n                         let region_vid = {\n                             let name = match r.get_name() {\n                                 Some(name) => name,\n@@ -489,10 +480,6 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         for_each_late_bound_region_in_item(self.infcx.tcx, self.mir_def.did, |r| {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n-                #[cfg(not(debug_assertions))]\n-                let region_vid = self.infcx.next_nll_region_var(FR);\n-\n-                #[cfg(debug_assertions)]\n                 let region_vid = {\n                     let name = match r.get_name() {\n                         Some(name) => name,\n@@ -521,7 +508,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 );\n                 let reg_vid = self.infcx.next_nll_region_var(FR, RegionCtxt::Free(Symbol::intern(\"c-variadic\")).to_region_vid();\n                 let region =\n-                    self.infcx.tcx.mk_re_var(self.infcx.next_nll_region_var(FR).to_region_vid());\n+                    self.infcx.tcx.mk_re_var(reg_vid);\n                 let va_list_ty =\n                     self.infcx.tcx.type_of(va_list_did).subst(self.infcx.tcx, &[region.into()]);\n \n@@ -531,9 +518,6 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             }\n         }\n \n-        #[cfg(not(debug_assertions))]\n-        let fr_fn_body = self.infcx.next_nll_region_var(FR).to_region_vid();\n-        #[cfg(debug_assertions)]\n         let fr_fn_body = self\n             .infcx\n             .next_nll_region_var(FR, RegionCtxt::Free(Symbol::intern(\"fn_body\")))\n@@ -766,19 +750,6 @@ trait InferCtxtExt<'tcx> {\n }\n \n impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n-    #[cfg(not(debug_assertions))]\n-    fn replace_free_regions_with_nll_infer_vars<T>(\n-        &self,\n-        origin: NllRegionVariableOrigin,\n-        value: T,\n-    ) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        self.tcx.fold_regions(value, |_region, _depth| self.infcx.next_nll_region_var(origin))\n-    }\n-\n-    #[cfg(debug_assertions)]\n     #[instrument(skip(self), level = \"debug\")]\n     fn replace_free_regions_with_nll_infer_vars<T>(\n         &self,\n@@ -815,19 +786,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n         let (value, _map) = self.tcx.replace_late_bound_regions(value, |br| {\n             debug!(?br);\n             let liberated_region = self.tcx.mk_re_free(all_outlive_scope.to_def_id(), br.kind);\n-            #[cfg(not(debug_assertions))]\n-            let region_vid = self.next_nll_region_var(origin);\n-\n-            #[cfg(debug_assertions)]\n-            let region_vid = {\n-                let name = match br.kind.get_name() {\n-                    Some(name) => name,\n-                    _ => Symbol::intern(\"anon\"),\n-                };\n-\n-                self.next_nll_region_var(origin, RegionCtxt::Bound(BoundRegionInfo::Name(name)))\n-            };\n-\n+            let region_vid = self.next_nll_region_var(origin, RegionCtxt::Bound(BoundRegionInfo::Name(name)));\n             indices.insert_late_bound_region(liberated_region, region_vid.to_region_vid());\n             debug!(?liberated_region, ?region_vid);\n             region_vid\n@@ -853,10 +812,6 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n         for_each_late_bound_region_in_recursive_scope(self.tcx, mir_def_id, |r| {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n-                #[cfg(not(debug_assertions))]\n-                let region_vid = self.next_nll_region_var(FR);\n-\n-                #[cfg(debug_assertions)]\n                 let region_vid = {\n                     let name = match r.get_name() {\n                         Some(name) => name,\n@@ -881,10 +836,6 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n         for_each_late_bound_region_in_item(self.tcx, mir_def_id, |r| {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n-                #[cfg(not(debug_assertions))]\n-                let region_vid = self.next_nll_region_var(FR);\n-\n-                #[cfg(debug_assertions)]\n                 let region_vid = {\n                     let name = match r.get_name() {\n                         Some(name) => name,"}]}