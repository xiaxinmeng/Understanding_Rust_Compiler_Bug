{"sha": "c9279c845d58db9b78e41d07de8436ab22839679", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5Mjc5Yzg0NWQ1OGRiOWI3OGU0MWQwN2RlODQzNmFiMjI4Mzk2Nzk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-28T00:21:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-28T00:21:31Z"}, "message": "Rollup merge of #78401 - davidtwco:issue-75906-tuple-construct-private-field, r=estebank\n\nresolve: private fields in tuple struct ctor diag\n\nFixes #75906.\n\nThis PR improves the diagnostic emitted when a tuple struct is being constructed which has private fields so that private fields are labelled and the message is improved.\n\nr? @estebank", "tree": {"sha": "892f1c32cfc821790db78c4457573816491776f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/892f1c32cfc821790db78c4457573816491776f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9279c845d58db9b78e41d07de8436ab22839679", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmLmMCRBK7hj4Ov3rIwAAdHIIAFBU/CsL9+U5ZEWVKyB80lf2\ny1XV0LEKjBTv5rw8tjjKNItDL6/dQwLDi/+D+4UBs13rjtoGKYyvQTELizTDaRb+\n5dGdIwihrir8nsD/WnPnNw4QihtzLqCbN31iPqWN966nR4m4dtWJl8DACDbbMhd8\nc3ATCJDix8BHSJz5ZhPogXR0ZhgGkTCrOUy6V5oobBJZKukNIC06q6hQwaa8Eq8i\nQZ0+z1OSGpszaZsRPoQuSdjAF1+P5ZExAm7AsXFhunlUM/b3xVoziQ/du06U1jfv\nAzasHtk+Cdj8tMJT1T9uRZVKcbsNxGlrKK0W6TS41rRDzp2t+ql+60znNTeXAio=\n=ZKsM\n-----END PGP SIGNATURE-----\n", "payload": "tree 892f1c32cfc821790db78c4457573816491776f6\nparent c3f842baee8c480faa1e6ca0741d131a0663a92d\nparent 27bb27f71c2e99ef23c6dc70c3f43998b0c69486\nauthor Dylan DPC <dylan.dpc@gmail.com> 1603844491 +0100\ncommitter GitHub <noreply@github.com> 1603844491 +0100\n\nRollup merge of #78401 - davidtwco:issue-75906-tuple-construct-private-field, r=estebank\n\nresolve: private fields in tuple struct ctor diag\n\nFixes #75906.\n\nThis PR improves the diagnostic emitted when a tuple struct is being constructed which has private fields so that private fields are labelled and the message is improved.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9279c845d58db9b78e41d07de8436ab22839679", "html_url": "https://github.com/rust-lang/rust/commit/c9279c845d58db9b78e41d07de8436ab22839679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9279c845d58db9b78e41d07de8436ab22839679/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3f842baee8c480faa1e6ca0741d131a0663a92d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f842baee8c480faa1e6ca0741d131a0663a92d", "html_url": "https://github.com/rust-lang/rust/commit/c3f842baee8c480faa1e6ca0741d131a0663a92d"}, {"sha": "27bb27f71c2e99ef23c6dc70c3f43998b0c69486", "url": "https://api.github.com/repos/rust-lang/rust/commits/27bb27f71c2e99ef23c6dc70c3f43998b0c69486", "html_url": "https://github.com/rust-lang/rust/commit/27bb27f71c2e99ef23c6dc70c3f43998b0c69486"}], "stats": {"total": 165, "additions": 108, "deletions": 57}, "files": [{"sha": "cafceff4f29ed513a8c11f23d9fa0ab745ed4e0b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 61, "deletions": 44, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -917,54 +917,71 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 self.suggest_using_enum_variant(err, source, def_id, span);\n             }\n             (Res::Def(DefKind::Struct, def_id), _) if ns == ValueNS => {\n-                if let Some((ctor_def, ctor_vis, fields)) =\n-                    self.r.struct_constructors.get(&def_id).cloned()\n+                let (ctor_def, ctor_vis, fields) =\n+                    if let Some(struct_ctor) = self.r.struct_constructors.get(&def_id).cloned() {\n+                        struct_ctor\n+                    } else {\n+                        bad_struct_syntax_suggestion(def_id);\n+                        return true;\n+                    };\n+\n+                let is_accessible = self.r.is_accessible_from(ctor_vis, self.parent_scope.module);\n+                if !is_expected(ctor_def) || is_accessible {\n+                    return true;\n+                }\n+\n+                let field_spans = match source {\n+                    // e.g. `if let Enum::TupleVariant(field1, field2) = _`\n+                    PathSource::TupleStruct(_, pattern_spans) => {\n+                        err.set_primary_message(\n+                            \"cannot match against a tuple struct which contains private fields\",\n+                        );\n+\n+                        // Use spans of the tuple struct pattern.\n+                        Some(Vec::from(pattern_spans))\n+                    }\n+                    // e.g. `let _ = Enum::TupleVariant(field1, field2);`\n+                    _ if source.is_call() => {\n+                        err.set_primary_message(\n+                            \"cannot initialize a tuple struct which contains private fields\",\n+                        );\n+\n+                        // Use spans of the tuple struct definition.\n+                        self.r\n+                            .field_names\n+                            .get(&def_id)\n+                            .map(|fields| fields.iter().map(|f| f.span).collect::<Vec<_>>())\n+                    }\n+                    _ => None,\n+                };\n+\n+                if let Some(spans) =\n+                    field_spans.filter(|spans| spans.len() > 0 && fields.len() == spans.len())\n                 {\n-                    let accessible_ctor =\n-                        self.r.is_accessible_from(ctor_vis, self.parent_scope.module);\n-                    if is_expected(ctor_def) && !accessible_ctor {\n-                        let mut better_diag = false;\n-                        if let PathSource::TupleStruct(_, pattern_spans) = source {\n-                            if pattern_spans.len() > 0 && fields.len() == pattern_spans.len() {\n-                                let non_visible_spans: Vec<Span> = fields\n-                                    .iter()\n-                                    .zip(pattern_spans.iter())\n-                                    .filter_map(|(vis, span)| {\n-                                        match self\n-                                            .r\n-                                            .is_accessible_from(*vis, self.parent_scope.module)\n-                                        {\n-                                            true => None,\n-                                            false => Some(*span),\n-                                        }\n-                                    })\n-                                    .collect();\n-                                // Extra check to be sure\n-                                if non_visible_spans.len() > 0 {\n-                                    let mut m: rustc_span::MultiSpan =\n-                                        non_visible_spans.clone().into();\n-                                    non_visible_spans.into_iter().for_each(|s| {\n-                                        m.push_span_label(s, \"private field\".to_string())\n-                                    });\n-                                    err.span_note(\n-                                        m,\n-                                        \"constructor is not visible here due to private fields\",\n-                                    );\n-                                    better_diag = true;\n-                                }\n-                            }\n-                        }\n+                    let non_visible_spans: Vec<Span> = fields\n+                        .iter()\n+                        .zip(spans.iter())\n+                        .filter(|(vis, _)| {\n+                            !self.r.is_accessible_from(**vis, self.parent_scope.module)\n+                        })\n+                        .map(|(_, span)| *span)\n+                        .collect();\n \n-                        if !better_diag {\n-                            err.span_label(\n-                                span,\n-                                \"constructor is not visible here due to private fields\".to_string(),\n-                            );\n-                        }\n+                    if non_visible_spans.len() > 0 {\n+                        let mut m: rustc_span::MultiSpan = non_visible_spans.clone().into();\n+                        non_visible_spans\n+                            .into_iter()\n+                            .for_each(|s| m.push_span_label(s, \"private field\".to_string()));\n+                        err.span_note(m, \"constructor is not visible here due to private fields\");\n                     }\n-                } else {\n-                    bad_struct_syntax_suggestion(def_id);\n+\n+                    return true;\n                 }\n+\n+                err.span_label(\n+                    span,\n+                    \"constructor is not visible here due to private fields\".to_string(),\n+                );\n             }\n             (\n                 Res::Def("}, {"sha": "96bd93af5140526ae44c6b6feaad63311397f37b", "filename": "src/test/ui/issues/issue-38412.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-38412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-38412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38412.rs?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let Box(a) = loop { };\n-    //~^ ERROR expected tuple struct or tuple variant, found struct `Box`\n+    //~^ ERROR cannot match against a tuple struct which contains private fields\n \n     // (The below is a trick to allow compiler to infer a type for\n     // variable `a` without attempting to ascribe a type to the"}, {"sha": "610696f84d5f07934451a44013d07e32710d400b", "filename": "src/test/ui/issues/issue-38412.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38412.stderr?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -1,4 +1,4 @@\n-error[E0532]: expected tuple struct or tuple variant, found struct `Box`\n+error[E0532]: cannot match against a tuple struct which contains private fields\n   --> $DIR/issue-38412.rs:2:9\n    |\n LL |     let Box(a) = loop { };"}, {"sha": "a4404857a56af3dce60446293e32d6d5cae919f3", "filename": "src/test/ui/issues/issue-42944.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42944.rs?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -7,7 +7,7 @@ mod bar {\n \n     fn foo() {\n         Bx(());\n-        //~^ ERROR expected function, tuple struct or tuple variant, found struct `Bx` [E0423]\n+        //~^ ERROR cannot initialize a tuple struct which contains private fields [E0423]\n     }\n }\n "}, {"sha": "008492529d18c9de7d6ce66ba46542402b287955", "filename": "src/test/ui/issues/issue-42944.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42944.stderr?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -1,8 +1,14 @@\n-error[E0423]: expected function, tuple struct or tuple variant, found struct `Bx`\n+error[E0423]: cannot initialize a tuple struct which contains private fields\n   --> $DIR/issue-42944.rs:9:9\n    |\n LL |         Bx(());\n-   |         ^^ constructor is not visible here due to private fields\n+   |         ^^\n+   |\n+note: constructor is not visible here due to private fields\n+  --> $DIR/issue-42944.rs:2:19\n+   |\n+LL |     pub struct Bx(());\n+   |                   ^^ private field\n \n error[E0425]: cannot find function, tuple struct or tuple variant `Bx` in this scope\n   --> $DIR/issue-42944.rs:16:9"}, {"sha": "710039d79e77b2cd741664fdecb5f305e1443c41", "filename": "src/test/ui/issues/issue-75906.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75906.rs?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -0,0 +1,13 @@\n+mod m {\n+    pub struct Foo { x: u8 }\n+\n+    pub struct Bar(u8);\n+}\n+\n+use m::{Foo, Bar};\n+\n+fn main() {\n+    let x = Foo { x: 12 };\n+    let y = Bar(12);\n+    //~^ ERROR cannot initialize a tuple struct which contains private fields [E0423]\n+}"}, {"sha": "4c6a68646adc8b79f88d589220e2e9175acbacb5", "filename": "src/test/ui/issues/issue-75906.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75906.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75906.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75906.stderr?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -0,0 +1,15 @@\n+error[E0423]: cannot initialize a tuple struct which contains private fields\n+  --> $DIR/issue-75906.rs:11:13\n+   |\n+LL |     let y = Bar(12);\n+   |             ^^^\n+   |\n+note: constructor is not visible here due to private fields\n+  --> $DIR/issue-75906.rs:4:20\n+   |\n+LL |     pub struct Bar(u8);\n+   |                    ^^ private field\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0423`."}, {"sha": "1534b6d07deb004e84794e632f3e68ef3cde3c39", "filename": "src/test/ui/issues/issue-75907.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907.rs?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -13,6 +13,6 @@ use foo::{make_bar, Bar, Foo};\n \n fn main() {\n     let Bar(x, y, Foo(z)) = make_bar();\n-    //~^ ERROR expected tuple struct\n-    //~| ERROR expected tuple struct\n+    //~^ ERROR cannot match against a tuple struct which contains private fields\n+    //~| ERROR cannot match against a tuple struct which contains private fields\n }"}, {"sha": "2f89e31a31a1ef3966db23914db5b389d1a004c0", "filename": "src/test/ui/issues/issue-75907.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907.stderr?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -1,4 +1,4 @@\n-error[E0532]: expected tuple struct or tuple variant, found struct `Bar`\n+error[E0532]: cannot match against a tuple struct which contains private fields\n   --> $DIR/issue-75907.rs:15:9\n    |\n LL |     let Bar(x, y, Foo(z)) = make_bar();\n@@ -12,7 +12,7 @@ LL |     let Bar(x, y, Foo(z)) = make_bar();\n    |                |\n    |                private field\n \n-error[E0532]: expected tuple struct or tuple variant, found struct `Foo`\n+error[E0532]: cannot match against a tuple struct which contains private fields\n   --> $DIR/issue-75907.rs:15:19\n    |\n LL |     let Bar(x, y, Foo(z)) = make_bar();"}, {"sha": "a775845279eb8c5d90ed89d661d398b0b099c561", "filename": "src/test/ui/issues/issue-75907_b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.rs?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -7,5 +7,5 @@ use a::{make_bar, Bar};\n \n fn main() {\n     let Bar(x, y, z) = make_bar();\n-    //~^ ERROR expected tuple struct\n+    //~^ ERROR cannot match against a tuple struct which contains private fields\n }"}, {"sha": "8884484e18d8152c937004677e64d5f4c39bee56", "filename": "src/test/ui/issues/issue-75907_b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75907_b.stderr?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -1,4 +1,4 @@\n-error[E0532]: expected tuple struct or tuple variant, found struct `Bar`\n+error[E0532]: cannot match against a tuple struct which contains private fields\n   --> $DIR/issue-75907_b.rs:9:9\n    |\n LL |     let Bar(x, y, z) = make_bar();"}, {"sha": "07e093c152d6b153fdbf697797836c2852ddad9d", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -18,7 +18,7 @@ fn main() {\n     //~^ ERROR `..` required with struct marked as non-exhaustive\n \n     let ts = TupleStruct(640, 480);\n-    //~^ ERROR expected function, tuple struct or tuple variant, found struct `TupleStruct` [E0423]\n+    //~^ ERROR cannot initialize a tuple struct which contains private fields [E0423]\n \n     let ts_explicit = structs::TupleStruct(640, 480);\n     //~^ ERROR tuple struct constructor `TupleStruct` is private [E0603]"}, {"sha": "e2ee8d6a6fe5e0b35d347f8974bbf5febb5757e2", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9279c845d58db9b78e41d07de8436ab22839679/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=c9279c845d58db9b78e41d07de8436ab22839679", "patch": "@@ -1,4 +1,4 @@\n-error[E0423]: expected function, tuple struct or tuple variant, found struct `TupleStruct`\n+error[E0423]: cannot initialize a tuple struct which contains private fields\n   --> $DIR/struct.rs:20:14\n    |\n LL |     let ts = TupleStruct(640, 480);"}]}