{"sha": "d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMTYzZDMzMTFmMGFmZTdiOGRjM2I3MGRiYThhYTMyZjMxODIyNWM=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-03T02:26:00Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-06T02:21:14Z"}, "message": "Pass the #[plugin(...)] meta item to the registrar", "tree": {"sha": "f1df9638e6658cd81536548ec99158e76838c4ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1df9638e6658cd81536548ec99158e76838c4ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "html_url": "https://github.com/rust-lang/rust/commit/d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "416137eb3186c05b7a601e94cde354e9b3ec0a78", "url": "https://api.github.com/repos/rust-lang/rust/commits/416137eb3186c05b7a601e94cde354e9b3ec0a78", "html_url": "https://github.com/rust-lang/rust/commit/416137eb3186c05b7a601e94cde354e9b3ec0a78"}], "stats": {"total": 205, "additions": 195, "deletions": 10}, "files": [{"sha": "64a5a02b34b47777a7463446a8ed8676e33ebd22", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "patch": "@@ -21,6 +21,7 @@ use std::collections::HashSet;\n use syntax::ast;\n use syntax::attr;\n use syntax::parse::token;\n+use syntax::ptr::P;\n use syntax::visit;\n use syntax::visit::Visitor;\n use syntax::attr::AttrMetaMethods;\n@@ -29,12 +30,17 @@ use syntax::attr::AttrMetaMethods;\n pub type PluginRegistrarFun =\n     fn(&mut Registry);\n \n+pub struct PluginRegistrar {\n+    pub fun: PluginRegistrarFun,\n+    pub args: P<ast::MetaItem>,\n+}\n+\n /// Information about loaded plugins.\n pub struct Plugins {\n     /// Imported macros.\n     pub macros: Vec<ast::MacroDef>,\n     /// Registrars, as function pointers.\n-    pub registrars: Vec<PluginRegistrarFun>,\n+    pub registrars: Vec<PluginRegistrar>,\n }\n \n struct PluginLoader<'a> {\n@@ -87,7 +93,7 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n         }\n \n         // Parse the attributes relating to macro / plugin loading.\n-        let mut load_registrar = false;\n+        let mut plugin_attr = None;\n         let mut macro_selection = Some(HashSet::new());  // None => load all\n         let mut reexport = HashSet::new();\n         for attr in vi.attrs.iter() {\n@@ -97,7 +103,12 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n                     self.sess.span_err(attr.span, \"#[phase] is deprecated; use \\\n                                        #[macro_use], #[plugin], and/or #[no_link]\");\n                 }\n-                \"plugin\" => load_registrar = true,\n+                \"plugin\" => {\n+                    if plugin_attr.is_some() {\n+                        self.sess.span_err(attr.span, \"#[plugin] specified multiple times\");\n+                    }\n+                    plugin_attr = Some(attr.node.value.clone());\n+                }\n                 \"macro_use\" => {\n                     let names = attr.meta_item_list();\n                     if names.is_none() {\n@@ -145,6 +156,7 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n             Some(sel) => sel.len() != 0 || reexport.len() != 0,\n             None => true,\n         };\n+        let load_registrar = plugin_attr.is_some();\n \n         if load_macros || load_registrar {\n             let pmd = self.reader.read_plugin_metadata(vi);\n@@ -167,7 +179,11 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n         }\n \n         if let Some((lib, symbol)) = registrar {\n-            self.dylink_registrar(vi, lib, symbol);\n+            let fun = self.dylink_registrar(vi, lib, symbol);\n+            self.plugins.registrars.push(PluginRegistrar {\n+                fun: fun,\n+                args: plugin_attr.unwrap(),\n+            });\n         }\n     }\n \n@@ -179,7 +195,10 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n \n impl<'a> PluginLoader<'a> {\n     // Dynamically link a registrar function into the compiler process.\n-    fn dylink_registrar(&mut self, vi: &ast::ViewItem, path: Path, symbol: String) {\n+    fn dylink_registrar(&mut self,\n+                        vi: &ast::ViewItem,\n+                        path: Path,\n+                        symbol: String) -> PluginRegistrarFun {\n         // Make sure the path contains a / or the linker will search for it.\n         let path = os::make_absolute(&path).unwrap();\n \n@@ -201,13 +220,12 @@ impl<'a> PluginLoader<'a> {\n                     Err(err) => self.sess.span_fatal(vi.span, err[])\n                 };\n \n-            self.plugins.registrars.push(registrar);\n-\n             // Intentionally leak the dynamic library. We can't ever unload it\n             // since the library can make things that will live arbitrarily long\n             // (e.g. an @-box cycle or a task).\n             mem::forget(lib);\n \n+            registrar\n         }\n     }\n }"}, {"sha": "feec97f02da55dd204399f7bdf39066605298934", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "patch": "@@ -18,6 +18,7 @@ use syntax::ext::base::{IdentTT, Decorator, Modifier, MacroRulesTT};\n use syntax::ext::base::{MacroExpanderFn};\n use syntax::codemap::Span;\n use syntax::parse::token;\n+use syntax::ptr::P;\n use syntax::ast;\n \n use std::collections::HashMap;\n@@ -35,6 +36,9 @@ pub struct Registry<'a> {\n     /// from the plugin registrar.\n     pub sess: &'a Session,\n \n+    #[doc(hidden)]\n+    pub args_hidden: Option<P<ast::MetaItem>>,\n+\n     #[doc(hidden)]\n     pub krate_span: Span,\n \n@@ -53,13 +57,22 @@ impl<'a> Registry<'a> {\n     pub fn new(sess: &'a Session, krate: &ast::Crate) -> Registry<'a> {\n         Registry {\n             sess: sess,\n+            args_hidden: None,\n             krate_span: krate.span,\n             syntax_exts: vec!(),\n             lint_passes: vec!(),\n             lint_groups: HashMap::new(),\n         }\n     }\n \n+    /// Get the `#[plugin]` attribute used to load this plugin.\n+    ///\n+    /// This gives access to arguments passed via `#[plugin=...]` or\n+    /// `#[plugin(...)]`.\n+    pub fn args<'b>(&'b self) -> &'b P<ast::MetaItem> {\n+        self.args_hidden.as_ref().expect(\"args not set\")\n+    }\n+\n     /// Register a syntax extension of any kind.\n     ///\n     /// This is the most general hook into `libsyntax`'s expansion behavior."}, {"sha": "c88ffffecc32d5b9a4e88ab1c35ef46acc9dae15", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "patch": "@@ -218,7 +218,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     let mut registry = Registry::new(sess, &krate);\n \n-    time(time_passes, \"plugin registration\", (), |_| {\n+    time(time_passes, \"plugin registration\", registrars, |registrars| {\n         if sess.features.borrow().rustc_diagnostic_macros {\n             registry.register_macro(\"__diagnostic_used\",\n                 diagnostics::plugin::expand_diagnostic_used);\n@@ -228,8 +228,9 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                 diagnostics::plugin::expand_build_diagnostic_array);\n         }\n \n-        for &registrar in registrars.iter() {\n-            registrar(&mut registry);\n+        for registrar in registrars.into_iter() {\n+            registry.args_hidden = Some(registrar.args);\n+            (registrar.fun)(&mut registry);\n         }\n     });\n "}, {"sha": "b90c3f1d727bf6190b37539a2fcff83b1ed80aa1", "filename": "src/test/auxiliary/plugin_args.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fplugin_args.rs?ref=d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![feature(plugin_registrar)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+\n+use std::borrow::ToOwned;\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use syntax::ext::build::AstBuilder;\n+use syntax::ext::base::{TTMacroExpander, ExtCtxt, MacResult, MacExpr, NormalTT};\n+use syntax::parse::token;\n+use syntax::print::pprust;\n+use syntax::ptr::P;\n+use rustc::plugin::Registry;\n+\n+struct Expander {\n+    args: P<ast::MetaItem>,\n+}\n+\n+impl TTMacroExpander for Expander {\n+    fn expand<'cx>(&self,\n+                   ecx: &'cx mut ExtCtxt,\n+                   sp: Span,\n+                   _: &[ast::TokenTree]) -> Box<MacResult+'cx> {\n+\n+        let attr = ecx.attribute(sp, self.args.clone());\n+        let src = pprust::attribute_to_string(&attr);\n+        let interned = token::intern_and_get_ident(src.as_slice());\n+        MacExpr::new(ecx.expr_str(sp, interned))\n+    }\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    let args = reg.args().clone();\n+    reg.register_syntax_extension(token::intern(\"plugin_args\"),\n+        NormalTT(box Expander { args: args, }, None));\n+}"}, {"sha": "1d98cd26a38f51c01824800e9a9df851335cff80", "filename": "src/test/compile-fail/multi-plugin-attr.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Fcompile-fail%2Fmulti-plugin-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Fcompile-fail%2Fmulti-plugin-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmulti-plugin-attr.rs?ref=d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[plugin]\n+#[plugin]  //~ ERROR #[plugin] specified multiple times\n+extern crate std;\n+\n+fn main() {}"}, {"sha": "5a91f603f9681cac54062e9ddad404e9e1893d5a", "filename": "src/test/run-pass/plugin-args-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Frun-pass%2Fplugin-args-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Frun-pass%2Fplugin-args-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplugin-args-1.rs?ref=d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:plugin_args.rs\n+// ignore-stage1\n+\n+#![feature(plugin)]\n+\n+#[no_link]\n+#[plugin]\n+extern crate plugin_args;\n+\n+fn main() {\n+    assert_eq!(plugin_args!(), \"#[plugin]\");\n+}"}, {"sha": "d0ac22a529021641694689a24771f47ddfcddad4", "filename": "src/test/run-pass/plugin-args-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Frun-pass%2Fplugin-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Frun-pass%2Fplugin-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplugin-args-2.rs?ref=d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:plugin_args.rs\n+// ignore-stage1\n+\n+#![feature(plugin)]\n+\n+#[no_link]\n+#[plugin()]\n+extern crate plugin_args;\n+\n+fn main() {\n+    assert_eq!(plugin_args!(), \"#[plugin()]\");\n+}"}, {"sha": "7cac8ac57e55c09d31b9da0c21ac32afbd71f9c7", "filename": "src/test/run-pass/plugin-args-3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Frun-pass%2Fplugin-args-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Frun-pass%2Fplugin-args-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplugin-args-3.rs?ref=d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:plugin_args.rs\n+// ignore-stage1\n+\n+#![feature(plugin)]\n+\n+#[no_link]\n+#[plugin(hello(there), how(are=\"you\"))]\n+extern crate plugin_args;\n+\n+fn main() {\n+    assert_eq!(plugin_args!(), \"#[plugin(hello(there), how(are = \\\"you\\\"))]\");\n+}"}, {"sha": "8563c8c178ff88bb5e090c655481ab033c60094a", "filename": "src/test/run-pass/plugin-args-4.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Frun-pass%2Fplugin-args-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0163d3311f0afe7b8dc3b70dba8aa32f318225c/src%2Ftest%2Frun-pass%2Fplugin-args-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplugin-args-4.rs?ref=d0163d3311f0afe7b8dc3b70dba8aa32f318225c", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:plugin_args.rs\n+// ignore-stage1\n+\n+#![feature(plugin)]\n+\n+#[no_link]\n+#[plugin=\"foobar\"]\n+extern crate plugin_args;\n+\n+fn main() {\n+    assert_eq!(plugin_args!(), \"#[plugin = \\\"foobar\\\"]\");\n+}"}]}