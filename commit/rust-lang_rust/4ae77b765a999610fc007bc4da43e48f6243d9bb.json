{"sha": "4ae77b765a999610fc007bc4da43e48f6243d9bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZTc3Yjc2NWE5OTk2MTBmYzAwN2JjNGRhNDNlNDhmNjI0M2Q5YmI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2016-06-13T08:43:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-13T08:43:59Z"}, "message": "Merge pull request #1 from solson/fixup-function_pointers2\n\nFixup function_pointers2", "tree": {"sha": "232a2de9cb32854dbce1d145cc33b26ca0458c4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/232a2de9cb32854dbce1d145cc33b26ca0458c4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae77b765a999610fc007bc4da43e48f6243d9bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae77b765a999610fc007bc4da43e48f6243d9bb", "html_url": "https://github.com/rust-lang/rust/commit/4ae77b765a999610fc007bc4da43e48f6243d9bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae77b765a999610fc007bc4da43e48f6243d9bb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "384623daa7ca04352fc57cb2f31790961ac27e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/384623daa7ca04352fc57cb2f31790961ac27e21", "html_url": "https://github.com/rust-lang/rust/commit/384623daa7ca04352fc57cb2f31790961ac27e21"}, {"sha": "024b3d2b453ee116c26c3f765839ab4d60c23df9", "url": "https://api.github.com/repos/rust-lang/rust/commits/024b3d2b453ee116c26c3f765839ab4d60c23df9", "html_url": "https://github.com/rust-lang/rust/commit/024b3d2b453ee116c26c3f765839ab4d60c23df9"}], "stats": {"total": 158, "additions": 70, "deletions": 88}, "files": [{"sha": "240a2144807dae9f8defff19cc6f271ad863f33f", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ae77b765a999610fc007bc4da43e48f6243d9bb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4ae77b765a999610fc007bc4da43e48f6243d9bb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4ae77b765a999610fc007bc4da43e48f6243d9bb", "patch": "@@ -3,7 +3,7 @@ name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n  \"byteorder 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiletest_rs 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -24,7 +24,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"compiletest_rs\"\n-version = \"0.1.2\"\n+version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -55,7 +55,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.11\"\n+version = \"0.2.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -76,7 +76,7 @@ name = \"memchr\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -102,7 +102,7 @@ version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "f14eb39439ef669e136ffd837db8946a9552c9b7", "filename": "src/bin/miri.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4ae77b765a999610fc007bc4da43e48f6243d9bb/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae77b765a999610fc007bc4da43e48f6243d9bb/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=4ae77b765a999610fc007bc4da43e48f6243d9bb", "patch": "@@ -1,5 +1,4 @@\n-#![feature(rustc_private, custom_attribute)]\n-#![allow(unused_attributes)]\n+#![feature(rustc_private)]\n \n extern crate getopts;\n extern crate miri;\n@@ -66,21 +65,22 @@ fn interpret_start_points<'a, 'tcx>(\n                 ecx.push_stack_frame(tcx.map.local_def_id(id), mir.span, CachedMir::Ref(mir), substs, return_ptr);\n \n                 loop {\n-                    match (step(&mut ecx), return_ptr) {\n-                        (Ok(true), _) => {},\n-                        (Ok(false), Some(ptr)) => if log_enabled!(::log::LogLevel::Debug) {\n-                            ecx.memory().dump(ptr.alloc_id);\n+                    match step(&mut ecx) {\n+                        Ok(true) => {}\n+                        Ok(false) => {\n+                            match return_ptr {\n+                                Some(ptr) => if log_enabled!(::log::LogLevel::Debug) {\n+                                    ecx.memory().dump(ptr.alloc_id);\n+                                },\n+                                None => warn!(\"diverging function returned\"),\n+                            }\n                             break;\n-                        },\n-                        (Ok(false), None) => {\n-                            warn!(\"diverging function returned\");\n-                            break;\n-                        },\n+                        }\n                         // FIXME: diverging functions can end up here in some future miri\n-                        (Err(e), _) => {\n+                        Err(e) => {\n                             report(tcx, &ecx, e);\n                             break;\n-                        },\n+                        }\n                     }\n                 }\n             }\n@@ -90,11 +90,11 @@ fn interpret_start_points<'a, 'tcx>(\n \n fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n     let frame = ecx.stack().last().expect(\"stackframe was empty\");\n-    let block = frame.mir.basic_block_data(frame.next_block);\n+    let block = &frame.mir.basic_blocks()[frame.next_block];\n     let span = if frame.stmt < block.statements.len() {\n-        block.statements[frame.stmt].span\n+        block.statements[frame.stmt].source_info.span\n     } else {\n-        block.terminator().span\n+        block.terminator().source_info.span\n     };\n     let mut err = tcx.sess.struct_span_err(span, &e.to_string());\n     for &Frame { def_id, substs, span, .. } in ecx.stack().iter().rev() {\n@@ -105,22 +105,20 @@ fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n         impl<'tcx> fmt::Display for Instance<'tcx> {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 ppaux::parameterized(f, self.1, self.0, ppaux::Ns::Value, &[],\n-                    |tcx| tcx.lookup_item_type(self.0).generics)\n+                    |tcx| Some(tcx.lookup_item_type(self.0).generics))\n             }\n         }\n         err.span_note(span, &format!(\"inside call to {}\", Instance(def_id, substs)));\n     }\n     err.emit();\n }\n \n-#[miri_run]\n fn main() {\n     init_logger();\n     let args: Vec<String> = std::env::args().collect();\n     rustc_driver::run_compiler(&args, &mut MiriCompilerCalls);\n }\n \n-#[miri_run]\n fn init_logger() {\n     const NSPACES: usize = 40;\n     let format = |record: &log::LogRecord| {"}, {"sha": "251ebb768e0d6a3f7405c65fd1c2ae3e46a5fca3", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4ae77b765a999610fc007bc4da43e48f6243d9bb/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae77b765a999610fc007bc4da43e48f6243d9bb/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=4ae77b765a999610fc007bc4da43e48f6243d9bb", "patch": "@@ -8,6 +8,7 @@ use rustc::ty::layout::{self, Layout, Size};\n use rustc::ty::subst::{self, Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt, BareFnTy};\n use rustc::util::nodemap::DefIdMap;\n+use rustc_data_structures::indexed_vec::Idx;\n use std::cell::RefCell;\n use std::ops::Deref;\n use std::rc::Rc;\n@@ -118,7 +119,7 @@ struct ConstantId<'tcx> {\n \n #[derive(Clone, Debug, Eq, PartialEq, Hash)]\n enum ConstantKind {\n-    Promoted(usize),\n+    Promoted(mir::Promoted),\n     /// Statics, constants and associated constants\n     Global,\n }\n@@ -426,24 +427,38 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         assert_eq!(ptr.offset, 0);\n                         let fn_ptr = self.memory.read_ptr(ptr)?;\n                         let (def_id, substs) = self.memory.get_fn(fn_ptr.alloc_id)?;\n-                        self.eval_fn_call(def_id, substs, bare_fn_ty, return_ptr, args, terminator.span)?\n+                        self.eval_fn_call(def_id, substs, bare_fn_ty, return_ptr, args,\n+                                          terminator.source_info.span)?\n                     },\n                     ty::TyFnDef(def_id, substs, fn_ty) => {\n-                        self.eval_fn_call(def_id, substs, fn_ty, return_ptr, args, terminator.span)?\n+                        self.eval_fn_call(def_id, substs, fn_ty, return_ptr, args,\n+                                          terminator.source_info.span)?\n                     }\n \n                     _ => return Err(EvalError::Unimplemented(format!(\"can't handle callee of type {:?}\", func_ty))),\n                 }\n             }\n \n-            Drop { ref value, target, .. } => {\n-                let ptr = self.eval_lvalue(value)?.to_ptr();\n-                let ty = self.lvalue_ty(value);\n+            Drop { ref location, target, .. } => {\n+                let ptr = self.eval_lvalue(location)?.to_ptr();\n+                let ty = self.lvalue_ty(location);\n                 self.drop(ptr, ty)?;\n                 self.frame_mut().next_block = target;\n             }\n \n+            Assert { ref cond, expected, ref msg, target, cleanup } => {\n+                let actual_ptr = self.eval_operand(cond)?;\n+                let actual = self.memory.read_bool(actual_ptr)?;\n+                if actual == expected {\n+                    self.frame_mut().next_block = target;\n+                } else {\n+                    panic!(\"unimplemented: jump to {:?} and print {:?}\", cleanup, msg);\n+                }\n+            }\n+\n+            DropAndReplace { .. } => unimplemented!(),\n             Resume => unimplemented!(),\n+            Unreachable => unimplemented!(),\n         }\n \n         Ok(())\n@@ -867,6 +882,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_primval(dest, val)?;\n             }\n \n+            // FIXME(solson): Factor this out with BinaryOp.\n+            CheckedBinaryOp(bin_op, ref left, ref right) => {\n+                let left_ptr = self.eval_operand(left)?;\n+                let left_ty = self.operand_ty(left);\n+                let left_val = self.read_primval(left_ptr, left_ty)?;\n+\n+                let right_ptr = self.eval_operand(right)?;\n+                let right_ty = self.operand_ty(right);\n+                let right_val = self.read_primval(right_ptr, right_ty)?;\n+\n+                let val = primval::binary_op(bin_op, left_val, right_val)?;\n+                self.memory.write_primval(dest, val)?;\n+\n+                // FIXME(solson): Find the result type size properly. Perhaps refactor out\n+                // Projection calculations so we can do the equivalent of `dest.1` here.\n+                let s = self.type_size(left_ty, self.substs());\n+                self.memory.write_bool(dest.offset(s as isize), false)?;\n+            }\n+\n             UnaryOp(un_op, ref operand) => {\n                 let ptr = self.eval_operand(operand)?;\n                 let ty = self.operand_ty(operand);\n@@ -1048,7 +1082,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n \n-            Slice { .. } => unimplemented!(),\n             InlineAsm { .. } => unimplemented!(),\n         }\n \n@@ -1161,9 +1194,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let ptr = match *lvalue {\n             ReturnPointer => self.frame().return_ptr\n                 .expect(\"ReturnPointer used in a function with no return value\"),\n-            Arg(i) => self.frame().locals[i as usize],\n-            Var(i) => self.frame().locals[self.frame().var_offset + i as usize],\n-            Temp(i) => self.frame().locals[self.frame().temp_offset + i as usize],\n+            Arg(i) => self.frame().locals[i.index()],\n+            Var(i) => self.frame().locals[self.frame().var_offset + i.index()],\n+            Temp(i) => self.frame().locals[self.frame().temp_offset + i.index()],\n \n             Static(def_id) => {\n                 let substs = self.tcx.mk_substs(subst::Substs::empty());\n@@ -1248,6 +1281,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     ConstantIndex { .. } => unimplemented!(),\n+                    Subslice { .. } => unimplemented!(),\n                 }\n             }\n         };"}, {"sha": "8603054d124c25fb57e89191f3516314959ddb1b", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ae77b765a999610fc007bc4da43e48f6243d9bb/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae77b765a999610fc007bc4da43e48f6243d9bb/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=4ae77b765a999610fc007bc4da43e48f6243d9bb", "patch": "@@ -51,12 +51,12 @@ impl<'ecx, 'a, 'tcx> Stepper<'ecx, 'a, 'tcx> {\n         let block = self.ecx.frame().next_block;\n         let stmt = self.ecx.frame().stmt;\n         let mir = self.ecx.mir();\n-        let basic_block = mir.basic_block_data(block);\n+        let basic_block = &mir.basic_blocks()[block];\n \n         if let Some(ref stmt) = basic_block.statements.get(stmt) {\n             let current_stack = self.ecx.stack.len();\n             ConstantExtractor {\n-                span: stmt.span,\n+                span: stmt.source_info.span,\n                 substs: self.ecx.substs(),\n                 def_id: self.ecx.frame().def_id,\n                 ecx: self.ecx,\n@@ -75,7 +75,7 @@ impl<'ecx, 'a, 'tcx> Stepper<'ecx, 'a, 'tcx> {\n         let terminator = basic_block.terminator();\n         let current_stack = self.ecx.stack.len();\n         ConstantExtractor {\n-            span: terminator.span,\n+            span: terminator.source_info.span,\n             substs: self.ecx.substs(),\n             def_id: self.ecx.frame().def_id,\n             ecx: self.ecx,"}, {"sha": "4bc5a07e3c2f93213604fe3151cea87df9bf4495", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ae77b765a999610fc007bc4da43e48f6243d9bb/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae77b765a999610fc007bc4da43e48f6243d9bb/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4ae77b765a999610fc007bc4da43e48f6243d9bb", "patch": "@@ -11,6 +11,7 @@\n \n // From rustc.\n #[macro_use] extern crate rustc;\n+extern crate rustc_data_structures;\n extern crate rustc_mir;\n extern crate rustc_trans;\n extern crate syntax;"}, {"sha": "2fc1e615cff1965d9fd16b9f93234878c1ea2268", "filename": "tests/compiletest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ae77b765a999610fc007bc4da43e48f6243d9bb/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae77b765a999610fc007bc4da43e48f6243d9bb/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=4ae77b765a999610fc007bc4da43e48f6243d9bb", "patch": "@@ -27,5 +27,4 @@ fn run_mode(mode: &'static str) {\n fn compile_test() {\n     run_mode(\"compile-fail\");\n     run_mode(\"run-pass\");\n-    run_mode(\"run-fail\");\n }"}, {"sha": "a98f71502f9f38fc8df8d19de4640a65e96cc043", "filename": "tests/run-fail/inception.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/384623daa7ca04352fc57cb2f31790961ac27e21/tests%2Frun-fail%2Finception.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384623daa7ca04352fc57cb2f31790961ac27e21/tests%2Frun-fail%2Finception.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-fail%2Finception.rs?ref=384623daa7ca04352fc57cb2f31790961ac27e21", "patch": "@@ -1,50 +0,0 @@\n-// error-pattern:no mir for `env_logger/\n-\n-use std::env;\n-use std::process::{Command, Output};\n-\n-fn run_miri(file: &str, sysroot: &str) -> Output {\n-    let path = env::current_dir().unwrap();\n-    let libpath = path.join(\"target\").join(\"debug\");\n-    let libpath = libpath.to_str().unwrap();\n-    let libpath2 = path.join(\"target\").join(\"debug\").join(\"deps\");\n-    let libpath2 = libpath2.to_str().unwrap();\n-    let mut args = vec![\n-        \"run\".to_string(), \"--\".to_string(),\n-        \"--sysroot\".to_string(), sysroot.to_string(),\n-        \"-L\".to_string(), libpath.to_string(),\n-        \"-L\".to_string(), libpath2.to_string(),\n-        file.to_string()\n-    ];\n-    for file in std::fs::read_dir(\"target/debug/deps\").unwrap() {\n-        let file = file.unwrap();\n-        if file.file_type().unwrap().is_file() {\n-            let path = file.path();\n-            if let Some(ext) = path.extension() {\n-                if ext == \"rlib\" {\n-                    let name = path.file_stem().unwrap().to_str().unwrap();\n-                    if let Some(dash) = name.rfind('-') {\n-                        if name.starts_with(\"lib\") {\n-                            args.push(\"--extern\".to_string());\n-                            args.push(format!(\"{}={}\", &name[3..dash], path.to_str().unwrap()));\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-    Command::new(\"cargo\")\n-        .args(&args)\n-        .output()\n-        .unwrap_or_else(|e| panic!(\"failed to execute process: {}\", e))\n-}\n-\n-fn main() {\n-    let sysroot = env::var(\"RUST_SYSROOT\").expect(\"env variable `RUST_SYSROOT` not set\");\n-    let test_run = run_miri(\"src/bin/miri.rs\", &sysroot);\n-\n-    if test_run.status.code().unwrap_or(-1) != 0 {\n-        println!(\"{}\", String::from_utf8(test_run.stdout).unwrap());\n-        panic!(\"{}\", String::from_utf8(test_run.stderr).unwrap());\n-    }\n-}"}]}