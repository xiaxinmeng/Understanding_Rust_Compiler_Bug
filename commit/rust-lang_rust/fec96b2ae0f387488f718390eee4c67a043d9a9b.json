{"sha": "fec96b2ae0f387488f718390eee4c67a043d9a9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYzk2YjJhZTBmMzg3NDg4ZjcxODM5MGVlZTRjNjdhMDQzZDlhOWI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-29T00:04:39Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-29T00:44:15Z"}, "message": "Demoding in iter: any, all, map_to_vec, flat_map_to_vec, filter_to_vec", "tree": {"sha": "326578f3138c95dc79cdc1ebe248de3ac2b12cf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/326578f3138c95dc79cdc1ebe248de3ac2b12cf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec96b2ae0f387488f718390eee4c67a043d9a9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec96b2ae0f387488f718390eee4c67a043d9a9b", "html_url": "https://github.com/rust-lang/rust/commit/fec96b2ae0f387488f718390eee4c67a043d9a9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec96b2ae0f387488f718390eee4c67a043d9a9b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7e90fca6e9a9e262225571a5d6a4e010ca82849", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7e90fca6e9a9e262225571a5d6a4e010ca82849", "html_url": "https://github.com/rust-lang/rust/commit/f7e90fca6e9a9e262225571a5d6a4e010ca82849"}], "stats": {"total": 114, "additions": 57, "deletions": 57}, "files": [{"sha": "98fd0e27e9701477d09661e4e3cdeed04b68b210", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -14,8 +14,8 @@ impl<A> IMPL_T<A>: iter::BaseIter<A> {\n \n impl<A> IMPL_T<A>: iter::ExtendedIter<A> {\n     pure fn eachi(blk: fn(uint, v: &A) -> bool) { iter::eachi(&self, blk) }\n-    pure fn all(blk: fn(A) -> bool) -> bool { iter::all(self, blk) }\n-    pure fn any(blk: fn(A) -> bool) -> bool { iter::any(self, blk) }\n+    pure fn all(blk: fn(&A) -> bool) -> bool { iter::all(&self, blk) }\n+    pure fn any(blk: fn(&A) -> bool) -> bool { iter::any(&self, blk) }\n     pure fn foldl<B>(+b0: B, blk: fn(B, A) -> B) -> B {\n         iter::foldl(self, move b0, blk)\n     }\n@@ -30,18 +30,18 @@ impl<A: Eq> IMPL_T<A>: iter::EqIter<A> {\n }\n \n impl<A: Copy> IMPL_T<A>: iter::CopyableIter<A> {\n-    pure fn filter_to_vec(pred: fn(A) -> bool) -> ~[A] {\n-        iter::filter_to_vec(self, pred)\n+    pure fn filter_to_vec(pred: fn(+a: A) -> bool) -> ~[A] {\n+        iter::filter_to_vec(&self, pred)\n     }\n-    pure fn map_to_vec<B>(op: fn(v: &A) -> B) -> ~[B] {\n-        iter::map_to_vec(self, op)\n+    pure fn map_to_vec<B>(op: fn(+v: A) -> B) -> ~[B] {\n+        iter::map_to_vec(&self, op)\n     }\n     pure fn to_vec() -> ~[A] { iter::to_vec(self) }\n \n-    // FIXME--bug in resolve prevents this from working (#2611)\n-    // fn flat_map_to_vec<B:copy,IB:base_iter<B>>(op: fn(A) -> IB) -> ~[B] {\n-    //     iter::flat_map_to_vec(self, op)\n-    // }\n+    pure fn flat_map_to_vec<B:Copy,IB:BaseIter<B>>(op: fn(+a: A) -> IB)\n+        -> ~[B] {\n+        iter::flat_map_to_vec(&self, op)\n+    }\n \n     pure fn find(p: fn(A) -> bool) -> Option<A> { iter::find(self, p) }\n }"}, {"sha": "2db68107fc38568668defdff937f94e3289bdf3b", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -16,8 +16,8 @@ trait BaseIter<A> {\n \n trait ExtendedIter<A> {\n     pure fn eachi(blk: fn(uint, v: &A) -> bool);\n-    pure fn all(blk: fn(A) -> bool) -> bool;\n-    pure fn any(blk: fn(A) -> bool) -> bool;\n+    pure fn all(blk: fn(&A) -> bool) -> bool;\n+    pure fn any(blk: fn(&A) -> bool) -> bool;\n     pure fn foldl<B>(+b0: B, blk: fn(B, A) -> B) -> B;\n     pure fn position(f: fn(A) -> bool) -> Option<uint>;\n }\n@@ -35,8 +35,8 @@ trait TimesIx{\n }\n \n trait CopyableIter<A:Copy> {\n-    pure fn filter_to_vec(pred: fn(A) -> bool) -> ~[A];\n-    pure fn map_to_vec<B>(op: fn(v: &A) -> B) -> ~[B];\n+    pure fn filter_to_vec(pred: fn(+a: A) -> bool) -> ~[A];\n+    pure fn map_to_vec<B>(op: fn(+v: A) -> B) -> ~[B];\n     pure fn to_vec() -> ~[A];\n     pure fn find(p: fn(A) -> bool) -> Option<A>;\n }\n@@ -74,40 +74,40 @@ pure fn eachi<A,IA:BaseIter<A>>(self: &IA, blk: fn(uint, v: &A) -> bool) {\n     }\n }\n \n-pure fn all<A,IA:BaseIter<A>>(self: IA, blk: fn(A) -> bool) -> bool {\n+pure fn all<A,IA:BaseIter<A>>(self: &IA, blk: fn(&A) -> bool) -> bool {\n     for self.each |a| {\n-        if !blk(*a) { return false; }\n+        if !blk(a) { return false; }\n     }\n     return true;\n }\n \n-pure fn any<A,IA:BaseIter<A>>(self: IA, blk: fn(A) -> bool) -> bool {\n+pure fn any<A,IA:BaseIter<A>>(self: &IA, blk: fn(&A) -> bool) -> bool {\n     for self.each |a| {\n-        if blk(*a) { return true; }\n+        if blk(a) { return true; }\n     }\n     return false;\n }\n \n-pure fn filter_to_vec<A:Copy,IA:BaseIter<A>>(self: IA,\n-                                         prd: fn(A) -> bool) -> ~[A] {\n+pure fn filter_to_vec<A:Copy,IA:BaseIter<A>>(self: &IA,\n+                                         prd: fn(+a: A) -> bool) -> ~[A] {\n     do vec::build_sized_opt(self.size_hint()) |push| {\n         for self.each |a| {\n             if prd(*a) { push(*a); }\n         }\n     }\n }\n \n-pure fn map_to_vec<A:Copy,B,IA:BaseIter<A>>(self: IA, op: fn(v: &A) -> B)\n+pure fn map_to_vec<A:Copy,B,IA:BaseIter<A>>(self: &IA, op: fn(+v: A) -> B)\n     -> ~[B] {\n     do vec::build_sized_opt(self.size_hint()) |push| {\n         for self.each |a| {\n-            push(op(a));\n+            push(op(*a));\n         }\n     }\n }\n \n pure fn flat_map_to_vec<A:Copy,B:Copy,IA:BaseIter<A>,IB:BaseIter<B>>(\n-    self: IA, op: fn(A) -> IB) -> ~[B] {\n+    self: &IA, op: fn(+a: A) -> IB) -> ~[B] {\n \n     do vec::build |push| {\n         for self.each |a| {"}, {"sha": "7c1c2f2d80585686f6f6921081825e26d7cf66e8", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -1991,8 +1991,8 @@ impl<A> &[A]: iter::BaseIter<A> {\n \n impl<A> &[A]: iter::ExtendedIter<A> {\n     pure fn eachi(blk: fn(uint, v: &A) -> bool) { iter::eachi(&self, blk) }\n-    pure fn all(blk: fn(A) -> bool) -> bool { iter::all(self, blk) }\n-    pure fn any(blk: fn(A) -> bool) -> bool { iter::any(self, blk) }\n+    pure fn all(blk: fn(&A) -> bool) -> bool { iter::all(&self, blk) }\n+    pure fn any(blk: fn(&A) -> bool) -> bool { iter::any(&self, blk) }\n     pure fn foldl<B>(+b0: B, blk: fn(B, A) -> B) -> B {\n         iter::foldl(self, move b0, blk)\n     }\n@@ -2007,11 +2007,11 @@ impl<A: Eq> &[A]: iter::EqIter<A> {\n }\n \n impl<A: Copy> &[A]: iter::CopyableIter<A> {\n-    pure fn filter_to_vec(pred: fn(A) -> bool) -> ~[A] {\n-        iter::filter_to_vec(self, pred)\n+    pure fn filter_to_vec(pred: fn(+a: A) -> bool) -> ~[A] {\n+        iter::filter_to_vec(&self, pred)\n     }\n-    pure fn map_to_vec<B>(op: fn(v: &A) -> B) -> ~[B] {\n-        iter::map_to_vec(self, op)\n+    pure fn map_to_vec<B>(op: fn(+v: A) -> B) -> ~[B] {\n+        iter::map_to_vec(&self, op)\n     }\n     pure fn to_vec() -> ~[A] { iter::to_vec(self) }\n "}, {"sha": "6d58d209fcfc7a52dda9ab8f5c97fa3d0489e595", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -210,10 +210,10 @@ fn visit<Tproto, Tstate, Tmessage, V: visitor<Tproto, Tstate, Tmessage>>(\n     // the copy keywords prevent recursive use of dvec\n     let states = do (copy proto.states).map_to_vec |s| {\n         let messages = do (copy s.messages).map_to_vec |m| {\n-            let message(name, span, tys, this, next) = *m;\n+            let message(name, span, tys, this, next) = m;\n             visitor.visit_message(name, span, tys, this, next)\n         };\n-        visitor.visit_state(*s, messages)\n+        visitor.visit_state(s, messages)\n     };\n     visitor.visit_proto(proto, states)\n }"}, {"sha": "3ed56a1953e68f2686fd7abc5acdf6b0d9d41fdf", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -63,9 +63,9 @@ fn warn_if_multiple_versions(e: env, diag: span_handler,\n             partition(crate_cache.map_to_vec(|entry| {\n                 let othername = loader::crate_name_from_metas(*entry.metas);\n                 if name == othername {\n-                    Left(*entry)\n+                    Left(entry)\n                 } else {\n-                    Right(*entry)\n+                    Right(entry)\n                 }\n             }));\n "}, {"sha": "f71b82a2be7ea868fbcba4e65fae9de4d96d100c", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -432,7 +432,7 @@ fn check_local(tcx: ty::ctxt, loc: @local, &&s: (), v: visit::vt<()>) {\n     }\n }\n \n-fn is_refutable(tcx: ty::ctxt, pat: @pat) -> bool {\n+fn is_refutable(tcx: ty::ctxt, pat: &pat) -> bool {\n     match tcx.def_map.find(pat.id) {\n       Some(def_variant(enum_id, _)) => {\n         if vec::len(*ty::enum_variants(tcx, enum_id)) != 1u {\n@@ -457,10 +457,10 @@ fn is_refutable(tcx: ty::ctxt, pat: @pat) -> bool {\n         fields.any(|f| is_refutable(tcx, f.pat))\n       }\n       pat_tup(elts) => {\n-        elts.any(|elt| is_refutable(tcx, elt))\n+        elts.any(|elt| is_refutable(tcx, *elt))\n       }\n       pat_enum(_, Some(args)) => {\n-        args.any(|a| is_refutable(tcx, a))\n+        args.any(|a| is_refutable(tcx, *a))\n       }\n       pat_enum(_,_) => { false }\n     }"}, {"sha": "266ee056e2c206cc5187e2a7b9e69f3c004adb2f", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -149,7 +149,7 @@ fn get_lint_dict() -> lint_dict {\n         (~\"deprecated_mode\",\n          @{lint: deprecated_mode,\n            desc: ~\"warn about deprecated uses of modes\",\n-           default: allow}),\n+           default: warn}),\n \n         (~\"deprecated_pattern\",\n          @{lint: deprecated_pattern,"}, {"sha": "73f1e9bd1191c725f235af3dfa9a5520d751c835", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -514,7 +514,7 @@ fn enter_region(bcx: block, dm: DefMap, m: &[@Match/&r],\n \n fn get_options(ccx: @crate_ctxt, m: &[@Match], col: uint) -> ~[Opt] {\n     fn add_to_set(tcx: ty::ctxt, set: &DVec<Opt>, val: Opt) {\n-        if set.any(|l| opt_eq(tcx, &l, &val)) {return;}\n+        if set.any(|l| opt_eq(tcx, l, &val)) {return;}\n         set.push(val);\n     }\n "}, {"sha": "0c9440f3ec2a257b7a425f1c7334b1a2e4a11ab7", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -24,7 +24,7 @@ use util::common::indenter;\n fn has_trait_bounds(tps: ~[ty::param_bounds]) -> bool {\n     vec::any(tps, |bs| {\n         bs.any(|b| {\n-            match b { ty::bound_trait(_) => true, _ => false }\n+            match b { &ty::bound_trait(_) => true, _ => false }\n         })\n     })\n }"}, {"sha": "27e5c696e594d1b14476c29b3c2a44d4522eb766", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -352,7 +352,7 @@ fn validate(edges: ~[(node_id, node_id)],\n     log(info, ~\"Verifying graph edges...\");\n \n     let status = do edges.all() |e| {\n-        let (u, v) = e;\n+        let (u, v) = *e;\n \n         abs(level[u] - level[v]) <= 1\n     };"}, {"sha": "8fb5a0d6e04c732206b3e5c274e5b7fe57aa1baf", "filename": "src/test/run-pass/issue-2611.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Frun-pass%2Fissue-2611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -4,12 +4,12 @@\n use iter::BaseIter;\n \n trait FlatMapToVec<A> {\n-  fn flat_map_to_vec<B:Copy, IB:BaseIter<B>>(op: fn(A) -> IB) -> ~[B];\n+  fn flat_map_to_vec<B:Copy, IB:BaseIter<B>>(op: fn(+a: A) -> IB) -> ~[B];\n }\n \n impl<A:Copy> BaseIter<A>: FlatMapToVec<A> {\n-   fn flat_map_to_vec<B:Copy, IB:BaseIter<B>>(op: fn(A) -> IB) -> ~[B] {\n-     iter::flat_map_to_vec(self, op)\n+   fn flat_map_to_vec<B:Copy, IB:BaseIter<B>>(op: fn(+a: A) -> IB) -> ~[B] {\n+     iter::flat_map_to_vec(&self, op)\n    }\n }\n "}, {"sha": "75334db86cc68b7bbff69394d6217343343f8b04", "filename": "src/test/run-pass/iter-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Frun-pass%2Fiter-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Frun-pass%2Fiter-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-all.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -1,4 +1,4 @@\n-fn is_even(&&x: uint) -> bool { (x % 2u) == 0u }\n+fn is_even(x: &uint) -> bool { (*x % 2) == 0 }\n \n fn main() {\n     assert ![1u, 2u]/_.all(is_even);"}, {"sha": "22057b74a4140f4d715b00010c2968f508445079", "filename": "src/test/run-pass/iter-any.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Frun-pass%2Fiter-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Frun-pass%2Fiter-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-any.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -1,11 +1,11 @@\n-fn is_even(&&x: uint) -> bool { (x % 2u) == 0u }\n+fn is_even(x: &uint) -> bool { (*x % 2) == 0 }\n \n fn main() {\n     assert ![1u, 3u]/_.any(is_even);\n     assert [1u, 2u]/_.any(is_even);\n     assert ![]/_.any(is_even);\n \n-    assert !Some(1u).any(is_even);\n-    assert Some(2u).any(is_even);\n+    assert !Some(1).any(is_even);\n+    assert Some(2).any(is_even);\n     assert !None.any(is_even);\n }"}, {"sha": "f96b18f140a4195516f72da8c59b035eecfa3a46", "filename": "src/test/run-pass/iter-filter-to-vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Frun-pass%2Fiter-filter-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Frun-pass%2Fiter-filter-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-filter-to-vec.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -1,9 +1,9 @@\n-fn is_even(&&x: uint) -> bool { (x % 2u) == 0u }\n+fn is_even(+x: uint) -> bool { (x % 2) == 0 }\n \n fn main() {\n-    assert [1u, 3u]/_.filter_to_vec(is_even) == ~[];\n-    assert [1u, 2u, 3u]/_.filter_to_vec(is_even) == ~[2u];\n+    assert [1, 3]/_.filter_to_vec(is_even) == ~[];\n+    assert [1, 2, 3]/_.filter_to_vec(is_even) == ~[2];\n     assert None.filter_to_vec(is_even) == ~[];\n-    assert Some(1u).filter_to_vec(is_even) == ~[];\n-    assert Some(2u).filter_to_vec(is_even) == ~[2u];\n+    assert Some(1).filter_to_vec(is_even) == ~[];\n+    assert Some(2).filter_to_vec(is_even) == ~[2];\n }"}, {"sha": "2f5359f197f15dd681c602fba1b388635c8a49e5", "filename": "src/test/run-pass/iter-map-to-vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Frun-pass%2Fiter-map-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec96b2ae0f387488f718390eee4c67a043d9a9b/src%2Ftest%2Frun-pass%2Fiter-map-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-map-to-vec.rs?ref=fec96b2ae0f387488f718390eee4c67a043d9a9b", "patch": "@@ -1,9 +1,9 @@\n-fn inc(x: &uint) -> uint { *x + 1u }\n+fn inc(+x: uint) -> uint { x + 1 }\n \n fn main() {\n-    assert [1u, 3u]/_.map_to_vec(inc) == ~[2u, 4u];\n-    assert [1u, 2u, 3u]/_.map_to_vec(inc) == ~[2u, 3u, 4u];\n+    assert [1, 3]/_.map_to_vec(inc) == ~[2, 4];\n+    assert [1, 2, 3]/_.map_to_vec(inc) == ~[2, 3, 4];\n     assert None.map_to_vec(inc) == ~[];\n-    assert Some(1u).map_to_vec(inc) == ~[2u];\n-    assert Some(2u).map_to_vec(inc) == ~[3u];\n+    assert Some(1).map_to_vec(inc) == ~[2];\n+    assert Some(2).map_to_vec(inc) == ~[3];\n }"}]}