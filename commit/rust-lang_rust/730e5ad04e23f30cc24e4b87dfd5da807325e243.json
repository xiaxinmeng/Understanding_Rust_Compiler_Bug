{"sha": "730e5ad04e23f30cc24e4b87dfd5da807325e243", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMGU1YWQwNGUyM2YzMGNjMjRlNGI4N2RmZDVkYTgwNzMyNWUyNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-10T21:56:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-10T21:56:13Z"}, "message": "Auto merge of #40565 - estebank:binops-help, r=arielb1\n\nExplicit help message for binop type mismatch\n\nWhen trying to do `1 + Some(2)`, or some other binary operation on two\ntypes different types without an appropriate trait implementation, provide\nan explicit help message:\n\n```rust\nhelp: `{integer} + std::option::Option<{integer}>` has no implementation\n```\n\nRe: #39579, #38564, #37626, #39942, #34698.", "tree": {"sha": "ffaa2707a389f266128ffda4b87264935ae750d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffaa2707a389f266128ffda4b87264935ae750d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/730e5ad04e23f30cc24e4b87dfd5da807325e243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/730e5ad04e23f30cc24e4b87dfd5da807325e243", "html_url": "https://github.com/rust-lang/rust/commit/730e5ad04e23f30cc24e4b87dfd5da807325e243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/730e5ad04e23f30cc24e4b87dfd5da807325e243/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b5754e5ce73d24c6684b3ed0c68a557dfdd2f52", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5754e5ce73d24c6684b3ed0c68a557dfdd2f52", "html_url": "https://github.com/rust-lang/rust/commit/3b5754e5ce73d24c6684b3ed0c68a557dfdd2f52"}, {"sha": "be8787dfe564cf315a9343a84724130da322e805", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8787dfe564cf315a9343a84724130da322e805", "html_url": "https://github.com/rust-lang/rust/commit/be8787dfe564cf315a9343a84724130da322e805"}], "stats": {"total": 181, "additions": 164, "deletions": 17}, "files": [{"sha": "d4544dadaeb0c6af0d70693baa787223a25e6859", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=730e5ad04e23f30cc24e4b87dfd5da807325e243", "patch": "@@ -102,6 +102,7 @@ use self::Ordering::*;\n /// ```\n #[lang = \"eq\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"can't compare `{Self}` with `{Rhs}`\"]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n     /// This method tests for `self` and `other` values to be equal, and is used\n     /// by `==`.\n@@ -550,6 +551,7 @@ impl PartialOrd for Ordering {\n /// ```\n #[lang = \"ord\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"can't compare `{Self}` with `{Rhs}`\"]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// This method returns an ordering between `self` and `other` values if one exists.\n     ///"}, {"sha": "175b3a5a69ac15c86c51109154a6cdf3ef9ffac9", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=730e5ad04e23f30cc24e4b87dfd5da807325e243", "patch": "@@ -242,6 +242,7 @@ pub trait Drop {\n /// [std::time::SystemTime]: ../../std/time/struct.SystemTime.html\n #[lang = \"add\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} + {RHS}`\"]\n pub trait Add<RHS=Self> {\n     /// The resulting type after applying the `+` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -315,6 +316,7 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// [std::time::SystemTime]: ../../std/time/struct.SystemTime.html\n #[lang = \"sub\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} - {RHS}`\"]\n pub trait Sub<RHS=Self> {\n     /// The resulting type after applying the `-` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -437,6 +439,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} * {RHS}`\"]\n pub trait Mul<RHS=Self> {\n     /// The resulting type after applying the `*` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -565,6 +568,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} / {RHS}`\"]\n pub trait Div<RHS=Self> {\n     /// The resulting type after applying the `/` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -644,6 +648,7 @@ div_impl_float! { f32 f64 }\n /// ```\n #[lang = \"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} % {RHS}`\"]\n pub trait Rem<RHS=Self> {\n     /// The resulting type after applying the `%` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -883,6 +888,7 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitand\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} & {RHS}`\"]\n pub trait BitAnd<RHS=Self> {\n     /// The resulting type after applying the `&` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -966,6 +972,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} | {RHS}`\"]\n pub trait BitOr<RHS=Self> {\n     /// The resulting type after applying the `|` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1052,6 +1059,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitxor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} ^ {RHS}`\"]\n pub trait BitXor<RHS=Self> {\n     /// The resulting type after applying the `^` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1134,6 +1142,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"shl\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} << {RHS}`\"]\n pub trait Shl<RHS> {\n     /// The resulting type after applying the `<<` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1237,6 +1246,7 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n /// ```\n #[lang = \"shr\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} >> {RHS}`\"]\n pub trait Shr<RHS> {\n     /// The resulting type after applying the `>>` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1321,6 +1331,7 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// ```\n #[lang = \"add_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} += {Rhs}`\"]\n pub trait AddAssign<Rhs=Self> {\n     /// The method for the `+=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -1377,6 +1388,7 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"sub_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} -= {Rhs}`\"]\n pub trait SubAssign<Rhs=Self> {\n     /// The method for the `-=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -1422,6 +1434,7 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"mul_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} *= {Rhs}`\"]\n pub trait MulAssign<Rhs=Self> {\n     /// The method for the `*=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -1467,6 +1480,7 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"div_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} /= {Rhs}`\"]\n pub trait DivAssign<Rhs=Self> {\n     /// The method for the `/=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -1511,6 +1525,7 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"rem_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} %= {Rhs}`\"]\n pub trait RemAssign<Rhs=Self> {\n     /// The method for the `%=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -1597,6 +1612,7 @@ rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// ```\n #[lang = \"bitand_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} &= {Rhs}`\"]\n pub trait BitAndAssign<Rhs=Self> {\n     /// The method for the `&=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -1641,6 +1657,7 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitor_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} |= {Rhs}`\"]\n pub trait BitOrAssign<Rhs=Self> {\n     /// The method for the `|=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -1685,6 +1702,7 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"bitxor_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} ^= {Rhs}`\"]\n pub trait BitXorAssign<Rhs=Self> {\n     /// The method for the `^=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -1729,6 +1747,7 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// ```\n #[lang = \"shl_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} <<= {Rhs}`\"]\n pub trait ShlAssign<Rhs> {\n     /// The method for the `<<=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n@@ -1794,6 +1813,7 @@ shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// ```\n #[lang = \"shr_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n+#[rustc_on_unimplemented = \"no implementation for `{Self} >>= {Rhs}`\"]\n pub trait ShrAssign<Rhs=Self> {\n     /// The method for the `>>=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"}, {"sha": "931c77badad222009ee0e6da53af98e99d2b5ee1", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=730e5ad04e23f30cc24e4b87dfd5da807325e243", "patch": "@@ -524,15 +524,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             \"the trait bound `{}` is not satisfied{}\",\n                             trait_ref.to_predicate(),\n                             post_message);\n-                        err.span_label(span,\n-                                        &format!(\"{}the trait `{}` is not \\\n-                                                    implemented for `{}`\",\n-                                                pre_message,\n-                                                trait_ref,\n-                                                trait_ref.self_ty()));\n \n                         // Try to report a help message\n-\n                         if !trait_ref.has_infer_types() &&\n                             self.predicate_can_apply(trait_ref) {\n                             // If a where-clause may be useful, remind the\n@@ -544,17 +537,21 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             // which is somewhat confusing.\n                             err.help(&format!(\"consider adding a `where {}` bound\",\n                                                 trait_ref.to_predicate()));\n-                        } else if let Some(s) = self.on_unimplemented_note(trait_ref,\n-                                                                            obligation) {\n+                        } else if let Some(s) = self.on_unimplemented_note(trait_ref, obligation) {\n                             // If it has a custom \"#[rustc_on_unimplemented]\"\n                             // error message, let's display it!\n                             err.note(&s);\n                         } else {\n-                            // If we can't show anything useful, try to find\n-                            // similar impls.\n+                            // Can't show anything else useful, try to find similar impls.\n                             let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n                             self.report_similar_impl_candidates(impl_candidates, &mut err);\n                         }\n+\n+                        err.span_label(span,\n+                                       &format!(\"{}the trait `{}` is not implemented for `{}`\",\n+                                                pre_message,\n+                                                trait_ref,\n+                                                trait_ref.self_ty()));\n                         err\n                     }\n \n@@ -997,3 +994,4 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                           suggested_limit));\n     }\n }\n+"}, {"sha": "96db53ad2e46e593fbc7d19b16c5e8cc1fd88803", "filename": "src/test/ui/impl-trait/equality.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs?ref=730e5ad04e23f30cc24e4b87dfd5da807325e243", "patch": "@@ -32,7 +32,7 @@ fn sum_to(n: u32) -> impl Foo {\n         0\n     } else {\n         n + sum_to(n - 1)\n-        //~^ ERROR the trait bound `u32: std::ops::Add<impl Foo>` is not satisfied\n+        //~^ ERROR no implementation for `u32 + impl Foo`\n     }\n }\n ", "previous_filename": "src/test/compile-fail/impl-trait/equality.rs"}, {"sha": "bd024d6766eda590a809243fed7daa8407a51714", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=730e5ad04e23f30cc24e4b87dfd5da807325e243", "patch": "@@ -0,0 +1,55 @@\n+error[E0308]: mismatched types\n+  --> $DIR/equality.rs:25:5\n+   |\n+25 |     0_u32\n+   |     ^^^^^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0277]: the trait bound `u32: std::ops::Add<impl Foo>` is not satisfied\n+  --> $DIR/equality.rs:34:9\n+   |\n+34 |         n + sum_to(n - 1)\n+   |         ^^^^^^^^^^^^^^^^^ the trait `std::ops::Add<impl Foo>` is not implemented for `u32`\n+   |\n+   = note: no implementation for `u32 + impl Foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/equality.rs:53:18\n+   |\n+53 |     let _: u32 = hide(0_u32);\n+   |                  ^^^^^^^^^^^ expected u32, found anonymized type\n+   |\n+   = note: expected type `u32`\n+              found type `impl Foo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/equality.rs:59:18\n+   |\n+59 |     let _: i32 = Leak::leak(hide(0_i32));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found associated type\n+   |\n+   = note: expected type `i32`\n+              found type `<impl Foo as Leak>::T`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/equality.rs:66:10\n+   |\n+66 |     x = (x.1,\n+   |          ^^^ expected u32, found i32\n+   |\n+   = note: expected type `impl Foo` (u32)\n+              found type `impl Foo` (i32)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/equality.rs:69:10\n+   |\n+69 |          x.0);\n+   |          ^^^ expected i32, found u32\n+   |\n+   = note: expected type `impl Foo` (i32)\n+              found type `impl Foo` (u32)\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "98449e596641e36cad7934ffb087d4096aa33fde", "filename": "src/test/ui/mismatched_types/binops.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs?ref=730e5ad04e23f30cc24e4b87dfd5da807325e243", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    1 + Some(1);\n+    2 as usize - Some(1);\n+    3 * ();\n+    4 / \"\";\n+    5 < String::new();\n+    6 == Ok(1);\n+}"}, {"sha": "a0f7ff6587097bedc2ed08f3bc2e22af36f918ce", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=730e5ad04e23f30cc24e4b87dfd5da807325e243", "patch": "@@ -0,0 +1,58 @@\n+error[E0277]: the trait bound `{integer}: std::ops::Add<std::option::Option<{integer}>>` is not satisfied\n+  --> $DIR/binops.rs:12:5\n+   |\n+12 |     1 + Some(1);\n+   |     ^^^^^^^^^^^ the trait `std::ops::Add<std::option::Option<{integer}>>` is not implemented for `{integer}`\n+   |\n+   = note: no implementation for `{integer} + std::option::Option<{integer}>`\n+\n+error[E0277]: the trait bound `usize: std::ops::Sub<std::option::Option<{integer}>>` is not satisfied\n+  --> $DIR/binops.rs:13:5\n+   |\n+13 |     2 as usize - Some(1);\n+   |     ^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Sub<std::option::Option<{integer}>>` is not implemented for `usize`\n+   |\n+   = note: no implementation for `usize - std::option::Option<{integer}>`\n+\n+error[E0277]: the trait bound `{integer}: std::ops::Mul<()>` is not satisfied\n+  --> $DIR/binops.rs:14:5\n+   |\n+14 |     3 * ();\n+   |     ^^^^^^ the trait `std::ops::Mul<()>` is not implemented for `{integer}`\n+   |\n+   = note: no implementation for `{integer} * ()`\n+\n+error[E0277]: the trait bound `{integer}: std::ops::Div<&str>` is not satisfied\n+  --> $DIR/binops.rs:15:5\n+   |\n+15 |     4 / \"\";\n+   |     ^^^^^^ the trait `std::ops::Div<&str>` is not implemented for `{integer}`\n+   |\n+   = note: no implementation for `{integer} / &str`\n+\n+error[E0277]: the trait bound `{integer}: std::cmp::PartialEq<std::string::String>` is not satisfied\n+  --> $DIR/binops.rs:16:5\n+   |\n+16 |     5 < String::new();\n+   |     ^^^^^^^^^^^^^^^^^ the trait `std::cmp::PartialEq<std::string::String>` is not implemented for `{integer}`\n+   |\n+   = note: can't compare `{integer}` with `std::string::String`\n+\n+error[E0277]: the trait bound `{integer}: std::cmp::PartialOrd<std::string::String>` is not satisfied\n+  --> $DIR/binops.rs:16:5\n+   |\n+16 |     5 < String::new();\n+   |     ^^^^^^^^^^^^^^^^^ the trait `std::cmp::PartialOrd<std::string::String>` is not implemented for `{integer}`\n+   |\n+   = note: can't compare `{integer}` with `std::string::String`\n+\n+error[E0277]: the trait bound `{integer}: std::cmp::PartialEq<std::result::Result<{integer}, _>>` is not satisfied\n+  --> $DIR/binops.rs:17:5\n+   |\n+17 |     6 == Ok(1);\n+   |     ^^^^^^^^^^ the trait `std::cmp::PartialEq<std::result::Result<{integer}, _>>` is not implemented for `{integer}`\n+   |\n+   = note: can't compare `{integer}` with `std::result::Result<{integer}, _>`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "161b6ca48b282444edf6150f4d847eb7df3903a6", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/730e5ad04e23f30cc24e4b87dfd5da807325e243/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=730e5ad04e23f30cc24e4b87dfd5da807325e243", "patch": "@@ -9,11 +9,7 @@ error[E0277]: the trait bound `u32: std::ops::Add<()>` is not satisfied\n 27 | |             y),\n    | |______________^ ...ending here: the trait `std::ops::Add<()>` is not implemented for `u32`\n    |\n-   = help: the following implementations were found:\n-             <u32 as std::ops::Add>\n-             <&'a u32 as std::ops::Add<u32>>\n-             <u32 as std::ops::Add<&'a u32>>\n-             <&'b u32 as std::ops::Add<&'a u32>>\n+   = note: no implementation for `u32 + ()`\n \n error: aborting due to previous error\n "}]}