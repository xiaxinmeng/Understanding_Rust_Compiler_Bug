{"sha": "c0daff08c761ff6810b6bfebba17d9b8d31291a3", "node_id": "C_kwDOAAsO6NoAKGMwZGFmZjA4Yzc2MWZmNjgxMGI2YmZlYmJhMTdkOWI4ZDMxMjkxYTM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-19T14:46:39Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-24T13:53:37Z"}, "message": "Fix `rustc_index` imports outside the compiler", "tree": {"sha": "500e6849364195772a21b964b1289c01299aeea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/500e6849364195772a21b964b1289c01299aeea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0daff08c761ff6810b6bfebba17d9b8d31291a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0daff08c761ff6810b6bfebba17d9b8d31291a3", "html_url": "https://github.com/rust-lang/rust/commit/c0daff08c761ff6810b6bfebba17d9b8d31291a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0daff08c761ff6810b6bfebba17d9b8d31291a3/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d809b17640e7f20ff001a7d4c6e9ee5b1bdf4af", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d809b17640e7f20ff001a7d4c6e9ee5b1bdf4af", "html_url": "https://github.com/rust-lang/rust/commit/5d809b17640e7f20ff001a7d4c6e9ee5b1bdf4af"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "bd055216e367acbf4213cc38bd6453be00c2c93f", "filename": "compiler/rustc_codegen_cranelift/src/abi/returning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0daff08c761ff6810b6bfebba17d9b8d31291a3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0daff08c761ff6810b6bfebba17d9b8d31291a3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs?ref=c0daff08c761ff6810b6bfebba17d9b8d31291a3", "patch": "@@ -9,7 +9,7 @@ use smallvec::{smallvec, SmallVec};\n /// this adds an extra parameter pointing to where the return value needs to be stored.\n pub(super) fn codegen_return_param<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n+    ssa_analyzed: &rustc_index::IndexSlice<Local, crate::analyze::SsaKind>,\n     block_params_iter: &mut impl Iterator<Item = Value>,\n ) -> CPlace<'tcx> {\n     let (ret_place, ret_param): (_, SmallVec<[_; 2]>) = match fx.fn_abi.as_ref().unwrap().ret.mode {"}, {"sha": "74f330b76217be7b55bce71f86761666f125cb4b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c0daff08c761ff6810b6bfebba17d9b8d31291a3", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{BodyId, Mutability};\n use rustc_hir_analysis::check::intrinsic::intrinsic_operation_unsafety;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::{self, TyCtxt, Visibility};\n use rustc_resolve::rustdoc::{add_doc_fragment, attrs_to_doc_fragments, inner_docs, DocFragment};"}, {"sha": "1f67b91569cbb358e48c2c333c9009a39c986368", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=c0daff08c761ff6810b6bfebba17d9b8d31291a3", "patch": "@@ -48,7 +48,7 @@ use std::{\n \n use rustc_ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::mir;\n use rustc_span::Span;\n use rustc_target::abi::{Align, Size};"}, {"sha": "7a6b8da40821b67a93e65571ee0a62db742b46a6", "filename": "src/tools/miri/src/concurrency/init_once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs?ref=c0daff08c761ff6810b6bfebba17d9b8d31291a3", "patch": "@@ -1,7 +1,7 @@\n use std::collections::VecDeque;\n use std::num::NonZeroU32;\n \n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n \n use super::sync::EvalContextExtPriv as _;\n use super::thread::MachineCallback;"}, {"sha": "662dff62c8808146f97df8db9f4c2f369fea1858", "filename": "src/tools/miri/src/concurrency/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs?ref=c0daff08c761ff6810b6bfebba17d9b8d31291a3", "patch": "@@ -5,7 +5,7 @@ use std::ops::Not;\n use log::trace;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n \n use super::init_once::InitOnce;\n use super::vector_clock::VClock;"}, {"sha": "5f2bc2ec5586cd3b2bf8a29b067893e0079a8014", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=c0daff08c761ff6810b6bfebba17d9b8d31291a3", "patch": "@@ -10,7 +10,7 @@ use log::trace;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::Span;\n@@ -272,8 +272,9 @@ impl Time {\n     fn get_wait_time(&self, clock: &Clock) -> Duration {\n         match self {\n             Time::Monotonic(instant) => instant.duration_since(clock.now()),\n-            Time::RealTime(time) =>\n-                time.duration_since(SystemTime::now()).unwrap_or(Duration::new(0, 0)),\n+            Time::RealTime(time) => {\n+                time.duration_since(SystemTime::now()).unwrap_or(Duration::new(0, 0))\n+            }\n         }\n     }\n }\n@@ -603,10 +604,11 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         // this allows us to have a deterministic scheduler.\n         for thread in self.threads.indices() {\n             match self.timeout_callbacks.entry(thread) {\n-                Entry::Occupied(entry) =>\n+                Entry::Occupied(entry) => {\n                     if entry.get().call_time.get_wait_time(clock) == Duration::new(0, 0) {\n                         return Some((thread, entry.remove().callback));\n-                    },\n+                    }\n+                }\n                 Entry::Vacant(_) => {}\n             }\n         }"}, {"sha": "b36c6be5a7201720adbbc0e20dae33808fa8342c", "filename": "src/tools/miri/src/concurrency/vector_clock.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0daff08c761ff6810b6bfebba17d9b8d31291a3/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs?ref=c0daff08c761ff6810b6bfebba17d9b8d31291a3", "patch": "@@ -1,4 +1,4 @@\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_span::{Span, SpanData, DUMMY_SP};\n use smallvec::SmallVec;\n use std::{\n@@ -212,14 +212,16 @@ impl PartialOrd for VClock {\n         for (l, r) in iter {\n             match order {\n                 Ordering::Equal => order = l.cmp(r),\n-                Ordering::Less =>\n+                Ordering::Less => {\n                     if l > r {\n                         return None;\n-                    },\n-                Ordering::Greater =>\n+                    }\n+                }\n+                Ordering::Greater => {\n                     if l < r {\n                         return None;\n-                    },\n+                    }\n+                }\n             }\n         }\n \n@@ -234,18 +236,16 @@ impl PartialOrd for VClock {\n             Ordering::Equal => Some(order),\n             // Right has at least 1 element > than the implicit 0,\n             // so the only valid values are Ordering::Less or None.\n-            Ordering::Less =>\n-                match order {\n-                    Ordering::Less | Ordering::Equal => Some(Ordering::Less),\n-                    Ordering::Greater => None,\n-                },\n+            Ordering::Less => match order {\n+                Ordering::Less | Ordering::Equal => Some(Ordering::Less),\n+                Ordering::Greater => None,\n+            },\n             // Left has at least 1 element > than the implicit 0,\n             // so the only valid values are Ordering::Greater or None.\n-            Ordering::Greater =>\n-                match order {\n-                    Ordering::Greater | Ordering::Equal => Some(Ordering::Greater),\n-                    Ordering::Less => None,\n-                },\n+            Ordering::Greater => match order {\n+                Ordering::Greater | Ordering::Equal => Some(Ordering::Greater),\n+                Ordering::Less => None,\n+            },\n         }\n     }\n "}]}