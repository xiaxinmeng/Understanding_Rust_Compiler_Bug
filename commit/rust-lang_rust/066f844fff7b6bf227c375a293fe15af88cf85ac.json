{"sha": "066f844fff7b6bf227c375a293fe15af88cf85ac", "node_id": "C_kwDOAAsO6NoAKDA2NmY4NDRmZmY3YjZiZjIyN2MzNzVhMjkzZmUxNWFmODhjZjg1YWM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T09:28:41Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T09:28:41Z"}, "message": "Move some sess.fatal calls out of compile_global_asm", "tree": {"sha": "1702be1c46bbffca395d14b724c5243f54c41839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1702be1c46bbffca395d14b724c5243f54c41839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/066f844fff7b6bf227c375a293fe15af88cf85ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/066f844fff7b6bf227c375a293fe15af88cf85ac", "html_url": "https://github.com/rust-lang/rust/commit/066f844fff7b6bf227c375a293fe15af88cf85ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/066f844fff7b6bf227c375a293fe15af88cf85ac/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8", "html_url": "https://github.com/rust-lang/rust/commit/7cc97ebcbb3fe637e2467f2e4fc45d94dae013e8"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "0816ebc4599ec077cec1e3ae1b079fe37612dcde", "filename": "src/driver/aot.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/066f844fff7b6bf227c375a293fe15af88cf85ac/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066f844fff7b6bf227c375a293fe15af88cf85ac/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=066f844fff7b6bf227c375a293fe15af88cf85ac", "patch": "@@ -198,7 +198,10 @@ fn module_codegen(\n         )\n     });\n \n-    crate::global_asm::compile_global_asm(tcx, cgu.name().as_str(), &cx.global_asm);\n+    match crate::global_asm::compile_global_asm(tcx, cgu.name().as_str(), &cx.global_asm) {\n+        Ok(()) => {}\n+        Err(err) => tcx.sess.fatal(&err.to_string()),\n+    }\n \n     codegen_result\n }"}, {"sha": "5cd7abfdfb5540a8638519b63ece1052b57bfde3", "filename": "src/global_asm.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/066f844fff7b6bf227c375a293fe15af88cf85ac/src%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066f844fff7b6bf227c375a293fe15af88cf85ac/src%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fglobal_asm.rs?ref=066f844fff7b6bf227c375a293fe15af88cf85ac", "patch": "@@ -1,7 +1,9 @@\n //! The AOT driver uses [`cranelift_object`] to write object files suitable for linking into a\n //! standalone executable.\n \n+use std::io::{self, Write};\n use std::path::PathBuf;\n+use std::process::{Command, Stdio};\n \n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::ItemId;\n@@ -29,29 +31,34 @@ pub(crate) fn codegen_global_asm_item(tcx: TyCtxt<'_>, global_asm: &mut String,\n     }\n }\n \n-pub(crate) fn compile_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n-    use std::io::Write;\n-    use std::process::{Command, Stdio};\n-\n+pub(crate) fn compile_global_asm(\n+    tcx: TyCtxt<'_>,\n+    cgu_name: &str,\n+    global_asm: &str,\n+) -> io::Result<()> {\n     if global_asm.is_empty() {\n-        return;\n+        return Ok(());\n     }\n \n     if cfg!(not(feature = \"inline_asm\"))\n         || tcx.sess.target.is_like_osx\n         || tcx.sess.target.is_like_windows\n     {\n         if global_asm.contains(\"__rust_probestack\") {\n-            return;\n+            return Ok(());\n         }\n \n         // FIXME fix linker error on macOS\n         if cfg!(not(feature = \"inline_asm\")) {\n-            tcx.sess.fatal(\n+            return Err(io::Error::new(\n+                io::ErrorKind::Unsupported,\n                 \"asm! and global_asm! support is disabled while compiling rustc_codegen_cranelift\",\n-            );\n+            ));\n         } else {\n-            tcx.sess.fatal(\"asm! and global_asm! are not yet supported on macOS and Windows\");\n+            return Err(io::Error::new(\n+                io::ErrorKind::Unsupported,\n+                \"asm! and global_asm! are not yet supported on macOS and Windows\",\n+            ));\n         }\n     }\n \n@@ -78,7 +85,10 @@ pub(crate) fn compile_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &s\n     child.stdin.take().unwrap().write_all(global_asm.as_bytes()).unwrap();\n     let status = child.wait().expect(\"Failed to wait for `as`.\");\n     if !status.success() {\n-        tcx.sess.fatal(&format!(\"Failed to assemble `{}`\", global_asm));\n+        return Err(io::Error::new(\n+            io::ErrorKind::Other,\n+            format!(\"Failed to assemble `{}`\", global_asm),\n+        ));\n     }\n \n     // Link the global asm and main object file together\n@@ -93,15 +103,20 @@ pub(crate) fn compile_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &s\n         .status()\n         .unwrap();\n     if !status.success() {\n-        tcx.sess.fatal(&format!(\n-            \"Failed to link `{}` and `{}` together\",\n-            main_object_file.display(),\n-            global_asm_object_file.display(),\n+        return Err(io::Error::new(\n+            io::ErrorKind::Other,\n+            format!(\n+                \"Failed to link `{}` and `{}` together\",\n+                main_object_file.display(),\n+                global_asm_object_file.display(),\n+            ),\n         ));\n     }\n \n     std::fs::remove_file(global_asm_object_file).unwrap();\n     std::fs::remove_file(main_object_file).unwrap();\n+\n+    Ok(())\n }\n \n fn add_file_stem_postfix(mut path: PathBuf, postfix: &str) -> PathBuf {"}, {"sha": "b6b465e1f4e0a808a394c07b68ee0563d1538314", "filename": "src/toolchain.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/066f844fff7b6bf227c375a293fe15af88cf85ac/src%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/066f844fff7b6bf227c375a293fe15af88cf85ac/src%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftoolchain.rs?ref=066f844fff7b6bf227c375a293fe15af88cf85ac", "patch": "@@ -8,10 +8,8 @@ use rustc_session::Session;\n /// Tries to infer the path of a binary for the target toolchain from the linker name.\n pub(crate) fn get_toolchain_binary(sess: &Session, tool: &str) -> PathBuf {\n     let (mut linker, _linker_flavor) = linker_and_flavor(sess);\n-    let linker_file_name = linker\n-        .file_name()\n-        .and_then(|name| name.to_str())\n-        .unwrap_or_else(|| sess.fatal(\"couldn't extract file name from specified linker\"));\n+    let linker_file_name =\n+        linker.file_name().unwrap().to_str().expect(\"linker filename should be valid UTF-8\");\n \n     if linker_file_name == \"ld.lld\" {\n         if tool != \"ld\" {"}]}