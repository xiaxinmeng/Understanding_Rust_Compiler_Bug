{"sha": "6cc318978796ca67e9350561601dee9931c1da12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYzMxODk3ODc5NmNhNjdlOTM1MDU2MTYwMWRlZTk5MzFjMWRhMTI=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-06-11T07:57:25Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-06-17T15:41:23Z"}, "message": "Made the while DebugContext mutable, not just created_* hashes\nDisabled create_arg", "tree": {"sha": "11ce9a11a34903db8d60ee058dcac6bed2e3a306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11ce9a11a34903db8d60ee058dcac6bed2e3a306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cc318978796ca67e9350561601dee9931c1da12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc318978796ca67e9350561601dee9931c1da12", "html_url": "https://github.com/rust-lang/rust/commit/6cc318978796ca67e9350561601dee9931c1da12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cc318978796ca67e9350561601dee9931c1da12/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "868f9a88d6a0a495c10baa35a2fb359b5681375f", "url": "https://api.github.com/repos/rust-lang/rust/commits/868f9a88d6a0a495c10baa35a2fb359b5681375f", "html_url": "https://github.com/rust-lang/rust/commit/868f9a88d6a0a495c10baa35a2fb359b5681375f"}], "stats": {"total": 472, "additions": 248, "deletions": 224}, "files": [{"sha": "a367de059b8bfd4feb2c778052808b0dac2ea807", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6cc318978796ca67e9350561601dee9931c1da12/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc318978796ca67e9350561601dee9931c1da12/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=6cc318978796ca67e9350561601dee9931c1da12", "patch": "@@ -1925,16 +1925,16 @@ pub mod llvm {\n \n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_new(M: ModuleRef) -> DIBuilderRef;\n+        pub unsafe fn LLVMDIBuilderCreate(M: ModuleRef) -> DIBuilderRef;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_delete(Builder: DIBuilderRef);\n+        pub unsafe fn LLVMDIBuilderDispose(Builder: DIBuilderRef);\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_finalize(Builder: DIBuilderRef);\n+        pub unsafe fn LLVMDIBuilderFinalize(Builder: DIBuilderRef);\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_createCompileUnit(\n+        pub unsafe fn LLVMDIBuilderCreateCompileUnit(\n             Builder: DIBuilderRef,\n             Lang: c_uint,\n             File: *c_char,\n@@ -1946,19 +1946,19 @@ pub mod llvm {\n             SplitName: *c_char);\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_createFile(\n+        pub unsafe fn LLVMDIBuilderCreateFile(\n             Builder: DIBuilderRef,\n             Filename: *c_char,\n             Directory: *c_char) -> DIFile;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_createSubroutineType(\n+        pub unsafe fn LLVMDIBuilderCreateSubroutineType(\n             Builder: DIBuilderRef,\n             File: DIFile,\n             ParameterTypes: DIArray) -> DICompositeType;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_createFunction(\n+        pub unsafe fn LLVMDIBuilderCreateFunction(\n             Builder: DIBuilderRef,\n             Scope: DIDescriptor,\n             Name: *c_char,\n@@ -1976,23 +1976,23 @@ pub mod llvm {\n             Decl: ValueRef) -> DISubprogram;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_createBasicType(\n+        pub unsafe fn LLVMDIBuilderCreateBasicType(\n             Builder: DIBuilderRef,\n             Name: *c_char,\n             SizeInBits: c_ulonglong,\n             AlignInBits: c_ulonglong,\n             Encoding: c_uint) -> DIBasicType;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_createPointerType(\n+        pub unsafe fn LLVMDIBuilderCreatePointerType(\n             Builder: DIBuilderRef,\n             PointeeTy: DIType,\n             SizeInBits: c_ulonglong,\n             AlignInBits: c_ulonglong,\n             Name: *c_char) -> DIDerivedType;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_createStructType(\n+        pub unsafe fn LLVMDIBuilderCreateStructType(\n             Builder: DIBuilderRef,\n             Scope: DIDescriptor,\n             Name: *c_char,\n@@ -2007,7 +2007,7 @@ pub mod llvm {\n             VTableHolder: ValueRef) -> DICompositeType;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_createMemberType(\n+        pub unsafe fn LLVMDIBuilderCreateMemberType(\n             Builder: DIBuilderRef,\n             Scope: DIDescriptor,\n             Name: *c_char,\n@@ -2020,15 +2020,15 @@ pub mod llvm {\n             Ty: DIType) -> DIDerivedType;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_createLexicalBlock(\n+        pub unsafe fn LLVMDIBuilderCreateLexicalBlock(\n             Builder: DIBuilderRef,\n             Scope: DIDescriptor,\n             File: DIFile,\n             Line: c_uint,\n             Col: c_uint) -> DILexicalBlock;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_createLocalVariable(\n+        pub unsafe fn LLVMDIBuilderCreateLocalVariable(\n             Builder: DIBuilderRef,\n             Tag: c_uint,\n             Scope: DIDescriptor,\n@@ -2041,31 +2041,38 @@ pub mod llvm {\n             ArgNo: c_uint) -> DIVariable;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_createVectorType(\n+        pub unsafe fn LLVMDIBuilderCreateVectorType(\n             Builder: DIBuilderRef,\n             Size: c_ulonglong,\n             AlignInBits: c_ulonglong,\n             Ty: DIType,\n             Subscripts: DIArray) -> DIType;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_getOrCreateSubrange(\n+        pub unsafe fn LLVMDIBuilderGetOrCreateSubrange(\n             Builder: DIBuilderRef,\n             Lo: c_longlong,\n             Count: c_longlong) -> DISubrange;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_getOrCreateArray(\n+        pub unsafe fn LLVMDIBuilderGetOrCreateArray(\n             Builder: DIBuilderRef,\n             Ptr: *DIDescriptor,\n             Count: c_uint) -> DIArray;\n \n         #[fast_ffi]\n-        pub unsafe fn DIBuilder_insertDeclare(\n+        pub unsafe fn LLVMDIBuilderInsertDeclareAtEnd(\n             Builder: DIBuilderRef,\n             Val: ValueRef,\n             VarInfo: DIVariable,\n-            InsertBefore: *c_void) -> *c_void;\n+            InsertAtEnd: BasicBlockRef) -> ValueRef;\n+            \n+        #[fast_ffi]\n+        pub unsafe fn LLVMDIBuilderInsertDeclareBefore(\n+            Builder: DIBuilderRef,\n+            Val: ValueRef,\n+            VarInfo: DIVariable,\n+            InsertBefore: ValueRef) -> ValueRef;            \n     }\n }\n "}, {"sha": "2a1b2b575f7e4ba539c0e3cc43b5d1e42aea1859", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 177, "deletions": 172, "changes": 349, "blob_url": "https://github.com/rust-lang/rust/blob/6cc318978796ca67e9350561601dee9931c1da12/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cc318978796ca67e9350561601dee9931c1da12/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=6cc318978796ca67e9350561601dee9931c1da12", "patch": "@@ -24,7 +24,11 @@ use util::ppaux::ty_to_str;\n use core::hashmap::HashMap;\n use core::libc;\n use core::libc::c_uint;\n+use core::ptr;\n+use core::str;\n use core::str::as_c_str;\n+use core::sys;\n+use core::vec;\n use syntax::codemap::span;\n use syntax::parse::token::ident_interner;\n use syntax::{ast, codemap, ast_util, ast_map};\n@@ -57,53 +61,56 @@ static DW_ATE_unsigned_char: int = 0x08;\n \n ////////////////\n \n-pub struct DebugContext {\n-    //llmetadata: metadata_cache,\n+pub type DebugContext = @mut _DebugContext;\n+\n+struct _DebugContext {\n     names: namegen,\n     crate_file: ~str,\n     builder: DIBuilderRef,\n-    \n-    created_files: @mut HashMap<~str, DIFile>,\n-    created_functions: @mut HashMap<ast::node_id, DISubprogram>,\n-    created_blocks: @mut HashMap<ast::node_id, DILexicalBlock>,\n-    created_types: @mut HashMap<uint, DIType>\n+    curr_loc: (int, int),\n+    created_files: HashMap<~str, DIFile>,\n+    created_functions: HashMap<ast::node_id, DISubprogram>,\n+    created_blocks: HashMap<ast::node_id, DILexicalBlock>,\n+    created_types: HashMap<uint, DIType>\n }\n \n /** Create new DebugContext */\n pub fn mk_ctxt(llmod: ModuleRef, crate: ~str, intr: @ident_interner) -> DebugContext {\n     debug!(\"mk_ctxt\");\n-    let builder = unsafe { llvm::DIBuilder_new(llmod) };\n-    DebugContext {\n-        //llmetadata: @mut HashMap::new(),\n+    let builder = unsafe { llvm::LLVMDIBuilderCreate(llmod) };\n+    let dcx = @mut _DebugContext {\n         names: new_namegen(intr),\n         crate_file: crate,\n         builder: builder,\n-        created_files: @mut HashMap::new(),\n-        created_functions: @mut HashMap::new(),\n-        created_blocks: @mut HashMap::new(),\n-        created_types: @mut HashMap::new(),\n-}\n+        curr_loc: (-1, -1),\n+        created_files: HashMap::new(),\n+        created_functions: HashMap::new(),\n+        created_blocks: HashMap::new(),\n+        created_types: HashMap::new(),\n+    };\n+    return dcx;\n }\n \n #[inline(always)]\n-fn get_builder(cx: @CrateContext) -> DIBuilderRef {\n-    let dbg_cx = cx.dbg_cx.get_ref();\n-    return dbg_cx.builder;\n+fn dbg_cx(cx: &CrateContext) -> DebugContext\n+{\n+    return cx.dbg_cx.get();\n }\n \n fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray {\n     return unsafe { \n-        llvm::DIBuilder_getOrCreateArray(builder, vec::raw::to_ptr(arr), arr.len() as u32) \n+        llvm::LLVMDIBuilderGetOrCreateArray(builder, vec::raw::to_ptr(arr), arr.len() as u32) \n     };\n }\n \n /** Create any deferred debug metadata nodes */\n pub fn finalize(cx: @CrateContext) {\n     debug!(\"finalize\");\n     create_compile_unit(cx);\n-    unsafe {\n-        llvm::DIBuilder_finalize(get_builder(cx));\n-        llvm::DIBuilder_delete(get_builder(cx));\n+    let dcx = dbg_cx(cx);\n+    unsafe { \n+        llvm::LLVMDIBuilderFinalize(dcx.builder);\n+        llvm::LLVMDIBuilderDispose(dcx.builder);\n     };\n }\n \n@@ -123,52 +130,52 @@ fn get_file_path_and_dir(work_dir: &str, full_path: &str) -> (~str, ~str) {\n                        str::len(full_path)).to_owned()\n         } else {\n             full_path.to_owned()\n-    };\n+        };\n     \n     return (full_path, work_dir.to_owned());\n }\n \n fn create_compile_unit(cx: @CrateContext) {\n-    let crate_name: &str = cx.dbg_cx.get_ref().crate_file;\n+    let crate_name: &str = dbg_cx(cx).crate_file;\n \n     let (_, work_dir) = get_file_path_and_dir(\n         cx.sess.working_dir.to_str(), crate_name);\n         \n     let producer = fmt!(\"rustc version %s\", env!(\"CFG_VERSION\"));\n-\n+    \n     do as_c_str(crate_name) |crate_name| {\n     do as_c_str(work_dir) |work_dir| {\n     do as_c_str(producer) |producer| {\n     do as_c_str(\"\") |flags| {\n     do as_c_str(\"\") |split_name| { unsafe {\n-        llvm::DIBuilder_createCompileUnit(get_builder(cx),\n-            DW_LANG_RUST as c_uint, crate_name, work_dir, producer,\n+        llvm::LLVMDIBuilderCreateCompileUnit(dbg_cx(cx).builder,\n+            DW_LANG_RUST as c_uint, crate_name, work_dir, producer, \n             cx.sess.opts.optimize != session::No,\n             flags, 0, split_name);\n     }}}}}};\n }\n \n fn create_file(cx: @CrateContext, full_path: &str) -> DIFile {\n-    let mut dbg_cx = cx.dbg_cx.get_ref();\n-\n-    match dbg_cx.created_files.find(&full_path.to_owned()) {\n+    let dcx = dbg_cx(cx);\n+    \n+    match dcx.created_files.find(&full_path.to_owned()) {\n         Some(file_md) => return *file_md,\n         None => ()\n     }\n \n     debug!(\"create_file: %s\", full_path);\n-\n+    \n     let (file_path, work_dir) =\n         get_file_path_and_dir(cx.sess.working_dir.to_str(),\n                               full_path);\n \n-    let file_md =\n+    let file_md = \n         do as_c_str(file_path) |file_path| {\n         do as_c_str(work_dir) |work_dir| { unsafe {\n-            llvm::DIBuilder_createFile(get_builder(cx), file_path, work_dir)\n+            llvm::LLVMDIBuilderCreateFile(dcx.builder, file_path, work_dir)\n         }}};\n-\n-    dbg_cx.created_files.insert(full_path.to_owned(), file_md);\n+        \n+    dcx.created_files.insert(full_path.to_owned(), file_md);\n     return file_md;\n }\n \n@@ -178,8 +185,9 @@ fn line_from_span(cm: @codemap::CodeMap, sp: span) -> uint {\n \n fn create_block(bcx: block) -> DILexicalBlock {\n     let mut bcx = bcx;\n-    let mut dbg_cx = bcx.ccx().dbg_cx.get_ref();    \n-\n+    let cx = bcx.ccx();\n+    let mut dcx = dbg_cx(cx);\n+    \n     while bcx.node_info.is_none() {\n         match bcx.parent {\n           Some(b) => bcx = b,\n@@ -188,33 +196,33 @@ fn create_block(bcx: block) -> DILexicalBlock {\n     }\n     let sp = bcx.node_info.get().span;\n     let id = bcx.node_info.get().id;\n-\n-    match dbg_cx.created_blocks.find(&id) {\n+    \n+    match dcx.created_blocks.find(&id) {\n         Some(block) => return *block,\n         None => ()\n     }\n-\n+    \n     debug!(\"create_block: %s\", bcx.sess().codemap.span_to_str(sp));\n-\n+    \n     let start = bcx.sess().codemap.lookup_char_pos(sp.lo);\n-    let end = bcx.sess().codemap.lookup_char_pos(sp.hi);\n+    //let end = bcx.sess().codemap.lookup_char_pos(sp.hi);\n     \n     let parent = match bcx.parent {\n         None => create_function(bcx.fcx),\n         Some(b) => create_block(b)\n     };\n-\n+    \n     let file_md = create_file(bcx.ccx(), start.file.name);\n     \n-    let block_md = unsafe {\n+    let block_md = unsafe { \n         llvm::LLVMDIBuilderCreateLexicalBlock(\n-            dcx.builder,\n-            parent, file_md,\n+            dcx.builder, \n+            parent, file_md, \n             start.line.to_int() as c_uint, start.col.to_int() as c_uint) \n     };\n-\n-    dbg_cx.created_blocks.insert(id, block_md);\n-\n+    \n+    dcx.created_blocks.insert(id, block_md);\n+    \n     return block_md;\n }\n \n@@ -225,14 +233,14 @@ fn size_and_align_of(cx: @CrateContext, t: ty::t) -> (uint, uint) {\n }\n \n fn create_basic_type(cx: @CrateContext, t: ty::t, span: span) -> DIType{\n-    let mut dbg_cx = cx.dbg_cx.get_ref();\n+    let mut dcx = dbg_cx(cx);\n     let ty_id = ty::type_id(t);\n-    match dbg_cx.created_types.find(&ty_id) {\n+    match dcx.created_types.find(&ty_id) {\n         Some(ty_md) => return *ty_md,\n         None => ()\n     }\n-\n-    debug!(\"create_basic_type: %?\", ty::get(t));\n+    \n+    debug!(\"create_basic_type: %?\", ty::get(t));    \n \n     let (name, encoding) = match ty::get(t).sty {\n         ty::ty_nil | ty::ty_bot => (~\"uint\", DW_ATE_unsigned),\n@@ -263,19 +271,19 @@ fn create_basic_type(cx: @CrateContext, t: ty::t, span: span) -> DIType{\n     let (size, align) = size_and_align_of(cx, t);\n     let ty_md = do as_c_str(name) |name| { unsafe {\n             llvm::LLVMDIBuilderCreateBasicType(\n-                dcx.builder, name,\n+                dcx.builder, name, \n                 size * 8 as u64, align * 8 as u64, encoding as c_uint)\n         }};\n-\n-    dbg_cx.created_types.insert(ty_id, ty_md);\n+        \n+    dcx.created_types.insert(ty_id, ty_md);\n     return ty_md;\n }\n \n fn create_pointer_type(cx: @CrateContext, t: ty::t, span: span, pointee: DIType) -> DIType {\n     let (size, align) = size_and_align_of(cx, t);\n     let name = ty_to_str(cx.tcx, t);\n     let ptr_md = do as_c_str(name) |name| { unsafe {\n-        llvm::DIBuilder_createPointerType(get_builder(cx), \n+        llvm::LLVMDIBuilderCreatePointerType(dbg_cx(cx).builder, \n                 pointee, size * 8 as u64, align * 8 as u64, name)\n     }};\n     return ptr_md;\n@@ -304,23 +312,24 @@ impl StructContext {\n         };\n         return scx;\n     }\n-\n+    \n     fn add_member(&mut self, name: &str, line: uint, size: uint, align: uint, ty: DIType) {\n         let mem_t = do as_c_str(name) |name| { unsafe {\n-            llvm::DIBuilder_createMemberType(get_builder(self.cx), \n-                ptr::null(), name, self.file, line as c_uint,\n+            llvm::LLVMDIBuilderCreateMemberType(dbg_cx(self.cx).builder, \n+                ptr::null(), name, self.file, line as c_uint, \n                 size * 8 as u64, align * 8 as u64, self.total_size as u64, \n                 0, ty)\n             }};\n         // XXX What about member alignment???\n         self.members.push(mem_t);\n         self.total_size += size * 8;\n     }\n-\n+    \n     fn finalize(&self) -> DICompositeType {\n-        let members_md = create_DIArray(get_builder(self.cx), self.members);\n-\n-        let struct_md =\n+        let dcx = dbg_cx(self.cx);\n+        let members_md = create_DIArray(dcx.builder, self.members);\n+        \n+        let struct_md = \n             do as_c_str(self.name) |name| { unsafe {\n                 llvm::LLVMDIBuilderCreateStructType(\n                     dcx.builder, ptr::null(), name, \n@@ -336,7 +345,7 @@ fn create_struct(cx: @CrateContext, t: ty::t, fields: ~[ty::field], span: span)\n     let fname = filename_from_span(cx, span);\n     let file_md = create_file(cx, fname);\n     let line = line_from_span(cx.sess.codemap, span);\n-\n+    \n     let mut scx = StructContext::create(cx, file_md, ty_to_str(cx.tcx, t), line);\n     for fields.each |field| {\n         let field_t = field.mt.ty;\n@@ -350,24 +359,24 @@ fn create_struct(cx: @CrateContext, t: ty::t, fields: ~[ty::field], span: span)\n }\n \n // returns (void* type as a ValueRef, size in bytes, align in bytes)\n-fn voidptr() -> (DIDerivedType, uint, uint) {\n+fn voidptr(cx: @CrateContext) -> (DIDerivedType, uint, uint) {\n     let size = sys::size_of::<ValueRef>();\n     let align = sys::min_align_of::<ValueRef>();\n-    let vp = ptr::null();\n-    /*\n-    let vp = create_derived_type(PointerTypeTag, null, ~\"\", 0,\n-                                 size, align, 0, null);\n-    */\n+    let vp = do as_c_str(\"*void\") |name| { unsafe {\n+            llvm::LLVMDIBuilderCreatePointerType(dbg_cx(cx).builder, ptr::null(), \n+                size*8 as u64, align*8 as u64, name)\n+        }};\n     return (vp, size, align);\n }\n \n fn create_tuple(cx: @CrateContext, t: ty::t, elements: &[ty::t], span: span) -> DICompositeType {\n+    let dcx = dbg_cx(cx);\n     let fname = filename_from_span(cx, span);\n     let file_md = create_file(cx, fname);\n \n     let name = (cx.sess.str_of((dcx.names)(\"tuple\"))).to_owned();\n     let mut scx = StructContext::create(cx, file_md, name, loc.line);\n-\n+           \n     for elements.each |element| {\n         let ty_md = create_ty(cx, *element, span);\n         let (size, align) = size_and_align_of(cx, *element);\n@@ -384,13 +393,13 @@ fn create_boxed_type(cx: @CrateContext, contents: ty::t,\n     let int_t = ty::mk_int();\n     let refcount_type = create_basic_type(cx, int_t, span);\n     let name = ty_to_str(cx.tcx, contents);\n-\n+    \n     let mut scx = StructContext::create(cx, file_md, fmt!(\"box<%s>\", name), 0);\n     scx.add_member(\"refcnt\", 0, sys::size_of::<uint>(),\n                sys::min_align_of::<uint>(), refcount_type);\n     // the tydesc and other pointers should be irrelevant to the\n     // debugger, so treat them as void* types\n-    let (vp, vpsize, vpalign) = voidptr();\n+    let (vp, vpsize, vpalign) = voidptr(cx);\n     scx.add_member(\"tydesc\", 0, vpsize, vpalign, vp);\n     scx.add_member(\"prev\", 0, vpsize, vpalign, vp);\n     scx.add_member(\"next\", 0, vpsize, vpalign, vp);\n@@ -401,40 +410,42 @@ fn create_boxed_type(cx: @CrateContext, contents: ty::t,\n \n fn create_fixed_vec(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t,\n                     len: uint, span: span) -> DIType {\n+    let dcx = dbg_cx(cx);\n     let elem_ty_md = create_ty(cx, elem_t, span);\n     let fname = filename_from_span(cx, span);\n     let file_md = create_file(cx, fname);\n     let (size, align) = size_and_align_of(cx, elem_t);\n \n-    let subrange = unsafe {\n-        llvm::DIBuilder_getOrCreateSubrange(get_builder(cx), 0_i64, (len-1) as i64) };\n+    let subrange = unsafe { \n+        llvm::LLVMDIBuilderGetOrCreateSubrange(dcx.builder, 0_i64, (len-1) as i64) };\n \n-    let subscripts = create_DIArray(get_builder(cx), [subrange]);\n-    return unsafe {\n-        llvm::DIBuilder_createVectorType(get_builder(cx), \n+    let subscripts = create_DIArray(dcx.builder, [subrange]);\n+    return unsafe { \n+        llvm::LLVMDIBuilderCreateVectorType(dcx.builder, \n             size * len as u64, align as u64, elem_ty_md, subscripts) \n     };\n }\n \n fn create_boxed_vec(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t,\n                     vec_ty_span: codemap::span) -> DICompositeType {\n+    let dcx = dbg_cx(cx);\n     let fname = filename_from_span(cx, vec_ty_span);\n     let file_md = create_file(cx, fname);\n     let elem_ty_md = create_ty(cx, elem_t, vec_ty_span);\n-\n+    \n     let mut vec_scx = StructContext::create(cx, file_md, ty_to_str(cx.tcx, vec_t), 0);\n-\n+    \n     let size_t_type = create_basic_type(cx, ty::mk_uint(), vec_ty_span);\n     vec_scx.add_member(\"fill\", 0, sys::size_of::<libc::size_t>(),\n                sys::min_align_of::<libc::size_t>(), size_t_type);\n     vec_scx.add_member(\"alloc\", 0, sys::size_of::<libc::size_t>(),\n                sys::min_align_of::<libc::size_t>(), size_t_type);\n-    let subrange = unsafe { llvm::DIBuilder_getOrCreateSubrange(get_builder(cx), 0_i64, 0_i64) };\n+    let subrange = unsafe { llvm::LLVMDIBuilderGetOrCreateSubrange(dcx.builder, 0_i64, 0_i64) };\n     let (arr_size, arr_align) = size_and_align_of(cx, elem_t);\n     let name = fmt!(\"[%s]\", ty_to_str(cx.tcx, elem_t));\n-\n-    let subscripts = create_DIArray(get_builder(cx), [subrange]);\n-    let data_ptr = unsafe { llvm::DIBuilder_createVectorType(get_builder(cx), \n+    \n+    let subscripts = create_DIArray(dcx.builder, [subrange]);\n+    let data_ptr = unsafe { llvm::LLVMDIBuilderCreateVectorType(dcx.builder, \n                 arr_size as u64, arr_align as u64, elem_ty_md, subscripts) };\n     vec_scx.add_member(\"data\", 0, 0, // clang says the size should be 0\n                sys::min_align_of::<u8>(), data_ptr);\n@@ -445,7 +456,7 @@ fn create_boxed_vec(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t,\n     let refcount_type = create_basic_type(cx, int_t, vec_ty_span);\n     box_scx.add_member(\"refcnt\", 0, sys::size_of::<uint>(),\n                sys::min_align_of::<uint>(), refcount_type);\n-    let (vp, vpsize, vpalign) = voidptr();\n+    let (vp, vpsize, vpalign) = voidptr(cx);\n     box_scx.add_member(\"tydesc\", 0, vpsize, vpalign, vp);\n     box_scx.add_member(\"prev\", 0, vpsize, vpalign, vp);\n     box_scx.add_member(\"next\", 0, vpsize, vpalign, vp);\n@@ -462,9 +473,9 @@ fn create_vec_slice(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t, span: span)\n     let elem_ty_md = create_ty(cx, elem_t, span);\n     let uint_type = create_basic_type(cx, ty::mk_uint(), span);\n     let elem_ptr = create_pointer_type(cx, elem_t, span, elem_ty_md);\n-\n+    \n     let mut scx = StructContext::create(cx, file_md, ty_to_str(cx.tcx, vec_t), 0);\n-    let (_, ptr_size, ptr_align) = voidptr();\n+    let (_, ptr_size, ptr_align) = voidptr(cx);\n     scx.add_member(\"vec\", 0, ptr_size, ptr_align, elem_ptr);\n     scx.add_member(\"length\", 0, sys::size_of::<uint>(),\n                sys::min_align_of::<uint>(), uint_type);\n@@ -473,24 +484,25 @@ fn create_vec_slice(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t, span: span)\n \n fn create_fn_ty(cx: @CrateContext, fn_ty: ty::t, inputs: ~[ty::t], output: ty::t,\n                 span: span) -> DICompositeType {\n+    let dcx = dbg_cx(cx);\n     let fname = filename_from_span(cx, span);\n     let file_md = create_file(cx, fname);\n-    let (vp, _, _) = voidptr();\n+    let (vp, _, _) = voidptr(cx);\n     let output_md = create_ty(cx, output, span);\n     let output_ptr_md = create_pointer_type(cx, output, span, output_md);\n     let inputs_vals = do inputs.map |arg| { create_ty(cx, *arg, span) };\n     let members = ~[output_ptr_md, vp] + inputs_vals;\n-\n-    return unsafe {\n-        llvm::DIBuilder_createSubroutineType(get_builder(cx), file_md, \n-            create_DIArray(get_builder(cx), members)) \n+    \n+    return unsafe { \n+        llvm::LLVMDIBuilderCreateSubroutineType(dcx.builder, file_md, \n+            create_DIArray(dcx.builder, members)) \n     };\n }\n \n fn create_ty(cx: @CrateContext, t: ty::t, span: span) -> DIType {\n-    let mut dbg_cx = cx.dbg_cx.get_ref();\n+    let mut dcx = dbg_cx(cx);\n     let ty_id = ty::type_id(t);\n-    match dbg_cx.created_types.find(&ty_id) {\n+    match dcx.created_types.find(&ty_id) {\n         Some(ty_md) => return *ty_md,\n         None => ()\n     }\n@@ -565,25 +577,16 @@ fn create_ty(cx: @CrateContext, t: ty::t, span: span) -> DIType {\n         },\n         _ => cx.sess.bug(~\"debuginfo: unexpected type in create_ty\")\n     };\n-\n-    dbg_cx.created_types.insert(ty_id, ty_md);\n+    \n+    dcx.created_types.insert(ty_id, ty_md);\n     return ty_md;\n }\n \n pub fn create_local_var(bcx: block, local: @ast::local) -> DIVariable {\n-    debug!(\"create_local_var\");\n     let cx = bcx.ccx();\n-    /*\n-    let cache = get_cache(cx);\n-    let tg = AutoVariableTag;\n-    match cached_metadata::<@Metadata<LocalVarMetadata>>(\n-        cache, tg, |md| md.data.id == local.node.id) {\n-      option::Some(md) => return md,\n-      option::None => ()\n-    }\n-    */\n+    let dcx = dbg_cx(cx);\n \n-    let name = match local.node.pat.node {\n+    let ident = match local.node.pat.node {\n       ast::pat_ident(_, pth, _) => ast_util::path_to_ident(pth),\n       // FIXME this should be handled (#2533)\n       _ => fail!(\"no single variable name for local\")\n@@ -594,59 +597,51 @@ pub fn create_local_var(bcx: block, local: @ast::local) -> DIVariable {\n     let loc = span_start(cx, local.span);\n     let ty = node_id_type(bcx, local.node.id);\n     let tymd = create_ty(cx, ty, local.node.ty.span);\n-    let filemd = create_file(cx, /*bad*/copy loc.file.name);\n+    let filemd = create_file(cx, loc.file.name);\n     let context = match bcx.parent {\n         None => create_function(bcx.fcx),\n         Some(_) => create_block(bcx)\n     };\n-\n-    let mdval = do as_c_str(*cx.sess.str_of(name)) |name| { unsafe {\n-        llvm::DIBuilder_createLocalVariable(get_builder(cx), AutoVariableTag as u32,\n-                 ptr::null(), name, filemd, loc.line as c_uint, tymd, false, 0, 0)\n+    \n+    let var_md = do as_c_str(name) |name| { unsafe {\n+        llvm::LLVMDIBuilderCreateLocalVariable(\n+            dcx.builder, AutoVariableTag as u32,\n+            context, name, filemd, \n+            loc.line as c_uint, tymd, false, 0, 0)\n         }};\n-\n-    let llptr = match bcx.fcx.lllocals.find(&local.node.id) {\n-      option::Some(&local_mem(v)) => v,\n-      option::Some(_) => {\n-        bcx.tcx().sess.span_bug(local.span, \"local is bound to something weird\");\n+    \n+    // FIXME(#6814) Should use `pat_util::pat_bindings` for pats like (a, b) etc\n+    let llptr = match bcx.fcx.lllocals.find_copy(&local.node.pat.id) {\n+        Some(v) => v,\n+        None => {\n+            bcx.tcx().sess.span_bug(\n+                local.span,\n+                fmt!(\"No entry in lllocals table for %?\", local.node.id));\n         }\n-      option::None => {\n-        match bcx.fcx.lllocals.get_copy(&local.node.pat.id) {\n-          local_imm(v) => v,\n-          _ => bcx.tcx().sess.span_bug(local.span, \"local is bound to something weird\")\n-    }\n-      }\n     };\n-    /*\n-    llvm::DIBuilder_insertDeclare(get_builder(cx), llptr, mdval, \n-\n-    let declargs = ~[llmdnode(~[llptr]), mdnode];\n-    trans::build::Call(bcx, *cx.intrinsics.get(&~\"llvm.dbg.declare\"),\n-                       declargs);\n-    */\n-    return mdval;\n+    unsafe {\n+        llvm::LLVMDIBuilderInsertDeclareAtEnd(dcx.builder, llptr, var_md, bcx.llbb);\n     }\n+    return var_md;\n+}\n \n pub fn create_arg(bcx: block, arg: ast::arg, sp: span) -> Option<DIVariable> {\n     debug!(\"create_arg\");\n     let fcx = bcx.fcx, cx = *fcx.ccx;\n-    /*\n-    let cache = get_cache(cx);\n-    let tg = ArgVariableTag;\n-    match cached_metadata::<@Metadata<ArgumentMetadata>>(\n-        cache, ArgVariableTag, |md| md.data.id == arg.id) {\n-      option::Some(md) => return Some(md),\n-      option::None => ()\n-    }\n-    */\n+    let dcx = dbg_cx(cx);\n \n     let loc = cx.sess.codemap.lookup_char_pos(sp.lo);\n     if \"<intrinsic>\" == loc.file.name {\n         return None;\n     }\n+    // FIXME: Disabled for now because \"node_id_type(bcx, arg.id)\" below blows up:\n+    // \"error: internal compiler error: node_id_to_type: no type for node `arg (id=10)`\"\n+    // (same as https://github.com/mozilla/rust/issues/5848)\n+    return None;\n+    \n     let ty = node_id_type(bcx, arg.id);\n     let tymd = create_ty(cx, ty, arg.ty.span);\n-    let filemd = create_file(cx, /*bad*/copy loc.file.name);\n+    let filemd = create_file(cx, loc.file.name);\n     let context = create_function(bcx.fcx);\n \n     match arg.pat.node {\n@@ -656,19 +651,15 @@ pub fn create_arg(bcx: block, arg: ast::arg, sp: span) -> Option<DIVariable> {\n             let name: &str = cx.sess.str_of(*ident);\n             let mdnode = do as_c_str(name) |name| { unsafe {\n                 llvm::LLVMDIBuilderCreateLocalVariable(dcx.builder,\n-                    ArgVariableTag as u32, context, name,\n+                    ArgVariableTag as u32, context, name, \n                     filemd, loc.line as c_uint, tymd, false, 0, 0)\n-                    // XXX need to pass a real argument number\n+                    // FIXME need to pass a real argument number\n             }};\n-\n-            let llptr = match fcx.llargs.get_copy(&arg.id) {\n-              local_mem(v) | local_imm(v) => v,\n-            };\n-            \n-            /*\n-            llvm::DIBuilder_insertDeclare(get_builder(cx), mdnode, llptr, mdnode\n-            */\n-            \n+                \n+            let llptr = fcx.llargs.get_copy(&arg.id);\n+            unsafe {\n+                llvm::LLVMDIBuilderInsertDeclareAtEnd(dcx.builder, llptr, mdnode, bcx.llbb);\n+            }\n             return Some(mdnode);\n         }\n         _ => {\n@@ -684,9 +675,23 @@ fn create_debug_loc(line: int, col: int, scope: DIScope) -> DILocation {\n     }\n }\n \n+pub fn update_source_pos(bcx: block, sp: span) {\n+    if !bcx.sess().opts.debuginfo || (*sp.lo == 0 && *sp.hi == 0) {\n+        return;\n+    }\n+    \n+    debug!(\"update_source_pos: %s\", bcx.sess().codemap.span_to_str(sp));\n+\n     let cm = bcx.sess().codemap;\n-    let blockmd = create_block(bcx);\n     let loc = cm.lookup_char_pos(sp.lo);\n+    let cx = bcx.ccx();\n+    let mut dcx = dbg_cx(cx);\n+    if (loc.line.to_int(), loc.col.to_int()) == dcx.curr_loc {\n+        return;\n+    }\n+    \n+    dcx.curr_loc = (loc.line.to_int(), loc.col.to_int());\n+    let blockmd = create_block(bcx);\n     let dbgscope = create_debug_loc(loc.line.to_int(), loc.col.to_int(), blockmd);\n     unsafe {\n         llvm::LLVMSetCurrentDebugLocation(trans::build::B(bcx), dbgscope);\n@@ -695,7 +700,7 @@ fn create_debug_loc(line: int, col: int, scope: DIScope) -> DILocation {\n \n pub fn create_function(fcx: fn_ctxt) -> DISubprogram {\n     let cx = *fcx.ccx;\n-    let mut dbg_cx = cx.dbg_cx.get_ref();\n+    let mut dcx = dbg_cx(cx);\n     let fcx = &mut *fcx;\n     let sp = fcx.span.get();\n \n@@ -714,16 +719,16 @@ pub fn create_function(fcx: fn_ctxt) -> DISubprogram {\n       ast_map::node_expr(expr) => {\n         match expr.node {\n           ast::expr_fn_block(ref decl, _) => {\n-            ((dbg_cx.names)(\"fn\"), decl.output, expr.id)\n+            ((dcx.names)(\"fn\"), decl.output, expr.id)\n           }\n           _ => fcx.ccx.sess.span_bug(expr.span,\n                   \"create_function: expected an expr_fn_block here\")\n         }\n       }\n       _ => fcx.ccx.sess.bug(\"create_function: unexpected sort of node\")\n     };\n-\n-    match dbg_cx.created_functions.find(&id) {\n+    \n+    match dcx.created_functions.find(&id) {\n         Some(fn_md) => return *fn_md,\n         None => ()\n     }\n@@ -742,27 +747,27 @@ pub fn create_function(fcx: fn_ctxt) -> DISubprogram {\n     } else {\n         ptr::null()\n     };\n-\n+    \n     let fn_ty = unsafe {\n-        llvm::DIBuilder_createSubroutineType(get_builder(cx),\n-            file_md, create_DIArray(get_builder(cx), [ret_ty_md]))\n+        llvm::LLVMDIBuilderCreateSubroutineType(dcx.builder,\n+            file_md, create_DIArray(dcx.builder, [ret_ty_md]))\n         };\n-\n-    let fn_md =\n+    \n+    let fn_md = \n         do as_c_str(cx.sess.str_of(ident)) |name| {\n         do as_c_str(cx.sess.str_of(ident)) |linkage| { unsafe {\n             llvm::LLVMDIBuilderCreateFunction(\n-                dcx.builder,\n-                file_md,\n-                name, linkage,\n-                file_md, loc.line as c_uint,\n-                fn_ty, false, true,\n-                loc.line as c_uint,\n+                dcx.builder, \n+                file_md, \n+                name, linkage, \n+                file_md, loc.line as c_uint, \n+                fn_ty, false, true, \n+                loc.line as c_uint, \n                 FlagPrototyped as c_uint,\n-                cx.sess.opts.optimize != session::No,\n+                cx.sess.opts.optimize != session::No, \n                 fcx.llfn, ptr::null(), ptr::null())\n             }}};\n-\n-    dbg_cx.created_functions.insert(id, fn_md);\n+            \n+    dcx.created_functions.insert(id, fn_md);\n     return fn_md;\n }"}, {"sha": "b7a67f984f7371376577e7fbdd2d1587f9b9e35c", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6cc318978796ca67e9350561601dee9931c1da12/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6cc318978796ca67e9350561601dee9931c1da12/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=6cc318978796ca67e9350561601dee9931c1da12", "patch": "@@ -567,19 +567,19 @@ typedef DIBuilder* DIBuilderRef;\n template<typename DIT>\n DIT unwrapDI(LLVMValueRef ref) { return DIT(ref ? unwrap<MDNode>(ref) : NULL); }\n \n-extern \"C\" DIBuilderRef DIBuilder_new(LLVMModuleRef M) {\n+extern \"C\" DIBuilderRef LLVMDIBuilderCreate(LLVMModuleRef M) {\n     return new DIBuilder(*unwrap(M));\n }\n \n-extern \"C\" void DIBuilder_delete(DIBuilderRef Builder) {\n+extern \"C\" void LLVMDIBuilderDispose(DIBuilderRef Builder) {\n     delete Builder;\n }\n \n-extern \"C\" void DIBuilder_finalize(DIBuilderRef Builder) {\n+extern \"C\" void LLVMDIBuilderFinalize(DIBuilderRef Builder) {\n     Builder->finalize();\n }\n \n-extern \"C\" void DIBuilder_createCompileUnit(\n+extern \"C\" void LLVMDIBuilderCreateCompileUnit(\n     DIBuilderRef Builder,\n     unsigned Lang,\n     const char* File,\n@@ -593,14 +593,14 @@ extern \"C\" void DIBuilder_createCompileUnit(\n         Flags, RuntimeVer, SplitName);\n }\n \n-extern \"C\" LLVMValueRef DIBuilder_createFile(\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateFile(\n     DIBuilderRef Builder,\n     const char* Filename,\n     const char* Directory) {\n     return wrap(Builder->createFile(Filename, Directory));\n }\n \n-extern \"C\" LLVMValueRef DIBuilder_createSubroutineType(\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateSubroutineType(\n     DIBuilderRef Builder,\n     LLVMValueRef File, \n     LLVMValueRef ParameterTypes) {\n@@ -609,7 +609,7 @@ extern \"C\" LLVMValueRef DIBuilder_createSubroutineType(\n         unwrapDI<DIArray>(ParameterTypes)));\n }\n \n-extern \"C\" LLVMValueRef DIBuilder_createFunction(\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateFunction(\n     DIBuilderRef Builder,\n     LLVMValueRef Scope, \n     const char* Name,\n@@ -635,7 +635,7 @@ extern \"C\" LLVMValueRef DIBuilder_createFunction(\n         unwrapDI<MDNode*>(Decl)));\n }\n \n-extern \"C\" LLVMValueRef DIBuilder_createBasicType(\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateBasicType(\n     DIBuilderRef Builder,\n     const char* Name,\n     uint64_t SizeInBits,\n@@ -646,7 +646,7 @@ extern \"C\" LLVMValueRef DIBuilder_createBasicType(\n         AlignInBits, Encoding));\n }\n     \n-extern \"C\" LLVMValueRef DIBuilder_createPointerType(\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreatePointerType(\n     DIBuilderRef Builder,\n     LLVMValueRef PointeeTy,\n     uint64_t SizeInBits,\n@@ -656,7 +656,7 @@ extern \"C\" LLVMValueRef DIBuilder_createPointerType(\n         unwrapDI<DIType>(PointeeTy), SizeInBits, AlignInBits, Name));\n }\n \n-extern \"C\" LLVMValueRef DIBuilder_createStructType(\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateStructType(\n     DIBuilderRef Builder,\n     LLVMValueRef Scope,\n     const char* Name,\n@@ -678,7 +678,7 @@ extern \"C\" LLVMValueRef DIBuilder_createStructType(\n         unwrapDI<MDNode*>(VTableHolder)));\n }\n \n-extern \"C\" LLVMValueRef DIBuilder_createMemberType(\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateMemberType(\n     DIBuilderRef Builder,\n     LLVMValueRef Scope,\n     const char* Name,\n@@ -696,7 +696,7 @@ extern \"C\" LLVMValueRef DIBuilder_createMemberType(\n         unwrapDI<DIType>(Ty)));\n }\n     \n-extern \"C\" LLVMValueRef DIBuilder_createLexicalBlock(\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateLexicalBlock(\n     DIBuilderRef Builder,\n     LLVMValueRef Scope,\n     LLVMValueRef File,\n@@ -707,7 +707,7 @@ extern \"C\" LLVMValueRef DIBuilder_createLexicalBlock(\n         unwrapDI<DIFile>(File), Line, Col));\n }\n     \n-extern \"C\" LLVMValueRef DIBuilder_createLocalVariable(\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateLocalVariable(\n     DIBuilderRef Builder,\n     unsigned Tag,\n     LLVMValueRef Scope,\n@@ -725,7 +725,7 @@ extern \"C\" LLVMValueRef DIBuilder_createLocalVariable(\n         unwrapDI<DIType>(Ty), AlwaysPreserve, Flags, ArgNo));\n }\n \n-extern \"C\" LLVMValueRef DIBuilder_createVectorType(\n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateVectorType(\n     DIBuilderRef Builder,\n     uint64_t Size,  \n     uint64_t AlignInBits,  \n@@ -736,22 +736,33 @@ extern \"C\" LLVMValueRef DIBuilder_createVectorType(\n         unwrapDI<DIArray>(Subscripts)));\n }\n \n-extern \"C\" LLVMValueRef DIBuilder_getOrCreateSubrange(\n+extern \"C\" LLVMValueRef LLVMDIBuilderGetOrCreateSubrange(\n     DIBuilderRef Builder, \n     int64_t Lo, \n     int64_t Count) {\n     return wrap(Builder->getOrCreateSubrange(Lo, Count));\n }\n \n-extern \"C\" LLVMValueRef DIBuilder_getOrCreateArray(\n+extern \"C\" LLVMValueRef LLVMDIBuilderGetOrCreateArray(\n     DIBuilderRef Builder,\n     LLVMValueRef* Ptr, \n     unsigned Count) {\n     return wrap(Builder->getOrCreateArray(\n         ArrayRef<Value*>(reinterpret_cast<Value**>(Ptr), Count)));\n }\n \n-extern \"C\" LLVMValueRef DIBuilder_insertDeclare(\n+extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd(\n+    DIBuilderRef Builder,\n+    LLVMValueRef Val,\n+    LLVMValueRef VarInfo,\n+    LLVMBasicBlockRef InsertAtEnd) {\n+    return wrap(Builder->insertDeclare(\n+        unwrap(Val), \n+        unwrapDI<DIVariable>(VarInfo), \n+        unwrap(InsertAtEnd)));\n+}\n+\n+extern \"C\" LLVMValueRef LLVMDIBuilderInsertDeclareBefore(\n     DIBuilderRef Builder,\n     LLVMValueRef Val,\n     LLVMValueRef VarInfo,"}, {"sha": "d1ed69feb04b6ca4fd2e11e853df1392d26d6d63", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6cc318978796ca67e9350561601dee9931c1da12/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/6cc318978796ca67e9350561601dee9931c1da12/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=6cc318978796ca67e9350561601dee9931c1da12", "patch": "@@ -588,20 +588,21 @@ LLVMInlineAsm\n LLVMInitializePasses\n LLVMAddPass\n LLVMCreatePass\n-DIBuilder_new\n-DIBuilder_delete\n-DIBuilder_finalize\n-DIBuilder_createCompileUnit\n-DIBuilder_createLocalVariable\n-DIBuilder_createFunction\n-DIBuilder_createFile\n-DIBuilder_createLexicalBlock\n-DIBuilder_createBasicType\n-DIBuilder_createPointerType\n-DIBuilder_createMemberType\n-DIBuilder_createStructType\n-DIBuilder_getOrCreateSubrange\n-DIBuilder_createVectorType\n-DIBuilder_createSubroutineType\n-DIBuilder_getOrCreateArray\n-DIBuilder_insertDeclare\n+LLVMDIBuilderCreate\n+LLVMDIBuilderDispose\n+LLVMDIBuilderFinalize\n+LLVMDIBuilderCreateCompileUnit\n+LLVMDIBuilderCreateLocalVariable\n+LLVMDIBuilderCreateFunction\n+LLVMDIBuilderCreateFile\n+LLVMDIBuilderCreateLexicalBlock\n+LLVMDIBuilderCreateBasicType\n+LLVMDIBuilderCreatePointerType\n+LLVMDIBuilderCreateMemberType\n+LLVMDIBuilderCreateStructType\n+LLVMDIBuilderGetOrCreateSubrange\n+LLVMDIBuilderCreateVectorType\n+LLVMDIBuilderCreateSubroutineType\n+LLVMDIBuilderGetOrCreateArray\n+LLVMDIBuilderInsertDeclareAtEnd\n+LLVMDIBuilderInsertDeclareBefore"}]}