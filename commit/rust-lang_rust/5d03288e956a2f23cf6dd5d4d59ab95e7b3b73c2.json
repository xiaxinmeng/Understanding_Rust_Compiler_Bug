{"sha": "5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMDMyODhlOTU2YTJmMjNjZjZkZDVkNGQ1OWFiOTVlN2IzYjczYzI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-13T09:42:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-13T09:42:33Z"}, "message": "Rollup merge of #39024 - stjepang:owned-to-string, r=steveklabnik\n\nChange `to_owned` to `to_string` in docs\n\nWe should teach conversion from `str` to `String` using `to_string` rather than the legacy `to_owned`.", "tree": {"sha": "3f89d0b41d054ddfeac90ca4cc2a29368b2f6b17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f89d0b41d054ddfeac90ca4cc2a29368b2f6b17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2", "html_url": "https://github.com/rust-lang/rust/commit/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c9ac4f5a6827bf0ee8458a9d08642a8c62d55e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9ac4f5a6827bf0ee8458a9d08642a8c62d55e8", "html_url": "https://github.com/rust-lang/rust/commit/7c9ac4f5a6827bf0ee8458a9d08642a8c62d55e8"}, {"sha": "d5c3becf00452fd1d35e695494d7ae41dedb11d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5c3becf00452fd1d35e695494d7ae41dedb11d8", "html_url": "https://github.com/rust-lang/rust/commit/d5c3becf00452fd1d35e695494d7ae41dedb11d8"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "85e1e133b7d9afae99aa91de58c5d9aa18b0425e", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2", "patch": "@@ -1990,11 +1990,11 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map: BTreeMap<&str, String> = BTreeMap::new();\n-    /// let s = \"hoho\".to_owned();\n+    /// let s = \"hoho\".to_string();\n     ///\n     /// map.entry(\"poneyland\").or_insert_with(|| s);\n     ///\n-    /// assert_eq!(map[\"poneyland\"], \"hoho\".to_owned());\n+    /// assert_eq!(map[\"poneyland\"], \"hoho\".to_string());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {"}, {"sha": "78f3cd5576e1e9f8a77fe0de0804d8a81f144199", "filename": "src/libcore/any.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2", "patch": "@@ -101,7 +101,7 @@ pub trait Any: 'static {\n     ///\n     /// fn main() {\n     ///     assert_eq!(is_string(&0), false);\n-    ///     assert_eq!(is_string(&\"cookie monster\".to_owned()), true);\n+    ///     assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n     /// }\n     /// ```\n     #[unstable(feature = \"get_type_id\",\n@@ -154,7 +154,7 @@ impl Any {\n     ///\n     /// fn main() {\n     ///     is_string(&0);\n-    ///     is_string(&\"cookie monster\".to_owned());\n+    ///     is_string(&\"cookie monster\".to_string());\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -188,7 +188,7 @@ impl Any {\n     ///\n     /// fn main() {\n     ///     print_if_string(&0);\n-    ///     print_if_string(&\"cookie monster\".to_owned());\n+    ///     print_if_string(&\"cookie monster\".to_string());\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -219,7 +219,7 @@ impl Any {\n     ///\n     /// fn main() {\n     ///     let mut x = 10u32;\n-    ///     let mut s = \"starlord\".to_owned();\n+    ///     let mut s = \"starlord\".to_string();\n     ///\n     ///     modify_if_u32(&mut x);\n     ///     modify_if_u32(&mut s);\n@@ -259,7 +259,7 @@ impl Any+Send {\n     ///\n     /// fn main() {\n     ///     is_string(&0);\n-    ///     is_string(&\"cookie monster\".to_owned());\n+    ///     is_string(&\"cookie monster\".to_string());\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -285,7 +285,7 @@ impl Any+Send {\n     ///\n     /// fn main() {\n     ///     print_if_string(&0);\n-    ///     print_if_string(&\"cookie monster\".to_owned());\n+    ///     print_if_string(&\"cookie monster\".to_string());\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -309,7 +309,7 @@ impl Any+Send {\n     ///\n     /// fn main() {\n     ///     let mut x = 10u32;\n-    ///     let mut s = \"starlord\".to_owned();\n+    ///     let mut s = \"starlord\".to_string();\n     ///\n     ///     modify_if_u32(&mut x);\n     ///     modify_if_u32(&mut s);\n@@ -359,7 +359,7 @@ impl TypeId {\n     ///\n     /// fn main() {\n     ///     assert_eq!(is_string(&0), false);\n-    ///     assert_eq!(is_string(&\"cookie monster\".to_owned()), true);\n+    ///     assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "a314717a8772b222524bd660ca7b8248c1adbf60", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2", "patch": "@@ -1779,11 +1779,11 @@ impl<'a, K, V> Entry<'a, K, V> {\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map: HashMap<&str, String> = HashMap::new();\n-    /// let s = \"hoho\".to_owned();\n+    /// let s = \"hoho\".to_string();\n     ///\n     /// map.entry(\"poneyland\").or_insert_with(|| s);\n     ///\n-    /// assert_eq!(map[\"poneyland\"], \"hoho\".to_owned());\n+    /// assert_eq!(map[\"poneyland\"], \"hoho\".to_string());\n     /// ```\n     pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {\n         match self {"}, {"sha": "434f522cc1ea63c4264762b6cf1919e5e6ec2201", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=5d03288e956a2f23cf6dd5d4d59ab95e7b3b73c2", "patch": "@@ -388,12 +388,12 @@ impl Error {\n     /// impl MyError {\n     ///     fn new() -> MyError {\n     ///         MyError {\n-    ///             v: \"oh no!\".to_owned()\n+    ///             v: \"oh no!\".to_string()\n     ///         }\n     ///     }\n     ///\n     ///     fn change_message(&mut self, new_message: &str) {\n-    ///         self.v = new_message.to_owned();\n+    ///         self.v = new_message.to_string();\n     ///     }\n     /// }\n     ///"}]}