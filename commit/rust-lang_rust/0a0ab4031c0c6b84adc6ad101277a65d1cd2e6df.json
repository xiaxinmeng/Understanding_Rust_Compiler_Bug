{"sha": "0a0ab4031c0c6b84adc6ad101277a65d1cd2e6df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMGFiNDAzMWMwYzZiODRhZGM2YWQxMDEyNzdhNjVkMWNkMmU2ZGY=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T14:19:25Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-02T15:17:15Z"}, "message": "metadata: decoder: remove dead code", "tree": {"sha": "1b1ad874a4a0b37004a5e06ddfd9ab54ba0a160a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b1ad874a4a0b37004a5e06ddfd9ab54ba0a160a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a0ab4031c0c6b84adc6ad101277a65d1cd2e6df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0ab4031c0c6b84adc6ad101277a65d1cd2e6df", "html_url": "https://github.com/rust-lang/rust/commit/0a0ab4031c0c6b84adc6ad101277a65d1cd2e6df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a0ab4031c0c6b84adc6ad101277a65d1cd2e6df/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f8d1588e8f571079293f27b3e89b9595feeeef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8d1588e8f571079293f27b3e89b9595feeeef6", "html_url": "https://github.com/rust-lang/rust/commit/3f8d1588e8f571079293f27b3e89b9595feeeef6"}], "stats": {"total": 40, "additions": 1, "deletions": 39}, "files": [{"sha": "dc8acf63719d8258cdd9ac46142edc8ead1c8fbf", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0a0ab4031c0c6b84adc6ad101277a65d1cd2e6df/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a0ab4031c0c6b84adc6ad101277a65d1cd2e6df/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=0a0ab4031c0c6b84adc6ad101277a65d1cd2e6df", "patch": "@@ -279,13 +279,6 @@ fn item_region_param_defs(item_doc: ebml::Doc, cdata: Cmd)\n     Rc::new(v)\n }\n \n-fn item_ty_param_count(item: ebml::Doc) -> uint {\n-    let mut n = 0u;\n-    reader::tagged_docs(item, tag_items_data_item_ty_param_bounds,\n-                      |_p| { n += 1u; true } );\n-    n\n-}\n-\n fn enum_variant_ids(item: ebml::Doc, cdata: Cmd) -> Vec<ast::DefId> {\n     let mut ids: Vec<ast::DefId> = Vec::new();\n     let v = tag_items_data_item_variant;\n@@ -420,10 +413,6 @@ pub fn get_type(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt)\n     }\n }\n \n-pub fn get_type_param_count(data: &[u8], id: ast::NodeId) -> uint {\n-    item_ty_param_count(lookup_item(id, data))\n-}\n-\n pub fn get_impl_trait(cdata: Cmd,\n                       id: ast::NodeId,\n                       tcx: &ty::ctxt) -> Option<@ty::TraitRef>\n@@ -449,20 +438,6 @@ pub fn get_impl_vtables(cdata: Cmd,\n }\n \n \n-pub fn get_impl_method(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::NodeId,\n-                       name: ast::Ident) -> Option<ast::DefId> {\n-    let items = reader::get_doc(reader::Doc(cdata.data()), tag_items);\n-    let mut found = None;\n-    reader::tagged_docs(find_item(id, items), tag_item_impl_method, |mid| {\n-        let m_did = reader::with_doc_data(mid, parse_def_id);\n-        if item_name(&*intr, find_item(m_did.node, items)) == name {\n-            found = Some(translate_def_id(cdata, m_did));\n-        }\n-        true\n-    });\n-    found\n-}\n-\n pub fn get_symbol(data: &[u8], id: ast::NodeId) -> ~str {\n     return item_symbol(lookup_item(id, data));\n }\n@@ -475,14 +450,6 @@ pub enum DefLike {\n     DlField\n }\n \n-pub fn def_like_to_def(def_like: DefLike) -> ast::Def {\n-    match def_like {\n-        DlDef(def) => return def,\n-        DlImpl(..) => fail!(\"found impl in def_like_to_def\"),\n-        DlField => fail!(\"found field in def_like_to_def\")\n-    }\n-}\n-\n /// Iterates over the language items in the given crate.\n pub fn each_lang_item(cdata: Cmd, f: |ast::NodeId, uint| -> bool) -> bool {\n     let root = reader::Doc(cdata.data());\n@@ -1030,11 +997,6 @@ pub fn get_struct_fields(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::NodeId)\n     result\n }\n \n-pub fn get_item_visibility(cdata: Cmd, id: ast::NodeId)\n-                        -> ast::Visibility {\n-    item_visibility(lookup_item(id, cdata.data()))\n-}\n-\n fn get_meta_items(md: ebml::Doc) -> Vec<@ast::MetaItem> {\n     let mut items: Vec<@ast::MetaItem> = Vec::new();\n     reader::tagged_docs(md, tag_meta_item_word, |meta_item_doc| {\n@@ -1103,7 +1065,7 @@ fn list_crate_attributes(md: ebml::Doc, hash: &Svh,\n }\n \n pub fn get_crate_attributes(data: &[u8]) -> Vec<ast::Attribute> {\n-    return get_attributes(reader::Doc(data));\n+    get_attributes(reader::Doc(data))\n }\n \n #[deriving(Clone)]"}]}