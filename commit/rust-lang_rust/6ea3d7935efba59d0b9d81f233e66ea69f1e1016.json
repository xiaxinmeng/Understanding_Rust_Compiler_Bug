{"sha": "6ea3d7935efba59d0b9d81f233e66ea69f1e1016", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYTNkNzkzNWVmYmE1OWQwYjlkODFmMjMzZTY2ZWE2OWYxZTEwMTY=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-23T07:46:45Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-23T16:00:19Z"}, "message": "(core::str) replace byte_index[_from] with index[_from]", "tree": {"sha": "9a0b15de841f729a811fe8b5dedab0f94b6cba87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a0b15de841f729a811fe8b5dedab0f94b6cba87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ea3d7935efba59d0b9d81f233e66ea69f1e1016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea3d7935efba59d0b9d81f233e66ea69f1e1016", "html_url": "https://github.com/rust-lang/rust/commit/6ea3d7935efba59d0b9d81f233e66ea69f1e1016", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ea3d7935efba59d0b9d81f233e66ea69f1e1016/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "280633a7283c21c6d95a556816bfb698845c34d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/280633a7283c21c6d95a556816bfb698845c34d8", "html_url": "https://github.com/rust-lang/rust/commit/280633a7283c21c6d95a556816bfb698845c34d8"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "caaedab97c9a38e834899896c05df721db446b3d", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ea3d7935efba59d0b9d81f233e66ea69f1e1016/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea3d7935efba59d0b9d81f233e66ea69f1e1016/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=6ea3d7935efba59d0b9d81f233e66ea69f1e1016", "patch": "@@ -174,10 +174,10 @@ fn print(s: str) {\n }\n \n fn rest(s: str, start: uint) -> str {\n-    if (start >= str::len_chars(s)) {\n+    if (start >= str::len_bytes(s)) {\n         \"\"\n     } else {\n-        str::slice_chars(s, start, str::len_chars(s))\n+        str::slice(s, start, str::len_bytes(s))\n     }\n }\n \n@@ -686,10 +686,10 @@ fn cmd_install(c: cargo) unsafe {\n \n     if str::starts_with(target, \"uuid:\") {\n         let uuid = rest(target, 5u);\n-        alt str::index_chars(uuid, '/') {\n+        alt str::index(uuid, '/') {\n             option::some(idx) {\n-               let source = str::slice_chars(uuid, 0u, idx);\n-               uuid = str::slice_chars(uuid, idx + 1u, str::len_chars(uuid));\n+               let source = str::slice(uuid, 0u, idx);\n+               uuid = str::slice(uuid, idx + 1u, str::len_bytes(uuid));\n                install_uuid_specific(c, wd, source, uuid);\n             }\n             option::none {\n@@ -698,10 +698,10 @@ fn cmd_install(c: cargo) unsafe {\n         }\n     } else {\n         let name = target;\n-        alt str::index_chars(name, '/') {\n+        alt str::index(name, '/') {\n             option::some(idx) {\n-               let source = str::slice_chars(name, 0u, idx);\n-               name = str::slice_chars(name, idx + 1u, str::len_chars(name));\n+               let source = str::slice(name, 0u, idx);\n+               name = str::slice(name, idx + 1u, str::len_bytes(name));\n                install_named_specific(c, wd, source, name);\n             }\n             option::none {"}, {"sha": "abe5a242261a2fd0ebf0c8b4ef0b82237b8d0c48", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ea3d7935efba59d0b9d81f233e66ea69f1e1016/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea3d7935efba59d0b9d81f233e66ea69f1e1016/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=6ea3d7935efba59d0b9d81f233e66ea69f1e1016", "patch": "@@ -157,7 +157,7 @@ fn span_to_lines(sp: span, cm: codemap::codemap) -> @file_lines {\n \n fn get_line(fm: filemap, line: int) -> str unsafe {\n     let begin: uint = fm.lines[line].byte - fm.start_pos.byte;\n-    let end = alt str::byte_index_from(*fm.src, '\\n' as u8, begin,\n+    let end = alt str::index_from(*fm.src, '\\n', begin,\n                                   str::len_bytes(*fm.src)) {\n       some(e) { e }\n       none { str::len_bytes(*fm.src) }"}, {"sha": "8760403a77a2fe487c56d31a9f136a218dd25d25", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ea3d7935efba59d0b9d81f233e66ea69f1e1016/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea3d7935efba59d0b9d81f233e66ea69f1e1016/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=6ea3d7935efba59d0b9d81f233e66ea69f1e1016", "patch": "@@ -71,8 +71,10 @@ export\n \n    // Searching\n    index_chars,\n-   byte_index,\n-   byte_index_from,\n+   index,\n+   index_from,\n+   //byte_index,\n+   //byte_index_from,\n    rindex,\n    //rindex_chars,\n    find_chars,"}, {"sha": "32294f38fb94f8fb3bc852198d0821c2b6c54154", "filename": "src/libstd/json.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ea3d7935efba59d0b9d81f233e66ea69f1e1016/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea3d7935efba59d0b9d81f233e66ea69f1e1016/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=6ea3d7935efba59d0b9d81f233e66ea69f1e1016", "patch": "@@ -70,8 +70,8 @@ fn to_str(j: json) -> str {\n }\n \n fn rest(s: str) -> str {\n-    assert(str::len_chars(s) >= 1u);\n-    str::slice_chars(s, 1u, str::len_chars(s))\n+    assert(str::len_bytes(s) >= 1u);\n+    str::slice(s, 1u, str::len_bytes(s))\n }\n \n fn from_str_str(s: str) -> (option<json>, str) {\n@@ -99,7 +99,7 @@ fn from_str_str(s: str) -> (option<json>, str) {\n             cont;\n         } else if (c == '\"') {\n             ret (some(string(res)),\n-                 str::slice_chars(s, pos, str::len_chars(s)));\n+                 str::slice(s, pos, str::len_bytes(s)));\n         }\n         res = res + str::from_char(c);\n     }\n@@ -200,13 +200,13 @@ fn from_str_float(s: str) -> (option<json>, str) {\n             }\n             '.' { break; }\n             _ { ret (some(num(neg * res)),\n-                     str::slice_chars(s, opos, str::len_chars(s))); }\n+                     str::slice(s, opos, str::len_bytes(s))); }\n         }\n     }\n \n     if pos == len {\n         ret (some(num(neg * res)),\n-             str::slice_chars(s, pos, str::len_chars(s)));\n+             str::slice(s, pos, str::len_bytes(s)));\n     }\n \n     let dec = 1f;\n@@ -221,25 +221,25 @@ fn from_str_float(s: str) -> (option<json>, str) {\n                 res += (((c as int) - ('0' as int)) as float) * dec;\n             }\n             _ { ret (some(num(neg * res)),\n-                     str::slice_chars(s, opos, str::len_chars(s))); }\n+                     str::slice(s, opos, str::len_bytes(s))); }\n         }\n     }\n-    ret (some(num(neg * res)), str::slice_chars(s, pos, str::len_chars(s)));\n+    ret (some(num(neg * res)), str::slice(s, pos, str::len_bytes(s)));\n }\n \n fn from_str_bool(s: str) -> (option<json>, str) {\n     if (str::starts_with(s, \"true\")) {\n-        (some(boolean(true)), str::slice_chars(s, 4u, str::len_chars(s)))\n+        (some(boolean(true)), str::slice(s, 4u, str::len_bytes(s)))\n     } else if (str::starts_with(s, \"false\")) {\n-        (some(boolean(false)), str::slice_chars(s, 5u, str::len_chars(s)))\n+        (some(boolean(false)), str::slice(s, 5u, str::len_bytes(s)))\n     } else {\n         (none, s)\n     }\n }\n \n fn from_str_null(s: str) -> (option<json>, str) {\n     if (str::starts_with(s, \"null\")) {\n-        (some(null), str::slice_chars(s, 4u, str::len_chars(s)))\n+        (some(null), str::slice(s, 4u, str::len_bytes(s)))\n     } else {\n         (none, s)\n     }"}]}