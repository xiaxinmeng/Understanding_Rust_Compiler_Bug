{"sha": "7b009210c66d6b62ca6be123b752b464f8f178e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMDA5MjEwYzY2ZDZiNjJjYTZiZTEyM2I3NTJiNDY0ZjhmMTc4ZTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-23T14:16:48Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-04-24T12:34:19Z"}, "message": "libcore: convert the Program @-object to be a plain struct + impl.\n\nRemoves the dynamic @ indirection, and also converts the functions acting\non `ProgRepr`s to methods.", "tree": {"sha": "bb704658044550df753551dc4563c626ac709af3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb704658044550df753551dc4563c626ac709af3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b009210c66d6b62ca6be123b752b464f8f178e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b009210c66d6b62ca6be123b752b464f8f178e5", "html_url": "https://github.com/rust-lang/rust/commit/7b009210c66d6b62ca6be123b752b464f8f178e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b009210c66d6b62ca6be123b752b464f8f178e5/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c0a7c7b7d304157f31189bf34f50ef4027e1d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0a7c7b7d304157f31189bf34f50ef4027e1d66", "html_url": "https://github.com/rust-lang/rust/commit/6c0a7c7b7d304157f31189bf34f50ef4027e1d66"}], "stats": {"total": 218, "additions": 104, "deletions": 114}, "files": [{"sha": "e7df95e20c80b205b773470bafd309d7c0568bc2", "filename": "src/libcore/run.rs", "status": "modified", "additions": 104, "deletions": 114, "changes": 218, "blob_url": "https://github.com/rust-lang/rust/blob/7b009210c66d6b62ca6be123b752b464f8f178e5/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b009210c66d6b62ca6be123b752b464f8f178e5/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=7b009210c66d6b62ca6be123b752b464f8f178e5", "patch": "@@ -47,28 +47,117 @@ pub struct RunProgramResult {\n     handle: *(),\n }\n \n+struct ProgRepr {\n+    pid: pid_t,\n+    handle: *(),\n+    in_fd: c_int,\n+    out_file: *libc::FILE,\n+    err_file: *libc::FILE,\n+    finished: bool,\n+}\n+\n+impl ProgRepr {\n+    fn close_input(&mut self) {\n+        let invalid_fd = -1i32;\n+        if self.in_fd != invalid_fd {\n+            unsafe {\n+                libc::close(self.in_fd);\n+            }\n+            self.in_fd = invalid_fd;\n+        }\n+    }\n+\n+    fn close_outputs(&mut self) {\n+        unsafe {\n+            fclose_and_null(&mut self.out_file);\n+            fclose_and_null(&mut self.err_file);\n+        }\n+    }\n+\n+    fn finish(&mut self) -> int {\n+        if self.finished { return 0; }\n+        self.finished = true;\n+        self.close_input();\n+        return waitpid(self.pid);\n+    }\n+\n+    fn destroy(&mut self, force: bool) {\n+        killpid(self.pid, force);\n+        self.finish();\n+        self.close_outputs();\n+\n+        #[cfg(windows)]\n+        fn killpid(pid: pid_t, _force: bool) {\n+            unsafe {\n+                libc::funcs::extra::kernel32::TerminateProcess(\n+                    cast::transmute(pid), 1);\n+            }\n+        }\n+\n+        #[cfg(unix)]\n+        fn killpid(pid: pid_t, force: bool) {\n+            let signal = if force {\n+                libc::consts::os::posix88::SIGKILL\n+            } else {\n+                libc::consts::os::posix88::SIGTERM\n+            };\n+\n+            unsafe {\n+                libc::funcs::posix88::signal::kill(pid, signal as c_int);\n+            }\n+        }\n+    }\n+}\n+\n /// A value representing a child process\n-pub trait Program {\n+pub struct Program {\n+    priv r: ProgRepr,\n+}\n+\n+impl Drop for Program {\n+    fn finalize(&self) {\n+        // FIXME #4943: transmute is bad.\n+        let selfr: &mut ProgRepr = unsafe { cast::transmute(&self.r) };\n+\n+        selfr.finish();\n+        selfr.close_outputs();\n+        free_handle(self.r.handle);\n+    }\n+}\n+\n+pub impl Program {\n+    priv fn new(r: ProgRepr) -> Program {\n+        Program {\n+            r: r\n+        }\n+    }\n+\n     /// Returns the process id of the program\n-    fn get_id(&mut self) -> pid_t;\n+    fn get_id(&mut self) -> pid_t { self.r.pid }\n \n     /// Returns an io::Writer that can be used to write to stdin\n-    fn input(&mut self) -> @io::Writer;\n+    fn input(&mut self) -> @io::Writer {\n+        io::fd_writer(self.r.in_fd, false)\n+    }\n \n     /// Returns an io::Reader that can be used to read from stdout\n-    fn output(&mut self) -> @io::Reader;\n+    fn output(&mut self) -> @io::Reader {\n+        io::FILE_reader(self.r.out_file, false)\n+    }\n \n     /// Returns an io::Reader that can be used to read from stderr\n-    fn err(&mut self) -> @io::Reader;\n+    fn err(&mut self) -> @io::Reader {\n+        io::FILE_reader(self.r.err_file, false)\n+    }\n \n     /// Closes the handle to the child processes standard input\n-    fn close_input(&mut self);\n+    fn close_input(&mut self) { self.r.close_input(); }\n \n     /**\n      * Waits for the child process to terminate. Closes the handle\n      * to stdin if necessary.\n      */\n-    fn finish(&mut self) -> int;\n+    fn finish(&mut self) -> int { self.r.finish() }\n \n     /**\n      * Terminate the program, giving it a chance to clean itself up if\n@@ -77,7 +166,7 @@ pub trait Program {\n      * On Posix OSs SIGTERM will be sent to the process. On Win32\n      * TerminateProcess(..) will be called.\n      */\n-    fn destroy(&mut self);\n+    fn destroy(&mut self) { self.r.destroy(false); }\n \n     /**\n      * Terminate the program as soon as possible without giving it a\n@@ -86,7 +175,7 @@ pub trait Program {\n      * On Posix OSs SIGKILL will be sent to the process. On Win32\n      * TerminateProcess(..) will be called.\n      */\n-    fn force_destroy(&mut self);\n+    fn force_destroy(&mut self) { self.r.destroy(true); }\n }\n \n \n@@ -248,9 +337,9 @@ pub fn run_program(prog: &str, args: &[~str]) -> int {\n /**\n  * Spawns a process and returns a Program\n  *\n- * The returned value is a boxed class containing a <Program> object that can\n- * be used for sending and receiving data over the standard file descriptors.\n- * The class will ensure that file descriptors are closed properly.\n+ * The returned value is a <Program> object that can be used for sending and\n+ * receiving data over the standard file descriptors.  The class will ensure\n+ * that file descriptors are closed properly.\n  *\n  * # Arguments\n  *\n@@ -259,9 +348,9 @@ pub fn run_program(prog: &str, args: &[~str]) -> int {\n  *\n  * # Return value\n  *\n- * A class with a <program> field\n+ * A <Program> object\n  */\n-pub fn start_program(prog: &str, args: &[~str]) -> @Program {\n+pub fn start_program(prog: &str, args: &[~str]) -> Program {\n     let pipe_input = os::pipe();\n     let pipe_output = os::pipe();\n     let pipe_err = os::pipe();\n@@ -277,105 +366,6 @@ pub fn start_program(prog: &str, args: &[~str]) -> @Program {\n         libc::close(pipe_err.out);\n     }\n \n-    struct ProgRepr {\n-        pid: pid_t,\n-        handle: *(),\n-        in_fd: c_int,\n-        out_file: *libc::FILE,\n-        err_file: *libc::FILE,\n-        finished: bool,\n-    }\n-\n-    fn close_repr_input(r: &mut ProgRepr) {\n-        let invalid_fd = -1i32;\n-        if r.in_fd != invalid_fd {\n-            unsafe {\n-                libc::close(r.in_fd);\n-            }\n-            r.in_fd = invalid_fd;\n-        }\n-    }\n-\n-    fn close_repr_outputs(r: &mut ProgRepr) {\n-        unsafe {\n-            fclose_and_null(&mut r.out_file);\n-            fclose_and_null(&mut r.err_file);\n-        }\n-    }\n-\n-    fn finish_repr(r: &mut ProgRepr) -> int {\n-        if r.finished { return 0; }\n-        r.finished = true;\n-        close_repr_input(&mut *r);\n-        return waitpid(r.pid);\n-    }\n-\n-    fn destroy_repr(r: &mut ProgRepr, force: bool) {\n-        killpid(r.pid, force);\n-        finish_repr(&mut *r);\n-        close_repr_outputs(&mut *r);\n-\n-        #[cfg(windows)]\n-        fn killpid(pid: pid_t, _force: bool) {\n-            unsafe {\n-                libc::funcs::extra::kernel32::TerminateProcess(\n-                    cast::transmute(pid), 1);\n-            }\n-        }\n-\n-        #[cfg(unix)]\n-        fn killpid(pid: pid_t, force: bool) {\n-\n-            let signal = if force {\n-                libc::consts::os::posix88::SIGKILL\n-            } else {\n-                libc::consts::os::posix88::SIGTERM\n-            };\n-\n-            unsafe {\n-                libc::funcs::posix88::signal::kill(pid, signal as c_int);\n-            }\n-        }\n-    }\n-\n-    struct ProgRes {\n-        r: ProgRepr,\n-    }\n-\n-    impl Drop for ProgRes {\n-        fn finalize(&self) {\n-            unsafe {\n-                // FIXME #4943: transmute is bad.\n-                finish_repr(cast::transmute(&self.r));\n-                close_repr_outputs(cast::transmute(&self.r));\n-            }\n-            free_handle(self.r.handle);\n-        }\n-    }\n-\n-    fn ProgRes(r: ProgRepr) -> ProgRes {\n-        ProgRes {\n-            r: r\n-        }\n-    }\n-\n-    impl Program for ProgRes {\n-        fn get_id(&mut self) -> pid_t { return self.r.pid; }\n-        fn input(&mut self) -> @io::Writer {\n-            io::fd_writer(self.r.in_fd, false)\n-        }\n-        fn output(&mut self) -> @io::Reader {\n-            io::FILE_reader(self.r.out_file, false)\n-        }\n-        fn err(&mut self) -> @io::Reader {\n-            io::FILE_reader(self.r.err_file, false)\n-        }\n-        fn close_input(&mut self) { close_repr_input(&mut self.r); }\n-        fn finish(&mut self) -> int { finish_repr(&mut self.r) }\n-        fn destroy(&mut self) { destroy_repr(&mut self.r, false); }\n-        fn force_destroy(&mut self) { destroy_repr(&mut self.r, true); }\n-    }\n-\n     let repr = ProgRepr {\n         pid: res.pid,\n         handle: res.handle,\n@@ -385,7 +375,7 @@ pub fn start_program(prog: &str, args: &[~str]) -> @Program {\n         finished: false,\n     };\n \n-    @ProgRes(repr) as @Program\n+    Program::new(repr)\n }\n \n fn read_all(rd: @io::Reader) -> ~str {"}]}