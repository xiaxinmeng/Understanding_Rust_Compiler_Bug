{"sha": "e06c62cd5bd84e109f8fe409102c446f53b7f4c9", "node_id": "C_kwDOAAsO6NoAKGUwNmM2MmNkNWJkODRlMTA5ZjhmZTQwOTEwMmM0NDZmNTNiN2Y0Yzk", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-03-17T14:04:39Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-03-17T14:04:39Z"}, "message": "UNACEPTABLE", "tree": {"sha": "43df5b5ebc971332b991f2566f8f98a743a8d207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43df5b5ebc971332b991f2566f8f98a743a8d207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e06c62cd5bd84e109f8fe409102c446f53b7f4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e06c62cd5bd84e109f8fe409102c446f53b7f4c9", "html_url": "https://github.com/rust-lang/rust/commit/e06c62cd5bd84e109f8fe409102c446f53b7f4c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e06c62cd5bd84e109f8fe409102c446f53b7f4c9/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce14a1eba0a9dd4c4bc5394ee53a8d1756796a9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce14a1eba0a9dd4c4bc5394ee53a8d1756796a9e", "html_url": "https://github.com/rust-lang/rust/commit/ce14a1eba0a9dd4c4bc5394ee53a8d1756796a9e"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "80828d5c1d5a7090737e95ed4de587274ab169ee", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e06c62cd5bd84e109f8fe409102c446f53b7f4c9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06c62cd5bd84e109f8fe409102c446f53b7f4c9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=e06c62cd5bd84e109f8fe409102c446f53b7f4c9", "patch": "@@ -43,17 +43,17 @@ pub(super) enum IsNormalizesToHack {\n \n #[derive(Debug, Clone)]\n pub(super) struct NestedGoals<'tcx> {\n-    pub(super) projection_eq_hack_goal: Option<Goal<'tcx, ty::ProjectionPredicate<'tcx>>>,\n+    pub(super) normalizes_to_hack_goal: Option<Goal<'tcx, ty::ProjectionPredicate<'tcx>>>,\n     pub(super) goals: Vec<Goal<'tcx, ty::Predicate<'tcx>>>,\n }\n \n impl NestedGoals<'_> {\n     pub(super) fn new() -> Self {\n-        Self { projection_eq_hack_goal: None, goals: Vec::new() }\n+        Self { normalizes_to_hack_goal: None, goals: Vec::new() }\n     }\n \n     pub(super) fn is_empty(&self) -> bool {\n-        self.projection_eq_hack_goal.is_none() && self.goals.is_empty()\n+        self.normalizes_to_hack_goal.is_none() && self.goals.is_empty()\n     }\n }\n "}, {"sha": "13d6602b7e126097a877ae9da904ba632c6ed0ce", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e06c62cd5bd84e109f8fe409102c446f53b7f4c9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06c62cd5bd84e109f8fe409102c446f53b7f4c9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=e06c62cd5bd84e109f8fe409102c446f53b7f4c9", "patch": "@@ -406,12 +406,12 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n-    fn set_projection_eq_hack_goal(&mut self, goal: Goal<'tcx, ty::ProjectionPredicate<'tcx>>) {\n+    fn set_normalizes_to_hack_goal(&mut self, goal: Goal<'tcx, ty::ProjectionPredicate<'tcx>>) {\n         assert!(\n-            self.nested_goals.projection_eq_hack_goal.is_none(),\n+            self.nested_goals.normalizes_to_hack_goal.is_none(),\n             \"attempted to set the projection eq hack goal when one already exists\"\n         );\n-        self.nested_goals.projection_eq_hack_goal = Some(goal);\n+        self.nested_goals.normalizes_to_hack_goal = Some(goal);\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n@@ -438,7 +438,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             |this| {\n                 let mut has_changed = Err(Certainty::Yes);\n \n-                if let Some(goal) = goals.projection_eq_hack_goal.take() {\n+                if let Some(goal) = goals.normalizes_to_hack_goal.take() {\n                     let (_, certainty) = match this.evaluate_goal(\n                         IsNormalizesToHack::Yes,\n                         goal.with(this.tcx(), ty::Binder::dummy(goal.predicate)),\n@@ -475,7 +475,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                                 term,\n                                 projection_ty: goal.predicate.projection_ty,\n                             };\n-                            new_goals.projection_eq_hack_goal =\n+                            new_goals.normalizes_to_hack_goal =\n                                 Some(goal.with(this.tcx(), projection_pred));\n \n                             has_changed = has_changed.map_err(|c| c.unify_and(certainty));"}, {"sha": "93d77c39f9580a37e1fc85cabbd9a83a6ed5f0a6", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e06c62cd5bd84e109f8fe409102c446f53b7f4c9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e06c62cd5bd84e109f8fe409102c446f53b7f4c9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=e06c62cd5bd84e109f8fe409102c446f53b7f4c9", "patch": "@@ -43,7 +43,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 term: unconstrained_rhs,\n             };\n \n-            self.set_projection_eq_hack_goal(goal.with(self.tcx(), unconstrained_predicate));\n+            self.set_normalizes_to_hack_goal(goal.with(self.tcx(), unconstrained_predicate));\n             self.try_evaluate_added_goals()?;\n             self.eq(goal.param_env, unconstrained_rhs, predicate.term)?;\n             self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)"}]}