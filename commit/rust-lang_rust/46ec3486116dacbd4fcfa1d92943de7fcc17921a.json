{"sha": "46ec3486116dacbd4fcfa1d92943de7fcc17921a", "node_id": "C_kwDOAAsO6NoAKDQ2ZWMzNDg2MTE2ZGFjYmQ0ZmNmYTFkOTI5NDNkZTdmY2MxNzkyMWE", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-03-31T00:02:46Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-05-04T14:59:10Z"}, "message": "IAT: Add a few regression tests", "tree": {"sha": "7052a702bbe5817a8f9a38b32dc1fdd802d1aece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7052a702bbe5817a8f9a38b32dc1fdd802d1aece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46ec3486116dacbd4fcfa1d92943de7fcc17921a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmRTyD4ACgkQ0XoHIV9o\n5xPyaQ/+PVPiWF4a7O/XZ2geoT4EvliBb5MB6L6r1CA9tpQ3UcYjzz4o+5LR3hs7\nTp4BizxR1CVMZmPmqmnO4bZHJleO/dP88nNURlDjee0mRyBXB/XrOdLHPd2hNN3L\nFdjDDkK/upYNB0KRQHsio8ZeAKgFKUJz2r8FkLGL4CXBvk62aDbSEkQ9hOrXf1O6\nCg8Du0vRALYY0tgqyfJ3GvLg3mGH1bczIvHln3b+niUBvZR+qpYLMOc5bRhF4DkK\n5RqDIwXx/zbzPATrCKP4PX3qfvuXCrG4ohjU+z0yXJWbOx+26NwiqZxgbX3JcbRL\nN50hCI182XRn9MS3gq3wVQFpNgvY8dmJr8helpWSS8aA2su4GxxdtiSDGmiwi51b\nuFWWIdcw/VKar1YhgJwQ2XJExJkigTDclcxL9iH5JL3wyO+B5BpyeFdWyYOW4Et8\nOyRpPtVc9GZxF+j39tJZoiqHZQdt3Dux7x7DvlRmIrEOKV4+fJOAsoBOiRs66fZ/\nkWgX2gDBY4PCvF6RomJt4PpGBqoZrom28e9nzIifBXfjpVbv2VJlor8FAQs6kMqo\nERp8cNxQNb9LTwF/NSuD0qMKtoCgm+2sN1+BcdxUIR9N9sKNRlH8zBTcm0HjjFno\nq3T74Q3/dguNlhB7b75nInRGIFyShhmfuG65asaDMNjpdP92XVo=\n=47TA\n-----END PGP SIGNATURE-----", "payload": "tree 7052a702bbe5817a8f9a38b32dc1fdd802d1aece\nparent e8139dfd5a747842a8303f33d8c842378913d594\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1680220966 +0200\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1683212350 +0200\n\nIAT: Add a few regression tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46ec3486116dacbd4fcfa1d92943de7fcc17921a", "html_url": "https://github.com/rust-lang/rust/commit/46ec3486116dacbd4fcfa1d92943de7fcc17921a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46ec3486116dacbd4fcfa1d92943de7fcc17921a/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8139dfd5a747842a8303f33d8c842378913d594", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8139dfd5a747842a8303f33d8c842378913d594", "html_url": "https://github.com/rust-lang/rust/commit/e8139dfd5a747842a8303f33d8c842378913d594"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "a3ae2e2ab4476728f7eb3313af3290ad196373a5", "filename": "tests/ui/associated-inherent-types/issue-109768.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46ec3486116dacbd4fcfa1d92943de7fcc17921a/tests%2Fui%2Fassociated-inherent-types%2Fissue-109768.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ec3486116dacbd4fcfa1d92943de7fcc17921a/tests%2Fui%2Fassociated-inherent-types%2Fissue-109768.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-109768.rs?ref=46ec3486116dacbd4fcfa1d92943de7fcc17921a", "patch": "@@ -0,0 +1,12 @@\n+// incremental\n+\n+struct Wrapper<T>(T);\n+\n+struct Local<T, U>(T, U);\n+\n+impl<T> Local { //~ ERROR missing generics for struct `Local`\n+    type AssocType3 = T; //~ ERROR inherent associated types are unstable\n+\n+    const WRAPPED_ASSOC_3: Wrapper<Self::AssocType3> = Wrapper();\n+}\n+//~^ ERROR `main` function not found"}, {"sha": "97706d4062a979fef9f4770bae20beca4ecd707d", "filename": "tests/ui/associated-inherent-types/issue-109768.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/46ec3486116dacbd4fcfa1d92943de7fcc17921a/tests%2Fui%2Fassociated-inherent-types%2Fissue-109768.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46ec3486116dacbd4fcfa1d92943de7fcc17921a/tests%2Fui%2Fassociated-inherent-types%2Fissue-109768.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-109768.stderr?ref=46ec3486116dacbd4fcfa1d92943de7fcc17921a", "patch": "@@ -0,0 +1,35 @@\n+error[E0601]: `main` function not found in crate `issue_109768`\n+  --> $DIR/issue-109768.rs:11:2\n+   |\n+LL | }\n+   |  ^ consider adding a `main` function to `$DIR/issue-109768.rs`\n+\n+error[E0107]: missing generics for struct `Local`\n+  --> $DIR/issue-109768.rs:7:9\n+   |\n+LL | impl<T> Local {\n+   |         ^^^^^ expected 2 generic arguments\n+   |\n+note: struct defined here, with 2 generic parameters: `T`, `U`\n+  --> $DIR/issue-109768.rs:5:8\n+   |\n+LL | struct Local<T, U>(T, U);\n+   |        ^^^^^ -  -\n+help: add missing generic arguments\n+   |\n+LL | impl<T> Local<T, U> {\n+   |              ++++++\n+\n+error[E0658]: inherent associated types are unstable\n+  --> $DIR/issue-109768.rs:8:5\n+   |\n+LL |     type AssocType3 = T;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n+   = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0107, E0601, E0658.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "0b5ba7d1fb55da493ca4375156e4ad1d960ac82e", "filename": "tests/ui/associated-inherent-types/issue-109789.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/46ec3486116dacbd4fcfa1d92943de7fcc17921a/tests%2Fui%2Fassociated-inherent-types%2Fissue-109789.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ec3486116dacbd4fcfa1d92943de7fcc17921a/tests%2Fui%2Fassociated-inherent-types%2Fissue-109789.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-109789.rs?ref=46ec3486116dacbd4fcfa1d92943de7fcc17921a", "patch": "@@ -0,0 +1,22 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<T>(T);\n+\n+impl Foo<fn(&'static ())> {\n+    type Assoc = u32;\n+}\n+\n+trait Other {}\n+impl Other for u32 {}\n+\n+// FIXME(inherent_associated_types): Avoid emitting two diagnostics (they only differ in span).\n+// FIXME(inherent_associated_types): Enhancement: Spruce up the diagnostic by saying something like\n+// \"implementation is not general enough\" as is done for traits via\n+// `try_report_trait_placeholder_mismatch`.\n+\n+fn bar(_: Foo<for<'a> fn(&'a ())>::Assoc) {}\n+//~^ ERROR mismatched types\n+//~| ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "7af338274a12ba38fceb0dc03ebb114dc8369eee", "filename": "tests/ui/associated-inherent-types/issue-109789.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/46ec3486116dacbd4fcfa1d92943de7fcc17921a/tests%2Fui%2Fassociated-inherent-types%2Fissue-109789.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46ec3486116dacbd4fcfa1d92943de7fcc17921a/tests%2Fui%2Fassociated-inherent-types%2Fissue-109789.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-109789.stderr?ref=46ec3486116dacbd4fcfa1d92943de7fcc17921a", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-109789.rs:18:1\n+   |\n+LL | fn bar(_: Foo<for<'a> fn(&'a ())>::Assoc) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected struct `Foo<fn(&'static ())>`\n+              found struct `Foo<for<'a> fn(&'a ())>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-109789.rs:18:11\n+   |\n+LL | fn bar(_: Foo<for<'a> fn(&'a ())>::Assoc) {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected struct `Foo<fn(&'static ())>`\n+              found struct `Foo<for<'a> fn(&'a ())>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "b2be19a28f442efc4405b0275bf18656db82b541", "filename": "tests/ui/associated-inherent-types/issue-109790.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/46ec3486116dacbd4fcfa1d92943de7fcc17921a/tests%2Fui%2Fassociated-inherent-types%2Fissue-109790.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ec3486116dacbd4fcfa1d92943de7fcc17921a/tests%2Fui%2Fassociated-inherent-types%2Fissue-109790.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fissue-109790.rs?ref=46ec3486116dacbd4fcfa1d92943de7fcc17921a", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<T>(T);\n+\n+impl<'a> Foo<fn(&'a ())> {\n+    type Assoc = &'a ();\n+}\n+\n+trait Other {}\n+impl Other for u32 {}\n+\n+fn bar(_: for<'a> fn(Foo<fn(&'a ())>::Assoc)) {}\n+\n+fn main() {}"}]}