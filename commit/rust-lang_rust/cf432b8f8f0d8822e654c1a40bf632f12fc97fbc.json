{"sha": "cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNDMyYjhmOGYwZDg4MjJlNjU0YzFhNDBiZjYzMmYxMmZjOTdmYmM=", "commit": {"author": {"name": "kwantam", "email": "kwantam@gmail.com", "date": "2014-07-11T21:23:45Z"}, "committer": {"name": "kwantam", "email": "kwantam@gmail.com", "date": "2014-07-14T23:53:46Z"}, "message": "add Graphemes iterator; tidy unicode exports\n\n- Graphemes and GraphemeIndices structs implement iterators over\n  grapheme clusters analogous to the Chars and CharOffsets for chars in\n  a string. Iterator and DoubleEndedIterator are available for both.\n\n- tidied up the exports for libunicode. crate root exports are now moved\n  into more appropriate module locations:\n  - UnicodeStrSlice, Words, Graphemes, GraphemeIndices are in str module\n  - UnicodeChar exported from char instead of crate root\n  - canonical_combining_class is exported from str rather than crate root\n\nSince libunicode's exports have changed, programs that previously relied\non the old export locations will need to change their `use` statements\nto reflect the new ones. See above for more information on where the new\nexports live.\n\ncloses #7043\n[breaking-change]", "tree": {"sha": "0e24b1aa04230015771d643dca83eb29f3a12e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e24b1aa04230015771d643dca83eb29f3a12e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "html_url": "https://github.com/rust-lang/rust/commit/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/comments", "author": {"login": "kwantam", "id": 716593, "node_id": "MDQ6VXNlcjcxNjU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/716593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwantam", "html_url": "https://github.com/kwantam", "followers_url": "https://api.github.com/users/kwantam/followers", "following_url": "https://api.github.com/users/kwantam/following{/other_user}", "gists_url": "https://api.github.com/users/kwantam/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwantam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwantam/subscriptions", "organizations_url": "https://api.github.com/users/kwantam/orgs", "repos_url": "https://api.github.com/users/kwantam/repos", "events_url": "https://api.github.com/users/kwantam/events{/privacy}", "received_events_url": "https://api.github.com/users/kwantam/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kwantam", "id": 716593, "node_id": "MDQ6VXNlcjcxNjU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/716593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwantam", "html_url": "https://github.com/kwantam", "followers_url": "https://api.github.com/users/kwantam/followers", "following_url": "https://api.github.com/users/kwantam/following{/other_user}", "gists_url": "https://api.github.com/users/kwantam/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwantam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwantam/subscriptions", "organizations_url": "https://api.github.com/users/kwantam/orgs", "repos_url": "https://api.github.com/users/kwantam/repos", "events_url": "https://api.github.com/users/kwantam/events{/privacy}", "received_events_url": "https://api.github.com/users/kwantam/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c066a1ee9f98297cf00fc9c760087770b1a8c1f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c066a1ee9f98297cf00fc9c760087770b1a8c1f6", "html_url": "https://github.com/rust-lang/rust/commit/c066a1ee9f98297cf00fc9c760087770b1a8c1f6"}], "stats": {"total": 1637, "additions": 1599, "deletions": 38}, "files": [{"sha": "f1761c5719a52e680578101ef3393bff0875fc26", "filename": "src/etc/unicode.py", "status": "modified", "additions": 124, "deletions": 5, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "patch": "@@ -51,6 +51,30 @@\n     'Cc': ['C'], 'Cf': ['C'], 'Cs': ['C'], 'Co': ['C'], 'Cn': ['C'],\n }\n \n+\n+# Grapheme cluster data\n+# taken from UAX29, http://www.unicode.org/reports/tr29/\n+# these code points are excluded from the Control category\n+# NOTE: CR and LF are also technically excluded, but for\n+# the sake of convenience we leave them in the Control group\n+# and manually check them in the appropriate place. This is\n+# still compliant with the implementation requirements.\n+grapheme_control_exceptions = set([0x200c, 0x200d])\n+\n+# the Regional_Indicator category\n+grapheme_regional_indicator = [(0x1f1e6, 0x1f1ff)]\n+\n+# \"The following ... are specifically excluded\" from the SpacingMark category\n+# http://www.unicode.org/reports/tr29/#SpacingMark\n+grapheme_spacingmark_exceptions = [(0x102b, 0x102c), (0x1038, 0x1038),\n+    (0x1062, 0x1064), (0x1067, 0x106d), (0x1083, 0x1083), (0x1087, 0x108c),\n+    (0x108f, 0x108f), (0x109a, 0x109c), (0x19b0, 0x19b4), (0x19b8, 0x19b9),\n+    (0x19bb, 0x19c0), (0x19c8, 0x19c9), (0x1a61, 0x1a61), (0x1a63, 0x1a64),\n+    (0xaa7b, 0xaa7b), (0xaa7d, 0xaa7d)]\n+\n+# these are included in the SpacingMark category\n+grapheme_spacingmark_extra = set([0xe33, 0xeb3])\n+\n def fetch(f):\n     if not os.path.exists(f):\n         os.system(\"curl -O http://www.unicode.org/Public/UNIDATA/%s\"\n@@ -109,7 +133,7 @@ def load_unicode_data(f):\n                 canon_decomp[code] = seq\n \n         # place letter in categories as appropriate\n-        for cat in [gencat] + expanded_categories.get(gencat, []):\n+        for cat in [gencat, \"Assigned\"] + expanded_categories.get(gencat, []):\n             if cat not in gencats:\n                 gencats[cat] = []\n             gencats[cat].append(code)\n@@ -120,6 +144,12 @@ def load_unicode_data(f):\n                 combines[combine] = []\n             combines[combine].append(code)\n \n+    # generate Not_Assigned from Assigned\n+    gencats[\"Cn\"] = gen_unassigned(gencats[\"Assigned\"])\n+    # Assigned is not a real category\n+    del(gencats[\"Assigned\"])\n+    # Other contains Not_Assigned\n+    gencats[\"C\"].extend(gencats[\"Cn\"])\n     gencats = group_cats(gencats)\n     combines = to_combines(group_cats(combines))\n \n@@ -155,6 +185,11 @@ def ungroup_cat(cat):\n             lo += 1\n     return cat_out\n \n+def gen_unassigned(assigned):\n+    assigned = set(assigned)\n+    return ([i for i in range(0, 0xd800) if i not in assigned] +\n+            [i for i in range(0xe000, 0x110000) if i not in assigned])\n+\n def to_combines(combs):\n     combs_out = []\n     for comb in combs:\n@@ -350,6 +385,45 @@ def emit_conversions_module(f, lowerupper, upperlower):\n         sorted(lowerupper.iteritems(), key=operator.itemgetter(0)), is_pub=False)\n     f.write(\"}\\n\\n\")\n \n+def emit_grapheme_module(f, grapheme_table, grapheme_cats):\n+    f.write(\"\"\"pub mod grapheme {\n+    use core::option::{Some, None};\n+    use core::slice::ImmutableVector;\n+\n+    #[allow(non_camel_case_types)]\n+    #[deriving(Clone)]\n+    pub enum GraphemeCat {\n+\"\"\")\n+    for cat in grapheme_cats + [\"Any\"]:\n+        f.write(\"        GC_\" + cat + \",\\n\")\n+    f.write(\"\"\"    }\n+\n+    fn bsearch_range_value_table(c: char, r: &'static [(char, char, GraphemeCat)]) -> GraphemeCat {\n+        use core::cmp::{Equal, Less, Greater};\n+        match r.bsearch(|&(lo, hi, _)| {\n+            if lo <= c && c <= hi { Equal }\n+            else if hi < c { Less }\n+            else { Greater }\n+        }) {\n+            Some(idx) => {\n+                let (_, _, cat) = r[idx];\n+                cat\n+            }\n+            None => GC_Any\n+        }\n+    }\n+\n+    pub fn grapheme_category(c: char) -> GraphemeCat {\n+        bsearch_range_value_table(c, grapheme_cat_table)\n+    }\n+\n+\"\"\")\n+\n+    emit_table(f, \"grapheme_cat_table\", grapheme_table, \"&'static [(char, char, GraphemeCat)]\",\n+        pfun=lambda x: \"(%s,%s,GC_%s)\" % (escape_char(x[0]), escape_char(x[1]), x[2]),\n+        is_pub=False)\n+    f.write(\"}\\n\")\n+\n def emit_charwidth_module(f, width_table):\n     f.write(\"pub mod charwidth {\\n\")\n     f.write(\"    use core::option::{Option, Some, None};\\n\")\n@@ -388,7 +462,7 @@ def emit_charwidth_module(f, width_table):\n     f.write(\"    //     http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c\\n\")\n     emit_table(f, \"charwidth_table\", width_table, \"&'static [(char, char, u8, u8)]\", is_pub=False,\n             pfun=lambda x: \"(%s,%s,%s,%s)\" % (escape_char(x[0]), escape_char(x[1]), x[2], x[3]))\n-    f.write(\"}\\n\")\n+    f.write(\"}\\n\\n\")\n \n def emit_norm_module(f, canon, compat, combine):\n     canon_keys = canon.keys()\n@@ -473,6 +547,8 @@ def remove_from_wtable(wtable, val):\n         wtable_out.extend(wtable)\n     return wtable_out\n \n+\n+\n def optimize_width_table(wtable):\n     wtable_out = []\n     w_this = wtable.pop(0)\n@@ -487,7 +563,7 @@ def optimize_width_table(wtable):\n     return wtable_out\n \n if __name__ == \"__main__\":\n-    r = \"unicode.rs\"\n+    r = \"tables.rs\"\n     if os.path.exists(r):\n         os.remove(r)\n     with open(r, \"w\") as rf:\n@@ -498,12 +574,18 @@ def optimize_width_table(wtable):\n         (canon_decomp, compat_decomp, gencats, combines,\n                 lowerupper, upperlower) = load_unicode_data(\"UnicodeData.txt\")\n         want_derived = [\"XID_Start\", \"XID_Continue\", \"Alphabetic\", \"Lowercase\", \"Uppercase\"]\n-        other_derived = [\"Default_Ignorable_Code_Point\"]\n+        other_derived = [\"Default_Ignorable_Code_Point\", \"Grapheme_Extend\"]\n         derived = load_properties(\"DerivedCoreProperties.txt\", want_derived + other_derived)\n         scripts = load_properties(\"Scripts.txt\", [])\n         props = load_properties(\"PropList.txt\",\n                 [\"White_Space\", \"Join_Control\", \"Noncharacter_Code_Point\"])\n \n+        # grapheme cluster category from DerivedCoreProperties\n+        # the rest are defined below\n+        grapheme_cats = {}\n+        grapheme_cats[\"Extend\"] = derived[\"Grapheme_Extend\"]\n+        del(derived[\"Grapheme_Extend\"])\n+\n         # bsearch_range_table is used in all the property modules below\n         emit_bsearch_range_table(rf)\n \n@@ -533,7 +615,7 @@ def optimize_width_table(wtable):\n         emit_norm_module(rf, canon_decomp, compat_decomp, combines)\n         emit_conversions_module(rf, lowerupper, upperlower)\n \n-        # character width module\n+        ### character width module\n         width_table = []\n         for zwcat in [\"Me\", \"Mn\", \"Cf\"]:\n             width_table.extend(map(lambda (lo, hi): (lo, hi, 0, 0), gencats[zwcat]))\n@@ -555,3 +637,40 @@ def optimize_width_table(wtable):\n         # optimize the width table by collapsing adjacent entities when possible\n         width_table = optimize_width_table(width_table)\n         emit_charwidth_module(rf, width_table)\n+\n+        ### grapheme cluster module\n+        # from http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Break_Property_Values\n+        # Hangul syllable categories\n+        want_hangul = [\"L\", \"V\", \"T\", \"LV\", \"LVT\"]\n+        grapheme_cats.update(load_properties(\"HangulSyllableType.txt\", want_hangul))\n+\n+        # Control\n+        # This category also includes Cs (surrogate codepoints), but Rust's `char`s are\n+        # Unicode Scalar Values only, and surrogates are thus invalid `char`s.\n+        grapheme_cats[\"Control\"] = set()\n+        for cat in [\"Zl\", \"Zp\", \"Cc\", \"Cf\"]:\n+            grapheme_cats[\"Control\"] |= set(ungroup_cat(gencats[cat]))\n+        grapheme_cats[\"Control\"] = group_cat(list(\n+            grapheme_cats[\"Control\"]\n+            - grapheme_control_exceptions\n+            | (set(ungroup_cat(gencats[\"Cn\"]))\n+               & set(ungroup_cat(derived[\"Default_Ignorable_Code_Point\"])))))\n+\n+        # Regional Indicator\n+        grapheme_cats[\"RegionalIndicator\"] = grapheme_regional_indicator\n+\n+        # Prepend - \"Currently there are no characters with this value\"\n+        # (from UAX#29, Unicode 7.0)\n+\n+        # SpacingMark\n+        grapheme_cats[\"SpacingMark\"] = group_cat(list(\n+            set(ungroup_cat(gencats[\"Mc\"]))\n+            - set(ungroup_cat(grapheme_cats[\"Extend\"]))\n+            | grapheme_spacingmark_extra\n+            - set(ungroup_cat(grapheme_spacingmark_exceptions))))\n+\n+        grapheme_table = []\n+        for cat in grapheme_cats:\n+            grapheme_table.extend([(x, y, cat) for (x, y) in grapheme_cats[cat]])\n+        grapheme_table.sort(key=lambda w: w[0])\n+        emit_grapheme_module(rf, grapheme_table, grapheme_cats.keys())"}, {"sha": "9e98088cf773d8d124a7f2e115eebae87c5efb88", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 284, "deletions": 6, "changes": 290, "blob_url": "https://github.com/rust-lang/rust/blob/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "patch": "@@ -88,7 +88,7 @@ pub use core::str::{eq_slice, is_utf8, is_utf16, Utf16Items};\n pub use core::str::{Utf16Item, ScalarValue, LoneSurrogate, utf16_items};\n pub use core::str::{truncate_utf16_at_nul, utf8_char_width, CharRange};\n pub use core::str::{Str, StrSlice};\n-pub use unicode::{Words, UnicodeStrSlice};\n+pub use unicode::str::{UnicodeStrSlice, Words, Graphemes, GraphemeIndices};\n \n /*\n Section: Creating a string\n@@ -284,8 +284,6 @@ pub struct Decompositions<'a> {\n impl<'a> Iterator<char> for Decompositions<'a> {\n     #[inline]\n     fn next(&mut self) -> Option<char> {\n-        use unicode::canonical_combining_class;\n-\n         match self.buffer.as_slice().head() {\n             Some(&(c, 0)) => {\n                 self.sorted = false;\n@@ -309,7 +307,7 @@ impl<'a> Iterator<char> for Decompositions<'a> {\n                 let buffer = &mut self.buffer;\n                 let sorted = &mut self.sorted;\n                 decomposer(ch, |d| {\n-                    let class = canonical_combining_class(d);\n+                    let class = unicode::char::canonical_combining_class(d);\n                     if class == 0 && !*sorted {\n                         canonical_sort(buffer.as_mut_slice());\n                         *sorted = true;\n@@ -1021,7 +1019,7 @@ mod tests {\n     use string::String;\n     use vec::Vec;\n \n-    use unicode::UnicodeChar;\n+    use unicode::char::UnicodeChar;\n \n     #[test]\n     fn test_eq_slice() {\n@@ -2110,7 +2108,7 @@ mod tests {\n         assert_eq!(\"\\u0301a\".nfkd_chars().collect::<String>(),\n                    String::from_str(\"\\u0301a\"));\n         assert_eq!(\"\\ud4db\".nfkd_chars().collect::<String>(),\n-String::from_str(\"\\u1111\\u1171\\u11b6\"));\n+                   String::from_str(\"\\u1111\\u1171\\u11b6\"));\n         assert_eq!(\"\\uac1c\".nfkd_chars().collect::<String>(), String::from_str(\"\\u1100\\u1162\"));\n     }\n \n@@ -2125,6 +2123,286 @@ String::from_str(\"\\u1111\\u1171\\u11b6\"));\n         assert_eq!(lines, vec![\"\", \"M\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\", \"\", \"Little l\u00e4mb\"]);\n     }\n \n+    #[test]\n+    fn test_graphemes() {\n+        use std::iter::order;\n+        // official Unicode test data\n+        // from http://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n+        let test_same = [\n+            (\"\\u0020\\u0020\", &[\"\\u0020\", \"\\u0020\"]), (\"\\u0020\\u0308\\u0020\", &[\"\\u0020\\u0308\",\n+            \"\\u0020\"]), (\"\\u0020\\u000D\", &[\"\\u0020\", \"\\u000D\"]), (\"\\u0020\\u0308\\u000D\",\n+            &[\"\\u0020\\u0308\", \"\\u000D\"]), (\"\\u0020\\u000A\", &[\"\\u0020\", \"\\u000A\"]),\n+            (\"\\u0020\\u0308\\u000A\", &[\"\\u0020\\u0308\", \"\\u000A\"]), (\"\\u0020\\u0001\", &[\"\\u0020\",\n+            \"\\u0001\"]), (\"\\u0020\\u0308\\u0001\", &[\"\\u0020\\u0308\", \"\\u0001\"]), (\"\\u0020\\u0300\",\n+            &[\"\\u0020\\u0300\"]), (\"\\u0020\\u0308\\u0300\", &[\"\\u0020\\u0308\\u0300\"]), (\"\\u0020\\u1100\",\n+            &[\"\\u0020\", \"\\u1100\"]), (\"\\u0020\\u0308\\u1100\", &[\"\\u0020\\u0308\", \"\\u1100\"]),\n+            (\"\\u0020\\u1160\", &[\"\\u0020\", \"\\u1160\"]), (\"\\u0020\\u0308\\u1160\", &[\"\\u0020\\u0308\",\n+            \"\\u1160\"]), (\"\\u0020\\u11A8\", &[\"\\u0020\", \"\\u11A8\"]), (\"\\u0020\\u0308\\u11A8\",\n+            &[\"\\u0020\\u0308\", \"\\u11A8\"]), (\"\\u0020\\uAC00\", &[\"\\u0020\", \"\\uAC00\"]),\n+            (\"\\u0020\\u0308\\uAC00\", &[\"\\u0020\\u0308\", \"\\uAC00\"]), (\"\\u0020\\uAC01\", &[\"\\u0020\",\n+            \"\\uAC01\"]), (\"\\u0020\\u0308\\uAC01\", &[\"\\u0020\\u0308\", \"\\uAC01\"]), (\"\\u0020\\U0001F1E6\",\n+            &[\"\\u0020\", \"\\U0001F1E6\"]), (\"\\u0020\\u0308\\U0001F1E6\", &[\"\\u0020\\u0308\",\n+            \"\\U0001F1E6\"]), (\"\\u0020\\u0378\", &[\"\\u0020\", \"\\u0378\"]), (\"\\u0020\\u0308\\u0378\",\n+            &[\"\\u0020\\u0308\", \"\\u0378\"]), (\"\\u000D\\u0020\", &[\"\\u000D\", \"\\u0020\"]),\n+            (\"\\u000D\\u0308\\u0020\", &[\"\\u000D\", \"\\u0308\", \"\\u0020\"]), (\"\\u000D\\u000D\", &[\"\\u000D\",\n+            \"\\u000D\"]), (\"\\u000D\\u0308\\u000D\", &[\"\\u000D\", \"\\u0308\", \"\\u000D\"]), (\"\\u000D\\u000A\",\n+            &[\"\\u000D\\u000A\"]), (\"\\u000D\\u0308\\u000A\", &[\"\\u000D\", \"\\u0308\", \"\\u000A\"]),\n+            (\"\\u000D\\u0001\", &[\"\\u000D\", \"\\u0001\"]), (\"\\u000D\\u0308\\u0001\", &[\"\\u000D\", \"\\u0308\",\n+            \"\\u0001\"]), (\"\\u000D\\u0300\", &[\"\\u000D\", \"\\u0300\"]), (\"\\u000D\\u0308\\u0300\",\n+            &[\"\\u000D\", \"\\u0308\\u0300\"]), (\"\\u000D\\u0903\", &[\"\\u000D\", \"\\u0903\"]),\n+            (\"\\u000D\\u1100\", &[\"\\u000D\", \"\\u1100\"]), (\"\\u000D\\u0308\\u1100\", &[\"\\u000D\", \"\\u0308\",\n+            \"\\u1100\"]), (\"\\u000D\\u1160\", &[\"\\u000D\", \"\\u1160\"]), (\"\\u000D\\u0308\\u1160\",\n+            &[\"\\u000D\", \"\\u0308\", \"\\u1160\"]), (\"\\u000D\\u11A8\", &[\"\\u000D\", \"\\u11A8\"]),\n+            (\"\\u000D\\u0308\\u11A8\", &[\"\\u000D\", \"\\u0308\", \"\\u11A8\"]), (\"\\u000D\\uAC00\", &[\"\\u000D\",\n+            \"\\uAC00\"]), (\"\\u000D\\u0308\\uAC00\", &[\"\\u000D\", \"\\u0308\", \"\\uAC00\"]), (\"\\u000D\\uAC01\",\n+            &[\"\\u000D\", \"\\uAC01\"]), (\"\\u000D\\u0308\\uAC01\", &[\"\\u000D\", \"\\u0308\", \"\\uAC01\"]),\n+            (\"\\u000D\\U0001F1E6\", &[\"\\u000D\", \"\\U0001F1E6\"]), (\"\\u000D\\u0308\\U0001F1E6\",\n+            &[\"\\u000D\", \"\\u0308\", \"\\U0001F1E6\"]), (\"\\u000D\\u0378\", &[\"\\u000D\", \"\\u0378\"]),\n+            (\"\\u000D\\u0308\\u0378\", &[\"\\u000D\", \"\\u0308\", \"\\u0378\"]), (\"\\u000A\\u0020\", &[\"\\u000A\",\n+            \"\\u0020\"]), (\"\\u000A\\u0308\\u0020\", &[\"\\u000A\", \"\\u0308\", \"\\u0020\"]), (\"\\u000A\\u000D\",\n+            &[\"\\u000A\", \"\\u000D\"]), (\"\\u000A\\u0308\\u000D\", &[\"\\u000A\", \"\\u0308\", \"\\u000D\"]),\n+            (\"\\u000A\\u000A\", &[\"\\u000A\", \"\\u000A\"]), (\"\\u000A\\u0308\\u000A\", &[\"\\u000A\", \"\\u0308\",\n+            \"\\u000A\"]), (\"\\u000A\\u0001\", &[\"\\u000A\", \"\\u0001\"]), (\"\\u000A\\u0308\\u0001\",\n+            &[\"\\u000A\", \"\\u0308\", \"\\u0001\"]), (\"\\u000A\\u0300\", &[\"\\u000A\", \"\\u0300\"]),\n+            (\"\\u000A\\u0308\\u0300\", &[\"\\u000A\", \"\\u0308\\u0300\"]), (\"\\u000A\\u0903\", &[\"\\u000A\",\n+            \"\\u0903\"]), (\"\\u000A\\u1100\", &[\"\\u000A\", \"\\u1100\"]), (\"\\u000A\\u0308\\u1100\",\n+            &[\"\\u000A\", \"\\u0308\", \"\\u1100\"]), (\"\\u000A\\u1160\", &[\"\\u000A\", \"\\u1160\"]),\n+            (\"\\u000A\\u0308\\u1160\", &[\"\\u000A\", \"\\u0308\", \"\\u1160\"]), (\"\\u000A\\u11A8\", &[\"\\u000A\",\n+            \"\\u11A8\"]), (\"\\u000A\\u0308\\u11A8\", &[\"\\u000A\", \"\\u0308\", \"\\u11A8\"]), (\"\\u000A\\uAC00\",\n+            &[\"\\u000A\", \"\\uAC00\"]), (\"\\u000A\\u0308\\uAC00\", &[\"\\u000A\", \"\\u0308\", \"\\uAC00\"]),\n+            (\"\\u000A\\uAC01\", &[\"\\u000A\", \"\\uAC01\"]), (\"\\u000A\\u0308\\uAC01\", &[\"\\u000A\", \"\\u0308\",\n+            \"\\uAC01\"]), (\"\\u000A\\U0001F1E6\", &[\"\\u000A\", \"\\U0001F1E6\"]),\n+            (\"\\u000A\\u0308\\U0001F1E6\", &[\"\\u000A\", \"\\u0308\", \"\\U0001F1E6\"]), (\"\\u000A\\u0378\",\n+            &[\"\\u000A\", \"\\u0378\"]), (\"\\u000A\\u0308\\u0378\", &[\"\\u000A\", \"\\u0308\", \"\\u0378\"]),\n+            (\"\\u0001\\u0020\", &[\"\\u0001\", \"\\u0020\"]), (\"\\u0001\\u0308\\u0020\", &[\"\\u0001\", \"\\u0308\",\n+            \"\\u0020\"]), (\"\\u0001\\u000D\", &[\"\\u0001\", \"\\u000D\"]), (\"\\u0001\\u0308\\u000D\",\n+            &[\"\\u0001\", \"\\u0308\", \"\\u000D\"]), (\"\\u0001\\u000A\", &[\"\\u0001\", \"\\u000A\"]),\n+            (\"\\u0001\\u0308\\u000A\", &[\"\\u0001\", \"\\u0308\", \"\\u000A\"]), (\"\\u0001\\u0001\", &[\"\\u0001\",\n+            \"\\u0001\"]), (\"\\u0001\\u0308\\u0001\", &[\"\\u0001\", \"\\u0308\", \"\\u0001\"]), (\"\\u0001\\u0300\",\n+            &[\"\\u0001\", \"\\u0300\"]), (\"\\u0001\\u0308\\u0300\", &[\"\\u0001\", \"\\u0308\\u0300\"]),\n+            (\"\\u0001\\u0903\", &[\"\\u0001\", \"\\u0903\"]), (\"\\u0001\\u1100\", &[\"\\u0001\", \"\\u1100\"]),\n+            (\"\\u0001\\u0308\\u1100\", &[\"\\u0001\", \"\\u0308\", \"\\u1100\"]), (\"\\u0001\\u1160\", &[\"\\u0001\",\n+            \"\\u1160\"]), (\"\\u0001\\u0308\\u1160\", &[\"\\u0001\", \"\\u0308\", \"\\u1160\"]), (\"\\u0001\\u11A8\",\n+            &[\"\\u0001\", \"\\u11A8\"]), (\"\\u0001\\u0308\\u11A8\", &[\"\\u0001\", \"\\u0308\", \"\\u11A8\"]),\n+            (\"\\u0001\\uAC00\", &[\"\\u0001\", \"\\uAC00\"]), (\"\\u0001\\u0308\\uAC00\", &[\"\\u0001\", \"\\u0308\",\n+            \"\\uAC00\"]), (\"\\u0001\\uAC01\", &[\"\\u0001\", \"\\uAC01\"]), (\"\\u0001\\u0308\\uAC01\",\n+            &[\"\\u0001\", \"\\u0308\", \"\\uAC01\"]), (\"\\u0001\\U0001F1E6\", &[\"\\u0001\", \"\\U0001F1E6\"]),\n+            (\"\\u0001\\u0308\\U0001F1E6\", &[\"\\u0001\", \"\\u0308\", \"\\U0001F1E6\"]), (\"\\u0001\\u0378\",\n+            &[\"\\u0001\", \"\\u0378\"]), (\"\\u0001\\u0308\\u0378\", &[\"\\u0001\", \"\\u0308\", \"\\u0378\"]),\n+            (\"\\u0300\\u0020\", &[\"\\u0300\", \"\\u0020\"]), (\"\\u0300\\u0308\\u0020\", &[\"\\u0300\\u0308\",\n+            \"\\u0020\"]), (\"\\u0300\\u000D\", &[\"\\u0300\", \"\\u000D\"]), (\"\\u0300\\u0308\\u000D\",\n+            &[\"\\u0300\\u0308\", \"\\u000D\"]), (\"\\u0300\\u000A\", &[\"\\u0300\", \"\\u000A\"]),\n+            (\"\\u0300\\u0308\\u000A\", &[\"\\u0300\\u0308\", \"\\u000A\"]), (\"\\u0300\\u0001\", &[\"\\u0300\",\n+            \"\\u0001\"]), (\"\\u0300\\u0308\\u0001\", &[\"\\u0300\\u0308\", \"\\u0001\"]), (\"\\u0300\\u0300\",\n+            &[\"\\u0300\\u0300\"]), (\"\\u0300\\u0308\\u0300\", &[\"\\u0300\\u0308\\u0300\"]), (\"\\u0300\\u1100\",\n+            &[\"\\u0300\", \"\\u1100\"]), (\"\\u0300\\u0308\\u1100\", &[\"\\u0300\\u0308\", \"\\u1100\"]),\n+            (\"\\u0300\\u1160\", &[\"\\u0300\", \"\\u1160\"]), (\"\\u0300\\u0308\\u1160\", &[\"\\u0300\\u0308\",\n+            \"\\u1160\"]), (\"\\u0300\\u11A8\", &[\"\\u0300\", \"\\u11A8\"]), (\"\\u0300\\u0308\\u11A8\",\n+            &[\"\\u0300\\u0308\", \"\\u11A8\"]), (\"\\u0300\\uAC00\", &[\"\\u0300\", \"\\uAC00\"]),\n+            (\"\\u0300\\u0308\\uAC00\", &[\"\\u0300\\u0308\", \"\\uAC00\"]), (\"\\u0300\\uAC01\", &[\"\\u0300\",\n+            \"\\uAC01\"]), (\"\\u0300\\u0308\\uAC01\", &[\"\\u0300\\u0308\", \"\\uAC01\"]), (\"\\u0300\\U0001F1E6\",\n+            &[\"\\u0300\", \"\\U0001F1E6\"]), (\"\\u0300\\u0308\\U0001F1E6\", &[\"\\u0300\\u0308\",\n+            \"\\U0001F1E6\"]), (\"\\u0300\\u0378\", &[\"\\u0300\", \"\\u0378\"]), (\"\\u0300\\u0308\\u0378\",\n+            &[\"\\u0300\\u0308\", \"\\u0378\"]), (\"\\u0903\\u0020\", &[\"\\u0903\", \"\\u0020\"]),\n+            (\"\\u0903\\u0308\\u0020\", &[\"\\u0903\\u0308\", \"\\u0020\"]), (\"\\u0903\\u000D\", &[\"\\u0903\",\n+            \"\\u000D\"]), (\"\\u0903\\u0308\\u000D\", &[\"\\u0903\\u0308\", \"\\u000D\"]), (\"\\u0903\\u000A\",\n+            &[\"\\u0903\", \"\\u000A\"]), (\"\\u0903\\u0308\\u000A\", &[\"\\u0903\\u0308\", \"\\u000A\"]),\n+            (\"\\u0903\\u0001\", &[\"\\u0903\", \"\\u0001\"]), (\"\\u0903\\u0308\\u0001\", &[\"\\u0903\\u0308\",\n+            \"\\u0001\"]), (\"\\u0903\\u0300\", &[\"\\u0903\\u0300\"]), (\"\\u0903\\u0308\\u0300\",\n+            &[\"\\u0903\\u0308\\u0300\"]), (\"\\u0903\\u1100\", &[\"\\u0903\", \"\\u1100\"]),\n+            (\"\\u0903\\u0308\\u1100\", &[\"\\u0903\\u0308\", \"\\u1100\"]), (\"\\u0903\\u1160\", &[\"\\u0903\",\n+            \"\\u1160\"]), (\"\\u0903\\u0308\\u1160\", &[\"\\u0903\\u0308\", \"\\u1160\"]), (\"\\u0903\\u11A8\",\n+            &[\"\\u0903\", \"\\u11A8\"]), (\"\\u0903\\u0308\\u11A8\", &[\"\\u0903\\u0308\", \"\\u11A8\"]),\n+            (\"\\u0903\\uAC00\", &[\"\\u0903\", \"\\uAC00\"]), (\"\\u0903\\u0308\\uAC00\", &[\"\\u0903\\u0308\",\n+            \"\\uAC00\"]), (\"\\u0903\\uAC01\", &[\"\\u0903\", \"\\uAC01\"]), (\"\\u0903\\u0308\\uAC01\",\n+            &[\"\\u0903\\u0308\", \"\\uAC01\"]), (\"\\u0903\\U0001F1E6\", &[\"\\u0903\", \"\\U0001F1E6\"]),\n+            (\"\\u0903\\u0308\\U0001F1E6\", &[\"\\u0903\\u0308\", \"\\U0001F1E6\"]), (\"\\u0903\\u0378\",\n+            &[\"\\u0903\", \"\\u0378\"]), (\"\\u0903\\u0308\\u0378\", &[\"\\u0903\\u0308\", \"\\u0378\"]),\n+            (\"\\u1100\\u0020\", &[\"\\u1100\", \"\\u0020\"]), (\"\\u1100\\u0308\\u0020\", &[\"\\u1100\\u0308\",\n+            \"\\u0020\"]), (\"\\u1100\\u000D\", &[\"\\u1100\", \"\\u000D\"]), (\"\\u1100\\u0308\\u000D\",\n+            &[\"\\u1100\\u0308\", \"\\u000D\"]), (\"\\u1100\\u000A\", &[\"\\u1100\", \"\\u000A\"]),\n+            (\"\\u1100\\u0308\\u000A\", &[\"\\u1100\\u0308\", \"\\u000A\"]), (\"\\u1100\\u0001\", &[\"\\u1100\",\n+            \"\\u0001\"]), (\"\\u1100\\u0308\\u0001\", &[\"\\u1100\\u0308\", \"\\u0001\"]), (\"\\u1100\\u0300\",\n+            &[\"\\u1100\\u0300\"]), (\"\\u1100\\u0308\\u0300\", &[\"\\u1100\\u0308\\u0300\"]), (\"\\u1100\\u1100\",\n+            &[\"\\u1100\\u1100\"]), (\"\\u1100\\u0308\\u1100\", &[\"\\u1100\\u0308\", \"\\u1100\"]),\n+            (\"\\u1100\\u1160\", &[\"\\u1100\\u1160\"]), (\"\\u1100\\u0308\\u1160\", &[\"\\u1100\\u0308\",\n+            \"\\u1160\"]), (\"\\u1100\\u11A8\", &[\"\\u1100\", \"\\u11A8\"]), (\"\\u1100\\u0308\\u11A8\",\n+            &[\"\\u1100\\u0308\", \"\\u11A8\"]), (\"\\u1100\\uAC00\", &[\"\\u1100\\uAC00\"]),\n+            (\"\\u1100\\u0308\\uAC00\", &[\"\\u1100\\u0308\", \"\\uAC00\"]), (\"\\u1100\\uAC01\",\n+            &[\"\\u1100\\uAC01\"]), (\"\\u1100\\u0308\\uAC01\", &[\"\\u1100\\u0308\", \"\\uAC01\"]),\n+            (\"\\u1100\\U0001F1E6\", &[\"\\u1100\", \"\\U0001F1E6\"]), (\"\\u1100\\u0308\\U0001F1E6\",\n+            &[\"\\u1100\\u0308\", \"\\U0001F1E6\"]), (\"\\u1100\\u0378\", &[\"\\u1100\", \"\\u0378\"]),\n+            (\"\\u1100\\u0308\\u0378\", &[\"\\u1100\\u0308\", \"\\u0378\"]), (\"\\u1160\\u0020\", &[\"\\u1160\",\n+            \"\\u0020\"]), (\"\\u1160\\u0308\\u0020\", &[\"\\u1160\\u0308\", \"\\u0020\"]), (\"\\u1160\\u000D\",\n+            &[\"\\u1160\", \"\\u000D\"]), (\"\\u1160\\u0308\\u000D\", &[\"\\u1160\\u0308\", \"\\u000D\"]),\n+            (\"\\u1160\\u000A\", &[\"\\u1160\", \"\\u000A\"]), (\"\\u1160\\u0308\\u000A\", &[\"\\u1160\\u0308\",\n+            \"\\u000A\"]), (\"\\u1160\\u0001\", &[\"\\u1160\", \"\\u0001\"]), (\"\\u1160\\u0308\\u0001\",\n+            &[\"\\u1160\\u0308\", \"\\u0001\"]), (\"\\u1160\\u0300\", &[\"\\u1160\\u0300\"]),\n+            (\"\\u1160\\u0308\\u0300\", &[\"\\u1160\\u0308\\u0300\"]), (\"\\u1160\\u1100\", &[\"\\u1160\",\n+            \"\\u1100\"]), (\"\\u1160\\u0308\\u1100\", &[\"\\u1160\\u0308\", \"\\u1100\"]), (\"\\u1160\\u1160\",\n+            &[\"\\u1160\\u1160\"]), (\"\\u1160\\u0308\\u1160\", &[\"\\u1160\\u0308\", \"\\u1160\"]),\n+            (\"\\u1160\\u11A8\", &[\"\\u1160\\u11A8\"]), (\"\\u1160\\u0308\\u11A8\", &[\"\\u1160\\u0308\",\n+            \"\\u11A8\"]), (\"\\u1160\\uAC00\", &[\"\\u1160\", \"\\uAC00\"]), (\"\\u1160\\u0308\\uAC00\",\n+            &[\"\\u1160\\u0308\", \"\\uAC00\"]), (\"\\u1160\\uAC01\", &[\"\\u1160\", \"\\uAC01\"]),\n+            (\"\\u1160\\u0308\\uAC01\", &[\"\\u1160\\u0308\", \"\\uAC01\"]), (\"\\u1160\\U0001F1E6\", &[\"\\u1160\",\n+            \"\\U0001F1E6\"]), (\"\\u1160\\u0308\\U0001F1E6\", &[\"\\u1160\\u0308\", \"\\U0001F1E6\"]),\n+            (\"\\u1160\\u0378\", &[\"\\u1160\", \"\\u0378\"]), (\"\\u1160\\u0308\\u0378\", &[\"\\u1160\\u0308\",\n+            \"\\u0378\"]), (\"\\u11A8\\u0020\", &[\"\\u11A8\", \"\\u0020\"]), (\"\\u11A8\\u0308\\u0020\",\n+            &[\"\\u11A8\\u0308\", \"\\u0020\"]), (\"\\u11A8\\u000D\", &[\"\\u11A8\", \"\\u000D\"]),\n+            (\"\\u11A8\\u0308\\u000D\", &[\"\\u11A8\\u0308\", \"\\u000D\"]), (\"\\u11A8\\u000A\", &[\"\\u11A8\",\n+            \"\\u000A\"]), (\"\\u11A8\\u0308\\u000A\", &[\"\\u11A8\\u0308\", \"\\u000A\"]), (\"\\u11A8\\u0001\",\n+            &[\"\\u11A8\", \"\\u0001\"]), (\"\\u11A8\\u0308\\u0001\", &[\"\\u11A8\\u0308\", \"\\u0001\"]),\n+            (\"\\u11A8\\u0300\", &[\"\\u11A8\\u0300\"]), (\"\\u11A8\\u0308\\u0300\", &[\"\\u11A8\\u0308\\u0300\"]),\n+            (\"\\u11A8\\u1100\", &[\"\\u11A8\", \"\\u1100\"]), (\"\\u11A8\\u0308\\u1100\", &[\"\\u11A8\\u0308\",\n+            \"\\u1100\"]), (\"\\u11A8\\u1160\", &[\"\\u11A8\", \"\\u1160\"]), (\"\\u11A8\\u0308\\u1160\",\n+            &[\"\\u11A8\\u0308\", \"\\u1160\"]), (\"\\u11A8\\u11A8\", &[\"\\u11A8\\u11A8\"]),\n+            (\"\\u11A8\\u0308\\u11A8\", &[\"\\u11A8\\u0308\", \"\\u11A8\"]), (\"\\u11A8\\uAC00\", &[\"\\u11A8\",\n+            \"\\uAC00\"]), (\"\\u11A8\\u0308\\uAC00\", &[\"\\u11A8\\u0308\", \"\\uAC00\"]), (\"\\u11A8\\uAC01\",\n+            &[\"\\u11A8\", \"\\uAC01\"]), (\"\\u11A8\\u0308\\uAC01\", &[\"\\u11A8\\u0308\", \"\\uAC01\"]),\n+            (\"\\u11A8\\U0001F1E6\", &[\"\\u11A8\", \"\\U0001F1E6\"]), (\"\\u11A8\\u0308\\U0001F1E6\",\n+            &[\"\\u11A8\\u0308\", \"\\U0001F1E6\"]), (\"\\u11A8\\u0378\", &[\"\\u11A8\", \"\\u0378\"]),\n+            (\"\\u11A8\\u0308\\u0378\", &[\"\\u11A8\\u0308\", \"\\u0378\"]), (\"\\uAC00\\u0020\", &[\"\\uAC00\",\n+            \"\\u0020\"]), (\"\\uAC00\\u0308\\u0020\", &[\"\\uAC00\\u0308\", \"\\u0020\"]), (\"\\uAC00\\u000D\",\n+            &[\"\\uAC00\", \"\\u000D\"]), (\"\\uAC00\\u0308\\u000D\", &[\"\\uAC00\\u0308\", \"\\u000D\"]),\n+            (\"\\uAC00\\u000A\", &[\"\\uAC00\", \"\\u000A\"]), (\"\\uAC00\\u0308\\u000A\", &[\"\\uAC00\\u0308\",\n+            \"\\u000A\"]), (\"\\uAC00\\u0001\", &[\"\\uAC00\", \"\\u0001\"]), (\"\\uAC00\\u0308\\u0001\",\n+            &[\"\\uAC00\\u0308\", \"\\u0001\"]), (\"\\uAC00\\u0300\", &[\"\\uAC00\\u0300\"]),\n+            (\"\\uAC00\\u0308\\u0300\", &[\"\\uAC00\\u0308\\u0300\"]), (\"\\uAC00\\u1100\", &[\"\\uAC00\",\n+            \"\\u1100\"]), (\"\\uAC00\\u0308\\u1100\", &[\"\\uAC00\\u0308\", \"\\u1100\"]), (\"\\uAC00\\u1160\",\n+            &[\"\\uAC00\\u1160\"]), (\"\\uAC00\\u0308\\u1160\", &[\"\\uAC00\\u0308\", \"\\u1160\"]),\n+            (\"\\uAC00\\u11A8\", &[\"\\uAC00\\u11A8\"]), (\"\\uAC00\\u0308\\u11A8\", &[\"\\uAC00\\u0308\",\n+            \"\\u11A8\"]), (\"\\uAC00\\uAC00\", &[\"\\uAC00\", \"\\uAC00\"]), (\"\\uAC00\\u0308\\uAC00\",\n+            &[\"\\uAC00\\u0308\", \"\\uAC00\"]), (\"\\uAC00\\uAC01\", &[\"\\uAC00\", \"\\uAC01\"]),\n+            (\"\\uAC00\\u0308\\uAC01\", &[\"\\uAC00\\u0308\", \"\\uAC01\"]), (\"\\uAC00\\U0001F1E6\", &[\"\\uAC00\",\n+            \"\\U0001F1E6\"]), (\"\\uAC00\\u0308\\U0001F1E6\", &[\"\\uAC00\\u0308\", \"\\U0001F1E6\"]),\n+            (\"\\uAC00\\u0378\", &[\"\\uAC00\", \"\\u0378\"]), (\"\\uAC00\\u0308\\u0378\", &[\"\\uAC00\\u0308\",\n+            \"\\u0378\"]), (\"\\uAC01\\u0020\", &[\"\\uAC01\", \"\\u0020\"]), (\"\\uAC01\\u0308\\u0020\",\n+            &[\"\\uAC01\\u0308\", \"\\u0020\"]), (\"\\uAC01\\u000D\", &[\"\\uAC01\", \"\\u000D\"]),\n+            (\"\\uAC01\\u0308\\u000D\", &[\"\\uAC01\\u0308\", \"\\u000D\"]), (\"\\uAC01\\u000A\", &[\"\\uAC01\",\n+            \"\\u000A\"]), (\"\\uAC01\\u0308\\u000A\", &[\"\\uAC01\\u0308\", \"\\u000A\"]), (\"\\uAC01\\u0001\",\n+            &[\"\\uAC01\", \"\\u0001\"]), (\"\\uAC01\\u0308\\u0001\", &[\"\\uAC01\\u0308\", \"\\u0001\"]),\n+            (\"\\uAC01\\u0300\", &[\"\\uAC01\\u0300\"]), (\"\\uAC01\\u0308\\u0300\", &[\"\\uAC01\\u0308\\u0300\"]),\n+            (\"\\uAC01\\u1100\", &[\"\\uAC01\", \"\\u1100\"]), (\"\\uAC01\\u0308\\u1100\", &[\"\\uAC01\\u0308\",\n+            \"\\u1100\"]), (\"\\uAC01\\u1160\", &[\"\\uAC01\", \"\\u1160\"]), (\"\\uAC01\\u0308\\u1160\",\n+            &[\"\\uAC01\\u0308\", \"\\u1160\"]), (\"\\uAC01\\u11A8\", &[\"\\uAC01\\u11A8\"]),\n+            (\"\\uAC01\\u0308\\u11A8\", &[\"\\uAC01\\u0308\", \"\\u11A8\"]), (\"\\uAC01\\uAC00\", &[\"\\uAC01\",\n+            \"\\uAC00\"]), (\"\\uAC01\\u0308\\uAC00\", &[\"\\uAC01\\u0308\", \"\\uAC00\"]), (\"\\uAC01\\uAC01\",\n+            &[\"\\uAC01\", \"\\uAC01\"]), (\"\\uAC01\\u0308\\uAC01\", &[\"\\uAC01\\u0308\", \"\\uAC01\"]),\n+            (\"\\uAC01\\U0001F1E6\", &[\"\\uAC01\", \"\\U0001F1E6\"]), (\"\\uAC01\\u0308\\U0001F1E6\",\n+            &[\"\\uAC01\\u0308\", \"\\U0001F1E6\"]), (\"\\uAC01\\u0378\", &[\"\\uAC01\", \"\\u0378\"]),\n+            (\"\\uAC01\\u0308\\u0378\", &[\"\\uAC01\\u0308\", \"\\u0378\"]), (\"\\U0001F1E6\\u0020\",\n+            &[\"\\U0001F1E6\", \"\\u0020\"]), (\"\\U0001F1E6\\u0308\\u0020\", &[\"\\U0001F1E6\\u0308\",\n+            \"\\u0020\"]), (\"\\U0001F1E6\\u000D\", &[\"\\U0001F1E6\", \"\\u000D\"]),\n+            (\"\\U0001F1E6\\u0308\\u000D\", &[\"\\U0001F1E6\\u0308\", \"\\u000D\"]), (\"\\U0001F1E6\\u000A\",\n+            &[\"\\U0001F1E6\", \"\\u000A\"]), (\"\\U0001F1E6\\u0308\\u000A\", &[\"\\U0001F1E6\\u0308\",\n+            \"\\u000A\"]), (\"\\U0001F1E6\\u0001\", &[\"\\U0001F1E6\", \"\\u0001\"]),\n+            (\"\\U0001F1E6\\u0308\\u0001\", &[\"\\U0001F1E6\\u0308\", \"\\u0001\"]), (\"\\U0001F1E6\\u0300\",\n+            &[\"\\U0001F1E6\\u0300\"]), (\"\\U0001F1E6\\u0308\\u0300\", &[\"\\U0001F1E6\\u0308\\u0300\"]),\n+            (\"\\U0001F1E6\\u1100\", &[\"\\U0001F1E6\", \"\\u1100\"]), (\"\\U0001F1E6\\u0308\\u1100\",\n+            &[\"\\U0001F1E6\\u0308\", \"\\u1100\"]), (\"\\U0001F1E6\\u1160\", &[\"\\U0001F1E6\", \"\\u1160\"]),\n+            (\"\\U0001F1E6\\u0308\\u1160\", &[\"\\U0001F1E6\\u0308\", \"\\u1160\"]), (\"\\U0001F1E6\\u11A8\",\n+            &[\"\\U0001F1E6\", \"\\u11A8\"]), (\"\\U0001F1E6\\u0308\\u11A8\", &[\"\\U0001F1E6\\u0308\",\n+            \"\\u11A8\"]), (\"\\U0001F1E6\\uAC00\", &[\"\\U0001F1E6\", \"\\uAC00\"]),\n+            (\"\\U0001F1E6\\u0308\\uAC00\", &[\"\\U0001F1E6\\u0308\", \"\\uAC00\"]), (\"\\U0001F1E6\\uAC01\",\n+            &[\"\\U0001F1E6\", \"\\uAC01\"]), (\"\\U0001F1E6\\u0308\\uAC01\", &[\"\\U0001F1E6\\u0308\",\n+            \"\\uAC01\"]), (\"\\U0001F1E6\\U0001F1E6\", &[\"\\U0001F1E6\\U0001F1E6\"]),\n+            (\"\\U0001F1E6\\u0308\\U0001F1E6\", &[\"\\U0001F1E6\\u0308\", \"\\U0001F1E6\"]),\n+            (\"\\U0001F1E6\\u0378\", &[\"\\U0001F1E6\", \"\\u0378\"]), (\"\\U0001F1E6\\u0308\\u0378\",\n+            &[\"\\U0001F1E6\\u0308\", \"\\u0378\"]), (\"\\u0378\\u0020\", &[\"\\u0378\", \"\\u0020\"]),\n+            (\"\\u0378\\u0308\\u0020\", &[\"\\u0378\\u0308\", \"\\u0020\"]), (\"\\u0378\\u000D\", &[\"\\u0378\",\n+            \"\\u000D\"]), (\"\\u0378\\u0308\\u000D\", &[\"\\u0378\\u0308\", \"\\u000D\"]), (\"\\u0378\\u000A\",\n+            &[\"\\u0378\", \"\\u000A\"]), (\"\\u0378\\u0308\\u000A\", &[\"\\u0378\\u0308\", \"\\u000A\"]),\n+            (\"\\u0378\\u0001\", &[\"\\u0378\", \"\\u0001\"]), (\"\\u0378\\u0308\\u0001\", &[\"\\u0378\\u0308\",\n+            \"\\u0001\"]), (\"\\u0378\\u0300\", &[\"\\u0378\\u0300\"]), (\"\\u0378\\u0308\\u0300\",\n+            &[\"\\u0378\\u0308\\u0300\"]), (\"\\u0378\\u1100\", &[\"\\u0378\", \"\\u1100\"]),\n+            (\"\\u0378\\u0308\\u1100\", &[\"\\u0378\\u0308\", \"\\u1100\"]), (\"\\u0378\\u1160\", &[\"\\u0378\",\n+            \"\\u1160\"]), (\"\\u0378\\u0308\\u1160\", &[\"\\u0378\\u0308\", \"\\u1160\"]), (\"\\u0378\\u11A8\",\n+            &[\"\\u0378\", \"\\u11A8\"]), (\"\\u0378\\u0308\\u11A8\", &[\"\\u0378\\u0308\", \"\\u11A8\"]),\n+            (\"\\u0378\\uAC00\", &[\"\\u0378\", \"\\uAC00\"]), (\"\\u0378\\u0308\\uAC00\", &[\"\\u0378\\u0308\",\n+            \"\\uAC00\"]), (\"\\u0378\\uAC01\", &[\"\\u0378\", \"\\uAC01\"]), (\"\\u0378\\u0308\\uAC01\",\n+            &[\"\\u0378\\u0308\", \"\\uAC01\"]), (\"\\u0378\\U0001F1E6\", &[\"\\u0378\", \"\\U0001F1E6\"]),\n+            (\"\\u0378\\u0308\\U0001F1E6\", &[\"\\u0378\\u0308\", \"\\U0001F1E6\"]), (\"\\u0378\\u0378\",\n+            &[\"\\u0378\", \"\\u0378\"]), (\"\\u0378\\u0308\\u0378\", &[\"\\u0378\\u0308\", \"\\u0378\"]),\n+            (\"\\u0061\\U0001F1E6\\u0062\", &[\"\\u0061\", \"\\U0001F1E6\", \"\\u0062\"]),\n+            (\"\\U0001F1F7\\U0001F1FA\", &[\"\\U0001F1F7\\U0001F1FA\"]),\n+            (\"\\U0001F1F7\\U0001F1FA\\U0001F1F8\", &[\"\\U0001F1F7\\U0001F1FA\\U0001F1F8\"]),\n+            (\"\\U0001F1F7\\U0001F1FA\\U0001F1F8\\U0001F1EA\",\n+            &[\"\\U0001F1F7\\U0001F1FA\\U0001F1F8\\U0001F1EA\"]),\n+            (\"\\U0001F1F7\\U0001F1FA\\u200B\\U0001F1F8\\U0001F1EA\", &[\"\\U0001F1F7\\U0001F1FA\", \"\\u200B\",\n+            \"\\U0001F1F8\\U0001F1EA\"]), (\"\\U0001F1E6\\U0001F1E7\\U0001F1E8\",\n+            &[\"\\U0001F1E6\\U0001F1E7\\U0001F1E8\"]), (\"\\U0001F1E6\\u200D\\U0001F1E7\\U0001F1E8\",\n+            &[\"\\U0001F1E6\\u200D\", \"\\U0001F1E7\\U0001F1E8\"]),\n+            (\"\\U0001F1E6\\U0001F1E7\\u200D\\U0001F1E8\", &[\"\\U0001F1E6\\U0001F1E7\\u200D\",\n+            \"\\U0001F1E8\"]), (\"\\u0020\\u200D\\u0646\", &[\"\\u0020\\u200D\", \"\\u0646\"]),\n+            (\"\\u0646\\u200D\\u0020\", &[\"\\u0646\\u200D\", \"\\u0020\"]),\n+        ];\n+\n+        let test_diff = [\n+            (\"\\u0020\\u0903\", &[\"\\u0020\\u0903\"], &[\"\\u0020\", \"\\u0903\"]), (\"\\u0020\\u0308\\u0903\",\n+            &[\"\\u0020\\u0308\\u0903\"], &[\"\\u0020\\u0308\", \"\\u0903\"]), (\"\\u000D\\u0308\\u0903\",\n+            &[\"\\u000D\", \"\\u0308\\u0903\"], &[\"\\u000D\", \"\\u0308\", \"\\u0903\"]), (\"\\u000A\\u0308\\u0903\",\n+            &[\"\\u000A\", \"\\u0308\\u0903\"], &[\"\\u000A\", \"\\u0308\", \"\\u0903\"]), (\"\\u0001\\u0308\\u0903\",\n+            &[\"\\u0001\", \"\\u0308\\u0903\"], &[\"\\u0001\", \"\\u0308\", \"\\u0903\"]), (\"\\u0300\\u0903\",\n+            &[\"\\u0300\\u0903\"], &[\"\\u0300\", \"\\u0903\"]), (\"\\u0300\\u0308\\u0903\",\n+            &[\"\\u0300\\u0308\\u0903\"], &[\"\\u0300\\u0308\", \"\\u0903\"]), (\"\\u0903\\u0903\",\n+            &[\"\\u0903\\u0903\"], &[\"\\u0903\", \"\\u0903\"]), (\"\\u0903\\u0308\\u0903\",\n+            &[\"\\u0903\\u0308\\u0903\"], &[\"\\u0903\\u0308\", \"\\u0903\"]), (\"\\u1100\\u0903\",\n+            &[\"\\u1100\\u0903\"], &[\"\\u1100\", \"\\u0903\"]), (\"\\u1100\\u0308\\u0903\",\n+            &[\"\\u1100\\u0308\\u0903\"], &[\"\\u1100\\u0308\", \"\\u0903\"]), (\"\\u1160\\u0903\",\n+            &[\"\\u1160\\u0903\"], &[\"\\u1160\", \"\\u0903\"]), (\"\\u1160\\u0308\\u0903\",\n+            &[\"\\u1160\\u0308\\u0903\"], &[\"\\u1160\\u0308\", \"\\u0903\"]), (\"\\u11A8\\u0903\",\n+            &[\"\\u11A8\\u0903\"], &[\"\\u11A8\", \"\\u0903\"]), (\"\\u11A8\\u0308\\u0903\",\n+            &[\"\\u11A8\\u0308\\u0903\"], &[\"\\u11A8\\u0308\", \"\\u0903\"]), (\"\\uAC00\\u0903\",\n+            &[\"\\uAC00\\u0903\"], &[\"\\uAC00\", \"\\u0903\"]), (\"\\uAC00\\u0308\\u0903\",\n+            &[\"\\uAC00\\u0308\\u0903\"], &[\"\\uAC00\\u0308\", \"\\u0903\"]), (\"\\uAC01\\u0903\",\n+            &[\"\\uAC01\\u0903\"], &[\"\\uAC01\", \"\\u0903\"]), (\"\\uAC01\\u0308\\u0903\",\n+            &[\"\\uAC01\\u0308\\u0903\"], &[\"\\uAC01\\u0308\", \"\\u0903\"]), (\"\\U0001F1E6\\u0903\",\n+            &[\"\\U0001F1E6\\u0903\"], &[\"\\U0001F1E6\", \"\\u0903\"]), (\"\\U0001F1E6\\u0308\\u0903\",\n+            &[\"\\U0001F1E6\\u0308\\u0903\"], &[\"\\U0001F1E6\\u0308\", \"\\u0903\"]), (\"\\u0378\\u0903\",\n+            &[\"\\u0378\\u0903\"], &[\"\\u0378\", \"\\u0903\"]), (\"\\u0378\\u0308\\u0903\",\n+            &[\"\\u0378\\u0308\\u0903\"], &[\"\\u0378\\u0308\", \"\\u0903\"]),\n+        ];\n+\n+        for &(s, g) in test_same.iter() {\n+            // test forward iterator\n+            assert!(order::equals(s.graphemes(true), g.iter().map(|&x| x)));\n+            assert!(order::equals(s.graphemes(false), g.iter().map(|&x| x)));\n+\n+            // test reverse iterator\n+            assert!(order::equals(s.graphemes(true).rev(), g.iter().rev().map(|&x| x)));\n+            assert!(order::equals(s.graphemes(false).rev(), g.iter().rev().map(|&x| x)));\n+        }\n+\n+        for &(s, gt, gf) in test_diff.iter() {\n+            // test forward iterator\n+            assert!(order::equals(s.graphemes(true), gt.iter().map(|&x| x)));\n+            assert!(order::equals(s.graphemes(false), gf.iter().map(|&x| x)));\n+\n+            // test reverse iterator\n+            assert!(order::equals(s.graphemes(true).rev(), gt.iter().rev().map(|&x| x)));\n+            assert!(order::equals(s.graphemes(false).rev(), gf.iter().rev().map(|&x| x)));\n+        }\n+\n+        // test the indices iterators\n+        let s = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n+        let gr_inds = s.grapheme_indices(true).collect::<Vec<(uint, &str)>>();\n+        assert_eq!(gr_inds.as_slice(), &[(0u, \"a\u0310\"), (3, \"e\u0301\"), (6, \"o\u0308\u0332\"), (11, \"\\r\\n\")]);\n+        let gr_inds = s.grapheme_indices(true).rev().collect::<Vec<(uint, &str)>>();\n+        assert_eq!(gr_inds.as_slice(), &[(11, \"\\r\\n\"), (6, \"o\u0308\u0332\"), (3, \"e\u0301\"), (0u, \"a\u0310\")]);\n+        let mut gr_inds = s.grapheme_indices(true);\n+        let e1 = gr_inds.size_hint();\n+        assert_eq!(e1, (1, Some(13)));\n+        let c = gr_inds.count();\n+        assert_eq!(c, 4);\n+        let e2 = gr_inds.size_hint();\n+        assert_eq!(e2, (0, Some(0)));\n+\n+        // make sure the reverse iterator does the right thing with \"\\n\" at beginning of string\n+        let s = \"\\n\\r\\n\\r\";\n+        let gr = s.graphemes(true).rev().collect::<Vec<&str>>();\n+        assert_eq!(gr.as_slice(), &[\"\\r\", \"\\r\\n\", \"\\n\"]);\n+    }\n+\n     #[test]\n     fn test_split_strator() {\n         fn t(s: &str, sep: &str, u: &[&str]) {"}, {"sha": "c1c918ad3b3184890cff3befef0483ecba848319", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "patch": "@@ -237,7 +237,7 @@ use str::{Str, StrSlice};\n use str;\n use string::String;\n use uint;\n-use unicode::UnicodeChar;\n+use unicode::char::UnicodeChar;\n use vec::Vec;\n \n // Reexports"}, {"sha": "02d9dc4448984252ab36b372b8eff54dc609f758", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "patch": "@@ -24,7 +24,7 @@ use option::{Option, Some, None};\n use slice::{Vector, ImmutableVector};\n use str::{CharSplits, Str, StrAllocating, StrVector, StrSlice};\n use string::String;\n-use unicode::UnicodeChar;\n+use unicode::char::UnicodeChar;\n use vec::Vec;\n \n use super::{contains_nul, BytesContainer, GenericPath, GenericPathUnsafe};"}, {"sha": "eee494c7bc0a1e218808812459dedfe88569a81c", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "patch": "@@ -59,7 +59,7 @@\n #[doc(no_inline)] pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr};\n #[doc(no_inline)] pub use ascii::IntoBytes;\n #[doc(no_inline)] pub use c_str::ToCStr;\n-#[doc(no_inline)] pub use char::Char;\n+#[doc(no_inline)] pub use char::{Char, UnicodeChar};\n #[doc(no_inline)] pub use clone::Clone;\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[doc(no_inline)] pub use cmp::{Ordering, Less, Equal, Greater, Equiv};\n@@ -77,7 +77,7 @@\n #[doc(no_inline)] pub use ptr::RawPtr;\n #[doc(no_inline)] pub use io::{Buffer, Writer, Reader, Seek};\n #[doc(no_inline)] pub use str::{Str, StrVector, StrSlice, OwnedStr};\n-#[doc(no_inline)] pub use str::{IntoMaybeOwned, StrAllocating};\n+#[doc(no_inline)] pub use str::{IntoMaybeOwned, StrAllocating, UnicodeStrSlice};\n #[doc(no_inline)] pub use to_str::{ToString, IntoStr};\n #[doc(no_inline)] pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n #[doc(no_inline)] pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n@@ -89,7 +89,6 @@\n #[doc(no_inline)] pub use slice::{Vector, VectorVector};\n #[doc(no_inline)] pub use slice::MutableVectorAllocating;\n #[doc(no_inline)] pub use string::String;\n-#[doc(no_inline)] pub use unicode::{UnicodeChar, UnicodeStrSlice};\n #[doc(no_inline)] pub use vec::Vec;\n \n // Reexported runtime types"}, {"sha": "1594e3ba0a248ae157d6904becdfe5d9bb51c1fe", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "patch": "@@ -21,7 +21,7 @@ use os;\n use result::{Ok, Err};\n use str::StrSlice;\n use sync::atomics;\n-use unicode::UnicodeChar;\n+use unicode::char::UnicodeChar;\n \n pub use self::imp::write;\n "}, {"sha": "13e54ed3c977bf1a2062e49ddfc1dbd1d7730886", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "patch": "@@ -33,13 +33,9 @@\n \n extern crate core;\n \n-pub use tables::normalization::canonical_combining_class;\n+// regex module\n pub use tables::regex;\n \n-pub use u_char::UnicodeChar;\n-pub use u_str::UnicodeStrSlice;\n-pub use u_str::Words;\n-\n mod decompose;\n mod tables;\n mod u_char;\n@@ -66,11 +62,22 @@ pub mod char {\n     pub use core::char::{from_digit, escape_unicode, escape_default};\n     pub use core::char::{len_utf8_bytes, Char};\n \n-    pub use decompose::decompose_canonical;\n-    pub use decompose::decompose_compatible;\n+    pub use decompose::{decompose_canonical, decompose_compatible};\n+\n+    pub use tables::normalization::canonical_combining_class;\n \n     pub use u_char::{is_alphabetic, is_XID_start, is_XID_continue};\n     pub use u_char::{is_lowercase, is_uppercase, is_whitespace};\n     pub use u_char::{is_alphanumeric, is_control, is_digit};\n     pub use u_char::{to_uppercase, to_lowercase, width, UnicodeChar};\n }\n+\n+pub mod str {\n+    pub use u_str::{UnicodeStrSlice, Words, Graphemes, GraphemeIndices};\n+}\n+\n+// this lets us use #[deriving(Clone)]\n+mod std {\n+    pub use core::clone;\n+    pub use core::cmp;\n+}"}, {"sha": "650f93abd3e9327516bec2a29224edc240fed3e3", "filename": "src/libunicode/tables.rs", "status": "modified", "additions": 873, "deletions": 12, "changes": 885, "blob_url": "https://github.com/rust-lang/rust/blob/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibunicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibunicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Ftables.rs?ref=cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "patch": "@@ -25,13 +25,178 @@ fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n \n pub mod general_category {\n     pub static C_table: &'static [(char, char)] = &[\n-        ('\\x00', '\\x1f'), ('\\x7f', '\\x9f'), ('\\xad', '\\xad'), ('\\u0600', '\\u0605'), ('\\u061c',\n-        '\\u061c'), ('\\u06dd', '\\u06dd'), ('\\u070f', '\\u070f'), ('\\u180e', '\\u180e'), ('\\u200b',\n-        '\\u200f'), ('\\u202a', '\\u202e'), ('\\u2060', '\\u2064'), ('\\u2066', '\\u206f'), ('\\ue000',\n-        '\\ue000'), ('\\uf8ff', '\\uf8ff'), ('\\ufeff', '\\ufeff'), ('\\ufff9', '\\ufffb'), ('\\U000110bd',\n-        '\\U000110bd'), ('\\U0001bca0', '\\U0001bca3'), ('\\U0001d173', '\\U0001d17a'), ('\\U000e0001',\n-        '\\U000e0001'), ('\\U000e0020', '\\U000e007f'), ('\\U000f0000', '\\U000f0000'), ('\\U000ffffd',\n-        '\\U000ffffd'), ('\\U00100000', '\\U00100000'), ('\\U0010fffd', '\\U0010fffd')\n+        ('\\x00', '\\x1f'), ('\\x7f', '\\x9f'), ('\\xad', '\\xad'), ('\\u0378', '\\u0379'), ('\\u0380',\n+        '\\u0383'), ('\\u038b', '\\u038b'), ('\\u038d', '\\u038d'), ('\\u03a2', '\\u03a2'), ('\\u0530',\n+        '\\u0530'), ('\\u0557', '\\u0558'), ('\\u0560', '\\u0560'), ('\\u0588', '\\u0588'), ('\\u058b',\n+        '\\u058c'), ('\\u0590', '\\u0590'), ('\\u05c8', '\\u05cf'), ('\\u05eb', '\\u05ef'), ('\\u05f5',\n+        '\\u0605'), ('\\u061c', '\\u061d'), ('\\u06dd', '\\u06dd'), ('\\u070e', '\\u070f'), ('\\u074b',\n+        '\\u074c'), ('\\u07b2', '\\u07bf'), ('\\u07fb', '\\u07ff'), ('\\u082e', '\\u082f'), ('\\u083f',\n+        '\\u083f'), ('\\u085c', '\\u085d'), ('\\u085f', '\\u089f'), ('\\u08b3', '\\u08e3'), ('\\u0984',\n+        '\\u0984'), ('\\u098d', '\\u098e'), ('\\u0991', '\\u0992'), ('\\u09a9', '\\u09a9'), ('\\u09b1',\n+        '\\u09b1'), ('\\u09b3', '\\u09b5'), ('\\u09ba', '\\u09bb'), ('\\u09c5', '\\u09c6'), ('\\u09c9',\n+        '\\u09ca'), ('\\u09cf', '\\u09d6'), ('\\u09d8', '\\u09db'), ('\\u09de', '\\u09de'), ('\\u09e4',\n+        '\\u09e5'), ('\\u09fc', '\\u0a00'), ('\\u0a04', '\\u0a04'), ('\\u0a0b', '\\u0a0e'), ('\\u0a11',\n+        '\\u0a12'), ('\\u0a29', '\\u0a29'), ('\\u0a31', '\\u0a31'), ('\\u0a34', '\\u0a34'), ('\\u0a37',\n+        '\\u0a37'), ('\\u0a3a', '\\u0a3b'), ('\\u0a3d', '\\u0a3d'), ('\\u0a43', '\\u0a46'), ('\\u0a49',\n+        '\\u0a4a'), ('\\u0a4e', '\\u0a50'), ('\\u0a52', '\\u0a58'), ('\\u0a5d', '\\u0a5d'), ('\\u0a5f',\n+        '\\u0a65'), ('\\u0a76', '\\u0a80'), ('\\u0a84', '\\u0a84'), ('\\u0a8e', '\\u0a8e'), ('\\u0a92',\n+        '\\u0a92'), ('\\u0aa9', '\\u0aa9'), ('\\u0ab1', '\\u0ab1'), ('\\u0ab4', '\\u0ab4'), ('\\u0aba',\n+        '\\u0abb'), ('\\u0ac6', '\\u0ac6'), ('\\u0aca', '\\u0aca'), ('\\u0ace', '\\u0acf'), ('\\u0ad1',\n+        '\\u0adf'), ('\\u0ae4', '\\u0ae5'), ('\\u0af2', '\\u0b00'), ('\\u0b04', '\\u0b04'), ('\\u0b0d',\n+        '\\u0b0e'), ('\\u0b11', '\\u0b12'), ('\\u0b29', '\\u0b29'), ('\\u0b31', '\\u0b31'), ('\\u0b34',\n+        '\\u0b34'), ('\\u0b3a', '\\u0b3b'), ('\\u0b45', '\\u0b46'), ('\\u0b49', '\\u0b4a'), ('\\u0b4e',\n+        '\\u0b55'), ('\\u0b58', '\\u0b5b'), ('\\u0b5e', '\\u0b5e'), ('\\u0b64', '\\u0b65'), ('\\u0b78',\n+        '\\u0b81'), ('\\u0b84', '\\u0b84'), ('\\u0b8b', '\\u0b8d'), ('\\u0b91', '\\u0b91'), ('\\u0b96',\n+        '\\u0b98'), ('\\u0b9b', '\\u0b9b'), ('\\u0b9d', '\\u0b9d'), ('\\u0ba0', '\\u0ba2'), ('\\u0ba5',\n+        '\\u0ba7'), ('\\u0bab', '\\u0bad'), ('\\u0bba', '\\u0bbd'), ('\\u0bc3', '\\u0bc5'), ('\\u0bc9',\n+        '\\u0bc9'), ('\\u0bce', '\\u0bcf'), ('\\u0bd1', '\\u0bd6'), ('\\u0bd8', '\\u0be5'), ('\\u0bfb',\n+        '\\u0bff'), ('\\u0c04', '\\u0c04'), ('\\u0c0d', '\\u0c0d'), ('\\u0c11', '\\u0c11'), ('\\u0c29',\n+        '\\u0c29'), ('\\u0c3a', '\\u0c3c'), ('\\u0c45', '\\u0c45'), ('\\u0c49', '\\u0c49'), ('\\u0c4e',\n+        '\\u0c54'), ('\\u0c57', '\\u0c57'), ('\\u0c5a', '\\u0c5f'), ('\\u0c64', '\\u0c65'), ('\\u0c70',\n+        '\\u0c77'), ('\\u0c80', '\\u0c80'), ('\\u0c84', '\\u0c84'), ('\\u0c8d', '\\u0c8d'), ('\\u0c91',\n+        '\\u0c91'), ('\\u0ca9', '\\u0ca9'), ('\\u0cb4', '\\u0cb4'), ('\\u0cba', '\\u0cbb'), ('\\u0cc5',\n+        '\\u0cc5'), ('\\u0cc9', '\\u0cc9'), ('\\u0cce', '\\u0cd4'), ('\\u0cd7', '\\u0cdd'), ('\\u0cdf',\n+        '\\u0cdf'), ('\\u0ce4', '\\u0ce5'), ('\\u0cf0', '\\u0cf0'), ('\\u0cf3', '\\u0d00'), ('\\u0d04',\n+        '\\u0d04'), ('\\u0d0d', '\\u0d0d'), ('\\u0d11', '\\u0d11'), ('\\u0d3b', '\\u0d3c'), ('\\u0d45',\n+        '\\u0d45'), ('\\u0d49', '\\u0d49'), ('\\u0d4f', '\\u0d56'), ('\\u0d58', '\\u0d5f'), ('\\u0d64',\n+        '\\u0d65'), ('\\u0d76', '\\u0d78'), ('\\u0d80', '\\u0d81'), ('\\u0d84', '\\u0d84'), ('\\u0d97',\n+        '\\u0d99'), ('\\u0db2', '\\u0db2'), ('\\u0dbc', '\\u0dbc'), ('\\u0dbe', '\\u0dbf'), ('\\u0dc7',\n+        '\\u0dc9'), ('\\u0dcb', '\\u0dce'), ('\\u0dd5', '\\u0dd5'), ('\\u0dd7', '\\u0dd7'), ('\\u0de0',\n+        '\\u0de5'), ('\\u0df0', '\\u0df1'), ('\\u0df5', '\\u0e00'), ('\\u0e3b', '\\u0e3e'), ('\\u0e5c',\n+        '\\u0e80'), ('\\u0e83', '\\u0e83'), ('\\u0e85', '\\u0e86'), ('\\u0e89', '\\u0e89'), ('\\u0e8b',\n+        '\\u0e8c'), ('\\u0e8e', '\\u0e93'), ('\\u0e98', '\\u0e98'), ('\\u0ea0', '\\u0ea0'), ('\\u0ea4',\n+        '\\u0ea4'), ('\\u0ea6', '\\u0ea6'), ('\\u0ea8', '\\u0ea9'), ('\\u0eac', '\\u0eac'), ('\\u0eba',\n+        '\\u0eba'), ('\\u0ebe', '\\u0ebf'), ('\\u0ec5', '\\u0ec5'), ('\\u0ec7', '\\u0ec7'), ('\\u0ece',\n+        '\\u0ecf'), ('\\u0eda', '\\u0edb'), ('\\u0ee0', '\\u0eff'), ('\\u0f48', '\\u0f48'), ('\\u0f6d',\n+        '\\u0f70'), ('\\u0f98', '\\u0f98'), ('\\u0fbd', '\\u0fbd'), ('\\u0fcd', '\\u0fcd'), ('\\u0fdb',\n+        '\\u0fff'), ('\\u10c6', '\\u10c6'), ('\\u10c8', '\\u10cc'), ('\\u10ce', '\\u10cf'), ('\\u1249',\n+        '\\u1249'), ('\\u124e', '\\u124f'), ('\\u1257', '\\u1257'), ('\\u1259', '\\u1259'), ('\\u125e',\n+        '\\u125f'), ('\\u1289', '\\u1289'), ('\\u128e', '\\u128f'), ('\\u12b1', '\\u12b1'), ('\\u12b6',\n+        '\\u12b7'), ('\\u12bf', '\\u12bf'), ('\\u12c1', '\\u12c1'), ('\\u12c6', '\\u12c7'), ('\\u12d7',\n+        '\\u12d7'), ('\\u1311', '\\u1311'), ('\\u1316', '\\u1317'), ('\\u135b', '\\u135c'), ('\\u137d',\n+        '\\u137f'), ('\\u139a', '\\u139f'), ('\\u13f5', '\\u13ff'), ('\\u169d', '\\u169f'), ('\\u16f9',\n+        '\\u16ff'), ('\\u170d', '\\u170d'), ('\\u1715', '\\u171f'), ('\\u1737', '\\u173f'), ('\\u1754',\n+        '\\u175f'), ('\\u176d', '\\u176d'), ('\\u1771', '\\u1771'), ('\\u1774', '\\u177f'), ('\\u17de',\n+        '\\u17df'), ('\\u17ea', '\\u17ef'), ('\\u17fa', '\\u17ff'), ('\\u180e', '\\u180f'), ('\\u181a',\n+        '\\u181f'), ('\\u1878', '\\u187f'), ('\\u18ab', '\\u18af'), ('\\u18f6', '\\u18ff'), ('\\u191f',\n+        '\\u191f'), ('\\u192c', '\\u192f'), ('\\u193c', '\\u193f'), ('\\u1941', '\\u1943'), ('\\u196e',\n+        '\\u196f'), ('\\u1975', '\\u197f'), ('\\u19ac', '\\u19af'), ('\\u19ca', '\\u19cf'), ('\\u19db',\n+        '\\u19dd'), ('\\u1a1c', '\\u1a1d'), ('\\u1a5f', '\\u1a5f'), ('\\u1a7d', '\\u1a7e'), ('\\u1a8a',\n+        '\\u1a8f'), ('\\u1a9a', '\\u1a9f'), ('\\u1aae', '\\u1aaf'), ('\\u1abf', '\\u1aff'), ('\\u1b4c',\n+        '\\u1b4f'), ('\\u1b7d', '\\u1b7f'), ('\\u1bf4', '\\u1bfb'), ('\\u1c38', '\\u1c3a'), ('\\u1c4a',\n+        '\\u1c4c'), ('\\u1c80', '\\u1cbf'), ('\\u1cc8', '\\u1ccf'), ('\\u1cf7', '\\u1cf7'), ('\\u1cfa',\n+        '\\u1cff'), ('\\u1df6', '\\u1dfb'), ('\\u1f16', '\\u1f17'), ('\\u1f1e', '\\u1f1f'), ('\\u1f46',\n+        '\\u1f47'), ('\\u1f4e', '\\u1f4f'), ('\\u1f58', '\\u1f58'), ('\\u1f5a', '\\u1f5a'), ('\\u1f5c',\n+        '\\u1f5c'), ('\\u1f5e', '\\u1f5e'), ('\\u1f7e', '\\u1f7f'), ('\\u1fb5', '\\u1fb5'), ('\\u1fc5',\n+        '\\u1fc5'), ('\\u1fd4', '\\u1fd5'), ('\\u1fdc', '\\u1fdc'), ('\\u1ff0', '\\u1ff1'), ('\\u1ff5',\n+        '\\u1ff5'), ('\\u1fff', '\\u1fff'), ('\\u200b', '\\u200f'), ('\\u202a', '\\u202e'), ('\\u2060',\n+        '\\u206f'), ('\\u2072', '\\u2073'), ('\\u208f', '\\u208f'), ('\\u209d', '\\u209f'), ('\\u20be',\n+        '\\u20cf'), ('\\u20f1', '\\u20ff'), ('\\u218a', '\\u218f'), ('\\u23fb', '\\u23ff'), ('\\u2427',\n+        '\\u243f'), ('\\u244b', '\\u245f'), ('\\u2b74', '\\u2b75'), ('\\u2b96', '\\u2b97'), ('\\u2bba',\n+        '\\u2bbc'), ('\\u2bc9', '\\u2bc9'), ('\\u2bd2', '\\u2bff'), ('\\u2c2f', '\\u2c2f'), ('\\u2c5f',\n+        '\\u2c5f'), ('\\u2cf4', '\\u2cf8'), ('\\u2d26', '\\u2d26'), ('\\u2d28', '\\u2d2c'), ('\\u2d2e',\n+        '\\u2d2f'), ('\\u2d68', '\\u2d6e'), ('\\u2d71', '\\u2d7e'), ('\\u2d97', '\\u2d9f'), ('\\u2da7',\n+        '\\u2da7'), ('\\u2daf', '\\u2daf'), ('\\u2db7', '\\u2db7'), ('\\u2dbf', '\\u2dbf'), ('\\u2dc7',\n+        '\\u2dc7'), ('\\u2dcf', '\\u2dcf'), ('\\u2dd7', '\\u2dd7'), ('\\u2ddf', '\\u2ddf'), ('\\u2e43',\n+        '\\u2e7f'), ('\\u2e9a', '\\u2e9a'), ('\\u2ef4', '\\u2eff'), ('\\u2fd6', '\\u2fef'), ('\\u2ffc',\n+        '\\u2fff'), ('\\u3040', '\\u3040'), ('\\u3097', '\\u3098'), ('\\u3100', '\\u3104'), ('\\u312e',\n+        '\\u3130'), ('\\u318f', '\\u318f'), ('\\u31bb', '\\u31bf'), ('\\u31e4', '\\u31ef'), ('\\u321f',\n+        '\\u321f'), ('\\u32ff', '\\u32ff'), ('\\u3401', '\\u4db4'), ('\\u4db6', '\\u4dbf'), ('\\u4e01',\n+        '\\u9fcb'), ('\\u9fcd', '\\u9fff'), ('\\ua48d', '\\ua48f'), ('\\ua4c7', '\\ua4cf'), ('\\ua62c',\n+        '\\ua63f'), ('\\ua69e', '\\ua69e'), ('\\ua6f8', '\\ua6ff'), ('\\ua78f', '\\ua78f'), ('\\ua7ae',\n+        '\\ua7af'), ('\\ua7b2', '\\ua7f6'), ('\\ua82c', '\\ua82f'), ('\\ua83a', '\\ua83f'), ('\\ua878',\n+        '\\ua87f'), ('\\ua8c5', '\\ua8cd'), ('\\ua8da', '\\ua8df'), ('\\ua8fc', '\\ua8ff'), ('\\ua954',\n+        '\\ua95e'), ('\\ua97d', '\\ua97f'), ('\\ua9ce', '\\ua9ce'), ('\\ua9da', '\\ua9dd'), ('\\ua9ff',\n+        '\\ua9ff'), ('\\uaa37', '\\uaa3f'), ('\\uaa4e', '\\uaa4f'), ('\\uaa5a', '\\uaa5b'), ('\\uaac3',\n+        '\\uaada'), ('\\uaaf7', '\\uab00'), ('\\uab07', '\\uab08'), ('\\uab0f', '\\uab10'), ('\\uab17',\n+        '\\uab1f'), ('\\uab27', '\\uab27'), ('\\uab2f', '\\uab2f'), ('\\uab60', '\\uab63'), ('\\uab66',\n+        '\\uabbf'), ('\\uabee', '\\uabef'), ('\\uabfa', '\\uabff'), ('\\uac01', '\\ud7a2'), ('\\ud7a4',\n+        '\\ud7af'), ('\\ud7c7', '\\ud7ca'), ('\\ud7fc', '\\ud7ff'), ('\\ue000', '\\uf8ff'), ('\\ufa6e',\n+        '\\ufa6f'), ('\\ufada', '\\ufaff'), ('\\ufb07', '\\ufb12'), ('\\ufb18', '\\ufb1c'), ('\\ufb37',\n+        '\\ufb37'), ('\\ufb3d', '\\ufb3d'), ('\\ufb3f', '\\ufb3f'), ('\\ufb42', '\\ufb42'), ('\\ufb45',\n+        '\\ufb45'), ('\\ufbc2', '\\ufbd2'), ('\\ufd40', '\\ufd4f'), ('\\ufd90', '\\ufd91'), ('\\ufdc8',\n+        '\\ufdef'), ('\\ufdfe', '\\ufdff'), ('\\ufe1a', '\\ufe1f'), ('\\ufe2e', '\\ufe2f'), ('\\ufe53',\n+        '\\ufe53'), ('\\ufe67', '\\ufe67'), ('\\ufe6c', '\\ufe6f'), ('\\ufe75', '\\ufe75'), ('\\ufefd',\n+        '\\uff00'), ('\\uffbf', '\\uffc1'), ('\\uffc8', '\\uffc9'), ('\\uffd0', '\\uffd1'), ('\\uffd8',\n+        '\\uffd9'), ('\\uffdd', '\\uffdf'), ('\\uffe7', '\\uffe7'), ('\\uffef', '\\ufffb'), ('\\ufffe',\n+        '\\uffff'), ('\\U0001000c', '\\U0001000c'), ('\\U00010027', '\\U00010027'), ('\\U0001003b',\n+        '\\U0001003b'), ('\\U0001003e', '\\U0001003e'), ('\\U0001004e', '\\U0001004f'), ('\\U0001005e',\n+        '\\U0001007f'), ('\\U000100fb', '\\U000100ff'), ('\\U00010103', '\\U00010106'), ('\\U00010134',\n+        '\\U00010136'), ('\\U0001018d', '\\U0001018f'), ('\\U0001019c', '\\U0001019f'), ('\\U000101a1',\n+        '\\U000101cf'), ('\\U000101fe', '\\U0001027f'), ('\\U0001029d', '\\U0001029f'), ('\\U000102d1',\n+        '\\U000102df'), ('\\U000102fc', '\\U000102ff'), ('\\U00010324', '\\U0001032f'), ('\\U0001034b',\n+        '\\U0001034f'), ('\\U0001037b', '\\U0001037f'), ('\\U0001039e', '\\U0001039e'), ('\\U000103c4',\n+        '\\U000103c7'), ('\\U000103d6', '\\U000103ff'), ('\\U0001049e', '\\U0001049f'), ('\\U000104aa',\n+        '\\U000104ff'), ('\\U00010528', '\\U0001052f'), ('\\U00010564', '\\U0001056e'), ('\\U00010570',\n+        '\\U000105ff'), ('\\U00010737', '\\U0001073f'), ('\\U00010756', '\\U0001075f'), ('\\U00010768',\n+        '\\U000107ff'), ('\\U00010806', '\\U00010807'), ('\\U00010809', '\\U00010809'), ('\\U00010836',\n+        '\\U00010836'), ('\\U00010839', '\\U0001083b'), ('\\U0001083d', '\\U0001083e'), ('\\U00010856',\n+        '\\U00010856'), ('\\U0001089f', '\\U000108a6'), ('\\U000108b0', '\\U000108ff'), ('\\U0001091c',\n+        '\\U0001091e'), ('\\U0001093a', '\\U0001093e'), ('\\U00010940', '\\U0001097f'), ('\\U000109b8',\n+        '\\U000109bd'), ('\\U000109c0', '\\U000109ff'), ('\\U00010a04', '\\U00010a04'), ('\\U00010a07',\n+        '\\U00010a0b'), ('\\U00010a14', '\\U00010a14'), ('\\U00010a18', '\\U00010a18'), ('\\U00010a34',\n+        '\\U00010a37'), ('\\U00010a3b', '\\U00010a3e'), ('\\U00010a48', '\\U00010a4f'), ('\\U00010a59',\n+        '\\U00010a5f'), ('\\U00010aa0', '\\U00010abf'), ('\\U00010ae7', '\\U00010aea'), ('\\U00010af7',\n+        '\\U00010aff'), ('\\U00010b36', '\\U00010b38'), ('\\U00010b56', '\\U00010b57'), ('\\U00010b73',\n+        '\\U00010b77'), ('\\U00010b92', '\\U00010b98'), ('\\U00010b9d', '\\U00010ba8'), ('\\U00010bb0',\n+        '\\U00010bff'), ('\\U00010c49', '\\U00010e5f'), ('\\U00010e7f', '\\U00010fff'), ('\\U0001104e',\n+        '\\U00011051'), ('\\U00011070', '\\U0001107e'), ('\\U000110bd', '\\U000110bd'), ('\\U000110c2',\n+        '\\U000110cf'), ('\\U000110e9', '\\U000110ef'), ('\\U000110fa', '\\U000110ff'), ('\\U00011135',\n+        '\\U00011135'), ('\\U00011144', '\\U0001114f'), ('\\U00011177', '\\U0001117f'), ('\\U000111c9',\n+        '\\U000111cc'), ('\\U000111ce', '\\U000111cf'), ('\\U000111db', '\\U000111e0'), ('\\U000111f5',\n+        '\\U000111ff'), ('\\U00011212', '\\U00011212'), ('\\U0001123e', '\\U000112af'), ('\\U000112eb',\n+        '\\U000112ef'), ('\\U000112fa', '\\U00011300'), ('\\U00011304', '\\U00011304'), ('\\U0001130d',\n+        '\\U0001130e'), ('\\U00011311', '\\U00011312'), ('\\U00011329', '\\U00011329'), ('\\U00011331',\n+        '\\U00011331'), ('\\U00011334', '\\U00011334'), ('\\U0001133a', '\\U0001133b'), ('\\U00011345',\n+        '\\U00011346'), ('\\U00011349', '\\U0001134a'), ('\\U0001134e', '\\U00011356'), ('\\U00011358',\n+        '\\U0001135c'), ('\\U00011364', '\\U00011365'), ('\\U0001136d', '\\U0001136f'), ('\\U00011375',\n+        '\\U0001147f'), ('\\U000114c8', '\\U000114cf'), ('\\U000114da', '\\U0001157f'), ('\\U000115b6',\n+        '\\U000115b7'), ('\\U000115ca', '\\U000115ff'), ('\\U00011645', '\\U0001164f'), ('\\U0001165a',\n+        '\\U0001167f'), ('\\U000116b8', '\\U000116bf'), ('\\U000116ca', '\\U0001189f'), ('\\U000118f3',\n+        '\\U000118fe'), ('\\U00011900', '\\U00011abf'), ('\\U00011af9', '\\U00011fff'), ('\\U00012399',\n+        '\\U000123ff'), ('\\U0001246f', '\\U0001246f'), ('\\U00012475', '\\U00012fff'), ('\\U0001342f',\n+        '\\U000167ff'), ('\\U00016a39', '\\U00016a3f'), ('\\U00016a5f', '\\U00016a5f'), ('\\U00016a6a',\n+        '\\U00016a6d'), ('\\U00016a70', '\\U00016acf'), ('\\U00016aee', '\\U00016aef'), ('\\U00016af6',\n+        '\\U00016aff'), ('\\U00016b46', '\\U00016b4f'), ('\\U00016b5a', '\\U00016b5a'), ('\\U00016b62',\n+        '\\U00016b62'), ('\\U00016b78', '\\U00016b7c'), ('\\U00016b90', '\\U00016eff'), ('\\U00016f45',\n+        '\\U00016f4f'), ('\\U00016f7f', '\\U00016f8e'), ('\\U00016fa0', '\\U0001afff'), ('\\U0001b002',\n+        '\\U0001bbff'), ('\\U0001bc6b', '\\U0001bc6f'), ('\\U0001bc7d', '\\U0001bc7f'), ('\\U0001bc89',\n+        '\\U0001bc8f'), ('\\U0001bc9a', '\\U0001bc9b'), ('\\U0001bca0', '\\U0001cfff'), ('\\U0001d0f6',\n+        '\\U0001d0ff'), ('\\U0001d127', '\\U0001d128'), ('\\U0001d173', '\\U0001d17a'), ('\\U0001d1de',\n+        '\\U0001d1ff'), ('\\U0001d246', '\\U0001d2ff'), ('\\U0001d357', '\\U0001d35f'), ('\\U0001d372',\n+        '\\U0001d3ff'), ('\\U0001d455', '\\U0001d455'), ('\\U0001d49d', '\\U0001d49d'), ('\\U0001d4a0',\n+        '\\U0001d4a1'), ('\\U0001d4a3', '\\U0001d4a4'), ('\\U0001d4a7', '\\U0001d4a8'), ('\\U0001d4ad',\n+        '\\U0001d4ad'), ('\\U0001d4ba', '\\U0001d4ba'), ('\\U0001d4bc', '\\U0001d4bc'), ('\\U0001d4c4',\n+        '\\U0001d4c4'), ('\\U0001d506', '\\U0001d506'), ('\\U0001d50b', '\\U0001d50c'), ('\\U0001d515',\n+        '\\U0001d515'), ('\\U0001d51d', '\\U0001d51d'), ('\\U0001d53a', '\\U0001d53a'), ('\\U0001d53f',\n+        '\\U0001d53f'), ('\\U0001d545', '\\U0001d545'), ('\\U0001d547', '\\U0001d549'), ('\\U0001d551',\n+        '\\U0001d551'), ('\\U0001d6a6', '\\U0001d6a7'), ('\\U0001d7cc', '\\U0001d7cd'), ('\\U0001d800',\n+        '\\U0001e7ff'), ('\\U0001e8c5', '\\U0001e8c6'), ('\\U0001e8d7', '\\U0001edff'), ('\\U0001ee04',\n+        '\\U0001ee04'), ('\\U0001ee20', '\\U0001ee20'), ('\\U0001ee23', '\\U0001ee23'), ('\\U0001ee25',\n+        '\\U0001ee26'), ('\\U0001ee28', '\\U0001ee28'), ('\\U0001ee33', '\\U0001ee33'), ('\\U0001ee38',\n+        '\\U0001ee38'), ('\\U0001ee3a', '\\U0001ee3a'), ('\\U0001ee3c', '\\U0001ee41'), ('\\U0001ee43',\n+        '\\U0001ee46'), ('\\U0001ee48', '\\U0001ee48'), ('\\U0001ee4a', '\\U0001ee4a'), ('\\U0001ee4c',\n+        '\\U0001ee4c'), ('\\U0001ee50', '\\U0001ee50'), ('\\U0001ee53', '\\U0001ee53'), ('\\U0001ee55',\n+        '\\U0001ee56'), ('\\U0001ee58', '\\U0001ee58'), ('\\U0001ee5a', '\\U0001ee5a'), ('\\U0001ee5c',\n+        '\\U0001ee5c'), ('\\U0001ee5e', '\\U0001ee5e'), ('\\U0001ee60', '\\U0001ee60'), ('\\U0001ee63',\n+        '\\U0001ee63'), ('\\U0001ee65', '\\U0001ee66'), ('\\U0001ee6b', '\\U0001ee6b'), ('\\U0001ee73',\n+        '\\U0001ee73'), ('\\U0001ee78', '\\U0001ee78'), ('\\U0001ee7d', '\\U0001ee7d'), ('\\U0001ee7f',\n+        '\\U0001ee7f'), ('\\U0001ee8a', '\\U0001ee8a'), ('\\U0001ee9c', '\\U0001eea0'), ('\\U0001eea4',\n+        '\\U0001eea4'), ('\\U0001eeaa', '\\U0001eeaa'), ('\\U0001eebc', '\\U0001eeef'), ('\\U0001eef2',\n+        '\\U0001efff'), ('\\U0001f02c', '\\U0001f02f'), ('\\U0001f094', '\\U0001f09f'), ('\\U0001f0af',\n+        '\\U0001f0b0'), ('\\U0001f0c0', '\\U0001f0c0'), ('\\U0001f0d0', '\\U0001f0d0'), ('\\U0001f0f6',\n+        '\\U0001f0ff'), ('\\U0001f10d', '\\U0001f10f'), ('\\U0001f12f', '\\U0001f12f'), ('\\U0001f16c',\n+        '\\U0001f16f'), ('\\U0001f19b', '\\U0001f1e5'), ('\\U0001f203', '\\U0001f20f'), ('\\U0001f23b',\n+        '\\U0001f23f'), ('\\U0001f249', '\\U0001f24f'), ('\\U0001f252', '\\U0001f2ff'), ('\\U0001f32d',\n+        '\\U0001f32f'), ('\\U0001f37e', '\\U0001f37f'), ('\\U0001f3cf', '\\U0001f3d3'), ('\\U0001f3f8',\n+        '\\U0001f3ff'), ('\\U0001f4ff', '\\U0001f4ff'), ('\\U0001f54b', '\\U0001f54f'), ('\\U0001f57a',\n+        '\\U0001f57a'), ('\\U0001f5a4', '\\U0001f5a4'), ('\\U0001f643', '\\U0001f644'), ('\\U0001f6d0',\n+        '\\U0001f6df'), ('\\U0001f6ed', '\\U0001f6ef'), ('\\U0001f6f4', '\\U0001f6ff'), ('\\U0001f774',\n+        '\\U0001f77f'), ('\\U0001f7d5', '\\U0001f7ff'), ('\\U0001f80c', '\\U0001f80f'), ('\\U0001f848',\n+        '\\U0001f84f'), ('\\U0001f85a', '\\U0001f85f'), ('\\U0001f888', '\\U0001f88f'), ('\\U0001f8ae',\n+        '\\U0001ffff'), ('\\U00020001', '\\U0002a6d5'), ('\\U0002a6d7', '\\U0002a6ff'), ('\\U0002a701',\n+        '\\U0002b733'), ('\\U0002b735', '\\U0002b73f'), ('\\U0002b741', '\\U0002b81c'), ('\\U0002b81e',\n+        '\\U0002f7ff'), ('\\U0002fa1e', '\\U000e00ff'), ('\\U000e01f0', '\\U0010ffff')\n     ];\n \n     pub static Cc_table: &'static [(char, char)] = &[\n@@ -50,6 +215,181 @@ pub mod general_category {\n         ('\\U000e0001', '\\U000e0001'), ('\\U000e0020', '\\U000e007f')\n     ];\n \n+    pub static Cn_table: &'static [(char, char)] = &[\n+        ('\\u0378', '\\u0379'), ('\\u0380', '\\u0383'), ('\\u038b', '\\u038b'), ('\\u038d', '\\u038d'),\n+        ('\\u03a2', '\\u03a2'), ('\\u0530', '\\u0530'), ('\\u0557', '\\u0558'), ('\\u0560', '\\u0560'),\n+        ('\\u0588', '\\u0588'), ('\\u058b', '\\u058c'), ('\\u0590', '\\u0590'), ('\\u05c8', '\\u05cf'),\n+        ('\\u05eb', '\\u05ef'), ('\\u05f5', '\\u05ff'), ('\\u061d', '\\u061d'), ('\\u070e', '\\u070e'),\n+        ('\\u074b', '\\u074c'), ('\\u07b2', '\\u07bf'), ('\\u07fb', '\\u07ff'), ('\\u082e', '\\u082f'),\n+        ('\\u083f', '\\u083f'), ('\\u085c', '\\u085d'), ('\\u085f', '\\u089f'), ('\\u08b3', '\\u08e3'),\n+        ('\\u0984', '\\u0984'), ('\\u098d', '\\u098e'), ('\\u0991', '\\u0992'), ('\\u09a9', '\\u09a9'),\n+        ('\\u09b1', '\\u09b1'), ('\\u09b3', '\\u09b5'), ('\\u09ba', '\\u09bb'), ('\\u09c5', '\\u09c6'),\n+        ('\\u09c9', '\\u09ca'), ('\\u09cf', '\\u09d6'), ('\\u09d8', '\\u09db'), ('\\u09de', '\\u09de'),\n+        ('\\u09e4', '\\u09e5'), ('\\u09fc', '\\u0a00'), ('\\u0a04', '\\u0a04'), ('\\u0a0b', '\\u0a0e'),\n+        ('\\u0a11', '\\u0a12'), ('\\u0a29', '\\u0a29'), ('\\u0a31', '\\u0a31'), ('\\u0a34', '\\u0a34'),\n+        ('\\u0a37', '\\u0a37'), ('\\u0a3a', '\\u0a3b'), ('\\u0a3d', '\\u0a3d'), ('\\u0a43', '\\u0a46'),\n+        ('\\u0a49', '\\u0a4a'), ('\\u0a4e', '\\u0a50'), ('\\u0a52', '\\u0a58'), ('\\u0a5d', '\\u0a5d'),\n+        ('\\u0a5f', '\\u0a65'), ('\\u0a76', '\\u0a80'), ('\\u0a84', '\\u0a84'), ('\\u0a8e', '\\u0a8e'),\n+        ('\\u0a92', '\\u0a92'), ('\\u0aa9', '\\u0aa9'), ('\\u0ab1', '\\u0ab1'), ('\\u0ab4', '\\u0ab4'),\n+        ('\\u0aba', '\\u0abb'), ('\\u0ac6', '\\u0ac6'), ('\\u0aca', '\\u0aca'), ('\\u0ace', '\\u0acf'),\n+        ('\\u0ad1', '\\u0adf'), ('\\u0ae4', '\\u0ae5'), ('\\u0af2', '\\u0b00'), ('\\u0b04', '\\u0b04'),\n+        ('\\u0b0d', '\\u0b0e'), ('\\u0b11', '\\u0b12'), ('\\u0b29', '\\u0b29'), ('\\u0b31', '\\u0b31'),\n+        ('\\u0b34', '\\u0b34'), ('\\u0b3a', '\\u0b3b'), ('\\u0b45', '\\u0b46'), ('\\u0b49', '\\u0b4a'),\n+        ('\\u0b4e', '\\u0b55'), ('\\u0b58', '\\u0b5b'), ('\\u0b5e', '\\u0b5e'), ('\\u0b64', '\\u0b65'),\n+        ('\\u0b78', '\\u0b81'), ('\\u0b84', '\\u0b84'), ('\\u0b8b', '\\u0b8d'), ('\\u0b91', '\\u0b91'),\n+        ('\\u0b96', '\\u0b98'), ('\\u0b9b', '\\u0b9b'), ('\\u0b9d', '\\u0b9d'), ('\\u0ba0', '\\u0ba2'),\n+        ('\\u0ba5', '\\u0ba7'), ('\\u0bab', '\\u0bad'), ('\\u0bba', '\\u0bbd'), ('\\u0bc3', '\\u0bc5'),\n+        ('\\u0bc9', '\\u0bc9'), ('\\u0bce', '\\u0bcf'), ('\\u0bd1', '\\u0bd6'), ('\\u0bd8', '\\u0be5'),\n+        ('\\u0bfb', '\\u0bff'), ('\\u0c04', '\\u0c04'), ('\\u0c0d', '\\u0c0d'), ('\\u0c11', '\\u0c11'),\n+        ('\\u0c29', '\\u0c29'), ('\\u0c3a', '\\u0c3c'), ('\\u0c45', '\\u0c45'), ('\\u0c49', '\\u0c49'),\n+        ('\\u0c4e', '\\u0c54'), ('\\u0c57', '\\u0c57'), ('\\u0c5a', '\\u0c5f'), ('\\u0c64', '\\u0c65'),\n+        ('\\u0c70', '\\u0c77'), ('\\u0c80', '\\u0c80'), ('\\u0c84', '\\u0c84'), ('\\u0c8d', '\\u0c8d'),\n+        ('\\u0c91', '\\u0c91'), ('\\u0ca9', '\\u0ca9'), ('\\u0cb4', '\\u0cb4'), ('\\u0cba', '\\u0cbb'),\n+        ('\\u0cc5', '\\u0cc5'), ('\\u0cc9', '\\u0cc9'), ('\\u0cce', '\\u0cd4'), ('\\u0cd7', '\\u0cdd'),\n+        ('\\u0cdf', '\\u0cdf'), ('\\u0ce4', '\\u0ce5'), ('\\u0cf0', '\\u0cf0'), ('\\u0cf3', '\\u0d00'),\n+        ('\\u0d04', '\\u0d04'), ('\\u0d0d', '\\u0d0d'), ('\\u0d11', '\\u0d11'), ('\\u0d3b', '\\u0d3c'),\n+        ('\\u0d45', '\\u0d45'), ('\\u0d49', '\\u0d49'), ('\\u0d4f', '\\u0d56'), ('\\u0d58', '\\u0d5f'),\n+        ('\\u0d64', '\\u0d65'), ('\\u0d76', '\\u0d78'), ('\\u0d80', '\\u0d81'), ('\\u0d84', '\\u0d84'),\n+        ('\\u0d97', '\\u0d99'), ('\\u0db2', '\\u0db2'), ('\\u0dbc', '\\u0dbc'), ('\\u0dbe', '\\u0dbf'),\n+        ('\\u0dc7', '\\u0dc9'), ('\\u0dcb', '\\u0dce'), ('\\u0dd5', '\\u0dd5'), ('\\u0dd7', '\\u0dd7'),\n+        ('\\u0de0', '\\u0de5'), ('\\u0df0', '\\u0df1'), ('\\u0df5', '\\u0e00'), ('\\u0e3b', '\\u0e3e'),\n+        ('\\u0e5c', '\\u0e80'), ('\\u0e83', '\\u0e83'), ('\\u0e85', '\\u0e86'), ('\\u0e89', '\\u0e89'),\n+        ('\\u0e8b', '\\u0e8c'), ('\\u0e8e', '\\u0e93'), ('\\u0e98', '\\u0e98'), ('\\u0ea0', '\\u0ea0'),\n+        ('\\u0ea4', '\\u0ea4'), ('\\u0ea6', '\\u0ea6'), ('\\u0ea8', '\\u0ea9'), ('\\u0eac', '\\u0eac'),\n+        ('\\u0eba', '\\u0eba'), ('\\u0ebe', '\\u0ebf'), ('\\u0ec5', '\\u0ec5'), ('\\u0ec7', '\\u0ec7'),\n+        ('\\u0ece', '\\u0ecf'), ('\\u0eda', '\\u0edb'), ('\\u0ee0', '\\u0eff'), ('\\u0f48', '\\u0f48'),\n+        ('\\u0f6d', '\\u0f70'), ('\\u0f98', '\\u0f98'), ('\\u0fbd', '\\u0fbd'), ('\\u0fcd', '\\u0fcd'),\n+        ('\\u0fdb', '\\u0fff'), ('\\u10c6', '\\u10c6'), ('\\u10c8', '\\u10cc'), ('\\u10ce', '\\u10cf'),\n+        ('\\u1249', '\\u1249'), ('\\u124e', '\\u124f'), ('\\u1257', '\\u1257'), ('\\u1259', '\\u1259'),\n+        ('\\u125e', '\\u125f'), ('\\u1289', '\\u1289'), ('\\u128e', '\\u128f'), ('\\u12b1', '\\u12b1'),\n+        ('\\u12b6', '\\u12b7'), ('\\u12bf', '\\u12bf'), ('\\u12c1', '\\u12c1'), ('\\u12c6', '\\u12c7'),\n+        ('\\u12d7', '\\u12d7'), ('\\u1311', '\\u1311'), ('\\u1316', '\\u1317'), ('\\u135b', '\\u135c'),\n+        ('\\u137d', '\\u137f'), ('\\u139a', '\\u139f'), ('\\u13f5', '\\u13ff'), ('\\u169d', '\\u169f'),\n+        ('\\u16f9', '\\u16ff'), ('\\u170d', '\\u170d'), ('\\u1715', '\\u171f'), ('\\u1737', '\\u173f'),\n+        ('\\u1754', '\\u175f'), ('\\u176d', '\\u176d'), ('\\u1771', '\\u1771'), ('\\u1774', '\\u177f'),\n+        ('\\u17de', '\\u17df'), ('\\u17ea', '\\u17ef'), ('\\u17fa', '\\u17ff'), ('\\u180f', '\\u180f'),\n+        ('\\u181a', '\\u181f'), ('\\u1878', '\\u187f'), ('\\u18ab', '\\u18af'), ('\\u18f6', '\\u18ff'),\n+        ('\\u191f', '\\u191f'), ('\\u192c', '\\u192f'), ('\\u193c', '\\u193f'), ('\\u1941', '\\u1943'),\n+        ('\\u196e', '\\u196f'), ('\\u1975', '\\u197f'), ('\\u19ac', '\\u19af'), ('\\u19ca', '\\u19cf'),\n+        ('\\u19db', '\\u19dd'), ('\\u1a1c', '\\u1a1d'), ('\\u1a5f', '\\u1a5f'), ('\\u1a7d', '\\u1a7e'),\n+        ('\\u1a8a', '\\u1a8f'), ('\\u1a9a', '\\u1a9f'), ('\\u1aae', '\\u1aaf'), ('\\u1abf', '\\u1aff'),\n+        ('\\u1b4c', '\\u1b4f'), ('\\u1b7d', '\\u1b7f'), ('\\u1bf4', '\\u1bfb'), ('\\u1c38', '\\u1c3a'),\n+        ('\\u1c4a', '\\u1c4c'), ('\\u1c80', '\\u1cbf'), ('\\u1cc8', '\\u1ccf'), ('\\u1cf7', '\\u1cf7'),\n+        ('\\u1cfa', '\\u1cff'), ('\\u1df6', '\\u1dfb'), ('\\u1f16', '\\u1f17'), ('\\u1f1e', '\\u1f1f'),\n+        ('\\u1f46', '\\u1f47'), ('\\u1f4e', '\\u1f4f'), ('\\u1f58', '\\u1f58'), ('\\u1f5a', '\\u1f5a'),\n+        ('\\u1f5c', '\\u1f5c'), ('\\u1f5e', '\\u1f5e'), ('\\u1f7e', '\\u1f7f'), ('\\u1fb5', '\\u1fb5'),\n+        ('\\u1fc5', '\\u1fc5'), ('\\u1fd4', '\\u1fd5'), ('\\u1fdc', '\\u1fdc'), ('\\u1ff0', '\\u1ff1'),\n+        ('\\u1ff5', '\\u1ff5'), ('\\u1fff', '\\u1fff'), ('\\u2065', '\\u2065'), ('\\u2072', '\\u2073'),\n+        ('\\u208f', '\\u208f'), ('\\u209d', '\\u209f'), ('\\u20be', '\\u20cf'), ('\\u20f1', '\\u20ff'),\n+        ('\\u218a', '\\u218f'), ('\\u23fb', '\\u23ff'), ('\\u2427', '\\u243f'), ('\\u244b', '\\u245f'),\n+        ('\\u2b74', '\\u2b75'), ('\\u2b96', '\\u2b97'), ('\\u2bba', '\\u2bbc'), ('\\u2bc9', '\\u2bc9'),\n+        ('\\u2bd2', '\\u2bff'), ('\\u2c2f', '\\u2c2f'), ('\\u2c5f', '\\u2c5f'), ('\\u2cf4', '\\u2cf8'),\n+        ('\\u2d26', '\\u2d26'), ('\\u2d28', '\\u2d2c'), ('\\u2d2e', '\\u2d2f'), ('\\u2d68', '\\u2d6e'),\n+        ('\\u2d71', '\\u2d7e'), ('\\u2d97', '\\u2d9f'), ('\\u2da7', '\\u2da7'), ('\\u2daf', '\\u2daf'),\n+        ('\\u2db7', '\\u2db7'), ('\\u2dbf', '\\u2dbf'), ('\\u2dc7', '\\u2dc7'), ('\\u2dcf', '\\u2dcf'),\n+        ('\\u2dd7', '\\u2dd7'), ('\\u2ddf', '\\u2ddf'), ('\\u2e43', '\\u2e7f'), ('\\u2e9a', '\\u2e9a'),\n+        ('\\u2ef4', '\\u2eff'), ('\\u2fd6', '\\u2fef'), ('\\u2ffc', '\\u2fff'), ('\\u3040', '\\u3040'),\n+        ('\\u3097', '\\u3098'), ('\\u3100', '\\u3104'), ('\\u312e', '\\u3130'), ('\\u318f', '\\u318f'),\n+        ('\\u31bb', '\\u31bf'), ('\\u31e4', '\\u31ef'), ('\\u321f', '\\u321f'), ('\\u32ff', '\\u32ff'),\n+        ('\\u3401', '\\u4db4'), ('\\u4db6', '\\u4dbf'), ('\\u4e01', '\\u9fcb'), ('\\u9fcd', '\\u9fff'),\n+        ('\\ua48d', '\\ua48f'), ('\\ua4c7', '\\ua4cf'), ('\\ua62c', '\\ua63f'), ('\\ua69e', '\\ua69e'),\n+        ('\\ua6f8', '\\ua6ff'), ('\\ua78f', '\\ua78f'), ('\\ua7ae', '\\ua7af'), ('\\ua7b2', '\\ua7f6'),\n+        ('\\ua82c', '\\ua82f'), ('\\ua83a', '\\ua83f'), ('\\ua878', '\\ua87f'), ('\\ua8c5', '\\ua8cd'),\n+        ('\\ua8da', '\\ua8df'), ('\\ua8fc', '\\ua8ff'), ('\\ua954', '\\ua95e'), ('\\ua97d', '\\ua97f'),\n+        ('\\ua9ce', '\\ua9ce'), ('\\ua9da', '\\ua9dd'), ('\\ua9ff', '\\ua9ff'), ('\\uaa37', '\\uaa3f'),\n+        ('\\uaa4e', '\\uaa4f'), ('\\uaa5a', '\\uaa5b'), ('\\uaac3', '\\uaada'), ('\\uaaf7', '\\uab00'),\n+        ('\\uab07', '\\uab08'), ('\\uab0f', '\\uab10'), ('\\uab17', '\\uab1f'), ('\\uab27', '\\uab27'),\n+        ('\\uab2f', '\\uab2f'), ('\\uab60', '\\uab63'), ('\\uab66', '\\uabbf'), ('\\uabee', '\\uabef'),\n+        ('\\uabfa', '\\uabff'), ('\\uac01', '\\ud7a2'), ('\\ud7a4', '\\ud7af'), ('\\ud7c7', '\\ud7ca'),\n+        ('\\ud7fc', '\\ud7ff'), ('\\ue001', '\\uf8fe'), ('\\ufa6e', '\\ufa6f'), ('\\ufada', '\\ufaff'),\n+        ('\\ufb07', '\\ufb12'), ('\\ufb18', '\\ufb1c'), ('\\ufb37', '\\ufb37'), ('\\ufb3d', '\\ufb3d'),\n+        ('\\ufb3f', '\\ufb3f'), ('\\ufb42', '\\ufb42'), ('\\ufb45', '\\ufb45'), ('\\ufbc2', '\\ufbd2'),\n+        ('\\ufd40', '\\ufd4f'), ('\\ufd90', '\\ufd91'), ('\\ufdc8', '\\ufdef'), ('\\ufdfe', '\\ufdff'),\n+        ('\\ufe1a', '\\ufe1f'), ('\\ufe2e', '\\ufe2f'), ('\\ufe53', '\\ufe53'), ('\\ufe67', '\\ufe67'),\n+        ('\\ufe6c', '\\ufe6f'), ('\\ufe75', '\\ufe75'), ('\\ufefd', '\\ufefe'), ('\\uff00', '\\uff00'),\n+        ('\\uffbf', '\\uffc1'), ('\\uffc8', '\\uffc9'), ('\\uffd0', '\\uffd1'), ('\\uffd8', '\\uffd9'),\n+        ('\\uffdd', '\\uffdf'), ('\\uffe7', '\\uffe7'), ('\\uffef', '\\ufff8'), ('\\ufffe', '\\uffff'),\n+        ('\\U0001000c', '\\U0001000c'), ('\\U00010027', '\\U00010027'), ('\\U0001003b', '\\U0001003b'),\n+        ('\\U0001003e', '\\U0001003e'), ('\\U0001004e', '\\U0001004f'), ('\\U0001005e', '\\U0001007f'),\n+        ('\\U000100fb', '\\U000100ff'), ('\\U00010103', '\\U00010106'), ('\\U00010134', '\\U00010136'),\n+        ('\\U0001018d', '\\U0001018f'), ('\\U0001019c', '\\U0001019f'), ('\\U000101a1', '\\U000101cf'),\n+        ('\\U000101fe', '\\U0001027f'), ('\\U0001029d', '\\U0001029f'), ('\\U000102d1', '\\U000102df'),\n+        ('\\U000102fc', '\\U000102ff'), ('\\U00010324', '\\U0001032f'), ('\\U0001034b', '\\U0001034f'),\n+        ('\\U0001037b', '\\U0001037f'), ('\\U0001039e', '\\U0001039e'), ('\\U000103c4', '\\U000103c7'),\n+        ('\\U000103d6', '\\U000103ff'), ('\\U0001049e', '\\U0001049f'), ('\\U000104aa', '\\U000104ff'),\n+        ('\\U00010528', '\\U0001052f'), ('\\U00010564', '\\U0001056e'), ('\\U00010570', '\\U000105ff'),\n+        ('\\U00010737', '\\U0001073f'), ('\\U00010756', '\\U0001075f'), ('\\U00010768', '\\U000107ff'),\n+        ('\\U00010806', '\\U00010807'), ('\\U00010809', '\\U00010809'), ('\\U00010836', '\\U00010836'),\n+        ('\\U00010839', '\\U0001083b'), ('\\U0001083d', '\\U0001083e'), ('\\U00010856', '\\U00010856'),\n+        ('\\U0001089f', '\\U000108a6'), ('\\U000108b0', '\\U000108ff'), ('\\U0001091c', '\\U0001091e'),\n+        ('\\U0001093a', '\\U0001093e'), ('\\U00010940', '\\U0001097f'), ('\\U000109b8', '\\U000109bd'),\n+        ('\\U000109c0', '\\U000109ff'), ('\\U00010a04', '\\U00010a04'), ('\\U00010a07', '\\U00010a0b'),\n+        ('\\U00010a14', '\\U00010a14'), ('\\U00010a18', '\\U00010a18'), ('\\U00010a34', '\\U00010a37'),\n+        ('\\U00010a3b', '\\U00010a3e'), ('\\U00010a48', '\\U00010a4f'), ('\\U00010a59', '\\U00010a5f'),\n+        ('\\U00010aa0', '\\U00010abf'), ('\\U00010ae7', '\\U00010aea'), ('\\U00010af7', '\\U00010aff'),\n+        ('\\U00010b36', '\\U00010b38'), ('\\U00010b56', '\\U00010b57'), ('\\U00010b73', '\\U00010b77'),\n+        ('\\U00010b92', '\\U00010b98'), ('\\U00010b9d', '\\U00010ba8'), ('\\U00010bb0', '\\U00010bff'),\n+        ('\\U00010c49', '\\U00010e5f'), ('\\U00010e7f', '\\U00010fff'), ('\\U0001104e', '\\U00011051'),\n+        ('\\U00011070', '\\U0001107e'), ('\\U000110c2', '\\U000110cf'), ('\\U000110e9', '\\U000110ef'),\n+        ('\\U000110fa', '\\U000110ff'), ('\\U00011135', '\\U00011135'), ('\\U00011144', '\\U0001114f'),\n+        ('\\U00011177', '\\U0001117f'), ('\\U000111c9', '\\U000111cc'), ('\\U000111ce', '\\U000111cf'),\n+        ('\\U000111db', '\\U000111e0'), ('\\U000111f5', '\\U000111ff'), ('\\U00011212', '\\U00011212'),\n+        ('\\U0001123e', '\\U000112af'), ('\\U000112eb', '\\U000112ef'), ('\\U000112fa', '\\U00011300'),\n+        ('\\U00011304', '\\U00011304'), ('\\U0001130d', '\\U0001130e'), ('\\U00011311', '\\U00011312'),\n+        ('\\U00011329', '\\U00011329'), ('\\U00011331', '\\U00011331'), ('\\U00011334', '\\U00011334'),\n+        ('\\U0001133a', '\\U0001133b'), ('\\U00011345', '\\U00011346'), ('\\U00011349', '\\U0001134a'),\n+        ('\\U0001134e', '\\U00011356'), ('\\U00011358', '\\U0001135c'), ('\\U00011364', '\\U00011365'),\n+        ('\\U0001136d', '\\U0001136f'), ('\\U00011375', '\\U0001147f'), ('\\U000114c8', '\\U000114cf'),\n+        ('\\U000114da', '\\U0001157f'), ('\\U000115b6', '\\U000115b7'), ('\\U000115ca', '\\U000115ff'),\n+        ('\\U00011645', '\\U0001164f'), ('\\U0001165a', '\\U0001167f'), ('\\U000116b8', '\\U000116bf'),\n+        ('\\U000116ca', '\\U0001189f'), ('\\U000118f3', '\\U000118fe'), ('\\U00011900', '\\U00011abf'),\n+        ('\\U00011af9', '\\U00011fff'), ('\\U00012399', '\\U000123ff'), ('\\U0001246f', '\\U0001246f'),\n+        ('\\U00012475', '\\U00012fff'), ('\\U0001342f', '\\U000167ff'), ('\\U00016a39', '\\U00016a3f'),\n+        ('\\U00016a5f', '\\U00016a5f'), ('\\U00016a6a', '\\U00016a6d'), ('\\U00016a70', '\\U00016acf'),\n+        ('\\U00016aee', '\\U00016aef'), ('\\U00016af6', '\\U00016aff'), ('\\U00016b46', '\\U00016b4f'),\n+        ('\\U00016b5a', '\\U00016b5a'), ('\\U00016b62', '\\U00016b62'), ('\\U00016b78', '\\U00016b7c'),\n+        ('\\U00016b90', '\\U00016eff'), ('\\U00016f45', '\\U00016f4f'), ('\\U00016f7f', '\\U00016f8e'),\n+        ('\\U00016fa0', '\\U0001afff'), ('\\U0001b002', '\\U0001bbff'), ('\\U0001bc6b', '\\U0001bc6f'),\n+        ('\\U0001bc7d', '\\U0001bc7f'), ('\\U0001bc89', '\\U0001bc8f'), ('\\U0001bc9a', '\\U0001bc9b'),\n+        ('\\U0001bca4', '\\U0001cfff'), ('\\U0001d0f6', '\\U0001d0ff'), ('\\U0001d127', '\\U0001d128'),\n+        ('\\U0001d1de', '\\U0001d1ff'), ('\\U0001d246', '\\U0001d2ff'), ('\\U0001d357', '\\U0001d35f'),\n+        ('\\U0001d372', '\\U0001d3ff'), ('\\U0001d455', '\\U0001d455'), ('\\U0001d49d', '\\U0001d49d'),\n+        ('\\U0001d4a0', '\\U0001d4a1'), ('\\U0001d4a3', '\\U0001d4a4'), ('\\U0001d4a7', '\\U0001d4a8'),\n+        ('\\U0001d4ad', '\\U0001d4ad'), ('\\U0001d4ba', '\\U0001d4ba'), ('\\U0001d4bc', '\\U0001d4bc'),\n+        ('\\U0001d4c4', '\\U0001d4c4'), ('\\U0001d506', '\\U0001d506'), ('\\U0001d50b', '\\U0001d50c'),\n+        ('\\U0001d515', '\\U0001d515'), ('\\U0001d51d', '\\U0001d51d'), ('\\U0001d53a', '\\U0001d53a'),\n+        ('\\U0001d53f', '\\U0001d53f'), ('\\U0001d545', '\\U0001d545'), ('\\U0001d547', '\\U0001d549'),\n+        ('\\U0001d551', '\\U0001d551'), ('\\U0001d6a6', '\\U0001d6a7'), ('\\U0001d7cc', '\\U0001d7cd'),\n+        ('\\U0001d800', '\\U0001e7ff'), ('\\U0001e8c5', '\\U0001e8c6'), ('\\U0001e8d7', '\\U0001edff'),\n+        ('\\U0001ee04', '\\U0001ee04'), ('\\U0001ee20', '\\U0001ee20'), ('\\U0001ee23', '\\U0001ee23'),\n+        ('\\U0001ee25', '\\U0001ee26'), ('\\U0001ee28', '\\U0001ee28'), ('\\U0001ee33', '\\U0001ee33'),\n+        ('\\U0001ee38', '\\U0001ee38'), ('\\U0001ee3a', '\\U0001ee3a'), ('\\U0001ee3c', '\\U0001ee41'),\n+        ('\\U0001ee43', '\\U0001ee46'), ('\\U0001ee48', '\\U0001ee48'), ('\\U0001ee4a', '\\U0001ee4a'),\n+        ('\\U0001ee4c', '\\U0001ee4c'), ('\\U0001ee50', '\\U0001ee50'), ('\\U0001ee53', '\\U0001ee53'),\n+        ('\\U0001ee55', '\\U0001ee56'), ('\\U0001ee58', '\\U0001ee58'), ('\\U0001ee5a', '\\U0001ee5a'),\n+        ('\\U0001ee5c', '\\U0001ee5c'), ('\\U0001ee5e', '\\U0001ee5e'), ('\\U0001ee60', '\\U0001ee60'),\n+        ('\\U0001ee63', '\\U0001ee63'), ('\\U0001ee65', '\\U0001ee66'), ('\\U0001ee6b', '\\U0001ee6b'),\n+        ('\\U0001ee73', '\\U0001ee73'), ('\\U0001ee78', '\\U0001ee78'), ('\\U0001ee7d', '\\U0001ee7d'),\n+        ('\\U0001ee7f', '\\U0001ee7f'), ('\\U0001ee8a', '\\U0001ee8a'), ('\\U0001ee9c', '\\U0001eea0'),\n+        ('\\U0001eea4', '\\U0001eea4'), ('\\U0001eeaa', '\\U0001eeaa'), ('\\U0001eebc', '\\U0001eeef'),\n+        ('\\U0001eef2', '\\U0001efff'), ('\\U0001f02c', '\\U0001f02f'), ('\\U0001f094', '\\U0001f09f'),\n+        ('\\U0001f0af', '\\U0001f0b0'), ('\\U0001f0c0', '\\U0001f0c0'), ('\\U0001f0d0', '\\U0001f0d0'),\n+        ('\\U0001f0f6', '\\U0001f0ff'), ('\\U0001f10d', '\\U0001f10f'), ('\\U0001f12f', '\\U0001f12f'),\n+        ('\\U0001f16c', '\\U0001f16f'), ('\\U0001f19b', '\\U0001f1e5'), ('\\U0001f203', '\\U0001f20f'),\n+        ('\\U0001f23b', '\\U0001f23f'), ('\\U0001f249', '\\U0001f24f'), ('\\U0001f252', '\\U0001f2ff'),\n+        ('\\U0001f32d', '\\U0001f32f'), ('\\U0001f37e', '\\U0001f37f'), ('\\U0001f3cf', '\\U0001f3d3'),\n+        ('\\U0001f3f8', '\\U0001f3ff'), ('\\U0001f4ff', '\\U0001f4ff'), ('\\U0001f54b', '\\U0001f54f'),\n+        ('\\U0001f57a', '\\U0001f57a'), ('\\U0001f5a4', '\\U0001f5a4'), ('\\U0001f643', '\\U0001f644'),\n+        ('\\U0001f6d0', '\\U0001f6df'), ('\\U0001f6ed', '\\U0001f6ef'), ('\\U0001f6f4', '\\U0001f6ff'),\n+        ('\\U0001f774', '\\U0001f77f'), ('\\U0001f7d5', '\\U0001f7ff'), ('\\U0001f80c', '\\U0001f80f'),\n+        ('\\U0001f848', '\\U0001f84f'), ('\\U0001f85a', '\\U0001f85f'), ('\\U0001f888', '\\U0001f88f'),\n+        ('\\U0001f8ae', '\\U0001ffff'), ('\\U00020001', '\\U0002a6d5'), ('\\U0002a6d7', '\\U0002a6ff'),\n+        ('\\U0002a701', '\\U0002b733'), ('\\U0002b735', '\\U0002b73f'), ('\\U0002b741', '\\U0002b81c'),\n+        ('\\U0002b81e', '\\U0002f7ff'), ('\\U0002fa1e', '\\U000e0000'), ('\\U000e0002', '\\U000e001f'),\n+        ('\\U000e0080', '\\U000e00ff'), ('\\U000e01f0', '\\U000effff'), ('\\U000f0001', '\\U000ffffc'),\n+        ('\\U000ffffe', '\\U000fffff'), ('\\U00100001', '\\U0010fffc'), ('\\U0010fffe', '\\U0010ffff')\n+    ];\n+\n     pub static Co_table: &'static [(char, char)] = &[\n         ('\\ue000', '\\ue000'), ('\\uf8ff', '\\uf8ff'), ('\\U000f0000', '\\U000f0000'), ('\\U000ffffd',\n         '\\U000ffffd'), ('\\U00100000', '\\U00100000'), ('\\U0010fffd', '\\U0010fffd')\n@@ -1540,6 +1880,17 @@ pub mod derived_property {\n         super::bsearch_range_table(c, Alphabetic_table)\n     }\n \n+    pub static Default_Ignorable_Code_Point_table: &'static [(char, char)] = &[\n+        ('\\xad', '\\xad'), ('\\u034f', '\\u034f'), ('\\u061c', '\\u061c'), ('\\u115f', '\\u1160'),\n+        ('\\u17b4', '\\u17b5'), ('\\u180b', '\\u180d'), ('\\u180e', '\\u180e'), ('\\u200b', '\\u200f'),\n+        ('\\u202a', '\\u202e'), ('\\u2060', '\\u2064'), ('\\u2065', '\\u2065'), ('\\u2066', '\\u206f'),\n+        ('\\u3164', '\\u3164'), ('\\ufe00', '\\ufe0f'), ('\\ufeff', '\\ufeff'), ('\\uffa0', '\\uffa0'),\n+        ('\\ufff0', '\\ufff8'), ('\\U0001bca0', '\\U0001bca3'), ('\\U0001d173', '\\U0001d17a'),\n+        ('\\U000e0000', '\\U000e0000'), ('\\U000e0001', '\\U000e0001'), ('\\U000e0002', '\\U000e001f'),\n+        ('\\U000e0020', '\\U000e007f'), ('\\U000e0080', '\\U000e00ff'), ('\\U000e0100', '\\U000e01ef'),\n+        ('\\U000e01f0', '\\U000e0fff')\n+    ];\n+\n     pub static Lowercase_table: &'static [(char, char)] = &[\n         ('\\x61', '\\x7a'), ('\\xaa', '\\xaa'), ('\\xb5', '\\xb5'), ('\\xba', '\\xba'), ('\\xdf', '\\xf6'),\n         ('\\xf8', '\\xff'), ('\\u0101', '\\u0101'), ('\\u0103', '\\u0103'), ('\\u0105', '\\u0105'),\n@@ -3264,6 +3615,15 @@ pub mod property {\n         ('\\u200c', '\\u200d')\n     ];\n \n+    pub static Noncharacter_Code_Point_table: &'static [(char, char)] = &[\n+        ('\\ufdd0', '\\ufdef'), ('\\ufffe', '\\uffff'), ('\\U0001fffe', '\\U0001ffff'), ('\\U0002fffe',\n+        '\\U0002ffff'), ('\\U0003fffe', '\\U0003ffff'), ('\\U0004fffe', '\\U0004ffff'), ('\\U0005fffe',\n+        '\\U0005ffff'), ('\\U0006fffe', '\\U0006ffff'), ('\\U0007fffe', '\\U0007ffff'), ('\\U0008fffe',\n+        '\\U0008ffff'), ('\\U0009fffe', '\\U0009ffff'), ('\\U000afffe', '\\U000affff'), ('\\U000bfffe',\n+        '\\U000bffff'), ('\\U000cfffe', '\\U000cffff'), ('\\U000dfffe', '\\U000dffff'), ('\\U000efffe',\n+        '\\U000effff'), ('\\U000ffffe', '\\U000fffff')\n+    ];\n+\n     pub static White_Space_table: &'static [(char, char)] = &[\n         ('\\x09', '\\x0d'), ('\\x20', '\\x20'), ('\\x85', '\\x85'), ('\\xa0', '\\xa0'), ('\\u1680',\n         '\\u1680'), ('\\u2000', '\\u200a'), ('\\u2028', '\\u2028'), ('\\u2029', '\\u2029'), ('\\u202f',\n@@ -3290,10 +3650,12 @@ pub mod regex {\n         super::script::Carian_table), (\"Caucasian_Albanian\",\n         super::script::Caucasian_Albanian_table), (\"Cc\", super::general_category::Cc_table), (\"Cf\",\n         super::general_category::Cf_table), (\"Chakma\", super::script::Chakma_table), (\"Cham\",\n-        super::script::Cham_table), (\"Cherokee\", super::script::Cherokee_table), (\"Co\",\n-        super::general_category::Co_table), (\"Common\", super::script::Common_table), (\"Coptic\",\n-        super::script::Coptic_table), (\"Cuneiform\", super::script::Cuneiform_table), (\"Cypriot\",\n-        super::script::Cypriot_table), (\"Cyrillic\", super::script::Cyrillic_table), (\"Deseret\",\n+        super::script::Cham_table), (\"Cherokee\", super::script::Cherokee_table), (\"Cn\",\n+        super::general_category::Cn_table), (\"Co\", super::general_category::Co_table), (\"Common\",\n+        super::script::Common_table), (\"Coptic\", super::script::Coptic_table), (\"Cuneiform\",\n+        super::script::Cuneiform_table), (\"Cypriot\", super::script::Cypriot_table), (\"Cyrillic\",\n+        super::script::Cyrillic_table), (\"Default_Ignorable_Code_Point\",\n+        super::derived_property::Default_Ignorable_Code_Point_table), (\"Deseret\",\n         super::script::Deseret_table), (\"Devanagari\", super::script::Devanagari_table), (\"Duployan\",\n         super::script::Duployan_table), (\"Egyptian_Hieroglyphs\",\n         super::script::Egyptian_Hieroglyphs_table), (\"Elbasan\", super::script::Elbasan_table),\n@@ -3333,7 +3695,8 @@ pub mod regex {\n         super::script::Myanmar_table), (\"N\", super::general_category::N_table), (\"Nabataean\",\n         super::script::Nabataean_table), (\"Nd\", super::general_category::Nd_table), (\"New_Tai_Lue\",\n         super::script::New_Tai_Lue_table), (\"Nko\", super::script::Nko_table), (\"Nl\",\n-        super::general_category::Nl_table), (\"No\", super::general_category::No_table), (\"Ogham\",\n+        super::general_category::Nl_table), (\"No\", super::general_category::No_table),\n+        (\"Noncharacter_Code_Point\", super::property::Noncharacter_Code_Point_table), (\"Ogham\",\n         super::script::Ogham_table), (\"Ol_Chiki\", super::script::Ol_Chiki_table), (\"Old_Italic\",\n         super::script::Old_Italic_table), (\"Old_North_Arabian\",\n         super::script::Old_North_Arabian_table), (\"Old_Permic\", super::script::Old_Permic_table),\n@@ -6443,3 +6806,501 @@ pub mod charwidth {\n     ];\n \n }\n+\n+pub mod grapheme {\n+    use core::option::{Some, None};\n+    use core::slice::ImmutableVector;\n+\n+    #[allow(non_camel_case_types)]\n+    #[deriving(Clone)]\n+    pub enum GraphemeCat {\n+        GC_LV,\n+        GC_LVT,\n+        GC_T,\n+        GC_Extend,\n+        GC_V,\n+        GC_Control,\n+        GC_SpacingMark,\n+        GC_L,\n+        GC_RegionalIndicator,\n+        GC_Any,\n+    }\n+\n+    fn bsearch_range_value_table(c: char, r: &'static [(char, char, GraphemeCat)]) -> GraphemeCat {\n+        use core::cmp::{Equal, Less, Greater};\n+        match r.bsearch(|&(lo, hi, _)| {\n+            if lo <= c && c <= hi { Equal }\n+            else if hi < c { Less }\n+            else { Greater }\n+        }) {\n+            Some(idx) => {\n+                let (_, _, cat) = r[idx];\n+                cat\n+            }\n+            None => GC_Any\n+        }\n+    }\n+\n+    pub fn grapheme_category(c: char) -> GraphemeCat {\n+        bsearch_range_value_table(c, grapheme_cat_table)\n+    }\n+\n+    static grapheme_cat_table: &'static [(char, char, GraphemeCat)] = &[\n+        ('\\x00', '\\x1f', GC_Control), ('\\x7f', '\\x9f', GC_Control), ('\\xad', '\\xad', GC_Control),\n+        ('\\u0300', '\\u036f', GC_Extend), ('\\u0483', '\\u0487', GC_Extend), ('\\u0488', '\\u0489',\n+        GC_Extend), ('\\u0591', '\\u05bd', GC_Extend), ('\\u05bf', '\\u05bf', GC_Extend), ('\\u05c1',\n+        '\\u05c2', GC_Extend), ('\\u05c4', '\\u05c5', GC_Extend), ('\\u05c7', '\\u05c7', GC_Extend),\n+        ('\\u0600', '\\u0605', GC_Control), ('\\u0610', '\\u061a', GC_Extend), ('\\u061c', '\\u061c',\n+        GC_Control), ('\\u064b', '\\u065f', GC_Extend), ('\\u0670', '\\u0670', GC_Extend), ('\\u06d6',\n+        '\\u06dc', GC_Extend), ('\\u06dd', '\\u06dd', GC_Control), ('\\u06df', '\\u06e4', GC_Extend),\n+        ('\\u06e7', '\\u06e8', GC_Extend), ('\\u06ea', '\\u06ed', GC_Extend), ('\\u070f', '\\u070f',\n+        GC_Control), ('\\u0711', '\\u0711', GC_Extend), ('\\u0730', '\\u074a', GC_Extend), ('\\u07a6',\n+        '\\u07b0', GC_Extend), ('\\u07eb', '\\u07f3', GC_Extend), ('\\u0816', '\\u0819', GC_Extend),\n+        ('\\u081b', '\\u0823', GC_Extend), ('\\u0825', '\\u0827', GC_Extend), ('\\u0829', '\\u082d',\n+        GC_Extend), ('\\u0859', '\\u085b', GC_Extend), ('\\u08e4', '\\u0902', GC_Extend), ('\\u0903',\n+        '\\u0903', GC_SpacingMark), ('\\u093a', '\\u093a', GC_Extend), ('\\u093b', '\\u093b',\n+        GC_SpacingMark), ('\\u093c', '\\u093c', GC_Extend), ('\\u093e', '\\u0940', GC_SpacingMark),\n+        ('\\u0941', '\\u0948', GC_Extend), ('\\u0949', '\\u094c', GC_SpacingMark), ('\\u094d', '\\u094d',\n+        GC_Extend), ('\\u094e', '\\u094f', GC_SpacingMark), ('\\u0951', '\\u0957', GC_Extend),\n+        ('\\u0962', '\\u0963', GC_Extend), ('\\u0981', '\\u0981', GC_Extend), ('\\u0982', '\\u0983',\n+        GC_SpacingMark), ('\\u09bc', '\\u09bc', GC_Extend), ('\\u09be', '\\u09be', GC_Extend),\n+        ('\\u09bf', '\\u09c0', GC_SpacingMark), ('\\u09c1', '\\u09c4', GC_Extend), ('\\u09c7', '\\u09c8',\n+        GC_SpacingMark), ('\\u09cb', '\\u09cc', GC_SpacingMark), ('\\u09cd', '\\u09cd', GC_Extend),\n+        ('\\u09d7', '\\u09d7', GC_Extend), ('\\u09e2', '\\u09e3', GC_Extend), ('\\u0a01', '\\u0a02',\n+        GC_Extend), ('\\u0a03', '\\u0a03', GC_SpacingMark), ('\\u0a3c', '\\u0a3c', GC_Extend),\n+        ('\\u0a3e', '\\u0a40', GC_SpacingMark), ('\\u0a41', '\\u0a42', GC_Extend), ('\\u0a47', '\\u0a48',\n+        GC_Extend), ('\\u0a4b', '\\u0a4d', GC_Extend), ('\\u0a51', '\\u0a51', GC_Extend), ('\\u0a70',\n+        '\\u0a71', GC_Extend), ('\\u0a75', '\\u0a75', GC_Extend), ('\\u0a81', '\\u0a82', GC_Extend),\n+        ('\\u0a83', '\\u0a83', GC_SpacingMark), ('\\u0abc', '\\u0abc', GC_Extend), ('\\u0abe', '\\u0ac0',\n+        GC_SpacingMark), ('\\u0ac1', '\\u0ac5', GC_Extend), ('\\u0ac7', '\\u0ac8', GC_Extend),\n+        ('\\u0ac9', '\\u0ac9', GC_SpacingMark), ('\\u0acb', '\\u0acc', GC_SpacingMark), ('\\u0acd',\n+        '\\u0acd', GC_Extend), ('\\u0ae2', '\\u0ae3', GC_Extend), ('\\u0b01', '\\u0b01', GC_Extend),\n+        ('\\u0b02', '\\u0b03', GC_SpacingMark), ('\\u0b3c', '\\u0b3c', GC_Extend), ('\\u0b3e', '\\u0b3e',\n+        GC_Extend), ('\\u0b3f', '\\u0b3f', GC_Extend), ('\\u0b40', '\\u0b40', GC_SpacingMark),\n+        ('\\u0b41', '\\u0b44', GC_Extend), ('\\u0b47', '\\u0b48', GC_SpacingMark), ('\\u0b4b', '\\u0b4c',\n+        GC_SpacingMark), ('\\u0b4d', '\\u0b4d', GC_Extend), ('\\u0b56', '\\u0b56', GC_Extend),\n+        ('\\u0b57', '\\u0b57', GC_Extend), ('\\u0b62', '\\u0b63', GC_Extend), ('\\u0b82', '\\u0b82',\n+        GC_Extend), ('\\u0bbe', '\\u0bbe', GC_Extend), ('\\u0bbf', '\\u0bbf', GC_SpacingMark),\n+        ('\\u0bc0', '\\u0bc0', GC_Extend), ('\\u0bc1', '\\u0bc2', GC_SpacingMark), ('\\u0bc6', '\\u0bc8',\n+        GC_SpacingMark), ('\\u0bca', '\\u0bcc', GC_SpacingMark), ('\\u0bcd', '\\u0bcd', GC_Extend),\n+        ('\\u0bd7', '\\u0bd7', GC_Extend), ('\\u0c00', '\\u0c00', GC_Extend), ('\\u0c01', '\\u0c03',\n+        GC_SpacingMark), ('\\u0c3e', '\\u0c40', GC_Extend), ('\\u0c41', '\\u0c44', GC_SpacingMark),\n+        ('\\u0c46', '\\u0c48', GC_Extend), ('\\u0c4a', '\\u0c4d', GC_Extend), ('\\u0c55', '\\u0c56',\n+        GC_Extend), ('\\u0c62', '\\u0c63', GC_Extend), ('\\u0c81', '\\u0c81', GC_Extend), ('\\u0c82',\n+        '\\u0c83', GC_SpacingMark), ('\\u0cbc', '\\u0cbc', GC_Extend), ('\\u0cbe', '\\u0cbe',\n+        GC_SpacingMark), ('\\u0cbf', '\\u0cbf', GC_Extend), ('\\u0cc0', '\\u0cc1', GC_SpacingMark),\n+        ('\\u0cc2', '\\u0cc2', GC_Extend), ('\\u0cc3', '\\u0cc4', GC_SpacingMark), ('\\u0cc6', '\\u0cc6',\n+        GC_Extend), ('\\u0cc7', '\\u0cc8', GC_SpacingMark), ('\\u0cca', '\\u0ccb', GC_SpacingMark),\n+        ('\\u0ccc', '\\u0ccd', GC_Extend), ('\\u0cd5', '\\u0cd6', GC_Extend), ('\\u0ce2', '\\u0ce3',\n+        GC_Extend), ('\\u0d01', '\\u0d01', GC_Extend), ('\\u0d02', '\\u0d03', GC_SpacingMark),\n+        ('\\u0d3e', '\\u0d3e', GC_Extend), ('\\u0d3f', '\\u0d40', GC_SpacingMark), ('\\u0d41', '\\u0d44',\n+        GC_Extend), ('\\u0d46', '\\u0d48', GC_SpacingMark), ('\\u0d4a', '\\u0d4c', GC_SpacingMark),\n+        ('\\u0d4d', '\\u0d4d', GC_Extend), ('\\u0d57', '\\u0d57', GC_Extend), ('\\u0d62', '\\u0d63',\n+        GC_Extend), ('\\u0d82', '\\u0d83', GC_SpacingMark), ('\\u0dca', '\\u0dca', GC_Extend),\n+        ('\\u0dcf', '\\u0dcf', GC_Extend), ('\\u0dd0', '\\u0dd1', GC_SpacingMark), ('\\u0dd2', '\\u0dd4',\n+        GC_Extend), ('\\u0dd6', '\\u0dd6', GC_Extend), ('\\u0dd8', '\\u0dde', GC_SpacingMark),\n+        ('\\u0ddf', '\\u0ddf', GC_Extend), ('\\u0df2', '\\u0df3', GC_SpacingMark), ('\\u0e31', '\\u0e31',\n+        GC_Extend), ('\\u0e33', '\\u0e33', GC_SpacingMark), ('\\u0e34', '\\u0e3a', GC_Extend),\n+        ('\\u0e47', '\\u0e4e', GC_Extend), ('\\u0eb1', '\\u0eb1', GC_Extend), ('\\u0eb3', '\\u0eb3',\n+        GC_SpacingMark), ('\\u0eb4', '\\u0eb9', GC_Extend), ('\\u0ebb', '\\u0ebc', GC_Extend),\n+        ('\\u0ec8', '\\u0ecd', GC_Extend), ('\\u0f18', '\\u0f19', GC_Extend), ('\\u0f35', '\\u0f35',\n+        GC_Extend), ('\\u0f37', '\\u0f37', GC_Extend), ('\\u0f39', '\\u0f39', GC_Extend), ('\\u0f3e',\n+        '\\u0f3f', GC_SpacingMark), ('\\u0f71', '\\u0f7e', GC_Extend), ('\\u0f7f', '\\u0f7f',\n+        GC_SpacingMark), ('\\u0f80', '\\u0f84', GC_Extend), ('\\u0f86', '\\u0f87', GC_Extend),\n+        ('\\u0f8d', '\\u0f97', GC_Extend), ('\\u0f99', '\\u0fbc', GC_Extend), ('\\u0fc6', '\\u0fc6',\n+        GC_Extend), ('\\u102b', '\\u102c', GC_SpacingMark), ('\\u102d', '\\u1030', GC_Extend),\n+        ('\\u1031', '\\u1031', GC_SpacingMark), ('\\u1032', '\\u1037', GC_Extend), ('\\u1038', '\\u1038',\n+        GC_SpacingMark), ('\\u1039', '\\u103a', GC_Extend), ('\\u103b', '\\u103c', GC_SpacingMark),\n+        ('\\u103d', '\\u103e', GC_Extend), ('\\u1056', '\\u1057', GC_SpacingMark), ('\\u1058', '\\u1059',\n+        GC_Extend), ('\\u105e', '\\u1060', GC_Extend), ('\\u1062', '\\u1064', GC_SpacingMark),\n+        ('\\u1067', '\\u106d', GC_SpacingMark), ('\\u1071', '\\u1074', GC_Extend), ('\\u1082', '\\u1082',\n+        GC_Extend), ('\\u1083', '\\u1084', GC_SpacingMark), ('\\u1085', '\\u1086', GC_Extend),\n+        ('\\u1087', '\\u108c', GC_SpacingMark), ('\\u108d', '\\u108d', GC_Extend), ('\\u108f', '\\u108f',\n+        GC_SpacingMark), ('\\u109a', '\\u109c', GC_SpacingMark), ('\\u109d', '\\u109d', GC_Extend),\n+        ('\\u1100', '\\u115f', GC_L), ('\\u1160', '\\u11a7', GC_V), ('\\u11a8', '\\u11ff', GC_T),\n+        ('\\u135d', '\\u135f', GC_Extend), ('\\u1712', '\\u1714', GC_Extend), ('\\u1732', '\\u1734',\n+        GC_Extend), ('\\u1752', '\\u1753', GC_Extend), ('\\u1772', '\\u1773', GC_Extend), ('\\u17b4',\n+        '\\u17b5', GC_Extend), ('\\u17b6', '\\u17b6', GC_SpacingMark), ('\\u17b7', '\\u17bd', GC_Extend),\n+        ('\\u17be', '\\u17c5', GC_SpacingMark), ('\\u17c6', '\\u17c6', GC_Extend), ('\\u17c7', '\\u17c8',\n+        GC_SpacingMark), ('\\u17c9', '\\u17d3', GC_Extend), ('\\u17dd', '\\u17dd', GC_Extend),\n+        ('\\u180b', '\\u180d', GC_Extend), ('\\u180e', '\\u180e', GC_Control), ('\\u18a9', '\\u18a9',\n+        GC_Extend), ('\\u1920', '\\u1922', GC_Extend), ('\\u1923', '\\u1926', GC_SpacingMark),\n+        ('\\u1927', '\\u1928', GC_Extend), ('\\u1929', '\\u192b', GC_SpacingMark), ('\\u1930', '\\u1931',\n+        GC_SpacingMark), ('\\u1932', '\\u1932', GC_Extend), ('\\u1933', '\\u1938', GC_SpacingMark),\n+        ('\\u1939', '\\u193b', GC_Extend), ('\\u19b0', '\\u19c0', GC_SpacingMark), ('\\u19c8', '\\u19c9',\n+        GC_SpacingMark), ('\\u1a17', '\\u1a18', GC_Extend), ('\\u1a19', '\\u1a1a', GC_SpacingMark),\n+        ('\\u1a1b', '\\u1a1b', GC_Extend), ('\\u1a55', '\\u1a55', GC_SpacingMark), ('\\u1a56', '\\u1a56',\n+        GC_Extend), ('\\u1a57', '\\u1a57', GC_SpacingMark), ('\\u1a58', '\\u1a5e', GC_Extend),\n+        ('\\u1a60', '\\u1a60', GC_Extend), ('\\u1a61', '\\u1a61', GC_SpacingMark), ('\\u1a62', '\\u1a62',\n+        GC_Extend), ('\\u1a63', '\\u1a64', GC_SpacingMark), ('\\u1a65', '\\u1a6c', GC_Extend),\n+        ('\\u1a6d', '\\u1a72', GC_SpacingMark), ('\\u1a73', '\\u1a7c', GC_Extend), ('\\u1a7f', '\\u1a7f',\n+        GC_Extend), ('\\u1ab0', '\\u1abd', GC_Extend), ('\\u1abe', '\\u1abe', GC_Extend), ('\\u1b00',\n+        '\\u1b03', GC_Extend), ('\\u1b04', '\\u1b04', GC_SpacingMark), ('\\u1b34', '\\u1b34', GC_Extend),\n+        ('\\u1b35', '\\u1b35', GC_SpacingMark), ('\\u1b36', '\\u1b3a', GC_Extend), ('\\u1b3b', '\\u1b3b',\n+        GC_SpacingMark), ('\\u1b3c', '\\u1b3c', GC_Extend), ('\\u1b3d', '\\u1b41', GC_SpacingMark),\n+        ('\\u1b42', '\\u1b42', GC_Extend), ('\\u1b43', '\\u1b44', GC_SpacingMark), ('\\u1b6b', '\\u1b73',\n+        GC_Extend), ('\\u1b80', '\\u1b81', GC_Extend), ('\\u1b82', '\\u1b82', GC_SpacingMark),\n+        ('\\u1ba1', '\\u1ba1', GC_SpacingMark), ('\\u1ba2', '\\u1ba5', GC_Extend), ('\\u1ba6', '\\u1ba7',\n+        GC_SpacingMark), ('\\u1ba8', '\\u1ba9', GC_Extend), ('\\u1baa', '\\u1baa', GC_SpacingMark),\n+        ('\\u1bab', '\\u1bad', GC_Extend), ('\\u1be6', '\\u1be6', GC_Extend), ('\\u1be7', '\\u1be7',\n+        GC_SpacingMark), ('\\u1be8', '\\u1be9', GC_Extend), ('\\u1bea', '\\u1bec', GC_SpacingMark),\n+        ('\\u1bed', '\\u1bed', GC_Extend), ('\\u1bee', '\\u1bee', GC_SpacingMark), ('\\u1bef', '\\u1bf1',\n+        GC_Extend), ('\\u1bf2', '\\u1bf3', GC_SpacingMark), ('\\u1c24', '\\u1c2b', GC_SpacingMark),\n+        ('\\u1c2c', '\\u1c33', GC_Extend), ('\\u1c34', '\\u1c35', GC_SpacingMark), ('\\u1c36', '\\u1c37',\n+        GC_Extend), ('\\u1cd0', '\\u1cd2', GC_Extend), ('\\u1cd4', '\\u1ce0', GC_Extend), ('\\u1ce1',\n+        '\\u1ce1', GC_SpacingMark), ('\\u1ce2', '\\u1ce8', GC_Extend), ('\\u1ced', '\\u1ced', GC_Extend),\n+        ('\\u1cf2', '\\u1cf3', GC_SpacingMark), ('\\u1cf4', '\\u1cf4', GC_Extend), ('\\u1cf8', '\\u1cf9',\n+        GC_Extend), ('\\u1dc0', '\\u1df5', GC_Extend), ('\\u1dfc', '\\u1dff', GC_Extend), ('\\u200b',\n+        '\\u200b', GC_Control), ('\\u200c', '\\u200d', GC_Extend), ('\\u200e', '\\u200f', GC_Control),\n+        ('\\u2028', '\\u202e', GC_Control), ('\\u2060', '\\u206f', GC_Control), ('\\u20d0', '\\u20dc',\n+        GC_Extend), ('\\u20dd', '\\u20e0', GC_Extend), ('\\u20e1', '\\u20e1', GC_Extend), ('\\u20e2',\n+        '\\u20e4', GC_Extend), ('\\u20e5', '\\u20f0', GC_Extend), ('\\u2cef', '\\u2cf1', GC_Extend),\n+        ('\\u2d7f', '\\u2d7f', GC_Extend), ('\\u2de0', '\\u2dff', GC_Extend), ('\\u302a', '\\u302d',\n+        GC_Extend), ('\\u302e', '\\u302f', GC_Extend), ('\\u3099', '\\u309a', GC_Extend), ('\\ua66f',\n+        '\\ua66f', GC_Extend), ('\\ua670', '\\ua672', GC_Extend), ('\\ua674', '\\ua67d', GC_Extend),\n+        ('\\ua69f', '\\ua69f', GC_Extend), ('\\ua6f0', '\\ua6f1', GC_Extend), ('\\ua802', '\\ua802',\n+        GC_Extend), ('\\ua806', '\\ua806', GC_Extend), ('\\ua80b', '\\ua80b', GC_Extend), ('\\ua823',\n+        '\\ua824', GC_SpacingMark), ('\\ua825', '\\ua826', GC_Extend), ('\\ua827', '\\ua827',\n+        GC_SpacingMark), ('\\ua880', '\\ua881', GC_SpacingMark), ('\\ua8b4', '\\ua8c3', GC_SpacingMark),\n+        ('\\ua8c4', '\\ua8c4', GC_Extend), ('\\ua8e0', '\\ua8f1', GC_Extend), ('\\ua926', '\\ua92d',\n+        GC_Extend), ('\\ua947', '\\ua951', GC_Extend), ('\\ua952', '\\ua953', GC_SpacingMark),\n+        ('\\ua960', '\\ua97c', GC_L), ('\\ua980', '\\ua982', GC_Extend), ('\\ua983', '\\ua983',\n+        GC_SpacingMark), ('\\ua9b3', '\\ua9b3', GC_Extend), ('\\ua9b4', '\\ua9b5', GC_SpacingMark),\n+        ('\\ua9b6', '\\ua9b9', GC_Extend), ('\\ua9ba', '\\ua9bb', GC_SpacingMark), ('\\ua9bc', '\\ua9bc',\n+        GC_Extend), ('\\ua9bd', '\\ua9c0', GC_SpacingMark), ('\\ua9e5', '\\ua9e5', GC_Extend),\n+        ('\\uaa29', '\\uaa2e', GC_Extend), ('\\uaa2f', '\\uaa30', GC_SpacingMark), ('\\uaa31', '\\uaa32',\n+        GC_Extend), ('\\uaa33', '\\uaa34', GC_SpacingMark), ('\\uaa35', '\\uaa36', GC_Extend),\n+        ('\\uaa43', '\\uaa43', GC_Extend), ('\\uaa4c', '\\uaa4c', GC_Extend), ('\\uaa4d', '\\uaa4d',\n+        GC_SpacingMark), ('\\uaa7b', '\\uaa7b', GC_SpacingMark), ('\\uaa7c', '\\uaa7c', GC_Extend),\n+        ('\\uaa7d', '\\uaa7d', GC_SpacingMark), ('\\uaab0', '\\uaab0', GC_Extend), ('\\uaab2', '\\uaab4',\n+        GC_Extend), ('\\uaab7', '\\uaab8', GC_Extend), ('\\uaabe', '\\uaabf', GC_Extend), ('\\uaac1',\n+        '\\uaac1', GC_Extend), ('\\uaaeb', '\\uaaeb', GC_SpacingMark), ('\\uaaec', '\\uaaed', GC_Extend),\n+        ('\\uaaee', '\\uaaef', GC_SpacingMark), ('\\uaaf5', '\\uaaf5', GC_SpacingMark), ('\\uaaf6',\n+        '\\uaaf6', GC_Extend), ('\\uabe3', '\\uabe4', GC_SpacingMark), ('\\uabe5', '\\uabe5', GC_Extend),\n+        ('\\uabe6', '\\uabe7', GC_SpacingMark), ('\\uabe8', '\\uabe8', GC_Extend), ('\\uabe9', '\\uabea',\n+        GC_SpacingMark), ('\\uabec', '\\uabec', GC_SpacingMark), ('\\uabed', '\\uabed', GC_Extend),\n+        ('\\uac00', '\\uac00', GC_LV), ('\\uac01', '\\uac1b', GC_LVT), ('\\uac1c', '\\uac1c', GC_LV),\n+        ('\\uac1d', '\\uac37', GC_LVT), ('\\uac38', '\\uac38', GC_LV), ('\\uac39', '\\uac53', GC_LVT),\n+        ('\\uac54', '\\uac54', GC_LV), ('\\uac55', '\\uac6f', GC_LVT), ('\\uac70', '\\uac70', GC_LV),\n+        ('\\uac71', '\\uac8b', GC_LVT), ('\\uac8c', '\\uac8c', GC_LV), ('\\uac8d', '\\uaca7', GC_LVT),\n+        ('\\uaca8', '\\uaca8', GC_LV), ('\\uaca9', '\\uacc3', GC_LVT), ('\\uacc4', '\\uacc4', GC_LV),\n+        ('\\uacc5', '\\uacdf', GC_LVT), ('\\uace0', '\\uace0', GC_LV), ('\\uace1', '\\uacfb', GC_LVT),\n+        ('\\uacfc', '\\uacfc', GC_LV), ('\\uacfd', '\\uad17', GC_LVT), ('\\uad18', '\\uad18', GC_LV),\n+        ('\\uad19', '\\uad33', GC_LVT), ('\\uad34', '\\uad34', GC_LV), ('\\uad35', '\\uad4f', GC_LVT),\n+        ('\\uad50', '\\uad50', GC_LV), ('\\uad51', '\\uad6b', GC_LVT), ('\\uad6c', '\\uad6c', GC_LV),\n+        ('\\uad6d', '\\uad87', GC_LVT), ('\\uad88', '\\uad88', GC_LV), ('\\uad89', '\\uada3', GC_LVT),\n+        ('\\uada4', '\\uada4', GC_LV), ('\\uada5', '\\uadbf', GC_LVT), ('\\uadc0', '\\uadc0', GC_LV),\n+        ('\\uadc1', '\\uaddb', GC_LVT), ('\\uaddc', '\\uaddc', GC_LV), ('\\uaddd', '\\uadf7', GC_LVT),\n+        ('\\uadf8', '\\uadf8', GC_LV), ('\\uadf9', '\\uae13', GC_LVT), ('\\uae14', '\\uae14', GC_LV),\n+        ('\\uae15', '\\uae2f', GC_LVT), ('\\uae30', '\\uae30', GC_LV), ('\\uae31', '\\uae4b', GC_LVT),\n+        ('\\uae4c', '\\uae4c', GC_LV), ('\\uae4d', '\\uae67', GC_LVT), ('\\uae68', '\\uae68', GC_LV),\n+        ('\\uae69', '\\uae83', GC_LVT), ('\\uae84', '\\uae84', GC_LV), ('\\uae85', '\\uae9f', GC_LVT),\n+        ('\\uaea0', '\\uaea0', GC_LV), ('\\uaea1', '\\uaebb', GC_LVT), ('\\uaebc', '\\uaebc', GC_LV),\n+        ('\\uaebd', '\\uaed7', GC_LVT), ('\\uaed8', '\\uaed8', GC_LV), ('\\uaed9', '\\uaef3', GC_LVT),\n+        ('\\uaef4', '\\uaef4', GC_LV), ('\\uaef5', '\\uaf0f', GC_LVT), ('\\uaf10', '\\uaf10', GC_LV),\n+        ('\\uaf11', '\\uaf2b', GC_LVT), ('\\uaf2c', '\\uaf2c', GC_LV), ('\\uaf2d', '\\uaf47', GC_LVT),\n+        ('\\uaf48', '\\uaf48', GC_LV), ('\\uaf49', '\\uaf63', GC_LVT), ('\\uaf64', '\\uaf64', GC_LV),\n+        ('\\uaf65', '\\uaf7f', GC_LVT), ('\\uaf80', '\\uaf80', GC_LV), ('\\uaf81', '\\uaf9b', GC_LVT),\n+        ('\\uaf9c', '\\uaf9c', GC_LV), ('\\uaf9d', '\\uafb7', GC_LVT), ('\\uafb8', '\\uafb8', GC_LV),\n+        ('\\uafb9', '\\uafd3', GC_LVT), ('\\uafd4', '\\uafd4', GC_LV), ('\\uafd5', '\\uafef', GC_LVT),\n+        ('\\uaff0', '\\uaff0', GC_LV), ('\\uaff1', '\\ub00b', GC_LVT), ('\\ub00c', '\\ub00c', GC_LV),\n+        ('\\ub00d', '\\ub027', GC_LVT), ('\\ub028', '\\ub028', GC_LV), ('\\ub029', '\\ub043', GC_LVT),\n+        ('\\ub044', '\\ub044', GC_LV), ('\\ub045', '\\ub05f', GC_LVT), ('\\ub060', '\\ub060', GC_LV),\n+        ('\\ub061', '\\ub07b', GC_LVT), ('\\ub07c', '\\ub07c', GC_LV), ('\\ub07d', '\\ub097', GC_LVT),\n+        ('\\ub098', '\\ub098', GC_LV), ('\\ub099', '\\ub0b3', GC_LVT), ('\\ub0b4', '\\ub0b4', GC_LV),\n+        ('\\ub0b5', '\\ub0cf', GC_LVT), ('\\ub0d0', '\\ub0d0', GC_LV), ('\\ub0d1', '\\ub0eb', GC_LVT),\n+        ('\\ub0ec', '\\ub0ec', GC_LV), ('\\ub0ed', '\\ub107', GC_LVT), ('\\ub108', '\\ub108', GC_LV),\n+        ('\\ub109', '\\ub123', GC_LVT), ('\\ub124', '\\ub124', GC_LV), ('\\ub125', '\\ub13f', GC_LVT),\n+        ('\\ub140', '\\ub140', GC_LV), ('\\ub141', '\\ub15b', GC_LVT), ('\\ub15c', '\\ub15c', GC_LV),\n+        ('\\ub15d', '\\ub177', GC_LVT), ('\\ub178', '\\ub178', GC_LV), ('\\ub179', '\\ub193', GC_LVT),\n+        ('\\ub194', '\\ub194', GC_LV), ('\\ub195', '\\ub1af', GC_LVT), ('\\ub1b0', '\\ub1b0', GC_LV),\n+        ('\\ub1b1', '\\ub1cb', GC_LVT), ('\\ub1cc', '\\ub1cc', GC_LV), ('\\ub1cd', '\\ub1e7', GC_LVT),\n+        ('\\ub1e8', '\\ub1e8', GC_LV), ('\\ub1e9', '\\ub203', GC_LVT), ('\\ub204', '\\ub204', GC_LV),\n+        ('\\ub205', '\\ub21f', GC_LVT), ('\\ub220', '\\ub220', GC_LV), ('\\ub221', '\\ub23b', GC_LVT),\n+        ('\\ub23c', '\\ub23c', GC_LV), ('\\ub23d', '\\ub257', GC_LVT), ('\\ub258', '\\ub258', GC_LV),\n+        ('\\ub259', '\\ub273', GC_LVT), ('\\ub274', '\\ub274', GC_LV), ('\\ub275', '\\ub28f', GC_LVT),\n+        ('\\ub290', '\\ub290', GC_LV), ('\\ub291', '\\ub2ab', GC_LVT), ('\\ub2ac', '\\ub2ac', GC_LV),\n+        ('\\ub2ad', '\\ub2c7', GC_LVT), ('\\ub2c8', '\\ub2c8', GC_LV), ('\\ub2c9', '\\ub2e3', GC_LVT),\n+        ('\\ub2e4', '\\ub2e4', GC_LV), ('\\ub2e5', '\\ub2ff', GC_LVT), ('\\ub300', '\\ub300', GC_LV),\n+        ('\\ub301', '\\ub31b', GC_LVT), ('\\ub31c', '\\ub31c', GC_LV), ('\\ub31d', '\\ub337', GC_LVT),\n+        ('\\ub338', '\\ub338', GC_LV), ('\\ub339', '\\ub353', GC_LVT), ('\\ub354', '\\ub354', GC_LV),\n+        ('\\ub355', '\\ub36f', GC_LVT), ('\\ub370', '\\ub370', GC_LV), ('\\ub371', '\\ub38b', GC_LVT),\n+        ('\\ub38c', '\\ub38c', GC_LV), ('\\ub38d', '\\ub3a7', GC_LVT), ('\\ub3a8', '\\ub3a8', GC_LV),\n+        ('\\ub3a9', '\\ub3c3', GC_LVT), ('\\ub3c4', '\\ub3c4', GC_LV), ('\\ub3c5', '\\ub3df', GC_LVT),\n+        ('\\ub3e0', '\\ub3e0', GC_LV), ('\\ub3e1', '\\ub3fb', GC_LVT), ('\\ub3fc', '\\ub3fc', GC_LV),\n+        ('\\ub3fd', '\\ub417', GC_LVT), ('\\ub418', '\\ub418', GC_LV), ('\\ub419', '\\ub433', GC_LVT),\n+        ('\\ub434', '\\ub434', GC_LV), ('\\ub435', '\\ub44f', GC_LVT), ('\\ub450', '\\ub450', GC_LV),\n+        ('\\ub451', '\\ub46b', GC_LVT), ('\\ub46c', '\\ub46c', GC_LV), ('\\ub46d', '\\ub487', GC_LVT),\n+        ('\\ub488', '\\ub488', GC_LV), ('\\ub489', '\\ub4a3', GC_LVT), ('\\ub4a4', '\\ub4a4', GC_LV),\n+        ('\\ub4a5', '\\ub4bf', GC_LVT), ('\\ub4c0', '\\ub4c0', GC_LV), ('\\ub4c1', '\\ub4db', GC_LVT),\n+        ('\\ub4dc', '\\ub4dc', GC_LV), ('\\ub4dd', '\\ub4f7', GC_LVT), ('\\ub4f8', '\\ub4f8', GC_LV),\n+        ('\\ub4f9', '\\ub513', GC_LVT), ('\\ub514', '\\ub514', GC_LV), ('\\ub515', '\\ub52f', GC_LVT),\n+        ('\\ub530', '\\ub530', GC_LV), ('\\ub531', '\\ub54b', GC_LVT), ('\\ub54c', '\\ub54c', GC_LV),\n+        ('\\ub54d', '\\ub567', GC_LVT), ('\\ub568', '\\ub568', GC_LV), ('\\ub569', '\\ub583', GC_LVT),\n+        ('\\ub584', '\\ub584', GC_LV), ('\\ub585', '\\ub59f', GC_LVT), ('\\ub5a0', '\\ub5a0', GC_LV),\n+        ('\\ub5a1', '\\ub5bb', GC_LVT), ('\\ub5bc', '\\ub5bc', GC_LV), ('\\ub5bd', '\\ub5d7', GC_LVT),\n+        ('\\ub5d8', '\\ub5d8', GC_LV), ('\\ub5d9', '\\ub5f3', GC_LVT), ('\\ub5f4', '\\ub5f4', GC_LV),\n+        ('\\ub5f5', '\\ub60f', GC_LVT), ('\\ub610', '\\ub610', GC_LV), ('\\ub611', '\\ub62b', GC_LVT),\n+        ('\\ub62c', '\\ub62c', GC_LV), ('\\ub62d', '\\ub647', GC_LVT), ('\\ub648', '\\ub648', GC_LV),\n+        ('\\ub649', '\\ub663', GC_LVT), ('\\ub664', '\\ub664', GC_LV), ('\\ub665', '\\ub67f', GC_LVT),\n+        ('\\ub680', '\\ub680', GC_LV), ('\\ub681', '\\ub69b', GC_LVT), ('\\ub69c', '\\ub69c', GC_LV),\n+        ('\\ub69d', '\\ub6b7', GC_LVT), ('\\ub6b8', '\\ub6b8', GC_LV), ('\\ub6b9', '\\ub6d3', GC_LVT),\n+        ('\\ub6d4', '\\ub6d4', GC_LV), ('\\ub6d5', '\\ub6ef', GC_LVT), ('\\ub6f0', '\\ub6f0', GC_LV),\n+        ('\\ub6f1', '\\ub70b', GC_LVT), ('\\ub70c', '\\ub70c', GC_LV), ('\\ub70d', '\\ub727', GC_LVT),\n+        ('\\ub728', '\\ub728', GC_LV), ('\\ub729', '\\ub743', GC_LVT), ('\\ub744', '\\ub744', GC_LV),\n+        ('\\ub745', '\\ub75f', GC_LVT), ('\\ub760', '\\ub760', GC_LV), ('\\ub761', '\\ub77b', GC_LVT),\n+        ('\\ub77c', '\\ub77c', GC_LV), ('\\ub77d', '\\ub797', GC_LVT), ('\\ub798', '\\ub798', GC_LV),\n+        ('\\ub799', '\\ub7b3', GC_LVT), ('\\ub7b4', '\\ub7b4', GC_LV), ('\\ub7b5', '\\ub7cf', GC_LVT),\n+        ('\\ub7d0', '\\ub7d0', GC_LV), ('\\ub7d1', '\\ub7eb', GC_LVT), ('\\ub7ec', '\\ub7ec', GC_LV),\n+        ('\\ub7ed', '\\ub807', GC_LVT), ('\\ub808', '\\ub808', GC_LV), ('\\ub809', '\\ub823', GC_LVT),\n+        ('\\ub824', '\\ub824', GC_LV), ('\\ub825', '\\ub83f', GC_LVT), ('\\ub840', '\\ub840', GC_LV),\n+        ('\\ub841', '\\ub85b', GC_LVT), ('\\ub85c', '\\ub85c', GC_LV), ('\\ub85d', '\\ub877', GC_LVT),\n+        ('\\ub878', '\\ub878', GC_LV), ('\\ub879', '\\ub893', GC_LVT), ('\\ub894', '\\ub894', GC_LV),\n+        ('\\ub895', '\\ub8af', GC_LVT), ('\\ub8b0', '\\ub8b0', GC_LV), ('\\ub8b1', '\\ub8cb', GC_LVT),\n+        ('\\ub8cc', '\\ub8cc', GC_LV), ('\\ub8cd', '\\ub8e7', GC_LVT), ('\\ub8e8', '\\ub8e8', GC_LV),\n+        ('\\ub8e9', '\\ub903', GC_LVT), ('\\ub904', '\\ub904', GC_LV), ('\\ub905', '\\ub91f', GC_LVT),\n+        ('\\ub920', '\\ub920', GC_LV), ('\\ub921', '\\ub93b', GC_LVT), ('\\ub93c', '\\ub93c', GC_LV),\n+        ('\\ub93d', '\\ub957', GC_LVT), ('\\ub958', '\\ub958', GC_LV), ('\\ub959', '\\ub973', GC_LVT),\n+        ('\\ub974', '\\ub974', GC_LV), ('\\ub975', '\\ub98f', GC_LVT), ('\\ub990', '\\ub990', GC_LV),\n+        ('\\ub991', '\\ub9ab', GC_LVT), ('\\ub9ac', '\\ub9ac', GC_LV), ('\\ub9ad', '\\ub9c7', GC_LVT),\n+        ('\\ub9c8', '\\ub9c8', GC_LV), ('\\ub9c9', '\\ub9e3', GC_LVT), ('\\ub9e4', '\\ub9e4', GC_LV),\n+        ('\\ub9e5', '\\ub9ff', GC_LVT), ('\\uba00', '\\uba00', GC_LV), ('\\uba01', '\\uba1b', GC_LVT),\n+        ('\\uba1c', '\\uba1c', GC_LV), ('\\uba1d', '\\uba37', GC_LVT), ('\\uba38', '\\uba38', GC_LV),\n+        ('\\uba39', '\\uba53', GC_LVT), ('\\uba54', '\\uba54', GC_LV), ('\\uba55', '\\uba6f', GC_LVT),\n+        ('\\uba70', '\\uba70', GC_LV), ('\\uba71', '\\uba8b', GC_LVT), ('\\uba8c', '\\uba8c', GC_LV),\n+        ('\\uba8d', '\\ubaa7', GC_LVT), ('\\ubaa8', '\\ubaa8', GC_LV), ('\\ubaa9', '\\ubac3', GC_LVT),\n+        ('\\ubac4', '\\ubac4', GC_LV), ('\\ubac5', '\\ubadf', GC_LVT), ('\\ubae0', '\\ubae0', GC_LV),\n+        ('\\ubae1', '\\ubafb', GC_LVT), ('\\ubafc', '\\ubafc', GC_LV), ('\\ubafd', '\\ubb17', GC_LVT),\n+        ('\\ubb18', '\\ubb18', GC_LV), ('\\ubb19', '\\ubb33', GC_LVT), ('\\ubb34', '\\ubb34', GC_LV),\n+        ('\\ubb35', '\\ubb4f', GC_LVT), ('\\ubb50', '\\ubb50', GC_LV), ('\\ubb51', '\\ubb6b', GC_LVT),\n+        ('\\ubb6c', '\\ubb6c', GC_LV), ('\\ubb6d', '\\ubb87', GC_LVT), ('\\ubb88', '\\ubb88', GC_LV),\n+        ('\\ubb89', '\\ubba3', GC_LVT), ('\\ubba4', '\\ubba4', GC_LV), ('\\ubba5', '\\ubbbf', GC_LVT),\n+        ('\\ubbc0', '\\ubbc0', GC_LV), ('\\ubbc1', '\\ubbdb', GC_LVT), ('\\ubbdc', '\\ubbdc', GC_LV),\n+        ('\\ubbdd', '\\ubbf7', GC_LVT), ('\\ubbf8', '\\ubbf8', GC_LV), ('\\ubbf9', '\\ubc13', GC_LVT),\n+        ('\\ubc14', '\\ubc14', GC_LV), ('\\ubc15', '\\ubc2f', GC_LVT), ('\\ubc30', '\\ubc30', GC_LV),\n+        ('\\ubc31', '\\ubc4b', GC_LVT), ('\\ubc4c', '\\ubc4c', GC_LV), ('\\ubc4d', '\\ubc67', GC_LVT),\n+        ('\\ubc68', '\\ubc68', GC_LV), ('\\ubc69', '\\ubc83', GC_LVT), ('\\ubc84', '\\ubc84', GC_LV),\n+        ('\\ubc85', '\\ubc9f', GC_LVT), ('\\ubca0', '\\ubca0', GC_LV), ('\\ubca1', '\\ubcbb', GC_LVT),\n+        ('\\ubcbc', '\\ubcbc', GC_LV), ('\\ubcbd', '\\ubcd7', GC_LVT), ('\\ubcd8', '\\ubcd8', GC_LV),\n+        ('\\ubcd9', '\\ubcf3', GC_LVT), ('\\ubcf4', '\\ubcf4', GC_LV), ('\\ubcf5', '\\ubd0f', GC_LVT),\n+        ('\\ubd10', '\\ubd10', GC_LV), ('\\ubd11', '\\ubd2b', GC_LVT), ('\\ubd2c', '\\ubd2c', GC_LV),\n+        ('\\ubd2d', '\\ubd47', GC_LVT), ('\\ubd48', '\\ubd48', GC_LV), ('\\ubd49', '\\ubd63', GC_LVT),\n+        ('\\ubd64', '\\ubd64', GC_LV), ('\\ubd65', '\\ubd7f', GC_LVT), ('\\ubd80', '\\ubd80', GC_LV),\n+        ('\\ubd81', '\\ubd9b', GC_LVT), ('\\ubd9c', '\\ubd9c', GC_LV), ('\\ubd9d', '\\ubdb7', GC_LVT),\n+        ('\\ubdb8', '\\ubdb8', GC_LV), ('\\ubdb9', '\\ubdd3', GC_LVT), ('\\ubdd4', '\\ubdd4', GC_LV),\n+        ('\\ubdd5', '\\ubdef', GC_LVT), ('\\ubdf0', '\\ubdf0', GC_LV), ('\\ubdf1', '\\ube0b', GC_LVT),\n+        ('\\ube0c', '\\ube0c', GC_LV), ('\\ube0d', '\\ube27', GC_LVT), ('\\ube28', '\\ube28', GC_LV),\n+        ('\\ube29', '\\ube43', GC_LVT), ('\\ube44', '\\ube44', GC_LV), ('\\ube45', '\\ube5f', GC_LVT),\n+        ('\\ube60', '\\ube60', GC_LV), ('\\ube61', '\\ube7b', GC_LVT), ('\\ube7c', '\\ube7c', GC_LV),\n+        ('\\ube7d', '\\ube97', GC_LVT), ('\\ube98', '\\ube98', GC_LV), ('\\ube99', '\\ubeb3', GC_LVT),\n+        ('\\ubeb4', '\\ubeb4', GC_LV), ('\\ubeb5', '\\ubecf', GC_LVT), ('\\ubed0', '\\ubed0', GC_LV),\n+        ('\\ubed1', '\\ubeeb', GC_LVT), ('\\ubeec', '\\ubeec', GC_LV), ('\\ubeed', '\\ubf07', GC_LVT),\n+        ('\\ubf08', '\\ubf08', GC_LV), ('\\ubf09', '\\ubf23', GC_LVT), ('\\ubf24', '\\ubf24', GC_LV),\n+        ('\\ubf25', '\\ubf3f', GC_LVT), ('\\ubf40', '\\ubf40', GC_LV), ('\\ubf41', '\\ubf5b', GC_LVT),\n+        ('\\ubf5c', '\\ubf5c', GC_LV), ('\\ubf5d', '\\ubf77', GC_LVT), ('\\ubf78', '\\ubf78', GC_LV),\n+        ('\\ubf79', '\\ubf93', GC_LVT), ('\\ubf94', '\\ubf94', GC_LV), ('\\ubf95', '\\ubfaf', GC_LVT),\n+        ('\\ubfb0', '\\ubfb0', GC_LV), ('\\ubfb1', '\\ubfcb', GC_LVT), ('\\ubfcc', '\\ubfcc', GC_LV),\n+        ('\\ubfcd', '\\ubfe7', GC_LVT), ('\\ubfe8', '\\ubfe8', GC_LV), ('\\ubfe9', '\\uc003', GC_LVT),\n+        ('\\uc004', '\\uc004', GC_LV), ('\\uc005', '\\uc01f', GC_LVT), ('\\uc020', '\\uc020', GC_LV),\n+        ('\\uc021', '\\uc03b', GC_LVT), ('\\uc03c', '\\uc03c', GC_LV), ('\\uc03d', '\\uc057', GC_LVT),\n+        ('\\uc058', '\\uc058', GC_LV), ('\\uc059', '\\uc073', GC_LVT), ('\\uc074', '\\uc074', GC_LV),\n+        ('\\uc075', '\\uc08f', GC_LVT), ('\\uc090', '\\uc090', GC_LV), ('\\uc091', '\\uc0ab', GC_LVT),\n+        ('\\uc0ac', '\\uc0ac', GC_LV), ('\\uc0ad', '\\uc0c7', GC_LVT), ('\\uc0c8', '\\uc0c8', GC_LV),\n+        ('\\uc0c9', '\\uc0e3', GC_LVT), ('\\uc0e4', '\\uc0e4', GC_LV), ('\\uc0e5', '\\uc0ff', GC_LVT),\n+        ('\\uc100', '\\uc100', GC_LV), ('\\uc101', '\\uc11b', GC_LVT), ('\\uc11c', '\\uc11c', GC_LV),\n+        ('\\uc11d', '\\uc137', GC_LVT), ('\\uc138', '\\uc138', GC_LV), ('\\uc139', '\\uc153', GC_LVT),\n+        ('\\uc154', '\\uc154', GC_LV), ('\\uc155', '\\uc16f', GC_LVT), ('\\uc170', '\\uc170', GC_LV),\n+        ('\\uc171', '\\uc18b', GC_LVT), ('\\uc18c', '\\uc18c', GC_LV), ('\\uc18d', '\\uc1a7', GC_LVT),\n+        ('\\uc1a8', '\\uc1a8', GC_LV), ('\\uc1a9', '\\uc1c3', GC_LVT), ('\\uc1c4', '\\uc1c4', GC_LV),\n+        ('\\uc1c5', '\\uc1df', GC_LVT), ('\\uc1e0', '\\uc1e0', GC_LV), ('\\uc1e1', '\\uc1fb', GC_LVT),\n+        ('\\uc1fc', '\\uc1fc', GC_LV), ('\\uc1fd', '\\uc217', GC_LVT), ('\\uc218', '\\uc218', GC_LV),\n+        ('\\uc219', '\\uc233', GC_LVT), ('\\uc234', '\\uc234', GC_LV), ('\\uc235', '\\uc24f', GC_LVT),\n+        ('\\uc250', '\\uc250', GC_LV), ('\\uc251', '\\uc26b', GC_LVT), ('\\uc26c', '\\uc26c', GC_LV),\n+        ('\\uc26d', '\\uc287', GC_LVT), ('\\uc288', '\\uc288', GC_LV), ('\\uc289', '\\uc2a3', GC_LVT),\n+        ('\\uc2a4', '\\uc2a4', GC_LV), ('\\uc2a5', '\\uc2bf', GC_LVT), ('\\uc2c0', '\\uc2c0', GC_LV),\n+        ('\\uc2c1', '\\uc2db', GC_LVT), ('\\uc2dc', '\\uc2dc', GC_LV), ('\\uc2dd', '\\uc2f7', GC_LVT),\n+        ('\\uc2f8', '\\uc2f8', GC_LV), ('\\uc2f9', '\\uc313', GC_LVT), ('\\uc314', '\\uc314', GC_LV),\n+        ('\\uc315', '\\uc32f', GC_LVT), ('\\uc330', '\\uc330', GC_LV), ('\\uc331', '\\uc34b', GC_LVT),\n+        ('\\uc34c', '\\uc34c', GC_LV), ('\\uc34d', '\\uc367', GC_LVT), ('\\uc368', '\\uc368', GC_LV),\n+        ('\\uc369', '\\uc383', GC_LVT), ('\\uc384', '\\uc384', GC_LV), ('\\uc385', '\\uc39f', GC_LVT),\n+        ('\\uc3a0', '\\uc3a0', GC_LV), ('\\uc3a1', '\\uc3bb', GC_LVT), ('\\uc3bc', '\\uc3bc', GC_LV),\n+        ('\\uc3bd', '\\uc3d7', GC_LVT), ('\\uc3d8', '\\uc3d8', GC_LV), ('\\uc3d9', '\\uc3f3', GC_LVT),\n+        ('\\uc3f4', '\\uc3f4', GC_LV), ('\\uc3f5', '\\uc40f', GC_LVT), ('\\uc410', '\\uc410', GC_LV),\n+        ('\\uc411', '\\uc42b', GC_LVT), ('\\uc42c', '\\uc42c', GC_LV), ('\\uc42d', '\\uc447', GC_LVT),\n+        ('\\uc448', '\\uc448', GC_LV), ('\\uc449', '\\uc463', GC_LVT), ('\\uc464', '\\uc464', GC_LV),\n+        ('\\uc465', '\\uc47f', GC_LVT), ('\\uc480', '\\uc480', GC_LV), ('\\uc481', '\\uc49b', GC_LVT),\n+        ('\\uc49c', '\\uc49c', GC_LV), ('\\uc49d', '\\uc4b7', GC_LVT), ('\\uc4b8', '\\uc4b8', GC_LV),\n+        ('\\uc4b9', '\\uc4d3', GC_LVT), ('\\uc4d4', '\\uc4d4', GC_LV), ('\\uc4d5', '\\uc4ef', GC_LVT),\n+        ('\\uc4f0', '\\uc4f0', GC_LV), ('\\uc4f1', '\\uc50b', GC_LVT), ('\\uc50c', '\\uc50c', GC_LV),\n+        ('\\uc50d', '\\uc527', GC_LVT), ('\\uc528', '\\uc528', GC_LV), ('\\uc529', '\\uc543', GC_LVT),\n+        ('\\uc544', '\\uc544', GC_LV), ('\\uc545', '\\uc55f', GC_LVT), ('\\uc560', '\\uc560', GC_LV),\n+        ('\\uc561', '\\uc57b', GC_LVT), ('\\uc57c', '\\uc57c', GC_LV), ('\\uc57d', '\\uc597', GC_LVT),\n+        ('\\uc598', '\\uc598', GC_LV), ('\\uc599', '\\uc5b3', GC_LVT), ('\\uc5b4', '\\uc5b4', GC_LV),\n+        ('\\uc5b5', '\\uc5cf', GC_LVT), ('\\uc5d0', '\\uc5d0', GC_LV), ('\\uc5d1', '\\uc5eb', GC_LVT),\n+        ('\\uc5ec', '\\uc5ec', GC_LV), ('\\uc5ed', '\\uc607', GC_LVT), ('\\uc608', '\\uc608', GC_LV),\n+        ('\\uc609', '\\uc623', GC_LVT), ('\\uc624', '\\uc624', GC_LV), ('\\uc625', '\\uc63f', GC_LVT),\n+        ('\\uc640', '\\uc640', GC_LV), ('\\uc641', '\\uc65b', GC_LVT), ('\\uc65c', '\\uc65c', GC_LV),\n+        ('\\uc65d', '\\uc677', GC_LVT), ('\\uc678', '\\uc678', GC_LV), ('\\uc679', '\\uc693', GC_LVT),\n+        ('\\uc694', '\\uc694', GC_LV), ('\\uc695', '\\uc6af', GC_LVT), ('\\uc6b0', '\\uc6b0', GC_LV),\n+        ('\\uc6b1', '\\uc6cb', GC_LVT), ('\\uc6cc', '\\uc6cc', GC_LV), ('\\uc6cd', '\\uc6e7', GC_LVT),\n+        ('\\uc6e8', '\\uc6e8', GC_LV), ('\\uc6e9', '\\uc703', GC_LVT), ('\\uc704', '\\uc704', GC_LV),\n+        ('\\uc705', '\\uc71f', GC_LVT), ('\\uc720', '\\uc720', GC_LV), ('\\uc721', '\\uc73b', GC_LVT),\n+        ('\\uc73c', '\\uc73c', GC_LV), ('\\uc73d', '\\uc757', GC_LVT), ('\\uc758', '\\uc758', GC_LV),\n+        ('\\uc759', '\\uc773', GC_LVT), ('\\uc774', '\\uc774', GC_LV), ('\\uc775', '\\uc78f', GC_LVT),\n+        ('\\uc790', '\\uc790', GC_LV), ('\\uc791', '\\uc7ab', GC_LVT), ('\\uc7ac', '\\uc7ac', GC_LV),\n+        ('\\uc7ad', '\\uc7c7', GC_LVT), ('\\uc7c8', '\\uc7c8', GC_LV), ('\\uc7c9', '\\uc7e3', GC_LVT),\n+        ('\\uc7e4', '\\uc7e4', GC_LV), ('\\uc7e5', '\\uc7ff', GC_LVT), ('\\uc800', '\\uc800', GC_LV),\n+        ('\\uc801', '\\uc81b', GC_LVT), ('\\uc81c', '\\uc81c', GC_LV), ('\\uc81d', '\\uc837', GC_LVT),\n+        ('\\uc838', '\\uc838', GC_LV), ('\\uc839', '\\uc853', GC_LVT), ('\\uc854', '\\uc854', GC_LV),\n+        ('\\uc855', '\\uc86f', GC_LVT), ('\\uc870', '\\uc870', GC_LV), ('\\uc871', '\\uc88b', GC_LVT),\n+        ('\\uc88c', '\\uc88c', GC_LV), ('\\uc88d', '\\uc8a7', GC_LVT), ('\\uc8a8', '\\uc8a8', GC_LV),\n+        ('\\uc8a9', '\\uc8c3', GC_LVT), ('\\uc8c4', '\\uc8c4', GC_LV), ('\\uc8c5', '\\uc8df', GC_LVT),\n+        ('\\uc8e0', '\\uc8e0', GC_LV), ('\\uc8e1', '\\uc8fb', GC_LVT), ('\\uc8fc', '\\uc8fc', GC_LV),\n+        ('\\uc8fd', '\\uc917', GC_LVT), ('\\uc918', '\\uc918', GC_LV), ('\\uc919', '\\uc933', GC_LVT),\n+        ('\\uc934', '\\uc934', GC_LV), ('\\uc935', '\\uc94f', GC_LVT), ('\\uc950', '\\uc950', GC_LV),\n+        ('\\uc951', '\\uc96b', GC_LVT), ('\\uc96c', '\\uc96c', GC_LV), ('\\uc96d', '\\uc987', GC_LVT),\n+        ('\\uc988', '\\uc988', GC_LV), ('\\uc989', '\\uc9a3', GC_LVT), ('\\uc9a4', '\\uc9a4', GC_LV),\n+        ('\\uc9a5', '\\uc9bf', GC_LVT), ('\\uc9c0', '\\uc9c0', GC_LV), ('\\uc9c1', '\\uc9db', GC_LVT),\n+        ('\\uc9dc', '\\uc9dc', GC_LV), ('\\uc9dd', '\\uc9f7', GC_LVT), ('\\uc9f8', '\\uc9f8', GC_LV),\n+        ('\\uc9f9', '\\uca13', GC_LVT), ('\\uca14', '\\uca14', GC_LV), ('\\uca15', '\\uca2f', GC_LVT),\n+        ('\\uca30', '\\uca30', GC_LV), ('\\uca31', '\\uca4b', GC_LVT), ('\\uca4c', '\\uca4c', GC_LV),\n+        ('\\uca4d', '\\uca67', GC_LVT), ('\\uca68', '\\uca68', GC_LV), ('\\uca69', '\\uca83', GC_LVT),\n+        ('\\uca84', '\\uca84', GC_LV), ('\\uca85', '\\uca9f', GC_LVT), ('\\ucaa0', '\\ucaa0', GC_LV),\n+        ('\\ucaa1', '\\ucabb', GC_LVT), ('\\ucabc', '\\ucabc', GC_LV), ('\\ucabd', '\\ucad7', GC_LVT),\n+        ('\\ucad8', '\\ucad8', GC_LV), ('\\ucad9', '\\ucaf3', GC_LVT), ('\\ucaf4', '\\ucaf4', GC_LV),\n+        ('\\ucaf5', '\\ucb0f', GC_LVT), ('\\ucb10', '\\ucb10', GC_LV), ('\\ucb11', '\\ucb2b', GC_LVT),\n+        ('\\ucb2c', '\\ucb2c', GC_LV), ('\\ucb2d', '\\ucb47', GC_LVT), ('\\ucb48', '\\ucb48', GC_LV),\n+        ('\\ucb49', '\\ucb63', GC_LVT), ('\\ucb64', '\\ucb64', GC_LV), ('\\ucb65', '\\ucb7f', GC_LVT),\n+        ('\\ucb80', '\\ucb80', GC_LV), ('\\ucb81', '\\ucb9b', GC_LVT), ('\\ucb9c', '\\ucb9c', GC_LV),\n+        ('\\ucb9d', '\\ucbb7', GC_LVT), ('\\ucbb8', '\\ucbb8', GC_LV), ('\\ucbb9', '\\ucbd3', GC_LVT),\n+        ('\\ucbd4', '\\ucbd4', GC_LV), ('\\ucbd5', '\\ucbef', GC_LVT), ('\\ucbf0', '\\ucbf0', GC_LV),\n+        ('\\ucbf1', '\\ucc0b', GC_LVT), ('\\ucc0c', '\\ucc0c', GC_LV), ('\\ucc0d', '\\ucc27', GC_LVT),\n+        ('\\ucc28', '\\ucc28', GC_LV), ('\\ucc29', '\\ucc43', GC_LVT), ('\\ucc44', '\\ucc44', GC_LV),\n+        ('\\ucc45', '\\ucc5f', GC_LVT), ('\\ucc60', '\\ucc60', GC_LV), ('\\ucc61', '\\ucc7b', GC_LVT),\n+        ('\\ucc7c', '\\ucc7c', GC_LV), ('\\ucc7d', '\\ucc97', GC_LVT), ('\\ucc98', '\\ucc98', GC_LV),\n+        ('\\ucc99', '\\uccb3', GC_LVT), ('\\uccb4', '\\uccb4', GC_LV), ('\\uccb5', '\\ucccf', GC_LVT),\n+        ('\\uccd0', '\\uccd0', GC_LV), ('\\uccd1', '\\ucceb', GC_LVT), ('\\uccec', '\\uccec', GC_LV),\n+        ('\\ucced', '\\ucd07', GC_LVT), ('\\ucd08', '\\ucd08', GC_LV), ('\\ucd09', '\\ucd23', GC_LVT),\n+        ('\\ucd24', '\\ucd24', GC_LV), ('\\ucd25', '\\ucd3f', GC_LVT), ('\\ucd40', '\\ucd40', GC_LV),\n+        ('\\ucd41', '\\ucd5b', GC_LVT), ('\\ucd5c', '\\ucd5c', GC_LV), ('\\ucd5d', '\\ucd77', GC_LVT),\n+        ('\\ucd78', '\\ucd78', GC_LV), ('\\ucd79', '\\ucd93', GC_LVT), ('\\ucd94', '\\ucd94', GC_LV),\n+        ('\\ucd95', '\\ucdaf', GC_LVT), ('\\ucdb0', '\\ucdb0', GC_LV), ('\\ucdb1', '\\ucdcb', GC_LVT),\n+        ('\\ucdcc', '\\ucdcc', GC_LV), ('\\ucdcd', '\\ucde7', GC_LVT), ('\\ucde8', '\\ucde8', GC_LV),\n+        ('\\ucde9', '\\uce03', GC_LVT), ('\\uce04', '\\uce04', GC_LV), ('\\uce05', '\\uce1f', GC_LVT),\n+        ('\\uce20', '\\uce20', GC_LV), ('\\uce21', '\\uce3b', GC_LVT), ('\\uce3c', '\\uce3c', GC_LV),\n+        ('\\uce3d', '\\uce57', GC_LVT), ('\\uce58', '\\uce58', GC_LV), ('\\uce59', '\\uce73', GC_LVT),\n+        ('\\uce74', '\\uce74', GC_LV), ('\\uce75', '\\uce8f', GC_LVT), ('\\uce90', '\\uce90', GC_LV),\n+        ('\\uce91', '\\uceab', GC_LVT), ('\\uceac', '\\uceac', GC_LV), ('\\ucead', '\\ucec7', GC_LVT),\n+        ('\\ucec8', '\\ucec8', GC_LV), ('\\ucec9', '\\ucee3', GC_LVT), ('\\ucee4', '\\ucee4', GC_LV),\n+        ('\\ucee5', '\\uceff', GC_LVT), ('\\ucf00', '\\ucf00', GC_LV), ('\\ucf01', '\\ucf1b', GC_LVT),\n+        ('\\ucf1c', '\\ucf1c', GC_LV), ('\\ucf1d', '\\ucf37', GC_LVT), ('\\ucf38', '\\ucf38', GC_LV),\n+        ('\\ucf39', '\\ucf53', GC_LVT), ('\\ucf54', '\\ucf54', GC_LV), ('\\ucf55', '\\ucf6f', GC_LVT),\n+        ('\\ucf70', '\\ucf70', GC_LV), ('\\ucf71', '\\ucf8b', GC_LVT), ('\\ucf8c', '\\ucf8c', GC_LV),\n+        ('\\ucf8d', '\\ucfa7', GC_LVT), ('\\ucfa8', '\\ucfa8', GC_LV), ('\\ucfa9', '\\ucfc3', GC_LVT),\n+        ('\\ucfc4', '\\ucfc4', GC_LV), ('\\ucfc5', '\\ucfdf', GC_LVT), ('\\ucfe0', '\\ucfe0', GC_LV),\n+        ('\\ucfe1', '\\ucffb', GC_LVT), ('\\ucffc', '\\ucffc', GC_LV), ('\\ucffd', '\\ud017', GC_LVT),\n+        ('\\ud018', '\\ud018', GC_LV), ('\\ud019', '\\ud033', GC_LVT), ('\\ud034', '\\ud034', GC_LV),\n+        ('\\ud035', '\\ud04f', GC_LVT), ('\\ud050', '\\ud050', GC_LV), ('\\ud051', '\\ud06b', GC_LVT),\n+        ('\\ud06c', '\\ud06c', GC_LV), ('\\ud06d', '\\ud087', GC_LVT), ('\\ud088', '\\ud088', GC_LV),\n+        ('\\ud089', '\\ud0a3', GC_LVT), ('\\ud0a4', '\\ud0a4', GC_LV), ('\\ud0a5', '\\ud0bf', GC_LVT),\n+        ('\\ud0c0', '\\ud0c0', GC_LV), ('\\ud0c1', '\\ud0db', GC_LVT), ('\\ud0dc', '\\ud0dc', GC_LV),\n+        ('\\ud0dd', '\\ud0f7', GC_LVT), ('\\ud0f8', '\\ud0f8', GC_LV), ('\\ud0f9', '\\ud113', GC_LVT),\n+        ('\\ud114', '\\ud114', GC_LV), ('\\ud115', '\\ud12f', GC_LVT), ('\\ud130', '\\ud130', GC_LV),\n+        ('\\ud131', '\\ud14b', GC_LVT), ('\\ud14c', '\\ud14c', GC_LV), ('\\ud14d', '\\ud167', GC_LVT),\n+        ('\\ud168', '\\ud168', GC_LV), ('\\ud169', '\\ud183', GC_LVT), ('\\ud184', '\\ud184', GC_LV),\n+        ('\\ud185', '\\ud19f', GC_LVT), ('\\ud1a0', '\\ud1a0', GC_LV), ('\\ud1a1', '\\ud1bb', GC_LVT),\n+        ('\\ud1bc', '\\ud1bc', GC_LV), ('\\ud1bd', '\\ud1d7', GC_LVT), ('\\ud1d8', '\\ud1d8', GC_LV),\n+        ('\\ud1d9', '\\ud1f3', GC_LVT), ('\\ud1f4', '\\ud1f4', GC_LV), ('\\ud1f5', '\\ud20f', GC_LVT),\n+        ('\\ud210', '\\ud210', GC_LV), ('\\ud211', '\\ud22b', GC_LVT), ('\\ud22c', '\\ud22c', GC_LV),\n+        ('\\ud22d', '\\ud247', GC_LVT), ('\\ud248', '\\ud248', GC_LV), ('\\ud249', '\\ud263', GC_LVT),\n+        ('\\ud264', '\\ud264', GC_LV), ('\\ud265', '\\ud27f', GC_LVT), ('\\ud280', '\\ud280', GC_LV),\n+        ('\\ud281', '\\ud29b', GC_LVT), ('\\ud29c', '\\ud29c', GC_LV), ('\\ud29d', '\\ud2b7', GC_LVT),\n+        ('\\ud2b8', '\\ud2b8', GC_LV), ('\\ud2b9', '\\ud2d3', GC_LVT), ('\\ud2d4', '\\ud2d4', GC_LV),\n+        ('\\ud2d5', '\\ud2ef', GC_LVT), ('\\ud2f0', '\\ud2f0', GC_LV), ('\\ud2f1', '\\ud30b', GC_LVT),\n+        ('\\ud30c', '\\ud30c', GC_LV), ('\\ud30d', '\\ud327', GC_LVT), ('\\ud328', '\\ud328', GC_LV),\n+        ('\\ud329', '\\ud343', GC_LVT), ('\\ud344', '\\ud344', GC_LV), ('\\ud345', '\\ud35f', GC_LVT),\n+        ('\\ud360', '\\ud360', GC_LV), ('\\ud361', '\\ud37b', GC_LVT), ('\\ud37c', '\\ud37c', GC_LV),\n+        ('\\ud37d', '\\ud397', GC_LVT), ('\\ud398', '\\ud398', GC_LV), ('\\ud399', '\\ud3b3', GC_LVT),\n+        ('\\ud3b4', '\\ud3b4', GC_LV), ('\\ud3b5', '\\ud3cf', GC_LVT), ('\\ud3d0', '\\ud3d0', GC_LV),\n+        ('\\ud3d1', '\\ud3eb', GC_LVT), ('\\ud3ec', '\\ud3ec', GC_LV), ('\\ud3ed', '\\ud407', GC_LVT),\n+        ('\\ud408', '\\ud408', GC_LV), ('\\ud409', '\\ud423', GC_LVT), ('\\ud424', '\\ud424', GC_LV),\n+        ('\\ud425', '\\ud43f', GC_LVT), ('\\ud440', '\\ud440', GC_LV), ('\\ud441', '\\ud45b', GC_LVT),\n+        ('\\ud45c', '\\ud45c', GC_LV), ('\\ud45d', '\\ud477', GC_LVT), ('\\ud478', '\\ud478', GC_LV),\n+        ('\\ud479', '\\ud493', GC_LVT), ('\\ud494', '\\ud494', GC_LV), ('\\ud495', '\\ud4af', GC_LVT),\n+        ('\\ud4b0', '\\ud4b0', GC_LV), ('\\ud4b1', '\\ud4cb', GC_LVT), ('\\ud4cc', '\\ud4cc', GC_LV),\n+        ('\\ud4cd', '\\ud4e7', GC_LVT), ('\\ud4e8', '\\ud4e8', GC_LV), ('\\ud4e9', '\\ud503', GC_LVT),\n+        ('\\ud504', '\\ud504', GC_LV), ('\\ud505', '\\ud51f', GC_LVT), ('\\ud520', '\\ud520', GC_LV),\n+        ('\\ud521', '\\ud53b', GC_LVT), ('\\ud53c', '\\ud53c', GC_LV), ('\\ud53d', '\\ud557', GC_LVT),\n+        ('\\ud558', '\\ud558', GC_LV), ('\\ud559', '\\ud573', GC_LVT), ('\\ud574', '\\ud574', GC_LV),\n+        ('\\ud575', '\\ud58f', GC_LVT), ('\\ud590', '\\ud590', GC_LV), ('\\ud591', '\\ud5ab', GC_LVT),\n+        ('\\ud5ac', '\\ud5ac', GC_LV), ('\\ud5ad', '\\ud5c7', GC_LVT), ('\\ud5c8', '\\ud5c8', GC_LV),\n+        ('\\ud5c9', '\\ud5e3', GC_LVT), ('\\ud5e4', '\\ud5e4', GC_LV), ('\\ud5e5', '\\ud5ff', GC_LVT),\n+        ('\\ud600', '\\ud600', GC_LV), ('\\ud601', '\\ud61b', GC_LVT), ('\\ud61c', '\\ud61c', GC_LV),\n+        ('\\ud61d', '\\ud637', GC_LVT), ('\\ud638', '\\ud638', GC_LV), ('\\ud639', '\\ud653', GC_LVT),\n+        ('\\ud654', '\\ud654', GC_LV), ('\\ud655', '\\ud66f', GC_LVT), ('\\ud670', '\\ud670', GC_LV),\n+        ('\\ud671', '\\ud68b', GC_LVT), ('\\ud68c', '\\ud68c', GC_LV), ('\\ud68d', '\\ud6a7', GC_LVT),\n+        ('\\ud6a8', '\\ud6a8', GC_LV), ('\\ud6a9', '\\ud6c3', GC_LVT), ('\\ud6c4', '\\ud6c4', GC_LV),\n+        ('\\ud6c5', '\\ud6df', GC_LVT), ('\\ud6e0', '\\ud6e0', GC_LV), ('\\ud6e1', '\\ud6fb', GC_LVT),\n+        ('\\ud6fc', '\\ud6fc', GC_LV), ('\\ud6fd', '\\ud717', GC_LVT), ('\\ud718', '\\ud718', GC_LV),\n+        ('\\ud719', '\\ud733', GC_LVT), ('\\ud734', '\\ud734', GC_LV), ('\\ud735', '\\ud74f', GC_LVT),\n+        ('\\ud750', '\\ud750', GC_LV), ('\\ud751', '\\ud76b', GC_LVT), ('\\ud76c', '\\ud76c', GC_LV),\n+        ('\\ud76d', '\\ud787', GC_LVT), ('\\ud788', '\\ud788', GC_LV), ('\\ud789', '\\ud7a3', GC_LVT),\n+        ('\\ud7b0', '\\ud7c6', GC_V), ('\\ud7cb', '\\ud7fb', GC_T), ('\\ufb1e', '\\ufb1e', GC_Extend),\n+        ('\\ufe00', '\\ufe0f', GC_Extend), ('\\ufe20', '\\ufe2d', GC_Extend), ('\\ufeff', '\\ufeff',\n+        GC_Control), ('\\uff9e', '\\uff9f', GC_Extend), ('\\ufff0', '\\ufffb', GC_Control),\n+        ('\\U000101fd', '\\U000101fd', GC_Extend), ('\\U000102e0', '\\U000102e0', GC_Extend),\n+        ('\\U00010376', '\\U0001037a', GC_Extend), ('\\U00010a01', '\\U00010a03', GC_Extend),\n+        ('\\U00010a05', '\\U00010a06', GC_Extend), ('\\U00010a0c', '\\U00010a0f', GC_Extend),\n+        ('\\U00010a38', '\\U00010a3a', GC_Extend), ('\\U00010a3f', '\\U00010a3f', GC_Extend),\n+        ('\\U00010ae5', '\\U00010ae6', GC_Extend), ('\\U00011000', '\\U00011000', GC_SpacingMark),\n+        ('\\U00011001', '\\U00011001', GC_Extend), ('\\U00011002', '\\U00011002', GC_SpacingMark),\n+        ('\\U00011038', '\\U00011046', GC_Extend), ('\\U0001107f', '\\U00011081', GC_Extend),\n+        ('\\U00011082', '\\U00011082', GC_SpacingMark), ('\\U000110b0', '\\U000110b2', GC_SpacingMark),\n+        ('\\U000110b3', '\\U000110b6', GC_Extend), ('\\U000110b7', '\\U000110b8', GC_SpacingMark),\n+        ('\\U000110b9', '\\U000110ba', GC_Extend), ('\\U000110bd', '\\U000110bd', GC_Control),\n+        ('\\U00011100', '\\U00011102', GC_Extend), ('\\U00011127', '\\U0001112b', GC_Extend),\n+        ('\\U0001112c', '\\U0001112c', GC_SpacingMark), ('\\U0001112d', '\\U00011134', GC_Extend),\n+        ('\\U00011173', '\\U00011173', GC_Extend), ('\\U00011180', '\\U00011181', GC_Extend),\n+        ('\\U00011182', '\\U00011182', GC_SpacingMark), ('\\U000111b3', '\\U000111b5', GC_SpacingMark),\n+        ('\\U000111b6', '\\U000111be', GC_Extend), ('\\U000111bf', '\\U000111c0', GC_SpacingMark),\n+        ('\\U0001122c', '\\U0001122e', GC_SpacingMark), ('\\U0001122f', '\\U00011231', GC_Extend),\n+        ('\\U00011232', '\\U00011233', GC_SpacingMark), ('\\U00011234', '\\U00011234', GC_Extend),\n+        ('\\U00011235', '\\U00011235', GC_SpacingMark), ('\\U00011236', '\\U00011237', GC_Extend),\n+        ('\\U000112df', '\\U000112df', GC_Extend), ('\\U000112e0', '\\U000112e2', GC_SpacingMark),\n+        ('\\U000112e3', '\\U000112ea', GC_Extend), ('\\U00011301', '\\U00011301', GC_Extend),\n+        ('\\U00011302', '\\U00011303', GC_SpacingMark), ('\\U0001133c', '\\U0001133c', GC_Extend),\n+        ('\\U0001133e', '\\U0001133e', GC_Extend), ('\\U0001133f', '\\U0001133f', GC_SpacingMark),\n+        ('\\U00011340', '\\U00011340', GC_Extend), ('\\U00011341', '\\U00011344', GC_SpacingMark),\n+        ('\\U00011347', '\\U00011348', GC_SpacingMark), ('\\U0001134b', '\\U0001134d', GC_SpacingMark),\n+        ('\\U00011357', '\\U00011357', GC_Extend), ('\\U00011362', '\\U00011363', GC_SpacingMark),\n+        ('\\U00011366', '\\U0001136c', GC_Extend), ('\\U00011370', '\\U00011374', GC_Extend),\n+        ('\\U000114b0', '\\U000114b0', GC_Extend), ('\\U000114b1', '\\U000114b2', GC_SpacingMark),\n+        ('\\U000114b3', '\\U000114b8', GC_Extend), ('\\U000114b9', '\\U000114b9', GC_SpacingMark),\n+        ('\\U000114ba', '\\U000114ba', GC_Extend), ('\\U000114bb', '\\U000114bc', GC_SpacingMark),\n+        ('\\U000114bd', '\\U000114bd', GC_Extend), ('\\U000114be', '\\U000114be', GC_SpacingMark),\n+        ('\\U000114bf', '\\U000114c0', GC_Extend), ('\\U000114c1', '\\U000114c1', GC_SpacingMark),\n+        ('\\U000114c2', '\\U000114c3', GC_Extend), ('\\U000115af', '\\U000115af', GC_Extend),\n+        ('\\U000115b0', '\\U000115b1', GC_SpacingMark), ('\\U000115b2', '\\U000115b5', GC_Extend),\n+        ('\\U000115b8', '\\U000115bb', GC_SpacingMark), ('\\U000115bc', '\\U000115bd', GC_Extend),\n+        ('\\U000115be', '\\U000115be', GC_SpacingMark), ('\\U000115bf', '\\U000115c0', GC_Extend),\n+        ('\\U00011630', '\\U00011632', GC_SpacingMark), ('\\U00011633', '\\U0001163a', GC_Extend),\n+        ('\\U0001163b', '\\U0001163c', GC_SpacingMark), ('\\U0001163d', '\\U0001163d', GC_Extend),\n+        ('\\U0001163e', '\\U0001163e', GC_SpacingMark), ('\\U0001163f', '\\U00011640', GC_Extend),\n+        ('\\U000116ab', '\\U000116ab', GC_Extend), ('\\U000116ac', '\\U000116ac', GC_SpacingMark),\n+        ('\\U000116ad', '\\U000116ad', GC_Extend), ('\\U000116ae', '\\U000116af', GC_SpacingMark),\n+        ('\\U000116b0', '\\U000116b5', GC_Extend), ('\\U000116b6', '\\U000116b6', GC_SpacingMark),\n+        ('\\U000116b7', '\\U000116b7', GC_Extend), ('\\U00016af0', '\\U00016af4', GC_Extend),\n+        ('\\U00016b30', '\\U00016b36', GC_Extend), ('\\U00016f51', '\\U00016f7e', GC_SpacingMark),\n+        ('\\U00016f8f', '\\U00016f92', GC_Extend), ('\\U0001bc9d', '\\U0001bc9e', GC_Extend),\n+        ('\\U0001bca0', '\\U0001bca3', GC_Control), ('\\U0001d165', '\\U0001d165', GC_Extend),\n+        ('\\U0001d166', '\\U0001d166', GC_SpacingMark), ('\\U0001d167', '\\U0001d169', GC_Extend),\n+        ('\\U0001d16d', '\\U0001d16d', GC_SpacingMark), ('\\U0001d16e', '\\U0001d172', GC_Extend),\n+        ('\\U0001d173', '\\U0001d17a', GC_Control), ('\\U0001d17b', '\\U0001d182', GC_Extend),\n+        ('\\U0001d185', '\\U0001d18b', GC_Extend), ('\\U0001d1aa', '\\U0001d1ad', GC_Extend),\n+        ('\\U0001d242', '\\U0001d244', GC_Extend), ('\\U0001e8d0', '\\U0001e8d6', GC_Extend),\n+        ('\\U0001f1e6', '\\U0001f1ff', GC_RegionalIndicator), ('\\U000e0000', '\\U000e00ff',\n+        GC_Control), ('\\U000e0100', '\\U000e01ef', GC_Extend), ('\\U000e01f0', '\\U000e0fff',\n+        GC_Control)\n+    ];\n+\n+}"}, {"sha": "263cf5a730a57328aa3197052ec0a622ccbc094b", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 299, "deletions": 2, "changes": 301, "blob_url": "https://github.com/rust-lang/rust/blob/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf432b8f8f0d8822e654c1a40bf632f12fc97fbc/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=cf432b8f8f0d8822e654c1a40bf632f12fc97fbc", "patch": "@@ -15,19 +15,52 @@\n  * methods provided by the UnicodeChar trait.\n  */\n \n+use core::clone::Clone;\n+use core::cmp;\n use core::collections::Collection;\n-use core::iter::{Filter, AdditiveIterator};\n+use core::iter::{Filter, AdditiveIterator, Iterator, DoubleEndedIterator};\n+use core::option::{Option, None, Some};\n use core::str::{CharSplits, StrSlice};\n-use core::iter::Iterator;\n use u_char;\n use u_char::UnicodeChar;\n+use tables::grapheme::GraphemeCat;\n \n /// An iterator over the words of a string, separated by a sequence of whitespace\n pub type Words<'a> =\n     Filter<'a, &'a str, CharSplits<'a, extern \"Rust\" fn(char) -> bool>>;\n \n /// Methods for Unicode string slices\n pub trait UnicodeStrSlice<'a> {\n+    /// Returns an iterator over the\n+    /// [grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)\n+    /// of the string.\n+    ///\n+    /// If `is_extended` is true, the iterator is over the *extended grapheme clusters*;\n+    /// otherwise, the iterator is over the *legacy grapheme clusters*.\n+    /// [UAX#29](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)\n+    /// recommends extended grapheme cluster boundaries for general processing.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let gr1 = \"a\\u0310e\\u0301o\\u0308\\u0332\".graphemes(true).collect::<Vec<&str>>();\n+    /// assert_eq!(gr1.as_slice(), &[\"a\\u0310\", \"e\\u0301\", \"o\\u0308\\u0332\"]);\n+    /// let gr2 = \"a\\r\\nb\ud83c\uddf7\ud83c\uddfa\ud83c\uddf8\ud83c\uddf9\".graphemes(true).collect::<Vec<&str>>();\n+    /// assert_eq!(gr2.as_slice(), &[\"a\", \"\\r\\n\", \"b\", \"\ud83c\uddf7\ud83c\uddfa\ud83c\uddf8\ud83c\uddf9\"]);\n+    /// ```\n+    fn graphemes(&self, is_extended: bool) -> Graphemes<'a>;\n+\n+    /// Returns an iterator over the grapheme clusters of self and their byte offsets.\n+    /// See `graphemes()` method for more information.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let gr_inds = \"a\u0310e\u0301o\u0308\u0332\\r\\n\".grapheme_indices(true).collect::<Vec<(uint, &str)>>();\n+    /// assert_eq!(gr_inds.as_slice(), &[(0u, \"a\u0310\"), (3, \"e\u0301\"), (6, \"o\u0308\u0332\"), (11, \"\\r\\n\")]);\n+    /// ```\n+    fn grapheme_indices(&self, is_extended: bool) -> GraphemeIndices<'a>;\n+\n     /// An iterator over the words of a string (subsequences separated\n     /// by any sequence of whitespace). Sequences of whitespace are\n     /// collapsed, so empty \"words\" are not included.\n@@ -92,6 +125,16 @@ pub trait UnicodeStrSlice<'a> {\n }\n \n impl<'a> UnicodeStrSlice<'a> for &'a str {\n+    #[inline]\n+    fn graphemes(&self, is_extended: bool) -> Graphemes<'a> {\n+        Graphemes { string: *self, extended: is_extended, cat: None, catb: None }\n+    }\n+\n+    #[inline]\n+    fn grapheme_indices(&self, is_extended: bool) -> GraphemeIndices<'a> {\n+        GraphemeIndices { start_offset: self.as_ptr() as uint, iter: self.graphemes(is_extended) }\n+    }\n+\n     #[inline]\n     fn words(&self) -> Words<'a> {\n         self.split(u_char::is_whitespace).filter(|s| !s.is_empty())\n@@ -123,3 +166,257 @@ impl<'a> UnicodeStrSlice<'a> for &'a str {\n         self.trim_right_chars(u_char::is_whitespace)\n     }\n }\n+\n+/// External iterator for grapheme clusters and byte offsets.\n+#[deriving(Clone)]\n+pub struct GraphemeIndices<'a> {\n+    start_offset: uint,\n+    iter: Graphemes<'a>,\n+}\n+\n+impl<'a> Iterator<(uint, &'a str)> for GraphemeIndices<'a> {\n+    #[inline]\n+    fn next(&mut self) -> Option<(uint, &'a str)> {\n+        self.iter.next().map(|s| (s.as_ptr() as uint - self.start_offset, s))\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+impl<'a> DoubleEndedIterator<(uint, &'a str)> for GraphemeIndices<'a> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<(uint, &'a str)> {\n+        self.iter.next_back().map(|s| (s.as_ptr() as uint - self.start_offset, s))\n+    }\n+}\n+\n+/// External iterator for a string's\n+/// [grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries).\n+#[deriving(Clone)]\n+pub struct Graphemes<'a> {\n+    string: &'a str,\n+    extended: bool,\n+    cat: Option<GraphemeCat>,\n+    catb: Option<GraphemeCat>,\n+}\n+\n+// state machine for cluster boundary rules\n+#[deriving(PartialEq,Eq)]\n+enum GraphemeState {\n+    Start,\n+    FindExtend,\n+    HangulL,\n+    HangulLV,\n+    HangulLVT,\n+    Regional,\n+}\n+\n+impl<'a> Iterator<&'a str> for Graphemes<'a> {\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let slen = self.string.len();\n+        (cmp::min(slen, 1u), Some(slen))\n+    }\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<&'a str> {\n+        use gr = tables::grapheme;\n+        if self.string.len() == 0 {\n+            return None;\n+        }\n+\n+        let mut take_curr = true;\n+        let mut idx = 0;\n+        let mut state = Start;\n+        let mut cat = gr::GC_Any;\n+        for (curr, ch) in self.string.char_indices() {\n+            idx = curr;\n+\n+            // retrieve cached category, if any\n+            // We do this because most of the time we would end up\n+            // looking up each character twice.\n+            cat = match self.cat {\n+                None => gr::grapheme_category(ch),\n+                _ => self.cat.take_unwrap()\n+            };\n+\n+            if match cat {\n+                gr::GC_Extend => true,\n+                gr::GC_SpacingMark if self.extended => true,\n+                _ => false\n+            } {\n+                    state = FindExtend;     // rule GB9/GB9a\n+                    continue;\n+            }\n+\n+            state = match state {\n+                Start if '\\r' == ch => {\n+                    let slen = self.string.len();\n+                    let nidx = idx + 1;\n+                    if nidx != slen && self.string.char_at(nidx) == '\\n' {\n+                        idx = nidx;             // rule GB3\n+                    }\n+                    break;                      // rule GB4\n+                }\n+                Start => match cat {\n+                    gr::GC_Control => break,\n+                    gr::GC_L => HangulL,\n+                    gr::GC_LV | gr::GC_V => HangulLV,\n+                    gr::GC_LVT | gr::GC_T => HangulLVT,\n+                    gr::GC_RegionalIndicator => Regional,\n+                    _ => FindExtend\n+                },\n+                FindExtend => {         // found non-extending when looking for extending\n+                    take_curr = false;\n+                    break;\n+                },\n+                HangulL => match cat {      // rule GB6: L x (L|V|LV|LVT)\n+                    gr::GC_L => continue,\n+                    gr::GC_LV | gr::GC_V => HangulLV,\n+                    gr::GC_LVT => HangulLVT,\n+                    _ => {\n+                        take_curr = false;\n+                        break;\n+                    }\n+                },\n+                HangulLV => match cat {     // rule GB7: (LV|V) x (V|T)\n+                    gr::GC_V => continue,\n+                    gr::GC_T => HangulLVT,\n+                    _ => {\n+                        take_curr = false;\n+                        break;\n+                    }\n+                },\n+                HangulLVT => match cat {    // rule GB8: (LVT|T) x T\n+                    gr::GC_T => continue,\n+                    _ => {\n+                        take_curr = false;\n+                        break;\n+                    }\n+                },\n+                Regional => match cat {     // rule GB8a\n+                    gr::GC_RegionalIndicator => continue,\n+                    _ => {\n+                        take_curr = false;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        self.cat = if take_curr {\n+            idx = self.string.char_range_at(idx).next;\n+            None\n+        } else {\n+            Some(cat)\n+        };\n+\n+        let retstr = self.string.slice_to(idx);\n+        self.string = self.string.slice_from(idx);\n+        Some(retstr)\n+    }\n+}\n+\n+impl<'a> DoubleEndedIterator<&'a str> for Graphemes<'a> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<&'a str> {\n+        use gr = tables::grapheme;\n+        if self.string.len() == 0 {\n+            return None;\n+        }\n+\n+        let mut take_curr = true;\n+        let mut idx = self.string.len();\n+        let mut previdx = idx;\n+        let mut state = Start;\n+        let mut cat = gr::GC_Any;\n+        for (curr, ch) in self.string.char_indices().rev() {\n+            previdx = idx;\n+            idx = curr;\n+\n+            // cached category, if any\n+            cat = match self.catb {\n+                None => gr::grapheme_category(ch),\n+                _ => self.catb.take_unwrap()\n+            };\n+\n+            // a matching state machine that runs *backwards* across an input string\n+            // note that this has some implications for the Hangul matching, since\n+            // we now need to know what the rightward letter is:\n+            //\n+            // Right to left, we have:\n+            //      L x L\n+            //      V x (L|V|LV)\n+            //      T x (V|T|LV|LVT)\n+            // HangulL means the letter to the right is L\n+            // HangulLV means the letter to the right is V\n+            // HangulLVT means the letter to the right is T\n+            state = match state {\n+                Start if '\\n' == ch => {\n+                    if idx > 0 && '\\r' == self.string.char_at_reverse(idx) {\n+                        idx -= 1;       // rule GB3\n+                    }\n+                    break;              // rule GB4\n+                },\n+                Start | FindExtend => match cat {\n+                    gr::GC_Extend => FindExtend,\n+                    gr::GC_SpacingMark if self.extended => FindExtend,\n+                    gr::GC_L | gr::GC_LV | gr::GC_LVT => HangulL,\n+                    gr::GC_V => HangulLV,\n+                    gr::GC_T => HangulLVT,\n+                    gr::GC_RegionalIndicator => Regional,\n+                    gr::GC_Control => {\n+                        take_curr = Start == state;\n+                        break;\n+                    },\n+                    _ => break\n+                },\n+                HangulL => match cat {      // char to right is an L\n+                    gr::GC_L => continue,               // L x L is the only legal match\n+                    _ => {\n+                        take_curr = false;\n+                        break;\n+                    }\n+                },\n+                HangulLV => match cat {     // char to right is a V\n+                    gr::GC_V => continue,               // V x V, right char is still V\n+                    gr::GC_L | gr::GC_LV => HangulL,    // (L|V) x V, right char is now L\n+                    _ => {\n+                        take_curr = false;\n+                        break;\n+                    }\n+                },\n+                HangulLVT => match cat {    // char to right is a T\n+                    gr::GC_T => continue,               // T x T, right char is still T\n+                    gr::GC_V => HangulLV,               // V x T, right char is now V\n+                    gr::GC_LV | gr::GC_LVT => HangulL,  // (LV|LVT) x T, right char is now L\n+                    _ => {\n+                        take_curr = false;\n+                        break;\n+                    }\n+                },\n+                Regional => match cat {     // rule GB8a\n+                    gr::GC_RegionalIndicator => continue,\n+                    _ => {\n+                        take_curr = false;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        self.catb = if take_curr {\n+            None\n+        } else  {\n+            idx = previdx;\n+            Some(cat)\n+        };\n+\n+        let retstr = self.string.slice_from(idx);\n+        self.string = self.string.slice_to(idx);\n+        Some(retstr)\n+    }\n+}"}]}