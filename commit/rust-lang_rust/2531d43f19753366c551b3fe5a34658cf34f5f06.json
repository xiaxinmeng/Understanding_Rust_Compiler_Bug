{"sha": "2531d43f19753366c551b3fe5a34658cf34f5f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MzFkNDNmMTk3NTMzNjZjNTUxYjNmZTVhMzQ2NThjZjM0ZjVmMDY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-30T18:15:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-30T18:15:25Z"}, "message": "Rollup merge of #53113 - kpp:more_docs_for_cow, r=GuillaumeGomez\n\nAdd example for Cow\n\nAdd one more example that shows how to keep `Cow` in a struct.\n\nLink to playground: https://play.rust-lang.org/?gist=a9256bdd034b44bc3cdd0044bbcdbb7c&version=stable&mode=debug&edition=2015\n\nUsers ask this question in [ruRust](https://gitter.im/ruRust/general) chat time to time and it is not obvious to add `ToOwned<Owned=Target>` to requirements of generic params.", "tree": {"sha": "14020a4225500577634fc1545326ed09738bc03e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14020a4225500577634fc1545326ed09738bc03e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2531d43f19753366c551b3fe5a34658cf34f5f06", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbiDQ9CRBK7hj4Ov3rIwAAdHIIADEyKbNIZjiLgBuf3xp1xN2A\n8fEE+1Lbnk8oASTzUOqrIIaQBZoERX2OSPN4wIcYhwK3nXU9nabsf+VXHSbCICu9\niuriBhAA3mcMYqx9LezhkRIh+9GwYC13zrRB4R80LOgIeW98MIGb5WLGV1/5i+Ly\nrmlG7bp9Y7yALi8VLz8Zvt2C0mgY5MIk/bmpOboKnvV9TNp3Yh0UarsoNMhU03N8\neZDujNCy3pd82A78/TB36xUMmRr5nr0To7iZpLUgnQpeXGKjuZH7eUTVhgv7bSHJ\nm7M/anJ6MEPHq88skLuWLyhDJp2PQpZhoGeO1tVEdM6DFd1eVdQTUvUmli8MqjI=\n=FAvs\n-----END PGP SIGNATURE-----\n", "payload": "tree 14020a4225500577634fc1545326ed09738bc03e\nparent b7e74a56140d4a89d0cf917788f16d8134d79eb4\nparent 5bfb7850782c440f27e0a5b64157aed9e04c5cc6\nauthor Pietro Albini <pietro@pietroalbini.org> 1535652925 +0200\ncommitter GitHub <noreply@github.com> 1535652925 +0200\n\nRollup merge of #53113 - kpp:more_docs_for_cow, r=GuillaumeGomez\n\nAdd example for Cow\n\nAdd one more example that shows how to keep `Cow` in a struct.\n\nLink to playground: https://play.rust-lang.org/?gist=a9256bdd034b44bc3cdd0044bbcdbb7c&version=stable&mode=debug&edition=2015\n\nUsers ask this question in [ruRust](https://gitter.im/ruRust/general) chat time to time and it is not obvious to add `ToOwned<Owned=Target>` to requirements of generic params.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2531d43f19753366c551b3fe5a34658cf34f5f06", "html_url": "https://github.com/rust-lang/rust/commit/2531d43f19753366c551b3fe5a34658cf34f5f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2531d43f19753366c551b3fe5a34658cf34f5f06/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e74a56140d4a89d0cf917788f16d8134d79eb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e74a56140d4a89d0cf917788f16d8134d79eb4", "html_url": "https://github.com/rust-lang/rust/commit/b7e74a56140d4a89d0cf917788f16d8134d79eb4"}, {"sha": "5bfb7850782c440f27e0a5b64157aed9e04c5cc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfb7850782c440f27e0a5b64157aed9e04c5cc6", "html_url": "https://github.com/rust-lang/rust/commit/5bfb7850782c440f27e0a5b64157aed9e04c5cc6"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "5ae5339138fbed3ef3bbc1049ca1d686f094f924", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2531d43f19753366c551b3fe5a34658cf34f5f06/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2531d43f19753366c551b3fe5a34658cf34f5f06/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=2531d43f19753366c551b3fe5a34658cf34f5f06", "patch": "@@ -141,6 +141,41 @@ impl<T> ToOwned for T\n /// let mut input = Cow::from(vec![-1, 0, 1]);\n /// abs_all(&mut input);\n /// ```\n+///\n+/// Another example showing how to keep `Cow` in a struct:\n+///\n+/// ```\n+/// use std::borrow::{Cow, ToOwned};\n+///\n+/// struct Items<'a, X: 'a> where [X]: ToOwned<Owned=Vec<X>> {\n+///     values: Cow<'a, [X]>,\n+/// }\n+///\n+/// impl<'a, X: Clone + 'a> Items<'a, X> where [X]: ToOwned<Owned=Vec<X>> {\n+///     fn new(v: Cow<'a, [X]>) -> Self {\n+///         Items { values: v }\n+///     }\n+/// }\n+///\n+/// // Creates a container from borrowed values of a slice\n+/// let readonly = [1, 2];\n+/// let borrowed = Items::new((&readonly[..]).into());\n+/// match borrowed {\n+///     Items { values: Cow::Borrowed(b) } => println!(\"borrowed {:?}\", b),\n+///     _ => panic!(\"expect borrowed value\"),\n+/// }\n+///\n+/// let mut clone_on_write = borrowed;\n+/// // Mutates the data from slice into owned vec and pushes a new value on top\n+/// clone_on_write.values.to_mut().push(3);\n+/// println!(\"clone_on_write = {:?}\", clone_on_write.values);\n+///\n+/// // The data was mutated. Let check it out.\n+/// match clone_on_write {\n+///     Items { values: Cow::Owned(_) } => println!(\"clone_on_write contains owned data\"),\n+///     _ => panic!(\"expect owned data\"),\n+/// }\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Cow<'a, B: ?Sized + 'a>\n     where B: ToOwned"}]}