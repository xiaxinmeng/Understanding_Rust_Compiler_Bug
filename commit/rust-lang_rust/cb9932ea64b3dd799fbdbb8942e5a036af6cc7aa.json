{"sha": "cb9932ea64b3dd799fbdbb8942e5a036af6cc7aa", "node_id": "C_kwDOAAsO6NoAKGNiOTkzMmVhNjRiM2RkNzk5ZmJkYmI4OTQyZTVhMDM2YWY2Y2M3YWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-03T08:15:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-03T08:15:50Z"}, "message": "Rollup merge of #99614 - RalfJung:transmute-is-not-memcpy, r=thomcc\n\ndo not claim that transmute is like memcpy\n\nSaying transmute is like memcpy is not a well-formed statement, since memcpy is by-ref whereas transmute is by-val. The by-val nature of transmute inherently means that padding is lost along the way. (This is not specific to transmute, this is how all by-value operations work.) So adjust the docs to clarify this aspect.\n\nCc `@workingjubilee`", "tree": {"sha": "d0378b20027ed606543dd49d5393e1e1c65c18d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0378b20027ed606543dd49d5393e1e1c65c18d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb9932ea64b3dd799fbdbb8942e5a036af6cc7aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6i62CRBK7hj4Ov3rIwAAMA4IAG4zi9utt19yHYnVrNcCkrn8\nol3qnG99mNCav9QYHN+PbI/QSeYEfXRf56JwLgN5bdYT3Le/MXxvIzj3FfWmzqtr\ndfkKEnYg564XoFjlaqlOiKq8dYRqzI9OmGvZgZw/APbM2UVL90dSSNCj3BND16ev\ns5PcwapEAruyE2LiiNHxzdGtovOzod6CKaKL4ddo/T7cn8G+1rZw7Xrgr8BLVHq7\n2R+6l3BmvJQHEfafAIJt2wezwfIoNZWGgRoCfRasonPu+jSqLbfvlisAoT1Ms1AC\nFbO26+TdNmu0dqFs+CO6OLq1qJptGYV1d8sgJgKlu4/3OhTPio90vKuJOunr/tk=\n=+3ed\n-----END PGP SIGNATURE-----\n", "payload": "tree d0378b20027ed606543dd49d5393e1e1c65c18d6\nparent 5730f12b37f16637a6614d086ac534a9a88bfc55\nparent da3e11fc4298e6e832eba0575b77a21493a7adfe\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659514550 +0530\ncommitter GitHub <noreply@github.com> 1659514550 +0530\n\nRollup merge of #99614 - RalfJung:transmute-is-not-memcpy, r=thomcc\n\ndo not claim that transmute is like memcpy\n\nSaying transmute is like memcpy is not a well-formed statement, since memcpy is by-ref whereas transmute is by-val. The by-val nature of transmute inherently means that padding is lost along the way. (This is not specific to transmute, this is how all by-value operations work.) So adjust the docs to clarify this aspect.\n\nCc `@workingjubilee`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9932ea64b3dd799fbdbb8942e5a036af6cc7aa", "html_url": "https://github.com/rust-lang/rust/commit/cb9932ea64b3dd799fbdbb8942e5a036af6cc7aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb9932ea64b3dd799fbdbb8942e5a036af6cc7aa/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5730f12b37f16637a6614d086ac534a9a88bfc55", "url": "https://api.github.com/repos/rust-lang/rust/commits/5730f12b37f16637a6614d086ac534a9a88bfc55", "html_url": "https://github.com/rust-lang/rust/commit/5730f12b37f16637a6614d086ac534a9a88bfc55"}, {"sha": "da3e11fc4298e6e832eba0575b77a21493a7adfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/da3e11fc4298e6e832eba0575b77a21493a7adfe", "html_url": "https://github.com/rust-lang/rust/commit/da3e11fc4298e6e832eba0575b77a21493a7adfe"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "cabc5017f1de0ef59528e081a61d309fa8db2eb2", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cb9932ea64b3dd799fbdbb8942e5a036af6cc7aa/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9932ea64b3dd799fbdbb8942e5a036af6cc7aa/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=cb9932ea64b3dd799fbdbb8942e5a036af6cc7aa", "patch": "@@ -1207,29 +1207,34 @@ extern \"rust-intrinsic\" {\n \n     /// Reinterprets the bits of a value of one type as another type.\n     ///\n-    /// Both types must have the same size. Neither the original, nor the result,\n-    /// may be an [invalid value](../../nomicon/what-unsafe-does.html).\n+    /// Both types must have the same size. Compilation will fail if this is not guaranteed.\n     ///\n     /// `transmute` is semantically equivalent to a bitwise move of one type\n     /// into another. It copies the bits from the source value into the\n-    /// destination value, then forgets the original. It's equivalent to C's\n-    /// `memcpy` under the hood, just like `transmute_copy`.\n+    /// destination value, then forgets the original. Note that source and destination\n+    /// are passed by-value, which means if `T` or `U` contain padding, that padding\n+    /// is *not* guaranteed to be preserved by `transmute`.\n+    ///\n+    /// Both the argument and the result must be [valid](../../nomicon/what-unsafe-does.html) at\n+    /// their given type. Violating this condition leads to [undefined behavior][ub]. The compiler\n+    /// will generate code *assuming that you, the programmer, ensure that there will never be\n+    /// undefined behavior*. It is therefore your responsibility to guarantee that every value\n+    /// passed to `transmute` is valid at both types `T` and `U`. Failing to uphold this condition\n+    /// may lead to unexpected and unstable compilation results. This makes `transmute` **incredibly\n+    /// unsafe**. `transmute` should be the absolute last resort.\n+    ///\n+    /// Transmuting pointers to integers in a `const` context is [undefined behavior][ub].\n+    /// Any attempt to use the resulting value for integer operations will abort const-evaluation.\n+    /// (And even outside `const`, such transmutation is touching on many unspecified aspects of the\n+    /// Rust memory model and should be avoided. See below for alternatives.)\n     ///\n     /// Because `transmute` is a by-value operation, alignment of the *transmuted values\n     /// themselves* is not a concern. As with any other function, the compiler already ensures\n     /// both `T` and `U` are properly aligned. However, when transmuting values that *point\n     /// elsewhere* (such as pointers, references, boxes\u2026), the caller has to ensure proper\n     /// alignment of the pointed-to values.\n     ///\n-    /// `transmute` is **incredibly** unsafe. There are a vast number of ways to\n-    /// cause [undefined behavior][ub] with this function. `transmute` should be\n-    /// the absolute last resort.\n-    ///\n-    /// Transmuting pointers to integers in a `const` context is [undefined behavior][ub].\n-    /// Any attempt to use the resulting value for integer operations will abort const-evaluation.\n-    ///\n-    /// The [nomicon](../../nomicon/transmutes.html) has additional\n-    /// documentation.\n+    /// The [nomicon](../../nomicon/transmutes.html) has additional documentation.\n     ///\n     /// [ub]: ../../reference/behavior-considered-undefined.html\n     ///"}]}