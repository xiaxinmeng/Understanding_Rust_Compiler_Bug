{"sha": "dafd813c16231834d3bce7875a8c616d1e49a8c1", "node_id": "C_kwDOAAsO6NoAKGRhZmQ4MTNjMTYyMzE4MzRkM2JjZTc4NzVhOGM2MTZkMWU0OWE4YzE", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-22T21:18:22Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-06-06T18:15:57Z"}, "message": "Move transmute into a separate function", "tree": {"sha": "44c0d35aa99deceaadb624fd688ee26ae9f60068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44c0d35aa99deceaadb624fd688ee26ae9f60068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dafd813c16231834d3bce7875a8c616d1e49a8c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmKeRF0ACgkQGBtJ+fOP\nM3T3OQv8CdmwDZ5CQnidBop34anYYhuXlIoSOvAFfvXgPqe5vNLgnmAIW4EJeUG6\nUDS8T3cnZPmlnbdUGgjpepV0E62vgJ4fslM6MqeClgW7CB36ijBjw9bUYygUUEoK\nkrP0cPCnoC87aDUgpypcWJMDYxdBr939MSeIm+r99hzNy7eCq1cFG/VI2jLV5GL5\nzgGIia0hHlWbz+K3OhVPTWmG9TxRU99R1w6pL+DJ+mYzGnMXOjgIwXTtL8uhDNQp\n5Yklu6iiMrvbJcH36Pfesc7unkALdKZi0jYX7VNGTl6QJU7RcD4u3r6VR2bL06jj\nEc6cmJI+sJ01gt5TZBbPZxzxp2CJGp3eVhT7EsUG/seyNMkDyDeUUmgZ+VaBaMAw\nK89FgZSVBRrQbX9o/mAGO1QNf0OgAk3O+biGeOh2WwWuaExz7+9x0n5WdRkV/b9g\nzxoEOt2AxIyjH9fMHbOpFNEsduIcjhhVXqvU1VJxV/8fr9yDikPcF6pNKVTln9Sr\n3sI2cpRR\n=5DFn\n-----END PGP SIGNATURE-----", "payload": "tree 44c0d35aa99deceaadb624fd688ee26ae9f60068\nparent 6d27f188c21f98ff9d8f2f252becb18df27d6c4a\nauthor Andy Wang <cbeuw.andy@gmail.com> 1653254302 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1654539357 +0100\n\nMove transmute into a separate function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dafd813c16231834d3bce7875a8c616d1e49a8c1", "html_url": "https://github.com/rust-lang/rust/commit/dafd813c16231834d3bce7875a8c616d1e49a8c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dafd813c16231834d3bce7875a8c616d1e49a8c1/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d27f188c21f98ff9d8f2f252becb18df27d6c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d27f188c21f98ff9d8f2f252becb18df27d6c4a", "html_url": "https://github.com/rust-lang/rust/commit/6d27f188c21f98ff9d8f2f252becb18df27d6c4a"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "6f91e147fa8340f32de1ecca2214c7d75c2734c0", "filename": "tests/compile-fail/weak_memory/imperfectly_overlapping.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dafd813c16231834d3bce7875a8c616d1e49a8c1/tests%2Fcompile-fail%2Fweak_memory%2Fimperfectly_overlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dafd813c16231834d3bce7875a8c616d1e49a8c1/tests%2Fcompile-fail%2Fweak_memory%2Fimperfectly_overlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fweak_memory%2Fimperfectly_overlapping.rs?ref=dafd813c16231834d3bce7875a8c616d1e49a8c1", "patch": "@@ -6,21 +6,26 @@ use std::intrinsics::atomic_load;\n use std::sync::atomic::Ordering::*;\n use std::sync::atomic::{AtomicU16, AtomicU32};\n \n+fn split_u32(dword: &mut u32) -> &mut [u16; 2] {\n+    unsafe { std::mem::transmute::<&mut u32, &mut [u16; 2]>(dword) }\n+}\n+\n fn test_same_thread() {\n-    let mut qword = AtomicU32::new(42);\n-    assert_eq!(qword.load(Relaxed), 42);\n-    qword.store(0xabbafafa, Relaxed);\n+    let mut dword = AtomicU32::new(42);\n+    assert_eq!(dword.load(Relaxed), 42);\n+    dword.store(0xabbafafa, Relaxed);\n \n-    let qword_mut = qword.get_mut();\n+    let dword_mut = dword.get_mut();\n \n-    let dwords_mut = unsafe { std::mem::transmute::<&mut u32, &mut [u16; 2]>(qword_mut) };\n+    let words_mut = split_u32(dword_mut);\n \n-    let (hi_mut, lo_mut) = dwords_mut.split_at_mut(1);\n+    let (hi_mut, lo_mut) = words_mut.split_at_mut(1);\n \n     let (hi, _) = (AtomicU16::from_mut(&mut hi_mut[0]), AtomicU16::from_mut(&mut lo_mut[0]));\n \n     unsafe {\n-        //Equivalent to: hi.load(Ordering::SeqCst)\n+        // Equivalent to: hi.load(Ordering::SeqCst)\n+        // We need to use intrisics to for precise error location\n         atomic_load(hi.get_mut() as *mut u16); //~ ERROR: mixed-size access on an existing atomic object\n     }\n }"}]}