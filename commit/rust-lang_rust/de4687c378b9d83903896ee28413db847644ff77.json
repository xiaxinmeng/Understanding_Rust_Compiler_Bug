{"sha": "de4687c378b9d83903896ee28413db847644ff77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNDY4N2MzNzhiOWQ4MzkwMzg5NmVlMjg0MTNkYjg0NzY0NGZmNzc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-10T22:04:42Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-10T22:04:42Z"}, "message": "Copyedit sections 9-11 of the borrowed pointer tutorial (last edits from me)", "tree": {"sha": "a41acc0ca3fe9576ef43f84179d2b0bda848a8fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a41acc0ca3fe9576ef43f84179d2b0bda848a8fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de4687c378b9d83903896ee28413db847644ff77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de4687c378b9d83903896ee28413db847644ff77", "html_url": "https://github.com/rust-lang/rust/commit/de4687c378b9d83903896ee28413db847644ff77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de4687c378b9d83903896ee28413db847644ff77/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "448c349234111d2fbe057898fb6435fd8466ffdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/448c349234111d2fbe057898fb6435fd8466ffdc", "html_url": "https://github.com/rust-lang/rust/commit/448c349234111d2fbe057898fb6435fd8466ffdc"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "921418fa1bda7fc1a452d0a43beb7d8e55cae500", "filename": "doc/tutorial-borrowed-ptr.md", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/de4687c378b9d83903896ee28413db847644ff77/doc%2Ftutorial-borrowed-ptr.md", "raw_url": "https://github.com/rust-lang/rust/raw/de4687c378b9d83903896ee28413db847644ff77/doc%2Ftutorial-borrowed-ptr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-borrowed-ptr.md?ref=de4687c378b9d83903896ee28413db847644ff77", "patch": "@@ -647,9 +647,9 @@ points at a static constant).\n \n # Named lifetimes\n \n-Let's look at named lifetimes in more detail.  In effect, the use of\n-named lifetimes allows you to group parameters by lifetime.  For\n-example, consider this function:\n+Let's look at named lifetimes in more detail. Named lifetimes allow\n+for grouping of parameters by lifetime. For example, consider this\n+function:\n \n ~~~\n # struct Point {x: float, y: float}; // as before\n@@ -722,10 +722,10 @@ fn select<T>(shape: &tmp/Shape, threshold: float,\n }\n ~~~\n \n-Here you can see the lifetime of shape is now being called `tmp`. The\n-parameters `a`, `b`, and the return value are all given the lifetime\n-`r`.  However, since the lifetime `tmp` is not returned, it would be shorter\n-to just omit the named lifetime for `shape` altogether:\n+Here you can see that `shape`'s lifetime is now named `tmp`. The\n+parameters `a`, `b`, and the return value all have the lifetime `r`.\n+However, since the lifetime `tmp` is not returned, it would be more\n+concise to just omit the named lifetime for `shape` altogether:\n \n ~~~\n # struct Point {x: float, y: float}; // as before\n@@ -746,17 +746,22 @@ This is equivalent to the previous definition.\n # Purity\n \n As mentioned before, the Rust compiler offers a kind of escape hatch\n-that permits borrowing of any data, but only if the actions that occur\n+that permits borrowing of any data, as long as the actions that occur\n during the lifetime of the borrow are pure. Pure actions are those\n-which only modify data owned by the current stack frame. The compiler\n+that only modify data owned by the current stack frame. The compiler\n can therefore permit arbitrary pointers into the heap, secure in the\n knowledge that no pure action will ever cause them to become\n invalidated (the compiler must still track data on the stack which is\n-borrowed and enforce those rules normally, of course).\n-\n-Let\u2019s revisit a previous example and show how purity can affect the\n-compiler\u2019s result. Here is `example5a()`, which borrows the interior of\n-a unique box found in an aliasable, mutable location, only now we\u2019ve\n+borrowed and enforce those rules normally, of course). A pure function\n+in Rust is referentially transparent: it returns the same results\n+given the same (observably equivalent) inputs. That is because while\n+pure functions are allowed to modify data, they may only modify\n+*stack-local* data, which cannot be observed outside the scope of the\n+function itself. (Using an `unsafe` block invalidates this guarantee.)\n+\n+Let\u2019s revisit a previous example and show how purity can affect\n+typechecking. Here is `example5a()`, which borrows the interior of a\n+unique box found in an aliasable, mutable location, only now we\u2019ve\n replaced the `...` with some specific code:\n \n ~~~\n@@ -768,8 +773,8 @@ fn example5a(x: @S ...) -> int {\n }\n ~~~\n \n-The new code simply returns an incremented version of `y`. This clearly\n-doesn\u2019t do mutate anything in the heap, so the compiler is satisfied.\n+The new code simply returns an incremented version of `y`. This code\n+clearly doesn't mutate the heap, so the compiler is satisfied.\n \n But suppose we wanted to pull the increment code into a helper, like\n this:\n@@ -791,8 +796,8 @@ fn example5a(x: @S ...) -> int {\n ~~~\n \n But now the compiler will report an error again. The reason is that it\n-only considers one function at a time (like most type checkers), and\n-so it does not know that `add_one()` only takes pure actions. We can\n+only considers one function at a time (like most typecheckers), and\n+so it does not know that `add_one()` consists of pure code. We can\n help the compiler by labeling `add_one()` as pure:\n \n ~~~\n@@ -803,7 +808,7 @@ With this change, the modified version of `example5a()` will again compile.\n \n # Conclusion\n \n-So there you have it. A (relatively) brief tour of borrowed pointer\n-system. For more details, I refer to the (yet to be written) reference\n+So there you have it: a (relatively) brief tour of the borrowed pointer\n+system. For more details, we refer to the (yet to be written) reference\n document on borrowed pointers, which will explain the full notation\n and give more examples."}]}