{"sha": "693ec73b9b6308833587dbb872297b267391f6f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5M2VjNzNiOWI2MzA4ODMzNTg3ZGJiODcyMjk3YjI2NzM5MWY2ZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-03T22:36:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-03T22:36:59Z"}, "message": "auto merge of #10747 : alexcrichton/rust/snapshots, r=cmr\n\nThis registers new snapshots after the landing of #10528, and then goes on to tweak the build process to build a monolithic `rustc` binary for use in future snapshots. This mainly involved dropping the dynamic dependency on `librustllvm`, so that's now built as a static library (with a dynamically generated rust file listing LLVM dependencies).\r\n\r\nThis currently doesn't actually make the snapshot any smaller (24MB => 23MB), but I noticed that the executable has 11MB of metadata so once progress is made on #10740 we should have a much smaller snapshot.\r\n\r\nThere's not really a super-compelling reason to distribute just a binary because we have all the infrastructure for dealing with a directory structure, but to me it seems \"more correct\" that a snapshot compiler is just a `rustc` binary.", "tree": {"sha": "f4c107cbe879860cd468b8ba65f58fad095f0564", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c107cbe879860cd468b8ba65f58fad095f0564"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/693ec73b9b6308833587dbb872297b267391f6f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/693ec73b9b6308833587dbb872297b267391f6f6", "html_url": "https://github.com/rust-lang/rust/commit/693ec73b9b6308833587dbb872297b267391f6f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/693ec73b9b6308833587dbb872297b267391f6f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69186efc199d48afca9427e448363212b0a59454", "url": "https://api.github.com/repos/rust-lang/rust/commits/69186efc199d48afca9427e448363212b0a59454", "html_url": "https://github.com/rust-lang/rust/commit/69186efc199d48afca9427e448363212b0a59454"}, {"sha": "acc5e32e53d313a890a07cb0b693ce8df5bc94ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/acc5e32e53d313a890a07cb0b693ce8df5bc94ce", "html_url": "https://github.com/rust-lang/rust/commit/acc5e32e53d313a890a07cb0b693ce8df5bc94ce"}], "stats": {"total": 117, "additions": 23, "deletions": 94}, "files": [{"sha": "59e5301c99e5e17a92860532da745221cdd71bab", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -134,6 +134,7 @@ endif\n # static copies of libstd and libextra. We also generate dynamic versions of all\n # libraries, so in the interest of space, prefer dynamic linking throughout the\n # compilation process.\n+RUSTFLAGS_STAGE0 += -Z prefer-dynamic\n RUSTFLAGS_STAGE1 += -Z prefer-dynamic\n RUSTFLAGS_STAGE2 += -Z prefer-dynamic\n RUSTFLAGS_STAGE3 += -Z prefer-dynamic"}, {"sha": "198362492a5f4cfeff2e9a7972aad958493c2a12", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -32,15 +32,13 @@ Rust extras are part of the standard Rust distribution.\n \n #[comment = \"Rust extras\"];\n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n #[crate_type = \"rlib\"];\n #[crate_type = \"dylib\"];\n \n #[feature(macro_rules, globs, managed_boxes)];\n \n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n-#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n use std::str::{StrSlice, OwnedStr};\n "}, {"sha": "094a4b02a249fe877fd34e1d98c0736230151fbe", "filename": "src/libextra/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibextra%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibextra%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Funicode.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -161,7 +161,7 @@ pub mod icu {\n         use unicode::icu::*;\n \n         // #[link_name = \"icuuc\"]\n-        #[link_args = \"-licuuc\"]\n+        #[link(name = \"icuuc\")]\n         extern {\n             pub fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n             pub fn u_isdigit(c: UChar32) -> UBool;"}, {"sha": "868b53c2465f295d42904b2f13b4eb1ee09819c0", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -113,8 +113,7 @@ impl Visitor<()> for Context {\n \n     fn visit_item(&mut self, i: @ast::item, _:()) {\n         for attr in i.attrs.iter() {\n-            if \"thread_local\" == attr.name() &&\n-               cfg!(stage0, remove_this_on_next_snapshot) { // NOTE: snap rem\n+            if \"thread_local\" == attr.name() {\n                 self.gate_feature(\"thread_local\", i.span,\n                                   \"`#[thread_local]` is an experimental feature, and does not \\\n                                   currently handle destructors. There is no corresponding \\\n@@ -136,8 +135,7 @@ impl Visitor<()> for Context {\n             }\n \n             ast::item_foreign_mod(..) => {\n-                if attr::contains_name(i.attrs, \"link_args\") &&\n-                    cfg!(stage0, remove_this_on_next_snapshot) { // NOTE: snap\n+                if attr::contains_name(i.attrs, \"link_args\") {\n                     self.gate_feature(\"link_args\", i.span,\n                                       \"the `link_args` attribute is not portable \\\n                                        across platforms, it is recommended to \\"}, {"sha": "e0d1ab2439b672f04be756a100cab5adc2bf9d7d", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -16,11 +16,9 @@\n \n #[comment = \"The Rust compiler\"];\n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n #[crate_type = \"dylib\"];\n \n #[feature(macro_rules, globs, struct_variant, managed_boxes)];\n-#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n extern mod extra;\n extern mod syntax;"}, {"sha": "a856c06997169b17ee02e3b69675167176e8cca6", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -306,13 +306,7 @@ pub mod llvm {\n     use std::libc::{c_char, c_int, c_longlong, c_ushort, c_uint, c_ulonglong,\n                     size_t};\n \n-    #[cfg(stage0)]\n-    #[link_args = \"-lrustllvm\"]\n-    extern {}\n-    #[cfg(not(stage0))] // if you're deleting this, put this on the block below\n     #[link(name = \"rustllvm\")]\n-    extern {}\n-\n     extern {\n         /* Create and destroy contexts. */\n         pub fn LLVMContextCreate() -> ContextRef;"}, {"sha": "10caa9e0ac4f7cad531a8f05ba723dccb953fdba", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -16,7 +16,6 @@\n \n #[desc = \"rustdoc, the Rust documentation extractor\"];\n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n #[crate_type = \"dylib\"];\n \n #[feature(globs, struct_variant, managed_boxes)];"}, {"sha": "35b6cc3fe64787b55985a887c541da4e0cbbba36", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -17,7 +17,6 @@\n        url = \"https://github.com/mozilla/rust/tree/master/src/librustpkg\")];\n \n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n #[crate_type = \"dylib\"];\n \n #[feature(globs, managed_boxes)];"}, {"sha": "ad1c53e97397fd1844bef5d96a399d1ae37ac411", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -41,12 +41,10 @@ via `close` and `delete` methods.\n        url = \"https://github.com/mozilla/rust/tree/master/src/librustuv\")];\n \n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n #[crate_type = \"rlib\"];\n #[crate_type = \"dylib\"];\n \n #[feature(macro_rules, globs)];\n-#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n use std::cast::transmute;\n use std::cast;"}, {"sha": "09ebd29bc2216ef29691bbd12fe0365f1bd4329d", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -524,15 +524,11 @@ pub unsafe fn guess_handle(handle: c_int) -> c_int {\n // second copies of everything. We obviously don't want this, so instead of\n // dying horribly during testing, we allow all of the test rustuv's references\n // to get resolved to the original rustuv crate.\n-#[cfg(not(test), not(stage0))]\n+#[cfg(not(test))]\n #[link(name = \"uv_support\", kind = \"static\")]\n #[link(name = \"uv\", kind = \"static\")]\n extern {}\n \n-#[cfg(not(test), stage0)]\n-#[link_args = \"-luv -luv_support\"]\n-extern {}\n-\n extern {\n     fn rust_uv_loop_new() -> *c_void;\n \n@@ -722,26 +718,19 @@ extern {\n     pub fn uv_signal_stop(handle: *uv_signal_t) -> c_int;\n }\n \n-// various platform libraries required by libuv\n-#[cfg(not(stage0), not(target_os = \"android\"))]\n+// libuv requires other native libraries on various platforms. These are all\n+// listed here (for each platform)\n+\n+#[cfg(not(target_os = \"android\"))] // apparently pthreads isn't on android?\n #[link(name = \"pthread\")]\n extern {}\n-#[cfg(stage0)]\n-#[link_args = \"-lpthread\"]\n-extern {}\n \n-#[cfg(target_os = \"win32\", not(stage0))]\n+#[cfg(target_os = \"win32\")]\n #[link(name = \"ws2_32\")]\n #[link(name = \"psapi\")]\n #[link(name = \"iphlpapi\")]\n extern {}\n-#[cfg(target_os = \"win32\", stage0)]\n-#[link_args = \"-lws2_32 -lpsapi -liphlpapi\"]\n-extern {}\n \n-#[cfg(target_os = \"freebsd\", not(stage0))]\n+#[cfg(target_os = \"freebsd\")]\n #[link(name = \"kvm\")]\n extern {}\n-#[cfg(target_os = \"freebsd\", stage0)]\n-#[link_args = \"-lkvm\"]\n-extern {}"}, {"sha": "965b9ffb95c1ff4170ab749585f578eea9f42a6f", "filename": "src/libstd/any.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -12,51 +12,12 @@\n //! of any type.\n \n use cast::transmute;\n-#[cfg(stage0)]\n-use cmp::Eq;\n use option::{Option, Some, None};\n-#[cfg(stage0)]\n-use to_bytes::{IterBytes, Cb};\n use to_str::ToStr;\n use unstable::intrinsics;\n use util::Void;\n-#[cfg(not(stage0))]\n use unstable::intrinsics::TypeId;\n \n-///////////////////////////////////////////////////////////////////////////////\n-// TypeId\n-///////////////////////////////////////////////////////////////////////////////\n-\n-/// `TypeId` represents a globally unique identifier for a type\n-#[cfg(stage0)]\n-pub struct TypeId {\n-    priv t: u64,\n-}\n-\n-#[cfg(stage0)]\n-impl TypeId {\n-    /// Returns the `TypeId` of the type this generic function has been instantiated with\n-    #[inline]\n-    pub fn of<T: 'static>() -> TypeId {\n-        TypeId{ t: unsafe { intrinsics::type_id::<T>() } }\n-    }\n-}\n-\n-#[cfg(stage0)]\n-impl Eq for TypeId {\n-    #[inline]\n-    fn eq(&self, &other: &TypeId) -> bool {\n-        self.t == other.t\n-    }\n-}\n-\n-#[cfg(stage0)]\n-impl IterBytes for TypeId {\n-    fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {\n-        self.t.iter_bytes(lsb0, f)\n-    }\n-}\n-\n ///////////////////////////////////////////////////////////////////////////////\n // Any trait\n ///////////////////////////////////////////////////////////////////////////////"}, {"sha": "6fe757976f033e47f70b4dd5edc7517ba2feda37", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -51,22 +51,20 @@\n \n #[comment = \"The Rust standard library\"];\n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n #[crate_type = \"rlib\"];\n #[crate_type = \"dylib\"];\n \n #[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n-#[feature(macro_rules, globs, asm, managed_boxes, thread_local)];\n+#[feature(macro_rules, globs, asm, managed_boxes, thread_local, link_args)];\n \n // Don't link to std. We are std.\n #[no_std];\n \n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n-#[allow(attribute_usage)]; // NOTE: remove after the next snapshot\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print\n // things and all of the std::io tests have an I/O interface to run on top"}, {"sha": "d1268d85a432c84a7394cbe2aac9485669198e5b", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -117,11 +117,6 @@ mod kill;\n /// The coroutine task scheduler, built on the `io` event loop.\n pub mod sched;\n \n-#[cfg(stage0)]\n-pub mod io {\n-    pub use io::stdio;\n-}\n-\n /// The EventLoop and internal synchronous I/O interface.\n pub mod rtio;\n "}, {"sha": "8c348d06734ef8dd8bd3065c1f2b9856dd98c3d9", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //! This module contains the linkage attributes to all runtime dependencies of\n-//! the stndard library This varies per-platform, but these libraries are\n+//! the standard library This varies per-platform, but these libraries are\n //! necessary for running libstd.\n \n // All platforms need to link to rustrt\n@@ -48,7 +48,3 @@ extern {}\n #[link(name = \"pthread\")]\n #[link(name = \"stdc++\")]\n extern {}\n-\n-#[cfg(stage0)]\n-#[link_args = \"-lstdc++\"]\n-extern {}"}, {"sha": "d3649f0285caa221c98dac1df5faef36c395e537", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -313,9 +313,6 @@ extern \"rust-intrinsic\" {\n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n-    #[cfg(stage0)]\n-    pub fn type_id<T: 'static>() -> u64;\n-    #[cfg(not(stage0))]\n     pub fn type_id<T: 'static>() -> TypeId;\n \n \n@@ -504,7 +501,6 @@ pub struct TypeId {\n #[cfg(not(test))]\n impl TypeId {\n     /// Returns the `TypeId` of the type this generic function has been instantiated with\n-    #[cfg(not(stage0))]\n     pub fn of<T: 'static>() -> TypeId {\n         unsafe { type_id::<T>() }\n     }"}, {"sha": "eafcf7c09a0e2ca7e5cd94634e08b1bc647b0f15", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -19,7 +19,6 @@\n        uuid = \"9311401b-d6ea-4cd9-a1d9-61f89499c645\")];\n \n #[license = \"MIT/ASL2\"];\n-#[crate_type = \"lib\"]; // NOTE: remove after stage0 snapshot\n #[crate_type = \"dylib\"];\n \n #[feature(macro_rules, globs, managed_boxes)];"}, {"sha": "e71b218394da9ae6d7d847710c4021b946745508", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -1,3 +1,11 @@\n+S 2013-11-30 4252a24\n+  freebsd-x86_64 2e0bfc6eb0dd75b8a1ad5c9958d90f3b626650dd\n+  linux-i386 2ea4b43fbc22c295e60874ef494dfbea1cc08a63\n+  linux-x86_64 757a935bfce41fdacd9429c37d2ebd9b98baee17\n+  macos-i386 d64f14ba746c21bd5d52deb26e79f74b219b8d3c\n+  macos-x86_64 bc669acd847cfcdccc78f01c8dd4bfa47933b56a\n+  winnt-i386 d5e37b109c58a8b9b60bc2e79149c15d3a399eba\n+\n S 2013-11-28 859c3ba\n   freebsd-x86_64 4110bb67408e382623b6c55e997e2c34342dc98d\n   linux-i386 072e638a6a11f7d00cf2c7b487162d0d2e3b5036"}, {"sha": "a1603ee9453164b562cd4992b91eeaf18f79276b", "filename": "src/test/compile-fail/nolink-with-link-args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/693ec73b9b6308833587dbb872297b267391f6f6/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693ec73b9b6308833587dbb872297b267391f6f6/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnolink-with-link-args.rs?ref=693ec73b9b6308833587dbb872297b267391f6f6", "patch": "@@ -14,6 +14,8 @@\n So we try to compile with junk link_args and make sure they are visible in\n the compiler output. */\n \n+#[feature(link_args)];\n+\n #[link_args = \"aFdEfSeVEEE\"]\n #[nolink]\n extern {}"}]}