{"sha": "a22c618779acee377e4a69468e426891fbfaa33f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMmM2MTg3NzlhY2VlMzc3ZTRhNjk0NjhlNDI2ODkxZmJmYWEzM2Y=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-06T08:07:55Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-06T08:07:55Z"}, "message": "Merge pull request #47 from Manishearth/float_cmp\n\nAdded new 'float_cmp' lint (see issue #46)", "tree": {"sha": "a8d5a25845839ab82ab6b92e8bbd6b1ad2833008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8d5a25845839ab82ab6b92e8bbd6b1ad2833008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a22c618779acee377e4a69468e426891fbfaa33f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a22c618779acee377e4a69468e426891fbfaa33f", "html_url": "https://github.com/rust-lang/rust/commit/a22c618779acee377e4a69468e426891fbfaa33f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a22c618779acee377e4a69468e426891fbfaa33f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae05d5fee23f48c09c871d9a350895c28682cff8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae05d5fee23f48c09c871d9a350895c28682cff8", "html_url": "https://github.com/rust-lang/rust/commit/ae05d5fee23f48c09c871d9a350895c28682cff8"}, {"sha": "ac151bb1f0f5069e36a10c8ff6dbf0f81601b317", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac151bb1f0f5069e36a10c8ff6dbf0f81601b317", "html_url": "https://github.com/rust-lang/rust/commit/ac151bb1f0f5069e36a10c8ff6dbf0f81601b317"}], "stats": {"total": 98, "additions": 87, "deletions": 11}, "files": [{"sha": "3014a1a3ecd895d855f1e90057f7aef8980449b4", "filename": "README.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a22c618779acee377e4a69468e426891fbfaa33f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a22c618779acee377e4a69468e426891fbfaa33f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a22c618779acee377e4a69468e426891fbfaa33f", "patch": "@@ -16,6 +16,15 @@ Lints included in this crate:\n  - `needless_bool` : Warns on if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n  - `ptr_arg`: Warns on fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n  - `approx_constant`: Warns if the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found and suggests to use the constant\n+ - `cmp_nan`: Denies comparisons to NAN (which will always return false, which is probably not intended)\n+ - `float_cmp`: Warns on `==` or `!=` comparisons of floaty typed values. As floating-point operations usually involve rounding errors, it is always better to check for approximate equality within some small bounds\n+\n+To use, add the following lines to your Cargo.toml:\n+\n+```\n+[dev-dependencies.rust-clippy]\n+git = \"https://github.com/Manishearth/rust-clippy\"\n+```\n \n In your code, you may add `#![plugin(clippy)]` to use it (you may also need to include a `#![feature(plugin)]` line)\n "}, {"sha": "5b2f71bb4fb110aeb46df81c949725670c7159f6", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a22c618779acee377e4a69468e426891fbfaa33f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22c618779acee377e4a69468e426891fbfaa33f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a22c618779acee377e4a69468e426891fbfaa33f", "patch": "@@ -34,13 +34,14 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box ptr_arg::PtrArg as LintPassObject);\n     reg.register_lint_pass(box needless_bool::NeedlessBool as LintPassObject);\n     reg.register_lint_pass(box approx_const::ApproxConstant as LintPassObject);\n+    reg.register_lint_pass(box misc::FloatCmp as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n                                            misc::TOPLEVEL_REF_ARG, eq_op::EQ_OP,\n                                            bit_mask::BAD_BIT_MASK, ptr_arg::PTR_ARG,\n                                            needless_bool::NEEDLESS_BOOL,\n                                            approx_const::APPROX_CONSTANT,\n-                                           misc::CMP_NAN\n+                                           misc::CMP_NAN, misc::FLOAT_CMP,\n                                            ]);\n }"}, {"sha": "cdc39a4b8196922dfb165b87466ebaf519802288", "filename": "src/misc.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a22c618779acee377e4a69468e426891fbfaa33f/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22c618779acee377e4a69468e426891fbfaa33f/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=a22c618779acee377e4a69468e426891fbfaa33f", "patch": "@@ -1,14 +1,22 @@\n use syntax::ptr::P;\n use syntax::ast;\n use syntax::ast::*;\n-use syntax::ast_util::is_comparison_binop;\n+use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::visit::{FnKind};\n use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n-use rustc::middle::ty::{self, expr_ty, ty_str, ty_ptr, ty_rptr};\n+use rustc::middle::ty::{self, expr_ty, ty_str, ty_ptr, ty_rptr, ty_float};\n use syntax::codemap::Span;\n \n+\n use types::span_note_and_lint;\n \n+fn walk_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n+\tmatch ty.sty {\n+\t\tty_ptr(ref tm) | ty_rptr(_, ref tm) => walk_ty(tm.ty),\n+\t\t_ => ty\n+\t}\n+}\n+\n /// Handles uncategorized lints\n /// Currently handles linting of if-let-able matches\n #[allow(missing_copy_implementations)]\n@@ -71,13 +79,6 @@ impl LintPass for StrToStringPass {\n         }\n \n         fn is_str(cx: &Context, expr: &ast::Expr) -> bool {\n-            fn walk_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n-                //println!(\"{}: -> {}\", depth, ty);\n-                match ty.sty {\n-                    ty_ptr(ref tm) | ty_rptr(_, ref tm) => walk_ty(tm.ty),\n-                    _ => ty\n-                }\n-            }\n             match walk_ty(expr_ty(cx.tcx, expr)).sty {\n                 ty_str => true,\n                 _ => false\n@@ -110,7 +111,7 @@ impl LintPass for TopLevelRefPass {\n     }\n }\n \n-declare_lint!(pub CMP_NAN, Allow, \"Deny comparisons to std::f32::NAN or std::f64::NAN\");\n+declare_lint!(pub CMP_NAN, Deny, \"Deny comparisons to std::f32::NAN or std::f64::NAN\");\n \n #[derive(Copy,Clone)]\n pub struct CmpNan;\n@@ -139,3 +140,32 @@ fn check_nan(cx: &Context, path: &Path, span: Span) {\n \t\tcx.span_lint(CMP_NAN, span, \"Doomed comparison with NAN, use std::{f32,f64}::is_nan instead\");\n \t});\n }\n+\n+declare_lint!(pub FLOAT_CMP, Warn,\n+\t\t\t  \"Warn on ==/!= comparison of floaty values\");\n+\t\t\t  \n+#[derive(Copy,Clone)]\n+pub struct FloatCmp;\n+\n+impl LintPass for FloatCmp {\n+\tfn get_lints(&self) -> LintArray {\n+        lint_array!(FLOAT_CMP)\n+\t}\n+\t\n+\tfn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+\t\tif let ExprBinary(ref cmp, ref left, ref right) = expr.node {\n+\t\t\tlet op = cmp.node;\n+\t\t\tif (op == BiEq || op == BiNe) && (is_float(cx, left) || is_float(cx, right)) {\n+\t\t\t\tlet map = cx.sess().codemap();\n+\t\t\t\tcx.span_lint(FLOAT_CMP, expr.span, &format!(\n+\t\t\t\t\t\"{}-Comparison of f32 or f64 detected. You may want to change this to 'abs({} - {}) < epsilon' for some suitable value of epsilon\",\n+\t\t\t\t\tbinop_to_string(op), &*map.span_to_snippet(left.span).unwrap_or(\"..\".to_string()), \n+\t\t\t\t\t&*map.span_to_snippet(right.span).unwrap_or(\"..\".to_string())));\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+fn is_float(cx: &Context, expr: &Expr) -> bool {\n+\tif let ty_float(_) = walk_ty(expr_ty(cx.tcx, expr)).sty { true } else { false }\n+}"}, {"sha": "69631331467ab59c6ab2847ff87a9b020cdee149", "filename": "tests/compile-fail/cmp_nan.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a22c618779acee377e4a69468e426891fbfaa33f/tests%2Fcompile-fail%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22c618779acee377e4a69468e426891fbfaa33f/tests%2Fcompile-fail%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_nan.rs?ref=a22c618779acee377e4a69468e426891fbfaa33f", "patch": "@@ -2,6 +2,7 @@\n #![plugin(clippy)]\n \n #[deny(cmp_nan)]\n+#[allow(float_cmp)]\n fn main() {\n \tlet x = 5f32;\n \tx == std::f32::NAN; //~ERROR"}, {"sha": "dce8dba1ebe15fc499f0a713a25c73cb98266429", "filename": "tests/compile-fail/float_cmp.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a22c618779acee377e4a69468e426891fbfaa33f/tests%2Fcompile-fail%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22c618779acee377e4a69468e426891fbfaa33f/tests%2Fcompile-fail%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffloat_cmp.rs?ref=a22c618779acee377e4a69468e426891fbfaa33f", "patch": "@@ -0,0 +1,35 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+use std::ops::Add;\n+\n+const ZERO : f32 = 0.0;\n+const ONE : f32 = ZERO + 1.0;\n+\n+fn twice<T>(x : T) -> T where T : Add<T, Output = T>, T : Copy {\n+\tx + x\n+}\n+\n+#[deny(float_cmp)]\n+#[allow(unused)]\n+fn main() {\n+\tZERO == 0f32; //~ERROR\n+\tZERO == 0.0; //~ERROR\n+\tZERO + ZERO != 1.0; //~ERROR\n+\t\n+\tONE != 0.0; //~ERROR\n+\ttwice(ONE) != ONE; //~ERROR\n+\tONE as f64 != 0.0; //~ERROR\n+\t\n+\tlet x : f64 = 1.0;\n+\t\n+\tx == 1.0; //~ERROR\n+\tx != 0f64; //~ERROR\n+\t\n+\ttwice(x) != twice(ONE as f64); //~ERROR\n+\t\n+\tx < 0.0;\n+\tx > 0.0;\n+\tx <= 0.0;\n+\tx >= 0.0;\t\n+}"}]}