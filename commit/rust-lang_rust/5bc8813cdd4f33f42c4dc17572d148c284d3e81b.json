{"sha": "5bc8813cdd4f33f42c4dc17572d148c284d3e81b", "node_id": "C_kwDOAAsO6NoAKDViYzg4MTNjZGQ0ZjMzZjQyYzRkYzE3NTcyZDE0OGMyODRkM2U4MWI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-05T19:20:47Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:31:41Z"}, "message": "Move `ManualOkOr` into `Methods` lint pass", "tree": {"sha": "989874ac98453da92240233a45ea194fc3848ada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/989874ac98453da92240233a45ea194fc3848ada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bc8813cdd4f33f42c4dc17572d148c284d3e81b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bc8813cdd4f33f42c4dc17572d148c284d3e81b", "html_url": "https://github.com/rust-lang/rust/commit/5bc8813cdd4f33f42c4dc17572d148c284d3e81b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bc8813cdd4f33f42c4dc17572d148c284d3e81b/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8d80d531f1d358c26295eb3d81624594544dd4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d80d531f1d358c26295eb3d81624594544dd4b", "html_url": "https://github.com/rust-lang/rust/commit/a8d80d531f1d358c26295eb3d81624594544dd4b"}], "stats": {"total": 198, "additions": 98, "deletions": 100}, "files": [{"sha": "ac30c8b6eac2acbaf1fa4a426b473912e5cc79e3", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bc8813cdd4f33f42c4dc17572d148c284d3e81b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc8813cdd4f33f42c4dc17572d148c284d3e81b/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=5bc8813cdd4f33f42c4dc17572d148c284d3e81b", "patch": "@@ -243,7 +243,6 @@ store.register_lints(&[\n     manual_empty_string_creations::MANUAL_EMPTY_STRING_CREATIONS,\n     manual_instant_elapsed::MANUAL_INSTANT_ELAPSED,\n     manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n-    manual_ok_or::MANUAL_OK_OR,\n     manual_rem_euclid::MANUAL_REM_EUCLID,\n     manual_retain::MANUAL_RETAIN,\n     manual_strip::MANUAL_STRIP,\n@@ -322,6 +321,7 @@ store.register_lints(&[\n     methods::ITER_WITH_DRAIN,\n     methods::MANUAL_FILTER_MAP,\n     methods::MANUAL_FIND_MAP,\n+    methods::MANUAL_OK_OR,\n     methods::MANUAL_SATURATING_ARITHMETIC,\n     methods::MANUAL_SPLIT_ONCE,\n     methods::MANUAL_STR_REPEAT,"}, {"sha": "5c04a331d0a7eede6c2da61a2404738d368e7159", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bc8813cdd4f33f42c4dc17572d148c284d3e81b/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc8813cdd4f33f42c4dc17572d148c284d3e81b/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=5bc8813cdd4f33f42c4dc17572d148c284d3e81b", "patch": "@@ -48,7 +48,6 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(macro_use::MACRO_USE_IMPORTS),\n     LintId::of(manual_assert::MANUAL_ASSERT),\n     LintId::of(manual_instant_elapsed::MANUAL_INSTANT_ELAPSED),\n-    LintId::of(manual_ok_or::MANUAL_OK_OR),\n     LintId::of(matches::MATCH_BOOL),\n     LintId::of(matches::MATCH_ON_VEC_ITEMS),\n     LintId::of(matches::MATCH_SAME_ARMS),\n@@ -62,6 +61,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(methods::FROM_ITER_INSTEAD_OF_COLLECT),\n     LintId::of(methods::IMPLICIT_CLONE),\n     LintId::of(methods::INEFFICIENT_TO_STRING),\n+    LintId::of(methods::MANUAL_OK_OR),\n     LintId::of(methods::MAP_UNWRAP_OR),\n     LintId::of(methods::NAIVE_BYTECOUNT),\n     LintId::of(methods::UNNECESSARY_JOIN),"}, {"sha": "774ae01cc4f28d802a9350df083d65c83cb9d39d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bc8813cdd4f33f42c4dc17572d148c284d3e81b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc8813cdd4f33f42c4dc17572d148c284d3e81b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5bc8813cdd4f33f42c4dc17572d148c284d3e81b", "patch": "@@ -270,7 +270,6 @@ mod manual_bits;\n mod manual_empty_string_creations;\n mod manual_instant_elapsed;\n mod manual_non_exhaustive;\n-mod manual_ok_or;\n mod manual_rem_euclid;\n mod manual_retain;\n mod manual_strip;\n@@ -838,7 +837,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(stable_sort_primitive::StableSortPrimitive));\n     store.register_late_pass(|| Box::new(repeat_once::RepeatOnce));\n     store.register_late_pass(|| Box::new(unwrap_in_result::UnwrapInResult));\n-    store.register_late_pass(|| Box::new(manual_ok_or::ManualOkOr));\n     store.register_late_pass(|| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n     store.register_late_pass(|| Box::new(async_yields_async::AsyncYieldsAsync));\n     let disallowed_methods = conf.disallowed_methods.clone();"}, {"sha": "cf5004399b884cb67e8e1553e4d7aaa9ab9eba5f", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d80d531f1d358c26295eb3d81624594544dd4b/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=a8d80d531f1d358c26295eb3d81624594544dd4b", "patch": "@@ -1,95 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{is_lang_ctor, path_to_local_id};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::LangItem::{ResultErr, ResultOk};\n-use rustc_hir::{Closure, Expr, ExprKind, PatKind};\n-use rustc_lint::LintContext;\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    ///\n-    /// Finds patterns that reimplement `Option::ok_or`.\n-    ///\n-    /// ### Why is this bad?\n-    ///\n-    /// Concise code helps focusing on behavior instead of boilerplate.\n-    ///\n-    /// ### Examples\n-    /// ```rust\n-    /// let foo: Option<i32> = None;\n-    /// foo.map_or(Err(\"error\"), |v| Ok(v));\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// let foo: Option<i32> = None;\n-    /// foo.ok_or(\"error\");\n-    /// ```\n-    #[clippy::version = \"1.49.0\"]\n-    pub MANUAL_OK_OR,\n-    pedantic,\n-    \"finds patterns that can be encoded more concisely with `Option::ok_or`\"\n-}\n-\n-declare_lint_pass!(ManualOkOr => [MANUAL_OK_OR]);\n-\n-impl<'tcx> LateLintPass<'tcx> for ManualOkOr {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, scrutinee: &'tcx Expr<'tcx>) {\n-        if in_external_macro(cx.sess(), scrutinee.span) {\n-            return;\n-        }\n-\n-        if_chain! {\n-            if let ExprKind::MethodCall(method_segment, [receiver, or_expr, map_expr], _) = scrutinee.kind;\n-            if method_segment.ident.name == sym!(map_or);\n-            let ty = cx.typeck_results().expr_ty(receiver);\n-            if is_type_diagnostic_item(cx, ty, sym::Option);\n-            if is_ok_wrapping(cx, map_expr);\n-            if let ExprKind::Call(Expr { kind: ExprKind::Path(err_path), .. }, &[ref err_arg]) = or_expr.kind;\n-            if is_lang_ctor(cx, err_path, ResultErr);\n-            if let Some(method_receiver_snippet) = snippet_opt(cx, receiver.span);\n-            if let Some(err_arg_snippet) = snippet_opt(cx, err_arg.span);\n-            if let Some(indent) = indent_of(cx, scrutinee.span);\n-            then {\n-                let reindented_err_arg_snippet =\n-                    reindent_multiline(err_arg_snippet.into(), true, Some(indent + 4));\n-                span_lint_and_sugg(\n-                    cx,\n-                    MANUAL_OK_OR,\n-                    scrutinee.span,\n-                    \"this pattern reimplements `Option::ok_or`\",\n-                    \"replace with\",\n-                    format!(\n-                        \"{}.ok_or({})\",\n-                        method_receiver_snippet,\n-                        reindented_err_arg_snippet\n-                    ),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-        }\n-    }\n-}\n-\n-fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n-    if let ExprKind::Path(ref qpath) = map_expr.kind {\n-        if is_lang_ctor(cx, qpath, ResultOk) {\n-            return true;\n-        }\n-    }\n-    if_chain! {\n-        if let ExprKind::Closure(&Closure { body, .. }) = map_expr.kind;\n-        let body = cx.tcx.hir().body(body);\n-        if let PatKind::Binding(_, param_id, ..) = body.params[0].pat.kind;\n-        if let ExprKind::Call(Expr { kind: ExprKind::Path(ok_path), .. }, &[ref ok_arg]) = body.value.kind;\n-        if is_lang_ctor(cx, ok_path, ResultOk);\n-        then { path_to_local_id(ok_arg, param_id) } else { false }\n-    }\n-}"}, {"sha": "ffd2f4a38b8ac1ac92ec391abca7716e811ebe7b", "filename": "clippy_lints/src/methods/manual_ok_or.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5bc8813cdd4f33f42c4dc17572d148c284d3e81b/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc8813cdd4f33f42c4dc17572d148c284d3e81b/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_ok_or.rs?ref=5bc8813cdd4f33f42c4dc17572d148c284d3e81b", "patch": "@@ -0,0 +1,64 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_lang_ctor, path_to_local_id};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::LangItem::{ResultErr, ResultOk};\n+use rustc_hir::{Closure, Expr, ExprKind, PatKind};\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n+\n+use super::MANUAL_OK_OR;\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'tcx>,\n+    recv: &'tcx Expr<'_>,\n+    or_expr: &'tcx Expr<'_>,\n+    map_expr: &'tcx Expr<'_>,\n+) {\n+    if_chain! {\n+        if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+        if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n+        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Option);\n+        if let ExprKind::Call(Expr { kind: ExprKind::Path(err_path), .. }, [err_arg]) = or_expr.kind;\n+        if is_lang_ctor(cx, err_path, ResultErr);\n+        if is_ok_wrapping(cx, map_expr);\n+        if let Some(recv_snippet) = snippet_opt(cx, recv.span);\n+        if let Some(err_arg_snippet) = snippet_opt(cx, err_arg.span);\n+        if let Some(indent) = indent_of(cx, expr.span);\n+        then {\n+            let reindented_err_arg_snippet = reindent_multiline(err_arg_snippet.into(), true, Some(indent + 4));\n+            span_lint_and_sugg(\n+                cx,\n+                MANUAL_OK_OR,\n+                expr.span,\n+                \"this pattern reimplements `Option::ok_or`\",\n+                \"replace with\",\n+                format!(\n+                    \"{}.ok_or({})\",\n+                    recv_snippet,\n+                    reindented_err_arg_snippet\n+                ),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Path(ref qpath) = map_expr.kind {\n+        if is_lang_ctor(cx, qpath, ResultOk) {\n+            return true;\n+        }\n+    }\n+    if_chain! {\n+        if let ExprKind::Closure(&Closure { body, .. }) = map_expr.kind;\n+        let body = cx.tcx.hir().body(body);\n+        if let PatKind::Binding(_, param_id, ..) = body.params[0].pat.kind;\n+        if let ExprKind::Call(Expr { kind: ExprKind::Path(ok_path), .. }, &[ref ok_arg]) = body.value.kind;\n+        if is_lang_ctor(cx, ok_path, ResultOk);\n+        then { path_to_local_id(ok_arg, param_id) } else { false }\n+    }\n+}"}, {"sha": "132f6040a51dc25a13fbbb06734c2aa91a7e0c2d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5bc8813cdd4f33f42c4dc17572d148c284d3e81b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bc8813cdd4f33f42c4dc17572d148c284d3e81b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5bc8813cdd4f33f42c4dc17572d148c284d3e81b", "patch": "@@ -42,6 +42,7 @@ mod iter_overeager_cloned;\n mod iter_skip_next;\n mod iter_with_drain;\n mod iterator_step_by_zero;\n+mod manual_ok_or;\n mod manual_saturating_arithmetic;\n mod manual_str_repeat;\n mod map_collect_result_unit;\n@@ -2484,6 +2485,32 @@ declare_clippy_lint! {\n     \"Using `x.get(0)` when `x.first()` is simpler\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Finds patterns that reimplement `Option::ok_or`.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Concise code helps focusing on behavior instead of boilerplate.\n+    ///\n+    /// ### Examples\n+    /// ```rust\n+    /// let foo: Option<i32> = None;\n+    /// foo.map_or(Err(\"error\"), |v| Ok(v));\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// let foo: Option<i32> = None;\n+    /// foo.ok_or(\"error\");\n+    /// ```\n+    #[clippy::version = \"1.49.0\"]\n+    pub MANUAL_OK_OR,\n+    pedantic,\n+    \"finds patterns that can be encoded more concisely with `Option::ok_or`\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2592,6 +2619,7 @@ impl_lint_pass!(Methods => [\n     BYTES_COUNT_TO_LEN,\n     CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n     GET_FIRST,\n+    MANUAL_OK_OR,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2936,7 +2964,10 @@ impl Methods {\n                     }\n                     map_identity::check(cx, expr, recv, m_arg, name, span);\n                 },\n-                (\"map_or\", [def, map]) => option_map_or_none::check(cx, expr, recv, def, map),\n+                (\"map_or\", [def, map]) => {\n+                    option_map_or_none::check(cx, expr, recv, def, map);\n+                    manual_ok_or::check(cx, expr, recv, def, map);\n+                },\n                 (\"next\", []) => {\n                     if let Some((name2, [recv2, args2 @ ..], _)) = method_call(recv) {\n                         match (name2, args2) {"}]}