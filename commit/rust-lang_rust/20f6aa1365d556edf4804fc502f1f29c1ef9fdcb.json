{"sha": "20f6aa1365d556edf4804fc502f1f29c1ef9fdcb", "node_id": "C_kwDOAAsO6NoAKDIwZjZhYTEzNjVkNTU2ZWRmNDgwNGZjNTAyZjFmMjljMWVmOWZkY2I", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-16T18:12:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-16T18:12:17Z"}, "message": "Rollup merge of #111592 - Nemo157:fix-vec-capacity-examples, r=joshtriplett\n\nChange Vec examples to not assert exact capacity except where it is guaranteed\n\nIt was [brought up on discord](https://discord.com/channels/273534239310479360/818964227783262209/1107633959329878077) that the `Vec::into_boxed_slice` example contradicted the `Vec::with_capacity` docs in that the returned `Vec` might have _more_ capacity than requested.\n\nSo, to reduce confusion change all the `assert_eq!(vec.capacity(), _)` to `assert!(vec.capacity() >= _)`, except in 4 examples that have guaranteed capacities: `Vec::from_raw_parts`, `Vec::from_raw_parts_in`, `Vec::<()>::with_capacity`,`Vec::<(), _>::with_capacity_in`.", "tree": {"sha": "0da71f65d7835b13e6e16b60b49e62f9d684045d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0da71f65d7835b13e6e16b60b49e62f9d684045d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20f6aa1365d556edf4804fc502f1f29c1ef9fdcb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkY8eBCRBK7hj4Ov3rIwAAXZgIACG9I+vJ+eW3gMYzUSSVn3RW\nKhRdLWL7veaRp79L/Nnm6Xp4bEd1pbf3yuJ9fwOPki5otX+7JLbGLTs6u+jHIaxi\nNWuCX/p7nslAmHsRoc440TqbGf/EJDfQkCMXSIoEggCyFBpG7G+zlgD6vpweEApb\nTm5BMNMu/wZSgvdwe1lj66rMNEiWqXb/H0NqDEh4sTeQOzGbxae0xZs2cZVXUbcy\nM6V1bzbRPz4LbcwMrp5Vp1t9XWrxJXpMB2B/Cuka3XT/5ycbwXCUDkwKo9uKGTm3\nMcOhhJt/QgzJJ0GVaRlf82MTg+b7hB3+rO2m9uttshpL17rmL7lhedDzBBbJqDo=\n=Eh3H\n-----END PGP SIGNATURE-----\n", "payload": "tree 0da71f65d7835b13e6e16b60b49e62f9d684045d\nparent 6dc365003bce4cdc11e73fcfe4c61c6da56acd65\nparent a9cb4822be753ef995a481cf77a4c3cbd41c9464\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684260737 +0200\ncommitter GitHub <noreply@github.com> 1684260737 +0200\n\nRollup merge of #111592 - Nemo157:fix-vec-capacity-examples, r=joshtriplett\n\nChange Vec examples to not assert exact capacity except where it is guaranteed\n\nIt was [brought up on discord](https://discord.com/channels/273534239310479360/818964227783262209/1107633959329878077) that the `Vec::into_boxed_slice` example contradicted the `Vec::with_capacity` docs in that the returned `Vec` might have _more_ capacity than requested.\n\nSo, to reduce confusion change all the `assert_eq!(vec.capacity(), _)` to `assert!(vec.capacity() >= _)`, except in 4 examples that have guaranteed capacities: `Vec::from_raw_parts`, `Vec::from_raw_parts_in`, `Vec::<()>::with_capacity`,`Vec::<(), _>::with_capacity_in`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20f6aa1365d556edf4804fc502f1f29c1ef9fdcb", "html_url": "https://github.com/rust-lang/rust/commit/20f6aa1365d556edf4804fc502f1f29c1ef9fdcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20f6aa1365d556edf4804fc502f1f29c1ef9fdcb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc365003bce4cdc11e73fcfe4c61c6da56acd65", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc365003bce4cdc11e73fcfe4c61c6da56acd65", "html_url": "https://github.com/rust-lang/rust/commit/6dc365003bce4cdc11e73fcfe4c61c6da56acd65"}, {"sha": "a9cb4822be753ef995a481cf77a4c3cbd41c9464", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9cb4822be753ef995a481cf77a4c3cbd41c9464", "html_url": "https://github.com/rust-lang/rust/commit/a9cb4822be753ef995a481cf77a4c3cbd41c9464"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "82f30a26d41c5257a23e593303552f00341c8dc3", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20f6aa1365d556edf4804fc502f1f29c1ef9fdcb/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20f6aa1365d556edf4804fc502f1f29c1ef9fdcb/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=20f6aa1365d556edf4804fc502f1f29c1ef9fdcb", "patch": "@@ -646,14 +646,14 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// // The vector contains no items, even though it has capacity for more\n     /// assert_eq!(vec.len(), 0);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     ///\n     /// // These are all done without reallocating...\n     /// for i in 0..10 {\n     ///     vec.push(i);\n     /// }\n     /// assert_eq!(vec.len(), 10);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     ///\n     /// // ...but this may make the vector reallocate\n     /// vec.push(11);\n@@ -877,7 +877,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec: Vec<i32> = Vec::with_capacity(10);\n     /// vec.push(42);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1028,7 +1028,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// vec.shrink_to_fit();\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n@@ -1055,7 +1055,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// vec.shrink_to(4);\n     /// assert!(vec.capacity() >= 4);\n     /// vec.shrink_to(0);\n@@ -1090,7 +1090,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.extend([1, 2, 3]);\n     ///\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     /// let slice = vec.into_boxed_slice();\n     /// assert_eq!(slice.into_vec().capacity(), 3);\n     /// ```"}]}