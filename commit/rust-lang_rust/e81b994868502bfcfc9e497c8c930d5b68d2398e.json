{"sha": "e81b994868502bfcfc9e497c8c930d5b68d2398e", "node_id": "C_kwDOAAsO6NoAKGU4MWI5OTQ4Njg1MDJiZmNmYzllNDk3YzhjOTMwZDViNjhkMjM5OGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-20T17:45:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-20T17:45:13Z"}, "message": "Rollup merge of #100636 - cutsoy:revert-77716, r=davidtwco\n\nRevert \"Revert \"Allow dynamic linking for iOS/tvOS targets.\"\"\n\nThis reverts commit 16e10bf81ee73f61cf813acef3d5dbbce4f66da2 (PR #77716).\n\nThe original original PR enabled `cdylib` builds for iOS. However this caused problems because:\n\n> This new feature in Rust 1.46 added a lot of headache for iOS builds with cdylib targets. cdylib target is near impossible to build if you are using any crate with native dependencies (ex. openssl, libsodium, zmq). You can't just find .so files for all architectures to perform correct linking. Usual workflow is the following:\n>\n> 1. You build staticlib and rely that native dependencies will be linked as frameworks later\n> 2. You setup right cocoapods in ObjectiveC/Swift wrapper.\n>\n> As cargo doesn't support platform-dependent crate types https://github.com/rust-lang/rust/pull/4881 as a result a lot of projects now broken on Rust 1.46\n\nHowever, this will be soon a thing of the past since 1.64 brings us the long awaited much anticipated `--crate-type` flag.\n\n> I see that this got merged recently: https://github.com/rust-lang/cargo/issues/10083. The --crate-type flag will get stabilized in 1.64. In 1.64, you could still get a successful iOS staticlib with cargo build --crate-type=statclib even if the crate has cdylib targets too. If I'm not mistaken, this solves the problem too so this PR could be reverted in 1.64 with relatively little headache.\n\nSo summing up, I think this PR can be reverted in 1.64. \ud83e\udd1e", "tree": {"sha": "e37820d36ace6ef8d0db31bf574b6249f2d94e2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e37820d36ace6ef8d0db31bf574b6249f2d94e2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e81b994868502bfcfc9e497c8c930d5b68d2398e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAR2pCRBK7hj4Ov3rIwAAbVwIACBTwCYBVByDQ/mNBxa4Yu3z\ng8/aO8tEbCYF6BN5vA5BPxCAhRbLWWS33/TrKJnOB098FWe4DtFT3uCj8NVduGmD\nay5vS6Nd0rzgQdggPBOBSJusCkcYd8Sdsr/j14P0huyl+p3ILzH+xiB2vTenuXo3\nKzr21gvLkeLiQcs6im7IpjJ1OIFm3F0OQVblTfxoqTfQcCsDuGvyaAsoVCdeJENh\n+SDwAGenzRq6rS88p34vzYlNewhsEb7UNf0MZQgs0CLEQYW16qKagMlKcfys3xw3\n92U6P9dxEgjqsqZS8LRHlxi9pgJLTKIkUT5k9w3VLZ0dEe3RJvySzpbFqs+fwn8=\n=2XKq\n-----END PGP SIGNATURE-----\n", "payload": "tree e37820d36ace6ef8d0db31bf574b6249f2d94e2a\nparent 33a40297d3d81c39925d1ce613ded76af3bd8002\nparent 9233298e71f08404838a1051a5b211255de4b79d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661017513 +0200\ncommitter GitHub <noreply@github.com> 1661017513 +0200\n\nRollup merge of #100636 - cutsoy:revert-77716, r=davidtwco\n\nRevert \"Revert \"Allow dynamic linking for iOS/tvOS targets.\"\"\n\nThis reverts commit 16e10bf81ee73f61cf813acef3d5dbbce4f66da2 (PR #77716).\n\nThe original original PR enabled `cdylib` builds for iOS. However this caused problems because:\n\n> This new feature in Rust 1.46 added a lot of headache for iOS builds with cdylib targets. cdylib target is near impossible to build if you are using any crate with native dependencies (ex. openssl, libsodium, zmq). You can't just find .so files for all architectures to perform correct linking. Usual workflow is the following:\n>\n> 1. You build staticlib and rely that native dependencies will be linked as frameworks later\n> 2. You setup right cocoapods in ObjectiveC/Swift wrapper.\n>\n> As cargo doesn't support platform-dependent crate types https://github.com/rust-lang/rust/pull/4881 as a result a lot of projects now broken on Rust 1.46\n\nHowever, this will be soon a thing of the past since 1.64 brings us the long awaited much anticipated `--crate-type` flag.\n\n> I see that this got merged recently: https://github.com/rust-lang/cargo/issues/10083. The --crate-type flag will get stabilized in 1.64. In 1.64, you could still get a successful iOS staticlib with cargo build --crate-type=statclib even if the crate has cdylib targets too. If I'm not mistaken, this solves the problem too so this PR could be reverted in 1.64 with relatively little headache.\n\nSo summing up, I think this PR can be reverted in 1.64. \ud83e\udd1e\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e81b994868502bfcfc9e497c8c930d5b68d2398e", "html_url": "https://github.com/rust-lang/rust/commit/e81b994868502bfcfc9e497c8c930d5b68d2398e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e81b994868502bfcfc9e497c8c930d5b68d2398e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a40297d3d81c39925d1ce613ded76af3bd8002", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a40297d3d81c39925d1ce613ded76af3bd8002", "html_url": "https://github.com/rust-lang/rust/commit/33a40297d3d81c39925d1ce613ded76af3bd8002"}, {"sha": "9233298e71f08404838a1051a5b211255de4b79d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9233298e71f08404838a1051a5b211255de4b79d", "html_url": "https://github.com/rust-lang/rust/commit/9233298e71f08404838a1051a5b211255de4b79d"}], "stats": {"total": 1, "additions": 0, "deletions": 1}, "files": [{"sha": "49e302676a7b16d413fe42f959d090b20cec31a0", "filename": "compiler/rustc_target/src/spec/apple_sdk_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e81b994868502bfcfc9e497c8c930d5b68d2398e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e81b994868502bfcfc9e497c8c930d5b68d2398e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_sdk_base.rs?ref=e81b994868502bfcfc9e497c8c930d5b68d2398e", "patch": "@@ -65,7 +65,6 @@ pub fn opts(os: &'static str, arch: Arch) -> TargetOptions {\n     TargetOptions {\n         abi: target_abi(arch).into(),\n         cpu: target_cpu(arch).into(),\n-        dynamic_linking: false,\n         link_env_remove: link_env_remove(arch),\n         has_thread_local: false,\n         ..super::apple_base::opts(os, target_arch_name(arch), target_abi(arch))"}]}