{"sha": "0e1d3624e990e84299ab75926c865f19353e9b2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMWQzNjI0ZTk5MGU4NDI5OWFiNzU5MjZjODY1ZjE5MzUzZTliMmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-11T21:43:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T20:25:08Z"}, "message": "pull the common code across user-ty variants up top", "tree": {"sha": "a07e61cce5ecf509f474ed19be9b96252adb454e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a07e61cce5ecf509f474ed19be9b96252adb454e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e1d3624e990e84299ab75926c865f19353e9b2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1d3624e990e84299ab75926c865f19353e9b2f", "html_url": "https://github.com/rust-lang/rust/commit/0e1d3624e990e84299ab75926c865f19353e9b2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e1d3624e990e84299ab75926c865f19353e9b2f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1443ac0aa7d9c877b8fdbefbbd99092a517802d2", "html_url": "https://github.com/rust-lang/rust/commit/1443ac0aa7d9c877b8fdbefbbd99092a517802d2"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "f59bcd53fa77209f8676e913564eaaff6f2f4196", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0e1d3624e990e84299ab75926c865f19353e9b2f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1d3624e990e84299ab75926c865f19353e9b2f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=0e1d3624e990e84299ab75926c865f19353e9b2f", "patch": "@@ -72,26 +72,6 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n         a, v, user_ty, locations\n     );\n \n-    let b = match user_ty {\n-        UserTypeAnnotation::Ty(canonical_ty) => {\n-            let (ty, _) =\n-                infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_ty);\n-            ty\n-        }\n-        UserTypeAnnotation::FnDef(def_id, canonical_substs) => {\n-            let (UserSubsts { substs, user_self_ty }, _) =\n-                infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_substs);\n-            assert!(user_self_ty.is_none()); // TODO for now\n-            infcx.tcx.mk_fn_def(def_id, substs)\n-        }\n-        UserTypeAnnotation::AdtDef(adt_def, canonical_substs) => {\n-            let (UserSubsts { substs, user_self_ty }, _) =\n-                infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_substs);\n-            assert!(user_self_ty.is_none()); // TODO for now\n-            infcx.tcx.mk_adt(adt_def, substs)\n-        }\n-    };\n-\n     // The `TypeRelating` code assumes that the \"canonical variables\"\n     // appear in the \"a\" side, so flip `Contravariant` ambient\n     // variance to get the right relationship.\n@@ -102,9 +82,41 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n         NllTypeRelatingDelegate::new(infcx, borrowck_context, locations, category),\n         v1,\n     );\n-    type_relating.relate(&b, &a)?;\n \n-    Ok(b)\n+    match user_ty {\n+        UserTypeAnnotation::Ty(canonical_ty) => {\n+            let (ty, _) =\n+                infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_ty);\n+            type_relating.relate(&ty, &a)?;\n+            Ok(ty)\n+        }\n+        UserTypeAnnotation::FnDef(def_id, canonical_substs) => {\n+            let (\n+                UserSubsts {\n+                    substs,\n+                    user_self_ty,\n+                },\n+                _,\n+            ) = infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_substs);\n+            assert!(user_self_ty.is_none()); // TODO for now\n+            let ty = infcx.tcx.mk_fn_def(def_id, substs);\n+            type_relating.relate(&ty, &a)?;\n+            Ok(ty)\n+        }\n+        UserTypeAnnotation::AdtDef(adt_def, canonical_substs) => {\n+            let (\n+                UserSubsts {\n+                    substs,\n+                    user_self_ty,\n+                },\n+                _,\n+            ) = infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_substs);\n+            assert!(user_self_ty.is_none()); // TODO for now\n+            let ty = infcx.tcx.mk_adt(adt_def, substs);\n+            type_relating.relate(&ty, &a)?;\n+            Ok(ty)\n+        }\n+    }\n }\n \n struct NllTypeRelatingDelegate<'me, 'bccx: 'me, 'gcx: 'tcx, 'tcx: 'bccx> {"}]}