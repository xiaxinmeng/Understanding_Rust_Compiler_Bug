{"sha": "12120409d56ecfb5bd8ddd06bfecd0443b043834", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMTIwNDA5ZDU2ZWNmYjViZDhkZGQwNmJmZWNkMDQ0M2IwNDM4MzQ=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-12T03:58:30Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-19T11:29:22Z"}, "message": "Move `sys::vxworks` code to `sys::unix`", "tree": {"sha": "84e16a54eade27bb3a9747cf473088d5e578d8dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e16a54eade27bb3a9747cf473088d5e578d8dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12120409d56ecfb5bd8ddd06bfecd0443b043834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12120409d56ecfb5bd8ddd06bfecd0443b043834", "html_url": "https://github.com/rust-lang/rust/commit/12120409d56ecfb5bd8ddd06bfecd0443b043834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12120409d56ecfb5bd8ddd06bfecd0443b043834/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62652865b6029b4776a7c03efa13a37b15c9b953", "url": "https://api.github.com/repos/rust-lang/rust/commits/62652865b6029b4776a7c03efa13a37b15c9b953", "html_url": "https://github.com/rust-lang/rust/commit/62652865b6029b4776a7c03efa13a37b15c9b953"}], "stats": {"total": 277, "additions": 64, "deletions": 213}, "files": [{"sha": "2450a7aac5ede3b02fd34cf7324c75661d59f735", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=12120409d56ecfb5bd8ddd06bfecd0443b043834", "patch": "@@ -25,10 +25,7 @@\n mod common;\n \n cfg_if::cfg_if! {\n-    if #[cfg(target_os = \"vxworks\")] {\n-        mod vxworks;\n-        pub use self::vxworks::*;\n-    } else if #[cfg(unix)] {\n+    if #[cfg(unix)] {\n         mod unix;\n         pub use self::unix::*;\n     } else if #[cfg(windows)] {"}, {"sha": "3a88dc083b06c735fc0274abeea9ea357dfbe659", "filename": "library/std/src/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fenv.rs?ref=12120409d56ecfb5bd8ddd06bfecd0443b043834", "patch": "@@ -173,3 +173,14 @@ pub mod os {\n     pub const EXE_SUFFIX: &str = \"\";\n     pub const EXE_EXTENSION: &str = \"\";\n }\n+\n+#[cfg(target_os = \"vxworks\")]\n+pub mod os {\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"vxworks\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n+}"}, {"sha": "735bf35a3ced6fc367ee523ce136a30cfb0afcfb", "filename": "library/std/src/sys/unix/ext/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs?ref=12120409d56ecfb5bd8ddd06bfecd0443b043834", "patch": "@@ -62,6 +62,8 @@ cfg_if::cfg_if! {\n         use crate::os::redox as platform;\n         #[cfg(target_os = \"solaris\")]\n         use crate::os::solaris as platform;\n+        #[cfg(target_os = \"vxworks\")]\n+        use crate::os::vxworks as platform;\n     }\n }\n "}, {"sha": "1316835a89d12f7ef84121793cb72ba395afec2b", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=12120409d56ecfb5bd8ddd06bfecd0443b043834", "patch": "@@ -71,6 +71,7 @@ pub fn init() {\n         } else if #[cfg(not(any(\n             target_os = \"emscripten\",\n             target_os = \"fuchsia\",\n+            target_os = \"vxworks\",\n             // The poll on Darwin doesn't set POLLNVAL for closed fds.\n             target_os = \"macos\",\n             target_os = \"ios\","}, {"sha": "f67c70c01772fd7d7a5dd648ca8c1fbab5a08f33", "filename": "library/std/src/sys/unix/process/mod.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs?ref=12120409d56ecfb5bd8ddd06bfecd0443b043834", "patch": "@@ -4,11 +4,17 @@ pub use crate::ffi::OsString as EnvKey;\n pub use crate::sys_common::process::CommandEnvs;\n \n mod process_common;\n-#[cfg(not(target_os = \"fuchsia\"))]\n-#[path = \"process_unix.rs\"]\n-mod process_inner;\n-#[cfg(target_os = \"fuchsia\")]\n-#[path = \"process_fuchsia.rs\"]\n-mod process_inner;\n-#[cfg(target_os = \"fuchsia\")]\n-mod zircon;\n+\n+cfg_if::cfg_if! {\n+    if #[cfg(target_os = \"fuchsia\")] {\n+        #[path = \"process_fuchsia.rs\"]\n+        mod process_inner;\n+        mod zircon;\n+    } else if #[cfg(target_os = \"vxworks\")] {\n+        #[path = \"process_vxworks.rs\"]\n+        mod process_inner;\n+    } else {\n+        #[path = \"process_unix.rs\"]\n+        mod process_inner;\n+    }\n+}"}, {"sha": "68605c2dfeebd53dee7b0d5ebab20a64ac20a6a7", "filename": "library/std/src/sys/unix/process/process_vxworks.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs?ref=12120409d56ecfb5bd8ddd06bfecd0443b043834", "patch": "@@ -68,7 +68,7 @@ impl Command {\n             let stack_size = thread::min_stack();\n \n             // ensure that access to the environment is synchronized\n-            let _lock = sys::os::env_lock();\n+            let _lock = sys::os::env_read_lock();\n \n             let ret = libc::rtpSpawn(\n                 self.get_program_cstr().as_ptr(),", "previous_filename": "library/std/src/sys/vxworks/process/process_vxworks.rs"}, {"sha": "44f9eabc319a0c968621c37d255fdbdb096a3a50", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=12120409d56ecfb5bd8ddd06bfecd0443b043834", "patch": "@@ -18,7 +18,8 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n     not(target_os = \"freebsd\"),\n     not(target_os = \"netbsd\"),\n     not(target_os = \"fuchsia\"),\n-    not(target_os = \"redox\")\n+    not(target_os = \"redox\"),\n+    not(target_os = \"vxworks\")\n ))]\n mod imp {\n     use crate::fs::File;\n@@ -237,3 +238,29 @@ mod imp {\n         file.read_exact(v).expect(\"failed to read rand:\")\n     }\n }\n+\n+#[cfg(target_os = \"vxworks\")]\n+mod imp {\n+    use crate::io;\n+    use core::sync::atomic::{AtomicBool, Ordering::Relaxed};\n+\n+    pub fn fill_bytes(v: &mut [u8]) {\n+        static RNG_INIT: AtomicBool = AtomicBool::new(false);\n+        while !RNG_INIT.load(Relaxed) {\n+            let ret = unsafe { libc::randSecure() };\n+            if ret < 0 {\n+                panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n+            } else if ret > 0 {\n+                RNG_INIT.store(true, Relaxed);\n+                break;\n+            }\n+            unsafe { libc::usleep(10) };\n+        }\n+        let ret = unsafe {\n+            libc::randABytes(v.as_mut_ptr() as *mut libc::c_uchar, v.len() as libc::c_int)\n+        };\n+        if ret < 0 {\n+            panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n+        }\n+    }\n+}"}, {"sha": "c3f410353b915bcd212e20b967b1ed2067273c1d", "filename": "library/std/src/sys/unix/thread_local_dtor.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12120409d56ecfb5bd8ddd06bfecd0443b043834/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs?ref=12120409d56ecfb5bd8ddd06bfecd0443b043834", "patch": "@@ -92,3 +92,9 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n         }\n     }\n }\n+\n+#[cfg(target_os = \"vxworks\")]\n+pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n+    use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n+    register_dtor_fallback(t, dtor);\n+}"}, {"sha": "fe1aedd58590bb4acdff4456213b9855d7c8cfc1", "filename": "library/std/src/sys/vxworks/env.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62652865b6029b4776a7c03efa13a37b15c9b953/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62652865b6029b4776a7c03efa13a37b15c9b953/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fenv.rs?ref=62652865b6029b4776a7c03efa13a37b15c9b953", "patch": "@@ -1,9 +0,0 @@\n-pub mod os {\n-    pub const FAMILY: &str = \"vxworks\";\n-    pub const OS: &str = \"vxworks\";\n-    pub const DLL_PREFIX: &str = \"lib\";\n-    pub const DLL_SUFFIX: &str = \".so\";\n-    pub const DLL_EXTENSION: &str = \"so\";\n-    pub const EXE_SUFFIX: &str = \"\";\n-    pub const EXE_EXTENSION: &str = \"\";\n-}"}, {"sha": "12d0147a129817eaffa1ad3ddbe91ed38b50ab97", "filename": "library/std/src/sys/vxworks/mod.rs", "status": "removed", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/62652865b6029b4776a7c03efa13a37b15c9b953/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62652865b6029b4776a7c03efa13a37b15c9b953/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fmod.rs?ref=62652865b6029b4776a7c03efa13a37b15c9b953", "patch": "@@ -1,138 +0,0 @@\n-#![allow(dead_code)]\n-#![allow(missing_docs, nonstandard_style)]\n-\n-use crate::io::ErrorKind;\n-\n-pub use self::rand::hashmap_random_keys;\n-pub use crate::os::vxworks as platform;\n-pub use libc::strlen;\n-\n-#[macro_use]\n-#[path = \"../unix/weak.rs\"]\n-pub mod weak;\n-\n-#[path = \"../unix/alloc.rs\"]\n-pub mod alloc;\n-#[path = \"../unix/args.rs\"]\n-pub mod args;\n-#[path = \"../unix/cmath.rs\"]\n-pub mod cmath;\n-#[path = \"../unix/condvar.rs\"]\n-pub mod condvar;\n-pub mod env;\n-#[path = \"../unix/ext/mod.rs\"]\n-pub mod ext;\n-#[path = \"../unix/fd.rs\"]\n-pub mod fd;\n-#[path = \"../unix/fs.rs\"]\n-pub mod fs;\n-#[path = \"../unix/io.rs\"]\n-pub mod io;\n-#[path = \"../unix/memchr.rs\"]\n-pub mod memchr;\n-#[path = \"../unix/mutex.rs\"]\n-pub mod mutex;\n-#[path = \"../unix/net.rs\"]\n-pub mod net;\n-#[path = \"../unix/os.rs\"]\n-pub mod os;\n-#[path = \"../unix/path.rs\"]\n-pub mod path;\n-#[path = \"../unix/pipe.rs\"]\n-pub mod pipe;\n-pub mod process;\n-pub mod rand;\n-#[path = \"../unix/rwlock.rs\"]\n-pub mod rwlock;\n-#[path = \"../unix/stack_overflow.rs\"]\n-pub mod stack_overflow;\n-#[path = \"../unix/stdio.rs\"]\n-pub mod stdio;\n-#[path = \"../unix/thread.rs\"]\n-pub mod thread;\n-pub mod thread_local_dtor;\n-#[path = \"../unix/thread_local_key.rs\"]\n-pub mod thread_local_key;\n-#[path = \"../unix/time.rs\"]\n-pub mod time;\n-\n-pub use crate::sys_common::os_str_bytes as os_str;\n-\n-#[cfg(not(test))]\n-pub fn init() {\n-    // ignore SIGPIPE\n-    unsafe {\n-        assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n-    }\n-}\n-\n-pub use libc::signal;\n-\n-pub fn decode_error_kind(errno: i32) -> ErrorKind {\n-    match errno as libc::c_int {\n-        libc::ECONNREFUSED => ErrorKind::ConnectionRefused,\n-        libc::ECONNRESET => ErrorKind::ConnectionReset,\n-        libc::EPERM | libc::EACCES => ErrorKind::PermissionDenied,\n-        libc::EPIPE => ErrorKind::BrokenPipe,\n-        libc::ENOTCONN => ErrorKind::NotConnected,\n-        libc::ECONNABORTED => ErrorKind::ConnectionAborted,\n-        libc::EADDRNOTAVAIL => ErrorKind::AddrNotAvailable,\n-        libc::EADDRINUSE => ErrorKind::AddrInUse,\n-        libc::ENOENT => ErrorKind::NotFound,\n-        libc::EINTR => ErrorKind::Interrupted,\n-        libc::EINVAL => ErrorKind::InvalidInput,\n-        libc::ETIMEDOUT => ErrorKind::TimedOut,\n-        libc::EEXIST => ErrorKind::AlreadyExists,\n-        libc::ENOSYS => ErrorKind::Unsupported,\n-\n-        // These two constants can have the same value on some systems,\n-        // but different values on others, so we can't use a match\n-        // clause\n-        x if x == libc::EAGAIN || x == libc::EWOULDBLOCK => ErrorKind::WouldBlock,\n-\n-        _ => ErrorKind::Other,\n-    }\n-}\n-\n-#[doc(hidden)]\n-pub trait IsMinusOne {\n-    fn is_minus_one(&self) -> bool;\n-}\n-\n-macro_rules! impl_is_minus_one {\n-    ($($t:ident)*) => ($(impl IsMinusOne for $t {\n-        fn is_minus_one(&self) -> bool {\n-            *self == -1\n-        }\n-    })*)\n-}\n-\n-impl_is_minus_one! { i8 i16 i32 i64 isize }\n-\n-pub fn cvt<T: IsMinusOne>(t: T) -> crate::io::Result<T> {\n-    if t.is_minus_one() { Err(crate::io::Error::last_os_error()) } else { Ok(t) }\n-}\n-\n-pub fn cvt_r<T, F>(mut f: F) -> crate::io::Result<T>\n-where\n-    T: IsMinusOne,\n-    F: FnMut() -> T,\n-{\n-    loop {\n-        match cvt(f()) {\n-            Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n-            other => return other,\n-        }\n-    }\n-}\n-\n-// On Unix-like platforms, libc::abort will unregister signal handlers\n-// including the SIGABRT handler, preventing the abort from being blocked, and\n-// fclose streams, with the side effect of flushing them so libc buffered\n-// output will be printed.  Additionally the shell will generally print a more\n-// understandable error message like \"Abort trap\" rather than \"Illegal\n-// instruction\" that intrinsics::abort would cause, as intrinsics::abort is\n-// implemented as an illegal instruction.\n-pub fn abort_internal() -> ! {\n-    unsafe { libc::abort() }\n-}"}, {"sha": "dc6130eaa24a8ad5b3dabae4191089544990cf14", "filename": "library/std/src/sys/vxworks/process/mod.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62652865b6029b4776a7c03efa13a37b15c9b953/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62652865b6029b4776a7c03efa13a37b15c9b953/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fprocess%2Fmod.rs?ref=62652865b6029b4776a7c03efa13a37b15c9b953", "patch": "@@ -1,9 +0,0 @@\n-pub use self::process_common::{Command, CommandArgs, ExitCode, Stdio, StdioPipes};\n-pub use self::process_inner::{ExitStatus, Process};\n-pub use crate::ffi::OsString as EnvKey;\n-pub use crate::sys_common::process::CommandEnvs;\n-\n-#[path = \"../../unix/process/process_common.rs\"]\n-mod process_common;\n-#[path = \"process_vxworks.rs\"]\n-mod process_inner;"}, {"sha": "3a1ff5fd3b9c64c4edb2ac96368b647f08aba4dd", "filename": "library/std/src/sys/vxworks/rand.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/62652865b6029b4776a7c03efa13a37b15c9b953/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62652865b6029b4776a7c03efa13a37b15c9b953/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Frand.rs?ref=62652865b6029b4776a7c03efa13a37b15c9b953", "patch": "@@ -1,36 +0,0 @@\n-use crate::mem;\n-use crate::slice;\n-\n-pub fn hashmap_random_keys() -> (u64, u64) {\n-    let mut v = (0, 0);\n-    unsafe {\n-        let view = slice::from_raw_parts_mut(&mut v as *mut _ as *mut u8, mem::size_of_val(&v));\n-        imp::fill_bytes(view);\n-    }\n-    return v;\n-}\n-\n-mod imp {\n-    use crate::io;\n-    use core::sync::atomic::{AtomicBool, Ordering::Relaxed};\n-\n-    pub fn fill_bytes(v: &mut [u8]) {\n-        static RNG_INIT: AtomicBool = AtomicBool::new(false);\n-        while !RNG_INIT.load(Relaxed) {\n-            let ret = unsafe { libc::randSecure() };\n-            if ret < 0 {\n-                panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n-            } else if ret > 0 {\n-                RNG_INIT.store(true, Relaxed);\n-                break;\n-            }\n-            unsafe { libc::usleep(10) };\n-        }\n-        let ret = unsafe {\n-            libc::randABytes(v.as_mut_ptr() as *mut libc::c_uchar, v.len() as libc::c_int)\n-        };\n-        if ret < 0 {\n-            panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n-        }\n-    }\n-}"}, {"sha": "5391ed83ebc36267e5932ba1723411bdc3e722a6", "filename": "library/std/src/sys/vxworks/thread_local_dtor.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/62652865b6029b4776a7c03efa13a37b15c9b953/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62652865b6029b4776a7c03efa13a37b15c9b953/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fvxworks%2Fthread_local_dtor.rs?ref=62652865b6029b4776a7c03efa13a37b15c9b953", "patch": "@@ -1,7 +0,0 @@\n-#![cfg(target_thread_local)]\n-#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n-\n-pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n-    use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n-    register_dtor_fallback(t, dtor);\n-}"}]}