{"sha": "1363a4b3522feccdba4e4fc19cacb80f50e26e9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNjNhNGIzNTIyZmVjY2RiYTRlNGZjMTljYWNiODBmNTBlMjZlOWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-23T18:35:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-23T18:35:02Z"}, "message": "Rollup merge of #71442 - TimDiekmann:allocref-mut-ref, r=Amanieu\n\nAdd a \"by reference\" adaptor for `AllocRef`\n\nFixes rust-lang/wg-allocators#53\n\nr? @Amanieu", "tree": {"sha": "b929e87fd9e67ee25eef5a93703c81d81ff3f4db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b929e87fd9e67ee25eef5a93703c81d81ff3f4db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1363a4b3522feccdba4e4fc19cacb80f50e26e9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeod/XCRBK7hj4Ov3rIwAAdHIIAJZ4XkWOZLkI9IX8gFk0XJaP\ntTtzke1IvIwdmh045RL2tS39vV8nLRr6VYEzQGkR6VWsbFeFwiA0zKOhsP5JpU4r\nU6MIfc0bRacUQzJrLaWyqILzCUM6SN97t94dFcr2+PeeQyDqR9gdIkptVFAIlQ14\ntv/GHedGB054A69ZfLvqqiT79fu4RpZmpdFGynTUG5GFN/i3AsbjNnfiiGx9YkcY\n9V/nF556557VTCtdXw2mkkZ7zazwvmhLmheL0W8btWWeXJySW0UB4cU7lty133UL\n/3B0SmVNLAydmgGzFG7+A/VH3LKBbZwzW3Bc5mu0VxxFD3Bw8Xn/dBgAmQQdk3M=\n=hAj/\n-----END PGP SIGNATURE-----\n", "payload": "tree b929e87fd9e67ee25eef5a93703c81d81ff3f4db\nparent 0959802a57987e4ba052f5b8d0fa110aa918ef1c\nparent e60268076ff4c234cda9cff06f0d495fc6c3c8f6\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587666902 +0200\ncommitter GitHub <noreply@github.com> 1587666902 +0200\n\nRollup merge of #71442 - TimDiekmann:allocref-mut-ref, r=Amanieu\n\nAdd a \"by reference\" adaptor for `AllocRef`\n\nFixes rust-lang/wg-allocators#53\n\nr? @Amanieu\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1363a4b3522feccdba4e4fc19cacb80f50e26e9a", "html_url": "https://github.com/rust-lang/rust/commit/1363a4b3522feccdba4e4fc19cacb80f50e26e9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1363a4b3522feccdba4e4fc19cacb80f50e26e9a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0959802a57987e4ba052f5b8d0fa110aa918ef1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0959802a57987e4ba052f5b8d0fa110aa918ef1c", "html_url": "https://github.com/rust-lang/rust/commit/0959802a57987e4ba052f5b8d0fa110aa918ef1c"}, {"sha": "e60268076ff4c234cda9cff06f0d495fc6c3c8f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e60268076ff4c234cda9cff06f0d495fc6c3c8f6", "html_url": "https://github.com/rust-lang/rust/commit/e60268076ff4c234cda9cff06f0d495fc6c3c8f6"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "1346fbd4810038caf3064f5dd19f9dfcc90aebe2", "filename": "src/libcore/alloc/mod.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1363a4b3522feccdba4e4fc19cacb80f50e26e9a/src%2Flibcore%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1363a4b3522feccdba4e4fc19cacb80f50e26e9a/src%2Flibcore%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc%2Fmod.rs?ref=1363a4b3522feccdba4e4fc19cacb80f50e26e9a", "patch": "@@ -364,4 +364,51 @@ pub unsafe trait AllocRef {\n             }\n         }\n     }\n+\n+    /// Creates a \"by reference\" adaptor for this instance of `AllocRef`.\n+    ///\n+    /// The returned adaptor also implements `AllocRef` and will simply borrow this.\n+    #[inline(always)]\n+    fn by_ref(&mut self) -> &mut Self {\n+        self\n+    }\n+}\n+\n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+unsafe impl<A> AllocRef for &mut A\n+where\n+    A: AllocRef + ?Sized,\n+{\n+    #[inline]\n+    fn alloc(&mut self, layout: Layout, init: AllocInit) -> Result<MemoryBlock, AllocErr> {\n+        (**self).alloc(layout, init)\n+    }\n+\n+    #[inline]\n+    unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {\n+        (**self).dealloc(ptr, layout)\n+    }\n+\n+    #[inline]\n+    unsafe fn grow(\n+        &mut self,\n+        ptr: NonNull<u8>,\n+        layout: Layout,\n+        new_size: usize,\n+        placement: ReallocPlacement,\n+        init: AllocInit,\n+    ) -> Result<MemoryBlock, AllocErr> {\n+        (**self).grow(ptr, layout, new_size, placement, init)\n+    }\n+\n+    #[inline]\n+    unsafe fn shrink(\n+        &mut self,\n+        ptr: NonNull<u8>,\n+        layout: Layout,\n+        new_size: usize,\n+        placement: ReallocPlacement,\n+    ) -> Result<MemoryBlock, AllocErr> {\n+        (**self).shrink(ptr, layout, new_size, placement)\n+    }\n }"}]}