{"sha": "a24924f6834ea6e5bd813d006a12aef8e5dbd5e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNDkyNGY2ODM0ZWE2ZTViZDgxM2QwMDZhMTJhZWY4ZTVkYmQ1ZTk=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-05-31T18:22:59Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-11T20:48:57Z"}, "message": "Move Unstable Book sections for #[global_allocator] and System to std::alloc docs", "tree": {"sha": "8af929586f9bc74184b8682ebaa486c2a97a8dfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8af929586f9bc74184b8682ebaa486c2a97a8dfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a24924f6834ea6e5bd813d006a12aef8e5dbd5e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a24924f6834ea6e5bd813d006a12aef8e5dbd5e9", "html_url": "https://github.com/rust-lang/rust/commit/a24924f6834ea6e5bd813d006a12aef8e5dbd5e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a24924f6834ea6e5bd813d006a12aef8e5dbd5e9/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd6e08a1e6bbccd00e70b23ac72dd9a9a633be30", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6e08a1e6bbccd00e70b23ac72dd9a9a633be30", "html_url": "https://github.com/rust-lang/rust/commit/fd6e08a1e6bbccd00e70b23ac72dd9a9a633be30"}], "stats": {"total": 233, "additions": 85, "deletions": 148}, "files": [{"sha": "7dfdc4877316eb44135a6b53cfacd70fb68ac3a6", "filename": "src/doc/unstable-book/src/language-features/global-allocator.md", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/fd6e08a1e6bbccd00e70b23ac72dd9a9a633be30/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-allocator.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd6e08a1e6bbccd00e70b23ac72dd9a9a633be30/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-allocator.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal-allocator.md?ref=fd6e08a1e6bbccd00e70b23ac72dd9a9a633be30", "patch": "@@ -1,72 +0,0 @@\n-# `global_allocator`\n-\n-The tracking issue for this feature is: [#27389]\n-\n-[#27389]: https://github.com/rust-lang/rust/issues/27389\n-\n-------------------------\n-\n-Rust programs may need to change the allocator that they're running with from\n-time to time. This use case is distinct from an allocator-per-collection (e.g. a\n-`Vec` with a custom allocator) and instead is more related to changing the\n-global default allocator, e.g. what `Vec<T>` uses by default.\n-\n-Currently Rust programs don't have a specified global allocator. The compiler\n-may link to a version of [jemalloc] on some platforms, but this is not\n-guaranteed. Libraries, however, like cdylibs and staticlibs are guaranteed\n-to use the \"system allocator\" which means something like `malloc` on Unixes and\n-`HeapAlloc` on Windows.\n-\n-[jemalloc]: https://github.com/jemalloc/jemalloc\n-\n-The `#[global_allocator]` attribute, however, allows configuring this choice.\n-You can use this to implement a completely custom global allocator to route all\n-default allocation requests to a custom object. Defined in [RFC 1974] usage\n-looks like:\n-\n-[RFC 1974]: https://github.com/rust-lang/rfcs/pull/1974\n-\n-```rust\n-#![feature(global_allocator, allocator_api, heap_api)]\n-\n-use std::alloc::{GlobalAlloc, System, Layout};\n-use std::ptr::NonNull;\n-\n-struct MyAllocator;\n-\n-unsafe impl GlobalAlloc for MyAllocator {\n-    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        System.alloc(layout)\n-    }\n-\n-    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n-        System.dealloc(ptr, layout)\n-    }\n-}\n-\n-#[global_allocator]\n-static GLOBAL: MyAllocator = MyAllocator;\n-\n-fn main() {\n-    // This `Vec` will allocate memory through `GLOBAL` above\n-    let mut v = Vec::new();\n-    v.push(1);\n-}\n-```\n-\n-And that's it! The `#[global_allocator]` attribute is applied to a `static`\n-which implements the `Alloc` trait in the `std::alloc` module. Note, though,\n-that the implementation is defined for `&MyAllocator`, not just `MyAllocator`.\n-You may wish, however, to also provide `Alloc for MyAllocator` for other use\n-cases.\n-\n-A crate can only have one instance of `#[global_allocator]` and this instance\n-may be loaded through a dependency. For example `#[global_allocator]` above\n-could have been placed in one of the dependencies loaded through `extern crate`.\n-\n-Note that `Alloc` itself is an `unsafe` trait, with much documentation on the\n-trait itself about usage and for implementors. Extra care should be taken when\n-implementing a global allocator as well as the allocator may be called from many\n-portions of the standard library, such as the panicking routine. As a result it\n-is highly recommended to not panic during allocation and work in as many\n-situations with as few dependencies as possible as well."}, {"sha": "5663b354ac1004e452a48c735652dd452fb7b12d", "filename": "src/doc/unstable-book/src/library-features/alloc-system.md", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fd6e08a1e6bbccd00e70b23ac72dd9a9a633be30/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd6e08a1e6bbccd00e70b23ac72dd9a9a633be30/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md?ref=fd6e08a1e6bbccd00e70b23ac72dd9a9a633be30", "patch": "@@ -1,76 +0,0 @@\n-# `alloc_system`\n-\n-The tracking issue for this feature is: [#32838]\n-\n-[#32838]: https://github.com/rust-lang/rust/issues/32838\n-\n-See also [`global_allocator`](language-features/global-allocator.html).\n-\n-------------------------\n-\n-The compiler currently ships two default allocators: `alloc_system` and\n-`alloc_jemalloc` (some targets don't have jemalloc, however). These allocators\n-are normal Rust crates and contain an implementation of the routines to\n-allocate and deallocate memory. The standard library is not compiled assuming\n-either one, and the compiler will decide which allocator is in use at\n-compile-time depending on the type of output artifact being produced.\n-\n-Binaries generated by the compiler will use `alloc_jemalloc` by default (where\n-available). In this situation the compiler \"controls the world\" in the sense of\n-it has power over the final link. Primarily this means that the allocator\n-decision can be left up the compiler.\n-\n-Dynamic and static libraries, however, will use `alloc_system` by default. Here\n-Rust is typically a 'guest' in another application or another world where it\n-cannot authoritatively decide what allocator is in use. As a result it resorts\n-back to the standard APIs (e.g. `malloc` and `free`) for acquiring and releasing\n-memory.\n-\n-# Switching Allocators\n-\n-Although the compiler's default choices may work most of the time, it's often\n-necessary to tweak certain aspects. Overriding the compiler's decision about\n-which allocator is in use is done through the `#[global_allocator]` attribute:\n-\n-```rust,no_run\n-#![feature(alloc_system, global_allocator, allocator_api)]\n-\n-extern crate alloc_system;\n-\n-use alloc_system::System;\n-\n-#[global_allocator]\n-static A: System = System;\n-\n-fn main() {\n-    let a = Box::new(4); // Allocates from the system allocator.\n-    println!(\"{}\", a);\n-}\n-```\n-\n-In this example the binary generated will not link to jemalloc by default but\n-instead use the system allocator. Conversely to generate a dynamic library which\n-uses jemalloc by default one would write:\n-\n-(The `alloc_jemalloc` crate cannot be used to control the global allocator,\n-crate.io\u2019s `jemallocator` crate provides equivalent functionality.)\n-\n-```toml\n-# Cargo.toml\n-[dependencies]\n-jemallocator = \"0.1\"\n-```\n-```rust,ignore\n-#![crate_type = \"dylib\"]\n-\n-extern crate jemallocator;\n-\n-#[global_allocator]\n-static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n-\n-pub fn foo() {\n-    let a = Box::new(4); // Allocates from jemalloc.\n-    println!(\"{}\", a);\n-}\n-# fn main() {}\n-```"}, {"sha": "64348e05de7db16967708aded5d286e613cd75b1", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a24924f6834ea6e5bd813d006a12aef8e5dbd5e9/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24924f6834ea6e5bd813d006a12aef8e5dbd5e9/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=a24924f6834ea6e5bd813d006a12aef8e5dbd5e9", "patch": "@@ -44,6 +44,29 @@ use core::alloc::{Alloc, GlobalAlloc, AllocErr, Layout};\n use core::ptr::NonNull;\n \n /// The default memory allocator provided by the operating system.\n+///\n+/// This is based on `malloc` on Unix platforms and `HeapAlloc` on Windows,\n+/// plus related functions.\n+///\n+/// This type can be used in a `static` item\n+/// with the `#[global_allocator]` attribute\n+/// to force the global allocator to be the system\u2019s one.\n+/// (The default is jemalloc for executables, on some platforms.)\n+///\n+/// ```rust\n+/// use std::alloc::System;\n+///\n+/// #[global_allocator]\n+/// static A: System = System;\n+///\n+/// fn main() {\n+///     let a = Box::new(4); // Allocates from the system allocator.\n+///     println!(\"{}\", a);\n+/// }\n+/// ```\n+///\n+/// It can also be used directly to allocate memory\n+/// independently of the standard library\u2019s global allocator.\n #[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n pub struct System;\n "}, {"sha": "ae74a71dd06815de686c74a615245261056f4af9", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a24924f6834ea6e5bd813d006a12aef8e5dbd5e9/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24924f6834ea6e5bd813d006a12aef8e5dbd5e9/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=a24924f6834ea6e5bd813d006a12aef8e5dbd5e9", "patch": "@@ -9,6 +9,68 @@\n // except according to those terms.\n \n //! Memory allocation APIs\n+//!\n+//! In a given program, the standard library has one \u201cglobal\u201d memory allocator\n+//! that is used for example by `Box<T>` and `Vec<T>`.\n+//!\n+//! Currently the default global allocator is unspecified.\n+//! The compiler may link to a version of [jemalloc] on some platforms,\n+//! but this is not guaranteed.\n+//! Libraries, however, like `cdylib`s and `staticlib`s are guaranteed\n+//! to use the [`System`] by default.\n+//!\n+//! [jemalloc]: https://github.com/jemalloc/jemalloc\n+//! [`System`]: struct.System.html\n+//!\n+//! # The `#[global_allocator]` attribute\n+//!\n+//! This attribute allows configuring the choice of global allocator.\n+//! You can use this to implement a completely custom global allocator\n+//! to route all default allocation requests to a custom object.\n+//!\n+//! ```rust\n+//! use std::alloc::{GlobalAlloc, System, Layout};\n+//!\n+//! struct MyAllocator;\n+//!\n+//! unsafe impl GlobalAlloc for MyAllocator {\n+//!     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+//!         System.alloc(layout)\n+//!     }\n+//!\n+//!     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n+//!         System.dealloc(ptr, layout)\n+//!     }\n+//! }\n+//!\n+//! #[global_allocator]\n+//! static GLOBAL: MyAllocator = MyAllocator;\n+//!\n+//! fn main() {\n+//!     // This `Vec` will allocate memory through `GLOBAL` above\n+//!     let mut v = Vec::new();\n+//!     v.push(1);\n+//! }\n+//! ```\n+//!\n+//! The attribute is used on a `static` item whose type implements the\n+//! [`GlobalAlloc`] trait. This type can be provided by an external library:\n+//!\n+//! [`GlobalAlloc`]: ../../core/alloc/trait.GlobalAlloc.html\n+//!\n+//! ```rust,ignore (demonstrates crates.io usage)\n+//! extern crate jemallocator;\n+//!\n+//! use jemallacator::Jemalloc;\n+//!\n+//! #[global_allocator]\n+//! static GLOBAL: Jemalloc = Jemalloc;\n+//!\n+//! fn main() {}\n+//! ```\n+//!\n+//! The `#[global_allocator]` can only be used once in a crate\n+//! or its recursive dependencies.\n \n #![stable(feature = \"alloc_module\", since = \"1.28.0\")]\n "}]}