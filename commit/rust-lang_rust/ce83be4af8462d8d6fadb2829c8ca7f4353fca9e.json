{"sha": "ce83be4af8462d8d6fadb2829c8ca7f4353fca9e", "node_id": "C_kwDOAAsO6NoAKGNlODNiZTRhZjg0NjJkOGQ2ZmFkYjI4MjljOGNhN2Y0MzUzZmNhOWU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-02T03:35:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-11T21:38:56Z"}, "message": "Account for type params", "tree": {"sha": "0b460f1c69c465766c34a054ed2dd8e829b01f40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b460f1c69c465766c34a054ed2dd8e829b01f40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e", "html_url": "https://github.com/rust-lang/rust/commit/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2024aa48b4e92894e6f780a13c03db7605e1a5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2024aa48b4e92894e6f780a13c03db7605e1a5f2", "html_url": "https://github.com/rust-lang/rust/commit/2024aa48b4e92894e6f780a13c03db7605e1a5f2"}], "stats": {"total": 119, "additions": 81, "deletions": 38}, "files": [{"sha": "bcc8200480497732b3e6afa63ab66fce033e4b38", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 59, "deletions": 29, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ce83be4af8462d8d6fadb2829c8ca7f4353fca9e", "patch": "@@ -1363,19 +1363,70 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             // Remove all the hir desugaring contexts while maintaining the macro contexts.\n             span.remove_mark();\n         }\n-        let mut suggested = false;\n-\n-        let mut expr_finder = super::FindExprBySpan { span, result: None };\n+        let mut expr_finder = super::FindExprBySpan::new(span);\n         let Some(hir::Node::Expr(body)) = self.tcx.hir().find(obligation.cause.body_id) else {\n             return false;\n         };\n         expr_finder.visit_expr(&body);\n+        let mut maybe_suggest = |suggested_ty, count, suggestions| {\n+            // Remapping bound vars here\n+            let trait_pred_and_suggested_ty =\n+                trait_pred.map_bound(|trait_pred| (trait_pred, suggested_ty));\n+\n+            let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n+                obligation.param_env,\n+                trait_pred_and_suggested_ty,\n+            );\n+\n+            if self.predicate_may_hold(&new_obligation) {\n+                let msg = if count == 1 {\n+                    \"consider removing the leading `&`-reference\".to_string()\n+                } else {\n+                    format!(\"consider removing {count} leading `&`-references\")\n+                };\n+\n+                err.multipart_suggestion_verbose(\n+                    &msg,\n+                    suggestions,\n+                    Applicability::MachineApplicable,\n+                );\n+                true\n+            } else {\n+                false\n+            }\n+        };\n+\n+        // Maybe suggest removal of borrows from types in type parameters, like in\n+        // `src/test/ui/not-panic/not-panic-safe.rs`.\n         let mut count = 0;\n         let mut suggestions = vec![];\n-        let Some(mut expr) = expr_finder.result else { return false; };\n         // Skipping binder here, remapping below\n         let mut suggested_ty = trait_pred.self_ty().skip_binder();\n+        if let Some(mut hir_ty) = expr_finder.ty_result {\n+            while let hir::TyKind::Ref(_, mut_ty) = &hir_ty.kind {\n+                count += 1;\n+                let span = hir_ty.span.until(mut_ty.ty.span);\n+                suggestions.push((span, String::new()));\n+\n+                let ty::Ref(_, inner_ty, _) = suggested_ty.kind() else {\n+                    break;\n+                };\n+                suggested_ty = *inner_ty;\n+\n+                hir_ty = mut_ty.ty;\n+\n+                if maybe_suggest(suggested_ty, count, suggestions.clone()) {\n+                    return true;\n+                }\n+            }\n+        }\n \n+        // Maybe suggest removal of borrows from expressions, like in `for i in &&&foo {}`.\n+        let Some(mut expr) = expr_finder.result else { return false; };\n+        let mut count = 0;\n+        let mut suggestions = vec![];\n+        // Skipping binder here, remapping below\n+        let mut suggested_ty = trait_pred.self_ty().skip_binder();\n         'outer: loop {\n             while let hir::ExprKind::AddrOf(_, _, borrowed) = expr.kind {\n                 count += 1;\n@@ -1387,35 +1438,14 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 suggestions.push((span, String::new()));\n \n                 let ty::Ref(_, inner_ty, _) = suggested_ty.kind() else {\n-                    break;\n+                    break 'outer;\n                 };\n                 suggested_ty = *inner_ty;\n \n                 expr = borrowed;\n \n-                // Remapping bound vars here\n-                let trait_pred_and_suggested_ty =\n-                    trait_pred.map_bound(|trait_pred| (trait_pred, suggested_ty));\n-\n-                let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n-                    obligation.param_env,\n-                    trait_pred_and_suggested_ty,\n-                );\n-\n-                if self.predicate_may_hold(&new_obligation) {\n-                    let msg = if count == 1 {\n-                        \"consider removing the leading `&`-reference\".to_string()\n-                    } else {\n-                        format!(\"consider removing {count} leading `&`-references\")\n-                    };\n-\n-                    err.multipart_suggestion_verbose(\n-                        &msg,\n-                        suggestions,\n-                        Applicability::MachineApplicable,\n-                    );\n-                    suggested = true;\n-                    break 'outer;\n+                if maybe_suggest(suggested_ty, count, suggestions.clone()) {\n+                    return true;\n                 }\n             }\n             if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = expr.kind\n@@ -1431,7 +1461,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 break 'outer;\n             }\n         }\n-        suggested\n+        false\n     }\n \n     fn suggest_remove_await(&self, obligation: &PredicateObligation<'tcx>, err: &mut Diagnostic) {"}, {"sha": "aee2aa98a60c20a5e75257313d5e2e35e67089e1", "filename": "tests/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e/tests%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e/tests%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=ce83be4af8462d8d6fadb2829c8ca7f4353fca9e", "patch": "@@ -4,25 +4,33 @@ error[E0277]: the trait bound `&'static mut isize: Copy` is not satisfied\n LL |     assert_copy::<&'static mut isize>();\n    |                   ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'static mut isize`\n    |\n-   = help: the trait `Copy` is implemented for `isize`\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |                  ^^^^ required by this bound in `assert_copy`\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     assert_copy::<&'static mut isize>();\n+LL +     assert_copy::<isize>();\n+   |\n \n error[E0277]: the trait bound `&'a mut isize: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:28:19\n    |\n LL |     assert_copy::<&'a mut isize>();\n    |                   ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'a mut isize`\n    |\n-   = help: the trait `Copy` is implemented for `isize`\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |                  ^^^^ required by this bound in `assert_copy`\n+help: consider removing the leading `&`-reference\n+   |\n+LL -     assert_copy::<&'a mut isize>();\n+LL +     assert_copy::<isize>();\n+   |\n \n error[E0277]: the trait bound `Box<isize>: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:31:19"}, {"sha": "1b3c6482ce94fab0607258c3e24d96aa8caf48dc", "filename": "tests/ui/not-panic/not-panic-safe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.rs?ref=ce83be4af8462d8d6fadb2829c8ca7f4353fca9e", "patch": "@@ -5,6 +5,6 @@ use std::panic::UnwindSafe;\n fn assert<T: UnwindSafe + ?Sized>() {}\n \n fn main() {\n-    assert::<&mut i32>();\n-    //~^ ERROR the type `&mut i32` may not be safely transferred across an unwind boundary\n+    assert::<&mut &mut &i32>();\n+    //~^ ERROR the type `&mut &mut &i32` may not be safely transferred across an unwind boundary\n }"}, {"sha": "37a6aee390669c70536d0791887bf53921bc4f55", "filename": "tests/ui/not-panic/not-panic-safe.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce83be4af8462d8d6fadb2829c8ca7f4353fca9e/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr?ref=ce83be4af8462d8d6fadb2829c8ca7f4353fca9e", "patch": "@@ -1,16 +1,21 @@\n-error[E0277]: the type `&mut i32` may not be safely transferred across an unwind boundary\n+error[E0277]: the type `&mut &mut &i32` may not be safely transferred across an unwind boundary\n   --> $DIR/not-panic-safe.rs:8:14\n    |\n-LL |     assert::<&mut i32>();\n-   |              ^^^^^^^^ `&mut i32` may not be safely transferred across an unwind boundary\n+LL |     assert::<&mut &mut &i32>();\n+   |              ^^^^^^^^^^^^^^ `&mut &mut &i32` may not be safely transferred across an unwind boundary\n    |\n-   = help: the trait `UnwindSafe` is not implemented for `&mut i32`\n-   = note: `UnwindSafe` is implemented for `&i32`, but not for `&mut i32`\n+   = help: the trait `UnwindSafe` is not implemented for `&mut &mut &i32`\n+   = note: `UnwindSafe` is implemented for `&&mut &i32`, but not for `&mut &mut &i32`\n note: required by a bound in `assert`\n   --> $DIR/not-panic-safe.rs:5:14\n    |\n LL | fn assert<T: UnwindSafe + ?Sized>() {}\n    |              ^^^^^^^^^^ required by this bound in `assert`\n+help: consider removing 2 leading `&`-references\n+   |\n+LL -     assert::<&mut &mut &i32>();\n+LL +     assert::<&i32>();\n+   |\n \n error: aborting due to previous error\n "}]}