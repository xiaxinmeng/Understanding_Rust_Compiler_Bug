{"sha": "585e283769faaef8898f82b37224e0a16a4f5e2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NWUyODM3NjlmYWFlZjg4OThmODJiMzcyMjRlMGExNmE0ZjVlMmI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-16T00:26:56Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-18T20:56:14Z"}, "message": "Add provided method information to ty::Method. Get rid of ProvidedMethodSource.", "tree": {"sha": "f0434447cf544a69bc5bb8b984d56e3a67aec0c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0434447cf544a69bc5bb8b984d56e3a67aec0c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/585e283769faaef8898f82b37224e0a16a4f5e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/585e283769faaef8898f82b37224e0a16a4f5e2b", "html_url": "https://github.com/rust-lang/rust/commit/585e283769faaef8898f82b37224e0a16a4f5e2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/585e283769faaef8898f82b37224e0a16a4f5e2b/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ea61204f6bae64955f57dda7d3768bc9ba2dd55", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea61204f6bae64955f57dda7d3768bc9ba2dd55", "html_url": "https://github.com/rust-lang/rust/commit/2ea61204f6bae64955f57dda7d3768bc9ba2dd55"}], "stats": {"total": 172, "additions": 77, "deletions": 95}, "files": [{"sha": "6604ef5df34ca4851dd8538091200a39fcc969b4", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -174,14 +174,6 @@ fn item_parent_item(d: ebml::Doc) -> Option<ast::def_id> {\n     None\n }\n \n-fn translated_parent_item_opt(cnum: ast::crate_num, d: ebml::Doc) ->\n-        Option<ast::def_id> {\n-    let trait_did_opt = item_parent_item(d);\n-    do trait_did_opt.map |trait_did| {\n-        ast::def_id { crate: cnum, node: trait_did.node }\n-    }\n-}\n-\n fn item_reqd_and_translated_parent_item(cnum: ast::crate_num,\n                                         d: ebml::Doc) -> ast::def_id {\n     let trait_did = item_parent_item(d).expect(\"item without parent\");\n@@ -323,13 +315,19 @@ fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n         UnsafeFn  => dl_def(ast::def_fn(did, ast::unsafe_fn)),\n         Fn        => dl_def(ast::def_fn(did, ast::impure_fn)),\n         ForeignFn => dl_def(ast::def_fn(did, ast::extern_fn)),\n-        UnsafeStaticMethod => {\n-            let trait_did_opt = translated_parent_item_opt(cnum, item);\n-            dl_def(ast::def_static_method(did, trait_did_opt, ast::unsafe_fn))\n-        }\n-        StaticMethod => {\n-            let trait_did_opt = translated_parent_item_opt(cnum, item);\n-            dl_def(ast::def_static_method(did, trait_did_opt, ast::impure_fn))\n+        StaticMethod | UnsafeStaticMethod => {\n+            let purity = if fam == UnsafeStaticMethod { ast::unsafe_fn } else\n+                { ast::impure_fn };\n+            // def_static_method carries an optional field of its enclosing\n+            // *trait*, but not an inclosing Impl (if this is an inherent\n+            // static method). So we need to detect whether this is in\n+            // a trait or not, which we do through the mildly hacky\n+            // way of checking whether there is a trait_method_sort.\n+            let trait_did_opt = if reader::maybe_get_doc(\n+                  item, tag_item_trait_method_sort).is_some() {\n+                Some(item_reqd_and_translated_parent_item(cnum, item))\n+            } else { None };\n+            dl_def(ast::def_static_method(did, trait_did_opt, purity))\n         }\n         Type | ForeignType => dl_def(ast::def_ty(did)),\n         Mod => dl_def(ast::def_mod(did)),\n@@ -837,6 +835,8 @@ pub fn get_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n {\n     let method_doc = lookup_item(id, cdata.data);\n     let def_id = item_def_id(method_doc, cdata);\n+    let container_id = item_reqd_and_translated_parent_item(cdata.cnum,\n+                                                            method_doc);\n     let name = item_name(intr, method_doc);\n     let type_param_defs = item_ty_param_defs(method_doc, tcx, cdata,\n                                              tag_item_method_tps);\n@@ -855,7 +855,9 @@ pub fn get_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n         fty,\n         explicit_self,\n         vis,\n-        def_id\n+        def_id,\n+        container_id,\n+        None\n     )\n }\n "}, {"sha": "aa4f5d0267c7980efef39ad2455564c3a1dbc6ab", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -772,6 +772,7 @@ fn encode_info_for_method(ecx: &EncodeContext,\n     let method_def_id = local_def(m.id);\n     let method_ty = ty::method(ecx.tcx, method_def_id);\n     encode_method_ty_fields(ecx, ebml_w, method_ty);\n+    encode_parent_item(ebml_w, local_def(parent_id));\n \n     match m.explicit_self.node {\n         ast::sty_static => {"}, {"sha": "c602a14325307b5a80007f6ba3c040aeadf8931d", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -106,29 +106,6 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n         }\n     };\n \n-    // Returns the ID of the container (impl or trait) that a crate-local\n-    // method belongs to.\n-    let local_method_container_id:\n-            @fn(span: span, method_id: node_id) -> def_id =\n-            |span, method_id| {\n-        match tcx.items.find(&method_id) {\n-            Some(&node_method(_, impl_id, _)) => impl_id,\n-            Some(&node_trait_method(_, trait_id, _)) => trait_id,\n-            Some(_) => {\n-                tcx.sess.span_bug(span,\n-                                  fmt!(\"method was a %s?!\",\n-                                       ast_map::node_id_to_str(\n-                                            tcx.items,\n-                                            method_id,\n-                                           token::get_ident_interner())));\n-            }\n-            None => {\n-                tcx.sess.span_bug(span, \"method not found in \\\n-                                         AST map?!\");\n-            }\n-        }\n-    };\n-\n     // Returns true if a crate-local method is private and false otherwise.\n     let method_is_private: @fn(span: span, method_id: node_id) -> bool =\n             |span, method_id| {\n@@ -248,15 +225,12 @@ pub fn check_crate<'mm>(tcx: ty::ctxt,\n         // If the method is a default method, we need to use the def_id of\n         // the default implementation.\n         // Having to do this this is really unfortunate.\n-        let method_id = match tcx.provided_method_sources.find(&method_id) {\n-            None => method_id,\n-            Some(source) => source.method_id\n-        };\n+        let method_id = ty::method(tcx, method_id).provided_source\n+            .get_or_default(method_id);\n \n         if method_id.crate == local_crate {\n             let is_private = method_is_private(span, method_id.node);\n-            let container_id = local_method_container_id(span,\n-                                                         method_id.node);\n+            let container_id = ty::method(tcx, method_id).container_id;\n             if is_private &&\n                     (container_id.crate != local_crate ||\n                      !privileged_items.iter().any(|x| x == &(container_id.node))) {"}, {"sha": "6741637ae9ab37d2623ce480f392d1d9a05c5b78", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -524,7 +524,6 @@ pub fn get_res_dtor(ccx: @mut CrateContext,\n                                                     &tsubsts,\n                                                     None,\n                                                     None,\n-                                                    None,\n                                                     None);\n \n         val"}, {"sha": "f03a2a62e0c16b1c905a19fe8469e7f89ded7cc3", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -296,10 +296,10 @@ pub fn trans_fn_ref_with_vtables(\n     // We need to do a bunch of special handling for default methods.\n     // We need to modify the def_id and our substs in order to monomorphize\n     // the function.\n-    let (def_id, opt_impl_did, substs, self_vtable, vtables) =\n-        match tcx.provided_method_sources.find(&def_id) {\n-        None => (def_id, None, substs, None, vtables),\n-        Some(source) => {\n+    let (is_default, def_id, substs, self_vtable, vtables) =\n+        match ty::provided_source(tcx, def_id) {\n+        None => (false, def_id, substs, None, vtables),\n+        Some(source_id) => {\n             // There are two relevant substitutions when compiling\n             // default methods. First, there is the substitution for\n             // the type parameters of the impl we are using and the\n@@ -313,10 +313,11 @@ pub fn trans_fn_ref_with_vtables(\n             // So, what we need to do is find this substitution and\n             // compose it with the one we already have.\n \n-            let trait_ref = ty::impl_trait_ref(tcx, source.impl_id)\n+            let impl_id = ty::method(tcx, def_id).container_id;\n+            let method = ty::method(tcx, source_id);\n+            let trait_ref = ty::impl_trait_ref(tcx, impl_id)\n                 .expect(\"could not find trait_ref for impl with \\\n                          default methods\");\n-            let method = ty::method(tcx, source.method_id);\n \n             // Get all of the type params for the receiver\n             let param_defs = method.generics.type_param_defs;\n@@ -330,18 +331,18 @@ pub fn trans_fn_ref_with_vtables(\n             };\n \n             let self_vtable =\n-                typeck::vtable_static(source.impl_id, receiver_substs,\n+                typeck::vtable_static(impl_id, receiver_substs,\n                                       receiver_vtables);\n             // Compute the first substitution\n             let first_subst = make_substs_for_receiver_types(\n-                tcx, source.impl_id, trait_ref, method);\n+                tcx, impl_id, trait_ref, method);\n \n             // And compose them\n             let new_substs = first_subst.subst(tcx, &substs);\n \n \n             let vtables =\n-                resolve_default_method_vtables(bcx, source.impl_id,\n+                resolve_default_method_vtables(bcx, impl_id,\n                                                method, &new_substs, vtables);\n \n             debug!(\"trans_fn_with_vtables - default method: \\\n@@ -352,7 +353,7 @@ pub fn trans_fn_ref_with_vtables(\n                    first_subst.repr(tcx), new_substs.repr(tcx),\n                    self_vtable.repr(tcx), vtables.repr(tcx));\n \n-            (source.method_id, Some(source.impl_id),\n+            (true, source_id,\n              new_substs, Some(self_vtable), Some(vtables))\n         }\n     };\n@@ -372,7 +373,7 @@ pub fn trans_fn_ref_with_vtables(\n     // intrinsic that is inlined from a different crate, we want to reemit the\n     // intrinsic instead of trying to call it in the other crate.\n     let must_monomorphise;\n-    if type_params.len() > 0 || opt_impl_did.is_some() {\n+    if type_params.len() > 0 || is_default {\n         must_monomorphise = true;\n     } else if def_id.crate == ast::local_crate {\n         let map_node = session::expect(\n@@ -400,7 +401,7 @@ pub fn trans_fn_ref_with_vtables(\n         let (val, must_cast) =\n             monomorphize::monomorphic_fn(ccx, def_id, &substs,\n                                          vtables, self_vtable,\n-                                         opt_impl_did, Some(ref_id));\n+                                         Some(ref_id));\n         let mut val = val;\n         if must_cast && ref_id != 0 {\n             // Monotype of the REFERENCE to the function (type params"}, {"sha": "d90614ebc021c4306dc5fa5cd1433c1aeafe51af", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -938,8 +938,7 @@ pub fn mono_data_classify(t: ty::t) -> MonoDataClass {\n #[deriving(Eq,IterBytes)]\n pub struct mono_id_ {\n     def: ast::def_id,\n-    params: ~[mono_param_id],\n-    impl_did_opt: Option<ast::def_id>\n+    params: ~[mono_param_id]\n }\n \n pub type mono_id = @mono_id_;"}, {"sha": "bcf3aa6ad50bff0f0ac4235ae55974bc0cacbf62", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -617,7 +617,6 @@ pub fn vtable_id(ccx: @mut CrateContext,\n             monomorphize::make_mono_id(\n                 ccx,\n                 impl_id,\n-                None,\n                 &psubsts,\n                 None)\n         }"}, {"sha": "789532abc611f1a75d808ae267deb36c6f2f2e96", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -42,7 +42,6 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n                       real_substs: &ty::substs,\n                       vtables: Option<typeck::vtable_res>,\n                       self_vtable: Option<typeck::vtable_origin>,\n-                      impl_did_opt: Option<ast::def_id>,\n                       ref_id: Option<ast::node_id>)\n     -> (ValueRef, bool)\n {\n@@ -51,13 +50,11 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n             real_substs=%s, \\\n             vtables=%s, \\\n             self_vtable=%s, \\\n-            impl_did_opt=%s, \\\n             ref_id=%?)\",\n            fn_id.repr(ccx.tcx),\n            real_substs.repr(ccx.tcx),\n            vtables.repr(ccx.tcx),\n            self_vtable.repr(ccx.tcx),\n-           impl_did_opt.repr(ccx.tcx),\n            ref_id);\n \n     assert!(real_substs.tps.iter().all(|t| !ty::type_needs_infer(*t)));\n@@ -83,9 +80,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n     let param_uses = type_use::type_uses_for(ccx, fn_id, psubsts.tys.len());\n \n \n-    let hash_id = make_mono_id(ccx, fn_id, impl_did_opt,\n-                               &*psubsts,\n-                               Some(param_uses));\n+    let hash_id = make_mono_id(ccx, fn_id, &*psubsts, Some(param_uses));\n     if hash_id.params.iter().any(\n                 |p| match *p { mono_precise(_, _) => false, _ => true }) {\n         must_cast = true;\n@@ -367,7 +362,6 @@ pub fn normalize_for_monomorphization(tcx: ty::ctxt,\n \n pub fn make_mono_id(ccx: @mut CrateContext,\n                     item: ast::def_id,\n-                    impl_did_opt: Option<ast::def_id>,\n                     substs: &param_substs,\n                     param_uses: Option<@~[type_use::type_uses]>) -> mono_id {\n     // FIXME (possibly #5801): Need a lot of type hints to get\n@@ -442,5 +436,5 @@ pub fn make_mono_id(ccx: @mut CrateContext,\n           }).collect()\n       }\n     };\n-    @mono_id_ {def: item, params: param_ids, impl_did_opt: impl_did_opt}\n+    @mono_id_ {def: item, params: param_ids}\n }"}, {"sha": "53c290ec0290daa9e48644402efd2d17d44e2bf0", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -90,7 +90,7 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n     // used.  This is imprecise, but simple. Getting it right is\n     // tricky because the substs on the call and the substs on the\n     // default method differ, because of substs on the trait/impl.\n-    let is_default = ccx.tcx.provided_method_sources.contains_key(&fn_id_loc);\n+    let is_default = ty::provided_source(ccx.tcx, fn_id_loc).is_some();\n     // We also mark all of the params as used if it is an extern thing\n     // that we haven't been able to inline yet.\n     if is_default || fn_id_loc.crate != local_crate {"}, {"sha": "b63117d25bb77f829fcc2fe9d43113da0bd9a908", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -64,7 +64,11 @@ pub struct Method {\n     fty: BareFnTy,\n     explicit_self: ast::explicit_self_,\n     vis: ast::visibility,\n-    def_id: ast::def_id\n+    def_id: ast::def_id,\n+    container_id: ast::def_id,\n+\n+    // If this method is provided, we need to know where it came from\n+    provided_source: Option<ast::def_id>\n }\n \n impl Method {\n@@ -74,7 +78,9 @@ impl Method {\n                fty: BareFnTy,\n                explicit_self: ast::explicit_self_,\n                vis: ast::visibility,\n-               def_id: ast::def_id)\n+               def_id: ast::def_id,\n+               container_id: ast::def_id,\n+               provided_source: Option<ast::def_id>)\n                -> Method {\n         // Check the invariants.\n         if explicit_self == ast::sty_static {\n@@ -90,7 +96,9 @@ impl Method {\n             fty: fty,\n             explicit_self: explicit_self,\n             vis: vis,\n-            def_id: def_id\n+            def_id: def_id,\n+            container_id: container_id,\n+            provided_source: provided_source\n         }\n     }\n }\n@@ -219,11 +227,6 @@ pub enum AutoRef {\n     AutoUnsafe(ast::mutability)\n }\n \n-pub struct ProvidedMethodSource {\n-    method_id: ast::def_id,\n-    impl_id: ast::def_id\n-}\n-\n pub type ctxt = @ctxt_;\n \n struct ctxt_ {\n@@ -278,7 +281,7 @@ struct ctxt_ {\n     normalized_cache: @mut HashMap<t, t>,\n     lang_items: middle::lang_items::LanguageItems,\n     // A mapping of fake provided method def_ids to the default implementation\n-    provided_method_sources: @mut HashMap<ast::def_id, ProvidedMethodSource>,\n+    provided_method_sources: @mut HashMap<ast::def_id, ast::def_id>,\n     supertraits: @mut HashMap<ast::def_id, @~[@TraitRef]>,\n \n     // A mapping from the def ID of an enum or struct type to the def ID\n@@ -3511,6 +3514,11 @@ pub fn def_has_ty_params(def: ast::def) -> bool {\n     }\n }\n \n+pub fn provided_source(cx: ctxt, id: ast::def_id)\n+    -> Option<ast::def_id> {\n+    cx.provided_method_sources.find(&id).map(|x| **x)\n+}\n+\n pub fn provided_trait_methods(cx: ctxt, id: ast::def_id) -> ~[@Method] {\n     if is_local(id) {\n         match cx.items.find(&id.node) {"}, {"sha": "51b206428e38bbd1e84d9177275c46644e0d38c6", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -19,7 +19,7 @@ use metadata::csearch::{each_path, get_impl_trait};\n use metadata::csearch;\n use metadata::cstore::iter_crate_data;\n use metadata::decoder::{dl_def, dl_field, dl_impl};\n-use middle::ty::{ProvidedMethodSource, get};\n+use middle::ty::get;\n use middle::ty::{lookup_item_type, subst};\n use middle::ty::{substs, t, ty_bool, ty_bot, ty_box, ty_enum, ty_err};\n use middle::ty::{ty_estr, ty_evec, ty_float, ty_infer, ty_int, ty_nil};\n@@ -303,7 +303,8 @@ impl CoherenceChecker {\n                     impl_id,\n                     trait_ref,\n                     new_did,\n-                    *trait_method);\n+                    *trait_method,\n+                    Some(trait_method.def_id));\n \n             debug!(\"new_method_ty=%s\", new_method_ty.repr(tcx));\n             all_methods.push(new_method_ty);\n@@ -328,13 +329,8 @@ impl CoherenceChecker {\n \n             // Pair the new synthesized ID up with the\n             // ID of the method.\n-            let source = ProvidedMethodSource {\n-                method_id: trait_method.def_id,\n-                impl_id: impl_id\n-            };\n-\n-            self.crate_context.tcx.provided_method_sources.insert(new_did,\n-                                                                  source);\n+            self.crate_context.tcx.provided_method_sources\n+                .insert(new_did, trait_method.def_id);\n         }\n     }\n \n@@ -864,7 +860,8 @@ fn subst_receiver_types_in_method_ty(tcx: ty::ctxt,\n                                      impl_id: ast::def_id,\n                                      trait_ref: &ty::TraitRef,\n                                      new_def_id: ast::def_id,\n-                                     method: &ty::Method)\n+                                     method: &ty::Method,\n+                                     provided_source: Option<ast::def_id>)\n                                      -> ty::Method {\n \n     let combined_substs = make_substs_for_receiver_types(\n@@ -884,7 +881,9 @@ fn subst_receiver_types_in_method_ty(tcx: ty::ctxt,\n \n         method.explicit_self,\n         method.vis,\n-        new_def_id\n+        new_def_id,\n+        impl_id,\n+        provided_source\n     )\n }\n "}, {"sha": "1941317ede5fe900022bd10b388afa35ab59add6", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585e283769faaef8898f82b37224e0a16a4f5e2b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=585e283769faaef8898f82b37224e0a16a4f5e2b", "patch": "@@ -376,7 +376,9 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n             m_explicit_self.node,\n             // assume public, because this is only invoked on trait methods\n             ast::public,\n-            local_def(*m_id)\n+            local_def(*m_id),\n+            local_def(trait_id),\n+            None\n         )\n     }\n }\n@@ -720,6 +722,7 @@ pub struct ConvertedMethod {\n }\n \n pub fn convert_methods(ccx: &CrateCtxt,\n+                       container_id: ast::node_id,\n                        ms: &[@ast::method],\n                        untransformed_rcvr_ty: ty::t,\n                        rcvr_ty_generics: &ty::Generics,\n@@ -734,7 +737,7 @@ pub fn convert_methods(ccx: &CrateCtxt,\n             ty_generics(ccx, rcvr_ty_generics.region_param, &m.generics,\n                         num_rcvr_ty_params);\n         let mty =\n-            @ty_of_method(ccx, *m, rcvr_ty_generics.region_param,\n+            @ty_of_method(ccx, container_id, *m, rcvr_ty_generics.region_param,\n                           untransformed_rcvr_ty,\n                           rcvr_ast_generics, rcvr_visibility,\n                           &m.generics);\n@@ -760,6 +763,7 @@ pub fn convert_methods(ccx: &CrateCtxt,\n     }).collect();\n \n     fn ty_of_method(ccx: &CrateCtxt,\n+                    container_id: ast::node_id,\n                     m: &ast::method,\n                     rp: Option<ty::region_variance>,\n                     untransformed_rcvr_ty: ty::t,\n@@ -790,7 +794,9 @@ pub fn convert_methods(ccx: &CrateCtxt,\n             fty,\n             m.explicit_self.node,\n             method_vis,\n-            local_def(m.id)\n+            local_def(m.id),\n+            local_def(container_id),\n+            None\n         )\n     }\n }\n@@ -849,7 +855,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::item) {\n             it.vis\n         };\n \n-        let cms = convert_methods(ccx, *ms, selfty,\n+        let cms = convert_methods(ccx, it.id, *ms, selfty,\n                                   &i_ty_generics, generics,\n                                   parent_visibility);\n         for opt_trait_ref.iter().advance |t| {\n@@ -867,7 +873,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::item) {\n           let untransformed_rcvr_ty = ty::mk_self(tcx, local_def(it.id));\n           let (ty_generics, _) = mk_item_substs(ccx, generics, rp,\n                                                 Some(untransformed_rcvr_ty));\n-          let _ = convert_methods(ccx, provided_methods,\n+          let _ = convert_methods(ccx, it.id, provided_methods,\n                                   untransformed_rcvr_ty,\n                                   &ty_generics, generics,\n                                   it.vis);"}]}