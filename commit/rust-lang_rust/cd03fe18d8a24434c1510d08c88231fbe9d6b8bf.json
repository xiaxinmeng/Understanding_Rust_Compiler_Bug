{"sha": "cd03fe18d8a24434c1510d08c88231fbe9d6b8bf", "node_id": "C_kwDOAAsO6NoAKGNkMDNmZTE4ZDhhMjQ0MzRjMTUxMGQwOGM4ODIzMWZiZTlkNmI4YmY", "commit": {"author": {"name": "EdwinRy", "email": "edwinkry@gmail.com", "date": "2022-06-02T17:22:25Z"}, "committer": {"name": "EdwinRy", "email": "edwinkry@gmail.com", "date": "2022-06-03T15:48:59Z"}, "message": "Suggest replace parentheses with angle brackets", "tree": {"sha": "34d7e827b0ff17bf4ccb6bc8b7eec954bb9cda69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34d7e827b0ff17bf4ccb6bc8b7eec954bb9cda69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf", "html_url": "https://github.com/rust-lang/rust/commit/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf/comments", "author": {"login": "EdwinRy", "id": 20026256, "node_id": "MDQ6VXNlcjIwMDI2MjU2", "avatar_url": "https://avatars.githubusercontent.com/u/20026256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdwinRy", "html_url": "https://github.com/EdwinRy", "followers_url": "https://api.github.com/users/EdwinRy/followers", "following_url": "https://api.github.com/users/EdwinRy/following{/other_user}", "gists_url": "https://api.github.com/users/EdwinRy/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdwinRy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdwinRy/subscriptions", "organizations_url": "https://api.github.com/users/EdwinRy/orgs", "repos_url": "https://api.github.com/users/EdwinRy/repos", "events_url": "https://api.github.com/users/EdwinRy/events{/privacy}", "received_events_url": "https://api.github.com/users/EdwinRy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "EdwinRy", "id": 20026256, "node_id": "MDQ6VXNlcjIwMDI2MjU2", "avatar_url": "https://avatars.githubusercontent.com/u/20026256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdwinRy", "html_url": "https://github.com/EdwinRy", "followers_url": "https://api.github.com/users/EdwinRy/followers", "following_url": "https://api.github.com/users/EdwinRy/following{/other_user}", "gists_url": "https://api.github.com/users/EdwinRy/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdwinRy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdwinRy/subscriptions", "organizations_url": "https://api.github.com/users/EdwinRy/orgs", "repos_url": "https://api.github.com/users/EdwinRy/repos", "events_url": "https://api.github.com/users/EdwinRy/events{/privacy}", "received_events_url": "https://api.github.com/users/EdwinRy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9598b4b594c97dff66feb93522e22db500deea07", "url": "https://api.github.com/repos/rust-lang/rust/commits/9598b4b594c97dff66feb93522e22db500deea07", "html_url": "https://github.com/rust-lang/rust/commit/9598b4b594c97dff66feb93522e22db500deea07"}], "stats": {"total": 82, "additions": 73, "deletions": 9}, "files": [{"sha": "2a41aeca8d7ec7e3872c96ca558a8f482766fe17", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=cd03fe18d8a24434c1510d08c88231fbe9d6b8bf", "patch": "@@ -46,7 +46,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefPathHash, LocalDefId, CRATE_DEF_ID};\n@@ -901,7 +901,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         mut itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n-\n         // lower generic arguments of identifier in constraint\n         let gen_args = if let Some(ref gen_args) = constraint.gen_args {\n             let gen_args_ctor = match gen_args {\n@@ -914,12 +913,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     .0\n                 }\n                 GenericArgs::Parenthesized(ref data) => {\n-                    let mut err = self.sess.struct_span_err(\n-                        gen_args.span(),\n-                        \"parenthesized generic arguments cannot be used in associated type constraints\"\n-                    );\n-                    // FIXME: try to write a suggestion here\n-                    err.emit();\n+                    self.assoc_ty_contraint_param_error_emit(data);\n                     self.lower_angle_bracketed_parameter_data(\n                         &data.as_angle_bracketed_args(),\n                         ParamMode::Explicit,\n@@ -1033,6 +1027,42 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n+    fn assoc_ty_contraint_param_error_emit(&self, data: &ParenthesizedArgs) -> () {\n+        let mut err = self.sess.struct_span_err(\n+            data.span,\n+            \"parenthesized generic arguments cannot be used in associated type constraints\",\n+        );\n+        // Suggest removing empty parentheses: \"Trait()\" -> \"Trait\"\n+        if data.inputs.is_empty() {\n+            let parentheses_span =\n+                data.inputs_span.shrink_to_lo().to(data.inputs_span.shrink_to_hi());\n+            err.multipart_suggestion(\n+                \"remove these parentheses\",\n+                vec![(parentheses_span, String::new())],\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+        // Suggest replacing parentheses with angle brackets `Trait(params...)` to `Trait<params...>`\n+        else {\n+            // Start of parameters to the 1st argument\n+            let open_param = data.inputs_span.shrink_to_lo().to(data\n+                .inputs\n+                .first()\n+                .unwrap()\n+                .span\n+                .shrink_to_lo());\n+            // End of last argument to end of parameters\n+            let close_param =\n+                data.inputs.last().unwrap().span.shrink_to_hi().to(data.inputs_span.shrink_to_hi());\n+            err.multipart_suggestion(\n+                &format!(\"use angle brackets instead\",),\n+                vec![(open_param, String::from(\"<\")), (close_param, String::from(\">\"))],\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+        err.emit();\n+    }\n+\n     fn lower_generic_arg(\n         &mut self,\n         arg: &ast::GenericArg,"}, {"sha": "c55b0530c9da89030b20455159b3c0765007a800", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=cd03fe18d8a24434c1510d08c88231fbe9d6b8bf", "patch": "@@ -10,4 +10,9 @@ fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n   //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n \n+\n+fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n+  //~^ ERROR: parenthesized generic arguments cannot be used\n+  //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n+\n fn main() {}"}, {"sha": "162214063e7d28851193fb38d220ec673bcfab84", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd03fe18d8a24434c1510d08c88231fbe9d6b8bf/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=cd03fe18d8a24434c1510d08c88231fbe9d6b8bf", "patch": "@@ -9,6 +9,19 @@ error: parenthesized generic arguments cannot be used in associated type constra\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^^^^^\n+   |\n+help: use angle brackets instead\n+   |\n+LL | fn foo<'a>(arg: Box<dyn X<Y<'a> = &'a ()>>) {}\n+   |                            ~  ~\n+\n+error: parenthesized generic arguments cannot be used in associated type constraints\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:14:27\n+   |\n+LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n+   |                           ^--\n+   |                            |\n+   |                            help: remove these parentheses\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:7:27\n@@ -40,6 +53,22 @@ note: associated type defined here, with 0 generic parameters\n LL |   type Y<'a>;\n    |        ^\n \n-error: aborting due to 4 previous errors\n+error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:14:27\n+   |\n+LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n+   |                           ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:4:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ --\n+help: add missing lifetime argument\n+   |\n+LL | fn bar<'a>(arg: Box<dyn X<Y('a) = ()>>) {}\n+   |                             ++\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}]}