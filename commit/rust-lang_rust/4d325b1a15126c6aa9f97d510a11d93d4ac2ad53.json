{"sha": "4d325b1a15126c6aa9f97d510a11d93d4ac2ad53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMzI1YjFhMTUxMjZjNmFhOWY5N2Q1MTBhMTFkOTNkNGFjMmFkNTM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-11T08:33:19Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-11T08:33:19Z"}, "message": "Spill instead of copy when binding a pattern that's only a var binding\n\nThe alias rules guarantee that the alt-ed value will outlive the binding's\nlast use, so this is safe.\n\nThis is a preparation for or-patterns. Joining scoped bindings seems like\nit would get messy.", "tree": {"sha": "210936a56a954c6ec5a3d1c5735bb9672da330b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/210936a56a954c6ec5a3d1c5735bb9672da330b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d325b1a15126c6aa9f97d510a11d93d4ac2ad53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d325b1a15126c6aa9f97d510a11d93d4ac2ad53", "html_url": "https://github.com/rust-lang/rust/commit/4d325b1a15126c6aa9f97d510a11d93d4ac2ad53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d325b1a15126c6aa9f97d510a11d93d4ac2ad53/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e965412d8d765a6b0af65aa660279520639ef62", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e965412d8d765a6b0af65aa660279520639ef62", "html_url": "https://github.com/rust-lang/rust/commit/1e965412d8d765a6b0af65aa660279520639ef62"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "05afb1057cae1d5f83fda254873507c8ec6a5e1d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4d325b1a15126c6aa9f97d510a11d93d4ac2ad53/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d325b1a15126c6aa9f97d510a11d93d4ac2ad53/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4d325b1a15126c6aa9f97d510a11d93d4ac2ad53", "patch": "@@ -4843,24 +4843,18 @@ fn trans_pat_match(&@block_ctxt cx, &@ast::pat pat, ValueRef llval,\n }\n \n fn trans_pat_binding(&@block_ctxt cx, &@ast::pat pat, ValueRef llval,\n-                     bool bind_alias) -> result {\n+                     bool is_mem) -> result {\n     alt (pat.node) {\n         case (ast::pat_wild) { ret rslt(cx, llval); }\n         case (ast::pat_lit(_)) { ret rslt(cx, llval); }\n         case (ast::pat_bind(?name)) {\n-            if (bind_alias) {\n-                cx.fcx.lllocals.insert(pat.id, llval);\n-                ret rslt(cx, llval);\n-            } else {\n-                auto t = node_id_type(cx.fcx.lcx.ccx, pat.id);\n-                auto rslt = alloc_ty(cx, t);\n-                auto dst = rslt.val;\n-                auto bcx = rslt.bcx;\n-                maybe_name_value(cx.fcx.lcx.ccx, dst, name);\n-                bcx.fcx.lllocals.insert(pat.id, dst);\n-                add_clean(bcx, dst, t);\n-                ret copy_val(bcx, INIT, dst, llval, t);\n+            auto val = llval;\n+            if (!is_mem) {\n+                val = spill_if_immediate\n+                    (cx, llval, node_id_type(cx.fcx.lcx.ccx, pat.id));\n             }\n+            cx.fcx.lllocals.insert(pat.id, val);\n+            ret rslt(cx, val);\n         }\n         case (ast::pat_tag(_, ?subpats)) {\n             if (std::ivec::len[@ast::pat](subpats) == 0u) {\n@@ -4911,11 +4905,11 @@ fn trans_alt(&@block_ctxt cx, &@ast::expr expr, &ast::arm[] arms,\n         auto next_cx = new_sub_block_ctxt(expr_res.bcx, \"next\");\n         auto match_res =\n             trans_pat_match(this_cx, arm.pat, expr_res.val, next_cx);\n-        auto binding_cx = new_scope_block_ctxt(match_res.bcx, \"binding\");\n-        match_res.bcx.build.Br(binding_cx.llbb);\n         auto binding_res =\n-            trans_pat_binding(binding_cx, arm.pat, expr_res.val, false);\n-        auto block_res = trans_block(binding_res.bcx, arm.block, output);\n+            trans_pat_binding(match_res.bcx, arm.pat, expr_res.val, false);\n+        auto block_cx = new_scope_block_ctxt(match_res.bcx, \"case block\");\n+        binding_res.bcx.build.Br(block_cx.llbb);\n+        auto block_res = trans_block(block_cx, arm.block, output);\n         arm_results += ~[block_res];\n         this_cx = next_cx;\n     }"}]}