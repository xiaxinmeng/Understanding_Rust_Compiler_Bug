{"sha": "1137fbd9abe7ba941b973c9fdc18845686e02ed6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMzdmYmQ5YWJlN2JhOTQxYjk3M2M5ZmRjMTg4NDU2ODZlMDJlZDY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-18T00:57:30Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-29T20:04:16Z"}, "message": "Remove ChanOneHack/PortOneHack extra allocation", "tree": {"sha": "46ab4750f44cfae463315ac26957ca58948f62cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ab4750f44cfae463315ac26957ca58948f62cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1137fbd9abe7ba941b973c9fdc18845686e02ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1137fbd9abe7ba941b973c9fdc18845686e02ed6", "html_url": "https://github.com/rust-lang/rust/commit/1137fbd9abe7ba941b973c9fdc18845686e02ed6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1137fbd9abe7ba941b973c9fdc18845686e02ed6/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2830d7d0135f188260f1762e6a47c347e9a603e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2830d7d0135f188260f1762e6a47c347e9a603e2", "html_url": "https://github.com/rust-lang/rust/commit/2830d7d0135f188260f1762e6a47c347e9a603e2"}], "stats": {"total": 80, "additions": 30, "deletions": 50}, "files": [{"sha": "bdd4e836997b3ee300fe4ca89eb13f6b09f47790", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 30, "deletions": 50, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1137fbd9abe7ba941b973c9fdc18845686e02ed6/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1137fbd9abe7ba941b973c9fdc18845686e02ed6/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=1137fbd9abe7ba941b973c9fdc18845686e02ed6", "patch": "@@ -45,23 +45,12 @@ struct Packet<T> {\n \n /// A one-shot channel.\n pub struct ChanOne<T> {\n-    // XXX: Hack extra allocation to make by-val self work\n-    inner: ~ChanOneHack<T>\n-}\n-\n-\n-/// A one-shot port.\n-pub struct PortOne<T> {\n-    // XXX: Hack extra allocation to make by-val self work\n-    inner: ~PortOneHack<T>\n-}\n-\n-pub struct ChanOneHack<T> {\n     void_packet: *mut Void,\n     suppress_finalize: bool\n }\n \n-pub struct PortOneHack<T> {\n+/// A one-shot port.\n+pub struct PortOne<T> {\n     void_packet: *mut Void,\n     suppress_finalize: bool\n }\n@@ -75,22 +64,25 @@ pub fn oneshot<T: Send>() -> (PortOne<T>, ChanOne<T>) {\n     unsafe {\n         let packet: *mut Void = cast::transmute(packet);\n         let port = PortOne {\n-            inner: ~PortOneHack {\n-                void_packet: packet,\n-                suppress_finalize: false\n-            }\n+            void_packet: packet,\n+            suppress_finalize: false\n         };\n         let chan = ChanOne {\n-            inner: ~ChanOneHack {\n-                void_packet: packet,\n-                suppress_finalize: false\n-            }\n+            void_packet: packet,\n+            suppress_finalize: false\n         };\n         return (port, chan);\n     }\n }\n \n impl<T> ChanOne<T> {\n+    fn packet(&self) -> *mut Packet<T> {\n+        unsafe {\n+            let p: *mut ~Packet<T> = cast::transmute(&self.void_packet);\n+            let p: *mut Packet<T> = &mut **p;\n+            return p;\n+        }\n+    }\n \n     pub fn send(self, val: T) {\n         self.try_send(val);\n@@ -99,7 +91,7 @@ impl<T> ChanOne<T> {\n     pub fn try_send(self, val: T) -> bool {\n         let mut this = self;\n         let mut recvr_active = true;\n-        let packet = this.inner.packet();\n+        let packet = this.packet();\n \n         unsafe {\n \n@@ -127,7 +119,7 @@ impl<T> ChanOne<T> {\n                         sched.metrics.rendezvous_sends += 1;\n                     }\n                     // Port has closed. Need to clean up.\n-                    let _packet: ~Packet<T> = cast::transmute(this.inner.void_packet);\n+                    let _packet: ~Packet<T> = cast::transmute(this.void_packet);\n                     recvr_active = false;\n                 }\n                 task_as_state => {\n@@ -144,13 +136,21 @@ impl<T> ChanOne<T> {\n         }\n \n         // Suppress the synchronizing actions in the finalizer. We're done with the packet.\n-        this.inner.suppress_finalize = true;\n+        this.suppress_finalize = true;\n         return recvr_active;\n     }\n }\n \n \n impl<T> PortOne<T> {\n+    fn packet(&self) -> *mut Packet<T> {\n+        unsafe {\n+            let p: *mut ~Packet<T> = cast::transmute(&self.void_packet);\n+            let p: *mut Packet<T> = &mut **p;\n+            return p;\n+        }\n+    }\n+\n     pub fn recv(self) -> T {\n         match self.try_recv() {\n             Some(val) => val,\n@@ -162,7 +162,7 @@ impl<T> PortOne<T> {\n \n     pub fn try_recv(self) -> Option<T> {\n         let mut this = self;\n-        let packet = this.inner.packet();\n+        let packet = this.packet();\n \n         // XXX: Optimize this to not require the two context switches when data is available\n \n@@ -215,9 +215,9 @@ impl<T> PortOne<T> {\n             let payload = util::replace(&mut (*packet).payload, None);\n \n             // The sender has closed up shop. Drop the packet.\n-            let _packet: ~Packet<T> = cast::transmute(this.inner.void_packet);\n+            let _packet: ~Packet<T> = cast::transmute(this.void_packet);\n             // Suppress the synchronizing actions in the finalizer. We're done with the packet.\n-            this.inner.suppress_finalize = true;\n+            this.suppress_finalize = true;\n             return payload;\n         }\n     }\n@@ -226,7 +226,7 @@ impl<T> PortOne<T> {\n impl<T> Peekable<T> for PortOne<T> {\n     fn peek(&self) -> bool {\n         unsafe {\n-            let packet: *mut Packet<T> = self.inner.packet();\n+            let packet: *mut Packet<T> = self.packet();\n             let oldstate = (*packet).state.load(SeqCst);\n             match oldstate {\n                 STATE_BOTH => false,\n@@ -238,7 +238,7 @@ impl<T> Peekable<T> for PortOne<T> {\n }\n \n #[unsafe_destructor]\n-impl<T> Drop for ChanOneHack<T> {\n+impl<T> Drop for ChanOne<T> {\n     fn drop(&self) {\n         if self.suppress_finalize { return }\n \n@@ -267,7 +267,7 @@ impl<T> Drop for ChanOneHack<T> {\n }\n \n #[unsafe_destructor]\n-impl<T> Drop for PortOneHack<T> {\n+impl<T> Drop for PortOne<T> {\n     fn drop(&self) {\n         if self.suppress_finalize { return }\n \n@@ -295,26 +295,6 @@ impl<T> Drop for PortOneHack<T> {\n     }\n }\n \n-impl<T> ChanOneHack<T> {\n-    fn packet(&self) -> *mut Packet<T> {\n-        unsafe {\n-            let p: *mut ~Packet<T> = cast::transmute(&self.void_packet);\n-            let p: *mut Packet<T> = &mut **p;\n-            return p;\n-        }\n-    }\n-}\n-\n-impl<T> PortOneHack<T> {\n-    fn packet(&self) -> *mut Packet<T> {\n-        unsafe {\n-            let p: *mut ~Packet<T> = cast::transmute(&self.void_packet);\n-            let p: *mut Packet<T> = &mut **p;\n-            return p;\n-        }\n-    }\n-}\n-\n struct StreamPayload<T> {\n     val: T,\n     next: PortOne<StreamPayload<T>>"}]}