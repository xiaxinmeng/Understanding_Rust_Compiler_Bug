{"sha": "7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NjQyMzcyNTY5OTBjNGEzNDZjYmFhYTdjZTNkMmQ5ZThmZThkNWM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-11T03:58:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-14T23:41:46Z"}, "message": "Add folding and type checking for ports and chans", "tree": {"sha": "a15721e61a7ba9fa223bed4ff0cb2a17cb8640f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15721e61a7ba9fa223bed4ff0cb2a17cb8640f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c", "html_url": "https://github.com/rust-lang/rust/commit/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3cca65f6d77d9d7d27b3ace84da4730030ffd59", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3cca65f6d77d9d7d27b3ace84da4730030ffd59", "html_url": "https://github.com/rust-lang/rust/commit/a3cca65f6d77d9d7d27b3ace84da4730030ffd59"}], "stats": {"total": 167, "additions": 165, "deletions": 2}, "files": [{"sha": "d768f93552af12d1ce9297c8d456f5ef49b37dd2", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c", "patch": "@@ -278,12 +278,12 @@ tag ty_ {\n     ty_str;\n     ty_box(@ty);\n     ty_vec(@ty);\n+    ty_port(@ty);\n+    ty_chan(@ty);\n     ty_tup(vec[@ty]);\n     ty_rec(vec[ty_field]);\n     ty_fn(proto, vec[ty_arg], @ty);        // TODO: effect\n     ty_obj(vec[ty_method]);\n-    ty_chan(@ty);\n-    ty_port(@ty);\n     ty_path(path, option.t[def]);\n     ty_mutable(@ty);\n     ty_type;"}, {"sha": "320033cdc8ce80e79530544171f0e64ca76673c8", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c", "patch": "@@ -179,6 +179,18 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp,\n          @expr e) -> @expr)                       fold_expr_check_expr,\n \n+     (fn(&ENV e, &span sp,\n+         ann a) -> @expr)                         fold_expr_port,\n+\n+     (fn(&ENV e, &span sp,\n+         @expr e, ann a) -> @expr)                fold_expr_chan,\n+\n+     (fn(&ENV e, &span sp,\n+         @expr lhs, @expr rhs, ann a) -> @expr)   fold_expr_send,\n+\n+     (fn(&ENV e, &span sp,\n+         @expr lhs, @expr rhs, ann a) -> @expr)   fold_expr_recv,\n+\n      // Decl folds.\n      (fn(&ENV e, &span sp,\n          @ast.local local) -> @decl)              fold_decl_local,\n@@ -717,6 +729,26 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_check_expr(env_, e.span, ee);\n         }\n \n+        case (ast.expr_port(?t)) {\n+            ret fld.fold_expr_port(env_, e.span, t);\n+        }\n+\n+        case (ast.expr_chan(?x, ?t)) {\n+            auto ee = fold_expr(env_, fld, x);\n+            ret fld.fold_expr_chan(env_, e.span, ee, t);\n+        }\n+\n+        case (ast.expr_send(?lhs, ?rhs, ?t)) {\n+            auto llhs = fold_expr(env_, fld, lhs);\n+            auto rrhs = fold_expr(env_, fld, rhs);\n+            ret fld.fold_expr_send(env_, e.span, llhs, rrhs, t);\n+        }\n+\n+        case (ast.expr_recv(?lhs, ?rhs, ?t)) {\n+            auto llhs = fold_expr(env_, fld, lhs);\n+            auto rrhs = fold_expr(env_, fld, rhs);\n+            ret fld.fold_expr_recv(env_, e.span, llhs, rrhs, t);\n+        }\n     }\n \n     fail;\n@@ -1255,6 +1287,23 @@ fn identity_fold_expr_check_expr[ENV](&ENV e, &span sp, @expr x) -> @expr {\n     ret @respan(sp, ast.expr_check_expr(x));\n }\n \n+fn identity_fold_expr_port[ENV](&ENV e, &span sp, ann a) -> @expr {\n+    ret @respan(sp, ast.expr_port(a));\n+}\n+\n+fn identity_fold_expr_chan[ENV](&ENV e, &span sp, @expr x, ann a) -> @expr {\n+    ret @respan(sp, ast.expr_chan(x, a));\n+}\n+\n+fn identity_fold_expr_send[ENV](&ENV e, &span sp,\n+                                @expr lhs, @expr rhs, ann a) -> @expr {\n+    ret @respan(sp, ast.expr_send(lhs, rhs, a));\n+}\n+\n+fn identity_fold_expr_recv[ENV](&ENV e, &span sp,\n+                                @expr lhs, @expr rhs, ann a) -> @expr {\n+    ret @respan(sp, ast.expr_recv(lhs, rhs, a));\n+}\n \n // Decl identities.\n \n@@ -1527,6 +1576,10 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_log    = bind identity_fold_expr_log[ENV](_,_,_),\n          fold_expr_check_expr\n                           = bind identity_fold_expr_check_expr[ENV](_,_,_),\n+         fold_expr_port   = bind identity_fold_expr_port[ENV](_,_,_),\n+         fold_expr_chan   = bind identity_fold_expr_chan[ENV](_,_,_,_),\n+         fold_expr_send   = bind identity_fold_expr_send[ENV](_,_,_,_,_),\n+         fold_expr_recv   = bind identity_fold_expr_recv[ENV](_,_,_,_,_),\n \n          fold_decl_local  = bind identity_fold_decl_local[ENV](_,_,_),\n          fold_decl_item   = bind identity_fold_decl_item[ENV](_,_,_),"}, {"sha": "73b519ba3ddc8d3616bf0faa265bc7337946ebd2", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c", "patch": "@@ -38,6 +38,8 @@ tag sty {\n     ty_tag(ast.def_id, vec[@t]);\n     ty_box(@t);\n     ty_vec(@t);\n+    ty_port(@t);\n+    ty_chan(@t);\n     ty_tup(vec[@t]);\n     ty_rec(vec[field]);\n     ty_fn(ast.proto, vec[arg], @t);                 // TODO: effect\n@@ -240,6 +242,12 @@ fn fold_ty(ty_fold fld, @t ty) -> @t {\n         case (ty_vec(?subty)) {\n             ret rewrap(ty, ty_vec(fold_ty(fld, subty)));\n         }\n+        case (ty_port(?subty)) {\n+            ret rewrap(ty, ty_port(fold_ty(fld, subty)));\n+        }\n+        case (ty_chan(?subty)) {\n+            ret rewrap(ty, ty_chan(fold_ty(fld, subty)));\n+        }\n         case (ty_tag(?tid, ?subtys)) {\n             let vec[@t] new_subtys = vec();\n             for (@t subty in subtys) {\n@@ -1159,6 +1167,52 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n                 }\n             }\n \n+            case (ty.ty_port(?expected_sub)) {\n+                alt (actual.struct) {\n+                    case (ty.ty_port(?actual_sub)) {\n+                        auto result = unify_step(bindings,\n+                                                 expected_sub,\n+                                                 actual_sub,\n+                                                 handler);\n+                        alt (result) {\n+                            case (ures_ok(?result_sub)) {\n+                                ret ures_ok(plain_ty(ty.ty_port(result_sub)));\n+                            }\n+                            case (_) {\n+                                ret result;\n+                            }\n+                        }\n+                    }\n+\n+                    case (_) {\n+                        ret ures_err(terr_mismatch, expected, actual);\n+                    }\n+                }\n+            }\n+\n+            case (ty.ty_chan(?expected_sub)) {\n+                alt (actual.struct) {\n+                    case (ty.ty_chan(?actual_sub)) {\n+                        auto result = unify_step(bindings,\n+                                                 expected_sub,\n+                                                 actual_sub,\n+                                                 handler);\n+                        alt (result) {\n+                            case (ures_ok(?result_sub)) {\n+                                ret ures_ok(plain_ty(ty.ty_chan(result_sub)));\n+                            }\n+                            case (_) {\n+                                ret result;\n+                            }\n+                        }\n+                    }\n+\n+                    case (_) {\n+                        ret ures_err(terr_mismatch, expected, actual);\n+                    }\n+                }\n+            }\n+\n             case (ty.ty_tup(?expected_elems)) {\n                 alt (actual.struct) {\n                     case (ty.ty_tup(?actual_elems)) {"}, {"sha": "78524c2d4b24735f125343626160eb28dada28f2", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7464237256990c4a346cbaaa7ce3d2d9e8fe8d5c", "patch": "@@ -308,6 +308,15 @@ fn ast_ty_to_ty(ty_getter getter, &@ast.ty ast_ty) -> @ty.t {\n         case (ast.ty_str)          { sty = ty.ty_str; }\n         case (ast.ty_box(?t)) { sty = ty.ty_box(ast_ty_to_ty(getter, t)); }\n         case (ast.ty_vec(?t)) { sty = ty.ty_vec(ast_ty_to_ty(getter, t)); }\n+\n+        case (ast.ty_port(?t)) {\n+            sty = ty.ty_port(ast_ty_to_ty(getter, t));\n+        }\n+\n+        case (ast.ty_chan(?t)) {\n+            sty = ty.ty_chan(ast_ty_to_ty(getter, t));\n+        }\n+\n         case (ast.ty_tup(?fields)) {\n             let vec[@ty.t] flds = vec();\n             for (@ast.ty field in fields) {\n@@ -1387,6 +1396,28 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n         case (ast.expr_put(_)) { e_1 = e.node; }\n         case (ast.expr_be(_)) { e_1 = e.node; }\n         case (ast.expr_check_expr(_)) { e_1 = e.node; }\n+\n+        case (ast.expr_port(?ann)) {\n+            auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n+            e_1 = ast.expr_port(ast.ann_type(t, none[vec[@ty.t]]));\n+        }\n+\n+        case (ast.expr_chan(?es, ?ann)) {\n+            auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n+            let @ast.expr es_1;\n+            alt (t.struct) {\n+                case (ty.ty_chan(?subty)) {\n+                    auto pt = plain_ty(ty.ty_port(subty));\n+                    es_1 = demand_expr(fcx, pt, es);\n+                }\n+                case (_) {\n+                    log \"chan expr doesn't have a chan type!\";\n+                    fail;\n+                }\n+            }\n+            e_1 = ast.expr_chan(es_1, ast.ann_type(t, none[vec[@ty.t]]));\n+        }\n+\n         case (_) {\n             fcx.ccx.sess.unimpl(\"type unification for expression variant\");\n             fail;\n@@ -2257,6 +2288,31 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n             }\n         }\n \n+        case (ast.expr_port(_)) {\n+            auto t = next_ty_var(fcx.ccx);\n+            auto pt = plain_ty(ty.ty_port(t));\n+            auto ann = ast.ann_type(pt, none[vec[@ty.t]]);\n+            ret @fold.respan[ast.expr_](expr.span, ast.expr_port(ann));\n+        }\n+\n+        case (ast.expr_chan(?x, _)) {\n+            auto expr_1 = check_expr(fcx, x);\n+            auto port_t = expr_ty(expr_1);\n+            alt (port_t.struct) {\n+                case (ty.ty_port(?subtype)) {\n+                    auto ct = plain_ty(ty.ty_chan(subtype));\n+                    auto ann = ast.ann_type(ct, none[vec[@ty.t]]);\n+                    ret @fold.respan[ast.expr_](expr.span,\n+                                                ast.expr_chan(expr_1, ann));\n+                }\n+                case (_) {\n+                    fcx.ccx.sess.span_err(expr.span,\n+                                          \"bad port type: \"\n+                                          + ty_to_str(port_t));\n+                }\n+            }\n+        }\n+\n         case (_) {\n             fcx.ccx.sess.unimpl(\"expr type in typeck.check_expr\");\n             // TODO"}]}