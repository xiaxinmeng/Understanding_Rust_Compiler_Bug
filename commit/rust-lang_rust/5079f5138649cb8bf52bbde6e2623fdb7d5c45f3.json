{"sha": "5079f5138649cb8bf52bbde6e2623fdb7d5c45f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNzlmNTEzODY0OWNiOGJmNTJiYmRlNmUyNjIzZmRiN2Q1YzQ1ZjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-11T21:33:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-11T21:35:33Z"}, "message": "rustc: Associate type descriptors with allocas as metadata", "tree": {"sha": "5c1911fe7f9701aecd42f3e24d7fdc0e7aac697b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c1911fe7f9701aecd42f3e24d7fdc0e7aac697b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3", "html_url": "https://github.com/rust-lang/rust/commit/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b22243416f3f3ce66c7b8fb8d1709dd840656b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b22243416f3f3ce66c7b8fb8d1709dd840656b7", "html_url": "https://github.com/rust-lang/rust/commit/4b22243416f3f3ce66c7b8fb8d1709dd840656b7"}], "stats": {"total": 100, "additions": 88, "deletions": 12}, "files": [{"sha": "056adf94cc5c19f2a96db6895e0b77206ae30dda", "filename": "src/comp/middle/gc.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=5079f5138649cb8bf52bbde6e2623fdb7d5c45f3", "patch": "@@ -0,0 +1,73 @@\n+// Routines useful for garbage collection.\n+\n+import lib::llvm::llvm::ValueRef;\n+import middle::trans::get_tydesc;\n+import middle::trans_common::*;\n+import middle::ty;\n+import std::option::none;\n+import std::ptr;\n+import std::str;\n+import std::unsafe;\n+\n+import lll = lib::llvm::llvm;\n+\n+fn add_gc_root(cx: &@block_ctxt, llval: ValueRef, ty: ty::t) -> @block_ctxt {\n+    let bcx = cx;\n+    if !type_is_gc_relevant(bcx_tcx(cx), ty) { ret bcx; }\n+\n+    let md_kind_name = \"rusttydesc\";\n+    let md_kind = lll::LLVMGetMDKindID(str::buf(md_kind_name),\n+                                       str::byte_len(md_kind_name));\n+\n+    let ti = none;\n+    let r = get_tydesc(bcx, ty, false, ti);\n+    bcx = r.bcx;\n+    let lltydesc = r.val;\n+\n+    let llmdnode =\n+        lll::LLVMMDNode(unsafe::reinterpret_cast(ptr::addr_of(lltydesc)), 1u);\n+    lll::LLVMSetMetadata(llval, md_kind, llmdnode);\n+    ret bcx;\n+}\n+\n+fn type_is_gc_relevant(cx: &ty::ctxt, ty: &ty::t) -> bool {\n+    alt ty::struct(cx, ty) {\n+        ty::ty_nil. | ty::ty_bot. | ty::ty_bool. | ty::ty_int. |\n+        ty::ty_float. | ty::ty_uint. | ty::ty_machine(_) | ty::ty_char. |\n+        ty::ty_istr. | ty::ty_type. | ty::ty_native(_) | ty::ty_ptr(_) |\n+        ty::ty_port(_) | ty::ty_chan(_) | ty::ty_task. | ty::ty_type. |\n+        ty::ty_native(_) {\n+            ret false;\n+        }\n+\n+        ty::ty_rec(fields) {\n+            for f in fields {\n+                if type_is_gc_relevant(cx, f.mt.ty) { ret true; }\n+            }\n+            ret false;\n+        }\n+\n+        ty::ty_tag(did, tps) {\n+            let variants = ty::tag_variants(cx, did);\n+            for variant in variants {\n+                for aty in variant.args {\n+                    let arg_ty = ty::substitute_type_params(cx, tps, aty);\n+                    if type_is_gc_relevant(cx, arg_ty) {\n+                        ret true;\n+                    }\n+                }\n+            }\n+            ret false;\n+        }\n+\n+        ty::ty_ivec(tm) { ret type_is_gc_relevant(cx, tm.ty); }\n+        ty::ty_constr(sub, _) { ret type_is_gc_relevant(cx, sub); }\n+\n+        ty::ty_str. | ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_vec(_) |\n+        ty::ty_fn(_,_,_,_,_) | ty::ty_native_fn(_,_,_) | ty::ty_obj(_) |\n+        ty::ty_param(_,_) | ty::ty_res(_,_,_) { ret true; }\n+\n+        ty::ty_var(_) { fail \"ty_var in type_is_gc_relevant\"; }\n+    }\n+}\n+"}, {"sha": "9cbb546535b133ae02afff8bd7a0b26f08aad946", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=5079f5138649cb8bf52bbde6e2623fdb7d5c45f3", "patch": "@@ -281,12 +281,10 @@ fn shape_of(ccx : &@crate_ctxt, t : ty::t) -> [u8] {\n     let s = ~[];\n \n     alt ty::struct(ccx.tcx, t) {\n-      ty::ty_nil. | ty::ty_bool. | ty::ty_machine(ast::ty_u8.) {\n+      ty::ty_nil. | ty::ty_bool. | ty::ty_machine(ast::ty_u8.) | ty::ty_bot. {\n         s += ~[shape_u8];\n       }\n \n-      ty::ty_bot. { fail \"bot ty in shape_of\"; }\n-\n       ty::ty_int. { s += ~[s_int(ccx.tcx)]; }\n       ty::ty_float. { s += ~[s_float(ccx.tcx)]; }\n \n@@ -299,6 +297,8 @@ fn shape_of(ccx : &@crate_ctxt, t : ty::t) -> [u8] {\n       ty::ty_machine(ast::ty_i16.) { s += ~[shape_i16]; }\n       ty::ty_machine(ast::ty_u32.) | ty::ty_char. { s += ~[shape_u32]; }\n       ty::ty_machine(ast::ty_i32.) { s += ~[shape_i32]; }\n+      ty::ty_machine(ast::ty_u64.) { s += ~[shape_u64]; }\n+      ty::ty_machine(ast::ty_i64.) { s += ~[shape_i64]; }\n \n       ty::ty_str. { s += ~[shape_evec, 1u8, 1u8, 0u8, shape_u8]; }\n       ty::ty_istr. { s += ~[shape_ivec, 1u8, 1u8, 0u8, shape_u8]; }"}, {"sha": "659b99209ee3d0ce2cc962fe57d8ebbe75365e1a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5079f5138649cb8bf52bbde6e2623fdb7d5c45f3", "patch": "@@ -27,6 +27,7 @@ import syntax::ast;\n import driver::session;\n import middle::ty;\n import middle::freevars::*;\n+import middle::gc;\n import back::link;\n import back::x86;\n import back::abi;\n@@ -5634,24 +5635,29 @@ fn lldynamicallocas_block_ctxt(fcx: &@fn_ctxt) -> @block_ctxt {\n \n \n fn alloc_ty(cx: &@block_ctxt, t: &ty::t) -> result {\n+    let bcx = cx;\n     let val = C_int(0);\n-    if ty::type_has_dynamic_size(bcx_tcx(cx), t) {\n+    if ty::type_has_dynamic_size(bcx_tcx(bcx), t) {\n         // NB: we have to run this particular 'size_of' in a\n         // block_ctxt built on the llderivedtydescs block for the fn,\n         // so that the size dominates the array_alloca that\n         // comes next.\n \n-        let n = size_of(llderivedtydescs_block_ctxt(cx.fcx), t);\n-        cx.fcx.llderivedtydescs = n.bcx.llbb;\n-        val = array_alloca(cx, T_i8(), n.val);\n-    } else { val = alloca(cx, type_of(bcx_ccx(cx), cx.sp, t)); }\n+        let n = size_of(llderivedtydescs_block_ctxt(bcx.fcx), t);\n+        bcx.fcx.llderivedtydescs = n.bcx.llbb;\n+        val = array_alloca(bcx, T_i8(), n.val);\n+    } else {\n+        val = alloca(bcx, type_of(bcx_ccx(cx), cx.sp, t));\n+    }\n     // NB: since we've pushed all size calculations in this\n     // function up to the alloca block, we actually return the\n     // block passed into us unmodified; it doesn't really\n     // have to be passed-and-returned here, but it fits\n     // past caller conventions and may well make sense again,\n     // so we leave it as-is.\n \n+    bcx = gc::add_gc_root(bcx, val, t);\n+\n     ret rslt(cx, val);\n }\n \n@@ -6756,9 +6762,6 @@ fn declare_intrinsics(llmod: ModuleRef) -> hashmap[str, ValueRef] {\n     let T_memset64_args: [TypeRef] =\n         ~[T_ptr(T_i8()), T_i8(), T_i64(), T_i32(), T_i1()];\n     let T_trap_args: [TypeRef] = ~[];\n-    let gcroot =\n-        decl_cdecl_fn(llmod, \"llvm.gcroot\",\n-                      T_fn(~[T_ptr(T_ptr(T_i8())), T_ptr(T_i8())], T_void()));\n     let gcread =\n         decl_cdecl_fn(llmod, \"llvm.gcread\",\n                       T_fn(~[T_ptr(T_i8()), T_ptr(T_ptr(T_i8()))], T_void()));\n@@ -6776,7 +6779,6 @@ fn declare_intrinsics(llmod: ModuleRef) -> hashmap[str, ValueRef] {\n                       T_fn(T_memset64_args, T_void()));\n     let trap = decl_cdecl_fn(llmod, \"llvm.trap\", T_fn(T_trap_args, T_void()));\n     let intrinsics = new_str_hash[ValueRef]();\n-    intrinsics.insert(\"llvm.gcroot\", gcroot);\n     intrinsics.insert(\"llvm.gcread\", gcread);\n     intrinsics.insert(\"llvm.memmove.p0i8.p0i8.i32\", memmove32);\n     intrinsics.insert(\"llvm.memmove.p0i8.p0i8.i64\", memmove64);"}, {"sha": "e47c6337e321b859374ff63cf978d31661aa1368", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5079f5138649cb8bf52bbde6e2623fdb7d5c45f3/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=5079f5138649cb8bf52bbde6e2623fdb7d5c45f3", "patch": "@@ -31,6 +31,7 @@ mod middle {\n     mod kind;\n     mod freevars;\n     mod shape;\n+    mod gc;\n \n     mod tstate {\n         mod ck;"}]}