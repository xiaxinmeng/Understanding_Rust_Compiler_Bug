{"sha": "1807027248f57d98a1490bfbe9eb3d3de944e60f", "node_id": "C_kwDOAAsO6NoAKDE4MDcwMjcyNDhmNTdkOThhMTQ5MGJmYmU5ZWIzZDNkZTk0NGU2MGY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-01-30T03:37:06Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-21T00:51:56Z"}, "message": "Use `ThinVec` in `ast::AngleBracketedArgs`.", "tree": {"sha": "d38f48b8559d600ae095d27aeebbed9fa1d6d32b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d38f48b8559d600ae095d27aeebbed9fa1d6d32b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1807027248f57d98a1490bfbe9eb3d3de944e60f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1807027248f57d98a1490bfbe9eb3d3de944e60f", "html_url": "https://github.com/rust-lang/rust/commit/1807027248f57d98a1490bfbe9eb3d3de944e60f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1807027248f57d98a1490bfbe9eb3d3de944e60f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d", "html_url": "https://github.com/rust-lang/rust/commit/b14b7ba5dd13c76834a6a3bcab3f600a1d1b198d"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "79cb2c946c8f1340cbd8f3229b933bb9437858b8", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=1807027248f57d98a1490bfbe9eb3d3de944e60f", "patch": "@@ -209,7 +209,7 @@ pub struct AngleBracketedArgs {\n     /// The overall span.\n     pub span: Span,\n     /// The comma separated parts in the `<...>`.\n-    pub args: Vec<AngleBracketedArg>,\n+    pub args: ThinVec<AngleBracketedArg>,\n }\n \n /// Either an argument for a parameter e.g., `'a`, `Vec<u8>`, `0`,"}, {"sha": "7dcb03b4c786cd98bf297b5e148135f7ad9e2ae6", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=1807027248f57d98a1490bfbe9eb3d3de944e60f", "patch": "@@ -577,7 +577,7 @@ pub fn noop_visit_angle_bracketed_parameter_data<T: MutVisitor>(\n     vis: &mut T,\n ) {\n     let AngleBracketedArgs { args, span } = data;\n-    visit_vec(args, |arg| match arg {\n+    visit_thin_vec(args, |arg| match arg {\n         AngleBracketedArg::Arg(arg) => vis.visit_generic_arg(arg),\n         AngleBracketedArg::Constraint(constraint) => vis.visit_constraint(constraint),\n     });"}, {"sha": "dfe790b485123275e9a74b86788d90c1bd35cc1e", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=1807027248f57d98a1490bfbe9eb3d3de944e60f", "patch": "@@ -376,7 +376,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         // Split the arguments into const generics and normal arguments\n         let mut real_args = vec![];\n-        let mut generic_args = vec![];\n+        let mut generic_args = ThinVec::new();\n         for (idx, arg) in args.into_iter().enumerate() {\n             if legacy_args_idx.contains(&idx) {\n                 let parent_def_id = self.current_hir_id_owner;"}, {"sha": "afa29a510d22ae84948aa561bdd35a8924ae78d7", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=1807027248f57d98a1490bfbe9eb3d3de944e60f", "patch": "@@ -27,6 +27,7 @@ use rustc_span::Span;\n use rustc_target::spec::abi;\n use std::mem;\n use std::ops::{Deref, DerefMut};\n+use thin_vec::thin_vec;\n \n use crate::errors::*;\n \n@@ -1615,7 +1616,7 @@ fn deny_equality_constraints(\n                                         empty_args => {\n                                             *empty_args = AngleBracketedArgs {\n                                                 span: ident.span,\n-                                                args: vec![arg],\n+                                                args: thin_vec![arg],\n                                             }\n                                             .into();\n                                         }"}, {"sha": "46685dcc45dd88b0b43d0cfb77b6db77e57998b5", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=1807027248f57d98a1490bfbe9eb3d3de944e60f", "patch": "@@ -2199,7 +2199,7 @@ impl<'a> Parser<'a> {\n     /// like the user has forgotten them.\n     pub fn handle_ambiguous_unbraced_const_arg(\n         &mut self,\n-        args: &mut Vec<AngleBracketedArg>,\n+        args: &mut ThinVec<AngleBracketedArg>,\n     ) -> PResult<'a, bool> {\n         // If we haven't encountered a closing `>`, then the argument is malformed.\n         // It's likely that the user has written a const expression without enclosing it"}, {"sha": "99416c3b20494baab20de66943106a3779f4d765", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1807027248f57d98a1490bfbe9eb3d3de944e60f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=1807027248f57d98a1490bfbe9eb3d3de944e60f", "patch": "@@ -332,7 +332,7 @@ impl<'a> Parser<'a> {\n         style: PathStyle,\n         lo: Span,\n         ty_generics: Option<&Generics>,\n-    ) -> PResult<'a, Vec<AngleBracketedArg>> {\n+    ) -> PResult<'a, ThinVec<AngleBracketedArg>> {\n         // We need to detect whether there are extra leading left angle brackets and produce an\n         // appropriate error and suggestion. This cannot be implemented by looking ahead at\n         // upcoming tokens for a matching `>` character - if there are unmatched `<` tokens\n@@ -472,8 +472,8 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_angle_args(\n         &mut self,\n         ty_generics: Option<&Generics>,\n-    ) -> PResult<'a, Vec<AngleBracketedArg>> {\n-        let mut args = Vec::new();\n+    ) -> PResult<'a, ThinVec<AngleBracketedArg>> {\n+        let mut args = ThinVec::new();\n         while let Some(arg) = self.parse_angle_arg(ty_generics)? {\n             args.push(arg);\n             if !self.eat(&token::Comma) {"}]}