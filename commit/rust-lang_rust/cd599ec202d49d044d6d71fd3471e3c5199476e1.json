{"sha": "cd599ec202d49d044d6d71fd3471e3c5199476e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNTk5ZWMyMDJkNDlkMDQ0ZDZkNzFmZDM0NzFlM2M1MTk5NDc2ZTE=", "commit": {"author": {"name": "longfangsong", "email": "longfangsong@icloud.com", "date": "2021-09-20T12:43:13Z"}, "committer": {"name": "longfangsong", "email": "longfangsong@icloud.com", "date": "2021-09-20T13:37:18Z"}, "message": "Address comments", "tree": {"sha": "d52c056b01f61bdefc50ebec02a96c306c052be0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d52c056b01f61bdefc50ebec02a96c306c052be0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd599ec202d49d044d6d71fd3471e3c5199476e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd599ec202d49d044d6d71fd3471e3c5199476e1", "html_url": "https://github.com/rust-lang/rust/commit/cd599ec202d49d044d6d71fd3471e3c5199476e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd599ec202d49d044d6d71fd3471e3c5199476e1/comments", "author": {"login": "longfangsong", "id": 13777628, "node_id": "MDQ6VXNlcjEzNzc3NjI4", "avatar_url": "https://avatars.githubusercontent.com/u/13777628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/longfangsong", "html_url": "https://github.com/longfangsong", "followers_url": "https://api.github.com/users/longfangsong/followers", "following_url": "https://api.github.com/users/longfangsong/following{/other_user}", "gists_url": "https://api.github.com/users/longfangsong/gists{/gist_id}", "starred_url": "https://api.github.com/users/longfangsong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/longfangsong/subscriptions", "organizations_url": "https://api.github.com/users/longfangsong/orgs", "repos_url": "https://api.github.com/users/longfangsong/repos", "events_url": "https://api.github.com/users/longfangsong/events{/privacy}", "received_events_url": "https://api.github.com/users/longfangsong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "longfangsong", "id": 13777628, "node_id": "MDQ6VXNlcjEzNzc3NjI4", "avatar_url": "https://avatars.githubusercontent.com/u/13777628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/longfangsong", "html_url": "https://github.com/longfangsong", "followers_url": "https://api.github.com/users/longfangsong/followers", "following_url": "https://api.github.com/users/longfangsong/following{/other_user}", "gists_url": "https://api.github.com/users/longfangsong/gists{/gist_id}", "starred_url": "https://api.github.com/users/longfangsong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/longfangsong/subscriptions", "organizations_url": "https://api.github.com/users/longfangsong/orgs", "repos_url": "https://api.github.com/users/longfangsong/repos", "events_url": "https://api.github.com/users/longfangsong/events{/privacy}", "received_events_url": "https://api.github.com/users/longfangsong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cafc7e350132f8121c45f863f601eba44392c63a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cafc7e350132f8121c45f863f601eba44392c63a", "html_url": "https://github.com/rust-lang/rust/commit/cafc7e350132f8121c45f863f601eba44392c63a"}], "stats": {"total": 80, "additions": 45, "deletions": 35}, "files": [{"sha": "1a177893f0c513ce72d5719a207f6228487dae34", "filename": "crates/ide_assists/src/handlers/promote_mod_file.rs", "status": "modified", "additions": 44, "deletions": 34, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/cd599ec202d49d044d6d71fd3471e3c5199476e1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_mod_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd599ec202d49d044d6d71fd3471e3c5199476e1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_mod_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpromote_mod_file.rs?ref=cd599ec202d49d044d6d71fd3471e3c5199476e1", "patch": "@@ -3,12 +3,38 @@ use ide_db::{\n     base_db::AnchoredPathBuf,\n };\n use syntax::{\n-    ast::{self},\n-    AstNode, TextRange,\n+    ast::{self, Whitespace},\n+    AstNode, AstToken, SourceFile, TextRange, TextSize,\n };\n \n use crate::assist_context::{AssistContext, Assists};\n \n+/// Trim(remove leading and trailing whitespace) `initial_range` in `source_file`, return the trimmed range.\n+fn trimmed_text_range(source_file: &SourceFile, initial_range: TextRange) -> TextRange {\n+    let mut trimmed_range = initial_range;\n+    while source_file\n+        .syntax()\n+        .token_at_offset(trimmed_range.start())\n+        .find_map(Whitespace::cast)\n+        .is_some()\n+        && trimmed_range.start() < trimmed_range.end()\n+    {\n+        let start = trimmed_range.start() + TextSize::from(1);\n+        trimmed_range = TextRange::new(start, trimmed_range.end());\n+    }\n+    while source_file\n+        .syntax()\n+        .token_at_offset(trimmed_range.end())\n+        .find_map(Whitespace::cast)\n+        .is_some()\n+        && trimmed_range.start() < trimmed_range.end()\n+    {\n+        let end = trimmed_range.end() - TextSize::from(1);\n+        trimmed_range = TextRange::new(trimmed_range.start(), end);\n+    }\n+    trimmed_range\n+}\n+\n // Assist: promote_mod_file\n //\n // Moves inline module's contents to a separate file.\n@@ -17,7 +43,7 @@ use crate::assist_context::{AssistContext, Assists};\n // //- /main.rs\n // mod a;\n // //- /a.rs\n-// $0fn t() {}\n+// $0fn t() {}$0\n // ```\n // ->\n // ```\n@@ -26,18 +52,23 @@ use crate::assist_context::{AssistContext, Assists};\n pub(crate) fn promote_mod_file(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let source_file = ctx.find_node_at_offset::<ast::SourceFile>()?;\n     let module = ctx.sema.to_module_def(ctx.frange.file_id)?;\n-    if module.is_mod_rs(ctx.db()) {\n+    // Enable this assist if the user select all \"meaningful\" content in the source file\n+    let trimmed_selected_range = trimmed_text_range(&source_file, ctx.frange.range);\n+    let trimmed_file_range = trimmed_text_range(&source_file, source_file.syntax().text_range());\n+    if module.is_mod_rs(ctx.db()) || trimmed_selected_range != trimmed_file_range {\n         return None;\n     }\n+\n     let target = TextRange::new(\n         source_file.syntax().text_range().start(),\n         source_file.syntax().text_range().end(),\n     );\n-    let path = format!(\"./{}/mod.rs\", module.name(ctx.db())?.to_string());\n+    let module_name = module.name(ctx.db())?.to_string();\n+    let path = format!(\"./{}/mod.rs\", module_name);\n     let dst = AnchoredPathBuf { anchor: ctx.frange.file_id, path };\n     acc.add(\n         AssistId(\"promote_mod_file\", AssistKind::Refactor),\n-        \"Promote Module to directory\",\n+        format!(\"Turn {}.rs to {}/mod.rs\", module_name, module_name),\n         target,\n         |builder| {\n             builder.move_file(ctx.frange.file_id, dst);\n@@ -60,7 +91,7 @@ mod tests {\n mod a;\n //- /a.rs\n $0fn t() {}\n-\"#,\n+$0\"#,\n             r#\"\n //- /a/mod.rs\n fn t() {}\n@@ -69,44 +100,23 @@ fn t() {}\n     }\n \n     #[test]\n-    fn cursor_can_be_putted_anywhere() {\n-        check_assist(\n+    fn must_select_all_file() {\n+        check_assist_not_applicable(\n             promote_mod_file,\n             r#\"\n //- /main.rs\n mod a;\n //- /a.rs\n fn t() {}$0\n-\"#,\n-            r#\"\n-//- /a/mod.rs\n-fn t() {}\n \"#,\n         );\n-        check_assist(\n-            promote_mod_file,\n-            r#\"\n-//- /main.rs\n-mod a;\n-//- /a.rs\n-fn t()$0 {}\n-\"#,\n-            r#\"\n-//- /a/mod.rs\n-fn t() {}\n-\"#,\n-        );\n-        check_assist(\n+        check_assist_not_applicable(\n             promote_mod_file,\n             r#\"\n //- /main.rs\n mod a;\n //- /a.rs\n-fn t($0) {}\n-\"#,\n-            r#\"\n-//- /a/mod.rs\n-fn t() {}\n+$0fn$0 t() {}\n \"#,\n         );\n     }\n@@ -147,8 +157,8 @@ $0fn t() {}\n             r#\"//- /main.rs\n mod a;\n //- /a.rs\n-mod b;\n-$0fn t() {}\n+$0mod b;\n+fn t() {}$0\n //- /a/b.rs\n fn t1() {}\n \"#,"}, {"sha": "4ec3e0bb1bd5aa789ef6128b2a1a6268d2890ecf", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd599ec202d49d044d6d71fd3471e3c5199476e1/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd599ec202d49d044d6d71fd3471e3c5199476e1/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=cd599ec202d49d044d6d71fd3471e3c5199476e1", "patch": "@@ -1234,7 +1234,7 @@ fn doctest_promote_mod_file() {\n //- /main.rs\n mod a;\n //- /a.rs\n-$0fn t() {}\n+$0fn t() {}$0\n \"#####,\n         r#####\"\n fn t() {}"}]}