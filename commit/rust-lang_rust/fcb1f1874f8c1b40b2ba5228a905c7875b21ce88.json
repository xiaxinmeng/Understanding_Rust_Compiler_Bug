{"sha": "fcb1f1874f8c1b40b2ba5228a905c7875b21ce88", "node_id": "C_kwDOAAsO6NoAKGZjYjFmMTg3NGY4YzFiNDBiMmJhNTIyOGE5MDVjNzg3NWIyMWNlODg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-03T15:30:52Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T08:12:16Z"}, "message": "Don't show fields from other crates", "tree": {"sha": "8ac3347f36b9131db4a463c8e10e73cccd8842ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ac3347f36b9131db4a463c8e10e73cccd8842ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcb1f1874f8c1b40b2ba5228a905c7875b21ce88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb1f1874f8c1b40b2ba5228a905c7875b21ce88", "html_url": "https://github.com/rust-lang/rust/commit/fcb1f1874f8c1b40b2ba5228a905c7875b21ce88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcb1f1874f8c1b40b2ba5228a905c7875b21ce88/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e79f5f9f8b16444e86cb611d1f819023317d974", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e79f5f9f8b16444e86cb611d1f819023317d974", "html_url": "https://github.com/rust-lang/rust/commit/2e79f5f9f8b16444e86cb611d1f819023317d974"}], "stats": {"total": 42, "additions": 7, "deletions": 35}, "files": [{"sha": "4bde57881f0839b88e8144768f887781497fa369", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcb1f1874f8c1b40b2ba5228a905c7875b21ce88/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb1f1874f8c1b40b2ba5228a905c7875b21ce88/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=fcb1f1874f8c1b40b2ba5228a905c7875b21ce88", "patch": "@@ -2499,7 +2499,9 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n         ) -> Option<InitError> {\n             let field_err = variant.fields.iter().find_map(|field| {\n                 ty_find_init_error(cx, field.ty(cx.tcx, substs), init).map(|mut err| {\n-                    if err.span.is_none() {\n+                    if !field.did.is_local() {\n+                        err\n+                    } else if err.span.is_none() {\n                         err.span = Some(cx.tcx.def_span(field.did));\n                         write!(&mut err.message, \" (in this {descr})\").unwrap();\n                         err"}, {"sha": "9f0f51f4d9726de548a7bef93c094be9329b221c", "filename": "src/test/ui/lint/invalid_value.stderr", "status": "modified", "additions": 4, "deletions": 34, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fcb1f1874f8c1b40b2ba5228a905c7875b21ce88/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcb1f1874f8c1b40b2ba5228a905c7875b21ce88/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr?ref=fcb1f1874f8c1b40b2ba5228a905c7875b21ce88", "patch": "@@ -332,11 +332,7 @@ LL |         let _val: NonNull<i32> = mem::uninitialized();\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::ptr::NonNull<i32>` must be non-null\n-note: raw pointers must not be uninitialized (in this struct field)\n-  --> $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-   |\n-LL |     pointer: *const T,\n-   |     ^^^^^^^^^^^^^^^^^\n+   = note: raw pointers must not be uninitialized\n \n error: the type `(NonZeroU32, i32)` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:95:39\n@@ -359,18 +355,7 @@ LL |         let _val: (NonZeroU32, i32) = mem::uninitialized();\n    |                                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::num::NonZeroU32` must be non-null\n-note: integers must not be uninitialized (in this struct field)\n-  --> $SRC_DIR/core/src/num/nonzero.rs:LL:COL\n-   |\n-LL | / nonzero_integers! {\n-LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU8(u8);\n-LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU16(u16);\n-LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU32(u32);\n-...  |\n-LL | |     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIs...\n-LL | | }\n-   | |_^\n-   = note: this error originates in the macro `nonzero_integers` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: integers must not be uninitialized\n \n error: the type `*const dyn Send` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:98:37\n@@ -477,18 +462,7 @@ note: `std::num::NonZeroU32` must be non-null (in this field of the only potenti\n    |\n LL |     Banana(NonZeroU32),\n    |            ^^^^^^^^^^\n-note: integers must not be uninitialized (in this struct field)\n-  --> $SRC_DIR/core/src/num/nonzero.rs:LL:COL\n-   |\n-LL | / nonzero_integers! {\n-LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU8(u8);\n-LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU16(u16);\n-LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU32(u32);\n-...  |\n-LL | |     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIs...\n-LL | | }\n-   | |_^\n-   = note: this error originates in the macro `nonzero_integers` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: integers must not be uninitialized\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:112:26\n@@ -688,11 +662,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::ptr::NonNull<i32>` must be non-null\n-note: raw pointers must not be uninitialized (in this struct field)\n-  --> $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-   |\n-LL |     pointer: *const T,\n-   |     ^^^^^^^^^^^^^^^^^\n+   = note: raw pointers must not be uninitialized\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:159:26"}]}