{"sha": "48da66f28f078c0dc31068a30977e9079c876d90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZGE2NmYyOGYwNzhjMGRjMzEwNjhhMzA5NzdlOTA3OWM4NzZkOTA=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-04-13T02:23:49Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-05-11T16:55:31Z"}, "message": "Show memory layout for type aliases\n\nAt first you might think \"why not just click through to the aliased\ntype?\", but if a type alias instantiates all of the generic parameters\nof the aliased type, then it can show layout info even though the\naliased type cannot (because we can't compute the layout of a generic\ntype). So I think it's still useful to show layout info for type\naliases.", "tree": {"sha": "5ea5bdfe5c3c1ad93984f77dfaa3d2aae2459281", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ea5bdfe5c3c1ad93984f77dfaa3d2aae2459281"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48da66f28f078c0dc31068a30977e9079c876d90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48da66f28f078c0dc31068a30977e9079c876d90", "html_url": "https://github.com/rust-lang/rust/commit/48da66f28f078c0dc31068a30977e9079c876d90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48da66f28f078c0dc31068a30977e9079c876d90/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9859e2b01d2498ea0465a36bf4055d45e1f96f5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9859e2b01d2498ea0465a36bf4055d45e1f96f5b", "html_url": "https://github.com/rust-lang/rust/commit/9859e2b01d2498ea0465a36bf4055d45e1f96f5b"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "9ac9ee66f6a862e28d5c2fc998e8d900df7415f4", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48da66f28f078c0dc31068a30977e9079c876d90/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48da66f28f078c0dc31068a30977e9079c876d90/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=48da66f28f078c0dc31068a30977e9079c876d90", "patch": "@@ -830,11 +830,14 @@ fn item_typedef(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::T\n \n     document(w, cx, it, None);\n \n+    let def_id = it.def_id.expect_real();\n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n     // associated items from the aliased type (see discussion in #32077), but\n     // we need #14072 to make sense of the generics.\n-    render_assoc_items(w, cx, it, it.def_id.expect_real(), AssocItemRender::All)\n+    render_assoc_items(w, cx, it, def_id, AssocItemRender::All);\n+\n+    document_ty_layout(w, cx, def_id);\n }\n \n fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Union) {"}, {"sha": "e18bdeba91352632df7eaefd78eb1371815f46fe", "filename": "src/test/rustdoc/type-layout.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48da66f28f078c0dc31068a30977e9079c876d90/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48da66f28f078c0dc31068a30977e9079c876d90/src%2Ftest%2Frustdoc%2Ftype-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftype-layout.rs?ref=48da66f28f078c0dc31068a30977e9079c876d90", "patch": "@@ -36,7 +36,8 @@ pub struct Generic<T>(T);\n // @has - '(unsized)'\n pub struct Unsized([u8]);\n \n-// @!has type_layout/type.TypeAlias.html 'Size: '\n+// @has type_layout/type.TypeAlias.html 'Size: '\n+// @has - ' bytes'\n pub type TypeAlias = X;\n \n // @!has type_layout/trait.MyTrait.html 'Size: '"}]}