{"sha": "10b7fabbf36f1ab45c4d33357270d0557822ff90", "node_id": "C_kwDOAAsO6NoAKDEwYjdmYWJiZjM2ZjFhYjQ1YzRkMzMzNTcyNzBkMDU1NzgyMmZmOTA", "commit": {"author": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-28T17:18:07Z"}, "committer": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-28T17:18:07Z"}, "message": "Fix adjacent code", "tree": {"sha": "8811ed3fa7b3f1fe9e3de342b8cad0ad604eb7cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8811ed3fa7b3f1fe9e3de342b8cad0ad604eb7cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10b7fabbf36f1ab45c4d33357270d0557822ff90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10b7fabbf36f1ab45c4d33357270d0557822ff90", "html_url": "https://github.com/rust-lang/rust/commit/10b7fabbf36f1ab45c4d33357270d0557822ff90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10b7fabbf36f1ab45c4d33357270d0557822ff90/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9216d836c7190fe5d90e0c48ca73de5b8e3e4f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9216d836c7190fe5d90e0c48ca73de5b8e3e4f8", "html_url": "https://github.com/rust-lang/rust/commit/e9216d836c7190fe5d90e0c48ca73de5b8e3e4f8"}], "stats": {"total": 152, "additions": 74, "deletions": 78}, "files": [{"sha": "939bdbcdc7cd7e245b733bed959c419f0b336f76", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -481,7 +481,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n     }\n }\n \n-fn implements_ord<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n+fn implements_ord(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n     cx.tcx\n         .get_diagnostic_item(sym::Ord)"}, {"sha": "dcbcabf1347eb7ce2e5e2320d260b9e359b992b6", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -1231,8 +1231,8 @@ fn is_mixed_projection_predicate<'tcx>(\n     }\n }\n \n-fn referent_used_exactly_once<'a, 'tcx>(\n-    cx: &'a LateContext<'tcx>,\n+fn referent_used_exactly_once<'tcx>(\n+    cx: &LateContext<'tcx>,\n     possible_borrowers: &mut Vec<(LocalDefId, PossibleBorrowerMap<'tcx, 'tcx>)>,\n     reference: &Expr<'tcx>,\n ) -> bool {"}, {"sha": "cecec520a6d7ce79c87e8cae365de0f5c082d16e", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -336,8 +336,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     }\n }\n \n-fn lint_for_missing_headers<'tcx>(\n-    cx: &LateContext<'tcx>,\n+fn lint_for_missing_headers(\n+    cx: &LateContext<'_>,\n     def_id: LocalDefId,\n     span: impl Into<MultiSpan> + Copy,\n     sig: &hir::FnSig<'_>,\n@@ -467,7 +467,7 @@ struct DocHeaders {\n     panics: bool,\n }\n \n-fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &'a [Attribute]) -> DocHeaders {\n+fn check_attrs(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &[Attribute]) -> DocHeaders {\n     use pulldown_cmark::{BrokenLink, CowStr, Options};\n     /// We don't want the parser to choke on intra doc links. Since we don't\n     /// actually care about rendering them, just pretend that all broken links are"}, {"sha": "15d693a117a3cc4af0c5e3755ff4cfad5b0053b9", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for FallibleImplFrom {\n     }\n }\n \n-fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[hir::ImplItemRef]) {\n+fn lint_impl_body(cx: &LateContext<'_>, impl_span: Span, impl_items: &[hir::ImplItemRef]) {\n     use rustc_hir::intravisit::{self, Visitor};\n     use rustc_hir::{Expr, ImplItemKind};\n "}, {"sha": "c7c3b3f6b94c4326312d39ca29920f548462eb71", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -66,8 +66,8 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         use rustc_span::BytePos;\n \n-        fn suggestion<'tcx>(\n-            cx: &LateContext<'tcx>,\n+        fn suggestion(\n+            cx: &LateContext<'_>,\n             diag: &mut Diagnostic,\n             generics_span: Span,\n             generics_suggestion_span: Span,"}, {"sha": "0d5099bde6de015b5aa069e5bdeb6611afd9d471", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -207,8 +207,8 @@ impl SliceLintInformation {\n     }\n }\n \n-fn filter_lintable_slices<'a, 'tcx>(\n-    cx: &'a LateContext<'tcx>,\n+fn filter_lintable_slices<'tcx>(\n+    cx: &LateContext<'tcx>,\n     slice_lint_info: FxIndexMap<hir::HirId, SliceLintInformation>,\n     max_suggested_slice: u64,\n     scope: &'tcx hir::Expr<'tcx>,"}, {"sha": "4cd7dff4cfd762c95352f230beb6b8b3f0652458", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -171,11 +171,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n \n /// Returns a tuple of options with the start and end (exclusive) values of\n /// the range. If the start or end is not constant, None is returned.\n-fn to_const_range<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    range: higher::Range<'_>,\n-    array_size: u128,\n-) -> (Option<u128>, Option<u128>) {\n+fn to_const_range(cx: &LateContext<'_>, range: higher::Range<'_>, array_size: u128) -> (Option<u128>, Option<u128>) {\n     let s = range\n         .start\n         .map(|expr| constant(cx, cx.typeck_results(), expr).map(|(c, _)| c));"}, {"sha": "6ea637412d5b1b47eb655871a0ab252d135cd0e9", "filename": "clippy_lints/src/invalid_upcast_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -38,7 +38,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(InvalidUpcastComparisons => [INVALID_UPCAST_COMPARISONS]);\n \n-fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_>, expr: &'a Expr<'_>) -> Option<(FullInt, FullInt)> {\n+fn numeric_cast_precast_bounds(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<(FullInt, FullInt)> {\n     if let ExprKind::Cast(cast_exp, _) = expr.kind {\n         let pre_cast_ty = cx.typeck_results().expr_ty(cast_exp);\n         let cast_ty = cx.typeck_results().expr_ty(expr);"}, {"sha": "72ae2b39162d55e46984612702499dd71061047d", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -52,8 +52,8 @@ fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId>\n     None\n }\n \n-fn check_for_mutation<'tcx>(\n-    cx: &LateContext<'tcx>,\n+fn check_for_mutation(\n+    cx: &LateContext<'_>,\n     body: &Expr<'_>,\n     bound_id_start: Option<HirId>,\n     bound_id_end: Option<HirId>,"}, {"sha": "59195d1ae4e0a5854865b83243de49155df97f83", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -119,7 +119,7 @@ fn is_unit_expression(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n /// semicolons, which causes problems when generating a suggestion. Given an\n /// expression that evaluates to '()' or '!', recursively remove useless braces\n /// and semi-colons until is suitable for including in the suggestion template\n-fn reduce_unit_expression<'a>(cx: &LateContext<'_>, expr: &'a hir::Expr<'_>) -> Option<Span> {\n+fn reduce_unit_expression(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Span> {\n     if !is_unit_expression(cx, expr) {\n         return None;\n     }"}, {"sha": "d521a529e0d6463f12486033c3351d9218a67817", "filename": "clippy_lints/src/matches/manual_filter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmanual_filter.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -62,7 +62,7 @@ fn peels_blocks_incl_unsafe<'a>(expr: &'a Expr<'a>) -> &'a Expr<'a> {\n //    <expr>\n // }\n // Returns true if <expr> resolves to `Some(x)`, `false` otherwise\n-fn is_some_expr<'tcx>(cx: &LateContext<'_>, target: HirId, ctxt: SyntaxContext, expr: &'tcx Expr<'_>) -> bool {\n+fn is_some_expr(cx: &LateContext<'_>, target: HirId, ctxt: SyntaxContext, expr: &Expr<'_>) -> bool {\n     if let Some(inner_expr) = peels_blocks_incl_unsafe_opt(expr) {\n         // there can be not statements in the block as they would be removed when switching to `.filter`\n         if let ExprKind::Call(callee, [arg]) = inner_expr.kind {"}, {"sha": "78c70d1c8d8d0db72ad77d3d92772ec7541c09f9", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -377,7 +377,7 @@ impl<'a, 'tcx> ArmSigDropHelper<'a, 'tcx> {\n     }\n }\n \n-fn has_significant_drop_in_arms<'tcx, 'a>(cx: &'a LateContext<'tcx>, arms: &'tcx [Arm<'_>]) -> FxHashSet<Span> {\n+fn has_significant_drop_in_arms<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) -> FxHashSet<Span> {\n     let mut helper = ArmSigDropHelper::new(cx);\n     for arm in arms {\n         helper.visit_expr(arm.body);"}, {"sha": "19b49c44d5704d316e09239e40ea91141c906b61", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -153,7 +153,7 @@ fn pat_in_candidate_enum<'a>(cx: &LateContext<'a>, ty: Ty<'a>, pat: &Pat<'_>) ->\n }\n \n /// Returns `true` if the given type is an enum we know won't be expanded in the future\n-fn in_candidate_enum<'a>(cx: &LateContext<'a>, ty: Ty<'_>) -> bool {\n+fn in_candidate_enum(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n     // list of candidate `Enum`s we know will never get any more members\n     let candidates = [sym::Cow, sym::Option, sym::Result];\n "}, {"sha": "27a05337a290f2c6cce4ee0635e44672ef71e5df", "filename": "clippy_lints/src/methods/chars_cmp_with_unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -9,8 +9,8 @@ use rustc_lint::LateContext;\n use rustc_lint::Lint;\n \n /// Wrapper fn for `CHARS_NEXT_CMP` and `CHARS_LAST_CMP` lints with `unwrap()`.\n-pub(super) fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n     info: &crate::methods::BinaryExprInfo<'_>,\n     chain_methods: &[&str],\n     lint: &'static Lint,"}, {"sha": "2efff4c3c5497b9d361b3b375b04c29e1ecdc331", "filename": "clippy_lints/src/methods/chars_last_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -4,7 +4,7 @@ use rustc_lint::LateContext;\n use super::CHARS_LAST_CMP;\n \n /// Checks for the `CHARS_LAST_CMP` lint.\n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n     if chars_cmp::check(cx, info, &[\"chars\", \"last\"], CHARS_LAST_CMP, \"ends_with\") {\n         true\n     } else {"}, {"sha": "5b8713f7d79035d92803413ae6b509c98d5f4fe9", "filename": "clippy_lints/src/methods/chars_last_cmp_with_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp_with_unwrap.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -4,7 +4,7 @@ use rustc_lint::LateContext;\n use super::CHARS_LAST_CMP;\n \n /// Checks for the `CHARS_LAST_CMP` lint with `unwrap()`.\n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n     if chars_cmp_with_unwrap::check(cx, info, &[\"chars\", \"last\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\") {\n         true\n     } else {"}, {"sha": "b631fecab9729e4de4c6ed853aa9928ed1eb175a", "filename": "clippy_lints/src/methods/chars_next_cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -3,6 +3,6 @@ use rustc_lint::LateContext;\n use super::CHARS_NEXT_CMP;\n \n /// Checks for the `CHARS_NEXT_CMP` lint.\n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n     crate::methods::chars_cmp::check(cx, info, &[\"chars\", \"next\"], CHARS_NEXT_CMP, \"starts_with\")\n }"}, {"sha": "caf21d3ff3bcb8a055ed5072be1c6fba88ca579a", "filename": "clippy_lints/src/methods/chars_next_cmp_with_unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -3,6 +3,6 @@ use rustc_lint::LateContext;\n use super::CHARS_NEXT_CMP;\n \n /// Checks for the `CHARS_NEXT_CMP` lint with `unwrap()`.\n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n     crate::methods::chars_cmp_with_unwrap::check(cx, info, &[\"chars\", \"next\", \"unwrap\"], CHARS_NEXT_CMP, \"starts_with\")\n }"}, {"sha": "f888c58a72de93a605f3193e5dbfc5907d86ef24", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -17,7 +17,7 @@ use super::MANUAL_FILTER_MAP;\n use super::MANUAL_FIND_MAP;\n use super::OPTION_FILTER_MAP;\n \n-fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Symbol) -> bool {\n+fn is_method(cx: &LateContext<'_>, expr: &hir::Expr<'_>, method_name: Symbol) -> bool {\n     match &expr.kind {\n         hir::ExprKind::Path(QPath::TypeRelative(_, mname)) => mname.ident.name == method_name,\n         hir::ExprKind::Path(QPath::Resolved(_, segments)) => {\n@@ -46,7 +46,7 @@ fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Sy\n     }\n }\n \n-fn is_option_filter_map<'tcx>(cx: &LateContext<'tcx>, filter_arg: &hir::Expr<'_>, map_arg: &hir::Expr<'_>) -> bool {\n+fn is_option_filter_map(cx: &LateContext<'_>, filter_arg: &hir::Expr<'_>, map_arg: &hir::Expr<'_>) -> bool {\n     is_method(cx, map_arg, sym::unwrap) && is_method(cx, filter_arg, sym!(is_some))\n }\n \n@@ -66,8 +66,8 @@ fn is_filter_some_map_unwrap(\n \n /// lint use of `filter().map()` or `find().map()` for `Iterators`\n #[allow(clippy::too_many_arguments)]\n-pub(super) fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n     expr: &hir::Expr<'_>,\n     filter_recv: &hir::Expr<'_>,\n     filter_arg: &hir::Expr<'_>,"}, {"sha": "3a8b8cbff47e1fdfb751e949e4e0ffad3b356f34", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -12,8 +12,8 @@ use rustc_span::symbol::{sym, Symbol};\n use super::INEFFICIENT_TO_STRING;\n \n /// Checks for the `INEFFICIENT_TO_STRING` lint\n-pub fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n+pub fn check(\n+    cx: &LateContext<'_>,\n     expr: &hir::Expr<'_>,\n     method_name: Symbol,\n     receiver: &hir::Expr<'_>,"}, {"sha": "c830958d5c80e58865bd1c93b9091fdbd5e5f239", "filename": "clippy_lints/src/methods/iter_nth_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -10,7 +10,7 @@ use rustc_span::sym;\n \n use super::ITER_NTH_ZERO;\n \n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n     if_chain! {\n         if is_trait_method(cx, expr, sym::Iterator);\n         if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), arg);"}, {"sha": "70abe4891d9857e8ccee90b8abfc8065a744b941", "filename": "clippy_lints/src/methods/iter_on_single_or_empty_collections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fiter_on_single_or_empty_collections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fiter_on_single_or_empty_collections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_on_single_or_empty_collections.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -25,7 +25,7 @@ impl IterType {\n     }\n }\n \n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, method_name: &str, recv: &Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: &str, recv: &Expr<'_>) {\n     let item = match recv.kind {\n         ExprKind::Array([]) => None,\n         ExprKind::Array([e]) => Some(e),"}, {"sha": "a7284c64497766b2b404b2377c5d0317b074d5d0", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -67,7 +67,7 @@ enum MinMax {\n     Max,\n }\n \n-fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<MinMax> {\n+fn is_min_or_max(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<MinMax> {\n     // `T::max_value()` `T::min_value()` inherent methods\n     if_chain! {\n         if let hir::ExprKind::Call(func, args) = &expr.kind;"}, {"sha": "6bc783c6d505af108a508067f772a9fefcda5103", "filename": "clippy_lints/src/methods/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_clone.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -15,11 +15,11 @@ use rustc_span::{sym, Span};\n \n use super::MAP_CLONE;\n \n-pub(super) fn check<'tcx>(\n+pub(super) fn check(\n     cx: &LateContext<'_>,\n     e: &hir::Expr<'_>,\n     recv: &hir::Expr<'_>,\n-    arg: &'tcx hir::Expr<'_>,\n+    arg: &hir::Expr<'_>,\n     msrv: Option<RustcVersion>,\n ) {\n     if_chain! {"}, {"sha": "b773b3e423f407c78e8e1c68b959a205c0d87b41", "filename": "clippy_lints/src/methods/map_err_ignore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_err_ignore.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -6,7 +6,7 @@ use rustc_span::sym;\n \n use super::MAP_ERR_IGNORE;\n \n-pub(super) fn check<'tcx>(cx: &LateContext<'_>, e: &Expr<'_>, arg: &'tcx Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, e: &Expr<'_>, arg: &Expr<'_>) {\n     if let Some(method_id) = cx.typeck_results().type_dependent_def_id(e.hir_id)\n         && let Some(impl_id) = cx.tcx.impl_of_method(method_id)\n         && is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Result)"}, {"sha": "e6eb64bcbde64ad0abd70e444e806a30ee51777d", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -13,8 +13,8 @@ use rustc_span::sym;\n use super::OPTION_AS_REF_DEREF;\n \n /// lint use of `_.as_ref().map(Deref::deref)` for `Option`s\n-pub(super) fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n     expr: &hir::Expr<'_>,\n     as_ref_recv: &hir::Expr<'_>,\n     map_arg: &hir::Expr<'_>,"}, {"sha": "2ac0786b37b1e73fd431cd3267c30b0992bed0b3", "filename": "clippy_lints/src/methods/suspicious_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -8,7 +8,7 @@ use rustc_span::sym;\n \n use super::SUSPICIOUS_MAP;\n \n-pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, count_recv: &hir::Expr<'_>, map_arg: &hir::Expr<'_>) {\n+pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, count_recv: &hir::Expr<'_>, map_arg: &hir::Expr<'_>) {\n     if_chain! {\n         if is_trait_method(cx, count_recv, sym::Iterator);\n         let closure = expr_or_init(cx, map_arg);"}, {"sha": "321fa4b7f9996681000b59321216a3474766df11", "filename": "clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -218,7 +218,7 @@ enum StopEarly {\n     Stop,\n }\n \n-fn check_expr<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr<'_>) -> StopEarly {\n+fn check_expr<'tcx>(vis: &mut ReadVisitor<'_, 'tcx>, expr: &'tcx Expr<'_>) -> StopEarly {\n     if expr.hir_id == vis.last_expr.hir_id {\n         return StopEarly::KeepGoing;\n     }\n@@ -265,7 +265,7 @@ fn check_expr<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr<'_>) -\n     StopEarly::KeepGoing\n }\n \n-fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt<'_>) -> StopEarly {\n+fn check_stmt<'tcx>(vis: &mut ReadVisitor<'_, 'tcx>, stmt: &'tcx Stmt<'_>) -> StopEarly {\n     match stmt.kind {\n         StmtKind::Expr(expr) | StmtKind::Semi(expr) => check_expr(vis, expr),\n         // If the declaration is of a local variable, check its initializer"}, {"sha": "551b6ed1227f37a6bdac6364133a44df5195f7d2", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -137,7 +137,7 @@ impl MutableKeyType {\n         }\n     }\n \n-    fn check_sig<'tcx>(&self, cx: &LateContext<'tcx>, item_hir_id: hir::HirId, decl: &hir::FnDecl<'_>) {\n+    fn check_sig(&self, cx: &LateContext<'_>, item_hir_id: hir::HirId, decl: &hir::FnDecl<'_>) {\n         let fn_def_id = cx.tcx.hir().local_def_id(item_hir_id);\n         let fn_sig = cx.tcx.fn_sig(fn_def_id);\n         for (hir_ty, ty) in iter::zip(decl.inputs, fn_sig.inputs().skip_binder()) {"}, {"sha": "38a75034cd314857f0c1489a1def0cdaf5db7007", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -287,7 +287,7 @@ const DROP_ELSE_BLOCK_MSG: &str = \"consider dropping the `else` clause\";\n \n const DROP_CONTINUE_EXPRESSION_MSG: &str = \"consider dropping the `continue` expression\";\n \n-fn emit_warning<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>, header: &str, typ: LintType) {\n+fn emit_warning(cx: &EarlyContext<'_>, data: &LintData<'_>, header: &str, typ: LintType) {\n     // snip    is the whole *help* message that appears after the warning.\n     // message is the warning message.\n     // expr    is the expression which the lint warning message refers to.\n@@ -313,7 +313,7 @@ fn emit_warning<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>, header: &str,\n     );\n }\n \n-fn suggestion_snippet_for_continue_inside_if<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>) -> String {\n+fn suggestion_snippet_for_continue_inside_if(cx: &EarlyContext<'_>, data: &LintData<'_>) -> String {\n     let cond_code = snippet(cx, data.if_cond.span, \"..\");\n \n     let continue_code = snippet_block(cx, data.if_block.span, \"..\", Some(data.if_expr.span));\n@@ -327,7 +327,7 @@ fn suggestion_snippet_for_continue_inside_if<'a>(cx: &EarlyContext<'_>, data: &'\n     )\n }\n \n-fn suggestion_snippet_for_continue_inside_else<'a>(cx: &EarlyContext<'_>, data: &'a LintData<'_>) -> String {\n+fn suggestion_snippet_for_continue_inside_else(cx: &EarlyContext<'_>, data: &LintData<'_>) -> String {\n     let cond_code = snippet(cx, data.if_cond.span, \"..\");\n \n     // Region B\n@@ -361,7 +361,7 @@ fn suggestion_snippet_for_continue_inside_else<'a>(cx: &EarlyContext<'_>, data:\n     )\n }\n \n-fn check_and_warn<'a>(cx: &EarlyContext<'_>, expr: &'a ast::Expr) {\n+fn check_and_warn(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     if_chain! {\n         if let ast::ExprKind::Loop(loop_block, ..) = &expr.kind;\n         if let Some(last_stmt) = loop_block.stmts.last();"}, {"sha": "7de00c53f73bcbf27f6d397dbd0aad9def432be5", "filename": "clippy_lints/src/operators/op_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Foperators%2Fop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Foperators%2Fop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fop_ref.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -199,7 +199,7 @@ fn in_impl<'tcx>(\n     }\n }\n \n-fn are_equal<'tcx>(cx: &LateContext<'tcx>, middle_ty: Ty<'_>, hir_ty: &rustc_hir::Ty<'_>) -> bool {\n+fn are_equal(cx: &LateContext<'_>, middle_ty: Ty<'_>, hir_ty: &rustc_hir::Ty<'_>) -> bool {\n     if_chain! {\n         if let ty::Adt(adt_def, _) = middle_ty.kind();\n         if let Some(local_did) = adt_def.did().as_local();"}, {"sha": "97b5a4ce36413f4820b209a68f45c3beeb26db54", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -130,7 +130,7 @@ enum DerefPossible {\n     Impossible,\n }\n \n-fn apply_lint<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'_>, deref_possible: DerefPossible) -> bool {\n+fn apply_lint(cx: &LateContext<'_>, pat: &Pat<'_>, deref_possible: DerefPossible) -> bool {\n     let maybe_mismatch = find_first_mismatch(cx, pat);\n     if let Some((span, mutability, level)) = maybe_mismatch {\n         span_lint_and_help(\n@@ -163,7 +163,7 @@ enum Level {\n     Lower,\n }\n \n-fn find_first_mismatch<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'_>) -> Option<(Span, Mutability, Level)> {\n+fn find_first_mismatch(cx: &LateContext<'_>, pat: &Pat<'_>) -> Option<(Span, Mutability, Level)> {\n     let mut result = None;\n     pat.walk(|p| {\n         if result.is_some() {"}, {"sha": "47b8891e12302b4e4ef6f9526f1b012307158d4d", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -105,17 +105,17 @@ fn expr_as_ptr_offset_call<'tcx>(\n }\n \n // Is the type of the expression a usize?\n-fn is_expr_ty_usize<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n+fn is_expr_ty_usize(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     cx.typeck_results().expr_ty(expr) == cx.tcx.types.usize\n }\n \n // Is the type of the expression a raw pointer?\n-fn is_expr_ty_raw_ptr<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n+fn is_expr_ty_raw_ptr(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     cx.typeck_results().expr_ty(expr).is_unsafe_ptr()\n }\n \n-fn build_suggestion<'tcx>(\n-    cx: &LateContext<'tcx>,\n+fn build_suggestion(\n+    cx: &LateContext<'_>,\n     method: Method,\n     receiver_expr: &Expr<'_>,\n     cast_lhs_expr: &Expr<'_>,"}, {"sha": "8cc8d5ea62951ce70b2c7f9eb8b5b2f4f7451d96", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -105,8 +105,8 @@ impl EarlyLintPass for RedundantClosureCall {\n \n impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx hir::Block<'_>) {\n-        fn count_closure_usage<'a, 'tcx>(\n-            cx: &'a LateContext<'tcx>,\n+        fn count_closure_usage<'tcx>(\n+            cx: &LateContext<'tcx>,\n             block: &'tcx hir::Block<'_>,\n             path: &'tcx hir::Path<'tcx>,\n         ) -> usize {"}, {"sha": "a2109038a05782900e88d1d751b7aa5244040aca", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -168,7 +168,7 @@ impl SlowVectorInit {\n         };\n     }\n \n-    fn emit_lint<'tcx>(cx: &LateContext<'tcx>, slow_fill: &Expr<'_>, vec_alloc: &VecAllocation<'_>, msg: &str) {\n+    fn emit_lint(cx: &LateContext<'_>, slow_fill: &Expr<'_>, vec_alloc: &VecAllocation<'_>, msg: &str) {\n         let len_expr = Sugg::hir(cx, vec_alloc.len_expr, \"len\");\n \n         span_lint_and_then(cx, SLOW_VECTOR_INITIALIZATION, slow_fill.span, msg, |diag| {"}, {"sha": "1aebb8b3104ba611482d1f86c9b4e5f2a0b00fc8", "filename": "clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -256,7 +256,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n     }\n }\n \n-pub(super) fn is_lint_ref_type<'tcx>(cx: &LateContext<'tcx>, ty: &hir::Ty<'_>) -> bool {\n+pub(super) fn is_lint_ref_type(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n     if let TyKind::Rptr(\n         _,\n         MutTy {"}, {"sha": "16b160b6fd27ef688b888d8e9fbd9cee5d2da35b", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -72,8 +72,8 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///    |\n ///    = help: consider using `f64::NAN` if you would like a constant representing NaN\n /// ```\n-pub fn span_lint_and_help<'a, T: LintContext>(\n-    cx: &'a T,\n+pub fn span_lint_and_help<T: LintContext>(\n+    cx: &T,\n     lint: &'static Lint,\n     span: impl Into<MultiSpan>,\n     msg: &str,\n@@ -114,8 +114,8 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n /// 10 |     forget(&SomeStruct);\n ///    |            ^^^^^^^^^^^\n /// ```\n-pub fn span_lint_and_note<'a, T: LintContext>(\n-    cx: &'a T,\n+pub fn span_lint_and_note<T: LintContext>(\n+    cx: &T,\n     lint: &'static Lint,\n     span: impl Into<MultiSpan>,\n     msg: &str,\n@@ -192,8 +192,8 @@ pub fn span_lint_hir_and_then(\n ///     = note: `-D fold-any` implied by `-D warnings`\n /// ```\n #[cfg_attr(feature = \"internal\", allow(clippy::collapsible_span_lint_calls))]\n-pub fn span_lint_and_sugg<'a, T: LintContext>(\n-    cx: &'a T,\n+pub fn span_lint_and_sugg<T: LintContext>(\n+    cx: &T,\n     lint: &'static Lint,\n     sp: Span,\n     msg: &str,"}, {"sha": "f7d3c91777ea6538860ea52a83060b9b64314f40", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -994,7 +994,7 @@ impl std::ops::BitOrAssign for CaptureKind {\n /// Note as this will walk up to parent expressions until the capture can be determined it should\n /// only be used while making a closure somewhere a value is consumed. e.g. a block, match arm, or\n /// function argument (other than a receiver).\n-pub fn capture_local_usage<'tcx>(cx: &LateContext<'tcx>, e: &Expr<'_>) -> CaptureKind {\n+pub fn capture_local_usage(cx: &LateContext<'_>, e: &Expr<'_>) -> CaptureKind {\n     fn pat_capture_kind(cx: &LateContext<'_>, pat: &Pat<'_>) -> CaptureKind {\n         let mut capture = CaptureKind::Ref(Mutability::Not);\n         pat.each_binding_or_first(&mut |_, id, span, _| match cx\n@@ -1852,7 +1852,7 @@ pub fn match_any_def_paths(cx: &LateContext<'_>, did: DefId, paths: &[&[&str]])\n }\n \n /// Checks if the given `DefId` matches the path.\n-pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -> bool {\n+pub fn match_def_path(cx: &LateContext<'_>, did: DefId, syms: &[&str]) -> bool {\n     // We should probably move to Symbols in Clippy as well rather than interning every time.\n     let path = cx.get_def_path(did);\n     syms.iter().map(|x| Symbol::intern(x)).eq(path.iter().copied())"}, {"sha": "65722f142aa69c4c8b5055e325b32b60ff3adb17", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -18,7 +18,7 @@ use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n-pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<RustcVersion>) -> McfResult {\n+pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: Option<RustcVersion>) -> McfResult {\n     let def_id = body.source.def_id();\n     let mut current = def_id;\n     loop {\n@@ -276,9 +276,9 @@ fn check_place<'tcx>(tcx: TyCtxt<'tcx>, place: Place<'tcx>, span: Span, body: &B\n     Ok(())\n }\n \n-fn check_terminator<'a, 'tcx>(\n+fn check_terminator<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    body: &'a Body<'tcx>,\n+    body: &Body<'tcx>,\n     terminator: &Terminator<'tcx>,\n     msrv: Option<RustcVersion>,\n ) -> McfResult {"}, {"sha": "45181d3c7a8e982de7586433c86e0233b3c59a7c", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -801,7 +801,7 @@ pub struct DerefClosure {\n /// Returns `None` if no such use cases have been triggered in closure body\n ///\n /// note: this only works on single line immutable closures with exactly one input parameter.\n-pub fn deref_closure_args<'tcx>(cx: &LateContext<'_>, closure: &'tcx hir::Expr<'_>) -> Option<DerefClosure> {\n+pub fn deref_closure_args(cx: &LateContext<'_>, closure: &hir::Expr<'_>) -> Option<DerefClosure> {\n     if let hir::ExprKind::Closure(&Closure { fn_decl, body, .. }) = closure.kind {\n         let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)"}, {"sha": "1f26c7f4db65778f29be10a4d075ee83d24d6bb5", "filename": "tests/ui/crashes/ice-2774.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/tests%2Fui%2Fcrashes%2Fice-2774.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/tests%2Fui%2Fcrashes%2Fice-2774.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2774.stderr?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -1,4 +1,4 @@\n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+error: the following explicit lifetimes could be elided: 'a\n   --> $DIR/ice-2774.rs:15:1\n    |\n LL | pub fn add_barfoos_to_foos<'a>(bars: &HashSet<&'a Bar>) {"}, {"sha": "875d5ab4f21cabe8126bf60a396d4e0ad86cc66f", "filename": "tests/ui/crashes/needless_lifetimes_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -1,4 +1,4 @@\n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+error: the following explicit lifetimes could be elided: 'a\n   --> $DIR/needless_lifetimes_impl_trait.rs:15:5\n    |\n LL |     fn baz<'a>(&'a self) -> impl Foo + 'a {"}, {"sha": "fd553aa4538ada4d783a00fda912b0f3d46e9e5b", "filename": "tests/ui/issue_4266.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b7fabbf36f1ab45c4d33357270d0557822ff90/tests%2Fui%2Fissue_4266.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b7fabbf36f1ab45c4d33357270d0557822ff90/tests%2Fui%2Fissue_4266.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_4266.stderr?ref=10b7fabbf36f1ab45c4d33357270d0557822ff90", "patch": "@@ -1,12 +1,12 @@\n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+error: the following explicit lifetimes could be elided: 'a\n   --> $DIR/issue_4266.rs:4:1\n    |\n LL | async fn sink1<'a>(_: &'a str) {} // lint\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+error: the following explicit lifetimes could be elided: 'a\n   --> $DIR/issue_4266.rs:8:1\n    |\n LL | async fn one_to_one<'a>(s: &'a str) -> &'a str {"}]}