{"sha": "49e746b010bbba408e9e4b1a40d89642e4cb84c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZTc0NmIwMTBiYmJhNDA4ZTllNGIxYTQwZDg5NjQyZTRjYjg0YzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-22T08:01:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-22T08:01:03Z"}, "message": "completion uses hir scopes", "tree": {"sha": "d2d46b55e76a7a9af91c6502d70c5523b0a89b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d46b55e76a7a9af91c6502d70c5523b0a89b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49e746b010bbba408e9e4b1a40d89642e4cb84c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49e746b010bbba408e9e4b1a40d89642e4cb84c6", "html_url": "https://github.com/rust-lang/rust/commit/49e746b010bbba408e9e4b1a40d89642e4cb84c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49e746b010bbba408e9e4b1a40d89642e4cb84c6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "html_url": "https://github.com/rust-lang/rust/commit/4e4ca27eabac6a9c97dc07baf9a067efdfc63384"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "a57670e3ba3f9e7b1ca9fb583ed4dace7bf26685", "filename": "crates/ra_analysis/src/completion/complete_scope.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/49e746b010bbba408e9e4b1a40d89642e4cb84c6/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e746b010bbba408e9e4b1a40d89642e4cb84c6/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=49e746b010bbba408e9e4b1a40d89642e4cb84c6", "patch": "@@ -10,32 +10,34 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) ->\n     if !ctx.is_trivial_path {\n         return Ok(());\n     }\n+    let module = match &ctx.module {\n+        Some(it) => it,\n+        None => return Ok(()),\n+    };\n     if let Some(fn_def) = ctx.enclosing_fn {\n-        let scopes = hir::FnScopes::new(fn_def);\n+        let function = hir::source_binder::function_from_module(ctx.db, module, fn_def);\n+        let scopes = function.scopes(ctx.db);\n         complete_fn(acc, &scopes, ctx.offset);\n     }\n \n-    if let Some(module) = &ctx.module {\n-        let module_scope = module.scope(ctx.db)?;\n-        module_scope\n-            .entries()\n-            .filter(|(_name, res)| {\n-                // Don't expose this item\n-                match res.import {\n-                    None => true,\n-                    Some(import) => {\n-                        let range = import.range(ctx.db, module.source().file_id());\n-                        !range.is_subrange(&ctx.leaf.range())\n-                    }\n+    let module_scope = module.scope(ctx.db)?;\n+    module_scope\n+        .entries()\n+        .filter(|(_name, res)| {\n+            // Don't expose this item\n+            match res.import {\n+                None => true,\n+                Some(import) => {\n+                    let range = import.range(ctx.db, module.source().file_id());\n+                    !range.is_subrange(&ctx.leaf.range())\n                 }\n-            })\n-            .for_each(|(name, res)| {\n-                CompletionItem::new(CompletionKind::Reference, name.to_string())\n-                    .from_resolution(ctx.db, res)\n-                    .add_to(acc)\n-            });\n-    }\n-\n+            }\n+        })\n+        .for_each(|(name, res)| {\n+            CompletionItem::new(CompletionKind::Reference, name.to_string())\n+                .from_resolution(ctx.db, res)\n+                .add_to(acc)\n+        });\n     Ok(())\n }\n "}, {"sha": "b01382808ea8125234f851d0512f610792ef9310", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49e746b010bbba408e9e4b1a40d89642e4cb84c6/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e746b010bbba408e9e4b1a40d89642e4cb84c6/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=49e746b010bbba408e9e4b1a40d89642e4cb84c6", "patch": "@@ -235,7 +235,7 @@ impl AnalysisImpl {\n                 position.file_id,\n                 name_ref.syntax(),\n             )? {\n-                let scope = fn_descr.scope(&*self.db);\n+                let scope = fn_descr.scopes(&*self.db);\n                 // First try to resolve the symbol locally\n                 if let Some(entry) = scope.resolve_local_name(name_ref) {\n                     rr.add_resolution(\n@@ -294,7 +294,7 @@ impl AnalysisImpl {\n         let mut ret = vec![(position.file_id, binding.syntax().range())];\n         ret.extend(\n             descr\n-                .scope(&*self.db)\n+                .scopes(&*self.db)\n                 .find_all_refs(binding)\n                 .into_iter()\n                 .map(|ref_desc| (position.file_id, ref_desc.range)),\n@@ -322,7 +322,7 @@ impl AnalysisImpl {\n                 position.file_id,\n                 name_ref.syntax(),\n             )?);\n-            let scope = descr.scope(db);\n+            let scope = descr.scopes(db);\n             let resolved = ctry!(scope.resolve_local_name(name_ref));\n             let resolved = resolved.ptr().resolve(source_file);\n             let binding = ctry!(find_node_at_offset::<ast::BindPat>("}, {"sha": "2925beb16b70b4c4d641c9426ec58a72e1c0e746", "filename": "crates/ra_hir/src/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49e746b010bbba408e9e4b1a40d89642e4cb84c6/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e746b010bbba408e9e4b1a40d89642e4cb84c6/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction.rs?ref=49e746b010bbba408e9e4b1a40d89642e4cb84c6", "patch": "@@ -27,7 +27,7 @@ impl Function {\n         Function { fn_id }\n     }\n \n-    pub fn scope(&self, db: &impl HirDatabase) -> Arc<FnScopes> {\n+    pub fn scopes(&self, db: &impl HirDatabase) -> Arc<FnScopes> {\n         db.fn_scopes(self.fn_id)\n     }\n "}, {"sha": "a1a5809797d3720accd55a04bc651bd48187654d", "filename": "crates/ra_hir/src/function/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49e746b010bbba408e9e4b1a40d89642e4cb84c6/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e746b010bbba408e9e4b1a40d89642e4cb84c6/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs?ref=49e746b010bbba408e9e4b1a40d89642e4cb84c6", "patch": "@@ -33,7 +33,7 @@ pub struct ScopeData {\n }\n \n impl FnScopes {\n-    pub fn new(fn_def: ast::FnDef) -> FnScopes {\n+    pub(crate) fn new(fn_def: ast::FnDef) -> FnScopes {\n         let mut scopes = FnScopes {\n             self_param: fn_def\n                 .param_list()"}, {"sha": "a0165aef2dbe4fac9e99dfa257e88b1eae605732", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49e746b010bbba408e9e4b1a40d89642e4cb84c6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e746b010bbba408e9e4b1a40d89642e4cb84c6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=49e746b010bbba408e9e4b1a40d89642e4cb84c6", "patch": "@@ -74,6 +74,16 @@ pub fn function_from_source(\n     fn_def: ast::FnDef,\n ) -> Cancelable<Option<Function>> {\n     let module = ctry!(module_from_child_node(db, file_id, fn_def.syntax())?);\n+    let res = function_from_module(db, &module, fn_def);\n+    Ok(Some(res))\n+}\n+\n+pub fn function_from_module(\n+    db: &impl HirDatabase,\n+    module: &Module,\n+    fn_def: ast::FnDef,\n+) -> Function {\n+    let file_id = module.source().file_id();\n     let file_items = db.file_items(file_id);\n     let item_id = file_items.id_of(file_id, fn_def.syntax());\n     let source_item_id = SourceItemId {\n@@ -86,7 +96,7 @@ pub fn function_from_source(\n         module_id: module.module_id,\n         source_item_id,\n     };\n-    Ok(Some(Function::new(def_loc.id(db))))\n+    Function::new(def_loc.id(db))\n }\n \n pub fn function_from_child_node("}]}