{"sha": "21141eb235340f78655bb557876ca8435a4785b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMTQxZWIyMzUzNDBmNzg2NTViYjU1Nzg3NmNhODQzNWE0Nzg1YjE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-17T10:31:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-17T10:42:57Z"}, "message": "Don't keep alloc_map locked while calling data_id_for_static\n\nFixes #670", "tree": {"sha": "324ee11e273bbe1c8786ab80a229a0417f811abe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/324ee11e273bbe1c8786ab80a229a0417f811abe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21141eb235340f78655bb557876ca8435a4785b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21141eb235340f78655bb557876ca8435a4785b1", "html_url": "https://github.com/rust-lang/rust/commit/21141eb235340f78655bb557876ca8435a4785b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21141eb235340f78655bb557876ca8435a4785b1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "480db7dd9e95492f987ee36b53935a179699a287", "url": "https://api.github.com/repos/rust-lang/rust/commits/480db7dd9e95492f987ee36b53935a179699a287", "html_url": "https://github.com/rust-lang/rust/commit/480db7dd9e95492f987ee36b53935a179699a287"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "63ac186690a7cbc69c89f30b995c70cfbce7d1a6", "filename": "src/constant.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21141eb235340f78655bb557876ca8435a4785b1/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21141eb235340f78655bb557876ca8435a4785b1/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=21141eb235340f78655bb557876ca8435a4785b1", "patch": "@@ -186,8 +186,9 @@ fn data_id_for_static(\n     def_id: DefId,\n     linkage: Linkage,\n ) -> DataId {\n-    let symbol_name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n-    let ty = tcx.type_of(def_id);\n+    let instance = Instance::mono(tcx, def_id);\n+    let symbol_name = tcx.symbol_name(instance).as_str();\n+    let ty = instance.ty(tcx);\n     let is_mutable = if tcx.is_mutable_static(def_id) {\n         true\n     } else {\n@@ -200,7 +201,7 @@ fn data_id_for_static(\n         .unwrap();\n \n     if linkage == Linkage::Preemptible {\n-        if let ty::RawPtr(_) = tcx.type_of(def_id).sty {\n+        if let ty::RawPtr(_) = ty.sty {\n         } else {\n             tcx.sess.span_fatal(tcx.def_span(def_id), \"must have type `*const T` or `*mut T` due to `#[linkage]` attribute\")\n         }\n@@ -297,7 +298,8 @@ fn define_all_allocs(\n                 read_target_uint(endianness, bytes).unwrap()\n             };\n \n-            let data_id = match tcx.alloc_map.lock().get(reloc).unwrap() {\n+            let reloc_target_alloc = tcx.alloc_map.lock().get(reloc).unwrap();\n+            let data_id = match reloc_target_alloc {\n                 GlobalAlloc::Function(instance) => {\n                     assert_eq!(addend, 0);\n                     let func_id = crate::abi::import_function(tcx, module, instance);"}]}