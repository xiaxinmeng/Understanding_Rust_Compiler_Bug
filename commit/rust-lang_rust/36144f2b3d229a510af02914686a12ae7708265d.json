{"sha": "36144f2b3d229a510af02914686a12ae7708265d", "node_id": "C_kwDOAAsO6NoAKDM2MTQ0ZjJiM2QyMjlhNTEwYWYwMjkxNDY4NmExMmFlNzcwODI2NWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-06T11:04:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-06T11:04:42Z"}, "message": "Rollup merge of #101021 - MingyuChen1:diagnostic, r=davidtwco\n\nMigrate ``rustc_middle`` diagnostic\n\nPart of #100717", "tree": {"sha": "8fc86a20d7f719702fca58b00974a3fd2e759cc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fc86a20d7f719702fca58b00974a3fd2e759cc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36144f2b3d229a510af02914686a12ae7708265d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjFylKCRBK7hj4Ov3rIwAAv6QIAA5BzqG/wPqeF9JJ3UjvOErF\nIJiqH9Wb9ZGZpbQ1lCSYAatXMbUllRVuNvwCwcIVl2fiGTZt2YCntJnJQRNgqbLg\nVtPt0tcs8E/EFBpjPJn+B7wgodskMWaS90+IauaX0UBZoBkSyu7EqmMa+lK0zW61\nLd5/Jj1G0uljjFKfDKEOj9IVDySahqrrNrKIbDP4E9j9Okki4SsGuiDVkieDR1Qv\nR8+koO1fGBnp4dZV7QxgQn/GvUlZ9VVfrH1ZzCVFkjAvZCtQ+ebnobjK/2CKOp9L\nO/pp1IvQ3ad3aFWeUejZTiZw2vwKwxH02FnIdzuSlPfQ1cuWDfz3QtbEmylTdUA=\n=MuPe\n-----END PGP SIGNATURE-----\n", "payload": "tree 8fc86a20d7f719702fca58b00974a3fd2e759cc6\nparent 3f220200064dbd1a20a8327cb0dd577c53a9e16e\nparent a42c0d79da8e04d6c7bd17363efe4234e2a9547c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662462282 +0530\ncommitter GitHub <noreply@github.com> 1662462282 +0530\n\nRollup merge of #101021 - MingyuChen1:diagnostic, r=davidtwco\n\nMigrate ``rustc_middle`` diagnostic\n\nPart of #100717\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36144f2b3d229a510af02914686a12ae7708265d", "html_url": "https://github.com/rust-lang/rust/commit/36144f2b3d229a510af02914686a12ae7708265d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36144f2b3d229a510af02914686a12ae7708265d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f220200064dbd1a20a8327cb0dd577c53a9e16e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f220200064dbd1a20a8327cb0dd577c53a9e16e", "html_url": "https://github.com/rust-lang/rust/commit/3f220200064dbd1a20a8327cb0dd577c53a9e16e"}, {"sha": "a42c0d79da8e04d6c7bd17363efe4234e2a9547c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a42c0d79da8e04d6c7bd17363efe4234e2a9547c", "html_url": "https://github.com/rust-lang/rust/commit/a42c0d79da8e04d6c7bd17363efe4234e2a9547c"}], "stats": {"total": 113, "additions": 84, "deletions": 29}, "files": [{"sha": "ed834886453ceabe94defffb0ae2111068e1e89e", "filename": "compiler/rustc_error_messages/locales/en-US/middle.ftl", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmiddle.ftl?ref=36144f2b3d229a510af02914686a12ae7708265d", "patch": "@@ -0,0 +1,17 @@\n+middle_drop_check_overflow =\n+    overflow while adding drop-check rules for {$ty}\n+    .note = overflowed on {$overflow_ty}\n+\n+middle_opaque_hidden_type_mismatch =\n+    concrete type differs from previous defining opaque type use\n+    .label = expected `{$self_ty}`, got `{$other_ty}`\n+\n+middle_conflict_types =\n+    this expression supplies two conflicting concrete types for the same opaque type\n+\n+middle_previous_use_here =\n+    previous use here\n+\n+middle_limit_invalid =\n+    `limit` must be a non-negative integer\n+    .label = {$error_str}"}, {"sha": "b6e0f3faa73cb919c48269c2131572dddbdff448", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=36144f2b3d229a510af02914686a12ae7708265d", "patch": "@@ -47,6 +47,7 @@ fluent_messages! {\n     interface => \"../locales/en-US/interface.ftl\",\n     infer => \"../locales/en-US/infer.ftl\",\n     lint => \"../locales/en-US/lint.ftl\",\n+    middle => \"../locales/en-US/middle.ftl\",\n     monomorphize => \"../locales/en-US/monomorphize.ftl\",\n     metadata => \"../locales/en-US/metadata.ftl\",\n     parser => \"../locales/en-US/parser.ftl\","}, {"sha": "18b31a75bcc0da0d1f80566e23607e6564d59a49", "filename": "compiler/rustc_middle/src/error.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ferror.rs?ref=36144f2b3d229a510af02914686a12ae7708265d", "patch": "@@ -0,0 +1,50 @@\n+use rustc_macros::SessionDiagnostic;\n+use rustc_span::Span;\n+\n+use crate::ty::Ty;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(middle::drop_check_overflow, code = \"E0320\")]\n+#[note]\n+pub struct DropCheckOverflow<'tcx> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ty: Ty<'tcx>,\n+    pub overflow_ty: Ty<'tcx>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(middle::opaque_hidden_type_mismatch)]\n+pub struct OpaqueHiddenTypeMismatch<'tcx> {\n+    pub self_ty: Ty<'tcx>,\n+    pub other_ty: Ty<'tcx>,\n+    #[primary_span]\n+    #[label]\n+    pub other_span: Span,\n+    #[subdiagnostic]\n+    pub sub: TypeMismatchReason,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub enum TypeMismatchReason {\n+    #[label(middle::conflict_types)]\n+    ConflictType {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[note(middle::previous_use_here)]\n+    PreviousUse {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(middle::limit_invalid)]\n+pub struct LimitInvalid<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub value_span: Span,\n+    pub error_str: &'a str,\n+}"}, {"sha": "1e3a6bcfc7d32ef6287ac7a01ee07656dee271cc", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=36144f2b3d229a510af02914686a12ae7708265d", "patch": "@@ -86,6 +86,7 @@ pub mod query;\n pub mod arena;\n #[macro_use]\n pub mod dep_graph;\n+pub(crate) mod error;\n pub mod hir;\n pub mod infer;\n pub mod lint;"}, {"sha": "53c4d92678490a92c6c36bc78632c89d84de5681", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=36144f2b3d229a510af02914686a12ae7708265d", "patch": "@@ -10,6 +10,7 @@\n //! just peeks and looks for that attribute.\n \n use crate::bug;\n+use crate::error::LimitInvalid;\n use crate::ty;\n use rustc_ast::Attribute;\n use rustc_session::Session;\n@@ -56,9 +57,6 @@ fn get_limit(krate_attrs: &[Attribute], sess: &Session, name: Symbol, default: u\n             match s.as_str().parse() {\n                 Ok(n) => return Limit::new(n),\n                 Err(e) => {\n-                    let mut err =\n-                        sess.struct_span_err(attr.span, \"`limit` must be a non-negative integer\");\n-\n                     let value_span = attr\n                         .meta()\n                         .and_then(|meta| meta.name_value_literal_span())\n@@ -74,9 +72,7 @@ fn get_limit(krate_attrs: &[Attribute], sess: &Session, name: Symbol, default: u\n                         IntErrorKind::Zero => bug!(\"zero is a valid `limit`\"),\n                         kind => bug!(\"unimplemented IntErrorKind variant: {:?}\", kind),\n                     };\n-\n-                    err.span_label(value_span, error_str);\n-                    err.emit();\n+                    sess.emit_err(LimitInvalid { span: attr.span, value_span, error_str });\n                 }\n             }\n         }"}, {"sha": "0e6cacb9fd0f84aabbac136152b69b8b9cf9a6b8", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=36144f2b3d229a510af02914686a12ae7708265d", "patch": "@@ -5,11 +5,11 @@\n //! The providers for the queries defined here can be found in\n //! `rustc_traits`.\n \n+use crate::error::DropCheckOverflow;\n use crate::infer::canonical::{Canonical, QueryResponse};\n use crate::ty::error::TypeError;\n use crate::ty::subst::GenericArg;\n use crate::ty::{self, Ty, TyCtxt};\n-use rustc_errors::struct_span_err;\n use rustc_span::source_map::Span;\n use std::iter::FromIterator;\n \n@@ -117,15 +117,7 @@ pub struct DropckOutlivesResult<'tcx> {\n impl<'tcx> DropckOutlivesResult<'tcx> {\n     pub fn report_overflows(&self, tcx: TyCtxt<'tcx>, span: Span, ty: Ty<'tcx>) {\n         if let Some(overflow_ty) = self.overflows.get(0) {\n-            let mut err = struct_span_err!(\n-                tcx.sess,\n-                span,\n-                E0320,\n-                \"overflow while adding drop-check rules for {}\",\n-                ty,\n-            );\n-            err.note(&format!(\"overflowed on {}\", overflow_ty));\n-            err.emit();\n+            tcx.sess.emit_err(DropCheckOverflow { span, ty, overflow_ty: *overflow_ty });\n         }\n     }\n "}, {"sha": "a3f7880b9a5684f3a044ea44218be79ec3aec958", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36144f2b3d229a510af02914686a12ae7708265d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=36144f2b3d229a510af02914686a12ae7708265d", "patch": "@@ -15,6 +15,7 @@ pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::Variance::*;\n+use crate::error::{OpaqueHiddenTypeMismatch, TypeMismatchReason};\n use crate::metadata::ModChild;\n use crate::middle::privacy::AccessLevels;\n use crate::mir::{Body, GeneratorLayout};\n@@ -1179,20 +1180,17 @@ pub struct OpaqueHiddenType<'tcx> {\n impl<'tcx> OpaqueHiddenType<'tcx> {\n     pub fn report_mismatch(&self, other: &Self, tcx: TyCtxt<'tcx>) {\n         // Found different concrete types for the opaque type.\n-        let mut err = tcx.sess.struct_span_err(\n-            other.span,\n-            \"concrete type differs from previous defining opaque type use\",\n-        );\n-        err.span_label(other.span, format!(\"expected `{}`, got `{}`\", self.ty, other.ty));\n-        if self.span == other.span {\n-            err.span_label(\n-                self.span,\n-                \"this expression supplies two conflicting concrete types for the same opaque type\",\n-            );\n+        let sub_diag = if self.span == other.span {\n+            TypeMismatchReason::ConflictType { span: self.span }\n         } else {\n-            err.span_note(self.span, \"previous use here\");\n-        }\n-        err.emit();\n+            TypeMismatchReason::PreviousUse { span: self.span }\n+        };\n+        tcx.sess.emit_err(OpaqueHiddenTypeMismatch {\n+            self_ty: self.ty,\n+            other_ty: other.ty,\n+            other_span: other.span,\n+            sub: sub_diag,\n+        });\n     }\n }\n "}]}