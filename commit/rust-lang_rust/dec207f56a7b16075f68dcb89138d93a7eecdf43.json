{"sha": "dec207f56a7b16075f68dcb89138d93a7eecdf43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYzIwN2Y1NmE3YjE2MDc1ZjY4ZGNiODkxMzhkOTNhN2VlY2RmNDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T16:27:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T16:27:24Z"}, "message": "minor: simplify", "tree": {"sha": "a9c198dde6ff1845ee3bf634bc0de888f4ef40e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9c198dde6ff1845ee3bf634bc0de888f4ef40e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec207f56a7b16075f68dcb89138d93a7eecdf43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec207f56a7b16075f68dcb89138d93a7eecdf43", "html_url": "https://github.com/rust-lang/rust/commit/dec207f56a7b16075f68dcb89138d93a7eecdf43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec207f56a7b16075f68dcb89138d93a7eecdf43/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1940d8c75bee8c319e7e7f19607bdc4b01c28d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1940d8c75bee8c319e7e7f19607bdc4b01c28d4", "html_url": "https://github.com/rust-lang/rust/commit/a1940d8c75bee8c319e7e7f19607bdc4b01c28d4"}], "stats": {"total": 53, "additions": 18, "deletions": 35}, "files": [{"sha": "aeccf1164cb1161526eb8b786e1b7164c607e5e8", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=dec207f56a7b16075f68dcb89138d93a7eecdf43", "patch": "@@ -416,21 +416,6 @@ mod tests {\n         assert!(diagnostic.fixes.is_none(), \"got a fix when none was expected: {:?}\", diagnostic);\n     }\n \n-    /// Takes a multi-file input fixture with annotated cursor position and checks that no diagnostics\n-    /// apply to the file containing the cursor.\n-    pub(crate) fn check_no_diagnostics(ra_fixture: &str) {\n-        let (analysis, files) = fixture::files(ra_fixture);\n-        let diagnostics = files\n-            .into_iter()\n-            .flat_map(|file_id| {\n-                analysis\n-                    .diagnostics(&DiagnosticsConfig::default(), AssistResolveStrategy::All, file_id)\n-                    .unwrap()\n-            })\n-            .collect::<Vec<_>>();\n-        assert_eq!(diagnostics.len(), 0, \"unexpected diagnostics:\\n{:#?}\", diagnostics);\n-    }\n-\n     pub(crate) fn check_expect(ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = fixture::file(ra_fixture);\n         let diagnostics = analysis\n@@ -496,7 +481,7 @@ pub struct Foo { pub a: i32, pub b: i32 }\n \n     #[test]\n     fn test_check_unnecessary_braces_in_use_statement() {\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n use a;\n use a::{c, d::e};\n@@ -509,7 +494,7 @@ mod a {\n }\n \"#,\n         );\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n use a;\n use a::{\n@@ -719,7 +704,7 @@ $0\n \n     #[test]\n     fn unlinked_file_with_cfg_on() {\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n //- /main.rs\n #[cfg(not(never))]"}, {"sha": "e885a398eb787b7a88c9b2232c5516d12e570f28", "filename": "crates/ide/src/diagnostics/field_shorthand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs?ref=dec207f56a7b16075f68dcb89138d93a7eecdf43", "patch": "@@ -98,17 +98,17 @@ fn check_pat_field_shorthand(\n \n #[cfg(test)]\n mod tests {\n-    use crate::diagnostics::tests::{check_fix, check_no_diagnostics};\n+    use crate::diagnostics::tests::{check_diagnostics, check_fix};\n \n     #[test]\n     fn test_check_expr_field_shorthand() {\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n struct A { a: &'static str }\n fn main() { A { a: \"hello\" } }\n \"#,\n         );\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n struct A(usize);\n fn main() { A { 0: 0 } }\n@@ -154,13 +154,13 @@ fn main() {\n \n     #[test]\n     fn test_check_pat_field_shorthand() {\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n struct A { a: &'static str }\n fn f(a: A) { let A { a: hello } = a; }\n \"#,\n         );\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n struct A(usize);\n fn f(a: A) { let A { 0: 0 } = a; }"}, {"sha": "db1a37cd6fe1cb79409ada381bcb2750c884d6bf", "filename": "crates/ide/src/diagnostics/fixes/change_case.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fchange_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fchange_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fchange_case.rs?ref=dec207f56a7b16075f68dcb89138d93a7eecdf43", "patch": "@@ -35,7 +35,7 @@ impl DiagnosticWithFixes for IncorrectCase {\n #[cfg(test)]\n mod change_case {\n     use crate::{\n-        diagnostics::tests::{check_fix, check_no_diagnostics},\n+        diagnostics::tests::{check_diagnostics, check_fix},\n         fixture, AssistResolveStrategy, DiagnosticsConfig,\n     };\n \n@@ -102,7 +102,7 @@ fn some_fn() {\n \n     #[test]\n     fn test_uppercase_const_no_diagnostics() {\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n fn foo() {\n     const ANOTHER_ITEM$0: &str = \"some_item\";"}, {"sha": "dcb21e037fe727aec96b2354d2fddcb88e3286d7", "filename": "crates/ide/src/diagnostics/fixes/wrap_tail_expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fwrap_tail_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fwrap_tail_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fwrap_tail_expr.rs?ref=dec207f56a7b16075f68dcb89138d93a7eecdf43", "patch": "@@ -25,7 +25,7 @@ impl DiagnosticWithFixes for MissingOkOrSomeInTailExpr {\n \n #[cfg(test)]\n mod tests {\n-    use crate::diagnostics::tests::{check_fix, check_no_diagnostics};\n+    use crate::diagnostics::tests::{check_diagnostics, check_fix};\n \n     #[test]\n     fn test_wrap_return_type_option() {\n@@ -169,7 +169,7 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n \n     #[test]\n     fn test_wrap_return_type_not_applicable_when_expr_type_does_not_match_ok_type() {\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n //- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};\n@@ -189,7 +189,7 @@ pub mod option {\n \n     #[test]\n     fn test_wrap_return_type_not_applicable_when_return_type_is_not_result_or_option() {\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n //- /main.rs crate:main deps:core\n use core::result::Result::{self, Ok, Err};"}, {"sha": "5f97f190d1186d76a85ed72f84d4166bef2f8fb2", "filename": "crates/ide/src/diagnostics/macro_error.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmacro_error.rs?ref=dec207f56a7b16075f68dcb89138d93a7eecdf43", "patch": "@@ -15,9 +15,7 @@ pub(super) fn macro_error(ctx: &DiagnosticsContext<'_>, d: &hir::MacroError) ->\n #[cfg(test)]\n mod tests {\n     use crate::{\n-        diagnostics::tests::{\n-            check_diagnostics, check_diagnostics_with_config, check_no_diagnostics,\n-        },\n+        diagnostics::tests::{check_diagnostics, check_diagnostics_with_config},\n         DiagnosticsConfig,\n     };\n \n@@ -77,7 +75,7 @@ macro_rules! concat { () => {} }\n     fn register_attr_and_tool() {\n         cov_mark::check!(register_attr);\n         cov_mark::check!(register_tool);\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n #![register_tool(tool)]\n #![register_attr(attr)]"}, {"sha": "95cd64956af9a6df26bd1805f28e7c6f4b624d6a", "filename": "crates/ide/src/diagnostics/missing_fields.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec207f56a7b16075f68dcb89138d93a7eecdf43/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fmissing_fields.rs?ref=dec207f56a7b16075f68dcb89138d93a7eecdf43", "patch": "@@ -77,7 +77,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n \n #[cfg(test)]\n mod tests {\n-    use crate::diagnostics::tests::{check_diagnostics, check_fix, check_no_diagnostics};\n+    use crate::diagnostics::tests::{check_diagnostics, check_fix};\n \n     #[test]\n     fn missing_record_pat_field_diagnostic() {\n@@ -203,7 +203,7 @@ fn test_fn() {\n \n     #[test]\n     fn test_fill_struct_fields_no_diagnostic() {\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n struct TestStruct { one: i32, two: i64 }\n \n@@ -217,7 +217,7 @@ fn test_fn() {\n \n     #[test]\n     fn test_fill_struct_fields_no_diagnostic_on_spread() {\n-        check_no_diagnostics(\n+        check_diagnostics(\n             r#\"\n struct TestStruct { one: i32, two: i64 }\n "}]}