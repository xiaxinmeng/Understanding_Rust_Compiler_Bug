{"sha": "f64af7a32e83ae6c02a0e0378c024e687fec5223", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NGFmN2EzMmU4M2FlNmMwMmEwZTAzNzhjMDI0ZTY4N2ZlYzUyMjM=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2017-09-19T23:36:54Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2017-09-21T17:19:03Z"}, "message": "Refactor lifetime name into an enum", "tree": {"sha": "ed16ec1b749116db24ad2ddd00a2fe5ea110cdb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed16ec1b749116db24ad2ddd00a2fe5ea110cdb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f64af7a32e83ae6c02a0e0378c024e687fec5223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f64af7a32e83ae6c02a0e0378c024e687fec5223", "html_url": "https://github.com/rust-lang/rust/commit/f64af7a32e83ae6c02a0e0378c024e687fec5223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f64af7a32e83ae6c02a0e0378c024e687fec5223/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64314e3ae218cb004735735667581f12df8461ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/64314e3ae218cb004735735667581f12df8461ef", "html_url": "https://github.com/rust-lang/rust/commit/64314e3ae218cb004735735667581f12df8461ef"}], "stats": {"total": 173, "additions": 118, "deletions": 55}, "files": [{"sha": "088fd8d90901c8d2a38876c40d29aef385433209", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -422,7 +422,12 @@ pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) {\n \n pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) {\n     visitor.visit_id(lifetime.id);\n-    visitor.visit_name(lifetime.span, lifetime.name);\n+    match lifetime.name {\n+        LifetimeName::Name(name) => {\n+            visitor.visit_name(lifetime.span, name);\n+        }\n+        LifetimeName::Static | LifetimeName::Implicit | LifetimeName::Underscore => {}\n+    }\n }\n \n pub fn walk_lifetime_def<'v, V: Visitor<'v>>(visitor: &mut V, lifetime_def: &'v LifetimeDef) {"}, {"sha": "465520ea03434c9af39ae87535cb0d56d6bd2170", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -1121,7 +1121,11 @@ impl<'a> LoweringContext<'a> {\n     fn lower_lifetime(&mut self, l: &Lifetime) -> hir::Lifetime {\n         hir::Lifetime {\n             id: self.lower_node_id(l.id).node_id,\n-            name: self.lower_ident(l.ident),\n+            name: match self.lower_ident(l.ident) {\n+                x if x == \"'_\" => hir::LifetimeName::Underscore,\n+                x if x == \"'static\" => hir::LifetimeName::Static,\n+                name => hir::LifetimeName::Name(name),\n+            },\n             span: l.span,\n         }\n     }\n@@ -3005,7 +3009,7 @@ impl<'a> LoweringContext<'a> {\n         hir::Lifetime {\n             id: self.next_id().node_id,\n             span,\n-            name: keywords::Invalid.name()\n+            name: hir::LifetimeName::Implicit,\n         }\n     }\n }"}, {"sha": "c0577039f0c35874969fdb0e61c3ae80df83c1da", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -805,7 +805,7 @@ impl<'hir> Map<'hir> {\n             NodeTraitItem(ti) => ti.name,\n             NodeVariant(v) => v.node.name,\n             NodeField(f) => f.name,\n-            NodeLifetime(lt) => lt.name,\n+            NodeLifetime(lt) => lt.name.name(),\n             NodeTyParam(tp) => tp.name,\n             NodeBinding(&Pat { node: PatKind::Binding(_,_,l,_), .. }) => l.node,\n             NodeStructCtor(_) => self.name(self.get_parent(id)),"}, {"sha": "1bef17b28acb572f52b67c0e82c9e1410d9d7ea0", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -145,7 +145,27 @@ pub struct Lifetime {\n     /// HIR lowering inserts these placeholders in type paths that\n     /// refer to type definitions needing lifetime parameters,\n     /// `&T` and `&mut T`, and trait objects without `... + 'a`.\n-    pub name: Name,\n+    pub name: LifetimeName,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n+pub enum LifetimeName {\n+    Implicit,\n+    Underscore,\n+    Static,\n+    Name(Name),\n+}\n+\n+impl LifetimeName {\n+    pub fn name(&self) -> Name {\n+        use self::LifetimeName::*;\n+        match *self {\n+            Implicit => keywords::Invalid.name(),\n+            Underscore => Symbol::intern(\"'_\"),\n+            Static => keywords::StaticLifetime.name(),\n+            Name(name) => name,\n+        }\n+    }\n }\n \n impl fmt::Debug for Lifetime {\n@@ -159,12 +179,15 @@ impl fmt::Debug for Lifetime {\n \n impl Lifetime {\n     pub fn is_elided(&self) -> bool {\n-        self.name == keywords::Invalid.name() ||\n-        self.name == \"'_\"\n+        use self::LifetimeName::*;\n+        match self.name {\n+            Implicit | Underscore => true,\n+            Static | Name(_) => false,\n+        }\n     }\n \n     pub fn is_static(&self) -> bool {\n-        self.name == \"'static\"\n+        self.name == LifetimeName::Static\n     }\n }\n "}, {"sha": "ad31b2009a01dbefb56ca8757ae81cbba24fef93", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -1975,7 +1975,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_lifetime(&mut self, lifetime: &hir::Lifetime) -> io::Result<()> {\n-        self.print_name(lifetime.name)\n+        self.print_name(lifetime.name.name())\n     }\n \n     pub fn print_lifetime_def(&mut self, lifetime: &hir::LifetimeDef) -> io::Result<()> {"}, {"sha": "b3af44c952bdd96788f8fcc8b7ffc8096acd73eb", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -123,6 +123,13 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::ImplItemId {\n     }\n }\n \n+impl_stable_hash_for!(enum hir::LifetimeName {\n+    Implicit,\n+    Underscore,\n+    Static,\n+    Name(name)\n+});\n+\n impl_stable_hash_for!(struct hir::Lifetime {\n     id,\n     span,"}, {"sha": "60f03eb5d89ec12bba1e6ddf7906d13a2a39eb68", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 48, "deletions": 36, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -46,14 +46,16 @@ pub enum Region {\n }\n \n impl Region {\n-    fn early(hir_map: &Map, index: &mut u32, def: &hir::LifetimeDef) -> (ast::Name, Region) {\n+    fn early(hir_map: &Map, index: &mut u32, def: &hir::LifetimeDef)\n+        -> (hir::LifetimeName, Region)\n+    {\n         let i = *index;\n         *index += 1;\n         let def_id = hir_map.local_def_id(def.lifetime.id);\n         (def.lifetime.name, Region::EarlyBound(i, def_id))\n     }\n \n-    fn late(hir_map: &Map, def: &hir::LifetimeDef) -> (ast::Name, Region) {\n+    fn late(hir_map: &Map, def: &hir::LifetimeDef) -> (hir::LifetimeName, Region) {\n         let depth = ty::DebruijnIndex::new(1);\n         let def_id = hir_map.local_def_id(def.lifetime.id);\n         (def.lifetime.name, Region::LateBound(depth, def_id))\n@@ -198,7 +200,7 @@ enum Scope<'a> {\n     /// it should be shifted by the number of `Binder`s in between the\n     /// declaration `Binder` and the location it's referenced from.\n     Binder {\n-        lifetimes: FxHashMap<ast::Name, Region>,\n+        lifetimes: FxHashMap<hir::LifetimeName, Region>,\n         s: ScopeRef<'a>\n     },\n \n@@ -654,7 +656,7 @@ fn extract_labels(ctxt: &mut LifetimeContext, body: &hir::Body) {\n \n                 Scope::Binder { ref lifetimes, s } => {\n                     // FIXME (#24278): non-hygienic comparison\n-                    if let Some(def) = lifetimes.get(&label) {\n+                    if let Some(def) = lifetimes.get(&hir::LifetimeName::Name(label)) {\n                         let node_id = hir_map.as_local_node_id(def.id().unwrap())\n                                              .unwrap();\n \n@@ -692,7 +694,7 @@ fn compute_object_lifetime_defaults(sess: &Session, hir_map: &Map)\n                                 Set1::Empty => \"BaseDefault\".to_string(),\n                                 Set1::One(Region::Static) => \"'static\".to_string(),\n                                 Set1::One(Region::EarlyBound(i, _)) => {\n-                                    generics.lifetimes[i as usize].lifetime.name.to_string()\n+                                    generics.lifetimes[i as usize].lifetime.name.name().to_string()\n                                 }\n                                 Set1::One(_) => bug!(),\n                                 Set1::Many => \"Ambiguous\".to_string(),\n@@ -714,7 +716,7 @@ fn compute_object_lifetime_defaults(sess: &Session, hir_map: &Map)\n /// for each type parameter.\n fn object_lifetime_defaults_for_item(hir_map: &Map, generics: &hir::Generics)\n                                      -> Vec<ObjectLifetimeDefault> {\n-    fn add_bounds(set: &mut Set1<ast::Name>, bounds: &[hir::TyParamBound]) {\n+    fn add_bounds(set: &mut Set1<hir::LifetimeName>, bounds: &[hir::TyParamBound]) {\n         for bound in bounds {\n             if let hir::RegionTyParamBound(ref lifetime) = *bound {\n                 set.insert(lifetime.name);\n@@ -754,7 +756,7 @@ fn object_lifetime_defaults_for_item(hir_map: &Map, generics: &hir::Generics)\n         match set {\n             Set1::Empty => Set1::Empty,\n             Set1::One(name) => {\n-                if name == \"'static\" {\n+                if name == hir::LifetimeName::Static {\n                     Set1::One(Region::Static)\n                 } else {\n                     generics.lifetimes.iter().enumerate().find(|&(_, def)| {\n@@ -922,7 +924,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             self.insert_lifetime(lifetime_ref, def);\n         } else {\n             struct_span_err!(self.sess, lifetime_ref.span, E0261,\n-                \"use of undeclared lifetime name `{}`\", lifetime_ref.name)\n+                \"use of undeclared lifetime name `{}`\", lifetime_ref.name.name())\n                 .span_label(lifetime_ref.span, \"undeclared lifetime\")\n                 .emit();\n         }\n@@ -1422,13 +1424,17 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             let lifetime_i = &lifetimes[i];\n \n             for lifetime in lifetimes {\n-                if lifetime.lifetime.is_static() || lifetime.lifetime.name == \"'_\"  {\n-                    let lifetime = lifetime.lifetime;\n-                    let mut err = struct_span_err!(self.sess, lifetime.span, E0262,\n-                                  \"invalid lifetime parameter name: `{}`\", lifetime.name);\n-                    err.span_label(lifetime.span,\n-                                   format!(\"{} is a reserved lifetime name\", lifetime.name));\n-                    err.emit();\n+                match lifetime.lifetime.name {\n+                    hir::LifetimeName::Static | hir::LifetimeName::Underscore => {\n+                        let lifetime = lifetime.lifetime;\n+                        let name = lifetime.name.name();\n+                        let mut err = struct_span_err!(self.sess, lifetime.span, E0262,\n+                                      \"invalid lifetime parameter name: `{}`\", name);\n+                        err.span_label(lifetime.span,\n+                                       format!(\"{} is a reserved lifetime name\", name));\n+                        err.emit();\n+                    }\n+                    hir::LifetimeName::Implicit | hir::LifetimeName::Name(_) => {}\n                 }\n             }\n \n@@ -1439,7 +1445,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 if lifetime_i.lifetime.name == lifetime_j.lifetime.name {\n                     struct_span_err!(self.sess, lifetime_j.lifetime.span, E0263,\n                                      \"lifetime name `{}` declared twice in the same scope\",\n-                                     lifetime_j.lifetime.name)\n+                                     lifetime_j.lifetime.name.name())\n                         .span_label(lifetime_j.lifetime.span,\n                                     \"declared twice\")\n                         .span_label(lifetime_i.lifetime.span,\n@@ -1452,21 +1458,27 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             self.check_lifetime_def_for_shadowing(old_scope, &lifetime_i.lifetime);\n \n             for bound in &lifetime_i.bounds {\n-                if bound.name == \"'_\" {\n-                    let mut err = struct_span_err!(self.sess, bound.span, E0637,\n-                        \"invalid lifetime bound name: `{}`\", bound.name);\n-                    err.span_label(bound.span,\n-                                   format!(\"{} is a reserved lifetime name\", bound.name));\n-                    err.emit();\n-                } else if !bound.is_static() {\n-                    self.resolve_lifetime_ref(bound);\n-                } else {\n-                    self.insert_lifetime(bound, Region::Static);\n-                    self.sess.struct_span_warn(lifetime_i.lifetime.span.to(bound.span),\n-                        &format!(\"unnecessary lifetime parameter `{}`\", lifetime_i.lifetime.name))\n-                        .help(&format!(\"you can use the `'static` lifetime directly, in place \\\n-                                        of `{}`\", lifetime_i.lifetime.name))\n-                        .emit();\n+                match bound.name {\n+                    hir::LifetimeName::Underscore => {\n+                        let mut err = struct_span_err!(self.sess, bound.span, E0637,\n+                            \"invalid lifetime bound name: `'_`\");\n+                        err.span_label(bound.span, \"`'_` is a reserved lifetime name\");\n+                        err.emit();\n+                    }\n+                    hir::LifetimeName::Static => {\n+                        self.insert_lifetime(bound, Region::Static);\n+                        self.sess.struct_span_warn(lifetime_i.lifetime.span.to(bound.span),\n+                            &format!(\"unnecessary lifetime parameter `{}`\",\n+                                    lifetime_i.lifetime.name.name()))\n+                            .help(&format!(\n+                                \"you can use the `'static` lifetime directly, in place \\\n+                                of `{}`\", lifetime_i.lifetime.name.name()))\n+                            .emit();\n+                    }\n+                    hir::LifetimeName::Implicit |\n+                    hir::LifetimeName::Name(_) => {\n+                        self.resolve_lifetime_ref(bound);\n+                    }\n                 }\n             }\n         }\n@@ -1478,9 +1490,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     {\n         for &(label, label_span) in &self.labels_in_fn {\n             // FIXME (#24278): non-hygienic comparison\n-            if lifetime.name == label {\n+            if lifetime.name.name() == label {\n                 signal_shadowing_problem(self.sess,\n-                                         lifetime.name,\n+                                         label,\n                                          original_label(label_span),\n                                          shadower_lifetime(&lifetime));\n                 return;\n@@ -1507,7 +1519,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n                         signal_shadowing_problem(\n                             self.sess,\n-                            lifetime.name,\n+                            lifetime.name.name(),\n                             original_lifetime(self.hir_map.span(node_id)),\n                             shadower_lifetime(&lifetime));\n                         return;\n@@ -1623,7 +1635,7 @@ fn insert_late_bound_lifetimes(map: &mut NamedRegionMap,\n     return;\n \n     struct ConstrainedCollector {\n-        regions: FxHashSet<ast::Name>,\n+        regions: FxHashSet<hir::LifetimeName>,\n     }\n \n     impl<'v> Visitor<'v> for ConstrainedCollector {\n@@ -1663,7 +1675,7 @@ fn insert_late_bound_lifetimes(map: &mut NamedRegionMap,\n     }\n \n     struct AllCollector {\n-        regions: FxHashSet<ast::Name>,\n+        regions: FxHashSet<hir::LifetimeName>,\n         impl_trait: bool\n     }\n "}, {"sha": "cbc012a65faad04444c139df5e169deab1f4e06d", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -278,7 +278,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     fn check_lifetime_def(&mut self, cx: &LateContext, t: &hir::LifetimeDef) {\n         self.check_snake_case(cx,\n                               \"lifetime\",\n-                              &t.lifetime.name.as_str(),\n+                              &t.lifetime.name.name().as_str(),\n                               Some(t.lifetime.span));\n     }\n "}, {"sha": "ddbdd204305890f9e3dfffe463aab47d92583577", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -523,7 +523,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n \n             let (span, name) = if index < ast_generics.lifetimes.len() {\n                 (ast_generics.lifetimes[index].lifetime.span,\n-                 ast_generics.lifetimes[index].lifetime.name)\n+                 ast_generics.lifetimes[index].lifetime.name.name())\n             } else {\n                 let index = index - ast_generics.lifetimes.len();\n                 (ast_generics.ty_params[index].span,"}, {"sha": "8d078b922751206a4d6ff997724832c9779b1128", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -953,7 +953,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n     let regions = early_lifetimes.enumerate().map(|(i, l)| {\n         ty::RegionParameterDef {\n-            name: l.lifetime.name,\n+            name: l.lifetime.name.name(),\n             index: own_start + i as u32,\n             def_id: tcx.hir.local_def_id(l.lifetime.id),\n             pure_wrt_drop: l.pure_wrt_drop,\n@@ -1423,7 +1423,7 @@ fn predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir.local_def_id(param.lifetime.id),\n             index,\n-            name: param.lifetime.name\n+            name: param.lifetime.name.name(),\n         }));\n         index += 1;\n "}, {"sha": "15708ab766ae82956b38e16ccd41dc80b1983a1c", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -132,7 +132,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             !input_parameters.contains(&param)\n         {\n             report_unused_parameter(tcx, lifetime.lifetime.span,\n-                                    \"lifetime\", &lifetime.lifetime.name.to_string());\n+                                    \"lifetime\", &lifetime.lifetime.name.name().to_string());\n         }\n     }\n "}, {"sha": "1e25a57b1d2b1dd5a171f00074a39137ddcaae33", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -876,22 +876,22 @@ impl Clean<Lifetime> for hir::Lifetime {\n             }\n             _ => {}\n         }\n-        Lifetime(self.name.to_string())\n+        Lifetime(self.name.name().to_string())\n     }\n }\n \n impl Clean<Lifetime> for hir::LifetimeDef {\n     fn clean(&self, _: &DocContext) -> Lifetime {\n         if self.bounds.len() > 0 {\n             let mut s = format!(\"{}: {}\",\n-                                self.lifetime.name.to_string(),\n-                                self.bounds[0].name.to_string());\n+                                self.lifetime.name.name(),\n+                                self.bounds[0].name.name());\n             for bound in self.bounds.iter().skip(1) {\n-                s.push_str(&format!(\" + {}\", bound.name.to_string()));\n+                s.push_str(&format!(\" + {}\", bound.name.name()));\n             }\n             Lifetime(s)\n         } else {\n-            Lifetime(self.lifetime.name.to_string())\n+            Lifetime(self.lifetime.name.name().to_string())\n         }\n     }\n }"}, {"sha": "ed0369353bcd30785886d22cf852e011be2fbef9", "filename": "src/test/run-pass/underscore-lifetimes.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Ftest%2Frun-pass%2Funderscore-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f64af7a32e83ae6c02a0e0378c024e687fec5223/src%2Ftest%2Frun-pass%2Funderscore-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funderscore-lifetimes.rs?ref=f64af7a32e83ae6c02a0e0378c024e687fec5223", "patch": "@@ -26,10 +26,22 @@ fn foo3(x: &'_ u8) -> Foo {\n \n fn foo4(_: Foo<'_>) {}\n \n+struct Foo2<'a, 'b> {\n+    a: &'a u8,\n+    b: &'b u8,\n+}\n+fn foo5<'b>(foo: Foo2<'_, 'b>) -> &'b u8 {\n+    foo.b\n+}\n+\n fn main() {\n     let x = &5;\n     let _ = foo(x);\n     let _ = foo2(x);\n     let _ = foo3(x);\n     foo4(Foo(x));\n+    let _ = foo5(Foo2 {\n+        a: x,\n+        b: &6,\n+    });\n }"}]}