{"sha": "b93ef68245807bac97cd17ea9eaa13169380d815", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5M2VmNjgyNDU4MDdiYWM5N2NkMTdlYTllYWExMzE2OTM4MGQ4MTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-10T19:22:33Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-10T19:23:59Z"}, "message": "Change `next_point` when `shrink_to_hi` is more appropriate", "tree": {"sha": "02ebae7e4e89bb0257689e7db0e20066efb162c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ebae7e4e89bb0257689e7db0e20066efb162c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b93ef68245807bac97cd17ea9eaa13169380d815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b93ef68245807bac97cd17ea9eaa13169380d815", "html_url": "https://github.com/rust-lang/rust/commit/b93ef68245807bac97cd17ea9eaa13169380d815", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b93ef68245807bac97cd17ea9eaa13169380d815/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d558f6a570a782cd1c2e54de790f4f968b0de5f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d558f6a570a782cd1c2e54de790f4f968b0de5f1", "html_url": "https://github.com/rust-lang/rust/commit/d558f6a570a782cd1c2e54de790f4f968b0de5f1"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "b76b496666e88bb506b1a64b953797798b6d4da9", "filename": "src/librustc_builtin_macros/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_builtin_macros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_builtin_macros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fassert.rs?ref=b93ef68245807bac97cd17ea9eaa13169380d815", "patch": "@@ -106,7 +106,7 @@ fn parse_assert<'a>(\n     let custom_message =\n         if let token::Literal(token::Lit { kind: token::Str, .. }) = parser.token.kind {\n             let mut err = cx.struct_span_warn(parser.token.span, \"unexpected string literal\");\n-            let comma_span = cx.source_map().next_point(parser.prev_span);\n+            let comma_span = parser.prev_span.shrink_to_hi();\n             err.span_suggestion_short(\n                 comma_span,\n                 \"try adding a comma\","}, {"sha": "d0aae300b1c9d322399b4842d4848dc5fb12bbab", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=b93ef68245807bac97cd17ea9eaa13169380d815", "patch": "@@ -696,7 +696,7 @@ pub(super) fn parse(\n                         if parser.token.span.is_dummy() {\n                             parser.token.span\n                         } else {\n-                            sess.source_map().next_point(parser.token.span)\n+                            parser.token.span.shrink_to_hi()\n                         },\n                     ),\n                     \"missing tokens in macro arguments\","}, {"sha": "b9658b33d0fef95a3433d07c2308660595240d10", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=b93ef68245807bac97cd17ea9eaa13169380d815", "patch": "@@ -265,10 +265,7 @@ impl<'a> Parser<'a> {\n             };\n             (\n                 format!(\"expected one of {}, found {}\", expect, actual),\n-                (\n-                    self.sess.source_map().next_point(self.prev_span),\n-                    format!(\"expected one of {}\", short_expect),\n-                ),\n+                (self.prev_span.shrink_to_hi(), format!(\"expected one of {}\", short_expect)),\n             )\n         } else if expected.is_empty() {\n             (\n@@ -278,7 +275,7 @@ impl<'a> Parser<'a> {\n         } else {\n             (\n                 format!(\"expected {}, found {}\", expect, actual),\n-                (self.sess.source_map().next_point(self.prev_span), format!(\"expected {}\", expect)),\n+                (self.prev_span.shrink_to_hi(), format!(\"expected {}\", expect)),\n             )\n         };\n         self.last_unexpected_token_span = Some(self.token.span);\n@@ -809,7 +806,7 @@ impl<'a> Parser<'a> {\n             _ if self.prev_span == DUMMY_SP => (self.token.span, self.token.span),\n             // EOF, don't want to point at the following char, but rather the last token.\n             (token::Eof, None) => (self.prev_span, self.token.span),\n-            _ => (self.sess.source_map().next_point(self.prev_span), self.token.span),\n+            _ => (self.prev_span.shrink_to_hi(), self.token.span),\n         };\n         let msg = format!(\n             \"expected `{}`, found {}\",\n@@ -1132,7 +1129,7 @@ impl<'a> Parser<'a> {\n                     err.span_label(sp, \"unclosed delimiter\");\n                 }\n                 err.span_suggestion_short(\n-                    self.sess.source_map().next_point(self.prev_span),\n+                    self.prev_span.shrink_to_hi(),\n                     &format!(\"{} may belong here\", delim.to_string()),\n                     delim.to_string(),\n                     Applicability::MaybeIncorrect,"}, {"sha": "f02ea117c0646ed9d893623eacc2ddf00b58cdf0", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=b93ef68245807bac97cd17ea9eaa13169380d815", "patch": "@@ -1646,7 +1646,7 @@ impl<'a> Parser<'a> {\n                             //   |      |\n                             //   |      parsed until here as `\"y\" & X`\n                             err.span_suggestion_short(\n-                                cm.next_point(arm_start_span),\n+                                arm_start_span.shrink_to_hi(),\n                                 \"missing a comma here to end this `match` arm\",\n                                 \",\".to_owned(),\n                                 Applicability::MachineApplicable,"}, {"sha": "fdc01dc930d96d789a247c10423256025772781f", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=b93ef68245807bac97cd17ea9eaa13169380d815", "patch": "@@ -1628,7 +1628,7 @@ impl<'a> Parser<'a> {\n             // it's safe to peel off one character only when it has the close delim\n             self.prev_span.with_lo(self.prev_span.hi() - BytePos(1))\n         } else {\n-            self.sess.source_map().next_point(self.prev_span)\n+            self.prev_span.shrink_to_hi()\n         };\n \n         self.struct_span_err(\n@@ -1644,7 +1644,7 @@ impl<'a> Parser<'a> {\n             Applicability::MaybeIncorrect,\n         )\n         .span_suggestion(\n-            self.sess.source_map().next_point(self.prev_span),\n+            self.prev_span.shrink_to_hi(),\n             \"add a semicolon\",\n             ';'.to_string(),\n             Applicability::MaybeIncorrect,"}, {"sha": "a1035d320b31c426e33c4e0df663014992052d9e", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=b93ef68245807bac97cd17ea9eaa13169380d815", "patch": "@@ -765,7 +765,7 @@ impl<'a> Parser<'a> {\n                             break;\n                         }\n                         Err(mut expect_err) => {\n-                            let sp = self.sess.source_map().next_point(self.prev_span);\n+                            let sp = self.prev_span.shrink_to_hi();\n                             let token_str = pprust::token_kind_to_string(t);\n \n                             // Attempt to keep parsing if it was a similar separator."}, {"sha": "918542e7da5ffc7aa7df82d0c0bd9b5e67e1014d", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=b93ef68245807bac97cd17ea9eaa13169380d815", "patch": "@@ -242,7 +242,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ) = (parent_node, callee_node)\n         {\n             let start = sp.shrink_to_lo();\n-            let end = self.tcx.sess.source_map().next_point(callee_span);\n+            let end = callee_span.shrink_to_hi();\n             err.multipart_suggestion(\n                 \"if you meant to create this closure and immediately call it, surround the \\\n                 closure with parenthesis\",\n@@ -319,9 +319,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let call_is_multiline =\n                                 self.tcx.sess.source_map().is_multiline(call_expr.span);\n                             if call_is_multiline {\n-                                let span = self.tcx.sess.source_map().next_point(callee.span);\n                                 err.span_suggestion(\n-                                    span,\n+                                    callee.span.shrink_to_hi(),\n                                     \"try adding a semicolon\",\n                                     \";\".to_owned(),\n                                     Applicability::MaybeIncorrect,"}, {"sha": "94c9a704c65dfc63cd78b925f63a11951ac8be73", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93ef68245807bac97cd17ea9eaa13169380d815/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b93ef68245807bac97cd17ea9eaa13169380d815", "patch": "@@ -4953,9 +4953,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ExprKind::Loop(..)\n                 | ExprKind::Match(..)\n                 | ExprKind::Block(..) => {\n-                    let sp = self.tcx.sess.source_map().next_point(cause_span);\n                     err.span_suggestion(\n-                        sp,\n+                        cause_span.shrink_to_hi(),\n                         \"try adding a semicolon\",\n                         \";\".to_string(),\n                         Applicability::MachineApplicable,"}]}