{"sha": "1e71ac286b4a7fc35eda050edc8d4988c2ac1e13", "node_id": "C_kwDOAAsO6NoAKDFlNzFhYzI4NmI0YTdmYzM1ZWRhMDUwZWRjOGQ0OTg4YzJhYzFlMTM", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-03-28T16:31:07Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-04-09T11:52:53Z"}, "message": "extract_module: Resolve imports lazily", "tree": {"sha": "524d020e7cae50d5b82150449a5633e1e8f755b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/524d020e7cae50d5b82150449a5633e1e8f755b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e71ac286b4a7fc35eda050edc8d4988c2ac1e13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e71ac286b4a7fc35eda050edc8d4988c2ac1e13", "html_url": "https://github.com/rust-lang/rust/commit/1e71ac286b4a7fc35eda050edc8d4988c2ac1e13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e71ac286b4a7fc35eda050edc8d4988c2ac1e13/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "031bdf2472304b7a1ba1221f87827b4b9803fd7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/031bdf2472304b7a1ba1221f87827b4b9803fd7c", "html_url": "https://github.com/rust-lang/rust/commit/031bdf2472304b7a1ba1221f87827b4b9803fd7c"}], "stats": {"total": 68, "additions": 27, "deletions": 41}, "files": [{"sha": "4a9d3a56f5495d1eb940218cb3964e21db235303", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 27, "deletions": 41, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1e71ac286b4a7fc35eda050edc8d4988c2ac1e13/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e71ac286b4a7fc35eda050edc8d4988c2ac1e13/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=1e71ac286b4a7fc35eda050edc8d4988c2ac1e13", "patch": "@@ -81,38 +81,34 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     }\n \n     let mut module = extract_target(&node, ctx.selection_trimmed())?;\n-    if module.body_items.len() == 0 {\n+    if module.body_items.is_empty() {\n         return None;\n     }\n \n     let old_item_indent = module.body_items[0].indent_level();\n \n-    //This takes place in three steps:\n-    //\n-    //- Firstly, we will update the references(usages) e.g. converting a\n-    //  function call bar() to modname::bar(), and similarly for other items\n-    //\n-    //- Secondly, changing the visibility of each item inside the newly selected module\n-    //  i.e. making a fn a() {} to pub(crate) fn a() {}\n-    //\n-    //- Thirdly, resolving all the imports this includes removing paths from imports\n-    //  outside the module, shifting/cloning them inside new module, or shifting the imports, or making\n-    //  new import statemnts\n-\n-    //We are getting item usages and record_fields together, record_fields\n-    //for change_visibility and usages for first point mentioned above in the process\n-    let (usages_to_be_processed, record_fields) = module.get_usages_and_record_fields(ctx);\n-\n-    let import_paths_to_be_removed = module.resolve_imports(curr_parent_module, ctx);\n-    if module.body_items.len() == 0 {\n-        return None;\n-    }\n-\n     acc.add(\n         AssistId(\"extract_module\", AssistKind::RefactorExtract),\n         \"Extract Module\",\n         module.text_range,\n         |builder| {\n+            //This takes place in three steps:\n+            //\n+            //- Firstly, we will update the references(usages) e.g. converting a\n+            //  function call bar() to modname::bar(), and similarly for other items\n+            //\n+            //- Secondly, changing the visibility of each item inside the newly selected module\n+            //  i.e. making a fn a() {} to pub(crate) fn a() {}\n+            //\n+            //- Thirdly, resolving all the imports this includes removing paths from imports\n+            //  outside the module, shifting/cloning them inside new module, or shifting the imports, or making\n+            //  new import statemnts\n+\n+            //We are getting item usages and record_fields together, record_fields\n+            //for change_visibility and usages for first point mentioned above in the process\n+            let (usages_to_be_processed, record_fields) = module.get_usages_and_record_fields(ctx);\n+\n+            let import_paths_to_be_removed = module.resolve_imports(curr_parent_module, ctx);\n             module.change_visibility(record_fields);\n \n             let mut body_items: Vec<String> = Vec::new();\n@@ -221,19 +217,13 @@ fn extract_target(node: &SyntaxNode, selection_range: TextRange) -> Option<Modul\n \n     let mut body_items: Vec<ast::Item> = node\n         .children()\n-        .filter_map(|child| {\n-            if selection_range.contains_range(child.text_range()) {\n-                let child_kind = child.kind();\n-                if let Some(item) = ast::Item::cast(child) {\n-                    if ast::Use::can_cast(child_kind) {\n-                        use_items.push(item);\n-                    } else {\n-                        return Some(item);\n-                    }\n-                }\n-                return None;\n+        .filter(|child| selection_range.contains_range(child.text_range()))\n+        .filter_map(|child| match ast::Item::cast(child) {\n+            Some(it @ ast::Item::Use(_)) => {\n+                use_items.push(it);\n+                None\n             }\n-            None\n+            item => item,\n         })\n         .collect();\n \n@@ -368,9 +358,7 @@ impl Module {\n         source_file: &SourceFile,\n         FileReference { range, name, .. }: FileReference,\n     ) -> Option<(TextRange, String)> {\n-        let path: Option<ast::Path> = find_node_at_range(source_file.syntax(), range);\n-\n-        let path = path?;\n+        let path: ast::Path = find_node_at_range(source_file.syntax(), range)?;\n \n         for desc in path.syntax().descendants() {\n             if desc.to_string() == name.syntax().to_string()\n@@ -609,9 +597,8 @@ impl Module {\n \n             let use_ =\n                 make::use_(None, make::use_tree(make::join_paths(use_tree_str), None, None, false));\n-            if let Some(item) = ast::Item::cast(use_.syntax().clone()) {\n-                self.use_items.insert(0, item);\n-            }\n+            let item = ast::Item::from(use_);\n+            self.use_items.insert(0, item);\n         }\n \n         import_path_to_be_removed\n@@ -825,7 +812,6 @@ fn get_replacements_for_visibilty_change(\n     let mut impls = Vec::new();\n \n     items.into_iter().for_each(|item| {\n-        let item = item;\n         if !is_clone_for_updated {\n             *item = item.clone_for_update();\n         }"}]}