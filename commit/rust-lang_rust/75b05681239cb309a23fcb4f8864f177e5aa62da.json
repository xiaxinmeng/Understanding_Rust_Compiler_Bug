{"sha": "75b05681239cb309a23fcb4f8864f177e5aa62da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YjA1NjgxMjM5Y2IzMDlhMjNmY2I0Zjg4NjRmMTc3ZTVhYTYyZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-15T12:59:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-15T12:59:31Z"}, "message": "Auto merge of #41992 - ollie27:linkchecker_base, r=alexcrichton\n\nlinkchecker: Add support for <base> tag\n\nAdd support for the HTML <base> tag as used by mdBook so The Unstable\nBook can be checked.\n\nAlso cleanup a few things:\n* Stop checking the name attribute. It should never have been used and\nmdBook has since been fixed not to use it.\n* Make sure we only check html files.\n* Remove a few unnecessary allocations.\n\nFinally, dead links in The Unstable Book have been fixed.", "tree": {"sha": "bcf5774a6c25b97dcf19fa5c886911b67db3e8ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcf5774a6c25b97dcf19fa5c886911b67db3e8ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75b05681239cb309a23fcb4f8864f177e5aa62da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75b05681239cb309a23fcb4f8864f177e5aa62da", "html_url": "https://github.com/rust-lang/rust/commit/75b05681239cb309a23fcb4f8864f177e5aa62da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75b05681239cb309a23fcb4f8864f177e5aa62da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac254fbe7961dc78575fe8144a7049d280f06126", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac254fbe7961dc78575fe8144a7049d280f06126", "html_url": "https://github.com/rust-lang/rust/commit/ac254fbe7961dc78575fe8144a7049d280f06126"}, {"sha": "d4f20eb7e32bad9049663d30cfcb0e246ef2e031", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f20eb7e32bad9049663d30cfcb0e246ef2e031", "html_url": "https://github.com/rust-lang/rust/commit/d4f20eb7e32bad9049663d30cfcb0e246ef2e031"}], "stats": {"total": 112, "additions": 45, "deletions": 67}, "files": [{"sha": "e8256469b145078be9889c75600c86e64081012c", "filename": "src/doc/unstable-book/src/language-features/advanced-slice-patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md?ref=75b05681239cb309a23fcb4f8864f177e5aa62da", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#23121]\n \n [#23121]: https://github.com/rust-lang/rust/issues/23121\n \n-See also [`slice_patterns`](slice-patterns.html).\n+See also [`slice_patterns`](language-features/slice-patterns.html).\n \n ------------------------\n "}, {"sha": "8deb8f462562063f67cac3e1bb1ac85621444ba7", "filename": "src/doc/unstable-book/src/language-features/asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fasm.md?ref=75b05681239cb309a23fcb4f8864f177e5aa62da", "patch": "@@ -190,4 +190,4 @@ constraints, etc.\n [llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions\n \n If you need more power and don't mind losing some of the niceties of\n-`asm!`, check out [global_asm](global_asm.html).\n+`asm!`, check out [global_asm](language-features/global_asm.html)."}, {"sha": "0896627acae1b3203a39d1463bcae4d6e470fa19", "filename": "src/doc/unstable-book/src/language-features/box-patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md?ref=75b05681239cb309a23fcb4f8864f177e5aa62da", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#29641]\n \n [#29641]: https://github.com/rust-lang/rust/issues/29641\n \n-See also [`box_syntax`](box-syntax.html)\n+See also [`box_syntax`](language-features/box-syntax.html)\n \n ------------------------\n "}, {"sha": "50e59231a4df22d19608d91d470f54fceb645a83", "filename": "src/doc/unstable-book/src/language-features/box-syntax.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-syntax.md?ref=75b05681239cb309a23fcb4f8864f177e5aa62da", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#27779]\n \n [#27779]: https://github.com/rust-lang/rust/issues/27779\n \n-See also [`box_patterns`](box-patterns.html)\n+See also [`box_patterns`](language-features/box-patterns.html)\n \n ------------------------\n "}, {"sha": "f1ef74a63b513acedd4ff96396812640b451ac9b", "filename": "src/doc/unstable-book/src/language-features/global_asm.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fglobal_asm.md?ref=75b05681239cb309a23fcb4f8864f177e5aa62da", "patch": "@@ -74,5 +74,5 @@ usages and placed the larger, single usage in the crate root.\n \n If you don't need quite as much power and flexibility as\n `global_asm!` provides, and you don't mind restricting your inline\n-assembly to `fn` bodies only, you might try the [asm](asm.html)\n-feature instead.\n+assembly to `fn` bodies only, you might try the\n+[asm](language-features/asm.html) feature instead."}, {"sha": "b16e2ac2d221c97941e4f4ba0c01b31781335bed", "filename": "src/doc/unstable-book/src/language-features/plugin-registrar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin-registrar.md?ref=75b05681239cb309a23fcb4f8864f177e5aa62da", "patch": "@@ -8,6 +8,6 @@ This feature is part of \"compiler plugins.\" It will often be used with the\n [`plugin`] and `rustc_private` features as well. For more details, see\n their docs.\n \n-[`plugin`]: plugin.html\n+[`plugin`]: language-features/plugin.html\n \n ------------------------"}, {"sha": "4b8603e3c445045147c42de687955d1582c44e7d", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=75b05681239cb309a23fcb4f8864f177e5aa62da", "patch": "@@ -8,7 +8,7 @@ The tracking issue for this feature is: [#29597]\n This feature is part of \"compiler plugins.\" It will often be used with the\n [`plugin_registrar`] and `rustc_private` features.\n \n-[`plugin_registrar`]: plugin-registrar.html\n+[`plugin_registrar`]: language-features/plugin-registrar.html\n \n ------------------------\n "}, {"sha": "69857297582da4068b9c3c464d818657c7ce6877", "filename": "src/doc/unstable-book/src/language-features/slice-patterns.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md?ref=75b05681239cb309a23fcb4f8864f177e5aa62da", "patch": "@@ -4,7 +4,8 @@ The tracking issue for this feature is: [#23121]\n \n [#23121]: https://github.com/rust-lang/rust/issues/23121\n \n-See also [`advanced_slice_patterns`](advanced-slice-patterns.html).\n+See also\n+[`advanced_slice_patterns`](language-features/advanced-slice-patterns.html).\n \n ------------------------\n "}, {"sha": "18ff838dd32b961743f14b03a95d13d0d14790f9", "filename": "src/doc/unstable-book/src/library-features/alloc-jemalloc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-jemalloc.md?ref=75b05681239cb309a23fcb4f8864f177e5aa62da", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#33082]\n \n [#33082]: https://github.com/rust-lang/rust/issues/33082\n \n-See also [`alloc_system`](alloc-system.html).\n+See also [`alloc_system`](library-features/alloc-system.html).\n \n ------------------------\n "}, {"sha": "1d261db6ba1b3f810a08aa3892837c99cdeaf280", "filename": "src/doc/unstable-book/src/library-features/alloc-system.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "raw_url": "https://github.com/rust-lang/rust/raw/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Falloc-system.md?ref=75b05681239cb309a23fcb4f8864f177e5aa62da", "patch": "@@ -4,7 +4,7 @@ The tracking issue for this feature is: [#33082]\n \n [#33082]: https://github.com/rust-lang/rust/issues/33082\n \n-See also [`alloc_jemalloc`](alloc-jemalloc.html).\n+See also [`alloc_jemalloc`](library-features/alloc-jemalloc.html).\n \n ------------------------\n "}, {"sha": "1b55dc792c2e5d1ec77182504fc4454acb151ca2", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 33, "deletions": 56, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75b05681239cb309a23fcb4f8864f177e5aa62da/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=75b05681239cb309a23fcb4f8864f177e5aa62da", "patch": "@@ -41,7 +41,7 @@ macro_rules! t {\n }\n \n fn main() {\n-    let docs = env::args().nth(1).unwrap();\n+    let docs = env::args_os().nth(1).unwrap();\n     let docs = env::current_dir().unwrap().join(docs);\n     let mut errors = false;\n     walk(&mut HashMap::new(), &docs, &docs, &mut errors);\n@@ -65,15 +65,14 @@ enum Redirect {\n struct FileEntry {\n     source: String,\n     ids: HashSet<String>,\n-    names: HashSet<String>,\n }\n \n type Cache = HashMap<PathBuf, FileEntry>;\n \n impl FileEntry {\n     fn parse_ids(&mut self, file: &Path, contents: &str, errors: &mut bool) {\n         if self.ids.is_empty() {\n-            with_attrs_in_source(contents, \" id\", |fragment, i| {\n+            with_attrs_in_source(contents, \" id\", |fragment, i, _| {\n                 let frag = fragment.trim_left_matches(\"#\").to_owned();\n                 if !self.ids.insert(frag) {\n                     *errors = true;\n@@ -82,15 +81,6 @@ impl FileEntry {\n             });\n         }\n     }\n-\n-    fn parse_names(&mut self, contents: &str) {\n-        if self.names.is_empty() {\n-            with_attrs_in_source(contents, \" name\", |fragment, _| {\n-                let frag = fragment.trim_left_matches(\"#\").to_owned();\n-                self.names.insert(frag);\n-            });\n-        }\n-    }\n }\n \n fn walk(cache: &mut Cache, root: &Path, dir: &Path, errors: &mut bool) {\n@@ -116,15 +106,8 @@ fn check(cache: &mut Cache,\n          file: &Path,\n          errors: &mut bool)\n          -> Option<PathBuf> {\n-    // ignore js files as they are not prone to errors as the rest of the\n-    // documentation is and they otherwise bring up false positives.\n-    if file.extension().and_then(|s| s.to_str()) == Some(\"js\") {\n-        return None;\n-    }\n-\n-    // ignore handlebars files as they use {{}} to build links, we only\n-    // want to test the generated files\n-    if file.extension().and_then(|s| s.to_str()) == Some(\"hbs\") {\n+    // Ignore none HTML files.\n+    if file.extension().and_then(|s| s.to_str()) != Some(\"html\") {\n         return None;\n     }\n \n@@ -147,13 +130,7 @@ fn check(cache: &mut Cache,\n         return None;\n     }\n \n-    // mdbook uses the HTML <base> tag to handle links for subdirectories, which\n-    // linkchecker doesn't support\n-    if file.to_str().unwrap().contains(\"unstable-book\") {\n-        return None;\n-    }\n-\n-    let res = load_file(cache, root, PathBuf::from(file), SkipRedirect);\n+    let res = load_file(cache, root, file, SkipRedirect);\n     let (pretty_file, contents) = match res {\n         Ok(res) => res,\n         Err(_) => return None,\n@@ -162,13 +139,10 @@ fn check(cache: &mut Cache,\n         cache.get_mut(&pretty_file)\n              .unwrap()\n              .parse_ids(&pretty_file, &contents, errors);\n-        cache.get_mut(&pretty_file)\n-             .unwrap()\n-             .parse_names(&contents);\n     }\n \n     // Search for anything that's the regex 'href[ ]*=[ ]*\".*?\"'\n-    with_attrs_in_source(&contents, \" href\", |url, i| {\n+    with_attrs_in_source(&contents, \" href\", |url, i, base| {\n         // Ignore external URLs\n         if url.starts_with(\"http:\") || url.starts_with(\"https:\") ||\n            url.starts_with(\"javascript:\") || url.starts_with(\"ftp:\") ||\n@@ -184,9 +158,9 @@ fn check(cache: &mut Cache,\n         // Once we've plucked out the URL, parse it using our base url and\n         // then try to extract a file path.\n         let mut path = file.to_path_buf();\n-        if !url.is_empty() {\n+        if !base.is_empty() || !url.is_empty() {\n             path.pop();\n-            for part in Path::new(url).components() {\n+            for part in Path::new(base).join(url).components() {\n                 match part {\n                     Component::Prefix(_) |\n                     Component::RootDir => panic!(),\n@@ -197,13 +171,6 @@ fn check(cache: &mut Cache,\n             }\n         }\n \n-        if let Some(extension) = path.extension() {\n-            // don't check these files\n-            if extension == \"png\" {\n-                return;\n-            }\n-        }\n-\n         // Alright, if we've found a file name then this file had better\n         // exist! If it doesn't then we register and print an error.\n         if path.exists() {\n@@ -218,11 +185,17 @@ fn check(cache: &mut Cache,\n                          pretty_path.display());\n                 return;\n             }\n-            let res = load_file(cache, root, path.clone(), FromRedirect(false));\n+            if let Some(extension) = path.extension() {\n+                // Ignore none HTML files.\n+                if extension != \"html\" {\n+                    return;\n+                }\n+            }\n+            let res = load_file(cache, root, &path, FromRedirect(false));\n             let (pretty_path, contents) = match res {\n                 Ok(res) => res,\n                 Err(LoadError::IOError(err)) => {\n-                    panic!(format!(\"error loading {}: {}\", path.display(), err));\n+                    panic!(\"error loading {}: {}\", path.display(), err);\n                 }\n                 Err(LoadError::BrokenRedirect(target, _)) => {\n                     *errors = true;\n@@ -245,11 +218,10 @@ fn check(cache: &mut Cache,\n \n                 let entry = &mut cache.get_mut(&pretty_path).unwrap();\n                 entry.parse_ids(&pretty_path, &contents, errors);\n-                entry.parse_names(&contents);\n \n-                if !(entry.ids.contains(*fragment) || entry.names.contains(*fragment)) {\n+                if !entry.ids.contains(*fragment) {\n                     *errors = true;\n-                    print!(\"{}:{}: broken link fragment  \",\n+                    print!(\"{}:{}: broken link fragment \",\n                            pretty_file.display(),\n                            i + 1);\n                     println!(\"`#{}` pointing to `{}`\", fragment, pretty_path.display());\n@@ -267,7 +239,7 @@ fn check(cache: &mut Cache,\n \n fn load_file(cache: &mut Cache,\n              root: &Path,\n-             mut file: PathBuf,\n+             file: &Path,\n              redirect: Redirect)\n              -> Result<(PathBuf, String), LoadError> {\n     let mut contents = String::new();\n@@ -279,9 +251,9 @@ fn load_file(cache: &mut Cache,\n             None\n         }\n         Entry::Vacant(entry) => {\n-            let mut fp = File::open(file.clone()).map_err(|err| {\n+            let mut fp = File::open(file).map_err(|err| {\n                 if let FromRedirect(true) = redirect {\n-                    LoadError::BrokenRedirect(file.clone(), err)\n+                    LoadError::BrokenRedirect(file.to_path_buf(), err)\n                 } else {\n                     LoadError::IOError(err)\n                 }\n@@ -297,17 +269,14 @@ fn load_file(cache: &mut Cache,\n                 entry.insert(FileEntry {\n                     source: contents.clone(),\n                     ids: HashSet::new(),\n-                    names: HashSet::new(),\n                 });\n             }\n             maybe\n         }\n     };\n-    file.pop();\n-    match maybe_redirect.map(|url| file.join(url)) {\n+    match maybe_redirect.map(|url| file.parent().unwrap().join(url)) {\n         Some(redirect_file) => {\n-            let path = PathBuf::from(redirect_file);\n-            load_file(cache, root, path, FromRedirect(true))\n+            load_file(cache, root, &redirect_file, FromRedirect(true))\n         }\n         None => Ok((pretty_file, contents)),\n     }\n@@ -329,10 +298,14 @@ fn maybe_redirect(source: &str) -> Option<String> {\n     })\n }\n \n-fn with_attrs_in_source<F: FnMut(&str, usize)>(contents: &str, attr: &str, mut f: F) {\n+fn with_attrs_in_source<F: FnMut(&str, usize, &str)>(contents: &str, attr: &str, mut f: F) {\n+    let mut base = \"\";\n     for (i, mut line) in contents.lines().enumerate() {\n         while let Some(j) = line.find(attr) {\n             let rest = &line[j + attr.len()..];\n+            // The base tag should always be the first link in the document so\n+            // we can get away with using one pass.\n+            let is_base = line[..j].ends_with(\"<base\");\n             line = rest;\n             let pos_equals = match rest.find(\"=\") {\n                 Some(i) => i,\n@@ -358,7 +331,11 @@ fn with_attrs_in_source<F: FnMut(&str, usize)>(contents: &str, attr: &str, mut f\n                 Some(i) => &rest[..i],\n                 None => continue,\n             };\n-            f(url, i)\n+            if is_base {\n+                base = url;\n+                continue;\n+            }\n+            f(url, i, base)\n         }\n     }\n }"}]}