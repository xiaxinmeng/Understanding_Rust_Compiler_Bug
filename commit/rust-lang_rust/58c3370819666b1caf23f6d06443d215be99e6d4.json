{"sha": "58c3370819666b1caf23f6d06443d215be99e6d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YzMzNzA4MTk2NjZiMWNhZjIzZjZkMDY0NDNkMjE1YmU5OWU2ZDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-12T18:45:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-12T18:45:03Z"}, "message": "Simplify", "tree": {"sha": "13ace687fe99f464711d98bef580cb6b2cdc40b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13ace687fe99f464711d98bef580cb6b2cdc40b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58c3370819666b1caf23f6d06443d215be99e6d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58c3370819666b1caf23f6d06443d215be99e6d4", "html_url": "https://github.com/rust-lang/rust/commit/58c3370819666b1caf23f6d06443d215be99e6d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58c3370819666b1caf23f6d06443d215be99e6d4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dad14b5cd63203d7ad9d86686b3c654ff353c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dad14b5cd63203d7ad9d86686b3c654ff353c83", "html_url": "https://github.com/rust-lang/rust/commit/8dad14b5cd63203d7ad9d86686b3c654ff353c83"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "381649859ff56628609426bd0592c072c4a8f757", "filename": "crates/server/src/dispatch.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/58c3370819666b1caf23f6d06443d215be99e6d4/crates%2Fserver%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c3370819666b1caf23f6d06443d215be99e6d4/crates%2Fserver%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fdispatch.rs?ref=58c3370819666b1caf23f6d06443d215be99e6d4", "patch": "@@ -71,19 +71,6 @@ pub fn handle_request<R, F>(req: &mut Option<RawRequest>, f: F) -> Result<()>\n     }\n }\n \n-pub fn expect_request<R: ClientRequest>(io: &mut Io, raw: RawRequest)\n-                                        -> Result<Option<(R::Params, Responder<R>)>>\n-{\n-    let ret = match parse_request_as::<R>(raw)? {\n-        Ok(x) => Some(x),\n-        Err(raw) => {\n-            unknown_method(io, raw)?;\n-            None\n-        }\n-    };\n-    Ok(ret)\n-}\n-\n fn parse_notification_as<N>(raw: RawNotification) -> Result<::std::result::Result<N::Params, RawNotification>>\n     where\n         N: Notification,"}, {"sha": "345bb6ac4831cdb189a3ace9b01f3f16e517c5ce", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58c3370819666b1caf23f6d06443d215be99e6d4/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c3370819666b1caf23f6d06443d215be99e6d4/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=58c3370819666b1caf23f6d06443d215be99e6d4", "patch": "@@ -79,21 +79,30 @@ fn initialize(io: &mut Io) -> Result<()> {\n     loop {\n         match io.recv()? {\n             RawMsg::Request(req) => {\n-                if let Some((_params, resp)) = dispatch::expect_request::<req::Initialize>(io, req)? {\n+                let mut req = Some(req);\n+                dispatch::handle_request::<req::Initialize, _>(&mut req, |_params, resp| {\n                     let res = req::InitializeResult { capabilities: caps::SERVER_CAPABILITIES };\n                     let resp = resp.into_response(Ok(res))?;\n                     io.send(RawMsg::Response(resp));\n-                    match io.recv()? {\n-                        RawMsg::Notification(n) => {\n-                            if n.method != \"initialized\" {\n+                    Ok(())\n+                })?;\n+                match req {\n+                    None => {\n+                        match io.recv()? {\n+                            RawMsg::Notification(n) => {\n+                                if n.method != \"initialized\" {\n+                                    bail!(\"expected initialized notification\");\n+                                }\n+                            }\n+                            _ => {\n                                 bail!(\"expected initialized notification\");\n                             }\n                         }\n-                        _ => {\n-                            bail!(\"expected initialized notification\");\n-                        }\n+                        return initialized(io);\n+                    }\n+                    Some(req) => {\n+                        bail!(\"expected initialize request, got {:?}\", req)\n                     }\n-                    return initialized(io);\n                 }\n             }\n             RawMsg::Notification(n) => {\n@@ -106,7 +115,6 @@ fn initialize(io: &mut Io) -> Result<()> {\n     }\n }\n \n-\n enum Task {\n     Respond(RawResponse),\n     Notify(RawNotification),\n@@ -301,7 +309,7 @@ fn update_file_notifications_on_threadpool(\n         }\n         match publish_decorations(world, uri) {\n             Err(e) => {\n-                error!(\"failed to compute decortions: {:?}\", e)\n+                error!(\"failed to compute decorations: {:?}\", e)\n             }\n             Ok(params) => {\n                 let not = dispatch::send_notification::<req::PublishDecorations>(params);"}]}