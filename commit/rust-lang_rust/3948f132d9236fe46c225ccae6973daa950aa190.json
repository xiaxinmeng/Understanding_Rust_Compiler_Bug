{"sha": "3948f132d9236fe46c225ccae6973daa950aa190", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NDhmMTMyZDkyMzZmZTQ2YzIyNWNjYWU2OTczZGFhOTUwYWExOTA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-22T11:39:32Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-22T12:06:20Z"}, "message": "Write a type_structurally_contains, use it to rewrite has_dynamic_size\n\n(I'll be using this for type-needs-copy-glue in the near future.)", "tree": {"sha": "acd714c93a350c597a7c458fd1d3bda9acc1002f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acd714c93a350c597a7c458fd1d3bda9acc1002f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3948f132d9236fe46c225ccae6973daa950aa190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3948f132d9236fe46c225ccae6973daa950aa190", "html_url": "https://github.com/rust-lang/rust/commit/3948f132d9236fe46c225ccae6973daa950aa190", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3948f132d9236fe46c225ccae6973daa950aa190/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42864377a4a64e3d8258e6fdb788c5e322c1ca55", "url": "https://api.github.com/repos/rust-lang/rust/commits/42864377a4a64e3d8258e6fdb788c5e322c1ca55", "html_url": "https://github.com/rust-lang/rust/commit/42864377a4a64e3d8258e6fdb788c5e322c1ca55"}], "stats": {"total": 64, "additions": 29, "deletions": 35}, "files": [{"sha": "9c2f38bf4febbaed4ce7047de0c75a3fe87f1012", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3948f132d9236fe46c225ccae6973daa950aa190/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3948f132d9236fe46c225ccae6973daa950aa190/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=3948f132d9236fe46c225ccae6973daa950aa190", "patch": "@@ -1131,56 +1131,50 @@ fn type_is_native(cx: &ctxt, ty: t) -> bool {\n     alt struct(cx, ty) { ty_native(_) { ret true; } _ { ret false; } }\n }\n \n-fn type_has_dynamic_size(cx: &ctxt, ty: t) -> bool {\n-    alt struct(cx, ty) {\n-      ty_nil. { ret false; }\n-      ty_bot. { ret false; }\n-      ty_bool. { ret false; }\n-      ty_int. { ret false; }\n-      ty_float. { ret false; }\n-      ty_uint. { ret false; }\n-      ty_machine(_) { ret false; }\n-      ty_char. { ret false; }\n-      ty_str. { ret false; }\n-      ty_istr. { ret false; }\n-      ty_tag(_, subtys) {\n-        let i = 0u;\n-        while i < vec::len::<t>(subtys) {\n-            if type_has_dynamic_size(cx, subtys[i]) { ret true; }\n-            i += 1u;\n+fn type_structurally_contains(cx: &ctxt, ty: t,\n+                              test: fn(&sty) -> bool) -> bool {\n+    let sty = struct(cx, ty);\n+    if test(sty) { ret true; }\n+    alt sty {\n+      ty_tag(did, tps) {\n+        for variant in tag_variants(cx, did) {\n+            for aty in variant.args {\n+                let sty = substitute_type_params(cx, tps, aty);\n+                if type_structurally_contains(cx, sty, test) { ret true; }\n+            }\n         }\n         ret false;\n       }\n-      ty_box(_) { ret false; }\n-      ty_vec(mt) { ret type_has_dynamic_size(cx, mt.ty); }\n-      ty_ptr(_) { ret false; }\n+      ty_vec(mt) { ret type_structurally_contains(cx, mt.ty, test); }\n       ty_rec(fields) {\n-        let i = 0u;\n-        while i < vec::len::<field>(fields) {\n-            if type_has_dynamic_size(cx, fields[i].mt.ty) { ret true; }\n-            i += 1u;\n+        for field in fields {\n+            if type_structurally_contains(cx, field.mt.ty, test) { ret true; }\n         }\n         ret false;\n       }\n       ty_tup(ts) {\n-        for tt in ts { if type_has_dynamic_size(cx, tt) { ret true; } }\n+        for tt in ts {\n+            if type_structurally_contains(cx, tt, test) { ret true; }\n+        }\n         ret false;\n       }\n-      ty_fn(_, _, _, _, _) { ret false; }\n-      ty_native_fn(_, _, _) { ret false; }\n-      ty_obj(_) { ret false; }\n       ty_res(_, sub, tps) {\n-        for tp: t in tps { if type_has_dynamic_size(cx, tp) { ret true; } }\n-        ret type_has_dynamic_size(cx, sub);\n+        let sty = substitute_type_params(cx, tps, sub);\n+        ret type_structurally_contains(cx, sty, test);\n       }\n-      ty_var(_) { fail \"ty_var in type_has_dynamic_size()\"; }\n-      ty_param(_, _) { ret true; }\n-      ty_type. { ret false; }\n-      ty_native(_) { ret false; }\n-      ty_uniq(_) { ret false; }\n+      _ { ret false; }\n     }\n }\n \n+fn type_has_dynamic_size(cx: &ctxt, ty: t) -> bool {\n+    ret type_structurally_contains(cx, ty, fn(sty: &sty) -> bool {\n+        ret alt sty {\n+          ty_param(_, _) { true }\n+          _ { false }\n+        };\n+    });\n+}\n+\n fn type_is_integral(cx: &ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n       ty_int. { ret true; }"}]}