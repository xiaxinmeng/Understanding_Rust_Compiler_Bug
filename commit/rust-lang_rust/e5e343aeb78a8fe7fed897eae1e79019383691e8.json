{"sha": "e5e343aeb78a8fe7fed897eae1e79019383691e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZTM0M2FlYjc4YThmZTdmZWQ4OTdlYWUxZTc5MDE5MzgzNjkxZTg=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2015-01-17T20:59:44Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2015-04-19T21:05:32Z"}, "message": "Finished unicode support in the model lexer.\n\nCompleted XID_Start and XID_Continue rules", "tree": {"sha": "2a597d4b0f014b4170fe4011fd6a72f4e2740768", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a597d4b0f014b4170fe4011fd6a72f4e2740768"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5e343aeb78a8fe7fed897eae1e79019383691e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e343aeb78a8fe7fed897eae1e79019383691e8", "html_url": "https://github.com/rust-lang/rust/commit/e5e343aeb78a8fe7fed897eae1e79019383691e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5e343aeb78a8fe7fed897eae1e79019383691e8/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be437132b8c53520598131bf542020966099352b", "url": "https://api.github.com/repos/rust-lang/rust/commits/be437132b8c53520598131bf542020966099352b", "html_url": "https://github.com/rust-lang/rust/commit/be437132b8c53520598131bf542020966099352b"}], "stats": {"total": 247, "additions": 229, "deletions": 18}, "files": [{"sha": "8739d135b4f96fe9f89021206ad6f3575e1df4cb", "filename": "src/grammar/RustLexer.g4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5e343aeb78a8fe7fed897eae1e79019383691e8/src%2Fgrammar%2FRustLexer.g4", "raw_url": "https://github.com/rust-lang/rust/raw/e5e343aeb78a8fe7fed897eae1e79019383691e8/src%2Fgrammar%2FRustLexer.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FRustLexer.g4?ref=e5e343aeb78a8fe7fed897eae1e79019383691e8", "patch": "@@ -93,7 +93,7 @@ fragment SUFFIX\n   ;\n \n LIT_CHAR\n-  : '\\'' ( '\\\\' CHAR_ESCAPE | ~[\\\\'\\n\\t\\r] ) '\\'' SUFFIX?\n+  : '\\'' ( '\\\\' CHAR_ESCAPE | ~[\\\\'\\n\\t\\r] | '\\ud800' .. '\\udbff' '\\udc00' .. '\\udfff' ) '\\'' SUFFIX?\n   ;\n \n LIT_BYTE"}, {"sha": "8bf501c7f3f80de4bf4cba726d55f52b4febbe1f", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e5e343aeb78a8fe7fed897eae1e79019383691e8/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e343aeb78a8fe7fed897eae1e79019383691e8/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=e5e343aeb78a8fe7fed897eae1e79019383691e8", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(plugin)]\n \n+#![allow(unstable)]\n+\n extern crate syntax;\n extern crate rustc;\n \n@@ -164,7 +166,8 @@ fn count(lit: &str) -> usize {\n     lit.chars().take_while(|c| *c == '#').count()\n }\n \n-fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>) -> TokenAndSpan {\n+fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_pairs_pos: &[usize])\n+                     -> TokenAndSpan {\n     // old regex:\n     // \\[@(?P<seq>\\d+),(?P<start>\\d+):(?P<end>\\d+)='(?P<content>.+?)',<(?P<toknum>-?\\d+)>,\\d+:\\d+]\n     let start = s.find_str(\"[@\").unwrap();\n@@ -213,9 +216,16 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>) -> TokenAn\n         0\n     };\n \n+    let mut lo = start.parse::<u32>().unwrap() - offset;\n+    let mut hi = end.parse::<u32>().unwrap() + 1;\n+\n+    // Adjust the span: For each surrogate pair already encountered, subtract one position.\n+    lo -= surrogate_pairs_pos.binary_search(&(lo as usize)).unwrap_or_else(|x| x) as u32;\n+    hi -= surrogate_pairs_pos.binary_search(&(hi as usize)).unwrap_or_else(|x| x) as u32;\n+\n     let sp = syntax::codemap::Span {\n-        lo: syntax::codemap::BytePos(start.parse::<u32>().unwrap() - offset),\n-        hi: syntax::codemap::BytePos(end.parse::<u32>().unwrap() + 1),\n+        lo: syntax::codemap::BytePos(lo),\n+        hi: syntax::codemap::BytePos(hi),\n         expn_id: syntax::codemap::NO_EXPANSION\n     };\n \n@@ -235,11 +245,10 @@ fn tok_cmp(a: &token::Token, b: &token::Token) -> bool {\n     }\n }\n \n-fn span_cmp(rust_sp: syntax::codemap::Span, antlr_sp: syntax::codemap::Span, cm: &syntax::codemap::CodeMap) -> bool {\n-    println!(\"{} {}\", cm.bytepos_to_file_charpos(rust_sp.lo).to_uint(), cm.bytepos_to_file_charpos(rust_sp.hi).to_uint());\n-    antlr_sp.lo.to_uint() == cm.bytepos_to_file_charpos(rust_sp.lo).to_uint() &&\n-    antlr_sp.hi.to_uint() == cm.bytepos_to_file_charpos(rust_sp.hi).to_uint() &&\n-    antlr_sp.expn_id == rust_sp.expn_id\n+fn span_cmp(antlr_sp: syntax::codemap::Span, rust_sp: syntax::codemap::Span, cm: &syntax::codemap::CodeMap) -> bool {\n+    antlr_sp.expn_id == rust_sp.expn_id &&\n+        antlr_sp.lo.to_uint() == cm.bytepos_to_file_charpos(rust_sp.lo).to_uint() &&\n+        antlr_sp.hi.to_uint() == cm.bytepos_to_file_charpos(rust_sp.hi).to_uint()\n }\n \n fn main() {\n@@ -250,16 +259,18 @@ fn main() {\n \n     let args = std::os::args();\n \n-    let mut token_file = File::open(&Path::new(args[2]));\n-    let token_map = parse_token_list(token_file.read_to_string().unwrap());\n+    // Rust's lexer\n+    let code = File::open(&Path::new(args[1])).unwrap().read_to_string().unwrap();\n \n-    let mut stdin = std::io::stdin();\n-    let mut lock = stdin.lock();\n-    let lines = lock.lines();\n-    let mut antlr_tokens = lines.map(|l| parse_antlr_token(l.unwrap().trim(),\n-                                                                   &token_map));\n+    let surrogate_pairs_pos: Vec<usize> = code.chars().enumerate()\n+                                                     .filter(|&(_, c)| c as usize > 0xFFFF)\n+                                                     .map(|(n, _)| n)\n+                                                     .enumerate()\n+                                                     .map(|(x, n)| x + n)\n+                                                     .collect();\n+\n+    debug!(\"Pairs: {:?}\", surrogate_pairs_pos);\n \n-    let code = File::open(&Path::new(args[1])).unwrap().read_to_string().unwrap();\n     let options = config::basic_options();\n     let session = session::build_session(options, None,\n                                          syntax::diagnostics::registry::Registry::new(&[]));\n@@ -269,13 +280,25 @@ fn main() {\n     let mut lexer = lexer::StringReader::new(session.diagnostic(), filemap);\n     let ref cm = lexer.span_diagnostic.cm;\n \n+    // ANTLR\n+    let mut token_file = File::open(&Path::new(args[2]));\n+    let token_map = parse_token_list(token_file.read_to_string().unwrap());\n+\n+    let mut stdin = std::io::stdin();\n+    let mut lock = stdin.lock();\n+    let lines = lock.lines();\n+    let mut antlr_tokens = lines.map(|l| parse_antlr_token(l.unwrap().trim(),\n+                                                           &token_map,\n+                                                           &surrogate_pairs_pos[]));\n+\n     for antlr_tok in antlr_tokens {\n         let rustc_tok = next(&mut lexer);\n         if rustc_tok.tok == token::Eof && antlr_tok.tok == token::Eof {\n             continue\n         }\n \n-        assert!(span_cmp(rustc_tok.sp, antlr_tok.sp, cm), \"{:?} and {:?} have different spans\", rustc_tok,\n+        assert!(span_cmp(antlr_tok.sp, rustc_tok.sp, cm), \"{:?} and {:?} have different spans\",\n+                rustc_tok,\n                 antlr_tok);\n \n         macro_rules! matches {"}, {"sha": "f3a1a3b40f99a382f17d8246b0f03c96eb7f49c3", "filename": "src/grammar/xidcontinue.g4", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e5e343aeb78a8fe7fed897eae1e79019383691e8/src%2Fgrammar%2Fxidcontinue.g4", "raw_url": "https://github.com/rust-lang/rust/raw/e5e343aeb78a8fe7fed897eae1e79019383691e8/src%2Fgrammar%2Fxidcontinue.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fxidcontinue.g4?ref=e5e343aeb78a8fe7fed897eae1e79019383691e8", "patch": "@@ -372,4 +372,102 @@ fragment XID_Continue:\n     | '\\uffca' .. '\\uffcf'\n     | '\\uffd2' .. '\\uffd7'\n     | '\\uffda' .. '\\uffdc'\n+    | '\\ud800' '\\udc00' .. '\\udc0a'\n+    | '\\ud800' '\\udc0d' .. '\\udc25'\n+    | '\\ud800' '\\udc28' .. '\\udc39'\n+    | '\\ud800' '\\udc3c' .. '\\udc3c'\n+    | '\\ud800' '\\udc3f' .. '\\udc4c'\n+    | '\\ud800' '\\udc50' .. '\\udc5c'\n+    | '\\ud800' '\\udc80' .. '\\udcf9'\n+    | '\\ud800' '\\udf00' .. '\\udf1d'\n+    | '\\ud800' '\\udf30' .. '\\udf49'\n+    | '\\ud800' '\\udf80' .. '\\udf9c'\n+    | '\\ud801' '\\ue000' .. '\\ue09c'\n+    | '\\ud801' '\\ue0a0' .. '\\ue0a8'\n+    | '\\ud802' '\\ue400' .. '\\ue404'\n+    | '\\ud802' '\\u0808'\n+    | '\\ud802' '\\ue40a' .. '\\ue434'\n+    | '\\ud802' '\\ue437' .. '\\ue437'\n+    | '\\ud802' '\\u083c'\n+    | '\\ud802' '\\u083f'\n+    | '\\ud834' '\\uad65' .. '\\uad68'\n+    | '\\ud834' '\\uad6d' .. '\\uad71'\n+    | '\\ud834' '\\uad7b' .. '\\uad81'\n+    | '\\ud834' '\\uad85' .. '\\uad8a'\n+    | '\\ud834' '\\uadaa' .. '\\uadac'\n+    | '\\ud835' '\\ub000' .. '\\ub053'\n+    | '\\ud835' '\\ub056' .. '\\ub09b'\n+    | '\\ud835' '\\ub09e' .. '\\ub09e'\n+    | '\\ud835' '\\ud4a2'\n+    | '\\ud835' '\\ub0a5' .. '\\ub0a5'\n+    | '\\ud835' '\\ub0a9' .. '\\ub0ab'\n+    | '\\ud835' '\\ub0ae' .. '\\ub0b8'\n+    | '\\ud835' '\\ud4bb'\n+    | '\\ud835' '\\ub0bd' .. '\\ub0c2'\n+    | '\\ud835' '\\ub0c5' .. '\\ub104'\n+    | '\\ud835' '\\ub107' .. '\\ub109'\n+    | '\\ud835' '\\ub10d' .. '\\ub113'\n+    | '\\ud835' '\\ub116' .. '\\ub11b'\n+    | '\\ud835' '\\ub11e' .. '\\ub138'\n+    | '\\ud835' '\\ub13b' .. '\\ub13d'\n+    | '\\ud835' '\\ub140' .. '\\ub143'\n+    | '\\ud835' '\\ud546'\n+    | '\\ud835' '\\ub14a' .. '\\ub14f'\n+    | '\\ud835' '\\ub152' .. '\\ub2a2'\n+    | '\\ud835' '\\ub2a8' .. '\\ub2bf'\n+    | '\\ud835' '\\ub2c2' .. '\\ub2d9'\n+    | '\\ud835' '\\ub2dc' .. '\\ub2f9'\n+    | '\\ud835' '\\ub2fc' .. '\\ub313'\n+    | '\\ud835' '\\ub316' .. '\\ub333'\n+    | '\\ud835' '\\ub336' .. '\\ub34d'\n+    | '\\ud835' '\\ub350' .. '\\ub36d'\n+    | '\\ud835' '\\ub370' .. '\\ub387'\n+    | '\\ud835' '\\ub38a' .. '\\ub3a7'\n+    | '\\ud835' '\\ub3aa' .. '\\ub3c1'\n+    | '\\ud835' '\\ub3c4' .. '\\ub3c8'\n+    | '\\ud835' '\\ub3ce' .. '\\ub3fe'\n+    | '\\ud840' '\\udc00' .. '\\udffe'\n+    | '\\ud841' '\\ue000' .. '\\ue3fe'\n+    | '\\ud842' '\\ue400' .. '\\ue7fe'\n+    | '\\ud843' '\\ue800' .. '\\uebfe'\n+    | '\\ud844' '\\uec00' .. '\\ueffe'\n+    | '\\ud845' '\\uf000' .. '\\uf3fe'\n+    | '\\ud846' '\\uf400' .. '\\uf7fe'\n+    | '\\ud847' '\\uf800' .. '\\ufbfe'\n+    | '\\ud848' '\\ufc00' .. '\\ufffe'\n+    | '\\ud849' '\\u0000' .. '\\u03fe'\n+    | '\\ud84a' '\\u0400' .. '\\u07fe'\n+    | '\\ud84b' '\\u0800' .. '\\u0bfe'\n+    | '\\ud84c' '\\u0c00' .. '\\u0ffe'\n+    | '\\ud84d' '\\u1000' .. '\\u13fe'\n+    | '\\ud84e' '\\u1400' .. '\\u17fe'\n+    | '\\ud84f' '\\u1800' .. '\\u1bfe'\n+    | '\\ud850' '\\u1c00' .. '\\u1ffe'\n+    | '\\ud851' '\\u2000' .. '\\u23fe'\n+    | '\\ud852' '\\u2400' .. '\\u27fe'\n+    | '\\ud853' '\\u2800' .. '\\u2bfe'\n+    | '\\ud854' '\\u2c00' .. '\\u2ffe'\n+    | '\\ud855' '\\u3000' .. '\\u33fe'\n+    | '\\ud856' '\\u3400' .. '\\u37fe'\n+    | '\\ud857' '\\u3800' .. '\\u3bfe'\n+    | '\\ud858' '\\u3c00' .. '\\u3ffe'\n+    | '\\ud859' '\\u4000' .. '\\u43fe'\n+    | '\\ud85a' '\\u4400' .. '\\u47fe'\n+    | '\\ud85b' '\\u4800' .. '\\u4bfe'\n+    | '\\ud85c' '\\u4c00' .. '\\u4ffe'\n+    | '\\ud85d' '\\u5000' .. '\\u53fe'\n+    | '\\ud85e' '\\u5400' .. '\\u57fe'\n+    | '\\ud85f' '\\u5800' .. '\\u5bfe'\n+    | '\\ud860' '\\u5c00' .. '\\u5ffe'\n+    | '\\ud861' '\\u6000' .. '\\u63fe'\n+    | '\\ud862' '\\u6400' .. '\\u67fe'\n+    | '\\ud863' '\\u6800' .. '\\u6bfe'\n+    | '\\ud864' '\\u6c00' .. '\\u6ffe'\n+    | '\\ud865' '\\u7000' .. '\\u73fe'\n+    | '\\ud866' '\\u7400' .. '\\u77fe'\n+    | '\\ud867' '\\u7800' .. '\\u7bfe'\n+    | '\\ud868' '\\u7c00' .. '\\u7ffe'\n+    | '\\ud869' '\\u8000' .. '\\u82d5'\n+    | '\\ud87e' '\\ud400' .. '\\ud61c'\n+    | '\\udb40' '\\udd00' .. '\\uddee'\n     ;"}, {"sha": "53fb50f4584d2d65eee0b77d8f9f090cc47abeed", "filename": "src/grammar/xidstart.g4", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e5e343aeb78a8fe7fed897eae1e79019383691e8/src%2Fgrammar%2Fxidstart.g4", "raw_url": "https://github.com/rust-lang/rust/raw/e5e343aeb78a8fe7fed897eae1e79019383691e8/src%2Fgrammar%2Fxidstart.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fxidstart.g4?ref=e5e343aeb78a8fe7fed897eae1e79019383691e8", "patch": "@@ -286,4 +286,94 @@ fragment XID_Start :\n     | '\\uffca' .. '\\uffcf'\n     | '\\uffd2' .. '\\uffd7'\n     | '\\uffda' .. '\\uffdc'\n+    | '\\ud800' '\\udc00' .. '\\udc0a'\n+    | '\\ud800' '\\udc0d' .. '\\udc25'\n+    | '\\ud800' '\\udc28' .. '\\udc39'\n+    | '\\ud800' '\\udc3c' .. '\\udc3c'\n+    | '\\ud800' '\\udc3f' .. '\\udc4c'\n+    | '\\ud800' '\\udc50' .. '\\udc5c'\n+    | '\\ud800' '\\udc80' .. '\\udcf9'\n+    | '\\ud800' '\\udf00' .. '\\udf1d'\n+    | '\\ud800' '\\udf30' .. '\\udf49'\n+    | '\\ud800' '\\udf80' .. '\\udf9c'\n+    | '\\ud801' '\\ue000' .. '\\ue09c'\n+    | '\\ud802' '\\ue400' .. '\\ue404'\n+    | '\\ud802' '\\u0808'\n+    | '\\ud802' '\\ue40a' .. '\\ue434'\n+    | '\\ud802' '\\ue437' .. '\\ue437'\n+    | '\\ud802' '\\u083c'\n+    | '\\ud802' '\\u083f'\n+    | '\\ud835' '\\ub000' .. '\\ub053'\n+    | '\\ud835' '\\ub056' .. '\\ub09b'\n+    | '\\ud835' '\\ub09e' .. '\\ub09e'\n+    | '\\ud835' '\\ud4a2'\n+    | '\\ud835' '\\ub0a5' .. '\\ub0a5'\n+    | '\\ud835' '\\ub0a9' .. '\\ub0ab'\n+    | '\\ud835' '\\ub0ae' .. '\\ub0b8'\n+    | '\\ud835' '\\ud4bb'\n+    | '\\ud835' '\\ub0bd' .. '\\ub0c2'\n+    | '\\ud835' '\\ub0c5' .. '\\ub104'\n+    | '\\ud835' '\\ub107' .. '\\ub109'\n+    | '\\ud835' '\\ub10d' .. '\\ub113'\n+    | '\\ud835' '\\ub116' .. '\\ub11b'\n+    | '\\ud835' '\\ub11e' .. '\\ub138'\n+    | '\\ud835' '\\ub13b' .. '\\ub13d'\n+    | '\\ud835' '\\ub140' .. '\\ub143'\n+    | '\\ud835' '\\ud546'\n+    | '\\ud835' '\\ub14a' .. '\\ub14f'\n+    | '\\ud835' '\\ub152' .. '\\ub2a2'\n+    | '\\ud835' '\\ub2a8' .. '\\ub2bf'\n+    | '\\ud835' '\\ub2c2' .. '\\ub2d9'\n+    | '\\ud835' '\\ub2dc' .. '\\ub2f9'\n+    | '\\ud835' '\\ub2fc' .. '\\ub313'\n+    | '\\ud835' '\\ub316' .. '\\ub333'\n+    | '\\ud835' '\\ub336' .. '\\ub34d'\n+    | '\\ud835' '\\ub350' .. '\\ub36d'\n+    | '\\ud835' '\\ub370' .. '\\ub387'\n+    | '\\ud835' '\\ub38a' .. '\\ub3a7'\n+    | '\\ud835' '\\ub3aa' .. '\\ub3c1'\n+    | '\\ud835' '\\ub3c4' .. '\\ub3c8'\n+    | '\\ud840' '\\udc00' .. '\\udffe'\n+    | '\\ud841' '\\ue000' .. '\\ue3fe'\n+    | '\\ud842' '\\ue400' .. '\\ue7fe'\n+    | '\\ud843' '\\ue800' .. '\\uebfe'\n+    | '\\ud844' '\\uec00' .. '\\ueffe'\n+    | '\\ud845' '\\uf000' .. '\\uf3fe'\n+    | '\\ud846' '\\uf400' .. '\\uf7fe'\n+    | '\\ud847' '\\uf800' .. '\\ufbfe'\n+    | '\\ud848' '\\ufc00' .. '\\ufffe'\n+    | '\\ud849' '\\u0000' .. '\\u03fe'\n+    | '\\ud84a' '\\u0400' .. '\\u07fe'\n+    | '\\ud84b' '\\u0800' .. '\\u0bfe'\n+    | '\\ud84c' '\\u0c00' .. '\\u0ffe'\n+    | '\\ud84d' '\\u1000' .. '\\u13fe'\n+    | '\\ud84e' '\\u1400' .. '\\u17fe'\n+    | '\\ud84f' '\\u1800' .. '\\u1bfe'\n+    | '\\ud850' '\\u1c00' .. '\\u1ffe'\n+    | '\\ud851' '\\u2000' .. '\\u23fe'\n+    | '\\ud852' '\\u2400' .. '\\u27fe'\n+    | '\\ud853' '\\u2800' .. '\\u2bfe'\n+    | '\\ud854' '\\u2c00' .. '\\u2ffe'\n+    | '\\ud855' '\\u3000' .. '\\u33fe'\n+    | '\\ud856' '\\u3400' .. '\\u37fe'\n+    | '\\ud857' '\\u3800' .. '\\u3bfe'\n+    | '\\ud858' '\\u3c00' .. '\\u3ffe'\n+    | '\\ud859' '\\u4000' .. '\\u43fe'\n+    | '\\ud85a' '\\u4400' .. '\\u47fe'\n+    | '\\ud85b' '\\u4800' .. '\\u4bfe'\n+    | '\\ud85c' '\\u4c00' .. '\\u4ffe'\n+    | '\\ud85d' '\\u5000' .. '\\u53fe'\n+    | '\\ud85e' '\\u5400' .. '\\u57fe'\n+    | '\\ud85f' '\\u5800' .. '\\u5bfe'\n+    | '\\ud860' '\\u5c00' .. '\\u5ffe'\n+    | '\\ud861' '\\u6000' .. '\\u63fe'\n+    | '\\ud862' '\\u6400' .. '\\u67fe'\n+    | '\\ud863' '\\u6800' .. '\\u6bfe'\n+    | '\\ud864' '\\u6c00' .. '\\u6ffe'\n+    | '\\ud865' '\\u7000' .. '\\u73fe'\n+    | '\\ud866' '\\u7400' .. '\\u77fe'\n+    | '\\ud867' '\\u7800' .. '\\u7bfe'\n+    | '\\ud868' '\\u7c00' .. '\\u7ffe'\n+    | '\\ud869' '\\u8000' .. '\\u82d5'\n+    | '\\ud87e' '\\ud400' .. '\\ud61c'\n     ;"}]}