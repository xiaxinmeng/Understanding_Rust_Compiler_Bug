{"sha": "11696acd6d070a90e8dd386a3c9ae877740fb0e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNjk2YWNkNmQwNzBhOTBlOGRkMzg2YTNjOWFlODc3NzQwZmIwZTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-26T02:13:45Z"}, "committer": {"name": "Bryan Drewery", "email": "bryan@shatow.net", "date": "2018-02-28T23:35:59Z"}, "message": "Support posix_spawn() when possible.", "tree": {"sha": "fac451ab1ffac7194a6969ed0a630f28f10bd6cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fac451ab1ffac7194a6969ed0a630f28f10bd6cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11696acd6d070a90e8dd386a3c9ae877740fb0e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11696acd6d070a90e8dd386a3c9ae877740fb0e2", "html_url": "https://github.com/rust-lang/rust/commit/11696acd6d070a90e8dd386a3c9ae877740fb0e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11696acd6d070a90e8dd386a3c9ae877740fb0e2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bdrewery", "id": 33693, "node_id": "MDQ6VXNlcjMzNjkz", "avatar_url": "https://avatars.githubusercontent.com/u/33693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdrewery", "html_url": "https://github.com/bdrewery", "followers_url": "https://api.github.com/users/bdrewery/followers", "following_url": "https://api.github.com/users/bdrewery/following{/other_user}", "gists_url": "https://api.github.com/users/bdrewery/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdrewery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdrewery/subscriptions", "organizations_url": "https://api.github.com/users/bdrewery/orgs", "repos_url": "https://api.github.com/users/bdrewery/repos", "events_url": "https://api.github.com/users/bdrewery/events{/privacy}", "received_events_url": "https://api.github.com/users/bdrewery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "518b3f7eeed94027673b55b6f459a22983ac542f", "url": "https://api.github.com/repos/rust-lang/rust/commits/518b3f7eeed94027673b55b6f459a22983ac542f", "html_url": "https://github.com/rust-lang/rust/commit/518b3f7eeed94027673b55b6f459a22983ac542f"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "d66c2375140c09b013ee1163f3b8c88cec9bec14", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/11696acd6d070a90e8dd386a3c9ae877740fb0e2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11696acd6d070a90e8dd386a3c9ae877740fb0e2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=11696acd6d070a90e8dd386a3c9ae877740fb0e2", "patch": "@@ -24,6 +24,7 @@ impl Command {\n                  -> io::Result<(Process, StdioPipes)> {\n         use sys;\n \n+\n         const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n \n         let envp = self.capture_env();\n@@ -34,6 +35,11 @@ impl Command {\n         }\n \n         let (ours, theirs) = self.setup_io(default, needs_stdin)?;\n+\n+        if let Some(ret) = self.posix_spawn(&theirs, envp.as_ref())? {\n+            return Ok((ret, ours))\n+        }\n+\n         let (input, output) = sys::pipe::anon_pipe()?;\n \n         let pid = unsafe {\n@@ -229,6 +235,102 @@ impl Command {\n         libc::execvp(self.get_argv()[0], self.get_argv().as_ptr());\n         io::Error::last_os_error()\n     }\n+\n+    #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]\n+    fn posix_spawn(&mut self, stdio: &ChildPipes, envp: Option<&CStringArray>)\n+        -> io::Result<Option<Process>>\n+    {\n+        Ok(None)\n+    }\n+\n+    #[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n+    fn posix_spawn(&mut self, stdio: &ChildPipes, envp: Option<&CStringArray>)\n+        -> io::Result<Option<Process>>\n+    {\n+        use mem;\n+        use sys;\n+\n+        if self.get_cwd().is_some() ||\n+            self.get_gid().is_some() ||\n+            self.get_uid().is_some() ||\n+            self.get_closures().len() != 0 {\n+            return Ok(None)\n+        }\n+\n+        let mut p = Process { pid: 0, status: None };\n+\n+        struct PosixSpawnFileActions(libc::posix_spawn_file_actions_t);\n+\n+        impl Drop for PosixSpawnFileActions {\n+            fn drop(&mut self) {\n+                unsafe {\n+                    libc::posix_spawn_file_actions_destroy(&mut self.0);\n+                }\n+            }\n+        }\n+\n+        struct PosixSpawnattr(libc::posix_spawnattr_t);\n+\n+        impl Drop for PosixSpawnattr {\n+            fn drop(&mut self) {\n+                unsafe {\n+                    libc::posix_spawnattr_destroy(&mut self.0);\n+                }\n+            }\n+        }\n+\n+        unsafe {\n+            let mut file_actions = PosixSpawnFileActions(mem::zeroed());\n+            let mut attrs = PosixSpawnattr(mem::zeroed());\n+\n+            libc::posix_spawnattr_init(&mut attrs.0);\n+            libc::posix_spawn_file_actions_init(&mut file_actions.0);\n+\n+            if let Some(fd) = stdio.stdin.fd() {\n+                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                                                           fd,\n+                                                           libc::STDIN_FILENO))?;\n+            }\n+            if let Some(fd) = stdio.stdout.fd() {\n+                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                                                           fd,\n+                                                           libc::STDOUT_FILENO))?;\n+            }\n+            if let Some(fd) = stdio.stderr.fd() {\n+                cvt(libc::posix_spawn_file_actions_adddup2(&mut file_actions.0,\n+                                                           fd,\n+                                                           libc::STDERR_FILENO))?;\n+            }\n+\n+            let mut set: libc::sigset_t = mem::zeroed();\n+            cvt(libc::sigemptyset(&mut set))?;\n+            cvt(libc::posix_spawnattr_setsigmask(&mut attrs.0,\n+                                                 &set))?;\n+            cvt(libc::sigaddset(&mut set, libc::SIGPIPE))?;\n+            cvt(libc::posix_spawnattr_setsigdefault(&mut attrs.0,\n+                                                    &set))?;\n+\n+            let flags = libc::POSIX_SPAWN_SETSIGDEF |\n+                libc::POSIX_SPAWN_SETSIGMASK;\n+            cvt(libc::posix_spawnattr_setflags(&mut attrs.0, flags as _))?;\n+\n+            let envp = envp.map(|c| c.as_ptr())\n+                .unwrap_or(sys::os::environ() as *const _);\n+            let ret = libc::posix_spawnp(\n+                &mut p.pid,\n+                self.get_argv()[0],\n+                &file_actions.0,\n+                &attrs.0,\n+                self.get_argv().as_ptr() as *const _,\n+                envp as *const _,\n+            );\n+            if ret == 0 {\n+                Ok(Some(p))\n+            } else {\n+                Err(io::Error::last_os_error())\n+            }\n+        }\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}]}