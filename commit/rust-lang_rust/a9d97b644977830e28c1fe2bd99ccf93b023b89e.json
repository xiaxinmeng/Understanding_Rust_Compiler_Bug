{"sha": "a9d97b644977830e28c1fe2bd99ccf93b023b89e", "node_id": "C_kwDOAAsO6NoAKGE5ZDk3YjY0NDk3NzgzMGUyOGMxZmUyYmQ5OWNjZjkzYjAyM2I4OWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T11:47:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T11:47:52Z"}, "message": "Auto merge of #14248 - XFFXFF:let_else_right_curly_brace, r=Veykril\n\nfix: show diagnostic for } token followed by else in let else statement\n\nfix #14221\n\nMy thinking is to check if the `expr` after `=` is block like when parse `let ... lese` , and if so, emit error.", "tree": {"sha": "d656afc3c3fffe9749cb7f7417ed8a6494226cea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d656afc3c3fffe9749cb7f7417ed8a6494226cea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d97b644977830e28c1fe2bd99ccf93b023b89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d97b644977830e28c1fe2bd99ccf93b023b89e", "html_url": "https://github.com/rust-lang/rust/commit/a9d97b644977830e28c1fe2bd99ccf93b023b89e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d97b644977830e28c1fe2bd99ccf93b023b89e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecc32c2f8517576b26060915bcb0cdb00cafd060", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc32c2f8517576b26060915bcb0cdb00cafd060", "html_url": "https://github.com/rust-lang/rust/commit/ecc32c2f8517576b26060915bcb0cdb00cafd060"}, {"sha": "6e97527eaeb77144b45de519372364c25ca40a69", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e97527eaeb77144b45de519372364c25ca40a69", "html_url": "https://github.com/rust-lang/rust/commit/6e97527eaeb77144b45de519372364c25ca40a69"}], "stats": {"total": 442, "additions": 430, "deletions": 12}, "files": [{"sha": "15435a26cea98c0b02c03159c982b8c5a6bc7b8d", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -198,6 +198,10 @@ impl BlockLike {\n     fn is_block(self) -> bool {\n         self == BlockLike::Block\n     }\n+\n+    fn is_blocklike(kind: SyntaxKind) -> bool {\n+        matches!(kind, BLOCK_EXPR | IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR)\n+    }\n }\n \n const VISIBILITY_FIRST: TokenSet = TokenSet::new(&[T![pub], T![crate]]);"}, {"sha": "c13a1943792c1e9a44064df3dabaa365fc3d0f33", "filename": "crates/parser/src/grammar/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -43,7 +43,7 @@ pub(super) fn meta(p: &mut Parser<'_>) {\n     match p.current() {\n         T![=] => {\n             p.bump(T![=]);\n-            if !expressions::expr(p) {\n+            if expressions::expr(p).is_none() {\n                 p.error(\"expected expression\");\n             }\n         }"}, {"sha": "a884d8b6ec801e3e89fb9349e11db7216617c468", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -16,9 +16,9 @@ pub(super) enum Semicolon {\n \n const EXPR_FIRST: TokenSet = LHS_FIRST;\n \n-pub(super) fn expr(p: &mut Parser<'_>) -> bool {\n+pub(super) fn expr(p: &mut Parser<'_>) -> Option<CompletedMarker> {\n     let r = Restrictions { forbid_structs: false, prefer_stmt: false };\n-    expr_bp(p, None, r, 1).is_some()\n+    expr_bp(p, None, r, 1).map(|(m, _)| m)\n }\n \n pub(super) fn expr_stmt(\n@@ -120,16 +120,27 @@ pub(super) fn stmt(p: &mut Parser<'_>, semicolon: Semicolon) {\n             // fn f() { let x: i32; }\n             types::ascription(p);\n         }\n+\n+        let mut expr_after_eq: Option<CompletedMarker> = None;\n         if p.eat(T![=]) {\n             // test let_stmt_init\n             // fn f() { let x = 92; }\n-            expressions::expr(p);\n+            expr_after_eq = expressions::expr(p);\n         }\n \n         if p.at(T![else]) {\n+            // test_err let_else_right_curly_brace\n+            // fn func() { let Some(_) = {Some(1)} else { panic!(\"h\") };}\n+            if let Some(expr) = expr_after_eq {\n+                if BlockLike::is_blocklike(expr.kind()) {\n+                    p.error(\n+                        \"right curly brace `}` before `else` in a `let...else` statement not allowed\",\n+                    )\n+                }\n+            }\n+\n             // test let_else\n             // fn f() { let Some(x) = opt else { return }; }\n-\n             let m = p.start();\n             p.bump(T![else]);\n             block_expr(p);\n@@ -578,7 +589,14 @@ fn arg_list(p: &mut Parser<'_>) {\n     // fn main() {\n     //     foo(#[attr] 92)\n     // }\n-    delimited(p, T!['('], T![')'], T![,], EXPR_FIRST.union(ATTRIBUTE_FIRST), expr);\n+    delimited(\n+        p,\n+        T!['('],\n+        T![')'],\n+        T![,],\n+        EXPR_FIRST.union(ATTRIBUTE_FIRST),\n+        |p: &mut Parser<'_>| expr(p).is_some(),\n+    );\n     m.complete(p, ARG_LIST);\n }\n "}, {"sha": "d051dd2682f942c6318dcaaaa633ad2b13e10d93", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -163,10 +163,8 @@ pub(super) fn atom_expr(\n             return None;\n         }\n     };\n-    let blocklike = match done.kind() {\n-        IF_EXPR | WHILE_EXPR | FOR_EXPR | LOOP_EXPR | MATCH_EXPR | BLOCK_EXPR => BlockLike::Block,\n-        _ => BlockLike::NotBlock,\n-    };\n+    let blocklike =\n+        if BlockLike::is_blocklike(done.kind()) { BlockLike::Block } else { BlockLike::NotBlock };\n     Some((done, blocklike))\n }\n \n@@ -188,7 +186,7 @@ fn tuple_expr(p: &mut Parser<'_>) -> CompletedMarker {\n \n         // test tuple_attrs\n         // const A: (i64, i64) = (1, #[cfg(test)] 2);\n-        if !expr(p) {\n+        if expr(p).is_none() {\n             break;\n         }\n \n@@ -221,7 +219,7 @@ fn array_expr(p: &mut Parser<'_>) -> CompletedMarker {\n \n         // test array_attrs\n         // const A: &[i64] = &[1, #[cfg(test)] 2];\n-        if !expr(p) {\n+        if expr(p).is_none() {\n             break;\n         }\n "}, {"sha": "026fecf4c9d53d04d18f4361e3703cace79e4d16", "filename": "crates/parser/test_data/parser/err/0049_let_else_right_curly_brace_for.rast", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0049_let_else_right_curly_brace_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0049_let_else_right_curly_brace_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0049_let_else_right_curly_brace_for.rast?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1,58 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"f\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          WILDCARD_PAT\n+            UNDERSCORE \"_\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          FOR_EXPR\n+            FOR_KW \"for\"\n+            WHITESPACE \" \"\n+            WILDCARD_PAT\n+              UNDERSCORE \"_\"\n+            WHITESPACE \" \"\n+            IN_KW \"in\"\n+            WHITESPACE \" \"\n+            RANGE_EXPR\n+              LITERAL\n+                INT_NUMBER \"0\"\n+              DOT2 \"..\"\n+              LITERAL\n+                INT_NUMBER \"10\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \"\\n    \"\n+                R_CURLY \"}\"\n+          WHITESPACE \" \"\n+          LET_ELSE\n+            ELSE_KW \"else\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \"\\n        \"\n+                RETURN_EXPR\n+                  RETURN_KW \"return\"\n+                WHITESPACE \"\\n    \"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+error 43: right curly brace `}` before `else` in a `let...else` statement not allowed"}, {"sha": "d410274198d1d492e0b4ffd8c23a2feb7b141957", "filename": "crates/parser/test_data/parser/err/0049_let_else_right_curly_brace_for.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0049_let_else_right_curly_brace_for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0049_let_else_right_curly_brace_for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0049_let_else_right_curly_brace_for.rs?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1,6 @@\n+fn f() {\n+    let _ = for _ in 0..10 {\n+    } else {\n+        return\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "102321954130d2d3c49a1bfe73fd75f73d9fcd97", "filename": "crates/parser/test_data/parser/err/0050_let_else_right_curly_brace_loop.rast", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0050_let_else_right_curly_brace_loop.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0050_let_else_right_curly_brace_loop.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0050_let_else_right_curly_brace_loop.rast?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1,46 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"f\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          WILDCARD_PAT\n+            UNDERSCORE \"_\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          LOOP_EXPR\n+            LOOP_KW \"loop\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \"\\n    \"\n+                R_CURLY \"}\"\n+          WHITESPACE \" \"\n+          LET_ELSE\n+            ELSE_KW \"else\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \"\\n        \"\n+                RETURN_EXPR\n+                  RETURN_KW \"return\"\n+                WHITESPACE \"\\n    \"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+error 33: right curly brace `}` before `else` in a `let...else` statement not allowed"}, {"sha": "28b892869a18e7692a27d647df288f83f0bd937e", "filename": "crates/parser/test_data/parser/err/0050_let_else_right_curly_brace_loop.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0050_let_else_right_curly_brace_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0050_let_else_right_curly_brace_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0050_let_else_right_curly_brace_loop.rs?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1,6 @@\n+fn f() {\n+    let _ = loop {\n+    } else {\n+        return\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "6e1181246c06381d2fbd715956324af493397e02", "filename": "crates/parser/test_data/parser/err/0051_let_else_right_curly_brace_match.rast", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0051_let_else_right_curly_brace_match.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0051_let_else_right_curly_brace_match.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0051_let_else_right_curly_brace_match.rast?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1,85 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"f\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          WILDCARD_PAT\n+            UNDERSCORE \"_\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          MATCH_EXPR\n+            MATCH_KW \"match\"\n+            WHITESPACE \" \"\n+            CALL_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"Some\"\n+              ARG_LIST\n+                L_PAREN \"(\"\n+                LITERAL\n+                  INT_NUMBER \"1\"\n+                R_PAREN \")\"\n+            WHITESPACE \" \"\n+            MATCH_ARM_LIST\n+              L_CURLY \"{\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                TUPLE_STRUCT_PAT\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Some\"\n+                  L_PAREN \"(\"\n+                  WILDCARD_PAT\n+                    UNDERSCORE \"_\"\n+                  R_PAREN \")\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                LITERAL\n+                  INT_NUMBER \"1\"\n+                COMMA \",\"\n+              WHITESPACE \"\\n        \"\n+              MATCH_ARM\n+                IDENT_PAT\n+                  NAME\n+                    IDENT \"None\"\n+                WHITESPACE \" \"\n+                FAT_ARROW \"=>\"\n+                WHITESPACE \" \"\n+                LITERAL\n+                  INT_NUMBER \"2\"\n+                COMMA \",\"\n+              WHITESPACE \"\\n    \"\n+              R_CURLY \"}\"\n+          WHITESPACE \" \"\n+          LET_ELSE\n+            ELSE_KW \"else\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \"\\n        \"\n+                RETURN_EXPR\n+                  RETURN_KW \"return\"\n+                WHITESPACE \"\\n    \"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+error 83: right curly brace `}` before `else` in a `let...else` statement not allowed"}, {"sha": "902d70daed52c2f362c2bae3f332f2d091a0638a", "filename": "crates/parser/test_data/parser/err/0051_let_else_right_curly_brace_match.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0051_let_else_right_curly_brace_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0051_let_else_right_curly_brace_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0051_let_else_right_curly_brace_match.rs?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1,8 @@\n+fn f() {\n+    let _ = match Some(1) {\n+        Some(_) => 1,\n+        None => 2,\n+    } else {\n+        return\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "298d47d5394b3b247b8beb7bbf3ab7f27087e2d9", "filename": "crates/parser/test_data/parser/err/0052_let_else_right_curly_brace_while.rast", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0052_let_else_right_curly_brace_while.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0052_let_else_right_curly_brace_while.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0052_let_else_right_curly_brace_while.rast?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1,49 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"f\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          WILDCARD_PAT\n+            UNDERSCORE \"_\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          WHILE_EXPR\n+            WHILE_KW \"while\"\n+            WHITESPACE \" \"\n+            LITERAL\n+              TRUE_KW \"true\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \"\\n    \"\n+                R_CURLY \"}\"\n+          WHITESPACE \" \"\n+          LET_ELSE\n+            ELSE_KW \"else\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \"\\n        \"\n+                RETURN_EXPR\n+                  RETURN_KW \"return\"\n+                WHITESPACE \"\\n    \"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+error 39: right curly brace `}` before `else` in a `let...else` statement not allowed"}, {"sha": "a52343d8e6f456a2311942df62df96744b6e795f", "filename": "crates/parser/test_data/parser/err/0052_let_else_right_curly_brace_while.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0052_let_else_right_curly_brace_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0052_let_else_right_curly_brace_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0052_let_else_right_curly_brace_while.rs?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1,6 @@\n+fn f() {\n+    let _ = while true {\n+    } else {\n+        return\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "c0a4b0400d89dd0663cd741063ec71053314fb97", "filename": "crates/parser/test_data/parser/err/0053_let_else_right_curly_brace_if.rast", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0053_let_else_right_curly_brace_if.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0053_let_else_right_curly_brace_if.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0053_let_else_right_curly_brace_if.rast?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1,57 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"f\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          WILDCARD_PAT\n+            UNDERSCORE \"_\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          IF_EXPR\n+            IF_KW \"if\"\n+            WHITESPACE \" \"\n+            LITERAL\n+              TRUE_KW \"true\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \"\\n    \"\n+                R_CURLY \"}\"\n+            WHITESPACE \" \"\n+            ELSE_KW \"else\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \"\\n    \"\n+                R_CURLY \"}\"\n+          WHITESPACE \" \"\n+          LET_ELSE\n+            ELSE_KW \"else\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \"\\n        \"\n+                RETURN_EXPR\n+                  RETURN_KW \"return\"\n+                WHITESPACE \"\\n    \"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+error 49: right curly brace `}` before `else` in a `let...else` statement not allowed"}, {"sha": "9a87aecbd4137e71106cb7f43495c54c2aa3337e", "filename": "crates/parser/test_data/parser/err/0053_let_else_right_curly_brace_if.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0053_let_else_right_curly_brace_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0053_let_else_right_curly_brace_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Ferr%2F0053_let_else_right_curly_brace_if.rs?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1,7 @@\n+fn f() {\n+    let _ = if true {\n+    } else {\n+    } else {\n+        return\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "6ec580212b4f5e6033434e7589875261f44457ae", "filename": "crates/parser/test_data/parser/inline/err/0017_let_else_right_curly_brace.rast", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rast?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1,69 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"func\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \" \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          TUPLE_STRUCT_PAT\n+            PATH\n+              PATH_SEGMENT\n+                NAME_REF\n+                  IDENT \"Some\"\n+            L_PAREN \"(\"\n+            WILDCARD_PAT\n+              UNDERSCORE \"_\"\n+            R_PAREN \")\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          BLOCK_EXPR\n+            STMT_LIST\n+              L_CURLY \"{\"\n+              CALL_EXPR\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"Some\"\n+                ARG_LIST\n+                  L_PAREN \"(\"\n+                  LITERAL\n+                    INT_NUMBER \"1\"\n+                  R_PAREN \")\"\n+              R_CURLY \"}\"\n+          WHITESPACE \" \"\n+          LET_ELSE\n+            ELSE_KW \"else\"\n+            WHITESPACE \" \"\n+            BLOCK_EXPR\n+              STMT_LIST\n+                L_CURLY \"{\"\n+                WHITESPACE \" \"\n+                MACRO_EXPR\n+                  MACRO_CALL\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"panic\"\n+                    BANG \"!\"\n+                    TOKEN_TREE\n+                      L_PAREN \"(\"\n+                      STRING \"\\\"h\\\"\"\n+                      R_PAREN \")\"\n+                WHITESPACE \" \"\n+                R_CURLY \"}\"\n+          SEMICOLON \";\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\"\n+error 35: right curly brace `}` before `else` in a `let...else` statement not allowed"}, {"sha": "30d52fea3b28385a780245ebe52b750d875463ca", "filename": "crates/parser/test_data/parser/inline/err/0017_let_else_right_curly_brace.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d97b644977830e28c1fe2bd99ccf93b023b89e/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Ferr%2F0017_let_else_right_curly_brace.rs?ref=a9d97b644977830e28c1fe2bd99ccf93b023b89e", "patch": "@@ -0,0 +1 @@\n+fn func() { let Some(_) = {Some(1)} else { panic!(\"h\") };}"}]}