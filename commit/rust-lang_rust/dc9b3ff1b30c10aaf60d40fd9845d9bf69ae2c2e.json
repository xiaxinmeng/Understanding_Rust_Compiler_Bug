{"sha": "dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOWIzZmYxYjMwYzEwYWFmNjBkNDBmZDk4NDVkOWJmNjlhZTJjMmU=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-07-03T01:40:46Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-07-05T08:56:48Z"}, "message": "Change signature of Iterator.size_hint\n\nRemove the Option wrapper around the lower bound. None is semantically\nthe same as Size(0), so there's no point in having a distinction.", "tree": {"sha": "2675e04d6302d3bdf135169bbf83e44ee0e48951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2675e04d6302d3bdf135169bbf83e44ee0e48951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e", "html_url": "https://github.com/rust-lang/rust/commit/dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e89dcb887b99dc8c04d2863e906a4b2705959159", "url": "https://api.github.com/repos/rust-lang/rust/commits/e89dcb887b99dc8c04d2863e906a4b2705959159", "html_url": "https://github.com/rust-lang/rust/commit/e89dcb887b99dc8c04d2863e906a4b2705959159"}], "stats": {"total": 55, "additions": 25, "deletions": 30}, "files": [{"sha": "3ce645e012b791373349a717afd10f00d88bfe96", "filename": "src/librustc/util/enum_set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e/src%2Flibrustc%2Futil%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e/src%2Flibrustc%2Futil%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fenum_set.rs?ref=dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e", "patch": "@@ -125,9 +125,9 @@ impl<E:CLike> Iterator<E> for EnumSetIterator<E> {\n         Some(elem)\n     }\n \n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n-        let exact = Some(self.bits.population_count());\n-        (exact, exact)\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let exact = self.bits.population_count();\n+        (exact, Some(exact))\n     }\n }\n "}, {"sha": "46d449e4dfb862e4d2bf228a68ceb2bb5700d86a", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e", "patch": "@@ -43,7 +43,7 @@ pub trait Iterator<A> {\n     /// Return a lower bound and upper bound on the remaining length of the iterator.\n     ///\n     /// The common use case for the estimate is pre-allocating space to store the results.\n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) { (None, None) }\n+    fn size_hint(&self) -> (uint, Option<uint>) { (0, None) }\n }\n \n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n@@ -684,16 +684,11 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for ChainIterator<A, T, U> {\n     }\n \n     #[inline]\n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n         let (a_lower, a_upper) = self.a.size_hint();\n         let (b_lower, b_upper) = self.b.size_hint();\n \n-        let lower = match (a_lower, b_lower) {\n-            (Some(x), Some(y)) => Some(x + y),\n-            (Some(x), None) => Some(x),\n-            (None, Some(y)) => Some(y),\n-            (None, None) => None\n-        };\n+        let lower = a_lower + b_lower;\n \n         let upper = match (a_upper, b_upper) {\n             (Some(x), Some(y)) => Some(x + y),\n@@ -737,7 +732,7 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for MapIterator<'self, A, B, T> {\n     }\n \n     #[inline]\n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n         self.iter.size_hint()\n     }\n }\n@@ -762,9 +757,9 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for FilterIterator<'self, A, T> {\n     }\n \n     #[inline]\n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n         let (_, upper) = self.iter.size_hint();\n-        (None, upper) // can't know a lower bound, due to the predicate\n+        (0, upper) // can't know a lower bound, due to the predicate\n     }\n }\n \n@@ -787,9 +782,9 @@ impl<'self, A, B, T: Iterator<A>> Iterator<B> for FilterMapIterator<'self, A, B,\n     }\n \n     #[inline]\n-    fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n         let (_, upper) = self.iter.size_hint();\n-        (None, upper) // can't know a lower bound, due to the predicate\n+        (0, upper) // can't know a lower bound, due to the predicate\n     }\n }\n "}, {"sha": "7244a9a7aac54fe4ac0ffa5d49832b07a85abeb1", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=dc9b3ff1b30c10aaf60d40fd9845d9bf69ae2c2e", "patch": "@@ -2024,14 +2024,14 @@ macro_rules! iterator {\n             }\n \n             #[inline]\n-            fn size_hint(&self) -> (Option<uint>, Option<uint>) {\n+            fn size_hint(&self) -> (uint, Option<uint>) {\n                 let diff = if $step > 0 {\n                     (self.end as uint) - (self.ptr as uint)\n                 } else {\n                     (self.ptr as uint) - (self.end as uint)\n                 };\n-                let exact = Some(diff / size_of::<$elem>());\n-                (exact, exact)\n+                let exact = diff / size_of::<$elem>();\n+                (exact, Some(exact))\n             }\n         }\n     }\n@@ -2132,7 +2132,7 @@ impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n     pub fn from_iterator(iterator: &mut T) -> ~[A] {\n         let (lower, _) = iterator.size_hint();\n-        let mut xs = with_capacity(lower.get_or_zero());\n+        let mut xs = with_capacity(lower);\n         for iterator.advance |x| {\n             xs.push(x);\n         }\n@@ -2968,28 +2968,28 @@ mod tests {\n         use iterator::*;\n         let xs = [1, 2, 5, 10, 11];\n         let mut it = xs.iter();\n-        assert_eq!(it.size_hint(), (Some(5), Some(5)));\n+        assert_eq!(it.size_hint(), (5, Some(5)));\n         assert_eq!(it.next().unwrap(), &1);\n-        assert_eq!(it.size_hint(), (Some(4), Some(4)));\n+        assert_eq!(it.size_hint(), (4, Some(4)));\n         assert_eq!(it.next().unwrap(), &2);\n-        assert_eq!(it.size_hint(), (Some(3), Some(3)));\n+        assert_eq!(it.size_hint(), (3, Some(3)));\n         assert_eq!(it.next().unwrap(), &5);\n-        assert_eq!(it.size_hint(), (Some(2), Some(2)));\n+        assert_eq!(it.size_hint(), (2, Some(2)));\n         assert_eq!(it.next().unwrap(), &10);\n-        assert_eq!(it.size_hint(), (Some(1), Some(1)));\n+        assert_eq!(it.size_hint(), (1, Some(1)));\n         assert_eq!(it.next().unwrap(), &11);\n-        assert_eq!(it.size_hint(), (Some(0), Some(0)));\n+        assert_eq!(it.size_hint(), (0, Some(0)));\n         assert!(it.next().is_none());\n     }\n \n     #[test]\n     fn test_iter_size_hints() {\n         use iterator::*;\n         let mut xs = [1, 2, 5, 10, 11];\n-        assert_eq!(xs.iter().size_hint(), (Some(5), Some(5)));\n-        assert_eq!(xs.rev_iter().size_hint(), (Some(5), Some(5)));\n-        assert_eq!(xs.mut_iter().size_hint(), (Some(5), Some(5)));\n-        assert_eq!(xs.mut_rev_iter().size_hint(), (Some(5), Some(5)));\n+        assert_eq!(xs.iter().size_hint(), (5, Some(5)));\n+        assert_eq!(xs.rev_iter().size_hint(), (5, Some(5)));\n+        assert_eq!(xs.mut_iter().size_hint(), (5, Some(5)));\n+        assert_eq!(xs.mut_rev_iter().size_hint(), (5, Some(5)));\n     }\n \n     #[test]"}]}