{"sha": "f8447b963893b410f1dbce2cd752a898dc3ed8d4", "node_id": "C_kwDOAAsO6NoAKGY4NDQ3Yjk2Mzg5M2I0MTBmMWRiY2UyY2Q3NTJhODk4ZGMzZWQ4ZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-29T00:25:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-29T00:25:54Z"}, "message": "Auto merge of #111963 - nnethercote:inline-derived-hash, r=lqd\n\nInline derived `hash`\n\nBecause most of the other derived functions are inlined: `clone`, `default`, `eq`, `partial_cmp`, `cmp`. The exception is `fmt`, but it tends to not be on hot paths as much.\n\nr? `@ghost`", "tree": {"sha": "59c5edf918d715d74bd4475891a945bc2b3be048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59c5edf918d715d74bd4475891a945bc2b3be048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8447b963893b410f1dbce2cd752a898dc3ed8d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8447b963893b410f1dbce2cd752a898dc3ed8d4", "html_url": "https://github.com/rust-lang/rust/commit/f8447b963893b410f1dbce2cd752a898dc3ed8d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8447b963893b410f1dbce2cd752a898dc3ed8d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089677eb32af83318467325edbef9b64053df532", "url": "https://api.github.com/repos/rust-lang/rust/commits/089677eb32af83318467325edbef9b64053df532", "html_url": "https://github.com/rust-lang/rust/commit/089677eb32af83318467325edbef9b64053df532"}, {"sha": "ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee013d83c3c8e1271216e92e932a54b4f6e95a7e", "html_url": "https://github.com/rust-lang/rust/commit/ee013d83c3c8e1271216e92e932a54b4f6e95a7e"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "9ba98d0a5d187a9d4a35b0ea49b6d35c28cfa1c9", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=f8447b963893b410f1dbce2cd752a898dc3ed8d4", "patch": "@@ -68,7 +68,6 @@ pub fn expand_deriving_clone(\n         _ => cx.span_bug(span, \"`#[derive(Clone)]` on trait item or impl item\"),\n     }\n \n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(clone::Clone),\n@@ -82,7 +81,7 @@ pub fn expand_deriving_clone(\n             explicit_self: true,\n             nonself_args: Vec::new(),\n             ret_ty: Self_,\n-            attributes: attrs,\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Default,\n             combine_substructure: substructure,\n         }],"}, {"sha": "c78a0eb04a074c2d73b66d351ed0640c1406dba4", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=f8447b963893b410f1dbce2cd752a898dc3ed8d4", "patch": "@@ -18,11 +18,6 @@ pub fn expand_deriving_eq(\n     is_const: bool,\n ) {\n     let span = cx.with_def_site_ctxt(span);\n-    let attrs = thin_vec![\n-        cx.attr_word(sym::inline, span),\n-        cx.attr_nested_word(sym::doc, sym::hidden, span),\n-        cx.attr_word(sym::no_coverage, span)\n-    ];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Eq),\n@@ -36,7 +31,11 @@ pub fn expand_deriving_eq(\n             explicit_self: true,\n             nonself_args: vec![],\n             ret_ty: Unit,\n-            attributes: attrs,\n+            attributes: thin_vec![\n+                cx.attr_word(sym::inline, span),\n+                cx.attr_nested_word(sym::doc, sym::hidden, span),\n+                cx.attr_word(sym::no_coverage, span)\n+            ],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 cs_total_eq_assert(a, b, c)"}, {"sha": "4401cf8a9c5650f0768792a3a4167224cbd9701b", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=f8447b963893b410f1dbce2cd752a898dc3ed8d4", "patch": "@@ -15,7 +15,6 @@ pub fn expand_deriving_ord(\n     push: &mut dyn FnMut(Annotatable),\n     is_const: bool,\n ) {\n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Ord),\n@@ -29,7 +28,7 @@ pub fn expand_deriving_ord(\n             explicit_self: true,\n             nonself_args: vec![(self_ref(), sym::other)],\n             ret_ty: Path(path_std!(cmp::Ordering)),\n-            attributes: attrs,\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| cs_cmp(a, b, c))),\n         }],"}, {"sha": "a71ecc5db7d97def9041cb8d59622d4b6c5589ff", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=f8447b963893b410f1dbce2cd752a898dc3ed8d4", "patch": "@@ -82,14 +82,13 @@ pub fn expand_deriving_partial_eq(\n \n     // No need to generate `ne`, the default suffices, and not generating it is\n     // faster.\n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let methods = vec![MethodDef {\n         name: sym::eq,\n         generics: Bounds::empty(),\n         explicit_self: true,\n         nonself_args: vec![(self_ref(), sym::other)],\n         ret_ty: Path(path_local!(bool)),\n-        attributes: attrs,\n+        attributes: thin_vec![cx.attr_word(sym::inline, span)],\n         fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n         combine_substructure: combine_substructure(Box::new(|a, b, c| cs_eq(a, b, c))),\n     }];"}, {"sha": "54b6cb7d71301f97c16370fcf880d2176bf1e5c5", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=f8447b963893b410f1dbce2cd752a898dc3ed8d4", "patch": "@@ -19,8 +19,6 @@ pub fn expand_deriving_partial_ord(\n     let ret_ty =\n         Path(Path::new_(pathvec_std!(option::Option), vec![Box::new(ordering_ty)], PathKind::Std));\n \n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n-\n     // Order in which to perform matching\n     let tag_then_data = if let Annotatable::Item(item) = item\n         && let ItemKind::Enum(def, _) = &item.kind {\n@@ -48,7 +46,7 @@ pub fn expand_deriving_partial_ord(\n         explicit_self: true,\n         nonself_args: vec![(self_ref(), sym::other)],\n         ret_ty,\n-        attributes: attrs,\n+        attributes: thin_vec![cx.attr_word(sym::inline, span)],\n         fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n         combine_substructure: combine_substructure(Box::new(|cx, span, substr| {\n             cs_partial_cmp(cx, span, substr, tag_then_data)"}, {"sha": "07b172bc757b2ae7f26e6c026431caaa9c97da89", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=f8447b963893b410f1dbce2cd752a898dc3ed8d4", "patch": "@@ -20,7 +20,6 @@ pub fn expand_deriving_default(\n ) {\n     item.visit_with(&mut DetectNonVariantDefaultAttr { cx });\n \n-    let attrs = thin_vec![cx.attr_word(sym::inline, span)];\n     let trait_def = TraitDef {\n         span,\n         path: Path::new(vec![kw::Default, sym::Default]),\n@@ -34,7 +33,7 @@ pub fn expand_deriving_default(\n             explicit_self: false,\n             nonself_args: Vec::new(),\n             ret_ty: Self_,\n-            attributes: attrs,\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Default,\n             combine_substructure: combine_substructure(Box::new(|cx, trait_span, substr| {\n                 match substr.fields {"}, {"sha": "101401f9c85b7929c9582086fc8e5b62e515f74b", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8447b963893b410f1dbce2cd752a898dc3ed8d4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=f8447b963893b410f1dbce2cd752a898dc3ed8d4", "patch": "@@ -1,7 +1,7 @@\n use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::{path_std, pathvec_std};\n-use rustc_ast::{AttrVec, MetaItem, Mutability};\n+use rustc_ast::{MetaItem, Mutability};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -33,7 +33,7 @@ pub fn expand_deriving_hash(\n             explicit_self: true,\n             nonself_args: vec![(Ref(Box::new(Path(arg)), Mutability::Mut), sym::state)],\n             ret_ty: Unit,\n-            attributes: AttrVec::new(),\n+            attributes: thin_vec![cx.attr_word(sym::inline, span)],\n             fieldless_variants_strategy: FieldlessVariantsStrategy::Unify,\n             combine_substructure: combine_substructure(Box::new(|a, b, c| {\n                 hash_substructure(a, b, c)"}, {"sha": "d6a2c80cc06b6f4b93bc3aa05be88f8147177ed5", "filename": "tests/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8447b963893b410f1dbce2cd752a898dc3ed8d4/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f8447b963893b410f1dbce2cd752a898dc3ed8d4/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=f8447b963893b410f1dbce2cd752a898dc3ed8d4", "patch": "@@ -44,6 +44,7 @@ impl ::core::default::Default for Empty {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Empty {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {}\n }\n #[automatically_derived]\n@@ -113,6 +114,7 @@ impl ::core::default::Default for Point {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Point {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.x, state);\n         ::core::hash::Hash::hash(&self.y, state)\n@@ -198,6 +200,7 @@ impl ::core::default::Default for PackedPoint {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for PackedPoint {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&{ self.x }, state);\n         ::core::hash::Hash::hash(&{ self.y }, state)\n@@ -301,6 +304,7 @@ impl ::core::default::Default for Big {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Big {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.b1, state);\n         ::core::hash::Hash::hash(&self.b2, state);\n@@ -478,6 +482,7 @@ impl ::core::fmt::Debug for Unsized {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Unsized {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.0, state)\n     }\n@@ -529,6 +534,7 @@ impl ::core::fmt::Debug for PackedUnsizedU8 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for PackedUnsizedU8 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.0, state)\n     }\n@@ -584,6 +590,7 @@ impl<T: ::core::default::Default + Trait, U: ::core::default::Default>\n #[automatically_derived]\n impl<T: ::core::hash::Hash + Trait, U: ::core::hash::Hash> ::core::hash::Hash\n     for Generic<T, U> where T::A: ::core::hash::Hash {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&self.t, state);\n         ::core::hash::Hash::hash(&self.ta, state);\n@@ -701,6 +708,7 @@ impl<T: ::core::hash::Hash + ::core::marker::Copy + Trait,\n     U: ::core::hash::Hash + ::core::marker::Copy> ::core::hash::Hash for\n     PackedGeneric<T, U> where T::A: ::core::hash::Hash + ::core::marker::Copy\n     {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         ::core::hash::Hash::hash(&{ self.0 }, state);\n         ::core::hash::Hash::hash(&{ self.1 }, state);\n@@ -795,6 +803,7 @@ impl ::core::fmt::Debug for Enum0 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Enum0 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         unsafe { ::core::intrinsics::unreachable() }\n     }\n@@ -861,6 +870,7 @@ impl ::core::fmt::Debug for Enum1 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Enum1 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         match self {\n             Enum1::Single { x: __self_0 } =>\n@@ -937,6 +947,7 @@ impl ::core::default::Default for Fieldless1 {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Fieldless1 {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {}\n }\n #[automatically_derived]\n@@ -1004,6 +1015,7 @@ impl ::core::default::Default for Fieldless {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Fieldless {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state)\n@@ -1095,6 +1107,7 @@ impl ::core::default::Default for Mixed {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Mixed {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state);\n@@ -1224,6 +1237,7 @@ impl ::core::fmt::Debug for Fielded {\n }\n #[automatically_derived]\n impl ::core::hash::Hash for Fielded {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state);\n@@ -1345,6 +1359,7 @@ impl<T: ::core::fmt::Debug, U: ::core::fmt::Debug> ::core::fmt::Debug for\n #[automatically_derived]\n impl<T: ::core::hash::Hash, U: ::core::hash::Hash> ::core::hash::Hash for\n     EnumGeneric<T, U> {\n+    #[inline]\n     fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n         let __self_tag = ::core::intrinsics::discriminant_value(self);\n         ::core::hash::Hash::hash(&__self_tag, state);"}]}