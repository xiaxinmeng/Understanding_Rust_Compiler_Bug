{"sha": "b60cf0c5b0cf36625083c2624df9fb35d0af3578", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MGNmMGM1YjBjZjM2NjI1MDgzYzI2MjRkZjlmYjM1ZDBhZjM1Nzg=", "commit": {"author": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-07-03T00:27:46Z"}, "committer": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-07-03T00:27:46Z"}, "message": "converted TODOs into XXXs", "tree": {"sha": "f5132536626eebead6e08f25702d8f26cac148d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5132536626eebead6e08f25702d8f26cac148d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60cf0c5b0cf36625083c2624df9fb35d0af3578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60cf0c5b0cf36625083c2624df9fb35d0af3578", "html_url": "https://github.com/rust-lang/rust/commit/b60cf0c5b0cf36625083c2624df9fb35d0af3578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60cf0c5b0cf36625083c2624df9fb35d0af3578/comments", "author": null, "committer": null, "parents": [{"sha": "6a1a7819c9cb15e280681c547548ff8d47412f04", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a1a7819c9cb15e280681c547548ff8d47412f04", "html_url": "https://github.com/rust-lang/rust/commit/6a1a7819c9cb15e280681c547548ff8d47412f04"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "6bf352ee1447f94a65aa88aca71af961a8a1990b", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b60cf0c5b0cf36625083c2624df9fb35d0af3578/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60cf0c5b0cf36625083c2624df9fb35d0af3578/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=b60cf0c5b0cf36625083c2624df9fb35d0af3578", "patch": "@@ -23,7 +23,6 @@ pub type IoFactoryObject = uvio::UvIoFactory;\n pub type RtioTcpStreamObject = uvio::UvTcpStream;\n pub type RtioTcpListenerObject = uvio::UvTcpListener;\n pub type RtioUdpSocketObject = uvio::UvUdpSocket;\n-pub type RtioTcpSocketObject = (); // TODO\n \n pub trait EventLoop {\n     fn run(&mut self);"}, {"sha": "e9bbe3bb6fb9a06b507df7ab87e4774540f8b101", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b60cf0c5b0cf36625083c2624df9fb35d0af3578/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60cf0c5b0cf36625083c2624df9fb35d0af3578/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=b60cf0c5b0cf36625083c2624df9fb35d0af3578", "patch": "@@ -316,7 +316,7 @@ impl Drop for UvTcpListener {\n }\n \n impl RtioSocket for UvTcpListener {\n-    // TODO\n+    // XXX implement\n     fn socket_name(&self) -> IpAddr { fail!(); }\n }\n \n@@ -356,7 +356,7 @@ impl RtioTcpListener for UvTcpListener {\n         return self.incoming_streams.recv();\n     }\n \n-    // TODO\n+    // XXX implement\n     fn accept_simultaneously(&self) { fail!(); }\n     fn dont_accept_simultaneously(&self) { fail!(); }\n }\n@@ -379,7 +379,7 @@ impl Drop for UvTcpStream {\n }\n \n impl RtioSocket for UvTcpStream {\n-    // TODO\n+    // XXX implement\n     fn socket_name(&self) -> IpAddr { fail!(); }\n }\n \n@@ -455,7 +455,7 @@ impl RtioTcpStream for UvTcpStream {\n         return result_cell.take();\n     }\n \n-    // TODO\n+    // XXX implement\n     fn peer_name(&self) -> IpAddr { fail!(); }\n     fn control_congestion(&self) { fail!(); }\n     fn nodelay(&self) { fail!(); }\n@@ -480,7 +480,7 @@ impl Drop for UvUdpSocket {\n }\n \n impl RtioSocket for UvUdpSocket {\n-    // TODO\n+    // XXX implement\n     fn socket_name(&self) -> IpAddr { fail!(); }\n }\n \n@@ -498,7 +498,7 @@ impl RtioUdpSocket for UvUdpSocket {\n             let task_cell = Cell::new(task);\n             let alloc: AllocCallback = |_| unsafe { slice_to_uv_buf(*buf_ptr) };\n             do self.recv_start(alloc) |watcher, nread, _buf, addr, flags, status| {\n-                let _ = flags; // TODO add handling for partials?\n+                let _ = flags; // XXX add handling for partials?\n \n                 watcher.recv_stop();\n \n@@ -548,7 +548,7 @@ impl RtioUdpSocket for UvUdpSocket {\n         return result_cell.take();\n     }\n \n-    // TODO\n+    // XXX implement\n     fn join_multicast(&self, _multi: IpAddr) { fail!(); }\n     fn leave_multicast(&self, _multi: IpAddr) { fail!(); }\n "}]}