{"sha": "d067afb064a7fa67b172abf561b7d80740cd6f18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNjdhZmIwNjRhN2ZhNjdiMTcyYWJmNTYxYjdkODA3NDBjZDZmMTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-31T08:24:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-31T08:24:03Z"}, "message": "Merge #2141\n\n2141: add ModuleDefId to hir_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ddf0901cdf3aa454d6bfce3fa142191c22563494", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddf0901cdf3aa454d6bfce3fa142191c22563494"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d067afb064a7fa67b172abf561b7d80740cd6f18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdupojCRBK7hj4Ov3rIwAAdHIIAJc3+m5ehag344PcDcnKehmy\nb11cchQhgaca9VPDRDOqvENuBS3CYLXQKVsX8bNqH3Za7D6E9VAHefmAeyx3XyLJ\nLqFSkVSHCGYXkj7squMo722UHjdsDIJAl/wSDjAzAciJlaOH/PtbFkqL2hN+cuD1\n5BLPp2Xk+jGp6zipjRpu9BNejzsNSE4DwAkEu+5Zl0v/MLOaneOROuSrC+qNHd6q\nUKoMtEs4OkVK/3i9Ixxd+YRtVPJGViHzpCnU0ADMP+vw68H5te0VVGhAuTKIUTac\njsJcjp7D9tRaDgnJi6MjQFP/i1iVyD2oSTSNtB50/JC4MCzlUoOvmJawfC606t0=\n=oGk2\n-----END PGP SIGNATURE-----\n", "payload": "tree ddf0901cdf3aa454d6bfce3fa142191c22563494\nparent 7973c91281837bbb5c5a0bf3b1c71a5b52654b20\nparent 1602db7d7d6aa38b4ee50de8cbe734529853d615\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572510243 +0000\ncommitter GitHub <noreply@github.com> 1572510243 +0000\n\nMerge #2141\n\n2141: add ModuleDefId to hir_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d067afb064a7fa67b172abf561b7d80740cd6f18", "html_url": "https://github.com/rust-lang/rust/commit/d067afb064a7fa67b172abf561b7d80740cd6f18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d067afb064a7fa67b172abf561b7d80740cd6f18/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "url": "https://api.github.com/repos/rust-lang/rust/commits/7973c91281837bbb5c5a0bf3b1c71a5b52654b20", "html_url": "https://github.com/rust-lang/rust/commit/7973c91281837bbb5c5a0bf3b1c71a5b52654b20"}, {"sha": "1602db7d7d6aa38b4ee50de8cbe734529853d615", "url": "https://api.github.com/repos/rust-lang/rust/commits/1602db7d7d6aa38b4ee50de8cbe734529853d615", "html_url": "https://github.com/rust-lang/rust/commit/1602db7d7d6aa38b4ee50de8cbe734529853d615"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "4fa2062bdba16ab5e627ccc0c68e8c1ec7ce65c7", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d067afb064a7fa67b172abf561b7d80740cd6f18/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d067afb064a7fa67b172abf561b7d80740cd6f18/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=d067afb064a7fa67b172abf561b7d80740cd6f18", "patch": "@@ -3,7 +3,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::type_ref::TypeRef;\n+use hir_def::{type_ref::TypeRef, LocalEnumVariantId};\n use hir_expand::name::AsName;\n use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_syntax::ast::{self, NameOwner, StructKind, TypeAscriptionOwner};\n@@ -68,7 +68,7 @@ impl EnumVariant {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n     pub(crate) name: Option<Name>,\n-    pub(crate) variants: Arena<EnumVariantId, EnumVariantData>,\n+    pub(crate) variants: Arena<LocalEnumVariantId, EnumVariantData>,\n }\n \n impl EnumData {\n@@ -85,10 +85,6 @@ impl EnumData {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct EnumVariantId(RawId);\n-impl_arena_id!(EnumVariantId);\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub(crate) struct EnumVariantData {\n     pub(crate) name: Option<Name>,"}, {"sha": "b32aa145ea8b867884993e59947cd7c0d8820c8c", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d067afb064a7fa67b172abf561b7d80740cd6f18/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d067afb064a7fa67b172abf561b7d80740cd6f18/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=d067afb064a7fa67b172abf561b7d80740cd6f18", "patch": "@@ -8,14 +8,14 @@ use std::sync::Arc;\n use hir_def::{\n     builtin_type::BuiltinType,\n     type_ref::{Mutability, TypeRef},\n-    CrateModuleId, ModuleId,\n+    CrateModuleId, LocalEnumVariantId, ModuleId,\n };\n use hir_expand::name::{self, AsName};\n use ra_db::{CrateId, Edition};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n-    adt::{EnumVariantId, StructFieldId, VariantDef},\n+    adt::{StructFieldId, VariantDef},\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     diagnostics::DiagnosticSink,\n     expr::{validation::ExprValidator, Body, BodySourceMap},\n@@ -410,7 +410,7 @@ impl Enum {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumVariant {\n     pub(crate) parent: Enum,\n-    pub(crate) id: EnumVariantId,\n+    pub(crate) id: LocalEnumVariantId,\n }\n \n impl EnumVariant {"}, {"sha": "93ad40005c7f1df25f198bd84ab0dd5a5e8f8356", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d067afb064a7fa67b172abf561b7d80740cd6f18/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d067afb064a7fa67b172abf561b7d80740cd6f18/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=d067afb064a7fa67b172abf561b7d80740cd6f18", "patch": "@@ -23,7 +23,7 @@ use ra_arena::{impl_arena_id, RawId};\n use ra_db::{salsa, CrateId, FileId};\n use ra_syntax::{ast, AstNode, SyntaxNode};\n \n-use crate::db::InternDatabase;\n+use crate::{builtin_type::BuiltinType, db::InternDatabase};\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub struct Source<T> {\n@@ -256,7 +256,7 @@ pub struct EnumVariantId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct LocalEnumVariantId(RawId);\n+pub struct LocalEnumVariantId(RawId);\n impl_arena_id!(LocalEnumVariantId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -306,3 +306,57 @@ impl AstItemDef<ast::TypeAliasDef> for TypeAliasId {\n         db.lookup_intern_type_alias(self)\n     }\n }\n+\n+macro_rules! impl_froms {\n+    ($e:ident: $($v:ident $(($($sv:ident),*))?),*) => {\n+        $(\n+            impl From<$v> for $e {\n+                fn from(it: $v) -> $e {\n+                    $e::$v(it)\n+                }\n+            }\n+            $($(\n+                impl From<$sv> for $e {\n+                    fn from(it: $sv) -> $e {\n+                        $e::$v($v::$sv(it))\n+                    }\n+                }\n+            )*)?\n+        )*\n+    }\n+}\n+\n+/// A Data Type\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum AdtId {\n+    StructId(StructId),\n+    UnionId(UnionId),\n+    EnumId(EnumId),\n+}\n+impl_froms!(AdtId: StructId, UnionId, EnumId);\n+\n+/// The defs which can be visible in the module.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum ModuleDefId {\n+    ModuleId(ModuleId),\n+    FunctionId(FunctionId),\n+    AdtId(AdtId),\n+    // Can't be directly declared, but can be imported.\n+    EnumVariantId(EnumVariantId),\n+    ConstId(ConstId),\n+    StaticId(StaticId),\n+    TraitId(TraitId),\n+    TypeAliasId(TypeAliasId),\n+    BuiltinType(BuiltinType),\n+}\n+impl_froms!(\n+    ModuleDefId: ModuleId,\n+    FunctionId,\n+    AdtId(StructId, EnumId, UnionId),\n+    EnumVariantId,\n+    ConstId,\n+    StaticId,\n+    TraitId,\n+    TypeAliasId,\n+    BuiltinType\n+);"}]}