{"sha": "a1cff1cd4990a4ee8c5df8d7c71c05a0bcd60dec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExY2ZmMWNkNDk5MGE0ZWU4YzVkZjhkN2M3MWMwNWEwYmNkNjBkZWM=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-08-01T12:09:22Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-08-02T17:09:37Z"}, "message": "Small refactorings for miri.", "tree": {"sha": "3e4740c115c8138cb94916e422aab81ee3233b1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e4740c115c8138cb94916e422aab81ee3233b1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1cff1cd4990a4ee8c5df8d7c71c05a0bcd60dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1cff1cd4990a4ee8c5df8d7c71c05a0bcd60dec", "html_url": "https://github.com/rust-lang/rust/commit/a1cff1cd4990a4ee8c5df8d7c71c05a0bcd60dec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1cff1cd4990a4ee8c5df8d7c71c05a0bcd60dec/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ed62531324cd4660deb7faff58e6c17b93b487", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ed62531324cd4660deb7faff58e6c17b93b487", "html_url": "https://github.com/rust-lang/rust/commit/63ed62531324cd4660deb7faff58e6c17b93b487"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "d5bc2b1e2eacb86318f983aad25f6cc49166386d", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1cff1cd4990a4ee8c5df8d7c71c05a0bcd60dec/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cff1cd4990a4ee8c5df8d7c71c05a0bcd60dec/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=a1cff1cd4990a4ee8c5df8d7c71c05a0bcd60dec", "patch": "@@ -63,15 +63,19 @@ impl<'tcx, Tag: Provenance> Immediate<Tag> {\n         Immediate::ScalarPair(val.into(), Scalar::from_machine_usize(len, cx).into())\n     }\n \n-    pub fn new_dyn_trait(val: Scalar<Tag>, vtable: Pointer<Tag>, cx: &impl HasDataLayout) -> Self {\n-        Immediate::ScalarPair(val.into(), ScalarMaybeUninit::from_pointer(vtable, cx))\n+    pub fn new_dyn_trait(\n+        val: Scalar<Tag>,\n+        vtable: Pointer<Option<Tag>>,\n+        cx: &impl HasDataLayout,\n+    ) -> Self {\n+        Immediate::ScalarPair(val.into(), ScalarMaybeUninit::from_maybe_pointer(vtable, cx))\n     }\n \n     #[inline]\n     pub fn to_scalar_or_uninit(self) -> ScalarMaybeUninit<Tag> {\n         match self {\n             Immediate::Scalar(val) => val,\n-            Immediate::ScalarPair(..) => bug!(\"Got a wide pointer where a scalar was expected\"),\n+            Immediate::ScalarPair(..) => bug!(\"Got a scalar pair where a scalar was expected\"),\n         }\n     }\n \n@@ -85,7 +89,7 @@ impl<'tcx, Tag: Provenance> Immediate<Tag> {\n         match self {\n             Immediate::ScalarPair(val1, val2) => Ok((val1.check_init()?, val2.check_init()?)),\n             Immediate::Scalar(..) => {\n-                bug!(\"Got a scalar where a wide pointer was expected\")\n+                bug!(\"Got a scalar where a scalar pair was expected\")\n             }\n         }\n     }"}, {"sha": "a6ba00ec6952ece9e30b54fa295720de1669fa97", "filename": "compiler/rustc_mir/src/interpret/traits.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a1cff1cd4990a4ee8c5df8d7c71c05a0bcd60dec/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1cff1cd4990a4ee8c5df8d7c71c05a0bcd60dec/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs?ref=a1cff1cd4990a4ee8c5df8d7c71c05a0bcd60dec", "patch": "@@ -21,7 +21,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &mut self,\n         ty: Ty<'tcx>,\n         poly_trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n-    ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n+    ) -> InterpResult<'tcx, Pointer<Option<M::PointerTag>>> {\n         trace!(\"get_vtable(trait_ref={:?})\", poly_trait_ref);\n \n         let (ty, poly_trait_ref) = self.tcx.erase_regions((ty, poly_trait_ref));\n@@ -34,7 +34,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         let vtable_ptr = self.memory.global_base_pointer(Pointer::from(vtable_allocation))?;\n \n-        Ok(vtable_ptr)\n+        Ok(vtable_ptr.into())\n     }\n \n     /// Resolves the function at the specified slot in the provided\n@@ -126,21 +126,16 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &self,\n         vtable: Pointer<Option<M::PointerTag>>,\n         idx: u64,\n-    ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n+    ) -> InterpResult<'tcx, Pointer<Option<M::PointerTag>>> {\n         let pointer_size = self.pointer_size();\n \n-        let vtable = self\n+        let vtable_slot = vtable.offset(pointer_size * idx, self)?;\n+        let new_vtable = self\n             .memory\n-            .get(\n-                vtable,\n-                pointer_size * idx.checked_add(1).unwrap(),\n-                self.tcx.data_layout.pointer_align.abi,\n-            )?\n+            .get(vtable_slot, pointer_size, self.tcx.data_layout.pointer_align.abi)?\n             .expect(\"cannot be a ZST\");\n-        let new_vtable = self\n-            .scalar_to_ptr(vtable.read_ptr_sized(pointer_size * idx)?.check_init()?)\n-            .into_pointer_or_addr()\n-            .expect(\"should be a pointer\");\n+\n+        let new_vtable = self.scalar_to_ptr(new_vtable.read_ptr_sized(Size::ZERO)?.check_init()?);\n \n         Ok(new_vtable)\n     }"}]}