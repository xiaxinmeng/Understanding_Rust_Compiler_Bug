{"sha": "08afabddac12adc114a8f963f1a10c47f3b3b2d9", "node_id": "C_kwDOAAsO6NoAKDA4YWZhYmRkYWMxMmFkYzExNGE4Zjk2M2YxYTEwYzQ3ZjNiM2IyZDk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-18T14:10:36Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-25T03:04:52Z"}, "message": "get rid of to_poly_trait_predicate", "tree": {"sha": "047eed200085356cfbd40c94d3c8c90337e12759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/047eed200085356cfbd40c94d3c8c90337e12759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08afabddac12adc114a8f963f1a10c47f3b3b2d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmOAMNUACgkQgTGiTgx5\n76/u5xAAkQVMoUw9qUJHSZN8rRiYl0HOJIpuaL6pcSIc6gpt4BxaSXL7dn+/Ar1G\n5WRs984KuFiNabH1vkbmUTHq5JS5AAM/ObOZ2lBclXLGGdl72xeZvqQZ5A9cS1j+\npE21C5XPBhwGMlCjTUUU74uo3vJsWW+Rn2TKpRENp00lJbr6EqM4OZfqwziZ87iH\nxkKDn1OlYiiL4peYvLP56z8RR+lRQd/iTUcw1rBIY3FQ8z9L59nB49FNQhwV0F7L\nhLcLgUCv6Daqt/m8L2WZrVykwB1NyQtVkki4NdA405GBVwFIDFQij+OmZW1NOoN4\nHkWkbO+Gx5AnSziCEbzoUbLhnXBQKiZQnklaltWEp5fv49QzHdOScbQIjIoaHtcI\nb8HzMewp6PQmHhFE10ScEJWjENvjGfkDG7NB+dmIJoI8o0Moq8X2h9dASYw+2lL7\nzvyjiVReuF+8TVOpxoicQYLRCN7ctjlN83+U8W5C6XxdNvuRyxionklr0Sbf9OEu\nR6WfRMf+m6ALp4UU5WSEph3vlieijTkfldT7zpicomxUkbDyrovXnFHVjHaulBrV\n521fvlHAsfZm4JWjBrFv4uW/cAjPR50eBdg7UngarLdLjrOu5HJsLaqcMoqAECBY\nl5gCG7APtbSAKBDo71NI6OgAROSjGQqQ/fr/XJ3Kvnd3a43cwws=\n=2pVm\n-----END PGP SIGNATURE-----", "payload": "tree 047eed200085356cfbd40c94d3c8c90337e12759\nparent 65a6e22668c32c81dbe6a996a7012270c01eb114\nauthor Oli Scherer <git-spam-no-reply9815368754983@oli-obk.de> 1668780636 +0000\ncommitter Santiago Pastorino <spastorino@gmail.com> 1669345492 -0300\n\nget rid of to_poly_trait_predicate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08afabddac12adc114a8f963f1a10c47f3b3b2d9", "html_url": "https://github.com/rust-lang/rust/commit/08afabddac12adc114a8f963f1a10c47f3b3b2d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08afabddac12adc114a8f963f1a10c47f3b3b2d9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65a6e22668c32c81dbe6a996a7012270c01eb114", "url": "https://api.github.com/repos/rust-lang/rust/commits/65a6e22668c32c81dbe6a996a7012270c01eb114", "html_url": "https://github.com/rust-lang/rust/commit/65a6e22668c32c81dbe6a996a7012270c01eb114"}], "stats": {"total": 89, "additions": 40, "deletions": 49}, "files": [{"sha": "c314694ead436a243fe8e8fc9861ae38c2d251e2", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -792,8 +792,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             self.param_env,\n             ty::Binder::dummy(\n                 self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerSized, [a]),\n-            )\n-            .to_poly_trait_predicate(),\n+            ),\n         ));\n \n         Ok(InferOk {"}, {"sha": "625cd184223705afd05ed9c3558dfb401642381b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -1096,8 +1096,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ty::Binder::dummy(self.tcx.mk_trait_ref(\n                     into_def_id,\n                     [expr_ty, expected_ty]\n-                ))\n-                .to_poly_trait_predicate(),\n+                )),\n             ))\n         {\n             let sugg = if expr.precedence().order() >= PREC_POSTFIX {"}, {"sha": "120ef2dac19edbf1badc5e47152a14e77a726e89", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -1430,7 +1430,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         trait_ref: ty::TraitRef<'tcx>,\n     ) -> traits::SelectionResult<'tcx, traits::Selection<'tcx>> {\n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-        let predicate = ty::Binder::dummy(trait_ref).to_poly_trait_predicate();\n+        let predicate = ty::Binder::dummy(trait_ref);\n         let obligation = traits::Obligation::new(self.tcx, cause, self.param_env, predicate);\n         traits::SelectionContext::new(self).select(&obligation)\n     }"}, {"sha": "8e03cba15ef203b193fefb24418aef5bd653a042", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -1153,6 +1153,25 @@ impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for Binder<'tcx, PredicateKind<'tc\n     }\n }\n \n+impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for Binder<'tcx, TraitRef<'tcx>> {\n+    #[inline(always)]\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        let pred: PolyTraitPredicate<'tcx> = self.to_predicate(tcx);\n+        pred.to_predicate(tcx)\n+    }\n+}\n+\n+impl<'tcx> ToPredicate<'tcx, PolyTraitPredicate<'tcx>> for Binder<'tcx, TraitRef<'tcx>> {\n+    #[inline(always)]\n+    fn to_predicate(self, _: TyCtxt<'tcx>) -> PolyTraitPredicate<'tcx> {\n+        self.map_bound(|trait_ref| TraitPredicate {\n+            trait_ref,\n+            constness: ty::BoundConstness::NotConst,\n+            polarity: ty::ImplPolarity::Positive,\n+        })\n+    }\n+}\n+\n impl<'tcx> ToPredicate<'tcx, Predicate<'tcx>> for PolyTraitPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(PredicateKind::Trait).to_predicate(tcx)"}, {"sha": "a53b275fb02cd95c595c9886974df58681e2d4c8", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -853,23 +853,6 @@ impl<'tcx> PolyTraitRef<'tcx> {\n     pub fn def_id(&self) -> DefId {\n         self.skip_binder().def_id\n     }\n-\n-    pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {\n-        self.map_bound(|trait_ref| ty::TraitPredicate {\n-            trait_ref,\n-            constness: ty::BoundConstness::NotConst,\n-            polarity: ty::ImplPolarity::Positive,\n-        })\n-    }\n-\n-    /// Same as [`PolyTraitRef::to_poly_trait_predicate`] but sets a negative polarity instead.\n-    pub fn to_poly_trait_predicate_negative_polarity(&self) -> ty::PolyTraitPredicate<'tcx> {\n-        self.map_bound(|trait_ref| ty::TraitPredicate {\n-            trait_ref,\n-            constness: ty::BoundConstness::NotConst,\n-            polarity: ty::ImplPolarity::Negative,\n-        })\n-    }\n }\n \n impl rustc_errors::IntoDiagnosticArg for PolyTraitRef<'_> {"}, {"sha": "66f80e92eb77108d5b26e53f3a146affc78d6244", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -10,7 +10,7 @@ use crate::traits::project::ProjectAndUnifyResult;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{PolyTraitRef, Region, RegionVid};\n+use rustc_middle::ty::{ImplPolarity, Region, RegionVid};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n \n@@ -88,19 +88,22 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n \n         let trait_ref = tcx.mk_trait_ref(trait_did, [ty]);\n \n-        let trait_pred = ty::Binder::dummy(trait_ref);\n-\n         let infcx = tcx.infer_ctxt().build();\n         let mut selcx = SelectionContext::new(&infcx);\n-        for f in [\n-            PolyTraitRef::to_poly_trait_predicate,\n-            PolyTraitRef::to_poly_trait_predicate_negative_polarity,\n-        ] {\n+        for polarity in [true, false] {\n             let result = selcx.select(&Obligation::new(\n                 tcx,\n                 ObligationCause::dummy(),\n                 orig_env,\n-                f(&trait_pred),\n+                ty::Binder::dummy(ty::TraitPredicate {\n+                    trait_ref,\n+                    constness: ty::BoundConstness::NotConst,\n+                    polarity: if polarity {\n+                        ImplPolarity::Positive\n+                    } else {\n+                        ImplPolarity::Negative\n+                    },\n+                }),\n             ));\n             if let Ok(Some(ImplSource::UserDefined(_))) = result {\n                 debug!("}, {"sha": "61743d78e9e801be7ec2c5211d9e4f9b6a22538f", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -39,8 +39,7 @@ pub fn codegen_select_candidate<'tcx>(\n     let mut selcx = SelectionContext::new(&infcx);\n \n     let obligation_cause = ObligationCause::dummy();\n-    let obligation =\n-        Obligation::new(tcx, obligation_cause, param_env, trait_ref.to_poly_trait_predicate());\n+    let obligation = Obligation::new(tcx, obligation_cause, param_env, trait_ref);\n \n     let selection = match selcx.select(&obligation) {\n         Ok(Some(selection)) => selection,"}, {"sha": "2d46960d97b42b061d044a6e8746e971ac1e1526", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -2111,7 +2111,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     )\n                 };\n \n-                let obligation = obligation.with(self.tcx, trait_ref.to_poly_trait_predicate());\n+                let obligation = obligation.with(self.tcx, trait_ref);\n                 let mut selcx = SelectionContext::new(&self);\n                 match selcx.select_from_obligation(&obligation) {\n                     Ok(None) => {"}, {"sha": "4ab43c4e0b067db37b6afe3320ea6f69d89ad693", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -477,7 +477,7 @@ fn subst_and_check_impossible_predicates<'tcx>(\n     // associated items.\n     if let Some(trait_def_id) = tcx.trait_of_item(key.0) {\n         let trait_ref = ty::TraitRef::from_method(tcx, trait_def_id, key.1);\n-        predicates.push(ty::Binder::dummy(trait_ref).to_poly_trait_predicate().to_predicate(tcx));\n+        predicates.push(ty::Binder::dummy(trait_ref).to_predicate(tcx));\n     }\n \n     predicates.retain(|predicate| !predicate.needs_subst());"}, {"sha": "428eea0adc7ecf32bad0fb19216dd783010a3b5d", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -1328,8 +1328,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n             obligation.predicate.substs.truncate_to(tcx, tcx.generics_of(trait_def_id));\n         // FIXME(named-returns): Binders\n         let trait_predicate =\n-            ty::Binder::dummy(ty::TraitRef { def_id: trait_def_id, substs: trait_substs })\n-                .to_poly_trait_predicate();\n+            ty::Binder::dummy(ty::TraitRef { def_id: trait_def_id, substs: trait_substs });\n \n         let _ = selcx.infcx().commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {\n@@ -1527,7 +1526,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n     // If we are resolving `<T as TraitRef<...>>::Item == Type`,\n     // start out by selecting the predicate `T as TraitRef<...>`:\n     let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));\n-    let trait_obligation = obligation.with(selcx.tcx(), poly_trait_ref.to_poly_trait_predicate());\n+    let trait_obligation = obligation.with(selcx.tcx(), poly_trait_ref);\n     let _ = selcx.infcx().commit_if_ok(|_| {\n         let impl_source = match selcx.select(&trait_obligation) {\n             Ok(Some(impl_source)) => impl_source,"}, {"sha": "0d739eda75b222c061e24f9283c7355152ae4468", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -640,12 +640,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         );\n         let tr =\n             ty::Binder::dummy(self.tcx().at(cause.span).mk_trait_ref(LangItem::Sized, [output_ty]));\n-        nested.push(Obligation::new(\n-            self.infcx.tcx,\n-            cause,\n-            obligation.param_env,\n-            tr.to_poly_trait_predicate(),\n-        ));\n+        nested.push(Obligation::new(self.infcx.tcx, cause, obligation.param_env, tr));\n \n         Ok(ImplSourceFnPointerData { fn_ty: self_ty, nested })\n     }"}, {"sha": "a1145b90d6580c7da0f996dbd4d9420eff7d5d7b", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08afabddac12adc114a8f963f1a10c47f3b3b2d9/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08afabddac12adc114a8f963f1a10c47f3b3b2d9/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=08afabddac12adc114a8f963f1a10c47f3b3b2d9", "patch": "@@ -67,12 +67,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     .instantiate(cx.tcx, impl_substs)\n                     .predicates\n                     .into_iter()\n-                    .chain(Some(\n-                        ty::Binder::dummy(impl_trait_ref)\n-                            .to_poly_trait_predicate()\n-                            .map_bound(ty::PredicateKind::Trait)\n-                            .to_predicate(infcx.tcx),\n-                    ));\n+                    .chain(Some(ty::Binder::dummy(impl_trait_ref).to_predicate(infcx.tcx)));\n                 for predicate in predicates {\n                     debug!(\"testing predicate {:?}\", predicate);\n                     let obligation = traits::Obligation::new("}]}