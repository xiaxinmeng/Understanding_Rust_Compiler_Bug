{"sha": "b4eff79f389b2c48a21345929c0542385da212df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZWZmNzlmMzg5YjJjNDhhMjEzNDU5MjljMDU0MjM4NWRhMjEyZGY=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-14T02:07:43Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-14T02:07:43Z"}, "message": "extra::test: Use Result instead of Either.\n\nOptRes was combining a successful value with an error message, which\nfits the Result type perfectly.", "tree": {"sha": "60fe7ec2515ca1ca8dec4a3cd985df11b7db56d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60fe7ec2515ca1ca8dec4a3cd985df11b7db56d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4eff79f389b2c48a21345929c0542385da212df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4eff79f389b2c48a21345929c0542385da212df", "html_url": "https://github.com/rust-lang/rust/commit/b4eff79f389b2c48a21345929c0542385da212df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4eff79f389b2c48a21345929c0542385da212df/comments", "author": null, "committer": null, "parents": [{"sha": "92c4c077a0be758246475ffcacafee0060885b9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/92c4c077a0be758246475ffcacafee0060885b9f", "html_url": "https://github.com/rust-lang/rust/commit/92c4c077a0be758246475ffcacafee0060885b9f"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "1658bb5f1614e28c287d9b9bc64d93e62eebf47b", "filename": "src/libextra/test.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4eff79f389b2c48a21345929c0542385da212df/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4eff79f389b2c48a21345929c0542385da212df/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=b4eff79f389b2c48a21345929c0542385da212df", "patch": "@@ -31,7 +31,6 @@ use treemap::TreeMap;\n use std::clone::Clone;\n use std::comm::{stream, SharedChan, GenericPort, GenericChan};\n use std::libc;\n-use std::either;\n use std::io;\n use std::result;\n use std::task;\n@@ -127,8 +126,8 @@ pub type MetricDiff = TreeMap<~str,MetricChange>;\n pub fn test_main(args: &[~str], tests: ~[TestDescAndFn]) {\n     let opts =\n         match parse_opts(args) {\n-          either::Left(o) => o,\n-          either::Right(m) => fail!(m)\n+            Ok(o) => o,\n+            Err(msg) => fail!(msg)\n         };\n     if !run_tests_console(&opts, tests) { fail!(\"Some tests failed\"); }\n }\n@@ -169,7 +168,7 @@ pub struct TestOpts {\n     logfile: Option<Path>\n }\n \n-type OptRes = Either<TestOpts, ~str>;\n+type OptRes = Result<TestOpts, ~str>;\n \n fn optgroups() -> ~[getopts::groups::OptGroup] {\n     ~[groups::optflag(\"\", \"ignored\", \"Run ignored tests\"),\n@@ -228,7 +227,7 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n     let matches =\n         match groups::getopts(args_, optgroups()) {\n           Ok(m) => m,\n-          Err(f) => return either::Right(getopts::fail_str(f))\n+          Err(f) => return Err(getopts::fail_str(f))\n         };\n \n     if getopts::opt_present(&matches, \"h\") { usage(args[0], \"h\"); }\n@@ -274,7 +273,7 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n         logfile: logfile\n     };\n \n-    either::Left(test_opts)\n+    Ok(test_opts)\n }\n \n pub fn opt_shard(maybestr: Option<~str>) -> Option<(uint,uint)> {\n@@ -1155,7 +1154,6 @@ mod tests {\n                StaticTestName, DynTestName, DynTestFn};\n     use test::{TestOpts, run_test};\n \n-    use std::either;\n     use std::comm::{stream, SharedChan};\n     use tempfile;\n     use std::os;\n@@ -1236,8 +1234,8 @@ mod tests {\n     fn first_free_arg_should_be_a_filter() {\n         let args = ~[~\"progname\", ~\"filter\"];\n         let opts = match parse_opts(args) {\n-          either::Left(o) => o,\n-          _ => fail!(\"Malformed arg in first_free_arg_should_be_a_filter\")\n+            Ok(o) => o,\n+            _ => fail!(\"Malformed arg in first_free_arg_should_be_a_filter\")\n         };\n         assert!(\"filter\" == opts.filter.clone().unwrap());\n     }\n@@ -1246,8 +1244,8 @@ mod tests {\n     fn parse_ignored_flag() {\n         let args = ~[~\"progname\", ~\"filter\", ~\"--ignored\"];\n         let opts = match parse_opts(args) {\n-          either::Left(o) => o,\n-          _ => fail!(\"Malformed arg in parse_ignored_flag\")\n+            Ok(o) => o,\n+            _ => fail!(\"Malformed arg in parse_ignored_flag\")\n         };\n         assert!((opts.run_ignored));\n     }"}]}