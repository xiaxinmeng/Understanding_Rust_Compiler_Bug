{"sha": "e15ec667cee92d47c64fc903227b2fdb81f9e530", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNWVjNjY3Y2VlOTJkNDdjNjRmYzkwMzIyN2IyZmRiODFmOWU1MzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-15T15:58:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-15T15:58:46Z"}, "message": "Auto merge of #80055 - GuillaumeGomez:rollup-p09mweg, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #79379 (Show hidden elements by default when JS is disabled)\n - #79796 (Hide associated constants too when collapsing implementation)\n - #79958 (Fixes reported bugs in Rust Coverage)\n - #80008 (Fix `cargo-binutils` link)\n - #80016 (Use imports instead of rewriting the type signature of `RustcOptGroup::stable`)\n - #80025 (Replace some `println!` with `tidy_error!` to simplify)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bdd5b0d1175f30fc6c186650087ccd64428bf4ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdd5b0d1175f30fc6c186650087ccd64428bf4ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e15ec667cee92d47c64fc903227b2fdb81f9e530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e15ec667cee92d47c64fc903227b2fdb81f9e530", "html_url": "https://github.com/rust-lang/rust/commit/e15ec667cee92d47c64fc903227b2fdb81f9e530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e15ec667cee92d47c64fc903227b2fdb81f9e530/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99baddb57c0a950c1af8d125dc470894ddf052a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/99baddb57c0a950c1af8d125dc470894ddf052a7", "html_url": "https://github.com/rust-lang/rust/commit/99baddb57c0a950c1af8d125dc470894ddf052a7"}, {"sha": "0dcf99b2a260652cac9f04fe2957629e0c8e0464", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dcf99b2a260652cac9f04fe2957629e0c8e0464", "html_url": "https://github.com/rust-lang/rust/commit/0dcf99b2a260652cac9f04fe2957629e0c8e0464"}], "stats": {"total": 753, "additions": 657, "deletions": 96}, "files": [{"sha": "3e94f1637734a0f2ca09edde93c8e9bb653ff895", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -587,7 +587,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(share_generics, Some(true));\n     tracked!(show_span, Some(String::from(\"abc\")));\n     tracked!(src_hash_algorithm, Some(SourceFileHashAlgorithm::Sha1));\n-    tracked!(symbol_mangling_version, SymbolManglingVersion::V0);\n+    tracked!(symbol_mangling_version, Some(SymbolManglingVersion::V0));\n     tracked!(teach, true);\n     tracked!(thinlto, Some(true));\n     tracked!(tune_cpu, Some(String::from(\"abc\")));"}, {"sha": "019ca5174a22386986ca6f0f6f5ca89b492e432c", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -706,14 +706,21 @@ impl<'a> CrateLoader<'a> {\n         self.inject_dependency_if(cnum, \"a panic runtime\", &|data| data.needs_panic_runtime());\n     }\n \n-    fn inject_profiler_runtime(&mut self) {\n+    fn inject_profiler_runtime(&mut self, krate: &ast::Crate) {\n         if (self.sess.opts.debugging_opts.instrument_coverage\n             || self.sess.opts.debugging_opts.profile\n             || self.sess.opts.cg.profile_generate.enabled())\n             && !self.sess.opts.debugging_opts.no_profiler_runtime\n         {\n             info!(\"loading profiler\");\n \n+            if self.sess.contains_name(&krate.attrs, sym::no_core) {\n+                self.sess.err(\n+                    \"`profiler_builtins` crate (required by compiler options) \\\n+                               is not compatible with crate attribute `#![no_core]`\",\n+                );\n+            }\n+\n             let name = sym::profiler_builtins;\n             let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit, None);\n             let data = self.cstore.get_crate_data(cnum);\n@@ -879,7 +886,7 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     pub fn postprocess(&mut self, krate: &ast::Crate) {\n-        self.inject_profiler_runtime();\n+        self.inject_profiler_runtime(krate);\n         self.inject_allocator_crate(krate);\n         self.inject_panic_runtime(krate);\n "}, {"sha": "7b67d15f64a2eb49a755b3d0747edebd2ba1241e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -663,7 +663,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),\n             panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),\n             profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),\n-            symbol_mangling_version: tcx.sess.opts.debugging_opts.symbol_mangling_version,\n+            symbol_mangling_version: tcx.sess.opts.debugging_opts.get_symbol_mangling_version(),\n \n             crate_deps,\n             dylib_dependency_formats,"}, {"sha": "b1a1bb957e79d68b8eab687e3f0f428dd3d0eae2", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -32,24 +32,28 @@ impl CoverageGraph {\n \n         // Pre-transform MIR `BasicBlock` successors and predecessors into the BasicCoverageBlock\n         // equivalents. Note that since the BasicCoverageBlock graph has been fully simplified, the\n-        // each predecessor of a BCB leader_bb should be in a unique BCB, and each successor of a\n-        // BCB last_bb should be in its own unique BCB. Therefore, collecting the BCBs using\n-        // `bb_to_bcb` should work without requiring a deduplication step.\n+        // each predecessor of a BCB leader_bb should be in a unique BCB. It is possible for a\n+        // `SwitchInt` to have multiple targets to the same destination `BasicBlock`, so\n+        // de-duplication is required. This is done without reordering the successors.\n \n+        let bcbs_len = bcbs.len();\n+        let mut seen = IndexVec::from_elem_n(false, bcbs_len);\n         let successors = IndexVec::from_fn_n(\n             |bcb| {\n+                for b in seen.iter_mut() {\n+                    *b = false;\n+                }\n                 let bcb_data = &bcbs[bcb];\n-                let bcb_successors =\n+                let mut bcb_successors = Vec::new();\n+                for successor in\n                     bcb_filtered_successors(&mir_body, &bcb_data.terminator(mir_body).kind)\n                         .filter_map(|&successor_bb| bb_to_bcb[successor_bb])\n-                        .collect::<Vec<_>>();\n-                debug_assert!({\n-                    let mut sorted = bcb_successors.clone();\n-                    sorted.sort_unstable();\n-                    let initial_len = sorted.len();\n-                    sorted.dedup();\n-                    sorted.len() == initial_len\n-                });\n+                {\n+                    if !seen[successor] {\n+                        seen[successor] = true;\n+                        bcb_successors.push(successor);\n+                    }\n+                }\n                 bcb_successors\n             },\n             bcbs.len(),"}, {"sha": "53f7c28ee35be1a70bacc174c469533b2482f7fb", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -78,6 +78,14 @@ impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n             return;\n         }\n \n+        match mir_body.basic_blocks()[mir::START_BLOCK].terminator().kind {\n+            TerminatorKind::Unreachable => {\n+                trace!(\"InstrumentCoverage skipped for unreachable `START_BLOCK`\");\n+                return;\n+            }\n+            _ => {}\n+        }\n+\n         trace!(\"InstrumentCoverage starting for {:?}\", mir_source.def_id());\n         Instrumentor::new(&self.name(), tcx, mir_body).inject_counters();\n         trace!(\"InstrumentCoverage starting for {:?}\", mir_source.def_id());"}, {"sha": "6e7575c1d71bb3b1a3766ff9729f5213087720b4", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -41,14 +41,6 @@ impl<'tcx> MirPass<'tcx> for Inline {\n             return;\n         }\n \n-        if tcx.sess.opts.debugging_opts.instrument_coverage {\n-            // The current implementation of source code coverage injects code region counters\n-            // into the MIR, and assumes a 1-to-1 correspondence between MIR and source-code-\n-            // based function.\n-            debug!(\"function inlining is disabled when compiling with `instrument_coverage`\");\n-            return;\n-        }\n-\n         if inline(tcx, body) {\n             debug!(\"running simplify cfg on {:?}\", body.source);\n             CfgSimplifier::new(body).simplify();"}, {"sha": "b77a8b631e056da086eacfcfef7a66228acf4687", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -692,6 +692,10 @@ impl DebuggingOptions {\n             deduplicate_diagnostics: self.deduplicate_diagnostics,\n         }\n     }\n+\n+    pub fn get_symbol_mangling_version(&self) -> SymbolManglingVersion {\n+        self.symbol_mangling_version.unwrap_or(SymbolManglingVersion::Legacy)\n+    }\n }\n \n // The type of entry function, so users can have their own entry functions\n@@ -1757,7 +1761,30 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         // and reversible name mangling. Note, LLVM coverage tools can analyze coverage over\n         // multiple runs, including some changes to source code; so mangled names must be consistent\n         // across compilations.\n-        debugging_opts.symbol_mangling_version = SymbolManglingVersion::V0;\n+        match debugging_opts.symbol_mangling_version {\n+            None => {\n+                debugging_opts.symbol_mangling_version = Some(SymbolManglingVersion::V0);\n+            }\n+            Some(SymbolManglingVersion::Legacy) => {\n+                early_warn(\n+                    error_format,\n+                    \"-Z instrument-coverage requires symbol mangling version `v0`, \\\n+                    but `-Z symbol-mangling-version=legacy` was specified\",\n+                );\n+            }\n+            Some(SymbolManglingVersion::V0) => {}\n+        }\n+\n+        if debugging_opts.mir_opt_level > 1 {\n+            early_warn(\n+                error_format,\n+                &format!(\n+                    \"`-Z mir-opt-level={}` (any level > 1) enables function inlining, which \\\n+                    limits the effectiveness of `-Z instrument-coverage`.\",\n+                    debugging_opts.mir_opt_level,\n+                ),\n+            );\n+        }\n     }\n \n     if let Ok(graphviz_font) = std::env::var(\"RUSTC_GRAPHVIZ_FONT\") {\n@@ -2162,7 +2189,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Edition);\n     impl_dep_tracking_hash_via_hash!(LinkerPluginLto);\n     impl_dep_tracking_hash_via_hash!(SwitchWithOptPath);\n-    impl_dep_tracking_hash_via_hash!(SymbolManglingVersion);\n+    impl_dep_tracking_hash_via_hash!(Option<SymbolManglingVersion>);\n     impl_dep_tracking_hash_via_hash!(Option<SourceFileHashAlgorithm>);\n     impl_dep_tracking_hash_via_hash!(TrimmedDefPaths);\n "}, {"sha": "49a7888fd6a4239fe5974ca70feb4d99a212a10b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -677,12 +677,12 @@ macro_rules! options {\n         }\n \n         fn parse_symbol_mangling_version(\n-            slot: &mut SymbolManglingVersion,\n+            slot: &mut Option<SymbolManglingVersion>,\n             v: Option<&str>,\n         ) -> bool {\n             *slot = match v {\n-                Some(\"legacy\") => SymbolManglingVersion::Legacy,\n-                Some(\"v0\") => SymbolManglingVersion::V0,\n+                Some(\"legacy\") => Some(SymbolManglingVersion::Legacy),\n+                Some(\"v0\") => Some(SymbolManglingVersion::V0),\n                 _ => return false,\n             };\n             true\n@@ -1088,9 +1088,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\"),\n     strip: Strip = (Strip::None, parse_strip, [UNTRACKED],\n         \"tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\"),\n-    symbol_mangling_version: SymbolManglingVersion = (SymbolManglingVersion::Legacy,\n+    symbol_mangling_version: Option<SymbolManglingVersion> = (None,\n         parse_symbol_mangling_version, [TRACKED],\n-        \"which mangling version to use for symbol names\"),\n+        \"which mangling version to use for symbol names ('legacy' (default) or 'v0')\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help (default: no)\"),\n     terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],"}, {"sha": "7f8cded0ac0ec54d471af01e16c5c8463baa59d8", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -245,7 +245,7 @@ fn compute_symbol_name(\n     // 2. we favor `instantiating_crate` where possible (i.e. when `Some`)\n     let mangling_version_crate = instantiating_crate.unwrap_or(def_id.krate);\n     let mangling_version = if mangling_version_crate == LOCAL_CRATE {\n-        tcx.sess.opts.debugging_opts.symbol_mangling_version\n+        tcx.sess.opts.debugging_opts.get_symbol_mangling_version()\n     } else {\n         tcx.symbol_mangling_version(mangling_version_crate)\n     };"}, {"sha": "98bcadd12ee249d08e921e9a566c369373c44dbe", "filename": "src/doc/unstable-book/src/compiler-flags/source-based-code-coverage.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -118,7 +118,7 @@ LLVM's supplies two tools\u2014`llvm-profdata` and `llvm-cov`\u2014that process covera\n * If you are building the Rust compiler from source, you can optionally use the bundled LLVM tools, built from source. Those tool binaries can typically be found in your build platform directory at something like: `rust/build/x86_64-unknown-linux-gnu/llvm/bin/llvm-*`.\n * You can install compatible versions of these tools via `rustup`.\n \n-The `rustup` option is guaranteed to install a compatible version of the LLVM tools, but they can be hard to find. We recommend [`cargo-bintools`], which installs Rust-specific wrappers around these and other LLVM tools, so you can invoke them via `cargo` commands!\n+The `rustup` option is guaranteed to install a compatible version of the LLVM tools, but they can be hard to find. We recommend [`cargo-binutils`], which installs Rust-specific wrappers around these and other LLVM tools, so you can invoke them via `cargo` commands!\n \n ```shell\n $ rustup component add llvm-tools-preview\n@@ -320,8 +320,8 @@ Rust's implementation and workflow for source-based code coverage is based on th\n [rustc-dev-guide-how-to-build-and-run]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n [`rustfilt`]: https://crates.io/crates/rustfilt\n [`json5format`]: https://crates.io/crates/json5format\n-[`cargo-bintools`]: https://crates.io/crates/cargo-bintools\n+[`cargo-binutils`]: https://crates.io/crates/cargo-binutils\n [`llvm-profdata merge`]: https://llvm.org/docs/CommandGuide/llvm-profdata.html#profdata-merge\n [`llvm-cov report`]: https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-report\n [`llvm-cov show`]: https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-show\n-[source-based code coverage in Clang]: https://clang.llvm.org/docs/SourceBasedCodeCoverage.html\n\\ No newline at end of file\n+[source-based code coverage in Clang]: https://clang.llvm.org/docs/SourceBasedCodeCoverage.html"}, {"sha": "1de4b0016c567e0135ffa4a6259a8fcba94ab8c9", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -2274,9 +2274,12 @@ function defocusSearchBar() {\n \n         function implHider(addOrRemove, fullHide) {\n             return function(n) {\n-                var is_method = hasClass(n, \"method\") || fullHide;\n-                if (is_method || hasClass(n, \"type\")) {\n-                    if (is_method === true) {\n+                var shouldHide =\n+                    fullHide === true ||\n+                    hasClass(n, \"method\") === true ||\n+                    hasClass(n, \"associatedconstant\") === true;\n+                if (shouldHide === true || hasClass(n, \"type\") === true) {\n+                    if (shouldHide === true) {\n                         if (addOrRemove) {\n                             addClass(n, \"hidden-by-impl-hider\");\n                         } else {"}, {"sha": "ffa1a7639abbb0f8f174b9c9e88305a1815b9a81", "filename": "src/librustdoc/html/static/noscript.css", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoscript.css", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoscript.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fnoscript.css?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -1,3 +1,9 @@\n+/*\n+This whole CSS file is used only in case rustdoc is rendered with javascript disabled. Since a lot\n+of content is hidden by default (depending on the settings too), we have to overwrite some of the\n+rules.\n+*/\n+\n #main > h2 + div, #main > h2 + h3, #main > h3 + div {\n \tdisplay: block;\n }\n@@ -13,3 +19,7 @@\n #main > h2 + h3 {\n \tdisplay: flex;\n }\n+\n+#main .impl-items .hidden {\n+\tdisplay: block !important;\n+}"}, {"sha": "94b6617a071aff07492eba7e7e934c72947f0b52", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -117,21 +117,9 @@ fn get_args() -> Option<Vec<String>> {\n         .collect()\n }\n \n-fn stable<F>(name: &'static str, f: F) -> RustcOptGroup\n-where\n-    F: Fn(&mut getopts::Options) -> &mut getopts::Options + 'static,\n-{\n-    RustcOptGroup::stable(name, f)\n-}\n-\n-fn unstable<F>(name: &'static str, f: F) -> RustcOptGroup\n-where\n-    F: Fn(&mut getopts::Options) -> &mut getopts::Options + 'static,\n-{\n-    RustcOptGroup::unstable(name, f)\n-}\n-\n fn opts() -> Vec<RustcOptGroup> {\n+    let stable: fn(_, fn(&mut getopts::Options) -> &mut _) -> _ = RustcOptGroup::stable;\n+    let unstable: fn(_, fn(&mut getopts::Options) -> &mut _) -> _ = RustcOptGroup::unstable;\n     vec![\n         stable(\"h\", |o| o.optflag(\"h\", \"help\", \"show this help message\")),\n         stable(\"V\", |o| o.optflag(\"V\", \"version\", \"print rustdoc's version\")),"}, {"sha": "8559fc84aa937aa64892999bd8925d9d98001de6", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_export_coverage.match_or_pattern.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.match_or_pattern.json", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.match_or_pattern.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.match_or_pattern.json?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/match_or_pattern.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 37,\n+              \"covered\": 33,\n+              \"percent\": 89.1891891891892\n+            },\n+            \"regions\": {\n+              \"count\": 25,\n+              \"covered\": 17,\n+              \"notcovered\": 8,\n+              \"percent\": 68\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 37,\n+          \"covered\": 33,\n+          \"percent\": 89.1891891891892\n+        },\n+        \"regions\": {\n+          \"count\": 25,\n+          \"covered\": 17,\n+          \"notcovered\": 8,\n+          \"percent\": 68\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "a0fccb24f9980c8817a3dae05f56e6751170bc1f", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.match_or_pattern.txt", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.match_or_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.match_or_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.match_or_pattern.txt?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -0,0 +1,50 @@\n+    1|       |#![feature(or_patterns)]\n+    2|       |\n+    3|      1|fn main() {\n+    4|      1|    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+    5|      1|    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+    6|      1|    // dependent conditions.\n+    7|      1|    let is_true = std::env::args().len() == 1;\n+    8|      1|\n+    9|      1|    let mut a: u8 = 0;\n+   10|      1|    let mut b: u8 = 0;\n+   11|      1|    if is_true {\n+   12|      1|        a = 2;\n+   13|      1|        b = 0;\n+   14|      1|    }\n+                   ^0\n+   15|      1|    match (a, b) {\n+   16|       |        // Or patterns generate MIR `SwitchInt` with multiple targets to the same `BasicBlock`.\n+   17|       |        // This test confirms a fix for Issue #79569.\n+   18|      0|        (0 | 1, 2 | 3) => {}\n+   19|      1|        _ => {}\n+   20|       |    }\n+   21|      1|    if is_true {\n+   22|      1|        a = 0;\n+   23|      1|        b = 0;\n+   24|      1|    }\n+                   ^0\n+   25|      1|    match (a, b) {\n+   26|      0|        (0 | 1, 2 | 3) => {}\n+   27|      1|        _ => {}\n+   28|       |    }\n+   29|      1|    if is_true {\n+   30|      1|        a = 2;\n+   31|      1|        b = 2;\n+   32|      1|    }\n+                   ^0\n+   33|      1|    match (a, b) {\n+   34|      0|        (0 | 1, 2 | 3) => {}\n+   35|      1|        _ => {}\n+   36|       |    }\n+   37|      1|    if is_true {\n+   38|      1|        a = 0;\n+   39|      1|        b = 2;\n+   40|      1|    }\n+                   ^0\n+   41|      1|    match (a, b) {\n+   42|      1|        (0 | 1, 2 | 3) => {}\n+   43|      0|        _ => {}\n+   44|       |    }\n+   45|      1|}\n+"}, {"sha": "4df0bac8c866c92d990b7a5354c831aeaee8a2d7", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.async.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.async.txt?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -28,11 +28,8 @@ Counter in file 0 79:14 -> 79:16, 0\n Counter in file 0 81:1 -> 81:2, 0\n Counter in file 0 91:25 -> 91:34, 0\n Counter in file 0 5:1 -> 5:25, #1\n-Counter in file 0 5:25 -> 6:14, #1\n-Counter in file 0 7:9 -> 7:10, #2\n-Counter in file 0 9:9 -> 9:10, (#1 - #2)\n-Counter in file 0 11:1 -> 11:2, (#2 + (#1 - #2))\n Counter in file 0 21:1 -> 21:23, #1\n+Counter in file 0 17:20 -> 17:21, #1\n Counter in file 0 67:5 -> 67:23, #1\n Counter in file 0 38:1 -> 38:19, #1\n Counter in file 0 38:19 -> 42:12, #1\n@@ -46,14 +43,18 @@ Counter in file 0 44:27 -> 44:32, #8\n Counter in file 0 44:36 -> 44:38, (#6 + 0)\n Counter in file 0 45:14 -> 45:16, #7\n Counter in file 0 47:1 -> 47:2, (#5 + (#6 + #7))\n+Counter in file 0 13:20 -> 13:21, #1\n Counter in file 0 29:1 -> 29:22, #1\n Counter in file 0 93:1 -> 101:2, #1\n Counter in file 0 91:1 -> 91:25, #1\n+Counter in file 0 5:25 -> 6:14, #1\n+Counter in file 0 7:9 -> 7:10, #2\n+Counter in file 0 9:9 -> 9:10, (#1 - #2)\n+Counter in file 0 11:1 -> 11:2, (#2 + (#1 - #2))\n Counter in file 0 51:5 -> 52:18, #1\n Counter in file 0 53:13 -> 53:14, #2\n Counter in file 0 63:13 -> 63:14, (#1 - #2)\n Counter in file 0 65:5 -> 65:6, (#2 + (#1 - #2))\n-Counter in file 0 17:20 -> 17:21, #1\n Counter in file 0 49:1 -> 68:12, #1\n Counter in file 0 69:9 -> 69:10, #2\n Counter in file 0 69:14 -> 69:27, (#1 + 0)\n@@ -70,7 +71,6 @@ Counter in file 0 87:14 -> 87:16, #3\n Counter in file 0 89:1 -> 89:2, (#3 + (#2 + (#1 - (#3 + #2))))\n Counter in file 0 17:1 -> 17:20, #1\n Counter in file 0 66:5 -> 66:23, #1\n-Counter in file 0 13:20 -> 13:21, #1\n Counter in file 0 17:9 -> 17:10, #1\n Counter in file 0 17:9 -> 17:10, #1\n Counter in file 0 117:17 -> 117:19, #1"}, {"sha": "fc12612ce7d7eb9027d2e8b7c98d6f5fe78b3f8e", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.match_or_pattern.txt", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.match_or_pattern.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.match_or_pattern.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.match_or_pattern.txt?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -0,0 +1,98 @@\n+Counter in file 0 3:1 -> 11:15, #1\n+Counter in file 0 11:16 -> 14:6, #2\n+Counter in file 0 14:6 -> 14:7, (#1 - #2)\n+Counter in file 0 15:11 -> 15:17, (#2 + (#1 - #2))\n+Counter in file 0 18:27 -> 18:29, #5\n+Counter in file 0 19:14 -> 19:16, (#3 + #4)\n+Counter in file 0 21:8 -> 21:15, ((#3 + #4) + #5)\n+Counter in file 0 21:16 -> 24:6, #6\n+Counter in file 0 24:6 -> 24:7, (((#3 + #4) + #5) - #6)\n+Counter in file 0 25:11 -> 25:17, (#6 + (((#3 + #4) + #5) - #6))\n+Counter in file 0 26:27 -> 26:29, #9\n+Counter in file 0 27:14 -> 27:16, (#7 + #8)\n+Counter in file 0 29:8 -> 29:15, ((#7 + #8) + #9)\n+Counter in file 0 29:16 -> 32:6, #10\n+Counter in file 0 32:6 -> 32:7, (((#7 + #8) + #9) - #10)\n+Counter in file 0 33:11 -> 33:17, (#10 + (((#7 + #8) + #9) - #10))\n+Counter in file 0 34:27 -> 34:29, #13\n+Counter in file 0 35:14 -> 35:16, (#11 + #12)\n+Counter in file 0 37:8 -> 37:15, ((#11 + #12) + #13)\n+Counter in file 0 37:16 -> 40:6, #14\n+Counter in file 0 40:6 -> 40:7, (((#11 + #12) + #13) - #14)\n+Counter in file 0 41:11 -> 41:17, (#14 + (((#11 + #12) + #13) - #14))\n+Counter in file 0 42:27 -> 42:29, #17\n+Counter in file 0 43:14 -> 43:16, (#15 + #16)\n+Counter in file 0 45:1 -> 45:2, ((#15 + #16) + #17)\n+Emitting segments for file: ../coverage/match_or_pattern.rs\n+Combined regions:\n+  3:1 -> 11:15 (count=1)\n+  11:16 -> 14:6 (count=1)\n+  14:6 -> 14:7 (count=0)\n+  15:11 -> 15:17 (count=1)\n+  18:27 -> 18:29 (count=0)\n+  19:14 -> 19:16 (count=1)\n+  21:8 -> 21:15 (count=1)\n+  21:16 -> 24:6 (count=1)\n+  24:6 -> 24:7 (count=0)\n+  25:11 -> 25:17 (count=1)\n+  26:27 -> 26:29 (count=0)\n+  27:14 -> 27:16 (count=1)\n+  29:8 -> 29:15 (count=1)\n+  29:16 -> 32:6 (count=1)\n+  32:6 -> 32:7 (count=0)\n+  33:11 -> 33:17 (count=1)\n+  34:27 -> 34:29 (count=0)\n+  35:14 -> 35:16 (count=1)\n+  37:8 -> 37:15 (count=1)\n+  37:16 -> 40:6 (count=1)\n+  40:6 -> 40:7 (count=0)\n+  41:11 -> 41:17 (count=1)\n+  42:27 -> 42:29 (count=1)\n+  43:14 -> 43:16 (count=0)\n+  45:1 -> 45:2 (count=1)\n+Segment at 3:1 (count = 1), RegionEntry\n+Segment at 11:15 (count = 0), Skipped\n+Segment at 11:16 (count = 1), RegionEntry\n+Segment at 14:6 (count = 0), RegionEntry\n+Segment at 14:7 (count = 0), Skipped\n+Segment at 15:11 (count = 1), RegionEntry\n+Segment at 15:17 (count = 0), Skipped\n+Segment at 18:27 (count = 0), RegionEntry\n+Segment at 18:29 (count = 0), Skipped\n+Segment at 19:14 (count = 1), RegionEntry\n+Segment at 19:16 (count = 0), Skipped\n+Segment at 21:8 (count = 1), RegionEntry\n+Segment at 21:15 (count = 0), Skipped\n+Segment at 21:16 (count = 1), RegionEntry\n+Segment at 24:6 (count = 0), RegionEntry\n+Segment at 24:7 (count = 0), Skipped\n+Segment at 25:11 (count = 1), RegionEntry\n+Segment at 25:17 (count = 0), Skipped\n+Segment at 26:27 (count = 0), RegionEntry\n+Segment at 26:29 (count = 0), Skipped\n+Segment at 27:14 (count = 1), RegionEntry\n+Segment at 27:16 (count = 0), Skipped\n+Segment at 29:8 (count = 1), RegionEntry\n+Segment at 29:15 (count = 0), Skipped\n+Segment at 29:16 (count = 1), RegionEntry\n+Segment at 32:6 (count = 0), RegionEntry\n+Segment at 32:7 (count = 0), Skipped\n+Segment at 33:11 (count = 1), RegionEntry\n+Segment at 33:17 (count = 0), Skipped\n+Segment at 34:27 (count = 0), RegionEntry\n+Segment at 34:29 (count = 0), Skipped\n+Segment at 35:14 (count = 1), RegionEntry\n+Segment at 35:16 (count = 0), Skipped\n+Segment at 37:8 (count = 1), RegionEntry\n+Segment at 37:15 (count = 0), Skipped\n+Segment at 37:16 (count = 1), RegionEntry\n+Segment at 40:6 (count = 0), RegionEntry\n+Segment at 40:7 (count = 0), Skipped\n+Segment at 41:11 (count = 1), RegionEntry\n+Segment at 41:17 (count = 0), Skipped\n+Segment at 42:27 (count = 1), RegionEntry\n+Segment at 42:29 (count = 0), Skipped\n+Segment at 43:14 (count = 0), RegionEntry\n+Segment at 43:16 (count = 0), Skipped\n+Segment at 45:1 (count = 1), RegionEntry\n+Segment at 45:2 (count = 0), Skipped"}, {"sha": "133a85c83945ef8e9f9dd4c714f80971f8210631", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.match_or_pattern/match_or_pattern.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.match_or_pattern%2Fmatch_or_pattern.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.match_or_pattern%2Fmatch_or_pattern.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.match_or_pattern%2Fmatch_or_pattern.main.-------.InstrumentCoverage.0.html?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -0,0 +1,271 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.match_or_pattern/match_or_pattern.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>match_or_pattern.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 2\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@0,1,2,3\u298a</span>fn main() {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    // dependent conditions.</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    let is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    let mut a: u8 = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    let mut b: u8 = 0;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n+7:19-7:35: @1[0]: _3 = &amp;_4\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n+7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n+9:21-9:22: @3[2]: _5 = const 0_u8\n+9:9-9:14: @3[3]: FakeRead(ForLet, _5)\n+9:16-9:18: @3[4]: AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })\n+10:21-10:22: @3[6]: _6 = const 0_u8\n+10:9-10:14: @3[7]: FakeRead(ForLet, _6)\n+10:16-10:18: @3[8]: AscribeUserType(_6, o, UserTypeProjection { base: UserType(3), projs: [] })\n+11:8-11:15: @3[11]: _8 = _1\n+11:8-11:15: @3[12]: FakeRead(ForMatchedPlace, _8)\">    if is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n+13:9-13:14: @6[1]: _6 = const 0_u8\n+11:16-14:6: @6[2]: _7 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n+13:9-13:14: @6[1]: _6 = const 0_u8\n+11:16-14:6: @6[2]: _7 = const ()\">        a = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n+13:9-13:14: @6[1]: _6 = const 0_u8\n+11:16-14:6: @6[2]: _7 = const ()\">        b = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:14: @6[0]: _5 = const 2_u8\n+13:9-13:14: @6[1]: _6 = const 0_u8\n+11:16-14:6: @6[2]: _7 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:6-14:6: @5[0]: _7 = const ()\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:12-15:13: @7[5]: _11 = _5\n+15:15-15:16: @7[7]: _12 = _6\n+15:11-15:17: @7[8]: _10 = (move _11, move _12)\n+15:11-15:17: @7[11]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@7\u298a</span>(a, b)<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        // Or patterns generate MIR `SwitchInt` with multiple targets to the same `BasicBlock`.</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        // This test confirms a fix for Issue #79569.</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:27-18:29: @11[0]: _9 = const ()\"><span class=\"annotation\">@10,11\u298a</span>{}<span class=\"annotation\">\u2989@10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:14-19:16: @8[0]: _9 = const ()\"><span class=\"annotation\">@8\u298a</span>{}<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:8-21:15: @12[4]: _14 = _1\n+21:8-21:15: @12[5]: FakeRead(ForMatchedPlace, _14)\"><span class=\"annotation\">@12\u298a</span>is_true<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n+23:9-23:14: @15[1]: _6 = const 0_u8\n+21:16-24:6: @15[2]: _13 = const ()\"><span class=\"annotation\">@13,15\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n+23:9-23:14: @15[1]: _6 = const 0_u8\n+21:16-24:6: @15[2]: _13 = const ()\">        a = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n+23:9-23:14: @15[1]: _6 = const 0_u8\n+21:16-24:6: @15[2]: _13 = const ()\">        b = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:9-22:14: @15[0]: _5 = const 0_u8\n+23:9-23:14: @15[1]: _6 = const 0_u8\n+21:16-24:6: @15[2]: _13 = const ()\">    }<span class=\"annotation\">\u2989@13,15</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:6-24:6: @14[0]: _13 = const ()\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:12-25:13: @16[5]: _17 = _5\n+25:15-25:16: @16[7]: _18 = _6\n+25:11-25:17: @16[8]: _16 = (move _17, move _18)\n+25:11-25:17: @16[11]: FakeRead(ForMatchedPlace, _16)\"><span class=\"annotation\">@16\u298a</span>(a, b)<span class=\"annotation\">\u2989@16</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:27-26:29: @20[0]: _15 = const ()\"><span class=\"annotation\">@19,20\u298a</span>{}<span class=\"annotation\">\u2989@19,20</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:14-27:16: @17[0]: _15 = const ()\"><span class=\"annotation\">@17\u298a</span>{}<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:8-29:15: @21[4]: _20 = _1\n+29:8-29:15: @21[5]: FakeRead(ForMatchedPlace, _20)\"><span class=\"annotation\">@21\u298a</span>is_true<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n+31:9-31:14: @24[1]: _6 = const 2_u8\n+29:16-32:6: @24[2]: _19 = const ()\"><span class=\"annotation\">@22,24\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n+31:9-31:14: @24[1]: _6 = const 2_u8\n+29:16-32:6: @24[2]: _19 = const ()\">        a = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n+31:9-31:14: @24[1]: _6 = const 2_u8\n+29:16-32:6: @24[2]: _19 = const ()\">        b = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-30:14: @24[0]: _5 = const 2_u8\n+31:9-31:14: @24[1]: _6 = const 2_u8\n+29:16-32:6: @24[2]: _19 = const ()\">    }<span class=\"annotation\">\u2989@22,24</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:6-32:6: @23[0]: _19 = const ()\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"33:12-33:13: @25[5]: _23 = _5\n+33:15-33:16: @25[7]: _24 = _6\n+33:11-33:17: @25[8]: _22 = (move _23, move _24)\n+33:11-33:17: @25[11]: FakeRead(ForMatchedPlace, _22)\"><span class=\"annotation\">@25\u298a</span>(a, b)<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:27-34:29: @29[0]: _21 = const ()\"><span class=\"annotation\">@28,29\u298a</span>{}<span class=\"annotation\">\u2989@28,29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:14-35:16: @26[0]: _21 = const ()\"><span class=\"annotation\">@26\u298a</span>{}<span class=\"annotation\">\u2989@26</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"37:8-37:15: @30[4]: _26 = _1\n+37:8-37:15: @30[5]: FakeRead(ForMatchedPlace, _26)\"><span class=\"annotation\">@30\u298a</span>is_true<span class=\"annotation\">\u2989@30</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n+39:9-39:14: @33[1]: _6 = const 2_u8\n+37:16-40:6: @33[2]: _25 = const ()\"><span class=\"annotation\">@31,33\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n+39:9-39:14: @33[1]: _6 = const 2_u8\n+37:16-40:6: @33[2]: _25 = const ()\">        a = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n+39:9-39:14: @33[1]: _6 = const 2_u8\n+37:16-40:6: @33[2]: _25 = const ()\">        b = 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"38:9-38:14: @33[0]: _5 = const 0_u8\n+39:9-39:14: @33[1]: _6 = const 2_u8\n+37:16-40:6: @33[2]: _25 = const ()\">    }<span class=\"annotation\">\u2989@31,33</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:6-40:6: @32[0]: _25 = const ()\"><span class=\"annotation\">@32\u298a</span>\u2038<span class=\"annotation\">\u2989@32</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    match </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"41:12-41:13: @34[4]: _28 = _5\n+41:15-41:16: @34[6]: _29 = _6\n+41:11-41:17: @34[7]: _27 = (move _28, move _29)\n+41:11-41:17: @34[10]: FakeRead(ForMatchedPlace, _27)\"><span class=\"annotation\">@34\u298a</span>(a, b)<span class=\"annotation\">\u2989@34</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        (0 | 1, 2 | 3) =&gt; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"42:27-42:29: @38[0]: _0 = const ()\"><span class=\"annotation\">@37,38\u298a</span>{}<span class=\"annotation\">\u2989@37,38</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        _ =&gt; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:14-43:16: @35[0]: _0 = const ()\"><span class=\"annotation\">@35\u298a</span>{}<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"45:2-45:2: @39.Return: return\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "4c6a8a9b7037c6897b81388467b39e209528926f", "filename": "src/test/run-make-fulldeps/coverage/match_or_pattern.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fmatch_or_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fmatch_or_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fmatch_or_pattern.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -0,0 +1,45 @@\n+#![feature(or_patterns)]\n+\n+fn main() {\n+    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n+    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n+    // dependent conditions.\n+    let is_true = std::env::args().len() == 1;\n+\n+    let mut a: u8 = 0;\n+    let mut b: u8 = 0;\n+    if is_true {\n+        a = 2;\n+        b = 0;\n+    }\n+    match (a, b) {\n+        // Or patterns generate MIR `SwitchInt` with multiple targets to the same `BasicBlock`.\n+        // This test confirms a fix for Issue #79569.\n+        (0 | 1, 2 | 3) => {}\n+        _ => {}\n+    }\n+    if is_true {\n+        a = 0;\n+        b = 0;\n+    }\n+    match (a, b) {\n+        (0 | 1, 2 | 3) => {}\n+        _ => {}\n+    }\n+    if is_true {\n+        a = 2;\n+        b = 2;\n+    }\n+    match (a, b) {\n+        (0 | 1, 2 | 3) => {}\n+        _ => {}\n+    }\n+    if is_true {\n+        a = 0;\n+        b = 2;\n+    }\n+    match (a, b) {\n+        (0 | 1, 2 | 3) => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "87dd19c5d4d05469c88ae8bef71ff39bb0e74b74", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -41,7 +41,7 @@ fn arg_value<'a, T: Deref<Target = str>>(\n \n         match arg.next().or_else(|| args.next()) {\n             Some(v) if pred(v) => return Some(v),\n-            _ => {},\n+            _ => {}\n         }\n     }\n     None\n@@ -121,11 +121,12 @@ You can use tool lints to allow or deny lints from your code, eg.:\n \n const BUG_REPORT_URL: &str = \"https://github.com/rust-lang/rust-clippy/issues/new\";\n \n-static ICE_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> = SyncLazy::new(|| {\n-    let hook = panic::take_hook();\n-    panic::set_hook(Box::new(|info| report_clippy_ice(info, BUG_REPORT_URL)));\n-    hook\n-});\n+static ICE_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> =\n+    SyncLazy::new(|| {\n+        let hook = panic::take_hook();\n+        panic::set_hook(Box::new(|info| report_clippy_ice(info, BUG_REPORT_URL)));\n+        hook\n+    });\n \n fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Invoke our ICE handler, which prints the actual panic message and optionally a backtrace\n@@ -257,14 +258,17 @@ pub fn main() {\n \n         // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n         // We're invoking the compiler programmatically, so we ignore this/\n-        let wrapper_mode = orig_args.get(1).map(Path::new).and_then(Path::file_stem) == Some(\"rustc\".as_ref());\n+        let wrapper_mode =\n+            orig_args.get(1).map(Path::new).and_then(Path::file_stem) == Some(\"rustc\".as_ref());\n \n         if wrapper_mode {\n             // we still want to be able to invoke it normally though\n             orig_args.remove(1);\n         }\n \n-        if !wrapper_mode && (orig_args.iter().any(|a| a == \"--help\" || a == \"-h\") || orig_args.len() == 1) {\n+        if !wrapper_mode\n+            && (orig_args.iter().any(|a| a == \"--help\" || a == \"-h\") || orig_args.len() == 1)\n+        {\n             display_help();\n             exit(0);\n         }\n@@ -285,13 +289,11 @@ pub fn main() {\n         if clippy_enabled {\n             args.extend(vec![\"--cfg\".into(), r#\"feature=\"cargo-clippy\"\"#.into()]);\n             if let Ok(extra_args) = env::var(\"CLIPPY_ARGS\") {\n-                args.extend(extra_args.split(\"__CLIPPY_HACKERY__\").filter_map(|s| {\n-                    if s.is_empty() {\n-                        None\n-                    } else {\n-                        Some(s.to_string())\n-                    }\n-                }));\n+                args.extend(\n+                    extra_args\n+                        .split(\"__CLIPPY_HACKERY__\")\n+                        .filter_map(|s| if s.is_empty() { None } else { Some(s.to_string()) }),\n+                );\n             }\n         }\n         let mut clippy = ClippyCallbacks;"}, {"sha": "952782175f13c3d7c9f66041850e42d9e159f138", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -214,12 +214,12 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n     for (name, license) in EXCEPTIONS {\n         // Check that the package actually exists.\n         if !metadata.packages.iter().any(|p| p.name == *name) {\n-            println!(\n+            tidy_error!(\n+                bad,\n                 \"could not find exception package `{}`\\n\\\n                 Remove from EXCEPTIONS list if it is no longer used.\",\n                 name\n             );\n-            *bad = true;\n         }\n         // Check that the license hasn't changed.\n         for pkg in metadata.packages.iter().filter(|p| p.name == *name) {\n@@ -232,11 +232,11 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n             }\n             match &pkg.license {\n                 None => {\n-                    println!(\n+                    tidy_error!(\n+                        bad,\n                         \"dependency exception `{}` does not declare a license expression\",\n                         pkg.id\n                     );\n-                    *bad = true;\n                 }\n                 Some(pkg_license) => {\n                     if pkg_license.as_str() != *license {\n@@ -273,8 +273,7 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n         let license = match &pkg.license {\n             Some(license) => license,\n             None => {\n-                println!(\"dependency `{}` does not define a license expression\", pkg.id,);\n-                *bad = true;\n+                tidy_error!(bad, \"dependency `{}` does not define a license expression\", pkg.id);\n                 continue;\n             }\n         };\n@@ -286,8 +285,7 @@ fn check_exceptions(metadata: &Metadata, bad: &mut bool) {\n                 // general, these should never be added.\n                 continue;\n             }\n-            println!(\"invalid license `{}` in `{}`\", license, pkg.id);\n-            *bad = true;\n+            tidy_error!(bad, \"invalid license `{}` in `{}`\", license, pkg.id);\n         }\n     }\n }\n@@ -300,12 +298,12 @@ fn check_dependencies(metadata: &Metadata, bad: &mut bool) {\n     // Check that the PERMITTED_DEPENDENCIES does not have unused entries.\n     for name in PERMITTED_DEPENDENCIES {\n         if !metadata.packages.iter().any(|p| p.name == *name) {\n-            println!(\n+            tidy_error!(\n+                bad,\n                 \"could not find allowed package `{}`\\n\\\n                 Remove from PERMITTED_DEPENDENCIES list if it is no longer used.\",\n                 name\n             );\n-            *bad = true;\n         }\n     }\n     // Get the list in a convenient form.\n@@ -322,11 +320,10 @@ fn check_dependencies(metadata: &Metadata, bad: &mut bool) {\n     }\n \n     if !unapproved.is_empty() {\n-        println!(\"Dependencies not explicitly permitted:\");\n+        tidy_error!(bad, \"Dependencies not explicitly permitted:\");\n         for dep in unapproved {\n             println!(\"* {}\", dep);\n         }\n-        *bad = true;\n     }\n }\n \n@@ -381,16 +378,17 @@ fn check_crate_duplicate(metadata: &Metadata, bad: &mut bool) {\n         let matches: Vec<_> = metadata.packages.iter().filter(|pkg| pkg.name == name).collect();\n         match matches.len() {\n             0 => {\n-                println!(\n+                tidy_error!(\n+                    bad,\n                     \"crate `{}` is missing, update `check_crate_duplicate` \\\n                     if it is no longer used\",\n                     name\n                 );\n-                *bad = true;\n             }\n             1 => {}\n             _ => {\n-                println!(\n+                tidy_error!(\n+                    bad,\n                     \"crate `{}` is duplicated in `Cargo.lock`, \\\n                     it is too expensive to build multiple times, \\\n                     so make sure only one version appears across all dependencies\",\n@@ -399,7 +397,6 @@ fn check_crate_duplicate(metadata: &Metadata, bad: &mut bool) {\n                 for pkg in matches {\n                     println!(\"  * {}\", pkg.id);\n                 }\n-                *bad = true;\n             }\n         }\n     }"}, {"sha": "aad57cacbb41ee2eba3acef9a98b3e8c33bc5ea9", "filename": "src/tools/tidy/src/extdeps.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fextdeps.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -27,8 +27,7 @@ pub fn check(root: &Path, bad: &mut bool) {\n \n         // Ensure source is allowed.\n         if !ALLOWED_SOURCES.contains(&&*source) {\n-            println!(\"invalid source: {}\", source);\n-            *bad = true;\n+            tidy_error!(bad, \"invalid source: {}\", source);\n         }\n     }\n }"}, {"sha": "d78af2cd6164c7b844f7830bdca285694e67b846", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -330,7 +330,6 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n             let issue_str = parts.next().unwrap().trim();\n             let tracking_issue = if issue_str.starts_with(\"None\") {\n                 if level == Status::Unstable && !next_feature_omits_tracking_issue {\n-                    *bad = true;\n                     tidy_error!(\n                         bad,\n                         \"{}:{}: no tracking issue for feature {}\","}, {"sha": "d282d240d8234746c95d81696945aa7df2fedc54", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -28,6 +28,10 @@ macro_rules! t {\n }\n \n macro_rules! tidy_error {\n+    ($bad:expr, $fmt:expr) => ({\n+        *$bad = true;\n+        eprintln!(\"tidy error: {}\", $fmt);\n+    });\n     ($bad:expr, $fmt:expr, $($arg:tt)*) => ({\n         *$bad = true;\n         eprint!(\"tidy error: \");"}, {"sha": "d8d2b449fee8789f2bcdd9384d4b842268389ea7", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15ec667cee92d47c64fc903227b2fdb81f9e530/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=e15ec667cee92d47c64fc903227b2fdb81f9e530", "patch": "@@ -67,14 +67,12 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     let testname =\n                         file_path.file_name().unwrap().to_str().unwrap().split_once('.').unwrap().0;\n                     if !file_path.with_file_name(testname).with_extension(\"rs\").exists() {\n-                        println!(\"Stray file with UI testing output: {:?}\", file_path);\n-                        *bad = true;\n+                        tidy_error!(bad, \"Stray file with UI testing output: {:?}\", file_path);\n                     }\n \n                     if let Ok(metadata) = fs::metadata(file_path) {\n                         if metadata.len() == 0 {\n-                            println!(\"Empty file with UI testing output: {:?}\", file_path);\n-                            *bad = true;\n+                            tidy_error!(bad, \"Empty file with UI testing output: {:?}\", file_path);\n                         }\n                     }\n                 }"}]}