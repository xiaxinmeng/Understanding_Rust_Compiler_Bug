{"sha": "a0e606c380ebd56f3d30501d7ccb94d9f11b9643", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZTYwNmMzODBlYmQ1NmYzZDMwNTAxZDdjY2I5NGQ5ZjExYjk2NDM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-28T11:58:45Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-28T11:58:45Z"}, "message": "Use the span of `#[derive_Eq]` for `#[structural_match]`", "tree": {"sha": "bb8e01a44fcbd61fa1236ffa3852440f26bc1406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb8e01a44fcbd61fa1236ffa3852440f26bc1406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0e606c380ebd56f3d30501d7ccb94d9f11b9643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e606c380ebd56f3d30501d7ccb94d9f11b9643", "html_url": "https://github.com/rust-lang/rust/commit/a0e606c380ebd56f3d30501d7ccb94d9f11b9643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0e606c380ebd56f3d30501d7ccb94d9f11b9643/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40f047dc7af6c282080bf1afecced966d30289e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/40f047dc7af6c282080bf1afecced966d30289e1", "html_url": "https://github.com/rust-lang/rust/commit/40f047dc7af6c282080bf1afecced966d30289e1"}], "stats": {"total": 56, "additions": 14, "deletions": 42}, "files": [{"sha": "6fb6dee94ed35af77cc9adba72888b10f2084ff6", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 14, "deletions": 42, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a0e606c380ebd56f3d30501d7ccb94d9f11b9643/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e606c380ebd56f3d30501d7ccb94d9f11b9643/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=a0e606c380ebd56f3d30501d7ccb94d9f11b9643", "patch": "@@ -94,7 +94,7 @@ fn expand_derive(cx: &mut ExtCtxt,\n             }\n \n             let mut found_partial_eq = false;\n-            let mut found_eq = false;\n+            let mut eq_span = None;\n \n             for titem in traits.iter().rev() {\n                 let tname = match titem.node {\n@@ -114,12 +114,6 @@ fn expand_derive(cx: &mut ExtCtxt,\n                     continue;\n                 }\n \n-                if &tname[..] == \"Eq\" {\n-                    found_eq = true;\n-                } else if &tname[..] == \"PartialEq\" {\n-                    found_partial_eq = true;\n-                }\n-\n                 let span = Span {\n                     expn_id: cx.codemap().record_expansion(codemap::ExpnInfo {\n                         call_site: titem.span,\n@@ -131,48 +125,26 @@ fn expand_derive(cx: &mut ExtCtxt,\n                     }), ..titem.span\n                 };\n \n+                if &tname[..] == \"Eq\" {\n+                    eq_span = Some(span);\n+                } else if &tname[..] == \"PartialEq\" {\n+                    found_partial_eq = true;\n+                }\n+\n                 // #[derive(Foo, Bar)] expands to #[derive_Foo] #[derive_Bar]\n                 item.attrs.push(cx.attribute(span, cx.meta_word(titem.span,\n                     intern_and_get_ident(&format!(\"derive_{}\", tname)))));\n             }\n \n             // RFC #1445. `#[derive(PartialEq, Eq)]` adds a (trusted)\n             // `#[structural_match]` attribute.\n-            if found_partial_eq && found_eq {\n-                // This span is **very** sensitive and crucial to\n-                // getting the stability behavior we want. What we are\n-                // doing is marking `#[structural_match]` with the\n-                // span of the `#[deriving(...)]` attribute (the\n-                // entire attribute, not just the `PartialEq` or `Eq`\n-                // part), but with the current backtrace. The current\n-                // backtrace will contain a topmost entry that IS this\n-                // `#[deriving(...)]` attribute and with the\n-                // \"allow-unstable\" flag set to true.\n-                //\n-                // Note that we do NOT use the span of the `Eq`\n-                // text itself. You might think this is\n-                // equivalent, because the `Eq` appears within the\n-                // `#[deriving(Eq)]` attribute, and hence we would\n-                // inherit the \"allows unstable\" from the\n-                // backtrace.  But in fact this is not always the\n-                // case. The actual source text that led to\n-                // deriving can be `#[$attr]`, for example, where\n-                // `$attr == deriving(Eq)`. In that case, the\n-                // \"#[structural_match]\" would be considered to\n-                // originate not from the deriving call but from\n-                // text outside the deriving call, and hence would\n-                // be forbidden from using unstable\n-                // content.\n-                //\n-                // See tests src/run-pass/rfc1445 for\n-                // examples. --nmatsakis\n-                let span = Span { expn_id: cx.backtrace(), .. span };\n-                assert!(cx.parse_sess.codemap().span_allows_unstable(span));\n-                debug!(\"inserting structural_match with span {:?}\", span);\n-                let structural_match = intern_and_get_ident(\"structural_match\");\n-                item.attrs.push(cx.attribute(span,\n-                                             cx.meta_word(span,\n-                                                          structural_match)));\n+            if let Some(eq_span) = eq_span {\n+                if found_partial_eq {\n+                    let structural_match = intern_and_get_ident(\"structural_match\");\n+                    item.attrs.push(cx.attribute(eq_span,\n+                                                 cx.meta_word(eq_span,\n+                                                              structural_match)));\n+                }\n             }\n \n             item"}]}