{"sha": "b7855fa9defc918aa513edd021f4100a46c30109", "node_id": "C_kwDOAAsO6NoAKGI3ODU1ZmE5ZGVmYzkxOGFhNTEzZWRkMDIxZjQxMDBhNDZjMzAxMDk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-22T06:34:43Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-26T22:14:09Z"}, "message": "Factor out the repeated `assert_ty_bounds` function.", "tree": {"sha": "2b154b83d07b6279a6cfa2fd568db61a426fa948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b154b83d07b6279a6cfa2fd568db61a426fa948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7855fa9defc918aa513edd021f4100a46c30109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7855fa9defc918aa513edd021f4100a46c30109", "html_url": "https://github.com/rust-lang/rust/commit/b7855fa9defc918aa513edd021f4100a46c30109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7855fa9defc918aa513edd021f4100a46c30109/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7396685a19674dfe995030ec62e01cb6205ae7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7396685a19674dfe995030ec62e01cb6205ae7d", "html_url": "https://github.com/rust-lang/rust/commit/e7396685a19674dfe995030ec62e01cb6205ae7d"}], "stats": {"total": 86, "additions": 42, "deletions": 44}, "files": [{"sha": "ce07081cc63836884843bb66a282f408959444c0", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b7855fa9defc918aa513edd021f4100a46c30109/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7855fa9defc918aa513edd021f4100a46c30109/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=b7855fa9defc918aa513edd021f4100a46c30109", "patch": "@@ -3,9 +3,9 @@ use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n use rustc_ast::ptr::P;\n-use rustc_ast::{self as ast, Expr, GenericArg, Generics, ItemKind, MetaItem, VariantData};\n+use rustc_ast::{self as ast, Expr, Generics, ItemKind, MetaItem, VariantData};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n \n pub fn expand_deriving_clone(\n@@ -107,36 +107,30 @@ fn cs_clone_shallow(\n     substr: &Substructure<'_>,\n     is_union: bool,\n ) -> P<Expr> {\n-    fn assert_ty_bounds(\n-        cx: &mut ExtCtxt<'_>,\n-        stmts: &mut Vec<ast::Stmt>,\n-        ty: P<ast::Ty>,\n-        span: Span,\n-        helper_name: &str,\n-    ) {\n-        // Generate statement `let _: helper_name<ty>;`,\n-        // set the expn ID so we can use the unstable struct.\n-        let span = cx.with_def_site_ctxt(span);\n-        let assert_path = cx.path_all(\n-            span,\n-            true,\n-            cx.std_path(&[sym::clone, Symbol::intern(helper_name)]),\n-            vec![GenericArg::Type(ty)],\n-        );\n-        stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n-    }\n     fn process_variant(cx: &mut ExtCtxt<'_>, stmts: &mut Vec<ast::Stmt>, variant: &VariantData) {\n         for field in variant.fields() {\n             // let _: AssertParamIsClone<FieldTy>;\n-            assert_ty_bounds(cx, stmts, field.ty.clone(), field.span, \"AssertParamIsClone\");\n+            super::assert_ty_bounds(\n+                cx,\n+                stmts,\n+                field.ty.clone(),\n+                field.span,\n+                &[sym::clone, sym::AssertParamIsClone],\n+            );\n         }\n     }\n \n     let mut stmts = Vec::new();\n     if is_union {\n         // let _: AssertParamIsCopy<Self>;\n         let self_ty = cx.ty_path(cx.path_ident(trait_span, Ident::with_dummy_span(kw::SelfUpper)));\n-        assert_ty_bounds(cx, &mut stmts, self_ty, trait_span, \"AssertParamIsCopy\");\n+        super::assert_ty_bounds(\n+            cx,\n+            &mut stmts,\n+            self_ty,\n+            trait_span,\n+            &[sym::clone, sym::AssertParamIsCopy],\n+        );\n     } else {\n         match *substr.fields {\n             StaticStruct(vdata, ..) => {"}, {"sha": "440508ac2808c6217aacf49390acfebd12b0e752", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b7855fa9defc918aa513edd021f4100a46c30109/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7855fa9defc918aa513edd021f4100a46c30109/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=b7855fa9defc918aa513edd021f4100a46c30109", "patch": "@@ -3,9 +3,9 @@ use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n use rustc_ast::ptr::P;\n-use rustc_ast::{self as ast, Expr, GenericArg, MetaItem};\n+use rustc_ast::{self as ast, Expr, MetaItem};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n \n pub fn expand_deriving_eq(\n@@ -55,32 +55,20 @@ fn cs_total_eq_assert(\n     trait_span: Span,\n     substr: &Substructure<'_>,\n ) -> P<Expr> {\n-    fn assert_ty_bounds(\n-        cx: &mut ExtCtxt<'_>,\n-        stmts: &mut Vec<ast::Stmt>,\n-        ty: P<ast::Ty>,\n-        span: Span,\n-        helper_name: &str,\n-    ) {\n-        // Generate statement `let _: helper_name<ty>;`,\n-        // set the expn ID so we can use the unstable struct.\n-        let span = cx.with_def_site_ctxt(span);\n-        let assert_path = cx.path_all(\n-            span,\n-            true,\n-            cx.std_path(&[sym::cmp, Symbol::intern(helper_name)]),\n-            vec![GenericArg::Type(ty)],\n-        );\n-        stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n-    }\n     fn process_variant(\n         cx: &mut ExtCtxt<'_>,\n         stmts: &mut Vec<ast::Stmt>,\n         variant: &ast::VariantData,\n     ) {\n         for field in variant.fields() {\n             // let _: AssertParamIsEq<FieldTy>;\n-            assert_ty_bounds(cx, stmts, field.ty.clone(), field.span, \"AssertParamIsEq\");\n+            super::assert_ty_bounds(\n+                cx,\n+                stmts,\n+                field.ty.clone(),\n+                field.span,\n+                &[sym::cmp, sym::AssertParamIsEq],\n+            );\n         }\n     }\n "}, {"sha": "c1ca089da221f3c12fcd0561f6e6a3858f915d5a", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b7855fa9defc918aa513edd021f4100a46c30109/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7855fa9defc918aa513edd021f4100a46c30109/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=b7855fa9defc918aa513edd021f4100a46c30109", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_ast as ast;\n use rustc_ast::ptr::P;\n-use rustc_ast::{Impl, ItemKind, MetaItem};\n+use rustc_ast::{GenericArg, Impl, ItemKind, MetaItem};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, MultiItemModifier};\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n@@ -193,3 +193,16 @@ fn inject_impl_of_structural_trait(\n \n     push(Annotatable::Item(newitem));\n }\n+\n+fn assert_ty_bounds(\n+    cx: &mut ExtCtxt<'_>,\n+    stmts: &mut Vec<ast::Stmt>,\n+    ty: P<ast::Ty>,\n+    span: Span,\n+    assert_path: &[Symbol],\n+) {\n+    // Generate statement `let _: assert_path<ty>;`.\n+    let span = cx.with_def_site_ctxt(span);\n+    let assert_path = cx.path_all(span, true, cx.std_path(assert_path), vec![GenericArg::Type(ty)]);\n+    stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n+}"}, {"sha": "4e28d2b6001edfe3268b8b1c3879bb1d190065a8", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7855fa9defc918aa513edd021f4100a46c30109/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7855fa9defc918aa513edd021f4100a46c30109/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b7855fa9defc918aa513edd021f4100a46c30109", "patch": "@@ -135,6 +135,9 @@ symbols! {\n         Arguments,\n         AsMut,\n         AsRef,\n+        AssertParamIsClone,\n+        AssertParamIsCopy,\n+        AssertParamIsEq,\n         AtomicBool,\n         AtomicI128,\n         AtomicI16,"}]}