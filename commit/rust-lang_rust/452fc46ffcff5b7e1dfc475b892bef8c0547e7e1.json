{"sha": "452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MmZjNDZmZmNmZjViN2UxZGZjNDc1Yjg5MmJlZjhjMDU0N2U3ZTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-15T03:41:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-15T03:41:33Z"}, "message": "rustc: Break some of metadata's dependencies on session", "tree": {"sha": "dc31b62a5557042fba54e69e50b35ef5fae4dec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc31b62a5557042fba54e69e50b35ef5fae4dec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "html_url": "https://github.com/rust-lang/rust/commit/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f49928c2d2a5a35e4a103fbe93481621694c912", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f49928c2d2a5a35e4a103fbe93481621694c912", "html_url": "https://github.com/rust-lang/rust/commit/0f49928c2d2a5a35e4a103fbe93481621694c912"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "1c8caa0f4aac7021842d2d88ed9f3cac05c5b208", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "patch": "@@ -4,7 +4,6 @@ import std::{ebml, map};\n import std::map::hashmap;\n import io::writer_util;\n import syntax::{ast, ast_util};\n-import driver::session::session;\n import syntax::attr;\n import middle::ty;\n import middle::ast_map;\n@@ -15,6 +14,7 @@ import syntax::print::pprust;\n import cmd=cstore::crate_metadata;\n import util::ppaux::ty_to_str;\n import ebml::deserializer;\n+import syntax::diagnostic::span_handler;\n \n export get_class_fields;\n export get_symbol;\n@@ -455,7 +455,9 @@ fn get_iface_methods(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n         let name = item_name(mth);\n         let ty = doc_type(mth, tcx, cdata);\n         let fty = alt ty::get(ty).struct { ty::ty_fn(f) { f }\n-          _ { tcx.sess.bug(\"get_iface_methods: id has non-function type\");\n+          _ {\n+            tcx.diag.handler().bug(\n+                \"get_iface_methods: id has non-function type\");\n         } };\n         result += [{ident: name, tps: bounds, fty: fty,\n                     purity: alt check item_family(mth) {"}, {"sha": "c4f3225ebfc7016654c953294d7a1d5bd0443d56", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "patch": "@@ -19,7 +19,7 @@ import std::serialization::serializer;\n import std::ebml::serializer;\n import middle::resolve;\n import syntax::ast;\n-import driver::session::session;\n+import syntax::diagnostic::span_handler;\n \n export link_meta;\n export encode_parms;\n@@ -45,6 +45,7 @@ type encode_inlined_item = fn@(ecx: @encode_ctxt,\n                                ii: ast::inlined_item);\n \n type encode_parms = {\n+    diag: span_handler,\n     tcx: ty::ctxt,\n     reachable: hashmap<ast::node_id, ()>,\n     exp_map: resolve::exp_map,\n@@ -57,6 +58,7 @@ type encode_parms = {\n };\n \n enum encode_ctxt = {\n+    diag: span_handler,\n     tcx: ty::ctxt,\n     reachable: hashmap<ast::node_id, ()>,\n     exp_map: resolve::exp_map,\n@@ -281,7 +283,8 @@ fn def_to_str(did: def_id) -> str { ret #fmt[\"%d:%d\", did.crate, did.node]; }\n \n fn encode_type_param_bounds(ebml_w: ebml::writer, ecx: @encode_ctxt,\n                             params: [ty_param]) {\n-    let ty_str_ctxt = @{ds: def_to_str,\n+    let ty_str_ctxt = @{diag: ecx.diag,\n+                        ds: def_to_str,\n                         tcx: ecx.tcx,\n                         reachable: reachable(ecx, _),\n                         abbrevs: tyencode::ac_use_abbrevs(ecx.type_abbrevs)};\n@@ -301,7 +304,8 @@ fn encode_variant_id(ebml_w: ebml::writer, vid: def_id) {\n \n fn write_type(ecx: @encode_ctxt, ebml_w: ebml::writer, typ: ty::t) {\n     let ty_str_ctxt =\n-        @{ds: def_to_str,\n+        @{diag: ecx.diag,\n+          ds: def_to_str,\n           tcx: ecx.tcx,\n           reachable: reachable(ecx, _),\n           abbrevs: tyencode::ac_use_abbrevs(ecx.type_abbrevs)};\n@@ -318,8 +322,10 @@ fn encode_symbol(ecx: @encode_ctxt, ebml_w: ebml::writer, id: node_id) {\n     ebml_w.start_tag(tag_items_data_item_symbol);\n     let sym = alt ecx.item_symbols.find(id) {\n       some(x) { x }\n-      none { ecx.tcx.sess.bug(#fmt(\"encode_symbol: \\\n-                    id not found %d\", id)); }\n+      none {\n+        ecx.diag.handler().bug(\n+            #fmt(\"encode_symbol: id not found %d\", id));\n+      }\n     };\n     ebml_w.writer.write(str::bytes(sym));\n     ebml_w.end_tag();\n@@ -426,8 +432,8 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: ebml::writer, md: _mod,\n             } // for\n       } // list::cons alt\n       _ {\n-          ecx.tcx.sess.bug(#fmt(\"encode_info_for_mod: empty impl_map \\\n-            entry for %?\", path));\n+          ecx.diag.handler().bug(#fmt(\"encode_info_for_mod: empty impl_map \\\n+                                       entry for %?\", path));\n       }\n     }\n     encode_path(ebml_w, path, ast_map::path_mod(name));\n@@ -1057,6 +1063,7 @@ fn encode_hash(ebml_w: ebml::writer, hash: str) {\n \n fn encode_metadata(parms: encode_parms, crate: @crate) -> [u8] {\n     let ecx: @encode_ctxt = @encode_ctxt({\n+        diag: parms.diag,\n         tcx: parms.tcx,\n         reachable: parms.reachable,\n         exp_map: parms.exp_map,\n@@ -1102,7 +1109,8 @@ fn encode_metadata(parms: encode_parms, crate: @crate) -> [u8] {\n \n // Get the encoded string for a type\n fn encoded_ty(tcx: ty::ctxt, t: ty::t) -> str {\n-    let cx = @{ds: def_to_str,\n+    let cx = @{diag: tcx.diag,\n+               ds: def_to_str,\n                tcx: tcx,\n                reachable: {|_id| false},\n                abbrevs: tyencode::ac_no_abbrevs};"}, {"sha": "aae0f7c392448606a11261b5455baeb72ba5299e", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "patch": "@@ -6,8 +6,6 @@ import syntax::ast_util;\n import syntax::ast_util::respan;\n import middle::ty;\n import std::map::hashmap;\n-import driver::session;\n-import session::session;\n \n export parse_ty_data, parse_def_id, parse_ident;\n export parse_bounds_data;"}, {"sha": "ee60b297cb8ae7a996c3d83677beb5d9152be6f2", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "patch": "@@ -3,7 +3,7 @@\n import io::writer_util;\n import std::map::hashmap;\n import syntax::ast::*;\n-import driver::session::session;\n+import syntax::diagnostic::span_handler;\n import middle::ty;\n import middle::ty::vid;\n import syntax::print::pprust::*;\n@@ -17,6 +17,7 @@ export enc_bounds;\n export enc_mode;\n \n type ctxt = {\n+    diag: span_handler,\n     // Def -> str Callback:\n     ds: fn@(def_id) -> str,\n     // The type context.\n@@ -145,7 +146,7 @@ fn enc_region(w: io::writer, cx: @ctxt, r: ty::region) {\n       }\n       ty::re_var(_) {\n         // these should not crop up after typeck\n-        cx.tcx.sess.bug(\"Cannot encode region variables\");\n+        cx.diag.handler().bug(\"Cannot encode region variables\");\n       }\n     }\n }"}, {"sha": "e9c24727f20ef902a45611fa9ffbed31b3fb1bf9", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "patch": "@@ -681,7 +681,8 @@ impl helpers for ebml::ebml_deserializer {\n \n impl helpers for @e::encode_ctxt {\n     fn ty_str_ctxt() -> @tyencode::ctxt {\n-        @{ds: e::def_to_str,\n+        @{diag: self.tcx.sess.diagnostic(),\n+          ds: e::def_to_str,\n           tcx: self.tcx,\n           reachable: encoder::reachable(self, _),\n           abbrevs: tyencode::ac_use_abbrevs(self.type_abbrevs)}"}, {"sha": "9ef307e3ea719eaadb5c34f6ef92ca5f214d3547", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "patch": "@@ -4998,6 +4998,7 @@ fn crate_ctxt_to_encode_parms(cx: @crate_ctxt)\n         bind astencode::encode_inlined_item(_, _, _, _, cx.maps);\n \n     {\n+        diag: cx.sess.diagnostic(),\n         tcx: cx.tcx,\n         reachable: cx.reachable,\n         exp_map: cx.exp_map,"}, {"sha": "d6f592790280bde0f8a9e7805440b8805d69b92b", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452fc46ffcff5b7e1dfc475b892bef8c0547e7e1/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=452fc46ffcff5b7e1dfc475b892bef8c0547e7e1", "patch": "@@ -200,7 +200,8 @@ enum ast_ty_to_ty_cache_entry {\n }\n \n type ctxt =\n-    @{interner: hashmap<intern_key, t_box>,\n+    @{diag: syntax::diagnostic::span_handler,\n+      interner: hashmap<intern_key, t_box>,\n       mut next_id: uint,\n       sess: session::session,\n       def_map: resolve::def_map,\n@@ -462,7 +463,8 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n         hash_type_structure(k.struct) +\n             option::map_default(k.o_def_id, 0u, ast_util::hash_def_id)\n     }, {|&&a, &&b| a == b});\n-    @{interner: interner,\n+    @{diag: s.diagnostic(),\n+      interner: interner,\n       mut next_id: 0u,\n       sess: s,\n       def_map: dm,"}]}