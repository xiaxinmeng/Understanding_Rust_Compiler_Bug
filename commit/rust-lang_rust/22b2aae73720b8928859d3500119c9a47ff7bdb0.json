{"sha": "22b2aae73720b8928859d3500119c9a47ff7bdb0", "node_id": "C_kwDOAAsO6NoAKDIyYjJhYWU3MzcyMGI4OTI4ODU5ZDM1MDAxMTljOWE0N2ZmN2JkYjA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-15T05:37:32Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-22T18:58:07Z"}, "message": "Do not resolve associated const when there is no provided value", "tree": {"sha": "b5d22cb58d7f25aa9a45e3cf98d185bd96c51422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5d22cb58d7f25aa9a45e3cf98d185bd96c51422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22b2aae73720b8928859d3500119c9a47ff7bdb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22b2aae73720b8928859d3500119c9a47ff7bdb0", "html_url": "https://github.com/rust-lang/rust/commit/22b2aae73720b8928859d3500119c9a47ff7bdb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22b2aae73720b8928859d3500119c9a47ff7bdb0/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d25f21dc008785f52e7c2833de4f4236b1066b", "url": "https://api.github.com/repos/rust-lang/rust/commits/22d25f21dc008785f52e7c2833de4f4236b1066b", "html_url": "https://github.com/rust-lang/rust/commit/22d25f21dc008785f52e7c2833de4f4236b1066b"}], "stats": {"total": 93, "additions": 50, "deletions": 43}, "files": [{"sha": "decbf0133114f23ce21f3f72ab796f69bcddf176", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/22b2aae73720b8928859d3500119c9a47ff7bdb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2aae73720b8928859d3500119c9a47ff7bdb0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=22b2aae73720b8928859d3500119c9a47ff7bdb0", "patch": "@@ -185,14 +185,20 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n         }\n         let concrete = infcx.const_eval_resolve(param_env, uv.expand(), Some(span));\n         match concrete {\n-            Err(ErrorHandled::TooGeneric) => Err(if !uv.has_infer_types_or_consts() {\n+            Err(ErrorHandled::TooGeneric) => Err(if uv.has_infer_types_or_consts() {\n+                NotConstEvaluatable::MentionsInfer\n+            } else if uv.has_param_types_or_consts() {\n                 infcx\n                     .tcx\n                     .sess\n                     .delay_span_bug(span, &format!(\"unexpected `TooGeneric` for {:?}\", uv));\n                 NotConstEvaluatable::MentionsParam\n             } else {\n-                NotConstEvaluatable::MentionsInfer\n+                let guar = infcx.tcx.sess.delay_span_bug(\n+                    span,\n+                    format!(\"Missing value for constant, but no error reported?\"),\n+                );\n+                NotConstEvaluatable::Error(guar)\n             }),\n             Err(ErrorHandled::Linted) => {\n                 let reported = infcx\n@@ -240,8 +246,11 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n \n             Err(ErrorHandled::TooGeneric) => Err(if uv.has_infer_types_or_consts() {\n                 NotConstEvaluatable::MentionsInfer\n-                } else {\n+                } else if uv.has_param_types_or_consts() {\n                 NotConstEvaluatable::MentionsParam\n+            } else {\n+                let guar = infcx.tcx.sess.delay_span_bug(span, format!(\"Missing value for constant, but no error reported?\"));\n+                NotConstEvaluatable::Error(guar)\n             }),\n             Err(ErrorHandled::Linted) => {\n                 let reported ="}, {"sha": "979e997f2449162aa01878f507c8ce73aed1c8b8", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22b2aae73720b8928859d3500119c9a47ff7bdb0/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2aae73720b8928859d3500119c9a47ff7bdb0/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=22b2aae73720b8928859d3500119c9a47ff7bdb0", "patch": "@@ -280,6 +280,11 @@ fn resolve_associated_item<'tcx>(\n                 return Ok(None);\n             }\n \n+            // If the item does not have a value, then we cannot return an instance.\n+            if !leaf_def.item.defaultness.has_value() {\n+                return Ok(None);\n+            }\n+\n             let substs = tcx.erase_regions(substs);\n \n             // Check if we just resolved an associated `const` declaration from"}, {"sha": "b024decd4e11c47febab19e1329e0d033d41e05a", "filename": "src/test/ui/const-generics/issues/issue-86530.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs?ref=22b2aae73720b8928859d3500119c9a47ff7bdb0", "patch": "@@ -15,7 +15,6 @@ where\n fn unit_literals() {\n     z(\" \");\n     //~^ ERROR: the trait bound `&str: X` is not satisfied\n-    //~| ERROR: unconstrained generic constant\n }\n \n fn main() {}"}, {"sha": "c63857b2314e9422f5fe31f8f78409df45b212a2", "filename": "src/test/ui/const-generics/issues/issue-86530.stderr", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr?ref=22b2aae73720b8928859d3500119c9a47ff7bdb0", "patch": "@@ -15,22 +15,6 @@ LL | where\n LL |     T: X,\n    |        ^ required by this bound in `z`\n \n-error: unconstrained generic constant\n-  --> $DIR/issue-86530.rs:16:5\n-   |\n-LL |     z(\" \");\n-   |     ^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); T::Y]:`\n-note: required by a bound in `z`\n-  --> $DIR/issue-86530.rs:11:10\n-   |\n-LL | fn z<T>(t: T)\n-   |    - required by a bound in this\n-...\n-LL |     [(); T::Y]: ,\n-   |          ^^^^ required by this bound in `z`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "fc8666bbcdb79c1862463b271400f2935c0c0f74", "filename": "src/test/ui/const-generics/issues/issue-98629.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.rs?ref=22b2aae73720b8928859d3500119c9a47ff7bdb0", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_trait_impl)]\n+\n+trait Trait {\n+    const N: usize;\n+}\n+\n+impl const Trait for i32 {}\n+//~^ ERROR not all trait items implemented, missing: `N`\n+\n+fn f()\n+where\n+    [(); <i32 as Trait>::N]:,\n+{}\n+\n+fn main() {}"}, {"sha": "53570220882c34a68f17015a74dc92beb7abc085", "filename": "src/test/ui/const-generics/issues/issue-98629.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-98629.stderr?ref=22b2aae73720b8928859d3500119c9a47ff7bdb0", "patch": "@@ -0,0 +1,12 @@\n+error[E0046]: not all trait items implemented, missing: `N`\n+  --> $DIR/issue-98629.rs:7:1\n+   |\n+LL |     const N: usize;\n+   |     -------------- `N` from trait\n+...\n+LL | impl const Trait for i32 {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ missing `N` in implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "966d76d148af3f69d901198d4955d3b4654d769a", "filename": "src/test/ui/issues/issue-77919.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.rs?ref=22b2aae73720b8928859d3500119c9a47ff7bdb0", "patch": "@@ -1,6 +1,5 @@\n fn main() {\n     [1; <Multiply<Five, Five>>::VAL];\n-    //~^ ERROR: constant expression depends on a generic parameter\n }\n trait TypeVal<T> {\n     const VAL: T;"}, {"sha": "ca256847b1f3bb9589f82a5d9371395e83e5bb8b", "filename": "src/test/ui/issues/issue-77919.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77919.stderr?ref=22b2aae73720b8928859d3500119c9a47ff7bdb0", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `PhantomData` in this scope\n-  --> $DIR/issue-77919.rs:10:9\n+  --> $DIR/issue-77919.rs:9:9\n    |\n LL |     _n: PhantomData,\n    |         ^^^^^^^^^^^ not found in this scope\n@@ -10,31 +10,23 @@ LL | use std::marker::PhantomData;\n    |\n \n error[E0412]: cannot find type `VAL` in this scope\n-  --> $DIR/issue-77919.rs:12:63\n+  --> $DIR/issue-77919.rs:11:63\n    |\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    |          -                                                    ^^^ not found in this scope\n    |          |\n    |          help: you might be missing a type parameter: `, VAL`\n \n error[E0046]: not all trait items implemented, missing: `VAL`\n-  --> $DIR/issue-77919.rs:12:1\n+  --> $DIR/issue-77919.rs:11:1\n    |\n LL |     const VAL: T;\n    |     ------------ `VAL` from trait\n ...\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-77919.rs:2:9\n-   |\n-LL |     [1; <Multiply<Five, Five>>::VAL];\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0046, E0412.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "638e4a5484932d3585c593c489fda1e5b4e89beb", "filename": "src/tools/clippy/tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22b2aae73720b8928859d3500119c9a47ff7bdb0/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=22b2aae73720b8928859d3500119c9a47ff7bdb0", "patch": "@@ -30,15 +30,7 @@ LL |     const VAL: T;\n LL | impl<N, M> TypeVal<usize> for Multiply<N, M> where N: TypeVal<VAL> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `VAL` in implementation\n \n-error: constant expression depends on a generic parameter\n-  --> $DIR/ice-6252.rs:13:9\n-   |\n-LL |     [1; <Multiply<Five, Five>>::VAL];\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0046, E0412.\n For more information about an error, try `rustc --explain E0046`."}]}