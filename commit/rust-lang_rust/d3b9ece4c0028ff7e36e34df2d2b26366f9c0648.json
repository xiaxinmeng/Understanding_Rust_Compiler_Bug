{"sha": "d3b9ece4c0028ff7e36e34df2d2b26366f9c0648", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYjllY2U0YzAwMjhmZjdlMzZlMzRkZjJkMmIyNjM2NmY5YzA2NDg=", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2020-08-16T23:24:59Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2020-08-30T18:58:03Z"}, "message": "add tests related to tuple scalar layout with ZST in last field", "tree": {"sha": "a794aed3f4f13f3e355f2ed2c51e1021055c88b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a794aed3f4f13f3e355f2ed2c51e1021055c88b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648", "html_url": "https://github.com/rust-lang/rust/commit/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85fbf49ce0e2274d0acf798f6e703747674feec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/85fbf49ce0e2274d0acf798f6e703747674feec3", "html_url": "https://github.com/rust-lang/rust/commit/85fbf49ce0e2274d0acf798f6e703747674feec3"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "e86c75f3f482607b204d715d879f4cfa5b136a40", "filename": "src/test/codegen/tuple-layout-opt.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648/src%2Ftest%2Fcodegen%2Ftuple-layout-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648/src%2Ftest%2Fcodegen%2Ftuple-layout-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftuple-layout-opt.rs?ref=d3b9ece4c0028ff7e36e34df2d2b26366f9c0648", "patch": "@@ -0,0 +1,36 @@\n+// ignore-emscripten\n+// compile-flags: -C no-prepopulate-passes\n+\n+// Test that tuples get optimized layout, in particular with a ZST in the last field (#63244)\n+\n+#![crate_type=\"lib\"]\n+\n+type ScalarZstLast = (u128, ());\n+// CHECK: define i128 @test_ScalarZstLast(i128 %_1)\n+#[no_mangle]\n+pub fn test_ScalarZstLast(_: ScalarZstLast) -> ScalarZstLast { loop {} }\n+\n+type ScalarZstFirst = ((), u128);\n+// CHECK: define i128 @test_ScalarZstFirst(i128 %_1)\n+#[no_mangle]\n+pub fn test_ScalarZstFirst(_: ScalarZstFirst) -> ScalarZstFirst { loop {} }\n+\n+type ScalarPairZstLast = (u8, u128, ());\n+// CHECK: define { i128, i8 } @test_ScalarPairZstLast(i128 %_1.0, i8 %_1.1)\n+#[no_mangle]\n+pub fn test_ScalarPairZstLast(_: ScalarPairZstLast) -> ScalarPairZstLast { loop {} }\n+\n+type ScalarPairZstFirst = ((), u8, u128);\n+// CHECK: define { i8, i128 } @test_ScalarPairZstFirst(i8 %_1.0, i128 %_1.1)\n+#[no_mangle]\n+pub fn test_ScalarPairZstFirst(_: ScalarPairZstFirst) -> ScalarPairZstFirst { loop {} }\n+\n+type ScalarPairLotsOfZsts = ((), u8, (), u128, ());\n+// CHECK: define { i128, i8 } @test_ScalarPairLotsOfZsts(i128 %_1.0, i8 %_1.1)\n+#[no_mangle]\n+pub fn test_ScalarPairLotsOfZsts(_: ScalarPairLotsOfZsts) -> ScalarPairLotsOfZsts { loop {} }\n+\n+type ScalarPairLottaNesting = (((), ((), u8, (), u128, ())), ());\n+// CHECK: define { i128, i8 } @test_ScalarPairLottaNesting(i128 %_1.0, i8 %_1.1)\n+#[no_mangle]\n+pub fn test_ScalarPairLottaNesting(_: ScalarPairLottaNesting) -> ScalarPairLottaNesting { loop {} }"}, {"sha": "26b923f431f98cf6ad2588a924d796f0ab859974", "filename": "src/test/ui/dynamically-sized-types/dst-tuple-no-reorder.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-tuple-no-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-tuple-no-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdynamically-sized-types%2Fdst-tuple-no-reorder.rs?ref=d3b9ece4c0028ff7e36e34df2d2b26366f9c0648", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+\n+#![feature(unsized_tuple_coercion)]\n+\n+// Ensure that unsizable fields that might be accessed don't get reordered\n+\n+fn nonzero_size() {\n+    let sized: (u8, [u32; 2]) = (123, [456, 789]);\n+    let unsize: &(u8, [u32]) = &sized;\n+    assert_eq!(unsize.0, 123);\n+    assert_eq!(unsize.1.len(), 2);\n+    assert_eq!(unsize.1[0], 456);\n+    assert_eq!(unsize.1[1], 789);\n+}\n+\n+fn zst() {\n+    let sized: (u8, [u32; 0]) = (123, []);\n+    let unsize: &(u8, [u32]) = &sized;\n+    assert_eq!(unsize.0, 123);\n+    assert_eq!(unsize.1.len(), 0);\n+}\n+\n+pub fn main() {\n+    nonzero_size();\n+    zst();\n+}"}, {"sha": "629b50dec65f900556c3f9f87c30d0566ca208af", "filename": "src/test/ui/mir/mir_const_prop_tuple_field_reorder.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648/src%2Ftest%2Fui%2Fmir%2Fmir_const_prop_tuple_field_reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b9ece4c0028ff7e36e34df2d2b26366f9c0648/src%2Ftest%2Fui%2Fmir%2Fmir_const_prop_tuple_field_reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_const_prop_tuple_field_reorder.rs?ref=d3b9ece4c0028ff7e36e34df2d2b26366f9c0648", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: -Z mir-opt-level=2\n+// build-pass\n+#![crate_type=\"lib\"]\n+\n+// This used to ICE: const-prop did not account for field reordering of scalar pairs,\n+// and would generate a tuple like `(0x1337, VariantBar): (FooEnum, isize)`,\n+// causing assertion failures in codegen when trying to read 0x1337 at the wrong type.\n+\n+pub enum FooEnum {\n+    VariantBar,\n+    VariantBaz,\n+    VariantBuz,\n+}\n+\n+pub fn wrong_index() -> isize {\n+    let (_, b) = id((FooEnum::VariantBar, 0x1337));\n+    b\n+}\n+\n+pub fn wrong_index_two() -> isize {\n+    let (_, (_, b)) = id(((), (FooEnum::VariantBar, 0x1338)));\n+    b\n+}\n+\n+fn id<T>(x: T) -> T {\n+    x\n+}"}]}