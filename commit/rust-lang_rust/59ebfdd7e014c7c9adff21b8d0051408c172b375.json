{"sha": "59ebfdd7e014c7c9adff21b8d0051408c172b375", "node_id": "C_kwDOAAsO6NoAKDU5ZWJmZGQ3ZTAxNGM3YzlhZGZmMjFiOGQwMDUxNDA4YzE3MmIzNzU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-13T12:55:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-13T12:55:16Z"}, "message": "Rollup merge of #89817 - m-ou-se:int-log-10-inline, r=the8472\n\nAdd #[inline] to int log10 functions.", "tree": {"sha": "8f4d8adbee75b5d596ba03016759e30d812bf4a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f4d8adbee75b5d596ba03016759e30d812bf4a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59ebfdd7e014c7c9adff21b8d0051408c172b375", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZtc0CRBK7hj4Ov3rIwAAHasIAKs0ZgTGE0WK308rXyQB6scG\nyGcOSmfmCwD7e+dTFxrWSVdiuUK6nPVJjl4iSY/cL20Fz0YwPA/wV2GmO5FuxEMj\nnVodCgazFrfyylmArUG+/IUuHW/8ln7FfEG0djOsC2IuGJgHw2vPlOhNax2gubBw\nW7Bl4ze0lByTXxLcz2uza4VNkWcYGgUfuI3kCy169+4pmHpseDTISuJ7o0HUdR7y\nN9V1LIuVEdr8rYd9tyGi04P8ZfHWqVSNErrQj6Wnivkve1OTzTTMhjUvHjkgcD5t\ncETDWA0a19NM4iAQoW78P6OBs/ihmcURcwgEyBEMbIAfx8SISZZQWdbHoxN+GsE=\n=O49e\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f4d8adbee75b5d596ba03016759e30d812bf4a5\nparent 7948883754341f3b5917ac549c190082a69347c2\nparent a6bb1fb6410ead3ce3fb828559cd1a8a389278d1\nauthor Yuki Okushi <jtitor@2k36.org> 1634129716 +0900\ncommitter GitHub <noreply@github.com> 1634129716 +0900\n\nRollup merge of #89817 - m-ou-se:int-log-10-inline, r=the8472\n\nAdd #[inline] to int log10 functions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59ebfdd7e014c7c9adff21b8d0051408c172b375", "html_url": "https://github.com/rust-lang/rust/commit/59ebfdd7e014c7c9adff21b8d0051408c172b375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59ebfdd7e014c7c9adff21b8d0051408c172b375/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7948883754341f3b5917ac549c190082a69347c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7948883754341f3b5917ac549c190082a69347c2", "html_url": "https://github.com/rust-lang/rust/commit/7948883754341f3b5917ac549c190082a69347c2"}, {"sha": "a6bb1fb6410ead3ce3fb828559cd1a8a389278d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6bb1fb6410ead3ce3fb828559cd1a8a389278d1", "html_url": "https://github.com/rust-lang/rust/commit/a6bb1fb6410ead3ce3fb828559cd1a8a389278d1"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "a8455fb355b3ce16eba03d21fd70b7cd100c56da", "filename": "library/core/src/num/int_log10.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59ebfdd7e014c7c9adff21b8d0051408c172b375/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ebfdd7e014c7c9adff21b8d0051408c172b375/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs?ref=59ebfdd7e014c7c9adff21b8d0051408c172b375", "patch": "@@ -1,5 +1,6 @@\n mod unchecked {\n     // 0 < val <= u8::MAX\n+    #[inline]\n     pub const fn u8(val: u8) -> u32 {\n         let val = val as u32;\n \n@@ -20,6 +21,7 @@ mod unchecked {\n     }\n \n     // 0 < val < 100_000\n+    #[inline]\n     const fn less_than_5(val: u32) -> u32 {\n         // Similar to u8, when adding one of these constants to val,\n         // we get two possible bit patterns above the low 17 bits,\n@@ -40,11 +42,13 @@ mod unchecked {\n     }\n \n     // 0 < val <= u16::MAX\n+    #[inline]\n     pub const fn u16(val: u16) -> u32 {\n         less_than_5(val as u32)\n     }\n \n     // 0 < val <= u32::MAX\n+    #[inline]\n     pub const fn u32(mut val: u32) -> u32 {\n         let mut log = 0;\n         if val >= 100_000 {\n@@ -55,6 +59,7 @@ mod unchecked {\n     }\n \n     // 0 < val <= u64::MAX\n+    #[inline]\n     pub const fn u64(mut val: u64) -> u32 {\n         let mut log = 0;\n         if val >= 10_000_000_000 {\n@@ -69,6 +74,7 @@ mod unchecked {\n     }\n \n     // 0 < val <= u128::MAX\n+    #[inline]\n     pub const fn u128(mut val: u128) -> u32 {\n         let mut log = 0;\n         if val >= 100_000_000_000_000_000_000_000_000_000_000 {\n@@ -84,33 +90,39 @@ mod unchecked {\n     }\n \n     // 0 < val <= i8::MAX\n+    #[inline]\n     pub const fn i8(val: i8) -> u32 {\n         u8(val as u8)\n     }\n \n     // 0 < val <= i16::MAX\n+    #[inline]\n     pub const fn i16(val: i16) -> u32 {\n         u16(val as u16)\n     }\n \n     // 0 < val <= i32::MAX\n+    #[inline]\n     pub const fn i32(val: i32) -> u32 {\n         u32(val as u32)\n     }\n \n     // 0 < val <= i64::MAX\n+    #[inline]\n     pub const fn i64(val: i64) -> u32 {\n         u64(val as u64)\n     }\n \n     // 0 < val <= i128::MAX\n+    #[inline]\n     pub const fn i128(val: i128) -> u32 {\n         u128(val as u128)\n     }\n }\n \n macro_rules! impl_checked {\n     ($T:ident) => {\n+        #[inline]\n         pub const fn $T(val: $T) -> Option<u32> {\n             if val > 0 { Some(unchecked::$T(val)) } else { None }\n         }"}]}