{"sha": "b5830fbf9222b9a83309dc61fe1df480b0c3b153", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ODMwZmJmOTIyMmI5YTgzMzA5ZGM2MWZlMWRmNDgwYjBjM2IxNTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-17T08:30:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T08:30:08Z"}, "message": "Merge #9306\n\n9306: internal: minimize minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b927b06a3f866f6ebac907d7714fa05af7422d4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b927b06a3f866f6ebac907d7714fa05af7422d4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5830fbf9222b9a83309dc61fe1df480b0c3b153", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgywgQCRBK7hj4Ov3rIwAAUkkIAFolPnF6Q7Ir9K9q5SD2QWxj\n5g2llLv4kbQJLfYaz/3UO0xlN7tx6E2flMloaFJZnly/qJYLRj1uGhKCbGgBV4rI\nmmPgqy3CH7MofezxvqsNVaPDyy4dKraPvGP8xzPx7yddPPWX7M56+o7xhxNo7GSg\n79i+s0BYJpMgWy8zoFG4NJIXoCNenpdPZp+095Jh5vSWilIyTrHkdEsx9My7sqyy\n1YvRuOe480GAJFxqGlFZkchmCJQvd8WJXGQ9nUCh06U9tvJGIBZGUInj2fcDsRDP\naFkPUXF0aVyWtwtv25IFCqAh14BnMXqJkoiL5zE8G4Iia6kAkojdMFWw17INK2M=\n=AqVq\n-----END PGP SIGNATURE-----\n", "payload": "tree b927b06a3f866f6ebac907d7714fa05af7422d4e\nparent 7b4f5c0262bbdf7e9db81734eb9c82dd04eb82cb\nparent c42cdff3d2ed2e30add09dd0d602181b6f83534d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623918608 +0000\ncommitter GitHub <noreply@github.com> 1623918608 +0000\n\nMerge #9306\n\n9306: internal: minimize minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5830fbf9222b9a83309dc61fe1df480b0c3b153", "html_url": "https://github.com/rust-lang/rust/commit/b5830fbf9222b9a83309dc61fe1df480b0c3b153", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5830fbf9222b9a83309dc61fe1df480b0c3b153/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b4f5c0262bbdf7e9db81734eb9c82dd04eb82cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b4f5c0262bbdf7e9db81734eb9c82dd04eb82cb", "html_url": "https://github.com/rust-lang/rust/commit/7b4f5c0262bbdf7e9db81734eb9c82dd04eb82cb"}, {"sha": "c42cdff3d2ed2e30add09dd0d602181b6f83534d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42cdff3d2ed2e30add09dd0d602181b6f83534d", "html_url": "https://github.com/rust-lang/rust/commit/c42cdff3d2ed2e30add09dd0d602181b6f83534d"}], "stats": {"total": 150, "additions": 80, "deletions": 70}, "files": [{"sha": "335d57a0df33118ef8dab0b2398665315e331e38", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b5830fbf9222b9a83309dc61fe1df480b0c3b153/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5830fbf9222b9a83309dc61fe1df480b0c3b153/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b5830fbf9222b9a83309dc61fe1df480b0c3b153", "patch": "@@ -434,7 +434,6 @@ fn get_callable(\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n-    use ide_db::helpers::FamousDefs;\n     use test_utils::extract_annotations;\n \n     use crate::{fixture, inlay_hints::InlayHintsConfig};\n@@ -487,8 +486,6 @@ mod tests {\n     }\n \n     fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n-        let ra_fixture =\n-            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n         let (analysis, file_id) = fixture::file(&ra_fixture);\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n@@ -498,8 +495,6 @@ mod tests {\n     }\n \n     fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n-        let ra_fixture =\n-            format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n         let (analysis, file_id) = fixture::file(&ra_fixture);\n         let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n         expect.assert_debug_eq(&inlay_hints)\n@@ -823,6 +818,7 @@ fn main() {\n     fn shorten_iterators_in_associated_params() {\n         check_types(\n             r#\"\n+//- minicore: iterators\n use core::iter;\n \n pub struct SomeIter<T> {}\n@@ -875,7 +871,7 @@ fn main() {\n     fn fn_hints() {\n         check_types(\n             r#\"\n-trait Sized {}\n+//- minicore: fn, sized\n \n fn foo() -> impl Fn() { loop {} }\n fn foo1() -> impl Fn(f64) { loop {} }\n@@ -1073,6 +1069,7 @@ fn main() {\n     fn complete_for_hint() {\n         check_types(\n             r#\"\n+//- minicore: iterator\n pub struct Vec<T> {}\n \n impl<T> Vec<T> {\n@@ -1129,6 +1126,7 @@ fn main() {\n     fn shorten_iterator_hints() {\n         check_types(\n             r#\"\n+//- minicore: iterators\n use core::iter;\n \n struct MyIter;\n@@ -1230,12 +1228,12 @@ fn main() {\n             expect![[r#\"\n                 [\n                     InlayHint {\n-                        range: 148..173,\n+                        range: 147..172,\n                         kind: ChainingHint,\n                         label: \"B\",\n                     },\n                     InlayHint {\n-                        range: 148..155,\n+                        range: 147..154,\n                         kind: ChainingHint,\n                         label: \"A\",\n                     },\n@@ -1290,12 +1288,12 @@ fn main() {\n             expect![[r#\"\n                 [\n                     InlayHint {\n-                        range: 144..191,\n+                        range: 143..190,\n                         kind: ChainingHint,\n                         label: \"C\",\n                     },\n                     InlayHint {\n-                        range: 144..180,\n+                        range: 143..179,\n                         kind: ChainingHint,\n                         label: \"B\",\n                     },\n@@ -1335,12 +1333,12 @@ fn main() {\n             expect![[r#\"\n                 [\n                     InlayHint {\n-                        range: 247..284,\n+                        range: 246..283,\n                         kind: ChainingHint,\n                         label: \"B<X<i32, bool>>\",\n                     },\n                     InlayHint {\n-                        range: 247..266,\n+                        range: 246..265,\n                         kind: ChainingHint,\n                         label: \"A<X<i32, bool>>\",\n                     },\n@@ -1359,6 +1357,7 @@ fn main() {\n                 max_length: None,\n             },\n             r#\"\n+//- minicore: iterators\n use core::iter;\n \n struct MyIter;\n@@ -1381,22 +1380,22 @@ fn main() {\n             expect![[r#\"\n                 [\n                     InlayHint {\n-                        range: 175..242,\n+                        range: 174..241,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n                     },\n                     InlayHint {\n-                        range: 175..225,\n+                        range: 174..224,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n                     },\n                     InlayHint {\n-                        range: 175..207,\n+                        range: 174..206,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n                     },\n                     InlayHint {\n-                        range: 175..190,\n+                        range: 174..189,\n                         kind: ChainingHint,\n                         label: \"&mut MyIter\",\n                     },"}, {"sha": "5f2aa016f48cbd5a491e560b5af17754d08db573", "filename": "crates/ide_assists/src/handlers/replace_for_loop_with_for_each.rs", "status": "modified", "additions": 25, "deletions": 53, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b5830fbf9222b9a83309dc61fe1df480b0c3b153/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5830fbf9222b9a83309dc61fe1df480b0c3b153/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs?ref=b5830fbf9222b9a83309dc61fe1df480b0c3b153", "patch": "@@ -186,18 +186,14 @@ fn main() {\n     fn test_for_borrowed() {\n         check_assist(\n             replace_for_loop_with_for_each,\n-            r\"\n-//- minicore: iterator\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n+            r#\"\n+//- minicore: iterators\n+use core::iter::{Repeat, repeat};\n \n struct S;\n impl S {\n-    fn iter(&self) -> Iter { Iter }\n-    fn iter_mut(&mut self) -> Iter { Iter }\n+    fn iter(&self) -> Repeat<i32> { repeat(92) }\n+    fn iter_mut(&mut self) -> Repeat<i32> { repeat(92) }\n }\n \n fn main() {\n@@ -206,18 +202,14 @@ fn main() {\n         let a = v * 2;\n     }\n }\n-\",\n-            r\"\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n+\"#,\n+            r#\"\n+use core::iter::{Repeat, repeat};\n \n struct S;\n impl S {\n-    fn iter(&self) -> Iter { Iter }\n-    fn iter_mut(&mut self) -> Iter { Iter }\n+    fn iter(&self) -> Repeat<i32> { repeat(92) }\n+    fn iter_mut(&mut self) -> Repeat<i32> { repeat(92) }\n }\n \n fn main() {\n@@ -226,7 +218,7 @@ fn main() {\n         let a = v * 2;\n     });\n }\n-\",\n+\"#,\n         )\n     }\n \n@@ -259,18 +251,14 @@ fn main() {\n     fn test_for_borrowed_mut() {\n         check_assist(\n             replace_for_loop_with_for_each,\n-            r\"\n-//- minicore: iterator\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n+            r#\"\n+//- minicore: iterators\n+use core::iter::{Repeat, repeat};\n \n struct S;\n impl S {\n-    fn iter(&self) -> Iter { Iter }\n-    fn iter_mut(&mut self) -> Iter { Iter }\n+    fn iter(&self) -> Repeat<i32> { repeat(92) }\n+    fn iter_mut(&mut self) -> Repeat<i32> { repeat(92) }\n }\n \n fn main() {\n@@ -279,18 +267,14 @@ fn main() {\n         let a = v * 2;\n     }\n }\n-\",\n-            r\"\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n+\"#,\n+            r#\"\n+use core::iter::{Repeat, repeat};\n \n struct S;\n impl S {\n-    fn iter(&self) -> Iter { Iter }\n-    fn iter_mut(&mut self) -> Iter { Iter }\n+    fn iter(&self) -> Repeat<i32> { repeat(92) }\n+    fn iter_mut(&mut self) -> Repeat<i32> { repeat(92) }\n }\n \n fn main() {\n@@ -299,7 +283,7 @@ fn main() {\n         let a = v * 2;\n     });\n }\n-\",\n+\"#,\n         )\n     }\n \n@@ -332,28 +316,16 @@ fn main() {\n         check_assist(\n             replace_for_loop_with_for_each,\n             r#\"\n-//- minicore: iterator\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n-\n+//- minicore: iterators\n fn main() {\n-    for$0 a in Iter.take(1) {\n+    for$0 a in core::iter::repeat(92).take(1) {\n         println!(\"{}\", a);\n     }\n }\n \"#,\n             r#\"\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n-\n fn main() {\n-    Iter.take(1).for_each(|a| {\n+    core::iter::repeat(92).take(1).for_each(|a| {\n         println!(\"{}\", a);\n     });\n }"}, {"sha": "8d8f3b560c48bce4318fbecb48efab994ca57f50", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5830fbf9222b9a83309dc61fe1df480b0c3b153/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5830fbf9222b9a83309dc61fe1df480b0c3b153/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=b5830fbf9222b9a83309dc61fe1df480b0c3b153", "patch": "@@ -154,7 +154,7 @@ impl Fixture {\n         let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n \n         let path = components[0].to_string();\n-        assert!(path.starts_with('/'));\n+        assert!(path.starts_with('/'), \"fixture path does not start with `/`: {:?}\", path);\n \n         let mut krate = None;\n         let mut deps = Vec::new();"}, {"sha": "e6d2301c78e03097f2d2b45141360b43116e81a0", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b5830fbf9222b9a83309dc61fe1df480b0c3b153/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5830fbf9222b9a83309dc61fe1df480b0c3b153/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=b5830fbf9222b9a83309dc61fe1df480b0c3b153", "patch": "@@ -21,6 +21,7 @@\n //!     option:\n //!     result:\n //!     iterator: option\n+//!     iterators: iterator\n \n pub mod marker {\n     // region:sized\n@@ -209,6 +210,7 @@ pub mod task {\n \n // region:iterator\n pub mod iter {\n+    // region:iterators\n     mod adapters {\n         pub struct Take<I> {\n             iter: I,\n@@ -228,6 +230,29 @@ pub mod iter {\n     }\n     pub use self::adapters::Take;\n \n+    mod sources {\n+        mod repeat {\n+            pub fn repeat<T>(elt: T) -> Repeat<T> {\n+                loop {}\n+            }\n+\n+            pub struct Repeat<A> {\n+                element: A,\n+            }\n+\n+            impl<A> Iterator for Repeat<A> {\n+                type Item = A;\n+\n+                fn next(&mut self) -> Option<A> {\n+                    loop {}\n+                }\n+            }\n+        }\n+        pub use self::repeat::{repeat, Repeat};\n+    }\n+    pub use self::sources::{repeat, Repeat};\n+    // endregion:iterators\n+\n     mod traits {\n         mod iterator {\n             use super::super::Take;\n@@ -239,9 +264,23 @@ pub mod iter {\n                 fn nth(&mut self, n: usize) -> Option<Self::Item> {\n                     loop {}\n                 }\n+                fn by_ref(&mut self) -> &mut Self\n+                where\n+                    Self: Sized,\n+                {\n+                    self\n+                }\n+                // region:iterators\n                 fn take(self, n: usize) -> crate::iter::Take<Self> {\n                     loop {}\n                 }\n+                // endregion:iterators\n+            }\n+            impl<I: Iterator + ?Sized> Iterator for &mut I {\n+                type Item = I::Item;\n+                fn next(&mut self) -> Option<I::Item> {\n+                    (**self).next()\n+                }\n             }\n         }\n         pub use self::iterator::Iterator;"}]}