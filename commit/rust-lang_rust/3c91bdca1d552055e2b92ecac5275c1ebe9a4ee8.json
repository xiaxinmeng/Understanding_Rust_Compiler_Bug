{"sha": "3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOTFiZGNhMWQ1NTIwNTVlMmI5MmVjYWM1Mjc1YzFlYmU5YTRlZTg=", "commit": {"author": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2020-01-29T20:34:28Z"}, "committer": {"name": "Rob Pilling", "email": "robpilling@gmail.com", "date": "2020-01-30T22:41:07Z"}, "message": "Suggest path separator for single-colon typos\n\nThis commit adds guidance for when a user means to type a path, but ends\nup typing a single colon, such as `<<Impl as T>:Ty>`.\n\nThis change seemed pertinent as the current error message is\nparticularly misleading, emitting `error: unmatched angle bracket`,\ndespite the angle bracket being matched later on, leaving the user to\ntrack down the typo'd colon.", "tree": {"sha": "b7040d4271515c92ffb98f23c45098d2e01ee2b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7040d4271515c92ffb98f23c45098d2e01ee2b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8", "html_url": "https://github.com/rust-lang/rust/commit/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8/comments", "author": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobrippling", "id": 205673, "node_id": "MDQ6VXNlcjIwNTY3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/205673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobrippling", "html_url": "https://github.com/bobrippling", "followers_url": "https://api.github.com/users/bobrippling/followers", "following_url": "https://api.github.com/users/bobrippling/following{/other_user}", "gists_url": "https://api.github.com/users/bobrippling/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobrippling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobrippling/subscriptions", "organizations_url": "https://api.github.com/users/bobrippling/orgs", "repos_url": "https://api.github.com/users/bobrippling/repos", "events_url": "https://api.github.com/users/bobrippling/events{/privacy}", "received_events_url": "https://api.github.com/users/bobrippling/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "212b2c7da87f3086af535b33a9ca6b5242f2d5a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/212b2c7da87f3086af535b33a9ca6b5242f2d5a7", "html_url": "https://github.com/rust-lang/rust/commit/212b2c7da87f3086af535b33a9ca6b5242f2d5a7"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "25ba571a6a494f9fc10e2ea1aa9334eddb133801", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8", "patch": "@@ -71,7 +71,23 @@ impl<'a> Parser<'a> {\n             debug!(\"parse_qpath: (decrement) count={:?}\", self.unmatched_angle_bracket_count);\n         }\n \n-        self.expect(&token::ModSep)?;\n+        let lo_colon = self.token.span;\n+        if self.eat(&token::Colon) {\n+            // <Bar as Baz<T>>:Qux\n+            //                ^\n+            let span = lo_colon.to(self.prev_span);\n+            self.diagnostic()\n+                .struct_span_err(span, \"found single colon where type path was expected\")\n+                .span_suggestion(\n+                    span,\n+                    \"use double colon\",\n+                    \"::\".to_string(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        } else {\n+            self.expect(&token::ModSep)?;\n+        }\n \n         let qself = QSelf { ty, path_span, position: path.segments.len() };\n         self.parse_path_segments(&mut path.segments, style)?;"}, {"sha": "a4213bdd3fb34c0265a802a7f95e99d6fb8ad697", "filename": "src/test/ui/parser/qualified-path-in-turbofish.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.fixed?ref=3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+trait T {\n+    type Ty;\n+}\n+\n+struct Impl;\n+\n+impl T for Impl {\n+    type Ty = u32;\n+}\n+\n+fn template<T>() -> i64 {\n+    3\n+}\n+\n+fn main() {\n+    template::<<Impl as T>::Ty>();\n+    //~^ ERROR found single colon where type path was expected\n+}"}, {"sha": "75b2af2aa2e08f1c982492cafe50446e275487e3", "filename": "src/test/ui/parser/qualified-path-in-turbofish.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.rs?ref=3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+trait T {\n+    type Ty;\n+}\n+\n+struct Impl;\n+\n+impl T for Impl {\n+    type Ty = u32;\n+}\n+\n+fn template<T>() -> i64 {\n+    3\n+}\n+\n+fn main() {\n+    template::<<Impl as T>:Ty>();\n+    //~^ ERROR found single colon where type path was expected\n+}"}, {"sha": "1fe6353b7a013aef17d43238fa57ddba2c44afc5", "filename": "src/test/ui/parser/qualified-path-in-turbofish.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fqualified-path-in-turbofish.stderr?ref=3c91bdca1d552055e2b92ecac5275c1ebe9a4ee8", "patch": "@@ -0,0 +1,8 @@\n+error: found single colon where type path was expected\n+  --> $DIR/qualified-path-in-turbofish.rs:17:27\n+   |\n+LL |     template::<<Impl as T>:Ty>();\n+   |                           ^ help: use double colon: `::`\n+\n+error: aborting due to previous error\n+"}]}