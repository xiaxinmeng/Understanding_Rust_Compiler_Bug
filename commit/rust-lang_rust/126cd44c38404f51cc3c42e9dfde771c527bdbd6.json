{"sha": "126cd44c38404f51cc3c42e9dfde771c527bdbd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNmNkNDRjMzg0MDRmNTFjYzNjNDJlOWRmZGU3NzFjNTI3YmRiZDY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-29T22:59:38Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-30T01:00:10Z"}, "message": "Refactor typestate code involving stmt_decls\n\nTo handle multiple-LHS declarations with initializers properly,\nI changed seq_states to take a list of expressions paired with optional\nnames, not just a list of expressions. Then, the same logic that handles\nordered lists of subexpressions everywhere else can handle multi-\ndeclarations.", "tree": {"sha": "34391b105b06d56f46e1fb60ed768ff861a7af9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34391b105b06d56f46e1fb60ed768ff861a7af9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/126cd44c38404f51cc3c42e9dfde771c527bdbd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/126cd44c38404f51cc3c42e9dfde771c527bdbd6", "html_url": "https://github.com/rust-lang/rust/commit/126cd44c38404f51cc3c42e9dfde771c527bdbd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/126cd44c38404f51cc3c42e9dfde771c527bdbd6/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c441a66a86d04087f15aaa9d624fb3c24fcb54", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c441a66a86d04087f15aaa9d624fb3c24fcb54", "html_url": "https://github.com/rust-lang/rust/commit/59c441a66a86d04087f15aaa9d624fb3c24fcb54"}], "stats": {"total": 223, "additions": 129, "deletions": 94}, "files": [{"sha": "1d78750cc0991c79624d0e41fdaed798a28e5715", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/126cd44c38404f51cc3c42e9dfde771c527bdbd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126cd44c38404f51cc3c42e9dfde771c527bdbd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=126cd44c38404f51cc3c42e9dfde771c527bdbd6", "patch": "@@ -1037,6 +1037,27 @@ fn ast_constr_to_sp_constr(tcx: &ty::ctxt, args: &arg[], c: &@constr) ->\n     ret respan(c.span, tconstr);\n }\n \n+type binding = {lhs: option::t[inst], rhs: option::t[initializer]};\n+\n+fn local_to_binding(loc : &@local) -> binding {\n+    {lhs: some({ident: loc.node.ident, node: loc.node.id}),\n+     rhs: loc.node.init}\n+}\n+\n+fn locals_to_bindings(locals : &(@local)[]) -> binding[] {\n+    ivec::map(local_to_binding, locals)\n+}\n+\n+fn anon_bindings(es : &(@expr)[]) -> binding[] {\n+    fn expr_to_initializer(e : &@expr) -> initializer {\n+        {op: init_assign, expr: e}\n+    }\n+    ret ivec::map(fn (e : &@expr) -> binding {\n+                    {lhs: none,\n+                     rhs: some(expr_to_initializer(e)) } },\n+                  es);\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "e38f39b8a2c13e48f1bad8d387026aaf63bb1a54", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/126cd44c38404f51cc3c42e9dfde771c527bdbd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126cd44c38404f51cc3c42e9dfde771c527bdbd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=126cd44c38404f51cc3c42e9dfde771c527bdbd6", "patch": "@@ -208,6 +208,11 @@ fn clear_in_poststate_expr(fcx: &fn_ctxt, e: &@expr, t: &poststate) {\n     }\n }\n \n+fn kill_poststate_(fcx : &fn_ctxt, c : &tsconstr, post : &poststate) -> bool {\n+    log \"kill_poststate_\";\n+    ret clear_in_poststate_(bit_num(fcx, c), post);\n+}\n+\n fn set_in_poststate_ident(fcx: &fn_ctxt, id: &node_id, ident: &ident,\n                           t: &poststate) -> bool {\n     ret set_in_poststate_(bit_num(fcx, ninit(id, ident)), t);\n@@ -227,6 +232,11 @@ fn clear_in_prestate_ident(fcx: &fn_ctxt, id: &node_id, ident: &ident,\n     ret kill_prestate(fcx, parent, ninit(id, ident));\n }\n \n+fn clear_in_poststate_ident_(fcx : &fn_ctxt, id : &node_id, ident : &ident,\n+                             post : &poststate) -> bool {\n+    ret kill_poststate_(fcx, ninit(id, ident), post);\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "0aebc7659d1d27ccb2d938de59e28b76716a39f6", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 98, "deletions": 94, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/126cd44c38404f51cc3c42e9dfde771c527bdbd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/126cd44c38404f51cc3c42e9dfde771c527bdbd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=126cd44c38404f51cc3c42e9dfde771c527bdbd6", "patch": "@@ -27,16 +27,6 @@ import tritv::tritv_set;\n import tritv::ttrue;\n \n import bitvectors::*;\n-/*\n-import bitvectors::set_in_poststate_ident;\n-import bitvectors::clear_in_poststate_expr;\n-import bitvectors::clear_in_prestate_ident;\n-import bitvectors::bit_num;\n-import bitvectors::gen_poststate;\n-import bitvectors::kill_poststate;\n-import bitvectors::clear_in_poststate_ident;\n-import bitvectors::intersect_states;\n-*/\n import syntax::ast::*;\n import middle::ty::expr_ty;\n import middle::ty::type_is_nil;\n@@ -53,15 +43,66 @@ import util::common::log_stmt;\n import util::common::log_stmt_err;\n import util::common::log_expr_err;\n \n-fn seq_states(fcx: &fn_ctxt, pres: prestate, exprs: &(@expr)[]) ->\n-   {changed: bool, post: poststate} {\n+fn handle_move_or_copy(fcx: &fn_ctxt, post: &poststate, rhs_path: &path,\n+      rhs_id: &node_id, instlhs: &inst, init_op: &init_op) {\n+    let rhs_d = local_node_id_to_def_id(fcx, rhs_id);\n+    alt (rhs_d) {\n+      some(rhsid) {\n+        // RHS is a local var\n+        let instrhs =\n+            {ident: path_to_ident(fcx.ccx.tcx, rhs_path), node: rhsid.node};\n+        copy_in_poststate(fcx, post, instlhs, instrhs,\n+                          op_to_oper_ty(init_op));\n+      }\n+      _ {\n+        // not a local -- do nothing\n+      }\n+    }\n+    if (init_op == init_move) {\n+        forget_in_poststate(fcx, post, rhs_id);\n+    }\n+}\n+\n+fn seq_states(fcx: &fn_ctxt, pres: &prestate, bindings: &binding[])\n+    -> {changed: bool, post: poststate} {\n     let changed = false;\n-    let post = pres;\n-    for e: @expr  in exprs {\n-        changed |= find_pre_post_state_expr(fcx, post, e) || changed;\n-        // log_err(\"Seq_states: changed =\");\n-        // log_err changed;\n-        post = expr_poststate(fcx.ccx, e);\n+    let post = tritv_clone(pres);\n+    for b:binding in bindings {\n+        alt (b.rhs) {\n+          some(an_init) {\n+            // an expression, with or without a destination\n+            changed |= find_pre_post_state_expr(fcx, post, an_init.expr)\n+                || changed;\n+            post = tritv_clone(expr_poststate(fcx.ccx, an_init.expr));\n+            alt (b.lhs) {\n+              some(i) {\n+                alt (an_init.expr.node) {\n+                  expr_path(p) {\n+                    handle_move_or_copy(fcx, post, p, an_init.expr.id, i,\n+                                        an_init.op);\n+                  }\n+                  _ {}\n+                }\n+                set_in_poststate_ident(fcx, i.node, i.ident, post);\n+              }\n+              _ {\n+                //This is an expression that doesn't get named.\n+                // So, nothing more to do.\n+              }\n+            }\n+           }\n+         none {\n+            alt (b.lhs) {\n+              some(i) {\n+                // variable w/o an initializer\n+                 clear_in_poststate_ident_(fcx, i.node, i.ident, post);\n+               }\n+              none { fcx.ccx.tcx.sess.bug(\"seq_states: binding has \\\n+                               neither an lhs nor an rhs\");\n+              }\n+            }\n+          }\n+        }\n     }\n     ret {changed: changed, post: post};\n }\n@@ -154,7 +195,7 @@ fn find_pre_post_state_call(fcx: &fn_ctxt, pres: &prestate, a: &@expr,\n \n fn find_pre_post_state_exprs(fcx: &fn_ctxt, pres: &prestate, id: node_id,\n                              es: &(@expr)[], cf: controlflow) -> bool {\n-    let rs = seq_states(fcx, pres, es);\n+    let rs = seq_states(fcx, pres, anon_bindings(es));\n     let changed = rs.changed | set_prestate_ann(fcx.ccx, id, pres);\n     /* if this is a failing call, it sets everything as initialized */\n     alt cf {\n@@ -561,91 +602,50 @@ fn find_pre_post_state_expr(fcx: &fn_ctxt, pres: &prestate, e: @expr) ->\n     }\n }\n \n-fn find_pre_post_state_stmt(fcx: &fn_ctxt, pres: &prestate, s: @stmt) ->\n-   bool {\n+fn find_pre_post_state_stmt(fcx: &fn_ctxt, pres: &prestate, s: @stmt)\n+    -> bool {\n     let stmt_ann = stmt_to_ann(fcx.ccx, *s);\n-\n-\n-    /*\n+/*\n     log_err \"*At beginning: stmt = \";\n     log_stmt_err(*s);\n     log_err \"*prestate = \";\n-    log_err tritv::to_str(stmt_ann.states.prestate);\n+    log_tritv_err(fcx, stmt_ann.states.prestate);\n     log_err \"*poststate =\";\n-    log_err tritv::to_str(stmt_ann.states.poststate);\n+    log_tritv_err(fcx, stmt_ann.states.poststate);\n     log_err \"pres = \";\n-    log_err tritv::to_str(pres);\n-    */\n+    log_tritv_err(fcx, pres);\n+*/\n \n-    alt s.node {\n+    alt (s.node) {\n       stmt_decl(adecl, id) {\n-        alt adecl.node {\n+        alt (adecl.node) {\n           decl_local(alocals) {\n-            let changed = false;\n-            for alocal: @local  in alocals {\n-                alt alocal.node.init {\n-                  some(an_init) {\n-                    let changed =\n-                        set_prestate(stmt_ann, pres) |\n-                            find_pre_post_state_expr(fcx, pres, an_init.expr);\n-\n-                    let post =\n-                        tritv_clone(expr_poststate(fcx.ccx, an_init.expr));\n-                    alt an_init.expr.node {\n-                      expr_path(p) {\n-\n-                        let instlhs =\n-                            {ident: alocal.node.ident, node: alocal.node.id};\n-                        let rhs_d =\n-                            local_node_id_to_local_def_id(fcx,\n-                                                          an_init.expr.id);\n-                        alt rhs_d {\n-                          some(rhsid) {\n-                            let instrhs =\n-                                {ident: path_to_ident(fcx.ccx.tcx, p),\n-                                 node: rhsid};\n-                            copy_in_poststate(fcx, post, instlhs, instrhs,\n-                                              op_to_oper_ty(an_init.op));\n-                          }\n-                          _ { }\n-                        }\n-                      }\n-                      _ { }\n-                    }\n-                    if an_init.op == init_move {\n-                        forget_in_poststate(fcx, post, an_init.expr.id);\n-                    }\n-                    set_in_poststate_ident(fcx, alocal.node.id,\n-                                           alocal.node.ident, post);\n-                    /*\n-                    log_err \"Summary: stmt = \";\n-                    log_stmt_err(*s);\n-                    log_err \"prestate = \";\n-                    log_tritv_err(fcx, stmt_ann.states.prestate);\n-                    log_err \"poststate =\";\n-                    log_tritv_err(fcx, post);\n-                    log_err \"changed =\";\n-                    log_err changed;\n-                    */\n-                    /* important to do this in one step to ensure\n-                       termination (don't want to set changed to true\n-                       for intermediate changes) */\n-                    changed |= set_poststate(stmt_ann, post);\n-                  }\n-                  none. {\n-                    // let int = x; => x is uninit in poststate\n-                    set_poststate_ann(fcx.ccx, id, pres);\n-                    clear_in_poststate_ident(fcx, alocal.node.id,\n-                                             alocal.node.ident, id);\n-                    set_prestate(stmt_ann, pres);\n-                  }\n-                }\n-            }\n+            set_prestate(stmt_ann, pres);\n+            let c_and_p = seq_states(fcx, pres,\n+                                     locals_to_bindings(alocals));\n+            /* important to do this in one step to ensure\n+            termination (don't want to set changed to true\n+            for intermediate changes) */\n+\n+            let changed = (set_poststate(stmt_ann, c_and_p.post)\n+                           | c_and_p.changed);\n+            /*\n+                log_err \"Summary: stmt = \";\n+                log_stmt_err(*s);\n+                log_err \"prestate = \";\n+                log_tritv_err(fcx, stmt_ann.states.prestate);\n+                log_err \"poststate =\";\n+                log_tritv_err(fcx, stmt_ann.states.poststate);\n+                log_err \"changed =\";\n+                log_err changed;\n+*/\n+\n             ret changed;\n           }\n           decl_item(an_item) {\n-            ret set_prestate(stmt_ann, pres) | set_poststate(stmt_ann, pres);\n-            /* the outer \"walk\" will recurse into the item */\n+            ret set_prestate(stmt_ann, pres) |\n+                set_poststate(stmt_ann, pres);\n+            /* the outer visitor will recurse into the item */\n           }\n         }\n       }\n@@ -699,7 +699,8 @@ fn find_pre_post_state_block(fcx: &fn_ctxt, pres0: &prestate, b: &blk) ->\n     set_prestate_ann(fcx.ccx, b.node.id, pres0);\n     set_poststate_ann(fcx.ccx, b.node.id, post);\n \n-    /*\n+\n+/*\n     log_err \"For block:\";\n     log_block_err(b);\n     log_err \"poststate = \";\n@@ -708,12 +709,15 @@ fn find_pre_post_state_block(fcx: &fn_ctxt, pres0: &prestate, b: &blk) ->\n     log_tritv_err(fcx, pres0);\n     log_err \"post:\";\n     log_tritv_err(fcx, post);\n-    */\n+    log_err \"changed = \";\n+    log_err changed;\n+*/\n \n     ret changed;\n }\n \n fn find_pre_post_state_fn(fcx: &fn_ctxt, f: &_fn) -> bool {\n+\n     let num_local_vars = num_constraints(fcx.enclosing);\n     // make sure the return bit starts out False\n     clear_in_prestate_ident(fcx, fcx.id, fcx.name, f.body.node.id);"}]}