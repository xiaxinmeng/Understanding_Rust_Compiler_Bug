{"sha": "0507d49755b9f506da8770af757704eb5c2b54d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MDdkNDk3NTViOWY1MDZkYTg3NzBhZjc1NzcwNGViNWMyYjU0ZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-23T05:11:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-23T05:11:41Z"}, "message": "Auto merge of #63808 - Rosto75:master, r=KodrAus\n\nA bunch of minor documentation tweaks and fixes.", "tree": {"sha": "722fad519cbebfb0232b571008589253fb4c863c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/722fad519cbebfb0232b571008589253fb4c863c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0507d49755b9f506da8770af757704eb5c2b54d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0507d49755b9f506da8770af757704eb5c2b54d7", "html_url": "https://github.com/rust-lang/rust/commit/0507d49755b9f506da8770af757704eb5c2b54d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0507d49755b9f506da8770af757704eb5c2b54d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a71e32e4078f3a8c1ebc2a731e23ac3da3ef73a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a71e32e4078f3a8c1ebc2a731e23ac3da3ef73a1", "html_url": "https://github.com/rust-lang/rust/commit/a71e32e4078f3a8c1ebc2a731e23ac3da3ef73a1"}, {"sha": "d9f3258186cc221b41d2d869671d47fd4b716bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f3258186cc221b41d2d869671d47fd4b716bbe", "html_url": "https://github.com/rust-lang/rust/commit/d9f3258186cc221b41d2d869671d47fd4b716bbe"}], "stats": {"total": 110, "additions": 54, "deletions": 56}, "files": [{"sha": "a4a0fbb194dd448083c320643d2c8a2ef505a60b", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=0507d49755b9f506da8770af757704eb5c2b54d7", "patch": "@@ -1810,7 +1810,7 @@ impl<T> VecDeque<T> {\n         other\n     }\n \n-    /// Moves all the elements of `other` into `Self`, leaving `other` empty.\n+    /// Moves all the elements of `other` into `self`, leaving `other` empty.\n     ///\n     /// # Panics\n     ///\n@@ -1847,7 +1847,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// let mut buf = VecDeque::new();\n     /// buf.extend(1..5);\n-    /// buf.retain(|&x| x%2 == 0);\n+    /// buf.retain(|&x| x % 2 == 0);\n     /// assert_eq!(buf, [2, 4]);\n     /// ```\n     ///"}, {"sha": "22e7573eca65b28c5693df365dc17af90fa5ed32", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=0507d49755b9f506da8770af757704eb5c2b54d7", "patch": "@@ -315,7 +315,7 @@ impl f32 {\n     /// use std::f32;\n     ///\n     /// let x = 2.0_f32;\n-    /// let abs_difference = (x.recip() - (1.0/x)).abs();\n+    /// let abs_difference = (x.recip() - (1.0 / x)).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```"}, {"sha": "bbe1d040780602df44831bab76ff835a01da7898", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=0507d49755b9f506da8770af757704eb5c2b54d7", "patch": "@@ -327,7 +327,7 @@ impl f64 {\n     ///\n     /// ```\n     /// let x = 2.0_f64;\n-    /// let abs_difference = (x.recip() - (1.0/x)).abs();\n+    /// let abs_difference = (x.recip() - (1.0 / x)).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```"}, {"sha": "e55afc2344f79d41f786b2600e67d234c7d7ae77", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=0507d49755b9f506da8770af757704eb5c2b54d7", "patch": "@@ -236,7 +236,7 @@ impl f32 {\n     /// let b = 60.0_f32;\n     ///\n     /// // 100.0\n-    /// let abs_difference = (m.mul_add(x, b) - (m*x + b)).abs();\n+    /// let abs_difference = (m.mul_add(x, b) - ((m * x) + b)).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n@@ -318,7 +318,7 @@ impl f32 {\n     /// use std::f32;\n     ///\n     /// let x = 2.0_f32;\n-    /// let abs_difference = (x.powi(2) - x*x).abs();\n+    /// let abs_difference = (x.powi(2) - (x * x)).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n@@ -336,7 +336,7 @@ impl f32 {\n     /// use std::f32;\n     ///\n     /// let x = 2.0_f32;\n-    /// let abs_difference = (x.powf(2.0) - x*x).abs();\n+    /// let abs_difference = (x.powf(2.0) - (x * x)).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n@@ -600,7 +600,7 @@ impl f32 {\n     /// ```\n     /// use std::f32;\n     ///\n-    /// let x = f32::consts::PI/2.0;\n+    /// let x = f32::consts::FRAC_PI_2;\n     ///\n     /// let abs_difference = (x.sin() - 1.0).abs();\n     ///\n@@ -623,7 +623,7 @@ impl f32 {\n     /// ```\n     /// use std::f32;\n     ///\n-    /// let x = 2.0*f32::consts::PI;\n+    /// let x = 2.0 * f32::consts::PI;\n     ///\n     /// let abs_difference = (x.cos() - 1.0).abs();\n     ///\n@@ -646,7 +646,7 @@ impl f32 {\n     /// ```\n     /// use std::f32;\n     ///\n-    /// let x = f32::consts::PI / 4.0;\n+    /// let x = f32::consts::FRAC_PI_4;\n     /// let abs_difference = (x.tan() - 1.0).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n@@ -666,10 +666,10 @@ impl f32 {\n     /// ```\n     /// use std::f32;\n     ///\n-    /// let f = f32::consts::PI / 2.0;\n+    /// let f = f32::consts::FRAC_PI_2;\n     ///\n     /// // asin(sin(pi/2))\n-    /// let abs_difference = (f.sin().asin() - f32::consts::PI / 2.0).abs();\n+    /// let abs_difference = (f.sin().asin() - f32::consts::FRAC_PI_2).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n@@ -688,10 +688,10 @@ impl f32 {\n     /// ```\n     /// use std::f32;\n     ///\n-    /// let f = f32::consts::PI / 4.0;\n+    /// let f = f32::consts::FRAC_PI_4;\n     ///\n     /// // acos(cos(pi/4))\n-    /// let abs_difference = (f.cos().acos() - f32::consts::PI / 4.0).abs();\n+    /// let abs_difference = (f.cos().acos() - f32::consts::FRAC_PI_4).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n     /// ```\n@@ -734,7 +734,6 @@ impl f32 {\n     /// ```\n     /// use std::f32;\n     ///\n-    /// let pi = f32::consts::PI;\n     /// // Positive angles measured counter-clockwise\n     /// // from positive x axis\n     /// // -pi/4 radians (45 deg clockwise)\n@@ -745,8 +744,8 @@ impl f32 {\n     /// let x2 = -3.0f32;\n     /// let y2 = 3.0f32;\n     ///\n-    /// let abs_difference_1 = (y1.atan2(x1) - (-pi/4.0)).abs();\n-    /// let abs_difference_2 = (y2.atan2(x2) - 3.0*pi/4.0).abs();\n+    /// let abs_difference_1 = (y1.atan2(x1) - (-f32::consts::FRAC_PI_4)).abs();\n+    /// let abs_difference_2 = (y2.atan2(x2) - (3.0 * f32::consts::FRAC_PI_4)).abs();\n     ///\n     /// assert!(abs_difference_1 <= f32::EPSILON);\n     /// assert!(abs_difference_2 <= f32::EPSILON);\n@@ -765,7 +764,7 @@ impl f32 {\n     /// ```\n     /// use std::f32;\n     ///\n-    /// let x = f32::consts::PI/4.0;\n+    /// let x = f32::consts::FRAC_PI_4;\n     /// let f = x.sin_cos();\n     ///\n     /// let abs_difference_0 = (f.0 - x.sin()).abs();\n@@ -834,7 +833,7 @@ impl f32 {\n     ///\n     /// let f = x.sinh();\n     /// // Solving sinh() at 1 gives `(e^2-1)/(2e)`\n-    /// let g = (e*e - 1.0)/(2.0*e);\n+    /// let g = ((e * e) - 1.0) / (2.0 * e);\n     /// let abs_difference = (f - g).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);\n@@ -856,7 +855,7 @@ impl f32 {\n     /// let x = 1.0f32;\n     /// let f = x.cosh();\n     /// // Solving cosh() at 1 gives this result\n-    /// let g = (e*e + 1.0)/(2.0*e);\n+    /// let g = ((e * e) + 1.0) / (2.0 * e);\n     /// let abs_difference = (f - g).abs();\n     ///\n     /// // Same result\n@@ -880,7 +879,7 @@ impl f32 {\n     ///\n     /// let f = x.tanh();\n     /// // Solving tanh() at 1 gives `(1 - e^(-2))/(1 + e^(-2))`\n-    /// let g = (1.0 - e.powi(-2))/(1.0 + e.powi(-2));\n+    /// let g = (1.0 - e.powi(-2)) / (1.0 + e.powi(-2));\n     /// let abs_difference = (f - g).abs();\n     ///\n     /// assert!(abs_difference <= f32::EPSILON);"}, {"sha": "b3571026300911ece9365454d786aa59ec084fd8", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=0507d49755b9f506da8770af757704eb5c2b54d7", "patch": "@@ -212,7 +212,7 @@ impl f64 {\n     /// let b = 60.0_f64;\n     ///\n     /// // 100.0\n-    /// let abs_difference = (m.mul_add(x, b) - (m*x + b)).abs();\n+    /// let abs_difference = (m.mul_add(x, b) - ((m * x) + b)).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n@@ -291,7 +291,7 @@ impl f64 {\n     ///\n     /// ```\n     /// let x = 2.0_f64;\n-    /// let abs_difference = (x.powi(2) - x*x).abs();\n+    /// let abs_difference = (x.powi(2) - (x * x)).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n@@ -307,7 +307,7 @@ impl f64 {\n     ///\n     /// ```\n     /// let x = 2.0_f64;\n-    /// let abs_difference = (x.powf(2.0) - x*x).abs();\n+    /// let abs_difference = (x.powf(2.0) - (x * x)).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n@@ -537,7 +537,7 @@ impl f64 {\n     /// ```\n     /// use std::f64;\n     ///\n-    /// let x = f64::consts::PI/2.0;\n+    /// let x = f64::consts::FRAC_PI_2;\n     ///\n     /// let abs_difference = (x.sin() - 1.0).abs();\n     ///\n@@ -556,7 +556,7 @@ impl f64 {\n     /// ```\n     /// use std::f64;\n     ///\n-    /// let x = 2.0*f64::consts::PI;\n+    /// let x = 2.0 * f64::consts::PI;\n     ///\n     /// let abs_difference = (x.cos() - 1.0).abs();\n     ///\n@@ -575,7 +575,7 @@ impl f64 {\n     /// ```\n     /// use std::f64;\n     ///\n-    /// let x = f64::consts::PI/4.0;\n+    /// let x = f64::consts::FRAC_PI_4;\n     /// let abs_difference = (x.tan() - 1.0).abs();\n     ///\n     /// assert!(abs_difference < 1e-14);\n@@ -595,10 +595,10 @@ impl f64 {\n     /// ```\n     /// use std::f64;\n     ///\n-    /// let f = f64::consts::PI / 2.0;\n+    /// let f = f64::consts::FRAC_PI_2;\n     ///\n     /// // asin(sin(pi/2))\n-    /// let abs_difference = (f.sin().asin() - f64::consts::PI / 2.0).abs();\n+    /// let abs_difference = (f.sin().asin() - f64::consts::FRAC_PI_2).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n@@ -617,10 +617,10 @@ impl f64 {\n     /// ```\n     /// use std::f64;\n     ///\n-    /// let f = f64::consts::PI / 4.0;\n+    /// let f = f64::consts::FRAC_PI_4;\n     ///\n     /// // acos(cos(pi/4))\n-    /// let abs_difference = (f.cos().acos() - f64::consts::PI / 4.0).abs();\n+    /// let abs_difference = (f.cos().acos() - f64::consts::FRAC_PI_4).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n     /// ```\n@@ -661,7 +661,6 @@ impl f64 {\n     /// ```\n     /// use std::f64;\n     ///\n-    /// let pi = f64::consts::PI;\n     /// // Positive angles measured counter-clockwise\n     /// // from positive x axis\n     /// // -pi/4 radians (45 deg clockwise)\n@@ -672,8 +671,8 @@ impl f64 {\n     /// let x2 = -3.0_f64;\n     /// let y2 = 3.0_f64;\n     ///\n-    /// let abs_difference_1 = (y1.atan2(x1) - (-pi/4.0)).abs();\n-    /// let abs_difference_2 = (y2.atan2(x2) - 3.0*pi/4.0).abs();\n+    /// let abs_difference_1 = (y1.atan2(x1) - (-f64::consts::FRAC_PI_4)).abs();\n+    /// let abs_difference_2 = (y2.atan2(x2) - (3.0 * f64::consts::FRAC_PI_4)).abs();\n     ///\n     /// assert!(abs_difference_1 < 1e-10);\n     /// assert!(abs_difference_2 < 1e-10);\n@@ -692,7 +691,7 @@ impl f64 {\n     /// ```\n     /// use std::f64;\n     ///\n-    /// let x = f64::consts::PI/4.0;\n+    /// let x = f64::consts::FRAC_PI_4;\n     /// let f = x.sin_cos();\n     ///\n     /// let abs_difference_0 = (f.0 - x.sin()).abs();\n@@ -759,7 +758,7 @@ impl f64 {\n     ///\n     /// let f = x.sinh();\n     /// // Solving sinh() at 1 gives `(e^2-1)/(2e)`\n-    /// let g = (e*e - 1.0)/(2.0*e);\n+    /// let g = ((e * e) - 1.0) / (2.0 * e);\n     /// let abs_difference = (f - g).abs();\n     ///\n     /// assert!(abs_difference < 1e-10);\n@@ -781,7 +780,7 @@ impl f64 {\n     /// let x = 1.0_f64;\n     /// let f = x.cosh();\n     /// // Solving cosh() at 1 gives this result\n-    /// let g = (e*e + 1.0)/(2.0*e);\n+    /// let g = ((e * e) + 1.0) / (2.0 * e);\n     /// let abs_difference = (f - g).abs();\n     ///\n     /// // Same result\n@@ -805,7 +804,7 @@ impl f64 {\n     ///\n     /// let f = x.tanh();\n     /// // Solving tanh() at 1 gives `(1 - e^(-2))/(1 + e^(-2))`\n-    /// let g = (1.0 - e.powi(-2))/(1.0 + e.powi(-2));\n+    /// let g = (1.0 - e.powi(-2)) / (1.0 + e.powi(-2));\n     /// let abs_difference = (f - g).abs();\n     ///\n     /// assert!(abs_difference < 1.0e-10);"}, {"sha": "65f4e0cafe09e321503233608cd1eb8352f00c91", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=0507d49755b9f506da8770af757704eb5c2b54d7", "patch": "@@ -572,8 +572,8 @@ impl CString {\n     /// use std::ffi::{CString, CStr};\n     ///\n     /// let c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\n-    /// let c_str = c_string.as_c_str();\n-    /// assert_eq!(c_str,\n+    /// let cstr = c_string.as_c_str();\n+    /// assert_eq!(cstr,\n     ///            CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n     /// ```\n     #[inline]\n@@ -994,17 +994,17 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"hello\");\n-    /// assert!(c_str.is_err());\n+    /// let cstr = CStr::from_bytes_with_nul(b\"hello\");\n+    /// assert!(cstr.is_err());\n     /// ```\n     ///\n     /// Creating a `CStr` with an interior nul byte is an error:\n     ///\n     /// ```\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"he\\0llo\\0\");\n-    /// assert!(c_str.is_err());\n+    /// let cstr = CStr::from_bytes_with_nul(b\"he\\0llo\\0\");\n+    /// assert!(cstr.is_err());\n     /// ```\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     pub fn from_bytes_with_nul(bytes: &[u8])\n@@ -1111,8 +1111,8 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n-    /// assert_eq!(c_str.to_bytes(), b\"foo\");\n+    /// let cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n+    /// assert_eq!(cstr.to_bytes(), b\"foo\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1137,8 +1137,8 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n-    /// assert_eq!(c_str.to_bytes_with_nul(), b\"foo\\0\");\n+    /// let cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n+    /// assert_eq!(cstr.to_bytes_with_nul(), b\"foo\\0\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1164,8 +1164,8 @@ impl CStr {\n     /// ```\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n-    /// assert_eq!(c_str.to_str(), Ok(\"foo\"));\n+    /// let cstr = CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\");\n+    /// assert_eq!(cstr.to_str(), Ok(\"foo\"));\n     /// ```\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n     pub fn to_str(&self) -> Result<&str, str::Utf8Error> {\n@@ -1205,9 +1205,9 @@ impl CStr {\n     /// use std::borrow::Cow;\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"Hello World\\0\")\n+    /// let cstr = CStr::from_bytes_with_nul(b\"Hello World\\0\")\n     ///                  .expect(\"CStr::from_bytes_with_nul failed\");\n-    /// assert_eq!(c_str.to_string_lossy(), Cow::Borrowed(\"Hello World\"));\n+    /// assert_eq!(cstr.to_string_lossy(), Cow::Borrowed(\"Hello World\"));\n     /// ```\n     ///\n     /// Calling `to_string_lossy` on a `CStr` containing invalid UTF-8:\n@@ -1216,10 +1216,10 @@ impl CStr {\n     /// use std::borrow::Cow;\n     /// use std::ffi::CStr;\n     ///\n-    /// let c_str = CStr::from_bytes_with_nul(b\"Hello \\xF0\\x90\\x80World\\0\")\n+    /// let cstr = CStr::from_bytes_with_nul(b\"Hello \\xF0\\x90\\x80World\\0\")\n     ///                  .expect(\"CStr::from_bytes_with_nul failed\");\n     /// assert_eq!(\n-    ///     c_str.to_string_lossy(),\n+    ///     cstr.to_string_lossy(),\n     ///     Cow::Owned(String::from(\"Hello \ufffdWorld\")) as Cow<'_, str>\n     /// );\n     /// ```"}, {"sha": "6cf062d4f30c0f5a24e70c4507ad0db39ad03856", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0507d49755b9f506da8770af757704eb5c2b54d7/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=0507d49755b9f506da8770af757704eb5c2b54d7", "patch": "@@ -233,7 +233,7 @@ impl OsString {\n     /// ```\n     /// use std::ffi::OsString;\n     ///\n-    /// let mut os_string = OsString::with_capacity(10);\n+    /// let os_string = OsString::with_capacity(10);\n     /// assert!(os_string.capacity() >= 10);\n     /// ```\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n@@ -616,7 +616,7 @@ impl OsStr {\n     /// Note that this does **not** return the number of bytes in the string in\n     /// OS string form.\n     ///\n-    /// The length returned is that of the underlying storage used by `OsStr`;\n+    /// The length returned is that of the underlying storage used by `OsStr`.\n     /// As discussed in the [`OsString`] introduction, [`OsString`] and `OsStr`\n     /// store strings in a form best suited for cheap inter-conversion between\n     /// native-platform and Rust string forms, which may differ significantly"}]}