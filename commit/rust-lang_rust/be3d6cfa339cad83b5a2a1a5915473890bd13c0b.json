{"sha": "be3d6cfa339cad83b5a2a1a5915473890bd13c0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlM2Q2Y2ZhMzM5Y2FkODNiNWEyYTFhNTkxNTQ3Mzg5MGJkMTNjMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-02T07:25:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-02T07:25:21Z"}, "message": "Auto merge of #4246 - mikerite:fix-4244, r=flip1995\n\nFix `match_same_arms` false negative\n\nCloses #4244\n\nchangelog: Fix `match_same_arms` false negative", "tree": {"sha": "3f0b52ddb4fed8ceec48fe811c4f8a4c151b084b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f0b52ddb4fed8ceec48fe811c4f8a4c151b084b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be3d6cfa339cad83b5a2a1a5915473890bd13c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be3d6cfa339cad83b5a2a1a5915473890bd13c0b", "html_url": "https://github.com/rust-lang/rust/commit/be3d6cfa339cad83b5a2a1a5915473890bd13c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be3d6cfa339cad83b5a2a1a5915473890bd13c0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc8b2218e6c910ac00b404d6a52b7db3cea718d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8b2218e6c910ac00b404d6a52b7db3cea718d0", "html_url": "https://github.com/rust-lang/rust/commit/cc8b2218e6c910ac00b404d6a52b7db3cea718d0"}, {"sha": "c199d9068e36a0948d12d2cda773436f0129be96", "url": "https://api.github.com/repos/rust-lang/rust/commits/c199d9068e36a0948d12d2cda773436f0129be96", "html_url": "https://github.com/rust-lang/rust/commit/c199d9068e36a0948d12d2cda773436f0129be96"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "3894b56c0494b0775d89dff5214f316bab6a40d3", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be3d6cfa339cad83b5a2a1a5915473890bd13c0b/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3d6cfa339cad83b5a2a1a5915473890bd13c0b/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=be3d6cfa339cad83b5a2a1a5915473890bd13c0b", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{get_parent_expr, higher, in_macro_or_desugar, snippet, span_lint_and_then, span_note_and_lint};\n+use crate::utils::{\n+    get_parent_expr, higher, in_macro_or_desugar, same_tys, snippet, span_lint_and_then, span_note_and_lint,\n+};\n use crate::utils::{SpanlessEq, SpanlessHash};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -165,7 +167,18 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr]) {\n }\n \n /// Implementation of `MATCH_SAME_ARMS`.\n-fn lint_match_arms(cx: &LateContext<'_, '_>, expr: &Expr) {\n+fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr) {\n+    fn same_bindings<'tcx>(\n+        cx: &LateContext<'_, 'tcx>,\n+        lhs: &FxHashMap<LocalInternedString, Ty<'tcx>>,\n+        rhs: &FxHashMap<LocalInternedString, Ty<'tcx>>,\n+    ) -> bool {\n+        lhs.len() == rhs.len()\n+            && lhs\n+                .iter()\n+                .all(|(name, l_ty)| rhs.get(name).map_or(false, |r_ty| same_tys(cx, l_ty, r_ty)))\n+    }\n+\n     if let ExprKind::Match(_, ref arms, MatchSource::Normal) = expr.node {\n         let hash = |&(_, arm): &(usize, &Arm)| -> u64 {\n             let mut h = SpanlessHash::new(cx, cx.tables);\n@@ -176,12 +189,13 @@ fn lint_match_arms(cx: &LateContext<'_, '_>, expr: &Expr) {\n         let eq = |&(lindex, lhs): &(usize, &Arm), &(rindex, rhs): &(usize, &Arm)| -> bool {\n             let min_index = usize::min(lindex, rindex);\n             let max_index = usize::max(lindex, rindex);\n+\n             // Arms with a guard are ignored, those can\u2019t always be merged together\n             // This is also the case for arms in-between each there is an arm with a guard\n             (min_index..=max_index).all(|index| arms[index].guard.is_none()) &&\n                 SpanlessEq::new(cx).eq_expr(&lhs.body, &rhs.body) &&\n                 // all patterns should have the same bindings\n-                bindings(cx, &lhs.pats[0]) == bindings(cx, &rhs.pats[0])\n+                same_bindings(cx, &bindings(cx, &lhs.pats[0]), &bindings(cx, &rhs.pats[0]))\n         };\n \n         let indexed_arms: Vec<(usize, &Arm)> = arms.iter().enumerate().collect();"}, {"sha": "b53ca79adb5b5a6fbdcbbb720ae3742fe9e0de0a", "filename": "tests/ui/match_same_arms.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/be3d6cfa339cad83b5a2a1a5915473890bd13c0b/tests%2Fui%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3d6cfa339cad83b5a2a1a5915473890bd13c0b/tests%2Fui%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.rs?ref=be3d6cfa339cad83b5a2a1a5915473890bd13c0b", "patch": "@@ -1,3 +1,4 @@\n+#![warn(clippy::match_same_arms)]\n #![allow(\n     clippy::blacklisted_name,\n     clippy::collapsible_if,\n@@ -21,7 +22,6 @@ pub enum Abc {\n     C,\n }\n \n-#[warn(clippy::match_same_arms)]\n #[allow(clippy::unused_unit)]\n fn match_same_arms() {\n     let _ = match 42 {\n@@ -126,4 +126,21 @@ fn match_same_arms() {\n     };\n }\n \n+mod issue4244 {\n+    #[derive(PartialEq, PartialOrd, Eq, Ord)]\n+    pub enum CommandInfo {\n+        BuiltIn { name: String, about: Option<String> },\n+        External { name: String, path: std::path::PathBuf },\n+    }\n+\n+    impl CommandInfo {\n+        pub fn name(&self) -> String {\n+            match self {\n+                CommandInfo::BuiltIn { name, .. } => name.to_string(),\n+                CommandInfo::External { name, .. } => name.to_string(),\n+            }\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "38d51ebd476946e846d3da6f52501148924173b5", "filename": "tests/ui/match_same_arms.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/be3d6cfa339cad83b5a2a1a5915473890bd13c0b/tests%2Fui%2Fmatch_same_arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be3d6cfa339cad83b5a2a1a5915473890bd13c0b/tests%2Fui%2Fmatch_same_arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.stderr?ref=be3d6cfa339cad83b5a2a1a5915473890bd13c0b", "patch": "@@ -224,5 +224,22 @@ help: consider refactoring into `2 | 3`\n LL |         2 => 2, //~ ERROR 2nd matched arms have same body\n    |         ^\n \n-error: aborting due to 12 previous errors\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:140:55\n+   |\n+LL |                 CommandInfo::External { name, .. } => name.to_string(),\n+   |                                                       ^^^^^^^^^^^^^^^^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:139:54\n+   |\n+LL |                 CommandInfo::BuiltIn { name, .. } => name.to_string(),\n+   |                                                      ^^^^^^^^^^^^^^^^\n+help: consider refactoring into `CommandInfo::BuiltIn { name, .. } | CommandInfo::External { name, .. }`\n+  --> $DIR/match_same_arms.rs:139:17\n+   |\n+LL |                 CommandInfo::BuiltIn { name, .. } => name.to_string(),\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 13 previous errors\n "}]}