{"sha": "3aaff59dba4b9fff598c49eeb579cb6c631dd4f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYWZmNTlkYmE0YjlmZmY1OThjNDllZWI1NzljYjZjNjMxZGQ0ZjQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T16:00:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T16:00:47Z"}, "message": "Describe numeric and textual literals better; clean up lexeme descriptions a bit.", "tree": {"sha": "57407e6bc053df681d8f83632d9541b39188d591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57407e6bc053df681d8f83632d9541b39188d591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aaff59dba4b9fff598c49eeb579cb6c631dd4f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aaff59dba4b9fff598c49eeb579cb6c631dd4f4", "html_url": "https://github.com/rust-lang/rust/commit/3aaff59dba4b9fff598c49eeb579cb6c631dd4f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aaff59dba4b9fff598c49eeb579cb6c631dd4f4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa614d5280b0bfe22b6c946462eae30b41046d40", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa614d5280b0bfe22b6c946462eae30b41046d40", "html_url": "https://github.com/rust-lang/rust/commit/aa614d5280b0bfe22b6c946462eae30b41046d40"}], "stats": {"total": 107, "additions": 88, "deletions": 19}, "files": [{"sha": "f9d6e3e04ff706479dfde0fa98c526a74788bc65", "filename": "doc/rust.texi", "status": "modified", "additions": 88, "deletions": 19, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/3aaff59dba4b9fff598c49eeb579cb6c631dd4f4/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/3aaff59dba4b9fff598c49eeb579cb6c631dd4f4/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=3aaff59dba4b9fff598c49eeb579cb6c631dd4f4", "patch": "@@ -583,39 +583,42 @@ Unicode characters.\n * Ref.Lex.Sym::          Special symbol tokens.\n @end menu\n \n-@page\n+@node\n+\n @node       Ref.Lex.Ignore\n @subsection Ref.Lex.Ignore\n @c * Ref.Lex.Ignore::            Ignored tokens.\n \n-The classes of @emph{whitespace} and @emph{comment} is ignored, and are not\n-considered as tokens.\n+Characters considered to be @emph{whitespace} or @emph{comment} are ignored,\n+and are not considered as tokens. They serve only to delimit tokens. Rust is\n+otherwise a free-form language.\n \n @dfn{Whitespace} is any of the following Unicode characters: U+0020 (space),\n U+0009 (tab, @code{'\\t'}), U+000A (LF, @code{'\\n'}), U+000D (CR, @code{'\\r'}).\n \n @dfn{Comments} are any sequence of Unicode characters beginning with U+002F\n-U+002F (@code{//}) and extending to the next U+000a character,\n+U+002F (@code{\"//\"}) and extending to the next U+000A character,\n @emph{excluding} cases in which such a sequence occurs within a string literal\n token or a syntactic extension token.\n \n \n-@page\n @node       Ref.Lex.Ident\n @subsection Ref.Lex.Ident\n @c * Ref.Lex.Ident::             Identifier tokens.\n \n Identifiers follow the pattern of C identifiers: they begin with a\n-@emph{letter} or underscore character @code{_} (Unicode character U+005f), and\n-continue with any combination of @emph{letters}, @emph{digits} and\n-underscores, and must not be equal to any keyword. @xref{Ref.Lex.Key}.\n+@emph{letter} or @emph{underscore}, and continue with any combination of\n+@emph{letters}, @emph{decimal digits} and underscores, and must not be equal\n+to any keyword. @xref{Ref.Lex.Key}.\n \n A @emph{letter} is a Unicode character in the ranges U+0061-U+007A and\n-U+0041-U+005A (@code{a-z} and @code{A-Z}).\n+U+0041-U+005A (@code{'a'}-@code{'z'} and @code{'A'}-@code{'Z'}).\n \n-A @emph{digit} is a Unicode character in the range U+0030-U0039 (@code{0-9}).\n+An @dfn{underscore} is the character U+005F ('_').\n+\n+A @dfn{decimal digit} is a character in the range U+0030-U+0039\n+(@code{'0'}-@code{'9'}).\n \n-@page\n @node       Ref.Lex.Key\n @subsection Ref.Lex.Key\n @c * Ref.Lex.Key::                Keyword tokens.\n@@ -701,25 +704,91 @@ The keywords are:\n @subsection Ref.Lex.Num\n @c * Ref.Lex.Num::                 Numeric tokens.\n \n-@emph{TODO: describe numeric literals}.\n+A @dfn{number literal} is either an @emph{integer literal} or a\n+@emph{floating-point literal}.\n+\n+@sp 1\n+An @dfn{integer literal} has one of three forms:\n+@enumerate\n+@item A @dfn{decimal literal} starts with a @emph{decimal digit} and continues\n+with any mixture of @emph{decimal digits} and @emph{underscores}.\n+\n+@item A @dfn{hex literal} starts with the character sequence U+0030\n+U+0078 (@code{\"0x\"}) and continues as any mixture @emph{hex digits}\n+and @emph{underscores}.\n+\n+@item A @dfn{binary literal} starts with the character sequence U+0030\n+U+0062 (@code{\"0b\"}) and continues as any mixture @emph{binary digits}\n+and @emph{underscores}.\n+\n+@end enumerate\n+\n+@sp 1\n+A @dfn{floating point literal} has one of two forms:\n+@enumerate\n+@item Two @emph{decimal literals} separated by a period\n+character U+002E ('.'), with an optional @emph{exponent} trailing after the\n+second @emph{decimal literal}.\n+@item A single @emph{decimal literal} followed by an @emph{exponent}.\n+@end enumerate\n+\n+@sp 1\n+A @dfn{hex digit} is either a @emph{decimal digit} or else a character in the\n+ranges U+0061-U+0066 and U+0041-U+0046 (@code{'a'}-@code{'f'},\n+@code{'A'}-@code{'F'}).\n+\n+A @dfn{binary digit} is either the character U+0030 or U+0031 (@code{'0'} or\n+@code{'1'}).\n+\n+An @dfn{exponent} begins with either of the characters U+0065 or U+0045\n+(@code{'e'} or @code{'E'}), followed by an optional @emph{sign character},\n+followed by a trailing @emph{decimal literal}.\n+\n+A @dfn{sign character} is either U+002B or U+002D (@code{'+'} or @code{'-'}).\n \n-@page\n @node       Ref.Lex.Text\n @subsection Ref.Lex.Text\n @c * Ref.Lex.Key::                 String and character tokens.\n \n-@emph{TODO: describe string and character literals}.\n+A @dfn{character literal} is a single Unicode character enclosed within two\n+U+0027 (single-quote) characters, with the exception of U+0027 itself, which\n+must be @emph{escaped} by a preceding U+005C character ('\\').\n+\n+A @dfn{string literal} is a sequence of any Unicode characters enclosed\n+within two U+0022 (double-quote) characters, with the exception of U+0022\n+itself, which must be @emph{escaped} by a preceding U+005C character\n+('\\').\n+\n+Some additional @emph{escapes} are available in either character or string\n+literals.  An escape starts with a U+005C ('\\') and continues with one\n+of the following forms:\n+@itemize\n+@item An @dfn{8-bit codepoint escape} escape starts with U+0078 ('x') and is\n+followed by exactly two @dfn{hex digits}. It denotes the Unicode codepoint\n+equal to the provided hex value.\n+@item A @dfn{16-bit codepoint escape} starts with U+0075 ('u') and is followed\n+ by exactly four @dfn{hex digits}. It denotes the Unicode codepoint equal to\n+the provided hex value.\n+@item A @dfn{32-bit codepoint escape} starts with U+0055 ('U') and is followed\n+ by exactly eight @dfn{hex digits}. It denotes the Unicode codepoint equal to\n+the provided hex value.\n+@item A @dfn{whitespace escape} is one of the characters U+006E, U+0072, or\n+U+0074, denoting the unicode values U+000A (LF), U+000D (CR) or U+0009 (HT)\n+respectively.\n+@item The @dfn{backslash escape} is the character U+005C ('\\') which must be\n+escaped in order to denote @emph{itself}.\n+@end itemize\n \n-@page\n @node       Ref.Lex.Syntax\n @subsection Ref.Lex.Syntax\n @c * Ref.Lex.Syntax::              Syntactic extension tokens.\n \n-Syntactic extensions are marked with the @emph{pound} sigil @code{#} (U+0023),\n+Syntactic extensions are marked with the @emph{pound} sigil U+0023 (@code{#}),\n followed by a qualified name of a compile-time imported module item, an\n-optional parenthesized list of @emph{tokens}, and an optional brace-enclosed\n-region of free-form text (with brace-matching and brace-escaping used to\n-determine the limit of the region). @xref{Ref.Comp.Syntax}.\n+optional parenthesized list of @emph{parsed expressions}, and an optional\n+brace-enclosed region of free-form text (with brace-matching and\n+brace-escaping used to determine the limit of the\n+region). @xref{Ref.Comp.Syntax}.\n \n @emph{TODO: formalize those terms more}.\n "}]}