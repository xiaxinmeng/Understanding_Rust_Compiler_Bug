{"sha": "8165bc14fbc8456c35dc54fb6255456bea30db59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjViYzE0ZmJjODQ1NmMzNWRjNTRmYjYyNTU0NTZiZWEzMGRiNTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-25T19:30:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-25T23:18:31Z"}, "message": "std: Add net::IpAddr, destabilize lookup_host\n\nThis commits adds back an `IpAddr` enum matching the `SocketAddr` enum, but\nwithout a port. The enumeration is `#[unstable]`. The `lookup_host` function and\niterator are also destabilized behind a new feature gate due to questions around\nthe semantics of returning `SocketAddr` values.", "tree": {"sha": "9f6cc6a6b4e1ebcb5289e495c67576c58368439b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f6cc6a6b4e1ebcb5289e495c67576c58368439b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8165bc14fbc8456c35dc54fb6255456bea30db59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8165bc14fbc8456c35dc54fb6255456bea30db59", "html_url": "https://github.com/rust-lang/rust/commit/8165bc14fbc8456c35dc54fb6255456bea30db59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8165bc14fbc8456c35dc54fb6255456bea30db59/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a923278c6278c63468d74772c58dbf788e88f58c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a923278c6278c63468d74772c58dbf788e88f58c", "html_url": "https://github.com/rust-lang/rust/commit/a923278c6278c63468d74772c58dbf788e88f58c"}], "stats": {"total": 89, "additions": 68, "deletions": 21}, "files": [{"sha": "dafca974bec0eacf96d39c766cb466fa68024996", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8165bc14fbc8456c35dc54fb6255456bea30db59/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8165bc14fbc8456c35dc54fb6255456bea30db59/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=8165bc14fbc8456c35dc54fb6255456bea30db59", "patch": "@@ -15,7 +15,7 @@ use hash;\n use io;\n use libc::{self, socklen_t, sa_family_t};\n use mem;\n-use net::{lookup_host, ntoh, hton, Ipv4Addr, Ipv6Addr};\n+use net::{lookup_host, ntoh, hton, IpAddr, Ipv4Addr, Ipv6Addr};\n use option;\n use sys_common::{FromInner, AsInner, IntoInner};\n use vec;\n@@ -47,6 +47,15 @@ pub struct SocketAddrV4 { inner: libc::sockaddr_in }\n pub struct SocketAddrV6 { inner: libc::sockaddr_in6 }\n \n impl SocketAddr {\n+    /// Gets the IP address associated with this socket address.\n+    #[unstable(feature = \"ip_addr\", reason = \"recent addition\")]\n+    pub fn ip(&self) -> IpAddr {\n+        match *self {\n+            SocketAddr::V4(ref a) => IpAddr::V4(*a.ip()),\n+            SocketAddr::V6(ref a) => IpAddr::V6(*a.ip()),\n+        }\n+    }\n+\n     /// Gets the port number associated with this socket address\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn port(&self) -> u16 {\n@@ -333,6 +342,18 @@ impl ToSocketAddrs for SocketAddrV6 {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl ToSocketAddrs for (IpAddr, u16) {\n+    type Iter = option::IntoIter<SocketAddr>;\n+    fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {\n+        let (ip, port) = *self;\n+        match ip {\n+            IpAddr::V4(ref a) => (*a, port).to_socket_addrs(),\n+            IpAddr::V6(ref a) => (*a, port).to_socket_addrs(),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ToSocketAddrs for (Ipv4Addr, u16) {\n     type Iter = option::IntoIter<SocketAddr>;"}, {"sha": "c8b1928747705765c1cc1923b8a2ea6a60b0d6d1", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8165bc14fbc8456c35dc54fb6255456bea30db59/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8165bc14fbc8456c35dc54fb6255456bea30db59/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=8165bc14fbc8456c35dc54fb6255456bea30db59", "patch": "@@ -21,6 +21,16 @@ use libc;\n use sys_common::{AsInner, FromInner};\n use net::{hton, ntoh};\n \n+/// An IP address, either a IPv4 or IPv6 address.\n+#[unstable(feature = \"ip_addr\", reason = \"recent addition\")]\n+#[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]\n+pub enum IpAddr {\n+    /// Representation of an IPv4 address.\n+    V4(Ipv4Addr),\n+    /// Representation of an IPv6 address.\n+    V6(Ipv6Addr),\n+}\n+\n /// Representation of an IPv4 address.\n #[derive(Copy)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -139,6 +149,16 @@ impl Ipv4Addr {\n \n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl fmt::Display for IpAddr {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            IpAddr::V4(ref a) => a.fmt(fmt),\n+            IpAddr::V6(ref a) => a.fmt(fmt),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Ipv4Addr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "7f51b1cba3fe796a8ef66bd4aab1ac06f792525f", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8165bc14fbc8456c35dc54fb6255456bea30db59/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8165bc14fbc8456c35dc54fb6255456bea30db59/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=8165bc14fbc8456c35dc54fb6255456bea30db59", "patch": "@@ -21,7 +21,7 @@ use io::{self, Error, ErrorKind};\n use num::Int;\n use sys_common::net2 as net_imp;\n \n-pub use self::ip::{Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n+pub use self::ip::{IpAddr, Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n pub use self::addr::{SocketAddr, SocketAddrV4, SocketAddrV6, ToSocketAddrs};\n pub use self::tcp::{TcpStream, TcpListener};\n pub use self::udp::UdpSocket;\n@@ -74,10 +74,14 @@ fn each_addr<A: ToSocketAddrs, F, T>(addr: A, mut f: F) -> io::Result<T>\n }\n \n /// An iterator over `SocketAddr` values returned from a host lookup operation.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n+                                              iterator and returning socket \\\n+                                              addresses\")]\n pub struct LookupHost(net_imp::LookupHost);\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n+                                              iterator and returning socket \\\n+                                              addresses\")]\n impl Iterator for LookupHost {\n     type Item = io::Result<SocketAddr>;\n     fn next(&mut self) -> Option<io::Result<SocketAddr>> { self.0.next() }\n@@ -91,7 +95,7 @@ impl Iterator for LookupHost {\n /// # Examples\n ///\n /// ```no_run\n-/// # #![feature(net)]\n+/// # #![feature(lookup_host)]\n /// use std::net;\n ///\n /// # fn foo() -> std::io::Result<()> {\n@@ -101,7 +105,9 @@ impl Iterator for LookupHost {\n /// # Ok(())\n /// # }\n /// ```\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[unstable(feature = \"lookup_host\", reason = \"unsure about the returned \\\n+                                              iterator and returning socket \\\n+                                              addresses\")]\n pub fn lookup_host(host: &str) -> io::Result<LookupHost> {\n     net_imp::lookup_host(host).map(LookupHost)\n }"}, {"sha": "811511149628e640a2254600c7f301e3bc4e54c1", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8165bc14fbc8456c35dc54fb6255456bea30db59/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8165bc14fbc8456c35dc54fb6255456bea30db59/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=8165bc14fbc8456c35dc54fb6255456bea30db59", "patch": "@@ -14,7 +14,7 @@\n use prelude::v1::*;\n \n use io::{self, Error, ErrorKind};\n-use net::{ToSocketAddrs, SocketAddr};\n+use net::{ToSocketAddrs, SocketAddr, IpAddr};\n use sys_common::net2 as net_imp;\n use sys_common::AsInner;\n \n@@ -116,12 +116,12 @@ impl UdpSocket {\n     }\n \n     /// Joins a multicast IP address (becomes a member of it)\n-    pub fn join_multicast(&self, multi: &SocketAddr) -> io::Result<()> {\n+    pub fn join_multicast(&self, multi: &IpAddr) -> io::Result<()> {\n         self.0.join_multicast(multi)\n     }\n \n     /// Leaves a multicast IP address (drops membership from it)\n-    pub fn leave_multicast(&self, multi: &SocketAddr) -> io::Result<()> {\n+    pub fn leave_multicast(&self, multi: &IpAddr) -> io::Result<()> {\n         self.0.leave_multicast(multi)\n     }\n "}, {"sha": "e213a86644fe1ee5fd7f14e976b53874def7342f", "filename": "src/libstd/sys/common/net2.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8165bc14fbc8456c35dc54fb6255456bea30db59/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8165bc14fbc8456c35dc54fb6255456bea30db59/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet2.rs?ref=8165bc14fbc8456c35dc54fb6255456bea30db59", "patch": "@@ -14,7 +14,7 @@ use ffi::CString;\n use io::{self, Error, ErrorKind};\n use libc::{self, c_int, c_char, c_void, socklen_t};\n use mem;\n-use net::{SocketAddr, Shutdown};\n+use net::{SocketAddr, Shutdown, IpAddr};\n use sys::c;\n use sys::net::{cvt, cvt_r, cvt_gai, Socket, init, wrlen_t};\n use sys_common::{AsInner, FromInner, IntoInner};\n@@ -334,39 +334,39 @@ impl UdpSocket {\n                    libc::IP_MULTICAST_LOOP, on as c_int)\n     }\n \n-    pub fn join_multicast(&self, multi: &SocketAddr) -> io::Result<()> {\n+    pub fn join_multicast(&self, multi: &IpAddr) -> io::Result<()> {\n         match *multi {\n-            SocketAddr::V4(..) => {\n+            IpAddr::V4(..) => {\n                 self.set_membership(multi, libc::IP_ADD_MEMBERSHIP)\n             }\n-            SocketAddr::V6(..) => {\n+            IpAddr::V6(..) => {\n                 self.set_membership(multi, libc::IPV6_ADD_MEMBERSHIP)\n             }\n         }\n     }\n-    pub fn leave_multicast(&self, multi: &SocketAddr) -> io::Result<()> {\n+    pub fn leave_multicast(&self, multi: &IpAddr) -> io::Result<()> {\n         match *multi {\n-            SocketAddr::V4(..) => {\n+            IpAddr::V4(..) => {\n                 self.set_membership(multi, libc::IP_DROP_MEMBERSHIP)\n             }\n-            SocketAddr::V6(..) => {\n+            IpAddr::V6(..) => {\n                 self.set_membership(multi, libc::IPV6_DROP_MEMBERSHIP)\n             }\n         }\n     }\n-    fn set_membership(&self, addr: &SocketAddr, opt: c_int) -> io::Result<()> {\n+    fn set_membership(&self, addr: &IpAddr, opt: c_int) -> io::Result<()> {\n         match *addr {\n-            SocketAddr::V4(ref addr) => {\n+            IpAddr::V4(ref addr) => {\n                 let mreq = libc::ip_mreq {\n-                    imr_multiaddr: *addr.ip().as_inner(),\n+                    imr_multiaddr: *addr.as_inner(),\n                     // interface == INADDR_ANY\n                     imr_interface: libc::in_addr { s_addr: 0x0 },\n                 };\n                 setsockopt(&self.inner, libc::IPPROTO_IP, opt, mreq)\n             }\n-            SocketAddr::V6(ref addr) => {\n+            IpAddr::V6(ref addr) => {\n                 let mreq = libc::ip6_mreq {\n-                    ipv6mr_multiaddr: *addr.ip().as_inner(),\n+                    ipv6mr_multiaddr: *addr.as_inner(),\n                     ipv6mr_interface: 0,\n                 };\n                 setsockopt(&self.inner, libc::IPPROTO_IPV6, opt, mreq)"}]}