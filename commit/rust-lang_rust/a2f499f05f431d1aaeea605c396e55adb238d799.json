{"sha": "a2f499f05f431d1aaeea605c396e55adb238d799", "node_id": "C_kwDOAAsO6NoAKGEyZjQ5OWYwNWY0MzFkMWFhZWVhNjA1YzM5NmU1NWFkYjIzOGQ3OTk", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-04T19:26:00Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-04T19:30:29Z"}, "message": "Fix tests", "tree": {"sha": "cb1c90d5554353145fcc6b819abce81953732173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb1c90d5554353145fcc6b819abce81953732173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2f499f05f431d1aaeea605c396e55adb238d799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f499f05f431d1aaeea605c396e55adb238d799", "html_url": "https://github.com/rust-lang/rust/commit/a2f499f05f431d1aaeea605c396e55adb238d799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2f499f05f431d1aaeea605c396e55adb238d799/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f83c6ed817bc42b1ea2e2c582488cfe5f6f1da", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4f83c6ed817bc42b1ea2e2c582488cfe5f6f1da", "html_url": "https://github.com/rust-lang/rust/commit/b4f83c6ed817bc42b1ea2e2c582488cfe5f6f1da"}], "stats": {"total": 115, "additions": 59, "deletions": 56}, "files": [{"sha": "ac0fc0eeb7e945427e182a9f74d907bb0edf535a", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2f499f05f431d1aaeea605c396e55adb238d799/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a2f499f05f431d1aaeea605c396e55adb238d799/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a2f499f05f431d1aaeea605c396e55adb238d799", "patch": "@@ -35,15 +35,15 @@ dependencies = [\n [[package]]\n name = \"gccjit\"\n version = \"1.0.0\"\n-source = \"git+https://github.com/antoyo/gccjit.rs#1bd270d0d130fe31807cfbe509ca095c082e5848\"\n+source = \"git+https://github.com/antoyo/gccjit.rs#eefb8c662d61477f34b7c32d26bcda5f1ef08432\"\n dependencies = [\n  \"gccjit_sys\",\n ]\n \n [[package]]\n name = \"gccjit_sys\"\n version = \"0.0.1\"\n-source = \"git+https://github.com/antoyo/gccjit.rs#1bd270d0d130fe31807cfbe509ca095c082e5848\"\n+source = \"git+https://github.com/antoyo/gccjit.rs#eefb8c662d61477f34b7c32d26bcda5f1ef08432\"\n dependencies = [\n  \"libc 0.1.12\",\n ]"}, {"sha": "2181d49eeef6bcce00c2a9207bf44c72f7cc95ef", "filename": "locales/en-US.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2f499f05f431d1aaeea605c396e55adb238d799/locales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a2f499f05f431d1aaeea605c396e55adb238d799/locales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/locales%2Fen-US.ftl?ref=a2f499f05f431d1aaeea605c396e55adb238d799", "patch": "@@ -60,3 +60,6 @@ codegen_gcc_invalid_monomorphization_unsupported_cast =\n \n codegen_gcc_invalid_monomorphization_unsupported_operation =\n     invalid monomorphization of `{$name}` intrinsic: unsupported operation on `{$in_ty}` with element `{$in_elem}`\n+\n+codegen_gcc_invalid_minimum_alignment =\n+    invalid minimum global alignment: {$err}"}, {"sha": "4db56fa3bd2c7667f525f8db752ef5c84d75f290", "filename": "patches/0022-core-Disable-not-compiling-tests.patch", "status": "modified", "additions": 14, "deletions": 33, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a2f499f05f431d1aaeea605c396e55adb238d799/patches%2F0022-core-Disable-not-compiling-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/a2f499f05f431d1aaeea605c396e55adb238d799/patches%2F0022-core-Disable-not-compiling-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0022-core-Disable-not-compiling-tests.patch?ref=a2f499f05f431d1aaeea605c396e55adb238d799", "patch": "@@ -18,7 +18,7 @@ new file mode 100644\n index 0000000..46fd999\n --- /dev/null\n +++ b/library/core/tests/Cargo.toml\n-@@ -0,0 +1,8 @@\n+@@ -0,0 +1,12 @@\n +[package]\n +name = \"core\"\n +version = \"0.0.0\"\n@@ -27,37 +27,18 @@ index 0000000..46fd999\n +[lib]\n +name = \"coretests\"\n +path = \"lib.rs\"\n-diff --git a/library/core/tests/num/flt2dec/mod.rs b/library/core/tests/num/flt2dec/mod.rs\n-index a35897e..f0bf645 100644\n---- a/library/core/tests/num/flt2dec/mod.rs\n-+++ b/library/core/tests/num/flt2dec/mod.rs\n-@@ -13,7 +13,6 @@ mod strategy {\n-     mod dragon;\n-     mod grisu;\n- }\n--mod random;\n- \n- pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n-     match decode(v).1 {\n-diff --git a/library/core/tests/slice.rs b/library/core/tests/slice.rs\n-index 6609bc3..241b497 100644\n---- a/library/core/tests/slice.rs\n-+++ b/library/core/tests/slice.rs\n-@@ -1209,6 +1209,7 @@ fn brute_force_rotate_test_1() {\n-     }\n- }\n- \n-+/*\n- #[test]\n- #[cfg(not(target_arch = \"wasm32\"))]\n- fn sort_unstable() {\n-@@ -1394,6 +1395,7 @@ fn partition_at_index() {\n-     v.select_nth_unstable(0);\n-     assert!(v == [0xDEADBEEF]);\n- }\n-+*/\n- \n- #[test]\n- #[should_panic(expected = \"index 0 greater than length of slice\")]\n++\n++[dependencies]\n++rand = { version = \"0.8.5\", default-features = false }\n++rand_xorshift = { version = \"0.3.0\", default-features = false }\n+diff --git a/library/core/tests/lib.rs b/library/core/tests/lib.rs\n+index 42a26ae..5ac1042 100644\n+--- a/library/core/tests/lib.rs\n++++ b/library/core/tests/lib.rs\n+@@ -1,3 +1,4 @@\n++#![cfg(test)]\n+ #![feature(alloc_layout_extra)]\n+ #![feature(array_chunks)]\n+ #![feature(array_methods)]\n --\n 2.21.0 (Apple Git-122)"}, {"sha": "933ecd45baadb63632cbd08ba7431e1a9e6ef077", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2f499f05f431d1aaeea605c396e55adb238d799/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/a2f499f05f431d1aaeea605c396e55adb238d799/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=a2f499f05f431d1aaeea605c396e55adb238d799", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-02-28\"\n+channel = \"nightly-2023-03-02\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "8f0208f6848e200b01367f2900e8cd23f0744649", "filename": "src/builder.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=a2f499f05f431d1aaeea605c396e55adb238d799", "patch": "@@ -1228,12 +1228,8 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n \n     #[cfg(feature=\"master\")]\n     fn resume(&mut self, exn0: RValue<'gcc>, _exn1: RValue<'gcc>) {\n-        // TODO(antoyo): check if this is normal that we need to dereference the value.\n-        // NOTE: the type is wrong, so in order to get a pointer for parameter, cast it to a\n-        // pointer of pointer that is later dereferenced.\n-        let exn_type = exn0.get_type().make_pointer();\n+        let exn_type = exn0.get_type();\n         let exn = self.context.new_cast(None, exn0, exn_type);\n-        let exn = exn.dereference(None).to_rvalue();\n         let unwind_resume = self.context.get_target_builtin_function(\"__builtin_unwind_resume\");\n         self.llbb().add_eval(None, self.context.new_call(None, unwind_resume, &[exn]));\n         self.unreachable();"}, {"sha": "76fc7bd222e1e072e13cd5ebdb2221bf9585bda8", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=a2f499f05f431d1aaeea605c396e55adb238d799", "patch": "@@ -36,7 +36,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n pub fn bytes_in_context<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, bytes: &[u8]) -> RValue<'gcc> {\n     let context = &cx.context;\n     let byte_type = context.new_type::<u8>();\n-    let typ = context.new_array_type(None, byte_type, bytes.len() as i32);\n+    let typ = context.new_array_type(None, byte_type, bytes.len() as u64);\n     let elements: Vec<_> =\n         bytes.iter()\n         .map(|&byte| context.new_rvalue_from_int(byte_type, byte as i32))"}, {"sha": "792ab8f890d8feab0f2c7cabdf30d293c1551c17", "filename": "src/consts.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=a2f499f05f431d1aaeea605c396e55adb238d799", "patch": "@@ -13,6 +13,7 @@ use rustc_target::abi::{self, Align, HasDataLayout, Primitive, Size, WrappingRan\n \n use crate::base;\n use crate::context::CodegenCx;\n+use crate::errors::InvalidMinimumAlignment;\n use crate::type_of::LayoutGccExt;\n \n impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n@@ -30,6 +31,21 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n     }\n }\n \n+fn set_global_alignment<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, gv: LValue<'gcc>, mut align: Align) {\n+    // The target may require greater alignment for globals than the type does.\n+    // Note: GCC and Clang also allow `__attribute__((aligned))` on variables,\n+    // which can force it to be smaller. Rust doesn't support this yet.\n+    if let Some(min) = cx.sess().target.min_global_align {\n+        match Align::from_bits(min) {\n+            Ok(min) => align = align.max(min),\n+            Err(err) => {\n+                cx.sess().emit_err(InvalidMinimumAlignment { err });\n+            }\n+        }\n+    }\n+    gv.set_alignment(align.bytes() as i32);\n+}\n+\n impl<'gcc, 'tcx> StaticMethods for CodegenCx<'gcc, 'tcx> {\n     fn static_addr_of(&self, cv: RValue<'gcc>, align: Align, kind: Option<&str>) -> RValue<'gcc> {\n         // TODO(antoyo): implement a proper rvalue comparison in libgccjit instead of doing the\n@@ -81,7 +97,7 @@ impl<'gcc, 'tcx> StaticMethods for CodegenCx<'gcc, 'tcx> {\n         let ty = instance.ty(self.tcx, ty::ParamEnv::reveal_all());\n         let gcc_type = self.layout_of(ty).gcc_type(self);\n \n-        // TODO(antoyo): set alignment.\n+        set_global_alignment(self, global, self.align_of(ty));\n \n         let value = self.bitcast_if_needed(value, gcc_type);\n         global.global_set_initializer_rvalue(value);"}, {"sha": "5ea39606c086d54963a8b2770831b60403e4f8f8", "filename": "src/errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferrors.rs?ref=a2f499f05f431d1aaeea605c396e55adb238d799", "patch": "@@ -221,3 +221,9 @@ pub(crate) struct UnwindingInlineAsm {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_gcc_invalid_minimum_alignment)]\n+pub(crate) struct InvalidMinimumAlignment {\n+    pub err: String,\n+}"}, {"sha": "daa661f35c4c108767b9bfde5476544944506b47", "filename": "src/type_.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_.rs?ref=a2f499f05f431d1aaeea605c396e55adb238d799", "patch": "@@ -1,5 +1,3 @@\n-use std::convert::TryInto;\n-\n use gccjit::{RValue, Struct, Type};\n use rustc_codegen_ssa::traits::{BaseTypeMethods, DerivedTypeMethods, TypeMembershipMethods};\n use rustc_codegen_ssa::common::TypeKind;\n@@ -202,23 +200,17 @@ impl<'gcc, 'tcx> BaseTypeMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         value.get_type()\n     }\n \n-    fn type_array(&self, ty: Type<'gcc>, mut len: u64) -> Type<'gcc> {\n-        if let Some(struct_type) = ty.is_struct() {\n+    fn type_array(&self, ty: Type<'gcc>, len: u64) -> Type<'gcc> {\n+        // TODO: remove this as well?\n+        /*if let Some(struct_type) = ty.is_struct() {\n             if struct_type.get_field_count() == 0 {\n                 // NOTE: since gccjit only supports i32 for the array size and libcore's tests uses a\n                 // size of usize::MAX in test_binary_search, we workaround this by setting the size to\n                 // zero for ZSTs.\n                 // FIXME(antoyo): fix gccjit API.\n                 len = 0;\n             }\n-        }\n-\n-        // NOTE: see note above. Some other test uses usize::MAX.\n-        if len == u64::MAX {\n-            len = 0;\n-        }\n-\n-        let len: i32 = len.try_into().expect(\"array len\");\n+        }*/\n \n         self.context.new_array_type(None, ty, len)\n     }"}, {"sha": "5df8c1a209db2e8f9301edb488379200f66832a9", "filename": "src/type_of.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2f499f05f431d1aaeea605c396e55adb238d799/src%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_of.rs?ref=a2f499f05f431d1aaeea605c396e55adb238d799", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::bug;\n use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n use rustc_middle::ty::layout::{FnAbiOf, LayoutOf, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_target::abi::{self, Abi, F32, F64, FieldsShape, Int, Integer, Pointer, PointeeInfo, Size, TyAbiInterface, Variants};\n+use rustc_target::abi::{self, Abi, Align, F32, F64, FieldsShape, Int, Integer, Pointer, PointeeInfo, Size, TyAbiInterface, Variants};\n use rustc_target::abi::call::{CastTarget, FnAbi, Reg};\n \n use crate::abi::{FnAbiGccExt, GccType};\n@@ -50,6 +50,12 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n+    pub fn align_of(&self, ty: Ty<'tcx>) -> Align {\n+        self.layout_of(ty).align.abi\n+    }\n+}\n+\n fn uncached_gcc_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, layout: TyAndLayout<'tcx>, defer: &mut Option<(Struct<'gcc>, TyAndLayout<'tcx>)>) -> Type<'gcc> {\n     match layout.abi {\n         Abi::Scalar(_) => bug!(\"handled elsewhere\"),"}, {"sha": "6139892aefca7d2d42bf35aad2bb9de2726e7f40", "filename": "test.sh", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2f499f05f431d1aaeea605c396e55adb238d799/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a2f499f05f431d1aaeea605c396e55adb238d799/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=a2f499f05f431d1aaeea605c396e55adb238d799", "patch": "@@ -225,6 +225,9 @@ rustc = \"$HOME/.rustup/toolchains/$rust_toolchain-$TARGET_TRIPLE/bin/rustc\"\n \n [target.x86_64-unknown-linux-gnu]\n llvm-filecheck = \"`which FileCheck-10 || which FileCheck-11 || which FileCheck-12 || which FileCheck-13 || which FileCheck-14`\"\n+\n+[llvm]\n+download-ci-llvm = false\n EOF\n \n     rustc -V | cut -d' ' -f3 | tr -d '('"}]}