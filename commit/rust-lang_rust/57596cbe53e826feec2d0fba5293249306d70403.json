{"sha": "57596cbe53e826feec2d0fba5293249306d70403", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NTk2Y2JlNTNlODI2ZmVlYzJkMGZiYTUyOTMyNDkzMDZkNzA0MDM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-08T22:02:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-08T23:05:13Z"}, "message": "rustdoc: Improve formatting of subsection headers", "tree": {"sha": "b3360ff0c9e48fa4c82ac2326802a1c114201fc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3360ff0c9e48fa4c82ac2326802a1c114201fc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57596cbe53e826feec2d0fba5293249306d70403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57596cbe53e826feec2d0fba5293249306d70403", "html_url": "https://github.com/rust-lang/rust/commit/57596cbe53e826feec2d0fba5293249306d70403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57596cbe53e826feec2d0fba5293249306d70403/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d686d637241f50e8fbcaa47eee7bcd3c058f097", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d686d637241f50e8fbcaa47eee7bcd3c058f097", "html_url": "https://github.com/rust-lang/rust/commit/7d686d637241f50e8fbcaa47eee7bcd3c058f097"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "e8ba8c69658af103437a33229c93960c18f515aa", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/57596cbe53e826feec2d0fba5293249306d70403/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57596cbe53e826feec2d0fba5293249306d70403/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=57596cbe53e826feec2d0fba5293249306d70403", "patch": "@@ -134,6 +134,10 @@ fn write_header_(ctxt: ctxt, lvl: hlvl, title: str) {\n     ctxt.w.write_line(\"\");\n }\n \n+fn write_lead(ctxt: ctxt, title: str) {\n+    ctxt.w.write_str(#fmt(\"__%s__: \", title))\n+}\n+\n fn header_kind(doc: doc::itemtag) -> str {\n     alt doc {\n       doc::modtag(_) {\n@@ -478,7 +482,8 @@ fn write_args(\n     args: [doc::argdoc]\n ) {\n     if vec::is_not_empty(args) {\n-        ctxt.w.write_line(\"Arguments:\");\n+        write_lead(ctxt, \"Arguments\");\n+        ctxt.w.write_line(\"\");\n         ctxt.w.write_line(\"\");\n         vec::iter(args) {|arg| write_arg(ctxt, arg) };\n         ctxt.w.write_line(\"\");\n@@ -505,7 +510,7 @@ fn should_write_argument_list() {\n     let markdown = test::render(source);\n     assert str::contains(\n         markdown,\n-        \"Arguments:\\n\\\n+        \"__Arguments__: \\n\\\n          \\n\\\n          * `b`\\n\\\n          * `c`\\n\\\n@@ -533,7 +538,8 @@ fn write_return(\n ) {\n     alt doc.desc {\n       some(d) {\n-        ctxt.w.write_line(#fmt(\"Return value: %s\", d));\n+        write_lead(ctxt, \"Return value\");\n+        ctxt.w.write_line(d);\n         ctxt.w.write_line(\"\");\n       }\n       none { }\n@@ -544,7 +550,7 @@ fn write_return(\n fn should_write_return_type_on_new_line() {\n     let markdown = test::render(\n         \"#[doc(return = \\\"test\\\")] fn a() -> int { }\");\n-    assert str::contains(markdown, \"\\nReturn value: test\");\n+    assert str::contains(markdown, \"\\n__Return value__: test\");\n }\n \n #[test]\n@@ -553,7 +559,7 @@ fn should_write_blank_line_between_return_type_and_next_header() {\n         \"#[doc(return = \\\"test\\\")] fn a() -> int { } \\\n          fn b() -> int { }\"\n     );\n-    assert str::contains(markdown, \"Return value: test\\n\\n##\");\n+    assert str::contains(markdown, \"__Return value__: test\\n\\n##\");\n }\n \n #[test]\n@@ -573,7 +579,8 @@ fn should_write_blank_line_after_return_description() {\n fn write_failure(ctxt: ctxt, str: option<str>) {\n     alt str {\n       some(str) {\n-        ctxt.w.write_line(#fmt(\"Failure conditions: %s\", str));\n+        write_lead(ctxt, \"Failure conditions\");\n+        ctxt.w.write_line(str);\n         ctxt.w.write_line(\"\");\n       }\n       none { }\n@@ -586,7 +593,7 @@ fn should_write_failure_conditions() {\n         \"#[doc(failure = \\\"it's the fail\\\")] fn a () { }\");\n     assert str::contains(\n         markdown,\n-        \"\\n\\nFailure conditions: it's the fail\\n\\n\");\n+        \"\\n\\n__Failure conditions__: it's the fail\\n\\n\");\n }\n \n fn write_const(\n@@ -722,7 +729,7 @@ fn should_write_resource_signature() {\n fn should_write_resource_args() {\n     let markdown = test::render(\"#[doc(args(a = \\\"b\\\"))]\\\n                                  resource r(a: bool) { }\");\n-    assert str::contains(markdown, \"Arguments:\\n\\n* `a` - b\");\n+    assert str::contains(markdown, \"__Arguments__: \\n\\n* `a` - b\");\n }\n \n fn write_iface(ctxt: ctxt, doc: doc::ifacedoc) {\n@@ -787,7 +794,7 @@ fn should_write_iface_method_signature() {\n fn should_write_iface_method_argument_header() {\n     let markdown = test::render(\n         \"iface a { fn a(b: int); }\");\n-    assert str::contains(markdown, \"\\n\\nArguments:\\n\\n\");\n+    assert str::contains(markdown, \"\\n\\n__Arguments__: \\n\\n\");\n }\n \n #[test]\n@@ -808,14 +815,14 @@ fn should_not_write_iface_method_arguments_if_none() {\n fn should_write_iface_method_return_info() {\n     let markdown = test::render(\n         \"iface a { #[doc(return = \\\"test\\\")] fn a() -> int; }\");\n-    assert str::contains(markdown, \"Return value: test\");\n+    assert str::contains(markdown, \"__Return value__: test\");\n }\n \n #[test]\n fn should_write_iface_method_failure_conditions() {\n     let markdown = test::render(\n         \"iface a { #[doc(failure = \\\"nuked\\\")] fn a(); }\");\n-    assert str::contains(markdown, \"Failure conditions: nuked\");\n+    assert str::contains(markdown, \"__Failure conditions__: nuked\");\n }\n \n fn write_impl(ctxt: ctxt, doc: doc::impldoc) {\n@@ -869,7 +876,7 @@ fn should_write_impl_method_signature() {\n fn should_write_impl_method_argument_header() {\n     let markdown = test::render(\n         \"impl a for int { fn a(b: int) { } }\");\n-    assert str::contains(markdown, \"\\n\\nArguments:\\n\\n\");\n+    assert str::contains(markdown, \"\\n\\n__Arguments__: \\n\\n\");\n }\n \n #[test]\n@@ -890,14 +897,14 @@ fn should_not_write_impl_method_arguments_if_none() {\n fn should_write_impl_method_return_info() {\n     let markdown = test::render(\n         \"impl a for int { #[doc(return = \\\"test\\\")] fn a() -> int { } }\");\n-    assert str::contains(markdown, \"Return value: test\");\n+    assert str::contains(markdown, \"__Return value__: test\");\n }\n \n #[test]\n fn should_write_impl_method_failure_conditions() {\n     let markdown = test::render(\n         \"impl a for int { #[doc(failure = \\\"nuked\\\")] fn a() { } }\");\n-    assert str::contains(markdown, \"Failure conditions: nuked\");\n+    assert str::contains(markdown, \"__Failure conditions__: nuked\");\n }\n \n fn write_type("}]}