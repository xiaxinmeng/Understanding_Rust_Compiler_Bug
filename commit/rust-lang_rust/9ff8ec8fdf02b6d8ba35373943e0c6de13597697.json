{"sha": "9ff8ec8fdf02b6d8ba35373943e0c6de13597697", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZjhlYzhmZGYwMmI2ZDhiYTM1MzczOTQzZTBjNmRlMTM1OTc2OTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-30T05:38:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-30T05:38:06Z"}, "message": "Auto merge of #50204 - Manishearth:approx-enum, r=estebank\n\nUse enum for approximate suggestions\n\nr? @nrc @killercup", "tree": {"sha": "36cd52c392a8666e2a8075d9391aaf97fea75061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36cd52c392a8666e2a8075d9391aaf97fea75061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ff8ec8fdf02b6d8ba35373943e0c6de13597697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff8ec8fdf02b6d8ba35373943e0c6de13597697", "html_url": "https://github.com/rust-lang/rust/commit/9ff8ec8fdf02b6d8ba35373943e0c6de13597697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f900bcf35c9ed4b8f911a37df3949f82669b9bd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f900bcf35c9ed4b8f911a37df3949f82669b9bd8", "html_url": "https://github.com/rust-lang/rust/commit/f900bcf35c9ed4b8f911a37df3949f82669b9bd8"}, {"sha": "4e2cd4104a39c1e0562c3fb00085a1a3f4f22291", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e2cd4104a39c1e0562c3fb00085a1a3f4f22291", "html_url": "https://github.com/rust-lang/rust/commit/4e2cd4104a39c1e0562c3fb00085a1a3f4f22291"}], "stats": {"total": 76, "additions": 45, "deletions": 31}, "files": [{"sha": "06922d986b3ce48df83cb732820e7b87d31f9310", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=9ff8ec8fdf02b6d8ba35373943e0c6de13597697", "patch": "@@ -1270,7 +1270,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],\n         \"in dep-info output, omit targets for tracking dependencies of the dep-info files \\\n          themselves\"),\n-    approximate_suggestions: bool = (false, parse_bool, [UNTRACKED],\n+    suggestion_applicability: bool = (false, parse_bool, [UNTRACKED],\n         \"include machine-applicability of suggestions in JSON output\"),\n     unpretty: Option<String> = (None, parse_unpretty, [UNTRACKED],\n         \"Present the input source, unstable (and less-pretty) variants;"}, {"sha": "37a6b2e79f7dbd0c97a0b6fda514c8aa52484ff9", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9ff8ec8fdf02b6d8ba35373943e0c6de13597697", "patch": "@@ -1002,7 +1002,7 @@ pub fn build_session_with_codemap(\n                     Some(registry),\n                     codemap.clone(),\n                     pretty,\n-                    sopts.debugging_opts.approximate_suggestions,\n+                    sopts.debugging_opts.suggestion_applicability,\n                 ).ui_testing(sopts.debugging_opts.ui_testing),\n             ),\n             (config::ErrorOutputType::Json(pretty), Some(dst)) => Box::new(\n@@ -1011,7 +1011,7 @@ pub fn build_session_with_codemap(\n                     Some(registry),\n                     codemap.clone(),\n                     pretty,\n-                    sopts.debugging_opts.approximate_suggestions,\n+                    sopts.debugging_opts.suggestion_applicability,\n                 ).ui_testing(sopts.debugging_opts.ui_testing),\n             ),\n             (config::ErrorOutputType::Short(color_config), None) => Box::new("}, {"sha": "75401f21862b67a683b9fab3450f082061d77432", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=9ff8ec8fdf02b6d8ba35373943e0c6de13597697", "patch": "@@ -11,6 +11,7 @@\n use CodeSuggestion;\n use SubstitutionPart;\n use Substitution;\n+use Applicability;\n use Level;\n use std::fmt;\n use syntax_pos::{MultiSpan, Span};\n@@ -222,7 +223,7 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             show_code_when_inline: false,\n-            approximate: false,\n+            applicability: Applicability::Unspecified,\n         });\n         self\n     }\n@@ -253,7 +254,7 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n-            approximate: false,\n+            applicability: Applicability::Unspecified,\n         });\n         self\n     }\n@@ -269,15 +270,16 @@ impl Diagnostic {\n             }).collect(),\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n-            approximate: false,\n+            applicability: Applicability::Unspecified,\n         });\n         self\n     }\n \n     /// This is a suggestion that may contain mistakes or fillers and should\n     /// be read and understood by a human.\n-    pub fn span_approximate_suggestion(&mut self, sp: Span, msg: &str,\n-                                       suggestion: String) -> &mut Self {\n+    pub fn span_suggestion_with_applicability(&mut self, sp: Span, msg: &str,\n+                                       suggestion: String,\n+                                       applicability: Applicability) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: vec![Substitution {\n                 parts: vec![SubstitutionPart {\n@@ -287,13 +289,14 @@ impl Diagnostic {\n             }],\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n-            approximate: true,\n+            applicability,\n         });\n         self\n     }\n \n-    pub fn span_approximate_suggestions(&mut self, sp: Span, msg: &str,\n-                                        suggestions: Vec<String>) -> &mut Self {\n+    pub fn span_suggestions_with_applicability(&mut self, sp: Span, msg: &str,\n+                                        suggestions: Vec<String>,\n+                                        applicability: Applicability) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: suggestions.into_iter().map(|snippet| Substitution {\n                 parts: vec![SubstitutionPart {\n@@ -303,7 +306,7 @@ impl Diagnostic {\n             }).collect(),\n             msg: msg.to_owned(),\n             show_code_when_inline: true,\n-            approximate: true,\n+            applicability,\n         });\n         self\n     }"}, {"sha": "7e9ca8633a53e4ea119fb8a0832cccae45c19137", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=9ff8ec8fdf02b6d8ba35373943e0c6de13597697", "patch": "@@ -11,6 +11,7 @@\n use Diagnostic;\n use DiagnosticId;\n use DiagnosticStyledString;\n+use Applicability;\n \n use Level;\n use Handler;\n@@ -187,15 +188,17 @@ impl<'a> DiagnosticBuilder<'a> {\n                                      msg: &str,\n                                      suggestions: Vec<String>)\n                                      -> &mut Self);\n-    forward!(pub fn span_approximate_suggestion(&mut self,\n+    forward!(pub fn span_suggestion_with_applicability(&mut self,\n                                                 sp: Span,\n                                                 msg: &str,\n-                                                suggestion: String)\n+                                                suggestion: String,\n+                                                applicability: Applicability)\n                                                 -> &mut Self);\n-    forward!(pub fn span_approximate_suggestions(&mut self,\n+    forward!(pub fn span_suggestions_with_applicability(&mut self,\n                                                  sp: Span,\n                                                  msg: &str,\n-                                                 suggestions: Vec<String>)\n+                                                 suggestions: Vec<String>,\n+                                                 applicability: Applicability)\n                                                  -> &mut Self);\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);"}, {"sha": "c2b442e949758a19c64f4b2aa73dc8d7264f6282", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=9ff8ec8fdf02b6d8ba35373943e0c6de13597697", "patch": "@@ -56,6 +56,14 @@ mod lock;\n \n use syntax_pos::{BytePos, Loc, FileLinesResult, FileMap, FileName, MultiSpan, Span, NO_EXPANSION};\n \n+#[derive(Copy, Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum Applicability {\n+    MachineApplicable,\n+    HasPlaceholders,\n+    MaybeIncorrect,\n+    Unspecified\n+}\n+\n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct CodeSuggestion {\n     /// Each substitute can have multiple variants due to multiple\n@@ -87,7 +95,7 @@ pub struct CodeSuggestion {\n     /// Sometimes we may show suggestions with placeholders,\n     /// which are useful for users but not useful for\n     /// tools like rustfix\n-    pub approximate: bool,\n+    pub applicability: Applicability,\n }\n \n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "61fb0b40c231560b8005af5f1997b706a41f190e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=9ff8ec8fdf02b6d8ba35373943e0c6de13597697", "patch": "@@ -177,7 +177,7 @@ pub fn run_core(search_paths: SearchPaths,\n                 None,\n                 codemap.clone(),\n                 pretty,\n-                sessopts.debugging_opts.approximate_suggestions,\n+                sessopts.debugging_opts.suggestion_applicability,\n             ).ui_testing(sessopts.debugging_opts.ui_testing)\n         ),\n         ErrorOutputType::Short(color_config) => Box::new("}, {"sha": "2f15e75093b10ae040a233f83d10f10c7c8697f6", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff8ec8fdf02b6d8ba35373943e0c6de13597697/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=9ff8ec8fdf02b6d8ba35373943e0c6de13597697", "patch": "@@ -23,7 +23,7 @@ use codemap::{CodeMap, FilePathMapping};\n use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n use errors::registry::Registry;\n use errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, CodeMapper};\n-use errors::DiagnosticId;\n+use errors::{DiagnosticId, Applicability};\n use errors::emitter::{Emitter, EmitterWriter};\n \n use rustc_data_structures::sync::{self, Lrc};\n@@ -39,21 +39,21 @@ pub struct JsonEmitter {\n     cm: Lrc<CodeMapper + sync::Send + sync::Sync>,\n     pretty: bool,\n     /// Whether \"approximate suggestions\" are enabled in the config\n-    approximate_suggestions: bool,\n+    suggestion_applicability: bool,\n     ui_testing: bool,\n }\n \n impl JsonEmitter {\n     pub fn stderr(registry: Option<Registry>,\n                   code_map: Lrc<CodeMap>,\n                   pretty: bool,\n-                  approximate_suggestions: bool) -> JsonEmitter {\n+                  suggestion_applicability: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n             registry,\n             cm: code_map,\n             pretty,\n-            approximate_suggestions,\n+            suggestion_applicability,\n             ui_testing: false,\n         }\n     }\n@@ -68,13 +68,13 @@ impl JsonEmitter {\n                registry: Option<Registry>,\n                code_map: Lrc<CodeMap>,\n                pretty: bool,\n-               approximate_suggestions: bool) -> JsonEmitter {\n+               suggestion_applicability: bool) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n             registry,\n             cm: code_map,\n             pretty,\n-            approximate_suggestions,\n+            suggestion_applicability,\n             ui_testing: false,\n         }\n     }\n@@ -138,7 +138,7 @@ struct DiagnosticSpan {\n     suggested_replacement: Option<String>,\n     /// If the suggestion is approximate\n     #[rustc_serialize_exclude_null]\n-    suggestion_approximate: Option<bool>,\n+    suggestion_applicability: Option<Applicability>,\n     /// Macro invocations that created the code at this span, if any.\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,\n }\n@@ -239,7 +239,7 @@ impl Diagnostic {\n \n impl DiagnosticSpan {\n     fn from_span_label(span: SpanLabel,\n-                       suggestion: Option<(&String, bool)>,\n+                       suggestion: Option<(&String, Applicability)>,\n                        je: &JsonEmitter)\n                        -> DiagnosticSpan {\n         Self::from_span_etc(span.span,\n@@ -252,7 +252,7 @@ impl DiagnosticSpan {\n     fn from_span_etc(span: Span,\n                      is_primary: bool,\n                      label: Option<String>,\n-                     suggestion: Option<(&String, bool)>,\n+                     suggestion: Option<(&String, Applicability)>,\n                      je: &JsonEmitter)\n                      -> DiagnosticSpan {\n         // obtain the full backtrace from the `macro_backtrace`\n@@ -272,7 +272,7 @@ impl DiagnosticSpan {\n     fn from_span_full(span: Span,\n                       is_primary: bool,\n                       label: Option<String>,\n-                      suggestion: Option<(&String, bool)>,\n+                      suggestion: Option<(&String, Applicability)>,\n                       mut backtrace: vec::IntoIter<MacroBacktrace>,\n                       je: &JsonEmitter)\n                       -> DiagnosticSpan {\n@@ -301,7 +301,7 @@ impl DiagnosticSpan {\n             })\n         });\n \n-        let suggestion_approximate = if je.approximate_suggestions {\n+        let suggestion_applicability = if je.suggestion_applicability {\n              suggestion.map(|x| x.1)\n         } else {\n             None\n@@ -318,7 +318,7 @@ impl DiagnosticSpan {\n             is_primary,\n             text: DiagnosticSpanLine::from_span(span, je),\n             suggested_replacement: suggestion.map(|x| x.0.clone()),\n-            suggestion_approximate,\n+            suggestion_applicability,\n             expansion: backtrace_step,\n             label,\n         }\n@@ -344,7 +344,7 @@ impl DiagnosticSpan {\n                               };\n                               DiagnosticSpan::from_span_label(span_label,\n                                                               Some((&suggestion_inner.snippet,\n-                                                                   suggestion.approximate)),\n+                                                                   suggestion.applicability)),\n                                                               je)\n                           })\n                       })"}]}