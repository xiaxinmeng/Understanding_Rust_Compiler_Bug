{"sha": "473151070bd939239aa8f9bf218e2753b8a479cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MzE1MTA3MGJkOTM5MjM5YWE4ZjliZjIxOGUyNzUzYjhhNDc5Y2Y=", "commit": {"author": {"name": "Michal 'vorner' Vaner", "email": "vorner@vorner.cz", "date": "2019-11-24T18:00:25Z"}, "committer": {"name": "Michal 'vorner' Vaner", "email": "vorner@vorner.cz", "date": "2019-12-05T14:22:11Z"}, "message": "weak-into-raw: Clarify some details in Safety\n\nClarify it is OK to pass a pointer that never owned a weak count (one\nfrom Weak::new) back into it as it was created from it. Relates to\ndiscussion in #60728.", "tree": {"sha": "7f978138ea4b0f7e5e59c80c19a2367aa92a1f8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f978138ea4b0f7e5e59c80c19a2367aa92a1f8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/473151070bd939239aa8f9bf218e2753b8a479cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEQ8wy/3jh6tM0kr/e9wDQwBnkxm8FAl3pEpYACgkQ9wDQwBnk\nxm9heQ//avVzSqOo7E8EqGQKEJ+3imrzDqSomQz4NK7AU3cYBfuRupABm76x90y1\nTk7dc25cJ5l21G8RqpLjGw9uvOyXO54FIezEoanVAoRYpOSLdC7TGcCu4yQlXAg8\nQuYhtfFrw+yx+uP1RrtT+fMd9qaRhJAx8mcFmZ9Va5kCMjJczztj3xfzr4bFvPHt\nAlSu8oTAIUQp72XG6N+3JIDHStQBLFjLg6XU3GWUXKIIVtq6Q/Iq+9ONpjmk68o/\n64MJP6z+OMA5l2FTrmVVgciqTT0vFZBtnNoiebpV52n2McnobLpX7vsD4IlSO8TC\nFtqTa0lN3tjYWDnLYm7ibS/kaJSfKCoAMB8oLkxhyg37MYjGRCARZJmJQWADs+rO\nK4WNkT9vFO1Wb8+Ym0Wz8Gtx/Bcra8CbTHlhbJECHp/lYD40WFnOyK/2Y8mvEyfe\nOZv4xpF4+BhGzAtTuzAkIUE+jNuY/r1IYUoXJr3DEnPx3RpGpYCLEfu+ooQig27e\niumzPeVIv3RmKfZks/HicZXU8QVhBzQa5r9Xolyga3MgLhsUswB9gH4Aez3/M7uP\nvAKMQ2GdIDdyn5Qp9CMFmupGrENEz4nxsXWHBrmLNze+jshVZv3P/qk4JvTFDjot\ngOOkThgYjZOVA6vq60r6T7hdD6tRnleVhUSfG8U85tchZT9Ww3Y=\n=GDB2\n-----END PGP SIGNATURE-----", "payload": "tree 7f978138ea4b0f7e5e59c80c19a2367aa92a1f8e\nparent 5a1d028d4c8fc15473dc10473c38df162daa7b41\nauthor Michal 'vorner' Vaner <vorner@vorner.cz> 1574618425 +0100\ncommitter Michal 'vorner' Vaner <vorner@vorner.cz> 1575555731 +0100\n\nweak-into-raw: Clarify some details in Safety\n\nClarify it is OK to pass a pointer that never owned a weak count (one\nfrom Weak::new) back into it as it was created from it. Relates to\ndiscussion in #60728.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/473151070bd939239aa8f9bf218e2753b8a479cf", "html_url": "https://github.com/rust-lang/rust/commit/473151070bd939239aa8f9bf218e2753b8a479cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/473151070bd939239aa8f9bf218e2753b8a479cf/comments", "author": {"login": "vorner", "id": 11783500, "node_id": "MDQ6VXNlcjExNzgzNTAw", "avatar_url": "https://avatars.githubusercontent.com/u/11783500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vorner", "html_url": "https://github.com/vorner", "followers_url": "https://api.github.com/users/vorner/followers", "following_url": "https://api.github.com/users/vorner/following{/other_user}", "gists_url": "https://api.github.com/users/vorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/vorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vorner/subscriptions", "organizations_url": "https://api.github.com/users/vorner/orgs", "repos_url": "https://api.github.com/users/vorner/repos", "events_url": "https://api.github.com/users/vorner/events{/privacy}", "received_events_url": "https://api.github.com/users/vorner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vorner", "id": 11783500, "node_id": "MDQ6VXNlcjExNzgzNTAw", "avatar_url": "https://avatars.githubusercontent.com/u/11783500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vorner", "html_url": "https://github.com/vorner", "followers_url": "https://api.github.com/users/vorner/followers", "following_url": "https://api.github.com/users/vorner/following{/other_user}", "gists_url": "https://api.github.com/users/vorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/vorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vorner/subscriptions", "organizations_url": "https://api.github.com/users/vorner/orgs", "repos_url": "https://api.github.com/users/vorner/repos", "events_url": "https://api.github.com/users/vorner/events{/privacy}", "received_events_url": "https://api.github.com/users/vorner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a1d028d4c8fc15473dc10473c38df162daa7b41", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a1d028d4c8fc15473dc10473c38df162daa7b41", "html_url": "https://github.com/rust-lang/rust/commit/5a1d028d4c8fc15473dc10473c38df162daa7b41"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "0f1af8be850ae03b4440251b1597542b38a8dd11", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/473151070bd939239aa8f9bf218e2753b8a479cf/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473151070bd939239aa8f9bf218e2753b8a479cf/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=473151070bd939239aa8f9bf218e2753b8a479cf", "patch": "@@ -1619,10 +1619,8 @@ impl<T> Weak<T> {\n \n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n-    /// It is up to the caller to ensure that the object is still alive when accessing it through\n-    /// the pointer.\n-    ///\n-    /// The pointer may be [`null`] or be dangling in case the object has already been destroyed.\n+    /// The pointer is valid only if there are some strong references. The pointer may be dangling\n+    /// or even [`null`] otherwise.\n     ///\n     /// # Examples\n     ///\n@@ -1702,14 +1700,18 @@ impl<T> Weak<T> {\n     /// This can be used to safely get a strong reference (by calling [`upgrade`]\n     /// later) or to deallocate the weak count by dropping the `Weak<T>`.\n     ///\n-    /// It takes ownership of one weak count. In case a [`null`] is passed, a dangling [`Weak`] is\n-    /// returned.\n+    /// It takes ownership of one weak count (with the exception of pointers created by [`new`],\n+    /// as these don't have any corresponding weak count).\n     ///\n     /// # Safety\n     ///\n-    /// The pointer must represent one valid weak count. In other words, it must point to `T` which\n-    /// is or *was* managed by an [`Rc`] and the weak count of that [`Rc`] must not have reached\n-    /// 0. It is allowed for the strong count to be 0.\n+    /// The pointer must have originated from the [`into_raw`] (or [`as_raw`], provided there was\n+    /// a corresponding [`forget`] on the `Weak<T>`) and must still own its potential weak reference\n+    /// count.\n+    ///\n+    /// It is allowed for the strong count to be 0 at the time of calling this, but the weak count\n+    /// must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created\n+    /// by [`new`]).\n     ///\n     /// # Examples\n     ///\n@@ -1734,11 +1736,13 @@ impl<T> Weak<T> {\n     /// assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n     /// ```\n     ///\n-    /// [`null`]: ../../std/ptr/fn.null.html\n     /// [`into_raw`]: struct.Weak.html#method.into_raw\n     /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`Rc`]: struct.Rc.html\n     /// [`Weak`]: struct.Weak.html\n+    /// [`as_raw`]: struct.Weak.html#method.as_raw\n+    /// [`new`]: struct.Weak.html#method.new\n+    /// [`forget`]: ../../std/mem/fn.forget.html\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         if ptr.is_null() {"}, {"sha": "be2d127b133d055d36ae7561113d5ef1fa3a8330", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/473151070bd939239aa8f9bf218e2753b8a479cf/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473151070bd939239aa8f9bf218e2753b8a479cf/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=473151070bd939239aa8f9bf218e2753b8a479cf", "patch": "@@ -1295,10 +1295,8 @@ impl<T> Weak<T> {\n \n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n-    /// It is up to the caller to ensure that the object is still alive when accessing it through\n-    /// the pointer.\n-    ///\n-    /// The pointer may be [`null`] or be dangling in case the object has already been destroyed.\n+    /// The pointer is valid only if there are some strong references. The pointer may be dangling\n+    /// or even [`null`] otherwise.\n     ///\n     /// # Examples\n     ///\n@@ -1379,14 +1377,18 @@ impl<T> Weak<T> {\n     /// This can be used to safely get a strong reference (by calling [`upgrade`]\n     /// later) or to deallocate the weak count by dropping the `Weak<T>`.\n     ///\n-    /// It takes ownership of one weak count. In case a [`null`] is passed, a dangling [`Weak`] is\n-    /// returned.\n+    /// It takes ownership of one weak count (with the exception of pointers created by [`new`],\n+    /// as these don't have any corresponding weak count).\n     ///\n     /// # Safety\n     ///\n-    /// The pointer must represent one valid weak count. In other words, it must point to `T` which\n-    /// is or *was* managed by an [`Arc`] and the weak count of that [`Arc`] must not have reached\n-    /// 0. It is allowed for the strong count to be 0.\n+    /// The pointer must have originated from the [`into_raw`] (or [`as_raw'], provided there was\n+    /// a corresponding [`forget`] on the `Weak<T>`) and must still own its potential weak reference\n+    /// count.\n+    ///\n+    /// It is allowed for the strong count to be 0 at the time of calling this, but the weak count\n+    /// must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created\n+    /// by [`new`]).\n     ///\n     /// # Examples\n     ///\n@@ -1411,11 +1413,13 @@ impl<T> Weak<T> {\n     /// assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n     /// ```\n     ///\n-    /// [`null`]: ../../std/ptr/fn.null.html\n+    /// [`as_raw`]: struct.Weak.html#method.as_raw\n+    /// [`new`]: struct.Weak.html#method.new\n     /// [`into_raw`]: struct.Weak.html#method.into_raw\n     /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`Weak`]: struct.Weak.html\n     /// [`Arc`]: struct.Arc.html\n+    /// [`forget`]: ../../std/mem/fn.forget.html\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         if ptr.is_null() {"}]}