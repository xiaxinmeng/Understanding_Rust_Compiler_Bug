{"sha": "95a267bb345dcb13b52a66e322d730414996e439", "node_id": "C_kwDOAAsO6NoAKDk1YTI2N2JiMzQ1ZGNiMTNiNTJhNjZlMzIyZDczMDQxNDk5NmU0Mzk", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-17T21:03:06Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-18T13:25:17Z"}, "message": "make `replaced_with_error` store `ErrorGuaranteed`", "tree": {"sha": "2a1311a5baed3f0ee1b7aa05766a61ff5b0088b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a1311a5baed3f0ee1b7aa05766a61ff5b0088b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95a267bb345dcb13b52a66e322d730414996e439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95a267bb345dcb13b52a66e322d730414996e439", "html_url": "https://github.com/rust-lang/rust/commit/95a267bb345dcb13b52a66e322d730414996e439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95a267bb345dcb13b52a66e322d730414996e439/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c510048fdd9b78bda5084d56fffb69da677d967", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c510048fdd9b78bda5084d56fffb69da677d967", "html_url": "https://github.com/rust-lang/rust/commit/9c510048fdd9b78bda5084d56fffb69da677d967"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "a620a05aca202214e710a6dbb601ce246c34638b", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/95a267bb345dcb13b52a66e322d730414996e439/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a267bb345dcb13b52a66e322d730414996e439/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=95a267bb345dcb13b52a66e322d730414996e439", "patch": "@@ -672,10 +672,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         // We may have introduced e.g. `ty::Error`, if inference failed, make sure\n         // to mark the `TypeckResults` as tainted in that case, so that downstream\n         // users of the typeck results don't produce extra errors, or worse, ICEs.\n-        if resolver.replaced_with_error {\n+        if let Some(e) = resolver.replaced_with_error {\n             // FIXME(eddyb) keep track of `ErrorGuaranteed` from where the error was emitted.\n-            self.typeck_results.tainted_by_errors =\n-                Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n+            self.typeck_results.tainted_by_errors = Some(e);\n         }\n \n         x\n@@ -706,8 +705,8 @@ struct Resolver<'cx, 'tcx> {\n     span: &'cx dyn Locatable,\n     body: &'tcx hir::Body<'tcx>,\n \n-    /// Set to `true` if any `Ty` or `ty::Const` had to be replaced with an `Error`.\n-    replaced_with_error: bool,\n+    /// Set to `Some` if any `Ty` or `ty::Const` had to be replaced with an `Error`.\n+    replaced_with_error: Option<ErrorGuaranteed>,\n }\n \n impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n@@ -716,12 +715,14 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n         span: &'cx dyn Locatable,\n         body: &'tcx hir::Body<'tcx>,\n     ) -> Resolver<'cx, 'tcx> {\n-        Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: false }\n+        Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: None }\n     }\n \n-    fn report_error(&self, p: impl Into<ty::GenericArg<'tcx>>) {\n-        if !self.tcx.sess.has_errors().is_some() {\n-            self.infcx\n+    fn report_error(&self, p: impl Into<ty::GenericArg<'tcx>>) -> ErrorGuaranteed {\n+        match self.tcx.sess.has_errors() {\n+            Some(e) => e,\n+            None => self\n+                .infcx\n                 .err_ctxt()\n                 .emit_inference_failure_err(\n                     Some(self.body.id()),\n@@ -730,7 +731,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                     E0282,\n                     false,\n                 )\n-                .emit();\n+                .emit(),\n         }\n     }\n }\n@@ -771,9 +772,9 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             }\n             Err(_) => {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n-                self.report_error(t);\n-                self.replaced_with_error = true;\n-                self.tcx().ty_error()\n+                let e = self.report_error(t);\n+                self.replaced_with_error = Some(e);\n+                self.tcx().ty_error_with_guaranteed(e)\n             }\n         }\n     }\n@@ -788,9 +789,9 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             Ok(ct) => self.tcx.erase_regions(ct),\n             Err(_) => {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n-                self.report_error(ct);\n-                self.replaced_with_error = true;\n-                self.tcx().const_error(ct.ty())\n+                let e = self.report_error(ct);\n+                self.replaced_with_error = Some(e);\n+                self.tcx().const_error_with_guaranteed(ct.ty(), e)\n             }\n         }\n     }"}]}