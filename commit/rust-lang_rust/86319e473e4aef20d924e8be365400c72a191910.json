{"sha": "86319e473e4aef20d924e8be365400c72a191910", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MzE5ZTQ3M2U0YWVmMjBkOTI0ZThiZTM2NTQwMGM3MmExOTE5MTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-16T23:27:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-16T23:27:36Z"}, "message": "Auto merge of #41907 - est31:macro_unused, r=jseyfried\n\nAdd lint for unused macros\n\nAddresses parts of #34938, to add a lint for unused macros.\n\nWe now output warnings by default when we encounter a macro that we didn't use for expansion.\n\nIssues to be resolved before this PR is ready for merge:\n\n- [x] fix the NodeId issue described above\n- [x] remove all unused macros from rustc and the libraries or set `#[allow(unused_macros)]` next to them if they should be kept for some reason. This is needed for successful boostrap and bors to accept the PR. -> #41934\n- [x] ~~implement the full extent of #34938, that means the macro match arm checking as well.~~ *let's not do this for now*", "tree": {"sha": "f547ec0ef101c9170d4deee175e3c53adebcd719", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f547ec0ef101c9170d4deee175e3c53adebcd719"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86319e473e4aef20d924e8be365400c72a191910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86319e473e4aef20d924e8be365400c72a191910", "html_url": "https://github.com/rust-lang/rust/commit/86319e473e4aef20d924e8be365400c72a191910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86319e473e4aef20d924e8be365400c72a191910/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f68728fb372ff6b0b543f87ac6776f9d12a4b05", "html_url": "https://github.com/rust-lang/rust/commit/0f68728fb372ff6b0b543f87ac6776f9d12a4b05"}, {"sha": "6dbd706906d922ae5606eb5654dd804095ffc8c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dbd706906d922ae5606eb5654dd804095ffc8c8", "html_url": "https://github.com/rust-lang/rust/commit/6dbd706906d922ae5606eb5654dd804095ffc8c8"}], "stats": {"total": 157, "additions": 138, "deletions": 19}, "files": [{"sha": "6cc374b13b7b3042257f13190f47f0bf95bdbd08", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -12,6 +12,7 @@ use super::Wrapping;\n \n use ops::*;\n \n+#[allow(unused_macros)]\n macro_rules! sh_impl_signed {\n     ($t:ident, $f:ident) => (\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "fc3af096b183880c4b3a61910e4fe5eae73e904d", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -799,6 +799,7 @@ macro_rules! neg_impl_numeric {\n     ($($t:ty)*) => { neg_impl_core!{ x => -x, $($t)*} }\n }\n \n+#[allow(unused_macros)]\n macro_rules! neg_impl_unsigned {\n     ($($t:ty)*) => {\n         neg_impl_core!{ x => {"}, {"sha": "07140f71aebaa1b68253f71e3aef28372800d397", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -76,6 +76,12 @@ declare_lint! {\n     \"detects unreachable patterns\"\n }\n \n+declare_lint! {\n+    pub UNUSED_MACROS,\n+    Warn,\n+    \"detects macros that were not used\"\n+}\n+\n declare_lint! {\n     pub WARNINGS,\n     Warn,\n@@ -259,6 +265,7 @@ impl LintPass for HardwiredLints {\n             DEAD_CODE,\n             UNREACHABLE_CODE,\n             UNREACHABLE_PATTERNS,\n+            UNUSED_MACROS,\n             WARNINGS,\n             UNUSED_FEATURES,\n             STABLE_FEATURES,"}, {"sha": "9d5ba2c8f950101547a810d5ea2a398f044249f0", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -49,6 +49,7 @@ use hir;\n use hir::def_id::LOCAL_CRATE;\n use hir::intravisit as hir_visit;\n use syntax::visit as ast_visit;\n+use syntax::tokenstream::ThinTokenStream;\n \n /// Information about the registered lints.\n ///\n@@ -1125,6 +1126,13 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n     fn visit_attribute(&mut self, attr: &'a ast::Attribute) {\n         run_lints!(self, check_attribute, early_passes, attr);\n     }\n+\n+    fn visit_mac_def(&mut self, _mac: &'a ThinTokenStream, id: ast::NodeId) {\n+        let lints = self.sess.lints.borrow_mut().take(id);\n+        for early_lint in lints {\n+            self.early_lint(&early_lint);\n+        }\n+    }\n }\n \n enum CheckLintNameResult {"}, {"sha": "17564671a1e364f45eed26442e33e6b9e8231b06", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -116,6 +116,7 @@ pub fn record_time<T, F>(accu: &Cell<Duration>, f: F) -> T where\n }\n \n // Like std::macros::try!, but for Option<>.\n+#[cfg(unix)]\n macro_rules! option_try(\n     ($e:expr) => (match $e { Some(e) => e, None => return None })\n );"}, {"sha": "eff5d2b2f37f1bbc6b00eab1985f83884f8e5329", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -699,6 +699,8 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n \n         let krate = ecx.monotonic_expander().expand_crate(krate);\n \n+        ecx.check_unused_macros();\n+\n         let mut missing_fragment_specifiers: Vec<_> =\n             ecx.parse_sess.missing_fragment_specifiers.borrow().iter().cloned().collect();\n         missing_fragment_specifiers.sort();"}, {"sha": "044b143e306250944542e6b7fb12b3c73a090a21", "filename": "src/librustc_incremental/persist/preds/compress/test_macro.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Ftest_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Ftest_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Ftest_macro.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -37,14 +37,3 @@ macro_rules! graph {\n         }\n     }\n }\n-\n-macro_rules! set {\n-    ($( $value:expr ),*) => {\n-        {\n-            use $crate::rustc_data_structures::fx::FxHashSet;\n-            let mut set = FxHashSet();\n-            $(set.insert($value);)*\n-            set\n-        }\n-    }\n-}"}, {"sha": "479c7206cb4cb95b150c5b0adcb0b40daf86c0de", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -171,7 +171,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_MUST_USE,\n                     UNUSED_UNSAFE,\n                     PATH_STATEMENTS,\n-                    UNUSED_ATTRIBUTES);\n+                    UNUSED_ATTRIBUTES,\n+                    UNUSED_MACROS);\n \n     // Guidelines for creating a future incompatibility lint:\n     //"}, {"sha": "3027489d65be2ea1f955e5e3c5e1c8e611b66280", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -103,7 +103,8 @@ impl<'a> Registry<'a> {\n         }\n         self.syntax_exts.push((name, match extension {\n             NormalTT(ext, _, allow_internal_unstable) => {\n-                NormalTT(ext, Some(self.krate_span), allow_internal_unstable)\n+                let nid = ast::CRATE_NODE_ID;\n+                NormalTT(ext, Some((nid, self.krate_span)), allow_internal_unstable)\n             }\n             IdentTT(ext, _, allow_internal_unstable) => {\n                 IdentTT(ext, Some(self.krate_span), allow_internal_unstable)"}, {"sha": "6ea666e21dcdd28fd24ab0bcd4af1e893269d753", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -1187,6 +1187,10 @@ pub struct Resolver<'a> {\n     pub whitelisted_legacy_custom_derives: Vec<Name>,\n     pub found_unresolved_macro: bool,\n \n+    // List of crate local macros that we need to warn about as being unused.\n+    // Right now this only includes macro_rules! macros.\n+    unused_macros: FxHashSet<DefId>,\n+\n     // Maps the `Mark` of an expansion to its containing module or block.\n     invocations: FxHashMap<Mark, &'a InvocationData<'a>>,\n \n@@ -1392,6 +1396,7 @@ impl<'a> Resolver<'a> {\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: DefIdMap(),\n             found_unresolved_macro: false,\n+            unused_macros: FxHashSet(),\n         }\n     }\n "}, {"sha": "231d30cd2a22decfdd8729f4f68f46dfa16fe305", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -16,7 +16,7 @@ use resolve_imports::ImportResolver;\n use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex};\n use rustc::hir::def::{Def, Export};\n use rustc::hir::map::{self, DefCollector};\n-use rustc::ty;\n+use rustc::{ty, lint};\n use syntax::ast::{self, Name, Ident};\n use syntax::attr::{self, HasAttrs};\n use syntax::errors::DiagnosticBuilder;\n@@ -291,12 +291,32 @@ impl<'a> base::Resolver for Resolver<'a> {\n             },\n         };\n         self.macro_defs.insert(invoc.expansion_data.mark, def.def_id());\n+        self.unused_macros.remove(&def.def_id());\n         Ok(Some(self.get_macro(def)))\n     }\n \n     fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n                      -> Result<Rc<SyntaxExtension>, Determinacy> {\n-        self.resolve_macro_to_def(scope, path, kind, force).map(|def| self.get_macro(def))\n+        self.resolve_macro_to_def(scope, path, kind, force).map(|def| {\n+            self.unused_macros.remove(&def.def_id());\n+            self.get_macro(def)\n+        })\n+    }\n+\n+    fn check_unused_macros(&self) {\n+        for did in self.unused_macros.iter() {\n+            let id_span = match *self.macro_map[did] {\n+                SyntaxExtension::NormalTT(_, isp, _) => isp,\n+                _ => None,\n+            };\n+            if let Some((id, span)) = id_span {\n+                let lint = lint::builtin::UNUSED_MACROS;\n+                let msg = \"unused macro definition\".to_string();\n+                self.session.add_lint(lint, id, span, msg);\n+            } else {\n+                bug!(\"attempted to create unused macro error, but span not available\");\n+            }\n+        }\n     }\n }\n \n@@ -687,6 +707,8 @@ impl<'a> Resolver<'a> {\n         if attr::contains_name(&item.attrs, \"macro_export\") {\n             let def = Def::Macro(def_id, MacroKind::Bang);\n             self.macro_exports.push(Export { name: ident.name, def: def, span: item.span });\n+        } else {\n+            self.unused_macros.insert(def_id);\n         }\n     }\n "}, {"sha": "86202f77dbf8afa04da0ae16dd3ff5d14ac64f32", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -535,7 +535,7 @@ pub enum SyntaxExtension {\n     ///\n     /// The `bool` dictates whether the contents of the macro can\n     /// directly use `#[unstable]` things (true == yes).\n-    NormalTT(Box<TTMacroExpander>, Option<Span>, bool),\n+    NormalTT(Box<TTMacroExpander>, Option<(ast::NodeId, Span)>, bool),\n \n     /// A function-like syntax extension that has an extra ident before\n     /// the block.\n@@ -589,6 +589,7 @@ pub trait Resolver {\n                      -> Result<Option<Rc<SyntaxExtension>>, Determinacy>;\n     fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n                      -> Result<Rc<SyntaxExtension>, Determinacy>;\n+    fn check_unused_macros(&self);\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -618,6 +619,7 @@ impl Resolver for DummyResolver {\n                      _force: bool) -> Result<Rc<SyntaxExtension>, Determinacy> {\n         Err(Determinacy::Determined)\n     }\n+    fn check_unused_macros(&self) {}\n }\n \n #[derive(Clone)]\n@@ -800,6 +802,10 @@ impl<'a> ExtCtxt<'a> {\n     pub fn name_of(&self, st: &str) -> ast::Name {\n         Symbol::intern(st)\n     }\n+\n+    pub fn check_unused_macros(&self) {\n+        self.resolver.check_unused_macros();\n+    }\n }\n \n /// Extract a string literal from the macro expanded version of `expr`,"}, {"sha": "75dd09f23115e507b9cf9eb42b16b5057b136dd9", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -469,7 +469,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     call_site: span,\n                     callee: NameAndSpan {\n                         format: MacroBang(Symbol::intern(&format!(\"{}\", path))),\n-                        span: exp_span,\n+                        span: exp_span.map(|(_, s)| s),\n                         allow_internal_unstable: allow_internal_unstable,\n                     },\n                 });"}, {"sha": "39a60e5c0801062f7d7e635dd9af84343f636df6", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -252,7 +252,9 @@ pub fn compile(sess: &ParseSess, features: &RefCell<Features>, def: &ast::Item)\n         valid: valid,\n     });\n \n-    NormalTT(exp, Some(def.span), attr::contains_name(&def.attrs, \"allow_internal_unstable\"))\n+    NormalTT(exp,\n+             Some((def.id, def.span)),\n+             attr::contains_name(&def.attrs, \"allow_internal_unstable\"))\n }\n \n fn check_lhs_nt_follows(sess: &ParseSess,"}, {"sha": "ee9d1980fab662f751e52d0eaa125fefd532a47e", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -27,6 +27,7 @@ use abi::Abi;\n use ast::*;\n use syntax_pos::Span;\n use codemap::Spanned;\n+use tokenstream::ThinTokenStream;\n \n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n@@ -112,6 +113,9 @@ pub trait Visitor<'ast>: Sized {\n         // definition in your trait impl:\n         // visit::walk_mac(self, _mac)\n     }\n+    fn visit_mac_def(&mut self, _mac: &'ast ThinTokenStream, _id: NodeId) {\n+        // Nothing to do\n+    }\n     fn visit_path(&mut self, path: &'ast Path, _id: NodeId) {\n         walk_path(self, path)\n     }\n@@ -290,7 +294,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_trait_item, methods);\n         }\n         ItemKind::Mac(ref mac) => visitor.visit_mac(mac),\n-        ItemKind::MacroDef(..) => {},\n+        ItemKind::MacroDef(ref ts) => visitor.visit_mac_def(ts, item.id),\n     }\n     walk_list!(visitor, visit_attribute, &item.attrs);\n }"}, {"sha": "ddd8631f02e62b4c0f4974539847f41b7afadb9a", "filename": "src/test/compile-fail-fulldeps/proc-macro/resolve-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fresolve-error.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -14,6 +14,7 @@\n // aux-build:bang_proc_macro.rs\n \n #![feature(proc_macro)]\n+#![allow(unused_macros)]\n \n #[macro_use]\n extern crate derive_foo;"}, {"sha": "9af501b141955f97d777a210afcf40c1e0a4914e", "filename": "src/test/compile-fail/feature-gate-allow-internal-unstable-nested-macro.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable-nested-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable-nested-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable-nested-macro.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -10,6 +10,8 @@\n \n // gate-test-allow_internal_unstable\n \n+#![allow(unused_macros)]\n+\n macro_rules! bar {\n     () => {\n         // more layers don't help:"}, {"sha": "61a362cb37fb2c0d8d674447ba9af2b348bcf586", "filename": "src/test/compile-fail/feature-gate-allow-internal-unstable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow-internal-unstable.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unused_macros)]\n+\n #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps\n macro_rules! foo {\n     () => {}"}, {"sha": "d710f5647dd9f97591f57c0740993bc551b3e4c7", "filename": "src/test/compile-fail/invalid-macro-matcher.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Finvalid-macro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Finvalid-macro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-macro-matcher.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unused_macros)]\n+\n macro_rules! invalid {\n     _ => (); //~ ERROR invalid macro matcher\n }"}, {"sha": "f66c09291cc9e4b74539de7bde5193c9f7310225", "filename": "src/test/compile-fail/issue-21356.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fissue-21356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fissue-21356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21356.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unused_macros)]\n+\n macro_rules! test { ($wrong:t_ty ..) => () }\n                   //~^ ERROR: invalid fragment specifier `t_ty`\n "}, {"sha": "15eef429eab974667e3ea77daaada669acb10ccc", "filename": "src/test/compile-fail/issue-39388.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fissue-39388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fissue-39388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39388.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unused_macros)]\n+\n macro_rules! assign {\n     (($($a:tt)*) = ($($b:tt))*) => { //~ ERROR expected `*` or `+`\n         $($a)* = $($b)*"}, {"sha": "8b49772494a6687e1f34a106ec6bb5ab4ed87b91", "filename": "src/test/compile-fail/issue-39404.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fissue-39404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fissue-39404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39404.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![deny(missing_fragment_specifier)] //~ NOTE lint level defined here\n+#![allow(unused_macros)]\n \n macro_rules! m { ($i) => {} }\n //~^ ERROR missing fragment specifier"}, {"sha": "267362f902d720faeed69655bb5cc382215bd4db", "filename": "src/test/compile-fail/issue-5067.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fissue-5067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fissue-5067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5067.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unused_macros)]\n+\n macro_rules! foo {\n     ( $()* ) => {};\n     //~^ ERROR repetition matches empty token tree"}, {"sha": "06f2d86e5d9bae93be3b5e23dbeea9ba5d34aaa8", "filename": "src/test/compile-fail/macro-expansion-tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fmacro-expansion-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fmacro-expansion-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-expansion-tests.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unused_macros)]\n+\n mod macros_cant_escape_fns {\n     fn f() {\n         macro_rules! m { () => { 3 + 4 } }"}, {"sha": "6e80e9b574bcfae9c3932c8551a2cecc5e621ad9", "filename": "src/test/compile-fail/macro-follow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fmacro-follow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fmacro-follow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-follow.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -10,6 +10,8 @@\n //\n // Check the macro follow sets (see corresponding rpass test).\n \n+#![allow(unused_macros)]\n+\n // FOLLOW(pat) = {FatArrow, Comma, Eq, Or, Ident(if), Ident(in)}\n macro_rules! follow_pat {\n     ($p:pat ()) => {};       //~ERROR  `$p:pat` is followed by `(`"}, {"sha": "21cc946ded60563a48b5fa7ab8f713a841c23d98", "filename": "src/test/compile-fail/macro-followed-by-seq-bad.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fmacro-followed-by-seq-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fmacro-followed-by-seq-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-followed-by-seq-bad.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -11,6 +11,8 @@\n // Regression test for issue #25436: check that things which can be\n // followed by any token also permit X* to come afterwards.\n \n+#![allow(unused_macros)]\n+\n macro_rules! foo {\n   ( $a:expr $($b:tt)* ) => { }; //~ ERROR not allowed for `expr` fragments\n   ( $a:ty $($b:tt)* ) => { };   //~ ERROR not allowed for `ty` fragments"}, {"sha": "e5fdba63b0f152859c0a1f82614d57515b10716f", "filename": "src/test/compile-fail/macro-input-future-proofing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fmacro-input-future-proofing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fmacro-input-future-proofing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-input-future-proofing.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unused_macros)]\n+\n macro_rules! errors_everywhere {\n     ($ty:ty <) => (); //~ ERROR `$ty:ty` is followed by `<`, which is not allowed for `ty`\n     ($ty:ty < foo ,) => (); //~ ERROR `$ty:ty` is followed by `<`, which is not allowed for `ty`"}, {"sha": "f5e7305e4ea9e61ba37d0429cfe9a1f5e58d4ca5", "filename": "src/test/compile-fail/macro-shadowing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fmacro-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fmacro-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-shadowing.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:two_macros.rs\n \n+#![allow(unused_macros)]\n+\n macro_rules! foo { () => {} }\n macro_rules! macro_one { () => {} }\n #[macro_use(macro_two)] extern crate two_macros;"}, {"sha": "28a69e6f9e29beb5f900c78dbac33655681e0a95", "filename": "src/test/compile-fail/unused-macro-with-bad-frag-spec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Funused-macro-with-bad-frag-spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Funused-macro-with-bad-frag-spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-macro-with-bad-frag-spec.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unused_macros)]\n+\n // Issue #21370\n \n macro_rules! test {"}, {"sha": "dda0d3fc9557dd79afd0b0e895691892a816af06", "filename": "src/test/compile-fail/unused-macro-with-follow-violation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Funused-macro-with-follow-violation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Funused-macro-with-follow-violation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-macro-with-follow-violation.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unused_macros)]\n+\n macro_rules! test {\n     ($e:expr +) => () //~ ERROR not allowed for `expr` fragments\n }"}, {"sha": "5e401c09bda597ea340caae3faea955efec496b8", "filename": "src/test/compile-fail/unused-macro.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Funused-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Funused-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-macro.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(unused_macros)]\n+\n+// Most simple case\n+macro_rules! unused { //~ ERROR: unused macro definition\n+    () => {};\n+}\n+\n+// Test macros created by macros\n+macro_rules! create_macro {\n+    () => {\n+        macro_rules! m { //~ ERROR: unused macro definition\n+            () => {};\n+        }\n+    };\n+}\n+create_macro!();\n+\n+#[allow(unused_macros)]\n+mod bar {\n+    // Test that putting the #[deny] close to the macro's definition\n+    // works.\n+\n+    #[deny(unused_macros)]\n+    macro_rules! unused { //~ ERROR: unused macro definition\n+        () => {};\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "02e1a585fa89d054d267c206ca636f4ff4f5c093", "filename": "src/test/compile-fail/user-defined-macro-rules.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fuser-defined-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86319e473e4aef20d924e8be365400c72a191910/src%2Ftest%2Fcompile-fail%2Fuser-defined-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuser-defined-macro-rules.rs?ref=86319e473e4aef20d924e8be365400c72a191910", "patch": "@@ -8,4 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unused_macros)]\n+\n macro_rules! macro_rules { () => {} } //~ ERROR user-defined macros may not be named `macro_rules`"}]}