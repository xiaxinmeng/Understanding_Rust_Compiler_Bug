{"sha": "fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYjM1M2FlMmI1Y2VmNzVjN2Q5N2JlNGYzYzIyODNhNjNlMGZkN2Y=", "commit": {"author": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-07-22T15:29:53Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2021-07-22T15:29:53Z"}, "message": "Add comment and more tests.", "tree": {"sha": "fe357bdf0779e8a52fbda6e862405dd667247e6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe357bdf0779e8a52fbda6e862405dd667247e6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f", "html_url": "https://github.com/rust-lang/rust/commit/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f/comments", "author": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634638782b23392c40eeea832bfa0d260ebe7a9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/634638782b23392c40eeea832bfa0d260ebe7a9f", "html_url": "https://github.com/rust-lang/rust/commit/634638782b23392c40eeea832bfa0d260ebe7a9f"}], "stats": {"total": 390, "additions": 390, "deletions": 0}, "files": [{"sha": "5904f133e78c34d9a7ddde04178b7bde97dce484", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f", "patch": "@@ -7,11 +7,17 @@ use rustc_ast::Mutability;\n \n #[derive(Clone, Copy, PartialEq, HashStable)]\n pub enum VtblEntry<'tcx> {\n+    /// destructor of this type (used in vtable header)\n     MetadataDropInPlace,\n+    /// layout size of this type (used in vtable header)\n     MetadataSize,\n+    /// layout align of this type (used in vtable header)\n     MetadataAlign,\n+    /// non-dispatchable associated function that is excluded from trait object\n     Vacant,\n+    /// dispatchable associated function\n     Method(Instance<'tcx>),\n+    /// pointer to a separate supertrait vtable, can be used by trait upcasting coercion\n     TraitVPtr(PolyTraitRef<'tcx>),\n }\n "}, {"sha": "33112b4eaaade2bbd876ea173c7adf7b6e256269", "filename": "src/test/ui/traits/vtable/vtable-multi-level.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.rs?ref=fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f", "patch": "@@ -0,0 +1,122 @@\n+// build-fail\n+#![feature(rustc_attrs)]\n+\n+//   O --> G --> C --> A\n+//     \\     \\     \\-> B\n+//     |     |-> F --> D\n+//     |           \\-> E\n+//     |-> N --> J --> H\n+//           \\     \\-> I\n+//           |-> M --> K\n+//                 \\-> L\n+\n+#[rustc_dump_vtable]\n+trait A {\n+    fn foo_a(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait B {\n+    //~^ error Vtable\n+    fn foo_b(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait C: A + B {\n+    fn foo_c(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait D {\n+    //~^ error Vtable\n+    fn foo_d(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait E {\n+    //~^ error Vtable\n+    fn foo_e(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait F: D + E {\n+    //~^ error Vtable\n+    fn foo_f(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait G: C + F {\n+    fn foo_g(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait H {\n+    //~^ error Vtable\n+    fn foo_h(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait I {\n+    //~^ error Vtable\n+    fn foo_i(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait J: H + I {\n+    //~^ error Vtable\n+    fn foo_j(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait K {\n+    //~^ error Vtable\n+    fn foo_k(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait L {\n+    //~^ error Vtable\n+    fn foo_l(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait M: K + L {\n+    //~^ error Vtable\n+    fn foo_m(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait N: J + M {\n+    //~^ error Vtable\n+    fn foo_n(&self) {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait O: G + N {\n+    //~^ error Vtable\n+    fn foo_o(&self) {}\n+}\n+\n+struct S;\n+\n+impl A for S {}\n+impl B for S {}\n+impl C for S {}\n+impl D for S {}\n+impl E for S {}\n+impl F for S {}\n+impl G for S {}\n+impl H for S {}\n+impl I for S {}\n+impl J for S {}\n+impl K for S {}\n+impl L for S {}\n+impl M for S {}\n+impl N for S {}\n+impl O for S {}\n+\n+fn foo(_: &dyn O) {}\n+\n+fn main() {\n+    foo(&S);\n+}"}, {"sha": "7700db98e0bf1e58b46eabccc72a8e6b4995411e", "filename": "src/test/ui/traits/vtable/vtable-multi-level.stderr", "status": "added", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-multi-level.stderr?ref=fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f", "patch": "@@ -0,0 +1,214 @@\n+error: Vtable entries for `<S as O>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as A>::foo_a),\n+    Method(<S as B>::foo_b),\n+    TraitVPtr(<S as B>),\n+    Method(<S as C>::foo_c),\n+    Method(<S as D>::foo_d),\n+    TraitVPtr(<S as D>),\n+    Method(<S as E>::foo_e),\n+    TraitVPtr(<S as E>),\n+    Method(<S as F>::foo_f),\n+    TraitVPtr(<S as F>),\n+    Method(<S as G>::foo_g),\n+    Method(<S as H>::foo_h),\n+    TraitVPtr(<S as H>),\n+    Method(<S as I>::foo_i),\n+    TraitVPtr(<S as I>),\n+    Method(<S as J>::foo_j),\n+    TraitVPtr(<S as J>),\n+    Method(<S as K>::foo_k),\n+    TraitVPtr(<S as K>),\n+    Method(<S as L>::foo_l),\n+    TraitVPtr(<S as L>),\n+    Method(<S as M>::foo_m),\n+    TraitVPtr(<S as M>),\n+    Method(<S as N>::foo_n),\n+    TraitVPtr(<S as N>),\n+    Method(<S as O>::foo_o),\n+]\n+  --> $DIR/vtable-multi-level.rs:95:1\n+   |\n+LL | / trait O: G + N {\n+LL | |\n+LL | |     fn foo_o(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: Vtable entries for `<S as B>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as B>::foo_b),\n+]\n+  --> $DIR/vtable-multi-level.rs:19:1\n+   |\n+LL | / trait B {\n+LL | |\n+LL | |     fn foo_b(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: Vtable entries for `<S as D>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as D>::foo_d),\n+]\n+  --> $DIR/vtable-multi-level.rs:30:1\n+   |\n+LL | / trait D {\n+LL | |\n+LL | |     fn foo_d(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: Vtable entries for `<S as E>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as E>::foo_e),\n+]\n+  --> $DIR/vtable-multi-level.rs:36:1\n+   |\n+LL | / trait E {\n+LL | |\n+LL | |     fn foo_e(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: Vtable entries for `<S as F>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as D>::foo_d),\n+    Method(<S as E>::foo_e),\n+    TraitVPtr(<S as E>),\n+    Method(<S as F>::foo_f),\n+]\n+  --> $DIR/vtable-multi-level.rs:42:1\n+   |\n+LL | / trait F: D + E {\n+LL | |\n+LL | |     fn foo_f(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: Vtable entries for `<S as H>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as H>::foo_h),\n+]\n+  --> $DIR/vtable-multi-level.rs:53:1\n+   |\n+LL | / trait H {\n+LL | |\n+LL | |     fn foo_h(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: Vtable entries for `<S as I>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as I>::foo_i),\n+]\n+  --> $DIR/vtable-multi-level.rs:59:1\n+   |\n+LL | / trait I {\n+LL | |\n+LL | |     fn foo_i(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: Vtable entries for `<S as J>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as H>::foo_h),\n+    Method(<S as I>::foo_i),\n+    TraitVPtr(<S as I>),\n+    Method(<S as J>::foo_j),\n+]\n+  --> $DIR/vtable-multi-level.rs:65:1\n+   |\n+LL | / trait J: H + I {\n+LL | |\n+LL | |     fn foo_j(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: Vtable entries for `<S as K>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as K>::foo_k),\n+]\n+  --> $DIR/vtable-multi-level.rs:71:1\n+   |\n+LL | / trait K {\n+LL | |\n+LL | |     fn foo_k(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: Vtable entries for `<S as L>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as L>::foo_l),\n+]\n+  --> $DIR/vtable-multi-level.rs:77:1\n+   |\n+LL | / trait L {\n+LL | |\n+LL | |     fn foo_l(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: Vtable entries for `<S as M>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as K>::foo_k),\n+    Method(<S as L>::foo_l),\n+    TraitVPtr(<S as L>),\n+    Method(<S as M>::foo_m),\n+]\n+  --> $DIR/vtable-multi-level.rs:83:1\n+   |\n+LL | / trait M: K + L {\n+LL | |\n+LL | |     fn foo_m(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: Vtable entries for `<S as N>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as H>::foo_h),\n+    Method(<S as I>::foo_i),\n+    TraitVPtr(<S as I>),\n+    Method(<S as J>::foo_j),\n+    Method(<S as K>::foo_k),\n+    TraitVPtr(<S as K>),\n+    Method(<S as L>::foo_l),\n+    TraitVPtr(<S as L>),\n+    Method(<S as M>::foo_m),\n+    TraitVPtr(<S as M>),\n+    Method(<S as N>::foo_n),\n+]\n+  --> $DIR/vtable-multi-level.rs:89:1\n+   |\n+LL | / trait N: J + M {\n+LL | |\n+LL | |     fn foo_n(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "ebea94171f2ab698ac32f42f79921b945f9182e3", "filename": "src/test/ui/traits/vtable/vtable-vacant.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.rs?ref=fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f", "patch": "@@ -0,0 +1,28 @@\n+// build-fail\n+#![feature(rustc_attrs)]\n+\n+// B --> A\n+\n+#[rustc_dump_vtable]\n+trait A {\n+    fn foo_a1(&self) {}\n+    fn foo_a2(&self) where Self: Sized {}\n+}\n+\n+#[rustc_dump_vtable]\n+trait B: A {\n+    //~^ error Vtable\n+    fn foo_b1(&self) {}\n+    fn foo_b2() where Self: Sized {}\n+}\n+\n+struct S;\n+\n+impl A for S {}\n+impl B for S {}\n+\n+fn foo(_: &dyn B) {}\n+\n+fn main() {\n+    foo(&S);\n+}"}, {"sha": "768cca526894ac81ecd6f1ade8e0140fc4234b89", "filename": "src/test/ui/traits/vtable/vtable-vacant.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fvtable-vacant.stderr?ref=fbb353ae2b5cef75c7d97be4f3c2283a63e0fd7f", "patch": "@@ -0,0 +1,20 @@\n+error: Vtable entries for `<S as B>`: [\n+    MetadataDropInPlace,\n+    MetadataSize,\n+    MetadataAlign,\n+    Method(<S as A>::foo_a1),\n+    Vacant,\n+    Method(<S as B>::foo_b1),\n+    Vacant,\n+]\n+  --> $DIR/vtable-vacant.rs:13:1\n+   |\n+LL | / trait B: A {\n+LL | |\n+LL | |     fn foo_b1(&self) {}\n+LL | |     fn foo_b2() where Self: Sized {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}]}