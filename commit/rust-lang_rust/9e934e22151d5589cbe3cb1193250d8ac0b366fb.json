{"sha": "9e934e22151d5589cbe3cb1193250d8ac0b366fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOTM0ZTIyMTUxZDU1ODljYmUzY2IxMTkzMjUwZDhhYzBiMzY2ZmI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-02-07T13:39:54Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-02-07T13:39:54Z"}, "message": "Reweork incompatible match arms error\n\n- Point at the body expression of the match arm with the type error.\n- Point at the prior match arms explicitely stating the evaluated type.\n- Point at the entire match expr in a secondary span, instead of primary.\n- For type errors in the first match arm, the cause is outside of the\n  match, treat as implicit block error to give a more appropriate error.", "tree": {"sha": "b361f083bbc11d69f4322fe2db8539082b72e2b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b361f083bbc11d69f4322fe2db8539082b72e2b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e934e22151d5589cbe3cb1193250d8ac0b366fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e934e22151d5589cbe3cb1193250d8ac0b366fb", "html_url": "https://github.com/rust-lang/rust/commit/9e934e22151d5589cbe3cb1193250d8ac0b366fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e934e22151d5589cbe3cb1193250d8ac0b366fb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "825f355c7483746f3a17166f34dfabe3b2df1741", "url": "https://api.github.com/repos/rust-lang/rust/commits/825f355c7483746f3a17166f34dfabe3b2df1741", "html_url": "https://github.com/rust-lang/rust/commit/825f355c7483746f3a17166f34dfabe3b2df1741"}], "stats": {"total": 154, "additions": 92, "deletions": 62}, "files": [{"sha": "361aee4405b4029fa9a6cd71700c3d959479abe2", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -509,22 +509,27 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n-            ObligationCauseCode::MatchExpressionArm { arm_span, source } => match source {\n+            ObligationCauseCode::MatchExpressionArm {\n+                source,\n+                ref prior_arms,\n+                ..\n+            } => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => {\n-                    let msg = \"`if let` arm with an incompatible type\";\n-                    if self.tcx.sess.source_map().is_multiline(arm_span) {\n-                        err.span_note(arm_span, msg);\n-                    } else {\n-                        err.span_label(arm_span, msg);\n-                    }\n+                    let msg = \"`if let` arms have incompatible types\";\n+                    err.span_label(cause.span, msg);\n                 }\n                 hir::MatchSource::TryDesugar => {}\n                 _ => {\n-                    let msg = \"match arm with an incompatible type\";\n-                    if self.tcx.sess.source_map().is_multiline(arm_span) {\n-                        err.span_note(arm_span, msg);\n-                    } else {\n-                        err.span_label(arm_span, msg);\n+                    let msg = \"`match` arms have incompatible types\";\n+                    err.span_label(cause.span, msg);\n+                    if prior_arms.len() < 4 {\n+                        for (sp, ty) in prior_arms {\n+                            err.span_label(*sp, format!(\"this is found to be of type `{}`\", ty));\n+                        }\n+                    } else if let Some((sp, ty)) = prior_arms.last() {\n+                        err.span_label(*sp, format!(\n+                            \"this and all prior arms are found to be of type `{}`\", ty,\n+                        ));\n                     }\n                 }\n             },"}, {"sha": "9824ff8f397e1b9ca65e50bde762d2a256d19646", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -145,6 +145,7 @@ impl<'tcx> ObligationCause<'tcx> {\n             ObligationCauseCode::StartFunctionType => {\n                 tcx.sess.source_map().def_span(self.span)\n             }\n+            ObligationCauseCode::MatchExpressionArm { arm_span, .. } => arm_span,\n             _ => self.span,\n         }\n     }\n@@ -223,6 +224,7 @@ pub enum ObligationCauseCode<'tcx> {\n     MatchExpressionArm {\n         arm_span: Span,\n         source: hir::MatchSource,\n+        prior_arms: Vec<(Span, Ty<'tcx>)>,\n     },\n \n     /// Computing common supertype in the pattern guard for the arms of a match expression"}, {"sha": "c0e00cf291bacd7c4bddc02f3a88ad191ee09e05", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -513,10 +513,16 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                 trait_item_def_id,\n             }),\n             super::ExprAssignable => Some(super::ExprAssignable),\n-            super::MatchExpressionArm { arm_span, source } => Some(super::MatchExpressionArm {\n+            super::MatchExpressionArm {\n                 arm_span,\n-                source: source,\n-            }),\n+                source,\n+                ref prior_arms,\n+            } => {\n+                let prior_arms = prior_arms.iter().filter_map(|(sp, ty)| {\n+                    tcx.lift(ty).map(|ty| (*sp, ty))\n+                }).collect();\n+                Some(super::MatchExpressionArm { arm_span, source, prior_arms })\n+            }\n             super::MatchExpressionArmPattern { span, ty } => {\n                 tcx.lift(&ty).map(|ty| super::MatchExpressionArmPattern { span, ty })\n             }"}, {"sha": "c662a49abf9ea006e2787612a52ee8f419d25bb0", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -689,6 +689,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             CoerceMany::with_coercion_sites(coerce_first, arms)\n         };\n \n+        let mut other_arms = vec![];  // used only for diagnostics\n         for (i, (arm, pats_diverge)) in arms.iter().zip(all_arm_pats_diverge).enumerate() {\n             if let Some(ref g) = arm.guard {\n                 self.diverges.set(pats_diverge);\n@@ -709,17 +710,31 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 _ => false\n             };\n \n+            let arm_span = if let hir::ExprKind::Block(ref blk, _) = arm.body.node {\n+                // Point at the block expr instead of the entire block\n+                blk.expr.as_ref().map(|e| e.span).unwrap_or(arm.body.span)\n+            } else {\n+                arm.body.span\n+            };\n             if is_if_let_fallback {\n                 let cause = self.cause(expr.span, ObligationCauseCode::IfExpressionWithNoElse);\n                 assert!(arm_ty.is_unit());\n                 coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n             } else {\n-                let cause = self.cause(expr.span, ObligationCauseCode::MatchExpressionArm {\n-                    arm_span: arm.body.span,\n-                    source: match_src\n-                });\n+                let cause = if i == 0 {\n+                    // The reason for the first arm to fail is not that the match arms diverge,\n+                    // but rather that there's a prior obligation that doesn't hold.\n+                    self.cause(arm_span, ObligationCauseCode::BlockTailExpression(arm.body.id))\n+                } else {\n+                    self.cause(expr.span, ObligationCauseCode::MatchExpressionArm {\n+                        arm_span,\n+                        source: match_src,\n+                        prior_arms: other_arms.clone(),\n+                    })\n+                };\n                 coercion.coerce(self, &cause, &arm.body, arm_ty);\n             }\n+            other_arms.push((arm_span, arm_ty));\n         }\n \n         // We won't diverge unless the discriminant or all arms diverge."}, {"sha": "819f5dd1cfc352ca57e52014f66cd79cc33d0b8e", "filename": "src/test/ui/if/if-let-arm-types.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -1,10 +1,11 @@\n fn main() {\n-    if let Some(b) = None { //~ ERROR: `if let` arms have incompatible types\n-        //~^ expected (), found integer\n-        //~| expected type `()`\n-        //~| found type `{integer}`\n+    if let Some(b) = None {\n+        //~^ NOTE if let` arms have incompatible types\n         ()\n     } else {\n         1\n     };\n+    //~^^ ERROR: `if let` arms have incompatible types\n+    //~| NOTE expected (), found integer\n+    //~| NOTE expected type `()`\n }"}, {"sha": "6401a62c06ba26be8c4a85e72f014ee603c52a57", "filename": "src/test/ui/if/if-let-arm-types.stderr", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -1,25 +1,17 @@\n error[E0308]: `if let` arms have incompatible types\n-  --> $DIR/if-let-arm-types.rs:2:5\n+  --> $DIR/if-let-arm-types.rs:6:9\n    |\n-LL | /     if let Some(b) = None { //~ ERROR: `if let` arms have incompatible types\n-LL | |         //~^ expected (), found integer\n-LL | |         //~| expected type `()`\n-LL | |         //~| found type `{integer}`\n-...  |\n+LL | /     if let Some(b) = None {\n+LL | |         //~^ NOTE if let` arms have incompatible types\n+LL | |         ()\n+LL | |     } else {\n LL | |         1\n+   | |         ^ expected (), found integer\n LL | |     };\n-   | |_____^ expected (), found integer\n+   | |_____- `if let` arms have incompatible types\n    |\n    = note: expected type `()`\n               found type `{integer}`\n-note: `if let` arm with an incompatible type\n-  --> $DIR/if-let-arm-types.rs:7:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         1\n-LL | |     };\n-   | |_____^\n \n error: aborting due to previous error\n "}, {"sha": "726c437355e53cbef382f5706a69dd435def67a7", "filename": "src/test/ui/issues/issue-11319.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.rs?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -1,12 +1,14 @@\n fn main() {\n     match Some(10) {\n-    //~^ ERROR match arms have incompatible types\n-    //~| expected type `bool`\n-    //~| found type `()`\n-    //~| expected bool, found ()\n+    //~^ NOTE `match` arms have incompatible types\n         Some(5) => false,\n+        //~^ NOTE this is found to be of type `bool`\n         Some(2) => true,\n+        //~^ NOTE this is found to be of type `bool`\n         None    => (),\n+        //~^ ERROR match arms have incompatible types\n+        //~| NOTE expected bool, found ()\n+        //~| NOTE expected type `bool`\n         _       => true\n     }\n }"}, {"sha": "10db477b8ca7bfd6fa9f3b2e13f6113f6ea3190e", "filename": "src/test/ui/issues/issue-11319.stderr", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11319.stderr?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -1,16 +1,20 @@\n error[E0308]: match arms have incompatible types\n-  --> $DIR/issue-11319.rs:2:5\n+  --> $DIR/issue-11319.rs:8:20\n    |\n LL | /     match Some(10) {\n-LL | |     //~^ ERROR match arms have incompatible types\n-LL | |     //~| expected type `bool`\n-LL | |     //~| found type `()`\n-...  |\n+LL | |     //~^ NOTE `match` arms have incompatible types\n+LL | |         Some(5) => false,\n+   | |                    ----- this is found to be of type `bool`\n+LL | |         //~^ NOTE this is found to be of type `bool`\n+LL | |         Some(2) => true,\n+   | |                    ---- this is found to be of type `bool`\n+LL | |         //~^ NOTE this is found to be of type `bool`\n LL | |         None    => (),\n-   | |                    -- match arm with an incompatible type\n+   | |                    ^^ expected bool, found ()\n+...  |\n LL | |         _       => true\n LL | |     }\n-   | |_____^ expected bool, found ()\n+   | |_____- `match` arms have incompatible types\n    |\n    = note: expected type `bool`\n               found type `()`"}, {"sha": "15cea1d609d5382baed28eef39e9d99add1a8b00", "filename": "src/test/ui/issues/issue-17728.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.rs?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -97,7 +97,7 @@ impl Debug for Player {\n }\n \n fn str_to_direction(to_parse: &str) -> RoomDirection {\n-    match to_parse { //~ ERROR match arms have incompatible types\n+    match to_parse {\n         \"w\" | \"west\" => RoomDirection::West,\n         \"e\" | \"east\" => RoomDirection::East,\n         \"n\" | \"north\" => RoomDirection::North,\n@@ -108,6 +108,7 @@ fn str_to_direction(to_parse: &str) -> RoomDirection {\n         \"down\" => RoomDirection::Down,\n         _ => None\n     }\n+        //~^^ ERROR match arms have incompatible types\n }\n \n fn main() {"}, {"sha": "2c2efad19f5691ec076a5d63f2b4c9075436aef4", "filename": "src/test/ui/issues/issue-17728.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.stderr?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -10,17 +10,19 @@ LL |             Some(entry) => Ok(entry),\n    |                            ^^^^^^^^^ ...but data from `room` is returned here\n \n error[E0308]: match arms have incompatible types\n-  --> $DIR/issue-17728.rs:100:5\n+  --> $DIR/issue-17728.rs:109:14\n    |\n-LL | /     match to_parse { //~ ERROR match arms have incompatible types\n+LL | /     match to_parse {\n LL | |         \"w\" | \"west\" => RoomDirection::West,\n LL | |         \"e\" | \"east\" => RoomDirection::East,\n LL | |         \"n\" | \"north\" => RoomDirection::North,\n ...  |\n+LL | |         \"down\" => RoomDirection::Down,\n+   | |                   ------------------- this and all prior arms are found to be of type `RoomDirection`\n LL | |         _ => None\n-   | |              ---- match arm with an incompatible type\n+   | |              ^^^^ expected enum `RoomDirection`, found enum `std::option::Option`\n LL | |     }\n-   | |_____^ expected enum `RoomDirection`, found enum `std::option::Option`\n+   | |_____- `match` arms have incompatible types\n    |\n    = note: expected type `RoomDirection`\n               found type `std::option::Option<_>`"}, {"sha": "2f501b941b5a6108a86de4329cbcae1460e1bd63", "filename": "src/test/ui/issues/issue-24036.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.rs?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -6,11 +6,11 @@ fn closure_to_loc() {\n \n fn closure_from_match() {\n     let x = match 1usize {\n-    //~^ ERROR match arms have incompatible types\n         1 => |c| c + 1,\n         2 => |c| c - 1,\n         _ => |c| c - 1\n     };\n+    //~^^^ ERROR match arms have incompatible types\n }\n \n fn main() { }"}, {"sha": "fa9935fcf619dadc969f5736b336cfde854ab7ec", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e934e22151d5589cbe3cb1193250d8ac0b366fb/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=9e934e22151d5589cbe3cb1193250d8ac0b366fb", "patch": "@@ -10,20 +10,20 @@ LL |     x = |c| c + 1;\n    = help: consider boxing your closure and/or using it as a trait object\n \n error[E0308]: match arms have incompatible types\n-  --> $DIR/issue-24036.rs:8:13\n+  --> $DIR/issue-24036.rs:10:14\n    |\n LL |       let x = match 1usize {\n-   |  _____________^\n-LL | |     //~^ ERROR match arms have incompatible types\n+   |  _____________-\n LL | |         1 => |c| c + 1,\n+   | |              --------- this is found to be of type `[closure@$DIR/issue-24036.rs:9:14: 9:23]`\n LL | |         2 => |c| c - 1,\n-   | |              --------- match arm with an incompatible type\n+   | |              ^^^^^^^^^ expected closure, found a different closure\n LL | |         _ => |c| c - 1\n LL | |     };\n-   | |_____^ expected closure, found a different closure\n+   | |_____- `match` arms have incompatible types\n    |\n-   = note: expected type `[closure@$DIR/issue-24036.rs:10:14: 10:23]`\n-              found type `[closure@$DIR/issue-24036.rs:11:14: 11:23]`\n+   = note: expected type `[closure@$DIR/issue-24036.rs:9:14: 9:23]`\n+              found type `[closure@$DIR/issue-24036.rs:10:14: 10:23]`\n    = note: no two closures, even if identical, have the same type\n    = help: consider boxing your closure and/or using it as a trait object\n "}]}