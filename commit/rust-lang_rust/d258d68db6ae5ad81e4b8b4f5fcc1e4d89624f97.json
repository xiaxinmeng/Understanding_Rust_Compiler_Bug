{"sha": "d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNThkNjhkYjZhZTVhZDgxZTRiOGI0ZjVmY2MxZTRkODk2MjRmOTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-26T15:07:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-14T09:21:56Z"}, "message": "Remove `proc` types/expressions from the parser, compiler, and\nlanguage. Recommend `move||` instead.", "tree": {"sha": "ff5c17ff9776b1b1a229cdadf44c328d16e25304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff5c17ff9776b1b1a229cdadf44c328d16e25304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "html_url": "https://github.com/rust-lang/rust/commit/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cc8453a781a1895ba4533a8c8f3240a0eba6936", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc8453a781a1895ba4533a8c8f3240a0eba6936", "html_url": "https://github.com/rust-lang/rust/commit/9cc8453a781a1895ba4533a8c8f3240a0eba6936"}], "stats": {"total": 412, "additions": 91, "deletions": 321}, "files": [{"sha": "be2f4e590a3590d61b81905c2db64352ab6ec089", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -40,15 +40,6 @@ pub struct Closure {\n \n impl Copy for Closure {}\n \n-/// The representation of a Rust procedure (`proc()`)\n-#[repr(C)]\n-pub struct Procedure {\n-    pub code: *mut (),\n-    pub env: *mut (),\n-}\n-\n-impl Copy for Procedure {}\n-\n /// The representation of a Rust trait object.\n ///\n /// This struct does not have a `Repr` implementation"}, {"sha": "b6347278bffda63db464be532e936ee8bd1e2ffd", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -498,7 +498,6 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n             ast::ExprMac(..) |\n             ast::ExprClosure(..) |\n-            ast::ExprProc(..) |\n             ast::ExprLit(..) |\n             ast::ExprPath(..) => {\n                 self.straightline(expr, pred, None::<ast::Expr>.iter())"}, {"sha": "c4ad089d76e6e84384c7ed1b96e62ff627d98bfc", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -52,8 +52,7 @@ impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {\n                 self.visit_expr(&**e);\n                 self.with_context(Loop, |v| v.visit_block(&**b));\n             }\n-            ast::ExprClosure(_, _, _, ref b) |\n-            ast::ExprProc(_, ref b) => {\n+            ast::ExprClosure(_, _, _, ref b) => {\n                 self.with_context(Closure, |v| v.visit_block(&**b));\n             }\n             ast::ExprBreak(_) => self.require_loop(\"break\", e.span),"}, {"sha": "6501d8d6eb4306db79a4049a22e9c2a73966a49c", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -613,8 +613,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                 self.consume_expr(&**count);\n             }\n \n-            ast::ExprClosure(..) |\n-            ast::ExprProc(..) => {\n+            ast::ExprClosure(..) => {\n                 self.walk_captures(expr)\n             }\n "}, {"sha": "0c346519672d84d3e2017e4468d14fc31ef40171", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -587,19 +587,6 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                     sub,\n                     \"\");\n             }\n-            infer::ProcCapture(span, id) => {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    format!(\"captured variable `{}` must be 'static \\\n-                             to be captured in a proc\",\n-                            ty::local_var_name_str(self.tcx, id).get())\n-                        .as_slice());\n-                note_and_explain_region(\n-                    self.tcx,\n-                    \"captured variable is only valid for \",\n-                    sup,\n-                    \"\");\n-            }\n             infer::IndexSlice(span) => {\n                 self.tcx.sess.span_err(span,\n                                        \"index of slice outside its lifetime\");\n@@ -625,28 +612,6 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                     sup,\n                     \"\");\n             }\n-            infer::RelateProcBound(span, var_node_id, ty) => {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    format!(\n-                        \"the type `{}` of captured variable `{}` \\\n-                         outlives the `proc()` it \\\n-                         is captured in\",\n-                        self.ty_to_string(ty),\n-                        ty::local_var_name_str(self.tcx,\n-                                               var_node_id)).as_slice());\n-                note_and_explain_region(\n-                    self.tcx,\n-                    \"`proc()` is valid for \",\n-                    sub,\n-                    \"\");\n-                note_and_explain_region(\n-                    self.tcx,\n-                    format!(\"the type `{}` is only valid for \",\n-                            self.ty_to_string(ty)).as_slice(),\n-                    sup,\n-                    \"\");\n-            }\n             infer::RelateParamBound(span, ty) => {\n                 self.tcx.sess.span_err(\n                     span,\n@@ -1587,15 +1552,6 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n                                 self.tcx,\n                                 id).get().to_string()).as_slice());\n             }\n-            infer::ProcCapture(span, id) => {\n-                self.tcx.sess.span_note(\n-                    span,\n-                    format!(\"...so that captured variable `{}` \\\n-                            is 'static\",\n-                            ty::local_var_name_str(\n-                                self.tcx,\n-                                id).get()).as_slice());\n-            }\n             infer::IndexSlice(span) => {\n                 self.tcx.sess.span_note(\n                     span,\n@@ -1606,15 +1562,6 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n                     span,\n                     \"...so that it can be closed over into an object\");\n             }\n-            infer::RelateProcBound(span, var_node_id, _ty) => {\n-                self.tcx.sess.span_note(\n-                    span,\n-                    format!(\n-                        \"...so that the variable `{}` can be captured \\\n-                         into a proc\",\n-                        ty::local_var_name_str(self.tcx,\n-                                               var_node_id)).as_slice());\n-            }\n             infer::CallRcvr(span) => {\n                 self.tcx.sess.span_note(\n                     span,"}, {"sha": "2b1d8776365ecfb9ae4a0a43055a20db66a1a19b", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -175,20 +175,13 @@ pub enum SubregionOrigin<'tcx> {\n     // Closure bound must not outlive captured free variables\n     FreeVariable(Span, ast::NodeId),\n \n-    // Proc upvars must be 'static\n-    ProcCapture(Span, ast::NodeId),\n-\n     // Index into slice must be within its lifetime\n     IndexSlice(Span),\n \n     // When casting `&'a T` to an `&'b Trait` object,\n     // relating `'a` to `'b`\n     RelateObjectBound(Span),\n \n-    // When closing over a variable in a closure/proc, ensure that the\n-    // type of the variable outlives the lifetime bound.\n-    RelateProcBound(Span, ast::NodeId, Ty<'tcx>),\n-\n     // Some type parameter was instantiated with the given type,\n     // and that type must outlive some region.\n     RelateParamBound(Span, Ty<'tcx>),\n@@ -1089,10 +1082,8 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             InvokeClosure(a) => a,\n             DerefPointer(a) => a,\n             FreeVariable(a, _) => a,\n-            ProcCapture(a, _) => a,\n             IndexSlice(a) => a,\n             RelateObjectBound(a) => a,\n-            RelateProcBound(a, _, _) => a,\n             RelateParamBound(a, _) => a,\n             RelateRegionParamBound(a) => a,\n             RelateDefaultParamBound(a, _) => a,\n@@ -1128,21 +1119,12 @@ impl<'tcx> Repr<'tcx> for SubregionOrigin<'tcx> {\n             FreeVariable(a, b) => {\n                 format!(\"FreeVariable({}, {})\", a.repr(tcx), b)\n             }\n-            ProcCapture(a, b) => {\n-                format!(\"ProcCapture({}, {})\", a.repr(tcx), b)\n-            }\n             IndexSlice(a) => {\n                 format!(\"IndexSlice({})\", a.repr(tcx))\n             }\n             RelateObjectBound(a) => {\n                 format!(\"RelateObjectBound({})\", a.repr(tcx))\n             }\n-            RelateProcBound(a, b, c) => {\n-                format!(\"RelateProcBound({},{},{})\",\n-                        a.repr(tcx),\n-                        b,\n-                        c.repr(tcx))\n-            }\n             RelateParamBound(a, b) => {\n                 format!(\"RelateParamBound({},{})\",\n                         a.repr(tcx),"}, {"sha": "31bcdff9cd59370705567f8a4bc8ddd994439654", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -461,7 +461,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         }\n         visit::walk_expr(ir, expr);\n       }\n-      ast::ExprClosure(..) | ast::ExprProc(..) => {\n+      ast::ExprClosure(..) => {\n         // Interesting control flow (for loops can contain labeled\n         // breaks or continues)\n         ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n@@ -981,9 +981,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n               self.propagate_through_expr(&**e, succ)\n           }\n \n-          ast::ExprClosure(_, _, _, ref blk) |\n-          ast::ExprProc(_, ref blk) => {\n-              debug!(\"{} is an ExprClosure or ExprProc\",\n+          ast::ExprClosure(_, _, _, ref blk) => {\n+              debug!(\"{} is an ExprClosure\",\n                      expr_to_string(expr));\n \n               /*\n@@ -1502,8 +1501,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       ast::ExprBreak(..) | ast::ExprAgain(..) | ast::ExprLit(_) |\n       ast::ExprBlock(..) | ast::ExprMac(..) | ast::ExprAddrOf(..) |\n       ast::ExprStruct(..) | ast::ExprRepeat(..) | ast::ExprParen(..) |\n-      ast::ExprClosure(..) | ast::ExprProc(..) |\n-      ast::ExprPath(..) | ast::ExprBox(..) | ast::ExprSlice(..) => {\n+      ast::ExprClosure(..) | ast::ExprPath(..) | ast::ExprBox(..) | ast::ExprSlice(..) => {\n         visit::walk_expr(this, expr);\n       }\n       ast::ExprIfLet(..) => {"}, {"sha": "652847a63436defe3525fd2401d39d214a645857", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -555,8 +555,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n \n           ast::ExprAddrOf(..) | ast::ExprCall(..) |\n           ast::ExprAssign(..) | ast::ExprAssignOp(..) |\n-          ast::ExprClosure(..) | ast::ExprProc(..) |\n-          ast::ExprRet(..) |\n+          ast::ExprClosure(..) | ast::ExprRet(..) |\n           ast::ExprUnary(..) | ast::ExprSlice(..) |\n           ast::ExprMethodCall(..) | ast::ExprCast(..) |\n           ast::ExprVec(..) | ast::ExprTup(..) | ast::ExprIf(..) |\n@@ -728,7 +727,6 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                 };\n \n                 match fn_expr.node {\n-                    ast::ExprProc(_, ref body) |\n                     ast::ExprClosure(_, _, _, ref body) => body.id,\n                     _ => unreachable!()\n                 }"}, {"sha": "9912db69a053fc92e0ae493ab3be58e1aa5ee84b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -51,7 +51,7 @@ use util::nodemap::{NodeMap, NodeSet, DefIdSet, FnvHashMap};\n use syntax::ast::{Arm, BindByRef, BindByValue, BindingMode, Block, Crate, CrateNum};\n use syntax::ast::{DeclItem, DefId, Expr, ExprAgain, ExprBreak, ExprField};\n use syntax::ast::{ExprClosure, ExprForLoop, ExprLoop, ExprWhile, ExprMethodCall};\n-use syntax::ast::{ExprPath, ExprProc, ExprStruct, FnDecl};\n+use syntax::ast::{ExprPath, ExprStruct, FnDecl};\n use syntax::ast::{ForeignItem, ForeignItemFn, ForeignItemStatic, Generics};\n use syntax::ast::{Ident, ImplItem, Item, ItemEnum, ItemFn, ItemForeignMod};\n use syntax::ast::{ItemImpl, ItemMac, ItemMod, ItemStatic, ItemStruct};\n@@ -64,7 +64,7 @@ use syntax::ast::{RegionTyParamBound, StmtDecl, StructField};\n use syntax::ast::{StructVariantKind, TraitRef, TraitTyParamBound};\n use syntax::ast::{TupleVariantKind, Ty, TyBool, TyChar, TyClosure, TyF32};\n use syntax::ast::{TyF64, TyFloat, TyI, TyI8, TyI16, TyI32, TyI64, TyInt, TyObjectSum};\n-use syntax::ast::{TyParam, TyParamBound, TyPath, TyPtr, TyPolyTraitRef, TyProc, TyQPath};\n+use syntax::ast::{TyParam, TyParamBound, TyPath, TyPtr, TyPolyTraitRef, TyQPath};\n use syntax::ast::{TyRptr, TyStr, TyU, TyU8, TyU16, TyU32, TyU64, TyUint};\n use syntax::ast::{TypeImplItem, UnnamedField};\n use syntax::ast::{Variant, ViewItem, ViewItemExternCrate};\n@@ -5027,7 +5027,7 @@ impl<'a> Resolver<'a> {\n                 self.resolve_trait_reference(ty.id, &*qpath.trait_ref, TraitQPath);\n             }\n \n-            TyClosure(ref c) | TyProc(ref c) => {\n+            TyClosure(ref c) => {\n                 self.resolve_type_parameter_bounds(\n                     ty.id,\n                     &c.bounds,\n@@ -5902,13 +5902,6 @@ impl<'a> Resolver<'a> {\n                                       &**block);\n             }\n \n-            ExprProc(ref fn_decl, ref block) => {\n-                self.capture_mode_map.insert(expr.id, ast::CaptureByValue);\n-                self.resolve_function(ClosureRibKind(expr.id, block.id),\n-                                      Some(&**fn_decl), NoTypeParameters,\n-                                      &**block);\n-            }\n-\n             ExprStruct(ref path, _, _) => {\n                 // Resolve the path to the structure it goes to. We don't\n                 // check to ensure that the path is actually a structure; that"}, {"sha": "ee0fc32702064c4d2df83de82b1be65043900886", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -141,7 +141,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n \n     fn visit_ty(&mut self, ty: &ast::Ty) {\n         match ty.node {\n-            ast::TyClosure(ref c) | ast::TyProc(ref c) => {\n+            ast::TyClosure(ref c)  => {\n                 // Careful, the bounds on a closure/proc are *not* within its binder.\n                 visit::walk_ty_param_bounds_helper(self, &c.bounds);\n                 visit::walk_lifetime_decls_helper(self, &c.lifetimes);"}, {"sha": "c3c4acd8191c08756545adc32b653f80857f27ad", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -746,8 +746,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             _ => { return Ok(()); }\n         };\n \n-        debug!(\"assemble_unboxed_candidates: self_ty={} obligation={}\",\n+        debug!(\"assemble_unboxed_candidates: self_ty={} kind={} obligation={}\",\n                self_ty.repr(self.tcx()),\n+               kind,\n                obligation.repr(self.tcx()));\n \n         let closure_kind = match self.typer.unboxed_closures().borrow().get(&closure_def_id) {\n@@ -760,6 +761,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         };\n \n+        debug!(\"closure_kind = {}\", closure_kind);\n+\n         if closure_kind == kind {\n             candidates.vec.push(UnboxedClosureCandidate(closure_def_id, substs.clone()));\n         }\n@@ -842,14 +845,24 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             candidate: &Candidate<'tcx>)\n                             -> EvaluationResult<'tcx>\n     {\n-        debug!(\"winnow_candidate: candidate={}\", candidate.repr(self.tcx()));\n-        self.infcx.probe(|| {\n+        /*!\n+         * Further evaluate `candidate` to decide whether all type parameters match\n+         * and whether nested obligations are met. Returns true if `candidate` remains\n+         * viable after this further scrutiny.\n+         */\n+\n+        debug!(\"winnow_candidate: depth={} candidate={}\",\n+               stack.obligation.recursion_depth, candidate.repr(self.tcx()));\n+        let result = self.infcx.probe(|| {\n             let candidate = (*candidate).clone();\n             match self.confirm_candidate(stack.obligation, candidate) {\n                 Ok(selection) => self.winnow_selection(Some(stack), selection),\n                 Err(error) => EvaluatedToErr(error),\n             }\n-        })\n+        });\n+        debug!(\"winnow_candidate depth={} result={}\",\n+               stack.obligation.recursion_depth, result);\n+        result\n     }\n \n     fn winnow_selection<'o>(&mut self,\n@@ -1562,6 +1575,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             substs: substs,\n         });\n \n+        debug!(\"confirm_unboxed_closure_candidate(closure_def_id={}, trait_ref={})\",\n+               closure_def_id.repr(self.tcx()),\n+               trait_ref.repr(self.tcx()));\n+\n         self.confirm(obligation.cause,\n                      obligation.trait_ref.clone(),\n                      trait_ref)"}, {"sha": "98d4761508a284ab825b67f847430dfb2f8dc06b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -4236,7 +4236,6 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n         ast::ExprIf(..) |\n         ast::ExprMatch(..) |\n         ast::ExprClosure(..) |\n-        ast::ExprProc(..) |\n         ast::ExprBlock(..) |\n         ast::ExprRepeat(..) |\n         ast::ExprVec(..) => {"}, {"sha": "f8276fa8f84d4e9ecb694fd75dda055ba3b366e7", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -449,7 +449,14 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n             let unboxed_closures = cx.unboxed_closures.borrow();\n             unboxed_closures.get(did).map(|cl| {\n                 closure_to_string(cx, &cl.closure_type.subst(cx, substs))\n-            }).unwrap_or_else(|| \"closure\".to_string())\n+            }).unwrap_or_else(|| {\n+                if did.krate == ast::LOCAL_CRATE {\n+                    let span = cx.map.span(did.node);\n+                    format!(\"closure[{}]\", span.repr(cx))\n+                } else {\n+                    format!(\"closure\")\n+                }\n+            })\n         }\n         ty_vec(t, sz) => {\n             let inner_str = ty_to_string(cx, t);"}, {"sha": "116cff49153beecdad9be2d5c9117d5a0c77fd20", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -242,7 +242,6 @@ mod svh_visitor {\n         SawExprWhile,\n         SawExprMatch,\n         SawExprClosure,\n-        SawExprProc,\n         SawExprBlock,\n         SawExprAssign,\n         SawExprAssignOp(ast::BinOp),\n@@ -274,7 +273,6 @@ mod svh_visitor {\n             ExprLoop(_, id)          => SawExprLoop(id.map(content)),\n             ExprMatch(..)            => SawExprMatch,\n             ExprClosure(..)          => SawExprClosure,\n-            ExprProc(..)             => SawExprProc,\n             ExprBlock(..)            => SawExprBlock,\n             ExprAssign(..)           => SawExprAssign,\n             ExprAssignOp(op, _, _)   => SawExprAssignOp(op),"}, {"sha": "a3fb91aced007fc432e505b867a7c1b79664442e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -337,7 +337,6 @@ pub fn closure_to_block(closure_id: ast::NodeId,\n                         tcx: &ty::ctxt) -> ast::NodeId {\n     match tcx.map.get(closure_id) {\n         ast_map::NodeExpr(expr) => match expr.node {\n-            ast::ExprProc(_, ref block) |\n             ast::ExprClosure(_, _, _, ref block) => {\n                 block.id\n             }"}, {"sha": "b2578fdbc054bb0c26241588a892ca734d423e18", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -1396,8 +1396,7 @@ fn has_nested_returns(tcx: &ty::ctxt, id: ast::NodeId) -> bool {\n         }\n         Some(ast_map::NodeExpr(e)) => {\n             match e.node {\n-                ast::ExprClosure(_, _, _, ref blk) |\n-                ast::ExprProc(_, ref blk) => {\n+                ast::ExprClosure(_, _, _, ref blk) => {\n                     let mut explicit = CheckForNestedReturnsVisitor::explicit();\n                     let mut implicit = CheckForNestedReturnsVisitor::implicit();\n                     visit::walk_expr(&mut explicit, e);"}, {"sha": "66258f228cd7b8f2d35ef4bb46ecab1bd728ecae", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -1239,7 +1239,6 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n         ast_map::NodeExpr(ref expr) => {\n             match expr.node {\n-                ast::ExprProc(ref fn_decl, ref top_level_block) |\n                 ast::ExprClosure(_, _, ref fn_decl, ref top_level_block) => {\n                     let name = format!(\"fn{}\", token::gensym(\"fn\"));\n                     let name = token::str_to_ident(name.as_slice());\n@@ -3588,7 +3587,6 @@ fn populate_scope_map(cx: &CrateContext,\n                 })\n             }\n \n-            ast::ExprProc(ref decl, ref block) |\n             ast::ExprClosure(_, _, ref decl, ref block) => {\n                 with_new_scope(cx,\n                                block.span,"}, {"sha": "5b9a1d499910e62f299c170819ff507f7e544a9e", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -1052,8 +1052,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ast::ExprVec(..) | ast::ExprRepeat(..) => {\n             tvec::trans_fixed_vstore(bcx, expr, dest)\n         }\n-        ast::ExprClosure(_, _, ref decl, ref body) |\n-        ast::ExprProc(ref decl, ref body) => {\n+        ast::ExprClosure(_, _, ref decl, ref body) => {\n             // Check the side-table to see whether this is an unboxed\n             // closure or an older, legacy style closure. Store this\n             // into a variable to ensure the the RefCell-lock is"}, {"sha": "4ea2a2287019db090be67526142bf7ee3fcd6ff3", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -945,26 +945,6 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                                             None);\n                 ty::mk_closure(tcx, fn_decl)\n             }\n-            ast::TyProc(ref f) => {\n-                // Use corresponding trait store to figure out default bounds\n-                // if none were specified.\n-                let bounds = conv_existential_bounds(this,\n-                                                     rscope,\n-                                                     ast_ty.span,\n-                                                     None,\n-                                                     f.bounds.as_slice());\n-\n-                let fn_decl = ty_of_closure(this,\n-                                            f.fn_style,\n-                                            f.onceness,\n-                                            bounds,\n-                                            ty::UniqTraitStore,\n-                                            &*f.decl,\n-                                            abi::Rust,\n-                                            None);\n-\n-                ty::mk_closure(tcx, fn_decl)\n-            }\n             ast::TyPolyTraitRef(ref bounds) => {\n                 conv_ty_poly_trait_ref(this, rscope, ast_ty.span, bounds.as_slice())\n             }\n@@ -1071,7 +1051,7 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n             }\n             ast::TyInfer => {\n                 // TyInfer also appears as the type of arguments or return\n-                // values in a ExprClosure or ExprProc, or as\n+                // values in a ExprClosure, or as\n                 // the type of local variables. Both of these cases are\n                 // handled specially and will not descend into this routine.\n                 this.ty_infer(ast_ty.span)"}, {"sha": "692bd31638e347a81f7743a9afd18a1de400a608", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -250,12 +250,12 @@ fn deduce_unboxed_closure_expectations_from_obligations<'a,'tcx>(\n }\n \n \n-pub fn check_boxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n-                                    expr: &ast::Expr,\n-                                    store: ty::TraitStore,\n-                                    decl: &ast::FnDecl,\n-                                    body: &ast::Block,\n-                                    expected: Expectation<'tcx>) {\n+fn check_boxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n+                                expr: &ast::Expr,\n+                                store: ty::TraitStore,\n+                                decl: &ast::FnDecl,\n+                                body: &ast::Block,\n+                                expected: Expectation<'tcx>) {\n     let tcx = fcx.ccx.tcx;\n \n     // Find the expected input/output types (if any). Substitute\n@@ -293,18 +293,10 @@ pub fn check_boxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n             }\n             _ => {\n                 // Not an error! Means we're inferring the closure type\n-                let (bounds, onceness) = match expr.node {\n-                    ast::ExprProc(..) => {\n-                        let mut bounds = ty::region_existential_bound(ty::ReStatic);\n-                        bounds.builtin_bounds.insert(ty::BoundSend); // FIXME\n-                        (bounds, ast::Once)\n-                    }\n-                    _ => {\n-                        let region = fcx.infcx().next_region_var(\n-                            infer::AddrOfRegion(expr.span));\n-                        (ty::region_existential_bound(region), ast::Many)\n-                    }\n-                };\n+                let region = fcx.infcx().next_region_var(\n+                    infer::AddrOfRegion(expr.span));\n+                let bounds = ty::region_existential_bound(region);\n+                let onceness = ast::Many;\n                 (None, onceness, bounds)\n             }\n         }"}, {"sha": "fccd6605df713457965035e57924bde02f0c031f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -2122,14 +2122,6 @@ fn try_overloaded_call<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         fcx.inh.method_map.borrow_mut().insert(method_call, method_callee);\n         write_call(fcx, call_expression, output_type);\n \n-        if !fcx.tcx().sess.features.borrow().unboxed_closures {\n-            span_err!(fcx.tcx().sess, call_expression.span, E0056,\n-                \"overloaded calls are experimental\");\n-            span_help!(fcx.tcx().sess, call_expression.span,\n-                \"add `#![feature(unboxed_closures)]` to \\\n-                the crate attributes to enable\");\n-        }\n-\n         return true\n     }\n \n@@ -2666,7 +2658,7 @@ fn check_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         };\n         for (i, arg) in args.iter().take(t).enumerate() {\n             let is_block = match arg.node {\n-                ast::ExprClosure(..) | ast::ExprProc(..) => true,\n+                ast::ExprClosure(..) => true,\n                 _ => false\n             };\n \n@@ -3997,14 +3989,6 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n       ast::ExprClosure(_, opt_kind, ref decl, ref body) => {\n           closure::check_expr_closure(fcx, expr, opt_kind, &**decl, &**body, expected);\n       }\n-      ast::ExprProc(ref decl, ref body) => {\n-          closure::check_boxed_closure(fcx,\n-                                       expr,\n-                                       ty::UniqTraitStore,\n-                                       &**decl,\n-                                       &**body,\n-                                       expected);\n-      }\n       ast::ExprBlock(ref b) => {\n         check_block_with_expected(fcx, &**b, expected);\n         fcx.write_ty(id, fcx.node_ty(b.id));"}, {"sha": "9f75b9764ebd8581df6f83dc1d8da3d640eac2e7", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -714,7 +714,6 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             visit::walk_expr(rcx, expr);\n         }\n \n-        ast::ExprProc(_, ref body) |\n         ast::ExprClosure(_, _, _, ref body) => {\n             check_expr_fn_block(rcx, expr, &**body);\n         }\n@@ -936,8 +935,9 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n                 let cause = traits::ObligationCause::new(freevar.span, rcx.fcx.body_id, code);\n                 rcx.fcx.register_builtin_bound(var_ty, builtin_bound, cause);\n             }\n+\n             type_must_outlive(\n-                rcx, infer::RelateProcBound(expr.span, var_node_id, var_ty),\n+                rcx, infer::FreeVariable(expr.span, var_node_id),\n                 var_ty, bounds.region_bound);\n         }\n     }"}, {"sha": "8d94cf5dd5e96f1fb3e03b3d2590e81bfbf23414", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -121,8 +121,7 @@ impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n                                     MethodCall::expr(e.id));\n \n         match e.node {\n-            ast::ExprClosure(_, _, ref decl, _) |\n-            ast::ExprProc(ref decl, _) => {\n+            ast::ExprClosure(_, _, ref decl, _) => {\n                 for input in decl.inputs.iter() {\n                     let _ = self.visit_node_id(ResolvingExpr(e.span),\n                                                input.id);"}, {"sha": "ae7a2127e9f605349fd7a68c608ab1fc024c720e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -719,7 +719,6 @@ pub enum Expr_ {\n     ExprLoop(P<Block>, Option<Ident>),\n     ExprMatch(P<Expr>, Vec<Arm>, MatchSource),\n     ExprClosure(CaptureClause, Option<UnboxedClosureKind>, P<FnDecl>, P<Block>),\n-    ExprProc(P<FnDecl>, P<Block>),\n     ExprBlock(P<Block>),\n \n     ExprAssign(P<Expr>, P<Expr>),\n@@ -1225,8 +1224,6 @@ pub enum Ty_ {\n     TyRptr(Option<Lifetime>, MutTy),\n     /// A closure (e.g. `|uint| -> bool`)\n     TyClosure(P<ClosureTy>),\n-    /// A procedure (e.g `proc(uint) -> bool`)\n-    TyProc(P<ClosureTy>),\n     /// A bare function (e.g. `fn(uint) -> bool`)\n     TyBareFn(P<BareFnTy>),\n     /// A tuple (`(A, B, C, D,...)`)"}, {"sha": "5462918b662831f3dd60b93b4cb83b7bd3f25a6a", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -37,7 +37,7 @@ use visit;\n ///\n /// More specifically, it is one of either:\n ///   - A function item,\n-///   - A closure expr (i.e. an ExprClosure or ExprProc), or\n+///   - A closure expr (i.e. an ExprClosure), or\n ///   - The default implementation for a trait method.\n ///\n /// To construct one, use the `Code::from_node` function.\n@@ -73,7 +73,7 @@ impl MaybeFnLike for ast::TraitItem {\n impl MaybeFnLike for ast::Expr {\n     fn is_fn_like(&self) -> bool {\n         match self.node {\n-            ast::ExprClosure(..) | ast::ExprProc(..) => true,\n+            ast::ExprClosure(..) => true,\n             _ => false,\n         }\n     }\n@@ -222,8 +222,6 @@ impl<'a> FnLikeNode<'a> {\n             ast_map::NodeExpr(e) => match e.node {\n                 ast::ExprClosure(_, _, ref decl, ref block) =>\n                     closure(ClosureParts::new(&**decl, &**block, e.id, e.span)),\n-                ast::ExprProc(ref decl, ref block) =>\n-                    closure(ClosureParts::new(&**decl, &**block, e.id, e.span)),\n                 _ => panic!(\"expr FnLikeNode that is not fn-like\"),\n             },\n             _ => panic!(\"other FnLikeNode that is not fn-like\"),"}, {"sha": "6f1d2d39b30493df204cf7ea185292f60586c3fc", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -859,7 +859,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n \n     fn visit_ty(&mut self, ty: &'ast Ty) {\n         match ty.node {\n-            TyClosure(ref fd) | TyProc(ref fd) => {\n+            TyClosure(ref fd) => {\n                 self.visit_fn_decl(&*fd.decl);\n             }\n             TyBareFn(ref fd) => {"}, {"sha": "1a004ca7c44cc6c2d352e6dcdce1d048e38597b3", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -217,13 +217,6 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             P(ast::Expr{id:id, node: new_node, span: fld.new_span(span)})\n         }\n \n-        ast::ExprProc(fn_decl, block) => {\n-            let (rewritten_fn_decl, rewritten_block)\n-                = expand_and_rename_fn_decl_and_block(fn_decl, block, fld);\n-            let new_node = ast::ExprProc(rewritten_fn_decl, rewritten_block);\n-            P(ast::Expr{id:id, node: new_node, span: fld.new_span(span)})\n-        }\n-\n         _ => {\n             P(noop_fold_expr(ast::Expr {\n                 id: id,\n@@ -1576,17 +1569,6 @@ mod test {\n             0)\n     }\n \n-    // closure arg hygiene (ExprProc)\n-    // expands to fn f(){(proc(x_1 : int) {(x_2 + x_1)})(3);}\n-    #[test] fn closure_arg_hygiene_2(){\n-        run_renaming_test(\n-            &(\"macro_rules! inject_x (()=>(x))\n-              fn f(){ (proc(x : int){(inject_x!() + x)})(3); }\",\n-              vec!(vec!(1)),\n-              true),\n-            0)\n-    }\n-\n     // macro_rules in method position. Sadly, unimplemented.\n     #[test] fn macro_in_method_posn(){\n         expand_crate_str("}, {"sha": "66fe672c3e5e82e7b97e0d6ad636ca346513fa91", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -306,12 +306,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n \n     fn visit_expr(&mut self, e: &ast::Expr) {\n         match e.node {\n-            ast::ExprClosure(_, Some(_), _, _) => {\n-                self.gate_feature(\"unboxed_closures\",\n-                                  e.span,\n-                                  \"unboxed closures are a work-in-progress \\\n-                                   feature with known bugs\");\n-            }\n             ast::ExprSlice(..) => {\n                 self.gate_feature(\"slicing_syntax\",\n                                   e.span,"}, {"sha": "611faa2c2c9091da6bb4d0ecb9643867a4a7f3da", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -425,17 +425,6 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                     }\n                 }))\n             }\n-            TyProc(f) => {\n-                TyProc(f.map(|ClosureTy {fn_style, onceness, bounds, decl, lifetimes}| {\n-                    ClosureTy {\n-                        fn_style: fn_style,\n-                        onceness: onceness,\n-                        bounds: fld.fold_bounds(bounds),\n-                        decl: fld.fold_fn_decl(decl),\n-                        lifetimes: fld.fold_lifetime_defs(lifetimes)\n-                    }\n-                }))\n-            }\n             TyBareFn(f) => {\n                 TyBareFn(f.map(|BareFnTy {lifetimes, fn_style, abi, decl}| BareFnTy {\n                     lifetimes: fld.fold_lifetime_defs(lifetimes),\n@@ -1360,10 +1349,6 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                         arms.move_map(|x| folder.fold_arm(x)),\n                         source)\n             }\n-            ExprProc(decl, body) => {\n-                ExprProc(folder.fold_fn_decl(decl),\n-                         folder.fold_block(body))\n-            }\n             ExprClosure(capture_clause, opt_kind, decl, body) => {\n                 ExprClosure(capture_clause,\n                             opt_kind,"}, {"sha": "3a7cc77515dbefc8d86394de73a3cfbf8c2aa8c7", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -32,6 +32,8 @@ pub enum ObsoleteSyntax {\n     ObsoleteImportRenaming,\n     ObsoleteSubsliceMatch,\n     ObsoleteExternCrateRenaming,\n+    ObsoleteProcType,\n+    ObsoleteProcExpr,\n }\n \n impl Copy for ObsoleteSyntax {}\n@@ -55,6 +57,14 @@ impl<'a> ParserObsoleteMethods for parser::Parser<'a> {\n     /// Reports an obsolete syntax non-fatal error.\n     fn obsolete(&mut self, sp: Span, kind: ObsoleteSyntax) {\n         let (kind_str, desc) = match kind {\n+            ObsoleteProcType => (\n+                \"the `proc` type\",\n+                \"use unboxed closures instead\",\n+            ),\n+            ObsoleteProcExpr => (\n+                \"`proc` expression\",\n+                \"use a `move ||` expression instead\",\n+            ),\n             ObsoleteOwnedType => (\n                 \"`~` notation for owned pointers\",\n                 \"use `Box<T>` in `std::owned` instead\""}, {"sha": "381942a3e622f6eb2ec2329f4d2391cc28743620", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -27,10 +27,10 @@ use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n use ast::{ExprBreak, ExprCall, ExprCast};\n use ast::{ExprField, ExprTupField, ExprClosure, ExprIf, ExprIfLet, ExprIndex, ExprSlice};\n use ast::{ExprLit, ExprLoop, ExprMac};\n-use ast::{ExprMethodCall, ExprParen, ExprPath, ExprProc};\n+use ast::{ExprMethodCall, ExprParen, ExprPath};\n use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n-use ast::{Once, Many};\n+use ast::{Many};\n use ast::{FnUnboxedClosureKind, FnMutUnboxedClosureKind};\n use ast::{FnOnceUnboxedClosureKind};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod, FunctionRetTy};\n@@ -54,7 +54,7 @@ use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{TtDelimited, TtSequence, TtToken};\n use ast::{TupleVariantKind, Ty, Ty_, TypeBinding};\n-use ast::{TypeField, TyFixedLengthVec, TyClosure, TyProc, TyBareFn};\n+use ast::{TypeField, TyFixedLengthVec, TyClosure, TyBareFn};\n use ast::{TyTypeof, TyInfer, TypeMethod};\n use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr, TyQPath};\n use ast::{TyRptr, TyTup, TyU32, TyVec, UnUniq};\n@@ -1064,7 +1064,6 @@ impl<'a> Parser<'a> {\n         Deprecated:\n \n         - for <'lt> |S| -> T\n-        - for <'lt> proc(S) -> T\n \n         Eventually:\n \n@@ -1158,26 +1157,21 @@ impl<'a> Parser<'a> {\n          |     |    |    Bounds\n          |     |  Argument types\n          |   Legacy lifetimes\n-        the `proc` keyword\n+        the `proc` keyword (already consumed)\n \n         */\n \n-        let lifetime_defs = self.parse_legacy_lifetime_defs(lifetime_defs);\n-        let (inputs, variadic) = self.parse_fn_args(false, false);\n-        let bounds = self.parse_colon_then_ty_param_bounds();\n-        let ret_ty = self.parse_ret_ty();\n-        let decl = P(FnDecl {\n-            inputs: inputs,\n-            output: ret_ty,\n-            variadic: variadic\n-        });\n-        TyProc(P(ClosureTy {\n-            fn_style: NormalFn,\n-            onceness: Once,\n-            bounds: bounds,\n-            decl: decl,\n-            lifetimes: lifetime_defs,\n-        }))\n+        let proc_span = self.last_span;\n+\n+        // To be helpful, parse the proc as ever\n+        let _ = self.parse_legacy_lifetime_defs(lifetime_defs);\n+        let _ = self.parse_fn_args(false, false);\n+        let _ = self.parse_colon_then_ty_param_bounds();\n+        let _ = self.parse_ret_ty();\n+\n+        self.obsolete(proc_span, ObsoleteProcType);\n+\n+        TyInfer\n     }\n \n     /// Parses an optional unboxed closure kind (`&:`, `&mut:`, or `:`).\n@@ -2294,17 +2288,10 @@ impl<'a> Parser<'a> {\n                     return self.parse_lambda_expr(CaptureByValue);\n                 }\n                 if self.eat_keyword(keywords::Proc) {\n-                    let decl = self.parse_proc_decl();\n-                    let body = self.parse_expr();\n-                    let fakeblock = P(ast::Block {\n-                            id: ast::DUMMY_NODE_ID,\n-                            view_items: Vec::new(),\n-                            stmts: Vec::new(),\n-                            rules: DefaultBlock,\n-                            span: body.span,\n-                            expr: Some(body),\n-                        });\n-                    return self.mk_expr(lo, fakeblock.span.hi, ExprProc(decl, fakeblock));\n+                    let span = self.last_span;\n+                    let _ = self.parse_proc_decl();\n+                    let _ = self.parse_expr();\n+                    return self.obsolete_expr(span, ObsoleteProcExpr);\n                 }\n                 if self.eat_keyword(keywords::If) {\n                     return self.parse_if_expr();"}, {"sha": "87905db22f349b857ded5af646c21d70cf2d0187", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 47, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -450,7 +450,7 @@ pub fn visibility_qualified(vis: ast::Visibility, s: &str) -> String {\n fn needs_parentheses(expr: &ast::Expr) -> bool {\n     match expr.node {\n         ast::ExprAssign(..) | ast::ExprBinary(..) |\n-        ast::ExprClosure(..) | ast::ExprProc(..) |\n+        ast::ExprClosure(..) |\n         ast::ExprAssignOp(..) | ast::ExprCast(..) => true,\n         _ => false,\n     }\n@@ -734,25 +734,6 @@ impl<'a> State<'a> {\n                                       Some(&generics),\n                                       None));\n             }\n-            ast::TyProc(ref f) => {\n-                let generics = ast::Generics {\n-                    lifetimes: f.lifetimes.clone(),\n-                    ty_params: OwnedSlice::empty(),\n-                    where_clause: ast::WhereClause {\n-                        id: ast::DUMMY_NODE_ID,\n-                        predicates: Vec::new(),\n-                    },\n-                };\n-                try!(self.print_ty_fn(None,\n-                                      Some('~'),\n-                                      f.fn_style,\n-                                      f.onceness,\n-                                      &*f.decl,\n-                                      None,\n-                                      &f.bounds,\n-                                      Some(&generics),\n-                                      None));\n-            }\n             ast::TyPath(ref path, _) => {\n                 try!(self.print_path(path, false));\n             }\n@@ -1696,33 +1677,6 @@ impl<'a> State<'a> {\n                 // empty box to satisfy the close.\n                 try!(self.ibox(0));\n             }\n-            ast::ExprProc(ref decl, ref body) => {\n-                // in do/for blocks we don't want to show an empty\n-                // argument list, but at this point we don't know which\n-                // we are inside.\n-                //\n-                // if !decl.inputs.is_empty() {\n-                try!(self.print_proc_args(&**decl));\n-                try!(space(&mut self.s));\n-                // }\n-                assert!(body.stmts.is_empty());\n-                assert!(body.expr.is_some());\n-                // we extract the block, so as not to create another set of boxes\n-                match body.expr.as_ref().unwrap().node {\n-                    ast::ExprBlock(ref blk) => {\n-                        try!(self.print_block_unclosed(&**blk));\n-                    }\n-                    _ => {\n-                        // this is a bare expression\n-                        try!(self.print_expr(body.expr.as_ref().map(|e| &**e).unwrap()));\n-                        try!(self.end()); // need to close a box\n-                    }\n-                }\n-                // a box will be closed by print_expr, but we didn't want an overall\n-                // wrapper so we closed the corresponding opening. so create an\n-                // empty box to satisfy the close.\n-                try!(self.ibox(0));\n-            }\n             ast::ExprBlock(ref blk) => {\n                 // containing cbox, will be closed by print-block at }\n                 try!(self.cbox(indent_unit));\n@@ -2010,6 +1964,7 @@ impl<'a> State<'a> {\n                 match data.output {\n                     None => { }\n                     Some(ref ty) => {\n+                        try!(self.space_if_not_bol());\n                         try!(self.word_space(\"->\"));\n                         try!(self.print_type(&**ty));\n                     }"}, {"sha": "eca99df8e5561c2985015a75bcdb47d0dcefc4c0", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d258d68db6ae5ad81e4b8b4f5fcc1e4d89624f97", "patch": "@@ -389,14 +389,6 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             walk_ty_param_bounds_helper(visitor, &function_declaration.bounds);\n             walk_lifetime_decls_helper(visitor, &function_declaration.lifetimes);\n         }\n-        TyProc(ref function_declaration) => {\n-            for argument in function_declaration.decl.inputs.iter() {\n-                visitor.visit_ty(&*argument.ty)\n-            }\n-            walk_fn_ret_ty(visitor, &function_declaration.decl.output);\n-            walk_ty_param_bounds_helper(visitor, &function_declaration.bounds);\n-            walk_lifetime_decls_helper(visitor, &function_declaration.lifetimes);\n-        }\n         TyBareFn(ref function_declaration) => {\n             for argument in function_declaration.decl.inputs.iter() {\n                 visitor.visit_ty(&*argument.ty)\n@@ -831,13 +823,6 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n                              expression.span,\n                              expression.id)\n         }\n-        ExprProc(ref function_declaration, ref body) => {\n-            visitor.visit_fn(FkFnBlock,\n-                             &**function_declaration,\n-                             &**body,\n-                             expression.span,\n-                             expression.id)\n-        }\n         ExprBlock(ref block) => visitor.visit_block(&**block),\n         ExprAssign(ref left_hand_expression, ref right_hand_expression) => {\n             visitor.visit_expr(&**right_hand_expression);"}]}