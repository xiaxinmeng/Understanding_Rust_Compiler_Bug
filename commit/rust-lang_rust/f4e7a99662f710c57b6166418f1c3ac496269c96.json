{"sha": "f4e7a99662f710c57b6166418f1c3ac496269c96", "node_id": "C_kwDOAAsO6NoAKGY0ZTdhOTk2NjJmNzEwYzU3YjYxNjY0MThmMWMzYWM0OTYyNjljOTY", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-04-07T02:32:55Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-04-07T02:32:55Z"}, "message": "fix: ensure bad `#[test]` invocs retain correct AST", "tree": {"sha": "4904d4002e4cdb0aa06862af8e770dab23a35fb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4904d4002e4cdb0aa06862af8e770dab23a35fb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4e7a99662f710c57b6166418f1c3ac496269c96", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmQvgSEACgkQZ6vxb7Ds\n2HCYpg/8C3mCADjteH2wAECt6vUWA+jZEsYpuoFhbd/VOvFxgmSb5UeS812WqUF3\nUiLe4uKqOsOHXhKhYwu8T0KesBuRKjxO0tvP9MbpIbR3YeomDY1TQNh0WlJr/28i\nmLXT5wMYGhNNMGD32ExqdYfGrPOvyFRD0ZE+B6j8fQzlAdcZr3WqSfa9sePunhzd\n3mzXLH7e/6SIDI/C2ljx9I+wt9UZARaoXbxy0aybcxb9vLUbIU0Mg3hhHL3rM2SF\n+0GBu8k0bAEbsjbmBojsaDvq+Ct2F70NPGGWJaIEj2/XzdBPJyUT6scfwnkPsHEp\nup1qsorgW7s4AmEPLQSbMvoC5rBC+2xGlGuApEeU2rI5JmH9mTzhzczoFGjmYiZ2\nHLFKv4LsqxSxwImwl61Uie920vFdg5dDtECdQ5VYTwmK6on+yqfYesqo27a8JCr4\ns1sEju2EJife1UNho0xpVI0QvgrVS2zb3jMqo9g4hfjEHCUc9+VDjl5y/KTrfnGy\n4VbASiwFp8GZp7JfySliH1AXkazRIjDidr2l4HCk5OonLLL5hoe1QMjInPj+VYYE\nF/66RzL7lgV+rEd48z9INC0xb7fJkyzYrlDMWJIKbPVuW2Q832bAnsDFYcUR5iEq\nl+GGdbLRUTcwqfcGJE8jt1UR4c964ZW2r7vB3gKs/AEO57MlR3w=\n=CZXF\n-----END PGP SIGNATURE-----", "payload": "tree 4904d4002e4cdb0aa06862af8e770dab23a35fb8\nparent c934ce9e0a267340920a8bef96d7c59a46910c55\nauthor Ezra Shaw <ezrasure@outlook.com> 1680834775 +1200\ncommitter Ezra Shaw <ezrasure@outlook.com> 1680834775 +1200\n\nfix: ensure bad `#[test]` invocs retain correct AST\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e7a99662f710c57b6166418f1c3ac496269c96", "html_url": "https://github.com/rust-lang/rust/commit/f4e7a99662f710c57b6166418f1c3ac496269c96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4e7a99662f710c57b6166418f1c3ac496269c96/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c934ce9e0a267340920a8bef96d7c59a46910c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/c934ce9e0a267340920a8bef96d7c59a46910c55", "html_url": "https://github.com/rust-lang/rust/commit/c934ce9e0a267340920a8bef96d7c59a46910c55"}], "stats": {"total": 151, "additions": 97, "deletions": 54}, "files": [{"sha": "9a50999faa0d25294a58337647fa0b13505e192a", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f4e7a99662f710c57b6166418f1c3ac496269c96/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e7a99662f710c57b6166418f1c3ac496269c96/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=f4e7a99662f710c57b6166418f1c3ac496269c96", "patch": "@@ -107,6 +107,36 @@ pub fn expand_test_or_bench(\n         return vec![];\n     }\n \n+    let not_testable_error = |item: Option<&ast::Item>| {\n+        let diag = &cx.sess.parse_sess.span_diagnostic;\n+        let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n+        let mut err = match item.map(|i| &i.kind) {\n+            // These were a warning before #92959 and need to continue being that to avoid breaking\n+            // stable user code (#94508).\n+            Some(ast::ItemKind::MacCall(_)) => diag.struct_span_warn(attr_sp, msg),\n+            // `.forget_guarantee()` needed to get these two arms to match types. Because of how\n+            // locally close the `.emit()` call is I'm comfortable with it, but if it can be\n+            // reworked in the future to not need it, it'd be nice.\n+            _ => diag.struct_span_err(attr_sp, msg).forget_guarantee(),\n+        };\n+        if let Some(item) = item {\n+            err.span_label(\n+                item.span,\n+                format!(\n+                    \"expected a non-associated function, found {} {}\",\n+                    item.kind.article(),\n+                    item.kind.descr()\n+                ),\n+            );\n+        }\n+        err.span_label(attr_sp, \"the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\")\n+            .span_suggestion(attr_sp,\n+                \"replace with conditional compilation to make the item only exist when tests are being run\",\n+                \"#[cfg(test)]\",\n+                Applicability::MaybeIncorrect)\n+            .emit();\n+    };\n+\n     let (item, is_stmt) = match item {\n         Annotatable::Item(i) => (i, false),\n         Annotatable::Stmt(stmt) if matches!(stmt.kind, ast::StmtKind::Item(_)) => {\n@@ -118,34 +148,22 @@ pub fn expand_test_or_bench(\n             }\n         }\n         other => {\n-            cx.struct_span_err(\n-                other.span(),\n-                \"`#[test]` attribute is only allowed on non associated functions\",\n-            )\n-            .emit();\n+            not_testable_error(None);\n             return vec![other];\n         }\n     };\n \n-    // Note: non-associated fn items are already handled by `expand_test_or_bench`\n     let ast::ItemKind::Fn(fn_) = &item.kind else {\n-        let diag = &cx.sess.parse_sess.span_diagnostic;\n-        let msg = \"the `#[test]` attribute may only be used on a non-associated function\";\n-        let mut err = match item.kind {\n-            // These were a warning before #92959 and need to continue being that to avoid breaking\n-            // stable user code (#94508).\n-            ast::ItemKind::MacCall(_) => diag.struct_span_warn(attr_sp, msg),\n-            // `.forget_guarantee()` needed to get these two arms to match types. Because of how\n-            // locally close the `.emit()` call is I'm comfortable with it, but if it can be\n-            // reworked in the future to not need it, it'd be nice.\n-            _ => diag.struct_span_err(attr_sp, msg).forget_guarantee(),\n+        not_testable_error(Some(&item));\n+        return if is_stmt {\n+            vec![Annotatable::Stmt(P(ast::Stmt {\n+                id: ast::DUMMY_NODE_ID,\n+                span: item.span,\n+                kind: ast::StmtKind::Item(item),\n+            }))]\n+        } else {\n+            vec![Annotatable::Item(item)]\n         };\n-        err.span_label(attr_sp, \"the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\")\n-            .span_label(item.span, format!(\"expected a non-associated function, found {} {}\", item.kind.article(), item.kind.descr()))\n-            .span_suggestion(attr_sp, \"replace with conditional compilation to make the item only exist when tests are being run\", \"#[cfg(test)]\", Applicability::MaybeIncorrect)\n-            .emit();\n-\n-        return vec![Annotatable::Item(item)];\n     };\n \n     // has_*_signature will report any errors in the type so compilation"}, {"sha": "21fe5bc53b7578b2e0eb521b8b4201d5674c8402", "filename": "tests/ui/test-attrs/issue-109816.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4e7a99662f710c57b6166418f1c3ac496269c96/tests%2Fui%2Ftest-attrs%2Fissue-109816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e7a99662f710c57b6166418f1c3ac496269c96/tests%2Fui%2Ftest-attrs%2Fissue-109816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Fissue-109816.rs?ref=f4e7a99662f710c57b6166418f1c3ac496269c96", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: --test\n+\n+fn align_offset_weird_strides() {\n+    #[test]\n+    //~^ ERROR the `#[test]` attribute may only be used on a non-associated function\n+    struct A5(u32, u8);\n+}"}, {"sha": "e6993287555569645afacc17730e1e2322a6c6f4", "filename": "tests/ui/test-attrs/issue-109816.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4e7a99662f710c57b6166418f1c3ac496269c96/tests%2Fui%2Ftest-attrs%2Fissue-109816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4e7a99662f710c57b6166418f1c3ac496269c96/tests%2Fui%2Ftest-attrs%2Fissue-109816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Fissue-109816.stderr?ref=f4e7a99662f710c57b6166418f1c3ac496269c96", "patch": "@@ -0,0 +1,16 @@\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/issue-109816.rs:4:5\n+   |\n+LL |     #[test]\n+   |     ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n+LL |\n+LL |     struct A5(u32, u8);\n+   |     ------------------- expected a non-associated function, found a struct\n+   |\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL |     #[cfg(test)]\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "2481919b616eda82d7d29752a681b0b8f8d8f22e", "filename": "tests/ui/test-attrs/test-attr-non-associated-functions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4e7a99662f710c57b6166418f1c3ac496269c96/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e7a99662f710c57b6166418f1c3ac496269c96/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.rs?ref=f4e7a99662f710c57b6166418f1c3ac496269c96", "patch": "@@ -1,18 +1,16 @@\n-// #[test] attribute is not allowed on associated functions or methods\n-// reworded error message\n // compile-flags:--test\n \n struct A {}\n \n impl A {\n     #[test]\n+    //~^ ERROR the `#[test]` attribute may only be used on a non-associated function\n     fn new() -> A {\n-        //~^ ERROR `#[test]` attribute is only allowed on non associated functions\n         A {}\n     }\n     #[test]\n+    //~^ ERROR the `#[test]` attribute may only be used on a non-associated function\n     fn recovery_witness() -> A {\n-        //~^ ERROR `#[test]` attribute is only allowed on non associated functions\n         A {}\n     }\n }"}, {"sha": "3e3a951aff3e985575ffeb7f80ffad661086ee5c", "filename": "tests/ui/test-attrs/test-attr-non-associated-functions.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f4e7a99662f710c57b6166418f1c3ac496269c96/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4e7a99662f710c57b6166418f1c3ac496269c96/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftest-attr-non-associated-functions.stderr?ref=f4e7a99662f710c57b6166418f1c3ac496269c96", "patch": "@@ -1,20 +1,24 @@\n-error: `#[test]` attribute is only allowed on non associated functions\n-  --> $DIR/test-attr-non-associated-functions.rs:9:5\n-   |\n-LL | /     fn new() -> A {\n-LL | |\n-LL | |         A {}\n-LL | |     }\n-   | |_____^\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-attr-non-associated-functions.rs:6:5\n+   |\n+LL |     #[test]\n+   |     ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n+   |\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL |     #[cfg(test)]\n+   |\n \n-error: `#[test]` attribute is only allowed on non associated functions\n-  --> $DIR/test-attr-non-associated-functions.rs:14:5\n-   |\n-LL | /     fn recovery_witness() -> A {\n-LL | |\n-LL | |         A {}\n-LL | |     }\n-   | |_____^\n+error: the `#[test]` attribute may only be used on a non-associated function\n+  --> $DIR/test-attr-non-associated-functions.rs:11:5\n+   |\n+LL |     #[test]\n+   |     ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n+   |\n+help: replace with conditional compilation to make the item only exist when tests are being run\n+   |\n+LL |     #[cfg(test)]\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7a9913fbcfa11ad46bcb8b923d6809a7b6191999", "filename": "tests/ui/test-attrs/test-on-not-fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f4e7a99662f710c57b6166418f1c3ac496269c96/tests%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4e7a99662f710c57b6166418f1c3ac496269c96/tests%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftest-attrs%2Ftest-on-not-fn.stderr?ref=f4e7a99662f710c57b6166418f1c3ac496269c96", "patch": "@@ -2,7 +2,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:3:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | mod test {}\n    | ----------- expected a non-associated function, found a module\n    |\n@@ -15,7 +15,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:6:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | / mod loooooooooooooong_teeeeeeeeeest {\n LL | |     /*\n LL | |     this is a comment\n@@ -34,7 +34,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:20:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | extern \"C\" {}\n    | ------------- expected a non-associated function, found an extern block\n    |\n@@ -47,7 +47,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:23:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | trait Foo {}\n    | ------------ expected a non-associated function, found a trait\n    |\n@@ -60,7 +60,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:26:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | impl Foo for i32 {}\n    | ------------------- expected a non-associated function, found an implementation\n    |\n@@ -73,7 +73,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:29:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | const FOO: i32 = -1_i32;\n    | ------------------------ expected a non-associated function, found a constant item\n    |\n@@ -86,7 +86,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:32:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | static BAR: u64 = 10_000_u64;\n    | ----------------------------- expected a non-associated function, found a static item\n    |\n@@ -99,7 +99,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:35:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | / enum MyUnit {\n LL | |     Unit,\n LL | | }\n@@ -114,7 +114,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:40:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | struct NewI32(i32);\n    | ------------------- expected a non-associated function, found a struct\n    |\n@@ -127,7 +127,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:43:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | / union Spooky {\n LL | |     x: i32,\n LL | |     y: u32,\n@@ -143,7 +143,7 @@ error: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:50:1\n    |\n LL |   #[test]\n-   |   ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   |   ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL |   #[derive(Copy, Clone, Debug)]\n LL | / struct MoreAttrs {\n LL | |     a: i32,\n@@ -160,7 +160,7 @@ warning: the `#[test]` attribute may only be used on a non-associated function\n   --> $DIR/test-on-not-fn.rs:61:1\n    |\n LL | #[test]\n-   | ^^^^^^^ the `#[test]` macro causes a function to be run on a test and has no effect on non-functions\n+   | ^^^^^^^ the `#[test]` macro causes a function to be run as a test and has no effect on non-functions\n LL | foo!();\n    | ------- expected a non-associated function, found an item macro invocation\n    |"}]}