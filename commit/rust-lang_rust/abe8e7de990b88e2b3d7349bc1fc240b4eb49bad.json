{"sha": "abe8e7de990b88e2b3d7349bc1fc240b4eb49bad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZThlN2RlOTkwYjg4ZTJiM2Q3MzQ5YmMxZmMyNDBiNGViNDliYWQ=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-09T21:13:37Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-10T22:53:01Z"}, "message": "Add tests for chain expressions", "tree": {"sha": "12737f9e45f8596e526c846b3a4c924b20370b7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12737f9e45f8596e526c846b3a4c924b20370b7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad", "html_url": "https://github.com/rust-lang/rust/commit/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "749a9689be022f2737820a87fe09d930907435a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/749a9689be022f2737820a87fe09d930907435a5", "html_url": "https://github.com/rust-lang/rust/commit/749a9689be022f2737820a87fe09d930907435a5"}], "stats": {"total": 110, "additions": 78, "deletions": 32}, "files": [{"sha": "e5d2a43840bd7c10eb24a10643dbe3cfb59f5b2d", "filename": "src/chains.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=abe8e7de990b88e2b3d7349bc1fc240b4eb49bad", "patch": "@@ -34,8 +34,11 @@ pub fn rewrite_chain(orig_expr: &ast::Expr,\n     }\n \n     let parent_rewrite = try_opt!(expr.rewrite(context, width, offset));\n+    let total_width = rewrites.iter().fold(0, |a, b| a + b.len()) + parent_rewrite.len();\n+    let fits_single_line = total_width <= width && rewrites.iter().all(|s| !s.contains('\\n'));\n \n-    if rewrites.len() == 1 {\n+    if rewrites.len() == 1 && !fits_single_line &&\n+       (is_continuable(expr) || parent_rewrite.len() <= context.config.tab_spaces) {\n         let extra_offset = extra_offset(&parent_rewrite, offset);\n         let offset = offset + extra_offset;\n         let max_width = try_opt!(width.checked_sub(extra_offset));\n@@ -47,9 +50,7 @@ pub fn rewrite_chain(orig_expr: &ast::Expr,\n         return Some(format!(\"{}{}\", parent_rewrite, try_opt!(rerewrite)));\n     }\n \n-    let total_width = rewrites.iter().fold(0, |a, b| a + b.len()) + parent_rewrite.len();\n-\n-    let connector = if total_width <= width && rewrites.iter().all(|s| !s.contains('\\n')) {\n+    let connector = if fits_single_line {\n         String::new()\n     } else {\n         format!(\"\\n{}\", make_indent(indent))"}, {"sha": "290fc62e15ae1cdd3977454f937ba46bfdf846f6", "filename": "src/comment.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=abe8e7de990b88e2b3d7349bc1fc240b4eb49bad", "patch": "@@ -145,18 +145,6 @@ pub fn find_comment_end(s: &str) -> Option<usize> {\n     }\n }\n \n-#[test]\n-fn comment_end() {\n-    assert_eq!(Some(6), find_comment_end(\"// hi\\n\"));\n-    assert_eq!(Some(9), find_comment_end(\"/* sup */ \"));\n-    assert_eq!(Some(9), find_comment_end(\"/*/**/ */ \"));\n-    assert_eq!(Some(6), find_comment_end(\"/*/ */ weird!\"));\n-    assert_eq!(None, find_comment_end(\"/* hi /* test */\"));\n-    assert_eq!(None, find_comment_end(\"// hi /* test */\"));\n-    assert_eq!(Some(9), find_comment_end(\"// hi /*\\n.\"));\n-}\n-\n-\n /// Returns true if text contains any comment.\n pub fn contains_comment(text: &str) -> bool {\n     CharClasses::new(text.chars()).any(|(kind, _)| kind == CodeCharKind::Comment)\n@@ -173,21 +161,6 @@ pub fn uncommented(text: &str) -> String {\n         .collect()\n }\n \n-#[test]\n-fn test_uncommented() {\n-    assert_eq!(&uncommented(\"abc/*...*/\"), \"abc\");\n-    assert_eq!(&uncommented(\"// .... /* \\n../* /* *** / */ */a/* // */c\\n\"), \"..ac\\n\");\n-    assert_eq!(&uncommented(\"abc \\\" /* */\\\" qsdf\"), \"abc \\\" /* */\\\" qsdf\");\n-}\n-\n-#[test]\n-fn test_contains_comment() {\n-    assert_eq!(contains_comment(\"abc\"), false);\n-    assert_eq!(contains_comment(\"abc // qsdf\"), true);\n-    assert_eq!(contains_comment(\"abc /* kqsdf\"), true);\n-    assert_eq!(contains_comment(\"abc \\\" /* */\\\" qsdf\"), false);\n-}\n-\n struct CharClasses<T>\n     where T: Iterator,\n           T::Item: RichChar"}, {"sha": "7e4bda0671e77685d7436126624be419d2476455", "filename": "tests/source/chains.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad/tests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad/tests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains.rs?ref=abe8e7de990b88e2b3d7349bc1fc240b4eb49bad", "patch": "@@ -0,0 +1,33 @@\n+// Test chain formatting.\n+\n+fn main() {\n+    let a = b.c\n+             .d\n+             .1\n+             .foo(|x| x + 1);\n+\n+    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc\n+                       .ddddddddddddddddddddddddddd();\n+\n+    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc.ddddddddddddddddddddddddddd.eeeeeeee();\n+\n+    x()\n+        .y(|| match cond() { true => (), false => () });\n+\n+    loong_func()\n+        .quux(move || if true {\n+            1\n+        } else {\n+            2\n+        });\n+\n+    let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum = xxxxxxx\n+        .map(|x| x + 5)\n+        .map(|x| x / 2)\n+        .fold(0, |acc, x| acc + x);\n+\n+    aaaaaaaaaaaaaaaa.map(|x| {\n+                         x += 1;\n+                         x\n+                     }).filter(some_mod::some_filter)\n+}"}, {"sha": "fb877993daf74d380db0463f14a7c940adf1c15b", "filename": "tests/system.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=abe8e7de990b88e2b3d7349bc1fc240b4eb49bad", "patch": "@@ -121,7 +121,8 @@ pub fn idempotent_check(filename: String) -> Result<(), HashMap<String, Vec<Mism\n     // multithreaded rustfmt\n     thread::catch_panic(move || {\n         run(args, WriteMode::Return(HANDLE_RESULT), config);\n-    }).map_err(|any| *any.downcast().ok().expect(\"Downcast failed.\"))\n+    })\n+        .map_err(|any| *any.downcast().ok().expect(\"Downcast failed.\"))\n }\n \n "}, {"sha": "2ed91a2eb8e1c9b8cb5c66762d042648130efa90", "filename": "tests/target/chains.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe8e7de990b88e2b3d7349bc1fc240b4eb49bad/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=abe8e7de990b88e2b3d7349bc1fc240b4eb49bad", "patch": "@@ -0,0 +1,38 @@\n+// Test chain formatting.\n+\n+fn main() {\n+    let a = b.c.d.1.foo(|x| x + 1);\n+\n+    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc.ddddddddddddddddddddddddddd();\n+\n+    bbbbbbbbbbbbbbbbbbb.ccccccccccccccccccccccccccccccccccccc\n+        .ddddddddddddddddddddddddddd\n+        .eeeeeeee();\n+\n+    x().y(|| {\n+           match cond() {\n+               true => (),\n+               false => (),\n+           }\n+       });\n+\n+    loong_func()\n+        .quux(move || {\n+            if true {\n+                1\n+            } else {\n+                2\n+            }\n+        });\n+\n+    let suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuum = xxxxxxx.map(|x| x + 5)\n+                                                                       .map(|x| x / 2)\n+                                                                       .fold(0, |acc, x| acc + x);\n+\n+    aaaaaaaaaaaaaaaa\n+        .map(|x| {\n+            x += 1;\n+            x\n+        })\n+        .filter(some_mod::some_filter)\n+}"}]}