{"sha": "aaeae4c72e645af5435cc03d981c3e12dcb76658", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZWFlNGM3MmU2NDVhZjU0MzVjYzAzZDk4MWMzZTEyZGNiNzY2NTg=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2017-12-13T06:56:22Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2017-12-14T17:56:26Z"}, "message": "error for impl trait alias", "tree": {"sha": "e61b902d220b1cc23bec403e12785c14f2b4535e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e61b902d220b1cc23bec403e12785c14f2b4535e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaeae4c72e645af5435cc03d981c3e12dcb76658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaeae4c72e645af5435cc03d981c3e12dcb76658", "html_url": "https://github.com/rust-lang/rust/commit/aaeae4c72e645af5435cc03d981c3e12dcb76658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaeae4c72e645af5435cc03d981c3e12dcb76658/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435fe5b7946d99a4da0008938dee33d81329cef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/435fe5b7946d99a4da0008938dee33d81329cef9", "html_url": "https://github.com/rust-lang/rust/commit/435fe5b7946d99a4da0008938dee33d81329cef9"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "c42ac7aaa937ccb9cada59021906d262adbe67f1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aaeae4c72e645af5435cc03d981c3e12dcb76658/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaeae4c72e645af5435cc03d981c3e12dcb76658/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=aaeae4c72e645af5435cc03d981c3e12dcb76658", "patch": "@@ -390,12 +390,18 @@ impl PatternSource {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+enum AliasPossibility {\n+    No,\n+    Maybe,\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n enum PathSource<'a> {\n     // Type paths `Path`.\n     Type,\n     // Trait paths in bounds or impls.\n-    Trait,\n+    Trait(AliasPossibility),\n     // Expression paths `path`, with optional parent context.\n     Expr(Option<&'a Expr>),\n     // Paths in path patterns `Path`.\n@@ -415,7 +421,7 @@ enum PathSource<'a> {\n impl<'a> PathSource<'a> {\n     fn namespace(self) -> Namespace {\n         match self {\n-            PathSource::Type | PathSource::Trait | PathSource::Struct |\n+            PathSource::Type | PathSource::Trait(_) | PathSource::Struct |\n             PathSource::Visibility | PathSource::ImportPrefix => TypeNS,\n             PathSource::Expr(..) | PathSource::Pat | PathSource::TupleStruct => ValueNS,\n             PathSource::TraitItem(ns) => ns,\n@@ -427,23 +433,23 @@ impl<'a> PathSource<'a> {\n             PathSource::Visibility | PathSource::ImportPrefix => true,\n             PathSource::Type | PathSource::Expr(..) | PathSource::Pat |\n             PathSource::Struct | PathSource::TupleStruct |\n-            PathSource::Trait | PathSource::TraitItem(..) => false,\n+            PathSource::Trait(_) | PathSource::TraitItem(..) => false,\n         }\n     }\n \n     fn defer_to_typeck(self) -> bool {\n         match self {\n             PathSource::Type | PathSource::Expr(..) | PathSource::Pat |\n             PathSource::Struct | PathSource::TupleStruct => true,\n-            PathSource::Trait | PathSource::TraitItem(..) |\n+            PathSource::Trait(_) | PathSource::TraitItem(..) |\n             PathSource::Visibility | PathSource::ImportPrefix => false,\n         }\n     }\n \n     fn descr_expected(self) -> &'static str {\n         match self {\n             PathSource::Type => \"type\",\n-            PathSource::Trait => \"trait\",\n+            PathSource::Trait(_) => \"trait\",\n             PathSource::Pat => \"unit struct/variant or constant\",\n             PathSource::Struct => \"struct, variant or union type\",\n             PathSource::TupleStruct => \"tuple struct/variant\",\n@@ -472,7 +478,11 @@ impl<'a> PathSource<'a> {\n                 Def::TyForeign(..) => true,\n                 _ => false,\n             },\n-            PathSource::Trait => match def {\n+            PathSource::Trait(AliasPossibility::No) => match def {\n+                Def::Trait(..) => true,\n+                _ => false,\n+            },\n+            PathSource::Trait(AliasPossibility::Maybe) => match def {\n                 Def::Trait(..) => true,\n                 Def::TraitAlias(..) => true,\n                 _ => false,\n@@ -531,8 +541,8 @@ impl<'a> PathSource<'a> {\n         __diagnostic_used!(E0577);\n         __diagnostic_used!(E0578);\n         match (self, has_unexpected_resolution) {\n-            (PathSource::Trait, true) => \"E0404\",\n-            (PathSource::Trait, false) => \"E0405\",\n+            (PathSource::Trait(_), true) => \"E0404\",\n+            (PathSource::Trait(_), false) => \"E0405\",\n             (PathSource::Type, true) => \"E0573\",\n             (PathSource::Type, false) => \"E0412\",\n             (PathSource::Struct, true) => \"E0574\",\n@@ -694,7 +704,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                             tref: &'tcx ast::PolyTraitRef,\n                             m: &'tcx ast::TraitBoundModifier) {\n         self.smart_resolve_path(tref.trait_ref.ref_id, None,\n-                                &tref.trait_ref.path, PathSource::Trait);\n+                                &tref.trait_ref.path, PathSource::Trait(AliasPossibility::Maybe));\n         visit::walk_poly_trait_ref(self, tref, m);\n     }\n     fn visit_variant(&mut self,\n@@ -2095,7 +2105,7 @@ impl<'a> Resolver<'a> {\n                                                        &path,\n                                                        trait_ref.path.span,\n                                                        trait_ref.path.segments.last().unwrap().span,\n-                                                       PathSource::Trait)\n+                                                       PathSource::Trait(AliasPossibility::No))\n                 .base_def();\n             if def != Def::Err {\n                 new_id = Some(def.def_id());\n@@ -2647,7 +2657,7 @@ impl<'a> Resolver<'a> {\n                         err.span_label(span, format!(\"did you mean `{}!(...)`?\", path_str));\n                         return (err, candidates);\n                     }\n-                    (Def::TyAlias(..), PathSource::Trait) => {\n+                    (Def::TyAlias(..), PathSource::Trait(_)) => {\n                         err.span_label(span, \"type aliases cannot be used for traits\");\n                         return (err, candidates);\n                     }"}, {"sha": "7aca227a76c484b3af95ef7659614b23b4576d84", "filename": "src/test/compile-fail/trait-alias.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaeae4c72e645af5435cc03d981c3e12dcb76658/src%2Ftest%2Fcompile-fail%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaeae4c72e645af5435cc03d981c3e12dcb76658/src%2Ftest%2Fcompile-fail%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-alias.rs?ref=aaeae4c72e645af5435cc03d981c3e12dcb76658", "patch": "@@ -18,7 +18,9 @@ trait Alias2<T: Clone = ()> = Default;\n     //~^^^ERROR trait aliases are not yet fully implemented\n \n impl Alias1 { //~ERROR expected type, found trait alias\n-    fn foo() {}\n+}\n+\n+impl Alias1 for () { //~ERROR expected trait, found trait alias\n }\n \n fn main() {}"}]}