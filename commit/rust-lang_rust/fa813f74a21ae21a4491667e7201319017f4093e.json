{"sha": "fa813f74a21ae21a4491667e7201319017f4093e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhODEzZjc0YTIxYWUyMWE0NDkxNjY3ZTcyMDEzMTkwMTdmNDA5M2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-21T16:18:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-04T14:14:38Z"}, "message": "introduce `closure_env_ty` helper to compute ty of closure env arg\n\nPreviously the code was somewhat duplicated.", "tree": {"sha": "84035061494a544ab2894f571d9a06015e9aa329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84035061494a544ab2894f571d9a06015e9aa329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa813f74a21ae21a4491667e7201319017f4093e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa813f74a21ae21a4491667e7201319017f4093e", "html_url": "https://github.com/rust-lang/rust/commit/fa813f74a21ae21a4491667e7201319017f4093e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa813f74a21ae21a4491667e7201319017f4093e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f247add4144df0e1fd3951a1d5aa6451c8a8eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2", "html_url": "https://github.com/rust-lang/rust/commit/7f247add4144df0e1fd3951a1d5aa6451c8a8eb2"}], "stats": {"total": 73, "additions": 42, "deletions": 31}, "files": [{"sha": "afe999cede70d2d3e57b4b7ea2bae07d1d9ce976", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa813f74a21ae21a4491667e7201319017f4093e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa813f74a21ae21a4491667e7201319017f4093e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=fa813f74a21ae21a4491667e7201319017f4093e", "patch": "@@ -1921,6 +1921,12 @@ impl<'a, 'gcx, 'tcx> FieldDef {\n     }\n }\n \n+/// Represents the various closure traits in the Rust language. This\n+/// will determine the type of the environment (`self`, in the\n+/// desuaring) argument that the closure expects.\n+///\n+/// You can get the environment type of a closure using\n+/// `tcx.closure_env_ty()`.\n #[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum ClosureKind {\n     // Warning: Ordering is significant here! The ordering is chosen"}, {"sha": "e19bab46402bfc8957b5b8c0e643701cc6884635", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fa813f74a21ae21a4491667e7201319017f4093e/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa813f74a21ae21a4491667e7201319017f4093e/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=fa813f74a21ae21a4491667e7201319017f4093e", "patch": "@@ -634,6 +634,33 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         def_id\n     }\n \n+    /// Given the def-id and substs a closure, creates the type of\n+    /// `self` argument that the closure expects. For example, for a\n+    /// `Fn` closure, this would return a reference type `&T` where\n+    /// `T=closure_ty`.\n+    ///\n+    /// Returns `None` if this closure's kind has not yet been inferred.\n+    /// This should only be possible during type checking.\n+    ///\n+    /// Note that the return value is a late-bound region and hence\n+    /// wrapped in a binder.\n+    pub fn closure_env_ty(self,\n+                          closure_def_id: DefId,\n+                          closure_substs: ty::ClosureSubsts<'tcx>)\n+                          -> Option<ty::Binder<Ty<'tcx>>>\n+    {\n+        let closure_ty = self.mk_closure(closure_def_id, closure_substs);\n+        let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n+        let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self);\n+        let closure_kind = closure_kind_ty.to_opt_closure_kind()?;\n+        let env_ty = match closure_kind {\n+            ty::ClosureKind::Fn => self.mk_imm_ref(self.mk_region(env_region), closure_ty),\n+            ty::ClosureKind::FnMut => self.mk_mut_ref(self.mk_region(env_region), closure_ty),\n+            ty::ClosureKind::FnOnce => closure_ty,\n+        };\n+        Some(ty::Binder(env_ty))\n+    }\n+\n     /// Given the def-id of some item that has no type parameters, make\n     /// a suitable \"empty substs\" for it.\n     pub fn empty_substs_for_def_id(self, item_def_id: DefId) -> &'tcx ty::Substs<'tcx> {"}, {"sha": "d814b092c9d69159050611833d1d3971afb348f6", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fa813f74a21ae21a4491667e7201319017f4093e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa813f74a21ae21a4491667e7201319017f4093e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=fa813f74a21ae21a4491667e7201319017f4093e", "patch": "@@ -100,7 +100,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                     // HACK(eddyb) Avoid having RustCall on closures,\n                     // as it adds unnecessary (and wrong) auto-tupling.\n                     abi = Abi::Rust;\n-                    Some((closure_self_ty(tcx, id, body_id), None))\n+                    Some((liberated_closure_env_ty(tcx, id, body_id), None))\n                 }\n                 ty::TyGenerator(..) => {\n                     let gen_ty = tcx.body_tables(body_id).node_id_to_type(fn_hir_id);\n@@ -246,10 +246,10 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n ///////////////////////////////////////////////////////////////////////////\n // BuildMir -- walks a crate, looking for fn items and methods to build MIR from\n \n-pub fn closure_self_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                       closure_expr_id: ast::NodeId,\n-                                       body_id: hir::BodyId)\n-                                       -> Ty<'tcx> {\n+fn liberated_closure_env_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                            closure_expr_id: ast::NodeId,\n+                                            body_id: hir::BodyId)\n+                                            -> Ty<'tcx> {\n     let closure_expr_hir_id = tcx.hir.node_to_hir_id(closure_expr_id);\n     let closure_ty = tcx.body_tables(body_id).node_id_to_type(closure_expr_hir_id);\n \n@@ -258,24 +258,8 @@ pub fn closure_self_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         _ => bug!(\"closure expr does not have closure type: {:?}\", closure_ty)\n     };\n \n-    let region = ty::ReFree(ty::FreeRegion {\n-        scope: closure_def_id,\n-        bound_region: ty::BoundRegion::BrEnv,\n-    });\n-    let region = tcx.mk_region(region);\n-\n-    match closure_substs.closure_kind_ty(closure_def_id, tcx).to_opt_closure_kind().unwrap() {\n-        ty::ClosureKind::Fn =>\n-            tcx.mk_ref(region,\n-                       ty::TypeAndMut { ty: closure_ty,\n-                                        mutbl: hir::MutImmutable }),\n-        ty::ClosureKind::FnMut =>\n-            tcx.mk_ref(region,\n-                       ty::TypeAndMut { ty: closure_ty,\n-                                        mutbl: hir::MutMutable }),\n-        ty::ClosureKind::FnOnce =>\n-            closure_ty\n-    }\n+    let closure_env_ty = tcx.closure_env_ty(closure_def_id, closure_substs).unwrap();\n+    tcx.liberate_late_bound_regions(closure_def_id, &closure_env_ty)\n }\n \n struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {"}, {"sha": "405647af324d6709de5e6969b9c1714f0a9ea62f", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa813f74a21ae21a4491667e7201319017f4093e/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa813f74a21ae21a4491667e7201319017f4093e/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=fa813f74a21ae21a4491667e7201319017f4093e", "patch": "@@ -395,15 +395,9 @@ pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             let tcx = ccx.tcx();\n             let sig = tcx.fn_sig(def_id).subst(tcx, substs.substs);\n \n-            let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n-            let env_ty = match substs.closure_kind(def_id, tcx) {\n-                ty::ClosureKind::Fn => tcx.mk_imm_ref(tcx.mk_region(env_region), ty),\n-                ty::ClosureKind::FnMut => tcx.mk_mut_ref(tcx.mk_region(env_region), ty),\n-                ty::ClosureKind::FnOnce => ty,\n-            };\n-\n+            let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n             sig.map_bound(|sig| tcx.mk_fn_sig(\n-                iter::once(env_ty).chain(sig.inputs().iter().cloned()),\n+                iter::once(*env_ty.skip_binder()).chain(sig.inputs().iter().cloned()),\n                 sig.output(),\n                 sig.variadic,\n                 sig.unsafety,"}]}