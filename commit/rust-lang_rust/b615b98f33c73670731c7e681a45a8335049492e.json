{"sha": "b615b98f33c73670731c7e681a45a8335049492e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MTViOThmMzNjNzM2NzA3MzFjN2U2ODFhNDVhODMzNTA0OTQ5MmU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-03T20:15:27Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T10:58:32Z"}, "message": "continue mir pipeline", "tree": {"sha": "03c9dddef611f2a7e55968ea3d0d61349afe886b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c9dddef611f2a7e55968ea3d0d61349afe886b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b615b98f33c73670731c7e681a45a8335049492e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b615b98f33c73670731c7e681a45a8335049492e", "html_url": "https://github.com/rust-lang/rust/commit/b615b98f33c73670731c7e681a45a8335049492e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b615b98f33c73670731c7e681a45a8335049492e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "316128c38a1bb011e3b6a5301ffe47427b06c9aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/316128c38a1bb011e3b6a5301ffe47427b06c9aa", "html_url": "https://github.com/rust-lang/rust/commit/316128c38a1bb011e3b6a5301ffe47427b06c9aa"}], "stats": {"total": 109, "additions": 78, "deletions": 31}, "files": [{"sha": "5152e62f07201f33e122a769aa8905c80199aa83", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=b615b98f33c73670731c7e681a45a8335049492e", "patch": "@@ -891,7 +891,8 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n             mir::transform::check_unsafety::check_unsafety(tcx, def_id);\n \n             if tcx.hir().body_const_context(def_id).is_some() {\n-                tcx.ensure().mir_drops_elaborated_and_const_checked(def_id);\n+                tcx.ensure()\n+                    .mir_drops_elaborated_and_const_checked(ty::WithOptParam::dummy(def_id));\n             }\n         }\n     });"}, {"sha": "caf771803c0f440d96e2acdded05c17055fc359e", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=b615b98f33c73670731c7e681a45a8335049492e", "patch": "@@ -14,8 +14,27 @@ macro_rules! arena_types {\n             [] layouts: rustc_target::abi::Layout, rustc_target::abi::Layout;\n             // AdtDef are interned and compared by address\n             [] adt_def: rustc_middle::ty::AdtDef, rustc_middle::ty::AdtDef;\n+            [] steal_mir:\n+                rustc_middle::ty::steal::Steal<rustc_middle::mir::Body<$tcx>>,\n+                rustc_middle::ty::steal::Steal<rustc_middle::mir::Body<$tcx>>;\n             [] mir: rustc_middle::mir::Body<$tcx>, rustc_middle::mir::Body<$tcx>;\n+            [] steal_promoted:\n+                rustc_middle::ty::steal::Steal<\n+                    rustc_index::vec::IndexVec<\n+                        rustc_middle::mir::Promoted,\n+                        rustc_middle::mir::Body<$tcx>\n+                    >\n+                >,\n+                rustc_middle::ty::steal::Steal<\n+                    rustc_index::vec::IndexVec<\n+                        rustc_middle::mir::Promoted,\n+                        rustc_middle::mir::Body<$tcx>\n+                    >\n+                >;\n             [decode] tables: rustc_middle::ty::TypeckTables<$tcx>, rustc_middle::ty::TypeckTables<'_x>;\n+            [decode] borrowck_result:\n+                rustc_middle::mir::BorrowCheckResult<$tcx>,\n+                rustc_middle::mir::BorrowCheckResult<'_x>;\n             [] const_allocs: rustc_middle::mir::interpret::Allocation, rustc_middle::mir::interpret::Allocation;\n             // Required for the incremental on-disk cache\n             [few, decode] mir_keys: rustc_hir::def_id::DefIdSet, rustc_hir::def_id::DefIdSet;"}, {"sha": "bad2dc648594e722065424e71cb74d653b4f568e", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=b615b98f33c73670731c7e681a45a8335049492e", "patch": "@@ -211,33 +211,31 @@ rustc_queries! {\n \n         /// Fetch the MIR for a given `DefId` right after it's built - this includes\n         /// unreachable code.\n-        query mir_built(key: LocalDefId) -> Steal<mir::Body<'tcx>> {\n-            storage(ArenaCacheSelector<'tcx>)\n+        query mir_built(key: LocalDefId) -> &'tcx Steal<mir::Body<'tcx>> {\n             desc { |tcx| \"building MIR for `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n \n         /// Fetch the MIR for a given `DefId` up till the point where it is\n         /// ready for const qualification.\n         ///\n         /// See the README for the `mir` module for details.\n-        query mir_const(key: DefId) -> Steal<mir::Body<'tcx>> {\n-            desc { |tcx| \"processing MIR for `{}`\", tcx.def_path_str(key)  }\n-            storage(ArenaCacheSelector<'tcx>)\n+        query mir_const(key: DefId) -> &'tcx Steal<mir::Body<'tcx>> {\n+            desc { |tcx| \"processing MIR for `{}`\", tcx.def_path_str(key) }\n             no_hash\n         }\n \n-        query mir_drops_elaborated_and_const_checked(key: LocalDefId) -> Steal<mir::Body<'tcx>> {\n-            storage(ArenaCacheSelector<'tcx>)\n+        query mir_drops_elaborated_and_const_checked(\n+            key: ty::WithOptParam<LocalDefId>\n+        ) -> &'tcx Steal<mir::Body<'tcx>> {\n             no_hash\n-            desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+            desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n         }\n \n         query mir_validated(key: LocalDefId) ->\n             (\n-                Steal<mir::Body<'tcx>>,\n-                Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n+                &'tcx Steal<mir::Body<'tcx>>,\n+                &'tcx Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n             ) {\n-            storage(ArenaCacheSelector<'tcx>)\n             no_hash\n             desc { |tcx| \"processing `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n@@ -249,7 +247,10 @@ rustc_queries! {\n             cache_on_disk_if { key.is_local() }\n         }\n         query optimized_mir_of_const_arg(key: ty::WithOptParam<LocalDefId>) -> &'tcx mir::Body<'tcx> {\n-            desc { |tcx| \"optimizing MIR for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n+            desc {\n+                |tcx| \"optimizing MIR for the potential const argument `{}`\",\n+                tcx.def_path_str(key.did.to_def_id())\n+            }\n         }\n \n         /// Returns coverage summary info for a function, after executing the `InstrumentCoverage`\n@@ -599,7 +600,7 @@ rustc_queries! {\n     BorrowChecking {\n         /// Borrow-checks the function body. If this is a closure, returns\n         /// additional requirements that the closure's creator must verify.\n-        query mir_borrowck(key: LocalDefId) -> mir::BorrowCheckResult<'tcx> {\n+        query mir_borrowck(key: LocalDefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n             storage(ArenaCacheSelector<'tcx>)\n             desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if(tcx, opt_result) {"}, {"sha": "d2bad6e90dda2e7947e37385d66df221891343d1", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=b615b98f33c73670731c7e681a45a8335049492e", "patch": "@@ -980,15 +980,15 @@ pub struct GlobalCtxt<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> Steal<Body<'tcx>> {\n-        Steal::new(mir)\n+    pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {\n+        self.arena.alloc(Steal::new(mir))\n     }\n \n     pub fn alloc_steal_promoted(\n         self,\n         promoted: IndexVec<Promoted, Body<'tcx>>,\n-    ) -> Steal<IndexVec<Promoted, Body<'tcx>>> {\n-        Steal::new(promoted)\n+    ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {\n+        self.arena.alloc(Steal::new(promoted))\n     }\n \n     pub fn alloc_adt_def("}, {"sha": "e77dcb63f46677ed690aaf995d120a2471061899", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=b615b98f33c73670731c7e681a45a8335049492e", "patch": "@@ -90,7 +90,7 @@ pub fn provide(providers: &mut Providers) {\n     *providers = Providers { mir_borrowck, ..*providers };\n }\n \n-fn mir_borrowck(tcx: TyCtxt<'_>, def_id: LocalDefId) -> BorrowCheckResult<'_> {\n+fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx BorrowCheckResult<'tcx> {\n     let (input_body, promoted) = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id.to_def_id()));\n \n@@ -101,7 +101,7 @@ fn mir_borrowck(tcx: TyCtxt<'_>, def_id: LocalDefId) -> BorrowCheckResult<'_> {\n     });\n     debug!(\"mir_borrowck done\");\n \n-    opt_closure_req\n+    tcx.arena.alloc(opt_closure_req)\n }\n \n fn do_mir_borrowck<'a, 'tcx>("}, {"sha": "5e1376677a0a7f42c7633824de57f379383f8629", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b615b98f33c73670731c7e681a45a8335049492e", "patch": "@@ -411,7 +411,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match instance {\n             ty::InstanceDef::Item(def) => {\n                 if self.tcx.is_mir_available(def.did) {\n-                    Ok(self.tcx.optimized_mir(def.did))\n+                    if let Some(def) = def.as_local() {\n+                        Ok(self.tcx.optimized_mir_of_const_arg(def))\n+                    } else {\n+                        Ok(self.tcx.optimized_mir(def.did))\n+                    }\n                 } else {\n                     throw_unsup!(NoMirFor(def.did))\n                 }"}, {"sha": "25973462e4c6e6ae4fe15b7a16559b7f28e352e9", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=b615b98f33c73670731c7e681a45a8335049492e", "patch": "@@ -235,7 +235,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n }\n \n /// Make MIR ready for const evaluation. This is run on all MIR, not just on consts!\n-fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n+fn mir_const<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     let def_id = def_id.expect_local();\n \n     // Unsafety check uses the raw mir, so make sure it is run.\n@@ -267,7 +267,7 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n fn mir_validated(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n-) -> (Steal<Body<'tcx>>, Steal<IndexVec<Promoted, Body<'tcx>>>) {\n+) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n     // Ensure that we compute the `mir_const_qualif` for constants at\n     // this point, before we steal the mir-const result.\n     let _ = tcx.mir_const_qualif(def_id.to_def_id());\n@@ -305,17 +305,24 @@ fn mir_validated(\n \n fn mir_drops_elaborated_and_const_checked<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: LocalDefId,\n-) -> Steal<Body<'tcx>> {\n+    def: ty::WithOptParam<LocalDefId>,\n+) -> &'tcx Steal<Body<'tcx>> {\n+    if def.param_did.is_none() {\n+        if let param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n+            return tcx\n+                .mir_drops_elaborated_and_const_checked(ty::WithOptParam { param_did, ..def });\n+        }\n+    }\n+\n     // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n     // execute before we can steal.\n-    tcx.ensure().mir_borrowck(def_id);\n+    tcx.ensure().mir_borrowck(def.did);\n \n-    let (body, _) = tcx.mir_validated(def_id);\n+    let (body, _) = tcx.mir_validated(def.did);\n     let mut body = body.steal();\n \n-    run_post_borrowck_cleanup_passes(tcx, &mut body, def_id, None);\n-    check_consts::post_drop_elaboration::check_live_drops(tcx, def_id, &body);\n+    run_post_borrowck_cleanup_passes(tcx, &mut body, def.did, None);\n+    check_consts::post_drop_elaboration::check_live_drops(tcx, def.did, &body);\n     tcx.alloc_steal_mir(body)\n }\n \n@@ -458,7 +465,7 @@ fn inner_optimized_mir(tcx: TyCtxt<'_>, def: ty::WithOptParam<LocalDefId>) -> Bo\n         return shim::build_adt_ctor(tcx, def.did.to_def_id());\n     }\n \n-    let mut body = tcx.mir_drops_elaborated_and_const_checked(def.did).steal();\n+    let mut body = tcx.mir_drops_elaborated_and_const_checked(def).steal();\n     run_optimization_passes(tcx, &mut body, def.did, None);\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");"}, {"sha": "07d0f6ab8dd935851362476812eaaf92a0d60c9b", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b615b98f33c73670731c7e681a45a8335049492e/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=b615b98f33c73670731c7e681a45a8335049492e", "patch": "@@ -21,7 +21,7 @@ use rustc_target::spec::PanicStrategy;\n \n use super::lints;\n \n-crate fn mir_built(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::steal::Steal<Body<'_>> {\n+crate fn mir_built<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx ty::steal::Steal<Body<'tcx>> {\n     tcx.alloc_steal_mir(mir_build(tcx, def_id))\n }\n "}, {"sha": "846e2979f8439240f80c1eea9a2b3eb45f63f919", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-impl.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b615b98f33c73670731c7e681a45a8335049492e/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b615b98f33c73670731c7e681a45a8335049492e/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr?ref=b615b98f33c73670731c7e681a45a8335049492e", "patch": "@@ -30,6 +30,11 @@ note: ...which requires const-evaluating `<impl at $DIR/issue-24949-assoc-const-\n    |\n LL |     const BAR: u32 = IMPL_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires optimizing MIR for the potential const argument `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n+  --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n+   |\n+LL |     const BAR: u32 = IMPL_REF_BAR;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |"}, {"sha": "305d20c05c9a8883d47a0da0206f3bad70688e78", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait-default.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b615b98f33c73670731c7e681a45a8335049492e/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b615b98f33c73670731c7e681a45a8335049492e/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr?ref=b615b98f33c73670731c7e681a45a8335049492e", "patch": "@@ -30,6 +30,11 @@ note: ...which requires const-evaluating `FooDefault::BAR`...\n    |\n LL |     const BAR: u32 = DEFAULT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires optimizing MIR for the potential const argument `FooDefault::BAR`...\n+  --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n+   |\n+LL |     const BAR: u32 = DEFAULT_REF_BAR;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires optimizing MIR for `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |"}, {"sha": "7a4912aaa73ab8c33b6f9328c0c0db014f2cd911", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b615b98f33c73670731c7e681a45a8335049492e/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b615b98f33c73670731c7e681a45a8335049492e/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=b615b98f33c73670731c7e681a45a8335049492e", "patch": "@@ -30,6 +30,11 @@ note: ...which requires const-evaluating `<impl at $DIR/issue-24949-assoc-const-\n    |\n LL |     const BAR: u32 = TRAIT_REF_BAR;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires optimizing MIR for the potential const argument `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n+  --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n+   |\n+LL |     const BAR: u32 = TRAIT_REF_BAR;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires optimizing MIR for `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 13:2>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |"}]}