{"sha": "221d1a97e505d00fc1664c5b2d9041f8b78aa933", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMWQxYTk3ZTUwNWQwMGZjMTY2NGM1YjJkOTA0MWY4Yjc4YWE5MzM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-17T20:31:03Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-09-20T17:08:06Z"}, "message": "serialize: allow specifying the default behavior for specializations.", "tree": {"sha": "1e2f686fb89b143ca397f208a3f6c1be0a5d086f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e2f686fb89b143ca397f208a3f6c1be0a5d086f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/221d1a97e505d00fc1664c5b2d9041f8b78aa933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/221d1a97e505d00fc1664c5b2d9041f8b78aa933", "html_url": "https://github.com/rust-lang/rust/commit/221d1a97e505d00fc1664c5b2d9041f8b78aa933", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/221d1a97e505d00fc1664c5b2d9041f8b78aa933/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01d4891e2935cf24242e44b50dfa37efc28d28c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01d4891e2935cf24242e44b50dfa37efc28d28c", "html_url": "https://github.com/rust-lang/rust/commit/b01d4891e2935cf24242e44b50dfa37efc28d28c"}], "stats": {"total": 84, "additions": 57, "deletions": 27}, "files": [{"sha": "399243551d6518b14f7af6807e8d0b3edbf54e94", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/221d1a97e505d00fc1664c5b2d9041f8b78aa933/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221d1a97e505d00fc1664c5b2d9041f8b78aa933/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=221d1a97e505d00fc1664c5b2d9041f8b78aa933", "patch": "@@ -11,12 +11,12 @@\n use ty;\n \n use rustc_data_structures::indexed_vec::Idx;\n-use serialize;\n+use serialize::{self, Encoder, Decoder};\n \n use std::fmt;\n use std::u32;\n \n-#[derive(Clone, Copy, Eq, Ord, PartialOrd, PartialEq, RustcEncodable, Hash, Debug)]\n+#[derive(Clone, Copy, Eq, Ord, PartialOrd, PartialEq, Hash, Debug)]\n pub struct CrateNum(u32);\n \n impl Idx for CrateNum {\n@@ -59,7 +59,17 @@ impl fmt::Display for CrateNum {\n     }\n }\n \n-impl serialize::UseSpecializedDecodable for CrateNum {}\n+impl serialize::UseSpecializedEncodable for CrateNum {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_u32(self.0)\n+    }\n+}\n+\n+impl serialize::UseSpecializedDecodable for CrateNum {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<CrateNum, D::Error> {\n+        d.read_u32().map(CrateNum)\n+    }\n+}\n \n /// A DefIndex is an index into the hir-map for a crate, identifying a\n /// particular definition. It should really be considered an interned"}, {"sha": "9eb87fa2ed43c93b6714433eeab7eea030de18b0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/221d1a97e505d00fc1664c5b2d9041f8b78aa933/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221d1a97e505d00fc1664c5b2d9041f8b78aa933/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=221d1a97e505d00fc1664c5b2d9041f8b78aa933", "patch": "@@ -1470,8 +1470,8 @@ impl<'tcx, 'container> Hash for AdtDefData<'tcx, 'container> {\n     }\n }\n \n-impl<'tcx> Encodable for AdtDef<'tcx> {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+impl<'tcx> serialize::UseSpecializedEncodable for AdtDef<'tcx> {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         self.did.encode(s)\n     }\n }"}, {"sha": "6650a981884d8eaad31fd551d948c72161a7fead", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/221d1a97e505d00fc1664c5b2d9041f8b78aa933/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221d1a97e505d00fc1664c5b2d9041f8b78aa933/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=221d1a97e505d00fc1664c5b2d9041f8b78aa933", "patch": "@@ -691,42 +691,39 @@ impl<E> SpecializationError for E {\n /// Implement this trait on encoders, with `T` being the type\n /// you want to encode (employing `UseSpecializedEncodable`),\n /// using a strategy specific to the encoder.\n-/// Can also be implemented alongside `UseSpecializedEncodable`\n-/// to provide a default `specialized_encode` for encoders\n-/// which do not implement `SpecializedEncoder` themselves.\n-pub trait SpecializedEncoder<T: ?Sized>: Encoder {\n+pub trait SpecializedEncoder<T: ?Sized + UseSpecializedEncodable>: Encoder {\n     /// Encode the value in a manner specific to this encoder state.\n-    /// Defaults to returning an error (see `SpecializationError`).\n     fn specialized_encode(&mut self, value: &T) -> Result<(), Self::Error>;\n }\n \n-impl<E: Encoder, T: ?Sized> SpecializedEncoder<T> for E {\n-    default fn specialized_encode(&mut self, _: &T) -> Result<(), E::Error> {\n-        Err(E::Error::not_found::<E, T>(\"SpecializedEncoder\", \"specialized_encode\"))\n+impl<E: Encoder, T: ?Sized + UseSpecializedEncodable> SpecializedEncoder<T> for E {\n+    default fn specialized_encode(&mut self, value: &T) -> Result<(), E::Error> {\n+        value.default_encode(self)\n     }\n }\n \n /// Implement this trait on decoders, with `T` being the type\n /// you want to decode (employing `UseSpecializedDecodable`),\n /// using a strategy specific to the decoder.\n-/// Can also be implemented alongside `UseSpecializedDecodable`\n-/// to provide a default `specialized_decode` for decoders\n-/// which do not implement `SpecializedDecoder` themselves.\n-pub trait SpecializedDecoder<T>: Decoder {\n+pub trait SpecializedDecoder<T: UseSpecializedDecodable>: Decoder {\n     /// Decode a value in a manner specific to this decoder state.\n-    /// Defaults to returning an error (see `SpecializationError`).\n     fn specialized_decode(&mut self) -> Result<T, Self::Error>;\n }\n \n-impl<D: Decoder, T> SpecializedDecoder<T> for D {\n+impl<D: Decoder, T: UseSpecializedDecodable> SpecializedDecoder<T> for D {\n     default fn specialized_decode(&mut self) -> Result<T, D::Error> {\n-        Err(D::Error::not_found::<D, T>(\"SpecializedDecoder\", \"specialized_decode\"))\n+        T::default_decode(self)\n     }\n }\n \n /// Implement this trait on your type to get an `Encodable`\n /// implementation which goes through `SpecializedEncoder`.\n-pub trait UseSpecializedEncodable {}\n+pub trait UseSpecializedEncodable {\n+    /// Defaults to returning an error (see `SpecializationError`).\n+    fn default_encode<E: Encoder>(&self, _: &mut E) -> Result<(), E::Error> {\n+        Err(E::Error::not_found::<E, Self>(\"SpecializedEncoder\", \"specialized_encode\"))\n+    }\n+}\n \n impl<T: ?Sized + UseSpecializedEncodable> Encodable for T {\n     default fn encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> {\n@@ -736,7 +733,12 @@ impl<T: ?Sized + UseSpecializedEncodable> Encodable for T {\n \n /// Implement this trait on your type to get an `Decodable`\n /// implementation which goes through `SpecializedDecoder`.\n-pub trait UseSpecializedDecodable: Sized {}\n+pub trait UseSpecializedDecodable: Sized {\n+    /// Defaults to returning an error (see `SpecializationError`).\n+    fn default_decode<D: Decoder>(_: &mut D) -> Result<Self, D::Error> {\n+        Err(D::Error::not_found::<D, Self>(\"SpecializedDecoder\", \"specialized_decode\"))\n+    }\n+}\n \n impl<T: UseSpecializedDecodable> Decodable for T {\n     default fn decode<D: Decoder>(d: &mut D) -> Result<T, D::Error> {"}, {"sha": "c18b36161dfcf3a190d3c3e4b71324912d5828d8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/221d1a97e505d00fc1664c5b2d9041f8b78aa933/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221d1a97e505d00fc1664c5b2d9041f8b78aa933/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=221d1a97e505d00fc1664c5b2d9041f8b78aa933", "patch": "@@ -300,7 +300,7 @@ pub struct ParenthesizedParameterData {\n     pub output: Option<P<Ty>>,\n }\n \n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, RustcEncodable, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Hash, Debug)]\n pub struct NodeId(u32);\n \n impl NodeId {\n@@ -328,7 +328,17 @@ impl fmt::Display for NodeId {\n     }\n }\n \n-impl serialize::UseSpecializedDecodable for NodeId {}\n+impl serialize::UseSpecializedEncodable for NodeId {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_u32(self.0)\n+    }\n+}\n+\n+impl serialize::UseSpecializedDecodable for NodeId {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<NodeId, D::Error> {\n+        d.read_u32().map(NodeId)\n+    }\n+}\n \n /// Node id used to represent the root of the crate.\n pub const CRATE_NODE_ID: NodeId = NodeId(0);"}, {"sha": "8c8b4173fe588a3cd54211872a0bec8fc09b9d08", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/221d1a97e505d00fc1664c5b2d9041f8b78aa933/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221d1a97e505d00fc1664c5b2d9041f8b78aa933/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=221d1a97e505d00fc1664c5b2d9041f8b78aa933", "patch": "@@ -138,8 +138,8 @@ pub struct SpanLabel {\n     pub label: Option<String>,\n }\n \n-impl Encodable for Span {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+impl serialize::UseSpecializedEncodable for Span {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_struct(\"Span\", 2, |s| {\n             s.emit_struct_field(\"lo\", 0, |s| {\n                 self.lo.encode(s)\n@@ -152,7 +152,15 @@ impl Encodable for Span {\n     }\n }\n \n-impl serialize::UseSpecializedDecodable for Span {}\n+impl serialize::UseSpecializedDecodable for Span {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<Span, D::Error> {\n+        d.read_struct(\"Span\", 2, |d| {\n+            let lo = d.read_struct_field(\"lo\", 0, Decodable::decode)?;\n+            let hi = d.read_struct_field(\"hi\", 1, Decodable::decode)?;\n+            Ok(mk_sp(lo, hi))\n+        })\n+    }\n+}\n \n fn default_span_debug(span: Span, f: &mut fmt::Formatter) -> fmt::Result {\n     write!(f, \"Span {{ lo: {:?}, hi: {:?}, expn_id: {:?} }}\","}]}