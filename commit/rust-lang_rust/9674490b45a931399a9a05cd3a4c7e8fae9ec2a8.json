{"sha": "9674490b45a931399a9a05cd3a4c7e8fae9ec2a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NzQ0OTBiNDVhOTMxMzk5YTlhMDVjZDNhNGM3ZThmYWU5ZWMyYTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-13T13:31:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-13T13:31:55Z"}, "message": "Merge #7981\n\n7981: Allow applying De Morgan's law to multiple terms at once r=matklad a=shepmaster\n\n\n\nCo-authored-by: Jake Goulding <jake.goulding@gmail.com>", "tree": {"sha": "e4210267009ed7063b9860117693c4b3ac0932f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4210267009ed7063b9860117693c4b3ac0932f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9674490b45a931399a9a05cd3a4c7e8fae9ec2a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgTL7LCRBK7hj4Ov3rIwAAdHIIAIhrNY+7ZmFWEqnuXLtk7g2H\nhOQLcWTVeYsfZfV2ji3N4XfDq3biad2nM++5AGryeHCKPTfVltp9ScJQTa0a9hli\n+e5ofoXbTye0M2mFTtTbdSos5VfvFKW8AiFcZDQSS+uzXG2rZgiqNJJ6Ab/rQkeJ\n1WxuTjW1VCVf/65lHy7AwpFFevdQniKKNfwmO2ZG5suydS5kQADBLbhOcsa7WXL3\nkFdRalGvM0ImZYUdAPL79iLGNBJl0JH0B37SYeSTt+kq6qyqSwiSbc6bkND4CrKj\nLR/AWXB4DuEHwGKueI0zC79if75y6DzMXBE08GmJpB7sIBdG9yQ5OALT6gkRuIc=\n=lyIH\n-----END PGP SIGNATURE-----\n", "payload": "tree e4210267009ed7063b9860117693c4b3ac0932f7\nparent ceffcf8a11d0482e789cac6be1fd801a751ea10c\nparent 63155d66f5268799df4c0261a64c31536b9f8a55\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615642315 +0000\ncommitter GitHub <noreply@github.com> 1615642315 +0000\n\nMerge #7981\n\n7981: Allow applying De Morgan's law to multiple terms at once r=matklad a=shepmaster\n\n\n\nCo-authored-by: Jake Goulding <jake.goulding@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9674490b45a931399a9a05cd3a4c7e8fae9ec2a8", "html_url": "https://github.com/rust-lang/rust/commit/9674490b45a931399a9a05cd3a4c7e8fae9ec2a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9674490b45a931399a9a05cd3a4c7e8fae9ec2a8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceffcf8a11d0482e789cac6be1fd801a751ea10c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceffcf8a11d0482e789cac6be1fd801a751ea10c", "html_url": "https://github.com/rust-lang/rust/commit/ceffcf8a11d0482e789cac6be1fd801a751ea10c"}, {"sha": "63155d66f5268799df4c0261a64c31536b9f8a55", "url": "https://api.github.com/repos/rust-lang/rust/commits/63155d66f5268799df4c0261a64c31536b9f8a55", "html_url": "https://github.com/rust-lang/rust/commit/63155d66f5268799df4c0261a64c31536b9f8a55"}], "stats": {"total": 87, "additions": 76, "deletions": 11}, "files": [{"sha": "5c936a510b54a94dfd734237ddaf438580d60e11", "filename": "crates/ide_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 76, "deletions": 11, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/9674490b45a931399a9a05cd3a4c7e8fae9ec2a8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9674490b45a931399a9a05cd3a4c7e8fae9ec2a8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=9674490b45a931399a9a05cd3a4c7e8fae9ec2a8", "patch": "@@ -1,3 +1,5 @@\n+use std::collections::VecDeque;\n+\n use syntax::ast::{self, AstNode};\n \n use crate::{utils::invert_boolean_expression, AssistContext, AssistId, AssistKind, Assists};\n@@ -30,19 +32,52 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         return None;\n     }\n \n-    let lhs = expr.lhs()?;\n-    let lhs_range = lhs.syntax().text_range();\n-    let not_lhs = invert_boolean_expression(&ctx.sema, lhs);\n+    let mut expr = expr;\n+\n+    // Walk up the tree while we have the same binary operator\n+    while let Some(parent_expr) = expr.syntax().parent().and_then(ast::BinExpr::cast) {\n+        if let Some(parent_op) = expr.op_kind() {\n+            if parent_op == op {\n+                expr = parent_expr\n+            }\n+        }\n+    }\n+\n+    let mut expr_stack = vec![expr.clone()];\n+    let mut terms = Vec::new();\n+    let mut op_ranges = Vec::new();\n+\n+    // Find all the children with the same binary operator\n+    while let Some(expr) = expr_stack.pop() {\n+        let mut traverse_bin_expr_arm = |expr| {\n+            if let ast::Expr::BinExpr(bin_expr) = expr {\n+                if let Some(expr_op) = bin_expr.op_kind() {\n+                    if expr_op == op {\n+                        expr_stack.push(bin_expr);\n+                    } else {\n+                        terms.push(ast::Expr::BinExpr(bin_expr));\n+                    }\n+                } else {\n+                    terms.push(ast::Expr::BinExpr(bin_expr));\n+                }\n+            } else {\n+                terms.push(expr);\n+            }\n+        };\n \n-    let rhs = expr.rhs()?;\n-    let rhs_range = rhs.syntax().text_range();\n-    let not_rhs = invert_boolean_expression(&ctx.sema, rhs);\n+        op_ranges.extend(expr.op_token().map(|t| t.text_range()));\n+        traverse_bin_expr_arm(expr.lhs()?);\n+        traverse_bin_expr_arm(expr.rhs()?);\n+    }\n \n     acc.add(\n         AssistId(\"apply_demorgan\", AssistKind::RefactorRewrite),\n         \"Apply De Morgan's law\",\n         op_range,\n         |edit| {\n+            terms.sort_by_key(|t| t.syntax().text_range().start());\n+            let mut terms = VecDeque::from(terms);\n+\n             let paren_expr = expr.syntax().parent().and_then(|parent| ast::ParenExpr::cast(parent));\n \n             let neg_expr = paren_expr\n@@ -57,11 +92,18 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n                     }\n                 });\n \n-            edit.replace(op_range, opposite_op);\n+            for op_range in op_ranges {\n+                edit.replace(op_range, opposite_op);\n+            }\n \n             if let Some(paren_expr) = paren_expr {\n-                edit.replace(lhs_range, not_lhs.syntax().text());\n-                edit.replace(rhs_range, not_rhs.syntax().text());\n+                for term in terms {\n+                    let range = term.syntax().text_range();\n+                    let not_term = invert_boolean_expression(&ctx.sema, term);\n+\n+                    edit.replace(range, not_term.syntax().text());\n+                }\n+\n                 if let Some(neg_expr) = neg_expr {\n                     cov_mark::hit!(demorgan_double_negation);\n                     edit.replace(neg_expr.op_token().unwrap().text_range(), \"\");\n@@ -70,8 +112,25 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n                     edit.replace(paren_expr.l_paren_token().unwrap().text_range(), \"!(\");\n                 }\n             } else {\n-                edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n-                edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));\n+                if let Some(lhs) = terms.pop_front() {\n+                    let lhs_range = lhs.syntax().text_range();\n+                    let not_lhs = invert_boolean_expression(&ctx.sema, lhs);\n+\n+                    edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n+                }\n+\n+                if let Some(rhs) = terms.pop_back() {\n+                    let rhs_range = rhs.syntax().text_range();\n+                    let not_rhs = invert_boolean_expression(&ctx.sema, rhs);\n+\n+                    edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));\n+                }\n+\n+                for term in terms {\n+                    let term_range = term.syntax().text_range();\n+                    let not_term = invert_boolean_expression(&ctx.sema, term);\n+                    edit.replace(term_range, not_term.syntax().text());\n+                }\n             }\n         },\n     )\n@@ -179,6 +238,12 @@ fn f() {\n         check_assist(apply_demorgan, \"fn f() { x ||$0 x }\", \"fn f() { !(!x && !x) }\")\n     }\n \n+    #[test]\n+    fn demorgan_multiple_terms() {\n+        check_assist(apply_demorgan, \"fn f() { x ||$0 y || z }\", \"fn f() { !(!x && !y && !z) }\");\n+        check_assist(apply_demorgan, \"fn f() { x || y ||$0 z }\", \"fn f() { !(!x && !y && !z) }\");\n+    }\n+\n     #[test]\n     fn demorgan_doesnt_apply_with_cursor_not_on_op() {\n         check_assist_not_applicable(apply_demorgan, \"fn f() { $0 !x || !x }\")"}]}