{"sha": "33010ae7e60322a1f8b3db824c90fea79def5ae7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMDEwYWU3ZTYwMzIyYTFmOGIzZGI4MjRjOTBmZWE3OWRlZjVhZTc=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-07-16T05:30:23Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-07-16T05:30:23Z"}, "message": "UI Test Cleanup: Split out out_of_bounds_indexing\n\nThis moves the `out_of_bounds_indexing` lint tests to their own\ndirectory.", "tree": {"sha": "281b11d8f9d993fb5977c549672e95b40825fa57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/281b11d8f9d993fb5977c549672e95b40825fa57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33010ae7e60322a1f8b3db824c90fea79def5ae7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAl0tYSMQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5jRaD/47AGM8FDZH/QFCKqUJPusxs70zof2Ap3f1\n/QiIFs4jApL0gEZfL1uS/j7hJqm9+/CY0F1HmhIXMvjYzSB2o11ohjA+Xd1utWMX\nBMLrPttOPA5qOM5PoNn3RLtpJr+uM3F6YH+kZlBt+tYa+3XE2qpKAh76NNXWN5vp\nBJE7lGUmtSEhs4FAzRBZvQCCqpa63wFdEONFkE43z4EmDA7cWkr4grw+F7i2Gv5y\n7L8JSnZqy6vaol5xyygjbWx9E6vv3XuQuT0RurZwjxFn58bB+SHWRcomTirnLcPA\nEfVj1+kJwupjIFbV9JOSj/80Yrye/Xe/Px5aC1592KznOPt2PgwNnr23HfqPUfow\nqdgdM6xFtHD9olFmYI59h0vxIR2j3o38NYJHpG3RSDB3pzpz4zXAFp2uS7rd4c0Z\nv/uUsJzq2jFr3q2acNLaICnxGxw/Y+vMon4i+H8JTJgpRyREGhG2haFtqS4uf55C\nB0CxDX2VxtC8XG7WtN+HgDpPKn8iqu1QTxW+ehzx4Ji/WxEfr/04fZO0jeT5518v\nQV7GUvyShq56DFj2xw7ytA66sTBmDCiUJHgnXIz4tmPBUugiaGHCBDTuLpK1LcNr\nNb0sz1B/l0AHeKZ6fjhCifI/8iutIOJF96VjmJYZdTLKu8RuWv2a2M5p2moy++vZ\nqBTdV2Z//A==\n=Iba+\n-----END PGP SIGNATURE-----", "payload": "tree 281b11d8f9d993fb5977c549672e95b40825fa57\nparent a73bb33399fcf5684450a2088fc961cf9aa0285b\nauthor Philipp Hansch <dev@phansch.net> 1563255023 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1563255023 +0200\n\nUI Test Cleanup: Split out out_of_bounds_indexing\n\nThis moves the `out_of_bounds_indexing` lint tests to their own\ndirectory.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33010ae7e60322a1f8b3db824c90fea79def5ae7", "html_url": "https://github.com/rust-lang/rust/commit/33010ae7e60322a1f8b3db824c90fea79def5ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33010ae7e60322a1f8b3db824c90fea79def5ae7/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a73bb33399fcf5684450a2088fc961cf9aa0285b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a73bb33399fcf5684450a2088fc961cf9aa0285b", "html_url": "https://github.com/rust-lang/rust/commit/a73bb33399fcf5684450a2088fc961cf9aa0285b"}], "stats": {"total": 367, "additions": 209, "deletions": 158}, "files": [{"sha": "bce6606b06bc85ced198fcd658ce9af8f8baa0fe", "filename": "tests/ui/indexing_slicing.rs", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=33010ae7e60322a1f8b3db824c90fea79def5ae7", "patch": "@@ -1,5 +1,8 @@\n #![feature(plugin)]\n #![warn(clippy::indexing_slicing)]\n+\n+// We also check the out_of_bounds_indexing lint here, because it lints similar things and\n+// we want to avoid false positives.\n #![warn(clippy::out_of_bounds_indexing)]\n #![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n@@ -15,21 +18,10 @@ fn main() {\n     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n     x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n     x[1 << 3]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-    &x[..=4];\n-    &x[1..5];\n-    &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n-    &x[5..];\n-    &x[..5];\n-    &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n-    &x[0..=4];\n+    &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n     &x[0..][..3];\n     &x[1..][..5];\n \n-    &x[4..]; // Ok, should not produce stderr.\n-    &x[..4]; // Ok, should not produce stderr.\n-    &x[..]; // Ok, should not produce stderr.\n-    &x[1..]; // Ok, should not produce stderr.\n-    &x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>(); // Ok, should not produce stderr.\n     &x[0..].get(..3); // Ok, should not produce stderr.\n     x[0]; // Ok, should not produce stderr.\n     x[3]; // Ok, should not produce stderr.\n@@ -43,21 +35,6 @@ fn main() {\n \n     &y[..]; // Ok, should not produce stderr.\n \n-    let empty: [i8; 0] = [];\n-    empty[0]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-    &empty[1..5];\n-    &empty[0..=4];\n-    &empty[..=4];\n-    &empty[1..];\n-    &empty[..4];\n-    &empty[0..=0];\n-    &empty[..=0];\n-\n-    &empty[0..]; // Ok, should not produce stderr.\n-    &empty[0..0]; // Ok, should not produce stderr.\n-    &empty[..0]; // Ok, should not produce stderr.\n-    &empty[..]; // Ok, should not produce stderr.\n-\n     let v = vec![0; 5];\n     v[0];\n     v[10];\n@@ -79,9 +56,4 @@ fn main() {\n     x[M]; // Ok, should not produce stderr.\n     v[N];\n     v[M];\n-\n-    // issue 3102\n-    let num = 1;\n-    &x[num..10]; // should trigger out of bounds error\n-    &x[10..num]; // should trigger out of bounds error\n }"}, {"sha": "8d603070119ddf47186804ab832c067627502b3a", "filename": "tests/ui/indexing_slicing.stderr", "status": "modified", "additions": 30, "deletions": 126, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=33010ae7e60322a1f8b3db824c90fea79def5ae7", "patch": "@@ -1,31 +1,25 @@\n error: index out of bounds: the len is 4 but the index is 4\n-  --> $DIR/indexing_slicing.rs:16:5\n+  --> $DIR/indexing_slicing.rs:19:5\n    |\n LL |     x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n    |     ^^^^\n    |\n    = note: #[deny(const_err)] on by default\n \n error: index out of bounds: the len is 4 but the index is 8\n-  --> $DIR/indexing_slicing.rs:17:5\n+  --> $DIR/indexing_slicing.rs:20:5\n    |\n LL |     x[1 << 3]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n    |     ^^^^^^^^^\n \n-error: index out of bounds: the len is 0 but the index is 0\n-  --> $DIR/indexing_slicing.rs:47:5\n-   |\n-LL |     empty[0]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-   |     ^^^^^^^^\n-\n error: index out of bounds: the len is 4 but the index is 15\n-  --> $DIR/indexing_slicing.rs:78:5\n+  --> $DIR/indexing_slicing.rs:55:5\n    |\n LL |     x[N]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n    |     ^^^^\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:11:5\n+  --> $DIR/indexing_slicing.rs:14:5\n    |\n LL |     x[index];\n    |     ^^^^^^^^\n@@ -34,276 +28,186 @@ LL |     x[index];\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:12:6\n+  --> $DIR/indexing_slicing.rs:15:6\n    |\n LL |     &x[index..];\n    |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:13:6\n+  --> $DIR/indexing_slicing.rs:16:6\n    |\n LL |     &x[..index];\n    |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:14:6\n+  --> $DIR/indexing_slicing.rs:17:6\n    |\n LL |     &x[index_from..index_to];\n    |      ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:15:6\n+  --> $DIR/indexing_slicing.rs:18:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:15:6\n+  --> $DIR/indexing_slicing.rs:18:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n    |      ^^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:18:11\n-   |\n-LL |     &x[..=4];\n-   |           ^\n-   |\n-   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:19:11\n-   |\n-LL |     &x[1..5];\n-   |           ^\n-\n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:20:6\n+  --> $DIR/indexing_slicing.rs:21:6\n    |\n-LL |     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n+LL |     &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n    |      ^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:20:8\n-   |\n-LL |     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n-   |        ^\n-\n error: range is out of bounds\n   --> $DIR/indexing_slicing.rs:21:8\n    |\n-LL |     &x[5..];\n+LL |     &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n    |        ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:22:10\n-   |\n-LL |     &x[..5];\n-   |          ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:23:8\n    |\n-LL |     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n-   |        ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:24:12\n-   |\n-LL |     &x[0..=4];\n-   |            ^\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:25:6\n+  --> $DIR/indexing_slicing.rs:22:6\n    |\n LL |     &x[0..][..3];\n    |      ^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:26:6\n+  --> $DIR/indexing_slicing.rs:23:6\n    |\n LL |     &x[1..][..5];\n    |      ^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:39:5\n+  --> $DIR/indexing_slicing.rs:31:5\n    |\n LL |     y[0];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:40:6\n+  --> $DIR/indexing_slicing.rs:32:6\n    |\n LL |     &y[1..2];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:41:6\n+  --> $DIR/indexing_slicing.rs:33:6\n    |\n LL |     &y[0..=4];\n    |      ^^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:42:6\n+  --> $DIR/indexing_slicing.rs:34:6\n    |\n LL |     &y[..=4];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:48:12\n-   |\n-LL |     &empty[1..5];\n-   |            ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:49:16\n-   |\n-LL |     &empty[0..=4];\n-   |                ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:50:15\n-   |\n-LL |     &empty[..=4];\n-   |               ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:51:12\n-   |\n-LL |     &empty[1..];\n-   |            ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:52:14\n-   |\n-LL |     &empty[..4];\n-   |              ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:53:16\n-   |\n-LL |     &empty[0..=0];\n-   |                ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:54:15\n-   |\n-LL |     &empty[..=0];\n-   |               ^\n-\n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:62:5\n+  --> $DIR/indexing_slicing.rs:39:5\n    |\n LL |     v[0];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:63:5\n+  --> $DIR/indexing_slicing.rs:40:5\n    |\n LL |     v[10];\n    |     ^^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:64:5\n+  --> $DIR/indexing_slicing.rs:41:5\n    |\n LL |     v[1 << 3];\n    |     ^^^^^^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:65:6\n+  --> $DIR/indexing_slicing.rs:42:6\n    |\n LL |     &v[10..100];\n    |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:66:6\n+  --> $DIR/indexing_slicing.rs:43:6\n    |\n LL |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n    |      ^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:66:8\n+  --> $DIR/indexing_slicing.rs:43:8\n    |\n LL |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n    |        ^^\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:67:6\n+  --> $DIR/indexing_slicing.rs:44:6\n    |\n LL |     &v[10..];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:68:6\n+  --> $DIR/indexing_slicing.rs:45:6\n    |\n LL |     &v[..100];\n    |      ^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:80:5\n+  --> $DIR/indexing_slicing.rs:57:5\n    |\n LL |     v[N];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:81:5\n+  --> $DIR/indexing_slicing.rs:58:5\n    |\n LL |     v[M];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:85:13\n-   |\n-LL |     &x[num..10]; // should trigger out of bounds error\n-   |             ^^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:86:8\n-   |\n-LL |     &x[10..num]; // should trigger out of bounds error\n-   |        ^^\n-\n-error: aborting due to 43 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "b980a1bec7451ff725cf483b7ca388ea7542826a", "filename": "tests/ui/out_of_bounds_indexing/empty_array.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.rs?ref=33010ae7e60322a1f8b3db824c90fea79def5ae7", "patch": "@@ -0,0 +1,19 @@\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+\n+fn main() {\n+    let empty: [i8; 0] = [];\n+    empty[0]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n+    &empty[1..5];\n+    &empty[0..=4];\n+    &empty[..=4];\n+    &empty[1..];\n+    &empty[..4];\n+    &empty[0..=0];\n+    &empty[..=0];\n+\n+    &empty[0..]; // Ok, should not produce stderr.\n+    &empty[0..0]; // Ok, should not produce stderr.\n+    &empty[..0]; // Ok, should not produce stderr.\n+    &empty[..]; // Ok, should not produce stderr.\n+}"}, {"sha": "f6fb03383d513ebbe502b76738a11da90c768d18", "filename": "tests/ui/out_of_bounds_indexing/empty_array.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr?ref=33010ae7e60322a1f8b3db824c90fea79def5ae7", "patch": "@@ -0,0 +1,54 @@\n+error: index out of bounds: the len is 0 but the index is 0\n+  --> $DIR/empty_array.rs:6:5\n+   |\n+LL |     empty[0]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n+   |     ^^^^^^^^\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:7:12\n+   |\n+LL |     &empty[1..5];\n+   |            ^\n+   |\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:8:16\n+   |\n+LL |     &empty[0..=4];\n+   |                ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:9:15\n+   |\n+LL |     &empty[..=4];\n+   |               ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:10:12\n+   |\n+LL |     &empty[1..];\n+   |            ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:11:14\n+   |\n+LL |     &empty[..4];\n+   |              ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:12:16\n+   |\n+LL |     &empty[0..=0];\n+   |                ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:13:15\n+   |\n+LL |     &empty[..=0];\n+   |               ^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "9883548ddf931a2aa707389f5eb2bf1d85f9c10f", "filename": "tests/ui/out_of_bounds_indexing/issue-3102.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs?ref=33010ae7e60322a1f8b3db824c90fea79def5ae7", "patch": "@@ -0,0 +1,10 @@\n+#![warn(clippy::out_of_bounds_indexing)]\n+\n+fn main() {\n+    let x = [1, 2, 3, 4];\n+\n+    // issue 3102\n+    let num = 1;\n+    &x[num..10]; // should trigger out of bounds error\n+    &x[10..num]; // should trigger out of bounds error\n+}"}, {"sha": "f55aeee395acaefe633fc12fb48b4323c020f8cb", "filename": "tests/ui/out_of_bounds_indexing/issue-3102.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.stderr?ref=33010ae7e60322a1f8b3db824c90fea79def5ae7", "patch": "@@ -0,0 +1,30 @@\n+error: statement with no effect\n+  --> $DIR/issue-3102.rs:8:5\n+   |\n+LL |     &x[num..10]; // should trigger out of bounds error\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::no-effect` implied by `-D warnings`\n+\n+error: range is out of bounds\n+  --> $DIR/issue-3102.rs:8:13\n+   |\n+LL |     &x[num..10]; // should trigger out of bounds error\n+   |             ^^\n+   |\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n+\n+error: statement with no effect\n+  --> $DIR/issue-3102.rs:9:5\n+   |\n+LL |     &x[10..num]; // should trigger out of bounds error\n+   |     ^^^^^^^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/issue-3102.rs:9:8\n+   |\n+LL |     &x[10..num]; // should trigger out of bounds error\n+   |        ^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "4c541c23f5f472608eba394c39f180ee3ea7892f", "filename": "tests/ui/out_of_bounds_indexing/simple.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs?ref=33010ae7e60322a1f8b3db824c90fea79def5ae7", "patch": "@@ -0,0 +1,22 @@\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+\n+fn main() {\n+    let x = [1, 2, 3, 4];\n+\n+    &x[..=4];\n+    &x[1..5];\n+    &x[5..];\n+    &x[..5];\n+    &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n+    &x[0..=4];\n+\n+    &x[4..]; // Ok, should not produce stderr.\n+    &x[..4]; // Ok, should not produce stderr.\n+    &x[..]; // Ok, should not produce stderr.\n+    &x[1..]; // Ok, should not produce stderr.\n+    &x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>(); // Ok, should not produce stderr.\n+\n+    &x[0..].get(..3); // Ok, should not produce stderr.\n+    &x[0..3]; // Ok, should not produce stderr.\n+}"}, {"sha": "3d95afcdab23397d94debef7f27842c149a6eb8f", "filename": "tests/ui/out_of_bounds_indexing/simple.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33010ae7e60322a1f8b3db824c90fea79def5ae7/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.stderr?ref=33010ae7e60322a1f8b3db824c90fea79def5ae7", "patch": "@@ -0,0 +1,40 @@\n+error: range is out of bounds\n+  --> $DIR/simple.rs:7:11\n+   |\n+LL |     &x[..=4];\n+   |           ^\n+   |\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:8:11\n+   |\n+LL |     &x[1..5];\n+   |           ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:9:8\n+   |\n+LL |     &x[5..];\n+   |        ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:10:10\n+   |\n+LL |     &x[..5];\n+   |          ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:11:8\n+   |\n+LL |     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n+   |        ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:12:12\n+   |\n+LL |     &x[0..=4];\n+   |            ^\n+\n+error: aborting due to 6 previous errors\n+"}]}