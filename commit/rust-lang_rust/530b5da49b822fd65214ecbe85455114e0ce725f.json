{"sha": "530b5da49b822fd65214ecbe85455114e0ce725f", "node_id": "C_kwDOAAsO6NoAKDUzMGI1ZGE0OWI4MjJmZDY1MjE0ZWNiZTg1NDU1MTE0ZTBjZTcyNWY", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-07-07T02:09:33Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-07-07T05:44:58Z"}, "message": "Also stop emitting BTI prologues for naked functions\n\nSame idea but for AArch64.", "tree": {"sha": "d1bf98704b729e071d6c0d34f367f5509b87b031", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1bf98704b729e071d6c0d34f367f5509b87b031"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/530b5da49b822fd65214ecbe85455114e0ce725f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/530b5da49b822fd65214ecbe85455114e0ce725f", "html_url": "https://github.com/rust-lang/rust/commit/530b5da49b822fd65214ecbe85455114e0ce725f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/530b5da49b822fd65214ecbe85455114e0ce725f/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92174f988b0cde631ffac0dbcc9f8fca413d566e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92174f988b0cde631ffac0dbcc9f8fca413d566e", "html_url": "https://github.com/rust-lang/rust/commit/92174f988b0cde631ffac0dbcc9f8fca413d566e"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "c51c8391fa5a49f994411ef252d5b8d749e76a54", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/530b5da49b822fd65214ecbe85455114e0ce725f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530b5da49b822fd65214ecbe85455114e0ce725f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=530b5da49b822fd65214ecbe85455114e0ce725f", "patch": "@@ -303,6 +303,8 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         // And it is a module-level attribute, so the alternative is pulling naked functions into new LLVM modules.\n         // Otherwise LLVM's \"naked\" functions come with endbr prefixes per https://github.com/rust-lang/rust/issues/98768\n         to_add.push(AttributeKind::NoCfCheck.create_attr(cx.llcx));\n+        // Need this for AArch64.\n+        to_add.push(llvm::CreateAttrStringValue(cx.llcx, \"branch-target-enforcement\", \"false\"));\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR) {\n         // apply to return place instead of function (unlike all other attributes applied in this function)"}, {"sha": "79b0bb2d7eead1ee88de7fc419d382d921c2f149", "filename": "src/test/assembly/aarch64-naked-fn-no-bti-prolog.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/530b5da49b822fd65214ecbe85455114e0ce725f/src%2Ftest%2Fassembly%2Faarch64-naked-fn-no-bti-prolog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530b5da49b822fd65214ecbe85455114e0ce725f/src%2Ftest%2Fassembly%2Faarch64-naked-fn-no-bti-prolog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Faarch64-naked-fn-no-bti-prolog.rs?ref=530b5da49b822fd65214ecbe85455114e0ce725f", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: -C no-prepopulate-passes -Zbranch-protection=bti\n+// assembly-output: emit-asm\n+// needs-asm-support\n+// only-aarch64\n+\n+#![crate_type = \"lib\"]\n+#![feature(naked_functions)]\n+use std::arch::asm;\n+\n+// The problem at hand: Rust has adopted a fairly strict meaning for \"naked functions\",\n+// meaning \"no prologue whatsoever, no, really, not one instruction.\"\n+// Unfortunately, aarch64's \"branch target identification\" works via hints at landing sites.\n+// LLVM implements this via making sure of that, even for functions with the naked attribute.\n+// So, we must emit an appropriate instruction instead!\n+#[no_mangle]\n+#[naked]\n+pub unsafe extern \"C\" fn _hlt() -> ! {\n+    // CHECK-NOT: hint #34\n+    // CHECK: hlt #0x1\n+    asm!(\"hlt #1\", options(noreturn))\n+}"}]}