{"sha": "8e94b045087292574c53f6c9a1d8d624c4f3c66d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOTRiMDQ1MDg3MjkyNTc0YzUzZjZjOWExZDhkNjI0YzRmM2M2NmQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-17T02:01:16Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-18T16:42:31Z"}, "message": "rustdoc: Support short doc fallback for non-default items", "tree": {"sha": "9a450d07349757a30256c61c4b5f201ea8d4a7f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a450d07349757a30256c61c4b5f201ea8d4a7f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e94b045087292574c53f6c9a1d8d624c4f3c66d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e94b045087292574c53f6c9a1d8d624c4f3c66d", "html_url": "https://github.com/rust-lang/rust/commit/8e94b045087292574c53f6c9a1d8d624c4f3c66d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e94b045087292574c53f6c9a1d8d624c4f3c66d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e179769e096fe9d42729447dbe444ef2cf9a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e179769e096fe9d42729447dbe444ef2cf9a57", "html_url": "https://github.com/rust-lang/rust/commit/38e179769e096fe9d42729447dbe444ef2cf9a57"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "d12486d7e2911680fd97883b68018f9f524032fc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8e94b045087292574c53f6c9a1d8d624c4f3c66d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e94b045087292574c53f6c9a1d8d624c4f3c66d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8e94b045087292574c53f6c9a1d8d624c4f3c66d", "patch": "@@ -2565,8 +2565,9 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n     }\n \n     fn doctraititem(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item,\n-                    link: AssocItemLink, render_static: bool, is_default_item: bool,\n-                    outer_version: Option<&str>) -> fmt::Result {\n+                    link: AssocItemLink, render_static: bool,\n+                    is_default_item: bool, outer_version: Option<&str>,\n+                    trait_: Option<&clean::Trait>) -> fmt::Result {\n         let shortty = shortty(item);\n         let name = item.name.as_ref().unwrap();\n \n@@ -2618,16 +2619,33 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         }\n \n         if !is_default_item && (!is_static || render_static) {\n-            document(w, cx, item)\n+\n+            if item.doc_value().is_some() {\n+                document(w, cx, item)\n+            } else {\n+                // In case the item isn't documented,\n+                // provide short documentation from the trait\n+                if let Some(t) = trait_ {\n+                    if let Some(it) = t.items.iter()\n+                                       .find(|i| i.name == item.name) {\n+                        document_short(w, it, link)?;\n+                    }\n+                }\n+                Ok(())\n+            }\n         } else {\n             document_short(w, item, link)?;\n             Ok(())\n         }\n     }\n \n+    let traits = &cache().traits;\n+    let trait_ = i.trait_did().and_then(|did| traits.get(&did));\n+\n     write!(w, \"<div class='impl-items'>\")?;\n     for trait_item in &i.inner_impl().items {\n-        doctraititem(w, cx, trait_item, link, render_header, false, outer_version)?;\n+        doctraititem(w, cx, trait_item, link, render_header,\n+                     false, outer_version, trait_)?;\n     }\n \n     fn render_default_items(w: &mut fmt::Formatter,\n@@ -2645,17 +2663,15 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             let assoc_link = AssocItemLink::GotoSource(did, &i.provided_trait_methods);\n \n             doctraititem(w, cx, trait_item, assoc_link, render_static, true,\n-                         outer_version)?;\n+                         outer_version, None)?;\n         }\n         Ok(())\n     }\n \n     // If we've implemented a trait, then also emit documentation for all\n     // default items which weren't overridden in the implementation block.\n-    if let Some(did) = i.trait_did() {\n-        if let Some(t) = cache().traits.get(&did) {\n-            render_default_items(w, cx, t, &i.inner_impl(), render_header, outer_version)?;\n-        }\n+    if let Some(t) = trait_ {\n+        render_default_items(w, cx, t, &i.inner_impl(), render_header, outer_version)?;\n     }\n     write!(w, \"</div>\")?;\n     Ok(())"}]}