{"sha": "1246f0b09441d47cdf29d0d7852a1d1a87533756", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNDZmMGIwOTQ0MWQ0N2NkZjI5ZDBkNzg1MmExZDFhODc1MzM3NTY=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-01-12T23:32:50Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-01-12T23:32:50Z"}, "message": "Remove RealExt\n\nThese functions are of little utility outside a small subset of use cases. If people need them for their own projects then they can use their own bindings for libm (which aren't hard to make).", "tree": {"sha": "72f0f54f98ad850ecb4b1af4e0b268817aab4576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f0f54f98ad850ecb4b1af4e0b268817aab4576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1246f0b09441d47cdf29d0d7852a1d1a87533756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1246f0b09441d47cdf29d0d7852a1d1a87533756", "html_url": "https://github.com/rust-lang/rust/commit/1246f0b09441d47cdf29d0d7852a1d1a87533756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1246f0b09441d47cdf29d0d7852a1d1a87533756/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0091a15a43db8d742f960837def2058550e8156c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0091a15a43db8d742f960837def2058550e8156c", "html_url": "https://github.com/rust-lang/rust/commit/0091a15a43db8d742f960837def2058550e8156c"}], "stats": {"total": 50, "additions": 1, "deletions": 49}, "files": [{"sha": "1ab76a97b62486e187f5d52f007a4626fa6108b3", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1246f0b09441d47cdf29d0d7852a1d1a87533756/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1246f0b09441d47cdf29d0d7852a1d1a87533756/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=1246f0b09441d47cdf29d0d7852a1d1a87533756", "patch": "@@ -18,7 +18,7 @@ use cmath::c_double_utils;\n use default::Default;\n use libc::{c_double, c_int};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n-use num::{Zero, One, RealExt, strconv};\n+use num::{Zero, One, strconv};\n use num;\n use to_str;\n use unstable::intrinsics;\n@@ -560,36 +560,6 @@ impl Real for f64 {\n     }\n }\n \n-impl RealExt for f64 {\n-    #[inline]\n-    fn lgamma(&self) -> (int, f64) {\n-        let mut sign = 0;\n-        let result = lgamma(*self, &mut sign);\n-        (sign as int, result)\n-    }\n-\n-    #[inline]\n-    fn tgamma(&self) -> f64 { tgamma(*self) }\n-\n-    #[inline]\n-    fn j0(&self) -> f64 { j0(*self) }\n-\n-    #[inline]\n-    fn j1(&self) -> f64 { j1(*self) }\n-\n-    #[inline]\n-    fn jn(&self, n: int) -> f64 { jn(n as c_int, *self) }\n-\n-    #[inline]\n-    fn y0(&self) -> f64 { y0(*self) }\n-\n-    #[inline]\n-    fn y1(&self) -> f64 { y1(*self) }\n-\n-    #[inline]\n-    fn yn(&self, n: int) -> f64 { yn(n as c_int, *self) }\n-}\n-\n impl Bounded for f64 {\n     #[inline]\n     fn min_value() -> f64 { 2.2250738585072014e-308 }"}, {"sha": "2bf3158e6b4355c866bb06b0c3201945a9eb1d7e", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1246f0b09441d47cdf29d0d7852a1d1a87533756/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1246f0b09441d47cdf29d0d7852a1d1a87533756/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=1246f0b09441d47cdf29d0d7852a1d1a87533756", "patch": "@@ -324,24 +324,6 @@ pub trait Real: Signed\n /// Inverse hyperbolic tangent function.\n #[inline(always)] pub fn atanh<T: Real>(value: T) -> T { value.atanh() }\n \n-/// Methods that are harder to implement and not commonly used.\n-pub trait RealExt: Real {\n-    // FIXME (#5527): usages of `int` should be replaced with an associated\n-    // integer type once these are implemented\n-\n-    // Gamma functions\n-    fn lgamma(&self) -> (int, Self);\n-    fn tgamma(&self) -> Self;\n-\n-    // Bessel functions\n-    fn j0(&self) -> Self;\n-    fn j1(&self) -> Self;\n-    fn jn(&self, n: int) -> Self;\n-    fn y0(&self) -> Self;\n-    fn y1(&self) -> Self;\n-    fn yn(&self, n: int) -> Self;\n-}\n-\n /// Collects the bitwise operators under one trait.\n pub trait Bitwise: Not<Self>\n                  + BitAnd<Self,Self>"}]}