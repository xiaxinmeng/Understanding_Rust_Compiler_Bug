{"sha": "2774d4833709919812c9414c6ea642d42465f208", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NzRkNDgzMzcwOTkxOTgxMmM5NDE0YzZlYTY0MmQ0MjQ2NWYyMDg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-29T01:16:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-29T01:16:18Z"}, "message": "Rollup merge of #69504 - MichaelMcDonnell:hash_assert_ne, r=LukasKalbertodt\n\nUse assert_ne in hash tests\n\nThe hash tests were written before the assert_ne macro was added to the standard library. The assert_ne macro provides better output in case of a failure.", "tree": {"sha": "46ed0b00905f3944da343e7ed9bc838e8f123fcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ed0b00905f3944da343e7ed9bc838e8f123fcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2774d4833709919812c9414c6ea642d42465f208", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWbtiCRBK7hj4Ov3rIwAAdHIIAI//QqIj2CBT7VTBwCoe37ka\nmsCylqdXG4OWkUjc0FUSI09XPLgHRa2TYncyhSmRBfHCPDtkgWeSgDLnD50HDhFY\n4bSibVwSOgU6xm0178+GoBzXBgF+h/zLcrhOoEaOwL1nPTA0Rssj0KTXoYtR6Mvb\nTmsVEe86XyUIBnKqhfNS0a2VgrFrDO1akpXFdsozYX8mhhs3rIIqkLNnN8oLa7mt\ngVDoGFHgKHsH6bs/qPIHWv+e+gW4mIWQL3x4LsFsyvhzAaLuevTDSKvTumQZxUSg\nR0KkpK9UH4bXKxmK69/YZwcEV1ietJaPEegWu+M6S/C3MagqdIp7vezHZuCn+Rs=\n=Gia+\n-----END PGP SIGNATURE-----\n", "payload": "tree 46ed0b00905f3944da343e7ed9bc838e8f123fcf\nparent 222aa620087935fcad282ddd1161831b4037d41f\nparent 290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582938978 +0100\ncommitter GitHub <noreply@github.com> 1582938978 +0100\n\nRollup merge of #69504 - MichaelMcDonnell:hash_assert_ne, r=LukasKalbertodt\n\nUse assert_ne in hash tests\n\nThe hash tests were written before the assert_ne macro was added to the standard library. The assert_ne macro provides better output in case of a failure.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2774d4833709919812c9414c6ea642d42465f208", "html_url": "https://github.com/rust-lang/rust/commit/2774d4833709919812c9414c6ea642d42465f208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2774d4833709919812c9414c6ea642d42465f208/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222aa620087935fcad282ddd1161831b4037d41f", "url": "https://api.github.com/repos/rust-lang/rust/commits/222aa620087935fcad282ddd1161831b4037d41f", "html_url": "https://github.com/rust-lang/rust/commit/222aa620087935fcad282ddd1161831b4037d41f"}, {"sha": "290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c", "url": "https://api.github.com/repos/rust-lang/rust/commits/290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c", "html_url": "https://github.com/rust-lang/rust/commit/290ed0297f0b4ee2aa5fe88bc7800c3fb6b0678c"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "12aa20a0bbd87ab60d78ac309b36b14036895ce2", "filename": "src/libcore/tests/hash/sip.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2774d4833709919812c9414c6ea642d42465f208/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2774d4833709919812c9414c6ea642d42465f208/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs?ref=2774d4833709919812c9414c6ea642d42465f208", "patch": "@@ -238,7 +238,7 @@ fn test_siphash_2_4() {\n #[cfg(target_pointer_width = \"32\")]\n fn test_hash_usize() {\n     let val = 0xdeadbeef_deadbeef_u64;\n-    assert!(hash(&(val as u64)) != hash(&(val as usize)));\n+    assert_ne!(hash(&(val as u64)), hash(&(val as usize)));\n     assert_eq!(hash(&(val as u32)), hash(&(val as usize)));\n }\n \n@@ -247,7 +247,7 @@ fn test_hash_usize() {\n fn test_hash_usize() {\n     let val = 0xdeadbeef_deadbeef_u64;\n     assert_eq!(hash(&(val as u64)), hash(&(val as usize)));\n-    assert!(hash(&(val as u32)) != hash(&(val as usize)));\n+    assert_ne!(hash(&(val as u32)), hash(&(val as usize)));\n }\n \n #[test]\n@@ -262,14 +262,14 @@ fn test_hash_idempotent() {\n fn test_hash_no_bytes_dropped_64() {\n     let val = 0xdeadbeef_deadbeef_u64;\n \n-    assert!(hash(&val) != hash(&zero_byte(val, 0)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 1)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 2)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 3)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 4)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 5)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 6)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 7)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 0)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 1)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 2)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 3)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 4)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 5)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 6)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 7)));\n \n     fn zero_byte(val: u64, byte: usize) -> u64 {\n         assert!(byte < 8);\n@@ -281,10 +281,10 @@ fn test_hash_no_bytes_dropped_64() {\n fn test_hash_no_bytes_dropped_32() {\n     let val = 0xdeadbeef_u32;\n \n-    assert!(hash(&val) != hash(&zero_byte(val, 0)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 1)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 2)));\n-    assert!(hash(&val) != hash(&zero_byte(val, 3)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 0)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 1)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 2)));\n+    assert_ne!(hash(&val), hash(&zero_byte(val, 3)));\n \n     fn zero_byte(val: u32, byte: usize) -> u32 {\n         assert!(byte < 4);\n@@ -299,14 +299,17 @@ fn test_hash_no_concat_alias() {\n     let u = (\"a\", \"abb\");\n \n     assert!(s != t && t != u);\n-    assert!(hash(&s) != hash(&t) && hash(&s) != hash(&u));\n+    assert_ne!(s, t);\n+    assert_ne!(t, u);\n+    assert_ne!(hash(&s), hash(&t));\n+    assert_ne!(hash(&s), hash(&u));\n \n     let u = [1, 0, 0, 0];\n     let v = (&u[..1], &u[1..3], &u[3..]);\n     let w = (&u[..], &u[4..4], &u[4..4]);\n \n-    assert!(v != w);\n-    assert!(hash(&v) != hash(&w));\n+    assert_ne!(v, w);\n+    assert_ne!(hash(&v), hash(&w));\n }\n \n #[test]"}]}