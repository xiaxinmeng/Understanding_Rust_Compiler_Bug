{"sha": "758a0ce934510b4e77586d02bc30a3d1d5d63cae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OGEwY2U5MzQ1MTBiNGU3NzU4NmQwMmJjMzBhM2QxZDVkNjNjYWU=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2017-09-02T14:28:48Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2017-09-03T09:32:46Z"}, "message": "alloc: Implement downcast Rc<Any> -> Rc<T>\n\nImplement downcast the like it exists for Box.\n\nThe implementation avoids using into_raw/from_raw, because the pointer\narithmetic which should cancel does not seem to optimize out at the\nmoment.\n\nSince Rc<T> is never Send, only Rc<Any> and not Rc<Any + Send>\nimplements downcast.", "tree": {"sha": "6cb359706580fcce98cadf84d5fc1549a4d5fbbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb359706580fcce98cadf84d5fc1549a4d5fbbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/758a0ce934510b4e77586d02bc30a3d1d5d63cae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/758a0ce934510b4e77586d02bc30a3d1d5d63cae", "html_url": "https://github.com/rust-lang/rust/commit/758a0ce934510b4e77586d02bc30a3d1d5d63cae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/758a0ce934510b4e77586d02bc30a3d1d5d63cae/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efceda220e92f02f7a29a15e4cf56f5a3cdf1792", "url": "https://api.github.com/repos/rust-lang/rust/commits/efceda220e92f02f7a29a15e4cf56f5a3cdf1792", "html_url": "https://github.com/rust-lang/rust/commit/efceda220e92f02f7a29a15e4cf56f5a3cdf1792"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "814be059da7c01d4ff32d1602e20ac54152131ca", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/758a0ce934510b4e77586d02bc30a3d1d5d63cae/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/758a0ce934510b4e77586d02bc30a3d1d5d63cae/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=758a0ce934510b4e77586d02bc30a3d1d5d63cae", "patch": "@@ -244,6 +244,7 @@ use boxed::Box;\n #[cfg(test)]\n use std::boxed::Box;\n \n+use core::any::Any;\n use core::borrow;\n use core::cell::Cell;\n use core::cmp::Ordering;\n@@ -608,6 +609,46 @@ impl<T: Clone> Rc<T> {\n     }\n }\n \n+impl Rc<Any> {\n+    #[inline]\n+    #[unstable(feature = \"rc_downcast\", issue = \"0\")]\n+    /// Attempt to downcast the `Rc<Any>` to a concrete type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(rc_downcast)]\n+    /// use std::any::Any;\n+    /// use std::rc::Rc;\n+    ///\n+    /// fn print_if_string(value: Rc<Any>) {\n+    ///     if let Ok(string) = value.downcast::<String>() {\n+    ///         println!(\"String ({}): {}\", string.len(), string);\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let my_string = \"Hello World\".to_string();\n+    ///     print_if_string(Rc::new(my_string));\n+    ///     print_if_string(Rc::new(0i8));\n+    /// }\n+    /// ```\n+    pub fn downcast<T: Any>(self) -> Result<Rc<T>, Rc<Any>> {\n+        if (*self).is::<T>() {\n+            // avoid the pointer arithmetic in from_raw\n+            unsafe {\n+                let raw: *const RcBox<Any> = self.ptr.as_ptr();\n+                forget(self);\n+                Ok(Rc {\n+                    ptr: Shared::new_unchecked(raw as *const RcBox<T> as *mut _),\n+                })\n+            }\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}\n+\n impl<T: ?Sized> Rc<T> {\n     // Allocates an `RcBox<T>` with sufficient space for an unsized value\n     unsafe fn allocate_for_ptr(ptr: *const T) -> *mut RcBox<T> {\n@@ -1696,6 +1737,26 @@ mod tests {\n \n         assert_eq!(&r[..], [1, 2, 3]);\n     }\n+\n+    #[test]\n+    fn test_downcast() {\n+        use std::any::Any;\n+\n+        let r1: Rc<Any> = Rc::new(i32::max_value());\n+        let r2: Rc<Any> = Rc::new(\"abc\");\n+\n+        assert!(r1.clone().downcast::<u32>().is_err());\n+\n+        let r1i32 = r1.downcast::<i32>();\n+        assert!(r1i32.is_ok());\n+        assert_eq!(r1i32.unwrap(), Rc::new(i32::max_value()));\n+\n+        assert!(r2.clone().downcast::<i32>().is_err());\n+\n+        let r2str = r2.downcast::<&'static str>();\n+        assert!(r2str.is_ok());\n+        assert_eq!(r2str.unwrap(), Rc::new(\"abc\"));\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}