{"sha": "a962835685d0cc02b9749bd8f1f89236796f55a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NjI4MzU2ODVkMGNjMDJiOTc0OWJkOGYxZjg5MjM2Nzk2ZjU1YTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-09T17:40:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T11:04:34Z"}, "message": "[WIP] debuginfo: Add types for locals", "tree": {"sha": "54ee517e39fa77e5c2b51764ad1036aee4ec55b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ee517e39fa77e5c2b51764ad1036aee4ec55b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a962835685d0cc02b9749bd8f1f89236796f55a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a962835685d0cc02b9749bd8f1f89236796f55a9", "html_url": "https://github.com/rust-lang/rust/commit/a962835685d0cc02b9749bd8f1f89236796f55a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a962835685d0cc02b9749bd8f1f89236796f55a9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0aedfef96b62302a2c2410d0214d94da5dff647", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0aedfef96b62302a2c2410d0214d94da5dff647", "html_url": "https://github.com/rust-lang/rust/commit/c0aedfef96b62302a2c2410d0214d94da5dff647"}], "stats": {"total": 79, "additions": 71, "deletions": 8}, "files": [{"sha": "bb0ffb51bcec14882b7fd7056130d697f20b5325", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a962835685d0cc02b9749bd8f1f89236796f55a9/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962835685d0cc02b9749bd8f1f89236796f55a9/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a962835685d0cc02b9749bd8f1f89236796f55a9", "patch": "@@ -17,7 +17,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let mut debug_context = cx\n         .debug_context\n         .as_mut()\n-        .map(|debug_context| FunctionDebugContext::new(tcx, debug_context, mir, func_id, &name, &sig));\n+        .map(|debug_context| FunctionDebugContext::new(debug_context, mir, func_id, &name, &sig));\n \n     // Make FunctionBuilder\n     let mut func = Function::with_name_signature(ExternalName::user(0, 0), sig);"}, {"sha": "b3de6449ff4b437abea97654af39ba1197bbd7b8", "filename": "src/debuginfo.rs", "status": "modified", "additions": 70, "deletions": 7, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/a962835685d0cc02b9749bd8f1f89236796f55a9/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a962835685d0cc02b9749bd8f1f89236796f55a9/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=a962835685d0cc02b9749bd8f1f89236796f55a9", "patch": "@@ -70,13 +70,15 @@ pub enum DebugRelocName {\n }\n \n pub struct DebugContext<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+\n     endian: RunTimeEndian,\n     symbols: indexmap::IndexMap<FuncId, String>,\n \n     dwarf: DwarfUnit,\n     unit_range_list: RangeList,\n \n-    _dummy: PhantomData<&'tcx ()>,\n+    types: HashMap<Ty<'tcx>, UnitEntryId>,\n }\n \n impl<'tcx> DebugContext<'tcx> {\n@@ -132,18 +134,20 @@ impl<'tcx> DebugContext<'tcx> {\n         }\n \n         DebugContext {\n+            tcx,\n+\n             endian: target_endian(tcx),\n             symbols: indexmap::IndexMap::new(),\n \n             dwarf,\n             unit_range_list: RangeList(Vec::new()),\n \n-            _dummy: PhantomData,\n+            types: HashMap::new(),\n         }\n     }\n \n-    fn emit_location(&mut self, tcx: TyCtxt<'tcx>, entry_id: UnitEntryId, span: Span) {\n-        let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n+    fn emit_location(&mut self, entry_id: UnitEntryId, span: Span) {\n+        let loc = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n \n         let file_id = line_program_add_file(\n             &mut self.dwarf.unit.line_program,\n@@ -168,6 +172,58 @@ impl<'tcx> DebugContext<'tcx> {\n         );\n     }\n \n+    fn dwarf_ty(&mut self, ty: Ty<'tcx>) -> UnitEntryId {\n+        if let Some(type_id) = self.types.get(ty) {\n+            return *type_id;\n+        }\n+\n+        let new_entry = |dwarf: &mut DwarfUnit, tag| {\n+            dwarf.unit.add(dwarf.unit.root(), tag)\n+        };\n+\n+        let primtive = |dwarf: &mut DwarfUnit, ate| {\n+            let type_id = new_entry(dwarf, gimli::DW_TAG_base_type);\n+            let type_entry = dwarf.unit.get_mut(type_id);\n+            type_entry.set(gimli::DW_AT_encoding, AttributeValue::Encoding(ate));\n+            type_id\n+        };\n+\n+        let type_id = match ty.kind {\n+            ty::Bool => primtive(&mut self.dwarf, gimli::DW_ATE_boolean),\n+            ty::Char => primtive(&mut self.dwarf, gimli::DW_ATE_UTF),\n+            ty::Uint(_) => primtive(&mut self.dwarf, gimli::DW_ATE_unsigned),\n+            ty::Int(_) => primtive(&mut self.dwarf, gimli::DW_ATE_signed),\n+            ty::Float(_) => primtive(&mut self.dwarf, gimli::DW_ATE_float),\n+            ty::Ref(_, pointee_ty, mutbl) | ty::RawPtr(ty::TypeAndMut { ty: pointee_ty, mutbl }) => {\n+                let type_id = new_entry(&mut self.dwarf, gimli::DW_TAG_pointer_type);\n+\n+                // Ensure that type is inserted before recursing to avoid duplicates\n+                self.types.insert(ty, type_id);\n+\n+                let pointee = self.dwarf_ty(pointee_ty);\n+\n+                let type_entry = self.dwarf.unit.get_mut(type_id);\n+\n+                //type_entry.set(gimli::DW_AT_mutable, AttributeValue::Flag(mutbl == rustc::hir::Mutability::MutMutable));\n+                type_entry.set(gimli::DW_AT_type, AttributeValue::ThisUnitEntryRef(pointee));\n+\n+                type_id\n+            }\n+            _ => new_entry(&mut self.dwarf, gimli::DW_TAG_structure_type),\n+        };\n+        let name = format!(\"{}\", ty);\n+        let layout = self.tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap();\n+\n+        let type_entry = self.dwarf.unit.get_mut(type_id);\n+\n+        type_entry.set(gimli::DW_AT_name, AttributeValue::String(name.into_bytes()));\n+        type_entry.set(gimli::DW_AT_byte_size, AttributeValue::Udata(layout.size.bytes()));\n+\n+        self.types.insert(ty, type_id);\n+\n+        type_id\n+    }\n+\n     pub fn emit<P: WriteDebugInfo>(&mut self, product: &mut P) {\n         let unit_range_list_id = self.dwarf.unit.ranges.add(self.unit_range_list.clone());\n         let root = self.dwarf.unit.root();\n@@ -205,13 +261,13 @@ pub struct FunctionDebugContext<'a, 'tcx> {\n     entry_id: UnitEntryId,\n     symbol: usize,\n     mir_span: Span,\n+    local_decls: rustc_index::vec::IndexVec<mir::Local, mir::LocalDecl<'tcx>>,\n }\n \n impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n     pub fn new(\n-        tcx: TyCtxt<'tcx>,\n         debug_context: &'a mut DebugContext<'tcx>,\n-        mir: &Body,\n+        mir: &'tcx Body,\n         func_id: FuncId,\n         name: &str,\n         _sig: &Signature,\n@@ -237,13 +293,14 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             AttributeValue::Address(Address::Symbol { symbol, addend: 0 }),\n         );\n \n-        debug_context.emit_location(tcx, entry_id, mir.span);\n+        debug_context.emit_location(entry_id, mir.span);\n \n         FunctionDebugContext {\n             debug_context,\n             entry_id,\n             symbol,\n             mir_span: mir.span,\n+            local_decls: mir.local_decls.clone(),\n         }\n     }\n \n@@ -329,6 +386,8 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                 );\n                 let live_ranges_id = self.debug_context.dwarf.unit.ranges.add(live_ranges);\n \n+                let local_type = self.debug_context.dwarf_ty(self.local_decls[mir::Local::from_u32(value_label.as_u32())].ty);\n+\n                 let var_id = self\n                     .debug_context\n                     .dwarf\n@@ -344,6 +403,10 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                     gimli::DW_AT_name,\n                     AttributeValue::String(format!(\"{:?}\", value_label).into_bytes()),\n                 );\n+                var_entry.set(\n+                    gimli::DW_AT_type,\n+                    AttributeValue::ThisUnitEntryRef(local_type),\n+                );\n             }\n         }\n "}]}