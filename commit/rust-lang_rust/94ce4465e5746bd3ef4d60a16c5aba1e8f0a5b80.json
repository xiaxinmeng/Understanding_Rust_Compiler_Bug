{"sha": "94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80", "node_id": "C_kwDOAAsO6NoAKDk0Y2U0NDY1ZTU3NDZiZDNlZjRkNjBhMTZjNWFiYTFlOGYwYTViODA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T12:50:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-22T12:50:08Z"}, "message": "Auto merge of #9796 - smoelius:issue-9771, r=flip1995\n\nFix #9771 (`unnecessary_to_owned` false positive)\n\nFixes #9771\n\nIn that issue's example(s), the lint tried to add a `&` to a value, which implicitly changed the type of a field to a reference. The fix is to add the reference to `receiver_ty` (the type of the receiver of the `to_owned`-like method), before passing `receiver_ty` to `can_change_type`. `can_change_type` properly rejects the modified `receiver_ty`.\n\ncc: `@mikerite` just because I think he was the author of `can_change_type`.\n\nchangelog: fix `unnecessary_to_owned` false positive which implicitly tried to change the type of a field to a reference", "tree": {"sha": "c71a5ff5c3e69a917578753ef305f09574decdcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c71a5ff5c3e69a917578753ef305f09574decdcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80", "html_url": "https://github.com/rust-lang/rust/commit/94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4083c5ae72f5f80bf19e881528c4d39b38db0e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4083c5ae72f5f80bf19e881528c4d39b38db0e7", "html_url": "https://github.com/rust-lang/rust/commit/f4083c5ae72f5f80bf19e881528c4d39b38db0e7"}, {"sha": "f27ca5c00a96d2dbd1e2b5dceee918d829891bc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f27ca5c00a96d2dbd1e2b5dceee918d829891bc1", "html_url": "https://github.com/rust-lang/rust/commit/f27ca5c00a96d2dbd1e2b5dceee918d829891bc1"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "ae6d4310901e4e062fdf1336ee82b8ef76932dad", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80", "patch": "@@ -19,7 +19,6 @@ use rustc_middle::ty::{self, ParamTy, PredicateKind, ProjectionPredicate, TraitP\n use rustc_semver::RustcVersion;\n use rustc_span::{sym, Symbol};\n use rustc_trait_selection::traits::{query::evaluate_obligation::InferCtxtExt as _, Obligation, ObligationCause};\n-use std::cmp::max;\n \n use super::UNNECESSARY_TO_OWNED;\n \n@@ -263,11 +262,22 @@ fn check_other_call_arg<'tcx>(\n         if let Some(as_ref_trait_id) = cx.tcx.get_diagnostic_item(sym::AsRef);\n         if trait_predicate.def_id() == deref_trait_id || trait_predicate.def_id() == as_ref_trait_id;\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);\n-        if can_change_type(cx, maybe_arg, receiver_ty);\n         // We can't add an `&` when the trait is `Deref` because `Target = &T` won't match\n         // `Target = T`.\n-        if n_refs > 0 || is_copy(cx, receiver_ty) || trait_predicate.def_id() != deref_trait_id;\n-        let n_refs = max(n_refs, usize::from(!is_copy(cx, receiver_ty)));\n+        if let Some((n_refs, receiver_ty)) = if n_refs > 0 || is_copy(cx, receiver_ty) {\n+            Some((n_refs, receiver_ty))\n+        } else if trait_predicate.def_id() != deref_trait_id {\n+            Some((1, cx.tcx.mk_ref(\n+                cx.tcx.lifetimes.re_erased,\n+                ty::TypeAndMut {\n+                    ty: receiver_ty,\n+                    mutbl: Mutability::Not,\n+                },\n+            )))\n+        } else {\n+            None\n+        };\n+        if can_change_type(cx, maybe_arg, receiver_ty);\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n             span_lint_and_sugg("}, {"sha": "fadcf7f9c9e86992325e842761b018748f3df80f", "filename": "tests/ui/unnecessary_to_owned.fixed", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80/tests%2Fui%2Funnecessary_to_owned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80/tests%2Fui%2Funnecessary_to_owned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.fixed?ref=94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80", "patch": "@@ -426,3 +426,32 @@ mod issue_9504 {\n         foo(std::path::PathBuf::new().to_string_lossy().to_string()).await;\n     }\n }\n+\n+mod issue_9771a {\n+    #![allow(dead_code)]\n+\n+    use std::marker::PhantomData;\n+\n+    pub struct Key<K: AsRef<[u8]>, V: ?Sized>(K, PhantomData<V>);\n+\n+    impl<K: AsRef<[u8]>, V: ?Sized> Key<K, V> {\n+        pub fn new(key: K) -> Key<K, V> {\n+            Key(key, PhantomData)\n+        }\n+    }\n+\n+    pub fn pkh(pkh: &[u8]) -> Key<Vec<u8>, String> {\n+        Key::new([b\"pkh-\", pkh].concat().to_vec())\n+    }\n+}\n+\n+mod issue_9771b {\n+    #![allow(dead_code)]\n+\n+    pub struct Key<K: AsRef<[u8]>>(K);\n+\n+    pub fn from(c: &[u8]) -> Key<Vec<u8>> {\n+        let v = [c].concat();\n+        Key(v.to_vec())\n+    }\n+}"}, {"sha": "fe6864b9e07f93b125531f081aee0b108a16b515", "filename": "tests/ui/unnecessary_to_owned.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80/tests%2Fui%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80/tests%2Fui%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_to_owned.rs?ref=94ce4465e5746bd3ef4d60a16c5aba1e8f0a5b80", "patch": "@@ -426,3 +426,32 @@ mod issue_9504 {\n         foo(std::path::PathBuf::new().to_string_lossy().to_string()).await;\n     }\n }\n+\n+mod issue_9771a {\n+    #![allow(dead_code)]\n+\n+    use std::marker::PhantomData;\n+\n+    pub struct Key<K: AsRef<[u8]>, V: ?Sized>(K, PhantomData<V>);\n+\n+    impl<K: AsRef<[u8]>, V: ?Sized> Key<K, V> {\n+        pub fn new(key: K) -> Key<K, V> {\n+            Key(key, PhantomData)\n+        }\n+    }\n+\n+    pub fn pkh(pkh: &[u8]) -> Key<Vec<u8>, String> {\n+        Key::new([b\"pkh-\", pkh].concat().to_vec())\n+    }\n+}\n+\n+mod issue_9771b {\n+    #![allow(dead_code)]\n+\n+    pub struct Key<K: AsRef<[u8]>>(K);\n+\n+    pub fn from(c: &[u8]) -> Key<Vec<u8>> {\n+        let v = [c].concat();\n+        Key(v.to_vec())\n+    }\n+}"}]}