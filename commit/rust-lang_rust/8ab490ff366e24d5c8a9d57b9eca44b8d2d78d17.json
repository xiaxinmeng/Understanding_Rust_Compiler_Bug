{"sha": "8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17", "node_id": "C_kwDOAAsO6NoAKDhhYjQ5MGZmMzY2ZTI0ZDVjOGE5ZDU3YjllY2E0NGI4ZDJkNzhkMTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-23T07:35:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-23T07:35:33Z"}, "message": "Rollup merge of #108541 - compiler-errors:lol-nested-rpits, r=oli-obk\n\nSuppress `opaque_hidden_inferred_bound` for nested RPITs\n\nThey trigger too much, making repos like linkerd/linkerd2-proxy#2275 sad.\n\nIdeally, at least for RPITs (and probably TAITs?), specifically when we have `impl Trait<Assoc = impl ..>`, that nested opaque should have the necessary `Assoc` item bounds elaborated into its own item bounds. But that's another story.\n\nr? ```@oli-obk```", "tree": {"sha": "15a876f220a51e0ef536e274e12041166dd425a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15a876f220a51e0ef536e274e12041166dd425a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHAFFCRBK7hj4Ov3rIwAAH7kIAHhwQ/mm0Brxfl3zFwrzLXZA\nRGjWWbrs9XnegsdS+Jo7PTgiwQswCWBee4wFUrZ0OPxETvl9Q9iNQMzudNV5/N0m\neyXGMMLrUmiKn2O73rm9Qo1tD/zpFSYjb1pcZZc1V42Abdf+VersJy+Xf6xd74NJ\nZfW/Vz/Dfvd9xto6w1xeV6NRUc+bD8RUdPigb38fOmoIr73cuztXl+9KL9S+4BFX\nl2FumLzLvMfoZZ5N/HNOZphLdWjLkSR7dbr33qz38OM33j6SaabulPzwvR6K1rYz\ndJuuZOKDE87rBjyG14Kh3CZfBxLBDeEwI0ct1JyFh9+m1XcdB0IXY8wmADYMe30=\n=QS8c\n-----END PGP SIGNATURE-----\n", "payload": "tree 15a876f220a51e0ef536e274e12041166dd425a8\nparent cf811810fe8dc92b3ff25e7dd29fb3178c91d409\nparent e5189cc7e45991e1c6e9a4218c80d54441b346a9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679556933 +0100\ncommitter GitHub <noreply@github.com> 1679556933 +0100\n\nRollup merge of #108541 - compiler-errors:lol-nested-rpits, r=oli-obk\n\nSuppress `opaque_hidden_inferred_bound` for nested RPITs\n\nThey trigger too much, making repos like linkerd/linkerd2-proxy#2275 sad.\n\nIdeally, at least for RPITs (and probably TAITs?), specifically when we have `impl Trait<Assoc = impl ..>`, that nested opaque should have the necessary `Assoc` item bounds elaborated into its own item bounds. But that's another story.\n\nr? ```@oli-obk```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17", "html_url": "https://github.com/rust-lang/rust/commit/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf811810fe8dc92b3ff25e7dd29fb3178c91d409", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf811810fe8dc92b3ff25e7dd29fb3178c91d409", "html_url": "https://github.com/rust-lang/rust/commit/cf811810fe8dc92b3ff25e7dd29fb3178c91d409"}, {"sha": "e5189cc7e45991e1c6e9a4218c80d54441b346a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5189cc7e45991e1c6e9a4218c80d54441b346a9", "html_url": "https://github.com/rust-lang/rust/commit/e5189cc7e45991e1c6e9a4218c80d54441b346a9"}], "stats": {"total": 57, "additions": 18, "deletions": 39}, "files": [{"sha": "f9d43fe220036e70c527e792ea10944d027e9f5d", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17", "patch": "@@ -27,6 +27,8 @@ declare_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n+    /// #![feature(type_alias_impl_trait)]\n+    ///\n     /// trait Duh {}\n     ///\n     /// impl Duh for i32 {}\n@@ -41,7 +43,9 @@ declare_lint! {\n     ///     type Assoc = F;\n     /// }\n     ///\n-    /// fn test() -> impl Trait<Assoc = impl Sized> {\n+    /// type Tait = impl Sized;\n+    ///\n+    /// fn test() -> impl Trait<Assoc = Tait> {\n     ///     42\n     /// }\n     /// ```\n@@ -54,7 +58,7 @@ declare_lint! {\n     ///\n     /// Although the hidden type, `i32` does satisfy this bound, we do not\n     /// consider the return type to be well-formed with this lint. It can be\n-    /// fixed by changing `impl Sized` into `impl Sized + Send`.\n+    /// fixed by changing `Tait = impl Sized` into `Tait = impl Sized + Send`.\n     pub OPAQUE_HIDDEN_INFERRED_BOUND,\n     Warn,\n     \"detects the use of nested `impl Trait` types in associated type bounds that are not general enough\"\n@@ -64,7 +68,7 @@ declare_lint_pass!(OpaqueHiddenInferredBound => [OPAQUE_HIDDEN_INFERRED_BOUND]);\n \n impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n-        let hir::ItemKind::OpaqueTy(_) = &item.kind else { return; };\n+        let hir::ItemKind::OpaqueTy(opaque) = &item.kind else { return; };\n         let def_id = item.owner_id.def_id.to_def_id();\n         let infcx = &cx.tcx.infer_ctxt().build();\n         // For every projection predicate in the opaque type's explicit bounds,\n@@ -81,6 +85,17 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n             // have opaques in them anyways.\n             let Some(proj_term) = proj.term.ty() else { continue };\n \n+            // HACK: `impl Trait<Assoc = impl Trait2>` from an RPIT is \"ok\"...\n+            if let ty::Alias(ty::Opaque, opaque_ty) = *proj_term.kind()\n+                && cx.tcx.parent(opaque_ty.def_id) == def_id\n+                && matches!(\n+                    opaque.origin,\n+                    hir::OpaqueTyOrigin::FnReturn(_) | hir::OpaqueTyOrigin::AsyncFn(_)\n+                )\n+            {\n+                continue;\n+            }\n+\n             let proj_ty =\n                 cx.tcx.mk_projection(proj.projection_ty.def_id, proj.projection_ty.substs);\n             // For every instance of the projection type in the bounds,"}, {"sha": "e1d5511379e7a9f2875dd1b1405637a8ea7a8937", "filename": "tests/ui/impl-trait/nested-return-type2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.rs?ref=8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17", "patch": "@@ -26,7 +26,6 @@ impl<R: Duh, F: FnMut() -> R> Trait for F {\n // Lazy TAIT would error out, but we inserted a hack to make it work again,\n // keeping backwards compatibility.\n fn foo() -> impl Trait<Assoc = impl Send> {\n-    //~^ WARN opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n     || 42\n }\n "}, {"sha": "09ad3bd05c1b3dda20e4842d09f3186cde6d8249", "filename": "tests/ui/impl-trait/nested-return-type2.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cf811810fe8dc92b3ff25e7dd29fb3178c91d409/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf811810fe8dc92b3ff25e7dd29fb3178c91d409/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr?ref=cf811810fe8dc92b3ff25e7dd29fb3178c91d409", "patch": "@@ -1,17 +0,0 @@\n-warning: opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n-  --> $DIR/nested-return-type2.rs:28:24\n-   |\n-LL |     type Assoc: Duh;\n-   |                 --- this associated type bound is unsatisfied for `impl Send`\n-...\n-LL | fn foo() -> impl Trait<Assoc = impl Send> {\n-   |                        ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n-help: add this bound\n-   |\n-LL | fn foo() -> impl Trait<Assoc = impl Send + Duh> {\n-   |                                          +++++\n-\n-warning: 1 warning emitted\n-"}, {"sha": "74b4dae22ebfd32a5ee845c1ec3d8834f4bc447e", "filename": "tests/ui/impl-trait/nested-return-type3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.rs?ref=8ab490ff366e24d5c8a9d57b9eca44b8d2d78d17", "patch": "@@ -13,7 +13,6 @@ impl<F: Duh> Trait for F {\n }\n \n fn foo() -> impl Trait<Assoc = impl Send> {\n-    //~^ WARN opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n     42\n }\n "}, {"sha": "632de71aa4c880246ad942242eae3b6ab01f4beb", "filename": "tests/ui/impl-trait/nested-return-type3.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cf811810fe8dc92b3ff25e7dd29fb3178c91d409/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf811810fe8dc92b3ff25e7dd29fb3178c91d409/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type3.stderr?ref=cf811810fe8dc92b3ff25e7dd29fb3178c91d409", "patch": "@@ -1,17 +0,0 @@\n-warning: opaque type `impl Trait<Assoc = impl Send>` does not satisfy its associated type bounds\n-  --> $DIR/nested-return-type3.rs:15:24\n-   |\n-LL |     type Assoc: Duh;\n-   |                 --- this associated type bound is unsatisfied for `impl Send`\n-...\n-LL | fn foo() -> impl Trait<Assoc = impl Send> {\n-   |                        ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(opaque_hidden_inferred_bound)]` on by default\n-help: add this bound\n-   |\n-LL | fn foo() -> impl Trait<Assoc = impl Send + Duh> {\n-   |                                          +++++\n-\n-warning: 1 warning emitted\n-"}]}