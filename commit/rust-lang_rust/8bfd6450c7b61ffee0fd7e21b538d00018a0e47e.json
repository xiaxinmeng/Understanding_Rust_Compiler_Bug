{"sha": "8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "node_id": "C_kwDOAAsO6NoAKDhiZmQ2NDUwYzdiNjFmZmVlMGZkN2UyMWI1MzhkMDAwMThhMGU0N2U", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-18T20:47:28Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-18T20:47:28Z"}, "message": "A few small cleanups for `newtype_index`\n\nRemove the `..` from the body, only a few invocations used it and it's\ninconsistent with rust syntax.\n\nUse `;` instead of `,` between consts. As the Rust syntax gods inteded.", "tree": {"sha": "5cfb2d138d7b9dbc83959890e2a3a56d725a1b2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cfb2d138d7b9dbc83959890e2a3a56d725a1b2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "html_url": "https://github.com/rust-lang/rust/commit/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c", "html_url": "https://github.com/rust-lang/rust/commit/d679764fb6b84a5cb72f6a9c9fefce4c6b41f16c"}], "stats": {"total": 183, "additions": 68, "deletions": 115}, "files": [{"sha": "31596a1e9bf889ca1f684fcca0c20673add5c558", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -2556,8 +2556,7 @@ pub enum AttrStyle {\n rustc_index::newtype_index! {\n     #[custom_encodable]\n     #[debug_format = \"AttrId({})]\"]\n-    pub struct AttrId {\n-    }\n+    pub struct AttrId {}\n }\n \n impl<S: Encoder> Encodable<S> for AttrId {"}, {"sha": "daa82996b3d11f52a9fead380c10c879ac7e9896", "filename": "compiler/rustc_ast/src/node_id.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -9,8 +9,7 @@ rustc_index::newtype_index! {\n     ///\n     /// [`DefId`]: rustc_span::def_id::DefId\n     #[debug_format = \"NodeId({})\"]\n-    pub struct NodeId {\n-    }\n+    pub struct NodeId {}\n }\n \n rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeMapEntry, NodeId);"}, {"sha": "1f0b8adeaf16c1ecbe31529b0f0ea6efe0ec5371", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -116,12 +116,10 @@ impl<'tcx> fmt::Debug for OutlivesConstraint<'tcx> {\n \n rustc_index::newtype_index! {\n     #[debug_format = \"OutlivesConstraintIndex({})\"]\n-    pub struct OutlivesConstraintIndex {\n-    }\n+    pub struct OutlivesConstraintIndex {}\n }\n \n rustc_index::newtype_index! {\n     #[debug_format = \"ConstraintSccIndex({})\"]\n-    pub struct ConstraintSccIndex {\n-    }\n+    pub struct ConstraintSccIndex {}\n }"}, {"sha": "8c4885770ad37b6d009eb450d82a7e2b47a4d057", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -109,8 +109,7 @@ impl_visitable! {\n \n rustc_index::newtype_index! {\n     #[debug_format = \"bw{}\"]\n-    pub struct BorrowIndex {\n-    }\n+    pub struct BorrowIndex {}\n }\n \n /// `Borrows` stores the data used in the analyses that track the flow"}, {"sha": "288b7d85be2d41d4d5e89fe1eab90f597f1668bd", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -21,8 +21,7 @@ pub struct LocationTable {\n \n rustc_index::newtype_index! {\n     #[debug_format = \"LocationIndex({})\"]\n-    pub struct LocationIndex {\n-    }\n+    pub struct LocationIndex {}\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "b63e286676ff48fc2129344547850f320da554d0", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -56,8 +56,7 @@ pub(crate) struct NllMemberConstraint<'tcx> {\n \n rustc_index::newtype_index! {\n     #[debug_format = \"MemberConstraintIndex({})\"]\n-    pub(crate) struct NllMemberConstraintIndex {\n-    }\n+    pub(crate) struct NllMemberConstraintIndex {}\n }\n \n impl Default for MemberConstraintSet<'_, ty::RegionVid> {"}, {"sha": "8023ef60d205290478d37c467291d88c17ac093b", "filename": "compiler/rustc_borrowck/src/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -46,7 +46,7 @@ struct Appearance {\n }\n \n rustc_index::newtype_index! {\n-    pub struct AppearanceIndex { .. }\n+    pub struct AppearanceIndex {}\n }\n \n impl vll::LinkElem for Appearance {"}, {"sha": "94a8c1fc051dd6f3bb9aedcab3b33a74e0adca80", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -22,7 +22,7 @@ struct PreOrderFrame<Iter> {\n }\n \n rustc_index::newtype_index! {\n-    struct PreorderIndex { .. }\n+    struct PreorderIndex {}\n }\n \n pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {"}, {"sha": "03bcaa6946825baac7073958262ddd75f7bd3bf2", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -138,7 +138,7 @@ rustc_index::newtype_index! {\n     /// an \"item-like\" to something else can be implemented by a `Vec` instead of a\n     /// tree or hash map.\n     #[derive(HashStable_Generic)]\n-    pub struct ItemLocalId { .. }\n+    pub struct ItemLocalId {}\n }\n \n impl ItemLocalId {"}, {"sha": "a9331af4eab32f622d7ccec1340604df7faa32b9", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -199,9 +199,9 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n \n             rustc_index::newtype_index! {\n                 #[custom_encodable]\n-                pub struct RegionId {\n-                }\n+                pub struct RegionId {}\n             }\n+\n             struct ConnectedRegion {\n                 idents: SmallVec<[Symbol; 8]>,\n                 impl_blocks: FxHashSet<usize>,"}, {"sha": "6f26afcaf1680abfd0bc4c4a4e80dd4a86be7023", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/arg_matrix.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -5,14 +5,12 @@ use rustc_middle::ty::error::TypeError;\n \n rustc_index::newtype_index! {\n     #[debug_format = \"ExpectedIdx({})\"]\n-    pub(crate) struct ExpectedIdx {\n-    }\n+    pub(crate) struct ExpectedIdx {}\n }\n \n rustc_index::newtype_index! {\n     #[debug_format = \"ProvidedIdx({})\"]\n-    pub(crate) struct ProvidedIdx {\n-    }\n+    pub(crate) struct ProvidedIdx {}\n }\n \n impl ExpectedIdx {"}, {"sha": "2f55ea939fc0b2bcff4edfe08ac44de843f2efe1", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -97,14 +97,12 @@ fn for_each_consumable<'tcx>(hir: Map<'tcx>, place: TrackedValue, mut f: impl Fn\n \n rustc_index::newtype_index! {\n     #[debug_format = \"id({})\"]\n-    pub struct PostOrderId {\n-    }\n+    pub struct PostOrderId {}\n }\n \n rustc_index::newtype_index! {\n     #[debug_format = \"hidx({})\"]\n-    pub struct TrackedValueIndex {\n-    }\n+    pub struct TrackedValueIndex {}\n }\n \n /// Identifies a value whose drop state we need to track."}, {"sha": "cb0f0db220d97b6505b46030d497787eb6f53a81", "filename": "compiler/rustc_index/src/vec/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_index%2Fsrc%2Fvec%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_index%2Fsrc%2Fvec%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec%2Ftests.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -5,7 +5,7 @@ use crate as rustc_index;\n \n rustc_macros::newtype_index! {\n     #[max = 0xFFFF_FFFA]\n-    struct MyIdx { }\n+    struct MyIdx {}\n }\n \n #[test]"}, {"sha": "c46edc33ff40ccd13ac18c7fbc43a15a49a6de96", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -358,14 +358,12 @@ impl<'tcx> SccUniverse<'tcx> {\n \n rustc_index::newtype_index! {\n     #[debug_format = \"LeakCheckNode({})\"]\n-    struct LeakCheckNode {\n-    }\n+    struct LeakCheckNode {}\n }\n \n rustc_index::newtype_index! {\n     #[debug_format = \"LeakCheckScc({})\"]\n-    struct LeakCheckScc {\n-    }\n+    struct LeakCheckScc {}\n }\n \n /// Represents the graph of constraints. For each `R1: R2` constraint we create"}, {"sha": "e9d3d44a3f9f9f6e6fede79abd3d00190aa2bd1d", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -41,7 +41,7 @@ struct LintLevelSets {\n rustc_index::newtype_index! {\n     #[custom_encodable] // we don't need encoding\n     struct LintStackIndex {\n-        const COMMAND_LINE = 0,\n+        const COMMAND_LINE = 0;\n     }\n }\n "}, {"sha": "153473de6244952770385d1f5233ac4106a17168", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -25,14 +25,6 @@ impl Parse for Newtype {\n         let mut encodable = true;\n         let mut ord = true;\n \n-        // Parse an optional trailing comma\n-        let try_comma = || -> Result<()> {\n-            if body.lookahead1().peek(Token![,]) {\n-                body.parse::<Token![,]>()?;\n-            }\n-            Ok(())\n-        };\n-\n         attrs.retain(|attr| match attr.path.get_ident() {\n             Some(ident) => match &*ident.to_string() {\n                 \"custom_encodable\" => {\n@@ -70,24 +62,20 @@ impl Parse for Newtype {\n             _ => true,\n         });\n \n-        if body.lookahead1().peek(Token![..]) {\n-            body.parse::<Token![..]>()?;\n-        } else {\n-            loop {\n-                // We've parsed everything that the user provided, so we're done\n-                if body.is_empty() {\n-                    break;\n-                }\n-\n-                // Otherwise, we are parsing a user-defined constant\n-                let const_attrs = body.call(Attribute::parse_outer)?;\n-                body.parse::<Token![const]>()?;\n-                let const_name: Ident = body.parse()?;\n-                body.parse::<Token![=]>()?;\n-                let const_val: Expr = body.parse()?;\n-                try_comma()?;\n-                consts.push(quote! { #(#const_attrs)* #vis const #const_name: #name = #name::from_u32(#const_val); });\n+        loop {\n+            // We've parsed everything that the user provided, so we're done\n+            if body.is_empty() {\n+                break;\n             }\n+\n+            // Otherwise, we are parsing a user-defined constant\n+            let const_attrs = body.call(Attribute::parse_outer)?;\n+            body.parse::<Token![const]>()?;\n+            let const_name: Ident = body.parse()?;\n+            body.parse::<Token![=]>()?;\n+            let const_val: Expr = body.parse()?;\n+            body.parse::<Token![;]>()?;\n+            consts.push(quote! { #(#const_attrs)* #vis const #const_name: #name = #name::from_u32(#const_val); });\n         }\n \n         let debug_format ="}, {"sha": "94ca38c0e758ff2bf9615572b552e2f7b85d10eb", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -148,8 +148,7 @@ rustc_index::newtype_index! {\n     /// * The subscope with `first_statement_index == 1` is scope of `c`,\n     ///   and thus does not include EXPR_2, but covers the `...`.\n     #[derive(HashStable)]\n-    pub struct FirstStatementIndex {\n-    }\n+    pub struct FirstStatementIndex {}\n }\n \n // compilation error if size of `ScopeData` is not the same as a `u32`"}, {"sha": "e7bb3ab0bc352d6016fb83389c9df33aa0c14553", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -35,8 +35,7 @@ rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[max = 0xFFFF_FFFF]\n     #[debug_format = \"CounterValueReference({})\"]\n-    pub struct CounterValueReference {\n-    }\n+    pub struct CounterValueReference {}\n }\n \n impl CounterValueReference {\n@@ -59,8 +58,7 @@ rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[max = 0xFFFF_FFFF]\n     #[debug_format = \"InjectedExpressionId({})\"]\n-    pub struct InjectedExpressionId {\n-    }\n+    pub struct InjectedExpressionId {}\n }\n \n rustc_index::newtype_index! {\n@@ -70,8 +68,7 @@ rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[max = 0xFFFF_FFFF]\n     #[debug_format = \"InjectedExpressionIndex({})\"]\n-    pub struct InjectedExpressionIndex {\n-    }\n+    pub struct InjectedExpressionIndex {}\n }\n \n rustc_index::newtype_index! {\n@@ -81,8 +78,7 @@ rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[max = 0xFFFF_FFFF]\n     #[debug_format = \"MappedExpressionIndex({})\"]\n-    pub struct MappedExpressionIndex {\n-    }\n+    pub struct MappedExpressionIndex {}\n }\n \n impl From<CounterValueReference> for ExpressionOperandId {"}, {"sha": "454cfc6e65ba64965248a276da611f1e302c6ab1", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -657,7 +657,7 @@ rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[debug_format = \"_{}\"]\n     pub struct Local {\n-        const RETURN_PLACE = 0,\n+        const RETURN_PLACE = 0;\n     }\n }\n \n@@ -1149,7 +1149,7 @@ rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[debug_format = \"bb{}\"]\n     pub struct BasicBlock {\n-        const START_BLOCK = 0,\n+        const START_BLOCK = 0;\n     }\n }\n \n@@ -1532,8 +1532,7 @@ rustc_index::newtype_index! {\n     /// [mir-datatypes]: https://rustc-dev-guide.rust-lang.org/mir/index.html#mir-data-types\n     #[derive(HashStable)]\n     #[debug_format = \"field[{}]\"]\n-    pub struct Field {\n-    }\n+    pub struct Field {}\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -1760,7 +1759,7 @@ rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[debug_format = \"scope[{}]\"]\n     pub struct SourceScope {\n-        const OUTERMOST_SOURCE_SCOPE = 0,\n+        const OUTERMOST_SOURCE_SCOPE = 0;\n     }\n }\n \n@@ -2757,8 +2756,7 @@ impl<'tcx> TypeVisitable<'tcx> for UserTypeProjection {\n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[debug_format = \"promoted[{}]\"]\n-    pub struct Promoted {\n-    }\n+    pub struct Promoted {}\n }\n \n impl<'tcx> Debug for Constant<'tcx> {"}, {"sha": "a8a4532223c2d901a47e1cf1f18cb21a718538e7", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -132,8 +132,7 @@ pub struct UnsafetyCheckResult {\n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[debug_format = \"_{}\"]\n-    pub struct GeneratorSavedLocal {\n-    }\n+    pub struct GeneratorSavedLocal {}\n }\n \n /// The layout of generator state."}, {"sha": "ac903010c8d31bba0e158db5016516709d3b5b38", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -36,8 +36,7 @@ macro_rules! thir_with_elements {\n             newtype_index! {\n                 #[derive(HashStable)]\n                 #[debug_format = $format]\n-                pub struct $id {\n-                }\n+                pub struct $id {}\n             }\n         )*\n "}, {"sha": "e13b68c83b57c140f51b3eeabc290fe1ca2250fb", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -1379,8 +1379,7 @@ rustc_index::newtype_index! {\n     /// A **region** (lifetime) **v**ariable **ID**.\n     #[derive(HashStable)]\n     #[debug_format = \"'_#{}r\"]\n-    pub struct RegionVid {\n-    }\n+    pub struct RegionVid {}\n }\n \n impl Atom for RegionVid {\n@@ -1391,7 +1390,7 @@ impl Atom for RegionVid {\n \n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n-    pub struct BoundVar { .. }\n+    pub struct BoundVar {}\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]"}, {"sha": "136a4906c58de7f1c607e70a90af645b43381c4b", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -611,7 +611,7 @@ rustc_index::newtype_index! {\n     #[derive(HashStable)]\n     #[debug_format = \"UserType({})\"]\n     pub struct UserTypeAnnotationIndex {\n-        const START_INDEX = 0,\n+        const START_INDEX = 0;\n     }\n }\n "}, {"sha": "c785dfb500fc9f93d95b6d6beef972391f0ad6d1", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -372,7 +372,7 @@ struct CFG<'tcx> {\n }\n \n rustc_index::newtype_index! {\n-    struct ScopeId { .. }\n+    struct ScopeId {}\n }\n \n #[derive(Debug)]"}, {"sha": "c92634a609de0f762df392231779f6510bc5a72e", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -185,7 +185,7 @@ pub(crate) enum BreakableTarget {\n }\n \n rustc_index::newtype_index! {\n-    struct DropIdx { .. }\n+    struct DropIdx {}\n }\n \n const ROOT_NODE: DropIdx = DropIdx::from_u32(0);"}, {"sha": "9b053985bedf6823f13a47fe5f5a6d5770cc38b8", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -15,8 +15,7 @@ mod abs_domain;\n \n rustc_index::newtype_index! {\n     #[debug_format = \"mp{}\"]\n-    pub struct MovePathIndex {\n-    }\n+    pub struct MovePathIndex {}\n }\n \n impl polonius_engine::Atom for MovePathIndex {\n@@ -27,14 +26,12 @@ impl polonius_engine::Atom for MovePathIndex {\n \n rustc_index::newtype_index! {\n     #[debug_format = \"mo{}\"]\n-    pub struct MoveOutIndex {\n-    }\n+    pub struct MoveOutIndex {}\n }\n \n rustc_index::newtype_index! {\n     #[debug_format = \"in{}\"]\n-    pub struct InitIndex {\n-    }\n+    pub struct InitIndex {}\n }\n \n impl MoveOutIndex {"}, {"sha": "78d28f1ebab7ce345d5082169bb0b80e4c34045b", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -284,7 +284,7 @@ rustc_index::newtype_index! {\n     /// A node in the control-flow graph of CoverageGraph.\n     #[debug_format = \"bcb{}\"]\n     pub(super) struct BasicCoverageBlock {\n-        const START_BCB = 0,\n+        const START_BCB = 0;\n     }\n }\n "}, {"sha": "b49432b79962bd3c288ec770a85fe2d1d1e5483c", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -109,14 +109,12 @@ mod rwu_table;\n \n rustc_index::newtype_index! {\n     #[debug_format = \"v({})\"]\n-    pub struct Variable {\n-    }\n+    pub struct Variable {}\n }\n \n rustc_index::newtype_index! {\n     #[debug_format = \"ln({})\"]\n-    pub struct LiveNode {\n-    }\n+    pub struct LiveNode {}\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]"}, {"sha": "52957ee0222387b62747d335e3429016184cf0bf", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -37,7 +37,7 @@ pub struct DepGraph<K: DepKind> {\n }\n \n rustc_index::newtype_index! {\n-    pub struct DepNodeIndex { .. }\n+    pub struct DepNodeIndex {}\n }\n \n impl DepNodeIndex {\n@@ -974,7 +974,7 @@ pub struct WorkProduct {\n \n // Index type for `DepNodeData`'s edges.\n rustc_index::newtype_index! {\n-    struct EdgeIndex { .. }\n+    struct EdgeIndex {}\n }\n \n /// `CurrentDepGraph` stores the dependency graph for the current session. It"}, {"sha": "a918328d4130ea08257536e8f432ca0c42396a32", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -28,8 +28,7 @@ use smallvec::SmallVec;\n // and use those bits to encode which index type it contains.\n rustc_index::newtype_index! {\n     #[max = 0x7FFF_FFFF]\n-    pub struct SerializedDepNodeIndex {\n-    }\n+    pub struct SerializedDepNodeIndex {}\n }\n \n /// Data for use when recompiling the **current crate**."}, {"sha": "221f65b66e6d4b77a1a0f63bc27acf3905e718b5", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -12,8 +12,7 @@ use std::hash::{Hash, Hasher};\n rustc_index::newtype_index! {\n     #[custom_encodable]\n     #[debug_format = \"crate{}\"]\n-    pub struct CrateNum {\n-    }\n+    pub struct CrateNum {}\n }\n \n /// Item definitions in the currently-compiled crate would have the `CrateNum`\n@@ -199,7 +198,7 @@ rustc_index::newtype_index! {\n     pub struct DefIndex {\n         /// The crate root is always assigned index 0 by the AST Map code,\n         /// thanks to `NodeCollector::new`.\n-        const CRATE_DEF_INDEX = 0,\n+        const CRATE_DEF_INDEX = 0;\n     }\n }\n "}, {"sha": "c2d8287f2431dc3faa5cad0a1b0070e97257dc72", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -62,8 +62,7 @@ pub struct SyntaxContextData {\n rustc_index::newtype_index! {\n     /// A unique ID associated with a macro invocation and expansion.\n     #[custom_encodable]\n-    pub struct ExpnIndex {\n-    }\n+    pub struct ExpnIndex {}\n }\n \n /// A unique ID associated with a macro invocation and expansion.\n@@ -85,8 +84,7 @@ rustc_index::newtype_index! {\n     #[custom_encodable]\n     #[no_ord_impl]\n     #[debug_format = \"expn{}\"]\n-    pub struct LocalExpnId {\n-    }\n+    pub struct LocalExpnId {}\n }\n \n // To ensure correctness of incremental compilation,"}, {"sha": "8014ae9c511f7763f612177b1df5bc2ac2f98d41", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -1801,7 +1801,7 @@ impl fmt::Display for MacroRulesNormalizedIdent {\n pub struct Symbol(SymbolIndex);\n \n rustc_index::newtype_index! {\n-    struct SymbolIndex { .. }\n+    struct SymbolIndex {}\n }\n \n impl Symbol {"}, {"sha": "88a0a1f8ecfdedafd60a8d9f6f516f488f06ca79", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -21,8 +21,7 @@ impl ToJson for Endian {\n \n rustc_index::newtype_index! {\n     #[derive(HashStable_Generic)]\n-    pub struct VariantIdx {\n-    }\n+    pub struct VariantIdx {}\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, HashStable_Generic)]"}, {"sha": "dd36a5c7a2169af3af0ed9e267b46d5e0cfabd0b", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bfd6450c7b61ffee0fd7e21b538d00018a0e47e/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=8bfd6450c7b61ffee0fd7e21b538d00018a0e47e", "patch": "@@ -303,7 +303,7 @@ rustc_index::newtype_index! {\n     #[derive(HashStable_Generic)]\n     #[debug_format = \"DebruijnIndex({})\"]\n     pub struct DebruijnIndex {\n-        const INNERMOST = 0,\n+        const INNERMOST = 0;\n     }\n }\n \n@@ -500,8 +500,7 @@ pub struct FloatVarValue(pub FloatTy);\n rustc_index::newtype_index! {\n     /// A **ty**pe **v**ariable **ID**.\n     #[debug_format = \"_#{}t\"]\n-    pub struct TyVid {\n-    }\n+    pub struct TyVid {}\n }\n \n /// An **int**egral (`u32`, `i32`, `usize`, etc.) type **v**ariable **ID**.\n@@ -789,8 +788,7 @@ rustc_index::newtype_index! {\n     /// use for checking generic functions.\n     #[derive(HashStable_Generic)]\n     #[debug_format = \"U{}\"]\n-    pub struct UniverseIndex {\n-    }\n+    pub struct UniverseIndex {}\n }\n \n impl UniverseIndex {"}]}