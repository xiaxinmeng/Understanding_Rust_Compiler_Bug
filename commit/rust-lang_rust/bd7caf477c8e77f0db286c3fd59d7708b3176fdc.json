{"sha": "bd7caf477c8e77f0db286c3fd59d7708b3176fdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkN2NhZjQ3N2M4ZTc3ZjBkYjI4NmMzZmQ1OWQ3NzA4YjMxNzZmZGM=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-21T20:15:13Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-21T20:15:13Z"}, "message": "Do not list impl when trait has doc(hidden)", "tree": {"sha": "08931bdbad82037bc70b23fb04093713a0aab74b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08931bdbad82037bc70b23fb04093713a0aab74b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd7caf477c8e77f0db286c3fd59d7708b3176fdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEjbeLZzPb62/vY3smZSV3NIU3bZIFAmDQ81YACgkQZSV3NIU3\nbZKBMQ/8DEbAwE/f3CL4oBH9LqCPwMsT6aAqtg+iJvyoqRfa6izJFz8XNMUvPuF/\n6fZlYN0t3bmBT4X17Ve1hWXIVC+1h/1xmA5pInAeCN4Gs62bcuowLcXFlIi88CJ1\ncfR4gUZebtbp+bvGaFIKoCaULv5ArhPXIvWpuHbMaZ/E3aYK/2IrGeM/nGerLEdL\nmYEQOJiVuVQO+lmj7BvEGJVpkc722LU5RruLrJZuqA/wN79yUKrlIfnkHzlD86oW\nn7NTOg7FE0aAWvkPGuLUcjbIRPVTACJ78lZCyLbP58qa4zs9J2HDCeLH+FYyChlV\nF5f4FhgLO/QwTh9dsWbkSDICEoe/X3xailPpiKCd90vCfNKhoNgMkEVN27xdOc+L\nQ6Ke6CQKMslm1R7A1Iwq1sfhIsfYoTCmplkgjfOLqH2lBwfRKM3r09Q6c0UncsKd\ndXH558jDTGUpF0EFpZu+aMwMod6Q0q8l5K/GSfF0vETohlLoU7BHF8KkRUb6Sadu\nlxzcTMLmc+6t8LtGIUSYm99sRheKE+N6FSKNPnqQEKqmGf+aL/HzTLzWBnudNMnH\nAvjvPTSjY25HVPXiO0ZtLIQlOeS/DJ68MBB06dM47x+3FjXPhphtN32i9p/UOANC\nbVDLX0pjBdOmIwb31V/TP1X0I0u1VxaS0uV9DE2w/5wU8wSGNJ4=\n=UaQp\n-----END PGP SIGNATURE-----", "payload": "tree 08931bdbad82037bc70b23fb04093713a0aab74b\nparent 3824017f8e57ce9dac6d69a1ce07f41c7034f82d\nauthor Deadbeef <ent3rm4n@gmail.com> 1624306513 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1624306513 +0800\n\nDo not list impl when trait has doc(hidden)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7caf477c8e77f0db286c3fd59d7708b3176fdc", "html_url": "https://github.com/rust-lang/rust/commit/bd7caf477c8e77f0db286c3fd59d7708b3176fdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd7caf477c8e77f0db286c3fd59d7708b3176fdc/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3824017f8e57ce9dac6d69a1ce07f41c7034f82d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3824017f8e57ce9dac6d69a1ce07f41c7034f82d", "html_url": "https://github.com/rust-lang/rust/commit/3824017f8e57ce9dac6d69a1ce07f41c7034f82d"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "db2e0d0d241e8b0f46aedb193db4007d6aad84c0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bd7caf477c8e77f0db286c3fd59d7708b3176fdc/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7caf477c8e77f0db286c3fd59d7708b3176fdc/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=bd7caf477c8e77f0db286c3fd59d7708b3176fdc", "patch": "@@ -1,5 +1,6 @@\n //! Support for inlining external documentation into the current AST.\n \n+use std::collections::VecDeque;\n use std::iter::once;\n use std::sync::Arc;\n \n@@ -15,7 +16,9 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-use crate::clean::{self, Attributes, AttributesExt, FakeDefId, GetDefId, ToSource};\n+use crate::clean::{\n+    self, Attributes, AttributesExt, FakeDefId, GetDefId, NestedAttributesExt, ToSource, Type,\n+};\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n@@ -420,6 +423,20 @@ crate fn build_impl(\n     if trait_.def_id() == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }\n+\n+    // Return if the trait itself or any types of the generic parameters are doc(hidden).\n+    let mut deque: VecDeque<&Type> = trait_.iter().collect();\n+    while let Some(ty) = deque.pop_back() {\n+        if let Some(did) = ty.def_id() {\n+            if cx.tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n+                return;\n+            }\n+        }\n+        if let Some(generics) = ty.generics() {\n+            deque.extend(generics);\n+        }\n+    }\n+\n     if let Some(trait_did) = trait_.def_id() {\n         record_extern_trait(cx, trait_did);\n     }"}, {"sha": "ec0ced2a82d00b354c1b577ca3d7b4598569dca4", "filename": "src/test/rustdoc/auxiliary/cross-crate-hidden.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd7caf477c8e77f0db286c3fd59d7708b3176fdc/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7caf477c8e77f0db286c3fd59d7708b3176fdc/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden.rs?ref=bd7caf477c8e77f0db286c3fd59d7708b3176fdc", "patch": "@@ -0,0 +1,2 @@\n+#[doc(hidden)]\n+pub enum HiddenType {}"}, {"sha": "b1bfc7c49bff33d62fb39ba567481a02ebb8f101", "filename": "src/test/rustdoc/cross-crate-hidden.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bd7caf477c8e77f0db286c3fd59d7708b3176fdc/src%2Ftest%2Frustdoc%2Fcross-crate-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7caf477c8e77f0db286c3fd59d7708b3176fdc/src%2Ftest%2Frustdoc%2Fcross-crate-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcross-crate-hidden.rs?ref=bd7caf477c8e77f0db286c3fd59d7708b3176fdc", "patch": "@@ -0,0 +1,23 @@\n+// Issue #86448: test for cross-crate `doc(hidden)`\n+#![crate_name = \"foo\"]\n+\n+// aux-build:cross-crate-hidden.rs\n+extern crate cross_crate_hidden;\n+\n+pub use ::cross_crate_hidden::HiddenType; // OK, not re-exported\n+\n+pub enum MyLibType {}\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3CHiddenType%3E\"]' 'impl From<HiddenType> for MyLibType'\n+impl From<HiddenType> for MyLibType {\n+    fn from(it: HiddenType) -> MyLibType {\n+        match it {}\n+    }\n+}\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3COption%3COption%3COption%3COption%3CHiddenType%3E%3E%3E%3E%3E\"]' 'impl From<Option<Option<Option<Option<HiddenType>>>>> for MyLibType'\n+impl From<Option<Option<Option<Option<HiddenType>>>>> for MyLibType {\n+    fn from(it: Option<Option<Option<Option<HiddenType>>>>) -> MyLibType {\n+        todo!()\n+    }\n+}"}]}