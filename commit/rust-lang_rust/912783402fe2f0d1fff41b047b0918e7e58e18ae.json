{"sha": "912783402fe2f0d1fff41b047b0918e7e58e18ae", "node_id": "C_kwDOAAsO6NoAKDkxMjc4MzQwMmZlMmYwZDFmZmY0MWIwNDdiMDkxOGU3ZTU4ZTE4YWU", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2023-02-08T13:25:38Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2023-02-08T15:09:11Z"}, "message": "const_eval: `implies_by` in `rustc_const_unstable`\n\nExtend support for `implies_by` (from `#[stable]` and `#[unstable]`)\nto `#[rustc_const_stable]` and `#[rustc_const_unstable]`.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "2e4cf189334c48ce94c6cb95f3d270bcdbf582a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e4cf189334c48ce94c6cb95f3d270bcdbf582a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/912783402fe2f0d1fff41b047b0918e7e58e18ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/912783402fe2f0d1fff41b047b0918e7e58e18ae", "html_url": "https://github.com/rust-lang/rust/commit/912783402fe2f0d1fff41b047b0918e7e58e18ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/912783402fe2f0d1fff41b047b0918e7e58e18ae/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb9f2dd6752f591906281d8aa5e16a8c51a8801", "html_url": "https://github.com/rust-lang/rust/commit/6eb9f2dd6752f591906281d8aa5e16a8c51a8801"}], "stats": {"total": 184, "additions": 177, "deletions": 7}, "files": [{"sha": "b7e05376c0e2cbb08e4d0a5da26b3088d306b49b", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -1,15 +1,22 @@\n+use rustc_attr as attr;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_span::symbol::Symbol;\n \n-/// Whether the `def_id` is an unstable const fn and what feature gate is necessary to enable it\n-pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n+/// Whether the `def_id` is an unstable const fn and what feature gate(s) are necessary to enable\n+/// it.\n+pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<(Symbol, Option<Symbol>)> {\n     if tcx.is_const_fn_raw(def_id) {\n         let const_stab = tcx.lookup_const_stability(def_id)?;\n-        if const_stab.is_const_unstable() { Some(const_stab.feature) } else { None }\n+        match const_stab.level {\n+            attr::StabilityLevel::Unstable { implied_by, .. } => {\n+                Some((const_stab.feature, implied_by))\n+            }\n+            attr::StabilityLevel::Stable { .. } => None,\n+        }\n     } else {\n         None\n     }"}, {"sha": "d11cc65da16daf2d1bb22b6e1918991bbf97587f", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -926,15 +926,24 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n                 // If the `const fn` we are trying to call is not const-stable, ensure that we have\n                 // the proper feature gate enabled.\n-                if let Some(gate) = is_unstable_const_fn(tcx, callee) {\n+                if let Some((gate, implied_by)) = is_unstable_const_fn(tcx, callee) {\n                     trace!(?gate, \"calling unstable const fn\");\n                     if self.span.allows_unstable(gate) {\n                         return;\n                     }\n+                    if let Some(implied_by_gate) = implied_by && self.span.allows_unstable(implied_by_gate) {\n+                        return;\n+                    }\n \n                     // Calling an unstable function *always* requires that the corresponding gate\n-                    // be enabled, even if the function has `#[rustc_allow_const_fn_unstable(the_gate)]`.\n-                    if !tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == gate) {\n+                    // (or implied gate) be enabled, even if the function has\n+                    // `#[rustc_allow_const_fn_unstable(the_gate)]`.\n+                    let gate_declared = |gate| {\n+                        tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == gate)\n+                    };\n+                    let feature_gate_declared = gate_declared(gate);\n+                    let implied_gate_declared = implied_by.map(gate_declared).unwrap_or(false);\n+                    if !feature_gate_declared && !implied_gate_declared {\n                         self.check_op(ops::FnCallUnstable(callee, Some(gate)));\n                         return;\n                     }\n@@ -947,7 +956,6 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     }\n \n                     // Otherwise, we are something const-stable calling a const-unstable fn.\n-\n                     if super::rustc_allow_const_fn_unstable(tcx, caller, gate) {\n                         trace!(\"rustc_allow_const_fn_unstable gate active\");\n                         return;"}, {"sha": "7617818f64280ecf626f5ffb45fe1919e5d6a034", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -265,6 +265,15 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 self.index.implications.insert(implied_by, feature);\n             }\n \n+            if let Some(ConstStability {\n+                level: Unstable { implied_by: Some(implied_by), .. },\n+                feature,\n+                ..\n+            }) = const_stab\n+            {\n+                self.index.implications.insert(implied_by, feature);\n+            }\n+\n             self.index.stab_map.insert(def_id, stab);\n             stab\n         });"}, {"sha": "f78871b5a1d6605549ed1a080ca4a357c31decee", "filename": "tests/ui/stability-attribute/auxiliary/const-stability-attribute-implies.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fauxiliary%2Fconst-stability-attribute-implies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fauxiliary%2Fconst-stability-attribute-implies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fauxiliary%2Fconst-stability-attribute-implies.rs?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -0,0 +1,12 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+#![rustc_const_stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"const_foo\", since = \"1.62.0\")]\n+pub const fn foo() {}\n+\n+#[stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_foobar\", issue = \"1\", implied_by = \"const_foo\")]\n+pub const fn foobar() {}"}, {"sha": "6d6d793c62b76c29eae6989ab0ae19f58fa9af75", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-missing.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.rs?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -0,0 +1,16 @@\n+#![crate_type = \"lib\"]\n+#![feature(staged_api)]\n+#![stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+#![rustc_const_stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+\n+// Tests that `implied_by = \"const_bar\"` results in an error being emitted if `const_bar` does not\n+// exist.\n+\n+#[stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_foobar\", issue = \"1\", implied_by = \"const_bar\")]\n+//~^ ERROR feature `const_bar` implying `const_foobar` does not exist\n+pub const fn foobar() -> u32 {\n+    0\n+}\n+\n+const VAR: u32 = foobar();"}, {"sha": "6d8b01a5495233c1a8550c71b71148b81ba68584", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-missing.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-missing.stderr?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -0,0 +1,8 @@\n+error: feature `const_bar` implying `const_foobar` does not exist\n+  --> $DIR/const-stability-attribute-implies-missing.rs:10:1\n+   |\n+LL | #[rustc_const_unstable(feature = \"const_foobar\", issue = \"1\", implied_by = \"const_bar\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "47e8d2b3609c5d0aa7018fec2ac255786fe5ec70", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-no-feature.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.rs?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:const-stability-attribute-implies.rs\n+#![crate_type = \"lib\"]\n+\n+// Tests that despite the `const_foobar` feature being implied by now-stable feature `const_foo`,\n+// if `const_foobar` isn't allowed in this crate then an error will be emitted.\n+\n+extern crate const_stability_attribute_implies;\n+use const_stability_attribute_implies::{foo, foobar};\n+\n+pub const fn bar() -> u32 {\n+    foo(); // no error - stable\n+    foobar(); //~ ERROR `foobar` is not yet stable as a const fn\n+    0\n+}\n+\n+pub const VAR: u32 = bar();"}, {"sha": "8ef5a364ecc457fc4ea54abe7787ccdfd5f9fc75", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-no-feature.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-no-feature.stderr?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -0,0 +1,10 @@\n+error: `foobar` is not yet stable as a const fn\n+  --> $DIR/const-stability-attribute-implies-no-feature.rs:12:5\n+   |\n+LL |     foobar();\n+   |     ^^^^^^^^\n+   |\n+   = help: add `#![feature(const_foobar)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}, {"sha": "ffaa171d8a5f7d322e72d7b685512af68007d2c1", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.rs?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -0,0 +1,19 @@\n+// aux-build:const-stability-attribute-implies.rs\n+#![crate_type = \"lib\"]\n+#![deny(stable_features)]\n+#![feature(const_foo)]\n+//~^ ERROR the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`\n+\n+// Tests that the use of `implied_by` in the `#[rustc_const_unstable]` attribute results in a\n+// diagnostic mentioning partial stabilization, and that given the implied unstable feature is\n+// unused (there is no `foobar` call), that the compiler suggests removing the flag.\n+\n+extern crate const_stability_attribute_implies;\n+use const_stability_attribute_implies::foo;\n+\n+pub const fn bar() -> u32 {\n+    foo();\n+    0\n+}\n+\n+pub const VAR: u32 = bar();"}, {"sha": "f6a099cd25e7a5cb9622c2509c3da230eecb8938", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-using-stable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-stable.stderr?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -0,0 +1,22 @@\n+error: the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`\n+  --> $DIR/const-stability-attribute-implies-using-stable.rs:4:12\n+   |\n+LL | #![feature(const_foo)]\n+   |            ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-stability-attribute-implies-using-stable.rs:3:9\n+   |\n+LL | #![deny(stable_features)]\n+   |         ^^^^^^^^^^^^^^^\n+help: if you are using features which are still unstable, change to using `const_foobar`\n+   |\n+LL | #![feature(const_foobar)]\n+   |            ~~~~~~~~~~~~\n+help: if you are using features which are now stable, remove this line\n+   |\n+LL - #![feature(const_foo)]\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "2061c5c75bd8148f7929a60d6ecd9c62dcd07c06", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.rs?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -0,0 +1,21 @@\n+// aux-build:const-stability-attribute-implies.rs\n+#![crate_type = \"lib\"]\n+#![deny(stable_features)]\n+#![feature(const_foo)]\n+//~^ ERROR the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`\n+\n+// Tests that the use of `implied_by` in the `#[rustc_const_unstable]` attribute results in a\n+// diagnostic mentioning partial stabilization and that given the implied unstable feature is\n+// used (there is a `const_foobar` call), that the compiler suggests changing to that feature and\n+// doesn't error about its use.\n+\n+extern crate const_stability_attribute_implies;\n+use const_stability_attribute_implies::{foo, foobar};\n+\n+pub const fn bar() -> u32 {\n+    foo();\n+    foobar(); // no error!\n+    0\n+}\n+\n+pub const VAR: u32 = bar();"}, {"sha": "0638566765822bdaffffa1078cf8f5eba5746992", "filename": "tests/ui/stability-attribute/const-stability-attribute-implies-using-unstable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/912783402fe2f0d1fff41b047b0918e7e58e18ae/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstability-attribute%2Fconst-stability-attribute-implies-using-unstable.stderr?ref=912783402fe2f0d1fff41b047b0918e7e58e18ae", "patch": "@@ -0,0 +1,22 @@\n+error: the feature `const_foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `const_foobar`\n+  --> $DIR/const-stability-attribute-implies-using-unstable.rs:4:12\n+   |\n+LL | #![feature(const_foo)]\n+   |            ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-stability-attribute-implies-using-unstable.rs:3:9\n+   |\n+LL | #![deny(stable_features)]\n+   |         ^^^^^^^^^^^^^^^\n+help: if you are using features which are still unstable, change to using `const_foobar`\n+   |\n+LL | #![feature(const_foobar)]\n+   |            ~~~~~~~~~~~~\n+help: if you are using features which are now stable, remove this line\n+   |\n+LL - #![feature(const_foo)]\n+   |\n+\n+error: aborting due to previous error\n+"}]}