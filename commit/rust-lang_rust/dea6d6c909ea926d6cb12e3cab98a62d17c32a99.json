{"sha": "dea6d6c909ea926d6cb12e3cab98a62d17c32a99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYTZkNmM5MDllYTkyNmQ2Y2IxMmUzY2FiOThhNjJkMTdjMzJhOTk=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-01-04T15:35:28Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-01-04T15:35:28Z"}, "message": "BufWriter::into_raw_parts: Add tracking issue number\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "ae85d4d4d6bd6dfcf9b377a9a1b044220d8b93e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae85d4d4d6bd6dfcf9b377a9a1b044220d8b93e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dea6d6c909ea926d6cb12e3cab98a62d17c32a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dea6d6c909ea926d6cb12e3cab98a62d17c32a99", "html_url": "https://github.com/rust-lang/rust/commit/dea6d6c909ea926d6cb12e3cab98a62d17c32a99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dea6d6c909ea926d6cb12e3cab98a62d17c32a99/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79c72f57d5538576cac7df13559ee74dd32552da", "url": "https://api.github.com/repos/rust-lang/rust/commits/79c72f57d5538576cac7df13559ee74dd32552da", "html_url": "https://github.com/rust-lang/rust/commit/79c72f57d5538576cac7df13559ee74dd32552da"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "8d56e7ae9dc29cded84aaedcad9ed26a45d712f5", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dea6d6c909ea926d6cb12e3cab98a62d17c32a99/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea6d6c909ea926d6cb12e3cab98a62d17c32a99/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=dea6d6c909ea926d6cb12e3cab98a62d17c32a99", "patch": "@@ -313,15 +313,15 @@ impl<W: Write> BufWriter<W> {\n     /// assert_eq!(recovered_writer.len(), 0);\n     /// assert_eq!(&buffered_data.unwrap(), b\"ata\");\n     /// ```\n-    #[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"none\")]\n+    #[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n     pub fn into_raw_parts(mut self) -> (W, Result<Vec<u8>, WriterPanicked>) {\n         let buf = mem::take(&mut self.buf);\n         let buf = if !self.panicked { Ok(buf) } else { Err(WriterPanicked { buf }) };\n         (self.inner.take().unwrap(), buf)\n     }\n }\n \n-#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"none\")]\n+#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n /// Error returned for the buffered data from `BufWriter::into_raw_parts`, when the underlying\n /// writer has previously panicked.  Contains the (possibly partly written) buffered data.\n ///\n@@ -355,7 +355,7 @@ pub struct WriterPanicked {\n impl WriterPanicked {\n     /// Returns the perhaps-unwritten data.  Some of this data may have been written by the\n     /// panicking call(s) to the underlying writer, so simply writing it again is not a good idea.\n-    #[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"none\")]\n+    #[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n     pub fn into_inner(self) -> Vec<u8> {\n         self.buf\n     }\n@@ -364,22 +364,22 @@ impl WriterPanicked {\n         \"BufWriter inner writer panicked, what data remains unwritten is not known\";\n }\n \n-#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"none\")]\n+#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n impl error::Error for WriterPanicked {\n     #[allow(deprecated, deprecated_in_future)]\n     fn description(&self) -> &str {\n         Self::DESCRIPTION\n     }\n }\n \n-#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"none\")]\n+#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n impl fmt::Display for WriterPanicked {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", Self::DESCRIPTION)\n     }\n }\n \n-#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"none\")]\n+#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n impl fmt::Debug for WriterPanicked {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"WriterPanicked\")"}]}