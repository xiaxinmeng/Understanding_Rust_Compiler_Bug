{"sha": "81ba427a7b15d614a74812ef3fd1467c85d4768d", "node_id": "C_kwDOAAsO6NoAKDgxYmE0MjdhN2IxNWQ2MTRhNzQ4MTJlZjNmZDE0NjdjODVkNDc2OGQ", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-12T21:48:07Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-13T18:20:24Z"}, "message": "Add tests", "tree": {"sha": "94e1ff54d557cae89b01d237af8ba75a33ef8844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94e1ff54d557cae89b01d237af8ba75a33ef8844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ba427a7b15d614a74812ef3fd1467c85d4768d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ba427a7b15d614a74812ef3fd1467c85d4768d", "html_url": "https://github.com/rust-lang/rust/commit/81ba427a7b15d614a74812ef3fd1467c85d4768d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ba427a7b15d614a74812ef3fd1467c85d4768d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70", "html_url": "https://github.com/rust-lang/rust/commit/3d6b09e53e0b1d5920fe3c6106f676b7b95f4a70"}], "stats": {"total": 164, "additions": 164, "deletions": 0}, "files": [{"sha": "77e753c13f7397aa70b99acb85eec0ca34bd5ff5", "filename": "tests/ui/traits/track-obligations.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/81ba427a7b15d614a74812ef3fd1467c85d4768d/tests%2Fui%2Ftraits%2Ftrack-obligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ba427a7b15d614a74812ef3fd1467c85d4768d/tests%2Fui%2Ftraits%2Ftrack-obligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrack-obligations.rs?ref=81ba427a7b15d614a74812ef3fd1467c85d4768d", "patch": "@@ -0,0 +1,88 @@\n+// These are simplifications of the tower traits by the same name:\n+\n+pub trait Service<Request> {\n+    type Response;\n+}\n+\n+pub trait Layer<C> {\n+    type Service;\n+}\n+\n+// Any type will do here:\n+\n+pub struct Req;\n+pub struct Res;\n+\n+// This is encoding a trait alias.\n+\n+pub trait ParticularService:\n+    Service<Req, Response = Res> {\n+}\n+\n+impl<T> ParticularService for T\n+where\n+    T: Service<Req, Response = Res>,\n+{\n+}\n+\n+// This is also a trait alias.\n+// The weird = <Self as ...> bound is there so that users of the trait do not\n+// need to repeat the bounds. See https://github.com/rust-lang/rust/issues/20671\n+// for context, and in particular the workaround in:\n+// https://github.com/rust-lang/rust/issues/20671#issuecomment-529752828\n+\n+pub trait ParticularServiceLayer<C>:\n+    Layer<C, Service = <Self as ParticularServiceLayer<C>>::Service>\n+{\n+    type Service: ParticularService;\n+}\n+\n+impl<T, C> ParticularServiceLayer<C> for T\n+where\n+    T: Layer<C>,\n+    T::Service: ParticularService,\n+{\n+    type Service = T::Service;\n+}\n+\n+// These are types that implement the traits that the trait aliases refer to.\n+// They should also implement the alias traits due to the blanket impls.\n+\n+struct ALayer<C>(C);\n+impl<C> Layer<C> for ALayer<C> {\n+    type Service = AService;\n+}\n+\n+struct AService;\n+impl Service<Req> for AService {\n+    // However, AService does _not_ meet the blanket implementation,\n+    // since its Response type is bool, not Res as it should be.\n+    type Response = bool;\n+}\n+\n+// This is a wrapper type around ALayer that uses the trait alias\n+// as a way to communicate the requirements of the provided types.\n+struct Client<C>(C);\n+\n+// The method and the free-standing function below both have the same bounds.\n+\n+impl<C> Client<C>\n+where\n+    ALayer<C>: ParticularServiceLayer<C>,\n+{\n+    fn check(&self) {}\n+}\n+\n+fn check<C>(_: C) where ALayer<C>: ParticularServiceLayer<C> {}\n+\n+// But, they give very different error messages.\n+\n+fn main() {\n+    // This gives a very poor error message that does nothing to point the user\n+    // at the underlying cause of why the types involved do not meet the bounds.\n+    Client(()).check(); //~ ERROR E0599\n+\n+    // This gives a good(ish) error message that points the user at _why_ the\n+    // bound isn't met, and thus how they might fix it.\n+    check(()); //~ ERROR E0271\n+}"}, {"sha": "89477475970f4af442946c74452c241dc3989ade", "filename": "tests/ui/traits/track-obligations.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/81ba427a7b15d614a74812ef3fd1467c85d4768d/tests%2Fui%2Ftraits%2Ftrack-obligations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81ba427a7b15d614a74812ef3fd1467c85d4768d/tests%2Fui%2Ftraits%2Ftrack-obligations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrack-obligations.stderr?ref=81ba427a7b15d614a74812ef3fd1467c85d4768d", "patch": "@@ -0,0 +1,76 @@\n+error[E0599]: the method `check` exists for struct `Client<()>`, but its trait bounds were not satisfied\n+  --> $DIR/track-obligations.rs:83:16\n+   |\n+LL | struct ALayer<C>(C);\n+   | ----------------\n+   | |\n+   | doesn't satisfy `<_ as Layer<()>>::Service = <ALayer<()> as ParticularServiceLayer<()>>::Service`\n+   | doesn't satisfy `ALayer<()>: ParticularServiceLayer<()>`\n+...\n+LL | struct Client<C>(C);\n+   | ---------------- method `check` not found for this struct\n+...\n+LL |     Client(()).check();\n+   |                ^^^^^ method cannot be called on `Client<()>` due to unsatisfied trait bounds\n+   |\n+note: trait bound `<ALayer<()> as Layer<()>>::Service = <ALayer<()> as ParticularServiceLayer<()>>::Service` was not satisfied\n+  --> $DIR/track-obligations.rs:35:14\n+   |\n+LL | pub trait ParticularServiceLayer<C>:\n+   |           ----------------------\n+LL |     Layer<C, Service = <Self as ParticularServiceLayer<C>>::Service>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound introduced here\n+note: trait bound `ALayer<()>: ParticularServiceLayer<()>` was not satisfied\n+  --> $DIR/track-obligations.rs:71:16\n+   |\n+LL | impl<C> Client<C>\n+   |         ---------\n+LL | where\n+LL |     ALayer<C>: ParticularServiceLayer<C>,\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound introduced here\n+note: the trait `ParticularServiceLayer` must be implemented\n+  --> $DIR/track-obligations.rs:34:1\n+   |\n+LL | / pub trait ParticularServiceLayer<C>:\n+LL | |     Layer<C, Service = <Self as ParticularServiceLayer<C>>::Service>\n+   | |____________________________________________________________________^\n+\n+error[E0271]: type mismatch resolving `<AService as Service<Req>>::Response == Res`\n+  --> $DIR/track-obligations.rs:87:11\n+   |\n+LL |     check(());\n+   |     ----- ^^ type mismatch resolving `<AService as Service<Req>>::Response == Res`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: expected this to be `Res`\n+  --> $DIR/track-obligations.rs:60:21\n+   |\n+LL |     type Response = bool;\n+   |                     ^^^^\n+note: required for `AService` to implement `ParticularService`\n+  --> $DIR/track-obligations.rs:22:9\n+   |\n+LL | impl<T> ParticularService for T\n+   |         ^^^^^^^^^^^^^^^^^     ^\n+LL | where\n+LL |     T: Service<Req, Response = Res>,\n+   |                     -------------- unsatisfied trait bound introduced here\n+note: required for `ALayer<_>` to implement `ParticularServiceLayer<_>`\n+  --> $DIR/track-obligations.rs:40:12\n+   |\n+LL | impl<T, C> ParticularServiceLayer<C> for T\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+...\n+LL |     T::Service: ParticularService,\n+   |                 ----------------- unsatisfied trait bound introduced here\n+note: required by a bound in `check`\n+  --> $DIR/track-obligations.rs:76:36\n+   |\n+LL | fn check<C>(_: C) where ALayer<C>: ParticularServiceLayer<C> {}\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `check`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0271, E0599.\n+For more information about an error, try `rustc --explain E0271`."}]}