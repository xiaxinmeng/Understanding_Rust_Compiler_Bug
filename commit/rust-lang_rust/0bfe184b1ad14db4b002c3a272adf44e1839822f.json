{"sha": "0bfe184b1ad14db4b002c3a272adf44e1839822f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZmUxODRiMWFkMTRkYjRiMDAyYzNhMjcyYWRmNDRlMTgzOTgyMmY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-19T15:47:06Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-30T13:30:59Z"}, "message": "Stop duplicating projections of type annotation.\n\nThis commit changes how type annotations are handled in bindings during\nMIR building.\n\nInstead of building up a `PatternTypeProjections` with the\n`CanonicalUserTypeAnnotation` and projections, the\n`CanonicalUserTypeAnnotation` is stored in the\n`canonical_user_type_annotations` map at the start and the (equivalent)\n`UserTypeProjections` is built up with the new index and same projections.\n\nThis has the effect of deduplicating type annotations as instead of type\nannotations being added to the `canonical_user_type_annotations` map\nmultiple times at the end after being duplicated (which happens in building\nup `PatternTypeProjections`), it is instead added once.", "tree": {"sha": "a8284d73529951ca1e5ebec76fc09e42647b3257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8284d73529951ca1e5ebec76fc09e42647b3257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bfe184b1ad14db4b002c3a272adf44e1839822f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlwoyJMACgkQAXYLT59T\n8VSEjQ//efQ6WizmLMLjXGi9JuJeONN3tbMqTOoyErOwY7or75N1oTI0j5Ov+znB\nECOfAF0nqUnSTd33AAd2pEijLGGTUHVanX4/2l9ts48VK2mFO2R7WM/mSIsBe742\nhUEIum44lBZpxwJiTY4cxwuw8Rx9eXNIqfs/JhdJBPzyfHd107DWcxdO6RpMWdiY\nmtj6r8N7zye2wPrGiRbLKYhbCQP5oqR64PDyvEnXtupgRzHCrSCxgakRez73vftJ\nBCKUo/gPTQZj46gM4PNSiH5jjc54qieHIakqnCdYArneDBxslZFuwJnL6sjSk/9V\nWLa5z2laKH6ZGCZrhrxHjKMKkiWGlO4u98atBm/P46zkNX9CPeWyGVjddCD591tx\nPhurzv+M8fnGHcv9Nm3LZxNrtUTYqpRFhZYZENHV4OdB5EJKlqojgXVE3FaXDVC8\n1ZBEUALf864LrxGYrllzwwVDkVa6eqZimICVgbCV1qwlcL/ci/n7ap53bTgQmt1E\nT8qcDV8IssNyMfjoK1M0ypBKkVeiz7bTwF8uaUBWaZVfcfxZ40qF42L2S51rCwZd\nX5NCURCnxArO1yWjePuro1Wv66IS43/2al9aL49jjtPONuWhLaMmQk0ZD+NOxeEC\nFvWmQA/RzYWRBql+0eolLLWB/zKrK5u1G/ino59Ca/LXu9IDR8s=\n=8R8X\n-----END PGP SIGNATURE-----", "payload": "tree a8284d73529951ca1e5ebec76fc09e42647b3257\nparent 28fd1b04e56f33fecc843c0a78fc490b03100f43\nauthor David Wood <david@davidtw.co> 1545234426 +0100\ncommitter David Wood <david@davidtw.co> 1546176659 +0100\n\nStop duplicating projections of type annotation.\n\nThis commit changes how type annotations are handled in bindings during\nMIR building.\n\nInstead of building up a `PatternTypeProjections` with the\n`CanonicalUserTypeAnnotation` and projections, the\n`CanonicalUserTypeAnnotation` is stored in the\n`canonical_user_type_annotations` map at the start and the (equivalent)\n`UserTypeProjections` is built up with the new index and same projections.\n\nThis has the effect of deduplicating type annotations as instead of type\nannotations being added to the `canonical_user_type_annotations` map\nmultiple times at the end after being duplicated (which happens in building\nup `PatternTypeProjections`), it is instead added once.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bfe184b1ad14db4b002c3a272adf44e1839822f", "html_url": "https://github.com/rust-lang/rust/commit/0bfe184b1ad14db4b002c3a272adf44e1839822f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bfe184b1ad14db4b002c3a272adf44e1839822f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28fd1b04e56f33fecc843c0a78fc490b03100f43", "url": "https://api.github.com/repos/rust-lang/rust/commits/28fd1b04e56f33fecc843c0a78fc490b03100f43", "html_url": "https://github.com/rust-lang/rust/commit/28fd1b04e56f33fecc843c0a78fc490b03100f43"}], "stats": {"total": 213, "additions": 99, "deletions": 114}, "files": [{"sha": "2936405ebd0b79a325db5cf62daff9f988c4cc09", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/0bfe184b1ad14db4b002c3a272adf44e1839822f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bfe184b1ad14db4b002c3a272adf44e1839822f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=0bfe184b1ad14db4b002c3a272adf44e1839822f", "patch": "@@ -2519,6 +2519,48 @@ impl<'tcx> UserTypeProjections<'tcx> {\n     pub fn projections(&self) -> impl Iterator<Item=&UserTypeProjection<'tcx>> {\n         self.contents.iter().map(|&(ref user_type, _span)| user_type)\n     }\n+\n+    pub fn push_projection(\n+        mut self,\n+        user_ty: &UserTypeProjection<'tcx>,\n+        span: Span,\n+    ) -> Self {\n+        self.contents.push((user_ty.clone(), span));\n+        self\n+    }\n+\n+    fn map_projections(\n+        mut self,\n+        mut f: impl FnMut(UserTypeProjection<'tcx>) -> UserTypeProjection<'tcx>\n+    ) -> Self {\n+        self.contents = self.contents.drain(..).map(|(proj, span)| (f(proj), span)).collect();\n+        self\n+    }\n+\n+    pub fn index(self) -> Self {\n+        self.map_projections(|pat_ty_proj| pat_ty_proj.index())\n+    }\n+\n+    pub fn subslice(self, from: u32, to: u32) -> Self {\n+        self.map_projections(|pat_ty_proj| pat_ty_proj.subslice(from, to))\n+    }\n+\n+    pub fn deref(self) -> Self {\n+        self.map_projections(|pat_ty_proj| pat_ty_proj.deref())\n+    }\n+\n+    pub fn leaf(self, field: Field) -> Self {\n+        self.map_projections(|pat_ty_proj| pat_ty_proj.leaf(field))\n+    }\n+\n+    pub fn variant(\n+        self,\n+        adt_def: &'tcx AdtDef,\n+        variant_index: VariantIdx,\n+        field: Field,\n+    ) -> Self {\n+        self.map_projections(|pat_ty_proj| pat_ty_proj.variant(adt_def, variant_index, field))\n+    }\n }\n \n /// Encodes the effect of a user-supplied type annotation on the\n@@ -2544,6 +2586,39 @@ pub struct UserTypeProjection<'tcx> {\n \n impl<'tcx> Copy for ProjectionKind<'tcx> { }\n \n+impl<'tcx> UserTypeProjection<'tcx> {\n+    pub(crate) fn index(mut self) -> Self {\n+        self.projs.push(ProjectionElem::Index(()));\n+        self\n+    }\n+\n+    pub(crate) fn subslice(mut self, from: u32, to: u32) -> Self {\n+        self.projs.push(ProjectionElem::Subslice { from, to });\n+        self\n+    }\n+\n+    pub(crate) fn deref(mut self) -> Self {\n+        self.projs.push(ProjectionElem::Deref);\n+        self\n+    }\n+\n+    pub(crate) fn leaf(mut self, field: Field) -> Self {\n+        self.projs.push(ProjectionElem::Field(field, ()));\n+        self\n+    }\n+\n+    pub(crate) fn variant(\n+        mut self,\n+        adt_def: &'tcx AdtDef,\n+        variant_index: VariantIdx,\n+        field: Field,\n+    ) -> Self {\n+        self.projs.push(ProjectionElem::Downcast(adt_def, variant_index));\n+        self.projs.push(ProjectionElem::Field(field, ()));\n+        self\n+    }\n+}\n+\n CloneTypeFoldableAndLiftImpls! { ProjectionKind<'tcx>, }\n \n impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection<'tcx> {"}, {"sha": "f3d89a7a02515b3f17f00a95a44a71a67b3ba6d2", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bfe184b1ad14db4b002c3a272adf44e1839822f/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bfe184b1ad14db4b002c3a272adf44e1839822f/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=0bfe184b1ad14db4b002c3a272adf44e1839822f", "patch": "@@ -144,7 +144,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         debug!(\"ast_block_stmts: pattern={:?}\", pattern);\n                         this.visit_bindings(\n                             &pattern,\n-                            &PatternTypeProjections::none(),\n+                            UserTypeProjections::none(),\n                             &mut |this, _, _, _, node, span, _, _| {\n                                 this.storage_live_binding(block, node, span, OutsideGuard);\n                                 this.schedule_drop_for_binding(node, span, OutsideGuard);"}, {"sha": "fe5bc6e19db659bb4af1308d74ca7199298a7bc5", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0bfe184b1ad14db4b002c3a272adf44e1839822f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bfe184b1ad14db4b002c3a272adf44e1839822f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=0bfe184b1ad14db4b002c3a272adf44e1839822f", "patch": "@@ -8,7 +8,6 @@ use build::ForGuard::{self, OutsideGuard, RefWithinGuard, ValWithinGuard};\n use build::{BlockAnd, BlockAndExtension, Builder};\n use build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n use hair::*;\n-use hair::pattern::PatternTypeProjections;\n use rustc::mir::*;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::VariantIdx;\n@@ -412,7 +411,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         debug!(\"declare_bindings: patterns={:?}\", patterns);\n         self.visit_bindings(\n             &patterns[0],\n-            &PatternTypeProjections::none(),\n+            UserTypeProjections::none(),\n             &mut |this, mutability, name, mode, var, span, ty, user_ty| {\n                 if visibility_scope.is_none() {\n                     visibility_scope =\n@@ -488,7 +487,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub(super) fn visit_bindings(\n         &mut self,\n         pattern: &Pattern<'tcx>,\n-        pattern_user_ty: &PatternTypeProjections<'tcx>,\n+        pattern_user_ty: UserTypeProjections<'tcx>,\n         f: &mut impl FnMut(\n             &mut Self,\n             Mutability,\n@@ -497,7 +496,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             NodeId,\n             Span,\n             Ty<'tcx>,\n-            &PatternTypeProjections<'tcx>,\n+            UserTypeProjections<'tcx>,\n         ),\n     ) {\n         debug!(\"visit_bindings: pattern={:?} pattern_user_ty={:?}\", pattern, pattern_user_ty);\n@@ -511,7 +510,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ref subpattern,\n                 ..\n             } => {\n-                f(self, mutability, name, mode, var, pattern.span, ty, pattern_user_ty);\n+                f(self, mutability, name, mode, var, pattern.span, ty, pattern_user_ty.clone());\n                 if let Some(subpattern) = subpattern.as_ref() {\n                     self.visit_bindings(subpattern, pattern_user_ty, f);\n                 }\n@@ -529,42 +528,47 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let from = u32::try_from(prefix.len()).unwrap();\n                 let to = u32::try_from(suffix.len()).unwrap();\n                 for subpattern in prefix {\n-                    self.visit_bindings(subpattern, &pattern_user_ty.index(), f);\n+                    self.visit_bindings(subpattern, pattern_user_ty.clone().index(), f);\n                 }\n                 for subpattern in slice {\n-                    self.visit_bindings(subpattern, &pattern_user_ty.subslice(from, to), f);\n+                    self.visit_bindings(subpattern, pattern_user_ty.clone().subslice(from, to), f);\n                 }\n                 for subpattern in suffix {\n-                    self.visit_bindings(subpattern, &pattern_user_ty.index(), f);\n+                    self.visit_bindings(subpattern, pattern_user_ty.clone().index(), f);\n                 }\n             }\n             PatternKind::Constant { .. } | PatternKind::Range { .. } | PatternKind::Wild => {}\n             PatternKind::Deref { ref subpattern } => {\n-                self.visit_bindings(subpattern, &pattern_user_ty.deref(), f);\n+                self.visit_bindings(subpattern, pattern_user_ty.deref(), f);\n             }\n             PatternKind::AscribeUserType { ref subpattern, ref user_ty, user_ty_span } => {\n                 // This corresponds to something like\n                 //\n                 // ```\n                 // let A::<'a>(_): A<'static> = ...;\n                 // ```\n-                let subpattern_user_ty = pattern_user_ty.add_user_type(user_ty, user_ty_span);\n-                self.visit_bindings(subpattern, &subpattern_user_ty, f)\n+                let annotation = (user_ty_span, user_ty.base);\n+                let projection = UserTypeProjection {\n+                    base: self.canonical_user_type_annotations.push(annotation),\n+                    projs: user_ty.projs.clone(),\n+                };\n+                let subpattern_user_ty = pattern_user_ty.push_projection(&projection, user_ty_span);\n+                self.visit_bindings(subpattern, subpattern_user_ty, f)\n             }\n \n             PatternKind::Leaf { ref subpatterns } => {\n                 for subpattern in subpatterns {\n-                    let subpattern_user_ty = pattern_user_ty.leaf(subpattern.field);\n+                    let subpattern_user_ty = pattern_user_ty.clone().leaf(subpattern.field);\n                     debug!(\"visit_bindings: subpattern_user_ty={:?}\", subpattern_user_ty);\n-                    self.visit_bindings(&subpattern.pattern, &subpattern_user_ty, f);\n+                    self.visit_bindings(&subpattern.pattern, subpattern_user_ty, f);\n                 }\n             }\n \n             PatternKind::Variant { adt_def, substs: _, variant_index, ref subpatterns } => {\n                 for subpattern in subpatterns {\n-                    let subpattern_user_ty = pattern_user_ty.variant(\n+                    let subpattern_user_ty = pattern_user_ty.clone().variant(\n                         adt_def, variant_index, subpattern.field);\n-                    self.visit_bindings(&subpattern.pattern, &subpattern_user_ty, f);\n+                    self.visit_bindings(&subpattern.pattern, subpattern_user_ty, f);\n                 }\n             }\n         }\n@@ -1465,7 +1469,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         num_patterns: usize,\n         var_id: NodeId,\n         var_ty: Ty<'tcx>,\n-        user_var_ty: &PatternTypeProjections<'tcx>,\n+        user_ty: UserTypeProjections<'tcx>,\n         has_guard: ArmHasGuard,\n         opt_match_place: Option<(Option<Place<'tcx>>, Span)>,\n         pat_span: Span,\n@@ -1481,7 +1485,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             BindingMode::ByValue => ty::BindingMode::BindByValue(mutability.into()),\n             BindingMode::ByRef { .. } => ty::BindingMode::BindByReference(mutability.into()),\n         };\n-        let user_ty = user_var_ty.clone().user_ty(&mut self.canonical_user_type_annotations);\n         debug!(\"declare_binding: user_ty={:?}\", user_ty);\n         let local = LocalDecl::<'tcx> {\n             mutability,"}, {"sha": "b56e3d4e77395c49da800af726390bc10d1b553a", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bfe184b1ad14db4b002c3a272adf44e1839822f/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bfe184b1ad14db4b002c3a272adf44e1839822f/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=0bfe184b1ad14db4b002c3a272adf44e1839822f", "patch": "@@ -21,7 +21,7 @@ mod constant;\n \n pub mod pattern;\n pub use self::pattern::{BindingMode, Pattern, PatternKind, PatternRange, FieldPattern};\n-pub(crate) use self::pattern::{PatternTypeProjection, PatternTypeProjections};\n+pub(crate) use self::pattern::PatternTypeProjection;\n \n mod util;\n "}, {"sha": "10d2d7bc1b18b7cb63bc724e5447c51d76a937b5", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 95, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/0bfe184b1ad14db4b002c3a272adf44e1839822f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bfe184b1ad14db4b002c3a272adf44e1839822f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=0bfe184b1ad14db4b002c3a272adf44e1839822f", "patch": "@@ -12,7 +12,7 @@ use hair::util::UserAnnotatedTyHelpers;\n use hair::constant::*;\n \n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n-use rustc::mir::{ProjectionElem, UserTypeProjection, UserTypeProjections};\n+use rustc::mir::{ProjectionElem, UserTypeProjection};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, Lift};\n use rustc::ty::{CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, UserTypeAnnotation};\n@@ -58,105 +58,13 @@ pub struct Pattern<'tcx> {\n }\n \n \n-#[derive(Clone, Debug)]\n-pub(crate) struct PatternTypeProjections<'tcx> {\n-    contents: Vec<(PatternTypeProjection<'tcx>, Span)>,\n-}\n-\n-impl<'tcx> PatternTypeProjections<'tcx> {\n-    pub(crate) fn user_ty(\n-        self,\n-        annotations: &mut CanonicalUserTypeAnnotations<'tcx>,\n-    ) -> UserTypeProjections<'tcx> {\n-        UserTypeProjections::from_projections(\n-            self.contents\n-                .into_iter()\n-                .map(|(pat_ty_proj, span)| (pat_ty_proj.user_ty(annotations, span), span))\n-        )\n-    }\n-\n-    pub(crate) fn none() -> Self {\n-        PatternTypeProjections { contents: vec![] }\n-    }\n-\n-    fn map_projs(&self,\n-                 mut f: impl FnMut(&PatternTypeProjection<'tcx>) -> PatternTypeProjection<'tcx>)\n-                 -> Self\n-    {\n-        PatternTypeProjections {\n-            contents: self.contents\n-                .iter()\n-                .map(|(proj, span)| (f(proj), *span))\n-                .collect(), }\n-    }\n-\n-    pub(crate) fn index(&self) -> Self { self.map_projs(|pat_ty_proj| pat_ty_proj.index()) }\n-\n-    pub(crate) fn subslice(&self, from: u32, to: u32) -> Self {\n-        self.map_projs(|pat_ty_proj| pat_ty_proj.subslice(from, to))\n-    }\n-\n-    pub(crate) fn deref(&self) -> Self { self.map_projs(|pat_ty_proj| pat_ty_proj.deref()) }\n-\n-    pub(crate) fn leaf(&self, field: Field) -> Self {\n-        self.map_projs(|pat_ty_proj| pat_ty_proj.leaf(field))\n-    }\n-\n-    pub(crate) fn variant(&self,\n-                          adt_def: &'tcx AdtDef,\n-                          variant_index: VariantIdx,\n-                          field: Field) -> Self {\n-        self.map_projs(|pat_ty_proj| pat_ty_proj.variant(adt_def, variant_index, field))\n-    }\n-\n-    pub(crate) fn add_user_type(&self, user_ty: &PatternTypeProjection<'tcx>, sp: Span) -> Self {\n-        let mut new = self.clone();\n-        new.contents.push((user_ty.clone(), sp));\n-        new\n-    }\n-}\n-\n #[derive(Clone, Debug)]\n pub struct PatternTypeProjection<'tcx> {\n     pub base: CanonicalUserTypeAnnotation<'tcx>,\n     pub projs: Vec<ProjectionElem<'tcx, (), ()>>,\n }\n \n impl<'tcx> PatternTypeProjection<'tcx> {\n-    pub(crate) fn index(&self) -> Self {\n-        let mut new = self.clone();\n-        new.projs.push(ProjectionElem::Index(()));\n-        new\n-    }\n-\n-    pub(crate) fn subslice(&self, from: u32, to: u32) -> Self {\n-        let mut new = self.clone();\n-        new.projs.push(ProjectionElem::Subslice { from, to });\n-        new\n-    }\n-\n-    pub(crate) fn deref(&self) -> Self {\n-        let mut new = self.clone();\n-        new.projs.push(ProjectionElem::Deref);\n-        new\n-    }\n-\n-    pub(crate) fn leaf(&self, field: Field) -> Self {\n-        let mut new = self.clone();\n-        new.projs.push(ProjectionElem::Field(field, ()));\n-        new\n-    }\n-\n-    pub(crate) fn variant(&self,\n-                          adt_def: &'tcx AdtDef,\n-                          variant_index: VariantIdx,\n-                          field: Field) -> Self {\n-        let mut new = self.clone();\n-        new.projs.push(ProjectionElem::Downcast(adt_def, variant_index));\n-        new.projs.push(ProjectionElem::Field(field, ()));\n-        new\n-    }\n-\n     pub(crate) fn from_user_type(user_annotation: CanonicalUserTypeAnnotation<'tcx>) -> Self {\n         Self {\n             base: user_annotation,\n@@ -169,9 +77,8 @@ impl<'tcx> PatternTypeProjection<'tcx> {\n         annotations: &mut CanonicalUserTypeAnnotations<'tcx>,\n         span: Span,\n     ) -> UserTypeProjection<'tcx> {\n-        let annotation_index = annotations.push((span, self.base));\n         UserTypeProjection {\n-            base: annotation_index,\n+            base: annotations.push((span, self.base)),\n             projs: self.projs\n         }\n     }"}]}