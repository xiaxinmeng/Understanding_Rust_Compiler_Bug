{"sha": "f28796ed99c57b574a16430dd0f7b1b1884740c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyODc5NmVkOTljNTdiNTc0YTE2NDMwZGQwZjdiMWIxODg0NzQwYzY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-10T14:39:09Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-10T14:44:32Z"}, "message": "Fix unsafe uses of mutable references", "tree": {"sha": "d5edb06da32be0e07a6572e796a1c1267390670c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5edb06da32be0e07a6572e796a1c1267390670c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f28796ed99c57b574a16430dd0f7b1b1884740c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f28796ed99c57b574a16430dd0f7b1b1884740c6", "html_url": "https://github.com/rust-lang/rust/commit/f28796ed99c57b574a16430dd0f7b1b1884740c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f28796ed99c57b574a16430dd0f7b1b1884740c6/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fccf0652661f8f76875655628e6a61d7e00bd856", "url": "https://api.github.com/repos/rust-lang/rust/commits/fccf0652661f8f76875655628e6a61d7e00bd856", "html_url": "https://github.com/rust-lang/rust/commit/fccf0652661f8f76875655628e6a61d7e00bd856"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "3838f376bc6325538cf673e76496318ac6641f62", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f28796ed99c57b574a16430dd0f7b1b1884740c6", "patch": "@@ -3889,7 +3889,7 @@ fn trans_for(&@block_ctxt cx,\n fn collect_upvars(&@block_ctxt cx, &ast::block bloc,\n                   &ast::def_id initial_decl) -> vec[ast::def_id] {\n     type env = @rec(\n-        vec[ast::def_id] refs,\n+        mutable vec[ast::def_id] refs,\n         hashmap[ast::def_id,()] decls,\n         resolve::def_map def_map\n     );\n@@ -3923,7 +3923,7 @@ fn collect_upvars(&@block_ctxt cx, &ast::block bloc,\n     let vec[ast::def_id] refs = [];\n     let hashmap[ast::def_id,()] decls = new_def_hash[()]();\n     decls.insert(initial_decl, ());\n-    let env e = @rec(refs=refs,\n+    let env e = @rec(mutable refs=refs,\n                      decls=decls,\n                      def_map=cx.fcx.lcx.ccx.tcx.def_map);\n \n@@ -3934,7 +3934,8 @@ fn collect_upvars(&@block_ctxt cx, &ast::block bloc,\n \n     // Calculate (refs - decls). This is the set of captured upvars.\n     let vec[ast::def_id] result = [];\n-    for (ast::def_id ref_id in e.refs) {\n+    for (ast::def_id ref_id_ in e.refs) {\n+        auto ref_id = ref_id_;\n         if (!decls.contains_key(ref_id)) {\n             result += [ref_id];\n         }"}, {"sha": "67834f7f00fdbbada864d0e0b518c19c8690a205", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=f28796ed99c57b574a16430dd0f7b1b1884740c6", "patch": "@@ -57,14 +57,14 @@ import aux::crate_ctxt;\n import aux::add_node;\n import middle::tstate::ann::empty_ann;\n \n-fn collect_ids_expr(&@expr e, @vec[uint] res) -> () {\n+fn collect_ids_expr(&@expr e, @mutable vec[uint] res) -> () {\n     vec::push(*res, (expr_ann(e)).id);\n }\n-fn collect_ids_block(&block b, @vec[uint] res) -> () {\n+fn collect_ids_block(&block b, @mutable vec[uint] res) -> () {\n     vec::push(*res, b.node.a.id);\n }\n \n-fn collect_ids_stmt(&@stmt s, @vec[uint] res) -> () {\n+fn collect_ids_stmt(&@stmt s, @mutable vec[uint] res) -> () {\n     alt (s.node) {\n         case (stmt_decl(_,?a)) {\n             log(\"node_id \" + uistr(a.id));\n@@ -82,7 +82,7 @@ fn collect_ids_stmt(&@stmt s, @vec[uint] res) -> () {\n     }\n }\n \n-fn collect_ids_decl(&@decl d, @vec[uint] res) -> () {\n+fn collect_ids_decl(&@decl d, @mutable vec[uint] res) -> () {\n     alt (d.node) {\n         case (decl_local(?l)) {\n             vec::push(*res, l.ann.id);\n@@ -92,7 +92,7 @@ fn collect_ids_decl(&@decl d, @vec[uint] res) -> () {\n }\n \n fn node_ids_in_fn(&_fn f, &span sp, &ident i, &def_id d, &ann a,\n-                  @vec[uint] res) -> () {\n+                  @mutable vec[uint] res) -> () {\n     auto collect_ids = walk::default_visitor();\n     collect_ids = rec(visit_expr_pre  = bind collect_ids_expr(_,res),\n                       visit_block_pre = bind collect_ids_block(_,res),\n@@ -102,19 +102,19 @@ fn node_ids_in_fn(&_fn f, &span sp, &ident i, &def_id d, &ann a,\n     walk::walk_fn(collect_ids, f, sp, i, d, a);\n }\n \n-fn init_vecs(&crate_ctxt ccx, @vec[uint] node_ids, uint len) -> () {\n-    for (uint i in *node_ids) {\n+fn init_vecs(&crate_ctxt ccx, &vec[uint] node_ids, uint len) -> () {\n+    for (uint i in node_ids) {\n         log(uistr(i) + \" |-> \" + uistr(len));\n         add_node(ccx, i, empty_ann(len));\n     }\n }\n \n fn visit_fn(&crate_ctxt ccx, uint num_constraints, &_fn f,\n             &span sp, &ident i, &def_id d, &ann a) -> () {\n-    let vec[uint] node_ids_ = [];\n-    let @vec[uint] node_ids = @node_ids_;\n+    let @mutable vec[uint] node_ids = @mutable [];\n     node_ids_in_fn(f, sp, i, d, a, node_ids);\n-    init_vecs(ccx, node_ids, num_constraints);\n+    auto node_id_vec = *node_ids;\n+    init_vecs(ccx, node_id_vec, num_constraints);\n }\n \n fn annotate_in_fn(&crate_ctxt ccx, &_fn f, &span sp, &ident i,"}, {"sha": "dafadab335b2a96e44666200ef215aec3c3803f5", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=f28796ed99c57b574a16430dd0f7b1b1884740c6", "patch": "@@ -216,7 +216,7 @@ type pred_desc_ = rec(vec[@constr_arg] args,\n type pred_desc = spanned[pred_desc_];\n tag constraint {\n     cinit(uint, span, ident);\n-    cpred(path, @vec[pred_desc]);\n+    cpred(path, @mutable vec[pred_desc]);\n }\n tag constr_ {\n     ninit(ident);\n@@ -239,7 +239,7 @@ type constr_map = @std::map::hashmap[def_id, constraint];\n type fn_info  = rec(constr_map constrs, uint num_constraints, controlflow cf);\n \n /* mapping from node ID to typestate annotation */\n-type node_ann_table = @vec[ts_ann];\n+type node_ann_table = @mutable vec[ts_ann];\n \n /* mapping from function name to fn_info map */\n type fn_info_map = @std::map::hashmap[def_id, fn_info];\n@@ -470,7 +470,7 @@ fn num_constraints(fn_info m) -> uint {\n \n fn new_crate_ctxt(ty::ctxt cx) -> crate_ctxt {\n     let vec[ts_ann] na = [];\n-    ret rec(tcx=cx, node_anns=@na, fm=@new_def_hash[fn_info]());\n+    ret rec(tcx=cx, node_anns=@mutable na, fm=@new_def_hash[fn_info]());\n }\n \n fn controlflow_def_id(&crate_ctxt ccx, &def_id d) -> controlflow {\n@@ -551,10 +551,10 @@ fn constraints(&fn_ctxt fcx) -> vec[norm_constraint] {\n // FIXME:\n // this probably doesn't handle name shadowing well (or at all)\n // variables should really always be id'd by def_id and not ident\n-fn match_args(&fn_ctxt fcx, @vec[pred_desc] occs,\n+fn match_args(&fn_ctxt fcx, vec[pred_desc] occs,\n               vec[@constr_arg] occ) -> uint {\n     log (\"match_args: looking at \" + constr_args_to_str(occ));\n-    for (pred_desc pd in *occs) {\n+    for (pred_desc pd in occs) {\n         log (\"match_args: candidate \" + pred_desc_to_str(pd));\n         if (ty::args_eq(pd.node.args, occ)) {\n             ret pd.node.bit_num;"}, {"sha": "70a42c245568ed62c61df7249fc59628ff8cc492", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=f28796ed99c57b574a16430dd0f7b1b1884740c6", "patch": "@@ -53,7 +53,7 @@ fn bit_num(&fn_ctxt fcx, &def_id v, &constr_occ o) -> uint {\n         case (occ_args(?args)) {\n             alt (res) {\n                 case (cpred(_, ?descs)) {\n-                    ret match_args(fcx, descs, args);\n+                    ret match_args(fcx, *descs, args);\n                 }\n                 case (_) {\n                     fcx.ccx.tcx.sess.bug(\"bit_num: asked for pred constraint,\""}, {"sha": "bcb50271f3378bbd23b2fa9a3affb3b9912fcb06", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=f28796ed99c57b574a16430dd0f7b1b1884740c6", "patch": "@@ -25,7 +25,7 @@ import util::common::uistr;\n import util::common::span;\n import util::common::respan;\n \n-type ctxt = rec(@vec[constraint_info] cs,\n+type ctxt = rec(@mutable vec[constraint_info] cs,\n                 ty::ctxt tcx);\n \n fn collect_local(&ctxt cx, &@decl d) -> () {\n@@ -52,7 +52,7 @@ fn collect_pred(&ctxt cx, &@expr e) -> () {\n \n fn find_locals(&ty::ctxt tcx, &_fn f, &span sp, &ident i, &def_id d, &ann a)\n     -> ctxt {\n-    let ctxt cx = rec(cs=@vec::alloc[constraint_info](0u), tcx=tcx);\n+    let ctxt cx = rec(cs=@mutable vec::alloc[constraint_info](0u), tcx=tcx);\n     auto visitor = walk::default_visitor();\n     visitor = rec(visit_decl_pre=bind collect_local(cx,_),\n                   visit_expr_pre=bind collect_pred(cx,_)\n@@ -86,7 +86,8 @@ fn add_constraint(&ty::ctxt tcx, constraint_info c, uint next, constr_map tbl)\n                 }\n                 case (none[constraint]) {\n                      tbl.insert(c.id, cpred(p,\n-                      @[respan(cn.span, rec(args=args, bit_num=next))]));\n+                      @mutable [respan(cn.span, rec(args=args,\n+                                                    bit_num=next))]));\n                 }\n             }\n         }\n@@ -110,7 +111,7 @@ fn mk_fn_info(&crate_ctxt ccx, &_fn f, &span f_sp,\n     /* now we have to add bit nums for both the constraints\n        and the variables... */\n \n-    for (constraint_info c in *cx.cs) {\n+    for (constraint_info c in {*cx.cs}) {\n         next = add_constraint(cx.tcx, c, next, res_map);\n     }\n     /* add a pseudo-entry for the function's return value"}, {"sha": "6e4cfe9a61d71000515f63218d2915d6e4dc7595", "filename": "src/lib/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Flib%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Flib%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftime.rs?ref=f28796ed99c57b574a16430dd0f7b1b1884740c6", "patch": "@@ -5,8 +5,8 @@ native \"rust\" mod rustrt {\n type timeval = rec(u32 sec, u32 usec);\n \n fn get_time() -> timeval {\n-    let timeval res = rec(sec=0u32, usec=0u32);\n-    rustrt::get_time(res.sec, res.usec);\n-    ret res;\n+    auto sec = 0u32; auto usec = 0u32;\n+    rustrt::get_time(sec, usec);\n+    ret rec(sec=sec, usec=usec);\n }\n "}, {"sha": "dbbe4b132a347244b42a505f8d61455c319643a7", "filename": "src/lib/vec.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=f28796ed99c57b574a16430dd0f7b1b1884740c6", "patch": "@@ -293,6 +293,14 @@ fn member[T](&T x, &array[T] v) -> bool {\n     ret false;\n }\n \n+fn count[T](&T x, &array[T] v) -> uint {\n+    auto cnt = 0u;\n+    for (T elt in v) {\n+        if (x == elt) { cnt += 1u; }\n+    }\n+    ret cnt;\n+}\n+\n fn foldl[T, U](fn (&U, &T) -> U p, &U z, &vec[T] v) -> U {\n     auto sz = len[T](v);\n "}, {"sha": "9ff9f2181cc414fc4c0b3a5a26e00c176f8a4cb4", "filename": "src/test/run-pass/vec-push.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Ftest%2Frun-pass%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f28796ed99c57b574a16430dd0f7b1b1884740c6/src%2Ftest%2Frun-pass%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-push.rs?ref=f28796ed99c57b574a16430dd0f7b1b1884740c6", "patch": "@@ -3,7 +3,7 @@ fn push[T](&mutable vec[mutable? T] v, &T t) {\n }\n \n fn main() {\n-    auto v = @[1, 2, 3];\n-    push[int](*v, 1);\n+    auto v = [1, 2, 3];\n+    push(v, 1);\n }\n "}]}