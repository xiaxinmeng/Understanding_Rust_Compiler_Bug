{"sha": "7c4debdb7c606890006c68278b7d4ea6146834e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNGRlYmRiN2M2MDY4OTAwMDZjNjgyNzhiN2Q0ZWE2MTQ2ODM0ZTI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-30T19:25:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Add functions to remove loads stores etc", "tree": {"sha": "3929453566f35e747625e6b24dc059d498491307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3929453566f35e747625e6b24dc059d498491307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c4debdb7c606890006c68278b7d4ea6146834e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4debdb7c606890006c68278b7d4ea6146834e2", "html_url": "https://github.com/rust-lang/rust/commit/7c4debdb7c606890006c68278b7d4ea6146834e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c4debdb7c606890006c68278b7d4ea6146834e2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79148a3c1e962e030105a88b5ed694b593ad100d", "url": "https://api.github.com/repos/rust-lang/rust/commits/79148a3c1e962e030105a88b5ed694b593ad100d", "html_url": "https://github.com/rust-lang/rust/commit/79148a3c1e962e030105a88b5ed694b593ad100d"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "340f16b587d95037b851e054f0559b84fb7ed438", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7c4debdb7c606890006c68278b7d4ea6146834e2/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4debdb7c606890006c68278b7d4ea6146834e2/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=7c4debdb7c606890006c68278b7d4ea6146834e2", "patch": "@@ -59,6 +59,31 @@ impl StackSlotUsage {\n             }\n         }).collect::<Vec<Inst>>()\n     }\n+\n+    fn remove_unused_stack_addr(&mut self, func: &mut Function, inst: Inst) {\n+        func.dfg.detach_results(inst);\n+        func.dfg.replace(inst).nop();\n+        self.stack_addr.remove(&inst);\n+    }\n+\n+    fn remove_unused_load(&mut self, func: &mut Function, load: Inst) {\n+        func.dfg.detach_results(load);\n+        func.dfg.replace(load).nop();\n+        self.stack_load.remove(&load);\n+    }\n+\n+    fn remove_dead_store(&mut self, func: &mut Function, store: Inst) {\n+        func.dfg.replace(store).nop();\n+        self.stack_store.remove(&store);\n+    }\n+\n+    fn change_load_to_alias(&mut self, func: &mut Function, load: Inst, value: Value) {\n+        let loaded_value = func.dfg.inst_results(load)[0];\n+        func.dfg.detach_results(load);\n+        func.dfg.replace(load).nop();\n+        func.dfg.change_to_alias(loaded_value, value);\n+        self.stack_load.remove(&load);\n+    }\n }\n \n struct OptimizeContext<'a> {\n@@ -159,10 +184,7 @@ pub(super) fn optimize_function(\n                     let stored_type = opt_ctx.ctx.func.dfg.value_type(stored_value);\n                     if stored_type == loaded_type && store_ebb == load_ebb {\n                         println!(\"Store to load forward {} -> {}\", store, load);\n-                        opt_ctx.ctx.func.dfg.detach_results(load);\n-                        opt_ctx.ctx.func.dfg.replace(load).nop();\n-                        opt_ctx.ctx.func.dfg.change_to_alias(loaded_value, stored_value);\n-                        users.stack_load.remove(&load);\n+                        users.change_load_to_alias(&mut opt_ctx.ctx.func, load, stored_value);\n                     }\n                 }\n                 _ => {} // FIXME implement this\n@@ -186,8 +208,7 @@ pub(super) fn optimize_function(\n                 // Never loaded; can safely remove all stores and the stack slot.\n                 // FIXME also remove stores when there is always a next store before a load.\n                 println!(\"[{}] Remove dead stack store {} of {}\", name, opt_ctx.ctx.func.dfg.display_inst(store, None), stack_slot.0);\n-                opt_ctx.ctx.func.dfg.replace(store).nop();\n-                users.stack_store.remove(&store);\n+                users.remove_dead_store(&mut opt_ctx.ctx.func, store);\n             }\n         }\n \n@@ -265,17 +286,13 @@ fn remove_unused_stack_addr_and_stack_load(opt_ctx: &mut OptimizeContext) {\n         // FIXME remove clone\n         for &inst in stack_slot_users.stack_addr.clone().iter() {\n             if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n-                opt_ctx.ctx.func.dfg.detach_results(inst);\n-                opt_ctx.ctx.func.dfg.replace(inst).nop();\n-                stack_slot_users.stack_addr.remove(&inst);\n+                stack_slot_users.remove_unused_stack_addr(&mut opt_ctx.ctx.func, inst);\n             }\n         }\n \n         for &inst in stack_slot_users.stack_load.clone().iter() {\n             if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n-                opt_ctx.ctx.func.dfg.detach_results(inst);\n-                opt_ctx.ctx.func.dfg.replace(inst).nop();\n-                stack_slot_users.stack_load.remove(&inst);\n+                stack_slot_users.remove_unused_load(&mut opt_ctx.ctx.func, inst);\n             }\n         }\n     }"}]}