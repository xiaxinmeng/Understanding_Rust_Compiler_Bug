{"sha": "84f9bf1a06e1ae9293a6f6a3caf66140f46beb46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZjliZjFhMDZlMWFlOTI5M2E2ZjZhM2NhZjY2MTQwZjQ2YmViNDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-07T01:37:03Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:48:45Z"}, "message": "refactor parse_address_of -> parse_borrow_expr", "tree": {"sha": "f926a8fdc0f2da158163e4d95ec4cf286f531df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f926a8fdc0f2da158163e4d95ec4cf286f531df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f9bf1a06e1ae9293a6f6a3caf66140f46beb46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f9bf1a06e1ae9293a6f6a3caf66140f46beb46", "html_url": "https://github.com/rust-lang/rust/commit/84f9bf1a06e1ae9293a6f6a3caf66140f46beb46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f9bf1a06e1ae9293a6f6a3caf66140f46beb46/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af5ac23a23b3e17c47c216858620b01d3b16e471", "url": "https://api.github.com/repos/rust-lang/rust/commits/af5ac23a23b3e17c47c216858620b01d3b16e471", "html_url": "https://github.com/rust-lang/rust/commit/af5ac23a23b3e17c47c216858620b01d3b16e471"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "141da96e83417c4caa6b8460eec2b3c72d545304", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/84f9bf1a06e1ae9293a6f6a3caf66140f46beb46/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f9bf1a06e1ae9293a6f6a3caf66140f46beb46/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=84f9bf1a06e1ae9293a6f6a3caf66140f46beb46", "patch": "@@ -481,7 +481,7 @@ impl<'a> Parser<'a> {\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n                 (lo.to(span), self.mk_unary(UnOp::Deref, e))\n             }\n-            token::BinOp(token::And) | token::AndAnd => self.parse_address_of(lo)?,\n+            token::BinOp(token::And) | token::AndAnd => self.parse_borrow_expr(lo)?,\n             token::Ident(..) if self.token.is_keyword(kw::Box) => {\n                 self.bump();\n                 let e = self.parse_prefix_expr(None);\n@@ -637,20 +637,27 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse `& mut? <expr>` or `& raw [ const | mut ] <expr>`.\n-    fn parse_address_of(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n+    fn parse_borrow_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n         self.expect_and()?;\n-        let (k, m) = if self.check_keyword(kw::Raw) && self.look_ahead(1, Token::is_mutability) {\n+        let (borrow_kind, mutbl) = self.parse_borrow_modifiers(lo);\n+        let expr = self.parse_prefix_expr(None);\n+        let (span, expr) = self.interpolated_or_expr_span(expr)?;\n+        Ok((lo.to(span), ExprKind::AddrOf(borrow_kind, mutbl, expr)))\n+    }\n+\n+    /// Parse `mut?` or `raw [ const | mut ]`.\n+    fn parse_borrow_modifiers(&mut self, lo: Span) -> (ast::BorrowKind, ast::Mutability) {\n+        if self.check_keyword(kw::Raw) && self.look_ahead(1, Token::is_mutability) {\n+            // `raw [ const | mut ]`.\n             let found_raw = self.eat_keyword(kw::Raw);\n             assert!(found_raw);\n             let mutability = self.parse_const_or_mut().unwrap();\n             self.sess.gated_spans.gate(sym::raw_ref_op, lo.to(self.prev_span));\n             (ast::BorrowKind::Raw, mutability)\n         } else {\n+            // `mut?`\n             (ast::BorrowKind::Ref, self.parse_mutability())\n-        };\n-        let e = self.parse_prefix_expr(None);\n-        let (span, e) = self.interpolated_or_expr_span(e)?;\n-        Ok((lo.to(span), ExprKind::AddrOf(k, m, e)))\n+        }\n     }\n \n     /// Parses `a.b` or `a(13)` or `a[4]` or just `a`."}]}