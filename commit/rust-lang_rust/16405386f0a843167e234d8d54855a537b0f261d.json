{"sha": "16405386f0a843167e234d8d54855a537b0f261d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NDA1Mzg2ZjBhODQzMTY3ZTIzNGQ4ZDU0ODU1YTUzN2IwZjI2MWQ=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-28T01:20:14Z"}, "committer": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-31T02:45:17Z"}, "message": "core: added support for bessel functions", "tree": {"sha": "dd660000a4b5bf5d952e5d5e0da0fcca77ade94c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd660000a4b5bf5d952e5d5e0da0fcca77ade94c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16405386f0a843167e234d8d54855a537b0f261d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16405386f0a843167e234d8d54855a537b0f261d", "html_url": "https://github.com/rust-lang/rust/commit/16405386f0a843167e234d8d54855a537b0f261d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16405386f0a843167e234d8d54855a537b0f261d/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a72b1413edec32c3e9cd5b2ef5f12636a0b75a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/a72b1413edec32c3e9cd5b2ef5f12636a0b75a92", "html_url": "https://github.com/rust-lang/rust/commit/a72b1413edec32c3e9cd5b2ef5f12636a0b75a92"}], "stats": {"total": 196, "additions": 104, "deletions": 92}, "files": [{"sha": "85f8a8ed49cfc6c019d7c1ee7f21152c6ad25507", "filename": "src/libcore/bessel.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Fbessel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Fbessel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbessel.rs?ref=16405386f0a843167e234d8d54855a537b0f261d", "patch": "@@ -0,0 +1,10 @@\n+// PORT import module that is based on cmath::c_double here\n+// (cant do better via libm; bessel functions only exist for c_double)\n+\n+// code that wants to use bessel functions should use\n+// values of type bessel::t and cast from/to float/f32/f64 \n+// when working with them at the peril of precision loss \n+// for platform neutrality\n+\n+import f64::*;\n+"}, {"sha": "dd922ddf1bcb61c37046779249a9493cf5d90d7c", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=16405386f0a843167e234d8d54855a537b0f261d", "patch": "@@ -1,6 +1,5 @@\n export c_double;\n export c_float;\n-export bessel;\n \n import ctypes::c_int;\n import ctypes::c_float;\n@@ -57,6 +56,16 @@ native mod c_double {\n     pure fn tanh(n: c_double) -> c_double;\n     pure fn tgamma(n: c_double) -> c_double;\n     pure fn trunc(n: c_double) -> c_double;\n+\n+    // These are commonly only available for doubles\n+\n+    pure fn j0(n: c_double) -> c_double;\n+    pure fn j1(n: c_double) -> c_double;\n+    pure fn jn(i: c_int, n: c_double) -> c_double;\n+\n+    pure fn y0(n: c_double) -> c_double;\n+    pure fn y1(n: c_double) -> c_double;\n+    pure fn yn(i: c_int, n: c_double) -> c_double;\n }\n \n #[link_name = \"m\"]\n@@ -83,7 +92,7 @@ native mod c_float {\n     #[link_name=\"fabsf\"] pure fn abs(n: c_float) -> c_float;\n     #[link_name=\"fdimf\"] pure fn sub_pos(a: c_float, b: c_float) -> c_float;\n     #[link_name=\"floorf\"] pure fn floor(n: c_float) -> c_float;\n-    #[link_name=\"frexpf\"] pure fn frexp(n: c_double,\n+    #[link_name=\"frexpf\"] pure fn frexp(n: c_float,\n                                         &value: c_int) -> c_float;\n     #[link_name=\"fmaf\"] pure fn mul_add(a: c_float,\n                                         b: c_float, c: c_float) -> c_float;\n@@ -97,7 +106,7 @@ native mod c_float {\n                                             &sign: c_int) -> c_float;\n     #[link_name=\"logf\"] pure fn ln(n: c_float) -> c_float;\n     #[link_name=\"logbf\"] pure fn logb(n: c_float) -> c_float;\n-    #[link_name=\"log1p\"] pure fn ln1p(n: c_double) -> c_double;\n+    #[link_name=\"log1pf\"] pure fn ln1p(n: c_float) -> c_float;\n     #[link_name=\"log2f\"] pure fn log2(n: c_float) -> c_float;\n     #[link_name=\"log10f\"] pure fn log10(n: c_float) -> c_float;\n     #[link_name=\"ilogbf\"] pure fn ilogb(n: c_float) -> c_int;\n@@ -116,18 +125,6 @@ native mod c_float {\n     #[link_name=\"truncf\"] pure fn trunc(n: c_float) -> c_float;\n }\n \n-#[link_name = \"m\"]\n-#[abi = \"cdecl\"]\n-native mod bessel {\n-    pure fn j0(n: c_double) -> c_double;\n-    pure fn j1(n: c_double) -> c_double;\n-    pure fn jn(i: c_int, n: c_double) -> c_double;\n-\n-    pure fn y0(n: c_double) -> c_double;\n-    pure fn y1(n: c_double) -> c_double;\n-    pure fn yn(i: c_int, n: c_double) -> c_double;\n-}\n-\n //\n // Local Variables:\n // mode: rust"}, {"sha": "e1e10789e4b04c0271e07c110d031212c4be329e", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=16405386f0a843167e234d8d54855a537b0f261d", "patch": "@@ -7,7 +7,7 @@\n #[license = \"BSD\"];\n #[crate_type = \"lib\"];\n \n-export box, char, float, f32, f64, int, str, ptr;\n+export box, char, float, bessel, f32, f64, int, str, ptr;\n export uint, u8, u32, u64, vec, bool;\n export either, option, result;\n export ctypes, sys, unsafe, comm, task;\n@@ -18,6 +18,7 @@ export extfmt;\n mod box;\n mod char;\n mod float;\n+mod bessel;\n mod f32;\n mod f64;\n mod int;"}, {"sha": "26ec20a2ed9fa56e680091c111f6d0aa4a86fbae", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=16405386f0a843167e234d8d54855a537b0f261d", "patch": "@@ -3,20 +3,43 @@ Module: f32\n \n Floating point operations and constants for `f32`\n */\n+\n // PORT\n \n import cmath::c_float::*;\n \n type t = f32;\n \n+\n+// These are not defined inside consts:: for consistency with\n+// the integer types\n+\n+// PORT check per architecture\n+\n+const radix: uint = 2u;\n+\n+const mantissa_digits: uint = 24u;\n+const digits: uint = 6u;\n+\n+const epsilon: f32 = 1.19209290e-07_f32;\n+\n+const min_value: f32 = 1.17549435e-38_f32;\n+const max_value: f32 = 3.40282347e+38_f32;\n+\n+const min_exp: int = -125;\n+const max_exp: int = 128;\n+\n+const min_10_exp: int = -37;\n+const max_10_exp: int = 38;\n+\n /* Const: NaN */\n-const NaN: f32 = 0.0f32/0.0f32;\n+const NaN: f32 = 0.0_f32/0.0_f32;\n \n /* Const: infinity */\n-const infinity: f32 = 1.0f32/0.0f32;\n+const infinity: f32 = 1.0_f32/0.0_f32;\n \n /* Const: neg_infinity */\n-const neg_infinity: f32 = -1.0f32/0.0f32;\n+const neg_infinity: f32 = -1.0_f32/0.0_f32;\n \n /* Predicate: isNaN */\n pure fn isNaN(f: f32) -> bool { f != f }\n@@ -98,114 +121,93 @@ mod consts {\n \n     Archimedes' constant\n     */\n-    const pi: f32 = 3.14159265358979323846264338327950288f32;\n+    const pi: f32 = 3.14159265358979323846264338327950288_f32;\n \n     /*\n     Const: frac_pi_2\n \n     pi/2.0\n     */\n-    const frac_pi_2: f32 = 1.57079632679489661923132169163975144f32;\n+    const frac_pi_2: f32 = 1.57079632679489661923132169163975144_f32;\n \n     /*\n     Const: frac_pi_4\n \n     pi/4.0\n     */\n-    const frac_pi_4: f32 = 0.785398163397448309615660845819875721f32;\n+    const frac_pi_4: f32 = 0.785398163397448309615660845819875721_f32;\n \n     /*\n     Const: frac_1_pi\n \n     1.0/pi\n     */\n-    const frac_1_pi: f32 = 0.318309886183790671537767526745028724f32;\n+    const frac_1_pi: f32 = 0.318309886183790671537767526745028724_f32;\n \n     /*\n     Const: frac_2_pi\n \n     2.0/pi\n     */\n-    const frac_2_pi: f32 = 0.636619772367581343075535053490057448f32;\n+    const frac_2_pi: f32 = 0.636619772367581343075535053490057448_f32;\n \n     /*\n     Const: frac_2_sqrtpi\n \n     2.0/sqrt(pi)\n     */\n-    const frac_2_sqrtpi: f32 = 1.12837916709551257389615890312154517f32;\n+    const frac_2_sqrtpi: f32 = 1.12837916709551257389615890312154517_f32;\n \n     /*\n     Const: sqrt2\n \n     sqrt(2.0)\n     */\n-    const sqrt2: f32 = 1.41421356237309504880168872420969808f32;\n+    const sqrt2: f32 = 1.41421356237309504880168872420969808_f32;\n \n     /*\n     Const: frac_1_sqrt2\n \n     1.0/sqrt(2.0)\n     */\n-    const frac_1_sqrt2: f32 = 0.707106781186547524400844362104849039f32;\n+    const frac_1_sqrt2: f32 = 0.707106781186547524400844362104849039_f32;\n \n     /*\n     Const: e\n \n     Euler's number\n     */\n-    const e: f32 = 2.71828182845904523536028747135266250f32;\n+    const e: f32 = 2.71828182845904523536028747135266250_f32;\n \n     /*\n     Const: log2_e\n \n     log2(e)\n     */\n-    const log2_e: f32 = 1.44269504088896340735992468100189214f32;\n+    const log2_e: f32 = 1.44269504088896340735992468100189214_f32;\n \n     /*\n     Const: log10_e\n \n     log10(e)\n     */\n-    const log10_e: f32 = 0.434294481903251827651128918916605082f32;\n+    const log10_e: f32 = 0.434294481903251827651128918916605082_f32;\n \n     /*\n     Const: ln_2\n \n     ln(2.0)\n     */\n-    const ln_2: f32 = 0.693147180559945309417232121458176568f32;\n+    const ln_2: f32 = 0.693147180559945309417232121458176568_f32;\n \n     /*\n     Const: ln_10\n \n     ln(10.0)\n     */\n-    const ln_10: f32 = 2.30258509299404568401799145468436421f32;\n+    const ln_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n \n-// These are not defined inside consts:: for consistency with\n-// the integer types\n-\n-// PORT check per architecture\n-\n-const radix: uint = 2u;\n-\n-const mantissa_digits: uint = 24u;\n-const digits: uint = 6u;\n-\n-const epsilon: f32 = 1.19209290e-07f32;\n-\n-const min_value: f32 = 1.17549435e-38f32;\n-const max_value: f32 = 3.40282347e+38f32;\n-\n-const min_exp: int = -125;\n-const max_exp: int = 128;\n-\n-const min_10_exp: int = -37;\n-const max_10_exp: int = 38;\n-\n //\n // Local Variables:\n // mode: rust"}, {"sha": "c7ee7e1a5dbfa94fa660c79e4849062b2e8f3835", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=16405386f0a843167e234d8d54855a537b0f261d", "patch": "@@ -10,14 +10,36 @@ import cmath::c_double::*;\n \n type t = f64;\n \n+\n+// These are not defined inside consts:: for consistency with\n+// the integer types\n+\n+// PORT check per architecture\n+\n+const radix: uint = 2u;\n+\n+const mantissa_digits: uint = 53u;\n+const digits: uint = 15u;\n+\n+const epsilon: f64 = 2.2204460492503131e-16_f64;\n+\n+const min_value: f64 = 2.2250738585072014e-308_f64;\n+const max_value: f64 = 1.7976931348623157e+308_f64;\n+\n+const min_exp: int = -1021;\n+const max_exp: int = 1024;\n+\n+const min_10_exp: int = -307;\n+const max_10_exp: int = 308;\n+\n /* Const: NaN */\n-const NaN: f64 = 0.0f64/0.0f64;\n+const NaN: f64 = 0.0_f64/0.0_f64;\n \n /* Const: infinity */\n-const infinity: f64 = 1.0f64/0.0f64;\n+const infinity: f64 = 1.0_f64/0.0_f64;\n \n /* Const: neg_infinity */\n-const neg_infinity: f64 = -1.0f64/0.0f64;\n+const neg_infinity: f64 = -1.0_f64/0.0_f64;\n \n /* Predicate: isNaN */\n pure fn isNaN(f: f64) -> bool { f != f }\n@@ -99,114 +121,93 @@ mod consts {\n \n     Archimedes' constant\n     */\n-    const pi: f64 = 3.14159265358979323846264338327950288f64;\n+    const pi: f64 = 3.14159265358979323846264338327950288_f64;\n \n     /*\n     Const: frac_pi_2\n \n     pi/2.0\n     */\n-    const frac_pi_2: f64 = 1.57079632679489661923132169163975144f64;\n+    const frac_pi_2: f64 = 1.57079632679489661923132169163975144_f64;\n \n     /*\n     Const: frac_pi_4\n \n     pi/4.0\n     */\n-    const frac_pi_4: f64 = 0.785398163397448309615660845819875721f64;\n+    const frac_pi_4: f64 = 0.785398163397448309615660845819875721_f64;\n \n     /*\n     Const: frac_1_pi\n \n     1.0/pi\n     */\n-    const frac_1_pi: f64 = 0.318309886183790671537767526745028724f64;\n+    const frac_1_pi: f64 = 0.318309886183790671537767526745028724_f64;\n \n     /*\n     Const: frac_2_pi\n \n     2.0/pi\n     */\n-    const frac_2_pi: f64 = 0.636619772367581343075535053490057448f64;\n+    const frac_2_pi: f64 = 0.636619772367581343075535053490057448_f64;\n \n     /*\n     Const: frac_2_sqrtpi\n \n     2.0/sqrt(pi)\n     */\n-    const frac_2_sqrtpi: f64 = 1.12837916709551257389615890312154517f64;\n+    const frac_2_sqrtpi: f64 = 1.12837916709551257389615890312154517_f64;\n \n     /*\n     Const: sqrt2\n \n     sqrt(2.0)\n     */\n-    const sqrt2: f64 = 1.41421356237309504880168872420969808f64;\n+    const sqrt2: f64 = 1.41421356237309504880168872420969808_f64;\n \n     /*\n     Const: frac_1_sqrt2\n \n     1.0/sqrt(2.0)\n     */\n-    const frac_1_sqrt2: f64 = 0.707106781186547524400844362104849039f64;\n+    const frac_1_sqrt2: f64 = 0.707106781186547524400844362104849039_f64;\n \n     /*\n     Const: e\n \n     Euler's number\n     */\n-    const e: f64 = 2.71828182845904523536028747135266250f64;\n+    const e: f64 = 2.71828182845904523536028747135266250_f64;\n \n     /*\n     Const: log2_e\n \n     log2(e)\n     */\n-    const log2_e: f64 = 1.44269504088896340735992468100189214f64;\n+    const log2_e: f64 = 1.44269504088896340735992468100189214_f64;\n \n     /*\n     Const: log10_e\n \n     log10(e)\n     */\n-    const log10_e: f64 = 0.434294481903251827651128918916605082f64;\n+    const log10_e: f64 = 0.434294481903251827651128918916605082_f64;\n \n     /*\n     Const: ln_2\n \n     ln(2.0)\n     */\n-    const ln_2: f64 = 0.693147180559945309417232121458176568f64;\n+    const ln_2: f64 = 0.693147180559945309417232121458176568_f64;\n \n     /*\n     Const: ln_10\n \n     ln(10.0)\n     */\n-    const ln_10: f64 = 2.30258509299404568401799145468436421f64;\n+    const ln_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n \n-// These are not defined inside consts:: for consistency with\n-// the integer types\n-\n-// PORT check per architecture\n-\n-const radix: uint = 2u;\n-\n-const mantissa_digits: uint = 53u;\n-const digits: uint = 15u;\n-\n-const epsilon: f64 = 2.2204460492503131e-16f64;\n-\n-const min_value: f64 = 2.2250738585072014e-308f64;\n-const max_value: f64 = 1.7976931348623157e+308f64;\n-\n-const min_exp: int = -1021;\n-const max_exp: int = 1024;\n-\n-const min_10_exp: int = -307;\n-const max_10_exp: int = 308;\n-\n //\n // Local Variables:\n // mode: rust"}, {"sha": "cf8ea28a00b66b2ce7027101b40693cd9f112756", "filename": "src/libcore/float.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16405386f0a843167e234d8d54855a537b0f261d/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=16405386f0a843167e234d8d54855a537b0f261d", "patch": "@@ -2,7 +2,7 @@\n Module: float\n */\n \n-// PORT This must match in width according to architecture\n+// PORT this must match in width according to architecture\n \n import m_float = f64;\n import m_float::*;\n@@ -25,11 +25,12 @@ digits - The number of significant digits\n exact - Whether to enforce the exact number of significant digits\n */\n fn to_str_common(num: float, digits: uint, exact: bool) -> str {\n+    if isNaN(num) { ret \"NaN\"; }\n     let (num, accum) = num < 0.0 ? (-num, \"-\") : (num, \"\");\n     let trunc = num as uint;\n     let frac = num - (trunc as float);\n     accum += uint::str(trunc);\n-    if frac == 0.0 || digits == 0u { ret accum; }\n+    if frac < epsilon || digits == 0u { ret accum; }\n     accum += \".\";\n     let i = digits;\n     let epsilon = 1. / pow_uint_to_uint_as_float(10u, i);"}]}