{"sha": "f58a1bfa981eee4ba4d4c3c801f94772e4ab0019", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OGExYmZhOTgxZWVlNGJhNGQ0YzNjODAxZjk0NzcyZTRhYjAwMTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T15:41:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-16T15:55:37Z"}, "message": "Fix fallout in libsyntax from RFC 599. Clarity and efficiency seems to be mostly improved, to my eye.\nNonetheless, as this commit demonstrates, the previous commits was a [breaking-change].\n\nIn practice, breakage is focused on functions of this form:\n\n```rust\nfn foo(..., object: Box<FnMut()>)\n````\n\nwhere `FnMut()` could be any trait object type. The older scheme defaulted objects in argument\nposition so that they were bounded by a fresh lifetime:\n\n```rust\nfn foo<'a>(..., object: Box<FnMut()+'a>)\n```\n\nThis meant that the object could contain borrowed data. The newer\nscheme defaults to a lifetime bound of `'static`:\n\n```rust\nfn foo(..., object: Box<FnMut()+'static>)\n```\n\nThis means that the object cannot contain borrowed data. In some cases, the best fix\nis to stop using `Box`:\n\n```rust\nfn foo(..., object: &mut FnMut())\n```\n\nbut another option is to write an explicit annotation for the `'a`\nlifetime that used to be implicit.  Both fixes are demonstrated in\nthis commit.", "tree": {"sha": "9bbdee51ea1d846b8af6aa3549de7b76f2d69891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bbdee51ea1d846b8af6aa3549de7b76f2d69891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f58a1bfa981eee4ba4d4c3c801f94772e4ab0019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f58a1bfa981eee4ba4d4c3c801f94772e4ab0019", "html_url": "https://github.com/rust-lang/rust/commit/f58a1bfa981eee4ba4d4c3c801f94772e4ab0019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f58a1bfa981eee4ba4d4c3c801f94772e4ab0019/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "369adaf5150877c124de99a1b9a94f7b522aade6", "url": "https://api.github.com/repos/rust-lang/rust/commits/369adaf5150877c124de99a1b9a94f7b522aade6", "html_url": "https://github.com/rust-lang/rust/commit/369adaf5150877c124de99a1b9a94f7b522aade6"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "083039995ee955ce5366292ceff367578e6b0a6e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f58a1bfa981eee4ba4d4c3c801f94772e4ab0019/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58a1bfa981eee4ba4d4c3c801f94772e4ab0019/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f58a1bfa981eee4ba4d4c3c801f94772e4ab0019", "patch": "@@ -35,18 +35,18 @@ pub trait ItemDecorator {\n               sp: Span,\n               meta_item: &ast::MetaItem,\n               item: &ast::Item,\n-              push: Box<FnMut(P<ast::Item>)>);\n+              push: &mut FnMut(P<ast::Item>));\n }\n \n impl<F> ItemDecorator for F\n-    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &ast::Item, Box<FnMut(P<ast::Item>)>)\n+    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &ast::Item, &mut FnMut(P<ast::Item>))\n {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               sp: Span,\n               meta_item: &ast::MetaItem,\n               item: &ast::Item,\n-              push: Box<FnMut(P<ast::Item>)>) {\n+              push: &mut FnMut(P<ast::Item>)) {\n         (*self)(ecx, sp, meta_item, item, push)\n     }\n }"}, {"sha": "0ed9e85e57677a19f52fbf890d003032e078a41c", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f58a1bfa981eee4ba4d4c3c801f94772e4ab0019/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58a1bfa981eee4ba4d4c3c801f94772e4ab0019/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=f58a1bfa981eee4ba4d4c3c801f94772e4ab0019", "patch": "@@ -72,15 +72,15 @@ pub fn expand_deprecated_deriving(cx: &mut ExtCtxt,\n                                   span: Span,\n                                   _: &MetaItem,\n                                   _: &Item,\n-                                  _: Box<FnMut(P<Item>)>) {\n+                                  _: &mut FnMut(P<Item>)) {\n     cx.span_err(span, \"`deriving` has been renamed to `derive`\");\n }\n \n pub fn expand_meta_derive(cx: &mut ExtCtxt,\n                           _span: Span,\n                           mitem: &MetaItem,\n                           item: &Item,\n-                          mut push: Box<FnMut(P<Item>)>) {\n+                          push: &mut FnMut(P<Item>)) {\n     match mitem.node {\n         MetaNameValue(_, ref l) => {\n             cx.span_err(l.span, \"unexpected value in `derive`\");"}, {"sha": "fd98f42c2ab03c0693c21e2f75b74980fdf4f7ec", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f58a1bfa981eee4ba4d4c3c801f94772e4ab0019/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f58a1bfa981eee4ba4d4c3c801f94772e4ab0019/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f58a1bfa981eee4ba4d4c3c801f94772e4ab0019", "patch": "@@ -363,7 +363,7 @@ fn expand_mac_invoc<T, F, G>(mac: ast::Mac, span: codemap::Span,\n                              mark_thunk: G,\n                              fld: &mut MacroExpander)\n                              -> Option<T> where\n-    F: FnOnce(Box<MacResult>) -> Option<T>,\n+    F: for<'a> FnOnce(Box<MacResult+'a>) -> Option<T>,\n     G: FnOnce(T, Mrk) -> T,\n {\n     match mac.node {\n@@ -1102,9 +1102,10 @@ fn expand_annotatable(a: Annotatable,\n                     // but that double-mut-borrows fld\n                     let mut items: SmallVector<P<ast::Item>> = SmallVector::zero();\n                     dec.expand(fld.cx, attr.span, &*attr.node.value, &**it,\n-                               box |item| items.push(item));\n-                    decorator_items.extend(items.into_iter()\n-                        .flat_map(|item| expand_item(item, fld).into_iter()));\n+                               &mut |item| items.push(item));\n+                    decorator_items.extend(\n+                        items.into_iter()\n+                             .flat_map(|item| expand_item(item, fld).into_iter()));\n \n                     fld.cx.bt_pop();\n                 }"}]}