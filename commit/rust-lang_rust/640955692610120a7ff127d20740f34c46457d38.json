{"sha": "640955692610120a7ff127d20740f34c46457d38", "node_id": "C_kwDOAAsO6NoAKDY0MDk1NTY5MjYxMDEyMGE3ZmYxMjdkMjA3NDBmMzRjNDY0NTdkMzg", "commit": {"author": {"name": "bluthej", "email": "joffrey.bluthe@e.email", "date": "2023-04-12T11:48:03Z"}, "committer": {"name": "bluthej", "email": "joffrey.bluthe@e.email", "date": "2023-04-12T11:48:03Z"}, "message": "Standardize lint formulation", "tree": {"sha": "0babeb2f644386b48f6fa82ab6ef62909aa844a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0babeb2f644386b48f6fa82ab6ef62909aa844a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640955692610120a7ff127d20740f34c46457d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640955692610120a7ff127d20740f34c46457d38", "html_url": "https://github.com/rust-lang/rust/commit/640955692610120a7ff127d20740f34c46457d38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640955692610120a7ff127d20740f34c46457d38/comments", "author": {"login": "bluthej", "id": 29771403, "node_id": "MDQ6VXNlcjI5NzcxNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/29771403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluthej", "html_url": "https://github.com/bluthej", "followers_url": "https://api.github.com/users/bluthej/followers", "following_url": "https://api.github.com/users/bluthej/following{/other_user}", "gists_url": "https://api.github.com/users/bluthej/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluthej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluthej/subscriptions", "organizations_url": "https://api.github.com/users/bluthej/orgs", "repos_url": "https://api.github.com/users/bluthej/repos", "events_url": "https://api.github.com/users/bluthej/events{/privacy}", "received_events_url": "https://api.github.com/users/bluthej/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluthej", "id": 29771403, "node_id": "MDQ6VXNlcjI5NzcxNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/29771403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluthej", "html_url": "https://github.com/bluthej", "followers_url": "https://api.github.com/users/bluthej/followers", "following_url": "https://api.github.com/users/bluthej/following{/other_user}", "gists_url": "https://api.github.com/users/bluthej/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluthej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluthej/subscriptions", "organizations_url": "https://api.github.com/users/bluthej/orgs", "repos_url": "https://api.github.com/users/bluthej/repos", "events_url": "https://api.github.com/users/bluthej/events{/privacy}", "received_events_url": "https://api.github.com/users/bluthej/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d06001449d56e6e138644e1035c84148a56e557", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d06001449d56e6e138644e1035c84148a56e557", "html_url": "https://github.com/rust-lang/rust/commit/0d06001449d56e6e138644e1035c84148a56e557"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "b984132acf5bb88838edadf4fd7eeaae24f42741", "filename": "clippy_lints/src/allow_attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fallow_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fallow_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fallow_attributes.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -6,7 +6,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// Detects uses of the `#[allow]` attribute and suggests replacing it with\n+    /// Checks for usage of the `#[allow]` attribute and suggests replacing it with\n     /// the `#[expect]` (See [RFC 2383](https://rust-lang.github.io/rfcs/2383-lint-reasons.html))\n     ///\n     /// The expect attribute is still unstable and requires the `lint_reasons`"}, {"sha": "37648f7ba0e37ce5632981d363ee1a2160226af6", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -506,7 +506,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for uses of the `abs()` method that cast the result to unsigned.\n+    /// Checks for usage of the `abs()` method that cast the result to unsigned.\n     ///\n     /// ### Why is this bad?\n     /// The `unsigned_abs()` method avoids panic when called on the MIN value."}, {"sha": "7436e9ce811b1f02d3d27bd87a1c7c8bb5650970", "filename": "clippy_lints/src/crate_in_macro_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -9,7 +9,7 @@ use rustc_span::{symbol::sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `crate` as opposed to `$crate` in a macro definition.\n+    /// Checks for usage of `crate` as opposed to `$crate` in a macro definition.\n     ///\n     /// ### Why is this bad?\n     /// `crate` refers to the macro call's crate, whereas `$crate` refers to the macro definition's"}, {"sha": "ee5a875ade7b539047be7354236a7a5bd3b70e2d", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -19,7 +19,7 @@ use rustc_span::{Span, SyntaxContext, DUMMY_SP};\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for uses of `contains_key` + `insert` on `HashMap`\n+    /// Checks for usage of `contains_key` + `insert` on `HashMap`\n     /// or `BTreeMap`.\n     ///\n     /// ### Why is this bad?"}, {"sha": "3ddee1842a30cabfa85c7b7e9c32bdfaee895d53", "filename": "clippy_lints/src/format_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fformat_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fformat_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_impl.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -51,7 +51,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `println`, `print`, `eprintln` or `eprint` in an\n+    /// Checks for usage of `println`, `print`, `eprintln` or `eprint` in an\n     /// implementation of a formatting trait.\n     ///\n     /// ### Why is this bad?"}, {"sha": "4762b354392b8f227a787110776c56017b5fc9e7", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -10,7 +10,7 @@ use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of the non-existent `=*`, `=!` and `=-`\n+    /// Checks for usage of the non-existent `=*`, `=!` and `=-`\n     /// operators.\n     ///\n     /// ### Why is this bad?"}, {"sha": "bba9bb445a77156e01f572ad005d686b700147db", "filename": "clippy_lints/src/lines_filter_map_ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Flines_filter_map_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Flines_filter_map_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flines_filter_map_ok.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -10,7 +10,7 @@ use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Detect uses of `lines.filter_map(Result::ok)` or `lines.flat_map(Result::ok)`\n+    /// Checks for usage of `lines.filter_map(Result::ok)` or `lines.flat_map(Result::ok)`\n     /// when `lines` has type `std::io::Lines`.\n     ///\n     /// ### Why is this bad?"}, {"sha": "4629b22d1717f66d0d860daea92da88844ac3478", "filename": "clippy_lints/src/manual_bits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_bits.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -13,7 +13,7 @@ use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for uses of `std::mem::size_of::<T>() * 8` when\n+    /// Checks for usage of `std::mem::size_of::<T>() * 8` when\n     /// `T::BITS` is available.\n     ///\n     /// ### Why is this bad?"}, {"sha": "87b63eead253e474f443642e144be5e2a6c9785a", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -843,7 +843,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `Err(x)?`.\n+    /// Checks for usage of `Err(x)?`.\n     ///\n     /// ### Why is this bad?\n     /// The `?` operator is designed to allow calls that\n@@ -878,7 +878,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `match` which could be implemented using `map`\n+    /// Checks for usage of `match` which could be implemented using `map`\n     ///\n     /// ### Why is this bad?\n     /// Using the `map` method is clearer and more concise.\n@@ -902,7 +902,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `match` which could be implemented using `filter`\n+    /// Checks for usage of `match` which could be implemented using `filter`\n     ///\n     /// ### Why is this bad?\n     /// Using the `filter` method is clearer and more concise."}, {"sha": "c213030f6a8f0188d0541905123b7afe4c929421", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -121,7 +121,7 @@ use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `cloned()` on an `Iterator` or `Option` where\n+    /// Checks for usage of `cloned()` on an `Iterator` or `Option` where\n     /// `copied()` could be used instead.\n     ///\n     /// ### Why is this bad?\n@@ -201,7 +201,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `Iterator::flat_map()` where `filter_map()` could be\n+    /// Checks for usage of `Iterator::flat_map()` where `filter_map()` could be\n     /// used instead.\n     ///\n     /// ### Why is this bad?\n@@ -441,7 +441,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `_.unwrap_or_else(Default::default)` on `Option` and\n+    /// Checks for usage of `_.unwrap_or_else(Default::default)` on `Option` and\n     /// `Result` values.\n     ///\n     /// ### Why is this bad?\n@@ -1194,7 +1194,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `.iter().nth()` (and the related\n+    /// Checks for usage of `.iter().nth()` (and the related\n     /// `.iter_mut().nth()`) on standard library types with *O*(1) element access.\n     ///\n     /// ### Why is this bad?\n@@ -1221,7 +1221,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `.skip(x).next()` on iterators.\n+    /// Checks for usage of `.skip(x).next()` on iterators.\n     ///\n     /// ### Why is this bad?\n     /// `.nth(x)` is cleaner\n@@ -1246,7 +1246,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `.drain(..)` on `Vec` and `VecDeque` for iteration.\n+    /// Checks for usage of `.drain(..)` on `Vec` and `VecDeque` for iteration.\n     ///\n     /// ### Why is this bad?\n     /// `.into_iter()` is simpler with better performance.\n@@ -1271,7 +1271,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for using `x.get(x.len() - 1)` instead of\n+    /// Checks for usage of `x.get(x.len() - 1)` instead of\n     /// `x.last()`.\n     ///\n     /// ### Why is this bad?\n@@ -1304,7 +1304,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `.get().unwrap()` (or\n+    /// Checks for usage of `.get().unwrap()` (or\n     /// `.get_mut().unwrap`) on a standard library type which implements `Index`\n     ///\n     /// ### Why is this bad?\n@@ -1475,7 +1475,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for using `fold` when a more succinct alternative exists.\n+    /// Checks for usage of `fold` when a more succinct alternative exists.\n     /// Specifically, this checks for `fold`s which could be replaced by `any`, `all`,\n     /// `sum` or `product`.\n     ///\n@@ -2161,7 +2161,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `str::splitn(2, _)`\n+    /// Checks for usage of `str::splitn(2, _)`\n     ///\n     /// ### Why is this bad?\n     /// `split_once` is both clearer in intent and slightly more efficient.\n@@ -2197,7 +2197,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `str::splitn` (or `str::rsplitn`) where using `str::split` would be the same.\n+    /// Checks for usage of `str::splitn` (or `str::rsplitn`) where using `str::split` would be the same.\n     /// ### Why is this bad?\n     /// The function `split` is simpler and there is no performance difference in these cases, considering\n     /// that both functions return a lazy iterator.\n@@ -2251,7 +2251,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `.collect::<Vec<String>>().join(\"\")` on iterators.\n+    /// Checks for usage of `.collect::<Vec<String>>().join(\"\")` on iterators.\n     ///\n     /// ### Why is this bad?\n     /// `.collect::<String>()` is more concise and might be more performant\n@@ -2377,7 +2377,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `.then_some(..).unwrap_or(..)`\n+    /// Checks for usage of `.then_some(..).unwrap_or(..)`\n     ///\n     /// ### Why is this bad?\n     /// This can be written more clearly with `if .. else ..`\n@@ -2553,7 +2553,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for using `x.get(0)` instead of\n+    /// Checks for usage of `x.get(0)` instead of\n     /// `x.first()`.\n     ///\n     /// ### Why is this bad?\n@@ -2957,7 +2957,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Detects uses of `Vec::sort_by` passing in a closure\n+    /// Checks for usage of `Vec::sort_by` passing in a closure\n     /// which compares the two arguments, either directly or indirectly.\n     ///\n     /// ### Why is this bad?\n@@ -3013,7 +3013,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of File::read_to_end and File::read_to_string.\n+    /// Checks for usage of File::read_to_end and File::read_to_string.\n     ///\n     /// ### Why is this bad?\n     /// `fs::{read, read_to_string}` provide the same functionality when `buf` is empty with fewer imports and no intermediate values."}, {"sha": "99394b9e5fba704df503c02bcc0c38ec3ba64d23", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -1,4 +1,4 @@\n-//! Checks for uses of mutex where an atomic value could be used\n+//! Checks for usage of mutex where an atomic value could be used\n //!\n //! This lint is **allow** by default\n \n@@ -12,7 +12,7 @@ use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `Mutex<X>` where an atomic will do.\n+    /// Checks for usage of `Mutex<X>` where an atomic will do.\n     ///\n     /// ### Why is this bad?\n     /// Using a mutex just to make access to a plain bool or\n@@ -49,7 +49,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of `Mutex<X>` where `X` is an integral\n+    /// Checks for usage of `Mutex<X>` where `X` is an integral\n     /// type.\n     ///\n     /// ### Why is this bad?"}, {"sha": "9ab6743d369436e41b1b83ce804b2a238a1465d4", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -1,4 +1,4 @@\n-//! Checks for uses of const which the type is not `Freeze` (`Cell`-free).\n+//! Checks for usage of const which the type is not `Freeze` (`Cell`-free).\n //!\n //! This lint is **warn** by default.\n "}, {"sha": "19599731bd6ef9e398e279ce4fd7a64ff5bd9c93", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -685,7 +685,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for uses of bitwise and/or operators between booleans, where performance may be improved by using\n+    /// Checks for usage of bitwise and/or operators between booleans, where performance may be improved by using\n     /// a lazy and.\n     ///\n     /// ### Why is this bad?"}, {"sha": "c6834a8fdaa2404e4bb08bf08657bfaf969e5982", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -22,7 +22,7 @@ use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `Box<T>` where T is a collection such as Vec anywhere in the code.\n+    /// Checks for usage of `Box<T>` where T is a collection such as Vec anywhere in the code.\n     /// Check the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n     ///\n     /// ### Why is this bad?\n@@ -52,7 +52,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `Vec<Box<T>>` where T: Sized anywhere in the code.\n+    /// Checks for usage of `Vec<Box<T>>` where T: Sized anywhere in the code.\n     /// Check the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n     ///\n     /// ### Why is this bad?\n@@ -85,7 +85,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `Option<Option<_>>` in function signatures and type\n+    /// Checks for usage of `Option<Option<_>>` in function signatures and type\n     /// definitions\n     ///\n     /// ### Why is this bad?\n@@ -164,7 +164,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `&Box<T>` anywhere in the code.\n+    /// Checks for usage of `&Box<T>` anywhere in the code.\n     /// Check the [Box documentation](https://doc.rust-lang.org/std/boxed/index.html) for more information.\n     ///\n     /// ### Why is this bad?\n@@ -190,7 +190,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of redundant allocations anywhere in the code.\n+    /// Checks for usage of redundant allocations anywhere in the code.\n     ///\n     /// ### Why is this bad?\n     /// Expressions such as `Rc<&T>`, `Rc<Rc<T>>`, `Rc<Arc<T>>`, `Rc<Box<T>>`, `Arc<&T>`, `Arc<Rc<T>>`,"}, {"sha": "00842376628cce223bf9b336d1483c123b348c6c", "filename": "clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -20,7 +20,7 @@ use std::str;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usages of def paths when a diagnostic item or a `LangItem` could be used.\n+    /// Checks for usage of def paths when a diagnostic item or a `LangItem` could be used.\n     ///\n     /// ### Why is this bad?\n     /// The path for an item is subject to change and is less efficient to look up than a"}, {"sha": "f194dc5d4b2ef466f2bdfcbf6c7bb757fcda3647", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640955692610120a7ff127d20740f34c46457d38/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=640955692610120a7ff127d20740f34c46457d38", "patch": "@@ -104,7 +104,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for use of `Debug` formatting. The purpose of this\n+    /// Checks for usage of `Debug` formatting. The purpose of this\n     /// lint is to catch debugging remnants.\n     ///\n     /// ### Why is this bad?"}]}