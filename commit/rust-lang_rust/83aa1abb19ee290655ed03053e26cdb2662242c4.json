{"sha": "83aa1abb19ee290655ed03053e26cdb2662242c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYWExYWJiMTllZTI5MDY1NWVkMDMwNTNlMjZjZGIyNjYyMjQyYzQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-11T11:09:06Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-22T23:40:06Z"}, "message": "std::rand: lengthen the RNG benchmarks.\n\nThis makes them more representative, as the `bh.iter` is a smaller\npercentage of the total time.", "tree": {"sha": "8116f86b63a82f3155eb862a4a0933364115a6a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8116f86b63a82f3155eb862a4a0933364115a6a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83aa1abb19ee290655ed03053e26cdb2662242c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83aa1abb19ee290655ed03053e26cdb2662242c4", "html_url": "https://github.com/rust-lang/rust/commit/83aa1abb19ee290655ed03053e26cdb2662242c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83aa1abb19ee290655ed03053e26cdb2662242c4/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed5f2d7c7c673dcbadcf71444251cebe72e6345b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed5f2d7c7c673dcbadcf71444251cebe72e6345b", "html_url": "https://github.com/rust-lang/rust/commit/ed5f2d7c7c673dcbadcf71444251cebe72e6345b"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "2d2c6e794f83bb7074976ddd105543eb21751c79", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/83aa1abb19ee290655ed03053e26cdb2662242c4/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aa1abb19ee290655ed03053e26cdb2662242c4/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=83aa1abb19ee290655ed03053e26cdb2662242c4", "patch": "@@ -970,41 +970,53 @@ mod bench {\n     use extra::test::BenchHarness;\n     use rand::*;\n     use mem::size_of;\n+    use iter::range;\n+    use option::{Some, None};\n+\n+    static N: u64 = 100;\n \n     #[bench]\n     fn rand_xorshift(bh: &mut BenchHarness) {\n         let mut rng = XorShiftRng::new();\n         do bh.iter {\n-            rng.gen::<uint>();\n+            for _ in range(0, N) {\n+                rng.gen::<uint>();\n+            }\n         }\n-        bh.bytes = size_of::<uint>() as u64;\n+        bh.bytes = size_of::<uint>() as u64 * N;\n     }\n \n     #[bench]\n     fn rand_isaac(bh: &mut BenchHarness) {\n         let mut rng = IsaacRng::new();\n         do bh.iter {\n-            rng.gen::<uint>();\n+            for _ in range(0, N) {\n+                rng.gen::<uint>();\n+            }\n         }\n-        bh.bytes = size_of::<uint>() as u64;\n+        bh.bytes = size_of::<uint>() as u64 * N;\n     }\n \n     #[bench]\n     fn rand_isaac64(bh: &mut BenchHarness) {\n         let mut rng = Isaac64Rng::new();\n         do bh.iter {\n-            rng.gen::<uint>();\n+            for _ in range(0, N) {\n+                rng.gen::<uint>();\n+            }\n         }\n-        bh.bytes = size_of::<uint>() as u64;\n+        bh.bytes = size_of::<uint>() as u64 * N;\n     }\n \n     #[bench]\n     fn rand_std(bh: &mut BenchHarness) {\n         let mut rng = StdRng::new();\n         do bh.iter {\n-            rng.gen::<uint>();\n+            for _ in range(0, N) {\n+                rng.gen::<uint>();\n+            }\n         }\n-        bh.bytes = size_of::<uint>() as u64;\n+        bh.bytes = size_of::<uint>() as u64 * N;\n     }\n \n     #[bench]"}]}