{"sha": "6bad638928ab880bfbad868f07f0690ace2f2c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYWQ2Mzg5MjhhYjg4MGJmYmFkODY4ZjA3ZjA2OTBhY2UyZjJjMzA=", "commit": {"author": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-09-27T04:19:52Z"}, "committer": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-10-07T23:40:14Z"}, "message": "Support inferring `Self` type in enum definitions\n\nSigned-off-by: ice1000 <ice1000kotlin@foxmail.com>", "tree": {"sha": "0c38bc47eda0769ef27c65a5d2bb05e8d4acfd9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c38bc47eda0769ef27c65a5d2bb05e8d4acfd9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bad638928ab880bfbad868f07f0690ace2f2c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bad638928ab880bfbad868f07f0690ace2f2c30", "html_url": "https://github.com/rust-lang/rust/commit/6bad638928ab880bfbad868f07f0690ace2f2c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bad638928ab880bfbad868f07f0690ace2f2c30/comments", "author": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c73193efe29ff4072fd19471fb22cdd2ee05556c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c73193efe29ff4072fd19471fb22cdd2ee05556c", "html_url": "https://github.com/rust-lang/rust/commit/c73193efe29ff4072fd19471fb22cdd2ee05556c"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "cd501d1f694799c084add7acdbe93e21094ec553", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=6bad638928ab880bfbad868f07f0690ace2f2c30", "patch": "@@ -24,7 +24,7 @@ use crate::{\n         U8, USIZE,\n     },\n     nameres::{CrateModuleId, ImportId, ModuleScope, Namespace},\n-    resolve::{Resolver, TypeNs},\n+    resolve::{Resolver, Scope, TypeNs},\n     traits::TraitData,\n     ty::{\n         primitive::{FloatBitness, FloatTy, IntBitness, IntTy, Signedness},\n@@ -465,7 +465,7 @@ impl Enum {\n         // ...and add generic params, if present\n         let p = self.generic_params(db);\n         let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r\n+        r.push_scope(Scope::AdtScope(From::from(self)))\n     }\n }\n "}, {"sha": "c46f7e157cf4e7767cefc2d05cf9082f9e30d4cd", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=6bad638928ab880bfbad868f07f0690ace2f2c30", "patch": "@@ -43,8 +43,10 @@ pub(crate) enum Scope {\n     ModuleScope(ModuleItemMap),\n     /// Brings the generic parameters of an item into scope\n     GenericParams(Arc<GenericParams>),\n-    /// Brings `Self` into scope\n+    /// Brings `Self` in `impl` block into scope\n     ImplBlockScope(ImplBlock),\n+    /// Brings `Self` in enum definition into scope\n+    AdtScope(Adt),\n     /// Local bindings\n     ExprScope(ExprScope),\n }\n@@ -54,6 +56,7 @@ pub enum TypeNs {\n     SelfType(ImplBlock),\n     GenericParam(u32),\n     Adt(Adt),\n+    AdtSelfType(Adt),\n     EnumVariant(EnumVariant),\n     TypeAlias(TypeAlias),\n     BuiltinType(BuiltinType),\n@@ -151,6 +154,12 @@ impl Resolver {\n                         return Some((TypeNs::SelfType(*impl_), idx));\n                     }\n                 }\n+                Scope::AdtScope(adt) => {\n+                    if first_name == &SELF_TYPE {\n+                        let idx = if path.segments.len() == 1 { None } else { Some(1) };\n+                        return Some((TypeNs::AdtSelfType(*adt), idx));\n+                    }\n+                }\n                 Scope::ModuleScope(m) => {\n                     let (module_def, idx) = m.crate_def_map.resolve_path(db, m.module_id, path);\n                     let res = match module_def.take_types()? {\n@@ -200,7 +209,10 @@ impl Resolver {\n         let skip_to_mod = path.kind != PathKind::Plain && !path.is_self();\n         for scope in self.scopes.iter().rev() {\n             match scope {\n-                Scope::ExprScope(_) | Scope::GenericParams(_) | Scope::ImplBlockScope(_)\n+                Scope::AdtScope(_)\n+                | Scope::ExprScope(_)\n+                | Scope::GenericParams(_)\n+                | Scope::ImplBlockScope(_)\n                     if skip_to_mod =>\n                 {\n                     continue\n@@ -233,7 +245,13 @@ impl Resolver {\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n                 }\n-                Scope::ImplBlockScope(_) => continue,\n+                Scope::AdtScope(adt) if n_segments > 1 => {\n+                    if first_name == &SELF_TYPE {\n+                        let ty = TypeNs::AdtSelfType(*adt);\n+                        return Some(ResolveValueResult::Partial(ty, 1));\n+                    }\n+                }\n+                Scope::ImplBlockScope(_) | Scope::AdtScope(_) => continue,\n \n                 Scope::ModuleScope(m) => {\n                     let (module_def, idx) = m.crate_def_map.resolve_path(db, m.module_id, path);\n@@ -389,7 +407,8 @@ pub enum ScopeDef {\n     ModuleDef(ModuleDef),\n     MacroDef(MacroDef),\n     GenericParam(u32),\n-    SelfType(ImplBlock),\n+    ImplSelfType(ImplBlock),\n+    AdtSelfType(Adt),\n     LocalBinding(PatId),\n     Unknown,\n }\n@@ -437,7 +456,10 @@ impl Scope {\n                 }\n             }\n             Scope::ImplBlockScope(i) => {\n-                f(SELF_TYPE, ScopeDef::SelfType(*i));\n+                f(SELF_TYPE, ScopeDef::ImplSelfType(*i));\n+            }\n+            Scope::AdtScope(i) => {\n+                f(SELF_TYPE, ScopeDef::AdtSelfType(*i));\n             }\n             Scope::ExprScope(e) => {\n                 e.expr_scopes.entries(e.scope_id).iter().for_each(|e| {"}, {"sha": "a907d6a9f9db14c28e1c5bdb05d916d67c9c0480", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=6bad638928ab880bfbad868f07f0690ace2f2c30", "patch": "@@ -216,7 +216,7 @@ impl SourceAnalyzer {\n         let types = self.resolver.resolve_path_in_type_ns_fully(db, &path).map(|ty| match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it),\n             TypeNs::GenericParam(it) => PathResolution::GenericParam(it),\n-            TypeNs::Adt(it) => PathResolution::Def(it.into()),\n+            TypeNs::AdtSelfType(it) | TypeNs::Adt(it) => PathResolution::Def(it.into()),\n             TypeNs::EnumVariant(it) => PathResolution::Def(it.into()),\n             TypeNs::TypeAlias(it) => PathResolution::Def(it.into()),\n             TypeNs::BuiltinType(it) => PathResolution::Def(it.into()),"}, {"sha": "9e5d42509c3135c9dc447788acc1c65145df8082", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=6bad638928ab880bfbad868f07f0690ace2f2c30", "patch": "@@ -559,6 +559,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             match resolver.resolve_path_in_type_ns_fully(self.db, &path) {\n                 Some(TypeNs::Adt(Adt::Struct(it))) => it.into(),\n                 Some(TypeNs::Adt(Adt::Union(it))) => it.into(),\n+                Some(TypeNs::AdtSelfType(Adt::Struct(it))) => it.into(),\n+                Some(TypeNs::AdtSelfType(Adt::Union(it))) => it.into(),\n+                Some(TypeNs::AdtSelfType(Adt::Enum(it))) => it.into(),\n                 Some(TypeNs::EnumVariant(it)) => it.into(),\n                 Some(TypeNs::TypeAlias(it)) => it.into(),\n "}, {"sha": "a604c02e2d600209b1fee82dd1410a86138dcb24", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=6bad638928ab880bfbad868f07f0690ace2f2c30", "patch": "@@ -175,6 +175,7 @@ impl Ty {\n                 Ty::Param { idx, name }\n             }\n             TypeNs::SelfType(impl_block) => impl_block.target_ty(db),\n+            TypeNs::AdtSelfType(adt) => adt.ty(db),\n \n             TypeNs::Adt(it) => Ty::from_hir_path_inner(db, resolver, resolved_segment, it.into()),\n             TypeNs::BuiltinType(it) => {"}, {"sha": "03b30adcd35aaaa781029b9bb0dccbfe9a02917e", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=6bad638928ab880bfbad868f07f0690ace2f2c30", "patch": "@@ -134,6 +134,25 @@ mod boxed {\n     assert_eq!(\"(Box<i32>, Box<Box<i32>>, Box<&i32>, Box<[i32;_]>)\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn infer_adt_self() {\n+    let (db, pos) = MockDatabase::with_position(\n+        r#\"\n+//- /main.rs\n+enum Nat { Succ(Self), Demo(Nat), Zero }\n+\n+fn test() {\n+    let foo: Nat = Nat::Zero;\n+    if let Nat::Succ(x) = foo {\n+        x<|>\n+    }\n+}\n+\n+\"#,\n+    );\n+    assert_eq!(\"Nat\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_try() {\n     let (mut db, pos) = MockDatabase::with_position("}, {"sha": "eb480a775ea57d0b99eede8f01330e30383d466f", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bad638928ab880bfbad868f07f0690ace2f2c30/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=6bad638928ab880bfbad868f07f0690ace2f2c30", "patch": "@@ -72,7 +72,7 @@ impl Completions {\n             }\n             ScopeDef::GenericParam(..) => (CompletionItemKind::TypeParam, None),\n             ScopeDef::LocalBinding(..) => (CompletionItemKind::Binding, None),\n-            ScopeDef::SelfType(..) => (\n+            ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => (\n                 CompletionItemKind::TypeParam, // (does this need its own kind?)\n                 None,\n             ),"}]}