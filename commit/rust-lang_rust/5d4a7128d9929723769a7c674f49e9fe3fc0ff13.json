{"sha": "5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNGE3MTI4ZDk5Mjk3MjM3NjlhN2M2NzRmNDllOWZlM2ZjMGZmMTM=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-05T03:42:34Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-03T22:11:37Z"}, "message": "Render Markdown in search results\n\nPreviously Markdown documentation was not rendered to HTML for search results,\nwhich led to the output not being very readable, particularly for inline code.\nThis PR fixes that by rendering Markdown to HTML with the help of pulldown-cmark\n(the library rustdoc uses to parse Markdown for the main text of documentation).\nHowever, the text for the title attribute (the text shown when you hover over an\nelement) still uses the plain-text rendering since it is displayed in browsers\nas plain-text.\n\nOnly these styles will be rendered; everything else is stripped away:\n\n* *italics*\n* **bold**\n* `inline code`", "tree": {"sha": "df8b1d6a6805dcec1f944a6daff7fb450b8c90d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df8b1d6a6805dcec1f944a6daff7fb450b8c90d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "html_url": "https://github.com/rust-lang/rust/commit/5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4def89d76896eec73b4af33642ba7e5eb53c567", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4def89d76896eec73b4af33642ba7e5eb53c567", "html_url": "https://github.com/rust-lang/rust/commit/b4def89d76896eec73b4af33642ba7e5eb53c567"}], "stats": {"total": 216, "additions": 166, "deletions": 50}, "files": [{"sha": "40218022a196e43f0fe01c8fcd95221aee7a002d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "patch": "@@ -1015,7 +1015,7 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n                     .iter()\n                     .map(|t| Argument {\n                         type_: t.clean(cx),\n-                        name: names.next().map_or(String::new(), |name| name.to_string()),\n+                        name: names.next().map_or_else(|| String::new(), |name| name.to_string()),\n                     })\n                     .collect(),\n             },"}, {"sha": "e82bc540e95af25bfee284c8f5e97ad16a3c1b97", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "patch": "@@ -14,13 +14,13 @@ use crate::config::RenderInfo;\n use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n+use crate::html::markdown::short_markdown_summary;\n use crate::html::render::cache::{extern_location, get_index_search_type, ExternalLocation};\n use crate::html::render::IndexItem;\n-use crate::html::render::{plain_text_summary, shorten};\n \n thread_local!(crate static CACHE_KEY: RefCell<Arc<Cache>> = Default::default());\n \n-/// This cache is used to store information about the `clean::Crate` being\n+/// This cache is used to store information about the [`clean::Crate`] being\n /// rendered in order to provide more useful documentation. This contains\n /// information like all implementors of a trait, all traits a type implements,\n /// documentation for all known traits, etc.\n@@ -313,7 +313,9 @@ impl DocFolder for Cache {\n                             ty: item.type_(),\n                             name: s.to_string(),\n                             path: path.join(\"::\"),\n-                            desc: shorten(plain_text_summary(item.doc_value())),\n+                            desc: item\n+                                .doc_value()\n+                                .map_or_else(|| String::new(), short_markdown_summary),\n                             parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item),"}, {"sha": "6bba50361912032946c684604e4a1564901325e0", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 90, "deletions": 2, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "patch": "@@ -17,8 +17,6 @@\n //! // ... something using html\n //! ```\n \n-#![allow(non_camel_case_types)]\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirId;\n@@ -1037,7 +1035,97 @@ impl MarkdownSummaryLine<'_> {\n     }\n }\n \n+/// Renders a subset of Markdown in the first paragraph of the provided Markdown.\n+///\n+/// - *Italics*, **bold**, and `inline code` styles **are** rendered.\n+/// - Headings and links are stripped (though the text *is* rendered).\n+/// - HTML, code blocks, and everything else are ignored.\n+///\n+/// Returns a tuple of the rendered HTML string and whether the output was shortened\n+/// due to the provided `length_limit`.\n+fn markdown_summary_with_limit(md: &str, length_limit: Option<u16>) -> (String, bool) {\n+    if md.is_empty() {\n+        return (String::new(), false);\n+    }\n+\n+    let length_limit = length_limit.unwrap_or(u16::MAX) as usize;\n+\n+    let mut s = String::with_capacity(md.len() * 3 / 2);\n+    let mut text_length = 0;\n+    let mut stopped_early = false;\n+\n+    fn push(s: &mut String, text_length: &mut usize, text: &str) {\n+        s.push_str(text);\n+        *text_length += text.len();\n+    };\n+\n+    'outer: for event in Parser::new_ext(md, Options::ENABLE_STRIKETHROUGH) {\n+        match &event {\n+            Event::Text(text) => {\n+                for word in text.split_inclusive(char::is_whitespace) {\n+                    if text_length + word.len() >= length_limit {\n+                        stopped_early = true;\n+                        break 'outer;\n+                    }\n+\n+                    push(&mut s, &mut text_length, word);\n+                }\n+            }\n+            Event::Code(code) => {\n+                if text_length + code.len() >= length_limit {\n+                    stopped_early = true;\n+                    break;\n+                }\n+\n+                s.push_str(\"<code>\");\n+                push(&mut s, &mut text_length, code);\n+                s.push_str(\"</code>\");\n+            }\n+            Event::Start(tag) => match tag {\n+                Tag::Emphasis => s.push_str(\"<em>\"),\n+                Tag::Strong => s.push_str(\"<strong>\"),\n+                Tag::CodeBlock(..) => break,\n+                _ => {}\n+            },\n+            Event::End(tag) => match tag {\n+                Tag::Emphasis => s.push_str(\"</em>\"),\n+                Tag::Strong => s.push_str(\"</strong>\"),\n+                Tag::Paragraph => break,\n+                _ => {}\n+            },\n+            Event::HardBreak | Event::SoftBreak => {\n+                if text_length + 1 >= length_limit {\n+                    stopped_early = true;\n+                    break;\n+                }\n+\n+                push(&mut s, &mut text_length, \" \");\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    (s, stopped_early)\n+}\n+\n+/// Renders a shortened first paragraph of the given Markdown as a subset of Markdown,\n+/// making it suitable for contexts like the search index.\n+///\n+/// Will shorten to 59 or 60 characters, including an ellipsis (\u2026) if it was shortened.\n+///\n+/// See [`markdown_summary_with_limit`] for details about what is rendered and what is not.\n+crate fn short_markdown_summary(markdown: &str) -> String {\n+    let (mut s, was_shortened) = markdown_summary_with_limit(markdown, Some(59));\n+\n+    if was_shortened {\n+        s.push('\u2026');\n+    }\n+\n+    s\n+}\n+\n /// Renders the first paragraph of the provided markdown as plain text.\n+/// Useful for alt-text.\n ///\n /// - Headings, links, and formatting are stripped.\n /// - Inline code is rendered as-is, surrounded by backticks."}, {"sha": "9807d8632c75d272486bbb839cdd484dbd1e49b4", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "patch": "@@ -1,4 +1,4 @@\n-use super::plain_text_summary;\n+use super::{plain_text_summary, short_markdown_summary};\n use super::{ErrorCodes, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use std::cell::RefCell;\n@@ -204,6 +204,33 @@ fn test_header_ids_multiple_blocks() {\n     );\n }\n \n+#[test]\n+fn test_short_markdown_summary() {\n+    fn t(input: &str, expect: &str) {\n+        let output = short_markdown_summary(input);\n+        assert_eq!(output, expect, \"original: {}\", input);\n+    }\n+\n+    t(\"hello [Rust](https://www.rust-lang.org) :)\", \"hello Rust :)\");\n+    t(\"*italic*\", \"<em>italic</em>\");\n+    t(\"**bold**\", \"<strong>bold</strong>\");\n+    t(\"Multi-line\\nsummary\", \"Multi-line summary\");\n+    t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n+    t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n+    t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n+    t(\"code `let x = i32;` ...\", \"code <code>let x = i32;</code> ...\");\n+    t(\"type `Type<'static>` ...\", \"type <code>Type<'static></code> ...\");\n+    t(\"# top header\", \"top header\");\n+    t(\"## header\", \"header\");\n+    t(\"first paragraph\\n\\nsecond paragraph\", \"first paragraph\");\n+    t(\"```\\nfn main() {}\\n```\", \"\");\n+    t(\"<div>hello</div>\", \"\");\n+    t(\n+        \"a *very*, **very** long first paragraph. it has lots of `inline code: Vec<T>`. and it has a [link](https://www.rust-lang.org).\\nthat was a soft line break!  \\nthat was a hard one\\n\\nsecond paragraph.\",\n+        \"a <em>very</em>, <strong>very</strong> long first paragraph. it has lots of \u2026\",\n+    );\n+}\n+\n #[test]\n fn test_plain_text_summary() {\n     fn t(input: &str, expect: &str) {\n@@ -224,6 +251,10 @@ fn test_plain_text_summary() {\n     t(\"first paragraph\\n\\nsecond paragraph\", \"first paragraph\");\n     t(\"```\\nfn main() {}\\n```\", \"\");\n     t(\"<div>hello</div>\", \"\");\n+    t(\n+        \"a *very*, **very** long first paragraph. it has lots of `inline code: Vec<T>`. and it has a [link](https://www.rust-lang.org).\\nthat was a soft line break!  \\nthat was a hard one\\n\\nsecond paragraph.\",\n+        \"a very, very long first paragraph. it has lots of `inline code: Vec<T>`. and it has a link. that was a soft line break! that was a hard one\",\n+    );\n }\n \n #[test]"}, {"sha": "97f764517faf6e8b71b2e2ebd381c7d1e6fe9142", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "patch": "@@ -9,7 +9,7 @@ use crate::clean::types::GetDefId;\n use crate::clean::{self, AttributesExt};\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n-use crate::html::render::{plain_text_summary, shorten};\n+use crate::html::markdown::short_markdown_summary;\n use crate::html::render::{Generic, IndexItem, IndexItemFunctionType, RenderType, TypeWithKind};\n \n /// Indicates where an external crate can be found.\n@@ -78,7 +78,7 @@ crate fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n                 ty: item.type_(),\n                 name: item.name.clone().unwrap(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n-                desc: shorten(plain_text_summary(item.doc_value())),\n+                desc: item.doc_value().map_or_else(|| String::new(), short_markdown_summary),\n                 parent: Some(did),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item),\n@@ -127,7 +127,7 @@ crate fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     let crate_doc = krate\n         .module\n         .as_ref()\n-        .map(|module| shorten(plain_text_summary(module.doc_value())))\n+        .map(|module| module.doc_value().map_or_else(|| String::new(), short_markdown_summary))\n         .unwrap_or_default();\n \n     #[derive(Serialize)]"}, {"sha": "901f00b21da9d7cb63383bbb3d8b5306d0f3a302", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 7, "deletions": 34, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "patch": "@@ -76,7 +76,9 @@ use crate::html::format::fmt_impl_for_trait_page;\n use crate::html::format::Function;\n use crate::html::format::{href, print_default_space, print_generic_bounds, WhereClause};\n use crate::html::format::{print_abi_with_space, Buffer, PrintWithSpace};\n-use crate::html::markdown::{self, ErrorCodes, IdMap, Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::markdown::{\n+    self, plain_text_summary, ErrorCodes, IdMap, Markdown, MarkdownHtml, MarkdownSummaryLine,\n+};\n use crate::html::sources;\n use crate::html::{highlight, layout, static_files};\n use cache::{build_index, ExternalLocation};\n@@ -1604,9 +1606,10 @@ impl Context {\n                 Some(ref s) => s.to_string(),\n             };\n             let short = short.to_string();\n-            map.entry(short)\n-                .or_default()\n-                .push((myname, Some(plain_text_summary(item.doc_value()))));\n+            map.entry(short).or_default().push((\n+                myname,\n+                Some(item.doc_value().map_or_else(|| String::new(), plain_text_summary)),\n+            ));\n         }\n \n         if self.shared.sort_modules_alphabetically {\n@@ -1810,36 +1813,6 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     s\n }\n \n-/// Renders the first paragraph of the given markdown as plain text, making it suitable for\n-/// contexts like alt-text or the search index.\n-///\n-/// If no markdown is supplied, the empty string is returned.\n-///\n-/// See [`markdown::plain_text_summary`] for further details.\n-#[inline]\n-crate fn plain_text_summary(s: Option<&str>) -> String {\n-    s.map(markdown::plain_text_summary).unwrap_or_default()\n-}\n-\n-crate fn shorten(s: String) -> String {\n-    if s.chars().count() > 60 {\n-        let mut len = 0;\n-        let mut ret = s\n-            .split_whitespace()\n-            .take_while(|p| {\n-                // + 1 for the added character after the word.\n-                len += p.chars().count() + 1;\n-                len < 60\n-            })\n-            .collect::<Vec<_>>()\n-            .join(\" \");\n-        ret.push('\u2026');\n-        ret\n-    } else {\n-        s\n-    }\n-}\n-\n fn document(w: &mut Buffer, cx: &Context, item: &clean::Item, parent: Option<&clean::Item>) {\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);"}, {"sha": "712ea044e48ff409213f7394030efdd35a5ed3c9", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "patch": "@@ -1611,7 +1611,7 @@ function defocusSearchBar() {\n                               item.displayPath + \"<span class=\\\"\" + type + \"\\\">\" +\n                               name + \"</span></a></td><td>\" +\n                               \"<a href=\\\"\" + item.href + \"\\\">\" +\n-                              \"<span class=\\\"desc\\\">\" + escape(item.desc) +\n+                              \"<span class=\\\"desc\\\">\" + item.desc +\n                               \"&nbsp;</span></a></td></tr>\";\n                 });\n                 output += \"</table>\";\n@@ -2013,7 +2013,9 @@ function defocusSearchBar() {\n                     }\n                     var link = document.createElement(\"a\");\n                     link.href = rootPath + crates[i] + \"/index.html\";\n-                    link.title = rawSearchIndex[crates[i]].doc;\n+                    // The summary in the search index has HTML, so we need to\n+                    // dynamically render it as plaintext.\n+                    link.title = convertHTMLToPlaintext(rawSearchIndex[crates[i]].doc);\n                     link.className = klass;\n                     link.textContent = crates[i];\n \n@@ -2026,6 +2028,25 @@ function defocusSearchBar() {\n         }\n     };\n \n+    /**\n+     * Convert HTML to plaintext:\n+     *\n+     *   * Replace \"<code>foo</code>\" with \"`foo`\"\n+     *   * Strip all other HTML tags\n+     *\n+     * Used by the dynamic sidebar crate list renderer.\n+     *\n+     * @param  {[string]} html [The HTML to convert]\n+     * @return {[string]}      [The resulting plaintext]\n+     */\n+    function convertHTMLToPlaintext(html) {\n+        var dom = new DOMParser().parseFromString(\n+            html.replace('<code>', '`').replace('</code>', '`'),\n+            'text/html',\n+        );\n+        return dom.body.innerText;\n+    }\n+\n \n     // delayed sidebar rendering.\n     window.initSidebarItems = function(items) {"}, {"sha": "b843e28e7b0d3a9e7ccd1c06e659618eeed01eb4", "filename": "src/test/rustdoc/markdown-summaries.rs", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d4a7128d9929723769a7c674f49e9fe3fc0ff13/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs?ref=5d4a7128d9929723769a7c674f49e9fe3fc0ff13", "patch": "@@ -1,21 +1,22 @@\n #![crate_type = \"lib\"]\n #![crate_name = \"summaries\"]\n \n-//! This summary has a [link] and `code`.\n+//! This *summary* has a [link] and `code`.\n //!\n //! This is the second paragraph.\n //!\n //! [link]: https://example.com\n \n-// @has search-index.js 'This summary has a link and `code`.'\n+// @has search-index.js 'This <em>summary</em> has a link and <code>code</code>.'\n // @!has - 'second paragraph'\n \n-/// This `code` should be in backticks.\n+/// This `code` will be rendered in a code tag.\n ///\n /// This text should not be rendered.\n pub struct Sidebar;\n \n-// @has summaries/sidebar-items.js 'This `code` should be in backticks.'\n+// @has search-index.js 'This <code>code</code> will be rendered in a code tag.'\n+// @has summaries/sidebar-items.js 'This `code` will be rendered in a code tag.'\n // @!has - 'text should not be rendered'\n \n /// ```text", "previous_filename": "src/test/rustdoc/plain-text-summaries.rs"}]}