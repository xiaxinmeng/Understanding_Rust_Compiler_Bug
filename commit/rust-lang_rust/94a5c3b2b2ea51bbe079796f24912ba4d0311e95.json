{"sha": "94a5c3b2b2ea51bbe079796f24912ba4d0311e95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YTVjM2IyYjJlYTUxYmJlMDc5Nzk2ZjI0OTEyYmE0ZDAzMTFlOTU=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-04-12T02:21:19Z"}, "committer": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-04-12T02:21:19Z"}, "message": "Remove [mut] syntax in pin docs", "tree": {"sha": "dfdfbb6d23a16b5e3155ad53559259d88a381d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfdfbb6d23a16b5e3155ad53559259d88a381d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94a5c3b2b2ea51bbe079796f24912ba4d0311e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94a5c3b2b2ea51bbe079796f24912ba4d0311e95", "html_url": "https://github.com/rust-lang/rust/commit/94a5c3b2b2ea51bbe079796f24912ba4d0311e95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94a5c3b2b2ea51bbe079796f24912ba4d0311e95/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de0106789468b211bcc3a25c09c0cf07119186d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de0106789468b211bcc3a25c09c0cf07119186d", "html_url": "https://github.com/rust-lang/rust/commit/3de0106789468b211bcc3a25c09c0cf07119186d"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "ad3e2686228c8794a0d0559a70ffb5462936c367", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94a5c3b2b2ea51bbe079796f24912ba4d0311e95/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a5c3b2b2ea51bbe079796f24912ba4d0311e95/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=94a5c3b2b2ea51bbe079796f24912ba4d0311e95", "patch": "@@ -158,12 +158,12 @@\n //! is called *even if your type was previously pinned*! It is as if the\n //! compiler automatically called `get_unchecked_mut`.\n //!\n-//! This can never cause a problem in safe code because implementing a type that relies on pinning\n-//! requires unsafe code, but be aware that deciding to make use of pinning\n-//! in your type (for example by implementing some operation on `Pin<&[mut] Self>`)\n-//! has consequences for your `Drop` implementation as well: if an element\n-//! of your type could have been pinned, you must treat Drop as implicitly taking\n-//! `Pin<&mut Self>`.\n+//! This can never cause a problem in safe code because implementing a type that\n+//! relies on pinning requires unsafe code, but be aware that deciding to make\n+//! use of pinning in your type (for example by implementing some operation on\n+//! `Pin<&Self>` or `Pin<&mut Self>`) has consequences for your `Drop`\n+//! implementation as well: if an element of your type could have been pinned,\n+//! you must treat Drop as implicitly taking `Pin<&mut Self>`.\n //!\n //! In particular, if your type is `#[repr(packed)]`, the compiler will automatically\n //! move fields around to be able to drop them. As a consequence, you cannot use\n@@ -173,13 +173,13 @@\n //!\n //! One interesting question arises when considering the interaction of pinning and\n //! the fields of a struct. When can a struct have a \"pinning projection\", i.e.,\n-//! an operation with type `fn(Pin<&[mut] Struct>) -> Pin<&[mut] Field>`?\n+//! an operation with type `fn(Pin<&Struct>) -> Pin<&Field>`?\n //! In a similar vein, when can a generic wrapper type (such as `Vec<T>`, `Box<T>`, or `RefCell<T>`)\n-//! have an operation with type `fn(Pin<&[mut] Wrapper<T>>) -> Pin<&[mut] T>`?\n+//! have an operation with type `fn(Pin<&Wrapper<T>>) -> Pin<&T>`?\n //!\n //! Having a pinning projection for some field means that pinning is \"structural\":\n //! when the wrapper is pinned, the field must be considered pinned, too.\n-//! After all, the pinning projection lets us get a `Pin<&[mut] Field>`.\n+//! After all, the pinning projection lets us get a `Pin<&Field>`.\n //!\n //! However, structural pinning comes with a few extra requirements, so not all\n //! wrappers can be structural and hence not all wrappers can offer pinning projections:"}]}