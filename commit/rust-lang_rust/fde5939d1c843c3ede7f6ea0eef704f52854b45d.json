{"sha": "fde5939d1c843c3ede7f6ea0eef704f52854b45d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZTU5MzlkMWM4NDNjM2VkZTdmNmVhMGVlZjcwNGY1Mjg1NGI0NWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T11:54:00Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parse: tweak diagnostic wordings", "tree": {"sha": "46e6b7a6a3f1548af4da6432e08fc3f317f020fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46e6b7a6a3f1548af4da6432e08fc3f317f020fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fde5939d1c843c3ede7f6ea0eef704f52854b45d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fde5939d1c843c3ede7f6ea0eef704f52854b45d", "html_url": "https://github.com/rust-lang/rust/commit/fde5939d1c843c3ede7f6ea0eef704f52854b45d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fde5939d1c843c3ede7f6ea0eef704f52854b45d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc", "html_url": "https://github.com/rust-lang/rust/commit/e66a39bb65eb4a7fb1813993e10fc1af5bdac9bc"}], "stats": {"total": 206, "additions": 103, "deletions": 103}, "files": [{"sha": "d6da62705419697589caadfc415c6ed4816aca03", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -112,7 +112,7 @@ impl<'a> Parser<'a> {\n         }\n         let vs = pprust::vis_to_string(&vis);\n         let vs = vs.trim_end();\n-        self.struct_span_err(vis.span, &format!(\"visibility `{}` not followed by an item\", vs))\n+        self.struct_span_err(vis.span, &format!(\"visibility `{}` is not followed by an item\", vs))\n             .span_label(vis.span, \"the visibility\")\n             .help(&format!(\"you likely meant to define an item, e.g., `{} fn foo() {{}}`\", vs))\n             .emit();\n@@ -121,7 +121,7 @@ impl<'a> Parser<'a> {\n     /// Error in-case a `default` was parsed but no item followed.\n     fn error_on_unmatched_defaultness(&self, def: Defaultness) {\n         if let Defaultness::Default(sp) = def {\n-            self.struct_span_err(sp, \"`default` not followed by an item\")\n+            self.struct_span_err(sp, \"`default` is not followed by an item\")\n                 .span_label(sp, \"the `default` qualifier\")\n                 .note(\"only `fn`, `const`, `type`, or `impl` items may be prefixed by `default`\")\n                 .emit();\n@@ -657,7 +657,7 @@ impl<'a> Parser<'a> {\n                     self.struct_span_err(span, \"associated `static` items are not allowed\").emit();\n                     AssocItemKind::Const(Defaultness::Final, a, b)\n                 }\n-                _ => return self.error_bad_item_kind(span, &kind, \"`trait` or `impl`\"),\n+                _ => return self.error_bad_item_kind(span, &kind, \"`trait`s or `impl`s\"),\n             };\n             Some(P(Item { attrs, id, span, vis, ident, kind, tokens }))\n         }))\n@@ -846,15 +846,15 @@ impl<'a> Parser<'a> {\n                     self.error_on_foreign_const(span, ident);\n                     ForeignItemKind::Static(a, Mutability::Not, b)\n                 }\n-                _ => return self.error_bad_item_kind(span, &kind, \"`extern` block\"),\n+                _ => return self.error_bad_item_kind(span, &kind, \"`extern` blocks\"),\n             };\n             Some(P(Item { attrs, id, span, vis, ident, kind, tokens }))\n         }))\n     }\n \n     fn error_bad_item_kind<T>(&self, span: Span, kind: &ItemKind, ctx: &str) -> Option<T> {\n         let span = self.sess.source_map().def_span(span);\n-        let msg = format!(\"{} not supported in {}\", kind.descr(), ctx);\n+        let msg = format!(\"{} is not supported in {}\", kind.descr(), ctx);\n         self.struct_span_err(span, &msg).emit();\n         return None;\n     }"}, {"sha": "98a95cfa35a9ea0295b18593f1e53c5ac679c327", "filename": "src/test/ui/parser/default-on-wrong-item-kind.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -31,110 +31,110 @@ mod free_items {\n #[cfg(FALSE)]\n extern \"C\" {\n     default extern crate foo; //~ ERROR an extern crate cannot be `default`\n-    //~^ ERROR extern crate not supported in `extern` block\n+    //~^ ERROR extern crate is not supported in `extern` blocks\n     default use foo; //~ ERROR a `use` import cannot be `default`\n-    //~^ ERROR `use` import not supported in `extern` block\n+    //~^ ERROR `use` import is not supported in `extern` blocks\n     default static foo: u8; //~ ERROR a static item cannot be `default`\n     default const foo: u8;\n     //~^ ERROR extern items cannot be `const`\n     default fn foo();\n     default mod foo {} //~ ERROR a module cannot be `default`\n-    //~^ ERROR module not supported in `extern` block\n+    //~^ ERROR module is not supported in `extern` blocks\n     default extern \"C\" {} //~ ERROR an extern block cannot be `default`\n-    //~^ ERROR extern block not supported in `extern` block\n+    //~^ ERROR extern block is not supported in `extern` blocks\n     default type foo = u8;\n     default enum foo {} //~ ERROR an enum cannot be `default`\n-    //~^ ERROR enum not supported in `extern` block\n+    //~^ ERROR enum is not supported in `extern` blocks\n     default struct foo {} //~ ERROR a struct cannot be `default`\n-    //~^ ERROR struct not supported in `extern` block\n+    //~^ ERROR struct is not supported in `extern` blocks\n     default union foo {} //~ ERROR a union cannot be `default`\n-    //~^ ERROR union not supported in `extern` block\n+    //~^ ERROR union is not supported in `extern` blocks\n     default trait foo {} //~ ERROR a trait cannot be `default`\n-    //~^ ERROR trait not supported in `extern` block\n+    //~^ ERROR trait is not supported in `extern` blocks\n     default trait foo = Ord; //~ ERROR a trait alias cannot be `default`\n-    //~^ ERROR trait alias not supported in `extern` block\n+    //~^ ERROR trait alias is not supported in `extern` blocks\n     default impl foo {}\n-    //~^ ERROR implementation not supported in `extern` block\n+    //~^ ERROR implementation is not supported in `extern` blocks\n     default!();\n     default::foo::bar!();\n     default default!(); //~ ERROR an item macro invocation cannot be `default`\n     default default::foo::bar!(); //~ ERROR an item macro invocation cannot be `default`\n     default macro foo {} //~ ERROR a macro definition cannot be `default`\n-    //~^ ERROR macro definition not supported in `extern` block\n+    //~^ ERROR macro definition is not supported in `extern` blocks\n     default macro_rules! foo {} //~ ERROR a macro definition cannot be `default`\n-    //~^ ERROR macro definition not supported in `extern` block\n+    //~^ ERROR macro definition is not supported in `extern` blocks\n }\n \n #[cfg(FALSE)]\n impl S {\n     default extern crate foo; //~ ERROR an extern crate cannot be `default`\n-    //~^ ERROR extern crate not supported in `trait` or `impl`\n+    //~^ ERROR extern crate is not supported in `trait`s or `impl`s\n     default use foo; //~ ERROR a `use` import cannot be `default`\n-    //~^ ERROR `use` import not supported in `trait` or `impl`\n+    //~^ ERROR `use` import is not supported in `trait`s or `impl`s\n     default static foo: u8; //~ ERROR a static item cannot be `default`\n     //~^ ERROR associated `static` items are not allowed\n     default const foo: u8;\n     default fn foo();\n     default mod foo {}//~ ERROR a module cannot be `default`\n-    //~^ ERROR module not supported in `trait` or `impl`\n+    //~^ ERROR module is not supported in `trait`s or `impl`s\n     default extern \"C\" {} //~ ERROR an extern block cannot be `default`\n-    //~^ ERROR extern block not supported in `trait` or `impl`\n+    //~^ ERROR extern block is not supported in `trait`s or `impl`s\n     default type foo = u8;\n     default enum foo {} //~ ERROR an enum cannot be `default`\n-    //~^ ERROR enum not supported in `trait` or `impl`\n+    //~^ ERROR enum is not supported in `trait`s or `impl`s\n     default struct foo {} //~ ERROR a struct cannot be `default`\n-    //~^ ERROR struct not supported in `trait` or `impl`\n+    //~^ ERROR struct is not supported in `trait`s or `impl`s\n     default union foo {} //~ ERROR a union cannot be `default`\n-    //~^ ERROR union not supported in `trait` or `impl`\n+    //~^ ERROR union is not supported in `trait`s or `impl`s\n     default trait foo {} //~ ERROR a trait cannot be `default`\n-    //~^ ERROR trait not supported in `trait` or `impl`\n+    //~^ ERROR trait is not supported in `trait`s or `impl`s\n     default trait foo = Ord; //~ ERROR a trait alias cannot be `default`\n-    //~^ ERROR trait alias not supported in `trait` or `impl`\n+    //~^ ERROR trait alias is not supported in `trait`s or `impl`s\n     default impl foo {}\n-    //~^ ERROR implementation not supported in `trait` or `impl`\n+    //~^ ERROR implementation is not supported in `trait`s or `impl`s\n     default!();\n     default::foo::bar!();\n     default default!(); //~ ERROR an item macro invocation cannot be `default`\n     default default::foo::bar!(); //~ ERROR an item macro invocation cannot be `default`\n     default macro foo {} //~ ERROR a macro definition cannot be `default`\n-    //~^ ERROR macro definition not supported in `trait` or `impl`\n+    //~^ ERROR macro definition is not supported in `trait`s or `impl`s\n     default macro_rules! foo {} //~ ERROR a macro definition cannot be `default`\n-    //~^ ERROR macro definition not supported in `trait` or `impl`\n+    //~^ ERROR macro definition is not supported in `trait`s or `impl`s\n }\n \n #[cfg(FALSE)]\n trait T {\n     default extern crate foo; //~ ERROR an extern crate cannot be `default`\n-    //~^ ERROR extern crate not supported in `trait` or `impl`\n+    //~^ ERROR extern crate is not supported in `trait`s or `impl`s\n     default use foo; //~ ERROR a `use` import cannot be `default`\n-    //~^ ERROR `use` import not supported in `trait` or `impl`\n+    //~^ ERROR `use` import is not supported in `trait`s or `impl`s\n     default static foo: u8; //~ ERROR a static item cannot be `default`\n     //~^ ERROR associated `static` items are not allowed\n     default const foo: u8;\n     default fn foo();\n     default mod foo {}//~ ERROR a module cannot be `default`\n-    //~^ ERROR module not supported in `trait` or `impl`\n+    //~^ ERROR module is not supported in `trait`s or `impl`s\n     default extern \"C\" {} //~ ERROR an extern block cannot be `default`\n-    //~^ ERROR extern block not supported in `trait` or `impl`\n+    //~^ ERROR extern block is not supported in `trait`s or `impl`s\n     default type foo = u8;\n     default enum foo {} //~ ERROR an enum cannot be `default`\n-    //~^ ERROR enum not supported in `trait` or `impl`\n+    //~^ ERROR enum is not supported in `trait`s or `impl`s\n     default struct foo {} //~ ERROR a struct cannot be `default`\n-    //~^ ERROR struct not supported in `trait` or `impl`\n+    //~^ ERROR struct is not supported in `trait`s or `impl`s\n     default union foo {} //~ ERROR a union cannot be `default`\n-    //~^ ERROR union not supported in `trait` or `impl`\n+    //~^ ERROR union is not supported in `trait`s or `impl`s\n     default trait foo {} //~ ERROR a trait cannot be `default`\n-    //~^ ERROR trait not supported in `trait` or `impl`\n+    //~^ ERROR trait is not supported in `trait`s or `impl`s\n     default trait foo = Ord; //~ ERROR a trait alias cannot be `default`\n-    //~^ ERROR trait alias not supported in `trait` or `impl`\n+    //~^ ERROR trait alias is not supported in `trait`s or `impl`s\n     default impl foo {}\n-    //~^ ERROR implementation not supported in `trait` or `impl`\n+    //~^ ERROR implementation is not supported in `trait`s or `impl`s\n     default!();\n     default::foo::bar!();\n     default default!(); //~ ERROR an item macro invocation cannot be `default`\n     default default::foo::bar!(); //~ ERROR an item macro invocation cannot be `default`\n     default macro foo {} //~ ERROR a macro definition cannot be `default`\n-    //~^ ERROR macro definition not supported in `trait` or `impl`\n+    //~^ ERROR macro definition is not supported in `trait`s or `impl`s\n     default macro_rules! foo {} //~ ERROR a macro definition cannot be `default`\n-    //~^ ERROR macro definition not supported in `trait` or `impl`\n+    //~^ ERROR macro definition is not supported in `trait`s or `impl`s\n }"}, {"sha": "9788bd64725b83152ec4adad8c19d0ba580c17a6", "filename": "src/test/ui/parser/default-on-wrong-item-kind.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -118,7 +118,7 @@ LL |     default extern crate foo;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: extern crate not supported in `extern` block\n+error: extern crate is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:33:5\n    |\n LL |     default extern crate foo;\n@@ -132,7 +132,7 @@ LL |     default use foo;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: `use` import not supported in `extern` block\n+error: `use` import is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:35:5\n    |\n LL |     default use foo;\n@@ -164,7 +164,7 @@ LL |     default mod foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: module not supported in `extern` block\n+error: module is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:41:5\n    |\n LL |     default mod foo {}\n@@ -178,7 +178,7 @@ LL |     default extern \"C\" {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: extern block not supported in `extern` block\n+error: extern block is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:43:5\n    |\n LL |     default extern \"C\" {}\n@@ -192,7 +192,7 @@ LL |     default enum foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: enum not supported in `extern` block\n+error: enum is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:46:5\n    |\n LL |     default enum foo {}\n@@ -206,7 +206,7 @@ LL |     default struct foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: struct not supported in `extern` block\n+error: struct is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:48:5\n    |\n LL |     default struct foo {}\n@@ -220,7 +220,7 @@ LL |     default union foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: union not supported in `extern` block\n+error: union is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:50:5\n    |\n LL |     default union foo {}\n@@ -234,7 +234,7 @@ LL |     default trait foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: trait not supported in `extern` block\n+error: trait is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:52:5\n    |\n LL |     default trait foo {}\n@@ -248,13 +248,13 @@ LL |     default trait foo = Ord;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: trait alias not supported in `extern` block\n+error: trait alias is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:54:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: implementation not supported in `extern` block\n+error: implementation is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:56:5\n    |\n LL |     default impl foo {}\n@@ -284,7 +284,7 @@ LL |     default macro foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: macro definition not supported in `extern` block\n+error: macro definition is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:62:5\n    |\n LL |     default macro foo {}\n@@ -298,7 +298,7 @@ LL |     default macro_rules! foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: macro definition not supported in `extern` block\n+error: macro definition is not supported in `extern` blocks\n   --> $DIR/default-on-wrong-item-kind.rs:64:5\n    |\n LL |     default macro_rules! foo {}\n@@ -312,7 +312,7 @@ LL |     default extern crate foo;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: extern crate not supported in `trait` or `impl`\n+error: extern crate is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:70:5\n    |\n LL |     default extern crate foo;\n@@ -326,7 +326,7 @@ LL |     default use foo;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: `use` import not supported in `trait` or `impl`\n+error: `use` import is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:72:5\n    |\n LL |     default use foo;\n@@ -354,7 +354,7 @@ LL |     default mod foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: module not supported in `trait` or `impl`\n+error: module is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:78:5\n    |\n LL |     default mod foo {}\n@@ -368,7 +368,7 @@ LL |     default extern \"C\" {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: extern block not supported in `trait` or `impl`\n+error: extern block is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:80:5\n    |\n LL |     default extern \"C\" {}\n@@ -382,7 +382,7 @@ LL |     default enum foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: enum not supported in `trait` or `impl`\n+error: enum is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:83:5\n    |\n LL |     default enum foo {}\n@@ -396,7 +396,7 @@ LL |     default struct foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: struct not supported in `trait` or `impl`\n+error: struct is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:85:5\n    |\n LL |     default struct foo {}\n@@ -410,7 +410,7 @@ LL |     default union foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: union not supported in `trait` or `impl`\n+error: union is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:87:5\n    |\n LL |     default union foo {}\n@@ -424,7 +424,7 @@ LL |     default trait foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: trait not supported in `trait` or `impl`\n+error: trait is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:89:5\n    |\n LL |     default trait foo {}\n@@ -438,13 +438,13 @@ LL |     default trait foo = Ord;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: trait alias not supported in `trait` or `impl`\n+error: trait alias is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:91:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: implementation not supported in `trait` or `impl`\n+error: implementation is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:93:5\n    |\n LL |     default impl foo {}\n@@ -474,7 +474,7 @@ LL |     default macro foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: macro definition not supported in `trait` or `impl`\n+error: macro definition is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:99:5\n    |\n LL |     default macro foo {}\n@@ -488,7 +488,7 @@ LL |     default macro_rules! foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: macro definition not supported in `trait` or `impl`\n+error: macro definition is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:101:5\n    |\n LL |     default macro_rules! foo {}\n@@ -502,7 +502,7 @@ LL |     default extern crate foo;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: extern crate not supported in `trait` or `impl`\n+error: extern crate is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:107:5\n    |\n LL |     default extern crate foo;\n@@ -516,7 +516,7 @@ LL |     default use foo;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: `use` import not supported in `trait` or `impl`\n+error: `use` import is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:109:5\n    |\n LL |     default use foo;\n@@ -544,7 +544,7 @@ LL |     default mod foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: module not supported in `trait` or `impl`\n+error: module is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:115:5\n    |\n LL |     default mod foo {}\n@@ -558,7 +558,7 @@ LL |     default extern \"C\" {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: extern block not supported in `trait` or `impl`\n+error: extern block is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:117:5\n    |\n LL |     default extern \"C\" {}\n@@ -572,7 +572,7 @@ LL |     default enum foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: enum not supported in `trait` or `impl`\n+error: enum is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:120:5\n    |\n LL |     default enum foo {}\n@@ -586,7 +586,7 @@ LL |     default struct foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: struct not supported in `trait` or `impl`\n+error: struct is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:122:5\n    |\n LL |     default struct foo {}\n@@ -600,7 +600,7 @@ LL |     default union foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: union not supported in `trait` or `impl`\n+error: union is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:124:5\n    |\n LL |     default union foo {}\n@@ -614,7 +614,7 @@ LL |     default trait foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: trait not supported in `trait` or `impl`\n+error: trait is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:126:5\n    |\n LL |     default trait foo {}\n@@ -628,13 +628,13 @@ LL |     default trait foo = Ord;\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: trait alias not supported in `trait` or `impl`\n+error: trait alias is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:128:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: implementation not supported in `trait` or `impl`\n+error: implementation is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:130:5\n    |\n LL |     default impl foo {}\n@@ -664,7 +664,7 @@ LL |     default macro foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: macro definition not supported in `trait` or `impl`\n+error: macro definition is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:136:5\n    |\n LL |     default macro foo {}\n@@ -678,7 +678,7 @@ LL |     default macro_rules! foo {}\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: macro definition not supported in `trait` or `impl`\n+error: macro definition is not supported in `trait`s or `impl`s\n   --> $DIR/default-on-wrong-item-kind.rs:138:5\n    |\n LL |     default macro_rules! foo {}"}, {"sha": "168ea3e76f648e785381f15d374e99d3ae0b662b", "filename": "src/test/ui/parser/default-unmatched-assoc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -3,14 +3,14 @@ fn main() {}\n trait Foo {\n     default!(); //~ ERROR cannot find macro `default` in this scope\n     default do\n-    //~^ ERROR `default` not followed by an item\n+    //~^ ERROR `default` is not followed by an item\n     //~| ERROR non-item in item list\n }\n \n struct S;\n impl S {\n     default!(); //~ ERROR cannot find macro `default` in this scope\n     default do\n-    //~^ ERROR `default` not followed by an item\n+    //~^ ERROR `default` is not followed by an item\n     //~| ERROR non-item in item list\n }"}, {"sha": "c8d1769cb5a2a23f2bf7efcbb47b5612a96ceae9", "filename": "src/test/ui/parser/default-unmatched-assoc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-assoc.stderr?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -1,4 +1,4 @@\n-error: `default` not followed by an item\n+error: `default` is not followed by an item\n   --> $DIR/default-unmatched-assoc.rs:5:5\n    |\n LL |     default do\n@@ -18,7 +18,7 @@ LL |     default do\n LL | }\n    | - item list ends here\n \n-error: `default` not followed by an item\n+error: `default` is not followed by an item\n   --> $DIR/default-unmatched-assoc.rs:13:5\n    |\n LL |     default do"}, {"sha": "8d0ea590f573fa895490018c81ac3723cb132a98", "filename": "src/test/ui/parser/default-unmatched-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -3,6 +3,6 @@ fn main() {}\n extern \"C\" {\n     default!(); //~ ERROR cannot find macro `default` in this scope\n     default do\n-    //~^ ERROR `default` not followed by an item\n+    //~^ ERROR `default` is not followed by an item\n     //~| ERROR non-item in item list\n }"}, {"sha": "bb4efd51631e4686d1fed69ece3c895ff4a63db1", "filename": "src/test/ui/parser/default-unmatched-extern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.stderr?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -1,4 +1,4 @@\n-error: `default` not followed by an item\n+error: `default` is not followed by an item\n   --> $DIR/default-unmatched-extern.rs:5:5\n    |\n LL |     default do"}, {"sha": "49346e5c6318d497e0f521197fa833a1f48c5c89", "filename": "src/test/ui/parser/default-unmatched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -1,6 +1,6 @@\n mod foo {\n     default!(); // OK.\n     default do\n-    //~^ ERROR `default` not followed by an item\n+    //~^ ERROR `default` is not followed by an item\n     //~| ERROR expected item, found reserved keyword `do`\n }"}, {"sha": "331e003f63c0f0671bd3ee2bfd2f0d9d8f694e30", "filename": "src/test/ui/parser/default-unmatched.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched.stderr?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -1,4 +1,4 @@\n-error: `default` not followed by an item\n+error: `default` is not followed by an item\n   --> $DIR/default-unmatched.rs:3:5\n    |\n LL |     default do"}, {"sha": "64ba4b5531184bbdf49a71b007bd2fad41c6d245", "filename": "src/test/ui/parser/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -20,7 +20,7 @@ impl Foo for u16 {\n \n impl Foo for u32 { //~ ERROR not all trait items implemented, missing: `foo`\n     default pub fn foo<T: Default>() -> T { T::default() }\n-    //~^ ERROR `default` not followed by an item\n+    //~^ ERROR `default` is not followed by an item\n     //~| ERROR non-item in item list\n }\n "}, {"sha": "15c49e8b6270b3789e467dc72c784c177e0295f2", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -1,4 +1,4 @@\n-error: `default` not followed by an item\n+error: `default` is not followed by an item\n   --> $DIR/default.rs:22:5\n    |\n LL |     default pub fn foo<T: Default>() -> T { T::default() }"}, {"sha": "31318ae3a096c2c1d1a60c0c0d0a6d57bf831a0b", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -2,6 +2,6 @@ fn main() {}\n \n extern {\n     pub pub fn foo();\n-    //~^ ERROR visibility `pub` not followed by an item\n+    //~^ ERROR visibility `pub` is not followed by an item\n     //~| ERROR non-item in item list\n }"}, {"sha": "36b9efd9dca6e39327220ffd8f218fb0750cff28", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -1,4 +1,4 @@\n-error: visibility `pub` not followed by an item\n+error: visibility `pub` is not followed by an item\n   --> $DIR/duplicate-visibility.rs:4:5\n    |\n LL |     pub pub fn foo();"}, {"sha": "80ce8885570786145d8c9218dcc7a171672d0d36", "filename": "src/test/ui/parser/impl-parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -7,4 +7,4 @@ impl ?Sized for Type {} //~ ERROR expected a trait, found type\n impl ?Sized for .. {} //~ ERROR expected a trait, found type\n \n default unsafe FAIL //~ ERROR expected item, found keyword `unsafe`\n-//~^ ERROR `default` not followed by an item\n+//~^ ERROR `default` is not followed by an item"}, {"sha": "755addf14527a8a63922081e9af554b75873b533", "filename": "src/test/ui/parser/impl-parsing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -22,7 +22,7 @@ error: expected a trait, found type\n LL | impl ?Sized for .. {}\n    |      ^^^^^^\n \n-error: `default` not followed by an item\n+error: `default` is not followed by an item\n   --> $DIR/impl-parsing.rs:9:1\n    |\n LL | default unsafe FAIL"}, {"sha": "5a7488e6ffcb464ef39260dd1be65aae948508ae", "filename": "src/test/ui/parser/issue-41155.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fissue-41155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fissue-41155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-41155.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -1,7 +1,7 @@\n struct S;\n \n impl S {\n-    pub //~ ERROR visibility `pub` not followed by an item\n+    pub //~ ERROR visibility `pub` is not followed by an item\n } //~ ERROR non-item in item list\n \n fn main() {}"}, {"sha": "8491afae2300498b447cdf494c6ab7716dde2011", "filename": "src/test/ui/parser/issue-41155.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -1,4 +1,4 @@\n-error: visibility `pub` not followed by an item\n+error: visibility `pub` is not followed by an item\n   --> $DIR/issue-41155.rs:4:5\n    |\n LL |     pub"}, {"sha": "8f46970b1af4dc422966c3eb4ac22431db260367", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -4,10 +4,10 @@ impl T for () { //~ ERROR cannot find trait `T` in this scope\n \n fn foo(&self) {}\n \n-trait T { //~ ERROR trait not supported in `trait` or `impl`\n+trait T { //~ ERROR trait is not supported in `trait`s or `impl`s\n     fn foo(&self);\n }\n \n-pub(crate) struct Bar<T>(); //~ ERROR struct not supported in `trait` or `impl`\n+pub(crate) struct Bar<T>(); //~ ERROR struct is not supported in `trait`s or `impl`s\n \n //~ ERROR this file contains an unclosed delimiter"}, {"sha": "1655a96839569d0be255a04dec9cfab9853e65a4", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -7,13 +7,13 @@ LL | impl T for () {\n LL |\n    |                                                    ^\n \n-error: trait not supported in `trait` or `impl`\n+error: trait is not supported in `trait`s or `impl`s\n   --> $DIR/missing-close-brace-in-impl-trait.rs:7:1\n    |\n LL | trait T {\n    | ^^^^^^^\n \n-error: struct not supported in `trait` or `impl`\n+error: struct is not supported in `trait`s or `impl`s\n   --> $DIR/missing-close-brace-in-impl-trait.rs:11:1\n    |\n LL | pub(crate) struct Bar<T>();"}, {"sha": "b6932deb5c0a684f7b97e263e8521f34789462d0", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -2,10 +2,10 @@ trait T {\n     fn foo(&self);\n \n pub(crate) struct Bar<T>();\n-//~^ ERROR struct not supported in `trait` or `impl`\n+//~^ ERROR struct is not supported in `trait`s or `impl`s\n \n impl T for Bar<usize> {\n-//~^ ERROR implementation not supported in `trait` or `impl`\n+//~^ ERROR implementation is not supported in `trait`s or `impl`s\n fn foo(&self) {}\n }\n "}, {"sha": "43a3883357a754112636611e79d0fccc42c898dd", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -7,13 +7,13 @@ LL | trait T {\n LL | fn main() {}\n    |                                                                 ^\n \n-error: struct not supported in `trait` or `impl`\n+error: struct is not supported in `trait`s or `impl`s\n   --> $DIR/missing-close-brace-in-trait.rs:4:1\n    |\n LL | pub(crate) struct Bar<T>();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: implementation not supported in `trait` or `impl`\n+error: implementation is not supported in `trait`s or `impl`s\n   --> $DIR/missing-close-brace-in-trait.rs:7:1\n    |\n LL | impl T for Bar<usize> {"}, {"sha": "fc1aeae2b0cf46caffcad8bae443ca218ef0a758", "filename": "src/test/ui/pub/pub-restricted-error-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.rs?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -1,2 +1,2 @@\n-pub(crate) () fn foo() {} //~ ERROR visibility `pub(crate)` not followed by an item\n+pub(crate) () fn foo() {} //~ ERROR visibility `pub(crate)` is not followed by an item\n //~^ ERROR expected item, found `(`"}, {"sha": "0511a821a7afdae36acadfcb6c52ceca8cd8a8d7", "filename": "src/test/ui/pub/pub-restricted-error-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fde5939d1c843c3ede7f6ea0eef704f52854b45d/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr?ref=fde5939d1c843c3ede7f6ea0eef704f52854b45d", "patch": "@@ -1,4 +1,4 @@\n-error: visibility `pub(crate)` not followed by an item\n+error: visibility `pub(crate)` is not followed by an item\n   --> $DIR/pub-restricted-error-fn.rs:1:1\n    |\n LL | pub(crate) () fn foo() {}"}]}