{"sha": "9001a6429969be2732f0f0b650f193faeade89e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMDFhNjQyOTk2OWJlMjczMmYwZjBiNjUwZjE5M2ZhZWFkZTg5ZTc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-13T19:38:58Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-13T19:38:58Z"}, "message": "add spans to `require_lang_items`", "tree": {"sha": "52766e8e18ef8d0d045d99f12f2255c69352ff7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52766e8e18ef8d0d045d99f12f2255c69352ff7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9001a6429969be2732f0f0b650f193faeade89e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9001a6429969be2732f0f0b650f193faeade89e7", "html_url": "https://github.com/rust-lang/rust/commit/9001a6429969be2732f0f0b650f193faeade89e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9001a6429969be2732f0f0b650f193faeade89e7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f93bc774b1c0b9c415c4989cb81e6b650711e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f93bc774b1c0b9c415c4989cb81e6b650711e7d", "html_url": "https://github.com/rust-lang/rust/commit/5f93bc774b1c0b9c415c4989cb81e6b650711e7d"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "bad176c603f35c8833b7dc11ef3ed696b2d29f8a", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9001a6429969be2732f0f0b650f193faeade89e7/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9001a6429969be2732f0f0b650f193faeade89e7/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=9001a6429969be2732f0f0b650f193faeade89e7", "patch": "@@ -503,7 +503,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n             let trait_ref = ty::TraitRef {\n-                def_id: tcx.require_lang_item(CopyTraitLangItem, None),\n+                def_id: tcx.require_lang_item(CopyTraitLangItem, Some(self.last_span)),\n                 substs: tcx.mk_substs_trait(place_ty.ty, &[]),\n             };\n \n@@ -1469,7 +1469,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.check_rvalue(body, rv, location);\n                 if !self.tcx().features().unsized_locals {\n                     let trait_ref = ty::TraitRef {\n-                        def_id: tcx.require_lang_item(SizedTraitLangItem, None),\n+                        def_id: tcx.require_lang_item(SizedTraitLangItem, Some(self.last_span)),\n                         substs: tcx.mk_substs_trait(place_ty, &[]),\n                     };\n                     self.prove_trait_ref(\n@@ -2014,8 +2014,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                     ty::Predicate::Trait(\n                                         ty::Binder::bind(ty::TraitPredicate {\n                                             trait_ref: ty::TraitRef::new(\n-                                                self.tcx()\n-                                                    .require_lang_item(CopyTraitLangItem, None),\n+                                                self.tcx().require_lang_item(\n+                                                    CopyTraitLangItem,\n+                                                    Some(self.last_span),\n+                                                ),\n                                                 tcx.mk_substs_trait(ty, &[]),\n                                             ),\n                                         }),\n@@ -2039,7 +2041,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n \n                 let trait_ref = ty::TraitRef {\n-                    def_id: tcx.require_lang_item(SizedTraitLangItem, None),\n+                    def_id: tcx.require_lang_item(SizedTraitLangItem, Some(self.last_span)),\n                     substs: tcx.mk_substs_trait(ty, &[]),\n                 };\n \n@@ -2137,7 +2139,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n                         let trait_ref = ty::TraitRef {\n-                            def_id: tcx.require_lang_item(CoerceUnsizedTraitLangItem, None),\n+                            def_id: tcx.require_lang_item(\n+                                CoerceUnsizedTraitLangItem,\n+                                Some(self.last_span),\n+                            ),\n                             substs: tcx.mk_substs_trait(op.ty(body, tcx), &[ty.into()]),\n                         };\n "}, {"sha": "14faa5be02f4ee9f3f4cec734049b157278615f3", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9001a6429969be2732f0f0b650f193faeade89e7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9001a6429969be2732f0f0b650f193faeade89e7/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=9001a6429969be2732f0f0b650f193faeade89e7", "patch": "@@ -382,7 +382,7 @@ fn make_generator_state_argument_indirect<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Bo\n fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let ref_gen_ty = body.local_decls.raw[1].ty;\n \n-    let pin_did = tcx.require_lang_item(PinTypeLangItem, None);\n+    let pin_did = tcx.require_lang_item(PinTypeLangItem, Some(body.span));\n     let pin_adt_ref = tcx.adt_def(pin_did);\n     let substs = tcx.intern_substs(&[ref_gen_ty.into()]);\n     let pin_ref_gen_ty = tcx.mk_adt(pin_adt_ref, substs);"}, {"sha": "bff1e727fe365062b9ca2659ce951051737b0aa3", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9001a6429969be2732f0f0b650f193faeade89e7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9001a6429969be2732f0f0b650f193faeade89e7/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=9001a6429969be2732f0f0b650f193faeade89e7", "patch": "@@ -7,6 +7,7 @@ use rustc_trait_selection::traits::{self, ObligationCause};\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n+use rustc_hir::lang_items::DerefTraitLangItem;\n use rustc_hir::{is_range_literal, Node};\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n@@ -634,7 +635,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ if sp == expr.span && !is_macro => {\n                 // Check for `Deref` implementations by constructing a predicate to\n                 // prove: `<T as Deref>::Output == U`\n-                let deref_trait = self.tcx.lang_items().deref_trait().unwrap();\n+                let deref_trait = self.tcx.require_lang_item(DerefTraitLangItem, Some(expr.span));\n                 let item_def_id = self\n                     .tcx\n                     .associated_items(deref_trait)"}]}