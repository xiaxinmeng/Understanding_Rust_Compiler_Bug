{"sha": "5d086c328276d428d499284d745a0a1814e8b11c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMDg2YzMyODI3NmQ0MjhkNDk5Mjg0ZDc0NWEwYTE4MTRlOGIxMWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-31T05:59:27Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-31T05:59:27Z"}, "message": "Tweak E0308 error for clarity", "tree": {"sha": "a91724f6fb42ee7e5f0b908ab0288e29a108e211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a91724f6fb42ee7e5f0b908ab0288e29a108e211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d086c328276d428d499284d745a0a1814e8b11c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d086c328276d428d499284d745a0a1814e8b11c", "html_url": "https://github.com/rust-lang/rust/commit/5d086c328276d428d499284d745a0a1814e8b11c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d086c328276d428d499284d745a0a1814e8b11c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f62f540b4e81a4e67a39f199948406684a343f4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f62f540b4e81a4e67a39f199948406684a343f4a", "html_url": "https://github.com/rust-lang/rust/commit/f62f540b4e81a4e67a39f199948406684a343f4a"}], "stats": {"total": 159, "additions": 87, "deletions": 72}, "files": [{"sha": "9492b1a2341dc89909249fa0314d6b07c6c2ab43", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 50, "deletions": 32, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -4796,20 +4796,26 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // `consider_hint_about_removing_semicolon` will point at the last expression\n                     // if it were a relevant part of the error. This improves usability in editors\n                     // that highlight errors inline.\n-                    let (sp, fn_span) = if let Some((decl, ident)) = self.get_parent_fn_decl(blk.id) {\n-                        (decl.output.span(), Some(ident.span))\n-                    } else {\n-                        (blk.span, None)\n-                    };\n+                    let mut sp = blk.span;\n+                    let mut fn_span = None;\n+                    if let Some((decl, ident)) = self.get_parent_fn_decl(blk.id) {\n+                        let ret_sp = decl.output.span();\n+                        if let Some(block_sp) = self.parent_item_span(blk.id) {\n+                            // HACK: on some cases (`ui/liveness/liveness-issue-2163.rs`) the\n+                            // output would otherwise be incorrect and even misleading. Make sure\n+                            // the span we're aiming at correspond to a `fn` body.\n+                            if block_sp == blk.span {\n+                                sp = ret_sp;\n+                                fn_span = Some(ident.span);\n+                            }\n+                        }\n+                    }\n                     coerce.coerce_forced_unit(self, &self.misc(sp), &mut |err| {\n                         if let Some(expected_ty) = expected.only_has_type(self) {\n                             self.consider_hint_about_removing_semicolon(blk, expected_ty, err);\n                         }\n                         if let Some(fn_span) = fn_span {\n-                            err.span_label(\n-                                fn_span,\n-                                \"this function's body doesn't return the expected type\",\n-                            );\n+                            err.span_label(fn_span, \"this function's body doesn't return\");\n                         }\n                     }, false);\n                 }\n@@ -4834,6 +4840,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ty\n     }\n \n+    fn parent_item_span(&self, id: ast::NodeId) -> Option<Span> {\n+        let node = self.tcx.hir().get(self.tcx.hir().get_parent(id));\n+        match node {\n+            Node::Item(&hir::Item {\n+                node: hir::ItemKind::Fn(_, _, _, body_id), ..\n+            }) |\n+            Node::ImplItem(&hir::ImplItem {\n+                node: hir::ImplItemKind::Method(_, body_id), ..\n+            }) => {\n+                let body = self.tcx.hir().body(body_id);\n+                if let ExprKind::Block(block, _) = &body.value.node {\n+                    return Some(block.span);\n+                }\n+            }\n+            _ => {}\n+        }\n+        None\n+    }\n+\n     /// Given a function block's `NodeId`, return its `FnDecl` , `None` otherwise.\n     fn get_parent_fn_decl(&self, blk_id: ast::NodeId) -> Option<(hir::FnDecl, ast::Ident)> {\n         let parent = self.tcx.hir().get(self.tcx.hir().get_parent(blk_id));\n@@ -4842,33 +4867,26 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     /// Given a function `Node`, return its `FnDecl` , `None` otherwise.\n     fn get_node_fn_decl(&self, node: Node) -> Option<(hir::FnDecl, ast::Ident, bool)> {\n-        if let Node::Item(&hir::Item {\n-            ident, node: hir::ItemKind::Fn(ref decl, ..), ..\n-        }) = node {\n-            decl.clone().and_then(|decl| {\n+        match node {\n+            Node::Item(&hir::Item {\n+                ident, node: hir::ItemKind::Fn(ref decl, ..), ..\n+            }) => decl.clone().and_then(|decl| {\n                 // This is less than ideal, it will not suggest a return type span on any\n                 // method called `main`, regardless of whether it is actually the entry point,\n                 // but it will still present it as the reason for the expected type.\n                 Some((decl, ident, ident.name != Symbol::intern(\"main\")))\n-            })\n-        } else if let Node::TraitItem(&hir::TraitItem {\n-            ident, node: hir::TraitItemKind::Method(hir::MethodSig {\n-                ref decl, ..\n-            }, ..), ..\n-        }) = node {\n-            decl.clone().and_then(|decl| {\n-                Some((decl, ident, true))\n-            })\n-        } else if let Node::ImplItem(&hir::ImplItem {\n-            ident, node: hir::ImplItemKind::Method(hir::MethodSig {\n-                ref decl, ..\n-            }, ..), ..\n-        }) = node {\n-            decl.clone().and_then(|decl| {\n-                Some((decl, ident, false))\n-            })\n-        } else {\n-            None\n+            }),\n+            Node::TraitItem(&hir::TraitItem {\n+                ident, node: hir::TraitItemKind::Method(hir::MethodSig {\n+                    ref decl, ..\n+                }, ..), ..\n+            }) => decl.clone().and_then(|decl| Some((decl, ident, true))),\n+            Node::ImplItem(&hir::ImplItem {\n+                ident, node: hir::ImplItemKind::Method(hir::MethodSig {\n+                    ref decl, ..\n+                }, ..), ..\n+            }) => decl.clone().and_then(|decl| Some((decl, ident, false))),\n+            _ => None,\n         }\n     }\n "}, {"sha": "1bf17db21ac5ac5f6f23b0e7a24875d25546ee79", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> String {  //~ ERROR mismatched types\n    |    -      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n LL |     0u8;\n LL |     \"bla\".to_string();\n    |                      - help: consider removing this semicolon\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n LL | fn g() -> String {  //~ ERROR mismatched types\n    |    -      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n LL |     \"this won't work\".to_string();\n LL |     \"removeme\".to_string();\n    |                           - help: consider removing this semicolon"}, {"sha": "2c13b28766943a2b06874eba673985c554c4bd68", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn blah() -> i32 { //~ ERROR mismatched types\n    |    ----      ^^^ expected i32, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n ...\n LL |     ;\n    |     - help: consider removing this semicolon"}, {"sha": "91e926eb5a73b924429be7f3a89e32212bae2899", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo() -> String {  //~ ERROR mismatched types\n    |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n ...\n LL |     ;\n    |     - help: consider removing this semicolon\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n LL | fn bar() -> String {  //~ ERROR mismatched types\n    |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n LL |     \"foobar\".to_string()\n LL |     ;\n    |     - help: consider removing this semicolon"}, {"sha": "3e81753a4105fa312094d6f6ba5d031f4731b526", "filename": "src/test/ui/break-while-condition.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -1,10 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/break-while-condition.rs:3:11\n+  --> $DIR/break-while-condition.rs:9:20\n    |\n-LL | fn main() {\n-   |    ----   ^ expected !, found ()\n-   |    |\n-   |    this function's body doesn't return the expected type\n+LL |           let _: ! = { //~ ERROR mismatched types\n+   |  ____________________^\n+LL | |             'a: while break 'a {};\n+LL | |         };\n+   | |_________^ expected !, found ()\n    |\n    = note: expected type `!`\n               found type `()`"}, {"sha": "c8ec2f0545e6b0479dbdb081023430b2ccabeef8", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n    |    --------            ^^^ expected i32, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n LL |     x + 1;\n    |          - help: consider removing this semicolon\n    |\n@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n LL | fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n    |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n LL |     Ok(1);\n    |          - help: consider removing this semicolon\n    |"}, {"sha": "d5caf777cd45e989996c1fb6fc80b37cb45ffc37", "filename": "src/test/ui/issues/issue-10536.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -17,12 +17,10 @@ LL |     assert!({one! two()});\n    |              ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-10536.rs:11:15\n+  --> $DIR/issue-10536.rs:14:13\n    |\n-LL | pub fn main() {\n-   |        ----   ^ expected bool, found ()\n-   |        |\n-   |        this function's body doesn't return the expected type\n+LL |     assert!({one! two()});\n+   |             ^^^^^^^^^^^^ expected bool, found ()\n    |\n    = note: expected type `bool`\n               found type `()`"}, {"sha": "0339fdc55b9c83157860ce5422091cf8510348f0", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n    |        -                     ^^^^^^^^^^^^^^^^^^ expected associated type, found ()\n    |        |\n-   |        this function's body doesn't return the expected type\n+   |        this function's body doesn't return\n    |\n    = note: expected type `<T as Tr<'a>>::Out`\n               found type `()`"}, {"sha": "3fc5317830e48f879778a9f7ec38faf9405d97d0", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL | fn foo() -> bool {\n    |    ---      ^^^^ expected bool, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n LL |     //~^ ERROR E0308\n LL |     break true; //~ ERROR E0268\n    |               - help: consider removing this semicolon"}, {"sha": "f1962a86ee03a8f3020864ba2ba25704a00b3f2b", "filename": "src/test/ui/issues/issue-44023.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize { //~ ERROR mismatched types\n    |    ------------------------        ^^^^^ expected isize, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "c087292e978c28acdb9770ef3d1e6bd1f9dfc087", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo(b: bool) -> Result<bool,String> { //~ ERROR mismatched types\n    |    ---             ^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n LL |     Err(\"bar\".to_string());\n    |                           - help: consider removing this semicolon\n    |"}, {"sha": "3133efdedd76201d55d9a0053931012a24f97712", "filename": "src/test/ui/liveness/liveness-closure-require-ret.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -1,10 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/liveness-closure-require-ret.rs:2:11\n+  --> $DIR/liveness-closure-require-ret.rs:2:37\n    |\n LL | fn main() { println!(\"{}\", force(|| {})); } //~ ERROR mismatched types\n-   |    ----   ^ expected isize, found ()\n-   |    |\n-   |    this function's body doesn't return the expected type\n+   |                                     ^^ expected isize, found ()\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "bbcbbdbe8dd5bccca7640f06f600d711e7d2faf7", "filename": "src/test/ui/liveness/liveness-forgot-ret.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -2,10 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-forgot-ret.rs:3:19\n    |\n LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; }\n-   |    -              ^^^^^                             - expected because of this statement\n-   |    |              |\n-   |    |              expected isize, found ()\n-   |    this function's body doesn't return the expected type\n+   |    -              ^^^^^ expected isize, found ()    - expected because of this statement\n+   |    |\n+   |    this function's body doesn't return\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "e91994d9a2299cd7a0fa4a8cd544b4c36ae1db3c", "filename": "src/test/ui/liveness/liveness-issue-2163.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -1,10 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/liveness-issue-2163.rs:3:11\n+  --> $DIR/liveness-issue-2163.rs:5:30\n    |\n-LL | fn main() {\n-   |    ----   ^ expected bool, found ()\n-   |    |\n-   |    this function's body doesn't return the expected type\n+LL |       a.iter().all(|_| -> bool {\n+   |  ______________________________^\n+LL | |         //~^ ERROR mismatched types\n+LL | |     });\n+   | |_____^ expected bool, found ()\n    |\n    = note: expected type `bool`\n               found type `()`"}, {"sha": "58d0249ee3b24996024dfbd059bcdf52ea78b955", "filename": "src/test/ui/liveness/liveness-missing-ret2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize { //~ ERROR mismatched types\n    |    -      ^^^^^ expected isize, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "c6d166d8b31a07b745b902de48ba71163ccf59b7", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n    |                                ---      ^^^    - help: consider removing this semicolon\n    |                                |        |\n    |                                |        expected i32, found ()\n-   |                                this function's body doesn't return the expected type\n+   |                                this function's body doesn't return\n ...\n LL |     test!();\n    |     -------- in this macro invocation\n@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL | fn no_return() -> i32 {} //~ ERROR mismatched types\n    |    ---------      ^^^ expected i32, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n    |\n    = note: expected type `i32`\n               found type `()`\n@@ -30,7 +30,7 @@ error[E0308]: mismatched types\n LL | fn bar(x: u32) -> u32 { //~ ERROR mismatched types\n    |    ---            ^^^ expected u32, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n LL |     x * 2;\n    |          - help: consider removing this semicolon\n    |\n@@ -43,7 +43,7 @@ error[E0308]: mismatched types\n LL | fn baz(x: u64) -> u32 { //~ ERROR mismatched types\n    |    ---            ^^^ expected u32, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n    |\n    = note: expected type `u32`\n               found type `()`"}, {"sha": "42466e2fc6574f8fba377aed422388bc9e55df00", "filename": "src/test/ui/missing/missing-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d086c328276d428d499284d745a0a1814e8b11c/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr?ref=5d086c328276d428d499284d745a0a1814e8b11c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize { }\n    |    -      ^^^^^ expected isize, found ()\n    |    |\n-   |    this function's body doesn't return the expected type\n+   |    this function's body doesn't return\n    |\n    = note: expected type `isize`\n               found type `()`"}]}