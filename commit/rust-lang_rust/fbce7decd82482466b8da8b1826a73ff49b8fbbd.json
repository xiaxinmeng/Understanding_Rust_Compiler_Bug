{"sha": "fbce7decd82482466b8da8b1826a73ff49b8fbbd", "node_id": "C_kwDOAAsO6NoAKGZiY2U3ZGVjZDgyNDgyNDY2YjhkYThiMTgyNmE3M2ZmNDliOGZiYmQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-06T21:39:37Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-09T19:42:23Z"}, "message": "DiagnosticBuilder -> Diagnostic", "tree": {"sha": "f4f190fa1c80464ede185d148dce8899a9e087f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f190fa1c80464ede185d148dce8899a9e087f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbce7decd82482466b8da8b1826a73ff49b8fbbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbce7decd82482466b8da8b1826a73ff49b8fbbd", "html_url": "https://github.com/rust-lang/rust/commit/fbce7decd82482466b8da8b1826a73ff49b8fbbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbce7decd82482466b8da8b1826a73ff49b8fbbd/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "html_url": "https://github.com/rust-lang/rust/commit/cc9b259b5e94e4543b96dca236e3a1af5ec496c9"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "1cb2e5e3260141fc2a1e78e051530f3ac43627d6", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fbce7decd82482466b8da8b1826a73ff49b8fbbd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbce7decd82482466b8da8b1826a73ff49b8fbbd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=fbce7decd82482466b8da8b1826a73ff49b8fbbd", "patch": "@@ -1,6 +1,4 @@\n-use rustc_errors::{\n-    Applicability, Diagnostic, DiagnosticBuilder, EmissionGuarantee, ErrorGuaranteed,\n-};\n+use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n@@ -629,25 +627,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         self.buffer_error(err);\n     }\n \n-    fn suggest_map_index_mut_alternatives(\n-        &self,\n-        ty: Ty<'_>,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n-        span: Span,\n-    ) {\n+    fn suggest_map_index_mut_alternatives(&self, ty: Ty<'tcx>, err: &mut Diagnostic, span: Span) {\n         let Some(adt) = ty.ty_adt_def() else { return };\n         let did = adt.did();\n         if self.infcx.tcx.is_diagnostic_item(sym::HashMap, did)\n             || self.infcx.tcx.is_diagnostic_item(sym::BTreeMap, did)\n         {\n-            struct V<'a, 'b, 'tcx, G: EmissionGuarantee> {\n+            struct V<'a, 'tcx> {\n                 assign_span: Span,\n-                err: &'a mut DiagnosticBuilder<'b, G>,\n+                err: &'a mut Diagnostic,\n                 ty: Ty<'tcx>,\n                 suggested: bool,\n             }\n-            impl<'a, 'b: 'a, 'hir, 'tcx, G: EmissionGuarantee> Visitor<'hir> for V<'a, 'b, 'tcx, G> {\n-                fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'hir>) {\n+            impl<'a, 'tcx> Visitor<'tcx> for V<'a, 'tcx> {\n+                fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n                     hir::intravisit::walk_stmt(self, stmt);\n                     let expr = match stmt.kind {\n                         hir::StmtKind::Semi(expr) | hir::StmtKind::Expr(expr) => expr,"}, {"sha": "c181de48a9ad8fb9b0053e1a38347f06c8104aa4", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbce7decd82482466b8da8b1826a73ff49b8fbbd/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbce7decd82482466b8da8b1826a73ff49b8fbbd/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=fbce7decd82482466b8da8b1826a73ff49b8fbbd", "patch": "@@ -87,6 +87,7 @@ use self::VarKind::*;\n use rustc_ast::InlineAsmOptions;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def::*;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -1690,7 +1691,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         &self,\n         name: &str,\n         opt_body: Option<&hir::Body<'_>>,\n-        err: &mut rustc_errors::DiagnosticBuilder<'_, ()>,\n+        err: &mut Diagnostic,\n     ) -> bool {\n         let mut has_litstring = false;\n         let Some(opt_body) = opt_body else {return false;};"}, {"sha": "8989c888ed14ab0bd9119042f0f8a71ed4b2b46c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fbce7decd82482466b8da8b1826a73ff49b8fbbd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbce7decd82482466b8da8b1826a73ff49b8fbbd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=fbce7decd82482466b8da8b1826a73ff49b8fbbd", "patch": "@@ -437,7 +437,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n     fn try_lookup_name_relaxed(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         source: PathSource<'_>,\n         path: &[Segment],\n         span: Span,\n@@ -497,7 +497,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         .contains(span)\n                     {\n                         // Already reported this issue on the lhs of the type ascription.\n-                        err.delay_as_bug();\n+                        err.downgrade_to_delayed_bug();\n                         return (true, candidates);\n                     }\n                 }\n@@ -616,7 +616,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n     fn suggest_trait_and_bounds(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         source: PathSource<'_>,\n         res: Option<Res>,\n         span: Span,\n@@ -691,7 +691,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n     fn suggest_typo(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         source: PathSource<'_>,\n         path: &[Segment],\n         span: Span,\n@@ -750,7 +750,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n     fn err_code_special_cases(\n         &mut self,\n-        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        err: &mut Diagnostic,\n         source: PathSource<'_>,\n         path: &[Segment],\n         span: Span,"}]}