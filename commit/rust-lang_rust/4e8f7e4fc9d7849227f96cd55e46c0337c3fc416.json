{"sha": "4e8f7e4fc9d7849227f96cd55e46c0337c3fc416", "node_id": "C_kwDOAAsO6NoAKDRlOGY3ZTRmYzlkNzg0OTIyN2Y5NmNkNTVlNDZjMDMzN2MzZmM0MTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-29T05:14:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-29T05:14:20Z"}, "message": "Rollup merge of #107425 - clubby789:match-range-missing-space, r=compiler-errors\n\nCheck for missing space between fat arrow and range pattern\n\nFixes #107420\n\nIdeally we wouldn't emit an error about expecting `=>` etc., but I'm not sure how to recover from this.\n\n`@rustbot` label +A-diagnostics", "tree": {"sha": "879e24873d1bd19b282a2168faedfaf933cab8c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/879e24873d1bd19b282a2168faedfaf933cab8c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1gCsCRBK7hj4Ov3rIwAA/60IAB6Kw5n3s4N2pHh4fND5L/+W\nmCY/PJ9E8l+n4PAAcmsIsiO+Rbu3WfYdoPGTdcO03Iowb24MKwW/hV12hu2Hebyq\n0uy1HPtNVPA7fq17DyK1BXjrqoWIfEsFqAsECRwxz7mbr9ZLhpVK17PBUcnIvWwZ\nc1EK2yXsrpH/ro0V06D4HtXfdd8CBLAM4uzDPzFfC4RSb9yt2ZTQq4BgksX53Toi\nt+fdVx3ht8ZaBqbASUTVkz+2a2vD76b1b85PcOy8tikKMKaGeI2zl6hZ5eAC5o5a\nT8bA2/PnStn5fttLJqsO7joEMD9R4PKKGPhnvHH1YBzIcyiOmyXyU2VDMD50ykA=\n=oAOr\n-----END PGP SIGNATURE-----\n", "payload": "tree 879e24873d1bd19b282a2168faedfaf933cab8c0\nparent 5ff6cdca7ec664c7f96653e6c028b524757d60c4\nparent c5688794e2c3bb94f93e37a4f77576ac0d86a14e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674969260 +0100\ncommitter GitHub <noreply@github.com> 1674969260 +0100\n\nRollup merge of #107425 - clubby789:match-range-missing-space, r=compiler-errors\n\nCheck for missing space between fat arrow and range pattern\n\nFixes #107420\n\nIdeally we wouldn't emit an error about expecting `=>` etc., but I'm not sure how to recover from this.\n\n`@rustbot` label +A-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416", "html_url": "https://github.com/rust-lang/rust/commit/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff6cdca7ec664c7f96653e6c028b524757d60c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff6cdca7ec664c7f96653e6c028b524757d60c4", "html_url": "https://github.com/rust-lang/rust/commit/5ff6cdca7ec664c7f96653e6c028b524757d60c4"}, {"sha": "c5688794e2c3bb94f93e37a4f77576ac0d86a14e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5688794e2c3bb94f93e37a4f77576ac0d86a14e", "html_url": "https://github.com/rust-lang/rust/commit/c5688794e2c3bb94f93e37a4f77576ac0d86a14e"}], "stats": {"total": 135, "additions": 111, "deletions": 24}, "files": [{"sha": "1728ef70cba0a7bd817b4db0a917b9060587c9db", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=4e8f7e4fc9d7849227f96cd55e46c0337c3fc416", "patch": "@@ -199,6 +199,17 @@ parse_match_arm_body_without_braces = `match` arm body without braces\n         } with a body\n     .suggestion_use_comma_not_semicolon = use a comma to end a `match` arm expression\n \n+parse_inclusive_range_extra_equals = unexpected `=` after inclusive range\n+    .suggestion_remove_eq = use `..=` instead\n+    .note = inclusive ranges end with a single equals sign (`..=`)\n+\n+parse_inclusive_range_match_arrow = unexpected `=>` after open range\n+    .suggestion_add_space = add a space between the pattern and `=>`\n+\n+parse_inclusive_range_no_end = inclusive range with no end\n+    .suggestion_open_range = use `..` instead\n+    .note = inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n parse_struct_literal_not_allowed_here = struct literals are not allowed here\n     .suggestion = surround the struct literal with parentheses\n "}, {"sha": "054b41b478d60516d53c729faa2f1ecdcd1bb5d9", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=4e8f7e4fc9d7849227f96cd55e46c0337c3fc416", "patch": "@@ -649,6 +649,48 @@ pub(crate) struct MatchArmBodyWithoutBraces {\n     pub sub: MatchArmBodyWithoutBracesSugg,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_inclusive_range_extra_equals)]\n+#[note]\n+pub(crate) struct InclusiveRangeExtraEquals {\n+    #[primary_span]\n+    #[suggestion(\n+        suggestion_remove_eq,\n+        style = \"short\",\n+        code = \"..=\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_inclusive_range_match_arrow)]\n+pub(crate) struct InclusiveRangeMatchArrow {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion(\n+        suggestion_add_space,\n+        style = \"verbose\",\n+        code = \" \",\n+        applicability = \"machine-applicable\"\n+    )]\n+    pub after_pat: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_inclusive_range_no_end, code = \"E0586\")]\n+#[note]\n+pub(crate) struct InclusiveRangeNoEnd {\n+    #[primary_span]\n+    #[suggestion(\n+        suggestion_open_range,\n+        code = \"..\",\n+        applicability = \"machine-applicable\",\n+        style = \"short\"\n+    )]\n+    pub span: Span,\n+}\n+\n #[derive(Subdiagnostic)]\n pub(crate) enum MatchArmBodyWithoutBracesSugg {\n     #[multipart_suggestion(suggestion_add_braces, applicability = \"machine-applicable\")]"}, {"sha": "17d1e200b41aab6bd677a8e0c9e19d7104194056", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=4e8f7e4fc9d7849227f96cd55e46c0337c3fc416", "patch": "@@ -3168,7 +3168,7 @@ impl<'a> Parser<'a> {\n         limits: RangeLimits,\n     ) -> ExprKind {\n         if end.is_none() && limits == RangeLimits::Closed {\n-            self.inclusive_range_with_incorrect_end(self.prev_token.span);\n+            self.inclusive_range_with_incorrect_end();\n             ExprKind::Err\n         } else {\n             ExprKind::Range(start, end, limits)"}, {"sha": "912f7cc14f6cc238589469007013becf9d6239c2", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=4e8f7e4fc9d7849227f96cd55e46c0337c3fc416", "patch": "@@ -1,5 +1,7 @@\n use super::{ForceCollect, Parser, PathStyle, TrailingToken};\n-use crate::errors::RemoveLet;\n+use crate::errors::{\n+    InclusiveRangeExtraEquals, InclusiveRangeMatchArrow, InclusiveRangeNoEnd, RemoveLet,\n+};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use rustc_ast::mut_visit::{noop_visit_pat, MutVisitor};\n use rustc_ast::ptr::P;\n@@ -9,7 +11,7 @@ use rustc_ast::{\n     PatField, PatKind, Path, QSelf, RangeEnd, RangeSyntax,\n };\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::{respan, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -746,47 +748,52 @@ impl<'a> Parser<'a> {\n             // Parsing e.g. `X..`.\n             if let RangeEnd::Included(_) = re.node {\n                 // FIXME(Centril): Consider semantic errors instead in `ast_validation`.\n-                self.inclusive_range_with_incorrect_end(re.span);\n+                self.inclusive_range_with_incorrect_end();\n             }\n             None\n         };\n         Ok(PatKind::Range(Some(begin), end, re))\n     }\n \n-    pub(super) fn inclusive_range_with_incorrect_end(&mut self, span: Span) {\n+    pub(super) fn inclusive_range_with_incorrect_end(&mut self) {\n         let tok = &self.token;\n-\n+        let span = self.prev_token.span;\n         // If the user typed \"..==\" instead of \"..=\", we want to give them\n         // a specific error message telling them to use \"..=\".\n+        // If they typed \"..=>\", suggest they use \".. =>\".\n         // Otherwise, we assume that they meant to type a half open exclusive\n         // range and give them an error telling them to do that instead.\n-        if matches!(tok.kind, token::Eq) && tok.span.lo() == span.hi() {\n-            let span_with_eq = span.to(tok.span);\n+        let no_space = tok.span.lo() == span.hi();\n+        match tok.kind {\n+            token::Eq if no_space => {\n+                let span_with_eq = span.to(tok.span);\n \n-            // Ensure the user doesn't receive unhelpful unexpected token errors\n-            self.bump();\n-            if self.is_pat_range_end_start(0) {\n-                let _ = self.parse_pat_range_end().map_err(|e| e.cancel());\n-            }\n+                // Ensure the user doesn't receive unhelpful unexpected token errors\n+                self.bump();\n+                if self.is_pat_range_end_start(0) {\n+                    let _ = self.parse_pat_range_end().map_err(|e| e.cancel());\n+                }\n \n-            self.error_inclusive_range_with_extra_equals(span_with_eq);\n-        } else {\n-            self.error_inclusive_range_with_no_end(span);\n+                self.error_inclusive_range_with_extra_equals(span_with_eq);\n+            }\n+            token::Gt if no_space => {\n+                self.error_inclusive_range_match_arrow(span);\n+            }\n+            _ => self.error_inclusive_range_with_no_end(span),\n         }\n     }\n \n     fn error_inclusive_range_with_extra_equals(&self, span: Span) {\n-        self.struct_span_err(span, \"unexpected `=` after inclusive range\")\n-            .span_suggestion_short(span, \"use `..=` instead\", \"..=\", Applicability::MaybeIncorrect)\n-            .note(\"inclusive ranges end with a single equals sign (`..=`)\")\n-            .emit();\n+        self.sess.emit_err(InclusiveRangeExtraEquals { span });\n+    }\n+\n+    fn error_inclusive_range_match_arrow(&self, span: Span) {\n+        let after_pat = span.with_hi(span.hi() - rustc_span::BytePos(1)).shrink_to_hi();\n+        self.sess.emit_err(InclusiveRangeMatchArrow { span, after_pat });\n     }\n \n     fn error_inclusive_range_with_no_end(&self, span: Span) {\n-        struct_span_err!(self.sess.span_diagnostic, span, E0586, \"inclusive range with no end\")\n-            .span_suggestion_short(span, \"use `..` instead\", \"..\", Applicability::MachineApplicable)\n-            .note(\"inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\")\n-            .emit();\n+        self.sess.emit_err(InclusiveRangeNoEnd { span });\n     }\n \n     /// Parse a range-to pattern, `..X` or `..=X` where `X` remains to be parsed."}, {"sha": "7ba2b6d857cd0207ae19ee3eee3806ba65ad7f34", "filename": "tests/ui/half-open-range-patterns/half-open-range-pats-inclusive-match-arrow.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs?ref=4e8f7e4fc9d7849227f96cd55e46c0337c3fc416", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let x = 42;\n+    match x {\n+        0..=73 => {},\n+        74..=> {},   //~ ERROR unexpected `=>` after open range\n+                     //~^ ERROR expected one of `=>`, `if`, or `|`, found `>`\n+    }\n+}"}, {"sha": "9ba6d15113cd648775785808181b66bb0782d73c", "filename": "tests/ui/half-open-range-patterns/half-open-range-pats-inclusive-match-arrow.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e8f7e4fc9d7849227f96cd55e46c0337c3fc416/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr?ref=4e8f7e4fc9d7849227f96cd55e46c0337c3fc416", "patch": "@@ -0,0 +1,19 @@\n+error: unexpected `=>` after open range\n+  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:11\n+   |\n+LL |         74..=> {},\n+   |           ^^^\n+   |\n+help: add a space between the pattern and `=>`\n+   |\n+LL |         74.. => {},\n+   |             +\n+\n+error: expected one of `=>`, `if`, or `|`, found `>`\n+  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:14\n+   |\n+LL |         74..=> {},\n+   |              ^ expected one of `=>`, `if`, or `|`\n+\n+error: aborting due to 2 previous errors\n+"}]}