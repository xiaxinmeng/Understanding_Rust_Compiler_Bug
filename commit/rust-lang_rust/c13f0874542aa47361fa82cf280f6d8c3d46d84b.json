{"sha": "c13f0874542aa47361fa82cf280f6d8c3d46d84b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxM2YwODc0NTQyYWE0NzM2MWZhODJjZjI4MGY2ZDhjM2Q0NmQ4NGI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-09T14:56:58Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-09T15:25:39Z"}, "message": "Properly recognize self as an upvar when closed over\n\nCloses #1463", "tree": {"sha": "fa08441fd0ea94f6322fb8e74493e81934b78525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa08441fd0ea94f6322fb8e74493e81934b78525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c13f0874542aa47361fa82cf280f6d8c3d46d84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c13f0874542aa47361fa82cf280f6d8c3d46d84b", "html_url": "https://github.com/rust-lang/rust/commit/c13f0874542aa47361fa82cf280f6d8c3d46d84b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c13f0874542aa47361fa82cf280f6d8c3d46d84b/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51364b5708d83aef3bc6371b052e7644efe55121", "url": "https://api.github.com/repos/rust-lang/rust/commits/51364b5708d83aef3bc6371b052e7644efe55121", "html_url": "https://github.com/rust-lang/rust/commit/51364b5708d83aef3bc6371b052e7644efe55121"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "63a16f9b408fec40c84be855d6cb889d2e52d500", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c13f0874542aa47361fa82cf280f6d8c3d46d84b/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13f0874542aa47361fa82cf280f6d8c3d46d84b/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=c13f0874542aa47361fa82cf280f6d8c3d46d84b", "patch": "@@ -845,16 +845,14 @@ fn scope_closes(sc: scope) -> option::t<node_id> {\n }\n \n fn def_is_local(d: def) -> bool {\n-    ret alt d {\n-          ast::def_arg(_, _) | ast::def_local(_, _) | ast::def_binding(_) |\n-          ast::def_upvar(_, _, _) {\n-            true\n-          }\n-          _ { false }\n-        };\n+    alt d {\n+      ast::def_arg(_, _) | ast::def_local(_, _) | ast::def_binding(_) |\n+      ast::def_upvar(_, _, _) { true }\n+      _ { false }\n+    }\n }\n \n-fn def_is_obj_field(d: def) -> bool {\n+fn def_has_obj_scope(d: def) -> bool {\n     alt d {\n       ast::def_obj_field(_, _) | ast::def_self(_) { true }\n       _ { false }\n@@ -947,37 +945,32 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n             let fnd = in_scope(e, sp, name, hd, ns);\n             if !is_none(fnd) {\n                 let df = option::get(fnd);\n-                let local = def_is_local(df);\n-                if left_fn && local || left_fn_level2 && def_is_obj_field(df)\n-                       || scope_is_fn(hd) && left_fn && def_is_ty_arg(df) {\n-                    let msg =\n-                        alt ns {\n-                          ns_type. {\n-                            \"Attempt to use a type argument out of scope\"\n-                          }\n-                          ns_val(v) {\n-                              alt(v) {\n-                                  ns_a_tag. {\n-                              /* If we were looking for a tag, at this point\n-                                 we know it's bound to a non-tag value, and\n-                                 we can return none instead of failing */\n-                                      ret none;\n-                                  }\n-                                  _ {\n-                                      \"attempted dynamic environment-capture\"\n-                                  }\n-                              }\n+                let local = def_is_local(df),\n+                    obj_scope = def_has_obj_scope(df);\n+                if left_fn && local || left_fn_level2 && obj_scope\n+                   || scope_is_fn(hd) && left_fn && def_is_ty_arg(df) {\n+                    let msg = alt ns {\n+                      ns_type. {\n+                        \"attempt to use a type argument out of scope\"\n+                      }\n+                      ns_val(v) {\n+                          alt(v) {\n+                            /* If we were looking for a tag, at this point\n+                               we know it's bound to a non-tag value, and\n+                               we can return none instead of failing */\n+                            ns_a_tag. { ret none; }\n+                            _ { \"attempted dynamic environment-capture\" }\n                           }\n-                          _ { \"attempted dynamic environment-capture\" }\n-                        };\n+                      }\n+                      _ { \"attempted dynamic environment-capture\" }\n+                    };\n                     e.sess.span_fatal(sp, msg);\n-                } else if local {\n+                } else if local || obj_scope {\n                     let i = vec::len(closing);\n                     while i > 0u {\n                         i -= 1u;\n-                        df =\n-                            ast::def_upvar(def_id_of_def(df), @df,\n-                                           closing[i]);\n+                        df = ast::def_upvar(def_id_of_def(df), @df,\n+                                            closing[i]);\n                         fnd = some(df);\n                     }\n                 }"}]}