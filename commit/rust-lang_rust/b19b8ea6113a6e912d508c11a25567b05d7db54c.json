{"sha": "b19b8ea6113a6e912d508c11a25567b05d7db54c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxOWI4ZWE2MTEzYTZlOTEyZDUwOGMxMWEyNTU2N2IwNWQ3ZGI1NGM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-08-28T20:26:25Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-08-30T18:15:25Z"}, "message": "Update dataflow analyses to use new interface", "tree": {"sha": "bf06392d97321685f0a742054ffbbc94090452ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf06392d97321685f0a742054ffbbc94090452ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b19b8ea6113a6e912d508c11a25567b05d7db54c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b19b8ea6113a6e912d508c11a25567b05d7db54c", "html_url": "https://github.com/rust-lang/rust/commit/b19b8ea6113a6e912d508c11a25567b05d7db54c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b19b8ea6113a6e912d508c11a25567b05d7db54c/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3233fb18a891363a2da36ce69ca16fbb219c96be", "url": "https://api.github.com/repos/rust-lang/rust/commits/3233fb18a891363a2da36ce69ca16fbb219c96be", "html_url": "https://github.com/rust-lang/rust/commit/3233fb18a891363a2da36ce69ca16fbb219c96be"}], "stats": {"total": 249, "additions": 106, "deletions": 143}, "files": [{"sha": "65e04ed6831cc4499d32a04d535200ca78183bd0", "filename": "compiler/rustc_mir/src/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=b19b8ea6113a6e912d508c11a25567b05d7db54c", "patch": "@@ -82,15 +82,15 @@ impl<K> AnalysisDomain<'tcx> for MaybeBorrowedLocals<K>\n where\n     K: BorrowAnalysisKind<'tcx>,\n {\n-    type Idx = Local;\n-\n+    type Domain = BitSet<Local>;\n     const NAME: &'static str = K::ANALYSIS_NAME;\n \n-    fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize {\n-        body.local_decls().len()\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = unborrowed\n+        BitSet::new_empty(body.local_decls().len())\n     }\n \n-    fn initialize_start_block(&self, _: &mir::Body<'tcx>, _: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, _: &mir::Body<'tcx>, _: &mut Self::Domain) {\n         // No locals are aliased on function entry\n     }\n }\n@@ -99,6 +99,8 @@ impl<K> GenKillAnalysis<'tcx> for MaybeBorrowedLocals<K>\n where\n     K: BorrowAnalysisKind<'tcx>,\n {\n+    type Idx = Local;\n+\n     fn statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n@@ -128,11 +130,6 @@ where\n     }\n }\n \n-impl<K> BottomValue for MaybeBorrowedLocals<K> {\n-    // bottom = unborrowed\n-    const BOTTOM_VALUE: bool = false;\n-}\n-\n /// A `Visitor` that defines the transfer function for `MaybeBorrowedLocals`.\n struct TransferFunction<'a, T, K> {\n     trans: &'a mut T,"}, {"sha": "0be13b6ba81daf48116dd366af6a7480c1614800", "filename": "compiler/rustc_mir/src/dataflow/impls/borrows.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs?ref=b19b8ea6113a6e912d508c11a25567b05d7db54c", "patch": "@@ -8,9 +8,9 @@ use rustc_index::bit_set::BitSet;\n use crate::borrow_check::{\n     places_conflict, BorrowSet, PlaceConflictBias, PlaceExt, RegionInferenceContext, ToRegionVid,\n };\n-use crate::dataflow::BottomValue;\n-use crate::dataflow::{self, GenKill};\n+use crate::dataflow::{self, fmt::DebugWithContext, GenKill};\n \n+use std::fmt;\n use std::rc::Rc;\n \n rustc_index::newtype_index! {\n@@ -227,25 +227,24 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n }\n \n impl<'tcx> dataflow::AnalysisDomain<'tcx> for Borrows<'_, 'tcx> {\n-    type Idx = BorrowIndex;\n+    type Domain = BitSet<BorrowIndex>;\n \n     const NAME: &'static str = \"borrows\";\n \n-    fn bits_per_block(&self, _: &mir::Body<'tcx>) -> usize {\n-        self.borrow_set.len() * 2\n+    fn bottom_value(&self, _: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = nothing is reserved or activated yet;\n+        BitSet::new_empty(self.borrow_set.len() * 2)\n     }\n \n-    fn initialize_start_block(&self, _: &mir::Body<'tcx>, _: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, _: &mir::Body<'tcx>, _: &mut Self::Domain) {\n         // no borrows of code region_scopes have been taken prior to\n         // function execution, so this method has no effect.\n     }\n-\n-    fn pretty_print_idx(&self, w: &mut impl std::io::Write, idx: Self::Idx) -> std::io::Result<()> {\n-        write!(w, \"{:?}\", self.location(idx))\n-    }\n }\n \n impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n+    type Idx = BorrowIndex;\n+\n     fn before_statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n@@ -344,7 +343,8 @@ impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> BottomValue for Borrows<'a, 'tcx> {\n-    /// bottom = nothing is reserved or activated yet;\n-    const BOTTOM_VALUE: bool = false;\n+impl DebugWithContext<Borrows<'_, '_>> for BorrowIndex {\n+    fn fmt_with(&self, ctxt: &Borrows<'_, '_>, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:?}\", ctxt.location(*self))\n+    }\n }"}, {"sha": "5da302cd1fd4aae2f3d7612ce87ea3a274c0deff", "filename": "compiler/rustc_mir/src/dataflow/impls/init_locals.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Finit_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Finit_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Finit_locals.rs?ref=b19b8ea6113a6e912d508c11a25567b05d7db54c", "patch": "@@ -2,29 +2,25 @@\n //!\n //! A local will be maybe initialized if *any* projections of that local might be initialized.\n \n-use crate::dataflow::{self, BottomValue, GenKill};\n+use crate::dataflow::{self, GenKill};\n \n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{self, BasicBlock, Local, Location};\n \n pub struct MaybeInitializedLocals;\n \n-impl BottomValue for MaybeInitializedLocals {\n-    /// bottom = uninit\n-    const BOTTOM_VALUE: bool = false;\n-}\n-\n impl dataflow::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n-    type Idx = Local;\n+    type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"maybe_init_locals\";\n \n-    fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize {\n-        body.local_decls.len()\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = uninit\n+        BitSet::new_empty(body.local_decls.len())\n     }\n \n-    fn initialize_start_block(&self, body: &mir::Body<'tcx>, entry_set: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, body: &mir::Body<'tcx>, entry_set: &mut Self::Domain) {\n         // Function arguments are initialized to begin with.\n         for arg in body.args_iter() {\n             entry_set.insert(arg);\n@@ -33,6 +29,8 @@ impl dataflow::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n }\n \n impl dataflow::GenKillAnalysis<'tcx> for MaybeInitializedLocals {\n+    type Idx = Local;\n+\n     fn statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,"}, {"sha": "b0da28156d1a49e3e1fe4a53f18d37eb1c15dc10", "filename": "compiler/rustc_mir/src/dataflow/impls/liveness.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs?ref=b19b8ea6113a6e912d508c11a25567b05d7db54c", "patch": "@@ -2,7 +2,7 @@ use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Local, Location};\n \n-use crate::dataflow::{AnalysisDomain, Backward, BottomValue, GenKill, GenKillAnalysis};\n+use crate::dataflow::{AnalysisDomain, Backward, GenKill, GenKillAnalysis};\n \n /// A [live-variable dataflow analysis][liveness].\n ///\n@@ -22,27 +22,25 @@ impl MaybeLiveLocals {\n     }\n }\n \n-impl BottomValue for MaybeLiveLocals {\n-    // bottom = not live\n-    const BOTTOM_VALUE: bool = false;\n-}\n-\n impl AnalysisDomain<'tcx> for MaybeLiveLocals {\n-    type Idx = Local;\n+    type Domain = BitSet<Local>;\n     type Direction = Backward;\n \n     const NAME: &'static str = \"liveness\";\n \n-    fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize {\n-        body.local_decls.len()\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = not live\n+        BitSet::new_empty(body.local_decls.len())\n     }\n \n-    fn initialize_start_block(&self, _: &mir::Body<'tcx>, _: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, _: &mir::Body<'tcx>, _: &mut Self::Domain) {\n         // No variables are live until we observe a use\n     }\n }\n \n impl GenKillAnalysis<'tcx> for MaybeLiveLocals {\n+    type Idx = Local;\n+\n     fn statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,"}, {"sha": "c42d58678565658fd5396c4c7bed84c693d8075d", "filename": "compiler/rustc_mir/src/dataflow/impls/mod.rs", "status": "modified", "additions": 32, "deletions": 53, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fmod.rs?ref=b19b8ea6113a6e912d508c11a25567b05d7db54c", "patch": "@@ -13,7 +13,7 @@ use super::MoveDataParamEnv;\n use crate::util::elaborate_drops::DropFlagState;\n \n use super::move_paths::{HasMoveData, InitIndex, InitKind, MoveData, MovePathIndex};\n-use super::{AnalysisDomain, BottomValue, GenKill, GenKillAnalysis};\n+use super::{lattice, AnalysisDomain, GenKill, GenKillAnalysis};\n \n use super::drop_flag_effects_for_function_entry;\n use super::drop_flag_effects_for_location;\n@@ -290,27 +290,25 @@ impl<'a, 'tcx> DefinitelyInitializedPlaces<'a, 'tcx> {\n }\n \n impl<'tcx> AnalysisDomain<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n-    type Idx = MovePathIndex;\n-\n+    type Domain = BitSet<MovePathIndex>;\n     const NAME: &'static str = \"maybe_init\";\n \n-    fn bits_per_block(&self, _: &mir::Body<'tcx>) -> usize {\n-        self.move_data().move_paths.len()\n+    fn bottom_value(&self, _: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = uninitialized\n+        BitSet::new_empty(self.move_data().move_paths.len())\n     }\n \n-    fn initialize_start_block(&self, _: &mir::Body<'tcx>, state: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, _: &mir::Body<'tcx>, state: &mut Self::Domain) {\n         drop_flag_effects_for_function_entry(self.tcx, self.body, self.mdpe, |path, s| {\n             assert!(s == DropFlagState::Present);\n             state.insert(path);\n         });\n     }\n-\n-    fn pretty_print_idx(&self, w: &mut impl std::io::Write, mpi: Self::Idx) -> std::io::Result<()> {\n-        write!(w, \"{}\", self.move_data().move_paths[mpi])\n-    }\n }\n \n impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n+    type Idx = MovePathIndex;\n+\n     fn statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n@@ -376,32 +374,30 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n }\n \n impl<'tcx> AnalysisDomain<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n-    type Idx = MovePathIndex;\n+    type Domain = BitSet<MovePathIndex>;\n \n     const NAME: &'static str = \"maybe_uninit\";\n \n-    fn bits_per_block(&self, _: &mir::Body<'tcx>) -> usize {\n-        self.move_data().move_paths.len()\n+    fn bottom_value(&self, _: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = initialized (start_block_effect counters this at outset)\n+        BitSet::new_empty(self.move_data().move_paths.len())\n     }\n \n     // sets on_entry bits for Arg places\n-    fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, _: &mir::Body<'tcx>, state: &mut Self::Domain) {\n         // set all bits to 1 (uninit) before gathering counterevidence\n-        assert!(self.bits_per_block(body) == state.domain_size());\n         state.insert_all();\n \n         drop_flag_effects_for_function_entry(self.tcx, self.body, self.mdpe, |path, s| {\n             assert!(s == DropFlagState::Present);\n             state.remove(path);\n         });\n     }\n-\n-    fn pretty_print_idx(&self, w: &mut impl std::io::Write, mpi: Self::Idx) -> std::io::Result<()> {\n-        write!(w, \"{}\", self.move_data().move_paths[mpi])\n-    }\n }\n \n impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n+    type Idx = MovePathIndex;\n+\n     fn statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n@@ -471,30 +467,30 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n }\n \n impl<'a, 'tcx> AnalysisDomain<'tcx> for DefinitelyInitializedPlaces<'a, 'tcx> {\n-    type Idx = MovePathIndex;\n+    /// Use set intersection as the join operator.\n+    type Domain = lattice::Dual<BitSet<MovePathIndex>>;\n \n     const NAME: &'static str = \"definite_init\";\n \n-    fn bits_per_block(&self, _: &mir::Body<'tcx>) -> usize {\n-        self.move_data().move_paths.len()\n+    fn bottom_value(&self, _: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = initialized (start_block_effect counters this at outset)\n+        lattice::Dual(BitSet::new_filled(self.move_data().move_paths.len()))\n     }\n \n     // sets on_entry bits for Arg places\n-    fn initialize_start_block(&self, _: &mir::Body<'tcx>, state: &mut BitSet<Self::Idx>) {\n-        state.clear();\n+    fn initialize_start_block(&self, _: &mir::Body<'tcx>, state: &mut Self::Domain) {\n+        state.0.clear();\n \n         drop_flag_effects_for_function_entry(self.tcx, self.body, self.mdpe, |path, s| {\n             assert!(s == DropFlagState::Present);\n-            state.insert(path);\n+            state.0.insert(path);\n         });\n     }\n-\n-    fn pretty_print_idx(&self, w: &mut impl std::io::Write, mpi: Self::Idx) -> std::io::Result<()> {\n-        write!(w, \"{}\", self.move_data().move_paths[mpi])\n-    }\n }\n \n impl<'tcx> GenKillAnalysis<'tcx> for DefinitelyInitializedPlaces<'_, 'tcx> {\n+    type Idx = MovePathIndex;\n+\n     fn statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n@@ -540,22 +536,25 @@ impl<'tcx> GenKillAnalysis<'tcx> for DefinitelyInitializedPlaces<'_, 'tcx> {\n }\n \n impl<'tcx> AnalysisDomain<'tcx> for EverInitializedPlaces<'_, 'tcx> {\n-    type Idx = InitIndex;\n+    type Domain = BitSet<InitIndex>;\n \n     const NAME: &'static str = \"ever_init\";\n \n-    fn bits_per_block(&self, _: &mir::Body<'tcx>) -> usize {\n-        self.move_data().inits.len()\n+    fn bottom_value(&self, _: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = no initialized variables by default\n+        BitSet::new_empty(self.move_data().inits.len())\n     }\n \n-    fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut Self::Domain) {\n         for arg_init in 0..body.arg_count {\n             state.insert(InitIndex::new(arg_init));\n         }\n     }\n }\n \n impl<'tcx> GenKillAnalysis<'tcx> for EverInitializedPlaces<'_, 'tcx> {\n+    type Idx = InitIndex;\n+\n     fn statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n@@ -625,23 +624,3 @@ impl<'tcx> GenKillAnalysis<'tcx> for EverInitializedPlaces<'_, 'tcx> {\n         }\n     }\n }\n-\n-impl<'a, 'tcx> BottomValue for MaybeInitializedPlaces<'a, 'tcx> {\n-    /// bottom = uninitialized\n-    const BOTTOM_VALUE: bool = false;\n-}\n-\n-impl<'a, 'tcx> BottomValue for MaybeUninitializedPlaces<'a, 'tcx> {\n-    /// bottom = initialized (start_block_effect counters this at outset)\n-    const BOTTOM_VALUE: bool = false;\n-}\n-\n-impl<'a, 'tcx> BottomValue for DefinitelyInitializedPlaces<'a, 'tcx> {\n-    /// bottom = initialized (start_block_effect counters this at outset)\n-    const BOTTOM_VALUE: bool = true;\n-}\n-\n-impl<'a, 'tcx> BottomValue for EverInitializedPlaces<'a, 'tcx> {\n-    /// bottom = no initialized variables by default\n-    const BOTTOM_VALUE: bool = false;\n-}"}, {"sha": "9250cd408479aec0c0891fd16fc9125a1cecab7d", "filename": "compiler/rustc_mir/src/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=b19b8ea6113a6e912d508c11a25567b05d7db54c", "patch": "@@ -1,6 +1,5 @@\n pub use super::*;\n \n-use crate::dataflow::BottomValue;\n use crate::dataflow::{self, GenKill, Results, ResultsRefCursor};\n use crate::util::storage::AlwaysLiveLocals;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n@@ -19,15 +18,16 @@ impl MaybeStorageLive {\n }\n \n impl dataflow::AnalysisDomain<'tcx> for MaybeStorageLive {\n-    type Idx = Local;\n+    type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"maybe_storage_live\";\n \n-    fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize {\n-        body.local_decls.len()\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = dead\n+        BitSet::new_empty(body.local_decls.len())\n     }\n \n-    fn initialize_start_block(&self, body: &mir::Body<'tcx>, on_entry: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, body: &mir::Body<'tcx>, on_entry: &mut Self::Domain) {\n         assert_eq!(body.local_decls.len(), self.always_live_locals.domain_size());\n         for local in self.always_live_locals.iter() {\n             on_entry.insert(local);\n@@ -40,6 +40,8 @@ impl dataflow::AnalysisDomain<'tcx> for MaybeStorageLive {\n }\n \n impl dataflow::GenKillAnalysis<'tcx> for MaybeStorageLive {\n+    type Idx = Local;\n+\n     fn statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n@@ -74,11 +76,6 @@ impl dataflow::GenKillAnalysis<'tcx> for MaybeStorageLive {\n     }\n }\n \n-impl BottomValue for MaybeStorageLive {\n-    /// bottom = dead\n-    const BOTTOM_VALUE: bool = false;\n-}\n-\n type BorrowedLocalsResults<'a, 'tcx> = ResultsRefCursor<'a, 'a, 'tcx, MaybeBorrowedLocals>;\n \n /// Dataflow analysis that determines whether each local requires storage at a\n@@ -101,15 +98,16 @@ impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n }\n \n impl<'mir, 'tcx> dataflow::AnalysisDomain<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n-    type Idx = Local;\n+    type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"requires_storage\";\n \n-    fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize {\n-        body.local_decls.len()\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = dead\n+        BitSet::new_empty(body.local_decls.len())\n     }\n \n-    fn initialize_start_block(&self, body: &mir::Body<'tcx>, on_entry: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, body: &mir::Body<'tcx>, on_entry: &mut Self::Domain) {\n         // The resume argument is live on function entry (we don't care about\n         // the `self` argument)\n         for arg in body.args_iter().skip(1) {\n@@ -119,6 +117,8 @@ impl<'mir, 'tcx> dataflow::AnalysisDomain<'tcx> for MaybeRequiresStorage<'mir, '\n }\n \n impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n+    type Idx = Local;\n+\n     fn before_statement_effect(\n         &self,\n         trans: &mut impl GenKill<Self::Idx>,\n@@ -285,11 +285,6 @@ impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx> BottomValue for MaybeRequiresStorage<'mir, 'tcx> {\n-    /// bottom = dead\n-    const BOTTOM_VALUE: bool = false;\n-}\n-\n struct MoveVisitor<'a, 'mir, 'tcx, T> {\n     borrowed_locals: &'a RefCell<BorrowedLocalsResults<'mir, 'tcx>>,\n     trans: &'a mut T,"}, {"sha": "a00301952b328fa9dfa946e80177a8bce1683381", "filename": "compiler/rustc_mir/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=b19b8ea6113a6e912d508c11a25567b05d7db54c", "patch": "@@ -165,23 +165,19 @@ where\n     }\n }\n \n-impl<Q> dataflow::BottomValue for FlowSensitiveAnalysis<'_, '_, '_, Q> {\n-    const BOTTOM_VALUE: bool = false;\n-}\n-\n impl<Q> dataflow::AnalysisDomain<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n where\n     Q: Qualif,\n {\n-    type Idx = Local;\n+    type Domain = BitSet<Local>;\n \n     const NAME: &'static str = Q::ANALYSIS_NAME;\n \n-    fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize {\n-        body.local_decls.len()\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        BitSet::new_empty(body.local_decls.len())\n     }\n \n-    fn initialize_start_block(&self, _body: &mir::Body<'tcx>, state: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, _body: &mir::Body<'tcx>, state: &mut Self::Domain) {\n         self.transfer_function(state).initialize_state();\n     }\n }\n@@ -192,7 +188,7 @@ where\n {\n     fn apply_statement_effect(\n         &self,\n-        state: &mut BitSet<Self::Idx>,\n+        state: &mut Self::Domain,\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n     ) {\n@@ -201,7 +197,7 @@ where\n \n     fn apply_terminator_effect(\n         &self,\n-        state: &mut BitSet<Self::Idx>,\n+        state: &mut Self::Domain,\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n     ) {\n@@ -210,7 +206,7 @@ where\n \n     fn apply_call_return_effect(\n         &self,\n-        state: &mut BitSet<Self::Idx>,\n+        state: &mut Self::Domain,\n         block: BasicBlock,\n         func: &mir::Operand<'tcx>,\n         args: &[mir::Operand<'tcx>],"}, {"sha": "07ce3100d890e2ad207218db78ff384bcc95fcc3", "filename": "compiler/rustc_mir/src/transform/rustc_peek.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19b8ea6113a6e912d508c11a25567b05d7db54c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs?ref=b19b8ea6113a6e912d508c11a25567b05d7db54c", "patch": "@@ -1,4 +1,6 @@\n-use rustc_ast as ast;\n+use std::borrow::Borrow;\n+\n+use rustc_ast::ast;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n@@ -16,7 +18,7 @@ use crate::dataflow::impls::{\n use crate::dataflow::move_paths::{HasMoveData, MoveData};\n use crate::dataflow::move_paths::{LookupResult, MovePathIndex};\n use crate::dataflow::MoveDataParamEnv;\n-use crate::dataflow::{Analysis, Results, ResultsCursor};\n+use crate::dataflow::{Analysis, JoinSemiLattice, Results, ResultsCursor};\n \n pub struct SanityCheck;\n \n@@ -248,25 +250,26 @@ pub trait RustcPeekAt<'tcx>: Analysis<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         place: mir::Place<'tcx>,\n-        flow_state: &BitSet<Self::Idx>,\n+        flow_state: &Self::Domain,\n         call: PeekCall,\n     );\n }\n \n-impl<'tcx, A> RustcPeekAt<'tcx> for A\n+impl<'tcx, A, D> RustcPeekAt<'tcx> for A\n where\n-    A: Analysis<'tcx, Idx = MovePathIndex> + HasMoveData<'tcx>,\n+    A: Analysis<'tcx, Domain = D> + HasMoveData<'tcx>,\n+    D: JoinSemiLattice + Clone + Borrow<BitSet<MovePathIndex>>,\n {\n     fn peek_at(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         place: mir::Place<'tcx>,\n-        flow_state: &BitSet<Self::Idx>,\n+        flow_state: &Self::Domain,\n         call: PeekCall,\n     ) {\n         match self.move_data().rev_lookup.find(place.as_ref()) {\n             LookupResult::Exact(peek_mpi) => {\n-                let bit_state = flow_state.contains(peek_mpi);\n+                let bit_state = flow_state.borrow().contains(peek_mpi);\n                 debug!(\"rustc_peek({:?} = &{:?}) bit_state: {}\", call.arg, place, bit_state);\n                 if !bit_state {\n                     tcx.sess.span_err(call.span, \"rustc_peek: bit not set\");"}, {"sha": "aec99cb4063388a3b0bd846d533fa5b543619877", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b19b8ea6113a6e912d508c11a25567b05d7db54c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b19b8ea6113a6e912d508c11a25567b05d7db54c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=b19b8ea6113a6e912d508c11a25567b05d7db54c", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::mir::{\n     visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor as _},\n };\n use rustc_middle::ty::{self, fold::TypeVisitor, Ty};\n-use rustc_mir::dataflow::BottomValue;\n use rustc_mir::dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n@@ -411,21 +410,24 @@ impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n struct MaybeStorageLive;\n \n impl<'tcx> AnalysisDomain<'tcx> for MaybeStorageLive {\n-    type Idx = mir::Local;\n+    type Domain = BitSet<mir::Local>;\n     const NAME: &'static str = \"maybe_storage_live\";\n \n-    fn bits_per_block(&self, body: &mir::Body<'tcx>) -> usize {\n-        body.local_decls.len()\n+    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n+        // bottom = dead\n+        BitSet::new_empty(body.local_decls.len())\n     }\n \n-    fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut BitSet<Self::Idx>) {\n+    fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut Self::Domain) {\n         for arg in body.args_iter() {\n             state.insert(arg);\n         }\n     }\n }\n \n impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n+    type Idx = mir::Local;\n+\n     fn statement_effect(&self, trans: &mut impl GenKill<Self::Idx>, stmt: &mir::Statement<'tcx>, _: mir::Location) {\n         match stmt.kind {\n             mir::StatementKind::StorageLive(l) => trans.gen(l),\n@@ -454,11 +456,6 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeStorageLive {\n     }\n }\n \n-impl BottomValue for MaybeStorageLive {\n-    /// bottom = dead\n-    const BOTTOM_VALUE: bool = false;\n-}\n-\n /// Collects the possible borrowers of each local.\n /// For example, `b = &a; c = &a;` will make `b` and (transitively) `c`\n /// possible borrowers of `a`."}]}