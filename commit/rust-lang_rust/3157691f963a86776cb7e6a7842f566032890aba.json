{"sha": "3157691f963a86776cb7e6a7842f566032890aba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNTc2OTFmOTYzYTg2Nzc2Y2I3ZTZhNzg0MmY1NjYwMzI4OTBhYmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-03T11:23:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-03T11:23:13Z"}, "message": "Auto merge of #33330 - birkenfeld:issue-29121, r=Manishearth\n\ntypeck: when suggesting associated fns, do not show call site as fallback\n\nIn case we cannot produce a span for the location of the definition, just do not show a span at all.\n\ncc: #29121", "tree": {"sha": "392d940b638c90c0a14ef243a2b8112b3fcd2446", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/392d940b638c90c0a14ef243a2b8112b3fcd2446"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3157691f963a86776cb7e6a7842f566032890aba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3157691f963a86776cb7e6a7842f566032890aba", "html_url": "https://github.com/rust-lang/rust/commit/3157691f963a86776cb7e6a7842f566032890aba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3157691f963a86776cb7e6a7842f566032890aba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d8100a068151512774caf15a6a88766ca9cf434", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8100a068151512774caf15a6a88766ca9cf434", "html_url": "https://github.com/rust-lang/rust/commit/7d8100a068151512774caf15a6a88766ca9cf434"}, {"sha": "780f725176e0fb8f37ef67564dd9ff1ee01f29c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/780f725176e0fb8f37ef67564dd9ff1ee01f29c2", "html_url": "https://github.com/rust-lang/rust/commit/780f725176e0fb8f37ef67564dd9ff1ee01f29c2"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "fab3bb60e0b2a5252589f0dee06082559bded409", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3157691f963a86776cb7e6a7842f566032890aba/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3157691f963a86776cb7e6a7842f566032890aba/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3157691f963a86776cb7e6a7842f566032890aba", "patch": "@@ -233,7 +233,7 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             match *source {\n                 CandidateSource::ImplSource(impl_did) => {\n                     // Provide the best span we can. Use the item, if local to crate, else\n-                    // the impl, if local to crate (item may be defaulted), else the call site.\n+                    // the impl, if local to crate (item may be defaulted), else nothing.\n                     let item = impl_item(fcx.tcx(), impl_did, item_name)\n                         .or_else(|| {\n                             trait_item(\n@@ -242,8 +242,9 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                 item_name\n                             )\n                         }).unwrap();\n-                    let impl_span = fcx.tcx().map.def_id_span(impl_did, span);\n-                    let item_span = fcx.tcx().map.def_id_span(item.def_id(), impl_span);\n+                    let note_span = fcx.tcx().map.span_if_local(item.def_id()).or_else(|| {\n+                        fcx.tcx().map.span_if_local(impl_did)\n+                    });\n \n                     let impl_ty = check::impl_self_ty(fcx, span, impl_did).ty;\n \n@@ -255,11 +256,17 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                         }\n                     };\n \n-                    span_note!(err, item_span,\n-                               \"candidate #{} is defined in an impl{} for the type `{}`\",\n-                               idx + 1,\n-                               insertion,\n-                               impl_ty);\n+                    let note_str = format!(\"candidate #{} is defined in an impl{} \\\n+                                            for the type `{}`\",\n+                                           idx + 1,\n+                                           insertion,\n+                                           impl_ty);\n+                    if let Some(note_span) = note_span {\n+                        // We have a span pointing to the method. Show note with snippet.\n+                        err.span_note(note_span, &note_str);\n+                    } else {\n+                        err.note(&note_str);\n+                    }\n                 }\n                 CandidateSource::TraitSource(trait_did) => {\n                     let item = trait_item(fcx.tcx(), trait_did, item_name).unwrap();"}]}