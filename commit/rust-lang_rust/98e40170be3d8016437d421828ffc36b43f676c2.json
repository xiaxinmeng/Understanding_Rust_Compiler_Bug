{"sha": "98e40170be3d8016437d421828ffc36b43f676c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZTQwMTcwYmUzZDgwMTY0MzdkNDIxODI4ZmZjMzZiNDNmNjc2YzI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-02-20T21:24:32Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-03-08T15:36:28Z"}, "message": "Temporarily emulate the (accidentally) omitted recursion during impl Trait check.\n\nNote that the two previous visitors were omitting slightly different\nrecursive calls, so I need two flags to properly emulate them.", "tree": {"sha": "ed66d1431569a2dc2e1184b1f913018dc61b32ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed66d1431569a2dc2e1184b1f913018dc61b32ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98e40170be3d8016437d421828ffc36b43f676c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98e40170be3d8016437d421828ffc36b43f676c2", "html_url": "https://github.com/rust-lang/rust/commit/98e40170be3d8016437d421828ffc36b43f676c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98e40170be3d8016437d421828ffc36b43f676c2/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b58a0061a347532c55cd5eb27fd6f47f20889ec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b58a0061a347532c55cd5eb27fd6f47f20889ec6", "html_url": "https://github.com/rust-lang/rust/commit/b58a0061a347532c55cd5eb27fd6f47f20889ec6"}], "stats": {"total": 99, "additions": 84, "deletions": 15}, "files": [{"sha": "ad0ed39185c1c4b19c017de63080a870f566c308", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98e40170be3d8016437d421828ffc36b43f676c2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e40170be3d8016437d421828ffc36b43f676c2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=98e40170be3d8016437d421828ffc36b43f676c2", "patch": "@@ -386,6 +386,12 @@ declare_lint! {\n     \"ambiguous associated items\"\n }\n \n+declare_lint! {\n+    pub NESTED_IMPL_TRAIT,\n+    Warn,\n+    \"nested occurrence of `impl Trait` type\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// that are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -457,6 +463,7 @@ impl LintPass for HardwiredLints {\n             parser::ILL_FORMED_ATTRIBUTE_INPUT,\n             DEPRECATED_IN_FUTURE,\n             AMBIGUOUS_ASSOCIATED_ITEMS,\n+            NESTED_IMPL_TRAIT,\n         )\n     }\n }\n@@ -474,6 +481,7 @@ pub enum BuiltinLintDiagnostics {\n     ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n     UnknownCrateTypes(Span, String, String),\n     UnusedImports(String, Vec<(Span, String)>),\n+    NestedImplTrait { outer_impl_trait_span: Span, inner_impl_trait_span: Span },\n }\n \n impl BuiltinLintDiagnostics {\n@@ -564,6 +572,12 @@ impl BuiltinLintDiagnostics {\n                     );\n                 }\n             }\n+            BuiltinLintDiagnostics::NestedImplTrait {\n+                outer_impl_trait_span, inner_impl_trait_span\n+            } => {\n+                db.span_label(outer_impl_trait_span, \"outer `impl Trait`\");\n+                db.span_label(inner_impl_trait_span, \"nested `impl Trait` here\");\n+            }\n         }\n     }\n }"}, {"sha": "5634faff00e6a715dbed7c14e560996f8017df7d", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98e40170be3d8016437d421828ffc36b43f676c2/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e40170be3d8016437d421828ffc36b43f676c2/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=98e40170be3d8016437d421828ffc36b43f676c2", "patch": "@@ -353,6 +353,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #57593 <https://github.com/rust-lang/rust/issues/57593>\",\n             edition: None,\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(NESTED_IMPL_TRAIT),\n+            reference: \"issue #59014 <https://github.com/rust-lang/rust/issues/59014>\",\n+            edition: None,\n+        },\n         ]);\n \n     // Register renamed and removed lints."}, {"sha": "d5b02de969896f7d9e4d583225fe813a9f32e76d", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 65, "deletions": 15, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/98e40170be3d8016437d421828ffc36b43f676c2/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e40170be3d8016437d421828ffc36b43f676c2/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=98e40170be3d8016437d421828ffc36b43f676c2", "patch": "@@ -9,6 +9,7 @@\n use std::mem;\n use syntax::print::pprust;\n use rustc::lint;\n+use rustc::lint::builtin::{BuiltinLintDiagnostics, NESTED_IMPL_TRAIT};\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::*;\n@@ -36,9 +37,32 @@ struct AstValidator<'a> {\n     // Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n     // or `Foo::Bar<impl Trait>`\n     is_impl_trait_banned: bool,\n+\n+    // rust-lang/rust#57979: the ban of nested `impl Trait` was buggy\n+    // until sometime after PR #57730 landed: it would jump directly\n+    // to walk_ty rather than visit_ty (or skip recurring entirely for\n+    // impl trait in projections), and thus miss some cases. We track\n+    // whether we should downgrade to a warning for short-term via\n+    // these booleans.\n+    warning_period_57979_nested_impl_trait: bool,\n+    warning_period_57979_impl_trait_in_proj: bool,\n }\n \n impl<'a> AstValidator<'a> {\n+    fn with_nested_impl_trait_warning<T>(&mut self, v: bool, f: impl FnOnce(&mut Self) -> T) -> T {\n+        let old = mem::replace(&mut self.warning_period_57979_nested_impl_trait, v);\n+        let ret = f(self);\n+        self.warning_period_57979_nested_impl_trait = old;\n+        ret\n+    }\n+\n+    fn with_impl_trait_in_proj_warning<T>(&mut self, v: bool, f: impl FnOnce(&mut Self) -> T) -> T {\n+        let old = mem::replace(&mut self.warning_period_57979_impl_trait_in_proj, v);\n+        let ret = f(self);\n+        self.warning_period_57979_impl_trait_in_proj = old;\n+        ret\n+    }\n+\n     fn with_banned_impl_trait(&mut self, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.is_impl_trait_banned, true);\n         f(self);\n@@ -406,22 +430,41 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             TyKind::ImplTrait(_, ref bounds) => {\n                 if self.is_impl_trait_banned {\n-                    struct_span_err!(self.session, ty.span, E0667,\n-                        \"`impl Trait` is not allowed in path parameters\").emit();\n+                    if self.warning_period_57979_impl_trait_in_proj {\n+                        self.session.buffer_lint(\n+                            NESTED_IMPL_TRAIT, ty.id, ty.span,\n+                            \"`impl Trait` is not allowed in path parameters\");\n+                    } else {\n+                        struct_span_err!(self.session, ty.span, E0667,\n+                            \"`impl Trait` is not allowed in path parameters\").emit();\n+                    }\n                 }\n \n                 if let Some(outer_impl_trait) = self.outer_impl_trait {\n-                    struct_span_err!(self.session, ty.span, E0666,\n-                                    \"nested `impl Trait` is not allowed\")\n-                        .span_label(outer_impl_trait, \"outer `impl Trait`\")\n-                        .span_label(ty.span, \"nested `impl Trait` here\")\n-                        .emit();\n-\n+                    if self.warning_period_57979_nested_impl_trait {\n+                        self.session.buffer_lint_with_diagnostic(\n+                            NESTED_IMPL_TRAIT, ty.id, ty.span,\n+                            \"nested `impl Trait` is not allowed\",\n+                            BuiltinLintDiagnostics::NestedImplTrait {\n+                                outer_impl_trait_span: outer_impl_trait,\n+                                inner_impl_trait_span: ty.span,\n+                            });\n+                    } else {\n+                        struct_span_err!(self.session, ty.span, E0666,\n+                            \"nested `impl Trait` is not allowed\")\n+                            .span_label(outer_impl_trait, \"outer `impl Trait`\")\n+                            .span_label(ty.span, \"nested `impl Trait` here\")\n+                            .emit();\n+                    }\n                 }\n+\n                 if !bounds.iter()\n                           .any(|b| if let GenericBound::Trait(..) = *b { true } else { false }) {\n                     self.err_handler().span_err(ty.span, \"at least one trait must be specified\");\n                 }\n+\n+                self.with_impl_trait_in_proj_warning(true, |this| this.walk_ty(ty));\n+                return;\n             }\n             _ => {}\n         }\n@@ -606,18 +649,23 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         GenericArg::Const(..) => ParamKindOrd::Const,\n                     }, arg.span(), None)\n                 }), GenericPosition::Arg, generic_args.span());\n-                // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n-                // are allowed to contain nested `impl Trait`.\n-                self.with_impl_trait(None, |this| {\n-                    walk_list!(this, visit_assoc_type_binding, &data.bindings);\n+\n+                self.with_nested_impl_trait_warning(true, |this| {\n+                    // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n+                    // are allowed to contain nested `impl Trait`.\n+                    this.with_impl_trait(None, |this| {\n+                        walk_list!(this, visit_assoc_type_binding, &data.bindings);\n+                    });\n                 });\n             }\n             GenericArgs::Parenthesized(ref data) => {\n                 walk_list!(self, visit_ty, &data.inputs);\n                 if let Some(ref type_) = data.output {\n-                    // `-> Foo` syntax is essentially an associated type binding,\n-                    // so it is also allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(None, |this| this.visit_ty(type_));\n+                    self.with_nested_impl_trait_warning(true, |this| {\n+                        // `-> Foo` syntax is essentially an associated type binding,\n+                        // so it is also allowed to contain nested `impl Trait`.\n+                        this.with_impl_trait(None, |this| this.visit_ty(type_));\n+                    });\n                 }\n             }\n         }\n@@ -719,6 +767,8 @@ pub fn check_crate(session: &Session, krate: &Crate) -> (bool, bool) {\n         has_global_allocator: false,\n         outer_impl_trait: None,\n         is_impl_trait_banned: false,\n+        warning_period_57979_nested_impl_trait: false,\n+        warning_period_57979_impl_trait_in_proj: false,\n     };\n     visit::walk_crate(&mut validator, krate);\n "}]}