{"sha": "efd2c20e96bfcd2b988dd261f882d1405fc2361d", "node_id": "C_kwDOAAsO6NoAKGVmZDJjMjBlOTZiZmNkMmI5ODhkZDI2MWY4ODJkMTQwNWZjMjM2MWQ", "commit": {"author": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2022-12-30T08:42:44Z"}, "committer": {"name": "Daniel Eades", "email": "danieleades@hotmail.com", "date": "2023-01-02T15:02:54Z"}, "message": "remove useless conversions", "tree": {"sha": "fdbabfb19bda07041860ae91b18a02797c6fb19e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdbabfb19bda07041860ae91b18a02797c6fb19e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efd2c20e96bfcd2b988dd261f882d1405fc2361d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efd2c20e96bfcd2b988dd261f882d1405fc2361d", "html_url": "https://github.com/rust-lang/rust/commit/efd2c20e96bfcd2b988dd261f882d1405fc2361d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efd2c20e96bfcd2b988dd261f882d1405fc2361d/comments", "author": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danieleades", "id": 33452915, "node_id": "MDQ6VXNlcjMzNDUyOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/33452915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danieleades", "html_url": "https://github.com/danieleades", "followers_url": "https://api.github.com/users/danieleades/followers", "following_url": "https://api.github.com/users/danieleades/following{/other_user}", "gists_url": "https://api.github.com/users/danieleades/gists{/gist_id}", "starred_url": "https://api.github.com/users/danieleades/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danieleades/subscriptions", "organizations_url": "https://api.github.com/users/danieleades/orgs", "repos_url": "https://api.github.com/users/danieleades/repos", "events_url": "https://api.github.com/users/danieleades/events{/privacy}", "received_events_url": "https://api.github.com/users/danieleades/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc80c5bd0773b28c630a43e29d42cde65b91e7c4", "html_url": "https://github.com/rust-lang/rust/commit/cc80c5bd0773b28c630a43e29d42cde65b91e7c4"}], "stats": {"total": 64, "additions": 26, "deletions": 38}, "files": [{"sha": "160203b7783443e5ccbf456027e093e68a954c53", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -67,7 +67,7 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n         let dep_def_map = db.crate_def_map(dep.crate_id);\n         let dep_root = dep_def_map.module_id(dep_def_map.root);\n \n-        deps.insert(dep.as_name(), dep_root.into());\n+        deps.insert(dep.as_name(), dep_root);\n \n         if dep.is_prelude() && !tree_id.is_block() {\n             def_map.extern_prelude.insert(dep.as_name(), dep_root);\n@@ -2085,7 +2085,7 @@ impl ModCollector<'_, '_> {\n                                 .scope\n                                 .get_legacy_macro(name)\n                                 .and_then(|it| it.last())\n-                                .map(|&it| macro_id_to_def_id(self.def_collector.db, it.into()))\n+                                .map(|&it| macro_id_to_def_id(self.def_collector.db, it))\n                         },\n                     )\n                 })"}, {"sha": "1d9d5cccded2333a3d51d598476e6f01b789e02c", "filename": "crates/hir-def/src/nameres/path_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -390,7 +390,7 @@ impl DefMap {\n             .get_legacy_macro(name)\n             // FIXME: shadowing\n             .and_then(|it| it.last())\n-            .map_or_else(PerNs::none, |&m| PerNs::macros(m.into(), Visibility::Public));\n+            .map_or_else(PerNs::none, |&m| PerNs::macros(m, Visibility::Public));\n         let from_scope = self[module].scope.get(name);\n         let from_builtin = match self.block {\n             Some(_) => {"}, {"sha": "1ef7f9577fe8b24c08b31c726fa1582de2dff87d", "filename": "crates/hir-def/src/resolver.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fresolver.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -381,7 +381,7 @@ impl Resolver {\n         });\n         def_map[module_id].scope.legacy_macros().for_each(|(name, macs)| {\n             macs.iter().for_each(|&mac| {\n-                res.add(name, ScopeDef::ModuleDef(ModuleDefId::MacroId(MacroId::from(mac))));\n+                res.add(name, ScopeDef::ModuleDef(ModuleDefId::MacroId(mac)));\n             })\n         });\n         def_map.extern_prelude().for_each(|(name, &def)| {\n@@ -517,10 +517,7 @@ impl Scope {\n                 });\n                 m.def_map[m.module_id].scope.legacy_macros().for_each(|(name, macs)| {\n                     macs.iter().for_each(|&mac| {\n-                        acc.add(\n-                            name,\n-                            ScopeDef::ModuleDef(ModuleDefId::MacroId(MacroId::from(mac))),\n-                        );\n+                        acc.add(name, ScopeDef::ModuleDef(ModuleDefId::MacroId(mac)));\n                     })\n                 });\n             }"}, {"sha": "3c930c077b3beeaf34e780820a6a9975f2fa9956", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -25,7 +25,6 @@ fn eval_goal(ra_fixture: &str) -> Result<ComputedExpr, ConstEvalError> {\n     let scope = &def_map[module_id.local_id].scope;\n     let const_id = scope\n         .declarations()\n-        .into_iter()\n         .find_map(|x| match x {\n             hir_def::ModuleDefId::ConstId(x) => {\n                 if db.const_data(x).name.as_ref()?.to_string() == \"GOAL\" {"}, {"sha": "ba8f55e8ae36b564406d2c97c7f7acf0b0d8d38b", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -960,7 +960,7 @@ impl<'a> InferenceContext<'a> {\n             Expr::RecordLit { path, fields, .. } => {\n                 let subs = fields.iter().map(|f| (f.name.clone(), f.expr));\n \n-                self.infer_record_pat_like(path.as_deref(), &rhs_ty, (), lhs.into(), subs)\n+                self.infer_record_pat_like(path.as_deref(), &rhs_ty, (), lhs, subs)\n             }\n             Expr::Underscore => rhs_ty.clone(),\n             _ => {"}, {"sha": "f154dac8e879d19e47b4b1380c86361139427574", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -220,7 +220,7 @@ impl<'a> InferenceContext<'a> {\n                 ),\n             Pat::Record { path: p, args: fields, ellipsis: _ } => {\n                 let subs = fields.iter().map(|f| (f.name.clone(), f.pat));\n-                self.infer_record_pat_like(p.as_deref(), &expected, default_bm, pat.into(), subs)\n+                self.infer_record_pat_like(p.as_deref(), &expected, default_bm, pat, subs)\n             }\n             Pat::Path(path) => {\n                 // FIXME use correct resolver for the surrounding expression"}, {"sha": "53838cf41d2745fd4897d0e13dea3e368b0ca636", "filename": "crates/hir-ty/src/layout/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -29,7 +29,6 @@ fn eval_goal(ra_fixture: &str, minicore: &str) -> Result<Layout, LayoutError> {\n     let scope = &def_map[module_id.local_id].scope;\n     let adt_id = scope\n         .declarations()\n-        .into_iter()\n         .find_map(|x| match x {\n             hir_def::ModuleDefId::AdtId(x) => {\n                 let name = match x {"}, {"sha": "2b24b5c31b27659662246664847600f48fea6dda", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -608,7 +608,7 @@ impl Module {\n     pub fn legacy_macros(self, db: &dyn HirDatabase) -> Vec<Macro> {\n         let def_map = self.id.def_map(db.upcast());\n         let scope = &def_map[self.id.local_id].scope;\n-        scope.legacy_macros().flat_map(|(_, it)| it).map(|&it| MacroId::from(it).into()).collect()\n+        scope.legacy_macros().flat_map(|(_, it)| it).map(|&it| it.into()).collect()\n     }\n \n     pub fn impl_defs(self, db: &dyn HirDatabase) -> Vec<Impl> {\n@@ -2411,7 +2411,7 @@ pub struct DeriveHelper {\n \n impl DeriveHelper {\n     pub fn derive(&self) -> Macro {\n-        Macro { id: self.derive.into() }\n+        Macro { id: self.derive }\n     }\n \n     pub fn name(&self, db: &dyn HirDatabase) -> Name {\n@@ -2781,7 +2781,7 @@ impl Impl {\n     pub fn all_for_trait(db: &dyn HirDatabase, trait_: Trait) -> Vec<Impl> {\n         let krate = trait_.module(db).krate();\n         let mut all = Vec::new();\n-        for Crate { id } in krate.transitive_reverse_dependencies(db).into_iter() {\n+        for Crate { id } in krate.transitive_reverse_dependencies(db) {\n             let impls = db.trait_impls_in_crate(id);\n             all.extend(impls.for_trait(trait_.id).map(Self::from))\n         }"}, {"sha": "059b80bcf1392b6538e758f9b3ce0046422ede8c", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -270,7 +270,7 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         await_expr: &ast::AwaitExpr,\n     ) -> Option<FunctionId> {\n-        let mut ty = self.ty_of_expr(db, &await_expr.expr()?.into())?.clone();\n+        let mut ty = self.ty_of_expr(db, &await_expr.expr()?)?.clone();\n \n         let into_future_trait = self\n             .resolver\n@@ -316,7 +316,7 @@ impl SourceAnalyzer {\n             ast::UnaryOp::Not => name![not],\n             ast::UnaryOp::Neg => name![neg],\n         };\n-        let ty = self.ty_of_expr(db, &prefix_expr.expr()?.into())?;\n+        let ty = self.ty_of_expr(db, &prefix_expr.expr()?)?;\n \n         let (op_trait, op_fn) = self.lang_trait_fn(db, &lang_item_name, &lang_item_name)?;\n         // HACK: subst for all methods coincides with that for their trait because the methods\n@@ -331,8 +331,8 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         index_expr: &ast::IndexExpr,\n     ) -> Option<FunctionId> {\n-        let base_ty = self.ty_of_expr(db, &index_expr.base()?.into())?;\n-        let index_ty = self.ty_of_expr(db, &index_expr.index()?.into())?;\n+        let base_ty = self.ty_of_expr(db, &index_expr.base()?)?;\n+        let index_ty = self.ty_of_expr(db, &index_expr.index()?)?;\n \n         let lang_item_name = name![index];\n \n@@ -352,8 +352,8 @@ impl SourceAnalyzer {\n         binop_expr: &ast::BinExpr,\n     ) -> Option<FunctionId> {\n         let op = binop_expr.op_kind()?;\n-        let lhs = self.ty_of_expr(db, &binop_expr.lhs()?.into())?;\n-        let rhs = self.ty_of_expr(db, &binop_expr.rhs()?.into())?;\n+        let lhs = self.ty_of_expr(db, &binop_expr.lhs()?)?;\n+        let rhs = self.ty_of_expr(db, &binop_expr.rhs()?)?;\n \n         let (op_trait, op_fn) = lang_names_for_bin_op(op)\n             .and_then(|(name, lang_item)| self.lang_trait_fn(db, &lang_item, &name))?;\n@@ -372,7 +372,7 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         try_expr: &ast::TryExpr,\n     ) -> Option<FunctionId> {\n-        let ty = self.ty_of_expr(db, &try_expr.expr()?.into())?;\n+        let ty = self.ty_of_expr(db, &try_expr.expr()?)?;\n \n         let op_fn =\n             db.lang_item(self.resolver.krate(), name![branch].to_smol_str())?.as_function()?;"}, {"sha": "2d074a33e7fdebee691d460b918677c062f10b56", "filename": "crates/ide-assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext<'\n         return None;\n     }\n \n-    let impl_ = fn_node.syntax().ancestors().into_iter().find_map(ast::Impl::cast)?;\n+    let impl_ = fn_node.syntax().ancestors().find_map(ast::Impl::cast)?;\n     if is_default_implemented(ctx, &impl_) {\n         cov_mark::hit!(default_block_is_already_present);\n         cov_mark::hit!(struct_in_module_with_default);"}, {"sha": "b6958e29193ca7ffb31601b0d4583a3338463b28", "filename": "crates/ide-assists/src/handlers/generate_deref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -85,8 +85,7 @@ fn generate_tuple_deref(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()\n     let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n     let field = ctx.find_node_at_offset::<ast::TupleField>()?;\n     let field_list = ctx.find_node_at_offset::<ast::TupleFieldList>()?;\n-    let field_list_index =\n-        field_list.syntax().children().into_iter().position(|s| &s == field.syntax())?;\n+    let field_list_index = field_list.syntax().children().position(|s| &s == field.syntax())?;\n \n     let deref_type_to_generate = match existing_deref_impl(&ctx.sema, &strukt) {\n         None => DerefType::Deref,"}, {"sha": "6626ce07959974f3ca3eb995c1a5e45134c0e905", "filename": "crates/ide-assists/src/handlers/replace_turbofish_with_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn replace_turbofish_with_explicit_type(\n     let r_angle = generic_args.r_angle_token()?;\n     let turbofish_range = TextRange::new(colon2.text_range().start(), r_angle.text_range().end());\n \n-    let turbofish_args: Vec<GenericArg> = generic_args.generic_args().into_iter().collect();\n+    let turbofish_args: Vec<GenericArg> = generic_args.generic_args().collect();\n \n     // Find type of ::<_>\n     if turbofish_args.len() != 1 {"}, {"sha": "abe14e48e22362476d2860351f3a57c57ecb5b3d", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -183,7 +183,7 @@ pub(crate) fn check_edit_with_config(\n     let ra_fixture_after = trim_indent(ra_fixture_after);\n     let (db, position) = position(ra_fixture_before);\n     let completions: Vec<CompletionItem> =\n-        crate::completions(&db, &config, position, None).unwrap().into();\n+        crate::completions(&db, &config, position, None).unwrap();\n     let (completion,) = completions\n         .iter()\n         .filter(|it| it.lookup() == what)"}, {"sha": "15bdf14fb9b6dee775a00c14f60afef4608e1279", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -364,11 +364,8 @@ mod tests {\n             }\n             Err(err) => {\n                 if ra_fixture_after.starts_with(\"error:\") {\n-                    let error_message = ra_fixture_after\n-                        .chars()\n-                        .into_iter()\n-                        .skip(\"error:\".len())\n-                        .collect::<String>();\n+                    let error_message =\n+                        ra_fixture_after.chars().skip(\"error:\".len()).collect::<String>();\n                     assert_eq!(error_message.trim(), err.to_string());\n                 } else {\n                     panic!(\"Rename to '{new_name}' failed unexpectedly: {err}\")"}, {"sha": "5c965055634eb5f5d848b5a56c62c1dfa3de8995", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -145,7 +145,7 @@ pub fn parse_exprs_with_sep(tt: &tt::Subtree, sep: char) -> Vec<tt::Subtree> {\n     }\n \n     if iter.peek_n(0).is_some() {\n-        res.push(tt::Subtree { delimiter: None, token_trees: iter.into_iter().cloned().collect() });\n+        res.push(tt::Subtree { delimiter: None, token_trees: iter.cloned().collect() });\n     }\n \n     res"}, {"sha": "83b03fe4736217f21d45a0ca1391a3d0603ed310", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -101,8 +101,7 @@ impl DiagnosticCollection {\n         file_id: FileId,\n     ) -> impl Iterator<Item = &lsp_types::Diagnostic> {\n         let native = self.native.get(&file_id).into_iter().flatten();\n-        let check =\n-            self.check.values().filter_map(move |it| it.get(&file_id)).into_iter().flatten();\n+        let check = self.check.values().filter_map(move |it| it.get(&file_id)).flatten();\n         native.chain(check)\n     }\n "}, {"sha": "59bdd3061272cbc82338a273937d76f6017fd962", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd2c20e96bfcd2b988dd261f882d1405fc2361d/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=efd2c20e96bfcd2b988dd261f882d1405fc2361d", "patch": "@@ -1101,9 +1101,7 @@ pub(crate) fn handle_code_action(\n     }\n \n     // Fixes from `cargo check`.\n-    for fix in\n-        snap.check_fixes.values().filter_map(|it| it.get(&frange.file_id)).into_iter().flatten()\n-    {\n+    for fix in snap.check_fixes.values().filter_map(|it| it.get(&frange.file_id)).flatten() {\n         // FIXME: this mapping is awkward and shouldn't exist. Refactor\n         // `snap.check_fixes` to not convert to LSP prematurely.\n         let intersect_fix_range = fix"}]}