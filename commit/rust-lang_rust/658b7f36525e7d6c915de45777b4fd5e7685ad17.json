{"sha": "658b7f36525e7d6c915de45777b4fd5e7685ad17", "node_id": "C_kwDOAAsO6NoAKDY1OGI3ZjM2NTI1ZTdkNmM5MTVkZTQ1Nzc3YjRmZDVlNzY4NWFkMTc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T07:40:58Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T07:40:58Z"}, "message": "more `rustc_pass_by_value`", "tree": {"sha": "a6b75dfa080054a25dd150e8a83a8accd891aebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6b75dfa080054a25dd150e8a83a8accd891aebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/658b7f36525e7d6c915de45777b4fd5e7685ad17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/658b7f36525e7d6c915de45777b4fd5e7685ad17", "html_url": "https://github.com/rust-lang/rust/commit/658b7f36525e7d6c915de45777b4fd5e7685ad17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/658b7f36525e7d6c915de45777b4fd5e7685ad17/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c6a48aee84215a9200dfa1c4c6ad88f5721f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c6a48aee84215a9200dfa1c4c6ad88f5721f56", "html_url": "https://github.com/rust-lang/rust/commit/a5c6a48aee84215a9200dfa1c4c6ad88f5721f56"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "d34c6d9dee58d7e28b65ee6d900e36ccfe568ec9", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/658b7f36525e7d6c915de45777b4fd5e7685ad17/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/658b7f36525e7d6c915de45777b4fd5e7685ad17/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=658b7f36525e7d6c915de45777b4fd5e7685ad17", "patch": "@@ -149,7 +149,7 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n     fn visit_ascribe_user_ty(\n         &mut self,\n         _place: &Place<'tcx>,\n-        _variance: &ty::Variance,\n+        _variance: ty::Variance,\n         _user_ty: &UserTypeProjection,\n         _location: Location,\n     ) {"}, {"sha": "9b126d60747a18a86bcdc5d1256ec45e84592494", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/658b7f36525e7d6c915de45777b4fd5e7685ad17/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/658b7f36525e7d6c915de45777b4fd5e7685ad17/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=658b7f36525e7d6c915de45777b4fd5e7685ad17", "patch": "@@ -311,6 +311,7 @@ pub enum StatementKind<'tcx> {\n \n /// Describes what kind of retag is to be performed.\n #[derive(Copy, Clone, TyEncodable, TyDecodable, Debug, PartialEq, Eq, Hash, HashStable)]\n+#[rustc_pass_by_value]\n pub enum RetagKind {\n     /// The initial retag when entering a function.\n     FnEntry,"}, {"sha": "d1477f9e2ae100bb99a430a420cfe68bc34f3e54", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/658b7f36525e7d6c915de45777b4fd5e7685ad17/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/658b7f36525e7d6c915de45777b4fd5e7685ad17/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=658b7f36525e7d6c915de45777b4fd5e7685ad17", "patch": "@@ -147,7 +147,7 @@ macro_rules! make_mir_visitor {\n             fn visit_ascribe_user_ty(\n                 &mut self,\n                 place: & $($mutability)? Place<'tcx>,\n-                variance: & $($mutability)? ty::Variance,\n+                variance: $(& $mutability)? ty::Variance,\n                 user_ty: & $($mutability)? UserTypeProjection,\n                 location: Location,\n             ) {\n@@ -164,7 +164,7 @@ macro_rules! make_mir_visitor {\n \n             fn visit_retag(\n                 &mut self,\n-                kind: & $($mutability)? RetagKind,\n+                kind: $(& $mutability)? RetagKind,\n                 place: & $($mutability)? Place<'tcx>,\n                 location: Location,\n             ) {\n@@ -425,7 +425,7 @@ macro_rules! make_mir_visitor {\n                 self.visit_source_info(source_info);\n                 match kind {\n                     StatementKind::Assign(\n-                        box(ref $($mutability)? place, ref $($mutability)? rvalue)\n+                        box (place, rvalue)\n                     ) => {\n                         self.visit_assign(place, rvalue, location);\n                     }\n@@ -465,13 +465,13 @@ macro_rules! make_mir_visitor {\n                         );\n                     }\n                     StatementKind::Retag(kind, place) => {\n-                        self.visit_retag(kind, place, location);\n+                        self.visit_retag($(& $mutability)? *kind, place, location);\n                     }\n                     StatementKind::AscribeUserType(\n-                        box(ref $($mutability)? place, ref $($mutability)? user_ty),\n+                        box (place, user_ty),\n                         variance\n                     ) => {\n-                        self.visit_ascribe_user_ty(place, variance, user_ty, location);\n+                        self.visit_ascribe_user_ty(place, $(& $mutability)? *variance, user_ty, location);\n                     }\n                     StatementKind::Coverage(coverage) => {\n                         self.visit_coverage(\n@@ -480,9 +480,9 @@ macro_rules! make_mir_visitor {\n                         )\n                     }\n                     StatementKind::CopyNonOverlapping(box crate::mir::CopyNonOverlapping{\n-                      ref $($mutability)? src,\n-                      ref $($mutability)? dst,\n-                      ref $($mutability)? count,\n+                        src,\n+                        dst,\n+                        count,\n                     }) => {\n                       self.visit_operand(src, location);\n                       self.visit_operand(dst, location);\n@@ -517,8 +517,7 @@ macro_rules! make_mir_visitor {\n                     TerminatorKind::GeneratorDrop |\n                     TerminatorKind::Unreachable |\n                     TerminatorKind::FalseEdge { .. } |\n-                    TerminatorKind::FalseUnwind { .. } => {\n-                    }\n+                    TerminatorKind::FalseUnwind { .. } => {}\n \n                     TerminatorKind::Return => {\n                         // `return` logically moves from the return place `_0`. Note that the place\n@@ -830,7 +829,7 @@ macro_rules! make_mir_visitor {\n \n             fn super_ascribe_user_ty(&mut self,\n                                      place: & $($mutability)? Place<'tcx>,\n-                                     _variance: & $($mutability)? ty::Variance,\n+                                     _variance: $(& $mutability)? ty::Variance,\n                                      user_ty: & $($mutability)? UserTypeProjection,\n                                      location: Location) {\n                 self.visit_place(\n@@ -847,7 +846,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_retag(&mut self,\n-                           _kind: & $($mutability)? RetagKind,\n+                           _kind: $(& $mutability)? RetagKind,\n                            place: & $($mutability)? Place<'tcx>,\n                            location: Location) {\n                 self.visit_place("}, {"sha": "6744536338cbbc6bde9895194bc0b46e24eb8f92", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/658b7f36525e7d6c915de45777b4fd5e7685ad17/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/658b7f36525e7d6c915de45777b4fd5e7685ad17/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=658b7f36525e7d6c915de45777b4fd5e7685ad17", "patch": "@@ -599,6 +599,7 @@ impl UnifyKey for FloatVid {\n }\n \n #[derive(Copy, Clone, PartialEq, Decodable, Encodable, Hash)]\n+#[rustc_pass_by_value]\n pub enum Variance {\n     Covariant,     // T<A> <: T<B> iff A <: B -- e.g., function return type\n     Invariant,     // T<A> <: T<B> iff B == A -- e.g., type of mutable cell"}]}