{"sha": "13785c4c2ecf26e859c38b5656f611ae2a84fdba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNzg1YzRjMmVjZjI2ZTg1OWMzOGI1NjU2ZjYxMWFlMmE4NGZkYmE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-13T07:54:58Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-13T13:51:57Z"}, "message": "Remove unneeded scope", "tree": {"sha": "87ee8e8a0e0d026cdf8c6da1d3e193b6ba19c7e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ee8e8a0e0d026cdf8c6da1d3e193b6ba19c7e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13785c4c2ecf26e859c38b5656f611ae2a84fdba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13785c4c2ecf26e859c38b5656f611ae2a84fdba", "html_url": "https://github.com/rust-lang/rust/commit/13785c4c2ecf26e859c38b5656f611ae2a84fdba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13785c4c2ecf26e859c38b5656f611ae2a84fdba/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af958046e5855a4254831102b502f57dafa40f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/af958046e5855a4254831102b502f57dafa40f69", "html_url": "https://github.com/rust-lang/rust/commit/af958046e5855a4254831102b502f57dafa40f69"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "56013ee3a816ffb42106d29d2bd2b9bd1e3fd6c6", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/13785c4c2ecf26e859c38b5656f611ae2a84fdba/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13785c4c2ecf26e859c38b5656f611ae2a84fdba/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=13785c4c2ecf26e859c38b5656f611ae2a84fdba", "patch": "@@ -560,8 +560,8 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     lifetime_to_bounds.entry(lifetime).or_default().extend(bounds);\n                 }\n                 WherePredicate::EqPredicate { lhs, rhs } => {\n-                    match &lhs {\n-                        &Type::QPath { name: ref left_name, ref self_type, ref trait_ } => {\n+                    match lhs {\n+                        Type::QPath { name: ref left_name, ref self_type, ref trait_ } => {\n                             let ty = &*self_type;\n                             match **trait_ {\n                                 Type::ResolvedPath {\n@@ -580,36 +580,30 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                         continue;\n                                     }\n \n-                                    // FIXME: Remove this scope when NLL lands\n-                                    {\n-                                        let args = &mut new_trait_path\n-                                            .segments\n-                                            .last_mut()\n-                                            .expect(\"segments were empty\")\n-                                            .args;\n-\n-                                        match args {\n-                                            // Convert somethiung like '<T as Iterator::Item> = u8'\n-                                            // to 'T: Iterator<Item=u8>'\n-                                            &mut GenericArgs::AngleBracketed {\n-                                                ref mut bindings,\n-                                                ..\n-                                            } => {\n-                                                bindings.push(TypeBinding {\n-                                                    name: left_name.clone(),\n-                                                    kind: TypeBindingKind::Equality { ty: rhs },\n-                                                });\n-                                            }\n-                                            &mut GenericArgs::Parenthesized { .. } => {\n-                                                existing_predicates.push(\n-                                                    WherePredicate::EqPredicate {\n-                                                        lhs: lhs.clone(),\n-                                                        rhs,\n-                                                    },\n-                                                );\n-                                                continue; // If something other than a Fn ends up\n-                                                // with parenthesis, leave it alone\n-                                            }\n+                                    let args = &mut new_trait_path\n+                                        .segments\n+                                        .last_mut()\n+                                        .expect(\"segments were empty\")\n+                                        .args;\n+\n+                                    match args {\n+                                        // Convert somethiung like '<T as Iterator::Item> = u8'\n+                                        // to 'T: Iterator<Item=u8>'\n+                                        GenericArgs::AngleBracketed {\n+                                            ref mut bindings, ..\n+                                        } => {\n+                                            bindings.push(TypeBinding {\n+                                                name: left_name.clone(),\n+                                                kind: TypeBindingKind::Equality { ty: rhs },\n+                                            });\n+                                        }\n+                                        GenericArgs::Parenthesized { .. } => {\n+                                            existing_predicates.push(WherePredicate::EqPredicate {\n+                                                lhs: lhs.clone(),\n+                                                rhs,\n+                                            });\n+                                            continue; // If something other than a Fn ends up\n+                                            // with parenthesis, leave it alone\n                                         }\n                                     }\n "}]}