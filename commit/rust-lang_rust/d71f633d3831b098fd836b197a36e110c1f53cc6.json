{"sha": "d71f633d3831b098fd836b197a36e110c1f53cc6", "node_id": "C_kwDOAAsO6NoAKGQ3MWY2MzNkMzgzMWIwOThmZDgzNmIxOTdhMzZlMTEwYzFmNTNjYzY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-03-03T12:02:12Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-05T13:18:21Z"}, "message": "Mark scalar layout unions so that backends that do not support partially initialized scalars can special case them.", "tree": {"sha": "3005f1977c65e2b9ac4ac2e3cc33db35a916fb3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3005f1977c65e2b9ac4ac2e3cc33db35a916fb3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d71f633d3831b098fd836b197a36e110c1f53cc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d71f633d3831b098fd836b197a36e110c1f53cc6", "html_url": "https://github.com/rust-lang/rust/commit/d71f633d3831b098fd836b197a36e110c1f53cc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d71f633d3831b098fd836b197a36e110c1f53cc6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ce5ce82af88d679b2c4ab93a5dc64803119ceff", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce5ce82af88d679b2c4ab93a5dc64803119ceff", "html_url": "https://github.com/rust-lang/rust/commit/6ce5ce82af88d679b2c4ab93a5dc64803119ceff"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "41f88f119e2a2b017a9e889c99e0748e9a2cc930", "filename": "src/builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d71f633d3831b098fd836b197a36e110c1f53cc6/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71f633d3831b098fd836b197a36e110c1f53cc6/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=d71f633d3831b098fd836b197a36e110c1f53cc6", "patch": "@@ -694,11 +694,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         }\n \n         fn scalar_load_metadata<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>, load: RValue<'gcc>, scalar: &abi::Scalar) {\n-            let vr = scalar.valid_range.clone();\n-            match scalar.value {\n+            let vr = scalar.valid_range(bx);\n+            match scalar.primitive() {\n                 abi::Int(..) => {\n                     if !scalar.is_always_valid(bx) {\n-                        bx.range_metadata(load, scalar.valid_range);\n+                        bx.range_metadata(load, vr);\n                     }\n                 }\n                 abi::Pointer if vr.start < vr.end && !vr.contains(0) => {\n@@ -720,7 +720,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n                 OperandValue::Immediate(self.to_immediate(load, place.layout))\n             }\n             else if let abi::Abi::ScalarPair(ref a, ref b) = place.layout.abi {\n-                let b_offset = a.value.size(self).align_to(b.value.align(self).abi);\n+                let b_offset = a.size(self).align_to(b.align(self).abi);\n                 let pair_type = place.layout.gcc_type(self, false);\n \n                 let mut load = |i, scalar: &abi::Scalar, align| {"}, {"sha": "b056b6d473042de78afd61ac952554c2a871dcf6", "filename": "src/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d71f633d3831b098fd836b197a36e110c1f53cc6/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71f633d3831b098fd836b197a36e110c1f53cc6/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=d71f633d3831b098fd836b197a36e110c1f53cc6", "patch": "@@ -158,14 +158,14 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     }\n \n     fn scalar_to_backend(&self, cv: Scalar, layout: abi::Scalar, ty: Type<'gcc>) -> RValue<'gcc> {\n-        let bitsize = if layout.is_bool() { 1 } else { layout.value.size(self).bits() };\n+        let bitsize = if layout.is_bool() { 1 } else { layout.size(self).bits() };\n         match cv {\n             Scalar::Int(ScalarInt::ZST) => {\n-                assert_eq!(0, layout.value.size(self).bytes());\n+                assert_eq!(0, layout.size(self).bytes());\n                 self.const_undef(self.type_ix(0))\n             }\n             Scalar::Int(int) => {\n-                let data = int.assert_bits(layout.value.size(self));\n+                let data = int.assert_bits(layout.size(self));\n \n                 // FIXME(antoyo): there's some issues with using the u128 code that follows, so hard-code\n                 // the paths for floating-point values.\n@@ -209,7 +209,7 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                 let base_addr = self.const_bitcast(base_addr, self.usize_type);\n                 let offset = self.context.new_rvalue_from_long(self.usize_type, offset.bytes() as i64);\n                 let ptr = self.const_bitcast(base_addr + offset, ptr_type);\n-                if layout.value != Pointer {\n+                if layout.primitive() != Pointer {\n                     self.const_bitcast(ptr.dereference(None).to_rvalue(), ty)\n                 }\n                 else {"}, {"sha": "805a265226da3a9563681a5d901deb37186ab6a0", "filename": "src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d71f633d3831b098fd836b197a36e110c1f53cc6/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71f633d3831b098fd836b197a36e110c1f53cc6/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=d71f633d3831b098fd836b197a36e110c1f53cc6", "patch": "@@ -328,7 +328,7 @@ pub fn const_alloc_to_gcc<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, alloc: ConstAl\n                 interpret::Pointer::new(alloc_id, Size::from_bytes(ptr_offset)),\n                 &cx.tcx,\n             ),\n-            abi::Scalar { value: Primitive::Pointer, valid_range: WrappingRange { start: 0, end: !0 } },\n+            abi::Scalar::Initialized { value: Primitive::Pointer, valid_range: WrappingRange { start: 0, end: !0 } },\n             cx.type_i8p(),\n         ));\n         next_offset = offset + pointer_size;"}, {"sha": "2c042ba4e3a9e99780bb9c900a0fe91a60b5422b", "filename": "src/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d71f633d3831b098fd836b197a36e110c1f53cc6/src%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d71f633d3831b098fd836b197a36e110c1f53cc6/src%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_of.rs?ref=d71f633d3831b098fd836b197a36e110c1f53cc6", "patch": "@@ -224,7 +224,7 @@ impl<'tcx> LayoutGccExt<'tcx> for TyAndLayout<'tcx> {\n     }\n \n     fn scalar_gcc_type_at<'gcc>(&self, cx: &CodegenCx<'gcc, 'tcx>, scalar: &abi::Scalar, offset: Size) -> Type<'gcc> {\n-        match scalar.value {\n+        match scalar.primitive() {\n             Int(i, true) => cx.type_from_integer(i),\n             Int(i, false) => cx.type_from_unsigned_integer(i),\n             F32 => cx.type_f32(),\n@@ -282,7 +282,7 @@ impl<'tcx> LayoutGccExt<'tcx> for TyAndLayout<'tcx> {\n                 Size::ZERO\n             }\n             else {\n-                a.value.size(cx).align_to(b.value.align(cx).abi)\n+                a.size(cx).align_to(b.align(cx).abi)\n             };\n         self.scalar_gcc_type_at(cx, scalar, offset)\n     }"}]}