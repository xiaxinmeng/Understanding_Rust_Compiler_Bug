{"sha": "6380937b596d32da78dfc24ae6666b12a6dc59bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzODA5MzdiNTk2ZDMyZGE3OGRmYzI0YWU2NjY2YjEyYTZkYzU5YmQ=", "commit": {"author": {"name": "Daniel Campoverde", "email": "alx741@riseup.net", "date": "2016-07-31T21:32:35Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-07-31T21:32:35Z"}, "message": "Multiple config file names feature (#1101)\n\n* Add multiple configuration file names feature\r\n\r\n* Add '.rustfmt.toml' in README file\r\n\r\n* Clean up configuration file code\r\n\r\n* Make config file names constant\r\n\r\n* Use only one blank line", "tree": {"sha": "3ddd933610934e322e72bd708286cfed2ec7094d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ddd933610934e322e72bd708286cfed2ec7094d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6380937b596d32da78dfc24ae6666b12a6dc59bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6380937b596d32da78dfc24ae6666b12a6dc59bd", "html_url": "https://github.com/rust-lang/rust/commit/6380937b596d32da78dfc24ae6666b12a6dc59bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6380937b596d32da78dfc24ae6666b12a6dc59bd/comments", "author": {"login": "alx741", "id": 2545720, "node_id": "MDQ6VXNlcjI1NDU3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2545720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alx741", "html_url": "https://github.com/alx741", "followers_url": "https://api.github.com/users/alx741/followers", "following_url": "https://api.github.com/users/alx741/following{/other_user}", "gists_url": "https://api.github.com/users/alx741/gists{/gist_id}", "starred_url": "https://api.github.com/users/alx741/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alx741/subscriptions", "organizations_url": "https://api.github.com/users/alx741/orgs", "repos_url": "https://api.github.com/users/alx741/repos", "events_url": "https://api.github.com/users/alx741/events{/privacy}", "received_events_url": "https://api.github.com/users/alx741/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e76cb6a907a66fa90b2e7e612df3ea72d43d3401", "url": "https://api.github.com/repos/rust-lang/rust/commits/e76cb6a907a66fa90b2e7e612df3ea72d43d3401", "html_url": "https://github.com/rust-lang/rust/commit/e76cb6a907a66fa90b2e7e612df3ea72d43d3401"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "c99ea26e7cfa6c8c1b394a8c5edc40f4023510c0", "filename": "README.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6380937b596d32da78dfc24ae6666b12a6dc59bd/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/6380937b596d32da78dfc24ae6666b12a6dc59bd/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=6380937b596d32da78dfc24ae6666b12a6dc59bd", "patch": "@@ -124,9 +124,10 @@ notes above on running rustfmt.\n ## Configuring Rustfmt\n \n Rustfmt is designed to be very configurable. You can create a TOML file called\n-rustfmt.toml, place it in the project directory and it will apply the options\n-in that file. See `rustfmt --config-help` for the options which are available,\n-or if you prefer to see source code, [src/config.rs](src/config.rs).\n+`rustfmt.toml` or `.rustfmt.toml`, place it in the project or any other parent\n+directory and it will apply the options in that file. See `rustfmt\n+--config-help` for the options which are available, or if you prefer to see\n+source code, [src/config.rs](src/config.rs).\n \n By default, Rustfmt uses a style which (mostly) conforms to the\n [Rust style guidelines](https://github.com/rust-lang/rust/tree/master/src/doc/style).\n@@ -148,8 +149,9 @@ options covering different styles. File an issue, or even better, submit a PR.\n     #[rustfmt_skip]  // requires nightly and #![feature(custom_attribute)] in crate root\n     #[cfg_attr(rustfmt, rustfmt_skip)]  // works in stable\n     ```\n-* When you run rustfmt, place a file named rustfmt.toml in target file\n-  directory or its parents to override the default settings of rustfmt.\n+* When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in\n+  target file directory or its parents to override the default settings of\n+  rustfmt.\n * After successful compilation, a `rustfmt` executable can be found in the\n   target directory.\n * If you're having issues compiling Rustfmt (or compile errors when trying to"}, {"sha": "3434f01ac9f8db2a65e74835a2a89c4c81fa9f80", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6380937b596d32da78dfc24ae6666b12a6dc59bd/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6380937b596d32da78dfc24ae6666b12a6dc59bd/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=6380937b596d32da78dfc24ae6666b12a6dc59bd", "patch": "@@ -109,20 +109,24 @@ fn lookup_project_file(dir: &Path) -> FmtResult<Option<PathBuf>> {\n \n     current = try!(fs::canonicalize(current));\n \n+    const CONFIG_FILE_NAMES: [&'static str; 2] = [\".rustfmt.toml\", \"rustfmt.toml\"];\n+\n     loop {\n-        let config_file = current.join(\"rustfmt.toml\");\n-        match fs::metadata(&config_file) {\n-            // Only return if it's a file to handle the unlikely situation of a directory named\n-            // `rustfmt.toml`.\n-            Ok(ref md) if md.is_file() => return Ok(Some(config_file)),\n-            // Return the error if it's something other than `NotFound`; otherwise we didn't find\n-            // the project file yet, and continue searching.\n-            Err(e) => {\n-                if e.kind() != ErrorKind::NotFound {\n-                    return Err(FmtError::from(e));\n+        for config_file_name in &CONFIG_FILE_NAMES {\n+            let config_file = current.join(config_file_name);\n+            match fs::metadata(&config_file) {\n+                // Only return if it's a file to handle the unlikely situation of a directory named\n+                // `rustfmt.toml`.\n+                Ok(ref md) if md.is_file() => return Ok(Some(config_file)),\n+                // Return the error if it's something other than `NotFound`; otherwise we didn't\n+                // find the project file yet, and continue searching.\n+                Err(e) => {\n+                    if e.kind() != ErrorKind::NotFound {\n+                        return Err(FmtError::from(e));\n+                    }\n                 }\n+                _ => {}\n             }\n-            _ => {}\n         }\n \n         // If the current directory has no parent, we're done searching."}]}