{"sha": "bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkODE2ZmQ3NmY0ZjdhMDQwY2E3YWM4Y2E1YmM1NTZkNzYxZjk2ZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-22T04:06:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-22T04:06:52Z"}, "message": "Auto merge of #66524 - ecstatic-morse:compiletest-multiple-revisions, r=Centril\n\nSupport multiple revisions in `compiletest`\n\nThe `//[X]~` syntax filters errors for tests that are run across multiple cfgs with  `// revisions:`. This commit extends that syntax to accept `//[X,Y]~`, which will match multiple cfgs to the same error annotation. This is functionally the same as writing two comments, `//[X]~` and `//[Y]~`, but can fit on a single line.\n\nWhile refactoring `compiletest` to support this, I also uncovered a small bug that was causing an incremental test to always pass, despite no errors being emitted.\n\nr? @Centril", "tree": {"sha": "0bfe068351cf25b176f2d8ab16c43ae33eb69f68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bfe068351cf25b176f2d8ab16c43ae33eb69f68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "html_url": "https://github.com/rust-lang/rust/commit/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abd69551bf8b8755b5e00d4f4d45ae5d4a0cd17d", "url": "https://api.github.com/repos/rust-lang/rust/commits/abd69551bf8b8755b5e00d4f4d45ae5d4a0cd17d", "html_url": "https://github.com/rust-lang/rust/commit/abd69551bf8b8755b5e00d4f4d45ae5d4a0cd17d"}, {"sha": "c537f229009bcec23ac89132fd6f571acbc23c38", "url": "https://api.github.com/repos/rust-lang/rust/commits/c537f229009bcec23ac89132fd6f571acbc23c38", "html_url": "https://github.com/rust-lang/rust/commit/c537f229009bcec23ac89132fd6f571acbc23c38"}], "stats": {"total": 116, "additions": 55, "deletions": 61}, "files": [{"sha": "5fc89395827c830a9b2847ec8d3c494beca72767", "filename": "src/test/incremental/warnings-reemitted.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fwarnings-reemitted.rs?ref=bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "patch": "@@ -2,9 +2,8 @@\n // compile-flags: -Coverflow-checks=on\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![allow(warnings)]\n #![warn(const_err)]\n \n fn main() {\n-    255u8 + 1; //~ WARNING this expression will panic at run-time\n+    let _ = 255u8 + 1; //~ WARNING attempt to add with overflow\n }"}, {"sha": "8c6073e2f7a4918bd468ebad139420b4a70487f3", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.rs?ref=bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "patch": "@@ -47,6 +47,4 @@ fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n }\n \n #[rustc_error]\n-fn main() { }\n-//[ok]~^ ERROR fatal error triggered by #[rustc_error]\n-//[oneuse]~^^ ERROR fatal error triggered by #[rustc_error]\n+fn main() { } //[ok,oneuse]~ ERROR fatal error triggered by #[rustc_error]"}, {"sha": "58217ff74b8d600e5d7edd87df1db7819c2ef091", "filename": "src/test/ui/error-codes/E0161.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.rs?ref=bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "patch": "@@ -20,14 +20,8 @@\n \n fn foo(x: Box<[i32]>) {\n     box *x;\n-    //[migrate]~^ ERROR E0161\n-    //[nll]~^^ ERROR E0161\n-    //[zflags]~^^^ ERROR E0161\n-    //[edition]~^^^^ ERROR E0161\n-    //[migrateul]~^^^^^ ERROR E0161\n-    //[nllul]~^^^^^^ ERROR E0161\n-    //[zflagsul]~^^^^^^^ ERROR E0161\n-    //[editionul]~^^^^^^^^ ERROR E0161\n+    //[migrate,nll,zflags,edition]~^ ERROR E0161\n+    //[migrateul,nllul,zflagsul,editionul]~^^ ERROR E0161\n }\n \n fn main() {}"}, {"sha": "38189816da849535c5f2449eace4bb05fa06a6a3", "filename": "src/test/ui/underscore-lifetime/where-clause-inherent-impl-underscore.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rs?ref=bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "patch": "@@ -11,8 +11,7 @@ struct Foo<T> {\n impl<T> Foo<T>\n where\n     T: WithRegion<'_>\n-//[rust2015]~^ ERROR `'_` cannot be used here\n-//[rust2018]~^^ ERROR `'_` cannot be used here\n+//[rust2015,rust2018]~^ ERROR `'_` cannot be used here\n { }\n \n fn main() {}"}, {"sha": "09e5bbd846d6c9cfe42d157541db630b58b7a48c", "filename": "src/test/ui/underscore-lifetime/where-clause-trait-impl-region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rs?ref=bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "patch": "@@ -9,8 +9,7 @@ trait Foo { }\n impl<T> Foo for Vec<T>\n where\n     T: WithType<&u32>\n-//[rust2015]~^ ERROR `&` without an explicit lifetime name cannot be used here\n-//[rust2018]~^^ ERROR `&` without an explicit lifetime name cannot be used here\n+//[rust2015,rust2018]~^ ERROR `&` without an explicit lifetime name cannot be used here\n { }\n \n fn main() {}"}, {"sha": "371d2e4ba43ac2ad9bfb97919c378e7a6bc976c1", "filename": "src/test/ui/underscore-lifetime/where-clause-trait-impl-underscore.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rs?ref=bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "patch": "@@ -9,8 +9,7 @@ trait Foo { }\n impl<T> Foo for Vec<T>\n where\n     T: WithRegion<'_>\n-//[rust2015]~^ ERROR `'_` cannot be used here\n-//[rust2018]~^^ ERROR `'_` cannot be used here\n+//[rust2015,rust2018]~^ ERROR `'_` cannot be used here\n { }\n \n fn main() {}"}, {"sha": "0ec2738181ee27700f81a551245d72e3ce9caa1e", "filename": "src/tools/compiletest/src/errors.rs", "status": "modified", "additions": 48, "deletions": 42, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs?ref=bd816fd76f4f7a040ca7ac8ca5bc556d761f96fa", "patch": "@@ -7,7 +7,9 @@ use std::io::BufReader;\n use std::path::Path;\n use std::str::FromStr;\n \n+use lazy_static::lazy_static;\n use log::*;\n+use regex::Regex;\n \n #[derive(Clone, Debug, PartialEq)]\n pub enum ErrorKind {\n@@ -85,20 +87,16 @@ pub fn load_errors(testfile: &Path, cfg: Option<&str>) -> Vec<Error> {\n     // updating it in the map callback below.)\n     let mut last_nonfollow_error = None;\n \n-    let tag = match cfg {\n-        Some(rev) => format!(\"//[{}]~\", rev),\n-        None => \"//~\".to_string(),\n-    };\n-\n     rdr.lines()\n         .enumerate()\n         .filter_map(|(line_num, line)| {\n-            parse_expected(last_nonfollow_error, line_num + 1, &line.unwrap(), &tag).map(\n+            parse_expected(last_nonfollow_error, line_num + 1, &line.unwrap(), cfg).map(\n                 |(which, error)| {\n                     match which {\n                         FollowPrevious(_) => {}\n                         _ => last_nonfollow_error = Some(error.line_num),\n                     }\n+\n                     error\n                 },\n             )\n@@ -110,46 +108,54 @@ fn parse_expected(\n     last_nonfollow_error: Option<usize>,\n     line_num: usize,\n     line: &str,\n-    tag: &str,\n+    cfg: Option<&str>,\n ) -> Option<(WhichLine, Error)> {\n-    let start = line.find(tag)?;\n-    let (follow, adjusts) = if line[start + tag.len()..].chars().next().unwrap() == '|' {\n-        (true, 0)\n-    } else {\n-        (\n-            false,\n-            line[start + tag.len()..]\n-                .chars()\n-                .take_while(|c| *c == '^')\n-                .count(),\n-        )\n+    // Matches comments like:\n+    //     //~\n+    //     //~|\n+    //     //~^\n+    //     //~^^^^^\n+    //     //[cfg1]~\n+    //     //[cfg1,cfg2]~^^\n+    lazy_static! {\n+        static ref RE: Regex =\n+            Regex::new(r\"//(?:\\[(?P<cfgs>[\\w,]+)])?~(?P<adjust>\\||\\^*)\").unwrap();\n+    }\n+\n+    let captures = RE.captures(line)?;\n+\n+    match (cfg, captures.name(\"cfgs\")) {\n+        // Only error messages that contain our `cfg` betweeen the square brackets apply to us.\n+        (Some(cfg), Some(filter)) if !filter.as_str().split(',').any(|s| s == cfg)\n+            => return None,\n+        (Some(_), Some(_)) => {}\n+\n+        (None, Some(_)) => panic!(\"Only tests with revisions should use `//[X]~`\"),\n+\n+        // If an error has no list of revisions, it applies to all revisions.\n+        (Some(_), None) | (None, None) => {}\n+    }\n+\n+    let (follow, adjusts) = match &captures[\"adjust\"] {\n+        \"|\" => (true, 0),\n+        circumflexes => (false, circumflexes.len()),\n     };\n-    let kind_start = start + tag.len() + adjusts + (follow as usize);\n-    let (kind, msg);\n-    match line[kind_start..]\n+\n+    // Get the part of the comment after the sigil (e.g. `~^^` or ~|).\n+    let whole_match = captures.get(0).unwrap();\n+    let (_, mut msg) = line.split_at(whole_match.end());\n+\n+    let first_word = msg\n         .split_whitespace()\n         .next()\n-        .expect(\"Encountered unexpected empty comment\")\n-        .parse::<ErrorKind>()\n-    {\n-        Ok(k) => {\n-            // If we find `//~ ERROR foo` or something like that:\n-            kind = Some(k);\n-            let letters = line[kind_start..].chars();\n-            msg = letters\n-                .skip_while(|c| c.is_whitespace())\n-                .skip_while(|c| !c.is_whitespace())\n-                .collect::<String>();\n-        }\n-        Err(_) => {\n-            // Otherwise we found `//~ foo`:\n-            kind = None;\n-            let letters = line[kind_start..].chars();\n-            msg = letters\n-                .skip_while(|c| c.is_whitespace())\n-                .collect::<String>();\n-        }\n+        .expect(\"Encountered unexpected empty comment\");\n+\n+    // If we find `//~ ERROR foo` or something like that, skip the first word.\n+    let kind = first_word.parse::<ErrorKind>().ok();\n+    if let Some(_) = kind {\n+        msg = &msg.trim_start().split_at(first_word.len()).1;\n     }\n+\n     let msg = msg.trim().to_owned();\n \n     let (which, line_num) = if follow {\n@@ -171,7 +177,7 @@ fn parse_expected(\n \n     debug!(\n         \"line={} tag={:?} which={:?} kind={:?} msg={:?}\",\n-        line_num, tag, which, kind, msg\n+        line_num, whole_match.as_str(), which, kind, msg\n     );\n     Some((\n         which,"}]}