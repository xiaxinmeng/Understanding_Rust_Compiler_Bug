{"sha": "047b3bd4dfdddca6ed6bc2cf10d89143b8756129", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0N2IzYmQ0ZGZkZGRjYTZlZDZiYzJjZjEwZDg5MTQzYjg3NTYxMjk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-05-30T03:39:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-30T03:39:19Z"}, "message": "Rollup merge of #72724 - Aaron1011:revert-tokenstream-expand, r=petrochenkov\n\nRevert recursive `TokenKind::Interpolated` expansion for now\n\nThe crater run https://github.com/rust-lang/rust/issues/72622 revealed many root regressions, at least one of which is going to take some time to fix.\n\nFor now, let's revert https://github.com/rust-lang/rust/pull/72388 to allow the 709 affected crates to continue building on the latest nightly.", "tree": {"sha": "b0f5bcb75b60d1b38b0a0a22c9824a06968fc5ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0f5bcb75b60d1b38b0a0a22c9824a06968fc5ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/047b3bd4dfdddca6ed6bc2cf10d89143b8756129", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0dVoCRBK7hj4Ov3rIwAAdHIIAAaAkIWAvBbKpy9V5rtOwqQo\n8MH8KQV9bYJUzNOYjBen78plGGaJqRBF9BIKzvxaQZJ/bT7K9w5waaFbd/5WI5Ms\n7P7LaTIC8qDEX4sXX5feLKegJJyZlYRIkrxGfbyLLPg5Ms4WYQd0O0+ok+1hoB75\nAw7AJ2z2Morm2LDVg46Qgq0kiCsKqN1XqtmMgqSRRvuTzk/MJUUQzABhORyKiANZ\nukgPaDoy9NV3zWulM3e9rPTpcb5IR3bPWPPMKGlMKNjX3yEfo7qtTmXOrwzJKsF4\nzgiH6vqFqojxI4tgDJ02PhOftt5k1JcwiesTM7ntVKZDY8qu0KoKzaPpyebElns=\n=p3ON\n-----END PGP SIGNATURE-----\n", "payload": "tree b0f5bcb75b60d1b38b0a0a22c9824a06968fc5ef\nparent 875c6b281d5574f2bb05bd3cc8b99fe9192d37b6\nparent b802eebc67e92e100eaebe40c1eb4068c3b2fa2b\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1590809959 +0900\ncommitter GitHub <noreply@github.com> 1590809959 +0900\n\nRollup merge of #72724 - Aaron1011:revert-tokenstream-expand, r=petrochenkov\n\nRevert recursive `TokenKind::Interpolated` expansion for now\n\nThe crater run https://github.com/rust-lang/rust/issues/72622 revealed many root regressions, at least one of which is going to take some time to fix.\n\nFor now, let's revert https://github.com/rust-lang/rust/pull/72388 to allow the 709 affected crates to continue building on the latest nightly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/047b3bd4dfdddca6ed6bc2cf10d89143b8756129", "html_url": "https://github.com/rust-lang/rust/commit/047b3bd4dfdddca6ed6bc2cf10d89143b8756129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/047b3bd4dfdddca6ed6bc2cf10d89143b8756129/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "875c6b281d5574f2bb05bd3cc8b99fe9192d37b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/875c6b281d5574f2bb05bd3cc8b99fe9192d37b6", "html_url": "https://github.com/rust-lang/rust/commit/875c6b281d5574f2bb05bd3cc8b99fe9192d37b6"}, {"sha": "b802eebc67e92e100eaebe40c1eb4068c3b2fa2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b802eebc67e92e100eaebe40c1eb4068c3b2fa2b", "html_url": "https://github.com/rust-lang/rust/commit/b802eebc67e92e100eaebe40c1eb4068c3b2fa2b"}], "stats": {"total": 425, "additions": 185, "deletions": 240}, "files": [{"sha": "b2f5d058f5cf117db1a123a04d3cb5744cc6367d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/047b3bd4dfdddca6ed6bc2cf10d89143b8756129/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/047b3bd4dfdddca6ed6bc2cf10d89143b8756129/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=047b3bd4dfdddca6ed6bc2cf10d89143b8756129", "patch": "@@ -4144,7 +4144,6 @@ dependencies = [\n  \"rustc_lexer\",\n  \"rustc_session\",\n  \"rustc_span\",\n- \"smallvec 1.4.0\",\n  \"unicode-normalization\",\n ]\n "}, {"sha": "a5b9c2a95bbea14074f4fbf7d03257bf65432cde", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/047b3bd4dfdddca6ed6bc2cf10d89143b8756129/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b3bd4dfdddca6ed6bc2cf10d89143b8756129/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=047b3bd4dfdddca6ed6bc2cf10d89143b8756129", "patch": "@@ -673,6 +673,62 @@ impl Token {\n \n         Some(Token::new(kind, self.span.to(joint.span)))\n     }\n+\n+    // See comments in `Nonterminal::to_tokenstream` for why we care about\n+    // *probably* equal here rather than actual equality\n+    crate fn probably_equal_for_proc_macro(&self, other: &Token) -> bool {\n+        if mem::discriminant(&self.kind) != mem::discriminant(&other.kind) {\n+            return false;\n+        }\n+        match (&self.kind, &other.kind) {\n+            (&Eq, &Eq)\n+            | (&Lt, &Lt)\n+            | (&Le, &Le)\n+            | (&EqEq, &EqEq)\n+            | (&Ne, &Ne)\n+            | (&Ge, &Ge)\n+            | (&Gt, &Gt)\n+            | (&AndAnd, &AndAnd)\n+            | (&OrOr, &OrOr)\n+            | (&Not, &Not)\n+            | (&Tilde, &Tilde)\n+            | (&At, &At)\n+            | (&Dot, &Dot)\n+            | (&DotDot, &DotDot)\n+            | (&DotDotDot, &DotDotDot)\n+            | (&DotDotEq, &DotDotEq)\n+            | (&Comma, &Comma)\n+            | (&Semi, &Semi)\n+            | (&Colon, &Colon)\n+            | (&ModSep, &ModSep)\n+            | (&RArrow, &RArrow)\n+            | (&LArrow, &LArrow)\n+            | (&FatArrow, &FatArrow)\n+            | (&Pound, &Pound)\n+            | (&Dollar, &Dollar)\n+            | (&Question, &Question)\n+            | (&Whitespace, &Whitespace)\n+            | (&Comment, &Comment)\n+            | (&Eof, &Eof) => true,\n+\n+            (&BinOp(a), &BinOp(b)) | (&BinOpEq(a), &BinOpEq(b)) => a == b,\n+\n+            (&OpenDelim(a), &OpenDelim(b)) | (&CloseDelim(a), &CloseDelim(b)) => a == b,\n+\n+            (&DocComment(a), &DocComment(b)) | (&Shebang(a), &Shebang(b)) => a == b,\n+\n+            (&Literal(a), &Literal(b)) => a == b,\n+\n+            (&Lifetime(a), &Lifetime(b)) => a == b,\n+            (&Ident(a, b), &Ident(c, d)) => {\n+                b == d && (a == c || a == kw::DollarCrate || c == kw::DollarCrate)\n+            }\n+\n+            (&Interpolated(_), &Interpolated(_)) => false,\n+\n+            _ => panic!(\"forgot to add a token?\"),\n+        }\n+    }\n }\n \n impl PartialEq<TokenKind> for Token {"}, {"sha": "075aaa7e5bc013dd5b0d9744d6ec73efda73de18", "filename": "src/librustc_ast/tokenstream.rs", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/047b3bd4dfdddca6ed6bc2cf10d89143b8756129/src%2Flibrustc_ast%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b3bd4dfdddca6ed6bc2cf10d89143b8756129/src%2Flibrustc_ast%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftokenstream.rs?ref=047b3bd4dfdddca6ed6bc2cf10d89143b8756129", "patch": "@@ -21,6 +21,8 @@ use rustc_macros::HashStable_Generic;\n use rustc_span::{Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n \n+use log::debug;\n+\n use std::{iter, mem};\n \n /// When the main rust parser encounters a syntax-extension invocation, it\n@@ -66,6 +68,23 @@ impl TokenTree {\n         }\n     }\n \n+    // See comments in `Nonterminal::to_tokenstream` for why we care about\n+    // *probably* equal here rather than actual equality\n+    //\n+    // This is otherwise the same as `eq_unspanned`, only recursing with a\n+    // different method.\n+    pub fn probably_equal_for_proc_macro(&self, other: &TokenTree) -> bool {\n+        match (self, other) {\n+            (TokenTree::Token(token), TokenTree::Token(token2)) => {\n+                token.probably_equal_for_proc_macro(token2)\n+            }\n+            (TokenTree::Delimited(_, delim, tts), TokenTree::Delimited(_, delim2, tts2)) => {\n+                delim == delim2 && tts.probably_equal_for_proc_macro(&tts2)\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     /// Retrieves the TokenTree's span.\n     pub fn span(&self) -> Span {\n         match self {\n@@ -288,6 +307,112 @@ impl TokenStream {\n         t1.next().is_none() && t2.next().is_none()\n     }\n \n+    // See comments in `Nonterminal::to_tokenstream` for why we care about\n+    // *probably* equal here rather than actual equality\n+    //\n+    // This is otherwise the same as `eq_unspanned`, only recursing with a\n+    // different method.\n+    pub fn probably_equal_for_proc_macro(&self, other: &TokenStream) -> bool {\n+        // When checking for `probably_eq`, we ignore certain tokens that aren't\n+        // preserved in the AST. Because they are not preserved, the pretty\n+        // printer arbitrarily adds or removes them when printing as token\n+        // streams, making a comparison between a token stream generated from an\n+        // AST and a token stream which was parsed into an AST more reliable.\n+        fn semantic_tree(tree: &TokenTree) -> bool {\n+            if let TokenTree::Token(token) = tree {\n+                if let\n+                    // The pretty printer tends to add trailing commas to\n+                    // everything, and in particular, after struct fields.\n+                    | token::Comma\n+                    // The pretty printer emits `NoDelim` as whitespace.\n+                    | token::OpenDelim(DelimToken::NoDelim)\n+                    | token::CloseDelim(DelimToken::NoDelim)\n+                    // The pretty printer collapses many semicolons into one.\n+                    | token::Semi\n+                    // The pretty printer collapses whitespace arbitrarily and can\n+                    // introduce whitespace from `NoDelim`.\n+                    | token::Whitespace\n+                    // The pretty printer can turn `$crate` into `::crate_name`\n+                    | token::ModSep = token.kind {\n+                    return false;\n+                }\n+            }\n+            true\n+        }\n+\n+        // When comparing two `TokenStream`s, we ignore the `IsJoint` information.\n+        //\n+        // However, `rustc_parse::lexer::tokentrees::TokenStreamBuilder` will\n+        // use `Token.glue` on adjacent tokens with the proper `IsJoint`.\n+        // Since we are ignoreing `IsJoint`, a 'glued' token (e.g. `BinOp(Shr)`)\n+        // and its 'split'/'unglued' compoenents (e.g. `Gt, Gt`) are equivalent\n+        // when determining if two `TokenStream`s are 'probably equal'.\n+        //\n+        // Therefore, we use `break_two_token_op` to convert all tokens\n+        // to the 'unglued' form (if it exists). This ensures that two\n+        // `TokenStream`s which differ only in how their tokens are glued\n+        // will be considered 'probably equal', which allows us to keep spans.\n+        //\n+        // This is important when the original `TokenStream` contained\n+        // extra spaces (e.g. `f :: < Vec < _ > > ( ) ;'). These extra spaces\n+        // will be omitted when we pretty-print, which can cause the original\n+        // and reparsed `TokenStream`s to differ in the assignment of `IsJoint`,\n+        // leading to some tokens being 'glued' together in one stream but not\n+        // the other. See #68489 for more details.\n+        fn break_tokens(tree: TokenTree) -> impl Iterator<Item = TokenTree> {\n+            // In almost all cases, we should have either zero or one levels\n+            // of 'unglueing'. However, in some unusual cases, we may need\n+            // to iterate breaking tokens mutliple times. For example:\n+            // '[BinOpEq(Shr)] => [Gt, Ge] -> [Gt, Gt, Eq]'\n+            let mut token_trees: SmallVec<[_; 2]>;\n+            if let TokenTree::Token(token) = &tree {\n+                let mut out = SmallVec::<[_; 2]>::new();\n+                out.push(token.clone());\n+                // Iterate to fixpoint:\n+                // * We start off with 'out' containing our initial token, and `temp` empty\n+                // * If we are able to break any tokens in `out`, then `out` will have\n+                //   at least one more element than 'temp', so we will try to break tokens\n+                //   again.\n+                // * If we cannot break any tokens in 'out', we are done\n+                loop {\n+                    let mut temp = SmallVec::<[_; 2]>::new();\n+                    let mut changed = false;\n+\n+                    for token in out.into_iter() {\n+                        if let Some((first, second)) = token.kind.break_two_token_op() {\n+                            temp.push(Token::new(first, DUMMY_SP));\n+                            temp.push(Token::new(second, DUMMY_SP));\n+                            changed = true;\n+                        } else {\n+                            temp.push(token);\n+                        }\n+                    }\n+                    out = temp;\n+                    if !changed {\n+                        break;\n+                    }\n+                }\n+                token_trees = out.into_iter().map(|t| TokenTree::Token(t)).collect();\n+                if token_trees.len() != 1 {\n+                    debug!(\"break_tokens: broke {:?} to {:?}\", tree, token_trees);\n+                }\n+            } else {\n+                token_trees = SmallVec::new();\n+                token_trees.push(tree);\n+            }\n+            token_trees.into_iter()\n+        }\n+\n+        let mut t1 = self.trees().filter(semantic_tree).flat_map(break_tokens);\n+        let mut t2 = other.trees().filter(semantic_tree).flat_map(break_tokens);\n+        for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n+            if !t1.probably_equal_for_proc_macro(&t2) {\n+                return false;\n+            }\n+        }\n+        t1.next().is_none() && t2.next().is_none()\n+    }\n+\n     pub fn map_enumerated<F: FnMut(usize, TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {\n         TokenStream(Lrc::new(\n             self.0"}, {"sha": "7164c6788086398bf2535dc58807afc714b48af6", "filename": "src/librustc_parse/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/047b3bd4dfdddca6ed6bc2cf10d89143b8756129/src%2Flibrustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/047b3bd4dfdddca6ed6bc2cf10d89143b8756129/src%2Flibrustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2FCargo.toml?ref=047b3bd4dfdddca6ed6bc2cf10d89143b8756129", "patch": "@@ -12,7 +12,6 @@ doctest = false\n [dependencies]\n bitflags = \"1.0\"\n log = \"0.4\"\n-smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }"}, {"sha": "be86b4b7c7720ed9e7d4b716a70d4ca69e4a10f1", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 4, "deletions": 208, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/047b3bd4dfdddca6ed6bc2cf10d89143b8756129/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047b3bd4dfdddca6ed6bc2cf10d89143b8756129/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=047b3bd4dfdddca6ed6bc2cf10d89143b8756129", "patch": "@@ -7,18 +7,14 @@\n #![feature(or_patterns)]\n \n use rustc_ast::ast;\n-use rustc_ast::token::{self, DelimToken, Nonterminal, Token, TokenKind};\n-use rustc_ast::tokenstream::{self, IsJoint, TokenStream, TokenTree};\n+use rustc_ast::token::{self, Nonterminal};\n+use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n use rustc_session::parse::ParseSess;\n-use rustc_span::symbol::kw;\n-use rustc_span::{FileName, SourceFile, Span, DUMMY_SP};\n+use rustc_span::{FileName, SourceFile, Span};\n \n-use smallvec::SmallVec;\n-\n-use std::mem;\n use std::path::Path;\n use std::str;\n \n@@ -310,7 +306,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n     // modifications, including adding/removing typically non-semantic\n     // tokens such as extra braces and commas, don't happen.\n     if let Some(tokens) = tokens {\n-        if tokenstream_probably_equal_for_proc_macro(&tokens, &tokens_for_real, sess) {\n+        if tokens.probably_equal_for_proc_macro(&tokens_for_real) {\n             return tokens;\n         }\n         info!(\n@@ -385,203 +381,3 @@ fn prepend_attrs(\n     builder.push(tokens.clone());\n     Some(builder.build())\n }\n-\n-// See comments in `Nonterminal::to_tokenstream` for why we care about\n-// *probably* equal here rather than actual equality\n-//\n-// This is otherwise the same as `eq_unspanned`, only recursing with a\n-// different method.\n-pub fn tokenstream_probably_equal_for_proc_macro(\n-    first: &TokenStream,\n-    other: &TokenStream,\n-    sess: &ParseSess,\n-) -> bool {\n-    // When checking for `probably_eq`, we ignore certain tokens that aren't\n-    // preserved in the AST. Because they are not preserved, the pretty\n-    // printer arbitrarily adds or removes them when printing as token\n-    // streams, making a comparison between a token stream generated from an\n-    // AST and a token stream which was parsed into an AST more reliable.\n-    fn semantic_tree(tree: &TokenTree) -> bool {\n-        if let TokenTree::Token(token) = tree {\n-            if let\n-                // The pretty printer tends to add trailing commas to\n-                // everything, and in particular, after struct fields.\n-                | token::Comma\n-                // The pretty printer emits `NoDelim` as whitespace.\n-                | token::OpenDelim(DelimToken::NoDelim)\n-                | token::CloseDelim(DelimToken::NoDelim)\n-                // The pretty printer collapses many semicolons into one.\n-                | token::Semi\n-                // The pretty printer collapses whitespace arbitrarily and can\n-                // introduce whitespace from `NoDelim`.\n-                | token::Whitespace\n-                // The pretty printer can turn `$crate` into `::crate_name`\n-                | token::ModSep = token.kind {\n-                return false;\n-            }\n-        }\n-        true\n-    }\n-\n-    // When comparing two `TokenStream`s, we ignore the `IsJoint` information.\n-    //\n-    // However, `rustc_parse::lexer::tokentrees::TokenStreamBuilder` will\n-    // use `Token.glue` on adjacent tokens with the proper `IsJoint`.\n-    // Since we are ignoreing `IsJoint`, a 'glued' token (e.g. `BinOp(Shr)`)\n-    // and its 'split'/'unglued' compoenents (e.g. `Gt, Gt`) are equivalent\n-    // when determining if two `TokenStream`s are 'probably equal'.\n-    //\n-    // Therefore, we use `break_two_token_op` to convert all tokens\n-    // to the 'unglued' form (if it exists). This ensures that two\n-    // `TokenStream`s which differ only in how their tokens are glued\n-    // will be considered 'probably equal', which allows us to keep spans.\n-    //\n-    // This is important when the original `TokenStream` contained\n-    // extra spaces (e.g. `f :: < Vec < _ > > ( ) ;'). These extra spaces\n-    // will be omitted when we pretty-print, which can cause the original\n-    // and reparsed `TokenStream`s to differ in the assignment of `IsJoint`,\n-    // leading to some tokens being 'glued' together in one stream but not\n-    // the other. See #68489 for more details.\n-    fn break_tokens(tree: TokenTree) -> impl Iterator<Item = TokenTree> {\n-        // In almost all cases, we should have either zero or one levels\n-        // of 'unglueing'. However, in some unusual cases, we may need\n-        // to iterate breaking tokens mutliple times. For example:\n-        // '[BinOpEq(Shr)] => [Gt, Ge] -> [Gt, Gt, Eq]'\n-        let mut token_trees: SmallVec<[_; 2]>;\n-        if let TokenTree::Token(token) = &tree {\n-            let mut out = SmallVec::<[_; 2]>::new();\n-            out.push(token.clone());\n-            // Iterate to fixpoint:\n-            // * We start off with 'out' containing our initial token, and `temp` empty\n-            // * If we are able to break any tokens in `out`, then `out` will have\n-            //   at least one more element than 'temp', so we will try to break tokens\n-            //   again.\n-            // * If we cannot break any tokens in 'out', we are done\n-            loop {\n-                let mut temp = SmallVec::<[_; 2]>::new();\n-                let mut changed = false;\n-\n-                for token in out.into_iter() {\n-                    if let Some((first, second)) = token.kind.break_two_token_op() {\n-                        temp.push(Token::new(first, DUMMY_SP));\n-                        temp.push(Token::new(second, DUMMY_SP));\n-                        changed = true;\n-                    } else {\n-                        temp.push(token);\n-                    }\n-                }\n-                out = temp;\n-                if !changed {\n-                    break;\n-                }\n-            }\n-            token_trees = out.into_iter().map(|t| TokenTree::Token(t)).collect();\n-            if token_trees.len() != 1 {\n-                debug!(\"break_tokens: broke {:?} to {:?}\", tree, token_trees);\n-            }\n-        } else {\n-            token_trees = SmallVec::new();\n-            token_trees.push(tree);\n-        }\n-        token_trees.into_iter()\n-    }\n-\n-    let expand_nt = |tree: TokenTree| {\n-        if let TokenTree::Token(Token { kind: TokenKind::Interpolated(nt), span }) = &tree {\n-            nt_to_tokenstream(nt, sess, *span).into_trees()\n-        } else {\n-            TokenStream::new(vec![(tree, IsJoint::NonJoint)]).into_trees()\n-        }\n-    };\n-\n-    // Break tokens after we expand any nonterminals, so that we break tokens\n-    // that are produced as a result of nonterminal expansion.\n-    let mut t1 = first.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n-    let mut t2 = other.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n-    for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n-        if !tokentree_probably_equal_for_proc_macro(&t1, &t2, sess) {\n-            return false;\n-        }\n-    }\n-    t1.next().is_none() && t2.next().is_none()\n-}\n-\n-// See comments in `Nonterminal::to_tokenstream` for why we care about\n-// *probably* equal here rather than actual equality\n-crate fn token_probably_equal_for_proc_macro(first: &Token, other: &Token) -> bool {\n-    use TokenKind::*;\n-\n-    if mem::discriminant(&first.kind) != mem::discriminant(&other.kind) {\n-        return false;\n-    }\n-    match (&first.kind, &other.kind) {\n-        (&Eq, &Eq)\n-        | (&Lt, &Lt)\n-        | (&Le, &Le)\n-        | (&EqEq, &EqEq)\n-        | (&Ne, &Ne)\n-        | (&Ge, &Ge)\n-        | (&Gt, &Gt)\n-        | (&AndAnd, &AndAnd)\n-        | (&OrOr, &OrOr)\n-        | (&Not, &Not)\n-        | (&Tilde, &Tilde)\n-        | (&At, &At)\n-        | (&Dot, &Dot)\n-        | (&DotDot, &DotDot)\n-        | (&DotDotDot, &DotDotDot)\n-        | (&DotDotEq, &DotDotEq)\n-        | (&Comma, &Comma)\n-        | (&Semi, &Semi)\n-        | (&Colon, &Colon)\n-        | (&ModSep, &ModSep)\n-        | (&RArrow, &RArrow)\n-        | (&LArrow, &LArrow)\n-        | (&FatArrow, &FatArrow)\n-        | (&Pound, &Pound)\n-        | (&Dollar, &Dollar)\n-        | (&Question, &Question)\n-        | (&Whitespace, &Whitespace)\n-        | (&Comment, &Comment)\n-        | (&Eof, &Eof) => true,\n-\n-        (&BinOp(a), &BinOp(b)) | (&BinOpEq(a), &BinOpEq(b)) => a == b,\n-\n-        (&OpenDelim(a), &OpenDelim(b)) | (&CloseDelim(a), &CloseDelim(b)) => a == b,\n-\n-        (&DocComment(a), &DocComment(b)) | (&Shebang(a), &Shebang(b)) => a == b,\n-\n-        (&Literal(a), &Literal(b)) => a == b,\n-\n-        (&Lifetime(a), &Lifetime(b)) => a == b,\n-        (&Ident(a, b), &Ident(c, d)) => {\n-            b == d && (a == c || a == kw::DollarCrate || c == kw::DollarCrate)\n-        }\n-\n-        // Expanded by `tokenstream_probably_equal_for_proc_macro`\n-        (&Interpolated(_), &Interpolated(_)) => unreachable!(),\n-\n-        _ => panic!(\"forgot to add a token?\"),\n-    }\n-}\n-\n-// See comments in `Nonterminal::to_tokenstream` for why we care about\n-// *probably* equal here rather than actual equality\n-//\n-// This is otherwise the same as `eq_unspanned`, only recursing with a\n-// different method.\n-pub fn tokentree_probably_equal_for_proc_macro(\n-    first: &TokenTree,\n-    other: &TokenTree,\n-    sess: &ParseSess,\n-) -> bool {\n-    match (first, other) {\n-        (TokenTree::Token(token), TokenTree::Token(token2)) => {\n-            token_probably_equal_for_proc_macro(token, token2)\n-        }\n-        (TokenTree::Delimited(_, delim, tts), TokenTree::Delimited(_, delim2, tts2)) => {\n-            delim == delim2 && tokenstream_probably_equal_for_proc_macro(&tts, &tts2, sess)\n-        }\n-        _ => false,\n-    }\n-}"}, {"sha": "37436567d70f00996fd5201e0c277e823b37bda4", "filename": "src/test/ui/proc-macro/macro-rules-capture.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/875c6b281d5574f2bb05bd3cc8b99fe9192d37b6/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/875c6b281d5574f2bb05bd3cc8b99fe9192d37b6/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-capture.rs?ref=875c6b281d5574f2bb05bd3cc8b99fe9192d37b6", "patch": "@@ -1,18 +0,0 @@\n-// aux-build: test-macros.rs\n-\n-extern crate test_macros;\n-use test_macros::recollect_attr;\n-\n-macro_rules! reemit {\n-    ($name:ident => $($token:expr)*) => {\n-\n-        #[recollect_attr]\n-        pub fn $name() {\n-            $($token)*;\n-        }\n-    }\n-}\n-\n-reemit! { foo => 45u32.into() } //~ ERROR type annotations\n-\n-fn main() {}"}, {"sha": "6d512846ff7852d136090c55a5d96bed2429d9b2", "filename": "src/test/ui/proc-macro/macro-rules-capture.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/875c6b281d5574f2bb05bd3cc8b99fe9192d37b6/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/875c6b281d5574f2bb05bd3cc8b99fe9192d37b6/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-capture.stderr?ref=875c6b281d5574f2bb05bd3cc8b99fe9192d37b6", "patch": "@@ -1,12 +0,0 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/macro-rules-capture.rs:16:24\n-   |\n-LL | reemit! { foo => 45u32.into() }\n-   |                  ------^^^^--\n-   |                  |     |\n-   |                  |     cannot infer type for type parameter `T` declared on the trait `Into`\n-   |                  this method call resolves to `T`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0282`."}]}