{"sha": "d95745e5fa39680d97a52d0e07ed7842b163bacc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NTc0NWU1ZmEzOTY4MGQ5N2E1MmQwZTA3ZWQ3ODQyYjE2M2JhY2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-24T14:56:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-24T14:56:28Z"}, "message": "Auto merge of #85427 - ehuss:fix-use-placement, r=jackh726\n\nFix use placement for suggestions near main.\n\nThis fixes an edge case for the suggestion to add a `use`. When running with `--test`, the `main` function will be annotated with an `#[allow(dead_code)]` attribute. The `UsePlacementFinder` would end up using the dummy span of that synthetic attribute. If there are top-level inner attributes, this would place the `use` in the wrong position. The solution here is to ignore attributes with dummy spans.\n\nIn the process of working on this, I discovered that the `use_suggestion_placement` test was broken. `UsePlacementFinder` is unaware of active attributes. Attributes like `#[derive]` don't exist in the AST since they are removed. Fixing that is difficult, since the AST does not retain enough information. I considered trying to place the `use` towards the top of the module after any `extern crate` items, but I couldn't find a way to get a span for the start of a module block (the `mod` span starts at the `mod` keyword, and it seems tricky to find the spot just after the opening bracket and past inner attributes). For now, I just put some comments about the issue. This appears to have been a known issue in #44215 where the test for it was introduced, and the fix seemed to be deferred to later.", "tree": {"sha": "5121952dd0824b51d5e5a998d93fb53ce7f88a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5121952dd0824b51d5e5a998d93fb53ce7f88a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d95745e5fa39680d97a52d0e07ed7842b163bacc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d95745e5fa39680d97a52d0e07ed7842b163bacc", "html_url": "https://github.com/rust-lang/rust/commit/d95745e5fa39680d97a52d0e07ed7842b163bacc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d95745e5fa39680d97a52d0e07ed7842b163bacc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "456a03227e3c81a51631f87ec80cac301e5fa6d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/456a03227e3c81a51631f87ec80cac301e5fa6d7", "html_url": "https://github.com/rust-lang/rust/commit/456a03227e3c81a51631f87ec80cac301e5fa6d7"}, {"sha": "1400cb0295210bc500aa27f6cca3ccb546b38814", "url": "https://api.github.com/repos/rust-lang/rust/commits/1400cb0295210bc500aa27f6cca3ccb546b38814", "html_url": "https://github.com/rust-lang/rust/commit/1400cb0295210bc500aa27f6cca3ccb546b38814"}], "stats": {"total": 187, "additions": 167, "deletions": 20}, "files": [{"sha": "83e904eb16b30d7c98a53441968c0d92db8eafa8", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d95745e5fa39680d97a52d0e07ed7842b163bacc/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95745e5fa39680d97a52d0e07ed7842b163bacc/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d95745e5fa39680d97a52d0e07ed7842b163bacc", "patch": "@@ -335,15 +335,15 @@ impl UsePlacementFinder {\n                     if self.span.map_or(true, |span| item.span < span)\n                         && !item.span.from_expansion()\n                     {\n+                        self.span = Some(item.span.shrink_to_lo());\n                         // don't insert between attributes and an item\n-                        if item.attrs.is_empty() {\n-                            self.span = Some(item.span.shrink_to_lo());\n-                        } else {\n-                            // find the first attribute on the item\n-                            for attr in &item.attrs {\n-                                if self.span.map_or(true, |span| attr.span < span) {\n-                                    self.span = Some(attr.span.shrink_to_lo());\n-                                }\n+                        // find the first attribute on the item\n+                        // FIXME: This is broken for active attributes.\n+                        for attr in &item.attrs {\n+                            if !attr.span.is_dummy()\n+                                && self.span.map_or(true, |span| attr.span < span)\n+                            {\n+                                self.span = Some(attr.span.shrink_to_lo());\n                             }\n                         }\n                     }"}, {"sha": "3cb4ac8e18293d20f68541572c397d635210b288", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d95745e5fa39680d97a52d0e07ed7842b163bacc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95745e5fa39680d97a52d0e07ed7842b163bacc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d95745e5fa39680d97a52d0e07ed7842b163bacc", "patch": "@@ -1650,16 +1650,16 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n                 _ => {\n                     if self.span.map_or(true, |span| item.span < span) {\n                         if !item.span.from_expansion() {\n+                            self.span = Some(item.span.shrink_to_lo());\n                             // Don't insert between attributes and an item.\n                             let attrs = self.tcx.hir().attrs(item.hir_id());\n-                            if attrs.is_empty() {\n-                                self.span = Some(item.span.shrink_to_lo());\n-                            } else {\n-                                // Find the first attribute on the item.\n-                                for attr in attrs {\n-                                    if self.span.map_or(true, |span| attr.span < span) {\n-                                        self.span = Some(attr.span.shrink_to_lo());\n-                                    }\n+                            // Find the first attribute on the item.\n+                            // FIXME: This is broken for active attributes.\n+                            for attr in attrs {\n+                                if !attr.span.is_dummy()\n+                                    && self.span.map_or(true, |span| attr.span < span)\n+                                {\n+                                    self.span = Some(attr.span.shrink_to_lo());\n                                 }\n                             }\n                         }"}, {"sha": "63676327aa041992e249f219cb639294e0b4f222", "filename": "src/test/ui/resolve/use_suggestion_placement.fixed", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.fixed?ref=d95745e5fa39680d97a52d0e07ed7842b163bacc", "patch": "@@ -0,0 +1,39 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+use m::A;\n+\n+use std::collections::HashMap;\n+\n+macro_rules! y {\n+    () => {}\n+}\n+\n+mod m {\n+    pub const A: i32 = 0;\n+}\n+\n+mod foo {\n+    // FIXME: UsePlacementFinder is broken because active attributes are\n+    // removed, and thus the `derive` attribute here is not in the AST.\n+    // An inert attribute should work, though.\n+    // #[derive(Debug)]\n+    use std::path::Path;\n+\n+#[allow(warnings)]\n+    pub struct Foo;\n+\n+    // test whether the use suggestion isn't\n+    // placed into the expansion of `#[derive(Debug)]\n+    type Bar = Path; //~ ERROR cannot find\n+}\n+\n+fn main() {\n+    y!();\n+    let _ = A; //~ ERROR cannot find\n+    foo();\n+}\n+\n+fn foo() {\n+    type Dict<K, V> = HashMap<K, V>; //~ ERROR cannot find\n+}"}, {"sha": "ecc74d781679d5702ae193fb39b96d3bf274f678", "filename": "src/test/ui/resolve/use_suggestion_placement.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.rs?ref=d95745e5fa39680d97a52d0e07ed7842b163bacc", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n macro_rules! y {\n     () => {}\n }\n@@ -7,7 +10,11 @@ mod m {\n }\n \n mod foo {\n-    #[derive(Debug)]\n+    // FIXME: UsePlacementFinder is broken because active attributes are\n+    // removed, and thus the `derive` attribute here is not in the AST.\n+    // An inert attribute should work, though.\n+    // #[derive(Debug)]\n+    #[allow(warnings)]\n     pub struct Foo;\n \n     // test whether the use suggestion isn't"}, {"sha": "217c08a560b77f7b1f754bef703097233e96beba", "filename": "src/test/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=d95745e5fa39680d97a52d0e07ed7842b163bacc", "patch": "@@ -1,5 +1,5 @@\n error[E0412]: cannot find type `Path` in this scope\n-  --> $DIR/use_suggestion_placement.rs:15:16\n+  --> $DIR/use_suggestion_placement.rs:22:16\n    |\n LL |     type Bar = Path;\n    |                ^^^^ not found in this scope\n@@ -10,7 +10,7 @@ LL |     use std::path::Path;\n    |\n \n error[E0425]: cannot find value `A` in this scope\n-  --> $DIR/use_suggestion_placement.rs:20:13\n+  --> $DIR/use_suggestion_placement.rs:27:13\n    |\n LL |     let _ = A;\n    |             ^ not found in this scope\n@@ -21,7 +21,7 @@ LL | use m::A;\n    |\n \n error[E0412]: cannot find type `HashMap` in this scope\n-  --> $DIR/use_suggestion_placement.rs:25:23\n+  --> $DIR/use_suggestion_placement.rs:32:23\n    |\n LL |     type Dict<K, V> = HashMap<K, V>;\n    |                       ^^^^^^^ not found in this scope"}, {"sha": "afe74cff2e92d75ef3a7990df41f880796f5eac0", "filename": "src/test/ui/suggestions/use-placement-resolve.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-resolve.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-resolve.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-resolve.fixed?ref=d95745e5fa39680d97a52d0e07ed7842b163bacc", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: --test\n+// run-rustfix\n+// Checks that the `use` suggestion appears *below* this inner attribute.\n+// There was an issue where the test synthetic #[allow(dead)] attribute on\n+// main which has a dummy span caused the suggestion to be placed at the top\n+// of the file.\n+#![allow(unused)]\n+\n+use std::fmt::Debug;\n+\n+fn main() {}\n+\n+fn foobar<T: Debug>(x: T) {} //~ ERROR expected trait, found derive macro"}, {"sha": "b30ddb3af07b4f528f75899d09a7449c7546537e", "filename": "src/test/ui/suggestions/use-placement-resolve.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-resolve.rs?ref=d95745e5fa39680d97a52d0e07ed7842b163bacc", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: --test\n+// run-rustfix\n+// Checks that the `use` suggestion appears *below* this inner attribute.\n+// There was an issue where the test synthetic #[allow(dead)] attribute on\n+// main which has a dummy span caused the suggestion to be placed at the top\n+// of the file.\n+#![allow(unused)]\n+\n+fn main() {}\n+\n+fn foobar<T: Debug>(x: T) {} //~ ERROR expected trait, found derive macro"}, {"sha": "9da9e8e27021df40b0aa88bd6a88ceb6d849a26c", "filename": "src/test/ui/suggestions/use-placement-resolve.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-resolve.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-resolve.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-resolve.stderr?ref=d95745e5fa39680d97a52d0e07ed7842b163bacc", "patch": "@@ -0,0 +1,14 @@\n+error[E0404]: expected trait, found derive macro `Debug`\n+  --> $DIR/use-placement-resolve.rs:11:14\n+   |\n+LL | fn foobar<T: Debug>(x: T) {}\n+   |              ^^^^^ not a trait\n+   |\n+help: consider importing this trait instead\n+   |\n+LL | use std::fmt::Debug;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0404`."}, {"sha": "40c55d1dd06bc700221bae02f8660e78e5ffe7b0", "filename": "src/test/ui/suggestions/use-placement-typeck.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.fixed?ref=d95745e5fa39680d97a52d0e07ed7842b163bacc", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: --test\n+// run-rustfix\n+// Checks that the `use` suggestion appears *below* this inner attribute.\n+// There was an issue where the test synthetic #[allow(dead)] attribute on\n+// main which has a dummy span caused the suggestion to be placed at the top\n+// of the file.\n+#![allow(unused)]\n+\n+use m::Foo;\n+\n+fn main() {\n+    let s = m::S;\n+    s.abc(); //~ ERROR no method named `abc`\n+}\n+\n+mod m {\n+    pub trait Foo {\n+        fn abc(&self) {}\n+    }\n+    pub struct S;\n+    impl Foo for S{}\n+}"}, {"sha": "aab20d2e90a3853aabefd1bef647072faf372565", "filename": "src/test/ui/suggestions/use-placement-typeck.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.rs?ref=d95745e5fa39680d97a52d0e07ed7842b163bacc", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: --test\n+// run-rustfix\n+// Checks that the `use` suggestion appears *below* this inner attribute.\n+// There was an issue where the test synthetic #[allow(dead)] attribute on\n+// main which has a dummy span caused the suggestion to be placed at the top\n+// of the file.\n+#![allow(unused)]\n+\n+fn main() {\n+    let s = m::S;\n+    s.abc(); //~ ERROR no method named `abc`\n+}\n+\n+mod m {\n+    pub trait Foo {\n+        fn abc(&self) {}\n+    }\n+    pub struct S;\n+    impl Foo for S{}\n+}"}, {"sha": "21f22dade2c224891b33e4833de39ae8945097a2", "filename": "src/test/ui/suggestions/use-placement-typeck.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95745e5fa39680d97a52d0e07ed7842b163bacc/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr?ref=d95745e5fa39680d97a52d0e07ed7842b163bacc", "patch": "@@ -0,0 +1,21 @@\n+error[E0599]: no method named `abc` found for struct `S` in the current scope\n+  --> $DIR/use-placement-typeck.rs:11:7\n+   |\n+LL |     s.abc();\n+   |       ^^^ method not found in `S`\n+...\n+LL |         fn abc(&self) {}\n+   |            --- the method is available for `S` here\n+LL |     }\n+LL |     pub struct S;\n+   |     ------------- method `abc` not found for this\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL | use m::Foo;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}