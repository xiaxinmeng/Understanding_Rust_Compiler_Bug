{"sha": "e4927f98fa53a9d4dd466a9035f71fb1c2a5940b", "node_id": "C_kwDOAAsO6NoAKGU0OTI3Zjk4ZmE1M2E5ZDRkZDQ2NmE5MDM1ZjcxZmIxYzJhNTk0MGI", "commit": {"author": {"name": "disco07", "email": "koneenok@outlook.fr", "date": "2023-05-30T22:17:26Z"}, "committer": {"name": "disco07", "email": "koneenok@outlook.fr", "date": "2023-05-30T22:17:26Z"}, "message": "change booleans file and update tests", "tree": {"sha": "68607c8beab26c6fc01cb8f2911b76bb468753c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68607c8beab26c6fc01cb8f2911b76bb468753c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4927f98fa53a9d4dd466a9035f71fb1c2a5940b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4927f98fa53a9d4dd466a9035f71fb1c2a5940b", "html_url": "https://github.com/rust-lang/rust/commit/e4927f98fa53a9d4dd466a9035f71fb1c2a5940b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4927f98fa53a9d4dd466a9035f71fb1c2a5940b/comments", "author": {"login": "disco07", "id": 60718751, "node_id": "MDQ6VXNlcjYwNzE4NzUx", "avatar_url": "https://avatars.githubusercontent.com/u/60718751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/disco07", "html_url": "https://github.com/disco07", "followers_url": "https://api.github.com/users/disco07/followers", "following_url": "https://api.github.com/users/disco07/following{/other_user}", "gists_url": "https://api.github.com/users/disco07/gists{/gist_id}", "starred_url": "https://api.github.com/users/disco07/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/disco07/subscriptions", "organizations_url": "https://api.github.com/users/disco07/orgs", "repos_url": "https://api.github.com/users/disco07/repos", "events_url": "https://api.github.com/users/disco07/events{/privacy}", "received_events_url": "https://api.github.com/users/disco07/received_events", "type": "User", "site_admin": false}, "committer": {"login": "disco07", "id": 60718751, "node_id": "MDQ6VXNlcjYwNzE4NzUx", "avatar_url": "https://avatars.githubusercontent.com/u/60718751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/disco07", "html_url": "https://github.com/disco07", "followers_url": "https://api.github.com/users/disco07/followers", "following_url": "https://api.github.com/users/disco07/following{/other_user}", "gists_url": "https://api.github.com/users/disco07/gists{/gist_id}", "starred_url": "https://api.github.com/users/disco07/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/disco07/subscriptions", "organizations_url": "https://api.github.com/users/disco07/orgs", "repos_url": "https://api.github.com/users/disco07/repos", "events_url": "https://api.github.com/users/disco07/events{/privacy}", "received_events_url": "https://api.github.com/users/disco07/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3534a65215dc8b0d071baf7208471f2296fc8a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3534a65215dc8b0d071baf7208471f2296fc8a7", "html_url": "https://github.com/rust-lang/rust/commit/d3534a65215dc8b0d071baf7208471f2296fc8a7"}], "stats": {"total": 60, "additions": 20, "deletions": 40}, "files": [{"sha": "ff0102255a0a9831bd9d24022300ddd0ad46e017", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e4927f98fa53a9d4dd466a9035f71fb1c2a5940b/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4927f98fa53a9d4dd466a9035f71fb1c2a5940b/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=e4927f98fa53a9d4dd466a9035f71fb1c2a5940b", "patch": "@@ -8,12 +8,10 @@ use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, UnOp};\n use rustc_lint::{LateContext, LateLintPass, Level};\n-use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n-use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -90,28 +88,6 @@ impl<'tcx> LateLintPass<'tcx> for NonminimalBool {\n         NonminimalBoolVisitor { cx }.visit_body(body);\n     }\n }\n-\n-fn is_impl_not_trait_with_bool_out<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n-    cx.tcx\n-        .lang_items()\n-        .not_trait()\n-        .filter(|trait_id| implements_trait(cx, ty, *trait_id, &[]))\n-        .and_then(|trait_id| {\n-            cx.tcx.associated_items(trait_id).find_by_name_and_kind(\n-                cx.tcx,\n-                Ident::from_str(\"Output\"),\n-                ty::AssocKind::Type,\n-                trait_id,\n-            )\n-        })\n-        .map_or(false, |assoc_item| {\n-            let proj = cx.tcx.mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(ty, []));\n-            let nty = cx.tcx.normalize_erasing_regions(cx.param_env, proj);\n-\n-            nty.is_bool()\n-        })\n-}\n-\n struct NonminimalBoolVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n }\n@@ -496,11 +472,9 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n                     self.bool_expr(e);\n                 },\n                 ExprKind::Unary(UnOp::Not, inner) => {\n-                    if let ExprKind::Unary(UnOp::Not, ex) = inner.kind {\n-                        let ty = self.cx.typeck_results().expr_ty(ex);\n-                        if is_impl_not_trait_with_bool_out(self.cx, ty) {\n-                            return;\n-                        }\n+                    if let ExprKind::Unary(UnOp::Not, ex) = inner.kind &&\n+                    !self.cx.typeck_results().node_types()[ex.hir_id].is_bool() {\n+                        return;\n                     }\n                     if self.cx.typeck_results().node_types()[inner.hir_id].is_bool() {\n                         self.bool_expr(e);"}, {"sha": "fec6b7713eef8682f430b9d0591e025228a88e96", "filename": "tests/ui/nonminimal_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4927f98fa53a9d4dd466a9035f71fb1c2a5940b/tests%2Fui%2Fnonminimal_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4927f98fa53a9d4dd466a9035f71fb1c2a5940b/tests%2Fui%2Fnonminimal_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.rs?ref=e4927f98fa53a9d4dd466a9035f71fb1c2a5940b", "patch": "@@ -10,7 +10,6 @@ fn main() {\n     let e: bool = unimplemented!();\n     let _ = !true;\n     let _ = !false;\n-    // vvv Should not lint\n     let _ = !!a;\n     let _ = false || a;\n     // don't lint on cfgs\n@@ -55,6 +54,7 @@ fn issue4548() {\n \n fn check_expect() {\n     let a: bool = unimplemented!();\n+    #[expect(clippy::nonminimal_bool)]\n     let _ = !!a;\n }\n "}, {"sha": "91b5805aa97ab8f6b4c243c81bc840b1a4b3bb22", "filename": "tests/ui/nonminimal_bool.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e4927f98fa53a9d4dd466a9035f71fb1c2a5940b/tests%2Fui%2Fnonminimal_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4927f98fa53a9d4dd466a9035f71fb1c2a5940b/tests%2Fui%2Fnonminimal_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.stderr?ref=e4927f98fa53a9d4dd466a9035f71fb1c2a5940b", "patch": "@@ -13,31 +13,37 @@ LL |     let _ = !false;\n    |             ^^^^^^ help: try: `true`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:15:13\n+  --> $DIR/nonminimal_bool.rs:13:13\n+   |\n+LL |     let _ = !!a;\n+   |             ^^^ help: try: `a`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/nonminimal_bool.rs:14:13\n    |\n LL |     let _ = false || a;\n    |             ^^^^^^^^^^ help: try: `a`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:19:13\n+  --> $DIR/nonminimal_bool.rs:18:13\n    |\n LL |     let _ = !(!a && b);\n    |             ^^^^^^^^^^ help: try: `a || !b`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:20:13\n+  --> $DIR/nonminimal_bool.rs:19:13\n    |\n LL |     let _ = !(!a || b);\n    |             ^^^^^^^^^^ help: try: `a && !b`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:21:13\n+  --> $DIR/nonminimal_bool.rs:20:13\n    |\n LL |     let _ = !a && !(b && c);\n    |             ^^^^^^^^^^^^^^^ help: try: `!(a || b && c)`\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:29:13\n+  --> $DIR/nonminimal_bool.rs:28:13\n    |\n LL |     let _ = a == b && c == 5 && a == b;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -50,7 +56,7 @@ LL |     let _ = a == b && c == 5;\n    |             ~~~~~~~~~~~~~~~~\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:30:13\n+  --> $DIR/nonminimal_bool.rs:29:13\n    |\n LL |     let _ = a == b || c == 5 || a == b;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -63,7 +69,7 @@ LL |     let _ = a == b || c == 5;\n    |             ~~~~~~~~~~~~~~~~\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:31:13\n+  --> $DIR/nonminimal_bool.rs:30:13\n    |\n LL |     let _ = a == b && c == 5 && b == a;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -76,7 +82,7 @@ LL |     let _ = a == b && c == 5;\n    |             ~~~~~~~~~~~~~~~~\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:32:13\n+  --> $DIR/nonminimal_bool.rs:31:13\n    |\n LL |     let _ = a != b || !(a != b || c == d);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -89,7 +95,7 @@ LL |     let _ = a != b || c != d;\n    |             ~~~~~~~~~~~~~~~~\n \n error: this boolean expression can be simplified\n-  --> $DIR/nonminimal_bool.rs:33:13\n+  --> $DIR/nonminimal_bool.rs:32:13\n    |\n LL |     let _ = a != b && !(a != b && c == d);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -107,5 +113,5 @@ error: this boolean expression can be simplified\n LL |     if matches!(true, true) && true {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `matches!(true, true)`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}]}