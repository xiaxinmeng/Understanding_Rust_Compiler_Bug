{"sha": "4d6e2d81b8fbff97e428526fd3c3b662270f2475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNmUyZDgxYjhmYmZmOTdlNDI4NTI2ZmQzYzNiNjYyMjcwZjI0NzU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-04T20:51:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-04T20:51:52Z"}, "message": "Rollup merge of #68805 - matthiaskrgr:cleanup_bootstrap, r=Mark-Simulacrum\n\nbootstrap: fix clippy warnings\n\nr? @oli-obk", "tree": {"sha": "3214123d172c441f8d1cf3a2243b3e88482e2dc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3214123d172c441f8d1cf3a2243b3e88482e2dc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d6e2d81b8fbff97e428526fd3c3b662270f2475", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeOdloCRBK7hj4Ov3rIwAAdHIIAK8pamHp1NKGihxiLIyUNWwR\nwM971dh74NLnQv683ZBM9orQiXGOwqcxcDJZxUy3EtbnUah3se55RLTN/UVJ6PSl\n0kuGP1T4GzR0KVVTMN1Q5TsYnftW0xTRuncoClKbZw0iI0Yypnl03xLn51R8xZIt\nnLMvkQa3lnGymE+sVUFdtjI6/H8zQkEjvWkcO2h86lFROZP3GuExgabNN9cHe3jc\nUG+3iXWSCNewqYRfeabmqRIpNlOU1JO0PwEQx06HHJI84s+3YyM3XbxzW+lmrov2\nL9EC/KcJN3AwBAf9/JLhnpl79TTw/o4KzJeEevwTqlg5YXqY3+MaoavHiORYfVY=\n=nABX\n-----END PGP SIGNATURE-----\n", "payload": "tree 3214123d172c441f8d1cf3a2243b3e88482e2dc5\nparent 48ea0fa416077e89f036c5081020730a7743df88\nparent 5f979e9afab42dd7536ca93994de66169880361e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1580849512 +0100\ncommitter GitHub <noreply@github.com> 1580849512 +0100\n\nRollup merge of #68805 - matthiaskrgr:cleanup_bootstrap, r=Mark-Simulacrum\n\nbootstrap: fix clippy warnings\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6e2d81b8fbff97e428526fd3c3b662270f2475", "html_url": "https://github.com/rust-lang/rust/commit/4d6e2d81b8fbff97e428526fd3c3b662270f2475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d6e2d81b8fbff97e428526fd3c3b662270f2475/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48ea0fa416077e89f036c5081020730a7743df88", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ea0fa416077e89f036c5081020730a7743df88", "html_url": "https://github.com/rust-lang/rust/commit/48ea0fa416077e89f036c5081020730a7743df88"}, {"sha": "5f979e9afab42dd7536ca93994de66169880361e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f979e9afab42dd7536ca93994de66169880361e", "html_url": "https://github.com/rust-lang/rust/commit/5f979e9afab42dd7536ca93994de66169880361e"}], "stats": {"total": 97, "additions": 40, "deletions": 57}, "files": [{"sha": "a8c00c8c3ca88368764e4d5cb22068f9057671fc", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -47,7 +47,7 @@ fn main() {\n     };\n     let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n-    let on_fail = env::var_os(\"RUSTC_ON_FAIL\").map(|of| Command::new(of));\n+    let on_fail = env::var_os(\"RUSTC_ON_FAIL\").map(Command::new);\n \n     let rustc = env::var_os(rustc).unwrap_or_else(|| panic!(\"{:?} was not set\", rustc));\n     let libdir = env::var_os(libdir).unwrap_or_else(|| panic!(\"{:?} was not set\", libdir));\n@@ -64,7 +64,7 @@ fn main() {\n     if let Some(crate_name) = crate_name {\n         if let Some(target) = env::var_os(\"RUSTC_TIME\") {\n             if target == \"all\"\n-                || target.into_string().unwrap().split(\",\").any(|c| c.trim() == crate_name)\n+                || target.into_string().unwrap().split(',').any(|c| c.trim() == crate_name)\n             {\n                 cmd.arg(\"-Ztime\");\n             }\n@@ -189,7 +189,7 @@ fn main() {\n                 crate_name,\n                 is_test,\n                 dur.as_secs(),\n-                dur.subsec_nanos() / 1_000_000\n+                dur.subsec_millis()\n             );\n \n             match status.code() {"}, {"sha": "04345867bf5c185e21155a195f48665710adfe8b", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -61,7 +61,7 @@ fn main() {\n     }\n \n     // Needed to be able to run all rustdoc tests.\n-    if let Some(_) = env::var_os(\"RUSTDOC_GENERATE_REDIRECT_PAGES\") {\n+    if env::var_os(\"RUSTDOC_GENERATE_REDIRECT_PAGES\").is_some() {\n         // This \"unstable-options\" can be removed when `--generate-redirect-pages` is stabilized\n         if !has_unstable {\n             cmd.arg(\"-Z\").arg(\"unstable-options\");"}, {"sha": "18f6fda760846ac4f2d949a74543d9d66820abc8", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -510,17 +510,15 @@ impl<'a> Builder<'a> {\n             Subcommand::Format { .. } | Subcommand::Clean { .. } => panic!(),\n         };\n \n-        let builder = Builder {\n+        Builder {\n             build,\n             top_stage: build.config.stage.unwrap_or(2),\n             kind,\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),\n             time_spent_on_dependencies: Cell::new(Duration::new(0, 0)),\n             paths: paths.to_owned(),\n-        };\n-\n-        builder\n+        }\n     }\n \n     pub fn execute_cli(&self) {\n@@ -753,13 +751,12 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUST_CHECK\", \"1\");\n         }\n \n-        let stage;\n-        if compiler.stage == 0 && self.local_rebuild {\n+        let stage = if compiler.stage == 0 && self.local_rebuild {\n             // Assume the local-rebuild rustc already has stage1 features.\n-            stage = 1;\n+            1\n         } else {\n-            stage = compiler.stage;\n-        }\n+            compiler.stage\n+        };\n \n         let mut rustflags = Rustflags::new(&target);\n         if stage != 0 {\n@@ -1252,12 +1249,7 @@ impl<'a> Builder<'a> {\n         };\n \n         if self.config.print_step_timings && dur > Duration::from_millis(100) {\n-            println!(\n-                \"[TIMING] {:?} -- {}.{:03}\",\n-                step,\n-                dur.as_secs(),\n-                dur.subsec_nanos() / 1_000_000\n-            );\n+            println!(\"[TIMING] {:?} -- {}.{:03}\", step, dur.as_secs(), dur.subsec_millis());\n         }\n \n         {\n@@ -1302,7 +1294,7 @@ impl Rustflags {\n \n     fn arg(&mut self, arg: &str) -> &mut Self {\n         assert_eq!(arg.split_whitespace().count(), 1);\n-        if self.0.len() > 0 {\n+        if !self.0.is_empty() {\n             self.0.push_str(\" \");\n         }\n         self.0.push_str(arg);"}, {"sha": "cca8ab80c93b1d329cf3f4bb9f92b4998b1461dd", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -19,7 +19,6 @@ fn configure(host: &[&str], target: &[&str]) -> Config {\n     config.out = dir;\n     config.build = INTERNER.intern_str(\"A\");\n     config.hosts = vec![config.build]\n-        .clone()\n         .into_iter()\n         .chain(host.iter().map(|s| INTERNER.intern_str(s)))\n         .collect::<Vec<_>>();"}, {"sha": "7dded96e18efde448effb85f955c42128f61a0ea", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -18,7 +18,6 @@ use std::str;\n use build_helper::{output, t, up_to_date};\n use filetime::FileTime;\n use serde::Deserialize;\n-use serde_json;\n \n use crate::builder::Cargo;\n use crate::dist;\n@@ -149,7 +148,8 @@ fn copy_third_party_objects(\n     // which is provided by std for this target.\n     if target == \"x86_64-fortanix-unknown-sgx\" {\n         let src_path_env = \"X86_FORTANIX_SGX_LIBS\";\n-        let src = env::var(src_path_env).expect(&format!(\"{} not found in env\", src_path_env));\n+        let src =\n+            env::var(src_path_env).unwrap_or_else(|_| panic!(\"{} not found in env\", src_path_env));\n         copy_and_stamp(Path::new(&src), \"libunwind.a\");\n     }\n \n@@ -361,7 +361,7 @@ impl Step for StartupObjects {\n                 );\n             }\n \n-            let target = sysroot_dir.join(file.to_string() + \".o\");\n+            let target = sysroot_dir.join((*file).to_string() + \".o\");\n             builder.copy(dst_file, &target);\n             target_deps.push(target);\n         }\n@@ -515,7 +515,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: Interne\n         .env(\"CFG_VERSION\", builder.rust_version())\n         .env(\"CFG_PREFIX\", builder.config.prefix.clone().unwrap_or_default());\n \n-    let libdir_relative = builder.config.libdir_relative().unwrap_or(Path::new(\"lib\"));\n+    let libdir_relative = builder.config.libdir_relative().unwrap_or_else(|| Path::new(\"lib\"));\n     cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n \n     if let Some(ref ver_date) = builder.rust_info.commit_date() {\n@@ -843,11 +843,11 @@ pub fn run_cargo(\n         };\n         for filename in filenames {\n             // Skip files like executables\n-            if !filename.ends_with(\".rlib\")\n-                && !filename.ends_with(\".lib\")\n-                && !filename.ends_with(\".a\")\n-                && !is_dylib(&filename)\n-                && !(is_check && filename.ends_with(\".rmeta\"))\n+            if !(filename.ends_with(\".rlib\")\n+                || filename.ends_with(\".lib\")\n+                || filename.ends_with(\".a\")\n+                || is_dylib(&filename)\n+                || (is_check && filename.ends_with(\".rmeta\")))\n             {\n                 continue;\n             }\n@@ -905,7 +905,7 @@ pub fn run_cargo(\n     for (prefix, extension, expected_len) in toplevel {\n         let candidates = contents.iter().filter(|&&(_, ref filename, ref meta)| {\n             filename.starts_with(&prefix[..])\n-                && filename[prefix.len()..].starts_with(\"-\")\n+                && filename[prefix.len()..].starts_with('-')\n                 && filename.ends_with(&extension[..])\n                 && meta.len() == expected_len\n         });"}, {"sha": "709cf2908eadf7783acef0849509ba98219e4f67", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -16,7 +16,6 @@ use crate::flags::Flags;\n pub use crate::flags::Subcommand;\n use build_helper::t;\n use serde::Deserialize;\n-use toml;\n \n /// Global configuration for the entire build and/or bootstrap.\n ///\n@@ -440,7 +439,7 @@ impl Config {\n                     }\n                 }\n             })\n-            .unwrap_or_else(|| TomlConfig::default());\n+            .unwrap_or_else(TomlConfig::default);\n \n         let build = toml.build.clone().unwrap_or_default();\n         // set by bootstrap.py\n@@ -539,7 +538,7 @@ impl Config {\n             config.llvm_ldflags = llvm.ldflags.clone();\n             set(&mut config.llvm_use_libcxx, llvm.use_libcxx);\n             config.llvm_use_linker = llvm.use_linker.clone();\n-            config.llvm_allow_old_toolchain = llvm.allow_old_toolchain.clone();\n+            config.llvm_allow_old_toolchain = llvm.allow_old_toolchain;\n         }\n \n         if let Some(ref rust) = toml.rust {\n@@ -606,7 +605,7 @@ impl Config {\n                 target.ar = cfg.ar.clone().map(PathBuf::from);\n                 target.ranlib = cfg.ranlib.clone().map(PathBuf::from);\n                 target.linker = cfg.linker.clone().map(PathBuf::from);\n-                target.crt_static = cfg.crt_static.clone();\n+                target.crt_static = cfg.crt_static;\n                 target.musl_root = cfg.musl_root.clone().map(PathBuf::from);\n                 target.wasi_root = cfg.wasi_root.clone().map(PathBuf::from);\n                 target.qemu_rootfs = cfg.qemu_rootfs.clone().map(PathBuf::from);"}, {"sha": "8003d8906e8247b4dd60bd5b07918922a26cddf1", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -828,7 +828,7 @@ impl Step for Analysis {\n         assert!(builder.config.extended);\n         let name = pkgname(builder, \"rust-analysis\");\n \n-        if &compiler.host != builder.config.build {\n+        if compiler.host != builder.config.build {\n             return distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target));\n         }\n \n@@ -877,7 +877,7 @@ fn copy_src_dirs(builder: &Builder<'_>, src_dirs: &[&str], exclude_dirs: &[&str]\n             Some(path) => path,\n             None => return false,\n         };\n-        if spath.ends_with(\"~\") || spath.ends_with(\".pyc\") {\n+        if spath.ends_with('~') || spath.ends_with(\".pyc\") {\n             return false;\n         }\n "}, {"sha": "b0d9a5b94641cf68aa9eb299b9dd3fe67e8d49cf", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -560,7 +560,7 @@ impl Step for Rustdoc {\n         builder.ensure(Rustc { stage, target });\n \n         // Build rustdoc.\n-        builder.ensure(tool::Rustdoc { compiler: compiler });\n+        builder.ensure(tool::Rustdoc { compiler });\n \n         // Symlink compiler docs to the output directory of rustdoc documentation.\n         let out_dir = builder.stage_out(compiler, Mode::ToolRustc).join(target).join(\"doc\");"}, {"sha": "516be6a30c235125e546239742d7bb73e56affc4", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -571,7 +571,7 @@ fn split(s: &[String]) -> Vec<String> {\n }\n \n fn parse_deny_warnings(matches: &getopts::Matches) -> Option<bool> {\n-    match matches.opt_str(\"warnings\").as_ref().map(|v| v.as_str()) {\n+    match matches.opt_str(\"warnings\").as_deref() {\n         Some(\"deny\") => Some(true),\n         Some(\"warn\") => Some(false),\n         Some(value) => {"}, {"sha": "6549262811b9f32a79f88186ec205cbf3716b9ce", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -126,9 +126,8 @@ fn add_destdir(path: &Path, destdir: &Option<PathBuf>) -> PathBuf {\n         None => return path.to_path_buf(),\n     };\n     for part in path.components() {\n-        match part {\n-            Component::Normal(s) => ret.push(s),\n-            _ => {}\n+        if let Component::Normal(s) = part {\n+            ret.push(s)\n         }\n     }\n     ret"}, {"sha": "0db4fb38901002b6344a922266d3f4aa2a00c299", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -444,7 +444,7 @@ impl Build {\n             builder.execute_cli();\n         } else {\n             let builder = builder::Builder::new(&self);\n-            let _ = builder.execute_cli();\n+            builder.execute_cli();\n         }\n \n         // Check for postponed failures from `test --no-fail-fast`.\n@@ -839,7 +839,7 @@ impl Build {\n             .target_config\n             .get(&target)\n             .and_then(|t| t.musl_root.as_ref())\n-            .or(self.config.musl_root.as_ref())\n+            .or_else(|| self.config.musl_root.as_ref())\n             .map(|p| &**p)\n     }\n "}, {"sha": "292aa3b1e24a73e7eddcfba383cf154280e62378", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -5,7 +5,6 @@ use std::process::Command;\n \n use build_helper::output;\n use serde::Deserialize;\n-use serde_json;\n \n use crate::cache::INTERNER;\n use crate::{Build, Crate};"}, {"sha": "1cfb4b2f63b5764639fea4b8d73e80e084fe86ae", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -15,8 +15,6 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use build_helper::{output, t};\n-use cc;\n-use cmake;\n \n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n@@ -205,7 +203,7 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_ENABLE_LIBXML2\", \"OFF\");\n         }\n \n-        if enabled_llvm_projects.len() > 0 {\n+        if !enabled_llvm_projects.is_empty() {\n             enabled_llvm_projects.sort();\n             enabled_llvm_projects.dedup();\n             cfg.define(\"LLVM_ENABLE_PROJECTS\", enabled_llvm_projects.join(\";\"));"}, {"sha": "8d9e62010015bfddb21b247789ad510637ebf8db", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -1424,13 +1424,10 @@ impl Step for ErrorIndex {\n }\n \n fn markdown_test(builder: &Builder<'_>, compiler: Compiler, markdown: &Path) -> bool {\n-    match fs::read_to_string(markdown) {\n-        Ok(contents) => {\n-            if !contents.contains(\"```\") {\n-                return true;\n-            }\n+    if let Ok(contents) = fs::read_to_string(markdown) {\n+        if !contents.contains(\"```\") {\n+            return true;\n         }\n-        Err(_) => {}\n     }\n \n     builder.info(&format!(\"doc tests for: {}\", markdown.display()));"}, {"sha": "67e0ed5c58029df2e34414e6595430af62e01303", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -234,7 +234,7 @@ pub fn prepare_tool_cargo(\n         cargo.env(\"RUSTC_EXTERNAL_TOOL\", \"1\");\n     }\n \n-    let mut features = extra_features.iter().cloned().collect::<Vec<_>>();\n+    let mut features = extra_features.to_vec();\n     if builder.build.config.cargo_native_static {\n         if path.ends_with(\"cargo\")\n             || path.ends_with(\"rls\")"}, {"sha": "bb012a38855117e741a9810da13763d8d5ce0c8f", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -124,7 +124,7 @@ fn check_changed_files(toolstates: &HashMap<Box<str>, ToolState>) {\n     let output = t!(String::from_utf8(output.stdout));\n \n     for (tool, submodule) in STABLE_TOOLS.iter().chain(NIGHTLY_TOOLS.iter()) {\n-        let changed = output.lines().any(|l| l.starts_with(\"M\") && l.ends_with(submodule));\n+        let changed = output.lines().any(|l| l.starts_with('M') && l.ends_with(submodule));\n         eprintln!(\"Verifying status of {}...\", tool);\n         if !changed {\n             continue;"}, {"sha": "eac790fe504b8e1f9a84fdbde31b232d02bb4c2a", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d6e2d81b8fbff97e428526fd3c3b662270f2475/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=4d6e2d81b8fbff97e428526fd3c3b662270f2475", "patch": "@@ -98,7 +98,7 @@ impl Drop for TimeIt {\n     fn drop(&mut self) {\n         let time = self.1.elapsed();\n         if !self.0 {\n-            println!(\"\\tfinished in {}.{:03}\", time.as_secs(), time.subsec_nanos() / 1_000_000);\n+            println!(\"\\tfinished in {}.{:03}\", time.as_secs(), time.subsec_millis());\n         }\n     }\n }"}]}