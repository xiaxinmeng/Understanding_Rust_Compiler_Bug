{"sha": "4368771548782d0c28748353e65636782ff0b25e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNjg3NzE1NDg3ODJkMGMyODc0ODM1M2U2NTYzNjc4MmZmMGIyNWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T11:38:17Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T21:45:18Z"}, "message": "map_entry test: Fix semicolon, add run-rustfix", "tree": {"sha": "18a70f1aa3de3a239e58c2e823582ce0d9e5fb91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a70f1aa3de3a239e58c2e823582ce0d9e5fb91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4368771548782d0c28748353e65636782ff0b25e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4368771548782d0c28748353e65636782ff0b25e", "html_url": "https://github.com/rust-lang/rust/commit/4368771548782d0c28748353e65636782ff0b25e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4368771548782d0c28748353e65636782ff0b25e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f4b6066132f48b026cc9b7947c1eb45a3d825d", "html_url": "https://github.com/rust-lang/rust/commit/e2f4b6066132f48b026cc9b7947c1eb45a3d825d"}], "stats": {"total": 101, "additions": 34, "deletions": 67}, "files": [{"sha": "c0eba516dee053e9bc0aa640752bf89621757207", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4368771548782d0c28748353e65636782ff0b25e/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4368771548782d0c28748353e65636782ff0b25e/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=4368771548782d0c28748353e65636782ff0b25e", "patch": "@@ -65,6 +65,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapPass {\n                             } else {\n                                 true\n                             }\n+                        // XXXManishearth we can also check for if/else blocks containing `None`.\n                     };\n \n                     let mut visitor = InsertVisitor {\n@@ -147,7 +148,7 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                                    &format!(\"usage of `contains_key` followed by `insert` on a `{}`\", self.ty), |db| {\n                     if self.sole_expr {\n                         let mut app = Applicability::MachineApplicable;\n-                        let help = format!(\"{}.entry({}).or_insert({})\",\n+                        let help = format!(\"{}.entry({}).or_insert({});\",\n                                            snippet_with_applicability(self.cx, self.map.span, \"map\", &mut app),\n                                            snippet_with_applicability(self.cx, params[1].span, \"..\", &mut app),\n                                            snippet_with_applicability(self.cx, params[2].span, \"..\", &mut app));\n@@ -164,7 +165,7 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                                            snippet(self.cx, self.map.span, \"map\"),\n                                            snippet(self.cx, params[1].span, \"..\"));\n \n-                        db.span_help(\n+                        db.span_label(\n                             self.span,\n                             &help,\n                         );"}, {"sha": "dcdaae7e72430494a3224bb9f0312ab07e90f274", "filename": "tests/ui/entry_fixable.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4368771548782d0c28748353e65636782ff0b25e/tests%2Fui%2Fentry_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4368771548782d0c28748353e65636782ff0b25e/tests%2Fui%2Fentry_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_fixable.fixed?ref=4368771548782d0c28748353e65636782ff0b25e", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::needless_pass_by_value)]\n+#![warn(clippy::map_entry)]\n+\n+use std::collections::{BTreeMap, HashMap};\n+use std::hash::Hash;\n+\n+fn foo() {}\n+\n+fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n+    m.entry(k).or_insert(v);\n+}\n+\n+fn main() {}"}, {"sha": "55d5b21568d0e03223089aad2e5990a3a104d9eb", "filename": "tests/ui/entry_fixable.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4368771548782d0c28748353e65636782ff0b25e/tests%2Fui%2Fentry_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4368771548782d0c28748353e65636782ff0b25e/tests%2Fui%2Fentry_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_fixable.rs?ref=4368771548782d0c28748353e65636782ff0b25e", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![allow(unused, clippy::needless_pass_by_value)]\n #![warn(clippy::map_entry)]\n \n@@ -12,10 +14,4 @@ fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     }\n }\n \n-fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {\n-    if !m.contains_key(&k) {\n-        m.insert(o, v);\n-    }\n-}\n-\n fn main() {}"}, {"sha": "87403200ced5008788562ebe66b8c6c2ea918129", "filename": "tests/ui/entry_fixable.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4368771548782d0c28748353e65636782ff0b25e/tests%2Fui%2Fentry_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4368771548782d0c28748353e65636782ff0b25e/tests%2Fui%2Fentry_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_fixable.stderr?ref=4368771548782d0c28748353e65636782ff0b25e", "patch": "@@ -1,10 +1,10 @@\n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry_fixable.rs:10:5\n+  --> $DIR/entry_fixable.rs:12:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         m.insert(k, v);\n LL | |     }\n-   | |_____^ help: consider using: `m.entry(k).or_insert(v)`\n+   | |_____^ help: consider using: `m.entry(k).or_insert(v);`\n    |\n    = note: `-D clippy::map-entry` implied by `-D warnings`\n "}, {"sha": "f530fc023cfbf920f46b98cacb2847966234c6c8", "filename": "tests/ui/entry_unfixable.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4368771548782d0c28748353e65636782ff0b25e/tests%2Fui%2Fentry_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4368771548782d0c28748353e65636782ff0b25e/tests%2Fui%2Fentry_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_unfixable.rs?ref=4368771548782d0c28748353e65636782ff0b25e", "patch": "@@ -49,6 +49,13 @@ fn insert_in_btreemap<K: Ord, V>(m: &mut BTreeMap<K, V>, k: K, v: V) {\n     };\n }\n \n+// should not trigger\n+fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {\n+    if !m.contains_key(&k) {\n+        m.insert(o, v);\n+    }\n+}\n+\n // should not trigger, because the one uses different HashMap from another one\n fn insert_from_different_map<K: Eq + Hash, V>(m: HashMap<K, V>, n: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) {"}, {"sha": "e58c8d22dc45e2bc6303f3afeb8dd813ded7c42f", "filename": "tests/ui/entry_unfixable.stderr", "status": "modified", "additions": 5, "deletions": 57, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4368771548782d0c28748353e65636782ff0b25e/tests%2Fui%2Fentry_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4368771548782d0c28748353e65636782ff0b25e/tests%2Fui%2Fentry_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_unfixable.stderr?ref=4368771548782d0c28748353e65636782ff0b25e", "patch": "@@ -6,18 +6,9 @@ LL | |         m.insert(k, v)\n LL | |     } else {\n LL | |         None\n LL | |     };\n-   | |_____^\n+   | |_____^ consider using `m.entry(k)`\n    |\n    = note: `-D clippy::map-entry` implied by `-D warnings`\n-help: consider using `m.entry(k)`\n-  --> $DIR/entry_unfixable.rs:10:5\n-   |\n-LL | /     if !m.contains_key(&k) {\n-LL | |         m.insert(k, v)\n-LL | |     } else {\n-LL | |         None\n-LL | |     };\n-   | |_____^\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry_unfixable.rs:18:5\n@@ -27,17 +18,7 @@ LL | |         None\n LL | |     } else {\n LL | |         m.insert(k, v)\n LL | |     };\n-   | |_____^\n-   |\n-help: consider using `m.entry(k)`\n-  --> $DIR/entry_unfixable.rs:18:5\n-   |\n-LL | /     if m.contains_key(&k) {\n-LL | |         None\n-LL | |     } else {\n-LL | |         m.insert(k, v)\n-LL | |     };\n-   | |_____^\n+   | |_____^ consider using `m.entry(k)`\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry_unfixable.rs:26:5\n@@ -48,18 +29,7 @@ LL | |         m.insert(k, v)\n LL | |     } else {\n LL | |         None\n LL | |     };\n-   | |_____^\n-   |\n-help: consider using `m.entry(k)`\n-  --> $DIR/entry_unfixable.rs:26:5\n-   |\n-LL | /     if !m.contains_key(&k) {\n-LL | |         foo();\n-LL | |         m.insert(k, v)\n-LL | |     } else {\n-LL | |         None\n-LL | |     };\n-   | |_____^\n+   | |_____^ consider using `m.entry(k)`\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n   --> $DIR/entry_unfixable.rs:35:5\n@@ -70,18 +40,7 @@ LL | |     } else {\n LL | |         foo();\n LL | |         m.insert(k, v)\n LL | |     };\n-   | |_____^\n-   |\n-help: consider using `m.entry(k)`\n-  --> $DIR/entry_unfixable.rs:35:5\n-   |\n-LL | /     if m.contains_key(&k) {\n-LL | |         None\n-LL | |     } else {\n-LL | |         foo();\n-LL | |         m.insert(k, v)\n-LL | |     };\n-   | |_____^\n+   | |_____^ consider using `m.entry(k)`\n \n error: usage of `contains_key` followed by `insert` on a `BTreeMap`\n   --> $DIR/entry_unfixable.rs:44:5\n@@ -92,18 +51,7 @@ LL | |         m.insert(k, v)\n LL | |     } else {\n LL | |         None\n LL | |     };\n-   | |_____^\n-   |\n-help: consider using `m.entry(k)`\n-  --> $DIR/entry_unfixable.rs:44:5\n-   |\n-LL | /     if !m.contains_key(&k) {\n-LL | |         foo();\n-LL | |         m.insert(k, v)\n-LL | |     } else {\n-LL | |         None\n-LL | |     };\n-   | |_____^\n+   | |_____^ consider using `m.entry(k)`\n \n error: aborting due to 5 previous errors\n "}]}