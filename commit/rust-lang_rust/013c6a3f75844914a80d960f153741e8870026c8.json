{"sha": "013c6a3f75844914a80d960f153741e8870026c8", "node_id": "C_kwDOAAsO6NoAKDAxM2M2YTNmNzU4NDQ5MTRhODBkOTYwZjE1Mzc0MWU4ODcwMDI2Yzg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-18T22:37:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-18T22:37:37Z"}, "message": "fix: attribute macros not being properly diagnosed", "tree": {"sha": "81d271ca95aa4bfdc30df545b92c536b82eaeff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81d271ca95aa4bfdc30df545b92c536b82eaeff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/013c6a3f75844914a80d960f153741e8870026c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/013c6a3f75844914a80d960f153741e8870026c8", "html_url": "https://github.com/rust-lang/rust/commit/013c6a3f75844914a80d960f153741e8870026c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/013c6a3f75844914a80d960f153741e8870026c8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "817f46bc6c36e5754eaf7f2ae4a8e96a1990291e", "url": "https://api.github.com/repos/rust-lang/rust/commits/817f46bc6c36e5754eaf7f2ae4a8e96a1990291e", "html_url": "https://github.com/rust-lang/rust/commit/817f46bc6c36e5754eaf7f2ae4a8e96a1990291e"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "1f095846b1c809d0972db21df728e925d2d4b488", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/013c6a3f75844914a80d960f153741e8870026c8/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/013c6a3f75844914a80d960f153741e8870026c8/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=013c6a3f75844914a80d960f153741e8870026c8", "patch": "@@ -436,6 +436,17 @@ impl DefCollector<'_> {\n         let mut unresolved_macros = mem::take(&mut self.unresolved_macros);\n         let pos = unresolved_macros.iter().position(|directive| {\n             if let MacroDirectiveKind::Attr { ast_id, mod_item, attr, tree } = &directive.kind {\n+                self.def_map.diagnostics.push(DefDiagnostic::unresolved_proc_macro(\n+                    directive.module_id,\n+                    MacroCallKind::Attr {\n+                        ast_id: ast_id.ast_id,\n+                        attr_args: Default::default(),\n+                        invoc_attr_index: attr.id.ast_index,\n+                        is_derive: false,\n+                    },\n+                    None,\n+                ));\n+\n                 self.skip_attrs.insert(ast_id.ast_id.with_value(*mod_item), attr.id);\n \n                 let item_tree = tree.item_tree(self.db);\n@@ -1135,19 +1146,7 @@ impl DefCollector<'_> {\n \n                     let def = match resolver(path.clone()) {\n                         Some(def) if def.is_attribute() => def,\n-                        _ => {\n-                            self.def_map.diagnostics.push(DefDiagnostic::unresolved_proc_macro(\n-                                directive.module_id,\n-                                MacroCallKind::Attr {\n-                                    ast_id,\n-                                    attr_args: Default::default(),\n-                                    invoc_attr_index: attr.id.ast_index,\n-                                    is_derive: false,\n-                                },\n-                                None,\n-                            ));\n-                            return true;\n-                        }\n+                        _ => return true,\n                     };\n                     if matches!(\n                         def,\n@@ -1389,9 +1388,8 @@ impl DefCollector<'_> {\n                         ast_id.path.clone(),\n                     ));\n                 }\n-                MacroDirectiveKind::Attr { .. } => {\n-                    // FIXME: these should get diagnosed by `reseed_with_unresolved_attribute`\n-                }\n+                // These are diagnosed by `reseed_with_unresolved_attribute`, as that function consumes them\n+                MacroDirectiveKind::Attr { .. } => {}\n             }\n         }\n "}]}