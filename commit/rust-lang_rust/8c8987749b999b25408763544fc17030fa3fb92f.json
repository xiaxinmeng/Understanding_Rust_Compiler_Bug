{"sha": "8c8987749b999b25408763544fc17030fa3fb92f", "node_id": "C_kwDOAAsO6NoAKDhjODk4Nzc0OWI5OTliMjU0MDg3NjM1NDRmYzE3MDMwZmEzZmI5MmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T20:02:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-03T20:02:38Z"}, "message": "Auto merge of #9105 - Serial-ATA:lint-invalid-utf8, r=Jarcho\n\nAdd `invalid_utf8_in_unchecked`\n\nchangelog: Add [`invalid_utf8_in_unchecked`]\ncloses: #629\n\nDon't know how useful of a lint this is, just saw this was a really old issue :smile:.", "tree": {"sha": "d6c69c9a2403f9832ec2f70f4b33b75fae90a978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6c69c9a2403f9832ec2f70f4b33b75fae90a978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c8987749b999b25408763544fc17030fa3fb92f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8987749b999b25408763544fc17030fa3fb92f", "html_url": "https://github.com/rust-lang/rust/commit/8c8987749b999b25408763544fc17030fa3fb92f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c8987749b999b25408763544fc17030fa3fb92f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be9e35f6b2326524dffbaf13a46f9289743bd9fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/be9e35f6b2326524dffbaf13a46f9289743bd9fd", "html_url": "https://github.com/rust-lang/rust/commit/be9e35f6b2326524dffbaf13a46f9289743bd9fd"}, {"sha": "de646e10db2141fc9fffddf103611fe7d1fd9d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/de646e10db2141fc9fffddf103611fe7d1fd9d68", "html_url": "https://github.com/rust-lang/rust/commit/de646e10db2141fc9fffddf103611fe7d1fd9d68"}], "stats": {"total": 123, "additions": 123, "deletions": 0}, "files": [{"sha": "1b792736a6aefa0585642df0fc0c6d0485738b2a", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c8987749b999b25408763544fc17030fa3fb92f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8c8987749b999b25408763544fc17030fa3fb92f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8c8987749b999b25408763544fc17030fa3fb92f", "patch": "@@ -3641,6 +3641,7 @@ Released 2018-09-13\n [`invalid_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_ref\n [`invalid_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_regex\n [`invalid_upcast_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons\n+[`invalid_utf8_in_unchecked`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_utf8_in_unchecked\n [`invisible_characters`]: https://rust-lang.github.io/rust-clippy/master/index.html#invisible_characters\n [`is_digit_ascii_radix`]: https://rust-lang.github.io/rust-clippy/master/index.html#is_digit_ascii_radix\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements"}, {"sha": "e0a607f9a95b68391d69d69a76ea2418b5b681bf", "filename": "clippy_lints/src/invalid_utf8_in_unchecked.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8c8987749b999b25408763544fc17030fa3fb92f/clippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8987749b999b25408763544fc17030fa3fb92f/clippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs?ref=8c8987749b999b25408763544fc17030fa3fb92f", "patch": "@@ -0,0 +1,74 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{match_function_call, paths};\n+use rustc_ast::{BorrowKind, LitKind};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Spanned;\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `std::str::from_utf8_unchecked` with an invalid UTF-8 literal\n+    ///\n+    /// ### Why is this bad?\n+    /// Creating such a `str` would result in undefined behavior\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # #[allow(unused)]\n+    /// unsafe {\n+    ///     std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub INVALID_UTF8_IN_UNCHECKED,\n+    correctness,\n+    \"using a non UTF-8 literal in `std::std::from_utf8_unchecked`\"\n+}\n+declare_lint_pass!(InvalidUtf8InUnchecked => [INVALID_UTF8_IN_UNCHECKED]);\n+\n+impl<'tcx> LateLintPass<'tcx> for InvalidUtf8InUnchecked {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let Some([arg]) = match_function_call(cx, expr, &paths::STR_FROM_UTF8_UNCHECKED) {\n+            match &arg.kind {\n+                ExprKind::Lit(Spanned { node: lit, .. }) => {\n+                    if let LitKind::ByteStr(bytes) = &lit\n+                        && std::str::from_utf8(bytes).is_err()\n+                    {\n+                        lint(cx, expr.span);\n+                    }\n+                },\n+                ExprKind::AddrOf(BorrowKind::Ref, _, Expr { kind: ExprKind::Array(args), .. }) => {\n+                    let elements = args.iter().map(|e|{\n+                        match &e.kind {\n+                            ExprKind::Lit(Spanned { node: lit, .. }) => match lit {\n+                                LitKind::Byte(b) => Some(*b),\n+                                #[allow(clippy::cast_possible_truncation)]\n+                                LitKind::Int(b, _) => Some(*b as u8),\n+                                _ => None\n+                            }\n+                            _ => None\n+                        }\n+                    }).collect::<Option<Vec<_>>>();\n+\n+                    if let Some(elements) = elements\n+                        && std::str::from_utf8(&elements).is_err()\n+                    {\n+                        lint(cx, expr.span);\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+}\n+\n+fn lint(cx: &LateContext<'_>, span: Span) {\n+    span_lint(\n+        cx,\n+        INVALID_UTF8_IN_UNCHECKED,\n+        span,\n+        \"non UTF-8 literal in `std::str::from_utf8_unchecked`\",\n+    );\n+}"}, {"sha": "da26a3f013017f403f1c457c4ca7a361a536be4d", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c8987749b999b25408763544fc17030fa3fb92f/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8987749b999b25408763544fc17030fa3fb92f/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=8c8987749b999b25408763544fc17030fa3fb92f", "patch": "@@ -92,6 +92,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(init_numbered_fields::INIT_NUMBERED_FIELDS),\n     LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n     LintId::of(int_plus_one::INT_PLUS_ONE),\n+    LintId::of(invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED),\n     LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n     LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n     LintId::of(len_zero::COMPARISON_TO_EMPTY),"}, {"sha": "9975859c54fea5a7bd676730d8b2d24cf58b5385", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c8987749b999b25408763544fc17030fa3fb92f/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8987749b999b25408763544fc17030fa3fb92f/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=8c8987749b999b25408763544fc17030fa3fb92f", "patch": "@@ -29,6 +29,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(infinite_iter::INFINITE_ITER),\n     LintId::of(inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n     LintId::of(inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n+    LintId::of(invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED),\n     LintId::of(let_underscore::LET_UNDERSCORE_LOCK),\n     LintId::of(literal_representation::MISTYPED_LITERAL_SUFFIXES),\n     LintId::of(loops::ITER_NEXT_LOOP),"}, {"sha": "ceb8470657f7e45387c0f69f470892bb4668f3a6", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c8987749b999b25408763544fc17030fa3fb92f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8987749b999b25408763544fc17030fa3fb92f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=8c8987749b999b25408763544fc17030fa3fb92f", "patch": "@@ -196,6 +196,7 @@ store.register_lints(&[\n     inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n     int_plus_one::INT_PLUS_ONE,\n     invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS,\n+    invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED,\n     items_after_statements::ITEMS_AFTER_STATEMENTS,\n     iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR,\n     large_const_arrays::LARGE_CONST_ARRAYS,"}, {"sha": "1604d1078eef6ed9886008824815b2b93937cbd9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c8987749b999b25408763544fc17030fa3fb92f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8987749b999b25408763544fc17030fa3fb92f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8c8987749b999b25408763544fc17030fa3fb92f", "patch": "@@ -255,6 +255,7 @@ mod init_numbered_fields;\n mod inline_fn_without_body;\n mod int_plus_one;\n mod invalid_upcast_comparisons;\n+mod invalid_utf8_in_unchecked;\n mod items_after_statements;\n mod iter_not_returning_iterator;\n mod large_const_arrays;\n@@ -913,6 +914,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(manual_retain::ManualRetain::new(msrv)));\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move || Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n+    store.register_late_pass(|| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "05429d05d9ebe8285698298b598daeaab5eb1347", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c8987749b999b25408763544fc17030fa3fb92f/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8987749b999b25408763544fc17030fa3fb92f/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=8c8987749b999b25408763544fc17030fa3fb92f", "patch": "@@ -163,6 +163,7 @@ pub const STR_BYTES: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"bytes\"];\n pub const STR_CHARS: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"chars\"];\n pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n+pub const STR_FROM_UTF8_UNCHECKED: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8_unchecked\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];\n pub const STR_STARTS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"starts_with\"];\n #[cfg(feature = \"internal\")]"}, {"sha": "3dc096d3197fbe5eba20a5ca73b5a65d72739c7b", "filename": "tests/ui/invalid_utf8_in_unchecked.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8c8987749b999b25408763544fc17030fa3fb92f/tests%2Fui%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c8987749b999b25408763544fc17030fa3fb92f/tests%2Fui%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_utf8_in_unchecked.rs?ref=8c8987749b999b25408763544fc17030fa3fb92f", "patch": "@@ -0,0 +1,20 @@\n+#![warn(clippy::invalid_utf8_in_unchecked)]\n+\n+fn main() {\n+    // Valid\n+    unsafe {\n+        std::str::from_utf8_unchecked(&[99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8_unchecked(&[b'c', b'l', b'i', b'p', b'p', b'y']);\n+        std::str::from_utf8_unchecked(b\"clippy\");\n+\n+        let x = 0xA0;\n+        std::str::from_utf8_unchecked(&[0xC0, x]);\n+    }\n+\n+    // Invalid\n+    unsafe {\n+        std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n+        std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n+    }\n+}"}, {"sha": "c89cd2758ee9fe407fb359ed45f6232082fd400b", "filename": "tests/ui/invalid_utf8_in_unchecked.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8c8987749b999b25408763544fc17030fa3fb92f/tests%2Fui%2Finvalid_utf8_in_unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c8987749b999b25408763544fc17030fa3fb92f/tests%2Fui%2Finvalid_utf8_in_unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_utf8_in_unchecked.stderr?ref=8c8987749b999b25408763544fc17030fa3fb92f", "patch": "@@ -0,0 +1,22 @@\n+error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n+  --> $DIR/invalid_utf8_in_unchecked.rs:16:9\n+   |\n+LL |         std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-utf8-in-unchecked` implied by `-D warnings`\n+\n+error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n+  --> $DIR/invalid_utf8_in_unchecked.rs:17:9\n+   |\n+LL |         std::str::from_utf8_unchecked(&[b'c', b'l', b'/x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n+  --> $DIR/invalid_utf8_in_unchecked.rs:18:9\n+   |\n+LL |         std::str::from_utf8_unchecked(b\"cl/x82ippy\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}