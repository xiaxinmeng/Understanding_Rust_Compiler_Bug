{"sha": "7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmM2U4NTUxZGRlN2YxNDY0MTYxOGNkYjhmZGEyZjk5ZmYxZDc0YjY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-24T10:18:32Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-12-04T22:22:52Z"}, "message": "Use `record_operands_moved` more aggresively", "tree": {"sha": "b45ad2f41f6884c7935235264d98828302100c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b45ad2f41f6884c7935235264d98828302100c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "html_url": "https://github.com/rust-lang/rust/commit/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b766abc88f78f36193ddefb1079dbc832346b358", "url": "https://api.github.com/repos/rust-lang/rust/commits/b766abc88f78f36193ddefb1079dbc832346b358", "html_url": "https://github.com/rust-lang/rust/commit/b766abc88f78f36193ddefb1079dbc832346b358"}], "stats": {"total": 353, "additions": 120, "deletions": 233}, "files": [{"sha": "4e96ae38015ece72a9f4ab0399d1bfe8391c75c9", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -11,6 +11,8 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;\n \n+use std::slice;\n+\n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Returns an rvalue suitable for use until the end of the current\n     /// scope expression.\n@@ -117,7 +119,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block =\n                         this.into(this.hir.tcx().mk_place_deref(Place::from(result)), block, value)\n                 );\n-                block.and(Rvalue::Use(Operand::Move(Place::from(result))))\n+                let result_operand = Operand::Move(Place::from(result));\n+                this.record_operands_moved(slice::from_ref(&result_operand));\n+                block.and(Rvalue::Use(result_operand))\n             }\n             ExprKind::Cast { source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n@@ -161,6 +165,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .map(|f| unpack!(block = this.as_operand(block, scope, f)))\n                     .collect();\n \n+                this.record_operands_moved(&fields);\n                 block.and(Rvalue::Aggregate(box AggregateKind::Array(el_ty), fields))\n             }\n             ExprKind::Tuple { fields } => {\n@@ -171,6 +176,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .map(|f| unpack!(block = this.as_operand(block, scope, f)))\n                     .collect();\n \n+                this.record_operands_moved(&fields);\n                 block.and(Rvalue::Aggregate(box AggregateKind::Tuple, fields))\n             }\n             ExprKind::Closure { closure_id, substs, upvars, movability } => {\n@@ -222,6 +228,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     }\n                     UpvarSubsts::Closure(substs) => box AggregateKind::Closure(closure_id, substs),\n                 };\n+                this.record_operands_moved(&operands);\n                 block.and(Rvalue::Aggregate(result, operands))\n             }\n             ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {"}, {"sha": "ce2ebb8b83be0892babed1c7238e1e6aa064939d", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -10,9 +10,10 @@ use rustc_hir as hir;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation};\n use rustc_span::symbol::sym;\n-\n use rustc_target::spec::abi::Abi;\n \n+use std::slice;\n+\n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, storing the result into `destination`, which\n     /// is assumed to be uninitialized.\n@@ -271,7 +272,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 let field_names = this.hir.all_fields(adt_def, variant_index);\n \n-                let fields = if let Some(FruInfo { base, field_types }) = base {\n+                let fields: Vec<_> = if let Some(FruInfo { base, field_types }) = base {\n                     let base = unpack!(block = this.as_place(block, base));\n \n                     // MIR does not natively support FRU, so for each\n@@ -306,6 +307,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     user_ty,\n                     active_field_index,\n                 );\n+                this.record_operands_moved(&fields);\n                 this.cfg.push_assign(\n                     block,\n                     source_info,\n@@ -432,6 +434,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let scope = this.local_scope();\n                 let value = unpack!(block = this.as_operand(block, scope, value));\n                 let resume = this.cfg.start_new_block();\n+                this.record_operands_moved(slice::from_ref(&value));\n                 this.cfg.terminate(\n                     block,\n                     source_info,"}, {"sha": "a974ea0db5f3cf5ceb7ec246311b79e36b4639af", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -3,6 +3,7 @@ use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::thir::*;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n+use std::slice;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Builds a block of MIR statements to evaluate the THIR `expr`.\n@@ -46,6 +47,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 if this.hir.needs_drop(lhs.ty) {\n                     let rhs = unpack!(block = this.as_local_operand(block, rhs));\n                     let lhs = unpack!(block = this.as_place(block, lhs));\n+                    this.record_operands_moved(slice::from_ref(&rhs));\n                     unpack!(block = this.build_drop_and_replace(block, lhs_span, lhs, rhs));\n                 } else {\n                     let rhs = unpack!(block = this.as_local_rvalue(block, rhs));"}, {"sha": "695b884abbd39bb7b1438d3bc63812addf6352b8", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -83,7 +83,7 @@ that contains only loops and breakable blocks. It tracks where a `break`,\n \n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, CFG};\n use crate::thir::{Expr, ExprRef, LintLevel};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::region;\n@@ -1379,7 +1379,7 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }\n-            | TerminatorKind::InlineAsm {.. } => {\n+            | TerminatorKind::InlineAsm { .. } => {\n                 span_bug!(term.source_info.span, \"cannot unwind from {:?}\", term.kind)\n             }\n         }"}, {"sha": "0c7b64cb97f8f3d1b8825eaad47b98e11752812c", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -41,44 +41,36 @@ fn main() -> () {\n         StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n         StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n         _6 = move _4;                    // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n-        replace(_5 <- move _6) -> [return: bb1, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n+        replace(_5 <- move _6) -> [return: bb1, unwind: bb4]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n     }\n \n     bb1: {\n-        drop(_6) -> [return: bb2, unwind: bb6]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n-    }\n-\n-    bb2: {\n         StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n         _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n-        drop(_5) -> [return: bb3, unwind: bb7]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_5) -> [return: bb2, unwind: bb5]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb3: {\n+    bb2: {\n         StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n-        drop(_4) -> [return: bb4, unwind: bb8]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_4) -> [return: bb3, unwind: bb6]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb4: {\n+    bb3: {\n         StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n         StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:24:1: 24:2\n         StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:24:1: 24:2\n         return;                          // scope 0 at $DIR/basic_assignment.rs:24:2: 24:2\n     }\n \n-    bb5 (cleanup): {\n-        drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n-    }\n-\n-    bb6 (cleanup): {\n-        drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+    bb4 (cleanup): {\n+        drop(_5) -> bb5;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+    bb5 (cleanup): {\n+        drop(_4) -> bb6;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb8 (cleanup): {\n+    bb6 (cleanup): {\n         resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n     }\n }"}, {"sha": "20ea7b026bc6e6020856e3fe27faed91549a9d8b", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -14,53 +14,45 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n         _2 = Box(S);                     // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        (*_2) = S::new() -> [return: bb1, unwind: bb7]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+        (*_2) = S::new() -> [return: bb1, unwind: bb5]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:7:17: 7:23\n                                          // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n         _1 = move _2;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        drop(_2) -> bb2;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n-    }\n-\n-    bb2: {\n         StorageDead(_2);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n         StorageLive(_3);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n         StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n         _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _3 = std::mem::drop::<Box<S>>(move _4) -> [return: bb3, unwind: bb5]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        _3 = std::mem::drop::<Box<S>>(move _4) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n                                          // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb3: {\n+    bb2: {\n         StorageDead(_4);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n         StorageDead(_3);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n         _0 = const ();                   // scope 0 at $DIR/box_expr.rs:6:11: 9:2\n-        drop(_1) -> bb4;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb3;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n-    bb4: {\n+    bb3: {\n         StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n         return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n     }\n \n-    bb5 (cleanup): {\n-        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n-    }\n-\n-    bb6 (cleanup): {\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+    bb4 (cleanup): {\n+        drop(_1) -> bb6;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_2) -> bb8;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    bb5 (cleanup): {\n+        drop(_2) -> bb6;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n     }\n \n-    bb8 (cleanup): {\n+    bb6 (cleanup): {\n         resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n     }\n }"}, {"sha": "bbbd2bcf128b1e3abae333228f0ebf604718d635", "filename": "src/test/mir-opt/issue_41110.main.ElaborateDrops.after.mir", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -6,65 +6,44 @@ fn main() -> () {\n     let mut _2: S;                       // in scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n     let mut _3: S;                       // in scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n     let mut _4: S;                       // in scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n-    let mut _5: bool;                    // in scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/issue-41110.rs:8:9: 8:10\n     }\n \n     bb0: {\n-        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:9: 8:10\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41110.rs:8:9: 8:10\n         StorageLive(_2);                 // scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n-        _5 = const true;                 // scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n         _2 = S;                          // scope 0 at $DIR/issue-41110.rs:8:13: 8:14\n         StorageLive(_3);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n         StorageLive(_4);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n         _4 = S;                          // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n-        _3 = S::id(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n+        _3 = S::id(move _4) -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:23: 8:25\n                                          // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n-        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n-        _1 = S::other(move _2, move _3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n+        _1 = S::other(move _2, move _3) -> bb2; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:15: 8:20\n                                          // + literal: Const { ty: fn(S, S) {S::other}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n         StorageDead(_3);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-        _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n         StorageDead(_2);                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n         _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:7:11: 9:2\n         StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:9:1: 9:2\n         return;                          // scope 0 at $DIR/issue-41110.rs:9:2: 9:2\n     }\n \n     bb3 (cleanup): {\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n+        drop(_2) -> bb4;                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n     }\n \n     bb4 (cleanup): {\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n-    }\n-\n-    bb5 (cleanup): {\n-        goto -> bb8;                     // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-    }\n-\n-    bb6 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-41110.rs:7:1: 9:2\n     }\n-\n-    bb7 (cleanup): {\n-        drop(_2) -> bb6;                 // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-    }\n-\n-    bb8 (cleanup): {\n-        switchInt(_5) -> [false: bb6, otherwise: bb7]; // scope 0 at $DIR/issue-41110.rs:8:27: 8:28\n-    }\n }"}, {"sha": "b0c7260f0f4dc1df5398784dbe0ea9c6529add8a", "filename": "src/test/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -25,7 +25,7 @@ fn test() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n         StorageLive(_4);                 // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n         _4 = move _2;                    // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n-        _3 = std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb7]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n+        _3 = std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb5]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:17:5: 17:9\n                                          // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(Scalar(<ZST>)) }\n@@ -37,65 +37,53 @@ fn test() -> () {\n         StorageLive(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n         _6 = const false;                // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n         _5 = move _1;                    // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-        goto -> bb12;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb9;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb2: {\n-        goto -> bb3;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-    }\n-\n-    bb3: {\n         StorageDead(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n         _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n-        drop(_2) -> [return: bb4, unwind: bb9]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+        drop(_2) -> [return: bb3, unwind: bb6]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb4: {\n+    bb3: {\n         StorageDead(_2);                 // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n-        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb4;                     // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb5: {\n+    bb4: {\n         _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n         StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n         return;                          // scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n     }\n \n-    bb6 (cleanup): {\n-        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-    }\n-\n-    bb7 (cleanup): {\n-        goto -> bb8;                     // scope 2 at $DIR/issue-41110.rs:17:11: 17:12\n-    }\n-\n-    bb8 (cleanup): {\n-        goto -> bb9;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb5 (cleanup): {\n+        goto -> bb6;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb9 (cleanup): {\n-        goto -> bb14;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb6 (cleanup): {\n+        goto -> bb11;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb10 (cleanup): {\n+    bb7 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n     }\n \n-    bb11 (cleanup): {\n+    bb8 (cleanup): {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb5;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n-    bb12: {\n+    bb9: {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n         goto -> bb2;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n-    bb13 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb10 (cleanup): {\n+        drop(_1) -> bb7;                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb14 (cleanup): {\n-        switchInt(_6) -> [false: bb10, otherwise: bb13]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb11 (cleanup): {\n+        switchInt(_6) -> [false: bb7, otherwise: bb10]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n }"}, {"sha": "5011c2adfa581a373072e80ecbf7266420384bc5", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 33, "deletions": 41, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -26,7 +26,7 @@ fn main() -> () {\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n-        _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n+        _2 = cond() -> [return: bb1, unwind: bb9]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:8: 8:12\n                                          // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n@@ -38,7 +38,7 @@ fn main() -> () {\n \n     bb2: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:14:6: 14:6\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n     bb3: {\n@@ -47,38 +47,34 @@ fn main() -> () {\n         _4 = K;                          // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n         _3 = E::F(move _4);              // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n         StorageDead(_4);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-        goto -> bb14;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb12;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb4: {\n-        goto -> bb5;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-    }\n-\n-    bb5: {\n         StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n         _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0_isize: bb7, otherwise: bb6]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0_isize: bb6, otherwise: bb5]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n-    bb6: {\n+    bb5: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:13:10: 13:10\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb7: {\n+    bb6: {\n         StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _6 = move ((_1 as F).0: K);      // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _0 = const ();                   // scope 2 at $DIR/issue-41888.rs:10:29: 13:10\n         StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n-        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb8: {\n-        goto -> bb20;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb7: {\n+        goto -> bb18;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb9: {\n+    bb8: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         _9 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n@@ -87,66 +83,62 @@ fn main() -> () {\n         return;                          // scope 0 at $DIR/issue-41888.rs:15:2: 15:2\n     }\n \n-    bb10 (cleanup): {\n-        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-    }\n-\n-    bb11 (cleanup): {\n-        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb9 (cleanup): {\n+        goto -> bb10;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb12 (cleanup): {\n+    bb10 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n     }\n \n-    bb13 (cleanup): {\n+    bb11 (cleanup): {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb10;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb9;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n-    bb14: {\n+    bb12: {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         goto -> bb4;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n-    bb15: {\n+    bb13: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        goto -> bb9;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb8;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb16 (cleanup): {\n-        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb14 (cleanup): {\n+        goto -> bb10;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb17: {\n-        drop(_1) -> [return: bb15, unwind: bb12]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb15: {\n+        drop(_1) -> [return: bb13, unwind: bb10]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb18 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb16 (cleanup): {\n+        drop(_1) -> bb10;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb19: {\n+    bb17: {\n         _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _10) -> [0_isize: bb15, otherwise: bb17]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _10) -> [0_isize: bb13, otherwise: bb15]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb20: {\n-        switchInt(_7) -> [false: bb15, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb18: {\n+        switchInt(_7) -> [false: bb13, otherwise: bb17]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb21 (cleanup): {\n+    bb19 (cleanup): {\n         _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _11) -> [0_isize: bb16, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _11) -> [0_isize: bb14, otherwise: bb16]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb22 (cleanup): {\n-        switchInt(_7) -> [false: bb12, otherwise: bb21]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb20 (cleanup): {\n+        switchInt(_7) -> [false: bb10, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n }"}, {"sha": "ab6e7ea7b38a3a0bd752ce379bad49207e20d390", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -30,7 +30,7 @@ fn test() -> Option<Box<u32>> {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _4 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = <Option<u32> as Try>::into_result(move _4) -> [return: bb1, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _3 = <Option<u32> as Try>::into_result(move _4) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n@@ -48,7 +48,11 @@ fn test() -> Option<Box<u32>> {\n         (*_2) = _10;                     // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageDead(_10);                // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _1 = move _2;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        drop(_2) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb8;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n     bb3: {\n@@ -61,15 +65,15 @@ fn test() -> Option<Box<u32>> {\n         StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = <NoneError as From<NoneError>>::from(move _9) -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = <NoneError as From<NoneError>>::from(move _9) -> [return: bb5, unwind: bb9]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:19: 9:20\n                                          // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb5: {\n         StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb6, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:15: 9:20\n+        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb6, unwind: bb9]; // scope 2 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n@@ -78,41 +82,25 @@ fn test() -> Option<Box<u32>> {\n     bb6: {\n         StorageDead(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        drop(_2) -> bb9;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> bb7;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb7: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-    }\n-\n-    bb8: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n-    }\n-\n-    bb9: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n         StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        goto -> bb8;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb10: {\n+    bb8: {\n         return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb11 (cleanup): {\n-        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-    }\n-\n-    bb12 (cleanup): {\n-        drop(_2) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    bb9 (cleanup): {\n+        drop(_2) -> bb10;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb13 (cleanup): {\n+    bb10 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n     }\n }"}, {"sha": "2f95931d2b2a1861a15aaea536cf8ceebde26462", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -28,7 +28,7 @@ fn main() -> () {\n \n     bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n-        _1 = std::mem::drop::<String>(move _2) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n+        _1 = std::mem::drop::<String>(move _2) -> bb2; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:5: 9:19\n                                          // + literal: Const { ty: fn(std::string::String) {std::mem::drop::<std::string::String>}, val: Value(Scalar(<ZST>)) }\n@@ -41,12 +41,4 @@ fn main() -> () {\n         _0 = const ();                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:11: 10:2\n         return;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:10:2: 10:2\n     }\n-\n-    bb3 (cleanup): {\n-        drop(_2) -> bb4;                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:34: 9:35\n-    }\n-\n-    bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/no-spurious-drop-after-call.rs:8:1: 10:2\n-    }\n }"}, {"sha": "9bca5d24605fb220ee9c4ad2ac9c632b3365e4eb", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -22,62 +22,38 @@ fn move_out_by_subslice() -> () {\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n         (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n-    }\n-\n-    bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n-    }\n-\n-    bb2: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n-        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-    }\n-\n-    bb3: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-    }\n-\n-    bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _6 = move _1[0..2];              // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n-        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_6) -> [return: bb1, unwind: bb3]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb5: {\n+    bb1: {\n         StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb6: {\n+    bb2: {\n         StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n         return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-    }\n-\n-    bb8 (cleanup): {\n-        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-    }\n-\n-    bb9 (cleanup): {\n-        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    bb3 (cleanup): {\n+        drop(_1) -> bb4;                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb10 (cleanup): {\n+    bb4 (cleanup): {\n         resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n     }\n }"}, {"sha": "c9004416f2ec1629e8fdcba6ccad2d941069298c", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7f3e8551dde7f14641618cdb8fda2f99ff1d74b6/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=7f3e8551dde7f14641618cdb8fda2f99ff1d74b6", "patch": "@@ -22,62 +22,38 @@ fn move_out_from_end() -> () {\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n         (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n-    }\n-\n-    bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n-    }\n-\n-    bb2: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n-        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-    }\n-\n-    bb3: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-    }\n-\n-    bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _6 = move _1[1 of 2];            // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n-        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_6) -> [return: bb1, unwind: bb3]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb5: {\n+    bb1: {\n         StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb6: {\n+    bb2: {\n         StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n         return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-    }\n-\n-    bb8 (cleanup): {\n-        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-    }\n-\n-    bb9 (cleanup): {\n-        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    bb3 (cleanup): {\n+        drop(_1) -> bb4;                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb10 (cleanup): {\n+    bb4 (cleanup): {\n         resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n     }\n }"}]}