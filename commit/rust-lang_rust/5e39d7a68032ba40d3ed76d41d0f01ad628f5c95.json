{"sha": "5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMzlkN2E2ODAzMmJhNDBkM2VkNzZkNDFkMGYwMWFkNjI4ZjVjOTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-10T10:32:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-10T10:32:36Z"}, "message": "Merge #7617\n\n7617: Add getter/setter assists r=Veykril a=yoshuawuyts\n\nThis patch makes progress towards the design outlined in https://github.com/rust-analyzer/rust-analyzer/issues/5943, and includes a small refactor which closes https://github.com/rust-analyzer/rust-analyzer/issues/7607. All together this patch does 4 things:\r\n\r\n- Adds a `generate_getter` assist.\r\n- Adds a `generate_getter_mut` assist.\r\n- Adds a `generate_setter` assist.\r\n- Moves the `generate_impl_text` function from `generate_new` into `utils` (which closes #7607).\r\n\r\n## Design Notes\r\n\r\nI've chosen to follow the [Rust API guidelines on getters](https://rust-lang.github.io/api-guidelines/naming.html#getter-names-follow-rust-convention-c-getter) as closely as possible. This deliberately leaves \"builder pattern\"-style setters out of scope.\r\n\r\nAlso, similar to https://github.com/rust-analyzer/rust-analyzer/pull/7570 this assist generates doc comments. I think this should work well in most cases, and for the few where it doesn't it's probably easily edited. This makes it slightly less correct than the #7570 implementation, but I think this is still useful enough to include for many of the same reasons.\r\n\r\nThe reason why this PR contains 3 assists, rather than 1, is because each of them is so similar to the others that it felt more noisy to do them separately than all at once. The amount of code added does not necessarily reflect that, but hope that still makes sense.\r\n\r\n## Examples\r\n\r\n**Input**\r\n```rust\r\nstruct Person {\r\n    name: String,     // <- cursor on \"name\"\r\n}\r\n```\r\n\r\n**generate getter**\r\n```rust\r\nstruct Person {\r\n    name: String,\r\n}\r\n\r\nimpl Person {\r\n    /// Get a reference to the person's name.\r\n    fn name(&self) -> &String {\r\n        &self.name\r\n    }\r\n}\r\n```\r\n\r\n**generate mut getter**\r\n```rust\r\nstruct Person {\r\n    name: String,\r\n}\r\n\r\nimpl Person {\r\n    /// Get a mutable reference to the person's name.\r\n    fn name_mut(&mut self) -> &mut String {\r\n        &mut self.name\r\n    }\r\n}\r\n```\r\n\r\n**generate setter**\r\n```rust\r\nstruct Person {\r\n    name: String,\r\n}\r\n\r\nimpl Person {\r\n    /// Set the person's name.\r\n    fn set_name(&mut self, name: String) {\r\n        self.name = name;\r\n    }\r\n}\r\n```\r\n\n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts+github@gmail.com>", "tree": {"sha": "2cee8cecf4214092f42dbee3432afa944e219671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cee8cecf4214092f42dbee3432afa944e219671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgI7ZECRBK7hj4Ov3rIwAAdHIIAEdQ1qSU7Dx3P/X0Zy1YRlxy\nhAO6VxlYO6KQBYzin8gEW2gJ6NjdxSmIHQcweMCfb6FwO9szKS5Qn6UVdcCF0dW8\nfIbVgHU1swo8Zir6+ydLE4IipfZSxwzZ+hmgMaOCWe412P28JXkdZwbnWRvKIQLd\npwxJ/mAKaaKCUH/K/o/WyyoTdssfWjs6+DylkPSXeXDW8X6ZsCcJfio/7Ogz/lR7\nhHKtZYHRdA/T0IRrKFZ0hdiSFcRmBMsJwwJY8pKYenGxYidJ8CIhT2WBSW25RlcV\nGDvYgJzvqU3qNfoqr9zNjEZ7vvRSrkTvY7ZhKB/Z8POhmQHGCDbBCyQc6nhtigc=\n=L9Id\n-----END PGP SIGNATURE-----\n", "payload": "tree 2cee8cecf4214092f42dbee3432afa944e219671\nparent ff5ef2830c4cc6bf4116b99b440885bf0c94b459\nparent e8d7bcc35507425f384cff25feb564ac41a5c5a7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612953156 +0000\ncommitter GitHub <noreply@github.com> 1612953156 +0000\n\nMerge #7617\n\n7617: Add getter/setter assists r=Veykril a=yoshuawuyts\n\nThis patch makes progress towards the design outlined in https://github.com/rust-analyzer/rust-analyzer/issues/5943, and includes a small refactor which closes https://github.com/rust-analyzer/rust-analyzer/issues/7607. All together this patch does 4 things:\r\n\r\n- Adds a `generate_getter` assist.\r\n- Adds a `generate_getter_mut` assist.\r\n- Adds a `generate_setter` assist.\r\n- Moves the `generate_impl_text` function from `generate_new` into `utils` (which closes #7607).\r\n\r\n## Design Notes\r\n\r\nI've chosen to follow the [Rust API guidelines on getters](https://rust-lang.github.io/api-guidelines/naming.html#getter-names-follow-rust-convention-c-getter) as closely as possible. This deliberately leaves \"builder pattern\"-style setters out of scope.\r\n\r\nAlso, similar to https://github.com/rust-analyzer/rust-analyzer/pull/7570 this assist generates doc comments. I think this should work well in most cases, and for the few where it doesn't it's probably easily edited. This makes it slightly less correct than the #7570 implementation, but I think this is still useful enough to include for many of the same reasons.\r\n\r\nThe reason why this PR contains 3 assists, rather than 1, is because each of them is so similar to the others that it felt more noisy to do them separately than all at once. The amount of code added does not necessarily reflect that, but hope that still makes sense.\r\n\r\n## Examples\r\n\r\n**Input**\r\n```rust\r\nstruct Person {\r\n    name: String,     // <- cursor on \"name\"\r\n}\r\n```\r\n\r\n**generate getter**\r\n```rust\r\nstruct Person {\r\n    name: String,\r\n}\r\n\r\nimpl Person {\r\n    /// Get a reference to the person's name.\r\n    fn name(&self) -> &String {\r\n        &self.name\r\n    }\r\n}\r\n```\r\n\r\n**generate mut getter**\r\n```rust\r\nstruct Person {\r\n    name: String,\r\n}\r\n\r\nimpl Person {\r\n    /// Get a mutable reference to the person's name.\r\n    fn name_mut(&mut self) -> &mut String {\r\n        &mut self.name\r\n    }\r\n}\r\n```\r\n\r\n**generate setter**\r\n```rust\r\nstruct Person {\r\n    name: String,\r\n}\r\n\r\nimpl Person {\r\n    /// Set the person's name.\r\n    fn set_name(&mut self, name: String) {\r\n        self.name = name;\r\n    }\r\n}\r\n```\r\n\n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts+github@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "html_url": "https://github.com/rust-lang/rust/commit/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5ef2830c4cc6bf4116b99b440885bf0c94b459", "html_url": "https://github.com/rust-lang/rust/commit/ff5ef2830c4cc6bf4116b99b440885bf0c94b459"}, {"sha": "e8d7bcc35507425f384cff25feb564ac41a5c5a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d7bcc35507425f384cff25feb564ac41a5c5a7", "html_url": "https://github.com/rust-lang/rust/commit/e8d7bcc35507425f384cff25feb564ac41a5c5a7"}], "stats": {"total": 671, "additions": 603, "deletions": 68}, "files": [{"sha": "c3ff38b6668290499be114e6c6a317be505c40f2", "filename": "crates/assists/src/handlers/generate_enum_match_method.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs?ref=5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "patch": "@@ -4,7 +4,7 @@ use syntax::ast::{self, AstNode, NameOwner};\n use test_utils::mark;\n \n use crate::{\n-    utils::{find_impl_block, find_struct_impl},\n+    utils::{find_impl_block, find_struct_impl, generate_impl_text},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -82,7 +82,7 @@ pub(crate) fn generate_enum_match_method(acc: &mut Assists, ctx: &AssistContext)\n             let start_offset = impl_def\n                 .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n                 .unwrap_or_else(|| {\n-                    buf = generate_impl_text(&parent_enum, &buf);\n+                    buf = generate_impl_text(&ast::Adt::Enum(parent_enum.clone()), &buf);\n                     parent_enum.syntax().text_range().end()\n                 });\n \n@@ -91,16 +91,6 @@ pub(crate) fn generate_enum_match_method(acc: &mut Assists, ctx: &AssistContext)\n     )\n }\n \n-// Generates the surrounding `impl Type { <code> }` including type and lifetime\n-// parameters\n-fn generate_impl_text(strukt: &ast::Enum, code: &str) -> String {\n-    let mut buf = String::with_capacity(code.len());\n-    buf.push_str(\"\\n\\nimpl \");\n-    buf.push_str(strukt.name().unwrap().text());\n-    format_to!(buf, \" {{\\n{}\\n}}\", code);\n-    buf\n-}\n-\n #[cfg(test)]\n mod tests {\n     use test_utils::mark;"}, {"sha": "b63dfce4194e1b9ecab013f935c09d565221f555", "filename": "crates/assists/src/handlers/generate_getter.rs", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "patch": "@@ -0,0 +1,156 @@\n+use stdx::{format_to, to_lower_snake_case};\n+use syntax::ast::VisibilityOwner;\n+use syntax::ast::{self, AstNode, NameOwner};\n+\n+use crate::{\n+    utils::{find_impl_block, find_struct_impl, generate_impl_text},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n+\n+// Assist: generate_getter\n+//\n+// Generate a getter method.\n+//\n+// ```\n+// struct Person {\n+//     nam$0e: String,\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Person {\n+//     name: String,\n+// }\n+//\n+// impl Person {\n+//     /// Get a reference to the person's name.\n+//     fn name(&self) -> &String {\n+//         &self.name\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_getter(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n+    let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n+\n+    let strukt_name = strukt.name()?;\n+    let field_name = field.name()?;\n+    let field_ty = field.ty()?;\n+\n+    // Return early if we've found an existing fn\n+    let fn_name = to_lower_snake_case(&field_name.to_string());\n+    let impl_def = find_struct_impl(&ctx, &ast::Adt::Struct(strukt.clone()), fn_name.as_str())?;\n+\n+    let target = field.syntax().text_range();\n+    acc.add(\n+        AssistId(\"generate_getter\", AssistKind::Generate),\n+        \"Generate a getter method\",\n+        target,\n+        |builder| {\n+            let mut buf = String::with_capacity(512);\n+\n+            let fn_name_spaced = fn_name.replace('_', \" \");\n+            let strukt_name_spaced =\n+                to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \");\n+\n+            if impl_def.is_some() {\n+                buf.push('\\n');\n+            }\n+\n+            let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+            format_to!(\n+                buf,\n+                \"    /// Get a reference to the {}'s {}.\n+    {}fn {}(&self) -> &{} {{\n+        &self.{}\n+    }}\",\n+                strukt_name_spaced,\n+                fn_name_spaced,\n+                vis,\n+                fn_name,\n+                field_ty,\n+                fn_name,\n+            );\n+\n+            let start_offset = impl_def\n+                .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n+                .unwrap_or_else(|| {\n+                    buf = generate_impl_text(&ast::Adt::Struct(strukt.clone()), &buf);\n+                    strukt.syntax().text_range().end()\n+                });\n+\n+            builder.insert(start_offset, buf);\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    fn check_not_applicable(ra_fixture: &str) {\n+        check_assist_not_applicable(generate_getter, ra_fixture)\n+    }\n+\n+    #[test]\n+    fn test_generate_getter_from_field() {\n+        check_assist(\n+            generate_getter,\n+            r#\"\n+struct Context<T: Clone> {\n+    dat$0a: T,\n+}\"#,\n+            r#\"\n+struct Context<T: Clone> {\n+    data: T,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a reference to the context's data.\n+    fn data(&self) -> &T {\n+        &self.data\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_getter_already_implemented() {\n+        check_not_applicable(\n+            r#\"\n+struct Context<T: Clone> {\n+    dat$0a: T,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    fn data(&self) -> &T {\n+        &self.data\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_getter_from_field_with_visibility_marker() {\n+        check_assist(\n+            generate_getter,\n+            r#\"\n+pub(crate) struct Context<T: Clone> {\n+    dat$0a: T,\n+}\"#,\n+            r#\"\n+pub(crate) struct Context<T: Clone> {\n+    data: T,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a reference to the context's data.\n+    pub(crate) fn data(&self) -> &T {\n+        &self.data\n+    }\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "b5085035e0aef292cb0218950385e41d67da0185", "filename": "crates/assists/src/handlers/generate_getter_mut.rs", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs?ref=5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "patch": "@@ -0,0 +1,159 @@\n+use stdx::{format_to, to_lower_snake_case};\n+use syntax::ast::VisibilityOwner;\n+use syntax::ast::{self, AstNode, NameOwner};\n+\n+use crate::{\n+    utils::{find_impl_block, find_struct_impl, generate_impl_text},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n+\n+// Assist: generate_getter_mut\n+//\n+// Generate a mut getter method.\n+//\n+// ```\n+// struct Person {\n+//     nam$0e: String,\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Person {\n+//     name: String,\n+// }\n+//\n+// impl Person {\n+//     /// Get a mutable reference to the person's name.\n+//     fn name_mut(&mut self) -> &mut String {\n+//         &mut self.name\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_getter_mut(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n+    let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n+\n+    let strukt_name = strukt.name()?;\n+    let field_name = field.name()?;\n+    let field_ty = field.ty()?;\n+\n+    // Return early if we've found an existing fn\n+    let fn_name = to_lower_snake_case(&field_name.to_string());\n+    let impl_def = find_struct_impl(\n+        &ctx,\n+        &ast::Adt::Struct(strukt.clone()),\n+        format!(\"{}_mut\", fn_name).as_str(),\n+    )?;\n+\n+    let target = field.syntax().text_range();\n+    acc.add(\n+        AssistId(\"generate_getter_mut\", AssistKind::Generate),\n+        \"Generate a mut getter method\",\n+        target,\n+        |builder| {\n+            let mut buf = String::with_capacity(512);\n+            let fn_name_spaced = fn_name.replace('_', \" \");\n+            let strukt_name_spaced =\n+                to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \");\n+\n+            if impl_def.is_some() {\n+                buf.push('\\n');\n+            }\n+\n+            let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+            format_to!(\n+                buf,\n+                \"    /// Get a mutable reference to the {}'s {}.\n+    {}fn {}_mut(&mut self) -> &mut {} {{\n+        &mut self.{}\n+    }}\",\n+                strukt_name_spaced,\n+                fn_name_spaced,\n+                vis,\n+                fn_name,\n+                field_ty,\n+                fn_name,\n+            );\n+\n+            let start_offset = impl_def\n+                .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n+                .unwrap_or_else(|| {\n+                    buf = generate_impl_text(&ast::Adt::Struct(strukt.clone()), &buf);\n+                    strukt.syntax().text_range().end()\n+                });\n+\n+            builder.insert(start_offset, buf);\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    fn check_not_applicable(ra_fixture: &str) {\n+        check_assist_not_applicable(generate_getter_mut, ra_fixture)\n+    }\n+\n+    #[test]\n+    fn test_generate_getter_mut_from_field() {\n+        check_assist(\n+            generate_getter_mut,\n+            r#\"\n+struct Context<T: Clone> {\n+    dat$0a: T,\n+}\"#,\n+            r#\"\n+struct Context<T: Clone> {\n+    data: T,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a mutable reference to the context's data.\n+    fn data_mut(&mut self) -> &mut T {\n+        &mut self.data\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_getter_mut_already_implemented() {\n+        check_not_applicable(\n+            r#\"\n+struct Context<T: Clone> {\n+    dat$0a: T,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    fn data_mut(&mut self) -> &mut T {\n+        &mut self.data\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_getter_mut_from_field_with_visibility_marker() {\n+        check_assist(\n+            generate_getter_mut,\n+            r#\"\n+pub(crate) struct Context<T: Clone> {\n+    dat$0a: T,\n+}\"#,\n+            r#\"\n+pub(crate) struct Context<T: Clone> {\n+    data: T,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a mutable reference to the context's data.\n+    pub(crate) fn data_mut(&mut self) -> &mut T {\n+        &mut self.data\n+    }\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "c29077225cda54d0768b6799e5e0d3cc52850cff", "filename": "crates/assists/src/handlers/generate_new.rs", "status": "modified", "additions": 15, "deletions": 54, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "patch": "@@ -1,12 +1,10 @@\n+use ast::Adt;\n use itertools::Itertools;\n use stdx::format_to;\n-use syntax::{\n-    ast::{self, AstNode, GenericParamsOwner, NameOwner, StructKind, VisibilityOwner},\n-    SmolStr,\n-};\n+use syntax::ast::{self, AstNode, NameOwner, StructKind, VisibilityOwner};\n \n use crate::{\n-    utils::{find_impl_block, find_struct_impl},\n+    utils::{find_impl_block, find_struct_impl, generate_impl_text},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -28,7 +26,6 @@ use crate::{\n // impl<T: Clone> Ctx<T> {\n //     fn $0new(data: T) -> Self { Self { data } }\n // }\n-//\n // ```\n pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n@@ -40,7 +37,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     };\n \n     // Return early if we've found an existing new fn\n-    let impl_def = find_struct_impl(&ctx, &ast::Adt::Struct(strukt.clone()), \"new\")?;\n+    let impl_def = find_struct_impl(&ctx, &Adt::Struct(strukt.clone()), \"new\")?;\n \n     let target = strukt.syntax().text_range();\n     acc.add(AssistId(\"generate_new\", AssistKind::Generate), \"Generate `new`\", target, |builder| {\n@@ -63,7 +60,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         let start_offset = impl_def\n             .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n             .unwrap_or_else(|| {\n-                buf = generate_impl_text(&strukt, &buf);\n+                buf = generate_impl_text(&Adt::Struct(strukt.clone()), &buf);\n                 strukt.syntax().text_range().end()\n             });\n \n@@ -77,32 +74,6 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     })\n }\n \n-// Generates the surrounding `impl Type { <code> }` including type and lifetime\n-// parameters\n-fn generate_impl_text(strukt: &ast::Struct, code: &str) -> String {\n-    let type_params = strukt.generic_param_list();\n-    let mut buf = String::with_capacity(code.len());\n-    buf.push_str(\"\\n\\nimpl\");\n-    if let Some(type_params) = &type_params {\n-        format_to!(buf, \"{}\", type_params.syntax());\n-    }\n-    buf.push(' ');\n-    buf.push_str(strukt.name().unwrap().text());\n-    if let Some(type_params) = type_params {\n-        let lifetime_params = type_params\n-            .lifetime_params()\n-            .filter_map(|it| it.lifetime())\n-            .map(|it| SmolStr::from(it.text()));\n-        let type_params =\n-            type_params.type_params().filter_map(|it| it.name()).map(|it| SmolStr::from(it.text()));\n-        format_to!(buf, \"<{}>\", lifetime_params.chain(type_params).format(\", \"))\n-    }\n-\n-    format_to!(buf, \" {{\\n{}\\n}}\\n\", code);\n-\n-    buf\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n@@ -120,8 +91,7 @@ mod tests {\n \n impl Foo {\n     fn $0new() -> Self { Self {  } }\n-}\n-\",\n+}\",\n         );\n         check_assist(\n             generate_new,\n@@ -130,8 +100,7 @@ impl Foo {\n \n impl<T: Clone> Foo<T> {\n     fn $0new() -> Self { Self {  } }\n-}\n-\",\n+}\",\n         );\n         check_assist(\n             generate_new,\n@@ -140,8 +109,7 @@ impl<T: Clone> Foo<T> {\n \n impl<'a, T: Foo<'a>> Foo<'a, T> {\n     fn $0new() -> Self { Self {  } }\n-}\n-\",\n+}\",\n         );\n         check_assist(\n             generate_new,\n@@ -150,8 +118,7 @@ impl<'a, T: Foo<'a>> Foo<'a, T> {\n \n impl Foo {\n     fn $0new(baz: String) -> Self { Self { baz } }\n-}\n-\",\n+}\",\n         );\n         check_assist(\n             generate_new,\n@@ -160,8 +127,7 @@ impl Foo {\n \n impl Foo {\n     fn $0new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }\n-}\n-\",\n+}\",\n         );\n \n         // Check that visibility modifiers don't get brought in for fields\n@@ -172,8 +138,7 @@ impl Foo {\n \n impl Foo {\n     fn $0new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }\n-}\n-\",\n+}\",\n         );\n \n         // Check that it reuses existing impls\n@@ -240,8 +205,7 @@ impl Foo {\n \n impl Foo {\n     pub fn $0new() -> Self { Self {  } }\n-}\n-\",\n+}\",\n         );\n         check_assist(\n             generate_new,\n@@ -250,8 +214,7 @@ impl Foo {\n \n impl Foo {\n     pub(crate) fn $0new() -> Self { Self {  } }\n-}\n-\",\n+}\",\n         );\n     }\n \n@@ -322,8 +285,7 @@ impl<T> Source<T> {\n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n         Source { file_id: self.file_id, ast: f(self.ast) }\n     }\n-}\n-\"##,\n+}\"##,\n             r##\"\n pub struct AstId<N: AstNode> {\n     file_id: HirFileId,\n@@ -347,8 +309,7 @@ impl<T> Source<T> {\n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n         Source { file_id: self.file_id, ast: f(self.ast) }\n     }\n-}\n-\"##,\n+}\"##,\n         );\n     }\n }"}, {"sha": "c9043a16297d9a75a45341b8db14793aba74e957", "filename": "crates/assists/src/handlers/generate_setter.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs?ref=5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "patch": "@@ -0,0 +1,162 @@\n+use stdx::{format_to, to_lower_snake_case};\n+use syntax::ast::VisibilityOwner;\n+use syntax::ast::{self, AstNode, NameOwner};\n+\n+use crate::{\n+    utils::{find_impl_block, find_struct_impl, generate_impl_text},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n+\n+// Assist: generate_setter\n+//\n+// Generate a setter method.\n+//\n+// ```\n+// struct Person {\n+//     nam$0e: String,\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Person {\n+//     name: String,\n+// }\n+//\n+// impl Person {\n+//     /// Set the person's name.\n+//     fn set_name(&mut self, name: String) {\n+//         self.name = name;\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_setter(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n+    let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n+\n+    let strukt_name = strukt.name()?;\n+    let field_name = field.name()?;\n+    let field_ty = field.ty()?;\n+\n+    // Return early if we've found an existing fn\n+    let fn_name = to_lower_snake_case(&field_name.to_string());\n+    let impl_def = find_struct_impl(\n+        &ctx,\n+        &ast::Adt::Struct(strukt.clone()),\n+        format!(\"set_{}\", fn_name).as_str(),\n+    )?;\n+\n+    let target = field.syntax().text_range();\n+    acc.add(\n+        AssistId(\"generate_setter\", AssistKind::Generate),\n+        \"Generate a setter method\",\n+        target,\n+        |builder| {\n+            let mut buf = String::with_capacity(512);\n+\n+            let fn_name_spaced = fn_name.replace('_', \" \");\n+            let strukt_name_spaced =\n+                to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \");\n+\n+            if impl_def.is_some() {\n+                buf.push('\\n');\n+            }\n+\n+            let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+            format_to!(\n+                buf,\n+                \"    /// Set the {}'s {}.\n+    {}fn set_{}(&mut self, {}: {}) {{\n+        self.{} = {};\n+    }}\",\n+                strukt_name_spaced,\n+                fn_name_spaced,\n+                vis,\n+                fn_name,\n+                fn_name,\n+                field_ty,\n+                fn_name,\n+                fn_name,\n+            );\n+\n+            let start_offset = impl_def\n+                .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n+                .unwrap_or_else(|| {\n+                    buf = generate_impl_text(&ast::Adt::Struct(strukt.clone()), &buf);\n+                    strukt.syntax().text_range().end()\n+                });\n+\n+            builder.insert(start_offset, buf);\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    fn check_not_applicable(ra_fixture: &str) {\n+        check_assist_not_applicable(generate_setter, ra_fixture)\n+    }\n+\n+    #[test]\n+    fn test_generate_setter_from_field() {\n+        check_assist(\n+            generate_setter,\n+            r#\"\n+struct Person<T: Clone> {\n+    dat$0a: T,\n+}\"#,\n+            r#\"\n+struct Person<T: Clone> {\n+    data: T,\n+}\n+\n+impl<T: Clone> Person<T> {\n+    /// Set the person's data.\n+    fn set_data(&mut self, data: T) {\n+        self.data = data;\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_setter_already_implemented() {\n+        check_not_applicable(\n+            r#\"\n+struct Person<T: Clone> {\n+    dat$0a: T,\n+}\n+\n+impl<T: Clone> Person<T> {\n+    fn set_data(&mut self, data: T) {\n+        self.data = data;\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_setter_from_field_with_visibility_marker() {\n+        check_assist(\n+            generate_setter,\n+            r#\"\n+pub(crate) struct Person<T: Clone> {\n+    dat$0a: T,\n+}\"#,\n+            r#\"\n+pub(crate) struct Person<T: Clone> {\n+    data: T,\n+}\n+\n+impl<T: Clone> Person<T> {\n+    /// Set the person's data.\n+    pub(crate) fn set_data(&mut self, data: T) {\n+        self.data = data;\n+    }\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "957efa6b9c56cb5e24eb996d154b73ceaf31bb01", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "patch": "@@ -130,8 +130,11 @@ mod handlers {\n     mod generate_enum_match_method;\n     mod generate_from_impl_for_enum;\n     mod generate_function;\n+    mod generate_getter;\n+    mod generate_getter_mut;\n     mod generate_impl;\n     mod generate_new;\n+    mod generate_setter;\n     mod infer_function_return_type;\n     mod inline_function;\n     mod inline_local_variable;\n@@ -189,8 +192,11 @@ mod handlers {\n             generate_enum_match_method::generate_enum_match_method,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n+            generate_getter::generate_getter,\n+            generate_getter_mut::generate_getter_mut,\n             generate_impl::generate_impl,\n             generate_new::generate_new,\n+            generate_setter::generate_setter,\n             infer_function_return_type::infer_function_return_type,\n             inline_function::inline_function,\n             inline_local_variable::inline_local_variable,"}, {"sha": "5b9992f15ad07d7119fe6a7edb0f5aeb36f599dc", "filename": "crates/assists/src/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests.rs?ref=5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "patch": "@@ -173,6 +173,9 @@ fn assist_order_field_struct() {\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Change visibility to pub(crate)\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a setter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Add `#[derive]`\");\n }\n "}, {"sha": "6f2b22bc2189ac809996ed3a271f2ba416ed58e6", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "patch": "@@ -533,6 +533,54 @@ fn bar(arg: &str, baz: Baz) ${0:-> ()} {\n     )\n }\n \n+#[test]\n+fn doctest_generate_getter() {\n+    check_doc_test(\n+        \"generate_getter\",\n+        r#####\"\n+struct Person {\n+    nam$0e: String,\n+}\n+\"#####,\n+        r#####\"\n+struct Person {\n+    name: String,\n+}\n+\n+impl Person {\n+    /// Get a reference to the person's name.\n+    fn name(&self) -> &String {\n+        &self.name\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_generate_getter_mut() {\n+    check_doc_test(\n+        \"generate_getter_mut\",\n+        r#####\"\n+struct Person {\n+    nam$0e: String,\n+}\n+\"#####,\n+        r#####\"\n+struct Person {\n+    name: String,\n+}\n+\n+impl Person {\n+    /// Get a mutable reference to the person's name.\n+    fn name_mut(&mut self) -> &mut String {\n+        &mut self.name\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_impl() {\n     check_doc_test(\n@@ -571,7 +619,30 @@ struct Ctx<T: Clone> {\n impl<T: Clone> Ctx<T> {\n     fn $0new(data: T) -> Self { Self { data } }\n }\n+\"#####,\n+    )\n+}\n \n+#[test]\n+fn doctest_generate_setter() {\n+    check_doc_test(\n+        \"generate_setter\",\n+        r#####\"\n+struct Person {\n+    nam$0e: String,\n+}\n+\"#####,\n+        r#####\"\n+struct Person {\n+    name: String,\n+}\n+\n+impl Person {\n+    /// Set the person's name.\n+    fn set_name(&mut self, name: String) {\n+        self.name = name;\n+    }\n+}\n \"#####,\n     )\n }"}, {"sha": "643dade238b6fbb9cfba7768286ec9bb8d778d2d", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e39d7a68032ba40d3ed76d41d0f01ad628f5c95/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=5e39d7a68032ba40d3ed76d41d0f01ad628f5c95", "patch": "@@ -5,12 +5,13 @@ use std::ops;\n use hir::{Adt, HasSource};\n use ide_db::{helpers::SnippetCap, RootDatabase};\n use itertools::Itertools;\n+use stdx::format_to;\n use syntax::{\n     ast::edit::AstNodeEdit,\n     ast::AttrsOwner,\n     ast::NameOwner,\n-    ast::{self, edit, make, ArgListOwner},\n-    AstNode, Direction,\n+    ast::{self, edit, make, ArgListOwner, GenericParamsOwner},\n+    AstNode, Direction, SmolStr,\n     SyntaxKind::*,\n     SyntaxNode, TextSize, T,\n };\n@@ -354,3 +355,29 @@ pub(crate) fn find_impl_block(impl_def: ast::Impl, buf: &mut String) -> Option<T\n         .end();\n     Some(start)\n }\n+\n+// Generates the surrounding `impl Type { <code> }` including type and lifetime\n+// parameters\n+pub(crate) fn generate_impl_text(adt: &ast::Adt, code: &str) -> String {\n+    let type_params = adt.generic_param_list();\n+    let mut buf = String::with_capacity(code.len());\n+    buf.push_str(\"\\n\\nimpl\");\n+    if let Some(type_params) = &type_params {\n+        format_to!(buf, \"{}\", type_params.syntax());\n+    }\n+    buf.push(' ');\n+    buf.push_str(adt.name().unwrap().text());\n+    if let Some(type_params) = type_params {\n+        let lifetime_params = type_params\n+            .lifetime_params()\n+            .filter_map(|it| it.lifetime())\n+            .map(|it| SmolStr::from(it.text()));\n+        let type_params =\n+            type_params.type_params().filter_map(|it| it.name()).map(|it| SmolStr::from(it.text()));\n+        format_to!(buf, \"<{}>\", lifetime_params.chain(type_params).format(\", \"))\n+    }\n+\n+    format_to!(buf, \" {{\\n{}\\n}}\", code);\n+\n+    buf\n+}"}]}