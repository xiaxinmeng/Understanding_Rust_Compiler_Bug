{"sha": "89ec75b0e95a62a2d1ac76f7918a469c7bb228ec", "node_id": "C_kwDOAAsO6NoAKDg5ZWM3NWIwZTk1YTYyYTJkMWFjNzZmNzkxOGE0NjljN2JiMjI4ZWM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-14T01:13:20Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-19T07:02:48Z"}, "message": "Inline and remove `Parser::next_tok()`.\n\nIt has a single call site.", "tree": {"sha": "2afc8ebd8198221fda7717eee35e1af839cc0b58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2afc8ebd8198221fda7717eee35e1af839cc0b58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89ec75b0e95a62a2d1ac76f7918a469c7bb228ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89ec75b0e95a62a2d1ac76f7918a469c7bb228ec", "html_url": "https://github.com/rust-lang/rust/commit/89ec75b0e95a62a2d1ac76f7918a469c7bb228ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89ec75b0e95a62a2d1ac76f7918a469c7bb228ec/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9", "html_url": "https://github.com/rust-lang/rust/commit/aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "378a533edf90b8a5dfec5b97b5fbb7a0903c6f1b", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/89ec75b0e95a62a2d1ac76f7918a469c7bb228ec/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ec75b0e95a62a2d1ac76f7918a469c7bb228ec/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=89ec75b0e95a62a2d1ac76f7918a469c7bb228ec", "patch": "@@ -123,8 +123,8 @@ pub struct Parser<'a> {\n     pub capture_cfg: bool,\n     restrictions: Restrictions,\n     expected_tokens: Vec<TokenType>,\n-    // Important: This must only be advanced from `next_tok`\n-    // to ensure that `token_cursor.num_next_calls` is updated properly\n+    // Important: This must only be advanced from `bump` to ensure that\n+    // `token_cursor.num_next_calls` is updated properly.\n     token_cursor: TokenCursor,\n     desugar_doc_comments: bool,\n     /// This field is used to keep track of how many left angle brackets we have seen. This is\n@@ -476,33 +476,6 @@ impl<'a> Parser<'a> {\n         parser\n     }\n \n-    #[inline]\n-    fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {\n-        loop {\n-            let (mut next, spacing) = if self.desugar_doc_comments {\n-                self.token_cursor.inlined_next_desugared()\n-            } else {\n-                self.token_cursor.inlined_next()\n-            };\n-            self.token_cursor.num_next_calls += 1;\n-            // We've retrieved an token from the underlying\n-            // cursor, so we no longer need to worry about\n-            // an unglued token. See `break_and_eat` for more details\n-            self.token_cursor.break_last_token = false;\n-            if next.span.is_dummy() {\n-                // Tweak the location for better diagnostics, but keep syntactic context intact.\n-                next.span = fallback_span.with_ctxt(next.span.ctxt());\n-            }\n-            if matches!(\n-                next.kind,\n-                token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)\n-            ) {\n-                continue;\n-            }\n-            return (next, spacing);\n-        }\n-    }\n-\n     pub fn unexpected<T>(&mut self) -> PResult<'a, T> {\n         match self.expect_one_of(&[], &[]) {\n             Err(e) => Err(e),\n@@ -697,7 +670,7 @@ impl<'a> Parser<'a> {\n                 //\n                 // If we consume any additional tokens, then this token\n                 // is not needed (we'll capture the entire 'glued' token),\n-                // and `next_tok` will set this field to `None`\n+                // and `bump` will set this field to `None`\n                 self.token_cursor.break_last_token = true;\n                 // Use the spacing of the glued token as the spacing\n                 // of the unglued second token.\n@@ -1035,8 +1008,29 @@ impl<'a> Parser<'a> {\n \n     /// Advance the parser by one token.\n     pub fn bump(&mut self) {\n-        let next_token = self.next_tok(self.token.span);\n-        self.inlined_bump_with(next_token);\n+        let fallback_span = self.token.span;\n+        loop {\n+            let (mut next, spacing) = if self.desugar_doc_comments {\n+                self.token_cursor.inlined_next_desugared()\n+            } else {\n+                self.token_cursor.inlined_next()\n+            };\n+            self.token_cursor.num_next_calls += 1;\n+            // We've retrieved an token from the underlying\n+            // cursor, so we no longer need to worry about\n+            // an unglued token. See `break_and_eat` for more details\n+            self.token_cursor.break_last_token = false;\n+            if next.span.is_dummy() {\n+                // Tweak the location for better diagnostics, but keep syntactic context intact.\n+                next.span = fallback_span.with_ctxt(next.span.ctxt());\n+            }\n+            if !matches!(\n+                next.kind,\n+                token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)\n+            ) {\n+                return self.inlined_bump_with((next, spacing));\n+            }\n+        }\n     }\n \n     /// Look-ahead `dist` tokens of `self.token` and get access to that token there."}]}