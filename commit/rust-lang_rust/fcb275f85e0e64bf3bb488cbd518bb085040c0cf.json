{"sha": "fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "node_id": "C_kwDOAAsO6NoAKGZjYjI3NWY4NWUwZTY0YmYzYmI0ODhjYmQ1MThiYjA4NTA0MGMwY2Y", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-08T16:30:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-08T16:30:21Z"}, "message": "Rollup merge of #104070 - nbdd0121:unwind, r=Amanieu\n\nPrevent aborting guard from aborting the process in a forced unwind\n\nFix #101469", "tree": {"sha": "c62c22848dc08ee15f1e32860a44c72ca4f6c737", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c62c22848dc08ee15f1e32860a44c72ca4f6c737"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWSOdCRBK7hj4Ov3rIwAAzsIIAGMFfKTUge7MY/Y+5M1gNLLN\nYfpxye8Mwfvd7+EitiUSxt1qCW9uKN3ckJNnHW4mnAoSz9OACoIoMXCcfaTZY2Ja\nod4xEqbotreErAmQtSBOZKMUl7wUxIk5Dy5s9cNYZ99/byZOZIQztQT/jUR7nmZF\nqGENFtA1I9oAkX2Bx+c7mx9DcRlLcF/Pkml8B+SoZzgneOHvV/BLxzc1FqHruoYU\nsP5KpnTtI7J7vrkUzQffqG9Lvpsv0isnSCk+8pykYuIoRu4hf++B2ZhmaWgoH33y\nzEnLx5vtKey8qGy3hWP4Onj1JQi1jmVK4m2RwzYyn1OvNdpBvPKNc0OIefKnMpk=\n=MU/p\n-----END PGP SIGNATURE-----\n", "payload": "tree c62c22848dc08ee15f1e32860a44c72ca4f6c737\nparent ce042889f7f0d687368a9704eff64cf9542bac6d\nparent 16abe6c83d2c9eba8f54be8fbe25ed49791e1e45\nauthor Michael Goulet <michael@errs.io> 1683563421 -0700\ncommitter GitHub <noreply@github.com> 1683563421 -0700\n\nRollup merge of #104070 - nbdd0121:unwind, r=Amanieu\n\nPrevent aborting guard from aborting the process in a forced unwind\n\nFix #101469\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "html_url": "https://github.com/rust-lang/rust/commit/fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce042889f7f0d687368a9704eff64cf9542bac6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce042889f7f0d687368a9704eff64cf9542bac6d", "html_url": "https://github.com/rust-lang/rust/commit/ce042889f7f0d687368a9704eff64cf9542bac6d"}, {"sha": "16abe6c83d2c9eba8f54be8fbe25ed49791e1e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/16abe6c83d2c9eba8f54be8fbe25ed49791e1e45", "html_url": "https://github.com/rust-lang/rust/commit/16abe6c83d2c9eba8f54be8fbe25ed49791e1e45"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "869344ce92d7de544b9d6090f86c5b872f4ad9ca", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "patch": "@@ -1227,6 +1227,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         (value1, value2)\n     }\n \n+    fn filter_landing_pad(&mut self, pers_fn: RValue<'gcc>) -> (RValue<'gcc>, RValue<'gcc>) {\n+        // TODO(antoyo): generate the correct landing pad\n+        self.cleanup_landing_pad(pers_fn)\n+    }\n+\n     #[cfg(feature=\"master\")]\n     fn resume(&mut self, exn0: RValue<'gcc>, _exn1: RValue<'gcc>) {\n         let exn_type = exn0.get_type();"}, {"sha": "4d0bcd53d15624b3a2f7b91281d33f8c19b8a56c", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "patch": "@@ -985,13 +985,20 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn cleanup_landing_pad(&mut self, pers_fn: &'ll Value) -> (&'ll Value, &'ll Value) {\n         let ty = self.type_struct(&[self.type_i8p(), self.type_i32()], false);\n-        let landing_pad = self.landing_pad(ty, pers_fn, 1 /* FIXME should this be 0? */);\n+        let landing_pad = self.landing_pad(ty, pers_fn, 0);\n         unsafe {\n             llvm::LLVMSetCleanup(landing_pad, llvm::True);\n         }\n         (self.extract_value(landing_pad, 0), self.extract_value(landing_pad, 1))\n     }\n \n+    fn filter_landing_pad(&mut self, pers_fn: &'ll Value) -> (&'ll Value, &'ll Value) {\n+        let ty = self.type_struct(&[self.type_i8p(), self.type_i32()], false);\n+        let landing_pad = self.landing_pad(ty, pers_fn, 1);\n+        self.add_clause(landing_pad, self.const_array(self.type_i8p(), &[]));\n+        (self.extract_value(landing_pad, 0), self.extract_value(landing_pad, 1))\n+    }\n+\n     fn resume(&mut self, exn0: &'ll Value, exn1: &'ll Value) {\n         let ty = self.type_struct(&[self.type_i8p(), self.type_i32()], false);\n         let mut exn = self.const_poison(ty);"}, {"sha": "a832999225ab667c89212c885313f3e0ab91e3c1", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "patch": "@@ -1600,7 +1600,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 bx = Bx::build(self.cx, llbb);\n \n                 let llpersonality = self.cx.eh_personality();\n-                bx.cleanup_landing_pad(llpersonality);\n+                bx.filter_landing_pad(llpersonality);\n \n                 funclet = None;\n             }"}, {"sha": "853c6934c2c243b68ab7797c7650dadb04abfb8e", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "patch": "@@ -274,6 +274,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n \n     // These are used by everyone except msvc\n     fn cleanup_landing_pad(&mut self, pers_fn: Self::Value) -> (Self::Value, Self::Value);\n+    fn filter_landing_pad(&mut self, pers_fn: Self::Value) -> (Self::Value, Self::Value);\n     fn resume(&mut self, exn0: Self::Value, exn1: Self::Value);\n \n     // These are used only by msvc"}, {"sha": "79624703a4cf7576a88d43386e517fd9af6ea80d", "filename": "library/std/src/personality/dwarf/eh.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs?ref=fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "patch": "@@ -47,6 +47,7 @@ pub enum EHAction {\n     None,\n     Cleanup(usize),\n     Catch(usize),\n+    Filter(usize),\n     Terminate,\n }\n \n@@ -142,9 +143,11 @@ unsafe fn interpret_cs_action(\n         let ttype_index = action_reader.read_sleb128();\n         if ttype_index == 0 {\n             EHAction::Cleanup(lpad)\n-        } else {\n+        } else if ttype_index > 0 {\n             // Stop unwinding Rust panics at catch_unwind.\n             EHAction::Catch(lpad)\n+        } else {\n+            EHAction::Filter(lpad)\n         }\n     }\n }"}, {"sha": "82edb11cbd1461349aea5716f3b2fead13605907", "filename": "library/std/src/personality/gcc.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fgcc.rs?ref=fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "patch": "@@ -135,7 +135,7 @@ cfg_if::cfg_if! {\n                     EHAction::None | EHAction::Cleanup(_) => {\n                         return continue_unwind(exception_object, context);\n                     }\n-                    EHAction::Catch(_) => {\n+                    EHAction::Catch(_) | EHAction::Filter(_) => {\n                         // EHABI requires the personality routine to update the\n                         // SP value in the barrier cache of the exception object.\n                         (*exception_object).private[5] =\n@@ -147,7 +147,8 @@ cfg_if::cfg_if! {\n             } else {\n                 match eh_action {\n                     EHAction::None => return continue_unwind(exception_object, context),\n-                    EHAction::Cleanup(lpad) | EHAction::Catch(lpad) => {\n+                    EHAction::Filter(_) if state & uw::_US_FORCE_UNWIND as c_int != 0 => return continue_unwind(exception_object, context),\n+                    EHAction::Cleanup(lpad) | EHAction::Catch(lpad) | EHAction::Filter(lpad) => {\n                         uw::_Unwind_SetGR(\n                             context,\n                             UNWIND_DATA_REG.0,\n@@ -201,13 +202,15 @@ cfg_if::cfg_if! {\n             if actions as i32 & uw::_UA_SEARCH_PHASE as i32 != 0 {\n                 match eh_action {\n                     EHAction::None | EHAction::Cleanup(_) => uw::_URC_CONTINUE_UNWIND,\n-                    EHAction::Catch(_) => uw::_URC_HANDLER_FOUND,\n+                    EHAction::Catch(_) | EHAction::Filter(_) => uw::_URC_HANDLER_FOUND,\n                     EHAction::Terminate => uw::_URC_FATAL_PHASE1_ERROR,\n                 }\n             } else {\n                 match eh_action {\n                     EHAction::None => uw::_URC_CONTINUE_UNWIND,\n-                    EHAction::Cleanup(lpad) | EHAction::Catch(lpad) => {\n+                    // Forced unwinding hits a terminate action.\n+                    EHAction::Filter(_) if actions as i32 & uw::_UA_FORCE_UNWIND as i32 != 0 => uw::_URC_CONTINUE_UNWIND,\n+                    EHAction::Cleanup(lpad) | EHAction::Catch(lpad) | EHAction::Filter(lpad) => {\n                         uw::_Unwind_SetGR(\n                             context,\n                             UNWIND_DATA_REG.0,"}, {"sha": "4e5d8dc063241af714e1d057ba815cf453a93c26", "filename": "tests/codegen/vec-shrink-panik.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/tests%2Fcodegen%2Fvec-shrink-panik.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/tests%2Fcodegen%2Fvec-shrink-panik.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-shrink-panik.rs?ref=fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "patch": "@@ -25,7 +25,7 @@ pub fn issue71861(vec: Vec<u32>) -> Box<[u32]> {\n \n     // Call to panic_cannot_unwind in case of double-panic is expected\n     // on LLVM 16 and older, but other panics are not.\n-    // CHECK: cleanup\n+    // CHECK: filter\n     // old-NEXT: ; call core::panicking::panic_cannot_unwind\n     // old-NEXT: panic_cannot_unwind\n \n@@ -40,7 +40,7 @@ pub fn issue75636<'a>(iter: &[&'a str]) -> Box<[&'a str]> {\n \n     // Call to panic_cannot_unwind in case of double-panic is expected,\n     // on LLVM 16 and older, but other panics are not.\n-    // CHECK: cleanup\n+    // CHECK: filter\n     // old-NEXT: ; call core::panicking::panic_cannot_unwind\n     // old-NEXT: panic_cannot_unwind\n "}, {"sha": "871621520b910086d55e71940ab503aa368a987d", "filename": "tests/run-make/forced-unwind-terminate-pof/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/tests%2Frun-make%2Fforced-unwind-terminate-pof%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/tests%2Frun-make%2Fforced-unwind-terminate-pof%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforced-unwind-terminate-pof%2FMakefile?ref=fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "patch": "@@ -0,0 +1,9 @@\n+# ignore-cross-compile\n+# only-linux\n+include ../tools.mk\n+\n+all: foo\n+\t$(call RUN,foo) | $(CGREP) -v \"cannot unwind\"\n+\n+foo: foo.rs\n+\t$(RUSTC) $<"}, {"sha": "0a51287313f6e97a8016426f3066ecb987f3e062", "filename": "tests/run-make/forced-unwind-terminate-pof/foo.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/tests%2Frun-make%2Fforced-unwind-terminate-pof%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcb275f85e0e64bf3bb488cbd518bb085040c0cf/tests%2Frun-make%2Fforced-unwind-terminate-pof%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fforced-unwind-terminate-pof%2Ffoo.rs?ref=fcb275f85e0e64bf3bb488cbd518bb085040c0cf", "patch": "@@ -0,0 +1,17 @@\n+// Tests that forced unwind through POF Rust frames wouldn't trigger our terminating guards.\n+\n+#![feature(c_unwind)]\n+#![no_main]\n+\n+extern \"C-unwind\" {\n+    fn pthread_exit(v: *mut core::ffi::c_void) -> !;\n+}\n+\n+unsafe extern \"C\" fn call_pthread_exit() {\n+    pthread_exit(core::ptr::null_mut());\n+}\n+\n+#[no_mangle]\n+unsafe extern \"C-unwind\" fn main(_argc: core::ffi::c_int, _argv: *mut *mut core::ffi::c_char) {\n+    call_pthread_exit();\n+}"}]}