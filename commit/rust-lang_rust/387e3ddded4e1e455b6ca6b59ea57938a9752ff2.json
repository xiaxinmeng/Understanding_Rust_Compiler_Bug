{"sha": "387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4N2UzZGRkZWQ0ZTFlNDU1YjZjYTZiNTllYTU3OTM4YTk3NTJmZjI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-09-15T23:21:21Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-09-26T12:34:53Z"}, "message": "Bless mir-opt tests", "tree": {"sha": "ef1a361d1ec87ad71d69a7b609e81264457304b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef1a361d1ec87ad71d69a7b609e81264457304b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "html_url": "https://github.com/rust-lang/rust/commit/387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "html_url": "https://github.com/rust-lang/rust/commit/94c789b275c2ec19c47dc3aea0fceed6a8af55b1"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "deb5dbad7de671da0fda0ed3b5c611eee4fbfb02", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.32bit.mir?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -48,7 +48,7 @@ fn main() -> () {\n         _7 = _2;                         // scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n         _8 = Len(_1);                    // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n         _9 = Lt(_7, _8);                 // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n     }\n \n     bb2: {"}, {"sha": "979e5bc4d21186325c287aea2707e5fef85acf59", "filename": "src/test/mir-opt/combine_array_len.norm2.InstCombine.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.norm2.InstCombine.32bit.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -32,7 +32,7 @@\n -         _4 = Len(_1);                    // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n +         _4 = const 2_usize;              // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n           _5 = Lt(_3, _4);                 // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n   \n       bb1: {\n@@ -44,7 +44,7 @@\n -         _8 = Len(_1);                    // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n +         _8 = const 2_usize;              // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n           _9 = Lt(_7, _8);                 // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          assert(move _9, \"index out of bounds: the length is {} but the index is {}\", move _8, _7) -> bb2; // scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }\n   \n       bb2: {"}, {"sha": "4664934690845883998881187cbda9ebb9c4f835", "filename": "src/test/mir-opt/const_prop/array_index.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.main.ConstProp.32bit.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -20,9 +20,9 @@\n           _3 = const 2_usize;              // scope 0 at $DIR/array_index.rs:5:31: 5:32\n           _4 = const 4_usize;              // scope 0 at $DIR/array_index.rs:5:18: 5:33\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +         _5 = const true;                 // scope 0 at $DIR/array_index.rs:5:18: 5:33\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n       }\n   \n       bb1: {"}, {"sha": "ba081f95fa8a9722d9466a687afe5e3391f8e47c", "filename": "src/test/mir-opt/const_prop/bad_op_div_by_zero.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero.main.ConstProp.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -24,21 +24,21 @@\n           StorageLive(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n -         _3 = _1;                         // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n -         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n--         assert(!move _4, \"attempt to divide {} by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-         assert(!move _4, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         assert(!const true, \"attempt to divide {} by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         assert(!const true, \"attempt to divide `{}` by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n       }\n   \n       bb1: {\n -         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n -         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n--         assert(!move _7, \"attempt to compute `{} / {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-         assert(!move _7, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         _5 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         _6 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         _7 = const false;                // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+         assert(!const false, \"attempt to compute `{} / {}` which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         assert(!const false, \"attempt to compute `{} / {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n       }\n   \n       bb2: {"}, {"sha": "a843cacf4d93fb614fa9861b0669607bb28e4daf", "filename": "src/test/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -24,21 +24,21 @@\n           StorageLive(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n -         _3 = _1;                         // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n -         _4 = Eq(_3, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n--         assert(!move _4, \"attempt to calculate the remainder of {} with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-         assert(!move _4, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         _3 = const 0_i32;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         assert(!const true, \"attempt to calculate the remainder of {} with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         assert(!const true, \"attempt to calculate the remainder of `{}` with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n       }\n   \n       bb1: {\n -         _5 = Eq(_3, const -1_i32);       // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n -         _6 = Eq(const 1_i32, const i32::MIN); // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n--         assert(!move _7, \"attempt to compute the remainder of `{} % {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-         assert(!move _7, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         _5 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         _6 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         _7 = const false;                // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}` which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}`, which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n       }\n   \n       bb2: {"}, {"sha": "8c10b3518d8c859e944b5d1cba6e8e10338be4fa", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -42,9 +42,9 @@\n           _6 = const 3_usize;              // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n           _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n -         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n--         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n +         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-+         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n       }\n   \n       bb1: {"}, {"sha": "f01676b6da8639368817e5f2417b6abaff7e997e", "filename": "src/test/mir-opt/const_prop/checked_add.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -12,15 +12,15 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/checked_add.rs:5:9: 5:10\n -         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +         _2 = const (2_u32, false);       // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +                                          // ty::Const\n +                                          // + ty: (u32, bool)\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [2, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n +                                          // + literal: Const { ty: (u32, bool), val: Value(ByRef { alloc: Allocation { bytes: [2, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n       }\n   \n       bb1: {"}, {"sha": "8c7b35887c915474a9c621757dc99bef798d7114", "filename": "src/test/mir-opt/const_prop/indirect.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -15,7 +15,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n -         _2 = const 2_u32 as u8 (Misc);   // scope 0 at $DIR/indirect.rs:5:13: 5:25\n -         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:5:13: 5:29\n--         assert(!move (_3.1: bool), \"attempt to compute `{} + {}` which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n+-         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n +         _3 = const (3_u8, false);        // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // ty::Const\n@@ -24,7 +24,7 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n +                                          // + literal: Const { ty: (u8, bool), val: Value(ByRef { alloc: Allocation { bytes: [3, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_u8, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u8, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n       }\n   \n       bb1: {"}, {"sha": "fa790822b6bfffc4f747c8bae7e672f14ba3f8ee", "filename": "src/test/mir-opt/const_prop/large_array_index.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Flarge_array_index.main.ConstProp.32bit.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -20,9 +20,9 @@\n           _3 = const 2_usize;              // scope 0 at $DIR/large_array_index.rs:6:30: 6:31\n           _4 = const 5000_usize;           // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n -         _5 = Lt(_3, _4);                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n--         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n+-         assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n +         _5 = const true;                 // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 5000_usize, const 2_usize) -> bb1; // scope 0 at $DIR/large_array_index.rs:6:17: 6:32\n       }\n   \n       bb1: {"}, {"sha": "53ffc01ccaf2571676a0ffa7ae5f81b05a37fcbe", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -25,15 +25,15 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:12:9: 12:10\n -         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n--         assert(!move (_2.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n+-         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // ty::Const\n +                                          // + ty: (i32, bool)\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: (i32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n       }\n   \n       bb1: {\n@@ -46,9 +46,9 @@\n           _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:32: 13:33\n           _6 = const 6_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n -         _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +         _7 = const true;                 // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n       }\n   \n       bb2: {"}, {"sha": "98f409f326a58834255d983b5f7876735807ad1b", "filename": "src/test/mir-opt/const_prop/repeat.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.main.ConstProp.32bit.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -22,9 +22,9 @@\n           _4 = const 2_usize;              // scope 0 at $DIR/repeat.rs:6:26: 6:27\n           _5 = const 8_usize;              // scope 0 at $DIR/repeat.rs:6:18: 6:28\n -         _6 = Lt(_4, _5);                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         assert(move _6, \"index out of bounds: the length is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n +         _6 = const true;                 // scope 0 at $DIR/repeat.rs:6:18: 6:28\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n       }\n   \n       bb1: {"}, {"sha": "fc8a5437232cf55539f46ee02b282234d13c66fe", "filename": "src/test/mir-opt/const_prop/return_place.add.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -7,15 +7,15 @@\n   \n       bb0: {\n -         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:6:5: 6:10\n--         assert(!move (_1.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n+-         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +                                          // ty::Const\n +                                          // + ty: (u32, bool)\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/return_place.rs:6:5: 6:10\n +                                          // + literal: Const { ty: (u32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n++         assert(!const false, \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n       }\n   \n       bb1: {"}, {"sha": "240cc8e231168b14e82b3d8b7b399c983384a368", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -33,10 +33,10 @@\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:5:31: 5:32\n -         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n       }\n   \n       bb1: {"}, {"sha": "f1f4b97035a61bbd1f300b2cd69a6386624612b2", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -6,7 +6,7 @@\n \n     bb0: {\n         _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n-        assert(!move (_1.1: bool), \"attempt to compute `{} + {}` which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n+        assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_usize, const 1_usize) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     }\n \n     bb1 (cleanup): {"}, {"sha": "c94f6c28cd907eb283fbb4fd1e68f5af68b5dc75", "filename": "src/test/mir-opt/issue_72181.foo.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.foo.mir_map.0.32bit.mir?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -12,7 +12,7 @@ fn foo(_1: [(Never, u32); 1]) -> u32 {\n         _2 = const 0_usize;              // scope 0 at $DIR/issue-72181.rs:16:43: 16:44\n         _3 = Len(_1);                    // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n         _4 = Lt(_2, _3);                 // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n-        assert(move _4, \"index out of bounds: the len is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n+        assert(move _4, \"index out of bounds: the length is {} but the index is {}\", move _3, _2) -> [success: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:16:40: 16:45\n     }\n \n     bb1 (cleanup): {"}, {"sha": "e003dc2aadb9ff3ab52cc32d254d5ce51e246976", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.32bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.32bit.mir?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -48,7 +48,7 @@ fn main() -> () {\n         _6 = const 0_usize;              // scope 4 at $DIR/issue-72181.rs:27:24: 27:25\n         _7 = Len(_2);                    // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n         _8 = Lt(_6, _7);                 // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n-        assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n+        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> [success: bb3, unwind: bb1]; // scope 4 at $DIR/issue-72181.rs:27:22: 27:26\n     }\n \n     bb3: {"}, {"sha": "23dcab656c1ce7304d15a32cf93fcd3f54708369", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/387e3ddded4e1e455b6ca6b59ea57938a9752ff2/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=387e3ddded4e1e455b6ca6b59ea57938a9752ff2", "patch": "@@ -52,7 +52,7 @@ fn main() -> () {\n         _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n-        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the length is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n     bb1 (cleanup): {"}]}