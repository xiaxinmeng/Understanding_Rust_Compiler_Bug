{"sha": "0191b4983ec51df076d8d6f536d603ec2dc4148f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOTFiNDk4M2VjNTFkZjA3NmQ4ZDZmNTM2ZDYwM2VjMmRjNDE0OGY=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-19T21:37:11Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-19T21:37:11Z"}, "message": "rollup merge of #18940: nikomatsakis/issue-18899\n\nEnsure that the type parameters passed to methods outlive the call expression.\n\nFixes #18899.\n\nThis is yet another case of forgotten to consistently enforce the constraints in every instance where they apply. Might be nice to try and refactor to make this whole thing more DRY, but for now here's a targeted fix.\n\nr? @pcwalton", "tree": {"sha": "a9f96cf3773eda7922b56e7547e16ad2125c3b1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9f96cf3773eda7922b56e7547e16ad2125c3b1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0191b4983ec51df076d8d6f536d603ec2dc4148f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0191b4983ec51df076d8d6f536d603ec2dc4148f", "html_url": "https://github.com/rust-lang/rust/commit/0191b4983ec51df076d8d6f536d603ec2dc4148f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0191b4983ec51df076d8d6f536d603ec2dc4148f/comments", "author": null, "committer": null, "parents": [{"sha": "cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9", "html_url": "https://github.com/rust-lang/rust/commit/cbdaf2ebc7d39588a5f6efee1cd9de0a273571a9"}, {"sha": "2477bc4451dc93b9e89c3e1e1621b4333675d94b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2477bc4451dc93b9e89c3e1e1621b4333675d94b", "html_url": "https://github.com/rust-lang/rust/commit/2477bc4451dc93b9e89c3e1e1621b4333675d94b"}], "stats": {"total": 102, "additions": 71, "deletions": 31}, "files": [{"sha": "64abc78daf309c70f2e379ed445d9e053d7f5f70", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=0191b4983ec51df076d8d6f536d603ec2dc4148f", "patch": "@@ -1678,10 +1678,10 @@ impl<'a> Iterator<uint> for TwoBitPositions<'a> {\n mod tests {\n     use std::prelude::*;\n     use std::iter::range_step;\n-    use std::u32;\n     use std::rand;\n     use std::rand::Rng;\n-    use test::Bencher;\n+    use std::u32;\n+    use test::{Bencher, black_box};\n \n     use super::{Bitv, BitvSet, from_fn, from_bytes};\n     use bitv;\n@@ -2676,8 +2676,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv |= 1 << ((r.next_u32() as uint) % u32::BITS);\n             }\n-            &bitv\n-        })\n+            black_box(&bitv)\n+        });\n     }\n \n     #[bench]\n@@ -2688,8 +2688,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv.set((r.next_u32() as uint) % BENCH_BITS, true);\n             }\n-            &bitv\n-        })\n+            black_box(&bitv)\n+        });\n     }\n \n     #[bench]\n@@ -2700,8 +2700,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv.set((r.next_u32() as uint) % BENCH_BITS, r.gen());\n             }\n-            &bitv\n-        })\n+            black_box(&bitv);\n+        });\n     }\n \n     #[bench]\n@@ -2712,8 +2712,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv.set((r.next_u32() as uint) % u32::BITS, true);\n             }\n-            &bitv\n-        })\n+            black_box(&bitv);\n+        });\n     }\n \n     #[bench]\n@@ -2724,8 +2724,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv.insert((r.next_u32() as uint) % u32::BITS);\n             }\n-            &bitv\n-        })\n+            black_box(&bitv);\n+        });\n     }\n \n     #[bench]\n@@ -2736,8 +2736,8 @@ mod tests {\n             for _ in range(0u, 100) {\n                 bitv.insert((r.next_u32() as uint) % BENCH_BITS);\n             }\n-            &bitv\n-        })\n+            black_box(&bitv);\n+        });\n     }\n \n     #[bench]"}, {"sha": "5e341ba8b04d3b2e90e19cb5717a5d3ee762915d", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=0191b4983ec51df076d8d6f536d603ec2dc4148f", "patch": "@@ -2084,7 +2084,7 @@ mod bench {\n     use std::rand::{weak_rng, Rng};\n     use std::mem;\n     use std::ptr;\n-    use test::Bencher;\n+    use test::{Bencher, black_box};\n \n     use vec::Vec;\n \n@@ -2140,8 +2140,8 @@ mod bench {\n         let mut vec: Vec<uint> = vec![];\n         b.iter(|| {\n             vec.push(0);\n-            &vec\n-        })\n+            black_box(&vec);\n+        });\n     }\n \n     #[bench]"}, {"sha": "c53befcc10d6b76a1541ac3f7f5f1826a5a0abfb", "filename": "src/librustc/middle/typeck/check/method/confirm.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=0191b4983ec51df076d8d6f536d603ec2dc4148f", "patch": "@@ -31,6 +31,7 @@ struct ConfirmContext<'a, 'tcx:'a> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     span: Span,\n     self_expr: &'a ast::Expr,\n+    call_expr: &'a ast::Expr,\n }\n \n struct InstantiatedMethodSig<'tcx> {\n@@ -56,6 +57,7 @@ struct InstantiatedMethodSig<'tcx> {\n pub fn confirm<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                          span: Span,\n                          self_expr: &ast::Expr,\n+                         call_expr: &ast::Expr,\n                          unadjusted_self_ty: Ty<'tcx>,\n                          pick: probe::Pick<'tcx>,\n                          supplied_method_types: Vec<Ty<'tcx>>)\n@@ -66,17 +68,18 @@ pub fn confirm<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n            pick.repr(fcx.tcx()),\n            supplied_method_types.repr(fcx.tcx()));\n \n-    let mut confirm_cx = ConfirmContext::new(fcx, span, self_expr);\n+    let mut confirm_cx = ConfirmContext::new(fcx, span, self_expr, call_expr);\n     confirm_cx.confirm(unadjusted_self_ty, pick, supplied_method_types)\n }\n \n impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n     fn new(fcx: &'a FnCtxt<'a, 'tcx>,\n            span: Span,\n-           self_expr: &'a ast::Expr)\n+           self_expr: &'a ast::Expr,\n+           call_expr: &'a ast::Expr)\n            -> ConfirmContext<'a, 'tcx>\n     {\n-        ConfirmContext { fcx: fcx, span: span, self_expr: self_expr }\n+        ConfirmContext { fcx: fcx, span: span, self_expr: self_expr, call_expr: call_expr }\n     }\n \n     fn confirm(&mut self,\n@@ -469,6 +472,10 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n             traits::ObligationCause::misc(self.span),\n             method_bounds_substs,\n             method_bounds);\n+\n+        self.fcx.add_default_region_param_bounds(\n+            method_bounds_substs,\n+            self.call_expr);\n     }\n \n     ///////////////////////////////////////////////////////////////////////////"}, {"sha": "0f4152644adafb80b968de958dcf64b25406a4fd", "filename": "src/librustc/middle/typeck/check/method/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod%2Fmod.rs?ref=0191b4983ec51df076d8d6f536d603ec2dc4148f", "patch": "@@ -79,7 +79,7 @@ pub fn lookup<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                         method_name: ast::Name,\n                         self_ty: Ty<'tcx>,\n                         supplied_method_types: Vec<Ty<'tcx>>,\n-                        call_expr_id: ast::NodeId,\n+                        call_expr: &ast::Expr,\n                         self_expr: &ast::Expr)\n                         -> Result<MethodCallee<'tcx>, MethodError>\n {\n@@ -100,14 +100,14 @@ pub fn lookup<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n      * - `self_expr`:             the self expression (`foo`)\n      */\n \n-    debug!(\"lookup(method_name={}, self_ty={}, call_expr_id={}, self_expr={})\",\n+    debug!(\"lookup(method_name={}, self_ty={}, call_expr={}, self_expr={})\",\n            method_name.repr(fcx.tcx()),\n            self_ty.repr(fcx.tcx()),\n-           call_expr_id,\n+           call_expr.repr(fcx.tcx()),\n            self_expr.repr(fcx.tcx()));\n \n-    let pick = try!(probe::probe(fcx, span, method_name, self_ty, call_expr_id));\n-    Ok(confirm::confirm(fcx, span, self_expr, self_ty, pick, supplied_method_types))\n+    let pick = try!(probe::probe(fcx, span, method_name, self_ty, call_expr.id));\n+    Ok(confirm::confirm(fcx, span, self_expr, call_expr, self_ty, pick, supplied_method_types))\n }\n \n pub fn lookup_in_trait<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,"}, {"sha": "553d80852c28fb959117ebcb0465096c8f20f56d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0191b4983ec51df076d8d6f536d603ec2dc4148f", "patch": "@@ -2050,6 +2050,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub fn add_default_region_param_bounds(&self,\n+                                           substs: &Substs<'tcx>,\n+                                           expr: &ast::Expr)\n+    {\n+        for &ty in substs.types.iter() {\n+            let default_bound = ty::ReScope(expr.id);\n+            let origin = infer::RelateDefaultParamBound(expr.span, ty);\n+            self.register_region_obligation(origin, ty, default_bound);\n+        }\n+    }\n+\n     pub fn add_obligations_for_parameters(&self,\n                                           cause: traits::ObligationCause<'tcx>,\n                                           substs: &Substs<'tcx>,\n@@ -3180,7 +3191,7 @@ fn check_expr_with_unifier<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                          method_name.node.name,\n                                          expr_t,\n                                          tps,\n-                                         expr.id,\n+                                         expr,\n                                          rcvr) {\n             Ok(method) => {\n                 let method_ty = method.ty;\n@@ -4693,11 +4704,7 @@ fn constrain_path_type_parameters(fcx: &FnCtxt,\n                                   expr: &ast::Expr)\n {\n     fcx.opt_node_ty_substs(expr.id, |item_substs| {\n-        for &ty in item_substs.substs.types.iter() {\n-            let default_bound = ty::ReScope(expr.id);\n-            let origin = infer::RelateDefaultParamBound(expr.span, ty);\n-            fcx.register_region_obligation(origin, ty, default_bound);\n-        }\n+        fcx.add_default_region_param_bounds(&item_substs.substs, expr);\n     });\n }\n "}, {"sha": "f92c264784ae6a402dc6d8d60e69e29d63b4abdd", "filename": "src/test/compile-fail/regions-escape-method.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0191b4983ec51df076d8d6f536d603ec2dc4148f/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-method.rs?ref=0191b4983ec51df076d8d6f536d603ec2dc4148f", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a method call where the parameter `B` would (illegally) be\n+// inferred to a region bound in the method argument. If this program\n+// were accepted, then the closure passed to `s.f` could escape its\n+// argument.\n+\n+struct S;\n+\n+impl S {\n+    fn f<B>(&self, _: |&i32| -> B) {\n+    }\n+}\n+\n+fn main() {\n+    let s = S;\n+    s.f(|p| p) //~ ERROR cannot infer\n+}"}]}