{"sha": "a8820f7a2df1932918dbaa5d123486d86f7fb008", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ODIwZjdhMmRmMTkzMjkxOGRiYWE1ZDEyMzQ4NmQ4NmY3ZmIwMDg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-31T00:26:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-31T00:26:15Z"}, "message": "rollup merge of #20328: huonw/attack-of-the-clones\n\nIt's useful to be able to save state.", "tree": {"sha": "e4d6d36b5710f4b707472017c823aefb14cfd960", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4d6d36b5710f4b707472017c823aefb14cfd960"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8820f7a2df1932918dbaa5d123486d86f7fb008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8820f7a2df1932918dbaa5d123486d86f7fb008", "html_url": "https://github.com/rust-lang/rust/commit/a8820f7a2df1932918dbaa5d123486d86f7fb008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8820f7a2df1932918dbaa5d123486d86f7fb008/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "899eb65b29bf666b05b155a3d4cc6002ac8cb26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/899eb65b29bf666b05b155a3d4cc6002ac8cb26a", "html_url": "https://github.com/rust-lang/rust/commit/899eb65b29bf666b05b155a3d4cc6002ac8cb26a"}, {"sha": "b7832ed0b42a2d6512e3f8d09605986237f02ed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7832ed0b42a2d6512e3f8d09605986237f02ed5", "html_url": "https://github.com/rust-lang/rust/commit/b7832ed0b42a2d6512e3f8d09605986237f02ed5"}], "stats": {"total": 133, "additions": 130, "deletions": 3}, "files": [{"sha": "b2dba59c977a3525bcf9836fb28b86db8c6040ff", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -563,6 +563,13 @@ pub struct Iter <'a, T: 'a> {\n     iter: slice::Iter<'a, T>,\n }\n \n+// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+impl<'a, T> Clone for Iter<'a, T> {\n+    fn clone(&self) -> Iter<'a, T> {\n+        Iter { iter: self.iter.clone() }\n+    }\n+}\n+\n impl<'a, T> Iterator<&'a T> for Iter<'a, T> {\n     #[inline]\n     fn next(&mut self) -> Option<&'a T> { self.iter.next() }"}, {"sha": "74ff6d90da7a044cdc30519b5ae6dd7c11d0b57c", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -1014,6 +1014,7 @@ impl cmp::PartialEq for Bitv {\n impl cmp::Eq for Bitv {}\n \n /// An iterator for `Bitv`.\n+#[deriving(Clone)]\n pub struct Bits<'a> {\n     bitv: &'a Bitv,\n     next_idx: uint,\n@@ -1747,12 +1748,14 @@ impl<S: hash::Writer> hash::Hash<S> for BitvSet {\n }\n \n /// An iterator for `BitvSet`.\n+#[deriving(Clone)]\n pub struct BitPositions<'a> {\n     set: &'a BitvSet,\n     next_idx: uint\n }\n \n /// An iterator combining two `BitvSet` iterators.\n+#[deriving(Clone)]\n pub struct TwoBitPositions<'a> {\n     set: &'a BitvSet,\n     other: &'a BitvSet,"}, {"sha": "b484fc41ff6e5bed9e43cbdc8783749e66a949de", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -213,6 +213,16 @@ pub struct Iter<E> {\n     bits: uint,\n }\n \n+// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+impl<E> Clone for Iter<E> {\n+    fn clone(&self) -> Iter<E> {\n+        Iter {\n+            index: self.index,\n+            bits: self.bits,\n+        }\n+    }\n+}\n+\n impl<E:CLike> Iter<E> {\n     fn new(bits: uint) -> Iter<E> {\n         Iter { index: 0, bits: bits }"}, {"sha": "7f43f8f2e0d181141466101669818f9c30f864e5", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -1135,6 +1135,17 @@ pub struct Iter<'a, T:'a> {\n     head: uint\n }\n \n+// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+impl<'a, T> Clone for Iter<'a, T> {\n+    fn clone(&self) -> Iter<'a, T> {\n+        Iter {\n+            ring: self.ring,\n+            tail: self.tail,\n+            head: self.head\n+        }\n+    }\n+}\n+\n impl<'a, T> Iterator<&'a T> for Iter<'a, T> {\n     #[inline]\n     fn next(&mut self) -> Option<&'a T> {"}, {"sha": "0c894d3cc46cd8701199d53717e750ec3c720fac", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -155,6 +155,7 @@ impl<'a, T: Clone, V: AsSlice<T>> VectorVector<T> for [V] {\n ///\n /// The last generated swap is always (0, 1), and it returns the\n /// sequence to its initial order.\n+#[deriving(Clone)]\n pub struct ElementSwaps {\n     sdir: Vec<SizeDirection>,\n     /// If `true`, emit the last swap that returns the sequence to initial\n@@ -177,11 +178,11 @@ impl ElementSwaps {\n     }\n }\n \n-#[deriving(Copy)]\n+#[deriving(Copy, Clone)]\n enum Direction { Pos, Neg }\n \n /// An `Index` and `Direction` together.\n-#[deriving(Copy)]\n+#[deriving(Copy, Clone)]\n struct SizeDirection {\n     size: uint,\n     dir: Direction,\n@@ -247,6 +248,7 @@ impl Iterator<(uint, uint)> for ElementSwaps {\n /// swap applied.\n ///\n /// Generates even and odd permutations alternately.\n+#[deriving(Clone)]\n pub struct Permutations<T> {\n     swaps: ElementSwaps,\n     v: Vec<T>,"}, {"sha": "99d4e18fb87669283196d682772fe8c63236b6da", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -672,6 +672,17 @@ pub struct Iter<'a, V:'a> {\n     iter: slice::Iter<'a, Option<V>>\n }\n \n+// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+impl<'a, V> Clone for Iter<'a, V> {\n+    fn clone(&self) -> Iter<'a, V> {\n+        Iter {\n+            front: self.front,\n+            back: self.back,\n+            iter: self.iter.clone()\n+        }\n+    }\n+}\n+\n iterator! { impl Iter -> (uint, &'a V), as_ref }\n double_ended_iterator! { impl Iter -> (uint, &'a V), as_ref }\n \n@@ -691,11 +702,29 @@ pub struct Keys<'a, V: 'a> {\n     iter: Map<(uint, &'a V), uint, Iter<'a, V>, fn((uint, &'a V)) -> uint>\n }\n \n+// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+impl<'a, V> Clone for Keys<'a, V> {\n+    fn clone(&self) -> Keys<'a, V> {\n+        Keys {\n+            iter: self.iter.clone()\n+        }\n+    }\n+}\n+\n /// An iterator over the values of a map.\n pub struct Values<'a, V: 'a> {\n     iter: Map<(uint, &'a V), &'a V, Iter<'a, V>, fn((uint, &'a V)) -> &'a V>\n }\n \n+// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+impl<'a, V> Clone for Values<'a, V> {\n+    fn clone(&self) -> Values<'a, V> {\n+        Values {\n+            iter: self.iter.clone()\n+        }\n+    }\n+}\n+\n /// A consuming iterator over the key-value pairs of a map.\n pub struct IntoIter<V> {\n     iter: FilterMap<"}, {"sha": "f0151dda8d71e57c12700a27c22a6d53efeee573", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -430,11 +430,13 @@ impl Char for char {\n \n /// An iterator over the characters that represent a `char`, as escaped by\n /// Rust's unicode escaping rules.\n+#[deriving(Clone)]\n pub struct EscapeUnicode {\n     c: char,\n     state: EscapeUnicodeState\n }\n \n+#[deriving(Clone)]\n enum EscapeUnicodeState {\n     Backslash,\n     Type,\n@@ -486,10 +488,12 @@ impl Iterator<char> for EscapeUnicode {\n \n /// An iterator over the characters that represent a `char`, escaped\n /// for maximum portability.\n+#[deriving(Clone)]\n pub struct EscapeDefault {\n     state: EscapeDefaultState\n }\n \n+#[deriving(Clone)]\n enum EscapeDefaultState {\n     Backslash(char),\n     Char(char),\n@@ -513,4 +517,3 @@ impl Iterator<char> for EscapeDefault {\n         }\n     }\n }\n-"}, {"sha": "51c234631550cf9c1e57c78398421614dff5cb70", "filename": "src/libregex/re.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -539,6 +539,7 @@ impl Regex {\n \n }\n \n+#[deriving(Clone)]\n pub enum NamesIter<'a> {\n     NamesIterNative(::std::slice::Iter<'a, Option<&'static str>>),\n     NamesIterDynamic(::std::slice::Iter<'a, Option<String>>)\n@@ -595,6 +596,7 @@ impl<F> Replacer for F where F: FnMut(&Captures) -> String {\n ///\n /// `'r` is the lifetime of the compiled expression and `'t` is the lifetime\n /// of the string being split.\n+#[deriving(Clone)]\n pub struct RegexSplits<'r, 't> {\n     finder: FindMatches<'r, 't>,\n     last: uint,\n@@ -628,6 +630,7 @@ impl<'r, 't> Iterator<&'t str> for RegexSplits<'r, 't> {\n ///\n /// `'r` is the lifetime of the compiled expression and `'t` is the lifetime\n /// of the string being split.\n+#[deriving(Clone)]\n pub struct RegexSplitsN<'r, 't> {\n     splits: RegexSplits<'r, 't>,\n     cur: uint,\n@@ -791,6 +794,7 @@ impl<'t> Captures<'t> {\n /// expression.\n ///\n /// `'t` is the lifetime of the matched text.\n+#[deriving(Clone)]\n pub struct SubCaptures<'t> {\n     idx: uint,\n     caps: &'t Captures<'t>,\n@@ -813,6 +817,7 @@ impl<'t> Iterator<&'t str> for SubCaptures<'t> {\n /// Positions are byte indices in terms of the original string matched.\n ///\n /// `'t` is the lifetime of the matched text.\n+#[deriving(Clone)]\n pub struct SubCapturesPos<'t> {\n     idx: uint,\n     caps: &'t Captures<'t>,\n@@ -836,6 +841,7 @@ impl<'t> Iterator<Option<(uint, uint)>> for SubCapturesPos<'t> {\n ///\n /// `'r` is the lifetime of the compiled expression and `'t` is the lifetime\n /// of the matched string.\n+#[deriving(Clone)]\n pub struct FindCaptures<'r, 't> {\n     re: &'r Regex,\n     search: &'t str,\n@@ -878,6 +884,7 @@ impl<'r, 't> Iterator<Captures<'t>> for FindCaptures<'r, 't> {\n ///\n /// `'r` is the lifetime of the compiled expression and `'t` is the lifetime\n /// of the matched string.\n+#[deriving(Clone)]\n pub struct FindMatches<'r, 't> {\n     re: &'r Regex,\n     search: &'t str,"}, {"sha": "8dbaab564ba2bfcaf5a633151bcaba5798224ee3", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -486,6 +486,8 @@ fn check_for_null(v: &[u8], buf: *mut libc::c_char) {\n /// External iterator for a CString's bytes.\n ///\n /// Use with the `std::iter` module.\n+#[allow(raw_pointer_deriving)]\n+#[deriving(Clone)]\n pub struct CChars<'a> {\n     ptr: *const libc::c_char,\n     marker: marker::ContravariantLifetime<'a>,"}, {"sha": "8181ea5253f9395faf18bca54b050dbdec1b61c7", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -1319,6 +1319,15 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     inner: table::Iter<'a, K, V>\n }\n \n+// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+impl<'a, K, V> Clone for Entries<'a, K, V> {\n+    fn clone(&self) -> Entries<'a, K, V> {\n+        Entries {\n+            inner: self.inner.clone()\n+        }\n+    }\n+}\n+\n /// HashMap mutable values iterator\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     inner: table::IterMut<'a, K, V>\n@@ -1339,11 +1348,29 @@ pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Map<(&'a K, &'a V), &'a K, Iter<'a, K, V>, fn((&'a K, &'a V)) -> &'a K>\n }\n \n+// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+impl<'a, K, V> Clone for Keys<'a, K, V> {\n+    fn clone(&self) -> Keys<'a, K, V> {\n+        Keys {\n+            inner: self.inner.clone()\n+        }\n+    }\n+}\n+\n /// HashMap values iterator\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Map<(&'a K, &'a V), &'a V, Iter<'a, K, V>, fn((&'a K, &'a V)) -> &'a V>\n }\n \n+// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+impl<'a, K, V> Clone for Values<'a, K, V> {\n+    fn clone(&self) -> Values<'a, K, V> {\n+        Values {\n+            inner: self.inner.clone()\n+        }\n+    }\n+}\n+\n /// HashMap drain iterator\n pub struct Drain<'a, K: 'a, V: 'a> {\n     inner: iter::Map<"}, {"sha": "f5fbfcabcfb71d7232044f846da6c4c036fe2290", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -718,6 +718,18 @@ struct RawBuckets<'a, K, V> {\n     marker: marker::ContravariantLifetime<'a>,\n }\n \n+// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+impl<'a, K, V> Clone for RawBuckets<'a, K, V> {\n+    fn clone(&self) -> RawBuckets<'a, K, V> {\n+        RawBuckets {\n+            raw: self.raw,\n+            hashes_end: self.hashes_end,\n+            marker: marker::ContravariantLifetime,\n+        }\n+    }\n+}\n+\n+\n impl<'a, K, V> Iterator<RawBucket<K, V>> for RawBuckets<'a, K, V> {\n     fn next(&mut self) -> Option<RawBucket<K, V>> {\n         while self.raw.hash != self.hashes_end {\n@@ -775,6 +787,17 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     elems_left: uint,\n }\n \n+// FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+impl<'a, K, V> Clone for Entries<'a, K, V> {\n+    fn clone(&self) -> Entries<'a, K, V> {\n+        Entries {\n+            iter: self.iter.clone(),\n+            elems_left: self.elems_left\n+        }\n+    }\n+}\n+\n+\n /// Iterator over mutable references to entries in a table.\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     iter: RawBuckets<'a, K, V>,"}, {"sha": "e4c31ff8dd321a5f1c515721547667bb6dbf978f", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -558,6 +558,7 @@ pub fn walk_dir(path: &Path) -> IoResult<Directories> {\n }\n \n /// An iterator that walks over a directory\n+#[deriving(Clone)]\n pub struct Directories {\n     stack: Vec<Path>,\n }"}, {"sha": "2a98067c970804ad265491a94bb29cfd55967999", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8820f7a2df1932918dbaa5d123486d86f7fb008/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=a8820f7a2df1932918dbaa5d123486d86f7fb008", "patch": "@@ -163,6 +163,7 @@ impl Writer for MultiWriter {\n \n /// A `Reader` which chains input from multiple `Reader`s, reading each to\n /// completion before moving onto the next.\n+#[deriving(Clone)]\n pub struct ChainedReader<I, R> {\n     readers: I,\n     cur_reader: Option<R>,\n@@ -246,6 +247,7 @@ pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) -> io::IoResult<()> {\n }\n \n /// An adaptor converting an `Iterator<u8>` to a `Reader`.\n+#[deriving(Clone)]\n pub struct IterReader<T> {\n     iter: T,\n }"}]}