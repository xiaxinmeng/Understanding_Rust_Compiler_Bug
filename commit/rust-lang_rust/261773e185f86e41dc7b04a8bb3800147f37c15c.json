{"sha": "261773e185f86e41dc7b04a8bb3800147f37c15c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MTc3M2UxODVmODZlNDFkYzdiMDRhOGJiMzgwMDE0N2YzN2MxNWM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-12T03:07:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-12T03:07:14Z"}, "message": "Rollup merge of #75371 - poliorcetics:intra-doc-links-std-time, r=jyn514\n\nMove to doc links inside std/time.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc", "tree": {"sha": "422ee55f48414dcb06f425a80b2575e593488b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/422ee55f48414dcb06f425a80b2575e593488b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/261773e185f86e41dc7b04a8bb3800147f37c15c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfM1ziCRBK7hj4Ov3rIwAAdHIIAKKOeWdlQl8d4dBy2eaNcvqb\n58/nxsS/N5s05spou4fiCA6iWw6A54s/ULrdhWa2tpsbSSyIjkzpFrxiTeYBH1On\nHRFI5fG9XMeNN0DZPgB8xV0TQVJDoWLLf4p9eNYia8aY+iS7B8X7sEHAN8/NpYtQ\nDuS6P9JAQoz9XJw3ihEYxnVUrgkYu2RpbbTEDz5ELqM6Nya8KDIWwppOvVFrzz5p\ndJzubIKyByMNko8rdMBgx5lBFcIOQT41lhjdwP6lty69axflQtg/F6fXTPQOEG12\nFz+42TdD+vwR4SKmJzUV5r2wJuMFLH5qlHJvt3Pxw8n0OJDiPzGMbYj7NrvXsOI=\n=igzr\n-----END PGP SIGNATURE-----\n", "payload": "tree 422ee55f48414dcb06f425a80b2575e593488b02\nparent c423fdeb7442ae5b62a01ed9de516e85a262f01b\nparent bd01bf92740cd6f000ecc44a9cb57ebb523f0fdf\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597201634 +0900\ncommitter GitHub <noreply@github.com> 1597201634 +0900\n\nRollup merge of #75371 - poliorcetics:intra-doc-links-std-time, r=jyn514\n\nMove to doc links inside std/time.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/261773e185f86e41dc7b04a8bb3800147f37c15c", "html_url": "https://github.com/rust-lang/rust/commit/261773e185f86e41dc7b04a8bb3800147f37c15c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/261773e185f86e41dc7b04a8bb3800147f37c15c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c423fdeb7442ae5b62a01ed9de516e85a262f01b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c423fdeb7442ae5b62a01ed9de516e85a262f01b", "html_url": "https://github.com/rust-lang/rust/commit/c423fdeb7442ae5b62a01ed9de516e85a262f01b"}, {"sha": "bd01bf92740cd6f000ecc44a9cb57ebb523f0fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd01bf92740cd6f000ecc44a9cb57ebb523f0fdf", "html_url": "https://github.com/rust-lang/rust/commit/bd01bf92740cd6f000ecc44a9cb57ebb523f0fdf"}], "stats": {"total": 33, "additions": 5, "deletions": 28}, "files": [{"sha": "969c442884df2f10cfa8f4b0c928ac0eff524ec0", "filename": "library/std/src/time.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/261773e185f86e41dc7b04a8bb3800147f37c15c/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261773e185f86e41dc7b04a8bb3800147f37c15c/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=261773e185f86e41dc7b04a8bb3800147f37c15c", "patch": "@@ -97,7 +97,6 @@ pub use core::time::Duration;\n /// [clock_time_get (Monotonic Clock)]: https://nuxi.nl/cloudabi/#clock_time_get\n ///\n /// **Disclaimer:** These system calls might change over time.\n-///\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct Instant(time::Instant);\n@@ -125,11 +124,6 @@ pub struct Instant(time::Instant);\n /// The size of a `SystemTime` struct may vary depending on the target operating\n /// system.\n ///\n-/// [`Instant`]: ../../std/time/struct.Instant.html\n-/// [`Result`]: ../../std/result/enum.Result.html\n-/// [`Duration`]: ../../std/time/struct.Duration.html\n-/// [`UNIX_EPOCH`]: ../../std/time/constant.UNIX_EPOCH.html\n-///\n /// Example:\n ///\n /// ```no_run\n@@ -176,7 +170,6 @@ pub struct Instant(time::Instant);\n /// [GetSystemTimeAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimeasfiletime\n ///\n /// **Disclaimer:** These system calls might change over time.\n-///\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct SystemTime(time::SystemTime);\n@@ -368,7 +361,7 @@ impl Add<Duration> for Instant {\n     /// This function may panic if the resulting point in time cannot be represented by the\n     /// underlying data structure. See [`checked_add`] for a version without panic.\n     ///\n-    /// [`checked_add`]: ../../std/time/struct.Instant.html#method.checked_add\n+    /// [`checked_add`]: Instant::checked_add\n     fn add(self, other: Duration) -> Instant {\n         self.checked_add(other).expect(\"overflow when adding duration to instant\")\n     }\n@@ -463,11 +456,6 @@ impl SystemTime {\n     /// Returns an [`Err`] if `earlier` is later than `self`, and the error\n     /// contains how far from `self` the time is.\n     ///\n-    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [`Duration`]: ../../std/time/struct.Duration.html\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`Instant`]: ../../std/time/struct.Instant.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -497,11 +485,6 @@ impl SystemTime {\n     /// Returns an [`Err`] if `self` is later than the current system time, and\n     /// the error contains how far from the current system time `self` is.\n     ///\n-    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [`Duration`]: ../../std/time/struct.Duration.html\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    /// [`Instant`]: ../../std/time/struct.Instant.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -544,7 +527,7 @@ impl Add<Duration> for SystemTime {\n     /// This function may panic if the resulting point in time cannot be represented by the\n     /// underlying data structure. See [`checked_add`] for a version without panic.\n     ///\n-    /// [`checked_add`]: ../../std/time/struct.SystemTime.html#method.checked_add\n+    /// [`checked_add`]: SystemTime::checked_add\n     fn add(self, dur: Duration) -> SystemTime {\n         self.checked_add(dur).expect(\"overflow when adding duration to instant\")\n     }\n@@ -589,8 +572,6 @@ impl fmt::Debug for SystemTime {\n /// measurement lies, and using `UNIX_EPOCH + duration` can be used to create a\n /// [`SystemTime`] instance to represent another fixed point in time.\n ///\n-/// [`SystemTime`]: ../../std/time/struct.SystemTime.html\n-///\n /// # Examples\n ///\n /// ```no_run\n@@ -608,13 +589,9 @@ impl SystemTimeError {\n     /// Returns the positive duration which represents how far forward the\n     /// second system time was from the first.\n     ///\n-    /// A `SystemTimeError` is returned from the [`duration_since`] and [`elapsed`]\n-    /// methods of [`SystemTime`] whenever the second system time represents a point later\n-    /// in time than the `self` of the method call.\n-    ///\n-    /// [`duration_since`]: ../../std/time/struct.SystemTime.html#method.duration_since\n-    /// [`elapsed`]: ../../std/time/struct.SystemTime.html#method.elapsed\n-    /// [`SystemTime`]: ../../std/time/struct.SystemTime.html\n+    /// A `SystemTimeError` is returned from the [`SystemTime::duration_since`]\n+    /// and [`SystemTime::elapsed`] methods whenever the second system time\n+    /// represents a point later in time than the `self` of the method call.\n     ///\n     /// # Examples\n     ///"}]}