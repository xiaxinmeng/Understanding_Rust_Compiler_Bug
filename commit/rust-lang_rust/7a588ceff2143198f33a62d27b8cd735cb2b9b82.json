{"sha": "7a588ceff2143198f33a62d27b8cd735cb2b9b82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNTg4Y2VmZjIxNDMxOThmMzNhNjJkMjdiOGNkNzM1Y2IyYjliODI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-26T14:01:36Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-26T14:01:36Z"}, "message": "Rename a few typeck method-related structures to UpperCamelCase.", "tree": {"sha": "4f5f840eaeca31e15dd8ff79e3b89c49be05c0bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f5f840eaeca31e15dd8ff79e3b89c49be05c0bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a588ceff2143198f33a62d27b8cd735cb2b9b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a588ceff2143198f33a62d27b8cd735cb2b9b82", "html_url": "https://github.com/rust-lang/rust/commit/7a588ceff2143198f33a62d27b8cd735cb2b9b82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a588ceff2143198f33a62d27b8cd735cb2b9b82/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c41f993d390a0a8d9f42cfca4f365b6f93d0c26", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c41f993d390a0a8d9f42cfca4f365b6f93d0c26", "html_url": "https://github.com/rust-lang/rust/commit/6c41f993d390a0a8d9f42cfca4f365b6f93d0c26"}], "stats": {"total": 234, "additions": 115, "deletions": 119}, "files": [{"sha": "5af00d5e6c36bfe72a13fc97ee46194e324a6d59", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -50,7 +50,7 @@ use writer = serialize::ebml::writer;\n // Auxiliary maps of things to be encoded\n pub struct Maps {\n     root_map: middle::borrowck::root_map,\n-    method_map: middle::typeck::method_map,\n+    method_map: middle::typeck::MethodMap,\n     vtable_map: middle::typeck::vtable_map,\n     capture_map: middle::moves::CaptureMap,\n }\n@@ -579,25 +579,23 @@ impl tr for moves::CaptureVar {\n impl tr for method_origin {\n     fn tr(&self, xcx: @ExtendedDecodeContext) -> method_origin {\n         match *self {\n-          typeck::method_static(did) => {\n-              typeck::method_static(did.tr(xcx))\n-          }\n-          typeck::method_param(ref mp) => {\n-            typeck::method_param(\n-                typeck::method_param {\n-                    trait_id: mp.trait_id.tr(xcx),\n-                    .. *mp\n-                }\n-            )\n-          }\n-          typeck::method_object(ref mo) => {\n-            typeck::method_object(\n-                typeck::method_object {\n-                    trait_id: mo.trait_id.tr(xcx),\n-                    .. *mo\n-                }\n-            )\n-          }\n+            typeck::MethodStatic(did) => typeck::MethodStatic(did.tr(xcx)),\n+            typeck::MethodParam(ref mp) => {\n+                typeck::MethodParam(\n+                    typeck::MethodParam {\n+                        trait_id: mp.trait_id.tr(xcx),\n+                        .. *mp\n+                    }\n+                )\n+            }\n+            typeck::MethodObject(ref mo) => {\n+                typeck::MethodObject(\n+                    typeck::MethodObject {\n+                        trait_id: mo.trait_id.tr(xcx),\n+                        .. *mo\n+                    }\n+                )\n+            }\n         }\n     }\n }"}, {"sha": "94c3867b31845f377a7d5e0d2c9b09ea79161bf8", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -70,7 +70,7 @@ impl Visitor<()> for BorrowckCtxt {\n }\n \n pub fn check_crate(tcx: ty::ctxt,\n-                   method_map: typeck::method_map,\n+                   method_map: typeck::MethodMap,\n                    moves_map: moves::MovesMap,\n                    moved_variables_set: moves::MovedVariablesSet,\n                    capture_map: moves::CaptureMap,\n@@ -156,7 +156,7 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n \n pub struct BorrowckCtxt {\n     tcx: ty::ctxt,\n-    method_map: typeck::method_map,\n+    method_map: typeck::MethodMap,\n     moves_map: moves::MovesMap,\n     moved_variables_set: moves::MovedVariablesSet,\n     capture_map: moves::CaptureMap,\n@@ -909,7 +909,7 @@ impl Repr for LoanPath {\n \n struct TcxTyper {\n     tcx: ty::ctxt,\n-    method_map: typeck::method_map,\n+    method_map: typeck::MethodMap,\n }\n \n impl mc::Typer for TcxTyper {"}, {"sha": "35368645eb3281604fd506ca4ba1a35c0192c396", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -565,7 +565,7 @@ impl MoveData {\n impl FlowedMoveData {\n     pub fn new(move_data: MoveData,\n                tcx: ty::ctxt,\n-               method_map: typeck::method_map,\n+               method_map: typeck::MethodMap,\n                id_range: ast_util::IdRange,\n                body: &ast::Block)\n                -> FlowedMoveData {"}, {"sha": "6eed827415d9562eefe65c370f99a1b5ea81a063", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -19,7 +19,7 @@ use syntax::opt_vec;\n \n struct CFGBuilder {\n     tcx: ty::ctxt,\n-    method_map: typeck::method_map,\n+    method_map: typeck::MethodMap,\n     exit_map: HashMap<ast::NodeId, CFGIndex>,\n     graph: CFGGraph,\n     loop_scopes: ~[LoopScope],\n@@ -32,7 +32,7 @@ struct LoopScope {\n }\n \n pub fn construct(tcx: ty::ctxt,\n-                 method_map: typeck::method_map,\n+                 method_map: typeck::MethodMap,\n                  blk: &ast::Block) -> CFG {\n     let mut cfg_builder = CFGBuilder {\n         exit_map: HashMap::new(),"}, {"sha": "d6d54b604c8c5295b9d7a4c541dcf14e0b31563b", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -54,7 +54,7 @@ pub struct CFGIndices {\n \n impl CFG {\n     pub fn new(tcx: ty::ctxt,\n-               method_map: typeck::method_map,\n+               method_map: typeck::MethodMap,\n                blk: &ast::Block) -> CFG {\n         construct::construct(tcx, method_map, blk)\n     }"}, {"sha": "f6d4585b0fee8ad3896ff1005e957586a5532862", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -23,7 +23,7 @@ use syntax::visit;\n struct CheckCrateVisitor {\n     sess: Session,\n     def_map: resolve::DefMap,\n-    method_map: typeck::method_map,\n+    method_map: typeck::MethodMap,\n     tcx: ty::ctxt,\n }\n \n@@ -43,7 +43,7 @@ impl Visitor<bool> for CheckCrateVisitor {\n pub fn check_crate(sess: Session,\n                    krate: &Crate,\n                    def_map: resolve::DefMap,\n-                   method_map: typeck::method_map,\n+                   method_map: typeck::MethodMap,\n                    tcx: ty::ctxt) {\n     let mut v = CheckCrateVisitor {\n         sess: sess,\n@@ -102,7 +102,7 @@ pub fn check_pat(v: &mut CheckCrateVisitor, p: &Pat, _is_const: bool) {\n pub fn check_expr(v: &mut CheckCrateVisitor,\n                   sess: Session,\n                   def_map: resolve::DefMap,\n-                  method_map: typeck::method_map,\n+                  method_map: typeck::MethodMap,\n                   tcx: ty::ctxt,\n                   e: &Expr,\n                   is_const: bool) {"}, {"sha": "7292633eec081f3bf68b6288fb05724a7a012de5", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -15,7 +15,7 @@ use middle::const_eval::{eval_const_expr, const_val, const_bool, const_float};\n use middle::pat_util::*;\n use middle::ty::*;\n use middle::ty;\n-use middle::typeck::method_map;\n+use middle::typeck::MethodMap;\n use middle::moves;\n use util::ppaux::ty_to_str;\n \n@@ -31,7 +31,7 @@ use syntax::visit::{Visitor, FnKind};\n \n struct MatchCheckCtxt {\n     tcx: ty::ctxt,\n-    method_map: method_map,\n+    method_map: MethodMap,\n     moves_map: moves::MovesMap\n }\n \n@@ -52,7 +52,7 @@ impl Visitor<()> for CheckMatchVisitor {\n }\n \n pub fn check_crate(tcx: ty::ctxt,\n-                   method_map: method_map,\n+                   method_map: MethodMap,\n                    moves_map: moves::MovesMap,\n                    krate: &Crate) {\n     let cx = @MatchCheckCtxt {tcx: tcx,"}, {"sha": "9e6833a4e672e513f179b39d8f17f7176caf01f8", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -32,7 +32,7 @@ use util::ppaux::Repr;\n #[deriving(Clone)]\n pub struct DataFlowContext<O> {\n     priv tcx: ty::ctxt,\n-    priv method_map: typeck::method_map,\n+    priv method_map: typeck::MethodMap,\n \n     /// the data flow operator\n     priv oper: O,\n@@ -122,7 +122,7 @@ impl<O:DataFlowOperator> pprust::PpAnn for DataFlowContext<O> {\n \n impl<O:DataFlowOperator> DataFlowContext<O> {\n     pub fn new(tcx: ty::ctxt,\n-               method_map: typeck::method_map,\n+               method_map: typeck::MethodMap,\n                oper: O,\n                id_range: IdRange,\n                bits_per_id: uint) -> DataFlowContext<O> {"}, {"sha": "15f42b1293e24ee395fb3110239e51ca330980d1", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -49,14 +49,14 @@ fn should_explore(tcx: ty::ctxt, def_id: ast::DefId) -> bool {\n \n struct MarkSymbolVisitor {\n     worklist: ~[ast::NodeId],\n-    method_map: typeck::method_map,\n+    method_map: typeck::MethodMap,\n     tcx: ty::ctxt,\n     live_symbols: ~HashSet<ast::NodeId>,\n }\n \n impl MarkSymbolVisitor {\n     fn new(tcx: ty::ctxt,\n-           method_map: typeck::method_map,\n+           method_map: typeck::MethodMap,\n            worklist: ~[ast::NodeId]) -> MarkSymbolVisitor {\n         MarkSymbolVisitor {\n             worklist: worklist,\n@@ -96,18 +96,18 @@ impl MarkSymbolVisitor {\n         match method_map.get().find(id) {\n             Some(&origin) => {\n                 match origin {\n-                    typeck::method_static(def_id) => {\n+                    typeck::MethodStatic(def_id) => {\n                         match ty::provided_source(self.tcx, def_id) {\n                             Some(p_did) => self.check_def_id(p_did),\n                             None => self.check_def_id(def_id)\n                         }\n                     }\n-                    typeck::method_param(typeck::method_param {\n+                    typeck::MethodParam(typeck::MethodParam {\n                         trait_id: trait_id,\n                         method_num: index,\n                         ..\n                     })\n-                    | typeck::method_object(typeck::method_object {\n+                    | typeck::MethodObject(typeck::MethodObject {\n                         trait_id: trait_id,\n                         method_num: index,\n                         ..\n@@ -285,7 +285,7 @@ fn create_and_seed_worklist(tcx: ty::ctxt,\n }\n \n fn find_live(tcx: ty::ctxt,\n-             method_map: typeck::method_map,\n+             method_map: typeck::MethodMap,\n              exported_items: &privacy::ExportedItems,\n              reachable_symbols: &HashSet<ast::NodeId>,\n              krate: &ast::Crate)\n@@ -408,7 +408,7 @@ impl Visitor<()> for DeadVisitor {\n }\n \n pub fn check_crate(tcx: ty::ctxt,\n-                   method_map: typeck::method_map,\n+                   method_map: typeck::MethodMap,\n                    exported_items: &privacy::ExportedItems,\n                    reachable_symbols: &HashSet<ast::NodeId>,\n                    krate: &ast::Crate) {"}, {"sha": "4c0b4c6922e327aeb53aef6f8c1f75adfeab049e", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -12,7 +12,7 @@\n /// `unsafe`.\n \n use middle::ty;\n-use middle::typeck::method_map;\n+use middle::typeck::MethodMap;\n use util::ppaux;\n \n use syntax::ast;\n@@ -39,7 +39,7 @@ struct EffectCheckVisitor {\n     tcx: ty::ctxt,\n \n     /// The method map.\n-    method_map: method_map,\n+    method_map: MethodMap,\n     /// Whether we're in an unsafe context.\n     unsafe_context: UnsafeContext,\n }\n@@ -190,9 +190,7 @@ impl Visitor<()> for EffectCheckVisitor {\n     }\n }\n \n-pub fn check_crate(tcx: ty::ctxt,\n-                   method_map: method_map,\n-                   krate: &ast::Crate) {\n+pub fn check_crate(tcx: ty::ctxt, method_map: MethodMap, krate: &ast::Crate) {\n     let mut visitor = EffectCheckVisitor {\n         tcx: tcx,\n         method_map: method_map,"}, {"sha": "47d961fd30018ae62c24f96d6218142ff0dc200f", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -53,7 +53,7 @@ use syntax::visit::Visitor;\n #[deriving(Clone)]\n pub struct Context {\n     tcx: ty::ctxt,\n-    method_map: typeck::method_map,\n+    method_map: typeck::MethodMap,\n }\n \n impl Visitor<()> for Context {\n@@ -76,7 +76,7 @@ impl Visitor<()> for Context {\n }\n \n pub fn check_crate(tcx: ty::ctxt,\n-                   method_map: typeck::method_map,\n+                   method_map: typeck::MethodMap,\n                    krate: &Crate) {\n     let mut ctx = Context {\n         tcx: tcx,"}, {"sha": "51a68fe85f8c45981739237f051e58c3e6cc186f", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -405,7 +405,7 @@ struct Context<'a> {\n     tcx: ty::ctxt,\n     // maps from an expression id that corresponds to a method call to the\n     // details of the method to be invoked\n-    method_map: typeck::method_map,\n+    method_map: typeck::MethodMap,\n     // Items exported by the crate; used by the missing_doc lint.\n     exported_items: &'a privacy::ExportedItems,\n     // The id of the current `ast::StructDef` being walked.\n@@ -1415,20 +1415,20 @@ fn check_stability(cx: &Context, e: &ast::Expr) {\n             match method_map.get().find(&e.id) {\n                 Some(&origin) => {\n                     match origin {\n-                        typeck::method_static(def_id) => {\n+                        typeck::MethodStatic(def_id) => {\n                             // If this implements a trait method, get def_id\n                             // of the method inside trait definition.\n                             // Otherwise, use the current def_id (which refers\n                             // to the method inside impl).\n                             ty::trait_method_of_method(\n                                 cx.tcx, def_id).unwrap_or(def_id)\n                         }\n-                        typeck::method_param(typeck::method_param {\n+                        typeck::MethodParam(typeck::MethodParam {\n                             trait_id: trait_id,\n                             method_num: index,\n                             ..\n                         })\n-                        | typeck::method_object(typeck::method_object {\n+                        | typeck::MethodObject(typeck::MethodObject {\n                             trait_id: trait_id,\n                             method_num: index,\n                             ..\n@@ -1646,7 +1646,7 @@ impl<'a> IdVisitingOperation for Context<'a> {\n }\n \n pub fn check_crate(tcx: ty::ctxt,\n-                   method_map: typeck::method_map,\n+                   method_map: typeck::MethodMap,\n                    exported_items: &privacy::ExportedItems,\n                    krate: &ast::Crate) {\n     let mut cx = Context {"}, {"sha": "996a475926987272ea5917bca3956adcd1b737aa", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -174,7 +174,7 @@ impl Visitor<@IrMaps> for LivenessVisitor {\n }\n \n pub fn check_crate(tcx: ty::ctxt,\n-                   method_map: typeck::method_map,\n+                   method_map: typeck::MethodMap,\n                    capture_map: moves::CaptureMap,\n                    krate: &Crate) {\n     let mut visitor = LivenessVisitor;\n@@ -253,7 +253,7 @@ enum VarKind {\n \n struct IrMaps {\n     tcx: ty::ctxt,\n-    method_map: typeck::method_map,\n+    method_map: typeck::MethodMap,\n     capture_map: moves::CaptureMap,\n \n     num_live_nodes: Cell<uint>,\n@@ -266,7 +266,7 @@ struct IrMaps {\n }\n \n fn IrMaps(tcx: ty::ctxt,\n-          method_map: typeck::method_map,\n+          method_map: typeck::MethodMap,\n           capture_map: moves::CaptureMap)\n        -> IrMaps {\n     IrMaps {"}, {"sha": "0e29e8d255e99a16358a359a3850bbabadfa45d8", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -130,7 +130,7 @@ and so on.\n use middle::pat_util::{pat_bindings};\n use middle::freevars;\n use middle::ty;\n-use middle::typeck::method_map;\n+use middle::typeck::MethodMap;\n use util::ppaux;\n use util::ppaux::Repr;\n use util::common::indenter;\n@@ -182,7 +182,7 @@ pub struct MoveMaps {\n #[deriving(Clone)]\n struct VisitContext {\n     tcx: ty::ctxt,\n-    method_map: method_map,\n+    method_map: MethodMap,\n     move_maps: MoveMaps\n }\n \n@@ -208,7 +208,7 @@ impl visit::Visitor<()> for VisitContext {\n }\n \n pub fn compute_moves(tcx: ty::ctxt,\n-                     method_map: method_map,\n+                     method_map: MethodMap,\n                      krate: &Crate) -> MoveMaps\n {\n     let mut visit_cx = VisitContext {"}, {"sha": "2dc2c048d6c760db6a452219b9659d782d09a76a", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -18,8 +18,8 @@ use collections::{HashSet, HashMap};\n use metadata::csearch;\n use middle::resolve;\n use middle::ty;\n-use middle::typeck::{method_map, method_origin, method_param};\n-use middle::typeck::{method_static, method_object};\n+use middle::typeck::{MethodMap, MethodOrigin, MethodParam};\n+use middle::typeck::{MethodStatic, MethodObject};\n \n use syntax::ast;\n use syntax::ast_map;\n@@ -31,7 +31,7 @@ use syntax::opt_vec;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-type Context<'a> = (&'a method_map, &'a resolve::ExportMap2);\n+type Context<'a> = (&'a MethodMap, &'a resolve::ExportMap2);\n \n /// A set of AST nodes exported by the crate.\n pub type ExportedItems = HashSet<ast::NodeId>;\n@@ -347,7 +347,7 @@ struct PrivacyVisitor<'a> {\n     curitem: ast::NodeId,\n     in_fn: bool,\n     in_foreign: bool,\n-    method_map: &'a method_map,\n+    method_map: &'a MethodMap,\n     parents: HashMap<ast::NodeId, ast::NodeId>,\n     external_exports: resolve::ExternalExports,\n     last_private_map: resolve::LastPrivateMap,\n@@ -738,16 +738,16 @@ impl<'a> PrivacyVisitor<'a> {\n     }\n \n     // Checks that a method is in scope.\n-    fn check_method(&mut self, span: Span, origin: &method_origin,\n+    fn check_method(&mut self, span: Span, origin: MethodOrigin,\n                     ident: ast::Ident) {\n-        match *origin {\n-            method_static(method_id) => {\n+        match origin {\n+            MethodStatic(method_id) => {\n                 self.check_static_method(span, method_id, ident)\n             }\n             // Trait methods are always all public. The only controlling factor\n             // is whether the trait itself is accessible or not.\n-            method_param(method_param { trait_id: trait_id, .. }) |\n-            method_object(method_object { trait_id: trait_id, .. }) => {\n+            MethodParam(MethodParam { trait_id: trait_id, .. }) |\n+            MethodObject(MethodObject { trait_id: trait_id, .. }) => {\n                 self.report_error(self.ensure_public(span, trait_id, None, \"source trait\"));\n             }\n         }\n@@ -1170,7 +1170,7 @@ impl SanePrivacyVisitor {\n }\n \n pub fn check_crate(tcx: ty::ctxt,\n-                   method_map: &method_map,\n+                   method_map: &MethodMap,\n                    exp_map2: &resolve::ExportMap2,\n                    external_exports: resolve::ExternalExports,\n                    last_private_map: resolve::LastPrivateMap,"}, {"sha": "39a51148e1aca575e71c70a3c12a572c74ea5c19", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -86,7 +86,7 @@ struct ReachableContext {\n     tcx: ty::ctxt,\n     // The method map, which links node IDs of method call expressions to the\n     // methods they've been resolved to.\n-    method_map: typeck::method_map,\n+    method_map: typeck::MethodMap,\n     // The set of items which must be exported in the linkage sense.\n     reachable_symbols: @RefCell<HashSet<ast::NodeId>>,\n     // A worklist of item IDs. Each item ID in this worklist will be inlined\n@@ -96,7 +96,7 @@ struct ReachableContext {\n \n struct MarkSymbolVisitor {\n     worklist: @RefCell<~[ast::NodeId]>,\n-    method_map: typeck::method_map,\n+    method_map: typeck::MethodMap,\n     tcx: ty::ctxt,\n     reachable_symbols: @RefCell<HashSet<ast::NodeId>>,\n }\n@@ -189,7 +189,7 @@ impl Visitor<()> for MarkSymbolVisitor {\n \n impl ReachableContext {\n     // Creates a new reachability computation context.\n-    fn new(tcx: ty::ctxt, method_map: typeck::method_map) -> ReachableContext {\n+    fn new(tcx: ty::ctxt, method_map: typeck::MethodMap) -> ReachableContext {\n         ReachableContext {\n             tcx: tcx,\n             method_map: method_map,\n@@ -398,7 +398,7 @@ impl ReachableContext {\n }\n \n pub fn find_reachable(tcx: ty::ctxt,\n-                      method_map: typeck::method_map,\n+                      method_map: typeck::MethodMap,\n                       exported_items: &privacy::ExportedItems)\n                       -> @RefCell<HashSet<ast::NodeId>> {\n     let reachable_context = ReachableContext::new(tcx, method_map);"}, {"sha": "3e893eb28b05d2a4fcca738bf3f5c2207fcd0eb9", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -104,13 +104,13 @@ pub fn trans_method_callee<'a>(\n            callee_id, origin.repr(bcx.tcx()));\n \n     match origin {\n-        typeck::method_static(did) => {\n+        typeck::MethodStatic(did) => {\n             Callee {\n                 bcx: bcx,\n                 data: Fn(callee::trans_fn_ref(bcx, did, callee_id))\n             }\n         }\n-        typeck::method_param(typeck::method_param {\n+        typeck::MethodParam(typeck::MethodParam {\n             trait_id: trait_id,\n             method_num: off,\n             param_num: p,\n@@ -131,7 +131,7 @@ pub fn trans_method_callee<'a>(\n             }\n         }\n \n-        typeck::method_object(ref mt) => {\n+        typeck::MethodObject(ref mt) => {\n             trans_trait_callee(bcx,\n                                callee_id,\n                                mt.real_index,"}, {"sha": "96a6e90810f6a04e12d8d7a20ae28a75db45f83e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -3254,19 +3254,19 @@ pub fn expr_has_ty_params(cx: ctxt, expr: &ast::Expr) -> bool {\n     return node_id_has_type_params(cx, expr.id);\n }\n \n-pub fn method_call_type_param_defs(tcx: ctxt, origin: typeck::method_origin)\n+pub fn method_call_type_param_defs(tcx: ctxt, origin: typeck::MethodOrigin)\n                                    -> Rc<~[TypeParameterDef]> {\n     match origin {\n-        typeck::method_static(did) => {\n+        typeck::MethodStatic(did) => {\n             // n.b.: When we encode impl methods, the bounds\n             // that we encode include both the impl bounds\n             // and then the method bounds themselves...\n             ty::lookup_item_type(tcx, did).generics.type_param_defs\n         }\n-        typeck::method_param(typeck::method_param {\n+        typeck::MethodParam(typeck::MethodParam {\n             trait_id: trt_id,\n             method_num: n_mth, ..}) |\n-        typeck::method_object(typeck::method_object {\n+        typeck::MethodObject(typeck::MethodObject {\n             trait_id: trt_id,\n             method_num: n_mth, ..}) => {\n             // ...trait methods bounds, in contrast, include only the\n@@ -3295,7 +3295,7 @@ pub fn resolve_expr(tcx: ctxt, expr: &ast::Expr) -> ast::Def {\n }\n \n pub fn expr_is_lval(tcx: ctxt,\n-                    method_map: typeck::method_map,\n+                    method_map: typeck::MethodMap,\n                     e: &ast::Expr) -> bool {\n     match expr_kind(tcx, method_map, e) {\n         LvalueExpr => true,\n@@ -3316,7 +3316,7 @@ pub enum ExprKind {\n }\n \n pub fn expr_kind(tcx: ctxt,\n-                 method_map: typeck::method_map,\n+                 method_map: typeck::MethodMap,\n                  expr: &ast::Expr) -> ExprKind {\n     {\n         let method_map = method_map.borrow();"}, {"sha": "e276e6ec5f5373992b10e55ac39ecaa7b9cca786", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -89,8 +89,8 @@ use middle::typeck::check::{structurally_resolved_type};\n use middle::typeck::check::vtable;\n use middle::typeck::check;\n use middle::typeck::infer;\n-use middle::typeck::{method_origin, method_param};\n-use middle::typeck::{method_static, method_object};\n+use middle::typeck::{MethodOrigin, MethodParam};\n+use middle::typeck::{MethodStatic, MethodObject};\n use middle::typeck::{param_numbered, param_self, param_index};\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use util::common::indenter;\n@@ -230,7 +230,7 @@ pub struct Candidate {\n     rcvr_match_condition: RcvrMatchCondition,\n     rcvr_substs: ty::substs,\n     method_ty: @ty::Method,\n-    origin: method_origin,\n+    origin: MethodOrigin,\n }\n \n /// This type represents the conditions under which the receiver is\n@@ -464,7 +464,7 @@ impl<'a> LookupContext<'a> {\n                 rcvr_match_condition: RcvrMatchesIfObject(did),\n                 rcvr_substs: new_trait_ref.substs.clone(),\n                 method_ty: @m,\n-                origin: method_object(method_object {\n+                origin: MethodObject(MethodObject {\n                         trait_id: new_trait_ref.def_id,\n                         object_trait_id: did,\n                         method_num: method_num,\n@@ -518,7 +518,7 @@ impl<'a> LookupContext<'a> {\n                     rcvr_match_condition: RcvrMatchesIfSubtype(self_ty),\n                     rcvr_substs: trait_ref.substs.clone(),\n                     method_ty: m,\n-                    origin: method_param(method_param {\n+                    origin: MethodParam(MethodParam {\n                         trait_id: trait_ref.def_id,\n                         method_num: method_num,\n                         param_num: param,\n@@ -626,7 +626,7 @@ impl<'a> LookupContext<'a> {\n             rcvr_match_condition: RcvrMatchesIfSubtype(impl_ty),\n             rcvr_substs: impl_substs,\n             method_ty: method,\n-            origin: method_static(method.def_id)\n+            origin: MethodStatic(method.def_id)\n         });\n     }\n \n@@ -938,7 +938,7 @@ impl<'a> LookupContext<'a> {\n                        candidate_a, candidate_b);\n                 let candidates_same = match (&candidate_a.origin,\n                                              &candidate_b.origin) {\n-                    (&method_param(ref p1), &method_param(ref p2)) => {\n+                    (&MethodParam(ref p1), &MethodParam(ref p2)) => {\n                         let same_trait = p1.trait_id == p2.trait_id;\n                         let same_method = p1.method_num == p2.method_num;\n                         let same_param = p1.param_num == p2.param_num;\n@@ -1031,7 +1031,7 @@ impl<'a> LookupContext<'a> {\n \n         let fn_sig = &bare_fn_ty.sig;\n         let inputs = match candidate.origin {\n-            method_object(..) => {\n+            MethodObject(..) => {\n                 // For annoying reasons, we've already handled the\n                 // substitution of self for object calls.\n                 let args = fn_sig.inputs.slice_from(1).iter().map(|t| {\n@@ -1154,10 +1154,10 @@ impl<'a> LookupContext<'a> {\n          */\n \n         match candidate.origin {\n-            method_static(..) | method_param(..) => {\n+            MethodStatic(..) | MethodParam(..) => {\n                 return; // not a call to a trait instance\n             }\n-            method_object(..) => {}\n+            MethodObject(..) => {}\n         }\n \n         match candidate.method_ty.explicit_self {\n@@ -1213,14 +1213,14 @@ impl<'a> LookupContext<'a> {\n         // No code can call the finalize method explicitly.\n         let bad;\n         match candidate.origin {\n-            method_static(method_id) => {\n+            MethodStatic(method_id) => {\n                 let destructors = self.tcx().destructors.borrow();\n                 bad = destructors.get().contains(&method_id);\n             }\n             // FIXME: does this properly enforce this on everything now\n             // that self has been merged in? -sully\n-            method_param(method_param { trait_id: trait_id, .. }) |\n-            method_object(method_object { trait_id: trait_id, .. }) => {\n+            MethodParam(MethodParam { trait_id: trait_id, .. }) |\n+            MethodObject(MethodObject { trait_id: trait_id, .. }) => {\n                 let destructor_for_type = self.tcx()\n                                               .destructor_for_type\n                                               .borrow();\n@@ -1316,9 +1316,9 @@ impl<'a> LookupContext<'a> {\n         }\n     }\n \n-    fn report_candidate(&self, idx: uint, origin: &method_origin) {\n+    fn report_candidate(&self, idx: uint, origin: &MethodOrigin) {\n         match *origin {\n-            method_static(impl_did) => {\n+            MethodStatic(impl_did) => {\n                 // If it is an instantiated default method, use the original\n                 // default method for error reporting.\n                 let did = match provided_source(self.tcx(), impl_did) {\n@@ -1327,10 +1327,10 @@ impl<'a> LookupContext<'a> {\n                 };\n                 self.report_static_candidate(idx, did)\n             }\n-            method_param(ref mp) => {\n+            MethodParam(ref mp) => {\n                 self.report_param_candidate(idx, (*mp).trait_id)\n             }\n-            method_object(ref mo) => {\n+            MethodObject(ref mo) => {\n                 self.report_trait_candidate(idx, mo.trait_id)\n             }\n         }"}, {"sha": "f700950d968e02052a47cbf1e3807b52fe888c1f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -106,7 +106,7 @@ use middle::typeck::infer;\n use middle::typeck::rscope::RegionScope;\n use middle::typeck::{lookup_def_ccx};\n use middle::typeck::no_params;\n-use middle::typeck::{require_same_types, method_map, vtable_map};\n+use middle::typeck::{require_same_types, MethodMap, vtable_map};\n use middle::lang_items::TypeIdLangItem;\n use util::common::{block_query, indenter, loop_query};\n use util::ppaux;\n@@ -160,7 +160,7 @@ pub struct Inherited {\n     node_types: RefCell<HashMap<ast::NodeId, ty::t>>,\n     node_type_substs: RefCell<HashMap<ast::NodeId, ty::substs>>,\n     adjustments: RefCell<HashMap<ast::NodeId, @ty::AutoAdjustment>>,\n-    method_map: method_map,\n+    method_map: MethodMap,\n     vtable_map: vtable_map,\n     upvar_borrow_map: RefCell<ty::UpvarBorrowMap>,\n }"}, {"sha": "0a08f744a9cbbde48f9d5b84ee7b058df798f6f4", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -93,22 +93,22 @@ pub enum param_index {\n }\n \n #[deriving(Clone, Encodable, Decodable)]\n-pub enum method_origin {\n+pub enum MethodOrigin {\n     // fully statically resolved method\n-    method_static(ast::DefId),\n+    MethodStatic(ast::DefId),\n \n     // method invoked on a type parameter with a bounded trait\n-    method_param(method_param),\n+    MethodParam(MethodParam),\n \n     // method invoked on a trait instance\n-    method_object(method_object),\n+    MethodObject(MethodObject),\n \n }\n \n // details for a method invoked with a receiver whose type is a type parameter\n // with a bounded trait.\n #[deriving(Clone, Encodable, Decodable)]\n-pub struct method_param {\n+pub struct MethodParam {\n     // the trait containing the method to be invoked\n     trait_id: ast::DefId,\n \n@@ -125,7 +125,7 @@ pub struct method_param {\n \n // details for a method invoked with a receiver whose type is an object\n #[deriving(Clone, Encodable, Decodable)]\n-pub struct method_object {\n+pub struct MethodObject {\n     // the (super)trait containing the method to be invoked\n     trait_id: ast::DefId,\n \n@@ -215,7 +215,7 @@ pub type impl_vtable_map = RefCell<HashMap<ast::DefId, impl_res>>;\n pub struct CrateCtxt {\n     // A mapping from method call sites to traits that have that method.\n     trait_map: resolve::TraitMap,\n-    method_map: method_map,\n+    method_map: MethodMap,\n     vtable_map: vtable_map,\n     tcx: ty::ctxt\n }\n@@ -436,7 +436,7 @@ fn check_for_entry_fn(ccx: &CrateCtxt) {\n pub fn check_crate(tcx: ty::ctxt,\n                    trait_map: resolve::TraitMap,\n                    krate: &ast::Crate)\n-                -> (method_map, vtable_map) {\n+                -> (MethodMap, vtable_map) {\n     let time_passes = tcx.sess.time_passes();\n     let ccx = @CrateCtxt {\n         trait_map: trait_map,"}, {"sha": "9e9647d81a6ba0f6bdb1208f22ca5035bbbfa7f2", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a588ceff2143198f33a62d27b8cd735cb2b9b82/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=7a588ceff2143198f33a62d27b8cd735cb2b9b82", "patch": "@@ -870,35 +870,35 @@ impl Repr for ty::FnSig {\n     }\n }\n \n-impl Repr for typeck::method_origin {\n+impl Repr for typeck::MethodOrigin {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         match self {\n-            &typeck::method_static(def_id) => {\n-                format!(\"method_static({})\", def_id.repr(tcx))\n+            &typeck::MethodStatic(def_id) => {\n+                format!(\"MethodStatic({})\", def_id.repr(tcx))\n             }\n-            &typeck::method_param(ref p) => {\n+            &typeck::MethodParam(ref p) => {\n                 p.repr(tcx)\n             }\n-            &typeck::method_object(ref p) => {\n+            &typeck::MethodObject(ref p) => {\n                 p.repr(tcx)\n             }\n         }\n     }\n }\n \n-impl Repr for typeck::method_param {\n+impl Repr for typeck::MethodParam {\n     fn repr(&self, tcx: ctxt) -> ~str {\n-        format!(\"method_param({},{:?},{:?},{:?})\",\n+        format!(\"MethodParam({},{:?},{:?},{:?})\",\n              self.trait_id.repr(tcx),\n              self.method_num,\n              self.param_num,\n              self.bound_num)\n     }\n }\n \n-impl Repr for typeck::method_object {\n+impl Repr for typeck::MethodObject {\n     fn repr(&self, tcx: ctxt) -> ~str {\n-        format!(\"method_object({},{:?},{:?})\",\n+        format!(\"MethodObject({},{:?},{:?})\",\n              self.trait_id.repr(tcx),\n              self.method_num,\n              self.real_index)"}]}