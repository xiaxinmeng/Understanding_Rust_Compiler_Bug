{"sha": "1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NzhmYmU4YmQ2MGM3ZjllNThmZGE2ZGM3Nzg4ZTVmNDRhZDBmODk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-20T07:32:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-20T07:32:19Z"}, "message": "Merge #3541\n\n3541: Completition for type name? #3418 r=matklad a=slyngbaek\n\nIterate through TupleStructPat's until a MatchArm if\r\none exists. Store in a new is_pat_bind_and_path bool\r\nand allow the `complete_scope` to find matches.\r\n\r\nAdded some tests to ensure it works in simple and nested cases.\n\nCo-authored-by: Steffen Lyngbaek <steffenlyngbaek@gmail.com>", "tree": {"sha": "5dd13a24ef92a10bd686a80bbb2e59b83bf015d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd13a24ef92a10bd686a80bbb2e59b83bf015d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedHGDCRBK7hj4Ov3rIwAAdHIIAHugRqXF4+fEpzP33KPgnuxH\nQ6vQKKQ5tWyUFi3pRiV6nmDwmkATkaO3Av1mm/KS5eiHBNrhVh0vA8PkAc34A+SH\nMgBsoA8U2t0vHROHbfmN/0p8g2sZHohmPPl6ISomHnaGN+SMy9lvh1lPZf5s+ebD\nmhTlKBnAxvaZ8cjkRJgFgjsUNe+VfyNv3CI1UFHGBnOivu/pD6qu5hDbx+qLqLkL\nCtX9Yk3WQuVvjg4WJsg+kBa8ba0iAaDr3WbKkab3HE+v8d7F8RUrQaei5uhJK0OT\n0HQe/OBG72pXswtZBb4okFEKf+VNxjoCS4UcUjE663noGrWFm6p6p70GMd1dA0g=\n=1Lpz\n-----END PGP SIGNATURE-----\n", "payload": "tree 5dd13a24ef92a10bd686a80bbb2e59b83bf015d0\nparent 1ba03c6995015b3143a417ed07437f0c9028a97d\nparent ec24c090063b3b86349f7812b716412d83dad069\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584689539 +0000\ncommitter GitHub <noreply@github.com> 1584689539 +0000\n\nMerge #3541\n\n3541: Completition for type name? #3418 r=matklad a=slyngbaek\n\nIterate through TupleStructPat's until a MatchArm if\r\none exists. Store in a new is_pat_bind_and_path bool\r\nand allow the `complete_scope` to find matches.\r\n\r\nAdded some tests to ensure it works in simple and nested cases.\n\nCo-authored-by: Steffen Lyngbaek <steffenlyngbaek@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89", "html_url": "https://github.com/rust-lang/rust/commit/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ba03c6995015b3143a417ed07437f0c9028a97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba03c6995015b3143a417ed07437f0c9028a97d", "html_url": "https://github.com/rust-lang/rust/commit/1ba03c6995015b3143a417ed07437f0c9028a97d"}, {"sha": "ec24c090063b3b86349f7812b716412d83dad069", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec24c090063b3b86349f7812b716412d83dad069", "html_url": "https://github.com/rust-lang/rust/commit/ec24c090063b3b86349f7812b716412d83dad069"}], "stats": {"total": 146, "additions": 143, "deletions": 3}, "files": [{"sha": "bc8fade6f3de503970f0ea61a3b96bd8fb5ed310", "filename": "crates/ra_ide/src/completion/complete_pattern.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89", "patch": "@@ -55,6 +55,20 @@ mod tests {\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n+            CompletionItem {\n+                label: \"Bar\",\n+                source_range: [246; 246),\n+                delete: [246; 246),\n+                insert: \"Bar\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"E\",\n+                source_range: [246; 246),\n+                delete: [246; 246),\n+                insert: \"E\",\n+                kind: Enum,\n+            },\n             CompletionItem {\n                 label: \"E\",\n                 source_range: [246; 246),\n@@ -69,6 +83,20 @@ mod tests {\n                 insert: \"X\",\n                 kind: EnumVariant,\n             },\n+            CompletionItem {\n+                label: \"X\",\n+                source_range: [246; 246),\n+                delete: [246; 246),\n+                insert: \"X\",\n+                kind: EnumVariant,\n+            },\n+            CompletionItem {\n+                label: \"Z\",\n+                source_range: [246; 246),\n+                delete: [246; 246),\n+                insert: \"Z\",\n+                kind: Const,\n+            },\n             CompletionItem {\n                 label: \"Z\",\n                 source_range: [246; 246),\n@@ -83,6 +111,13 @@ mod tests {\n                 insert: \"m\",\n                 kind: Module,\n             },\n+            CompletionItem {\n+                label: \"m\",\n+                source_range: [246; 246),\n+                delete: [246; 246),\n+                insert: \"m\",\n+                kind: Module,\n+            },\n         ]\n         \"###);\n     }\n@@ -110,6 +145,21 @@ mod tests {\n                 insert: \"E\",\n                 kind: Enum,\n             },\n+            CompletionItem {\n+                label: \"E\",\n+                source_range: [151; 151),\n+                delete: [151; 151),\n+                insert: \"E\",\n+                kind: Enum,\n+            },\n+            CompletionItem {\n+                label: \"m!\",\n+                source_range: [151; 151),\n+                delete: [151; 151),\n+                insert: \"m!($0)\",\n+                kind: Macro,\n+                detail: \"macro_rules! m\",\n+            },\n         ]\n         \"###);\n     }"}, {"sha": "2ca5527331441417a83e195fd41b5c8e231bb09f", "filename": "crates/ra_ide/src/completion/complete_scope.rs", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89", "patch": "@@ -1,13 +1,19 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n use crate::completion::{CompletionContext, Completions};\n+use hir::{ModuleDef, ScopeDef};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_trivial_path {\n+    if !ctx.is_trivial_path && !ctx.is_pat_binding_and_path {\n         return;\n     }\n \n-    ctx.scope().process_all_names(&mut |name, res| acc.add_resolution(ctx, name.to_string(), &res));\n+    ctx.scope().process_all_names(&mut |name, res| match (ctx.is_pat_binding_and_path, &res) {\n+        (true, ScopeDef::ModuleDef(ModuleDef::Function(..))) => (),\n+        (true, ScopeDef::ModuleDef(ModuleDef::Static(..))) => (),\n+        (true, ScopeDef::Local(..)) => (),\n+        _ => acc.add_resolution(ctx, name.to_string(), &res),\n+    });\n }\n \n #[cfg(test)]\n@@ -20,6 +26,79 @@ mod tests {\n         do_completion(ra_fixture, CompletionKind::Reference)\n     }\n \n+    #[test]\n+    fn bind_pat_and_path_ignore_at() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                enum Enum {\n+                    A,\n+                    B,\n+                }\n+                fn quux(x: Option<Enum>) {\n+                    match x {\n+                        None => (),\n+                        Some(en<|> @ Enum::A) => (),\n+                    }\n+                }\n+                \"\n+            ),\n+            @r###\"[]\"###\n+        );\n+    }\n+\n+    #[test]\n+    fn bind_pat_and_path_ignore_ref() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                enum Enum {\n+                    A,\n+                    B,\n+                }\n+                fn quux(x: Option<Enum>) {\n+                    match x {\n+                        None => (),\n+                        Some(ref en<|>) => (),\n+                    }\n+                }\n+                \"\n+            ),\n+            @r###\"[]\"###\n+        );\n+    }\n+\n+    #[test]\n+    fn bind_pat_and_path() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                enum Enum {\n+                    A,\n+                    B,\n+                }\n+                fn quux(x: Option<Enum>) {\n+                    match x {\n+                        None => (),\n+                        Some(En<|>) => (),\n+                    }\n+                }\n+                \"\n+            ),\n+            @r###\"\n+            [\n+                CompletionItem {\n+                    label: \"Enum\",\n+                    source_range: [231; 233),\n+                    delete: [231; 233),\n+                    insert: \"Enum\",\n+                    kind: Enum,\n+                },\n+            ]\n+            \"###\n+        );\n+    }\n+\n     #[test]\n     fn completes_bindings_from_let() {\n         assert_debug_snapshot!("}, {"sha": "319e33b61555bc6a3f46afb165c0df7427deab67", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=1878fbe8bd60c7f9e58fda6dc7788e5f44ad0f89", "patch": "@@ -36,6 +36,9 @@ pub(crate) struct CompletionContext<'a> {\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n     pub(super) is_pat_binding: bool,\n+    // A bind battern which may also be part of a path.\n+    // if let Some(En<|>) = Some(Enum::A)\n+    pub(super) is_pat_binding_and_path: bool,\n     /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n     pub(super) is_trivial_path: bool,\n     /// If not a trivial path, the prefix (qualifier).\n@@ -95,6 +98,7 @@ impl<'a> CompletionContext<'a> {\n             impl_def: None,\n             is_param: false,\n             is_pat_binding: false,\n+            is_pat_binding_and_path: false,\n             is_trivial_path: false,\n             path_prefix: None,\n             after_if: false,\n@@ -188,10 +192,17 @@ impl<'a> CompletionContext<'a> {\n             if let Some(bind_pat) = name.syntax().ancestors().find_map(ast::BindPat::cast) {\n                 let parent = bind_pat.syntax().parent();\n                 if parent.clone().and_then(ast::MatchArm::cast).is_some()\n-                    || parent.and_then(ast::Condition::cast).is_some()\n+                    || parent.clone().and_then(ast::Condition::cast).is_some()\n                 {\n                     self.is_pat_binding = true;\n                 }\n+\n+                if parent.and_then(ast::RecordFieldPatList::cast).is_none()\n+                    && bind_pat.pat().is_none()\n+                    && !bind_pat.is_ref()\n+                {\n+                    self.is_pat_binding_and_path = true;\n+                }\n             }\n             if is_node::<ast::Param>(name.syntax()) {\n                 self.is_param = true;"}]}