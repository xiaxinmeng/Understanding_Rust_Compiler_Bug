{"sha": "b94d421d08da7cf27757abd9a7a6fdf8674a844f", "node_id": "C_kwDOAAsO6NoAKGI5NGQ0MjFkMDhkYTdjZjI3NzU3YWJkOWE3YTZmZGY4Njc0YTg0NGY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-04T20:03:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-30T17:06:30Z"}, "message": "Remove fn_has_self_parameter table.", "tree": {"sha": "2d36bc80304d1259ae99ad9f2931ddd0dc599a94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d36bc80304d1259ae99ad9f2931ddd0dc599a94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b94d421d08da7cf27757abd9a7a6fdf8674a844f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b94d421d08da7cf27757abd9a7a6fdf8674a844f", "html_url": "https://github.com/rust-lang/rust/commit/b94d421d08da7cf27757abd9a7a6fdf8674a844f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b94d421d08da7cf27757abd9a7a6fdf8674a844f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5", "html_url": "https://github.com/rust-lang/rust/commit/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "8e49ced56efef675cd098e3dabc21a8a29d90769", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b94d421d08da7cf27757abd9a7a6fdf8674a844f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d421d08da7cf27757abd9a7a6fdf8674a844f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=b94d421d08da7cf27757abd9a7a6fdf8674a844f", "patch": "@@ -32,7 +32,7 @@ use rustc_session::cstore::{\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnIndex, MacroKind};\n use rustc_span::source_map::{respan, Spanned};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, BytePos, ExpnId, Pos, Span, SyntaxContext, DUMMY_SP};\n \n use proc_macro::bridge::client::ProcMacro;\n@@ -1087,8 +1087,15 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {\n-        self.root.tables.fn_has_self_parameter.get(self, id).is_some()\n+    fn get_fn_has_self_parameter(self, id: DefIndex, sess: &'a Session) -> bool {\n+        self.root\n+            .tables\n+            .fn_arg_names\n+            .get(self, id)\n+            .unwrap_or_else(LazyArray::empty)\n+            .decode((self, sess))\n+            .nth(0)\n+            .map_or(false, |ident| ident.name == kw::SelfLower)\n     }\n \n     fn get_associated_item_def_ids(\n@@ -1105,7 +1112,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .map(move |child_index| self.local_def_id(child_index))\n     }\n \n-    fn get_associated_item(self, id: DefIndex) -> ty::AssocItem {\n+    fn get_associated_item(self, id: DefIndex, sess: &'a Session) -> ty::AssocItem {\n         let name = self.item_name(id);\n \n         let kind = match self.def_kind(id) {\n@@ -1114,7 +1121,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             DefKind::AssocTy => ty::AssocKind::Type,\n             _ => bug!(\"cannot get associated-item of `{:?}`\", self.def_key(id)),\n         };\n-        let has_self = self.get_fn_has_self_parameter(id);\n+        let has_self = self.get_fn_has_self_parameter(id, sess);\n         let container = self.root.tables.assoc_container.get(self, id).unwrap();\n \n         ty::AssocItem {"}, {"sha": "6b447ebd99910ae21f348d34728e24b00095168f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b94d421d08da7cf27757abd9a7a6fdf8674a844f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d421d08da7cf27757abd9a7a6fdf8674a844f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=b94d421d08da7cf27757abd9a7a6fdf8674a844f", "patch": "@@ -233,7 +233,7 @@ provide! { tcx, def_id, other, cdata,\n     associated_item_def_ids => {\n         tcx.arena.alloc_from_iter(cdata.get_associated_item_def_ids(def_id.index, tcx.sess))\n     }\n-    associated_item => { cdata.get_associated_item(def_id.index) }\n+    associated_item => { cdata.get_associated_item(def_id.index, tcx.sess) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     item_attrs => { tcx.arena.alloc_from_iter(cdata.get_item_attrs(def_id.index, tcx.sess)) }\n@@ -535,8 +535,8 @@ impl CStore {\n         )\n     }\n \n-    pub fn fn_has_self_parameter_untracked(&self, def: DefId) -> bool {\n-        self.get_crate_data(def.krate).get_fn_has_self_parameter(def.index)\n+    pub fn fn_has_self_parameter_untracked(&self, def: DefId, sess: &Session) -> bool {\n+        self.get_crate_data(def.krate).get_fn_has_self_parameter(def.index, sess)\n     }\n \n     pub fn crate_source_untracked(&self, cnum: CrateNum) -> Lrc<CrateSource> {"}, {"sha": "578a416ce6badd280e1c3e4dc892ffcbbbeb5759", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b94d421d08da7cf27757abd9a7a6fdf8674a844f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d421d08da7cf27757abd9a7a6fdf8674a844f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=b94d421d08da7cf27757abd9a7a6fdf8674a844f", "patch": "@@ -1335,9 +1335,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 };\n                 self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n                 self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n-                if trait_item.fn_has_self_parameter {\n-                    self.tables.fn_has_self_parameter.set(def_id.index, ());\n-                }\n             }\n             ty::AssocKind::Type => {\n                 self.encode_explicit_item_bounds(def_id);\n@@ -1369,9 +1366,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     hir::Constness::NotConst\n                 };\n                 self.tables.constness.set(def_id.index, constness);\n-                if impl_item.fn_has_self_parameter {\n-                    self.tables.fn_has_self_parameter.set(def_id.index, ());\n-                }\n             }\n             ty::AssocKind::Const | ty::AssocKind::Type => {}\n         }"}, {"sha": "6f849a58580e679550216f06ff690d75e11a8a8f", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b94d421d08da7cf27757abd9a7a6fdf8674a844f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d421d08da7cf27757abd9a7a6fdf8674a844f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=b94d421d08da7cf27757abd9a7a6fdf8674a844f", "patch": "@@ -398,8 +398,6 @@ define_tables! {\n     macro_rules: Table<DefIndex, ()>,\n     macro_definition: Table<DefIndex, LazyValue<ast::MacArgs>>,\n     proc_macro: Table<DefIndex, MacroKind>,\n-    // Slot is full when there is a self parameter.\n-    fn_has_self_parameter: Table<DefIndex, ()>,\n     module_reexports: Table<DefIndex, LazyArray<ModChild>>,\n }\n "}, {"sha": "052d05974cd80ee89398fc30f4edfcc5971365c5", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b94d421d08da7cf27757abd9a7a6fdf8674a844f/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b94d421d08da7cf27757abd9a7a6fdf8674a844f/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=b94d421d08da7cf27757abd9a7a6fdf8674a844f", "patch": "@@ -1030,7 +1030,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.insert_field_names(def_id, field_names);\n             }\n             Res::Def(DefKind::AssocFn, def_id) => {\n-                if cstore.fn_has_self_parameter_untracked(def_id) {\n+                if cstore.fn_has_self_parameter_untracked(def_id, self.r.session) {\n                     self.r.has_self.insert(def_id);\n                 }\n             }"}]}