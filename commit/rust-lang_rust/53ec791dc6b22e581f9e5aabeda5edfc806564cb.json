{"sha": "53ec791dc6b22e581f9e5aabeda5edfc806564cb", "node_id": "C_kwDOAAsO6NoAKDUzZWM3OTFkYzZiMjJlNTgxZjllNWFhYmVkYTVlZGZjODA2NTY0Y2I", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-01T05:20:05Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-10T16:03:08Z"}, "message": "Add `UnescapedName` and make `Name` hold escaped name", "tree": {"sha": "924dcd69aa49e0f41aa02c501090c24a45d4c25d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/924dcd69aa49e0f41aa02c501090c24a45d4c25d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53ec791dc6b22e581f9e5aabeda5edfc806564cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmLz1rwACgkQ4laYqTBY\nYXE7PQ/9GIasuVsCPoDf/K7ryHFOgjN3Cab07PfVTehH/o07QPxOa8w/tb99kuzF\nZlGCdOTtl1Y7lpWFpWqCAt8mBwgiCVDQSQjeM9rs3eyvOsPbKNBn+5wFemuBTlou\nMGB28IRTId0D4lck+V8nR3SgkWNnxOnfYRPPJ2dDQ6RTux2LyW3f9AOfucLQOJAp\nBIIffJJNGshcYscw2nT5QVqj7HlaWLrYGVKJZIb98AfjiAL4Z1ozT4nY6vOLF3mY\nzmQGgvpxB88O0VUEkw/e8L3jJtR+Xbj1Q/UnHNf+++KUHkcKyj8iUNIBQY74VB0x\n3xbdXLnNSEOa3Da8wVv68ZyPQXkMGn3z+3T/Zal5wJCXp2J0b771DGTS458w+IEV\noRG8vjuSXTi0oK4c2q4criqvZl3VcfArVJireb3cybhZA2jXqkV2NjtHlhpteDWB\nw8kZyyYfzkS6yaHPF6VPAjFK3eJvk1xqCHPEbp/Lq7fym4WsT+bjwLy7pM7F6D8X\n6vYvGJPlljo+ACYc0F2wTMfWACNgT/vUj6rN8g0ahMnZ0OiixfFgYalirsvsQ7ZA\nPz4N9M5yZoz+VoaNv/xJyW2VYwyGV400RLsVirJzciNFA8HuXZvOI3q6hMUs0vXf\n/JujHgQRPGbJXXfNtzxaQEvuv27rBQ9gCv5tAUbixfkeIj0h7UY=\n=pAA8\n-----END PGP SIGNATURE-----", "payload": "tree 924dcd69aa49e0f41aa02c501090c24a45d4c25d\nparent e70681f208403b7de148ba027a6d14603aeaa461\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1659331205 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1660147388 +0900\n\nAdd `UnescapedName` and make `Name` hold escaped name\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53ec791dc6b22e581f9e5aabeda5edfc806564cb", "html_url": "https://github.com/rust-lang/rust/commit/53ec791dc6b22e581f9e5aabeda5edfc806564cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53ec791dc6b22e581f9e5aabeda5edfc806564cb/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70681f208403b7de148ba027a6d14603aeaa461", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70681f208403b7de148ba027a6d14603aeaa461", "html_url": "https://github.com/rust-lang/rust/commit/e70681f208403b7de148ba027a6d14603aeaa461"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "18b0793f10ec11be18b844868ed4fe4c91e2382f", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/53ec791dc6b22e581f9e5aabeda5edfc806564cb/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ec791dc6b22e581f9e5aabeda5edfc806564cb/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=53ec791dc6b22e581f9e5aabeda5edfc806564cb", "patch": "@@ -7,13 +7,21 @@ use syntax::{ast, SmolStr, SyntaxKind};\n /// `Name` is a wrapper around string, which is used in hir for both references\n /// and declarations. In theory, names should also carry hygiene info, but we are\n /// not there yet!\n+///\n+/// Note that `Name` holds and prints escaped name i.e. prefixed with \"r#\" when it\n+/// is a raw identifier. Use [`unescaped()`][Name::unescaped] when you need the\n+/// name without \"r#\".\n #[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct Name(Repr);\n \n /// `EscapedName` will add a prefix \"r#\" to the wrapped `Name` when it is a raw identifier\n #[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct EscapedName<'a>(&'a Name);\n \n+/// Wrapper of `Name` to print the name without \"r#\" even when it is a raw identifier.\n+#[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub struct UnescapedName<'a>(&'a Name);\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n enum Repr {\n     Text(SmolStr),\n@@ -49,6 +57,35 @@ impl<'a> fmt::Display for EscapedName<'a> {\n     }\n }\n \n+impl<'a> fmt::Display for UnescapedName<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match &self.0 .0 {\n+            Repr::Text(text) => {\n+                let text = text.strip_prefix(\"r#\").unwrap_or(text);\n+                fmt::Display::fmt(&text, f)\n+            }\n+            Repr::TupleField(idx) => fmt::Display::fmt(&idx, f),\n+        }\n+    }\n+}\n+\n+impl<'a> UnescapedName<'a> {\n+    /// Returns the textual representation of this name as a [`SmolStr`]. Prefer using this over\n+    /// [`ToString::to_string`] if possible as this conversion is cheaper in the general case.\n+    pub fn to_smol_str(&self) -> SmolStr {\n+        match &self.0 .0 {\n+            Repr::Text(it) => {\n+                if let Some(stripped) = it.strip_prefix(\"r#\") {\n+                    SmolStr::new(stripped)\n+                } else {\n+                    it.clone()\n+                }\n+            }\n+            Repr::TupleField(it) => SmolStr::new(&it.to_string()),\n+        }\n+    }\n+}\n+\n impl<'a> EscapedName<'a> {\n     pub fn is_escaped(&self) -> bool {\n         match &self.0 .0 {\n@@ -97,9 +134,11 @@ impl Name {\n \n     /// Resolve a name from the text of token.\n     fn resolve(raw_text: &str) -> Name {\n+        // When `raw_text` starts with \"r#\" but the name does not coincide with any\n+        // keyword, we never need the prefix so we strip it.\n         match raw_text.strip_prefix(\"r#\") {\n-            Some(text) => Name::new_text(SmolStr::new(text)),\n-            None => Name::new_text(raw_text.into()),\n+            Some(text) if !is_raw_identifier(text) => Name::new_text(SmolStr::new(text)),\n+            _ => Name::new_text(raw_text.into()),\n         }\n     }\n \n@@ -145,6 +184,17 @@ impl Name {\n     pub fn escaped(&self) -> EscapedName<'_> {\n         EscapedName(self)\n     }\n+\n+    pub fn unescaped(&self) -> UnescapedName<'_> {\n+        UnescapedName(self)\n+    }\n+\n+    pub fn is_escaped(&self) -> bool {\n+        match &self.0 {\n+            Repr::Text(it) => it.starts_with(\"r#\"),\n+            Repr::TupleField(_) => false,\n+        }\n+    }\n }\n \n pub trait AsName {"}]}