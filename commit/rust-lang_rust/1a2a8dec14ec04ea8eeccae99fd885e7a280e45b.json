{"sha": "1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMmE4ZGVjMTRlYzA0ZWE4ZWVjY2FlOTlmZDg4NWU3YTI4MGU0NWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-02T15:14:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-02T15:14:33Z"}, "message": "Make siblings an inherent method", "tree": {"sha": "f94bb3a8bd47e3612ef29e815532c07d7871fa0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94bb3a8bd47e3612ef29e815532c07d7871fa0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "html_url": "https://github.com/rust-lang/rust/commit/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d323c81d5cc6a198239285abcede2166181d8f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/d323c81d5cc6a198239285abcede2166181d8f39", "html_url": "https://github.com/rust-lang/rust/commit/d323c81d5cc6a198239285abcede2166181d8f39"}], "stats": {"total": 64, "additions": 30, "deletions": 34}, "files": [{"sha": "216d592ff45ab431325baf45fdb9670a31a22060", "filename": "crates/ra_editor/src/code_actions.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs?ref=1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "patch": "@@ -1,12 +1,11 @@\n use join_to_string::join;\n \n use ra_syntax::{\n-    File, TextUnit, TextRange,\n+    File, TextUnit, TextRange, Direction,\n     ast::{self, AstNode, AttrsOwner, TypeParamsOwner, NameOwner},\n     SyntaxKind::{COMMA, WHITESPACE},\n     SyntaxNodeRef,\n     algo::{\n-        Direction, siblings,\n         find_leaf_at_offset,\n         find_covering_node,\n     },\n@@ -24,12 +23,12 @@ pub fn flip_comma<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce()\n     let syntax = file.syntax();\n \n     let comma = find_leaf_at_offset(syntax, offset).find(|leaf| leaf.kind() == COMMA)?;\n-    let left = non_trivia_sibling(comma, Direction::Backward)?;\n-    let right = non_trivia_sibling(comma, Direction::Forward)?;\n+    let prev = non_trivia_sibling(comma, Direction::Prev)?;\n+    let next = non_trivia_sibling(comma, Direction::Next)?;\n     Some(move || {\n         let mut edit = EditBuilder::new();\n-        edit.replace(left.range(), right.text().to_string());\n-        edit.replace(right.range(), left.text().to_string());\n+        edit.replace(prev.range(), next.text().to_string());\n+        edit.replace(next.range(), prev.text().to_string());\n         LocalEdit {\n             edit: edit.finish(),\n             cursor_position: None,\n@@ -129,7 +128,7 @@ pub fn introduce_variable<'a>(file: &'a File, range: TextRange) -> Option<impl F\n }\n \n fn non_trivia_sibling(node: SyntaxNodeRef, direction: Direction) -> Option<SyntaxNodeRef> {\n-    siblings(node, direction)\n+    node.siblings(direction)\n         .skip(1)\n         .find(|node| !node.kind().is_trivia())\n }"}, {"sha": "b00a457b90184da409bb7b2709b19d13f25d67a6", "filename": "crates/ra_editor/src/extend_selection.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs?ref=1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "patch": "@@ -1,7 +1,7 @@\n use ra_syntax::{\n-    File, TextRange, SyntaxNodeRef, TextUnit,\n+    File, TextRange, SyntaxNodeRef, TextUnit, Direction,\n     SyntaxKind::*,\n-    algo::{find_leaf_at_offset, LeafAtOffset, find_covering_node, Direction, siblings},\n+    algo::{find_leaf_at_offset, LeafAtOffset, find_covering_node},\n };\n \n pub fn extend_selection(file: &File, range: TextRange) -> Option<TextRange> {\n@@ -71,12 +71,12 @@ fn pick_best<'a>(l: SyntaxNodeRef<'a>, r: SyntaxNodeRef<'a>) -> SyntaxNodeRef<'a\n }\n \n fn extend_comments(node: SyntaxNodeRef) -> Option<TextRange> {\n-    let left = adj_comments(node, Direction::Backward);\n-    let right = adj_comments(node, Direction::Forward);\n-    if left != right {\n+    let prev = adj_comments(node, Direction::Prev);\n+    let next = adj_comments(node, Direction::Next);\n+    if prev != next {\n         Some(TextRange::from_to(\n-            left.range().start(),\n-            right.range().end(),\n+            prev.range().start(),\n+            next.range().end(),\n         ))\n     } else {\n         None\n@@ -85,7 +85,7 @@ fn extend_comments(node: SyntaxNodeRef) -> Option<TextRange> {\n \n fn adj_comments(node: SyntaxNodeRef, dir: Direction) -> SyntaxNodeRef {\n     let mut res = node;\n-    for node in siblings(node, dir) {\n+    for node in node.siblings(dir) {\n         match node.kind() {\n             COMMENT => res = node,\n             WHITESPACE if !node.leaf_text().unwrap().as_str().contains(\"\\n\\n\") => (),"}, {"sha": "733512368ef574f51a2ffa59962940d7e81e28a6", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "patch": "@@ -3,7 +3,7 @@ use std::collections::HashSet;\n use ra_syntax::{\n     File, TextRange, SyntaxNodeRef,\n     SyntaxKind,\n-    algo::{Direction, siblings},\n+    Direction,\n };\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -62,7 +62,7 @@ fn contiguous_range_for<'a>(\n \n     let left = node;\n     let mut right = node;\n-    for node in siblings(node, Direction::Forward) {\n+    for node in node.siblings(Direction::Next) {\n         visited.insert(node);\n         match node.kind() {\n             SyntaxKind::WHITESPACE if !node.leaf_text().unwrap().as_str().contains(\"\\n\\n\") => (),"}, {"sha": "a6678093d9e6a1d6ab5b4c8a393e07118365c449", "filename": "crates/ra_syntax/src/algo/mod.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs?ref=1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "patch": "@@ -94,22 +94,6 @@ pub fn find_covering_node(root: SyntaxNodeRef, range: TextRange) -> SyntaxNodeRe\n     common_ancestor(left, right)\n }\n \n-#[derive(Debug)]\n-pub enum Direction {\n-    Forward,\n-    Backward,\n-}\n-\n-pub fn siblings<'a>(\n-    node: SyntaxNodeRef<'a>,\n-    direction: Direction\n-) -> impl Iterator<Item=SyntaxNodeRef<'a>> {\n-    generate(Some(node), move |&node| match direction {\n-        Direction::Forward => node.next_sibling(),\n-        Direction::Backward => node.prev_sibling(),\n-    })\n-}\n-\n fn common_ancestor<'a>(n1: SyntaxNodeRef<'a>, n2: SyntaxNodeRef<'a>) -> SyntaxNodeRef<'a> {\n     for p in n1.ancestors() {\n         if n2.ancestors().any(|a| a == p) {"}, {"sha": "738664afd0acd53ad991e61831a1d10183af325f", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "patch": "@@ -51,7 +51,7 @@ pub use {\n     ast::AstNode,\n     lexer::{tokenize, Token},\n     syntax_kinds::SyntaxKind,\n-    yellow::{SyntaxNode, SyntaxNodeRef, OwnedRoot, RefRoot, TreeRoot, SyntaxError},\n+    yellow::{SyntaxNode, SyntaxNodeRef, OwnedRoot, RefRoot, TreeRoot, SyntaxError, Direction},\n     reparsing::AtomEdit,\n };\n "}, {"sha": "710320f47ca182bfcbb5166af2f693e9d86768be", "filename": "crates/ra_syntax/src/yellow/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2a8dec14ec04ea8eeccae99fd885e7a280e45b/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow%2Fmod.rs?ref=1a2a8dec14ec04ea8eeccae99fd885e7a280e45b", "patch": "@@ -58,6 +58,13 @@ impl SyntaxNode {\n         SyntaxNode(::rowan::SyntaxNode::new(green, errors))\n     }\n }\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum Direction {\n+    Next,\n+    Prev,\n+}\n+\n impl<'a> SyntaxNodeRef<'a> {\n     pub fn leaf_text(self) -> Option<&'a SmolStr> {\n         self.0.leaf_text()\n@@ -71,6 +78,12 @@ impl<'a> SyntaxNodeRef<'a> {\n             ::algo::walk::WalkEvent::Exit(_) => None,\n         })\n     }\n+    pub fn siblings(self, direction: Direction) -> impl Iterator<Item=SyntaxNodeRef<'a>> {\n+        ::algo::generate(Some(self), move |&node| match direction {\n+            Direction::Next => node.next_sibling(),\n+            Direction::Prev => node.prev_sibling(),\n+        })\n+    }\n }\n \n impl<R: TreeRoot<RaTypes>> SyntaxNode<R> {"}]}