{"sha": "99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "node_id": "C_kwDOAAsO6NoAKDk5ZmEzN2Q2ZTMxMjY5OWU4Yzc4ODcxNDZjNmUwYTdlZjMxNWMxZjc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-07T12:16:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-07T12:16:03Z"}, "message": "Split namelike into the corresponding completion contexts", "tree": {"sha": "95def6b228ac8000305992ce8a6888e96f0e3463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95def6b228ac8000305992ce8a6888e96f0e3463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "html_url": "https://github.com/rust-lang/rust/commit/99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba", "html_url": "https://github.com/rust-lang/rust/commit/6a045c70296043ce2d00a8c0d7b0ee9264ff4aba"}], "stats": {"total": 231, "additions": 125, "deletions": 106}, "files": [{"sha": "439745ffba690a778ba192055bcd3e799be36409", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "patch": "@@ -9,8 +9,15 @@ use crate::{\n \n /// Complete dot accesses, i.e. fields or methods.\n pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n-    let dot_receiver = match ctx.dot_receiver() {\n-        Some(expr) => expr,\n+    let (dot_access, dot_receiver) = match &ctx.nameref_ctx {\n+        Some(NameRefContext {\n+            dot_access:\n+                Some(\n+                    access @ (DotAccess::Method { receiver: Some(receiver), .. }\n+                    | DotAccess::Field { receiver: Some(receiver), .. }),\n+                ),\n+            ..\n+        }) => (access, receiver),\n         _ => return complete_undotted_self(acc, ctx),\n     };\n \n@@ -19,10 +26,7 @@ pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n         _ => return,\n     };\n \n-    if matches!(\n-        ctx.nameref_ctx,\n-        Some(NameRefContext { dot_access: Some(DotAccess::Method { .. }), .. }),\n-    ) {\n+    if let DotAccess::Method { .. } = dot_access {\n         cov_mark::hit!(test_no_struct_field_completion_for_method_call);\n     } else {\n         complete_fields("}, {"sha": "bbb50cb2657f4ed09180360faa10c6ddc98594d5", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "patch": "@@ -217,10 +217,9 @@ pub(crate) fn position_for_import(\n ) -> Option<SyntaxNode> {\n     Some(\n         match import_candidate {\n-            Some(ImportCandidate::Path(_)) => ctx.name_syntax.as_ref()?.syntax(),\n             Some(ImportCandidate::TraitAssocItem(_)) => ctx.path_qual()?.syntax(),\n             Some(ImportCandidate::TraitMethod(_)) => ctx.dot_receiver()?.syntax(),\n-            None => return ctx.original_token.parent(),\n+            Some(ImportCandidate::Path(_)) | None => return ctx.original_token.parent(),\n         }\n         .clone(),\n     )"}, {"sha": "7c1e77c66e622c6bef8c32d3cf30be7f8ad41a77", "filename": "crates/ide-completion/src/completions/lifetime.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "patch": "@@ -12,17 +12,20 @@ use syntax::{ast, TokenText};\n \n use crate::{\n     completions::Completions,\n-    context::{CompletionContext, LifetimeContext},\n+    context::{CompletionContext, LifetimeContext, LifetimeKind},\n };\n \n /// Completes lifetimes.\n pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext) {\n-    let lp = match &ctx.lifetime_ctx {\n-        Some(LifetimeContext::Lifetime) => None,\n-        Some(LifetimeContext::LifetimeParam { is_decl: false, param }) => Some(param),\n+    let (lp, lifetime) = match &ctx.lifetime_ctx {\n+        Some(LifetimeContext { kind: LifetimeKind::Lifetime, lifetime }) => (None, lifetime),\n+        Some(LifetimeContext {\n+            kind: LifetimeKind::LifetimeParam { is_decl: false, param },\n+            lifetime,\n+        }) => (Some(param), lifetime),\n         _ => return,\n     };\n-    let param_lifetime = match (ctx.lifetime(), lp.and_then(|lp| lp.lifetime())) {\n+    let param_lifetime = match (lifetime, lp.and_then(|lp| lp.lifetime())) {\n         (Some(lt), Some(lp)) if lp == lt.clone() => return,\n         (Some(_), Some(lp)) => Some(lp),\n         _ => None,\n@@ -46,7 +49,7 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n \n /// Completes labels.\n pub(crate) fn complete_label(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !matches!(ctx.lifetime_ctx, Some(LifetimeContext::LabelRef)) {\n+    if !matches!(ctx.lifetime_ctx, Some(LifetimeContext { kind: LifetimeKind::LabelRef, .. })) {\n         return;\n     }\n     ctx.process_all_names_raw(&mut |name, res| {"}, {"sha": "21b108ab1d9157d8936daa9bc54762166f524f29", "filename": "crates/ide-completion/src/completions/mod_.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "patch": "@@ -3,21 +3,23 @@\n use std::iter;\n \n use hir::{Module, ModuleSource};\n-use ide_db::FxHashSet;\n use ide_db::{\n     base_db::{SourceDatabaseExt, VfsPath},\n-    RootDatabase, SymbolKind,\n+    FxHashSet, RootDatabase, SymbolKind,\n };\n use syntax::{ast, AstNode, SyntaxKind};\n \n-use crate::{context::NameContext, CompletionItem};\n-\n-use crate::{context::CompletionContext, Completions};\n+use crate::{\n+    context::{CompletionContext, NameContext, NameKind},\n+    CompletionItem, Completions,\n+};\n \n-/// Complete mod declaration, i.e. `mod $0;`\n+/// Complete mod declaration, i.e. `mod ;`\n pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let mod_under_caret = match &ctx.name_ctx {\n-        Some(NameContext::Module(mod_under_caret)) if mod_under_caret.item_list().is_none() => {\n+        Some(NameContext { kind: NameKind::Module(mod_under_caret), .. })\n+            if mod_under_caret.item_list().is_none() =>\n+        {\n             mod_under_caret\n         }\n         _ => return None,\n@@ -26,7 +28,7 @@ pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n     let _p = profile::span(\"completion::complete_mod\");\n \n     let mut current_module = ctx.module;\n-    // For `mod $0`, `ctx.module` is its parent, but for `mod f$0`, it's `mod f` itself, but we're\n+    // For `mod `, `ctx.module` is its parent, but for `mod f`, it's `mod f` itself, but we're\n     // interested in its parent.\n     if ctx.original_token.kind() == SyntaxKind::IDENT {\n         if let Some(module) = ctx.original_token.ancestors().nth(1).and_then(ast::Module::cast) {"}, {"sha": "eb9449e7614fa27fb16cc0cf7b2ffa6a7123a2bd", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "patch": "@@ -5,16 +5,19 @@ use ide_db::FxHashSet;\n use syntax::{ast, AstNode};\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx, PathKind, PathQualifierCtx},\n+    context::{CompletionContext, NameRefContext, PathCompletionCtx, PathKind, PathQualifierCtx},\n     item::Builder,\n     CompletionRelevance, Completions,\n };\n \n pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext) {\n-    let (&is_absolute_path, qualifier) = match ctx.path_context() {\n-        Some(PathCompletionCtx { kind: PathKind::Use, is_absolute_path, qualifier, .. }) => {\n-            (is_absolute_path, qualifier)\n-        }\n+    let (&is_absolute_path, qualifier, name_ref) = match &ctx.nameref_ctx {\n+        Some(NameRefContext {\n+            path_ctx:\n+                Some(PathCompletionCtx { kind: PathKind::Use, is_absolute_path, qualifier, .. }),\n+            nameref,\n+            ..\n+        }) => (is_absolute_path, qualifier, nameref),\n         _ => return,\n     };\n \n@@ -55,7 +58,7 @@ pub(crate) fn complete_use_tree(acc: &mut Completions, ctx: &CompletionContext)\n                     let module_scope = module.scope(ctx.db, Some(ctx.module));\n                     let unknown_is_current = |name: &hir::Name| {\n                         matches!(\n-                            ctx.name_ref(),\n+                            name_ref,\n                             Some(name_ref) if name_ref.syntax().text() == name.to_smol_str().as_str()\n                         )\n                     };"}, {"sha": "94d920257ffe7132f9c9772f6d3ee0e81602057f", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 86, "deletions": 78, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fa37d6e312699e8c7887146c6e0a7ef315c1f7/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=99fa37d6e312699e8c7887146c6e0a7ef315c1f7", "patch": "@@ -117,16 +117,29 @@ pub(super) struct PatternContext {\n }\n \n #[derive(Debug)]\n-pub(super) enum LifetimeContext {\n+pub(super) struct LifetimeContext {\n+    pub(super) lifetime: Option<ast::Lifetime>,\n+    pub(super) kind: LifetimeKind,\n+}\n+\n+#[derive(Debug)]\n+pub enum LifetimeKind {\n     LifetimeParam { is_decl: bool, param: ast::LifetimeParam },\n     Lifetime,\n     LabelRef,\n     LabelDef,\n }\n \n+#[derive(Debug)]\n+pub struct NameContext {\n+    #[allow(dead_code)]\n+    pub(super) name: Option<ast::Name>,\n+    pub(super) kind: NameKind,\n+}\n+\n #[derive(Debug)]\n #[allow(dead_code)]\n-pub(super) enum NameContext {\n+pub(super) enum NameKind {\n     Const,\n     ConstParam,\n     Enum,\n@@ -150,6 +163,8 @@ pub(super) enum NameContext {\n \n #[derive(Debug)]\n pub(super) struct NameRefContext {\n+    /// NameRef syntax in the original file\n+    pub(super) nameref: Option<ast::NameRef>,\n     pub(super) dot_access: Option<DotAccess>,\n     pub(super) path_ctx: Option<PathCompletionCtx>,\n }\n@@ -203,8 +218,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) function_def: Option<ast::Fn>,\n     /// The parent impl of the cursor position if it exists.\n     pub(super) impl_def: Option<ast::Impl>,\n-    /// The NameLike under the cursor in the original file if it exists.\n-    pub(super) name_syntax: Option<ast::NameLike>,\n     /// Are we completing inside a let statement with a missing semicolon?\n     pub(super) incomplete_let: bool,\n \n@@ -216,6 +229,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) name_ctx: Option<NameContext>,\n     pub(super) lifetime_ctx: Option<LifetimeContext>,\n     pub(super) nameref_ctx: Option<NameRefContext>,\n+\n     pub(super) pattern_ctx: Option<PatternContext>,\n \n     pub(super) existing_derives: FxHashSet<hir::Macro>,\n@@ -240,14 +254,6 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n-    pub(crate) fn name_ref(&self) -> Option<&ast::NameRef> {\n-        self.name_syntax.as_ref().and_then(ast::NameLike::as_name_ref)\n-    }\n-\n-    pub(crate) fn lifetime(&self) -> Option<&ast::Lifetime> {\n-        self.name_syntax.as_ref().and_then(ast::NameLike::as_lifetime)\n-    }\n-\n     pub(crate) fn previous_token_is(&self, kind: SyntaxKind) -> bool {\n         self.previous_token.as_ref().map_or(false, |tok| tok.kind() == kind)\n     }\n@@ -276,7 +282,7 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn expects_variant(&self) -> bool {\n-        matches!(self.name_ctx, Some(NameContext::Variant))\n+        matches!(self.name_ctx, Some(NameContext { kind: NameKind::Variant, .. }))\n     }\n \n     pub(crate) fn expects_non_trait_assoc_item(&self) -> bool {\n@@ -301,7 +307,7 @@ impl<'a> CompletionContext<'a> {\n \n     pub(crate) fn expect_field(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::TupleField))\n-            || matches!(self.name_ctx, Some(NameContext::RecordField))\n+            || matches!(self.name_ctx, Some(NameContext { kind: NameKind::RecordField, .. }))\n     }\n \n     /// Whether the cursor is right after a trait or impl header.\n@@ -338,7 +344,10 @@ impl<'a> CompletionContext<'a> {\n                 self.completion_location,\n                 Some(ImmediateLocation::RecordPat(_) | ImmediateLocation::RecordExpr(_))\n             )\n-            || matches!(self.name_ctx, Some(NameContext::Module(_) | NameContext::Rename))\n+            || matches!(\n+                self.name_ctx,\n+                Some(NameContext { kind: NameKind::Module(_) | NameKind::Rename, .. })\n+            )\n     }\n \n     pub(crate) fn path_context(&self) -> Option<&PathCompletionCtx> {\n@@ -518,7 +527,6 @@ impl<'a> CompletionContext<'a> {\n             expected_type: None,\n             function_def: None,\n             impl_def: None,\n-            name_syntax: None,\n             incomplete_let: false,\n             completion_location: None,\n             prev_sibling: None,\n@@ -862,11 +870,9 @@ impl<'a> CompletionContext<'a> {\n             if let Some(ast::NameLike::NameRef(name_ref)) =\n                 find_node_at_offset(&file_with_fake_ident, offset)\n             {\n-                self.name_syntax =\n-                    find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n-                if let Some((mut nameref_ctx, _)) =\n-                    Self::classify_name_ref(&self.sema, &original_file, name_ref)\n-                {\n+                if let Some(parent) = name_ref.syntax().parent() {\n+                    let (mut nameref_ctx, _) =\n+                        Self::classify_name_ref(&self.sema, &original_file, name_ref, parent);\n                     if let Some(path_ctx) = &mut nameref_ctx.path_ctx {\n                         path_ctx.kind = PathKind::Derive;\n                     }\n@@ -883,8 +889,6 @@ impl<'a> CompletionContext<'a> {\n         self.completion_location =\n             determine_location(&self.sema, original_file, offset, &name_like);\n         self.prev_sibling = determine_prev_sibling(&name_like);\n-        self.name_syntax =\n-            find_node_at_offset(original_file, name_like.syntax().text_range().start());\n         self.impl_def = self\n             .sema\n             .token_ancestors_with_macros(self.token.clone())\n@@ -901,9 +905,9 @@ impl<'a> CompletionContext<'a> {\n                 self.lifetime_ctx = Self::classify_lifetime(&self.sema, original_file, lifetime);\n             }\n             ast::NameLike::NameRef(name_ref) => {\n-                if let Some((nameref_ctx, pat_ctx)) =\n-                    Self::classify_name_ref(&self.sema, original_file, name_ref)\n-                {\n+                if let Some(parent) = name_ref.syntax().parent() {\n+                    let (nameref_ctx, pat_ctx) =\n+                        Self::classify_name_ref(&self.sema, &original_file, name_ref, parent);\n                     self.nameref_ctx = Some(nameref_ctx);\n                     self.pattern_ctx = pat_ctx;\n                 }\n@@ -921,26 +925,29 @@ impl<'a> CompletionContext<'a> {\n \n     fn classify_lifetime(\n         _sema: &Semantics<RootDatabase>,\n-        _original_file: &SyntaxNode,\n+        original_file: &SyntaxNode,\n         lifetime: ast::Lifetime,\n     ) -> Option<LifetimeContext> {\n         let parent = lifetime.syntax().parent()?;\n         if parent.kind() == ERROR {\n             return None;\n         }\n \n-        Some(match_ast! {\n+        let kind = match_ast! {\n             match parent {\n-                ast::LifetimeParam(param) => LifetimeContext::LifetimeParam {\n+                ast::LifetimeParam(param) => LifetimeKind::LifetimeParam {\n                     is_decl: param.lifetime().as_ref() == Some(&lifetime),\n                     param\n                 },\n-                ast::BreakExpr(_) => LifetimeContext::LabelRef,\n-                ast::ContinueExpr(_) => LifetimeContext::LabelRef,\n-                ast::Label(_) => LifetimeContext::LabelDef,\n-                _ => LifetimeContext::Lifetime,\n+                ast::BreakExpr(_) => LifetimeKind::LabelRef,\n+                ast::ContinueExpr(_) => LifetimeKind::LabelRef,\n+                ast::Label(_) => LifetimeKind::LabelDef,\n+                _ => LifetimeKind::Lifetime,\n             }\n-        })\n+        };\n+        let lifetime = find_node_at_offset(&original_file, lifetime.syntax().text_range().start());\n+\n+        Some(LifetimeContext { lifetime, kind })\n     }\n \n     fn classify_name(\n@@ -950,12 +957,12 @@ impl<'a> CompletionContext<'a> {\n     ) -> Option<(NameContext, Option<PatternContext>)> {\n         let parent = name.syntax().parent()?;\n         let mut pat_ctx = None;\n-        let name_ctx = match_ast! {\n+        let kind = match_ast! {\n             match parent {\n-                ast::Const(_) => NameContext::Const,\n-                ast::ConstParam(_) => NameContext::ConstParam,\n-                ast::Enum(_) => NameContext::Enum,\n-                ast::Fn(_) => NameContext::Function,\n+                ast::Const(_) => NameKind::Const,\n+                ast::ConstParam(_) => NameKind::ConstParam,\n+                ast::Enum(_) => NameKind::Enum,\n+                ast::Fn(_) => NameKind::Function,\n                 ast::IdentPat(bind_pat) => {\n                     let is_name_in_field_pat = bind_pat\n                         .syntax()\n@@ -966,49 +973,38 @@ impl<'a> CompletionContext<'a> {\n                         pat_ctx = Some(pattern_context_for(original_file, bind_pat.into()));\n                     }\n \n-                    NameContext::IdentPat\n+                    NameKind::IdentPat\n                 },\n-                ast::MacroDef(_) => NameContext::MacroDef,\n-                ast::MacroRules(_) => NameContext::MacroRules,\n-                ast::Module(module) => NameContext::Module(module),\n-                ast::RecordField(_) => NameContext::RecordField,\n-                ast::Rename(_) => NameContext::Rename,\n-                ast::SelfParam(_) => NameContext::SelfParam,\n-                ast::Static(_) => NameContext::Static,\n-                ast::Struct(_) => NameContext::Struct,\n-                ast::Trait(_) => NameContext::Trait,\n-                ast::TypeAlias(_) => NameContext::TypeAlias,\n-                ast::TypeParam(_) => NameContext::TypeParam,\n-                ast::Union(_) => NameContext::Union,\n-                ast::Variant(_) => NameContext::Variant,\n+                ast::MacroDef(_) => NameKind::MacroDef,\n+                ast::MacroRules(_) => NameKind::MacroRules,\n+                ast::Module(module) => NameKind::Module(module),\n+                ast::RecordField(_) => NameKind::RecordField,\n+                ast::Rename(_) => NameKind::Rename,\n+                ast::SelfParam(_) => NameKind::SelfParam,\n+                ast::Static(_) => NameKind::Static,\n+                ast::Struct(_) => NameKind::Struct,\n+                ast::Trait(_) => NameKind::Trait,\n+                ast::TypeAlias(_) => NameKind::TypeAlias,\n+                ast::TypeParam(_) => NameKind::TypeParam,\n+                ast::Union(_) => NameKind::Union,\n+                ast::Variant(_) => NameKind::Variant,\n                 _ => return None,\n             }\n         };\n-        Some((name_ctx, pat_ctx))\n+        let name = find_node_at_offset(&original_file, name.syntax().text_range().start());\n+        Some((NameContext { name, kind }, pat_ctx))\n     }\n \n     fn classify_name_ref(\n         sema: &Semantics<RootDatabase>,\n         original_file: &SyntaxNode,\n         name_ref: ast::NameRef,\n-    ) -> Option<(NameRefContext, Option<PatternContext>)> {\n-        let parent = name_ref.syntax().parent()?;\n-\n-        let mut nameref_ctx = NameRefContext { dot_access: None, path_ctx: None };\n-\n-        fn find_in_original_file<N: AstNode>(\n-            x: Option<N>,\n-            original_file: &SyntaxNode,\n-        ) -> Option<N> {\n-            fn find_node_with_range<N: AstNode>(\n-                syntax: &SyntaxNode,\n-                range: TextRange,\n-            ) -> Option<N> {\n-                let range = syntax.text_range().intersect(range)?;\n-                syntax.covering_element(range).ancestors().find_map(N::cast)\n-            }\n-            x.map(|e| e.syntax().text_range()).and_then(|r| find_node_with_range(original_file, r))\n-        }\n+        parent: SyntaxNode,\n+    ) -> (NameRefContext, Option<PatternContext>) {\n+        let nameref = find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n+\n+        let mut nameref_ctx = NameRefContext { dot_access: None, path_ctx: None, nameref };\n+\n         let segment = match_ast! {\n             match parent {\n                 ast::PathSegment(segment) => segment,\n@@ -1022,7 +1018,7 @@ impl<'a> CompletionContext<'a> {\n                         _ => false,\n                     };\n                     nameref_ctx.dot_access = Some(DotAccess::Field { receiver, receiver_is_ambiguous_float_literal });\n-                    return Some((nameref_ctx, None));\n+                    return (nameref_ctx, None);\n                 },\n                 ast::MethodCallExpr(method) => {\n                     nameref_ctx.dot_access = Some(\n@@ -1031,9 +1027,9 @@ impl<'a> CompletionContext<'a> {\n                             has_parens: method.arg_list().map_or(false, |it| it.l_paren_token().is_some())\n                         }\n                     );\n-                    return Some((nameref_ctx, None));\n+                    return (nameref_ctx, None);\n                 },\n-                _ => return None,\n+                _ => return (nameref_ctx, None),\n             }\n         };\n \n@@ -1057,7 +1053,7 @@ impl<'a> CompletionContext<'a> {\n                 .unwrap_or(false)\n         };\n \n-        path_ctx.kind = path.syntax().ancestors().find_map(|it| {\n+        let kind = path.syntax().ancestors().find_map(|it| {\n             // using Option<Option<PathKind>> as extra controlflow\n             let kind = match_ast! {\n                 match it {\n@@ -1138,7 +1134,11 @@ impl<'a> CompletionContext<'a> {\n                 }\n             };\n             Some(kind)\n-        }).flatten()?;\n+        }).flatten();\n+        match kind {\n+            Some(kind) => path_ctx.kind = kind,\n+            None => return (nameref_ctx, pat_ctx),\n+        }\n         path_ctx.has_type_args = segment.generic_arg_list().is_some();\n \n         if let Some((path, use_tree_parent)) = path_or_use_tree_qualifier(&path) {\n@@ -1180,7 +1180,7 @@ impl<'a> CompletionContext<'a> {\n             }\n         }\n         nameref_ctx.path_ctx = Some(path_ctx);\n-        Some((nameref_ctx, pat_ctx))\n+        (nameref_ctx, pat_ctx)\n     }\n }\n \n@@ -1235,6 +1235,14 @@ fn pattern_context_for(original_file: &SyntaxNode, pat: ast::Pat) -> PatternCont\n     }\n }\n \n+fn find_in_original_file<N: AstNode>(x: Option<N>, original_file: &SyntaxNode) -> Option<N> {\n+    fn find_node_with_range<N: AstNode>(syntax: &SyntaxNode, range: TextRange) -> Option<N> {\n+        let range = syntax.text_range().intersect(range)?;\n+        syntax.covering_element(range).ancestors().find_map(N::cast)\n+    }\n+    x.map(|e| e.syntax().text_range()).and_then(|r| find_node_with_range(original_file, r))\n+}\n+\n /// Attempts to find `node` inside `syntax` via `node`'s text range.\n fn find_node_in_file<N: AstNode>(syntax: &SyntaxNode, node: &N) -> Option<N> {\n     let syntax_range = syntax.text_range();"}]}