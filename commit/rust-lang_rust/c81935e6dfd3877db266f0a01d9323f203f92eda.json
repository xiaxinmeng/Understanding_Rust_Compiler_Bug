{"sha": "c81935e6dfd3877db266f0a01d9323f203f92eda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MTkzNWU2ZGZkMzg3N2RiMjY2ZjBhMDFkOTMyM2YyMDNmOTJlZGE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-06T08:00:08Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-08T14:39:12Z"}, "message": "make `ConstEvaluatable` more strict", "tree": {"sha": "de33a2c05acad8b98b4318a8f29e3c42de870c02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de33a2c05acad8b98b4318a8f29e3c42de870c02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c81935e6dfd3877db266f0a01d9323f203f92eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c81935e6dfd3877db266f0a01d9323f203f92eda", "html_url": "https://github.com/rust-lang/rust/commit/c81935e6dfd3877db266f0a01d9323f203f92eda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c81935e6dfd3877db266f0a01d9323f203f92eda/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc0bf72545f5d6ac6d9639391da875d5e147d9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc0bf72545f5d6ac6d9639391da875d5e147d9a", "html_url": "https://github.com/rust-lang/rust/commit/7bc0bf72545f5d6ac6d9639391da875d5e147d9a"}], "stats": {"total": 159, "additions": 133, "deletions": 26}, "files": [{"sha": "197e8dd534112c2a6fb7dff39ddfaec1c5a1af1f", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c81935e6dfd3877db266f0a01d9323f203f92eda/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81935e6dfd3877db266f0a01d9323f203f92eda/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c81935e6dfd3877db266f0a01d9323f203f92eda", "patch": "@@ -186,6 +186,19 @@ pub struct Body<'tcx> {\n     /// FIXME(oli-obk): rewrite the promoted during promotion to eliminate the cell components.\n     pub ignore_interior_mut_in_const_validation: bool,\n \n+    /// Does this body use generic parameters. This is used for the `ConstEvaluatable` check.\n+    ///\n+    /// Note that this does not actually mean that this body is not computable right now.\n+    /// The repeat count in the following example is polymorphic, but can still be evaluated\n+    /// without knowing anything about the type parameter `T`.\n+    ///\n+    /// ```rust\n+    /// fn test<T>() {\n+    ///     let _ = [0; std::mem::size_of::<*mut T>()];\n+    /// }\n+    /// ```\n+    pub is_polymorphic: bool,\n+\n     predecessor_cache: PredecessorCache,\n }\n \n@@ -208,7 +221,7 @@ impl<'tcx> Body<'tcx> {\n             local_decls.len()\n         );\n \n-        Body {\n+        let mut body = Body {\n             phase: MirPhase::Build,\n             basic_blocks,\n             source_scopes,\n@@ -224,8 +237,11 @@ impl<'tcx> Body<'tcx> {\n             span,\n             required_consts: Vec::new(),\n             ignore_interior_mut_in_const_validation: false,\n+            is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n-        }\n+        };\n+        body.is_polymorphic = body.has_param_types_or_consts();\n+        body\n     }\n \n     /// Returns a partially initialized MIR body containing only a list of basic blocks.\n@@ -234,7 +250,7 @@ impl<'tcx> Body<'tcx> {\n     /// is only useful for testing but cannot be `#[cfg(test)]` because it is used in a different\n     /// crate.\n     pub fn new_cfg_only(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>) -> Self {\n-        Body {\n+        let mut body = Body {\n             phase: MirPhase::Build,\n             basic_blocks,\n             source_scopes: IndexVec::new(),\n@@ -250,8 +266,11 @@ impl<'tcx> Body<'tcx> {\n             generator_kind: None,\n             var_debug_info: Vec::new(),\n             ignore_interior_mut_in_const_validation: false,\n+            is_polymorphic: false,\n             predecessor_cache: PredecessorCache::new(),\n-        }\n+        };\n+        body.is_polymorphic = body.has_param_types_or_consts();\n+        body\n     }\n \n     #[inline]"}, {"sha": "989c6e6dbc215ace8d095961ede48c9975d4bfad", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c81935e6dfd3877db266f0a01d9323f203f92eda/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81935e6dfd3877db266f0a01d9323f203f92eda/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=c81935e6dfd3877db266f0a01d9323f203f92eda", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{self, Binder, Const, Ty, TypeFoldable};\n use std::marker::PhantomData;\n \n+use super::const_evaluatable;\n use super::project;\n use super::select::SelectionContext;\n use super::wf;\n@@ -458,16 +459,17 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 }\n \n                 ty::PredicateAtom::ConstEvaluatable(def_id, substs) => {\n-                    match self.selcx.infcx().const_eval_resolve(\n-                        obligation.param_env,\n+                    const_evaluatable::is_const_evaluatable(\n+                        self.selcx.infcx(),\n                         def_id,\n                         substs,\n-                        None,\n-                        Some(obligation.cause.span),\n-                    ) {\n-                        Ok(_) => ProcessResult::Changed(vec![]),\n-                        Err(err) => ProcessResult::Error(CodeSelectionError(ConstEvalFailure(err))),\n-                    }\n+                        obligation.param_env,\n+                        obligation.cause.span,\n+                    )\n+                    .map_or_else(\n+                        |e| ProcessResult::Error(CodeSelectionError(ConstEvalFailure(e))),\n+                        |()| ProcessResult::Changed(vec![]),\n+                    )\n                 }\n \n                 ty::PredicateAtom::ConstEquate(c1, c2) => {"}, {"sha": "49dac873cde2d3e9a25341860d4f73f7dee4ca4f", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c81935e6dfd3877db266f0a01d9323f203f92eda/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81935e6dfd3877db266f0a01d9323f203f92eda/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=c81935e6dfd3877db266f0a01d9323f203f92eda", "patch": "@@ -7,6 +7,7 @@ pub mod auto_trait;\n mod chalk_fulfill;\n pub mod codegen;\n mod coherence;\n+mod const_evaluatable;\n mod engine;\n pub mod error_reporting;\n mod fulfill;"}, {"sha": "5a1e1eb89a60cfb47d79a6e2c8205e8b8f5474c4", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c81935e6dfd3877db266f0a01d9323f203f92eda/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81935e6dfd3877db266f0a01d9323f203f92eda/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c81935e6dfd3877db266f0a01d9323f203f92eda", "patch": "@@ -6,6 +6,7 @@ use self::EvaluationResult::*;\n use self::SelectionCandidate::*;\n \n use super::coherence::{self, Conflict};\n+use super::const_evaluatable;\n use super::project;\n use super::project::normalize_with_depth_to;\n use super::util;\n@@ -542,17 +543,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ty::PredicateAtom::ConstEvaluatable(def_id, substs) => {\n-                match self.tcx().const_eval_resolve(\n-                    obligation.param_env,\n+                const_evaluatable::is_const_evaluatable(\n+                    self.infcx,\n                     def_id,\n                     substs,\n-                    None,\n-                    None,\n-                ) {\n-                    Ok(_) => Ok(EvaluatedToOk),\n-                    Err(ErrorHandled::TooGeneric) => Ok(EvaluatedToAmbig),\n-                    Err(_) => Ok(EvaluatedToErr),\n-                }\n+                    obligation.param_env,\n+                    obligation.cause.span,\n+                )\n+                .map(|()| EvaluatedToOk)\n+                .or_else(|e| match e {\n+                    ErrorHandled::TooGeneric => Ok(EvaluatedToAmbig),\n+                    _ => Ok(EvaluatedToErr),\n+                })\n             }\n \n             ty::PredicateAtom::ConstEquate(c1, c2) => {"}, {"sha": "eb0e7f16fa37a82c172ded1c6446bb565b4aa32b", "filename": "src/librustc_trait_selection/traits/const_evaluatable.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Flibrustc_trait_selection%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Flibrustc_trait_selection%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fconst_evaluatable.rs?ref=c81935e6dfd3877db266f0a01d9323f203f92eda", "patch": "@@ -0,0 +1,54 @@\n+use rustc_middle::ty::{self, TypeFoldable};\n+use rustc_infer::infer::InferCtxt;\n+use rustc_middle::ty::subst::SubstsRef;\n+use rustc_span::Span;\n+use rustc_span::def_id::DefId;\n+use rustc_middle::mir::interpret::ErrorHandled;\n+use rustc_hir::def::DefKind;\n+\n+pub fn is_const_evaluatable<'cx, 'tcx>(\n+    infcx: &InferCtxt<'cx, 'tcx>,\n+    def: ty::WithOptConstParam<DefId>,\n+    substs: SubstsRef<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    span: Span,\n+) -> Result<(), ErrorHandled>\n+{\n+    let def_kind = infcx.tcx.def_kind(def.did);\n+    match def_kind {\n+        DefKind::AnonConst => {\n+            let mir_body = if let Some(def) = def.as_const_arg() {\n+                infcx.tcx.optimized_mir_of_const_arg(def)\n+            } else {\n+                infcx.tcx.optimized_mir(def.did)\n+            };\n+            if mir_body.is_polymorphic {\n+                return Err(ErrorHandled::TooGeneric);\n+            }\n+        }\n+        _ => {\n+            if substs.has_param_types_or_consts() {\n+                return Err(ErrorHandled::TooGeneric);\n+            }\n+        }\n+    }\n+\n+    match infcx.const_eval_resolve(\n+        param_env,\n+        def,\n+        substs,\n+        None,\n+        Some(span),\n+    ) {\n+        Ok(_) => Ok(()),\n+        Err(err) => {\n+            if matches!(err, ErrorHandled::TooGeneric) {\n+                infcx.tcx.sess.delay_span_bug(\n+                    span,\n+                    &format!(\"ConstEvaluatable too generic: {:?}, {:?}, {:?}\", def, substs, param_env),\n+                );\n+            }\n+            Err(err)\n+        }\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "a6777632254b71e5ce5412a3719d2e55060220ea", "filename": "src/test/ui/const_evaluatable/associated_const.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Fconst_evaluatable%2Fassociated_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Fconst_evaluatable%2Fassociated_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fassociated_const.rs?ref=c81935e6dfd3877db266f0a01d9323f203f92eda", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+struct Foo<T>(T);\n+impl<T> Foo<T> {\n+    const VALUE: usize = std::mem::size_of::<T>();\n+}\n+\n+fn test<T>() {\n+    let _ = [0; Foo::<u8>::VALUE];\n+}\n+\n+fn main() {}"}, {"sha": "5fe526df5a7417b0f7cb1c8d83dd6688db32d69b", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs?ref=c81935e6dfd3877db266f0a01d9323f203f92eda", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n #![feature(arbitrary_enum_discriminant, core_intrinsics)]\n \n extern crate core;\n@@ -9,6 +7,7 @@ use core::intrinsics::discriminant_value;\n enum MyWeirdOption<T> {\n     None = 0,\n     Some(T) = core::mem::size_of::<*mut T>(),\n+    //~^ ERROR constant expression depends on a generic parameter\n }\n \n fn main() {"}, {"sha": "9aba2ea543f4c17e8f24d944508c6bea828751da", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.stderr?ref=c81935e6dfd3877db266f0a01d9323f203f92eda", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-70453-polymorphic-ctfe.rs:9:15\n+   |\n+LL |     Some(T) = core::mem::size_of::<*mut T>(),\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "6dd1648c9b84c46c1c49a1f20ee7de11c0c775c9", "filename": "src/test/ui/impl-trait/issue-56445.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-56445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-56445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-56445.rs?ref=c81935e6dfd3877db266f0a01d9323f203f92eda", "patch": "@@ -5,8 +5,7 @@\n \n use std::marker::PhantomData;\n \n-pub struct S<'a>\n-{\n+pub struct S<'a> {\n     pub m1: PhantomData<&'a u8>,\n     pub m2: [u8; S::size()],\n }"}, {"sha": "2e4cb9ff7a8253d1fc0595efe73b56cc3853ac32", "filename": "src/test/ui/lazy_normalization_consts/issue-73980.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.rs?ref=c81935e6dfd3877db266f0a01d9323f203f92eda", "patch": "@@ -1,4 +1,3 @@\n-// check-pass\n #![feature(lazy_normalization_consts)]\n #![allow(incomplete_features)]\n \n@@ -10,5 +9,6 @@ impl<T: ?Sized> L<T> {\n }\n \n impl<T> X<T, [u8; L::<T>::S]> {}\n+//~^ ERROR constant expression depends on a generic parameter\n \n fn main() {}"}, {"sha": "5ca11bf55fc583da1fe152d38c84816739d215a3", "filename": "src/test/ui/lazy_normalization_consts/issue-73980.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c81935e6dfd3877db266f0a01d9323f203f92eda/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy_normalization_consts%2Fissue-73980.stderr?ref=c81935e6dfd3877db266f0a01d9323f203f92eda", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-73980.rs:11:9\n+   |\n+LL | impl<T> X<T, [u8; L::<T>::S]> {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}]}