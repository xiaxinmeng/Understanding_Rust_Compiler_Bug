{"sha": "67bac63aa39aa9d2166e769fcef7b1249509bc17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YmFjNjNhYTM5YWE5ZDIxNjZlNzY5ZmNlZjdiMTI0OTUwOWJjMTc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-17T18:54:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-17T18:54:00Z"}, "message": "rustc: Correctly report mutability when stringifying types", "tree": {"sha": "d783d4f499e5c2f610bdacd693e907fcdc45eea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d783d4f499e5c2f610bdacd693e907fcdc45eea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67bac63aa39aa9d2166e769fcef7b1249509bc17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67bac63aa39aa9d2166e769fcef7b1249509bc17", "html_url": "https://github.com/rust-lang/rust/commit/67bac63aa39aa9d2166e769fcef7b1249509bc17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67bac63aa39aa9d2166e769fcef7b1249509bc17/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca66718ce35b27d6c7621d871961648393acaaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca66718ce35b27d6c7621d871961648393acaaf", "html_url": "https://github.com/rust-lang/rust/commit/2ca66718ce35b27d6c7621d871961648393acaaf"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "56a9c226d66b2ba8d1519d49827ad616c181b259", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/67bac63aa39aa9d2166e769fcef7b1249509bc17/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67bac63aa39aa9d2166e769fcef7b1249509bc17/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=67bac63aa39aa9d2166e769fcef7b1249509bc17", "patch": "@@ -147,35 +147,35 @@ fn ty_to_str(&@t typ) -> str {\n     }\n \n     alt (typ.struct) {\n-        case (ty_native)       { s = \"native\";                     }\n-        case (ty_nil)          { s = \"()\";                         }\n-        case (ty_bool)         { s = \"bool\";                       }\n-        case (ty_int)          { s = \"int\";                        }\n-        case (ty_uint)         { s = \"uint\";                       }\n-        case (ty_machine(?tm)) { s = common.ty_mach_to_str(tm);    }\n-        case (ty_char)         { s = \"char\";                       }\n-        case (ty_str)          { s = \"str\";                        }\n-        case (ty_box(?t))      { s = \"@\" + ty_to_str(t);           }\n-        case (ty_vec(?t))      { s = \"vec[\" + ty_to_str(t) + \"]\";  }\n-        case (ty_port(?t))     { s = \"port[\" + ty_to_str(t) + \"]\"; }\n-        case (ty_chan(?t))     { s = \"chan[\" + ty_to_str(t) + \"]\"; }\n-        case (ty_type)         { s = \"type\";                       }\n+        case (ty_native)       { s += \"native\";                     }\n+        case (ty_nil)          { s += \"()\";                         }\n+        case (ty_bool)         { s += \"bool\";                       }\n+        case (ty_int)          { s += \"int\";                        }\n+        case (ty_uint)         { s += \"uint\";                       }\n+        case (ty_machine(?tm)) { s += common.ty_mach_to_str(tm);    }\n+        case (ty_char)         { s += \"char\";                       }\n+        case (ty_str)          { s += \"str\";                        }\n+        case (ty_box(?t))      { s += \"@\" + ty_to_str(t);           }\n+        case (ty_vec(?t))      { s += \"vec[\" + ty_to_str(t) + \"]\";  }\n+        case (ty_port(?t))     { s += \"port[\" + ty_to_str(t) + \"]\"; }\n+        case (ty_chan(?t))     { s += \"chan[\" + ty_to_str(t) + \"]\"; }\n+        case (ty_type)         { s += \"type\";                       }\n \n         case (ty_tup(?elems)) {\n             auto f = ty_to_str;\n             auto strs = _vec.map[@t,str](f, elems);\n-            s = \"tup(\" + _str.connect(strs, \",\") + \")\";\n+            s += \"tup(\" + _str.connect(strs, \",\") + \")\";\n         }\n \n         case (ty_rec(?elems)) {\n             auto f = field_to_str;\n             auto strs = _vec.map[field,str](f, elems);\n-            s = \"rec(\" + _str.connect(strs, \",\") + \")\";\n+            s += \"rec(\" + _str.connect(strs, \",\") + \")\";\n         }\n \n         case (ty_tag(?id, ?tps)) {\n             // The user should never see this if the cname is set properly!\n-            s = \"<tag#\" + util.common.istr(id._0) + \":\" +\n+            s += \"<tag#\" + util.common.istr(id._0) + \":\" +\n                 util.common.istr(id._1) + \">\";\n             if (_vec.len[@t](tps) > 0u) {\n                 auto f = ty_to_str;\n@@ -185,31 +185,31 @@ fn ty_to_str(&@t typ) -> str {\n         }\n \n         case (ty_fn(?proto, ?inputs, ?output)) {\n-            s = fn_to_str(proto, none[ast.ident], inputs, output);\n+            s += fn_to_str(proto, none[ast.ident], inputs, output);\n         }\n \n         case (ty_native_fn(_, ?inputs, ?output)) {\n-            s = fn_to_str(ast.proto_fn, none[ast.ident], inputs, output);\n+            s += fn_to_str(ast.proto_fn, none[ast.ident], inputs, output);\n         }\n \n         case (ty_obj(?meths)) {\n             auto f = method_to_str;\n             auto m = _vec.map[method,str](f, meths);\n-            s = \"obj {\\n\\t\" + _str.connect(m, \"\\n\\t\") + \"\\n}\";\n+            s += \"obj {\\n\\t\" + _str.connect(m, \"\\n\\t\") + \"\\n}\";\n         }\n \n         case (ty_var(?v)) {\n-            s = \"<T\" + util.common.istr(v) + \">\";\n+            s += \"<T\" + util.common.istr(v) + \">\";\n         }\n \n         case (ty_local(?id)) {\n-            s = \"<L\" + util.common.istr(id._0) + \":\" + util.common.istr(id._1)\n-                + \">\";\n+            s += \"<L\" + util.common.istr(id._0) + \":\" +\n+                util.common.istr(id._1) + \">\";\n         }\n \n         case (ty_param(?id)) {\n-            s = \"<P\" + util.common.istr(id._0) + \":\" + util.common.istr(id._1)\n-                + \">\";\n+            s += \"<P\" + util.common.istr(id._0) + \":\" +\n+                util.common.istr(id._1) + \">\";\n         }\n     }\n "}]}