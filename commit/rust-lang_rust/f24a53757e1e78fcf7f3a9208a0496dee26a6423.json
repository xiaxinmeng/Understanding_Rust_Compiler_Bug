{"sha": "f24a53757e1e78fcf7f3a9208a0496dee26a6423", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNGE1Mzc1N2UxZTc4ZmNmN2YzYTkyMDhhMDQ5NmRlZTI2YTY0MjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-05-13T15:35:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-06-06T23:46:38Z"}, "message": "Move subst data structures into subst.rs, fix capitalization", "tree": {"sha": "bca1d8941d809a657bfd33d22155d6011d4f7a05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bca1d8941d809a657bfd33d22155d6011d4f7a05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f24a53757e1e78fcf7f3a9208a0496dee26a6423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f24a53757e1e78fcf7f3a9208a0496dee26a6423", "html_url": "https://github.com/rust-lang/rust/commit/f24a53757e1e78fcf7f3a9208a0496dee26a6423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f24a53757e1e78fcf7f3a9208a0496dee26a6423/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61d79175c018a193a7676fe804f1b89280e18937", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d79175c018a193a7676fe804f1b89280e18937", "html_url": "https://github.com/rust-lang/rust/commit/61d79175c018a193a7676fe804f1b89280e18937"}], "stats": {"total": 649, "additions": 336, "deletions": 313}, "files": [{"sha": "a39be31c4b5720370ece6e3d83a65408be3b7430", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -16,6 +16,7 @@\n \n #![allow(non_camel_case_types)]\n \n+use middle::subst;\n use middle::ty;\n \n use std::rc::Rc;\n@@ -25,7 +26,6 @@ use std::uint;\n use syntax::abi;\n use syntax::ast;\n use syntax::ast::*;\n-use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token;\n \n // Compact string representation for ty::t values. API ty_str &\n@@ -133,7 +133,7 @@ pub fn parse_trait_ref_data(data: &[u8], crate_num: ast::CrateNum, pos: uint, tc\n }\n \n pub fn parse_substs_data(data: &[u8], crate_num: ast::CrateNum, pos: uint, tcx: &ty::ctxt,\n-                         conv: conv_did) -> ty::substs {\n+                         conv: conv_did) -> subst::Substs {\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_substs(&mut st, conv)\n }\n@@ -162,7 +162,7 @@ fn parse_trait_store(st: &mut PState, conv: conv_did) -> ty::TraitStore {\n     }\n }\n \n-fn parse_substs(st: &mut PState, conv: conv_did) -> ty::substs {\n+fn parse_substs(st: &mut PState, conv: conv_did) -> subst::Substs {\n     let regions = parse_region_substs(st, |x,y| conv(x,y));\n \n     let self_ty = parse_opt(st, |st| parse_ty(st, |x,y| conv(x,y)) );\n@@ -172,24 +172,24 @@ fn parse_substs(st: &mut PState, conv: conv_did) -> ty::substs {\n     while peek(st) != ']' { params.push(parse_ty(st, |x,y| conv(x,y))); }\n     st.pos = st.pos + 1u;\n \n-    return ty::substs {\n+    return subst::Substs {\n         regions: regions,\n         self_ty: self_ty,\n         tps: params\n     };\n }\n \n-fn parse_region_substs(st: &mut PState, conv: conv_did) -> ty::RegionSubsts {\n+fn parse_region_substs(st: &mut PState, conv: conv_did) -> subst::RegionSubsts {\n     match next(st) {\n-        'e' => ty::ErasedRegions,\n+        'e' => subst::ErasedRegions,\n         'n' => {\n             let mut regions = vec!();\n             while peek(st) != '.' {\n                 let r = parse_region(st, |x,y| conv(x,y));\n                 regions.push(r);\n             }\n             assert_eq!(next(st), '.');\n-            ty::NonerasedRegions(OwnedSlice::from_vec(regions))\n+            subst::NonerasedRegions(regions)\n         }\n         _ => fail!(\"parse_bound_region: bad input\")\n     }"}, {"sha": "f48dbecc53025e362f0b5e2858ea979fa9284c1f", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -17,6 +17,7 @@ use std::cell::RefCell;\n use std::collections::HashMap;\n use std::io::MemWriter;\n \n+use middle::subst;\n use middle::ty::param_ty;\n use middle::ty;\n \n@@ -96,20 +97,20 @@ fn enc_opt<T>(w: &mut MemWriter, t: Option<T>, enc_f: |&mut MemWriter, T|) {\n     }\n }\n \n-pub fn enc_substs(w: &mut MemWriter, cx: &ctxt, substs: &ty::substs) {\n+pub fn enc_substs(w: &mut MemWriter, cx: &ctxt, substs: &subst::Substs) {\n     enc_region_substs(w, cx, &substs.regions);\n     enc_opt(w, substs.self_ty, |w, t| enc_ty(w, cx, t));\n     mywrite!(w, \"[\");\n     for t in substs.tps.iter() { enc_ty(w, cx, *t); }\n     mywrite!(w, \"]\");\n }\n \n-fn enc_region_substs(w: &mut MemWriter, cx: &ctxt, substs: &ty::RegionSubsts) {\n+fn enc_region_substs(w: &mut MemWriter, cx: &ctxt, substs: &subst::RegionSubsts) {\n     match *substs {\n-        ty::ErasedRegions => {\n+        subst::ErasedRegions => {\n             mywrite!(w, \"e\");\n         }\n-        ty::NonerasedRegions(ref regions) => {\n+        subst::NonerasedRegions(ref regions) => {\n             mywrite!(w, \"n\");\n             for &r in regions.iter() {\n                 enc_region(w, cx, r);"}, {"sha": "9706ca578f78dcb5a0b8b5ddf33ff1a9cbc64b29", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -23,6 +23,7 @@ use metadata::tydecode;\n use metadata::tydecode::{DefIdSource, NominalType, TypeWithId, TypeParameter,\n                          RegionParameter};\n use metadata::tyencode;\n+use middle::subst;\n use middle::typeck::{MethodCall, MethodCallee, MethodOrigin};\n use middle::{ty, typeck};\n use util::ppaux::ty_to_str;\n@@ -796,7 +797,7 @@ trait ebml_writer_helpers {\n     fn emit_tpbt(&mut self,\n                  ecx: &e::EncodeContext,\n                  tpbt: ty::ty_param_bounds_and_ty);\n-    fn emit_substs(&mut self, ecx: &e::EncodeContext, substs: &ty::substs);\n+    fn emit_substs(&mut self, ecx: &e::EncodeContext, substs: &subst::Substs);\n     fn emit_auto_adjustment(&mut self, ecx: &e::EncodeContext, adj: &ty::AutoAdjustment);\n }\n \n@@ -842,7 +843,7 @@ impl<'a> ebml_writer_helpers for Encoder<'a> {\n         });\n     }\n \n-    fn emit_substs(&mut self, ecx: &e::EncodeContext, substs: &ty::substs) {\n+    fn emit_substs(&mut self, ecx: &e::EncodeContext, substs: &subst::Substs) {\n         self.emit_opaque(|this| Ok(tyencode::enc_substs(this.writer,\n                                                            &ecx.ty_str_ctxt(),\n                                                            substs)));\n@@ -1076,7 +1077,7 @@ trait ebml_decoder_decoder_helpers {\n                            -> ty::TypeParameterDef;\n     fn read_ty_param_bounds_and_ty(&mut self, xcx: &ExtendedDecodeContext)\n                                 -> ty::ty_param_bounds_and_ty;\n-    fn read_substs(&mut self, xcx: &ExtendedDecodeContext) -> ty::substs;\n+    fn read_substs(&mut self, xcx: &ExtendedDecodeContext) -> subst::Substs;\n     fn read_auto_adjustment(&mut self, xcx: &ExtendedDecodeContext) -> ty::AutoAdjustment;\n     fn convert_def_id(&mut self,\n                       xcx: &ExtendedDecodeContext,\n@@ -1093,7 +1094,7 @@ trait ebml_decoder_decoder_helpers {\n                       cdata: &cstore::crate_metadata) -> Vec<ty::t>;\n     fn read_substs_noxcx(&mut self, tcx: &ty::ctxt,\n                          cdata: &cstore::crate_metadata)\n-                         -> ty::substs;\n+                         -> subst::Substs;\n }\n \n impl<'a> ebml_decoder_decoder_helpers for reader::Decoder<'a> {\n@@ -1121,7 +1122,7 @@ impl<'a> ebml_decoder_decoder_helpers for reader::Decoder<'a> {\n     fn read_substs_noxcx(&mut self,\n                          tcx: &ty::ctxt,\n                          cdata: &cstore::crate_metadata)\n-                         -> ty::substs\n+                         -> subst::Substs\n     {\n         self.read_opaque(|_, doc| {\n             Ok(tydecode::parse_substs_data(\n@@ -1210,7 +1211,7 @@ impl<'a> ebml_decoder_decoder_helpers for reader::Decoder<'a> {\n         }).unwrap()\n     }\n \n-    fn read_substs(&mut self, xcx: &ExtendedDecodeContext) -> ty::substs {\n+    fn read_substs(&mut self, xcx: &ExtendedDecodeContext) -> subst::Substs {\n         self.read_opaque(|this, doc| {\n             Ok(tydecode::parse_substs_data(doc.data,\n                                         xcx.dcx.cdata.cnum,"}, {"sha": "fe57e54c77875db65e34b330b26daf71483f38fe", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -11,6 +11,7 @@\n \n use middle::freevars::freevar_entry;\n use middle::freevars;\n+use middle::subst;\n use middle::ty;\n use middle::typeck;\n use util::ppaux::{Repr, ty_to_str};\n@@ -19,7 +20,6 @@ use util::ppaux::UserString;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::codemap::Span;\n-use syntax::owned_slice::OwnedSlice;\n use syntax::print::pprust::{expr_to_str,path_to_str};\n use syntax::{visit,ast_util};\n use syntax::visit::Visitor;\n@@ -87,8 +87,8 @@ fn check_struct_safe_for_destructor(cx: &mut Context,\n                                     struct_did: DefId) {\n     let struct_tpt = ty::lookup_item_type(cx.tcx, struct_did);\n     if !struct_tpt.generics.has_type_params() {\n-        let struct_ty = ty::mk_struct(cx.tcx, struct_did, ty::substs {\n-            regions: ty::NonerasedRegions(OwnedSlice::empty()),\n+        let struct_ty = ty::mk_struct(cx.tcx, struct_did, subst::Substs {\n+            regions: subst::NonerasedRegions(Vec::new()),\n             self_ty: None,\n             tps: Vec::new()\n         });"}, {"sha": "a34fb0a99e132d939b34f9af564e93bf6b464b49", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 68, "deletions": 6, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -15,8 +15,70 @@ use middle::ty_fold;\n use middle::ty_fold::{TypeFoldable, TypeFolder};\n use util::ppaux::Repr;\n \n+use std::vec::Vec;\n use syntax::codemap::Span;\n \n+///////////////////////////////////////////////////////////////////////////\n+\n+/**\n+ * Represents the values to use when substituting lifetime parameters.\n+ * If the value is `ErasedRegions`, then this subst is occurring during\n+ * trans, and all region parameters will be replaced with `ty::ReStatic`. */\n+#[deriving(Clone, Eq, TotalEq, Hash)]\n+pub enum RegionSubsts {\n+    ErasedRegions,\n+    NonerasedRegions(Vec<ty::Region>)\n+}\n+\n+/**\n+ * The type `Substs` represents the kinds of things that can be substituted to\n+ * convert a polytype into a monotype.  Note however that substituting bound\n+ * regions other than `self` is done through a different mechanism:\n+ *\n+ * - `tps` represents the type parameters in scope.  They are indexed\n+ *   according to the order in which they were declared.\n+ *\n+ * - `self_r` indicates the region parameter `self` that is present on nominal\n+ *   types (enums, structs) declared as having a region parameter.  `self_r`\n+ *   should always be none for types that are not region-parameterized and\n+ *   Some(_) for types that are.  The only bound region parameter that should\n+ *   appear within a region-parameterized type is `self`.\n+ *\n+ * - `self_ty` is the type to which `self` should be remapped, if any.  The\n+ *   `self` type is rather funny in that it can only appear on traits and is\n+ *   always substituted away to the implementing type for a trait. */\n+#[deriving(Clone, Eq, TotalEq, Hash)]\n+pub struct Substs {\n+    pub self_ty: Option<ty::t>,\n+    pub tps: Vec<ty::t>,\n+    pub regions: RegionSubsts,\n+}\n+\n+impl Substs {\n+    pub fn empty() -> Substs {\n+        Substs {\n+            self_ty: None,\n+            tps: Vec::new(),\n+            regions: NonerasedRegions(Vec::new())\n+        }\n+    }\n+\n+    pub fn is_noop(&self) -> bool {\n+        let regions_is_noop = match self.regions {\n+            ErasedRegions => false, // may be used to canonicalize\n+            NonerasedRegions(ref regions) => regions.is_empty()\n+        };\n+\n+        self.tps.len() == 0u &&\n+            regions_is_noop &&\n+            self.self_ty.is_none()\n+    }\n+\n+    pub fn self_ty(&self) -> ty::t {\n+        self.self_ty.unwrap()\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Public trait `Subst`\n //\n@@ -25,20 +87,20 @@ use syntax::codemap::Span;\n // there is more information available (for better errors).\n \n pub trait Subst {\n-    fn subst(&self, tcx: &ty::ctxt, substs: &ty::substs) -> Self {\n+    fn subst(&self, tcx: &ty::ctxt, substs: &Substs) -> Self {\n         self.subst_spanned(tcx, substs, None)\n     }\n \n     fn subst_spanned(&self, tcx: &ty::ctxt,\n-                     substs: &ty::substs,\n+                     substs: &Substs,\n                      span: Option<Span>)\n                      -> Self;\n }\n \n impl<T:TypeFoldable> Subst for T {\n     fn subst_spanned(&self,\n                      tcx: &ty::ctxt,\n-                     substs: &ty::substs,\n+                     substs: &Substs,\n                      span: Option<Span>)\n                      -> T\n     {\n@@ -56,7 +118,7 @@ impl<T:TypeFoldable> Subst for T {\n \n struct SubstFolder<'a> {\n     tcx: &'a ty::ctxt,\n-    substs: &'a ty::substs,\n+    substs: &'a Substs,\n \n     // The location for which the substitution is performed, if available.\n     span: Option<Span>,\n@@ -81,8 +143,8 @@ impl<'a> TypeFolder for SubstFolder<'a> {\n         match r {\n             ty::ReEarlyBound(_, i, _) => {\n                 match self.substs.regions {\n-                    ty::ErasedRegions => ty::ReStatic,\n-                    ty::NonerasedRegions(ref regions) => *regions.get(i),\n+                    ErasedRegions => ty::ReStatic,\n+                    NonerasedRegions(ref regions) => *regions.get(i),\n                 }\n             }\n             _ => r"}, {"sha": "5f51f80299f4be21e070459de497ffc6269b5da0", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -51,6 +51,8 @@ use std::num::{Bitwise};\n use std::rc::Rc;\n \n use lib::llvm::{ValueRef, True, IntEQ, IntNE};\n+use middle::subst;\n+use middle::subst::Subst;\n use middle::trans::_match;\n use middle::trans::build::*;\n use middle::trans::common::*;\n@@ -304,10 +306,10 @@ impl Case {\n     }\n }\n \n-fn get_cases(tcx: &ty::ctxt, def_id: ast::DefId, substs: &ty::substs) -> Vec<Case> {\n+fn get_cases(tcx: &ty::ctxt, def_id: ast::DefId, substs: &subst::Substs) -> Vec<Case> {\n     ty::enum_variants(tcx, def_id).iter().map(|vi| {\n         let arg_tys = vi.args.iter().map(|&raw_ty| {\n-            ty::subst(tcx, substs, raw_ty)\n+            raw_ty.subst(tcx, substs)\n         }).collect();\n         Case { discr: vi.disr_val, tys: arg_tys }\n     }).collect()"}, {"sha": "23156882c7c6cecb8ed32ab760f0b30b79ab114b", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -40,6 +40,8 @@ use middle::lint;\n use middle::astencode;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::weak_lang_items;\n+use middle::subst;\n+use middle::subst::Subst;\n use middle::trans::_match;\n use middle::trans::adt;\n use middle::trans::build::*;\n@@ -442,7 +444,7 @@ pub fn get_res_dtor(ccx: &CrateContext,\n                     did: ast::DefId,\n                     t: ty::t,\n                     parent_id: ast::DefId,\n-                    substs: &ty::substs)\n+                    substs: &subst::Substs)\n                  -> ValueRef {\n     let _icx = push_ctxt(\"trans_res_dtor\");\n     let did = if did.krate != ast::LOCAL_CRATE {\n@@ -463,8 +465,7 @@ pub fn get_res_dtor(ccx: &CrateContext,\n     } else {\n         let tcx = ccx.tcx();\n         let name = csearch::get_symbol(&ccx.sess().cstore, did);\n-        let class_ty = ty::subst(tcx, substs,\n-                                 ty::lookup_item_type(tcx, parent_id).ty);\n+        let class_ty = ty::lookup_item_type(tcx, parent_id).ty.subst(tcx, substs);\n         let llty = type_of_dtor(ccx, class_ty);\n         let dtor_ty = ty::mk_ctor_fn(ccx.tcx(), ast::DUMMY_NODE_ID,\n                                      [glue::get_drop_glue_type(ccx, t)], ty::mk_nil());\n@@ -633,7 +634,7 @@ pub fn iter_structural_ty<'r,\n                     repr: &adt::Repr,\n                     av: ValueRef,\n                     variant: &ty::VariantInfo,\n-                    substs: &ty::substs,\n+                    substs: &subst::Substs,\n                     f: val_and_ty_fn<'r,'b>)\n                     -> &'b Block<'b> {\n         let _icx = push_ctxt(\"iter_variant\");\n@@ -643,7 +644,7 @@ pub fn iter_structural_ty<'r,\n         for (i, &arg) in variant.args.iter().enumerate() {\n             cx = f(cx,\n                    adt::trans_field_ptr(cx, repr, av, variant.disr_val, i),\n-                   ty::subst(tcx, substs, arg));\n+                   arg.subst(tcx, substs));\n         }\n         return cx;\n     }"}, {"sha": "a488770689d3db353f6c0e6b64888f45fc56dd29", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -21,6 +21,8 @@ use driver::session;\n use lib::llvm::ValueRef;\n use lib::llvm::llvm;\n use metadata::csearch;\n+use middle::subst;\n+use middle::subst::Subst;\n use middle::trans::base;\n use middle::trans::base::*;\n use middle::trans::build::*;\n@@ -39,7 +41,6 @@ use middle::trans::monomorphize;\n use middle::trans::type_of;\n use middle::trans::foreign;\n use middle::ty;\n-use middle::subst::Subst;\n use middle::typeck;\n use middle::typeck::coherence::make_substs_for_receiver_types;\n use middle::typeck::MethodCall;\n@@ -184,7 +185,7 @@ pub fn trans_fn_ref(bcx: &Block, def_id: ast::DefId, node: ExprOrMethodCall) ->\n fn trans_fn_ref_with_vtables_to_callee<'a>(bcx: &'a Block<'a>,\n                                            def_id: ast::DefId,\n                                            ref_id: ast::NodeId,\n-                                           substs: ty::substs,\n+                                           substs: subst::Substs,\n                                            vtables: Option<typeck::vtable_res>)\n                                            -> Callee<'a> {\n     Callee {bcx: bcx,\n@@ -195,7 +196,7 @@ fn trans_fn_ref_with_vtables_to_callee<'a>(bcx: &'a Block<'a>,\n fn resolve_default_method_vtables(bcx: &Block,\n                                   impl_id: ast::DefId,\n                                   method: &ty::Method,\n-                                  substs: &ty::substs,\n+                                  substs: &subst::Substs,\n                                   impl_vtables: Option<typeck::vtable_res>)\n                           -> (typeck::vtable_res, typeck::vtable_param_res) {\n \n@@ -241,7 +242,7 @@ pub fn trans_fn_ref_with_vtables(\n         bcx: &Block,       //\n         def_id: ast::DefId,   // def id of fn\n         node: ExprOrMethodCall,  // node id of use of fn; may be zero if N/A\n-        substs: ty::substs, // values for fn's ty params\n+        substs: subst::Substs, // values for fn's ty params\n         vtables: Option<typeck::vtable_res>) // vtables for the call\n      -> ValueRef {\n     /*!\n@@ -504,7 +505,7 @@ pub fn trans_lang_call<'a>(\n                                 trans_fn_ref_with_vtables_to_callee(bcx,\n                                                                     did,\n                                                                     0,\n-                                                                    ty::substs::empty(),\n+                                                                    subst::Substs::empty(),\n                                                                     None)\n                              },\n                              ArgVals(args),"}, {"sha": "46c5edf5f5b419e71843f7c7f7a25571ff9e7039", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -18,13 +18,14 @@ use lib::llvm::{True, False, Bool};\n use lib::llvm::llvm;\n use lib;\n use middle::lang_items::LangItem;\n+use middle::subst;\n+use middle::subst::Subst;\n use middle::trans::build;\n use middle::trans::cleanup;\n use middle::trans::datum;\n use middle::trans::debuginfo;\n use middle::trans::type_::Type;\n use middle::ty;\n-use middle::subst::Subst;\n use middle::typeck;\n use util::ppaux::Repr;\n use util::nodemap::NodeMap;\n@@ -177,7 +178,7 @@ pub type ExternMap = HashMap<String, ValueRef>;\n // Here `self_ty` is the real type of the self parameter to this method. It\n // will only be set in the case of default methods.\n pub struct param_substs {\n-    pub substs: ty::substs,\n+    pub substs: subst::Substs,\n     pub vtables: Option<typeck::vtable_res>,\n     pub self_vtables: Option<typeck::vtable_param_res>\n }\n@@ -697,7 +698,7 @@ pub fn is_null(val: ValueRef) -> bool {\n pub fn monomorphize_type(bcx: &Block, t: ty::t) -> ty::t {\n     match bcx.fcx.param_substs {\n         Some(ref substs) => {\n-            ty::subst(bcx.tcx(), &substs.substs, t)\n+            t.subst(bcx.tcx(), &substs.substs)\n         }\n         _ => {\n             assert!(!ty::type_has_params(t));\n@@ -733,7 +734,7 @@ pub enum ExprOrMethodCall {\n \n pub fn node_id_substs(bcx: &Block,\n                       node: ExprOrMethodCall)\n-                      -> ty::substs {\n+                      -> subst::Substs {\n     let tcx = bcx.tcx();\n \n     let substs = match node {"}, {"sha": "e21c8f63d0906a3784fe85523b7f0687b99b22d8", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -131,6 +131,7 @@ use lib::llvm::llvm;\n use lib::llvm::{ModuleRef, ContextRef, ValueRef};\n use lib::llvm::debuginfo::*;\n use metadata::csearch;\n+use middle::subst;\n use middle::trans::adt;\n use middle::trans::common::*;\n use middle::trans::datum::{Datum, Lvalue};\n@@ -1356,7 +1357,7 @@ impl StructMemberDescriptionFactory {\n fn prepare_struct_metadata(cx: &CrateContext,\n                            struct_type: ty::t,\n                            def_id: ast::DefId,\n-                           substs: &ty::substs,\n+                           substs: &subst::Substs,\n                            span: Span)\n                         -> RecursiveTypeDescription {\n     let struct_name = ppaux::ty_to_str(cx.tcx(), struct_type);\n@@ -2251,7 +2252,7 @@ fn subroutine_type_metadata(cx: &CrateContext,\n fn trait_metadata(cx: &CrateContext,\n                   def_id: ast::DefId,\n                   trait_type: ty::t,\n-                  substs: &ty::substs,\n+                  substs: &subst::Substs,\n                   trait_store: ty::TraitStore,\n                   _: &ty::BuiltinBounds)\n                -> DIType {"}, {"sha": "7d05b3528074969f7901d773a6479a1995c84050", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -18,6 +18,7 @@ use back::link::*;\n use lib::llvm::{llvm, ValueRef, True};\n use lib;\n use middle::lang_items::{FreeFnLangItem, ExchangeFreeFnLangItem};\n+use middle::subst;\n use middle::trans::adt;\n use middle::trans::base::*;\n use middle::trans::build::*;\n@@ -229,7 +230,7 @@ fn trans_struct_drop_flag<'a>(bcx: &'a Block<'a>,\n                               v0: ValueRef,\n                               dtor_did: ast::DefId,\n                               class_did: ast::DefId,\n-                              substs: &ty::substs)\n+                              substs: &subst::Substs)\n                               -> &'a Block<'a> {\n     let repr = adt::represent_type(bcx.ccx(), t);\n     let drop_flag = adt::trans_drop_flag_ptr(bcx, &*repr, v0);\n@@ -243,7 +244,7 @@ fn trans_struct_drop<'a>(bcx: &'a Block<'a>,\n                          v0: ValueRef,\n                          dtor_did: ast::DefId,\n                          class_did: ast::DefId,\n-                         substs: &ty::substs)\n+                         substs: &subst::Substs)\n                          -> &'a Block<'a> {\n     let repr = adt::represent_type(bcx.ccx(), t);\n "}, {"sha": "fe251ad88b04cf4679b1c57909728f9f6d48daaf", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -14,6 +14,7 @@ use lib::llvm::llvm;\n use lib::llvm::ValueRef;\n use lib;\n use metadata::csearch;\n+use middle::subst;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::callee::*;\n@@ -277,9 +278,9 @@ fn trans_monomorphized_callee<'a>(bcx: &'a Block<'a>,\n fn combine_impl_and_methods_tps(bcx: &Block,\n                                 mth_did: ast::DefId,\n                                 node: ExprOrMethodCall,\n-                                rcvr_substs: ty::substs,\n+                                rcvr_substs: subst::Substs,\n                                 rcvr_origins: typeck::vtable_res)\n-                                -> (ty::substs, typeck::vtable_res)\n+                                -> (subst::Substs, typeck::vtable_res)\n {\n     /*!\n      * Creates a concatenated set of substitutions which includes\n@@ -335,9 +336,9 @@ fn combine_impl_and_methods_tps(bcx: &Block,\n         }\n     }\n \n-    let ty_substs = ty::substs {\n+    let ty_substs = subst::Substs {\n         tps: tps,\n-        regions: ty::ErasedRegions,\n+        regions: subst::ErasedRegions,\n         self_ty: rcvr_self_ty\n     };\n \n@@ -493,7 +494,7 @@ pub fn make_vtable<I: Iterator<ValueRef>>(ccx: &CrateContext,\n \n fn emit_vtable_methods(bcx: &Block,\n                        impl_id: ast::DefId,\n-                       substs: ty::substs,\n+                       substs: subst::Substs,\n                        vtables: typeck::vtable_res)\n                        -> Vec<ValueRef> {\n     let ccx = bcx.ccx();"}, {"sha": "695f9c2ce8d3d2f9513fd0e7f9cb18929ac00d15", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -11,6 +11,8 @@\n use back::link::exported_name;\n use driver::session;\n use lib::llvm::ValueRef;\n+use middle::subst;\n+use middle::subst::Subst;\n use middle::trans::base::{set_llvm_fn_attrs, set_inline_hint};\n use middle::trans::base::{trans_enum_variant, push_ctxt, get_item_val};\n use middle::trans::base::{trans_fn, decl_internal_rust_fn};\n@@ -29,7 +31,7 @@ use std::hash::{sip, Hash};\n \n pub fn monomorphic_fn(ccx: &CrateContext,\n                       fn_id: ast::DefId,\n-                      real_substs: &ty::substs,\n+                      real_substs: &subst::Substs,\n                       vtables: Option<typeck::vtable_res>,\n                       self_vtables: Option<typeck::vtable_param_res>,\n                       ref_id: Option<ast::NodeId>)\n@@ -139,7 +141,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n \n     debug!(\"monomorphic_fn about to subst into {}\", llitem_ty.repr(ccx.tcx()));\n     let mono_ty = match is_static_provided {\n-        None => ty::subst(ccx.tcx(), real_substs, llitem_ty),\n+        None => llitem_ty.subst(ccx.tcx(), real_substs),\n         Some(num_method_ty_params) => {\n             // Static default methods are a little unfortunate, in\n             // that the \"internal\" and \"external\" type of them differ.\n@@ -161,14 +163,14 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n             tps.push(real_substs.self_ty.unwrap());\n             tps.push_all(real_substs.tps.tailn(idx));\n \n-            let substs = ty::substs { regions: ty::ErasedRegions,\n-                                      self_ty: None,\n-                                      tps: tps };\n+            let substs = subst::Substs { regions: subst::ErasedRegions,\n+                                         self_ty: None,\n+                                         tps: tps };\n \n             debug!(\"static default: changed substitution to {}\",\n                    substs.repr(ccx.tcx()));\n \n-            ty::subst(ccx.tcx(), &substs, llitem_ty)\n+            llitem_ty.subst(ccx.tcx(), &substs)\n         }\n     };\n "}, {"sha": "bf5bedd98e88404881f3d970432cb9bdc337c45b", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(non_camel_case_types)]\n \n+use middle::subst;\n use middle::trans::adt;\n use middle::trans::common::*;\n use middle::trans::foreign;\n@@ -21,7 +22,6 @@ use middle::trans::type_::Type;\n \n use syntax::abi;\n use syntax::ast;\n-use syntax::owned_slice::OwnedSlice;\n \n pub fn arg_is_indirect(ccx: &CrateContext, arg_ty: ty::t) -> bool {\n     !type_is_immediate(ccx, arg_ty)\n@@ -310,8 +310,7 @@ pub fn llvm_type_name(cx: &CrateContext,\n     let tstr = ppaux::parameterized(cx.tcx(),\n                                     ty::item_path_str(cx.tcx(),\n                                                       did).as_slice(),\n-                                    &ty::NonerasedRegions(\n-                                        OwnedSlice::empty()),\n+                                    &subst::ErasedRegions,\n                                     tps,\n                                     did,\n                                     false);"}, {"sha": "c47abf5fb7391f53e80b9fd7d72cd07a32920e6d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 35, "deletions": 102, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -22,8 +22,9 @@ use middle::lang_items::{TyDescStructLangItem, TyVisitorTraitLangItem};\n use middle::freevars;\n use middle::resolve;\n use middle::resolve_lifetime;\n+use middle::subst;\n+use middle::subst::{Subst, Substs};\n use middle::ty;\n-use middle::subst::Subst;\n use middle::typeck;\n use middle::typeck::MethodCall;\n use middle::ty_fold;\n@@ -207,7 +208,7 @@ pub enum AutoAdjustment {\n     AutoObject(ty::TraitStore,\n                ty::BuiltinBounds,\n                ast::DefId, /* Trait ID */\n-               ty::substs /* Trait substitutions */)\n+               subst::Substs /* Trait substitutions */)\n }\n \n #[deriving(Clone, Decodable, Encodable)]\n@@ -639,40 +640,6 @@ pub enum BoundRegion {\n     BrFresh(uint),\n }\n \n-/**\n- * Represents the values to use when substituting lifetime parameters.\n- * If the value is `ErasedRegions`, then this subst is occurring during\n- * trans, and all region parameters will be replaced with `ty::ReStatic`. */\n-#[deriving(Clone, PartialEq, Eq, Hash)]\n-pub enum RegionSubsts {\n-    ErasedRegions,\n-    NonerasedRegions(OwnedSlice<ty::Region>)\n-}\n-\n-/**\n- * The type substs represents the kinds of things that can be substituted to\n- * convert a polytype into a monotype.  Note however that substituting bound\n- * regions other than `self` is done through a different mechanism:\n- *\n- * - `tps` represents the type parameters in scope.  They are indexed\n- *   according to the order in which they were declared.\n- *\n- * - `self_r` indicates the region parameter `self` that is present on nominal\n- *   types (enums, structs) declared as having a region parameter.  `self_r`\n- *   should always be none for types that are not region-parameterized and\n- *   Some(_) for types that are.  The only bound region parameter that should\n- *   appear within a region-parameterized type is `self`.\n- *\n- * - `self_ty` is the type to which `self` should be remapped, if any.  The\n- *   `self` type is rather funny in that it can only appear on traits and is\n- *   always substituted away to the implementing type for a trait. */\n-#[deriving(Clone, PartialEq, Eq, Hash)]\n-pub struct substs {\n-    pub self_ty: Option<ty::t>,\n-    pub tps: Vec<t>,\n-    pub regions: RegionSubsts,\n-}\n-\n mod primitives {\n     use super::t_box_;\n \n@@ -731,7 +698,7 @@ pub enum sty {\n     ty_int(ast::IntTy),\n     ty_uint(ast::UintTy),\n     ty_float(ast::FloatTy),\n-    ty_enum(DefId, substs),\n+    ty_enum(DefId, Substs),\n     ty_box(t),\n     ty_uniq(t),\n     ty_str,\n@@ -741,7 +708,7 @@ pub enum sty {\n     ty_bare_fn(BareFnTy),\n     ty_closure(Box<ClosureTy>),\n     ty_trait(Box<TyTrait>),\n-    ty_struct(DefId, substs),\n+    ty_struct(DefId, Substs),\n     ty_tup(Vec<t>),\n \n     ty_param(param_ty), // type parameter\n@@ -757,15 +724,15 @@ pub enum sty {\n #[deriving(Clone, PartialEq, Eq, Hash)]\n pub struct TyTrait {\n     pub def_id: DefId,\n-    pub substs: substs,\n+    pub substs: Substs,\n     pub store: TraitStore,\n     pub bounds: BuiltinBounds\n }\n \n #[deriving(PartialEq, Eq, Hash)]\n pub struct TraitRef {\n     pub def_id: DefId,\n-    pub substs: substs\n+    pub substs: Substs\n }\n \n #[deriving(Clone, PartialEq)]\n@@ -1032,7 +999,7 @@ pub struct ParameterEnvironment {\n     /// In general, this means converting from bound parameters to\n     /// free parameters. Since we currently represent bound/free type\n     /// parameters in the same way, this only has an affect on regions.\n-    pub free_substs: ty::substs,\n+    pub free_substs: Substs,\n \n     /// Bound on the Self parameter\n     pub self_param_bound: Option<Rc<TraitRef>>,\n@@ -1068,11 +1035,11 @@ pub struct TraitDef {\n /// item into the monotype of an item reference.\n #[deriving(Clone)]\n pub struct ItemSubsts {\n-    pub substs: ty::substs,\n+    pub substs: Substs,\n }\n \n pub struct ty_param_substs_and_ty {\n-    pub substs: ty::substs,\n+    pub substs: Substs,\n     pub ty: ty::t\n }\n \n@@ -1176,12 +1143,12 @@ pub fn mk_t(cx: &ctxt, st: sty) -> t {\n             }\n         }\n     }\n-    fn sflags(substs: &substs) -> uint {\n+    fn sflags(substs: &Substs) -> uint {\n         let mut f = 0u;\n         for tt in substs.tps.iter() { f |= get(*tt).flags; }\n         match substs.regions {\n-            ErasedRegions => {}\n-            NonerasedRegions(ref regions) => {\n+            subst::ErasedRegions => {}\n+            subst::NonerasedRegions(ref regions) => {\n                 for r in regions.iter() {\n                     f |= rflags(*r)\n                 }\n@@ -1369,7 +1336,7 @@ pub fn mk_str_slice(cx: &ctxt, r: Region, m: ast::Mutability) -> t {\n             })\n }\n \n-pub fn mk_enum(cx: &ctxt, did: ast::DefId, substs: substs) -> t {\n+pub fn mk_enum(cx: &ctxt, did: ast::DefId, substs: Substs) -> t {\n     // take a copy of substs so that we own the vectors inside\n     mk_t(cx, ty_enum(did, substs))\n }\n@@ -1444,7 +1411,7 @@ pub fn mk_ctor_fn(cx: &ctxt,\n \n pub fn mk_trait(cx: &ctxt,\n                 did: ast::DefId,\n-                substs: substs,\n+                substs: Substs,\n                 store: TraitStore,\n                 bounds: BuiltinBounds)\n              -> t {\n@@ -1458,7 +1425,7 @@ pub fn mk_trait(cx: &ctxt,\n     mk_t(cx, ty_trait(inner))\n }\n \n-pub fn mk_struct(cx: &ctxt, struct_id: ast::DefId, substs: substs) -> t {\n+pub fn mk_struct(cx: &ctxt, struct_id: ast::DefId, substs: Substs) -> t {\n     // take a copy of substs so that we own the vectors inside\n     mk_t(cx, ty_struct(struct_id, substs))\n }\n@@ -1524,38 +1491,14 @@ pub fn walk_regions_and_ty(cx: &ctxt, ty: t, fldr: |r: Region|, fldt: |t: t|)\n \n impl ItemSubsts {\n     pub fn empty() -> ItemSubsts {\n-        ItemSubsts {\n-            substs: substs::empty(),\n-        }\n+        ItemSubsts { substs: Substs::empty() }\n     }\n \n     pub fn is_noop(&self) -> bool {\n-        ty::substs_is_noop(&self.substs)\n+        self.substs.is_noop()\n     }\n }\n \n-pub fn substs_is_noop(substs: &substs) -> bool {\n-    let regions_is_noop = match substs.regions {\n-        ErasedRegions => false, // may be used to canonicalize\n-        NonerasedRegions(ref regions) => regions.is_empty()\n-    };\n-\n-    substs.tps.len() == 0u &&\n-        regions_is_noop &&\n-        substs.self_ty.is_none()\n-}\n-\n-pub fn substs_to_str(cx: &ctxt, substs: &substs) -> String {\n-    substs.repr(cx)\n-}\n-\n-pub fn subst(cx: &ctxt,\n-             substs: &substs,\n-             typ: t)\n-          -> t {\n-    typ.subst(cx, substs)\n-}\n-\n // Type utilities\n \n pub fn type_is_nil(ty: t) -> bool { get(ty).sty == ty_nil }\n@@ -1744,7 +1687,7 @@ fn type_needs_unwind_cleanup_(cx: &ctxt, ty: t,\n           ty_enum(did, ref substs) => {\n             for v in (*enum_variants(cx, did)).iter() {\n                 for aty in v.args.iter() {\n-                    let t = subst(cx, substs, *aty);\n+                    let t = aty.subst(cx, substs);\n                     needs_unwind_cleanup |=\n                         type_needs_unwind_cleanup_(cx, t, tycache,\n                                                    encountered_box);\n@@ -2376,7 +2319,7 @@ pub fn is_instantiable(cx: &ctxt, r_ty: t) -> bool {\n                 let vs = enum_variants(cx, did);\n                 let r = !vs.is_empty() && vs.iter().all(|variant| {\n                     variant.args.iter().any(|aty| {\n-                        let sty = subst(cx, substs, *aty);\n+                        let sty = aty.subst(cx, substs);\n                         type_requires(cx, seen, r_ty, sty)\n                     })\n                 });\n@@ -3688,13 +3631,13 @@ impl VariantInfo {\n \n pub fn substd_enum_variants(cx: &ctxt,\n                             id: ast::DefId,\n-                            substs: &substs)\n+                            substs: &Substs)\n                          -> Vec<Rc<VariantInfo>> {\n     enum_variants(cx, id).iter().map(|variant_info| {\n         let substd_args = variant_info.args.iter()\n-            .map(|aty| subst(cx, substs, *aty)).collect();\n+            .map(|aty| aty.subst(cx, substs)).collect();\n \n-        let substd_ctor_ty = subst(cx, substs, variant_info.ctor_ty);\n+        let substd_ctor_ty = variant_info.ctor_ty.subst(cx, substs);\n \n         Rc::new(VariantInfo {\n             args: substd_args,\n@@ -3944,7 +3887,7 @@ pub fn lookup_repr_hint(tcx: &ctxt, did: DefId) -> attr::ReprAttr {\n pub fn lookup_field_type(tcx: &ctxt,\n                          struct_id: DefId,\n                          id: DefId,\n-                         substs: &substs)\n+                         substs: &Substs)\n                       -> ty::t {\n     let t = if id.krate == ast::LOCAL_CRATE {\n         node_id_to_type(tcx, id.node)\n@@ -3959,7 +3902,7 @@ pub fn lookup_field_type(tcx: &ctxt,\n            }\n         }\n     };\n-    subst(tcx, substs, t)\n+    t.subst(tcx, substs)\n }\n \n // Lookup all ancestor structs of a struct indicated by did. That is the reflexive,\n@@ -4027,7 +3970,7 @@ pub fn lookup_struct_field(cx: &ctxt,\n \n // Returns a list of fields corresponding to the struct's items. trans uses\n // this. Takes a list of substs with which to instantiate field types.\n-pub fn struct_fields(cx: &ctxt, did: ast::DefId, substs: &substs)\n+pub fn struct_fields(cx: &ctxt, did: ast::DefId, substs: &Substs)\n                      -> Vec<field> {\n     lookup_struct_fields(cx, did).iter().map(|f| {\n        field {\n@@ -4140,11 +4083,11 @@ pub fn normalize_ty(cx: &ctxt, t: t) -> t {\n         }\n \n         fn fold_substs(&mut self,\n-                       substs: &substs)\n-                       -> substs {\n-            substs { regions: ErasedRegions,\n-                     self_ty: substs.self_ty.fold_with(self),\n-                     tps: substs.tps.fold_with(self) }\n+                       substs: &subst::Substs)\n+                       -> subst::Substs {\n+            subst::Substs { regions: subst::ErasedRegions,\n+                            self_ty: substs.self_ty.fold_with(self),\n+                            tps: substs.tps.fold_with(self) }\n         }\n \n         fn fold_sig(&mut self,\n@@ -4292,8 +4235,8 @@ pub fn visitor_object_ty(tcx: &ctxt,\n         Ok(id) => id,\n         Err(s) => { return Err(s); }\n     };\n-    let substs = substs {\n-        regions: ty::NonerasedRegions(OwnedSlice::empty()),\n+    let substs = Substs {\n+        regions: subst::NonerasedRegions(Vec::new()),\n         self_ty: None,\n         tps: Vec::new()\n     };\n@@ -4676,10 +4619,10 @@ pub fn construct_parameter_environment(\n         push_region_params(t, free_id, method_region_params)\n     };\n \n-    let free_substs = substs {\n+    let free_substs = Substs {\n         self_ty: self_ty,\n         tps: type_params,\n-        regions: ty::NonerasedRegions(OwnedSlice::from_vec(region_params))\n+        regions: subst::NonerasedRegions(region_params)\n     };\n \n     //\n@@ -4712,16 +4655,6 @@ pub fn construct_parameter_environment(\n     }\n }\n \n-impl substs {\n-    pub fn empty() -> substs {\n-        substs {\n-            self_ty: None,\n-            tps: Vec::new(),\n-            regions: NonerasedRegions(OwnedSlice::empty())\n-        }\n-    }\n-}\n-\n impl BorrowKind {\n     pub fn from_mutbl(m: ast::Mutability) -> BorrowKind {\n         match m {"}, {"sha": "e8f043b5f86959ec0f764823ad5b3ebe59d4c6af", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -10,6 +10,7 @@\n \n // Generalized type folding mechanism.\n \n+use middle::subst;\n use middle::ty;\n use middle::typeck;\n use std::rc::Rc;\n@@ -50,8 +51,8 @@ pub trait TypeFolder {\n     }\n \n     fn fold_substs(&mut self,\n-                   substs: &ty::substs)\n-                   -> ty::substs {\n+                   substs: &subst::Substs)\n+                   -> subst::Substs {\n         super_fold_substs(self, substs)\n     }\n \n@@ -180,8 +181,8 @@ impl TypeFoldable for ty::Region {\n     }\n }\n \n-impl TypeFoldable for ty::substs {\n-    fn fold_with<F:TypeFolder>(&self, folder: &mut F) -> ty::substs {\n+impl TypeFoldable for subst::Substs {\n+    fn fold_with<F:TypeFolder>(&self, folder: &mut F) -> subst::Substs {\n         folder.fold_substs(self)\n     }\n }\n@@ -278,20 +279,20 @@ pub fn super_fold_ty<T:TypeFolder>(this: &mut T,\n }\n \n pub fn super_fold_substs<T:TypeFolder>(this: &mut T,\n-                                       substs: &ty::substs)\n-                                       -> ty::substs {\n+                                       substs: &subst::Substs)\n+                                       -> subst::Substs {\n     let regions = match substs.regions {\n-        ty::ErasedRegions => {\n-            ty::ErasedRegions\n+        subst::ErasedRegions => {\n+            subst::ErasedRegions\n         }\n-        ty::NonerasedRegions(ref regions) => {\n-            ty::NonerasedRegions(regions.fold_with(this))\n+        subst::NonerasedRegions(ref regions) => {\n+            subst::NonerasedRegions(regions.fold_with(this))\n         }\n     };\n \n-    ty::substs { regions: regions,\n-                 self_ty: substs.self_ty.fold_with(this),\n-                 tps: substs.tps.fold_with(this) }\n+    subst::Substs { regions: regions,\n+                    self_ty: substs.self_ty.fold_with(this),\n+                    tps: substs.tps.fold_with(this) }\n }\n \n pub fn super_fold_sig<T:TypeFolder>(this: &mut T,"}, {"sha": "35cfbdeb344e040186cded120ddefe6764384056", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -51,8 +51,8 @@\n \n \n use middle::const_eval;\n-use middle::subst::Subst;\n-use middle::ty::{substs};\n+use middle::subst;\n+use middle::subst::{Subst, Substs};\n use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n use middle::typeck::rscope;\n@@ -152,7 +152,7 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n     rscope: &RS,\n     decl_generics: &ty::Generics,\n     self_ty: Option<ty::t>,\n-    path: &ast::Path) -> ty::substs\n+    path: &ast::Path) -> subst::Substs\n {\n     /*!\n      * Given a path `path` that refers to an item `I` with the\n@@ -232,8 +232,8 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n                             .map(|&a_t| ast_ty_to_ty(this, rscope, a_t))\n                             .collect();\n \n-    let mut substs = substs {\n-        regions: ty::NonerasedRegions(OwnedSlice::from_vec(regions)),\n+    let mut substs = subst::Substs {\n+        regions: subst::NonerasedRegions(regions),\n         self_ty: self_ty,\n         tps: tps\n     };\n@@ -261,7 +261,7 @@ pub fn ast_path_to_substs_and_ty<AC:AstConv,\n     } = this.get_item_ty(did);\n \n     let substs = ast_path_substs(this, rscope, &generics, None, path);\n-    let ty = ty::subst(tcx, &substs, decl_ty);\n+    let ty = decl_ty.subst(tcx, &substs);\n     ty_param_substs_and_ty { substs: substs, ty: ty }\n }\n "}, {"sha": "cccb40be5ae52c951a0f41ba10e5e18c775a1088", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -11,6 +11,8 @@\n #![allow(non_camel_case_types)]\n \n use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding, pat_is_const};\n+use middle::subst;\n+use middle::subst::Subst;\n use middle::ty;\n use middle::typeck::check::demand;\n use middle::typeck::check::{check_expr, check_expr_has_type, FnCtxt};\n@@ -151,7 +153,7 @@ pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,\n                             if var_tpt.generics.type_param_defs().len() ==\n                                 expected_substs.tps.len()\n                             {\n-                                ty::subst(tcx, expected_substs, *t)\n+                                t.subst(tcx, expected_substs)\n                             }\n                             else {\n                                 *t // In this case, an error was already signaled\n@@ -301,7 +303,7 @@ pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n                                fields: &[ast::FieldPat],\n                                class_fields: Vec<ty::field_ty>,\n                                class_id: ast::DefId,\n-                               substitutions: &ty::substs,\n+                               substitutions: &subst::Substs,\n                                etc: bool) {\n     let tcx = pcx.fcx.ccx.tcx;\n \n@@ -362,7 +364,7 @@ pub fn check_struct_pat(pcx: &pat_ctxt, pat_id: ast::NodeId, span: Span,\n                         expected: ty::t, path: &ast::Path,\n                         fields: &[ast::FieldPat], etc: bool,\n                         struct_id: ast::DefId,\n-                        substitutions: &ty::substs) {\n+                        substitutions: &subst::Substs) {\n     let fcx = pcx.fcx;\n     let tcx = pcx.fcx.ccx.tcx;\n \n@@ -400,7 +402,7 @@ pub fn check_struct_like_enum_variant_pat(pcx: &pat_ctxt,\n                                           fields: &[ast::FieldPat],\n                                           etc: bool,\n                                           enum_id: ast::DefId,\n-                                          substitutions: &ty::substs) {\n+                                          substitutions: &subst::Substs) {\n     let fcx = pcx.fcx;\n     let tcx = pcx.fcx.ccx.tcx;\n \n@@ -565,10 +567,10 @@ pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) {\n                                           fields.as_slice(),\n                                           etc,\n                                           supplied_def_id,\n-                                          &ty::substs {\n+                                          &subst::Substs {\n                                               self_ty: None,\n                                               tps: Vec::new(),\n-                                              regions: ty::ErasedRegions,\n+                                              regions: subst::ErasedRegions,\n                                           });\n                     }\n                     _ => () // Error, but we're already in an error case"}, {"sha": "0d4fea56e7790ae8253d516d0b2e7935732c581e", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -80,6 +80,7 @@ obtained the type `Foo`, we would never match this method.\n */\n \n \n+use middle::subst;\n use middle::subst::Subst;\n use middle::ty::*;\n use middle::ty;\n@@ -104,7 +105,6 @@ use syntax::ast::{MutMutable, MutImmutable};\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::parse::token;\n-use syntax::owned_slice::OwnedSlice;\n \n #[deriving(PartialEq)]\n pub enum CheckTraitsFlag {\n@@ -233,7 +233,7 @@ fn construct_transformed_self_ty_for_object(\n     tcx: &ty::ctxt,\n     span: Span,\n     trait_def_id: ast::DefId,\n-    rcvr_substs: &ty::substs,\n+    rcvr_substs: &subst::Substs,\n     method_ty: &ty::Method)\n     -> ty::t {\n     /*!\n@@ -257,7 +257,7 @@ fn construct_transformed_self_ty_for_object(\n         * match below.\n         */\n \n-    let substs = ty::substs {regions: rcvr_substs.regions.clone(),\n+    let substs = subst::Substs {regions: rcvr_substs.regions.clone(),\n                                 self_ty: None,\n                                 tps: rcvr_substs.tps.clone()};\n     match method_ty.explicit_self {\n@@ -319,7 +319,7 @@ struct LookupContext<'a> {\n #[deriving(Clone)]\n struct Candidate {\n     rcvr_match_condition: RcvrMatchCondition,\n-    rcvr_substs: ty::substs,\n+    rcvr_substs: subst::Substs,\n     method_ty: Rc<ty::Method>,\n     origin: MethodOrigin,\n }\n@@ -500,7 +500,7 @@ impl<'a> LookupContext<'a> {\n \n     fn push_inherent_candidates_from_object(&mut self,\n                                             did: DefId,\n-                                            substs: &ty::substs) {\n+                                            substs: &subst::Substs) {\n         debug!(\"push_inherent_candidates_from_object(did={}, substs={})\",\n                self.did_to_str(did),\n                substs.repr(self.tcx()));\n@@ -516,7 +516,7 @@ impl<'a> LookupContext<'a> {\n         //\n         // `confirm_candidate()` also relies upon this substitution\n         // for Self. (fix)\n-        let rcvr_substs = substs {\n+        let rcvr_substs = subst::Substs {\n             self_ty: Some(ty::mk_err()),\n             ..(*substs).clone()\n         };\n@@ -1047,7 +1047,7 @@ impl<'a> LookupContext<'a> {\n             return Some(MethodCallee {\n                 origin: relevant_candidates.get(0).origin,\n                 ty: ty::mk_err(),\n-                substs: substs::empty()\n+                substs: subst::Substs::empty()\n             });\n         }\n \n@@ -1140,8 +1140,10 @@ impl<'a> LookupContext<'a> {\n         // Determine values for the early-bound lifetime parameters.\n         // FIXME -- permit users to manually specify lifetimes\n         let mut all_regions: Vec<Region> = match candidate.rcvr_substs.regions {\n-            NonerasedRegions(ref v) => v.iter().map(|r| r.clone()).collect(),\n-            ErasedRegions => tcx.sess.span_bug(self.span, \"ErasedRegions\")\n+            subst::NonerasedRegions(ref v) => {\n+                v.iter().map(|r| r.clone()).collect()\n+            }\n+            subst::ErasedRegions => tcx.sess.span_bug(self.span, \"ErasedRegions\")\n         };\n         let m_regions =\n             self.fcx.infcx().region_vars_for_defs(\n@@ -1153,9 +1155,9 @@ impl<'a> LookupContext<'a> {\n \n         // Construct the full set of type parameters for the method,\n         // which is equal to the class tps + the method tps.\n-        let all_substs = substs {\n+        let all_substs = subst::Substs {\n             tps: candidate.rcvr_substs.tps.clone().append(m_substs.as_slice()),\n-            regions: NonerasedRegions(OwnedSlice::from_vec(all_regions)),\n+            regions: subst::NonerasedRegions(all_regions),\n             self_ty: candidate.rcvr_substs.self_ty,\n         };\n \n@@ -1164,7 +1166,7 @@ impl<'a> LookupContext<'a> {\n         // Compute the method type with type parameters substituted\n         debug!(\"fty={} all_substs={}\",\n                bare_fn_ty.repr(tcx),\n-               ty::substs_to_str(tcx, &all_substs));\n+               all_substs.repr(tcx));\n \n         let fn_sig = &bare_fn_ty.sig;\n         let inputs = match candidate.origin {"}, {"sha": "a2bf979180ffec9cbc21de136c0c7baf8c22c3d8", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 44, "deletions": 39, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -83,10 +83,11 @@ use middle::lang_items::{ManagedHeapLangItem};\n use middle::lint::UnreachableCode;\n use middle::pat_util::pat_id_map;\n use middle::pat_util;\n-use middle::subst::Subst;\n+use middle::subst;\n+use middle::subst::{Subst, Substs};\n use middle::ty::{FnSig, VariantInfo};\n use middle::ty::{ty_param_bounds_and_ty, ty_param_substs_and_ty};\n-use middle::ty::{substs, param_ty, Disr, ExprTyProvider};\n+use middle::ty::{param_ty, Disr, ExprTyProvider};\n use middle::ty;\n use middle::ty_fold::TypeFolder;\n use middle::typeck::astconv::AstConv;\n@@ -283,9 +284,11 @@ fn blank_fn_ctxt<'a>(ccx: &'a CrateCtxt<'a>,\n fn blank_inherited_fields<'a>(ccx: &'a CrateCtxt<'a>) -> Inherited<'a> {\n     // It's kind of a kludge to manufacture a fake function context\n     // and statement context, but we might as well do write the code only once\n-    let param_env = ty::ParameterEnvironment { free_substs: substs::empty(),\n-                                               self_param_bound: None,\n-                                               type_param_bounds: Vec::new() };\n+    let param_env = ty::ParameterEnvironment {\n+        free_substs: subst::Substs::empty(),\n+        self_param_bound: None,\n+        type_param_bounds: Vec::new()\n+    };\n     Inherited::new(ccx.tcx, param_env)\n }\n \n@@ -855,7 +858,7 @@ fn compare_impl_method(tcx: &ty::ctxt,\n                        impl_m_span: Span,\n                        impl_m_body_id: ast::NodeId,\n                        trait_m: &ty::Method,\n-                       trait_substs: &ty::substs) {\n+                       trait_substs: &subst::Substs) {\n     debug!(\"compare_impl_method()\");\n     let infcx = infer::new_infer_ctxt(tcx);\n \n@@ -983,15 +986,15 @@ fn compare_impl_method(tcx: &ty::ctxt,\n         impl_m.generics.type_param_defs().iter().enumerate().\n         map(|(i,t)| ty::mk_param(tcx, i + impl_tps, t.def_id)).\n         collect();\n-    let dummy_impl_regions: OwnedSlice<ty::Region> =\n+    let dummy_impl_regions: Vec<ty::Region> =\n         impl_generics.region_param_defs().iter().\n         map(|l| ty::ReFree(ty::FreeRegion {\n                 scope_id: impl_m_body_id,\n                 bound_region: ty::BrNamed(l.def_id, l.name)})).\n         collect();\n-    let dummy_substs = ty::substs {\n+    let dummy_substs = subst::Substs {\n         tps: dummy_impl_tps.append(dummy_method_tps.as_slice()),\n-        regions: ty::NonerasedRegions(dummy_impl_regions),\n+        regions: subst::NonerasedRegions(dummy_impl_regions),\n         self_ty: None };\n \n     // Create a bare fn type for trait/impl\n@@ -1012,10 +1015,10 @@ fn compare_impl_method(tcx: &ty::ctxt,\n     };\n     debug!(\"impl_fty (post-subst): {}\", ppaux::ty_to_str(tcx, impl_fty));\n     let trait_fty = {\n-        let substs { regions: trait_regions,\n-                     tps: trait_tps,\n-                     self_ty: self_ty } = trait_substs.subst(tcx, &dummy_substs);\n-        let substs = substs {\n+        let subst::Substs { regions: trait_regions,\n+                            tps: trait_tps,\n+                            self_ty: self_ty } = trait_substs.subst(tcx, &dummy_substs);\n+        let substs = subst::Substs {\n             regions: trait_regions,\n             tps: trait_tps.append(dummy_method_tps.as_slice()),\n             self_ty: self_ty,\n@@ -1107,7 +1110,7 @@ impl<'a> FnCtxt<'a> {\n     }\n \n     pub fn write_substs(&self, node_id: ast::NodeId, substs: ty::ItemSubsts) {\n-        if !ty::substs_is_noop(&substs.substs) {\n+        if !substs.substs.is_noop() {\n             debug!(\"write_substs({}, {}) in fcx {}\",\n                    node_id,\n                    substs.repr(self.tcx()),\n@@ -1121,7 +1124,7 @@ impl<'a> FnCtxt<'a> {\n                            node_id: ast::NodeId,\n                            ty: ty::t,\n                            substs: ty::ItemSubsts) {\n-        let ty = ty::subst(self.tcx(), &substs.substs, ty);\n+        let ty = ty.subst(self.tcx(), &substs.substs);\n         self.write_ty(node_id, ty);\n         self.write_substs(node_id, substs);\n     }\n@@ -1185,7 +1188,7 @@ impl<'a> FnCtxt<'a> {\n         }\n     }\n \n-    pub fn method_ty_substs(&self, id: ast::NodeId) -> ty::substs {\n+    pub fn method_ty_substs(&self, id: ast::NodeId) -> subst::Substs {\n         match self.inh.method_map.borrow().find(&MethodCall::expr(id)) {\n             Some(method) => method.substs.clone(),\n             None => {\n@@ -1488,12 +1491,12 @@ pub fn impl_self_ty(vcx: &VtableContext,\n     let rps = vcx.infcx.region_vars_for_defs(span, rps);\n     let tps = vcx.infcx.next_ty_vars(n_tps);\n \n-    let substs = substs {\n-        regions: ty::NonerasedRegions(rps),\n+    let substs = subst::Substs {\n+        regions: subst::NonerasedRegions(rps),\n         self_ty: None,\n         tps: tps,\n     };\n-    let substd_ty = ty::subst(tcx, &substs, raw_ty);\n+    let substd_ty = raw_ty.subst(tcx, &substs);\n \n     ty_param_substs_and_ty { substs: substs, ty: substd_ty }\n }\n@@ -1504,7 +1507,7 @@ pub fn lookup_field_ty(tcx: &ty::ctxt,\n                        class_id: ast::DefId,\n                        items: &[ty::field_ty],\n                        fieldname: ast::Name,\n-                       substs: &ty::substs) -> Option<ty::t> {\n+                       substs: &subst::Substs) -> Option<ty::t> {\n \n     let o_field = items.iter().find(|f| f.name == fieldname);\n     o_field.map(|f| ty::lookup_field_type(tcx, class_id, f.id, substs))\n@@ -2437,7 +2440,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                                       span: Span,\n                                       class_id: ast::DefId,\n                                       node_id: ast::NodeId,\n-                                      substitutions: ty::substs,\n+                                      substitutions: subst::Substs,\n                                       field_types: &[ty::field_ty],\n                                       ast_fields: &[ast::Field],\n                                       check_completeness: bool)  {\n@@ -2543,13 +2546,13 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         // Generate the struct type.\n         let regions = fcx.infcx().region_vars_for_defs(span, region_param_defs);\n         let type_parameters = fcx.infcx().next_ty_vars(type_parameter_count);\n-        let substitutions = substs {\n-            regions: ty::NonerasedRegions(regions),\n+        let substitutions = subst::Substs {\n+            regions: subst::NonerasedRegions(regions),\n             self_ty: None,\n             tps: type_parameters\n         };\n \n-        let mut struct_type = ty::subst(tcx, &substitutions, raw_type);\n+        let mut struct_type = raw_type.subst(tcx, &substitutions);\n \n         // Look up and check the fields.\n         let class_fields = ty::lookup_struct_fields(tcx, class_id);\n@@ -2599,13 +2602,13 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         // Generate the enum type.\n         let regions = fcx.infcx().region_vars_for_defs(span, region_param_defs);\n         let type_parameters = fcx.infcx().next_ty_vars(type_parameter_count);\n-        let substitutions = substs {\n-            regions: ty::NonerasedRegions(regions),\n+        let substitutions = subst::Substs {\n+            regions: subst::NonerasedRegions(regions),\n             self_ty: None,\n             tps: type_parameters\n         };\n \n-        let enum_type = ty::subst(tcx, &substitutions, raw_type);\n+        let enum_type = raw_type.subst(tcx, &substitutions);\n \n         // Look up and check the enum variant fields.\n         let variant_fields = ty::lookup_struct_fields(tcx, variant_id);\n@@ -2734,10 +2737,10 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                                       }\n                                   };\n                               let regions =\n-                                  ty::NonerasedRegions(OwnedSlice::empty());\n+                                  subst::NonerasedRegions(Vec::new());\n                               let sty = ty::mk_struct(tcx,\n                                                       gc_struct_id,\n-                                                      substs {\n+                                                      subst::Substs {\n                                                         self_ty: None,\n                                                         tps: vec!(\n                                                             fcx.expr_ty(\n@@ -3888,8 +3891,10 @@ pub fn instantiate_path(fcx: &FnCtxt,\n     let num_expected_regions = tpt.generics.region_param_defs().len();\n     let num_supplied_regions = pth.segments.last().unwrap().lifetimes.len();\n     let regions = if num_expected_regions == num_supplied_regions {\n-        OwnedSlice::from_vec(pth.segments.last().unwrap().lifetimes.iter().map(\n-            |l| ast_region_to_region(fcx.tcx(), l)).collect())\n+        pth.segments.last().unwrap().lifetimes\n+            .iter()\n+            .map(|l| ast_region_to_region(fcx.tcx(), l))\n+            .collect()\n     } else {\n         if num_supplied_regions != 0 {\n             fcx.ccx.tcx.sess.span_err(\n@@ -3904,7 +3909,7 @@ pub fn instantiate_path(fcx: &FnCtxt,\n \n         fcx.infcx().region_vars_for_defs(span, tpt.generics.region_param_defs.as_slice())\n     };\n-    let regions = ty::NonerasedRegions(regions);\n+    let regions = subst::NonerasedRegions(regions);\n \n     // Special case: If there is a self parameter, omit it from the list of\n     // type parameters.\n@@ -3980,7 +3985,7 @@ pub fn instantiate_path(fcx: &FnCtxt,\n             tps.push(ty)\n         }\n \n-        let mut substs = substs {\n+        let mut substs = subst::Substs {\n             regions: regions,\n             self_ty: None,\n             tps: tps\n@@ -4020,13 +4025,13 @@ pub fn instantiate_path(fcx: &FnCtxt,\n \n         assert_eq!(substs.tps.len(), ty_param_count)\n \n-        let substs {tps, regions, ..} = substs;\n+        let subst::Substs {tps, regions, ..} = substs;\n         (tps, regions)\n     };\n \n-    let substs = substs { regions: regions,\n-                          self_ty: None,\n-                          tps: tps };\n+    let substs = subst::Substs { regions: regions,\n+                                 self_ty: None,\n+                                 tps: tps };\n \n     fcx.write_ty_substs(node_id, tpt.ty, ty::ItemSubsts {\n         substs: substs,\n@@ -4261,10 +4266,10 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n             \"type_id\" => {\n                 let langid = ccx.tcx.lang_items.require(TypeIdLangItem);\n                 match langid {\n-                    Ok(did) => (1u, Vec::new(), ty::mk_struct(ccx.tcx, did, substs {\n+                    Ok(did) => (1u, Vec::new(), ty::mk_struct(ccx.tcx, did, subst::Substs {\n                                                  self_ty: None,\n                                                  tps: Vec::new(),\n-                                                 regions: ty::NonerasedRegions(OwnedSlice::empty())\n+                                                 regions: subst::NonerasedRegions(Vec::new())\n                                                  }) ),\n                     Err(msg) => {\n                         tcx.sess.span_fatal(it.span, msg.as_slice());"}, {"sha": "3f8d8285ae48af44cefefbe0d94be87ba4cfe547", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -23,6 +23,7 @@ use middle::typeck::{vtable_origin, vtable_res, vtable_param_res};\n use middle::typeck::{vtable_static, vtable_param, impl_res};\n use middle::typeck::{param_numbered, param_self, param_index};\n use middle::typeck::MethodCall;\n+use middle::subst;\n use middle::subst::Subst;\n use util::common::indenter;\n use util::ppaux;\n@@ -81,7 +82,7 @@ fn has_trait_bounds(type_param_defs: &[ty::TypeParameterDef]) -> bool {\n fn lookup_vtables(vcx: &VtableContext,\n                   span: Span,\n                   type_param_defs: &[ty::TypeParameterDef],\n-                  substs: &ty::substs,\n+                  substs: &subst::Substs,\n                   is_early: bool) -> vtable_res {\n     debug!(\"lookup_vtables(span={:?}, \\\n             type_param_defs={}, \\\n@@ -118,7 +119,7 @@ fn lookup_vtables(vcx: &VtableContext,\n fn lookup_vtables_for_param(vcx: &VtableContext,\n                             span: Span,\n                             // None for substs means the identity\n-                            substs: Option<&ty::substs>,\n+                            substs: Option<&subst::Substs>,\n                             type_param_bounds: &ty::ParamBounds,\n                             ty: ty::t,\n                             is_early: bool) -> vtable_param_res {\n@@ -464,9 +465,9 @@ fn search_for_vtable(vcx: &VtableContext,\n fn fixup_substs(vcx: &VtableContext,\n                 span: Span,\n                 id: ast::DefId,\n-                substs: ty::substs,\n+                substs: subst::Substs,\n                 is_early: bool)\n-                -> Option<ty::substs> {\n+                -> Option<subst::Substs> {\n     let tcx = vcx.tcx();\n     // use a dummy type just to package up the substs that need fixing up\n     let t = ty::mk_trait(tcx,\n@@ -503,7 +504,7 @@ fn fixup_ty(vcx: &VtableContext,\n \n fn connect_trait_tps(vcx: &VtableContext,\n                      span: Span,\n-                     impl_substs: &ty::substs,\n+                     impl_substs: &subst::Substs,\n                      trait_ref: Rc<ty::TraitRef>,\n                      impl_did: ast::DefId) {\n     let tcx = vcx.tcx();\n@@ -566,7 +567,7 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: &FnCtxt, is_early: bool) {\n                       let vcx = fcx.vtable_context();\n                       let target_trait_ref = Rc::new(ty::TraitRef {\n                           def_id: target_def_id,\n-                          substs: ty::substs {\n+                          substs: subst::Substs {\n                               tps: target_substs.tps.clone(),\n                               regions: target_substs.regions.clone(),\n                               self_ty: Some(typ)\n@@ -799,7 +800,7 @@ pub fn resolve_impl(tcx: &ty::ctxt,\n /// Resolve vtables for a method call after typeck has finished.\n /// Used by trans to monomorphize artificial method callees (e.g. drop).\n pub fn trans_resolve_method(tcx: &ty::ctxt, id: ast::NodeId,\n-                            substs: &ty::substs) -> Option<vtable_res> {\n+                            substs: &subst::Substs) -> Option<vtable_res> {\n     let generics = ty::lookup_item_type(tcx, ast_util::local_def(id)).generics;\n     let type_param_defs = &*generics.type_param_defs;\n     if has_trait_bounds(type_param_defs.as_slice()) {"}, {"sha": "514bb85349efb0b30d98cf4f9452a3b987dd29a3", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -14,6 +14,7 @@\n \n \n use middle::pat_util;\n+use middle::subst;\n use middle::ty;\n use middle::ty_fold::{TypeFolder,TypeFoldable};\n use middle::typeck::astconv::AstConv;\n@@ -291,7 +292,7 @@ impl<'cx> WritebackCx<'cx> {\n                 // probably for invocations on objects, and this\n                 // causes encoding failures). -nmatsakis\n                 new_method.substs.self_ty = None;\n-                new_method.substs.regions = ty::ErasedRegions;\n+                new_method.substs.regions = subst::ErasedRegions;\n \n                 self.tcx().method_map.borrow_mut().insert(\n                     method_call,"}, {"sha": "f9729ff767684b0b3c380c7f8a07c657a255ab4a", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -17,9 +17,11 @@\n \n use metadata::csearch::{each_impl, get_impl_trait, each_implementation_for_trait};\n use metadata::csearch;\n+use middle::subst;\n+use middle::subst::{Substs};\n use middle::ty::get;\n-use middle::ty::{ImplContainer, lookup_item_type, subst};\n-use middle::ty::{substs, t, ty_bool, ty_char, ty_bot, ty_box, ty_enum, ty_err};\n+use middle::ty::{ImplContainer, lookup_item_type};\n+use middle::ty::{t, ty_bool, ty_char, ty_bot, ty_box, ty_enum, ty_err};\n use middle::ty::{ty_str, ty_vec, ty_float, ty_infer, ty_int, ty_nil};\n use middle::ty::{ty_param, ty_param_bounds_and_ty, ty_ptr};\n use middle::ty::{ty_rptr, ty_self, ty_struct, ty_trait, ty_tup};\n@@ -41,7 +43,6 @@ use syntax::ast_map::NodeItem;\n use syntax::ast_map;\n use syntax::ast_util::{def_id_of_def, local_def};\n use syntax::codemap::Span;\n-use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token;\n use syntax::visit;\n \n@@ -505,14 +506,12 @@ impl<'a> CoherenceChecker<'a> {\n         let bounds_count = polytype.generics.type_param_defs().len();\n         let type_parameters = self.inference_context.next_ty_vars(bounds_count);\n \n-        let substitutions = substs {\n-            regions: ty::NonerasedRegions(region_parameters),\n+        let substitutions = subst::Substs {\n+            regions: subst::NonerasedRegions(region_parameters),\n             self_ty: None,\n             tps: type_parameters\n         };\n-        let monotype = subst(self.crate_context.tcx,\n-                             &substitutions,\n-                             polytype.ty);\n+        let monotype = polytype.ty.subst(self.crate_context.tcx, &substitutions);\n \n         UniversalQuantificationResult {\n             monotype: monotype,\n@@ -730,7 +729,7 @@ pub fn make_substs_for_receiver_types(tcx: &ty::ctxt,\n                                       impl_id: ast::DefId,\n                                       trait_ref: &ty::TraitRef,\n                                       method: &ty::Method)\n-                                      -> ty::substs {\n+                                      -> subst::Substs {\n     /*!\n      * Substitutes the values for the receiver's type parameters\n      * that are found in method, leaving the method's type parameters\n@@ -753,17 +752,17 @@ pub fn make_substs_for_receiver_types(tcx: &ty::ctxt,\n     let mut combined_tps = trait_ref.substs.tps.clone();\n     combined_tps.push_all_move(meth_tps);\n     let combined_regions = match &trait_ref.substs.regions {\n-        &ty::ErasedRegions =>\n+        &subst::ErasedRegions =>\n             fail!(\"make_substs_for_receiver_types: unexpected ErasedRegions\"),\n \n-        &ty::NonerasedRegions(ref rs) => {\n-            let mut rs = rs.clone().into_vec();\n+        &subst::NonerasedRegions(ref rs) => {\n+            let mut rs = rs.clone();\n             rs.push_all_move(meth_regions);\n-            ty::NonerasedRegions(OwnedSlice::from_vec(rs))\n+            subst::NonerasedRegions(rs)\n         }\n     };\n \n-    ty::substs {\n+    subst::Substs {\n         regions: combined_regions,\n         self_ty: trait_ref.substs.self_ty,\n         tps: combined_tps"}, {"sha": "a6478675a89b1d9647dd30001803c82f58f9e398", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -34,10 +34,11 @@ are represented as `ty_param()` instances.\n use metadata::csearch;\n use middle::lang_items::SizedTraitLangItem;\n use middle::resolve_lifetime;\n-use middle::ty::{ImplContainer, MethodContainer, TraitContainer, substs};\n+use middle::subst;\n+use middle::subst::{Subst, Substs};\n+use middle::ty::{ImplContainer, MethodContainer, TraitContainer};\n use middle::ty::{ty_param_bounds_and_ty};\n use middle::ty;\n-use middle::subst::Subst;\n use middle::typeck::astconv::{AstConv, ty_of_arg};\n use middle::typeck::astconv::{ast_ty_to_ty};\n use middle::typeck::astconv;\n@@ -320,16 +321,14 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n         //     A,B,C => A',B',C'\n         //     Self => D'\n         //     D,E,F => E',F',G'\n-        let substs = substs {\n-            regions: ty::NonerasedRegions(rps_from_trait),\n+        let substs = subst::Substs {\n+            regions: subst::NonerasedRegions(rps_from_trait),\n             self_ty: Some(self_param),\n             tps: non_shifted_trait_tps.append(shifted_method_tps.as_slice())\n         };\n \n         // create the type of `foo`, applying the substitution above\n-        let ty = ty::subst(tcx,\n-                           &substs,\n-                           ty::mk_bare_fn(tcx, m.fty.clone()));\n+        let ty = ty::mk_bare_fn(tcx, m.fty.clone()).subst(tcx, &substs);\n \n         // create the type parameter definitions for `foo`, applying\n         // the substitution to any traits that appear in their bounds.\n@@ -1211,17 +1210,18 @@ pub fn ty_of_foreign_fn_decl(ccx: &CrateCtxt,\n \n pub fn mk_item_substs(ccx: &CrateCtxt,\n                       ty_generics: &ty::Generics,\n-                      self_ty: Option<ty::t>) -> ty::substs\n+                      self_ty: Option<ty::t>)\n+                      -> subst::Substs\n {\n     let params: Vec<ty::t> =\n         ty_generics.type_param_defs().iter().enumerate().map(\n             |(i, t)| ty::mk_param(ccx.tcx, i, t.def_id)).collect();\n \n-    let regions: OwnedSlice<ty::Region> =\n+    let regions: Vec<ty::Region> =\n         ty_generics.region_param_defs().iter().enumerate().map(\n             |(i, l)| ty::ReEarlyBound(l.def_id.node, i, l.name)).collect();\n \n-    substs {regions: ty::NonerasedRegions(regions),\n-            self_ty: self_ty,\n-            tps: params}\n+    subst::Substs {regions: subst::NonerasedRegions(regions),\n+                   self_ty: self_ty,\n+                   tps: params}\n }"}, {"sha": "4a2cd7cbec2a83600842fd000c1d7122478a27ca", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -64,7 +64,7 @@ we may want to adjust precisely when coercions occur.\n \n */\n \n-\n+use middle::subst;\n use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowObj, AutoDerefRef};\n use middle::ty::{mt};\n use middle::ty;\n@@ -443,7 +443,7 @@ impl<'f> Coerce<'f> {\n                          sty_a: &ty::sty,\n                          b: ty::t,\n                          trait_def_id: ast::DefId,\n-                         trait_substs: &ty::substs,\n+                         trait_substs: &subst::Substs,\n                          trait_store: ty::TraitStore,\n                          bounds: ty::BuiltinBounds) -> CoerceResult {\n "}, {"sha": "2e8698e59aa9ac7d12e06af532924857758ae64e", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -47,8 +47,10 @@\n // now.\n \n \n+use middle::subst;\n+use middle::subst::Substs;\n use middle::ty::{FloatVar, FnSig, IntVar, TyVar};\n-use middle::ty::{IntType, UintType, substs};\n+use middle::ty::{IntType, UintType};\n use middle::ty::{BuiltinBounds};\n use middle::ty;\n use middle::typeck::infer::{then, ToUres};\n@@ -66,7 +68,6 @@ use std::result;\n \n use syntax::ast::{Onceness, FnStyle};\n use syntax::ast;\n-use syntax::owned_slice::OwnedSlice;\n use syntax::abi;\n \n pub trait Combine {\n@@ -127,22 +128,23 @@ pub trait Combine {\n \n     fn substs(&self,\n               item_def_id: ast::DefId,\n-              as_: &ty::substs,\n-              bs: &ty::substs) -> cres<ty::substs> {\n-\n+              as_: &subst::Substs,\n+              bs: &subst::Substs)\n+              -> cres<subst::Substs>\n+    {\n         fn relate_region_params<C:Combine>(this: &C,\n                                            item_def_id: ast::DefId,\n-                                           a: &ty::RegionSubsts,\n-                                           b: &ty::RegionSubsts)\n-                                           -> cres<ty::RegionSubsts> {\n+                                           a: &subst::RegionSubsts,\n+                                           b: &subst::RegionSubsts)\n+                                           -> cres<subst::RegionSubsts> {\n             let tcx = this.infcx().tcx;\n             match (a, b) {\n-                (&ty::ErasedRegions, _) | (_, &ty::ErasedRegions) => {\n-                    Ok(ty::ErasedRegions)\n+                (&subst::ErasedRegions, _) | (_, &subst::ErasedRegions) => {\n+                    Ok(subst::ErasedRegions)\n                 }\n \n-                (&ty::NonerasedRegions(ref a_rs),\n-                 &ty::NonerasedRegions(ref b_rs)) => {\n+                (&subst::NonerasedRegions(ref a_rs),\n+                 &subst::NonerasedRegions(ref b_rs)) => {\n                     let variances = ty::item_variances(tcx, item_def_id);\n                     let region_params = &variances.region_params;\n                     let num_region_params = region_params.len();\n@@ -175,7 +177,7 @@ pub trait Combine {\n                         };\n                         rs.push(if_ok!(r));\n                     }\n-                    Ok(ty::NonerasedRegions(OwnedSlice::from_vec(rs)))\n+                    Ok(subst::NonerasedRegions(rs))\n                 }\n             }\n         }\n@@ -186,9 +188,9 @@ pub trait Combine {\n                                                   item_def_id,\n                                                   &as_.regions,\n                                                   &bs.regions));\n-        Ok(substs { regions: regions,\n-                    self_ty: self_ty,\n-                    tps: tps.clone() })\n+        Ok(subst::Substs { regions: regions,\n+                           self_ty: self_ty,\n+                           tps: tps.clone() })\n     }\n \n     fn bare_fn_tys(&self, a: &ty::BareFnTy,"}, {"sha": "646dad879eef3d8eb58a2333a4be4e6c5b6706c1", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -41,7 +41,6 @@ use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap;\n use syntax::codemap::Span;\n-use syntax::owned_slice::OwnedSlice;\n use util::common::indent;\n use util::ppaux::{bound_region_to_str, ty_to_str, trait_ref_to_str, Repr};\n \n@@ -625,7 +624,7 @@ impl<'a> InferCtxt<'a> {\n     pub fn region_vars_for_defs(&self,\n                                 span: Span,\n                                 defs: &[ty::RegionParameterDef])\n-                                -> OwnedSlice<ty::Region> {\n+                                -> Vec<ty::Region> {\n         defs.iter()\n             .map(|d| self.next_region_var(EarlyBoundRegion(span, d.name)))\n             .collect()"}, {"sha": "d1c6618a9c0e2bca9c44aba0cdc91ff25dde2870", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -64,6 +64,7 @@ independently:\n use driver::config;\n \n use middle::resolve;\n+use middle::subst;\n use middle::ty;\n use util::common::time;\n use util::ppaux::Repr;\n@@ -144,7 +145,7 @@ pub struct MethodObject {\n pub struct MethodCallee {\n     pub origin: MethodOrigin,\n     pub ty: ty::t,\n-    pub substs: ty::substs\n+    pub substs: subst::Substs\n }\n \n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n@@ -184,7 +185,7 @@ pub enum vtable_origin {\n       from whence comes the vtable, and tys are the type substs.\n       vtable_res is the vtable itself\n      */\n-    vtable_static(ast::DefId, ty::substs, vtable_res),\n+    vtable_static(ast::DefId, subst::Substs, vtable_res),\n \n     /*\n       Dynamic vtable, comes from a parameter that has a bound on it:"}, {"sha": "04244ff31a8c31923db9bc647e9efd1414dbd46d", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -195,6 +195,7 @@ represents the \"variance transform\" as defined in the paper:\n use std::collections::HashMap;\n use arena;\n use arena::Arena;\n+use middle::subst;\n use middle::ty;\n use std::fmt;\n use std::rc::Rc;\n@@ -798,7 +799,7 @@ impl<'a> ConstraintContext<'a> {\n     fn add_constraints_from_substs(&mut self,\n                                    def_id: ast::DefId,\n                                    generics: &ty::Generics,\n-                                   substs: &ty::substs,\n+                                   substs: &subst::Substs,\n                                    variance: VarianceTermPtr<'a>) {\n         debug!(\"add_constraints_from_substs(def_id={:?})\", def_id);\n \n@@ -810,8 +811,8 @@ impl<'a> ConstraintContext<'a> {\n         }\n \n         match substs.regions {\n-            ty::ErasedRegions => {}\n-            ty::NonerasedRegions(ref rps) => {\n+            subst::ErasedRegions => {}\n+            subst::NonerasedRegions(ref rps) => {\n                 for (i, p) in generics.region_param_defs().iter().enumerate() {\n                     let variance_decl =\n                         self.declared_variance(p.def_id, def_id, RegionParam, i);"}, {"sha": "a9ac1e76f11877ff5c567e3242d011f4b8ceaf34", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n \n+use middle::subst;\n+use middle::subst::Subst;\n use middle::ty::{ReSkolemized, ReVar};\n use middle::ty::{BoundRegion, BrAnon, BrNamed};\n use middle::ty::{BrFresh, ctxt};\n@@ -419,15 +421,15 @@ pub fn ty_to_str(cx: &ctxt, typ: t) -> String {\n \n pub fn parameterized(cx: &ctxt,\n                      base: &str,\n-                     regions: &ty::RegionSubsts,\n+                     regions: &subst::RegionSubsts,\n                      tps: &[ty::t],\n                      did: ast::DefId,\n                      is_trait: bool)\n                      -> String {\n     let mut strs = Vec::new();\n     match *regions {\n-        ty::ErasedRegions => { }\n-        ty::NonerasedRegions(ref regions) => {\n+        subst::ErasedRegions => { }\n+        subst::NonerasedRegions(ref regions) => {\n             for &r in regions.iter() {\n                 strs.push(region_to_str(cx, \"\", false, r))\n             }\n@@ -443,15 +445,15 @@ pub fn parameterized(cx: &ctxt,\n     let has_defaults = ty_params.last().map_or(false, |def| def.default.is_some());\n     let num_defaults = if has_defaults {\n         // We should have a borrowed version of substs instead of cloning.\n-        let mut substs = ty::substs {\n+        let mut substs = subst::Substs {\n             tps: Vec::from_slice(tps),\n             regions: regions.clone(),\n             self_ty: None\n         };\n         ty_params.iter().zip(tps.iter()).rev().take_while(|&(def, &actual)| {\n             substs.tps.pop();\n             match def.default {\n-                Some(default) => ty::subst(cx, &substs, default) == actual,\n+                Some(default) => default.subst(cx, &substs) == actual,\n                 None => false\n             }\n         }).len()\n@@ -565,7 +567,7 @@ impl Repr for ty::t {\n     }\n }\n \n-impl Repr for ty::substs {\n+impl Repr for subst::Substs {\n     fn repr(&self, tcx: &ctxt) -> String {\n         format!(\"substs(regions={}, self_ty={}, tps={})\",\n                 self.regions.repr(tcx),\n@@ -580,11 +582,11 @@ impl Repr for ty::ItemSubsts {\n     }\n }\n \n-impl Repr for ty::RegionSubsts {\n+impl Repr for subst::RegionSubsts {\n     fn repr(&self, tcx: &ctxt) -> String {\n         match *self {\n-            ty::ErasedRegions => \"erased\".to_string(),\n-            ty::NonerasedRegions(ref regions) => regions.repr(tcx)\n+            subst::ErasedRegions => \"erased\".to_string(),\n+            subst::NonerasedRegions(ref regions) => regions.repr(tcx)\n         }\n     }\n }"}, {"sha": "70c90b67d78643c110a4934cc113841a6c944126", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f24a53757e1e78fcf7f3a9208a0496dee26a6423/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f24a53757e1e78fcf7f3a9208a0496dee26a6423", "patch": "@@ -25,6 +25,7 @@ use rustc::driver::driver;\n use rustc::metadata::cstore;\n use rustc::metadata::csearch;\n use rustc::metadata::decoder;\n+use rustc::middle::subst;\n use rustc::middle::ty;\n \n use std::rc::Rc;\n@@ -486,14 +487,14 @@ impl Clean<TyParamBound> for ast::TyParamBound {\n     }\n }\n \n-fn external_path(name: &str, substs: &ty::substs) -> Path {\n+fn external_path(name: &str, substs: &subst::Substs) -> Path {\n     Path {\n         global: false,\n         segments: vec![PathSegment {\n             name: name.to_string(),\n             lifetimes: match substs.regions {\n-                ty::ErasedRegions => Vec::new(),\n-                ty::NonerasedRegions(ref v) => {\n+                subst::ErasedRegions => Vec::new(),\n+                subst::NonerasedRegions(ref v) => {\n                     v.iter().filter_map(|v| v.clean()).collect()\n                 }\n             },\n@@ -509,7 +510,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n             core::Typed(ref tcx) => tcx,\n             core::NotTyped(_) => return RegionBound,\n         };\n-        let empty = ty::substs::empty();\n+        let empty = subst::Substs::empty();\n         let (did, path) = match *self {\n             ty::BoundStatic => return RegionBound,\n             ty::BoundSend =>\n@@ -574,12 +575,12 @@ impl Clean<Vec<TyParamBound>> for ty::ParamBounds {\n     }\n }\n \n-impl Clean<Option<Vec<TyParamBound>>> for ty::substs {\n+impl Clean<Option<Vec<TyParamBound>>> for subst::Substs {\n     fn clean(&self) -> Option<Vec<TyParamBound>> {\n         let mut v = Vec::new();\n         match self.regions {\n-            ty::NonerasedRegions(..) => v.push(RegionBound),\n-            ty::ErasedRegions => {}\n+            subst::NonerasedRegions(..) => v.push(RegionBound),\n+            subst::ErasedRegions => {}\n         }\n         v.extend(self.tps.iter().map(|t| TraitBound(t.clean())));\n "}]}