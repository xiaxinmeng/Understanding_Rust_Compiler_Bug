{"sha": "382d24e7d73e36fa150866051e700a2307916f77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MmQyNGU3ZDczZTM2ZmExNTA4NjYwNTFlNzAwYTIzMDc5MTZmNzc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-04T17:13:37Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T07:26:13Z"}, "message": "rustc: start moving util::ppaux to ty::print.", "tree": {"sha": "2c3909157fcb54159bdc0f2f8a11f4268373e1cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c3909157fcb54159bdc0f2f8a11f4268373e1cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/382d24e7d73e36fa150866051e700a2307916f77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/382d24e7d73e36fa150866051e700a2307916f77", "html_url": "https://github.com/rust-lang/rust/commit/382d24e7d73e36fa150866051e700a2307916f77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/382d24e7d73e36fa150866051e700a2307916f77/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "228d6f45d8fbf289e6505d12379a41e13a0872a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/228d6f45d8fbf289e6505d12379a41e13a0872a1", "html_url": "https://github.com/rust-lang/rust/commit/228d6f45d8fbf289e6505d12379a41e13a0872a1"}], "stats": {"total": 176, "additions": 93, "deletions": 83}, "files": [{"sha": "23fa81f77df282757db3574b105165f15ce91f2a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/382d24e7d73e36fa150866051e700a2307916f77/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382d24e7d73e36fa150866051e700a2307916f77/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=382d24e7d73e36fa150866051e700a2307916f77", "patch": "@@ -99,6 +99,7 @@ pub mod item_path;\n pub mod layout;\n pub mod _match;\n pub mod outlives;\n+pub mod print;\n pub mod query;\n pub mod relate;\n pub mod steal;"}, {"sha": "f58bb2824d1d24ba636c68de598ff06cd2ea9cdc", "filename": "src/librustc/ty/print.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/382d24e7d73e36fa150866051e700a2307916f77/src%2Flibrustc%2Fty%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382d24e7d73e36fa150866051e700a2307916f77/src%2Flibrustc%2Fty%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint.rs?ref=382d24e7d73e36fa150866051e700a2307916f77", "patch": "@@ -0,0 +1,91 @@\n+use crate::ty::{self, TypeFoldable};\n+\n+use rustc_data_structures::fx::FxHashSet;\n+use syntax::symbol::InternedString;\n+\n+use std::fmt;\n+\n+// FIXME(eddyb) this module uses `pub(crate)` for things used only\n+// from `ppaux` - when that is removed, they can be re-privatized.\n+\n+struct LateBoundRegionNameCollector(FxHashSet<InternedString>);\n+impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+        match *r {\n+            ty::ReLateBound(_, ty::BrNamed(_, name)) => {\n+                self.0.insert(name);\n+            },\n+            _ => {},\n+        }\n+        r.super_visit_with(self)\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct PrintContext {\n+    pub(crate) is_debug: bool,\n+    pub(crate) is_verbose: bool,\n+    pub(crate) identify_regions: bool,\n+    pub(crate) used_region_names: Option<FxHashSet<InternedString>>,\n+    pub(crate) region_index: usize,\n+    pub(crate) binder_depth: usize,\n+}\n+\n+impl PrintContext {\n+    pub(crate) fn new() -> Self {\n+        ty::tls::with_opt(|tcx| {\n+            let (is_verbose, identify_regions) = tcx.map(\n+                |tcx| (tcx.sess.verbose(), tcx.sess.opts.debugging_opts.identify_regions)\n+            ).unwrap_or((false, false));\n+            PrintContext {\n+                is_debug: false,\n+                is_verbose: is_verbose,\n+                identify_regions: identify_regions,\n+                used_region_names: None,\n+                region_index: 0,\n+                binder_depth: 0,\n+            }\n+        })\n+    }\n+    pub(crate) fn prepare_late_bound_region_info<'tcx, T>(&mut self, value: &ty::Binder<T>)\n+    where T: TypeFoldable<'tcx>\n+    {\n+        let mut collector = LateBoundRegionNameCollector(Default::default());\n+        value.visit_with(&mut collector);\n+        self.used_region_names = Some(collector.0);\n+        self.region_index = 0;\n+    }\n+}\n+\n+pub trait Print {\n+    fn print<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result;\n+    fn print_to_string(&self, cx: &mut PrintContext) -> String {\n+        let mut result = String::new();\n+        let _ = self.print(&mut result, cx);\n+        result\n+    }\n+    fn print_display<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result {\n+        let old_debug = cx.is_debug;\n+        cx.is_debug = false;\n+        let result = self.print(f, cx);\n+        cx.is_debug = old_debug;\n+        result\n+    }\n+    fn print_display_to_string(&self, cx: &mut PrintContext) -> String {\n+        let mut result = String::new();\n+        let _ = self.print_display(&mut result, cx);\n+        result\n+    }\n+    fn print_debug<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result {\n+        let old_debug = cx.is_debug;\n+        cx.is_debug = true;\n+        let result = self.print(f, cx);\n+        cx.is_debug = old_debug;\n+        result\n+    }\n+    fn print_debug_to_string(&self, cx: &mut PrintContext) -> String {\n+        let mut result = String::new();\n+        let _ = self.print_debug(&mut result, cx);\n+        result\n+    }\n+}"}, {"sha": "24b9779654a2049a926db00e4599b80b466185ac", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 83, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/382d24e7d73e36fa150866051e700a2307916f77/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382d24e7d73e36fa150866051e700a2307916f77/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=382d24e7d73e36fa150866051e700a2307916f77", "patch": "@@ -9,8 +9,8 @@ use crate::ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n use crate::ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n use crate::ty::{Placeholder, UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind, ParamConst};\n+use crate::ty::print::{PrintContext, Print};\n use crate::mir::interpret::ConstValue;\n-use crate::util::nodemap::FxHashSet;\n \n use std::cell::Cell;\n use std::fmt;\n@@ -275,88 +275,6 @@ macro_rules! print {\n     };\n }\n \n-\n-struct LateBoundRegionNameCollector(FxHashSet<InternedString>);\n-impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector {\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n-        match *r {\n-            ty::ReLateBound(_, ty::BrNamed(_, name)) => {\n-                self.0.insert(name);\n-            },\n-            _ => {},\n-        }\n-        r.super_visit_with(self)\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct PrintContext {\n-    is_debug: bool,\n-    is_verbose: bool,\n-    identify_regions: bool,\n-    used_region_names: Option<FxHashSet<InternedString>>,\n-    region_index: usize,\n-    binder_depth: usize,\n-}\n-impl PrintContext {\n-    fn new() -> Self {\n-        ty::tls::with_opt(|tcx| {\n-            let (is_verbose, identify_regions) = tcx.map(\n-                |tcx| (tcx.sess.verbose(), tcx.sess.opts.debugging_opts.identify_regions)\n-            ).unwrap_or((false, false));\n-            PrintContext {\n-                is_debug: false,\n-                is_verbose: is_verbose,\n-                identify_regions: identify_regions,\n-                used_region_names: None,\n-                region_index: 0,\n-                binder_depth: 0,\n-            }\n-        })\n-    }\n-    fn prepare_late_bound_region_info<'tcx, T>(&mut self, value: &ty::Binder<T>)\n-    where T: TypeFoldable<'tcx>\n-    {\n-        let mut collector = LateBoundRegionNameCollector(Default::default());\n-        value.visit_with(&mut collector);\n-        self.used_region_names = Some(collector.0);\n-        self.region_index = 0;\n-    }\n-}\n-\n-pub trait Print {\n-    fn print<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result;\n-    fn print_to_string(&self, cx: &mut PrintContext) -> String {\n-        let mut result = String::new();\n-        let _ = self.print(&mut result, cx);\n-        result\n-    }\n-    fn print_display<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result {\n-        let old_debug = cx.is_debug;\n-        cx.is_debug = false;\n-        let result = self.print(f, cx);\n-        cx.is_debug = old_debug;\n-        result\n-    }\n-    fn print_display_to_string(&self, cx: &mut PrintContext) -> String {\n-        let mut result = String::new();\n-        let _ = self.print_display(&mut result, cx);\n-        result\n-    }\n-    fn print_debug<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result {\n-        let old_debug = cx.is_debug;\n-        cx.is_debug = true;\n-        let result = self.print(f, cx);\n-        cx.is_debug = old_debug;\n-        result\n-    }\n-    fn print_debug_to_string(&self, cx: &mut PrintContext) -> String {\n-        let mut result = String::new();\n-        let _ = self.print_debug(&mut result, cx);\n-        result\n-    }\n-}\n-\n impl PrintContext {\n     fn fn_sig<F: fmt::Write>(&mut self,\n                              f: &mut F,"}]}