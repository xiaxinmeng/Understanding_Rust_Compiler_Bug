{"sha": "f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZjZkODdlYWIyMGY2MmE0ZmJiMTZiMzI3ZjE2ZmE2OWRiYmFmOTk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-30T10:40:59Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-30T10:40:59Z"}, "message": "Stabilise exhaustive_integer_patterns", "tree": {"sha": "34cba7ba3ed2e1f06b74dfa4304e250cf0a85d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34cba7ba3ed2e1f06b74dfa4304e250cf0a85d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99", "html_url": "https://github.com/rust-lang/rust/commit/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dde9e132207b5a40e12f8d5a1a363ebea60e0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dde9e132207b5a40e12f8d5a1a363ebea60e0b0", "html_url": "https://github.com/rust-lang/rust/commit/3dde9e132207b5a40e12f8d5a1a363ebea60e0b0"}], "stats": {"total": 42, "additions": 19, "deletions": 23}, "files": [{"sha": "82e368198f2451727b0043e77ec9272eca675b46", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99", "patch": "@@ -622,7 +622,6 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                   -> Vec<Constructor<'tcx>>\n {\n     debug!(\"all_constructors({:?})\", pcx.ty);\n-    let exhaustive_integer_patterns = cx.tcx.features().exhaustive_integer_patterns;\n     let ctors = match pcx.ty.sty {\n         ty::Bool => {\n             [true, false].iter().map(|&b| {\n@@ -652,7 +651,7 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 .map(|v| Variant(v.did))\n                 .collect()\n         }\n-        ty::Char if exhaustive_integer_patterns => {\n+        ty::Char => {\n             vec![\n                 // The valid Unicode Scalar Value ranges.\n                 ConstantRange('\\u{0000}' as u128,\n@@ -667,14 +666,14 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 ),\n             ]\n         }\n-        ty::Int(ity) if exhaustive_integer_patterns => {\n+        ty::Int(ity) => {\n             // FIXME(49937): refactor these bit manipulations into interpret.\n             let bits = Integer::from_attr(&cx.tcx, SignedInt(ity)).size().bits() as u128;\n             let min = 1u128 << (bits - 1);\n             let max = (1u128 << (bits - 1)) - 1;\n             vec![ConstantRange(min, max, pcx.ty, RangeEnd::Included)]\n         }\n-        ty::Uint(uty) if exhaustive_integer_patterns => {\n+        ty::Uint(uty) => {\n             // FIXME(49937): refactor these bit manipulations into interpret.\n             let bits = Integer::from_attr(&cx.tcx, UnsignedInt(uty)).size().bits() as u128;\n             let max = !0u128 >> (128 - bits);\n@@ -971,12 +970,10 @@ fn compute_missing_ctors<'a, 'tcx: 'a>(\n                 // If a constructor appears in a `match` arm, we can\n                 // eliminate it straight away.\n                 refined_ctors = vec![]\n-            } else if tcx.features().exhaustive_integer_patterns {\n-                if let Some(interval) = IntRange::from_ctor(tcx, used_ctor) {\n-                    // Refine the required constructors for the type by subtracting\n-                    // the range defined by the current constructor pattern.\n-                    refined_ctors = interval.subtract_from(tcx, refined_ctors);\n-                }\n+            } else if let Some(interval) = IntRange::from_ctor(tcx, used_ctor) {\n+                // Refine the required constructors for the type by subtracting\n+                // the range defined by the current constructor pattern.\n+                refined_ctors = interval.subtract_from(tcx, refined_ctors);\n             }\n \n             // If the constructor patterns that have been considered so far\n@@ -1433,17 +1430,16 @@ fn slice_pat_covered_by_constructor<'tcx>(\n // Whether to evaluate a constructor using exhaustive integer matching. This is true if the\n // constructor is a range or constant with an integer type.\n fn should_treat_range_exhaustively(tcx: TyCtxt<'_, 'tcx, 'tcx>, ctor: &Constructor<'tcx>) -> bool {\n-    if tcx.features().exhaustive_integer_patterns {\n-        let ty = match ctor {\n-            ConstantValue(value) => value.ty,\n-            ConstantRange(_, _, ty, _) => ty,\n-            _ => return false,\n-        };\n-        if let ty::Char | ty::Int(_) | ty::Uint(_) = ty.sty {\n-            return true;\n-        }\n+    let ty = match ctor {\n+        ConstantValue(value) => value.ty,\n+        ConstantRange(_, _, ty, _) => ty,\n+        _ => return false,\n+    };\n+    if let ty::Char | ty::Int(_) | ty::Uint(_) = ty.sty {\n+        true\n+    } else {\n+        false\n     }\n-    false\n }\n \n /// For exhaustive integer matching, some constructors are grouped within other constructors"}, {"sha": "53faf04f27891058ede8f38d75b111d3abbde8d3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99", "patch": "@@ -439,8 +439,6 @@ declare_features! (\n     // 'a: { break 'a; }\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n \n-    // Integer match exhaustiveness checking\n-    (active, exhaustive_integer_patterns, \"1.30.0\", Some(50907), None),\n \n     // #[doc(keyword = \"...\")]\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),\n@@ -686,6 +684,8 @@ declare_features! (\n     (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n     // Allows use of the :literal macro fragment specifier (RFC 1576)\n     (accepted, macro_literal_matcher, \"1.31.0\", Some(35625), None),\n+    // Integer match exhaustiveness checking (RFC 2591)\n+    (accepted, exhaustive_integer_patterns, \"1.32.0\", Some(50907), None),\n     // Use `?` as the Kleene \"at most one\" operator\n     (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n );"}, {"sha": "cddb301dbdf23625f5243bc26e4beb19bb614bab", "filename": "src/test/ui/exhaustive_integer_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.rs?ref=f1f6d87eab20f62a4fbb16b327f16fa69dbbaf99", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(exhaustive_integer_patterns)]\n #![feature(exclusive_range_pattern)]\n+\n #![deny(unreachable_patterns)]\n \n use std::{char, usize, u8, u16, u32, u64, u128, isize, i8, i16, i32, i64, i128};"}]}