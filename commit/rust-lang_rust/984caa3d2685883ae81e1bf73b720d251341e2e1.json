{"sha": "984caa3d2685883ae81e1bf73b720d251341e2e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NGNhYTNkMjY4NTg4M2FlODFlMWJmNzNiNzIwZDI1MTM0MWUyZTE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-07-07T13:39:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-07T22:39:42Z"}, "message": "put librustrt and librustllvm in stageN dirs. Issue #438", "tree": {"sha": "032b04cb616c4d4370f1cb4b06bace153cd38251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/032b04cb616c4d4370f1cb4b06bace153cd38251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/984caa3d2685883ae81e1bf73b720d251341e2e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/984caa3d2685883ae81e1bf73b720d251341e2e1", "html_url": "https://github.com/rust-lang/rust/commit/984caa3d2685883ae81e1bf73b720d251341e2e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/984caa3d2685883ae81e1bf73b720d251341e2e1/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deca79f37256b359139822f0f8706ac7c3cce26f", "url": "https://api.github.com/repos/rust-lang/rust/commits/deca79f37256b359139822f0f8706ac7c3cce26f", "html_url": "https://github.com/rust-lang/rust/commit/deca79f37256b359139822f0f8706ac7c3cce26f"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "e989e8d4371a0912c265875ea7975dda93623fac", "filename": "mk/platform.mk", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/984caa3d2685883ae81e1bf73b720d251341e2e1/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/984caa3d2685883ae81e1bf73b720d251341e2e1/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=984caa3d2685883ae81e1bf73b720d251341e2e1", "patch": "@@ -63,8 +63,6 @@ ifneq ($(findstring MINGW,$(CFG_OSTYPE)),)\n   CFG_WINDOWSY := 1\n endif\n \n-CFG_LDPATH :=$(CFG_BUILD_DIR)/rt\n-CFG_LDPATH :=$(CFG_LDPATH):$(CFG_BUILD_DIR)/rustllvm\n CFG_TESTLIB=$(CFG_BUILD_DIR)/$(strip     \\\n  $(if $(findstring stage0,$(1)),         \\\n        stage0/lib,                           \\\n@@ -79,7 +77,7 @@ ifdef CFG_UNIXY\n \n   CFG_PATH_MUNGE := true\n   CFG_EXE_SUFFIX :=\n-  CFG_LDPATH :=$(CFG_LDPATH):$(CFG_LLVM_LIBDIR)\n+  CFG_LDPATH :=$(CFG_LLVM_LIBDIR)\n   CFG_RUN_TARG=$(CFG_LDENV)=$(CFG_BUILD_DIR)/$(1)/lib:$(CFG_LDPATH) $(2)\n   CFG_RUN_TEST=\\\n       $(CFG_LDENV)=$(call CFG_TESTLIB,$(1)):$(CFG_LDPATH) \\\n@@ -118,7 +116,7 @@ ifdef CFG_WINDOWSY\n   CFG_EXE_SUFFIX := .exe\n   CFG_LIB_NAME=$(1).dll\n   CFG_DEF_SUFFIX := .def\n-  CFG_LDPATH :=$(CFG_LDPATH):$(CFG_LLVM_BINDIR)\n+  CFG_LDPATH :=$(CFG_LLVM_BINDIR)\n   CFG_LDPATH :=$(CFG_LDPATH):$$PATH\n   CFG_RUN_TEST=PATH=\"$(CFG_LDPATH):$(call CFG_TESTLIB,$(1))\" $(1)\n   CFG_RUN_TARG=PATH=\"$(CFG_BUILD_DIR)/$(1)/lib:$(CFG_LDPATH)\" $(2)"}, {"sha": "5204abe1d8cd8946355b7d9daba7d4dc166e50ee", "filename": "mk/stage1.mk", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/984caa3d2685883ae81e1bf73b720d251341e2e1/mk%2Fstage1.mk", "raw_url": "https://github.com/rust-lang/rust/raw/984caa3d2685883ae81e1bf73b720d251341e2e1/mk%2Fstage1.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage1.mk?ref=984caa3d2685883ae81e1bf73b720d251341e2e1", "patch": "@@ -1,5 +1,6 @@\n stage1/lib/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n               stage1/rustc$(X) stage0/lib/$(CFG_STDLIB) stage1/intrinsics.bc \\\n+              stage1/lib/$(CFG_RUNTIME) stage1/lib/$(CFG_RUSTLLVM) \\\n               stage1/glue.o $(LREQ) $(MKFILES)\n \t@$(call E, compile_and_link: $@)\n \t$(STAGE1) --lib -o $@ $<\n@@ -22,6 +23,14 @@ stage1/intrinsics.bc:\t$(INTRINSICS_BC)\n \t@$(call E, cp: $@)\n \t$(Q)cp $< $@\n \n+stage1/lib/$(CFG_RUNTIME):\trt/$(CFG_RUNTIME)\n+\t@$(call E, cp: $@)\n+\t$(Q)cp $< $@\n+\n+stage1/lib/$(CFG_RUSTLLVM):\trustllvm/$(CFG_RUSTLLVM)\n+\t@$(call E, cp: $@)\n+\t$(Q)cp $< $@\n+\n # Due to make not wanting to run the same implicit rules twice on the same\n # rule tree (implicit-rule recursion prevention, see \"Chains of Implicit\n # Rules\" in GNU Make manual) we have to re-state the %.o and %.s patterns here"}, {"sha": "4b77fb8477d0299114212a999645c8a2baf3994a", "filename": "mk/stage2.mk", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/984caa3d2685883ae81e1bf73b720d251341e2e1/mk%2Fstage2.mk", "raw_url": "https://github.com/rust-lang/rust/raw/984caa3d2685883ae81e1bf73b720d251341e2e1/mk%2Fstage2.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage2.mk?ref=984caa3d2685883ae81e1bf73b720d251341e2e1", "patch": "@@ -1,5 +1,6 @@\n stage2/lib/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n               stage2/rustc$(X) stage1/lib/$(CFG_STDLIB) stage2/intrinsics.bc \\\n+              stage2/lib/$(CFG_RUNTIME) stage2/lib/$(CFG_RUSTLLVM) \\\n               stage2/glue.o $(LREQ) $(MKFILES)\n \t@$(call E, compile_and_link: $@)\n \t$(STAGE2)  --lib -o $@ $<\n@@ -22,6 +23,14 @@ stage2/intrinsics.bc:\t$(INTRINSICS_BC)\n \t@$(call E, cp: $@)\n \t$(Q)cp $< $@\n \n+stage2/lib/$(CFG_RUNTIME):\trt/$(CFG_RUNTIME)\n+\t@$(call E, cp: $@)\n+\t$(Q)cp $< $@\n+\n+stage2/lib/$(CFG_RUSTLLVM):\trustllvm/$(CFG_RUSTLLVM)\n+\t@$(call E, cp: $@)\n+\t$(Q)cp $< $@\n+\n # Due to make not wanting to run the same implicit rules twice on the same\n # rule tree (implicit-rule recursion prevention, see \"Chains of Implicit\n # Rules\" in GNU Make manual) we have to re-state the %.o and %.s patterns here"}, {"sha": "c3eb1ea29c6c093f46d42e64a5f704709e060d41", "filename": "mk/stage3.mk", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/984caa3d2685883ae81e1bf73b720d251341e2e1/mk%2Fstage3.mk", "raw_url": "https://github.com/rust-lang/rust/raw/984caa3d2685883ae81e1bf73b720d251341e2e1/mk%2Fstage3.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage3.mk?ref=984caa3d2685883ae81e1bf73b720d251341e2e1", "patch": "@@ -1,5 +1,6 @@\n stage3/lib/$(CFG_STDLIB): $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n               stage3/rustc$(X) stage2/lib/$(CFG_STDLIB) stage3/intrinsics.bc \\\n+              stage3/lib/$(CFG_RUNTIME) stage3/lib/$(CFG_RUSTLLVM) \\\n               stage3/glue.o $(LREQ) $(MKFILES)\n \t@$(call E, compile_and_link: $@)\n \t$(STAGE3)  --lib -o $@ $<\n@@ -22,6 +23,14 @@ stage3/intrinsics.bc:\t$(INTRINSICS_BC)\n \t@$(call E, cp: $@)\n \t$(Q)cp $< $@\n \n+stage3/lib/$(CFG_RUNTIME):\trt/$(CFG_RUNTIME)\n+\t@$(call E, cp: $@)\n+\t$(Q)cp $< $@\n+\n+stage3/lib/$(CFG_RUSTLLVM):\trustllvm/$(CFG_RUSTLLVM)\n+\t@$(call E, cp: $@)\n+\t$(Q)cp $< $@\n+\n # Due to make not wanting to run the same implicit rules twice on the same\n # rule tree (implicit-rule recursion prevention, see \"Chains of Implicit\n # Rules\" in GNU Make manual) we have to re-state the %.o and %.s patterns here"}]}