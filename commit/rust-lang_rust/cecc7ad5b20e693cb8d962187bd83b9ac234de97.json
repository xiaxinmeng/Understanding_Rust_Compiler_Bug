{"sha": "cecc7ad5b20e693cb8d962187bd83b9ac234de97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlY2M3YWQ1YjIwZTY5M2NiOGQ5NjIxODdiZDgzYjlhYzIzNGRlOTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-12T19:11:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-15T21:00:05Z"}, "message": "be generic over data", "tree": {"sha": "4bb388adae050ba0457cb0ca3b2bfcc9af353871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bb388adae050ba0457cb0ca3b2bfcc9af353871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cecc7ad5b20e693cb8d962187bd83b9ac234de97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cecc7ad5b20e693cb8d962187bd83b9ac234de97", "html_url": "https://github.com/rust-lang/rust/commit/cecc7ad5b20e693cb8d962187bd83b9ac234de97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cecc7ad5b20e693cb8d962187bd83b9ac234de97/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cf9c2719652d298006d51bc82a32908ab4e5335", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf9c2719652d298006d51bc82a32908ab4e5335", "html_url": "https://github.com/rust-lang/rust/commit/8cf9c2719652d298006d51bc82a32908ab4e5335"}], "stats": {"total": 116, "additions": 61, "deletions": 55}, "files": [{"sha": "a54f2a06fca1bf8d76320b9117b06ab23b2d0a1f", "filename": "crates/salsa/src/lib.rs", "status": "modified", "additions": 48, "deletions": 43, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/cecc7ad5b20e693cb8d962187bd83b9ac234de97/crates%2Fsalsa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecc7ad5b20e693cb8d962187bd83b9ac234de97/crates%2Fsalsa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsalsa%2Fsrc%2Flib.rs?ref=cecc7ad5b20e693cb8d962187bd83b9ac234de97", "patch": "@@ -3,53 +3,52 @@ extern crate parking_lot;\n \n use std::{\n     sync::Arc,\n-    any::Any,\n     collections::HashMap,\n     cell::RefCell,\n };\n use parking_lot::Mutex;\n \n-type GroundQueryFn<T> = fn(&T, &(Any + Send + Sync + 'static)) -> (Box<Any + Send + Sync + 'static>, OutputFingerprint);\n-type QueryFn<T> = fn(&QueryCtx<T>, &(Any + Send + Sync + 'static)) -> (Box<Any + Send + Sync + 'static>, OutputFingerprint);\n+type GroundQueryFn<T, D> = fn(&T, &D) -> (D, OutputFingerprint);\n+type QueryFn<T, D> = fn(&QueryCtx<T, D>, &D) -> (D, OutputFingerprint);\n \n #[derive(Debug)]\n-pub struct Db<T> {\n-    db: Arc<DbState<T>>,\n-    query_config: Arc<QueryConfig<T>>,\n+pub struct Db<T, D> {\n+    db: Arc<DbState<T, D>>,\n+    query_config: Arc<QueryConfig<T, D>>,\n }\n \n-pub struct QueryConfig<T> {\n-    ground_fn: HashMap<QueryTypeId, GroundQueryFn<T>>,\n-    query_fn: HashMap<QueryTypeId, QueryFn<T>>,\n+pub struct QueryConfig<T, D> {\n+    ground_fn: HashMap<QueryTypeId, GroundQueryFn<T, D>>,\n+    query_fn: HashMap<QueryTypeId, QueryFn<T, D>>,\n }\n \n-impl<T> ::std::fmt::Debug for QueryConfig<T> {\n+impl<T, D> ::std::fmt::Debug for QueryConfig<T, D> {\n     fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n         ::std::fmt::Display::fmt(\"QueryConfig { ... }\", f)\n     }\n }\n \n #[derive(Debug)]\n-struct DbState<T> {\n+struct DbState<T, D> {\n     ground_data: T,\n     gen: Gen,\n-    graph: Mutex<im::HashMap<QueryId, (Gen, Arc<QueryRecord>)>>,\n+    graph: Mutex<im::HashMap<QueryId, (Gen, Arc<QueryRecord<D>>)>>,\n }\n \n #[derive(Debug)]\n-struct QueryRecord {\n-    params: Arc<Any + Send + Sync + 'static>,\n-    output: Arc<Any + Send + Sync + 'static>,\n+struct QueryRecord<D> {\n+    params: D,\n+    output: D,\n     output_fingerprint: OutputFingerprint,\n     deps: Vec<(QueryId, OutputFingerprint)>,\n }\n \n-impl<T> DbState<T> {\n+impl<T, D> DbState<T, D> {\n     fn record(\n         &self,\n         query_id: QueryId,\n-        params: Arc<Any + Send + Sync + 'static>,\n-        output: Arc<Any + Send + Sync + 'static>,\n+        params: D,\n+        output: D,\n         output_fingerprint: OutputFingerprint,\n         deps: Vec<(QueryId, OutputFingerprint)>,\n     ) {\n@@ -64,7 +63,7 @@ impl<T> DbState<T> {\n     }\n }\n \n-impl<T> QueryConfig<T> {\n+impl<T, D> QueryConfig<T, D> {\n     pub fn new() -> Self {\n         QueryConfig {\n             ground_fn: HashMap::new(),\n@@ -74,7 +73,7 @@ impl<T> QueryConfig<T> {\n     pub fn with_ground_query(\n         mut self,\n         query_type: QueryTypeId,\n-        query_fn: GroundQueryFn<T>\n+        query_fn: GroundQueryFn<T, D>\n     ) -> Self {\n         let prev = self.ground_fn.insert(query_type, query_fn);\n         assert!(prev.is_none());\n@@ -83,23 +82,26 @@ impl<T> QueryConfig<T> {\n     pub fn with_query(\n         mut self,\n         query_type: QueryTypeId,\n-        query_fn: QueryFn<T>,\n+        query_fn: QueryFn<T, D>,\n     ) -> Self {\n         let prev = self.query_fn.insert(query_type, query_fn);\n         assert!(prev.is_none());\n         self\n     }\n }\n \n-pub struct QueryCtx<T> {\n-    db: Arc<DbState<T>>,\n-    query_config: Arc<QueryConfig<T>>,\n+pub struct QueryCtx<T, D> {\n+    db: Arc<DbState<T, D>>,\n+    query_config: Arc<QueryConfig<T, D>>,\n     stack: RefCell<Vec<Vec<(QueryId, OutputFingerprint)>>>,\n     executed: RefCell<Vec<QueryTypeId>>,\n }\n \n-impl<T> QueryCtx<T> {\n-    fn new(db: &Db<T>) -> QueryCtx<T> {\n+impl<T, D> QueryCtx<T, D>\n+where\n+    D: Clone\n+{\n+    fn new(db: &Db<T, D>) -> QueryCtx<T, D> {\n         QueryCtx {\n             db: Arc::clone(&db.db),\n             query_config: Arc::clone(&db.query_config),\n@@ -110,8 +112,8 @@ impl<T> QueryCtx<T> {\n     pub fn get(\n         &self,\n         query_id: QueryId,\n-        params: Arc<Any + Send + Sync + 'static>,\n-    ) -> Arc<Any + Send + Sync + 'static> {\n+        params: D,\n+    ) -> D {\n         let (res, output_fingerprint) = self.get_inner(query_id, params);\n         self.record_dep(query_id, output_fingerprint);\n         res\n@@ -120,8 +122,8 @@ impl<T> QueryCtx<T> {\n     pub fn get_inner(\n         &self,\n         query_id: QueryId,\n-        params: Arc<Any + Send + Sync + 'static>,\n-    ) -> (Arc<Any + Send + Sync + 'static>, OutputFingerprint) {\n+        params: D,\n+    ) -> (D, OutputFingerprint) {\n         let (gen, record) = {\n             let guard = self.db.graph.lock();\n             match guard.get(&query_id).map(|it| it.clone()){\n@@ -139,7 +141,7 @@ impl<T> QueryCtx<T> {\n             return self.force(query_id, params);\n         }\n         for (dep_query_id, prev_fingerprint) in record.deps.iter().cloned() {\n-            let dep_params: Arc<Any + Send + Sync + 'static> = {\n+            let dep_params: D = {\n                 let guard = self.db.graph.lock();\n                 guard[&dep_query_id]\n                 .1\n@@ -160,29 +162,29 @@ impl<T> QueryCtx<T> {\n     fn force(\n         &self,\n         query_id: QueryId,\n-        params: Arc<Any + Send + Sync + 'static>,\n-    ) -> (Arc<Any + Send + Sync + 'static>, OutputFingerprint) {\n+        params: D,\n+    ) -> (D, OutputFingerprint) {\n         self.executed.borrow_mut().push(query_id.0);\n         self.stack.borrow_mut().push(Vec::new());\n \n         let (res, output_fingerprint) = if let Some(f) = self.ground_query_fn_by_type(query_id.0) {\n-            f(&self.db.ground_data, &*params)\n+            f(&self.db.ground_data, &params)\n         } else if let Some(f) = self.query_fn_by_type(query_id.0) {\n-            f(self, &*params)\n+            f(self, &params)\n         } else {\n             panic!(\"unknown query type: {:?}\", query_id.0);\n         };\n \n-        let res: Arc<Any + Send + Sync + 'static> = res.into();\n+        let res: D = res.into();\n \n         let deps = self.stack.borrow_mut().pop().unwrap();\n         self.db.record(query_id, params, res.clone(), output_fingerprint, deps);\n         (res, output_fingerprint)\n     }\n-    fn ground_query_fn_by_type(&self, query_type: QueryTypeId) -> Option<GroundQueryFn<T>> {\n+    fn ground_query_fn_by_type(&self, query_type: QueryTypeId) -> Option<GroundQueryFn<T, D>> {\n         self.query_config.ground_fn.get(&query_type).map(|&it| it)\n     }\n-    fn query_fn_by_type(&self, query_type: QueryTypeId) -> Option<QueryFn<T>> {\n+    fn query_fn_by_type(&self, query_type: QueryTypeId) -> Option<QueryFn<T, D>> {\n         self.query_config.query_fn.get(&query_type).map(|&it| it)\n     }\n     fn record_dep(\n@@ -196,15 +198,18 @@ impl<T> QueryCtx<T> {\n     }\n }\n \n-impl<T> Db<T> {\n-    pub fn new(query_config: QueryConfig<T>, ground_data: T) -> Db<T> {\n+impl<T, D> Db<T, D>\n+where\n+    D: Clone\n+{\n+    pub fn new(query_config: QueryConfig<T, D>, ground_data: T) -> Db<T, D> {\n         Db {\n             db: Arc::new(DbState { ground_data, gen: Gen(0), graph: Default::default() }),\n             query_config: Arc::new(query_config),\n         }\n     }\n \n-    pub fn with_ground_data(&self, ground_data: T) -> Db<T> {\n+    pub fn with_ground_data(&self, ground_data: T) -> Db<T, D> {\n         let gen = Gen(self.db.gen.0 + 1);\n         let graph = self.db.graph.lock().clone();\n         let graph = Mutex::new(graph);\n@@ -216,8 +221,8 @@ impl<T> Db<T> {\n     pub fn get(\n         &self,\n         query_id: QueryId,\n-        params: Box<Any + Send + Sync + 'static>,\n-    ) -> (Arc<Any + Send + Sync + 'static>, Vec<QueryTypeId>) {\n+        params: D,\n+    ) -> (D, Vec<QueryTypeId>) {\n         let ctx = QueryCtx::new(self);\n         let res = ctx.get(query_id, params.into());\n         let executed = ::std::mem::replace(&mut *ctx.executed.borrow_mut(), Vec::new());"}, {"sha": "2872d39133f5e4398119b44bba24f18676f9b6f3", "filename": "crates/salsa/tests/integration.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cecc7ad5b20e693cb8d962187bd83b9ac234de97/crates%2Fsalsa%2Ftests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecc7ad5b20e693cb8d962187bd83b9ac234de97/crates%2Fsalsa%2Ftests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsalsa%2Ftests%2Fintegration.rs?ref=cecc7ad5b20e693cb8d962187bd83b9ac234de97", "patch": "@@ -7,38 +7,39 @@ use std::{\n };\n \n type State = HashMap<u32, String>;\n+type Data = Arc<Any + Send + Sync + 'static>;\n const GET_TEXT: salsa::QueryTypeId = salsa::QueryTypeId(1);\n const GET_FILES: salsa::QueryTypeId = salsa::QueryTypeId(2);\n const FILE_NEWLINES: salsa::QueryTypeId = salsa::QueryTypeId(3);\n const TOTAL_NEWLINES: salsa::QueryTypeId = salsa::QueryTypeId(4);\n \n fn mk_ground_query<T, R>(\n     state: &State,\n-    params: &(Any + Send + Sync + 'static),\n+    params: &Data,\n     f: fn(&State, &T) -> R,\n-) -> (Box<Any + Send + Sync + 'static>, salsa::OutputFingerprint)\n+) -> (Data, salsa::OutputFingerprint)\n where\n     T: 'static,\n     R: Hash + Send + Sync + 'static,\n {\n     let params = params.downcast_ref().unwrap();\n     let result = f(state, params);\n     let fingerprint = o_print(&result);\n-    (Box::new(result), fingerprint)\n+    (Arc::new(result), fingerprint)\n }\n \n-fn get<T, R>(db: &salsa::Db<State>, query_type: salsa::QueryTypeId, param: T) -> (Arc<R>, Vec<salsa::QueryTypeId>)\n+fn get<T, R>(db: &salsa::Db<State, Data>, query_type: salsa::QueryTypeId, param: T) -> (Arc<R>, Vec<salsa::QueryTypeId>)\n where\n     T: Hash + Send + Sync + 'static,\n     R: Send + Sync + 'static,\n {\n     let i_print = i_print(&param);\n-    let param = Box::new(param);\n+    let param = Arc::new(param);\n     let (res, trace) = db.get(salsa::QueryId(query_type, i_print), param);\n     (res.downcast().unwrap(), trace)\n }\n \n-struct QueryCtx<'a>(&'a salsa::QueryCtx<State>);\n+struct QueryCtx<'a>(&'a salsa::QueryCtx<State, Data>);\n \n impl<'a> QueryCtx<'a> {\n     fn get_text(&self, id: u32) -> Arc<String> {\n@@ -60,10 +61,10 @@ impl<'a> QueryCtx<'a> {\n }\n \n fn mk_query<T, R>(\n-    query_ctx: &salsa::QueryCtx<State>,\n-    params: &(Any + Send + Sync + 'static),\n+    query_ctx: &salsa::QueryCtx<State, Data>,\n+    params: &Data,\n     f: fn(QueryCtx, &T) -> R,\n-) -> (Box<Any + Send + Sync + 'static>, salsa::OutputFingerprint)\n+) -> (Data, salsa::OutputFingerprint)\n where\n     T: 'static,\n     R: Hash + Send + Sync + 'static,\n@@ -72,11 +73,11 @@ where\n     let query_ctx = QueryCtx(query_ctx);\n     let result = f(query_ctx, params);\n     let fingerprint = o_print(&result);\n-    (Box::new(result), fingerprint)\n+    (Arc::new(result), fingerprint)\n }\n \n-fn mk_queries() -> salsa::QueryConfig<State> {\n-    salsa::QueryConfig::<State>::new()\n+fn mk_queries() -> salsa::QueryConfig<State, Data> {\n+    salsa::QueryConfig::<State, Data>::new()\n         .with_ground_query(GET_TEXT, |state, id| {\n             mk_ground_query::<u32, String>(state, id, |state, id| state[id].clone())\n         })"}]}