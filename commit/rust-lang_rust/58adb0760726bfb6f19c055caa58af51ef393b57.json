{"sha": "58adb0760726bfb6f19c055caa58af51ef393b57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YWRiMDc2MDcyNmJmYjZmMTljMDU1Y2FhNThhZjUxZWYzOTNiNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-16T02:25:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-16T02:25:45Z"}, "message": "Auto merge of #34291 - Manishearth:rollup, r=Manishearth\n\nRollup of 4 pull requests\n\n- Successful merges: #34207, #34268, #34270, #34290\n- Failed merges:", "tree": {"sha": "0e6332f48ca979ef4f7279af9e3b202a2c456091", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e6332f48ca979ef4f7279af9e3b202a2c456091"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58adb0760726bfb6f19c055caa58af51ef393b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58adb0760726bfb6f19c055caa58af51ef393b57", "html_url": "https://github.com/rust-lang/rust/commit/58adb0760726bfb6f19c055caa58af51ef393b57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58adb0760726bfb6f19c055caa58af51ef393b57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb4a79b087158f396b984bdf552d2c90890b12a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4a79b087158f396b984bdf552d2c90890b12a3", "html_url": "https://github.com/rust-lang/rust/commit/bb4a79b087158f396b984bdf552d2c90890b12a3"}, {"sha": "e3d6bb1f71f372c37cb864d0f8f71cc256eae44b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d6bb1f71f372c37cb864d0f8f71cc256eae44b", "html_url": "https://github.com/rust-lang/rust/commit/e3d6bb1f71f372c37cb864d0f8f71cc256eae44b"}], "stats": {"total": 308, "additions": 126, "deletions": 182}, "files": [{"sha": "393045bf93efbd81e64c3836057e6d3eb1ed69a2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -51,10 +51,9 @@ use std::collections::BTreeMap;\n use std::iter;\n use syntax::ast::*;\n use syntax::attr::{ThinAttributes, ThinAttributesExt};\n-use syntax::ext::mtwt;\n use syntax::ptr::P;\n use syntax::codemap::{respan, Spanned, Span};\n-use syntax::parse::token::{self, keywords};\n+use syntax::parse::token;\n use syntax::std_inject;\n use syntax::visit::{self, Visitor};\n \n@@ -184,16 +183,8 @@ impl<'a> LoweringContext<'a> {\n         result\n     }\n \n-    fn lower_ident(&mut self, ident: Ident) -> Name {\n-        if ident.name != keywords::Invalid.name() {\n-            mtwt::resolve(ident)\n-        } else {\n-            ident.name\n-        }\n-    }\n-\n     fn lower_opt_sp_ident(&mut self, o_id: Option<Spanned<Ident>>) -> Option<Spanned<Name>> {\n-        o_id.map(|sp_ident| respan(sp_ident.span, self.lower_ident(sp_ident.node)))\n+        o_id.map(|sp_ident| respan(sp_ident.span, sp_ident.node.name))\n     }\n \n     fn lower_attrs(&mut self, attrs: &Vec<Attribute>) -> hir::HirVec<Attribute> {\n@@ -338,18 +329,14 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_path_full(&mut self, p: &Path, rename: bool) -> hir::Path {\n+    fn lower_path(&mut self, p: &Path) -> hir::Path {\n         hir::Path {\n             global: p.global,\n             segments: p.segments\n                        .iter()\n                        .map(|&PathSegment { identifier, ref parameters }| {\n                            hir::PathSegment {\n-                               name: if rename {\n-                                   self.lower_ident(identifier)\n-                               } else {\n-                                   identifier.name\n-                               },\n+                               name: identifier.name,\n                                parameters: self.lower_path_parameters(parameters),\n                            }\n                        })\n@@ -358,10 +345,6 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_path(&mut self, p: &Path) -> hir::Path {\n-        self.lower_path_full(p, false)\n-    }\n-\n     fn lower_path_parameters(&mut self, path_parameters: &PathParameters) -> hir::PathParameters {\n         match *path_parameters {\n             PathParameters::AngleBracketed(ref data) =>\n@@ -870,8 +853,7 @@ impl<'a> LoweringContext<'a> {\n                             // `None` can occur in body-less function signatures\n                             None | Some(Def::Local(..)) => {\n                                 hir::PatKind::Binding(this.lower_binding_mode(binding_mode),\n-                                                      respan(pth1.span,\n-                                                             this.lower_ident(pth1.node)),\n+                                                      respan(pth1.span, pth1.node.name),\n                                                       sub.as_ref().map(|x| this.lower_pat(x)))\n                             }\n                             _ => hir::PatKind::Path(hir::Path::from_name(pth1.span, pth1.node.name))\n@@ -1238,12 +1220,7 @@ impl<'a> LoweringContext<'a> {\n                             position: position,\n                         }\n                     });\n-                    // Only local variables are renamed\n-                    let rename = match self.resolver.get_resolution(e.id).map(|d| d.base_def) {\n-                        Some(Def::Local(..)) | Some(Def::Upvar(..)) => true,\n-                        _ => false,\n-                    };\n-                    hir::ExprPath(hir_qself, self.lower_path_full(path, rename))\n+                    hir::ExprPath(hir_qself, self.lower_path(path))\n                 }\n                 ExprKind::Break(opt_ident) => hir::ExprBreak(self.lower_opt_sp_ident(opt_ident)),\n                 ExprKind::Again(opt_ident) => hir::ExprAgain(self.lower_opt_sp_ident(opt_ident)),"}, {"sha": "8faa1cc1174e8568cb8b100232648b11ebb72541", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -1138,7 +1138,7 @@ pub type ExplicitSelf = Spanned<SelfKind>;\n impl Arg {\n     pub fn to_self(&self) -> Option<ExplicitSelf> {\n         if let PatKind::Binding(BindByValue(mutbl), name, _) = self.pat.node {\n-            if name.node.unhygienize() == keywords::SelfValue.name() {\n+            if name.node == keywords::SelfValue.name() {\n                 return match self.ty.node {\n                     TyInfer => Some(respan(self.pat.span, SelfKind::Value(mutbl))),\n                     TyRptr(lt, MutTy{ref ty, mutbl}) if ty.node == TyInfer => {\n@@ -1154,7 +1154,7 @@ impl Arg {\n \n     pub fn is_self(&self) -> bool {\n         if let PatKind::Binding(_, name, _) = self.pat.node {\n-            name.node.unhygienize() == keywords::SelfValue.name()\n+            name.node == keywords::SelfValue.name()\n         } else {\n             false\n         }"}, {"sha": "b6b7aa6ce7de73b069aac995375723f034f9ffe1", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -1728,12 +1728,9 @@ impl<'a> State<'a> {\n                     }\n                 }\n                 self.print_name(path1.node)?;\n-                match *sub {\n-                    Some(ref p) => {\n-                        word(&mut self.s, \"@\")?;\n-                        self.print_pat(&p)?;\n-                    }\n-                    None => (),\n+                if let Some(ref p) = *sub {\n+                    word(&mut self.s, \"@\")?;\n+                    self.print_pat(&p)?;\n                 }\n             }\n             PatKind::TupleStruct(ref path, ref elts, ddpos) => {\n@@ -2246,25 +2243,21 @@ impl<'a> State<'a> {\n             Some(cm) => cm,\n             _ => return Ok(()),\n         };\n-        match self.next_comment() {\n-            Some(ref cmnt) => {\n-                if (*cmnt).style != comments::Trailing {\n-                    return Ok(());\n-                }\n-                let span_line = cm.lookup_char_pos(span.hi);\n-                let comment_line = cm.lookup_char_pos((*cmnt).pos);\n-                let mut next = (*cmnt).pos + BytePos(1);\n-                match next_pos {\n-                    None => (),\n-                    Some(p) => next = p,\n-                }\n-                if span.hi < (*cmnt).pos && (*cmnt).pos < next &&\n-                   span_line.line == comment_line.line {\n-                    self.print_comment(cmnt)?;\n-                    self.cur_cmnt_and_lit.cur_cmnt += 1;\n-                }\n+        if let Some(ref cmnt) = self.next_comment() {\n+            if (*cmnt).style != comments::Trailing {\n+                return Ok(());\n+            }\n+            let span_line = cm.lookup_char_pos(span.hi);\n+            let comment_line = cm.lookup_char_pos((*cmnt).pos);\n+            let mut next = (*cmnt).pos + BytePos(1);\n+            if let Some(p) = next_pos {\n+                next = p;\n+            }\n+            if span.hi < (*cmnt).pos && (*cmnt).pos < next &&\n+               span_line.line == comment_line.line {\n+                self.print_comment(cmnt)?;\n+                self.cur_cmnt_and_lit.cur_cmnt += 1;\n             }\n-            _ => (),\n         }\n         Ok(())\n     }"}, {"sha": "86bc4355b2d3c37ad57ab710a4374332907c7b7e", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -1856,20 +1856,18 @@ fn lifetimes_in_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         },\n         None => None\n     };\n-    if method_id_opt.is_some() {\n-        let method_id = method_id_opt.unwrap();\n+    if let Some(method_id) = method_id_opt {\n         let parent = tcx.map.get_parent(method_id);\n-        match tcx.map.find(parent) {\n-            Some(node) => match node {\n+        if let Some(node) = tcx.map.find(parent) {\n+            match node {\n                 ast_map::NodeItem(item) => match item.node {\n                     hir::ItemImpl(_, _, ref gen, _, _, _) => {\n                         taken.extend_from_slice(&gen.lifetimes);\n                     }\n                     _ => ()\n                 },\n                 _ => ()\n-            },\n-            None => ()\n+            }\n         }\n     }\n     return taken;\n@@ -1938,4 +1936,3 @@ fn name_to_dummy_lifetime(name: ast::Name) -> hir::Lifetime {\n                     span: codemap::DUMMY_SP,\n                     name: name }\n }\n-"}, {"sha": "17da8ddbbc30c85f355c688556a04d510d649d0f", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -160,12 +160,9 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             }\n             scanned.insert(id);\n \n-            match self.tcx.map.find(id) {\n-                Some(ref node) => {\n-                    self.live_symbols.insert(id);\n-                    self.visit_node(node);\n-                }\n-                None => (),\n+            if let Some(ref node) = self.tcx.map.find(id) {\n+                self.live_symbols.insert(id);\n+                self.visit_node(node);\n             }\n         }\n     }\n@@ -372,9 +369,8 @@ fn create_and_seed_worklist<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     // Seed entry point\n-    match *tcx.sess.entry_fn.borrow() {\n-        Some((id, _)) => worklist.push(id),\n-        None => ()\n+    if let Some((id, _)) = *tcx.sess.entry_fn.borrow() {\n+        worklist.push(id);\n     }\n \n     // Seed implemented trait items\n@@ -464,16 +460,14 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n         // method of a private type is used, but the type itself is never\n         // called directly.\n         let impl_items = self.tcx.impl_items.borrow();\n-        match self.tcx.inherent_impls.borrow().get(&self.tcx.map.local_def_id(id)) {\n-            None => (),\n-            Some(impl_list) => {\n-                for impl_did in impl_list.iter() {\n-                    for item_did in impl_items.get(impl_did).unwrap().iter() {\n-                        if let Some(item_node_id) =\n-                                self.tcx.map.as_local_node_id(item_did.def_id()) {\n-                            if self.live_symbols.contains(&item_node_id) {\n-                                return true;\n-                            }\n+        if let Some(impl_list) =\n+                self.tcx.inherent_impls.borrow().get(&self.tcx.map.local_def_id(id)) {\n+            for impl_did in impl_list.iter() {\n+                for item_did in impl_items.get(impl_did).unwrap().iter() {\n+                    if let Some(item_node_id) =\n+                            self.tcx.map.as_local_node_id(item_did.def_id()) {\n+                        if self.live_symbols.contains(&item_node_id) {\n+                            return true;\n                         }\n                     }\n                 }"}, {"sha": "78d9f5c9b7c2975d65326ebfb325a9c210e09ffd", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -456,8 +456,7 @@ fn extract_labels(ctxt: &mut LifetimeContext, b: &hir::Block) {\n     fn expression_label(ex: &hir::Expr) -> Option<(ast::Name, Span)> {\n         match ex.node {\n             hir::ExprWhile(_, _, Some(label)) |\n-            hir::ExprLoop(_, Some(label)) => Some((label.node.unhygienize(),\n-                                                   label.span)),\n+            hir::ExprLoop(_, Some(label)) => Some((label.node, label.span)),\n             _ => None,\n         }\n     }"}, {"sha": "64f35aed23f5c05ef4aef758393ee3d0708b6162", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -122,15 +122,12 @@ fn gather_move<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n \n     let potentially_illegal_move =\n                 check_and_get_illegal_move_origin(bccx, &move_info.cmt);\n-    match potentially_illegal_move {\n-        Some(illegal_move_origin) => {\n-            debug!(\"illegal_move_origin={:?}\", illegal_move_origin);\n-            let error = MoveError::with_move_info(illegal_move_origin,\n-                                                  move_info.span_path_opt);\n-            move_error_collector.add_error(error);\n-            return\n-        }\n-        None => ()\n+    if let Some(illegal_move_origin) = potentially_illegal_move {\n+        debug!(\"illegal_move_origin={:?}\", illegal_move_origin);\n+        let error = MoveError::with_move_info(illegal_move_origin,\n+                                              move_info.span_path_opt);\n+        move_error_collector.add_error(error);\n+        return;\n     }\n \n     match opt_loan_path(&move_info.cmt) {"}, {"sha": "dbca15ffd34b962e8ead9f0d6ff246855596184c", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -247,8 +247,7 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n             if let ty::TyEnum(edef, _) = pat_ty.sty {\n                 if let Def::Local(..) = cx.tcx.expect_def(p.id) {\n                     if edef.variants.iter().any(|variant|\n-                        variant.name == name.node.unhygienize()\n-                            && variant.kind() == VariantKind::Unit\n+                        variant.name == name.node && variant.kind() == VariantKind::Unit\n                     ) {\n                         let ty_path = cx.tcx.item_path_str(edef.did);\n                         let mut err = struct_span_warn!(cx.tcx.sess, p.span, E0170,"}, {"sha": "3ceca9218bdf5379acda9c219f07cc1b26346f7c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -163,7 +163,7 @@ impl LateLintPass for NonShorthandFieldPatterns {\n                     continue;\n                 }\n                 if let PatKind::Binding(_, ident, None) = fieldpat.node.pat.node {\n-                    if ident.node.unhygienize() == fieldpat.node.name {\n+                    if ident.node == fieldpat.node.name {\n                         cx.span_lint(NON_SHORTHAND_FIELD_PATTERNS, fieldpat.span,\n                                      &format!(\"the `{}:` in this pattern is redundant and can \\\n                                               be removed\", ident.node))"}, {"sha": "8bf057095ac56d6ab7c75fc89288dcbd7d9c53c4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -929,29 +929,26 @@ impl<'a> LocalCrateReader<'a> {\n                     return;\n                 }\n \n-                match self.creader.extract_crate_info(i) {\n-                    Some(info) => {\n-                        let (cnum, _, _) = self.creader.resolve_crate(&None,\n-                                                                      &info.ident,\n-                                                                      &info.name,\n-                                                                      None,\n-                                                                      i.span,\n-                                                                      PathKind::Crate,\n-                                                                      true);\n-\n-                        let def_id = self.definitions.opt_local_def_id(i.id).unwrap();\n-                        let len = self.definitions.def_path(def_id.index).data.len();\n-\n-                        self.creader.update_extern_crate(cnum,\n-                                                         ExternCrate {\n-                                                             def_id: def_id,\n-                                                             span: i.span,\n-                                                             direct: true,\n-                                                             path_len: len,\n-                                                         });\n-                        self.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n-                    }\n-                    None => ()\n+                if let Some(info) = self.creader.extract_crate_info(i) {\n+                    let (cnum, _, _) = self.creader.resolve_crate(&None,\n+                                                                  &info.ident,\n+                                                                  &info.name,\n+                                                                  None,\n+                                                                  i.span,\n+                                                                  PathKind::Crate,\n+                                                                  true);\n+\n+                    let def_id = self.definitions.opt_local_def_id(i.id).unwrap();\n+                    let len = self.definitions.def_path(def_id.index).data.len();\n+\n+                    self.creader.update_extern_crate(cnum,\n+                                                     ExternCrate {\n+                                                         def_id: def_id,\n+                                                         span: i.span,\n+                                                         direct: true,\n+                                                         path_len: len,\n+                                                     });\n+                    self.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n                 }\n             }\n             ast::ItemKind::ForeignMod(ref fm) => self.process_foreign_mod(i, fm),"}, {"sha": "5250361cd17aede9221bfd65880e6d4c213917ba", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -2252,17 +2252,14 @@ pub fn update_linkage(ccx: &CrateContext,\n }\n \n fn set_global_section(ccx: &CrateContext, llval: ValueRef, i: &hir::Item) {\n-    match attr::first_attr_value_str_by_name(&i.attrs, \"link_section\") {\n-        Some(sect) => {\n-            if contains_null(&sect) {\n-                ccx.sess().fatal(&format!(\"Illegal null byte in link_section value: `{}`\", &sect));\n-            }\n-            unsafe {\n-                let buf = CString::new(sect.as_bytes()).unwrap();\n-                llvm::LLVMSetSection(llval, buf.as_ptr());\n-            }\n-        },\n-        None => ()\n+    if let Some(sect) = attr::first_attr_value_str_by_name(&i.attrs, \"link_section\") {\n+        if contains_null(&sect) {\n+            ccx.sess().fatal(&format!(\"Illegal null byte in link_section value: `{}`\", &sect));\n+        }\n+        unsafe {\n+            let buf = CString::new(sect.as_bytes()).unwrap();\n+            llvm::LLVMSetSection(llval, buf.as_ptr());\n+        }\n     }\n }\n "}, {"sha": "33bdccbf067285c03e266467c2bea52b89d83ac2", "filename": "src/librustc_trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -51,7 +51,7 @@ pub fn create_scope_map(cx: &CrateContext,\n     for arg in args {\n         pat_util::pat_bindings(&arg.pat, |_, node_id, _, path1| {\n             scope_stack.push(ScopeStackEntry { scope_metadata: fn_metadata,\n-                                               name: Some(path1.node.unhygienize()) });\n+                                               name: Some(path1.node) });\n             scope_map.insert(node_id, fn_metadata);\n         })\n     }\n@@ -260,7 +260,7 @@ fn walk_pattern(cx: &CrateContext,\n             // N.B.: this comparison must be UNhygienic... because\n             // gdb knows nothing about the context, so any two\n             // variables with the same name will cause the problem.\n-            let name = path1.node.unhygienize();\n+            let name = path1.node;\n             let need_new_scope = scope_stack\n                 .iter()\n                 .any(|entry| entry.name == Some(name));"}, {"sha": "0d13a1377b831c86136289a54ecdd6659d37fcfd", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -874,9 +874,8 @@ pub fn unknown_file_metadata(cx: &CrateContext) -> DIFile {\n }\n \n fn file_metadata_(cx: &CrateContext, key: &str, file_name: &str, work_dir: &str) -> DIFile {\n-    match debug_context(cx).created_files.borrow().get(key) {\n-        Some(file_metadata) => return *file_metadata,\n-        None => ()\n+    if let Some(file_metadata) = debug_context(cx).created_files.borrow().get(key) {\n+        return *file_metadata;\n     }\n \n     debug!(\"file_metadata: file_name: {}, work_dir: {}\", file_name, work_dir);"}, {"sha": "dad82167a76b32a589fae4922ff2e08166af4380", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -50,12 +50,9 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let mono_ty = apply_param_substs(ccx.tcx(), psubsts, &item_ty);\n     debug!(\"mono_ty = {:?} (post-substitution)\", mono_ty);\n \n-    match ccx.instances().borrow().get(&instance) {\n-        Some(&val) => {\n-            debug!(\"leaving monomorphic fn {:?}\", instance);\n-            return (val, mono_ty);\n-        }\n-        None => ()\n+    if let Some(&val) = ccx.instances().borrow().get(&instance) {\n+        debug!(\"leaving monomorphic fn {:?}\", instance);\n+        return (val, mono_ty);\n     }\n \n     debug!(\"monomorphic_fn({:?})\", instance);"}, {"sha": "668fa1fb303601cefa74c819c7a9d2cf974fb5f0", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -512,7 +512,7 @@ impl OpenOptions {\n     /// No file is allowed to exist at the target location, also no (dangling)\n     /// symlink.\n     ///\n-    /// This option is useful because it as atomic. Otherwise between checking\n+    /// This option is useful because it is atomic. Otherwise between checking\n     /// whether a file exists and creating a new one, the file may have been\n     /// created by another process (a TOCTOU race condition / attack).\n     ///\n@@ -1770,6 +1770,15 @@ mod tests {\n         check!(fs::remove_dir(dir));\n     }\n \n+    #[test]\n+    fn file_create_new_already_exists_error() {\n+        let tmpdir = tmpdir();\n+        let file = &tmpdir.join(\"file_create_new_error_exists\");\n+        check!(fs::File::create(file));\n+        let e = fs::OpenOptions::new().write(true).create_new(true).open(file).unwrap_err();\n+        assert_eq!(e.kind(), ErrorKind::AlreadyExists);\n+    }\n+\n     #[test]\n     fn mkdir_path_already_exists_error() {\n         let tmpdir = tmpdir();"}, {"sha": "ce563dc7b16d3e4fe31c3b6ab343bd82dfc0d484", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -181,6 +181,7 @@ pub const ERROR_ACCESS_DENIED: DWORD = 5;\n pub const ERROR_INVALID_HANDLE: DWORD = 6;\n pub const ERROR_NO_MORE_FILES: DWORD = 18;\n pub const ERROR_HANDLE_EOF: DWORD = 38;\n+pub const ERROR_FILE_EXISTS: DWORD = 80;\n pub const ERROR_BROKEN_PIPE: DWORD = 109;\n pub const ERROR_CALL_NOT_IMPLEMENTED: DWORD = 120;\n pub const ERROR_INSUFFICIENT_BUFFER: DWORD = 122;"}, {"sha": "6dd4f4c3e750e8b2df17d3e5941c9f97bce901f7", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -68,6 +68,7 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     match errno as c::DWORD {\n         c::ERROR_ACCESS_DENIED => return ErrorKind::PermissionDenied,\n         c::ERROR_ALREADY_EXISTS => return ErrorKind::AlreadyExists,\n+        c::ERROR_FILE_EXISTS => return ErrorKind::AlreadyExists,\n         c::ERROR_BROKEN_PIPE => return ErrorKind::BrokenPipe,\n         c::ERROR_FILE_NOT_FOUND => return ErrorKind::NotFound,\n         c::ERROR_PATH_NOT_FOUND => return ErrorKind::NotFound,"}, {"sha": "8537fcc221c956bc7b34ef425710515b04bc4e4c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -60,10 +60,6 @@ impl Name {\n     pub fn as_str(self) -> token::InternedString {\n         token::InternedString::new_from_name(self)\n     }\n-\n-    pub fn unhygienize(self) -> Name {\n-        token::intern(&self.as_str())\n-    }\n }\n \n impl fmt::Debug for Name {"}, {"sha": "341b076e7cf30389ddcfed84f1475f101ce7863d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -5430,18 +5430,15 @@ impl<'a> Parser<'a> {\n                               name: String,\n                               id_sp: Span) -> PResult<'a, (ast::ItemKind, Vec<ast::Attribute> )> {\n         let mut included_mod_stack = self.sess.included_mod_stack.borrow_mut();\n-        match included_mod_stack.iter().position(|p| *p == path) {\n-            Some(i) => {\n-                let mut err = String::from(\"circular modules: \");\n-                let len = included_mod_stack.len();\n-                for p in &included_mod_stack[i.. len] {\n-                    err.push_str(&p.to_string_lossy());\n-                    err.push_str(\" -> \");\n-                }\n-                err.push_str(&path.to_string_lossy());\n-                return Err(self.span_fatal(id_sp, &err[..]));\n-            }\n-            None => ()\n+        if let Some(i) = included_mod_stack.iter().position(|p| *p == path) {\n+            let mut err = String::from(\"circular modules: \");\n+            let len = included_mod_stack.len();\n+            for p in &included_mod_stack[i.. len] {\n+                err.push_str(&p.to_string_lossy());\n+                err.push_str(\" -> \");\n+            }\n+            err.push_str(&path.to_string_lossy());\n+            return Err(self.span_fatal(id_sp, &err[..]));\n         }\n         included_mod_stack.push(path.clone());\n         drop(included_mod_stack);"}, {"sha": "8818acf9aeff0967b0fc10c2c7070cfefa308962", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -2459,12 +2459,9 @@ impl<'a> State<'a> {\n                     }\n                 }\n                 self.print_ident(path1.node)?;\n-                match *sub {\n-                    Some(ref p) => {\n-                        word(&mut self.s, \"@\")?;\n-                        self.print_pat(&p)?;\n-                    }\n-                    None => ()\n+                if let Some(ref p) = *sub {\n+                    word(&mut self.s, \"@\")?;\n+                    self.print_pat(&p)?;\n                 }\n             }\n             PatKind::TupleStruct(ref path, ref elts, ddpos) => {\n@@ -3008,20 +3005,19 @@ impl<'a> State<'a> {\n             Some(cm) => cm,\n             _ => return Ok(())\n         };\n-        match self.next_comment() {\n-            Some(ref cmnt) => {\n-                if (*cmnt).style != comments::Trailing { return Ok(()) }\n-                let span_line = cm.lookup_char_pos(span.hi);\n-                let comment_line = cm.lookup_char_pos((*cmnt).pos);\n-                let mut next = (*cmnt).pos + BytePos(1);\n-                match next_pos { None => (), Some(p) => next = p }\n-                if span.hi < (*cmnt).pos && (*cmnt).pos < next &&\n-                    span_line.line == comment_line.line {\n-                        self.print_comment(cmnt)?;\n-                        self.cur_cmnt_and_lit.cur_cmnt += 1;\n-                    }\n+        if let Some(ref cmnt) = self.next_comment() {\n+            if (*cmnt).style != comments::Trailing { return Ok(()) }\n+            let span_line = cm.lookup_char_pos(span.hi);\n+            let comment_line = cm.lookup_char_pos((*cmnt).pos);\n+            let mut next = (*cmnt).pos + BytePos(1);\n+            if let Some(p) = next_pos {\n+                next = p;\n+            }\n+            if span.hi < (*cmnt).pos && (*cmnt).pos < next &&\n+               span_line.line == comment_line.line {\n+                self.print_comment(cmnt)?;\n+                self.cur_cmnt_and_lit.cur_cmnt += 1;\n             }\n-            _ => ()\n         }\n         Ok(())\n     }"}, {"sha": "7295b36af0fe9f983ff452b27c8983bd7e1d52a4", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58adb0760726bfb6f19c055caa58af51ef393b57/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=58adb0760726bfb6f19c055caa58af51ef393b57", "patch": "@@ -47,9 +47,8 @@ impl<T: Eq + Hash + Clone + 'static> Interner<T> {\n \n     pub fn intern(&self, val: T) -> Name {\n         let mut map = self.map.borrow_mut();\n-        match (*map).get(&val) {\n-            Some(&idx) => return idx,\n-            None => (),\n+        if let Some(&idx) = (*map).get(&val) {\n+            return idx;\n         }\n \n         let mut vect = self.vect.borrow_mut();\n@@ -161,9 +160,8 @@ impl StrInterner {\n \n     pub fn intern(&self, val: &str) -> Name {\n         let mut map = self.map.borrow_mut();\n-        match map.get(val) {\n-            Some(&idx) => return idx,\n-            None => (),\n+        if let Some(&idx) = map.get(val) {\n+            return idx;\n         }\n \n         let new_idx = Name(self.len() as u32);"}]}