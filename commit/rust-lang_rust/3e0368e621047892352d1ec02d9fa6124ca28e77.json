{"sha": "3e0368e621047892352d1ec02d9fa6124ca28e77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMDM2OGU2MjEwNDc4OTIzNTJkMWVjMDJkOWZhNjEyNGNhMjhlNzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-15T19:23:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-15T19:23:40Z"}, "message": "std: Fix a flaky test on OSX 10.10\n\nThis test was somewhat sketchy already with a `loop` around `write`, so this\njust adds some explicit synchronization to only call `write` once and guarantee\nthat the error happens.\n\nCloses #18900", "tree": {"sha": "22b418e5cf7a4a5c6c4218b594b36a3836f1ee91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22b418e5cf7a4a5c6c4218b594b36a3836f1ee91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e0368e621047892352d1ec02d9fa6124ca28e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0368e621047892352d1ec02d9fa6124ca28e77", "html_url": "https://github.com/rust-lang/rust/commit/3e0368e621047892352d1ec02d9fa6124ca28e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e0368e621047892352d1ec02d9fa6124ca28e77/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e4e55aebc1a71b6674c00b8604efa6b1e2e52cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4e55aebc1a71b6674c00b8604efa6b1e2e52cd", "html_url": "https://github.com/rust-lang/rust/commit/1e4e55aebc1a71b6674c00b8604efa6b1e2e52cd"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "24fc2998ee696f49766abf41327ed3bf9a9d6b7d", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3e0368e621047892352d1ec02d9fa6124ca28e77/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0368e621047892352d1ec02d9fa6124ca28e77/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=3e0368e621047892352d1ec02d9fa6124ca28e77", "patch": "@@ -661,23 +661,22 @@ mod test {\n         let addr = next_test_ip4();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n+        let (tx, rx) = channel();\n         spawn(proc() {\n-            let _stream = TcpStream::connect(addr);\n-            // Close\n+            drop(TcpStream::connect(addr));\n+            tx.send(());\n         });\n \n         let mut stream = acceptor.accept();\n+        rx.recv();\n         let buf = [0];\n-        loop {\n-            match stream.write(buf) {\n-                Ok(..) => {}\n-                Err(e) => {\n-                    assert!(e.kind == ConnectionReset ||\n-                            e.kind == BrokenPipe ||\n-                            e.kind == ConnectionAborted,\n-                            \"unknown error: {}\", e);\n-                    break;\n-                }\n+        match stream.write(buf) {\n+            Ok(..) => {}\n+            Err(e) => {\n+                assert!(e.kind == ConnectionReset ||\n+                        e.kind == BrokenPipe ||\n+                        e.kind == ConnectionAborted,\n+                        \"unknown error: {}\", e);\n             }\n         }\n     }\n@@ -687,23 +686,22 @@ mod test {\n         let addr = next_test_ip6();\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n+        let (tx, rx) = channel();\n         spawn(proc() {\n-            let _stream = TcpStream::connect(addr);\n-            // Close\n+            drop(TcpStream::connect(addr));\n+            tx.send(());\n         });\n \n         let mut stream = acceptor.accept();\n+        rx.recv();\n         let buf = [0];\n-        loop {\n-            match stream.write(buf) {\n-                Ok(..) => {}\n-                Err(e) => {\n-                    assert!(e.kind == ConnectionReset ||\n-                            e.kind == BrokenPipe ||\n-                            e.kind == ConnectionAborted,\n-                            \"unknown error: {}\", e);\n-                    break;\n-                }\n+        match stream.write(buf) {\n+            Ok(..) => {}\n+            Err(e) => {\n+                assert!(e.kind == ConnectionReset ||\n+                        e.kind == BrokenPipe ||\n+                        e.kind == ConnectionAborted,\n+                        \"unknown error: {}\", e);\n             }\n         }\n     }"}]}