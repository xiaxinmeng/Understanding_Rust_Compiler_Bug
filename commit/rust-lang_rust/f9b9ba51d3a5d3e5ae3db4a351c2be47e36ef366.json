{"sha": "f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YjliYTUxZDNhNWQzZTVhZTNkYjRhMzUxYzJiZTQ3ZTM2ZWYzNjY=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-01T13:17:20Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-01T14:37:47Z"}, "message": "Prevent functions with `#[target_feature]` to be coerced to safe function pointers", "tree": {"sha": "0c2df3d5a1da4e710c3983e9c2aae81ff53110c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c2df3d5a1da4e710c3983e9c2aae81ff53110c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366", "html_url": "https://github.com/rust-lang/rust/commit/f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2c6cbd98fa8be80951385f789f49d560916c726", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c6cbd98fa8be80951385f789f49d560916c726", "html_url": "https://github.com/rust-lang/rust/commit/f2c6cbd98fa8be80951385f789f49d560916c726"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "78a94b62d4722979f3a51569149986f527a77531", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366", "patch": "@@ -3,11 +3,13 @@ use rustc_ast::ast;\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi;\n \n use std::borrow::Cow;\n use std::fmt;\n+use std::ops::Deref;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]\n pub struct ExpectedFound<T> {\n@@ -58,6 +60,8 @@ pub enum TypeError<'tcx> {\n     ConstMismatch(ExpectedFound<&'tcx ty::Const<'tcx>>),\n \n     IntrinsicCast,\n+    /// Safe `#[target_feature]` functions are not assignable to safe function pointers.\n+    TargetFeatureCast(DefId),\n }\n \n pub enum UnconstrainedNumeric {\n@@ -183,6 +187,10 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 write!(f, \"expected `{}`, found `{}`\", values.expected, values.found)\n             }\n             IntrinsicCast => write!(f, \"cannot coerce intrinsics to function pointers\"),\n+            TargetFeatureCast(_) => write!(\n+                f,\n+                \"cannot coerce functions with `#[target_feature]` to safe function pointers\"\n+            ),\n             ObjectUnsafeCoercion(_) => write!(f, \"coercion to object-unsafe trait object\"),\n         }\n     }\n@@ -193,7 +201,8 @@ impl<'tcx> TypeError<'tcx> {\n         use self::TypeError::*;\n         match self {\n             CyclicTy(_) | UnsafetyMismatch(_) | Mismatch | AbiMismatch(_) | FixedArraySize(_)\n-            | Sorts(_) | IntMismatch(_) | FloatMismatch(_) | VariadicMismatch(_) => false,\n+            | Sorts(_) | IntMismatch(_) | FloatMismatch(_) | VariadicMismatch(_)\n+            | TargetFeatureCast(_) => false,\n \n             Mutability\n             | TupleSize(_)\n@@ -489,6 +498,18 @@ impl Trait for X {\n                     );\n                 }\n             }\n+            TargetFeatureCast(def_id) => {\n+                let attrs = self.get_attrs(*def_id);\n+                let target_spans = attrs\n+                    .deref()\n+                    .iter()\n+                    .filter(|attr| attr.has_name(sym::target_feature))\n+                    .map(|attr| attr.span);\n+                db.note(\n+                    \"functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\"\n+                );\n+                db.span_labels(target_spans, \"`#[target_feature]` added here\");\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "c8406a024ecffb39dd7f738d3212bbe8cb7225d8", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366", "patch": "@@ -645,6 +645,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch),\n             ConstMismatch(ref x) => return tcx.lift(x).map(ConstMismatch),\n             IntrinsicCast => IntrinsicCast,\n+            TargetFeatureCast(ref x) => TargetFeatureCast(*x),\n             ObjectUnsafeCoercion(ref x) => return tcx.lift(x).map(ObjectUnsafeCoercion),\n         })\n     }"}, {"sha": "9a3bb7ee88a0ffed668cbe5dfcd888d4a62def5b", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=f9b9ba51d3a5d3e5ae3db4a351c2be47e36ef366", "patch": "@@ -688,12 +688,22 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         debug!(\"coerce_from_fn_item(a={:?}, b={:?})\", a, b);\n \n         match b.kind {\n-            ty::FnPtr(_) => {\n+            ty::FnPtr(b_sig) => {\n                 let a_sig = a.fn_sig(self.tcx);\n                 // Intrinsics are not coercible to function pointers\n                 if a_sig.abi() == Abi::RustIntrinsic || a_sig.abi() == Abi::PlatformIntrinsic {\n                     return Err(TypeError::IntrinsicCast);\n                 }\n+\n+                // Safe `#[target_feature]` functions are not assignable to safe fn pointers (RFC 2396).\n+                if let ty::FnDef(def_id, _) = a.kind {\n+                    if b_sig.unsafety() == hir::Unsafety::Normal\n+                        && !self.tcx.codegen_fn_attrs(def_id).target_features.is_empty()\n+                    {\n+                        return Err(TypeError::TargetFeatureCast(def_id));\n+                    }\n+                }\n+\n                 let InferOk { value: a_sig, mut obligations } =\n                     self.normalize_associated_types_in_as_infer_ok(self.cause.span, &a_sig);\n "}]}