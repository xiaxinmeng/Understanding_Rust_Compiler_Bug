{"sha": "2c307fab49834c631529d5485beda2727b020c43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMzA3ZmFiNDk4MzRjNjMxNTI5ZDU0ODViZWRhMjcyN2IwMjBjNDM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-26T23:44:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-26T23:44:44Z"}, "message": "Rollup merge of #77703 - Keruspe:system-libunwind, r=Mark-Simulacrum\n\nadd system-llvm-libunwind config option\n\nallows using the system-wide llvm-libunwind as the unwinder\n\nWorkaround for #76020", "tree": {"sha": "1b689d865f4868f3a2e28b82d5e3e1e09ead7c56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b689d865f4868f3a2e28b82d5e3e1e09ead7c56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c307fab49834c631529d5485beda2727b020c43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfl19tCRBK7hj4Ov3rIwAAdHIIACggZudGtI6RI/okEdmOqSHr\nzo03khM+MyrSfXxyo/FrdrlYJlVAC07Dlf27mQzXLj13wVEKHBqUGla8+fNhau6e\nOQ6G9XeFpgojLzUK2tHJ3iIUR+l1stjq0zKFmvuvYS4v5xpl20oNIXz1+fOucdFN\nGx/UPSgIJahmeYsyhDR1TZ4rVLEapNCR5vUppNp9B9chKhZuYgbBOXY/lfc9PtAu\ndoPyYAz0IsXVU7td5SV2XlVHfx/noSGGTGyaCqglg+hReBhEmEpgQdMPo5wOMeMC\npa6CnBQtHCf6VJtmwcx0Sq/G4zuqEA9ne+jqSBQi+vtb9O7fLwmY75b71dI5mIM=\n=YBaa\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b689d865f4868f3a2e28b82d5e3e1e09ead7c56\nparent 13e88d63662f682eb672ae21a99b4ca4ffffc7dd\nparent 66fa42a94627dc04de6d44227c5d06fec6b26d76\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603755884 +0900\ncommitter GitHub <noreply@github.com> 1603755884 +0900\n\nRollup merge of #77703 - Keruspe:system-libunwind, r=Mark-Simulacrum\n\nadd system-llvm-libunwind config option\n\nallows using the system-wide llvm-libunwind as the unwinder\n\nWorkaround for #76020\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c307fab49834c631529d5485beda2727b020c43", "html_url": "https://github.com/rust-lang/rust/commit/2c307fab49834c631529d5485beda2727b020c43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c307fab49834c631529d5485beda2727b020c43/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13e88d63662f682eb672ae21a99b4ca4ffffc7dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e88d63662f682eb672ae21a99b4ca4ffffc7dd", "html_url": "https://github.com/rust-lang/rust/commit/13e88d63662f682eb672ae21a99b4ca4ffffc7dd"}, {"sha": "66fa42a94627dc04de6d44227c5d06fec6b26d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/66fa42a94627dc04de6d44227c5d06fec6b26d76", "html_url": "https://github.com/rust-lang/rust/commit/66fa42a94627dc04de6d44227c5d06fec6b26d76"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "1edb390e0fef25e0334b6bf17cbe9f1ed7938a6b", "filename": "config.toml.example", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c307fab49834c631529d5485beda2727b020c43/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/2c307fab49834c631529d5485beda2727b020c43/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=2c307fab49834c631529d5485beda2727b020c43", "patch": "@@ -527,7 +527,8 @@ changelog-seen = 2\n #test-compare-mode = false\n \n # Use LLVM libunwind as the implementation for Rust's unwinder.\n-#llvm-libunwind = false\n+# Accepted values are 'in-tree' (formerly true), 'system' or 'no' (formerly false).\n+#llvm-libunwind = 'no'\n \n # Enable Windows Control Flow Guard checks in the standard library.\n # This only applies from stage 1 onwards, and only for Windows targets."}, {"sha": "281ed4f336c8bf41a6e2016d57c041298157e918", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c307fab49834c631529d5485beda2727b020c43/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2c307fab49834c631529d5485beda2727b020c43/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=2c307fab49834c631529d5485beda2727b020c43", "patch": "@@ -61,6 +61,7 @@ profiler = [\"profiler_builtins\"]\n compiler-builtins-c = [\"alloc/compiler-builtins-c\"]\n compiler-builtins-mem = [\"alloc/compiler-builtins-mem\"]\n llvm-libunwind = [\"unwind/llvm-libunwind\"]\n+system-llvm-libunwind = [\"unwind/system-llvm-libunwind\"]\n \n # Make panics and failed asserts immediately abort without formatting any message\n panic_immediate_abort = [\"core/panic_immediate_abort\"]"}, {"sha": "3d6910b107dd5a8377020f58039748229e68c7b1", "filename": "library/test/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c307fab49834c631529d5485beda2727b020c43/library%2Ftest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2c307fab49834c631529d5485beda2727b020c43/library%2Ftest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2FCargo.toml?ref=2c307fab49834c631529d5485beda2727b020c43", "patch": "@@ -27,6 +27,7 @@ backtrace = [\"std/backtrace\"]\n compiler-builtins-c = [\"std/compiler-builtins-c\"]\n compiler-builtins-mem = [\"std/compiler-builtins-mem\"]\n llvm-libunwind = [\"std/llvm-libunwind\"]\n+system-llvm-libunwind = [\"std/system-llvm-libunwind\"]\n panic-unwind = [\"std/panic_unwind\"]\n panic_immediate_abort = [\"std/panic_immediate_abort\"]\n profiler = [\"std/profiler\"]"}, {"sha": "4f7a304a59f68eaad969671c5d89c2e5feb465f4", "filename": "library/unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c307fab49834c631529d5485beda2727b020c43/library%2Funwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2c307fab49834c631529d5485beda2727b020c43/library%2Funwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2FCargo.toml?ref=2c307fab49834c631529d5485beda2727b020c43", "patch": "@@ -23,3 +23,4 @@ cc = { version = \"1.0.1\" }\n \n [features]\n llvm-libunwind = []\n+system-llvm-libunwind = []"}, {"sha": "dbdefa471a9ed24a44268a3f2f9e459953ac2e5d", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c307fab49834c631529d5485beda2727b020c43/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c307fab49834c631529d5485beda2727b020c43/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=2c307fab49834c631529d5485beda2727b020c43", "patch": "@@ -45,10 +45,24 @@ extern \"C\" {}\n // When building with crt-static, we get `gcc_eh` from the `libc` crate, since\n // glibc needs it, and needs it listed later on the linker command line. We\n // don't want to duplicate it here.\n-#[cfg(all(target_os = \"linux\", target_env = \"gnu\", not(feature = \"llvm-libunwind\")))]\n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    not(feature = \"llvm-libunwind\"),\n+    not(feature = \"system-llvm-libunwind\")\n+))]\n #[link(name = \"gcc_s\", cfg(not(target_feature = \"crt-static\")))]\n extern \"C\" {}\n \n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    not(feature = \"llvm-libunwind\"),\n+    feature = \"system-llvm-libunwind\"\n+))]\n+#[link(name = \"unwind\", cfg(not(target_feature = \"crt-static\")))]\n+extern \"C\" {}\n+\n #[cfg(target_os = \"redox\")]\n #[link(name = \"gcc_eh\", kind = \"static-nobundle\", cfg(target_feature = \"crt-static\"))]\n #[link(name = \"gcc_s\", cfg(not(target_feature = \"crt-static\")))]"}, {"sha": "7698ff62880d6f76338f123a435bbb681e6c579a", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2c307fab49834c631529d5485beda2727b020c43/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c307fab49834c631529d5485beda2727b020c43/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=2c307fab49834c631529d5485beda2727b020c43", "patch": "@@ -10,6 +10,7 @@ use std::ffi::OsString;\n use std::fmt;\n use std::fs;\n use std::path::{Path, PathBuf};\n+use std::str::FromStr;\n \n use crate::cache::{Interned, INTERNER};\n use crate::flags::Flags;\n@@ -65,7 +66,7 @@ pub struct Config {\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n     pub test_compare_mode: bool,\n-    pub llvm_libunwind: bool,\n+    pub llvm_libunwind: Option<LlvmLibunwind>,\n \n     pub on_fail: Option<String>,\n     pub stage: u32,\n@@ -177,6 +178,32 @@ pub struct Config {\n     pub out: PathBuf,\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq)]\n+pub enum LlvmLibunwind {\n+    No,\n+    InTree,\n+    System,\n+}\n+\n+impl Default for LlvmLibunwind {\n+    fn default() -> Self {\n+        Self::No\n+    }\n+}\n+\n+impl FromStr for LlvmLibunwind {\n+    type Err = String;\n+\n+    fn from_str(value: &str) -> Result<Self, Self::Err> {\n+        match value {\n+            \"no\" => Ok(Self::No),\n+            \"in-tree\" => Ok(Self::InTree),\n+            \"system\" => Ok(Self::System),\n+            invalid => Err(format!(\"Invalid value '{}' for rust.llvm-libunwind config.\", invalid)),\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct TargetSelection {\n     pub triple: Interned<String>,\n@@ -457,7 +484,7 @@ struct Rust {\n     remap_debuginfo: Option<bool>,\n     jemalloc: Option<bool>,\n     test_compare_mode: Option<bool>,\n-    llvm_libunwind: Option<bool>,\n+    llvm_libunwind: Option<String>,\n     control_flow_guard: Option<bool>,\n     new_symbol_mangling: Option<bool>,\n }\n@@ -799,7 +826,9 @@ impl Config {\n             set(&mut config.rust_rpath, rust.rpath);\n             set(&mut config.jemalloc, rust.jemalloc);\n             set(&mut config.test_compare_mode, rust.test_compare_mode);\n-            set(&mut config.llvm_libunwind, rust.llvm_libunwind);\n+            config.llvm_libunwind = rust\n+                .llvm_libunwind\n+                .map(|v| v.parse().expect(\"failed to parse rust.llvm-libunwind\"));\n             set(&mut config.backtrace, rust.backtrace);\n             set(&mut config.channel, rust.channel);\n             set(&mut config.rust_dist_src, rust.dist_src);"}, {"sha": "e156952d56f3d6c1b19bf0efab85dd5be57ab5f3", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c307fab49834c631529d5485beda2727b020c43/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/2c307fab49834c631529d5485beda2727b020c43/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=2c307fab49834c631529d5485beda2727b020c43", "patch": "@@ -65,7 +65,7 @@ def v(*args):\n v(\"llvm-cxxflags\", \"llvm.cxxflags\", \"build LLVM with these extra compiler flags\")\n v(\"llvm-ldflags\", \"llvm.ldflags\", \"build LLVM with these extra linker flags\")\n \n-o(\"llvm-libunwind\", \"rust.llvm-libunwind\", \"use LLVM libunwind\")\n+v(\"llvm-libunwind\", \"rust.llvm-libunwind\", \"use LLVM libunwind\")\n \n # Optimization and debugging options. These may be overridden by the release\n # channel, etc."}, {"sha": "593d1c4ae884eba4b27fa1c1f6838b1072baf40f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c307fab49834c631529d5485beda2727b020c43/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c307fab49834c631529d5485beda2727b020c43/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=2c307fab49834c631529d5485beda2727b020c43", "patch": "@@ -121,7 +121,7 @@ use std::os::windows::fs::symlink_file;\n use build_helper::{mtime, output, run, run_suppressed, t, try_run, try_run_suppressed};\n use filetime::FileTime;\n \n-use crate::config::TargetSelection;\n+use crate::config::{LlvmLibunwind, TargetSelection};\n use crate::util::{exe, libdir, CiEnv};\n \n mod builder;\n@@ -540,8 +540,10 @@ impl Build {\n     fn std_features(&self) -> String {\n         let mut features = \"panic-unwind\".to_string();\n \n-        if self.config.llvm_libunwind {\n-            features.push_str(\" llvm-libunwind\");\n+        match self.config.llvm_libunwind.unwrap_or_default() {\n+            LlvmLibunwind::InTree => features.push_str(\" llvm-libunwind\"),\n+            LlvmLibunwind::System => features.push_str(\" system-llvm-libunwind\"),\n+            LlvmLibunwind::No => {}\n         }\n         if self.config.backtrace {\n             features.push_str(\" backtrace\");"}]}