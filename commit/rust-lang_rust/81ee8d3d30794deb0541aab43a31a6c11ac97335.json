{"sha": "81ee8d3d30794deb0541aab43a31a6c11ac97335", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZWU4ZDNkMzA3OTRkZWIwNTQxYWFiNDNhMzFhNmMxMWFjOTczMzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-08T18:42:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-08T18:42:46Z"}, "message": "Merge #5271\n\n5271: Tidyup hover r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3b025e3fee7a76ec763c15e430356b9d1654ac30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b025e3fee7a76ec763c15e430356b9d1654ac30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ee8d3d30794deb0541aab43a31a6c11ac97335", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfBhOmCRBK7hj4Ov3rIwAAdHIIAB+OQ/+CISAMUhFvJWkuN4SI\nsFXzIDIUCL16WHWA5U5VjE5dTDWCRsdZMYaojCZt4nS1NuTfFwbeb4rdA7LuJzVD\nQ9X/7+A7B+ftkVV2UyDt90X96IoSldaWvVTz4iwZKcFlA/ERbaJ8A6J6Xie9L+4M\nyGKNozBufzbysHjQi8pj9tMxuwUvTIe9ZnwcTexWFVxL8o33cvtaA9gEbQvORcKn\nxG6FAgBMW04dwVgAXpBVKL/MLxutE4iHSFf/5WZDCSTRV0LtSoI+2ofSDrG9iKKN\nZ6jY6HRvwLqMblWrVnQe6nYjd14QtLIJSFPYfsUfhKz9Dt/OWba4jcETvWfmLwM=\n=xfyb\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b025e3fee7a76ec763c15e430356b9d1654ac30\nparent 8aa10c00a4c5b957d459fac5a103cd9688e8dcdd\nparent 16dcf020c47a4e386c667c6da4815686916fc0cf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594233766 +0000\ncommitter GitHub <noreply@github.com> 1594233766 +0000\n\nMerge #5271\n\n5271: Tidyup hover r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ee8d3d30794deb0541aab43a31a6c11ac97335", "html_url": "https://github.com/rust-lang/rust/commit/81ee8d3d30794deb0541aab43a31a6c11ac97335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ee8d3d30794deb0541aab43a31a6c11ac97335/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd", "html_url": "https://github.com/rust-lang/rust/commit/8aa10c00a4c5b957d459fac5a103cd9688e8dcdd"}, {"sha": "16dcf020c47a4e386c667c6da4815686916fc0cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/16dcf020c47a4e386c667c6da4815686916fc0cf", "html_url": "https://github.com/rust-lang/rust/commit/16dcf020c47a4e386c667c6da4815686916fc0cf"}], "stats": {"total": 88, "additions": 37, "deletions": 51}, "files": [{"sha": "61359c7702185900444053a2f9e5bf2495821421", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 37, "deletions": 51, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/81ee8d3d30794deb0541aab43a31a6c11ac97335/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ee8d3d30794deb0541aab43a31a6c11ac97335/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=81ee8d3d30794deb0541aab43a31a6c11ac97335", "patch": "@@ -77,10 +77,6 @@ impl HoverResult {\n         Self::default()\n     }\n \n-    pub fn extend(&mut self, item: Option<String>) {\n-        self.results.extend(item);\n-    }\n-\n     pub fn is_empty(&self) -> bool {\n         self.results.is_empty()\n     }\n@@ -89,29 +85,20 @@ impl HoverResult {\n         self.results.len()\n     }\n \n-    pub fn first(&self) -> Option<&str> {\n-        self.results.first().map(String::as_str)\n-    }\n-\n-    pub fn results(&self) -> &[String] {\n-        &self.results\n-    }\n-\n     pub fn actions(&self) -> &[HoverAction] {\n         &self.actions\n     }\n-\n-    pub fn push_action(&mut self, action: HoverAction) {\n-        self.actions.push(action);\n-    }\n-\n     /// Returns the results converted into markup\n     /// for displaying in a UI\n     ///\n     /// Does not process actions!\n     pub fn to_markup(&self) -> String {\n         self.results.join(\"\\n\\n___\\n\")\n     }\n+\n+    fn push_action(&mut self, action: HoverAction) {\n+        self.actions.push(action);\n+    }\n }\n \n // Feature: Hover\n@@ -126,30 +113,33 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n \n     let mut res = HoverResult::new();\n \n-    if let Some((node, name_kind)) = match_ast! {\n-        match (token.parent()) {\n+    let node = token.parent();\n+    let definition = match_ast! {\n+        match node {\n             ast::NameRef(name_ref) => {\n-                classify_name_ref(&sema, &name_ref).map(|d| (name_ref.syntax().clone(), d.definition()))\n+                classify_name_ref(&sema, &name_ref).map(|d| d.definition())\n             },\n             ast::Name(name) => {\n-                classify_name(&sema, &name).map(|d| (name.syntax().clone(), d.definition()))\n+                classify_name(&sema, &name).map(|d| d.definition())\n             },\n             _ => None,\n         }\n-    } {\n+    };\n+    if let Some(definition) = definition {\n         let range = sema.original_range(&node).range;\n-        res.extend(hover_text_from_name_kind(db, name_kind));\n-\n+        if let Some(text) = hover_text_from_name_kind(db, definition) {\n+            res.results.push(text);\n+        }\n         if !res.is_empty() {\n-            if let Some(action) = show_implementations_action(db, name_kind) {\n+            if let Some(action) = show_implementations_action(db, definition) {\n                 res.push_action(action);\n             }\n \n-            if let Some(action) = runnable_action(&sema, name_kind, position.file_id) {\n+            if let Some(action) = runnable_action(&sema, definition, position.file_id) {\n                 res.push_action(action);\n             }\n \n-            if let Some(action) = goto_type_action(db, name_kind) {\n+            if let Some(action) = goto_type_action(db, definition) {\n                 res.push_action(action);\n             }\n \n@@ -178,7 +168,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         }\n     }?;\n \n-    res.extend(Some(rust_code_markup(&ty.display(db))));\n+    res.results.push(rust_code_markup(&ty.display(db)));\n     let range = sema.original_range(&node).range;\n     Some(RangeInfo::new(range, res))\n }\n@@ -405,10 +395,6 @@ mod tests {\n         s.trim_start_matches(\"```rust\\n\").trim_end_matches(\"\\n```\")\n     }\n \n-    fn trim_markup_opt(s: Option<&str>) -> Option<&str> {\n-        s.map(trim_markup)\n-    }\n-\n     fn assert_impl_action(action: &HoverAction, position: u32) {\n         let offset = match action {\n             HoverAction::Implementaion(pos) => pos.offset,\n@@ -420,7 +406,7 @@ mod tests {\n     fn check_hover_result(ra_fixture: &str, expected: &[&str]) -> (String, Vec<HoverAction>) {\n         let (analysis, position) = analysis_and_position(ra_fixture);\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        let mut results = Vec::from(hover.info.results());\n+        let mut results = hover.info.results.clone();\n         results.sort();\n \n         for (markup, expected) in\n@@ -453,7 +439,7 @@ fn main() {\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(hover.range, TextRange::new(58.into(), 63.into()));\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"u32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"u32\"));\n     }\n \n     #[test]\n@@ -652,7 +638,7 @@ fn main() {\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Option\\n```\\n\\n```rust\\nSome\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"Option\\n```\\n\\n```rust\\nSome\"));\n \n         let (analysis, position) = analysis_and_position(\n             \"\n@@ -665,7 +651,7 @@ fn main() {\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Option<i32>\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"Option<i32>\"));\n     }\n \n     #[test]\n@@ -722,14 +708,14 @@ The Some variant\n     fn hover_for_local_variable() {\n         let (analysis, position) = analysis_and_position(\"fn func(foo: i32) { fo<|>o; }\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]\n     fn hover_for_local_variable_pat() {\n         let (analysis, position) = analysis_and_position(\"fn func(fo<|>o: i32) {}\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]\n@@ -740,14 +726,14 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]\n     fn hover_for_param_edge() {\n         let (analysis, position) = analysis_and_position(\"fn func(<|>foo: i32) {}\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]\n@@ -768,7 +754,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"Thing\"));\n     }\n \n     #[test]\n@@ -792,8 +778,8 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(\n-            trim_markup_opt(hover.info.first()),\n-            Some(\"wrapper::Thing\\n```\\n\\n```rust\\nfn new() -> Thing\")\n+            trim_markup(&hover.info.results[0]),\n+            (\"wrapper::Thing\\n```\\n\\n```rust\\nfn new() -> Thing\")\n         );\n     }\n \n@@ -816,7 +802,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"const C: u32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"const C: u32\"));\n     }\n \n     #[test]\n@@ -832,7 +818,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"Thing\"));\n \n         /* FIXME: revive these tests\n                 let (analysis, position) = analysis_and_position(\n@@ -847,7 +833,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 );\n \n                 let hover = analysis.hover(position).unwrap().unwrap();\n-                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n+                assert_eq!(trim_markup(&hover.info.results[0]), (\"Thing\"));\n \n                 let (analysis, position) = analysis_and_position(\n                     \"\n@@ -860,7 +846,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                     \",\n                 );\n                 let hover = analysis.hover(position).unwrap().unwrap();\n-                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+                assert_eq!(trim_markup(&hover.info.results[0]), (\"enum Thing\"));\n \n                 let (analysis, position) = analysis_and_position(\n                     \"\n@@ -872,7 +858,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                     \",\n                 );\n                 let hover = analysis.hover(position).unwrap().unwrap();\n-                assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n+                assert_eq!(trim_markup(&hover.info.results[0]), (\"enum Thing\"));\n         */\n     }\n \n@@ -889,7 +875,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]\n@@ -906,7 +892,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"macro_rules! foo\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), (\"macro_rules! foo\"));\n     }\n \n     #[test]\n@@ -917,7 +903,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(trim_markup(&hover.info.results[0]), \"i32\");\n     }\n \n     #[test]"}]}