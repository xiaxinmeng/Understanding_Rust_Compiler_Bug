{"sha": "d778e57bf61b2284f33d28486f2ac63faa0422cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NzhlNTdiZjYxYjIyODRmMzNkMjg0ODZmMmFjNjNmYWEwNDIyY2Y=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-17T14:12:35Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-10-06T12:16:49Z"}, "message": "Add RFC 1238's `unsafe_destructor_blind_to_params` (UGEH) where needed.\n\nI needed it in `RawVec`, `Vec`, and `TypedArena` for `rustc` to\nbootstrap; but of course that alone was not sufficient for `make\ncheck`.\n\nLater I added `unsafe_destructor_blind_to_params` to collections, in\nparticular `LinkedList` and `RawTable` (the backing representation for\n`HashMap` and `HashSet`), to get the regression tests exercising\ncyclic structure from PR #27185 building.\n\n----\n\nNote that the feature is `dropck_parametricity` (which is not the same\nas the attribute's name). We will almost certainly vary our strategy\nhere in the future, so it makes some sense to have a not-as-ugly name\nfor the feature gate. (The attribute name was deliberately selected to\nbe ugly looking.)", "tree": {"sha": "c6b40557ab5e5f1d9de0724c3926bfd0abb5a28e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6b40557ab5e5f1d9de0724c3926bfd0abb5a28e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d778e57bf61b2284f33d28486f2ac63faa0422cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d778e57bf61b2284f33d28486f2ac63faa0422cf", "html_url": "https://github.com/rust-lang/rust/commit/d778e57bf61b2284f33d28486f2ac63faa0422cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d778e57bf61b2284f33d28486f2ac63faa0422cf/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9868df2fd5d9364a1a1d8b22847c7b442a77a88b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9868df2fd5d9364a1a1d8b22847c7b442a77a88b", "html_url": "https://github.com/rust-lang/rust/commit/9868df2fd5d9364a1a1d8b22847c7b442a77a88b"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "8ecc78a231e338c8f682ca5da974e9f61ac6267e", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -94,6 +94,11 @@\n #![feature(unboxed_closures)]\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n+// SNAP 1af31d4\n+#![allow(unused_features)]\n+// SNAP 1af31d4\n+#![allow(unused_attributes)]\n+#![feature(dropck_parametricity)]\n #![feature(unsize)]\n #![feature(core_slice_ext)]\n #![feature(core_str_ext)]"}, {"sha": "49d37698154fd1bd14b4b9516ec711630fb7f5fc", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -445,6 +445,7 @@ impl<T> RawVec<T> {\n }\n \n impl<T> Drop for RawVec<T> {\n+    #[unsafe_destructor_blind_to_params]\n     /// Frees the memory owned by the RawVec *without* trying to Drop its contents.\n     fn drop(&mut self) {\n         let elem_size = mem::size_of::<T>();"}, {"sha": "62463ecabbf5539d7a650b03c641540e5b950dae", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -38,8 +38,14 @@\n #![feature(ptr_as_ref)]\n #![feature(raw)]\n #![feature(staged_api)]\n+#![feature(dropck_parametricity)]\n #![cfg_attr(test, feature(test))]\n \n+// SNAP 1af31d4\n+#![allow(unused_features)]\n+// SNAP 1af31d4\n+#![allow(unused_attributes)]\n+\n extern crate alloc;\n \n use std::cell::{Cell, RefCell};\n@@ -510,6 +516,7 @@ impl<T> TypedArena<T> {\n }\n \n impl<T> Drop for TypedArena<T> {\n+    #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n         unsafe {\n             // Determine how much was filled."}, {"sha": "bde0d0e6b5f81438ea1330a255765349f94e6724", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -275,12 +275,14 @@ impl<T> DoubleEndedIterator for RawItems<T> {\n }\n \n impl<T> Drop for RawItems<T> {\n+    #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n         for _ in self {}\n     }\n }\n \n impl<K, V> Drop for Node<K, V> {\n+    #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n         if self.keys.is_null() ||\n             (unsafe { self.keys.get() as *const K as usize == mem::POST_DROP_USIZE })\n@@ -1419,6 +1421,7 @@ impl<K, V> TraversalImpl for MoveTraversalImpl<K, V> {\n }\n \n impl<K, V> Drop for MoveTraversalImpl<K, V> {\n+    #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n         // We need to cleanup the stored values manually, as the RawItems destructor would run\n         // after our deallocation."}, {"sha": "4292c200fbe2f0b6ad4d80432e3f1d4d81f26028", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -32,6 +32,11 @@\n #![allow(trivial_casts)]\n #![cfg_attr(test, allow(deprecated))] // rand\n \n+// SNAP 1af31d4\n+#![allow(unused_features)]\n+// SNAP 1af31d4\n+#![allow(unused_attributes)]\n+\n #![feature(alloc)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n@@ -59,6 +64,7 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n+#![feature(dropck_parametricity)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(decode_utf16)]\n #![feature(utf8_error)]"}, {"sha": "fca7d3b26fc2e538d98fadaeae14a276dca3d8d7", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -655,6 +655,7 @@ impl<T> LinkedList<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for LinkedList<T> {\n+    #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n         // Dissolve the linked_list in a loop.\n         // Just dropping the list_head can lead to stack exhaustion"}, {"sha": "d374c0959f3572ea6f483b23a9f0830032723e04", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -1385,6 +1385,7 @@ impl<T: Ord> Ord for Vec<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for Vec<T> {\n+    #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n         // NOTE: this is currently abusing the fact that ZSTs can't impl Drop.\n         // Or rather, that impl'ing Drop makes them not zero-sized. This is"}, {"sha": "d438c27a96fa0621228dfcce5b961cdc891ee00e", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -64,6 +64,7 @@ impl<T: Clone> Clone for VecDeque<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Drop for VecDeque<T> {\n+    #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n         self.clear();\n         // RawVec handles deallocation"}, {"sha": "e8796dd10b4f866cbf3b87e69bd23104430fe663", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -999,6 +999,7 @@ impl<K: Clone, V: Clone> Clone for RawTable<K, V> {\n }\n \n impl<K, V> Drop for RawTable<K, V> {\n+    #[unsafe_destructor_blind_to_params]\n     fn drop(&mut self) {\n         if self.capacity == 0 || self.capacity == mem::POST_DROP_USIZE {\n             return;"}, {"sha": "9af766ad2af3595452a21801f8e9794ba255f1f3", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -199,6 +199,11 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n+// SNAP 1af31d4\n+#![allow(unused_features)]\n+// SNAP 1af31d4\n+#![allow(unused_attributes)]\n+\n #![feature(alloc)]\n #![feature(allow_internal_unstable)]\n #![feature(associated_consts)]\n@@ -241,6 +246,7 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n+#![feature(dropck_parametricity)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(decode_utf16)]\n #![feature(unwind_attributes)]"}, {"sha": "e134e5617dcc7008b1d24cab47ea6330d11e08e8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -136,9 +136,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     // switch to Accepted; see RFC 320)\n     (\"unsafe_no_drop_flag\", \"1.0.0\", None, Active),\n \n-    // Allows using the unsafe_destructor_blind_to_params attribute\n-    // (Needs an RFC link)\n-    (\"unsafe_destructor_blind_to_params\", \"1.3.0\", Some(28498), Active),\n+    // Allows using the unsafe_destructor_blind_to_params attribute;\n+    // RFC 1238\n+    (\"dropck_parametricity\", \"1.3.0\", Some(28498), Active),\n \n     // Allows the use of custom attributes; RFC 572\n     (\"custom_attribute\", \"1.0.0\", None, Active),\n@@ -345,7 +345,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n                                                 and may be removed in the future\")),\n     (\"unsafe_destructor_blind_to_params\",\n      Normal,\n-     Gated(\"unsafe_destructor_blind_to_params\",\n+     Gated(\"dropck_parametricity\",\n            \"unsafe_destructor_blind_to_params has unstable semantics \\\n             and may be removed in the future\")),\n     (\"unwind\", Whitelisted, Gated(\"unwind_attributes\", \"#[unwind] is experimental\")),"}, {"sha": "9fa482022982b719aa3494fccc85c9cfa6a24ad9", "filename": "src/test/run-pass/issue-24805-dropck-itemless.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Ftest%2Frun-pass%2Fissue-24805-dropck-itemless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d778e57bf61b2284f33d28486f2ac63faa0422cf/src%2Ftest%2Frun-pass%2Fissue-24805-dropck-itemless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-24805-dropck-itemless.rs?ref=d778e57bf61b2284f33d28486f2ac63faa0422cf", "patch": "@@ -13,6 +13,8 @@\n \n #![allow(non_camel_case_types)]\n \n+#![feature(dropck_parametricity)]\n+\n trait UserDefined { }\n \n impl UserDefined for i32 { }\n@@ -26,7 +28,10 @@ impl<'a, T> UserDefined for &'a T { }\n macro_rules! impl_drop {\n     ($Bound:ident, $Id:ident) => {\n         struct $Id<T:$Bound>(T);\n-        impl <T:$Bound> Drop for $Id<T> { fn drop(&mut self) { } }\n+        impl <T:$Bound> Drop for $Id<T> {\n+            #[unsafe_destructor_blind_to_params]\n+            fn drop(&mut self) { }\n+        }\n     }\n }\n "}]}