{"sha": "3e59aef385ef6a418f77560458012adc179ee64a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNTlhZWYzODVlZjZhNDE4Zjc3NTYwNDU4MDEyYWRjMTc5ZWU2NGE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-06-30T19:03:51Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-06-30T19:03:51Z"}, "message": "Improved non_exhaustive message.", "tree": {"sha": "28de6835062b4d730016d8cd89bfdd6a2cc18b06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28de6835062b4d730016d8cd89bfdd6a2cc18b06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e59aef385ef6a418f77560458012adc179ee64a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAls31BcACgkQAXYLT59T\n8VSqoQ/7BzuoIcjrEy87qTscKE2w0CB0OijNGyZhAlZcEanr9dKeOp69c5RF2n2v\njdluRJK37Mj1hftbn2Is81NapNZqgHeB+TkAyIC9UFi4IGion1Enu/WqpBF4T9K3\npbL1D7KjwUqDcOXDMGBMSEhix5txciTJ3paRiJy39CK1FxpsSgkSDaFKUoJzP+0n\naB/K79YaghYgXH6Kqq8YHCn34ak+hN4UArjp+joxC+SlzJ2BMarJPv2CQm24ruvJ\nfjHnFoA91qUM6bNpmC2wRVzIYh7BAHz7SgXqrnnWg0zLPEQ++plP5xE8Tv6/NA9a\neHRpFDlBCeApnruK279mFirvdV8n3qKmo2nnv9cNAIO02ki1eCo/X3DmWOjItHpT\naEJtdMfNx8Cd15/EXM7Wznr4EIcr8qqWBGJbgJRkBMPw/y0chqBMnyjKarsmE/1R\nJVJe9CSWHA6Kn5C9JrNFXnAi5HOUbzHGNa5GE6R1TlQ6SIGnRdWqln7QR2Zd8Vd2\nELgGSRQ4MWhk+2zy9qIlCzvkkp0EQYe6cDU0HCkmfnjk/OexbMHL+lDwMjAI5PMB\njpkU4ri3YEQ+8lUzlkmn+crW4UdQf1G8zNX+MIvYjrlZRLP9GWKFTwzWRPI3+mVT\nnLQ8FdxwsNZ+Xeh+Q7Y1LweBGkC9FSRf0k+nKUUiiVuJOcqH5AI=\n=T5y2\n-----END PGP SIGNATURE-----", "payload": "tree 28de6835062b4d730016d8cd89bfdd6a2cc18b06\nparent 039709d34f40b6602853f1627a1bc22048e1b5d3\nauthor David Wood <david@davidtw.co> 1530385431 +0100\ncommitter David Wood <david@davidtw.co> 1530385431 +0100\n\nImproved non_exhaustive message.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e59aef385ef6a418f77560458012adc179ee64a", "html_url": "https://github.com/rust-lang/rust/commit/3e59aef385ef6a418f77560458012adc179ee64a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e59aef385ef6a418f77560458012adc179ee64a/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "039709d34f40b6602853f1627a1bc22048e1b5d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/039709d34f40b6602853f1627a1bc22048e1b5d3", "html_url": "https://github.com/rust-lang/rust/commit/039709d34f40b6602853f1627a1bc22048e1b5d3"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "a79dad0f8204ae1a567f10444be8047c953a5023", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3e59aef385ef6a418f77560458012adc179ee64a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e59aef385ef6a418f77560458012adc179ee64a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3e59aef385ef6a418f77560458012adc179ee64a", "patch": "@@ -2265,22 +2265,35 @@ fn document_stability(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item)\n \n fn document_non_exhaustive(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::Result {\n     if item.non_exhaustive {\n-        let name = item.type_();\n-        write!(w, r##\"\n-        <div class='non-exhaustive'>\n-            <div class='stab non-exhaustive'>\n-                <details>\n-                    <summary>\n-                        <span class=microscope>\ud83d\udd2c</span>\n-                        This {} is marked as non exhaustive.\n-                    </summary>\n-                    <p>\n-                    This {} will require a wildcard arm in any match statements or constructors.\n-                    </p>\n-                </details>\n-            </div>\n-        </div>\n-        \"##, name, name)?;\n+        write!(w, \"<div class='non-exhaustive'><div class='stab non-exhaustive'>\")?;\n+        write!(w, \"<details><summary><span class=microscope>\ud83d\udd2c</span>\")?;\n+\n+        if item.is_struct() {\n+            write!(w, \"This struct is marked as non exhaustive.\")?;\n+        } else if item.is_enum() {\n+            write!(w, \"This enum is marked as non exhaustive.\")?;\n+        } else {\n+            write!(w, \"This type is marked as non exhaustive.\")?;\n+        }\n+\n+        write!(w, \"</summary><p>\")?;\n+\n+        if item.is_struct() {\n+            write!(w, \"This struct is marked as non-exhaustive as additional fields may be \\\n+                       added in the future. This means that this struct cannot be constructed in \\\n+                       external crates using the traditional <code>Struct {{ .. }}</code> syntax;\n+                       cannot be matched against without a wildcard <code>..</code>; and \\\n+                       functional-record-updates do not work on this struct.\")?;\n+        } else if item.is_enum() {\n+            write!(w, \"This enum is marked as non-exhaustive, and additional variants may be \\\n+                       added in the future. When matching over values of this type, an extra \\\n+                       <code>_</code> arm must be added to account for future extensions.\")?;\n+        } else {\n+            write!(w, \"This type will require a wildcard arm in any match statements or \\\n+                       constructors.\")?;\n+        }\n+\n+        write!(w, \"</p></details></div></div>\")?;\n     }\n \n     Ok(())"}]}