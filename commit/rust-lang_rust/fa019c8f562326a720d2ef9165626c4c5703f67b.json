{"sha": "fa019c8f562326a720d2ef9165626c4c5703f67b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDE5YzhmNTYyMzI2YTcyMGQyZWY5MTY1NjI2YzRjNTcwM2Y2N2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-03T12:48:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-03T13:17:26Z"}, "message": "Document rust-project.json", "tree": {"sha": "dac38194fb66e0d563ffb52bbbc0e740f824cfd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dac38194fb66e0d563ffb52bbbc0e740f824cfd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa019c8f562326a720d2ef9165626c4c5703f67b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa019c8f562326a720d2ef9165626c4c5703f67b", "html_url": "https://github.com/rust-lang/rust/commit/fa019c8f562326a720d2ef9165626c4c5703f67b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa019c8f562326a720d2ef9165626c4c5703f67b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7d12d2f3ccfd1ef9946d1212e2455e5937c521", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7d12d2f3ccfd1ef9946d1212e2455e5937c521", "html_url": "https://github.com/rust-lang/rust/commit/2e7d12d2f3ccfd1ef9946d1212e2455e5937c521"}], "stats": {"total": 138, "additions": 118, "deletions": 20}, "files": [{"sha": "7ad941279506fc8d30ddc5196121019afb4b41ae", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa019c8f562326a720d2ef9165626c4c5703f67b/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa019c8f562326a720d2ef9165626c4c5703f67b/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=fa019c8f562326a720d2ef9165626c4c5703f67b", "patch": "@@ -32,6 +32,12 @@ pub enum ProjectWorkspace {\n     Json { project: JsonProject },\n }\n \n+impl From<JsonProject> for ProjectWorkspace {\n+    fn from(project: JsonProject) -> ProjectWorkspace {\n+        ProjectWorkspace::Json { project }\n+    }\n+}\n+\n /// `PackageRoot` describes a package root folder.\n /// Which may be an external dependency, or a member of\n /// the current workspace.\n@@ -144,11 +150,11 @@ impl ProjectManifest {\n \n impl ProjectWorkspace {\n     pub fn load(\n-        root: ProjectManifest,\n+        manifest: ProjectManifest,\n         cargo_features: &CargoConfig,\n         with_sysroot: bool,\n     ) -> Result<ProjectWorkspace> {\n-        let res = match root {\n+        let res = match manifest {\n             ProjectManifest::ProjectJson(project_json) => {\n                 let file = File::open(&project_json).with_context(|| {\n                     format!(\"Failed to open json file {}\", project_json.display())"}, {"sha": "0e5dc56fd744b57b2fa5af29ea953f0fa60034ec", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fa019c8f562326a720d2ef9165626c4c5703f67b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa019c8f562326a720d2ef9165626c4c5703f67b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=fa019c8f562326a720d2ef9165626c4c5703f67b", "patch": "@@ -261,6 +261,22 @@ impl Config {\n             self.lens = LensConfig::NO_LENS;\n         }\n \n+        if let Some(linked_projects) = get::<Vec<ManifestOrJsonProject>>(value, \"/linkedProjects\") {\n+            if !linked_projects.is_empty() {\n+                self.linked_projects.clear();\n+                for linked_project in linked_projects {\n+                    let linked_project = match linked_project {\n+                        ManifestOrJsonProject::Manifest(it) => match ProjectManifest::from_manifest_file(it) {\n+                            Ok(it) => it.into(),\n+                            Err(_) => continue,\n+                        }\n+                        ManifestOrJsonProject::JsonProject(it) => it.into(),\n+                    };\n+                    self.linked_projects.push(linked_project);\n+                }\n+            }\n+        }\n+\n         log::info!(\"Config::update() = {:#?}\", self);\n \n         fn get<'a, T: Deserialize<'a>>(value: &'a serde_json::Value, pointer: &str) -> Option<T> {\n@@ -324,3 +340,10 @@ impl Config {\n         }\n     }\n }\n+\n+#[derive(Deserialize)]\n+#[serde(untagged)]\n+enum ManifestOrJsonProject {\n+    Manifest(PathBuf),\n+    JsonProject(JsonProject),\n+}"}, {"sha": "1f8f6b978616babdf06dbfcc88f582143e9b69e0", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fa019c8f562326a720d2ef9165626c4c5703f67b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa019c8f562326a720d2ef9165626c4c5703f67b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=fa019c8f562326a720d2ef9165626c4c5703f67b", "patch": "@@ -105,24 +105,23 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n                 .linked_projects\n                 .iter()\n                 .filter_map(|project| match project {\n-                    LinkedProject::ProjectManifest(it) => Some(it),\n-                    LinkedProject::JsonProject(_) => None,\n-                })\n-                .filter_map(|root| {\n-                    ra_project_model::ProjectWorkspace::load(\n-                        root.clone(),\n-                        &config.cargo,\n-                        config.with_sysroot,\n-                    )\n-                    .map_err(|err| {\n-                        log::error!(\"failed to load workspace: {:#}\", err);\n-                        show_message(\n-                            lsp_types::MessageType::Error,\n-                            format!(\"rust-analyzer failed to load workspace: {:#}\", err),\n-                            &connection.sender,\n-                        );\n-                    })\n-                    .ok()\n+                    LinkedProject::ProjectManifest(manifest) => {\n+                        ra_project_model::ProjectWorkspace::load(\n+                            manifest.clone(),\n+                            &config.cargo,\n+                            config.with_sysroot,\n+                        )\n+                        .map_err(|err| {\n+                            log::error!(\"failed to load workspace: {:#}\", err);\n+                            show_message(\n+                                lsp_types::MessageType::Error,\n+                                format!(\"rust-analyzer failed to load workspace: {:#}\", err),\n+                                &connection.sender,\n+                            );\n+                        })\n+                        .ok()\n+                    }\n+                    LinkedProject::JsonProject(it) => Some(it.clone().into()),\n                 })\n                 .collect::<Vec<_>>()\n         };"}, {"sha": "ea714f49addf05145defc3a20bfe303c66f1fd5c", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/fa019c8f562326a720d2ef9165626c4c5703f67b/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/fa019c8f562326a720d2ef9165626c4c5703f67b/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=fa019c8f562326a720d2ef9165626c4c5703f67b", "patch": "@@ -269,6 +269,57 @@ Gnome Builder currently has support for RLS, and there's no way to configure the\n 1. Rename, symlink or copy the `rust-analyzer` binary to `rls` and place it somewhere Builder can find (in `PATH`, or under `~/.cargo/bin`).\n 2. Enable the Rust Builder plugin.\n \n+== Non-Cargo Based Projects\n+\n+rust-analyzer does not require Cargo.\n+However, if you use some other build system, you'll have to describe the structure of your project for rust-analyzer in the `rust-project.json` format:\n+\n+[source,TypeScript]\n+----\n+interface JsonProject {\n+   /// The set of paths containing the crates for this project.\n+   /// Any `Crate` must be nested inside some `root`.\n+   roots: string[];\n+   /// The set of crates comprising the current project.\n+   /// Must include all transitive dependencies as well as sysroot crate (libstd, libcore and such).\n+   crates: Crate[];\n+}\n+\n+interface Crate {\n+    /// Path to the root module of the crate.\n+    root_module: string;\n+    /// Edition of the crate.\n+    edition: \"2015\" | \"2018\";\n+    /// Dependencies\n+    deps: Dep[];\n+    /// The set of cfgs activated for a given crate, like `[\"unix\", \"feature=foo\", \"feature=bar\"]`.\n+    cfg: string[];\n+\n+    /// value of the OUT_DIR env variable.\n+    out_dir?: string;\n+    /// For proc-macro crates, path to compiles proc-macro (.so file).\n+    proc_macro_dylib_path?: string;\n+}\n+\n+interface Dep {\n+    /// Index of a crate in the `crates` array.\n+    crate: number,\n+    /// Name as should appear in the (implicit) `extern crate name` declaration.\n+    name: string,\n+}\n+----\n+\n+This format is provisional and subject to change.\n+Specifically, the `roots` setup will be different eventually.\n+\n+There are tree ways to feed `rust-project.json` to rust-analyzer:\n+\n+* Place `rust-project.json` file at the root of the project, and rust-anlayzer will discover it.\n+* Specify `\"rust-analyzer.linkedProjects\": [ \"path/to/rust-project.json\" ]` in the settings (and make sure that your LSP client sends settings as a part of initialize request).\n+* Specify `\"rust-analyzer.linkedProjects\": [ { \"roots\": [...], \"crates\": [...] }]` inline.\n+\n+See https://github.com/rust-analyzer/rust-project.json-example for a small example.\n+\n == Features\n \n include::./generated_features.adoc[]"}, {"sha": "30ab7ba4a9f831fcd78b80cd0cae68047eb25b71", "filename": "editors/code/package.json", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fa019c8f562326a720d2ef9165626c4c5703f67b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/fa019c8f562326a720d2ef9165626c4c5703f67b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=fa019c8f562326a720d2ef9165626c4c5703f67b", "patch": "@@ -475,6 +475,25 @@\n                     \"markdownDescription\": \"Whether to show Implementations lens. Only applies when `#rust-analyzer.lens.enable#` is set.\",\n                     \"type\": \"boolean\",\n                     \"default\": true\n+                },\n+                \"rust-analyzer.linkedProjects\": {\n+                    \"markdownDescription\": [\n+                        \"Disable project auto-discovery in favor of explicitly specified set of projects.\",\n+                        \"Elements must be paths pointing to Cargo.toml, rust-project.json, or JSON objects in rust-project.json format\"\n+                    ],\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": [\n+                            \"string\",\n+                            \"object\"\n+                        ]\n+                    },\n+                    \"default\": null\n+                },\n+                \"rust-analyzer.withSysroot\": {\n+                    \"markdownDescription\": \"Internal config for debugging, disables loading of sysroot crates\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n                 }\n             }\n         },"}]}