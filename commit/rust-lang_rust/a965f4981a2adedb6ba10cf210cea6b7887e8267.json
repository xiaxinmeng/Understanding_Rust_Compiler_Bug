{"sha": "a965f4981a2adedb6ba10cf210cea6b7887e8267", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NjVmNDk4MWEyYWRlZGI2YmExMGNmMjEwY2VhNmI3ODg3ZTgyNjc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-07T11:53:04Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-07T12:36:57Z"}, "message": "syntax: correct the modifications to deriving(Ord) so that it works.", "tree": {"sha": "61abd2d43f9e20aab3f676caf2a9e7bc953a3421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61abd2d43f9e20aab3f676caf2a9e7bc953a3421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a965f4981a2adedb6ba10cf210cea6b7887e8267", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a965f4981a2adedb6ba10cf210cea6b7887e8267", "html_url": "https://github.com/rust-lang/rust/commit/a965f4981a2adedb6ba10cf210cea6b7887e8267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a965f4981a2adedb6ba10cf210cea6b7887e8267/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebf7281b7b16d5083d1a6d114ae49e6f878c72d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf7281b7b16d5083d1a6d114ae49e6f878c72d3", "html_url": "https://github.com/rust-lang/rust/commit/ebf7281b7b16d5083d1a6d114ae49e6f878c72d3"}], "stats": {"total": 43, "additions": 13, "deletions": 30}, "files": [{"sha": "c60b589dfc3882eb9c1576824983cae8ba0d6b12", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a965f4981a2adedb6ba10cf210cea6b7887e8267/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a965f4981a2adedb6ba10cf210cea6b7887e8267/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=a965f4981a2adedb6ba10cf210cea6b7887e8267", "patch": "@@ -22,15 +22,15 @@ pub fn expand_deriving_ord(cx: @ExtCtxt,\n                            mitem: @meta_item,\n                            in_items: ~[@item]) -> ~[@item] {\n     macro_rules! md (\n-        ($name:expr, $func:expr, $op:expr) => {\n+        ($name:expr, $op:expr, $equal:expr) => {\n             MethodDef {\n                 name: $name,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[borrowed_self()],\n                 ret_ty: Literal(Path::new(~[\"bool\"])),\n                 const_nonmatching: false,\n-                combine_substructure: |cx, span, substr| $func($op, cx, span, substr)\n+                combine_substructure: |cx, span, substr| cs_op($op, $equal, cx, span, substr)\n             }\n         }\n     );\n@@ -40,17 +40,17 @@ pub fn expand_deriving_ord(cx: @ExtCtxt,\n         additional_bounds: ~[],\n         generics: LifetimeBounds::empty(),\n         methods: ~[\n-            md!(\"lt\", cs_strict, true),\n-            md!(\"le\", cs_nonstrict, true), // inverse operation\n-            md!(\"gt\", cs_strict, false),\n-            md!(\"ge\", cs_nonstrict, false)\n+            md!(\"lt\", true, false),\n+            md!(\"le\", true, true),\n+            md!(\"gt\", false, false),\n+            md!(\"ge\", false, true)\n         ]\n     };\n     trait_def.expand(cx, span, mitem, in_items)\n }\n \n /// Strict inequality.\n-fn cs_strict(less: bool, cx: @ExtCtxt, span: span, substr: &Substructure) -> @expr {\n+fn cs_op(less: bool, equal: bool, cx: @ExtCtxt, span: span, substr: &Substructure) -> @expr {\n     let op = if less {ast::lt} else {ast::gt};\n     cs_fold(\n         false, // need foldr,\n@@ -81,16 +81,15 @@ fn cs_strict(less: bool, cx: @ExtCtxt, span: span, substr: &Substructure) -> @ex\n                                      cx.expr_deref(span, self_f),\n                                      cx.expr_deref(span, other_f));\n \n-            let not_cmp = cx.expr_binary(span, op,\n-                                         cx.expr_deref(span, other_f),\n-                                         cx.expr_deref(span, self_f));\n-            let not_cmp = cx.expr_unary(span, ast::not, not_cmp);\n+            let not_cmp = cx.expr_unary(span, ast::not,\n+                                        cx.expr_binary(span, op,\n+                                                       cx.expr_deref(span, other_f),\n+                                                       cx.expr_deref(span, self_f)));\n \n-            let and = cx.expr_binary(span, ast::and,\n-                                     not_cmp, subexpr);\n+            let and = cx.expr_binary(span, ast::and, not_cmp, subexpr);\n             cx.expr_binary(span, ast::or, cmp, and)\n         },\n-        cx.expr_bool(span, false),\n+        cx.expr_bool(span, equal),\n         |cx, span, args, _| {\n             // nonmatching enums, order by the order the variants are\n             // written\n@@ -108,19 +107,3 @@ fn cs_strict(less: bool, cx: @ExtCtxt, span: span, substr: &Substructure) -> @ex\n         },\n         cx, span, substr)\n }\n-\n-fn cs_nonstrict(less: bool, cx: @ExtCtxt, span: span, substr: &Substructure) -> @expr {\n-    // Example: ge becomes !(*self < *other), le becomes !(*self > *other)\n-\n-    let inverse_op = if less {ast::gt} else {ast::lt};\n-    match substr.self_args {\n-        [self_, other] => {\n-            let inverse_cmp = cx.expr_binary(span, inverse_op,\n-                                             cx.expr_deref(span, self_),\n-                                             cx.expr_deref(span, other));\n-\n-            cx.expr_unary(span, ast::not, inverse_cmp)\n-        }\n-        _ => cx.span_bug(span, \"Not exactly 2 arguments in `deriving(Ord)`\")\n-    }\n-}"}]}