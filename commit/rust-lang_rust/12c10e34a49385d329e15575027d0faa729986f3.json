{"sha": "12c10e34a49385d329e15575027d0faa729986f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYzEwZTM0YTQ5Mzg1ZDMyOWUxNTU3NTAyN2QwZmFhNzI5OTg2ZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-11T23:52:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-11T23:52:03Z"}, "message": "Auto merge of #73951 - pickfire:liballoc-intoiter, r=Mark-Simulacrum\n\nLiballoc intoiter refactor", "tree": {"sha": "fff6501faa1df7a4c0509f930d4ea3340c8f695e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fff6501faa1df7a4c0509f930d4ea3340c8f695e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12c10e34a49385d329e15575027d0faa729986f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12c10e34a49385d329e15575027d0faa729986f3", "html_url": "https://github.com/rust-lang/rust/commit/12c10e34a49385d329e15575027d0faa729986f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12c10e34a49385d329e15575027d0faa729986f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99111606fcda4fdb0646e4f7ee0f6cbcb76fb84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/99111606fcda4fdb0646e4f7ee0f6cbcb76fb84a", "html_url": "https://github.com/rust-lang/rust/commit/99111606fcda4fdb0646e4f7ee0f6cbcb76fb84a"}, {"sha": "50315238aa8ffae08f29b260aa36511e03b5e070", "url": "https://api.github.com/repos/rust-lang/rust/commits/50315238aa8ffae08f29b260aa36511e03b5e070", "html_url": "https://github.com/rust-lang/rust/commit/50315238aa8ffae08f29b260aa36511e03b5e070"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "baa6c0919defe01c886b5366fc4da9a10893faf0", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/12c10e34a49385d329e15575027d0faa729986f3/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c10e34a49385d329e15575027d0faa729986f3/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=12c10e34a49385d329e15575027d0faa729986f3", "patch": "@@ -2882,25 +2882,21 @@ impl<T> Iterator for IntoIter<T> {\n \n     #[inline]\n     fn next(&mut self) -> Option<T> {\n-        unsafe {\n-            if self.ptr as *const _ == self.end {\n-                None\n-            } else {\n-                if mem::size_of::<T>() == 0 {\n-                    // purposefully don't use 'ptr.offset' because for\n-                    // vectors with 0-size elements this would return the\n-                    // same pointer.\n-                    self.ptr = arith_offset(self.ptr as *const i8, 1) as *mut T;\n-\n-                    // Make up a value of this ZST.\n-                    Some(mem::zeroed())\n-                } else {\n-                    let old = self.ptr;\n-                    self.ptr = self.ptr.offset(1);\n-\n-                    Some(ptr::read(old))\n-                }\n-            }\n+        if self.ptr as *const _ == self.end {\n+            None\n+        } else if mem::size_of::<T>() == 0 {\n+            // purposefully don't use 'ptr.offset' because for\n+            // vectors with 0-size elements this would return the\n+            // same pointer.\n+            self.ptr = unsafe { arith_offset(self.ptr as *const i8, 1) as *mut T };\n+\n+            // Make up a value of this ZST.\n+            Some(unsafe { mem::zeroed() })\n+        } else {\n+            let old = self.ptr;\n+            self.ptr = unsafe { self.ptr.offset(1) };\n+\n+            Some(unsafe { ptr::read(old) })\n         }\n     }\n \n@@ -2935,22 +2931,18 @@ impl<T> Iterator for IntoIter<T> {\n impl<T> DoubleEndedIterator for IntoIter<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n-        unsafe {\n-            if self.end == self.ptr {\n-                None\n-            } else {\n-                if mem::size_of::<T>() == 0 {\n-                    // See above for why 'ptr.offset' isn't used\n-                    self.end = arith_offset(self.end as *const i8, -1) as *mut T;\n+        if self.end == self.ptr {\n+            None\n+        } else if mem::size_of::<T>() == 0 {\n+            // See above for why 'ptr.offset' isn't used\n+            self.end = unsafe { arith_offset(self.end as *const i8, -1) as *mut T };\n \n-                    // Make up a value of this ZST.\n-                    Some(mem::zeroed())\n-                } else {\n-                    self.end = self.end.offset(-1);\n+            // Make up a value of this ZST.\n+            Some(unsafe { mem::zeroed() })\n+        } else {\n+            self.end = unsafe { self.end.offset(-1) };\n \n-                    Some(ptr::read(self.end))\n-                }\n-            }\n+            Some(unsafe { ptr::read(self.end) })\n         }\n     }\n }"}]}