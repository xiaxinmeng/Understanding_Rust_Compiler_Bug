{"sha": "04c590b7ef3f864637fa3808d43089631c4cc3db", "node_id": "C_kwDOAAsO6NoAKDA0YzU5MGI3ZWYzZjg2NDYzN2ZhMzgwOGQ0MzA4OTYzMWM0Y2MzZGI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-16T22:15:41Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-16T22:15:41Z"}, "message": "Be more precise when suggesting removal of parens on unit adt ctor", "tree": {"sha": "916b08aaf48ff54a0d966ecea72335e2cc78ec46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/916b08aaf48ff54a0d966ecea72335e2cc78ec46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04c590b7ef3f864637fa3808d43089631c4cc3db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04c590b7ef3f864637fa3808d43089631c4cc3db", "html_url": "https://github.com/rust-lang/rust/commit/04c590b7ef3f864637fa3808d43089631c4cc3db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04c590b7ef3f864637fa3808d43089631c4cc3db/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7210e46dc69a4b197a313d093fe145722c248b7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7210e46dc69a4b197a313d093fe145722c248b7d", "html_url": "https://github.com/rust-lang/rust/commit/7210e46dc69a4b197a313d093fe145722c248b7d"}], "stats": {"total": 125, "additions": 86, "deletions": 39}, "files": [{"sha": "7996fe5f363fa75738ef2ccea7be24fff08f7ca4", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -4,7 +4,7 @@ use crate::type_error_struct;\n \n use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n use rustc_hir as hir;\n-use rustc_hir::def::{Namespace, Res};\n+use rustc_hir::def::{self, Namespace, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_infer::{\n     infer,\n@@ -390,17 +390,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (fn_sig, Some(def_id))\n             }\n             ty::FnPtr(sig) => (sig, None),\n-            ref t => {\n+            _ => {\n                 let mut unit_variant = None;\n-                let mut removal_span = call_expr.span;\n-                if let ty::Adt(adt_def, ..) = t\n-                    && adt_def.is_enum()\n-                    && let hir::ExprKind::Call(expr, _) = call_expr.kind\n+                if let hir::ExprKind::Path(qpath) = &callee_expr.kind\n+                    && let Res::Def(def::DefKind::Ctor(kind, def::CtorKind::Const), _)\n+                        = self.typeck_results.borrow().qpath_res(qpath, callee_expr.hir_id)\n+                    // Only suggest removing parens if there are no arguments\n+                    && arg_exprs.is_empty()\n+                    && let Ok(path) = self.tcx.sess.source_map().span_to_snippet(callee_expr.span)\n                 {\n-                    removal_span =\n-                        expr.span.shrink_to_hi().to(call_expr.span.shrink_to_hi());\n+                    let descr = match kind {\n+                        def::CtorOf::Struct => \"struct\",\n+                        def::CtorOf::Variant => \"enum variant\",\n+                    };\n+                    let removal_span =\n+                        callee_expr.span.shrink_to_hi().to(call_expr.span.shrink_to_hi());\n                     unit_variant =\n-                        self.tcx.sess.source_map().span_to_snippet(expr.span).ok();\n+                        Some((removal_span, descr, path));\n                 }\n \n                 let callee_ty = self.resolve_vars_if_possible(callee_ty);\n@@ -410,8 +416,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     callee_ty,\n                     E0618,\n                     \"expected function, found {}\",\n-                    match unit_variant {\n-                        Some(ref path) => format!(\"enum variant `{path}`\"),\n+                    match &unit_variant {\n+                        Some((_, kind, path)) => format!(\"{kind} `{path}`\"),\n                         None => format!(\"`{callee_ty}`\"),\n                     }\n                 );\n@@ -423,11 +429,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     callee_expr.span,\n                 );\n \n-                if let Some(ref path) = unit_variant {\n+                if let Some((removal_span, kind, path)) = &unit_variant {\n                     err.span_suggestion_verbose(\n-                        removal_span,\n+                        *removal_span,\n                         &format!(\n-                            \"`{path}` is a unit variant, you need to write it without the parentheses\",\n+                            \"`{path}` is a unit {kind}, and does not take parentheses to be constructed\",\n                         ),\n                         \"\",\n                         Applicability::MachineApplicable,\n@@ -470,7 +476,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let Some(span) = self.tcx.hir().res_span(def) {\n                     let callee_ty = callee_ty.to_string();\n                     let label = match (unit_variant, inner_callee_path) {\n-                        (Some(path), _) => Some(format!(\"`{path}` defined here\")),\n+                        (Some((_, kind, path)), _) => Some(format!(\"{kind} `{path}` defined here\")),\n                         (_, Some(hir::QPath::Resolved(_, path))) => self\n                             .tcx\n                             .sess"}, {"sha": "8f3688a2a0764e1703371c2ac507128565df8549", "filename": "src/test/ui/empty/empty-struct-unit-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.rs?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -12,10 +12,10 @@ enum E {\n }\n \n fn main() {\n-    let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n+    let e2 = Empty2(); //~ ERROR expected function, found struct `Empty2`\n     let e4 = E::Empty4();\n     //~^ ERROR expected function, found enum variant `E::Empty4` [E0618]\n-    let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n+    let xe2 = XEmpty2(); //~ ERROR expected function, found struct `XEmpty2`\n     let xe4 = XE::XEmpty4();\n     //~^ ERROR expected function, found enum variant `XE::XEmpty4` [E0618]\n }"}, {"sha": "e97209527fe34fdbd3680258406843adf7c89640", "filename": "src/test/ui/empty/empty-struct-unit-expr.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -1,38 +1,50 @@\n-error[E0618]: expected function, found `Empty2`\n+error[E0618]: expected function, found struct `Empty2`\n   --> $DIR/empty-struct-unit-expr.rs:15:14\n    |\n LL | struct Empty2;\n-   | ------------- `Empty2` defined here\n+   | ------------- struct `Empty2` defined here\n ...\n LL |     let e2 = Empty2();\n    |              ^^^^^^--\n    |              |\n    |              call expression requires function\n+   |\n+help: `Empty2` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let e2 = Empty2();\n+LL +     let e2 = Empty2;\n+   |\n \n error[E0618]: expected function, found enum variant `E::Empty4`\n   --> $DIR/empty-struct-unit-expr.rs:16:14\n    |\n LL |     Empty4\n-   |     ------ `E::Empty4` defined here\n+   |     ------ enum variant `E::Empty4` defined here\n ...\n LL |     let e4 = E::Empty4();\n    |              ^^^^^^^^^--\n    |              |\n    |              call expression requires function\n    |\n-help: `E::Empty4` is a unit variant, you need to write it without the parentheses\n+help: `E::Empty4` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let e4 = E::Empty4();\n LL +     let e4 = E::Empty4;\n    |\n \n-error[E0618]: expected function, found `empty_struct::XEmpty2`\n+error[E0618]: expected function, found struct `XEmpty2`\n   --> $DIR/empty-struct-unit-expr.rs:18:15\n    |\n LL |     let xe2 = XEmpty2();\n    |               ^^^^^^^--\n    |               |\n    |               call expression requires function\n+   |\n+help: `XEmpty2` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let xe2 = XEmpty2();\n+LL +     let xe2 = XEmpty2;\n+   |\n \n error[E0618]: expected function, found enum variant `XE::XEmpty4`\n   --> $DIR/empty-struct-unit-expr.rs:19:15\n@@ -42,7 +54,7 @@ LL |     let xe4 = XE::XEmpty4();\n    |               |\n    |               call expression requires function\n    |\n-help: `XE::XEmpty4` is a unit variant, you need to write it without the parentheses\n+help: `XE::XEmpty4` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let xe4 = XE::XEmpty4();\n LL +     let xe4 = XE::XEmpty4;"}, {"sha": "793ec02a86fc684b969e6c3010e082cee68af486", "filename": "src/test/ui/error-codes/E0618.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -2,14 +2,14 @@ error[E0618]: expected function, found enum variant `X::Entry`\n   --> $DIR/E0618.rs:6:5\n    |\n LL |     Entry,\n-   |     ----- `X::Entry` defined here\n+   |     ----- enum variant `X::Entry` defined here\n ...\n LL |     X::Entry();\n    |     ^^^^^^^^--\n    |     |\n    |     call expression requires function\n    |\n-help: `X::Entry` is a unit variant, you need to write it without the parentheses\n+help: `X::Entry` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     X::Entry();\n LL +     X::Entry;"}, {"sha": "3aa39bb7388fafb4c5c2954cec476c1a19fd8692", "filename": "src/test/ui/issues/issue-20714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fissues%2Fissue-20714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fissues%2Fissue-20714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20714.rs?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -1,5 +1,5 @@\n struct G;\n \n fn main() {\n-    let g = G(); //~ ERROR: expected function, found `G`\n+    let g = G(); //~ ERROR: expected function, found struct `G`\n }"}, {"sha": "a3447aa6845b9d166032ca13d2b2448160414b5d", "filename": "src/test/ui/issues/issue-20714.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20714.stderr?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -1,13 +1,19 @@\n-error[E0618]: expected function, found `G`\n+error[E0618]: expected function, found struct `G`\n   --> $DIR/issue-20714.rs:4:13\n    |\n LL | struct G;\n-   | -------- `G` defined here\n+   | -------- struct `G` defined here\n ...\n LL |     let g = G();\n    |             ^--\n    |             |\n    |             call expression requires function\n+   |\n+help: `G` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let g = G();\n+LL +     let g = G;\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "bfa03c5e42f8db30dfd6333ae1f5aa017708fb71", "filename": "src/test/ui/issues/issue-21701.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fissues%2Fissue-21701.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fissues%2Fissue-21701.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21701.rs?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -7,7 +7,7 @@ struct Bar;\n \n pub fn some_func() {\n     let f = Bar();\n-//~^ ERROR: expected function, found `Bar`\n+//~^ ERROR: expected function, found struct `Bar`\n }\n \n fn main() {"}, {"sha": "9f1fe7dde735a22a2853cfb3568bcc3d473263d0", "filename": "src/test/ui/issues/issue-21701.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21701.stderr?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -8,16 +8,22 @@ LL |     let y = t();\n    |             |\n    |             call expression requires function\n \n-error[E0618]: expected function, found `Bar`\n+error[E0618]: expected function, found struct `Bar`\n   --> $DIR/issue-21701.rs:9:13\n    |\n LL | struct Bar;\n-   | ---------- `Bar` defined here\n+   | ---------- struct `Bar` defined here\n ...\n LL |     let f = Bar();\n    |             ^^^--\n    |             |\n    |             call expression requires function\n+   |\n+help: `Bar` is a unit struct, and does not take parentheses to be constructed\n+   |\n+LL -     let f = Bar();\n+LL +     let f = Bar;\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f885ac2151d6126e520a9d498d971b658c9a153c", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -336,14 +336,14 @@ error[E0618]: expected function, found enum variant `Z::Unit`\n   --> $DIR/privacy-enum-ctor.rs:31:17\n    |\n LL |             Unit,\n-   |             ---- `Z::Unit` defined here\n+   |             ---- enum variant `Z::Unit` defined here\n ...\n LL |         let _ = Z::Unit();\n    |                 ^^^^^^^--\n    |                 |\n    |                 call expression requires function\n    |\n-help: `Z::Unit` is a unit variant, you need to write it without the parentheses\n+help: `Z::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -         let _ = Z::Unit();\n LL +         let _ = Z::Unit;\n@@ -371,14 +371,14 @@ error[E0618]: expected function, found enum variant `m::E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:47:16\n    |\n LL |         Unit,\n-   |         ---- `m::E::Unit` defined here\n+   |         ---- enum variant `m::E::Unit` defined here\n ...\n LL |     let _: E = m::E::Unit();\n    |                ^^^^^^^^^^--\n    |                |\n    |                call expression requires function\n    |\n-help: `m::E::Unit` is a unit variant, you need to write it without the parentheses\n+help: `m::E::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let _: E = m::E::Unit();\n LL +     let _: E = m::E::Unit;\n@@ -406,14 +406,14 @@ error[E0618]: expected function, found enum variant `E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:55:16\n    |\n LL |         Unit,\n-   |         ---- `E::Unit` defined here\n+   |         ---- enum variant `E::Unit` defined here\n ...\n LL |     let _: E = E::Unit();\n    |                ^^^^^^^--\n    |                |\n    |                call expression requires function\n    |\n-help: `E::Unit` is a unit variant, you need to write it without the parentheses\n+help: `E::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     let _: E = E::Unit();\n LL +     let _: E = E::Unit;"}, {"sha": "2115a42662e1af716dd68e55680a34c156848765", "filename": "src/test/ui/suggestions/issue-99240.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.rs?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -0,0 +1,6 @@\n+fn fmt(it: &(std::cell::Cell<Option<impl FnOnce()>>,)) {\n+    (it.0.take())()\n+    //~^ ERROR expected function\n+}\n+\n+fn main() {}"}, {"sha": "f1bea688b4ed5be3aded1afb79d1cba2fd63fe4d", "filename": "src/test/ui/suggestions/issue-99240.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-99240.stderr?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -0,0 +1,11 @@\n+error[E0618]: expected function, found `Option<impl FnOnce()>`\n+  --> $DIR/issue-99240.rs:2:5\n+   |\n+LL |     (it.0.take())()\n+   |     ^^^^^^^^^^^^^--\n+   |     |\n+   |     call expression requires function\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0618`."}, {"sha": "8f3180a8639d876f3a0f18c0b446638031c449e6", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04c590b7ef3f864637fa3808d43089631c4cc3db/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=04c590b7ef3f864637fa3808d43089631c4cc3db", "patch": "@@ -20,14 +20,14 @@ error[E0618]: expected function, found enum variant `Alias::Unit`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:15:5\n    |\n LL | enum Enum { Braced {}, Unit, Tuple() }\n-   |                        ---- `Alias::Unit` defined here\n+   |                        ---- enum variant `Alias::Unit` defined here\n ...\n LL |     Alias::Unit();\n    |     ^^^^^^^^^^^--\n    |     |\n    |     call expression requires function\n    |\n-help: `Alias::Unit` is a unit variant, you need to write it without the parentheses\n+help: `Alias::Unit` is a unit enum variant, and does not take parentheses to be constructed\n    |\n LL -     Alias::Unit();\n LL +     Alias::Unit;"}]}