{"sha": "9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZDJhYzc0MjhhZmE0ZjQxNGYzMmI4YjQ4NzZjYTgxN2VlODVmMTY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-14T08:43:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-14T17:15:07Z"}, "message": "Make TLS keys actually take up space\n\nIf the TLS key is 0-sized, then the linux linker is apparently smart enough to\nput everything at the same pointer. OSX on the other hand, will reserve some\nspace for all of them. To get around this, the TLS key now actuall consumes\nspace to ensure that it gets a unique pointer", "tree": {"sha": "d95eb9acc27f980f2365330b3aa9566e8eec2010", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d95eb9acc27f980f2365330b3aa9566e8eec2010"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "html_url": "https://github.com/rust-lang/rust/commit/9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3211fa1f1f24268b91b0c89cb312e70499d41f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3211fa1f1f24268b91b0c89cb312e70499d41f3", "html_url": "https://github.com/rust-lang/rust/commit/e3211fa1f1f24268b91b0c89cb312e70499d41f3"}], "stats": {"total": 151, "additions": 81, "deletions": 70}, "files": [{"sha": "59801c945b626d9eca336a417ef2fb168320340a", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -69,7 +69,7 @@ pub unsafe fn read(prompt: &str) -> Option<~str> {\n pub type CompletionCb = @fn(~str, @fn(~str));\n \n #[cfg(not(stage0))]\n-static complete_key: local_data::Key<@CompletionCb> = &[];\n+static complete_key: local_data::Key<@CompletionCb> = &local_data::Key;\n #[cfg(stage0)]\n fn complete_key(_: @CompletionCb) {}\n "}, {"sha": "aeed2d842c13145b21064a184dcd251ee7e99788", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -105,6 +105,7 @@ pub mod jit {\n     use metadata::cstore;\n \n     use std::cast;\n+    #[cfg(not(stage0))]\n     use std::local_data;\n     use std::unstable::intrinsics;\n \n@@ -202,18 +203,19 @@ pub mod jit {\n \n     // The stage1 compiler won't work, but that doesn't really matter. TLS\n     // changed only very recently to allow storage of owned values.\n-    fn engine_key(_: ~Engine) {}\n+    #[cfg(not(stage0))]\n+    static engine_key: local_data::Key<~Engine> = &local_data::Key;\n \n     #[cfg(not(stage0))]\n     fn set_engine(engine: ~Engine) {\n-        unsafe { local_data::set(engine_key, engine) }\n+        local_data::set(engine_key, engine)\n     }\n     #[cfg(stage0)]\n     fn set_engine(_: ~Engine) {}\n \n     #[cfg(not(stage0))]\n     pub fn consume_engine() -> Option<~Engine> {\n-        unsafe { local_data::pop(engine_key) }\n+        local_data::pop(engine_key)\n     }\n     #[cfg(stage0)]\n     pub fn consume_engine() -> Option<~Engine> { None }"}, {"sha": "7182f7ff8b7d4b7f5d9c9f9119a135aa5f401ba1", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -88,7 +88,7 @@ use syntax::abi::{X86, X86_64, Arm, Mips};\n pub use middle::trans::context::task_llcx;\n \n #[cfg(not(stage0))]\n-static task_local_insn_key: local_data::Key<@~[&'static str]> = &[];\n+static task_local_insn_key: local_data::Key<@~[&'static str]> = &local_data::Key;\n #[cfg(stage0)]\n fn task_local_insn_key(_: @~[&'static str]) {}\n "}, {"sha": "ffebb87d5cf043d4f7763ff1ae3925bc94535631", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -239,7 +239,7 @@ impl Drop for CrateContext {\n #[cfg(stage0)]\n fn task_local_llcx_key(_v: @ContextRef) {}\n #[cfg(not(stage0))]\n-static task_local_llcx_key: local_data::Key<@ContextRef> = &[];\n+static task_local_llcx_key: local_data::Key<@ContextRef> = &local_data::Key;\n \n pub fn task_llcx() -> ContextRef {\n     let opt = local_data::get(task_local_llcx_key, |k| k.map(|&k| *k));"}, {"sha": "9031a001eca6025baaee687789bd0f03b2ce1cdb", "filename": "src/librusti/program.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibrusti%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibrusti%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fprogram.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::cast;\n use std::hashmap::HashMap;\n use std::local_data;\n-use std::vec;\n \n use syntax::ast;\n use syntax::parse::token;\n@@ -57,7 +57,7 @@ struct LocalVariable {\n }\n \n type LocalCache = @mut HashMap<~str, @~[u8]>;\n-static tls_key: local_data::Key<LocalCache> = &[];\n+static tls_key: local_data::Key<LocalCache> = &local_data::Key;\n \n impl Program {\n     pub fn new() -> Program {\n@@ -130,16 +130,14 @@ impl Program {\n             fn main() {\n         \");\n \n-        let key: *LocalCache = vec::raw::to_ptr(tls_key);\n+        let key: uint= unsafe { cast::transmute(tls_key) };\n         // First, get a handle to the tls map which stores all the local\n         // variables. This works by totally legitimately using the 'code'\n         // pointer of the 'tls_key' function as a uint, and then casting it back\n         // up to a function\n         code.push_str(fmt!(\"\n             let __tls_map: @mut ::std::hashmap::HashMap<~str, @~[u8]> = unsafe {\n-                let key = ::std::vec::raw::SliceRepr{ data: %? as *u8,\n-                                                      len: 0 };\n-                let key = ::std::cast::transmute(key);\n+                let key = ::std::cast::transmute(%u);\n                 ::std::local_data::get(key, |k| k.map(|&x| *x)).unwrap()\n             };\\n\", key as uint));\n "}, {"sha": "be170cce07e544aaeceeef6de60788e8405670d9", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -13,18 +13,19 @@\n Task local data management\n \n Allows storing arbitrary types inside task-local-storage (TLS), to be accessed\n-anywhere within a task, keyed by a global slice of the appropriate type.\n-Useful for dynamic variables, singletons, and interfacing with foreign code\n-with bad callback interfaces.\n+anywhere within a task, keyed by a global pointer parameterized over the type of\n+the TLS slot.  Useful for dynamic variables, singletons, and interfacing with\n+foreign code with bad callback interfaces.\n \n-To use, declare a static slice of the type you wish to store. The initialization\n-should be `&[]`. This is then the key to what you wish to store.\n+To use, declare a static variable of the type you wish to store. The\n+initialization should be `&local_data::Key`. This is then the key to what you\n+wish to store.\n \n ~~~{.rust}\n use std::local_data;\n \n-static key_int: local_data::Key<int> = &[];\n-static key_vector: local_data::Key<~[int]> = &[];\n+static key_int: local_data::Key<int> = &local_data::Key;\n+static key_vector: local_data::Key<~[int]> = &local_data::Key;\n \n local_data::set(key_int, 3);\n local_data::get(key_int, |opt| assert_eq!(opt, Some(&3)));\n@@ -45,24 +46,23 @@ use task::local_data_priv::{local_get, local_pop, local_set, Handle};\n #[cfg(test)] use task;\n \n /**\n- * Indexes a task-local data slot. The function's code pointer is used for\n- * comparison. Recommended use is to write an empty function for each desired\n- * task-local data slot (and use class destructors, not code inside the\n- * function, if specific teardown is needed). DO NOT use multiple\n- * instantiations of a single polymorphic function to index data of different\n- * types; arbitrary type coercion is possible this way.\n+ * Indexes a task-local data slot. This pointer is used for comparison to\n+ * differentiate keys from one another. The actual type `T` is not used anywhere\n+ * as a member of this type, except that it is parameterized with it to define\n+ * the type of each key's value.\n  *\n- * One other exception is that this global state can be used in a destructor\n- * context to create a circular @-box reference, which will crash during task\n- * failure (see issue #3039).\n- *\n- * These two cases aside, the interface is safe.\n+ * The value of each Key is of the singleton enum KeyValue. These also have the\n+ * same name as `Key` and their purpose is to take up space in the programs data\n+ * sections to ensure that each value of the `Key` type points to a unique\n+ * location.\n  */\n #[cfg(not(stage0))]\n-pub type Key<T> = &'static [T];\n+pub type Key<T> = &'static KeyValue<T>;\n #[cfg(stage0)]\n pub type Key<'self,T> = &'self fn:Copy(v: T);\n \n+pub enum KeyValue<T> { Key }\n+\n /**\n  * Remove a task-local data value from the table, returning the\n  * reference that was originally created to insert it.\n@@ -136,7 +136,7 @@ pub fn modify<T: 'static>(key: Key<T>, f: &fn(Option<T>) -> Option<T>) {\n \n #[test]\n fn test_tls_multitask() {\n-    static my_key: Key<@~str> = &[];\n+    static my_key: Key<@~str> = &Key;\n     set(my_key, @~\"parent data\");\n     do task::spawn {\n         // TLS shouldn't carry over.\n@@ -154,15 +154,15 @@ fn test_tls_multitask() {\n \n #[test]\n fn test_tls_overwrite() {\n-    static my_key: Key<@~str> = &[];\n+    static my_key: Key<@~str> = &Key;\n     set(my_key, @~\"first data\");\n     set(my_key, @~\"next data\"); // Shouldn't leak.\n     assert!(*(get(my_key, |k| k.map(|&k| *k)).get()) == ~\"next data\");\n }\n \n #[test]\n fn test_tls_pop() {\n-    static my_key: Key<@~str> = &[];\n+    static my_key: Key<@~str> = &Key;\n     set(my_key, @~\"weasel\");\n     assert!(*(pop(my_key).get()) == ~\"weasel\");\n     // Pop must remove the data from the map.\n@@ -171,7 +171,7 @@ fn test_tls_pop() {\n \n #[test]\n fn test_tls_modify() {\n-    static my_key: Key<@~str> = &[];\n+    static my_key: Key<@~str> = &Key;\n     modify(my_key, |data| {\n         match data {\n             Some(@ref val) => fail!(\"unwelcome value: %s\", *val),\n@@ -196,17 +196,17 @@ fn test_tls_crust_automorestack_memorial_bug() {\n     // to get recorded as something within a rust stack segment. Then a\n     // subsequent upcall (esp. for logging, think vsnprintf) would run on\n     // a stack smaller than 1 MB.\n-    static my_key: Key<@~str> = &[];\n+    static my_key: Key<@~str> = &Key;\n     do task::spawn {\n         set(my_key, @~\"hax\");\n     }\n }\n \n #[test]\n fn test_tls_multiple_types() {\n-    static str_key: Key<@~str> = &[];\n-    static box_key: Key<@@()> = &[];\n-    static int_key: Key<@int> = &[];\n+    static str_key: Key<@~str> = &Key;\n+    static box_key: Key<@@()> = &Key;\n+    static int_key: Key<@int> = &Key;\n     do task::spawn {\n         set(str_key, @~\"string data\");\n         set(box_key, @@());\n@@ -216,9 +216,9 @@ fn test_tls_multiple_types() {\n \n #[test]\n fn test_tls_overwrite_multiple_types() {\n-    static str_key: Key<@~str> = &[];\n-    static box_key: Key<@@()> = &[];\n-    static int_key: Key<@int> = &[];\n+    static str_key: Key<@~str> = &Key;\n+    static box_key: Key<@@()> = &Key;\n+    static int_key: Key<@int> = &Key;\n     do task::spawn {\n         set(str_key, @~\"string data\");\n         set(int_key, @42);\n@@ -233,9 +233,9 @@ fn test_tls_overwrite_multiple_types() {\n #[should_fail]\n #[ignore(cfg(windows))]\n fn test_tls_cleanup_on_failure() {\n-    static str_key: Key<@~str> = &[];\n-    static box_key: Key<@@()> = &[];\n-    static int_key: Key<@int> = &[];\n+    static str_key: Key<@~str> = &Key;\n+    static box_key: Key<@@()> = &Key;\n+    static int_key: Key<@int> = &Key;\n     set(str_key, @~\"parent data\");\n     set(box_key, @@());\n     do task::spawn {\n@@ -252,25 +252,25 @@ fn test_tls_cleanup_on_failure() {\n \n #[test]\n fn test_static_pointer() {\n-    static key: Key<@&'static int> = &[];\n+    static key: Key<@&'static int> = &Key;\n     static VALUE: int = 0;\n     let v: @&'static int = @&VALUE;\n     set(key, v);\n }\n \n #[test]\n fn test_owned() {\n-    static key: Key<~int> = &[];\n+    static key: Key<~int> = &Key;\n     set(key, ~1);\n }\n \n #[test]\n fn test_same_key_type() {\n-    static key1: Key<int> = &[];\n-    static key2: Key<int> = &[];\n-    static key3: Key<int> = &[];\n-    static key4: Key<int> = &[];\n-    static key5: Key<int> = &[];\n+    static key1: Key<int> = &Key;\n+    static key2: Key<int> = &Key;\n+    static key3: Key<int> = &Key;\n+    static key4: Key<int> = &Key;\n+    static key5: Key<int> = &Key;\n     set(key1, 1);\n     set(key2, 2);\n     set(key3, 3);"}, {"sha": "58175db1241d2f330767bd89009a98f5ddfe2f78", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -1242,7 +1242,7 @@ struct OverriddenArgs {\n #[cfg(stage0)]\n fn overridden_arg_key(_v: @OverriddenArgs) {}\n #[cfg(not(stage0))]\n-static overridden_arg_key: local_data::Key<@OverriddenArgs> = &[];\n+static overridden_arg_key: local_data::Key<@OverriddenArgs> = &local_data::Key;\n \n /// Returns the arguments which this program was started with (normally passed\n /// via the command line)."}, {"sha": "6f89e7ffb0794212a1c09f0bdd4750d7992a5d1e", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -854,7 +854,7 @@ pub fn seed() -> ~[u8] {\n #[cfg(stage0)]\n fn tls_rng_state(_v: @@mut IsaacRng) {}\n #[cfg(not(stage0))]\n-static tls_rng_state: local_data::Key<@@mut IsaacRng> = &[];\n+static tls_rng_state: local_data::Key<@@mut IsaacRng> = &local_data::Key;\n \n /**\n  * Gives back a lazily initialized task-local random number generator,"}, {"sha": "17d0d59660f1b52191cdfd562c4fa0fddc5266f8", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -348,10 +348,10 @@ mod test {\n     fn tls() {\n         use local_data;\n         do run_in_newsched_task() {\n-            static key: local_data::Key<@~str> = &[];\n+            static key: local_data::Key<@~str> = &local_data::Key;\n             local_data::set(key, @~\"data\");\n             assert!(*local_data::get(key, |k| k.map(|&k| *k)).get() == ~\"data\");\n-            static key2: local_data::Key<@~str> = &[];\n+            static key2: local_data::Key<@~str> = &local_data::Key;\n             local_data::set(key2, @~\"data\");\n             assert!(*local_data::get(key2, |k| k.map(|&k| *k)).get() == ~\"data\");\n         }"}, {"sha": "03b895b38601a78010728f1a2312cf96823972c4", "filename": "src/libstd/std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -222,6 +222,7 @@ mod std {\n     pub use condition;\n     pub use option;\n     pub use kinds;\n+    pub use local_data;\n     pub use sys;\n     pub use pipes;\n     pub use unstable;"}, {"sha": "d46e5707f14a9cc6698f24c98da20225b07652f3", "filename": "src/libstd/task/local_data_priv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Flocal_data_priv.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -17,7 +17,6 @@ use prelude::*;\n use ptr;\n use task::rt;\n use util;\n-use vec;\n \n use super::rt::rust_task;\n use rt::task::{Task, LocalStorage};\n@@ -143,7 +142,7 @@ unsafe fn get_local_map(handle: Handle) -> &mut TaskLocalMap {\n }\n \n fn key_to_key_value<T: 'static>(key: local_data::Key<T>) -> *libc::c_void {\n-    return vec::raw::to_ptr(key) as *libc::c_void;\n+    unsafe { cast::transmute(key) }\n }\n \n pub unsafe fn local_pop<T: 'static>(handle: Handle,"}, {"sha": "206d19e175fe9c8513037e741bf6995d25087ae4", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -80,6 +80,7 @@ use cell::Cell;\n use container::MutableMap;\n use comm::{Chan, GenericChan};\n use hashmap::HashSet;\n+use local_data;\n use task::local_data_priv::{local_get, local_set, OldHandle};\n use task::rt::rust_task;\n use task::rt;\n@@ -465,10 +466,14 @@ fn kill_taskgroup(state: TaskGroupInner, me: *rust_task, is_main: bool) {\n \n // FIXME (#2912): Work around core-vs-coretest function duplication. Can't use\n // a proper closure because the #[test]s won't understand. Have to fake it.\n-macro_rules! taskgroup_key (\n-    // Use a \"code pointer\" value that will never be a real code pointer.\n-    () => (cast::transmute((-2 as uint, 0u)))\n-)\n+#[cfg(not(stage0))]\n+fn taskgroup_key() -> local_data::Key<@@mut TCB> {\n+    unsafe { cast::transmute(-2) }\n+}\n+#[cfg(stage0)]\n+fn taskgroup_key() -> local_data::Key<@@mut TCB> {\n+    unsafe { cast::transmute((-2, 0)) }\n+}\n \n fn gen_child_taskgroup(linked: bool, supervised: bool)\n     -> (TaskGroupArc, AncestorList, bool) {\n@@ -478,7 +483,7 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n          * Step 1. Get spawner's taskgroup info.\n          *##################################################################*/\n         let spawner_group: @@mut TCB =\n-            do local_get(OldHandle(spawner), taskgroup_key!()) |group| {\n+            do local_get(OldHandle(spawner), taskgroup_key()) |group| {\n                 match group {\n                     None => {\n                         // Main task, doing first spawn ever. Lazily initialise\n@@ -495,7 +500,7 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n                                               AncestorList(None),\n                                               true,\n                                               None);\n-                        local_set(OldHandle(spawner), taskgroup_key!(), group);\n+                        local_set(OldHandle(spawner), taskgroup_key(), group);\n                         group\n                     }\n                     Some(&group) => group\n@@ -688,7 +693,7 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n                                       is_main,\n                                       notifier);\n                 unsafe {\n-                    local_set(OldHandle(child), taskgroup_key!(), group);\n+                    local_set(OldHandle(child), taskgroup_key(), group);\n                 }\n \n                 // Run the child's body."}, {"sha": "a1d209d19ac5600a1833aa71e8e47ee7f58c2347", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -695,7 +695,7 @@ pub fn new_sctable_internal() -> SCTable {\n // fetch the SCTable from TLS, create one if it doesn't yet exist.\n pub fn get_sctable() -> @mut SCTable {\n     #[cfg(not(stage0))]\n-    static sctable_key: local_data::Key<@@mut SCTable> = &[];\n+    static sctable_key: local_data::Key<@@mut SCTable> = &local_data::Key;\n     #[cfg(stage0)]\n     fn sctable_key(_: @@mut SCTable) {}\n     match local_data::get(sctable_key, |k| k.map(|&k| *k)) {"}, {"sha": "b45cde6a8e342dacc45985604f52a50d89e5d80e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -580,7 +580,9 @@ pub fn core_macros() -> @str {\n \n             pub mod $c {\n                 #[allow(non_uppercase_statics)];\n-                static key: &'static [@::std::condition::Handler<$in, $out>] = &[];\n+                static key: ::std::local_data::Key<\n+                    @::std::condition::Handler<$in, $out>> =\n+                    &::std::local_data::Key;\n \n                 pub static cond :\n                     ::std::condition::Condition<$in,$out> =\n@@ -596,7 +598,9 @@ pub fn core_macros() -> @str {\n             // FIXME (#6009): remove mod's `pub` below once variant above lands.\n             pub mod $c {\n                 #[allow(non_uppercase_statics)];\n-                static key: &'static [@::std::condition::Handler<$in, $out>] = &[];\n+                static key: ::std::local_data::Key<\n+                    @::std::condition::Handler<$in, $out>> =\n+                    &::std::local_data::Key;\n \n                 pub static cond :\n                     ::std::condition::Condition<$in,$out> ="}, {"sha": "01860c3ae995bfe20c37224eb2e45bf069afd58e", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -485,7 +485,8 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n // fresh one.\n pub fn get_ident_interner() -> @ident_interner {\n     #[cfg(not(stage0))]\n-    static key: local_data::Key<@@::parse::token::ident_interner> = &[];\n+    static key: local_data::Key<@@::parse::token::ident_interner> =\n+        &local_data::Key;\n     #[cfg(stage0)]\n     fn key(_: @@::parse::token::ident_interner) {}\n     match local_data::get(key, |k| k.map(|&k| *k)) {"}, {"sha": "576b1c452a5ecccb05d4e408203639022967512c", "filename": "src/test/compile-fail/core-tls-store-pointer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd2ac7428afa4f414f32b8b4876ca817ee85f16/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcore-tls-store-pointer.rs?ref=9fd2ac7428afa4f414f32b8b4876ca817ee85f16", "patch": "@@ -12,6 +12,7 @@\n \n use std::local_data;\n \n-static key: local_data::Key<@&int> = &[]; //~ ERROR only 'static is allowed\n+static key: local_data::Key<@&int> = &local_data::Key;\n+//~^ ERROR only 'static is allowed\n \n fn main() {}"}]}