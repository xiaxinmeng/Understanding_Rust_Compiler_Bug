{"sha": "13877a965d93100b5995da612a95612919a45cfa", "node_id": "C_kwDOAAsO6NoAKDEzODc3YTk2NWQ5MzEwMGI1OTk1ZGE2MTJhOTU2MTI5MTlhNDVjZmE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T20:42:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T20:42:20Z"}, "message": "prune raw pointer read and write methods from Miri backtraces", "tree": {"sha": "a6f71fef7450743677f72e43180a7b803fd02360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6f71fef7450743677f72e43180a7b803fd02360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13877a965d93100b5995da612a95612919a45cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13877a965d93100b5995da612a95612919a45cfa", "html_url": "https://github.com/rust-lang/rust/commit/13877a965d93100b5995da612a95612919a45cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13877a965d93100b5995da612a95612919a45cfa/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b269cad437ef174c2f7cab51ddceaa8dc69d487", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b269cad437ef174c2f7cab51ddceaa8dc69d487", "html_url": "https://github.com/rust-lang/rust/commit/2b269cad437ef174c2f7cab51ddceaa8dc69d487"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "32fb0f82f101066f24feba303fe0a91bce3bffab", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13877a965d93100b5995da612a95612919a45cfa/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13877a965d93100b5995da612a95612919a45cfa/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=13877a965d93100b5995da612a95612919a45cfa", "patch": "@@ -2615,6 +2615,7 @@ pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n #[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n #[inline]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n     extern \"rust-intrinsic\" {\n         #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]"}, {"sha": "b961d875c0eb64e2767f85de0e1ad751614a36c9", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13877a965d93100b5995da612a95612919a45cfa/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13877a965d93100b5995da612a95612919a45cfa/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=13877a965d93100b5995da612a95612919a45cfa", "patch": "@@ -1144,6 +1144,7 @@ impl<T: ?Sized> *const T {\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n     #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read(self) -> T\n     where\n         T: Sized,\n@@ -1164,6 +1165,7 @@ impl<T: ?Sized> *const T {\n     /// [`ptr::read_volatile`]: crate::ptr::read_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub unsafe fn read_volatile(self) -> T\n     where\n         T: Sized,\n@@ -1183,6 +1185,7 @@ impl<T: ?Sized> *const T {\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n     #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read_unaligned(self) -> T\n     where\n         T: Sized,"}, {"sha": "40e28e636d8514394b088d4fb89c4763cdca9798", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13877a965d93100b5995da612a95612919a45cfa/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13877a965d93100b5995da612a95612919a45cfa/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=13877a965d93100b5995da612a95612919a45cfa", "patch": "@@ -1095,6 +1095,7 @@ pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn read<T>(src: *const T) -> T {\n     // We are calling the intrinsics directly to avoid function calls in the generated code\n     // as `intrinsics::copy_nonoverlapping` is a wrapper function.\n@@ -1194,6 +1195,7 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n     let mut tmp = MaybeUninit::<T>::uninit();\n     // SAFETY: the caller must guarantee that `src` is valid for reads.\n@@ -1290,6 +1292,7 @@ pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn write<T>(dst: *mut T, src: T) {\n     // We are calling the intrinsics directly to avoid function calls in the generated code\n     // as `intrinsics::copy_nonoverlapping` is a wrapper function.\n@@ -1387,6 +1390,7 @@ pub const unsafe fn write<T>(dst: *mut T, src: T) {\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n     // SAFETY: the caller must guarantee that `dst` is valid for writes.\n     // `dst` cannot overlap `src` because the caller has mutable access\n@@ -1460,6 +1464,7 @@ pub const unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n /// ```\n #[inline]\n #[stable(feature = \"volatile\", since = \"1.9.0\")]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub unsafe fn read_volatile<T>(src: *const T) -> T {\n     // SAFETY: the caller must uphold the safety contract for `volatile_load`.\n     unsafe {\n@@ -1530,6 +1535,7 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n /// ```\n #[inline]\n #[stable(feature = \"volatile\", since = \"1.9.0\")]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {\n     // SAFETY: the caller must uphold the safety contract for `volatile_store`.\n     unsafe {"}, {"sha": "21dc1911918168496f00c6bbd84e649b68afcfd4", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13877a965d93100b5995da612a95612919a45cfa/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13877a965d93100b5995da612a95612919a45cfa/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=13877a965d93100b5995da612a95612919a45cfa", "patch": "@@ -1256,6 +1256,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read(self) -> T\n     where\n         T: Sized,\n@@ -1276,6 +1277,7 @@ impl<T: ?Sized> *mut T {\n     /// [`ptr::read_volatile`]: crate::ptr::read_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub unsafe fn read_volatile(self) -> T\n     where\n         T: Sized,\n@@ -1295,6 +1297,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn read_unaligned(self) -> T\n     where\n         T: Sized,\n@@ -1400,6 +1403,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn write(self, val: T)\n     where\n         T: Sized,\n@@ -1418,6 +1422,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn write_bytes(self, val: u8, count: usize)\n     where\n         T: Sized,\n@@ -1438,6 +1443,7 @@ impl<T: ?Sized> *mut T {\n     /// [`ptr::write_volatile`]: crate::ptr::write_volatile()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub unsafe fn write_volatile(self, val: T)\n     where\n         T: Sized,\n@@ -1457,6 +1463,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn write_unaligned(self, val: T)\n     where\n         T: Sized,"}]}