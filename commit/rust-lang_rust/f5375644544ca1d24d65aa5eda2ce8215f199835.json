{"sha": "f5375644544ca1d24d65aa5eda2ce8215f199835", "node_id": "C_kwDOAAsO6NoAKGY1Mzc1NjQ0NTQ0Y2ExZDI0ZDY1YWE1ZWRhMmNlODIxNWYxOTk4MzU", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-03-30T13:55:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-30T13:55:30Z"}, "message": "Merge pull request #148 from rust-lang/feature/packed-struct\n\nFeature/packed struct", "tree": {"sha": "0b8002dbcb7a525872a85df4be69f7cb3147e5f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b8002dbcb7a525872a85df4be69f7cb3147e5f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5375644544ca1d24d65aa5eda2ce8215f199835", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRGFSCRBK7hj4Ov3rIwAAoMoIAKpmfSFzUocQ8GDBKbB/fzSg\nXUJLkYfUO356hBSXO28BPnW2yzga/awktjY9NjcvlzQrh/upLtoBm5HM/tUNufz0\nd4zpvvs2q/2kD6Vn5TIGHucSp0jpoZbl0KNmq3W/H8CMXjx9Ej0XHjkT0pDRMKlB\nS+Q7gQETrIlhi6+UvY7fCjltCQHPybPDbA0AlRTQOz5DprR91Leesf7RLmdE+ADM\n/OIG5AhD57wkWKx+QCJbyAQw4kRhSlQuGsMX704QQD9mdysoXl6tJZSBXEQnCON/\nbo/NMCW79+eB256DX6HzYDHzhXh908sgyfsSPNRw+MsrJl29TG4sqGh7FZ7r+HM=\n=slot\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b8002dbcb7a525872a85df4be69f7cb3147e5f5\nparent 76cf7c2058489be704864d60360b52a48d9dc2f3\nparent 927eea3860330a52b4594bdad1a771499c8aee19\nauthor antoyo <antoyo@users.noreply.github.com> 1648648530 -0400\ncommitter GitHub <noreply@github.com> 1648648530 -0400\n\nMerge pull request #148 from rust-lang/feature/packed-struct\n\nFeature/packed struct"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5375644544ca1d24d65aa5eda2ce8215f199835", "html_url": "https://github.com/rust-lang/rust/commit/f5375644544ca1d24d65aa5eda2ce8215f199835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5375644544ca1d24d65aa5eda2ce8215f199835/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76cf7c2058489be704864d60360b52a48d9dc2f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/76cf7c2058489be704864d60360b52a48d9dc2f3", "html_url": "https://github.com/rust-lang/rust/commit/76cf7c2058489be704864d60360b52a48d9dc2f3"}, {"sha": "927eea3860330a52b4594bdad1a771499c8aee19", "url": "https://api.github.com/repos/rust-lang/rust/commits/927eea3860330a52b4594bdad1a771499c8aee19", "html_url": "https://github.com/rust-lang/rust/commit/927eea3860330a52b4594bdad1a771499c8aee19"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "d65649ecfa3ef466402fa40cf972f69954668804", "filename": "src/type_.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f5375644544ca1d24d65aa5eda2ce8215f199835/src%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5375644544ca1d24d65aa5eda2ce8215f199835/src%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_.rs?ref=f5375644544ca1d24d65aa5eda2ce8215f199835", "patch": "@@ -115,16 +115,18 @@ impl<'gcc, 'tcx> BaseTypeMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         self.context.new_function_pointer_type(None, return_type, params, false)\n     }\n \n-    fn type_struct(&self, fields: &[Type<'gcc>], _packed: bool) -> Type<'gcc> {\n+    fn type_struct(&self, fields: &[Type<'gcc>], packed: bool) -> Type<'gcc> {\n         let types = fields.to_vec();\n         if let Some(typ) = self.struct_types.borrow().get(fields) {\n             return typ.clone();\n         }\n         let fields: Vec<_> = fields.iter().enumerate()\n             .map(|(index, field)| self.context.new_field(None, *field, &format!(\"field{}_TODO\", index)))\n             .collect();\n-        // TODO(antoyo): use packed.\n         let typ = self.context.new_struct_type(None, \"struct\", &fields).as_type();\n+        if packed {\n+            typ.set_packed();\n+        }\n         self.struct_types.borrow_mut().insert(types, typ);\n         typ\n     }\n@@ -209,12 +211,14 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         self.type_array(self.type_from_integer(unit), size / unit_size)\n     }\n \n-    pub fn set_struct_body(&self, typ: Struct<'gcc>, fields: &[Type<'gcc>], _packed: bool) {\n-        // TODO(antoyo): use packed.\n+    pub fn set_struct_body(&self, typ: Struct<'gcc>, fields: &[Type<'gcc>], packed: bool) {\n         let fields: Vec<_> = fields.iter().enumerate()\n             .map(|(index, field)| self.context.new_field(None, *field, &format!(\"field_{}\", index)))\n             .collect();\n         typ.set_fields(None, &fields);\n+        if packed {\n+            typ.as_type().set_packed();\n+        }\n     }\n \n     pub fn type_named_struct(&self, name: &str) -> Struct<'gcc> {"}]}