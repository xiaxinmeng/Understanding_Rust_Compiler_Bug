{"sha": "72ee472146681d2a87e9bdce8024da309828dafd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZWU0NzIxNDY2ODFkMmE4N2U5YmRjZTgwMjRkYTMwOTgyOGRhZmQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-27T14:26:18Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-27T14:26:18Z"}, "message": "Rollup merge of #24848 - bluss:deref-string, r=alexcrichton\n\nImprove example for as_string and add example for as_vec\r\n\r\nProvide a better example of `as_string` / `DerefString`'s unique capabilities.\r\nUse an example where (for an unspecified reason) you need a &String, and\r\nshow how `as_string` solves the problem without needing an allocation.", "tree": {"sha": "670a5c85c63f5684ad1d14f34be8ead0ab5a4098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/670a5c85c63f5684ad1d14f34be8ead0ab5a4098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ee472146681d2a87e9bdce8024da309828dafd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ee472146681d2a87e9bdce8024da309828dafd", "html_url": "https://github.com/rust-lang/rust/commit/72ee472146681d2a87e9bdce8024da309828dafd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ee472146681d2a87e9bdce8024da309828dafd/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "130240afc6eb1da5131f4a66d9e374a28eb6102c", "url": "https://api.github.com/repos/rust-lang/rust/commits/130240afc6eb1da5131f4a66d9e374a28eb6102c", "html_url": "https://github.com/rust-lang/rust/commit/130240afc6eb1da5131f4a66d9e374a28eb6102c"}, {"sha": "84ef3b53517e2ed1148e6d4214c0c97c2328ead0", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ef3b53517e2ed1148e6d4214c0c97c2328ead0", "html_url": "https://github.com/rust-lang/rust/commit/84ef3b53517e2ed1148e6d4214c0c97c2328ead0"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "be6405dc85a1498fcbffba5194c8397c1754ebd9", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72ee472146681d2a87e9bdce8024da309828dafd/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee472146681d2a87e9bdce8024da309828dafd/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=72ee472146681d2a87e9bdce8024da309828dafd", "patch": "@@ -951,12 +951,13 @@ impl<'a> Deref for DerefString<'a> {\n /// # #![feature(collections)]\n /// use std::string::as_string;\n ///\n-/// fn string_consumer(s: String) {\n-///     assert_eq!(s, \"foo\".to_string());\n+/// // Let's pretend we have a function that requires `&String`\n+/// fn string_consumer(s: &String) {\n+///     assert_eq!(s, \"foo\");\n /// }\n ///\n-/// let string = as_string(\"foo\").clone();\n-/// string_consumer(string);\n+/// // Provide a `&String` from a `&str` without allocating\n+/// string_consumer(&as_string(\"foo\"));\n /// ```\n #[unstable(feature = \"collections\")]\n pub fn as_string<'a>(x: &'a str) -> DerefString<'a> {"}, {"sha": "fcf90a84ef2a8e4bbd00802a738244b09181a523", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72ee472146681d2a87e9bdce8024da309828dafd/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ee472146681d2a87e9bdce8024da309828dafd/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=72ee472146681d2a87e9bdce8024da309828dafd", "patch": "@@ -1915,6 +1915,22 @@ impl<'a, T> Drop for DerefVec<'a, T> {\n }\n \n /// Converts a slice to a wrapper type providing a `&Vec<T>` reference.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// # #![feature(collections)]\n+/// use std::vec::as_vec;\n+///\n+/// // Let's pretend we have a function that requires `&Vec<i32>`\n+/// fn vec_consumer(s: &Vec<i32>) {\n+///     assert_eq!(s, &[1, 2, 3]);\n+/// }\n+///\n+/// // Provide a `&Vec<i32>` from a `&[i32]` without allocating\n+/// let values = [1, 2, 3];\n+/// vec_consumer(&as_vec(&values));\n+/// ```\n #[unstable(feature = \"collections\")]\n pub fn as_vec<'a, T>(x: &'a [T]) -> DerefVec<'a, T> {\n     unsafe {"}]}