{"sha": "c0007a2d7eec702a9b10f90200cfa2e33881ab6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMDA3YTJkN2VlYzcwMmE5YjEwZjkwMjAwY2ZhMmUzMzg4MWFiNmM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-21T21:16:24Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-27T14:23:50Z"}, "message": "Extract function trait_may_define_assoc_type", "tree": {"sha": "8da62f3bff51ddd616f1be8497c08808b51a5517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8da62f3bff51ddd616f1be8497c08808b51a5517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0007a2d7eec702a9b10f90200cfa2e33881ab6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl/BC/YACgkQgTGiTgx5\n76/hLw/+L3TDXbfCH+tTc6Kqwb5rRbzxjEM/CShdpmj33NSdVSKhhuoy3CPVc/fs\nQcLHVA4GevozsNtUo3ofnQhgxdyALrmvvFWFKCaGbqVVQd3rklEmlekVU4cszZgB\nGVnYeXC2Q3TP2nkaLCH3+VRqukgaBUxWDQH7rOmC4e0Fy5K6sji9qIrGXnUjEF/k\nXRbq1BbZP1IMtq8YO/XYZX3ZdcK8taXD6qjTfomhVWf8PPLPFypXUtBlZHXbHp8S\nTp94SbxezoCSqTDJ6rYV4K3hOlhgZ+p+1dmy5m7h3cg+/LMuBJ/cRfFDDdCmJIgK\ncLYA2hugGs1BVWzfAubiJyPlFG571fZvHsvmsWL060vITfD/EkaVuuGbbUorGDvi\ncfJKcakJOa0pHkTRpPvkjS5ZohiT+ErdyvRQYF+bS6MEi8WHIl4f+OGZesg1Wo0D\nfYeE2QYu+aspocd2OKzZ7XarL188E6oNYtzIGbL/vle7UiIvblwD4/ELYTJBVgWF\nCJ6a0mK5d0TQBfIdfYpJoSVCLRIQW+ueM15Jl9iQKiecvzuCs+WJi9cVRHMW36k4\nud4IS6YBLJpHSqhglF+/IrGm70PqhiP5OPHosaJjka4v/qAQvQAGutp7OIAJ84Yi\ndhD6MKp9J9jhERD+sxnvM10DYya6yF5jmefOUerGjSmJa38+rpM=\n=CWE/\n-----END PGP SIGNATURE-----", "payload": "tree 8da62f3bff51ddd616f1be8497c08808b51a5517\nparent b60a214c51413b112935eadde5777998c3aa3458\nauthor Santiago Pastorino <spastorino@gmail.com> 1605993384 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1606487030 -0300\n\nExtract function trait_may_define_assoc_type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0007a2d7eec702a9b10f90200cfa2e33881ab6c", "html_url": "https://github.com/rust-lang/rust/commit/c0007a2d7eec702a9b10f90200cfa2e33881ab6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0007a2d7eec702a9b10f90200cfa2e33881ab6c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b60a214c51413b112935eadde5777998c3aa3458", "url": "https://api.github.com/repos/rust-lang/rust/commits/b60a214c51413b112935eadde5777998c3aa3458", "html_url": "https://github.com/rust-lang/rust/commit/b60a214c51413b112935eadde5777998c3aa3458"}], "stats": {"total": 37, "additions": 13, "deletions": 24}, "files": [{"sha": "b2a8b33e4ff5fcbb36bfcf632582ad0799d2358a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0007a2d7eec702a9b10f90200cfa2e33881ab6c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0007a2d7eec702a9b10f90200cfa2e33881ab6c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c0007a2d7eec702a9b10f90200cfa2e33881ab6c", "patch": "@@ -51,7 +51,7 @@ use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n use rustc_session::lint::{Level, Lint};\n use rustc_session::Session;\n use rustc_span::source_map::MultiSpan;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Layout, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n@@ -2085,6 +2085,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))\n     }\n \n+    /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`\n+    /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.\n+    pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n+        self.super_traits_of(trait_def_id).iter().any(|trait_did| {\n+            self.associated_items(*trait_did)\n+                .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, *trait_did)\n+                .is_some()\n+        })\n+    }\n+\n     /// Given a closure signature, returns an equivalent fn signature. Detuples\n     /// and so forth -- so e.g., if we have a sig with `Fn<(u32, i32)>` then\n     /// you would get a `fn(u32, i32)`."}, {"sha": "3ec0919bb8a3f129714aec08855153eb8426d3c7", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0007a2d7eec702a9b10f90200cfa2e33881ab6c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0007a2d7eec702a9b10f90200cfa2e33881ab6c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=c0007a2d7eec702a9b10f90200cfa2e33881ab6c", "patch": "@@ -909,7 +909,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         for ast_bound in ast_bounds {\n             if let Some(trait_ref) = ast_bound.trait_ref() {\n                 if let Some(trait_did) = trait_ref.trait_def_id() {\n-                    if self.trait_may_define_assoc_type(trait_did, assoc_name) {\n+                    if self.tcx().trait_may_define_assoc_type(trait_did, assoc_name) {\n                         result.push(ast_bound);\n                     }\n                 }\n@@ -919,17 +919,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self.compute_bounds(param_ty, &result, sized_by_default, span)\n     }\n \n-    /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`\n-    /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.\n-    fn trait_may_define_assoc_type(&self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n-        self.tcx().super_traits_of(trait_def_id).iter().any(|trait_did| {\n-            self.tcx()\n-                .associated_items(*trait_did)\n-                .find_by_name_and_kind(self.tcx(), assoc_name, ty::AssocKind::Type, *trait_did)\n-                .is_some()\n-        })\n-    }\n-\n     /// Given an HIR binding like `Item = Foo` or `Item: Foo`, pushes the corresponding predicates\n     /// onto `bounds`.\n     ///"}, {"sha": "8d5e518c151d28bc0ac97d2db88950500c74aadc", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0007a2d7eec702a9b10f90200cfa2e33881ab6c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0007a2d7eec702a9b10f90200cfa2e33881ab6c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=c0007a2d7eec702a9b10f90200cfa2e33881ab6c", "patch": "@@ -654,17 +654,7 @@ impl ItemCtxt<'tcx> {\n             hir::GenericBound::Trait(poly_trait_ref, _) => {\n                 let trait_ref = &poly_trait_ref.trait_ref;\n                 if let Some(trait_did) = trait_ref.trait_def_id() {\n-                    self.tcx.super_traits_of(trait_did).iter().any(|trait_did| {\n-                        self.tcx\n-                            .associated_items(*trait_did)\n-                            .find_by_name_and_kind(\n-                                self.tcx,\n-                                assoc_name,\n-                                ty::AssocKind::Type,\n-                                *trait_did,\n-                            )\n-                            .is_some()\n-                    })\n+                    self.tcx.trait_may_define_assoc_type(trait_did, assoc_name)\n                 } else {\n                     false\n                 }"}]}