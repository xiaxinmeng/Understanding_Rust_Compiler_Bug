{"sha": "bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "node_id": "C_kwDOAAsO6NoAKGJlZjJkYTA2Mjk0ZDdkZGRlY2NkMWY2ZWRlODI1ZmI3N2EzMWI2ZmM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-11-12T16:25:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-12T16:25:01Z"}, "message": "Rollup merge of #104117 - crlf0710:update_feature_gate, r=jackh726\n\nMark `trait_upcasting` feature no longer incomplete.\n\nThis marks the `trait_upcasting` feature no longer incomplete since #101336 has been settled for a little while.\n\nr? ``````@jackh726``````", "tree": {"sha": "b718da5c1903cf532bc1329515571d2edcec9d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b718da5c1903cf532bc1329515571d2edcec9d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjb8jdCRBK7hj4Ov3rIwAAnXIIABvUUPFgoEUdnF3Ry3oL3+1/\npRnDzgKpQLEWXrKKs1Wi04/dCd8IwxhqrwZno9JwpPBfANc30td8b4cXziZP1imW\nWdDznU+PZNZK0pJezzITtmSeEkLo849VpKOHF5MLQ6+nI/cw66rANSa7MaNDRm+1\neKy/GfsbShKFpgQ7F1Sa/jticar4H6LfrkFSzpmOrZF+KdDIjeKf2O/i4zUFzj9X\nGlxiik8qhKwZMTZhzYMGSDPJP7l6odCN7GKTz0cleWo6b93kjqeprAnoEGeFE4re\nl94VuUWpeiYO+G0lW32HkflNWheJV97PnDxUUGVh0TstBU0T3hVSytuRiAPSdZ4=\n=SJZA\n-----END PGP SIGNATURE-----\n", "payload": "tree b718da5c1903cf532bc1329515571d2edcec9d3a\nparent 798815aec562f04bf9cd0ddbb8e8e03c906fb1cc\nparent 3074678cd1c9a2934ef11122b3744523083f1736\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1668270301 +0100\ncommitter GitHub <noreply@github.com> 1668270301 +0100\n\nRollup merge of #104117 - crlf0710:update_feature_gate, r=jackh726\n\nMark `trait_upcasting` feature no longer incomplete.\n\nThis marks the `trait_upcasting` feature no longer incomplete since #101336 has been settled for a little while.\n\nr? ``````@jackh726``````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "html_url": "https://github.com/rust-lang/rust/commit/bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "798815aec562f04bf9cd0ddbb8e8e03c906fb1cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/798815aec562f04bf9cd0ddbb8e8e03c906fb1cc", "html_url": "https://github.com/rust-lang/rust/commit/798815aec562f04bf9cd0ddbb8e8e03c906fb1cc"}, {"sha": "3074678cd1c9a2934ef11122b3744523083f1736", "url": "https://api.github.com/repos/rust-lang/rust/commits/3074678cd1c9a2934ef11122b3744523083f1736", "html_url": "https://github.com/rust-lang/rust/commit/3074678cd1c9a2934ef11122b3744523083f1736"}], "stats": {"total": 166, "additions": 83, "deletions": 83}, "files": [{"sha": "a0e16b18061aad99dd4d99af7bcadd1dcad7da8c", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -512,9 +512,9 @@ declare_features! (\n     (active, thread_local, \"1.0.0\", Some(29594), None),\n     /// Allows defining `trait X = A + B;` alias items.\n     (active, trait_alias, \"1.24.0\", Some(41517), None),\n-    /// Allows upcasting trait objects via supertraits.\n-    /// Trait upcasting is casting, e.g., `dyn Foo -> dyn Bar` where `Foo: Bar`.\n-    (incomplete, trait_upcasting, \"1.56.0\", Some(65991), None),\n+    /// Allows dyn upcasting trait objects via supertraits.\n+    /// Dyn upcasting is casting, e.g., `dyn Foo -> dyn Bar` where `Foo: Bar`.\n+    (active, trait_upcasting, \"1.56.0\", Some(65991), None),\n     /// Allows #[repr(transparent)] on unions (RFC 2645).\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n     /// Allows inconsistent bounds in where clauses."}, {"sha": "b223aff4e94923f151020f3ec51eeeeca3991d08", "filename": "src/test/ui/codegen/issue-99551.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Fcodegen%2Fissue-99551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Fcodegen%2Fissue-99551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodegen%2Fissue-99551.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,6 +1,5 @@\n // build-pass\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n pub trait A {}\n pub trait B {}"}, {"sha": "570ec5160bfe9809011c113e9c06fccdf0397bc8", "filename": "src/test/ui/traits/trait-upcasting/basic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fbasic.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n     fn a(&self) -> i32 {"}, {"sha": "eae5cf8d58d0196c9a2445d1772b93d0bb0c4a06", "filename": "src/test/ui/traits/trait-upcasting/correct-supertrait-substitution.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcorrect-supertrait-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcorrect-supertrait-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fcorrect-supertrait-substitution.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo<T: Default + ToString>: Bar<i32> + Bar<T> {}\n trait Bar<T: Default + ToString> {"}, {"sha": "a4f81c464b40266090aeb90913eeb9adf200aaf7", "filename": "src/test/ui/traits/trait-upcasting/diamond.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fdiamond.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n     fn a(&self) -> i32 {"}, {"sha": "e634bbd5ac6f5d7782921f16bbd41c2a78e69390", "filename": "src/test/ui/traits/trait-upcasting/invalid-upcast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo {\n     fn a(&self) -> i32 {"}, {"sha": "3aa21ee3dddfbbdf5f8a8c8c359a2a49583024e4", "filename": "src/test/ui/traits/trait-upcasting/invalid-upcast.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Finvalid-upcast.stderr?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:54:35\n+  --> $DIR/invalid-upcast.rs:53:35\n    |\n LL |     let _: &dyn std::fmt::Debug = baz;\n    |            --------------------   ^^^ expected trait `Debug`, found trait `Baz`\n@@ -10,7 +10,7 @@ LL |     let _: &dyn std::fmt::Debug = baz;\n               found reference `&dyn Baz`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:56:24\n+  --> $DIR/invalid-upcast.rs:55:24\n    |\n LL |     let _: &dyn Send = baz;\n    |            ---------   ^^^ expected trait `Send`, found trait `Baz`\n@@ -21,7 +21,7 @@ LL |     let _: &dyn Send = baz;\n               found reference `&dyn Baz`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:58:24\n+  --> $DIR/invalid-upcast.rs:57:24\n    |\n LL |     let _: &dyn Sync = baz;\n    |            ---------   ^^^ expected trait `Sync`, found trait `Baz`\n@@ -32,7 +32,7 @@ LL |     let _: &dyn Sync = baz;\n               found reference `&dyn Baz`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:61:25\n+  --> $DIR/invalid-upcast.rs:60:25\n    |\n LL |     let bar: &dyn Bar = baz;\n    |              --------   ^^^ expected trait `Bar`, found trait `Baz`\n@@ -43,7 +43,7 @@ LL |     let bar: &dyn Bar = baz;\n               found reference `&dyn Baz`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:63:35\n+  --> $DIR/invalid-upcast.rs:62:35\n    |\n LL |     let _: &dyn std::fmt::Debug = bar;\n    |            --------------------   ^^^ expected trait `Debug`, found trait `Bar`\n@@ -54,7 +54,7 @@ LL |     let _: &dyn std::fmt::Debug = bar;\n               found reference `&dyn Bar`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:65:24\n+  --> $DIR/invalid-upcast.rs:64:24\n    |\n LL |     let _: &dyn Send = bar;\n    |            ---------   ^^^ expected trait `Send`, found trait `Bar`\n@@ -65,7 +65,7 @@ LL |     let _: &dyn Send = bar;\n               found reference `&dyn Bar`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:67:24\n+  --> $DIR/invalid-upcast.rs:66:24\n    |\n LL |     let _: &dyn Sync = bar;\n    |            ---------   ^^^ expected trait `Sync`, found trait `Bar`\n@@ -76,7 +76,7 @@ LL |     let _: &dyn Sync = bar;\n               found reference `&dyn Bar`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:70:25\n+  --> $DIR/invalid-upcast.rs:69:25\n    |\n LL |     let foo: &dyn Foo = baz;\n    |              --------   ^^^ expected trait `Foo`, found trait `Baz`\n@@ -87,7 +87,7 @@ LL |     let foo: &dyn Foo = baz;\n               found reference `&dyn Baz`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:72:35\n+  --> $DIR/invalid-upcast.rs:71:35\n    |\n LL |     let _: &dyn std::fmt::Debug = foo;\n    |            --------------------   ^^^ expected trait `Debug`, found trait `Foo`\n@@ -98,7 +98,7 @@ LL |     let _: &dyn std::fmt::Debug = foo;\n               found reference `&dyn Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:74:24\n+  --> $DIR/invalid-upcast.rs:73:24\n    |\n LL |     let _: &dyn Send = foo;\n    |            ---------   ^^^ expected trait `Send`, found trait `Foo`\n@@ -109,7 +109,7 @@ LL |     let _: &dyn Send = foo;\n               found reference `&dyn Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:76:24\n+  --> $DIR/invalid-upcast.rs:75:24\n    |\n LL |     let _: &dyn Sync = foo;\n    |            ---------   ^^^ expected trait `Sync`, found trait `Foo`\n@@ -120,7 +120,7 @@ LL |     let _: &dyn Sync = foo;\n               found reference `&dyn Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:79:25\n+  --> $DIR/invalid-upcast.rs:78:25\n    |\n LL |     let foo: &dyn Foo = bar;\n    |              --------   ^^^ expected trait `Foo`, found trait `Bar`\n@@ -131,7 +131,7 @@ LL |     let foo: &dyn Foo = bar;\n               found reference `&dyn Bar`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:81:35\n+  --> $DIR/invalid-upcast.rs:80:35\n    |\n LL |     let _: &dyn std::fmt::Debug = foo;\n    |            --------------------   ^^^ expected trait `Debug`, found trait `Foo`\n@@ -142,7 +142,7 @@ LL |     let _: &dyn std::fmt::Debug = foo;\n               found reference `&dyn Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:83:24\n+  --> $DIR/invalid-upcast.rs:82:24\n    |\n LL |     let _: &dyn Send = foo;\n    |            ---------   ^^^ expected trait `Send`, found trait `Foo`\n@@ -153,7 +153,7 @@ LL |     let _: &dyn Send = foo;\n               found reference `&dyn Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-upcast.rs:85:24\n+  --> $DIR/invalid-upcast.rs:84:24\n    |\n LL |     let _: &dyn Sync = foo;\n    |            ---------   ^^^ expected trait `Sync`, found trait `Foo`"}, {"sha": "b672963ae98876c5e4553a6e3b2be7bbb9771787", "filename": "src/test/ui/traits/trait-upcasting/issue-11515-upcast-fn_mut-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fissue-11515-upcast-fn_mut-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fissue-11515-upcast-fn_mut-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fissue-11515-upcast-fn_mut-fn.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n struct Test {\n     func: Box<dyn FnMut() + 'static>,"}, {"sha": "9825158c2dd38a52974ad004156c44123991154c", "filename": "src/test/ui/traits/trait-upcasting/lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Flifetime.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n     fn a(&self) -> i32 {"}, {"sha": "2e53a00a90e9c8e955d4c7e8b1b1d449d1961f5e", "filename": "src/test/ui/traits/trait-upcasting/multiple-occurrence-ambiguousity.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,12 +1,11 @@\n // check-fail\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Bar<T> {\n     fn bar(&self, _: T) {}\n }\n \n-trait Foo : Bar<i32> + Bar<u32> {\n+trait Foo: Bar<i32> + Bar<u32> {\n     fn foo(&self, _: ()) {}\n }\n "}, {"sha": "0ad18be03cdf9d259a2da0eb0e899f163bd67a0a", "filename": "src/test/ui/traits/trait-upcasting/multiple-occurrence-ambiguousity.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/multiple-occurrence-ambiguousity.rs:21:26\n+  --> $DIR/multiple-occurrence-ambiguousity.rs:20:26\n    |\n LL |     let t: &dyn Bar<_> = s;\n    |            -----------   ^ expected trait `Bar`, found trait `Foo`"}, {"sha": "9ccfc9306ac0c46e04097ebd9a0ba9ad334cba07", "filename": "src/test/ui/traits/trait-upcasting/replace-vptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Freplace-vptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Freplace-vptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Freplace-vptr.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait A {\n     fn foo_a(&self);"}, {"sha": "a3e41696956cb930a65ac3e7c0a2b3f03f9fe9b3", "filename": "src/test/ui/traits/trait-upcasting/struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fstruct.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n use std::rc::Rc;\n use std::sync::Arc;"}, {"sha": "136d15af0e8b2de5f7fb1d99c3b1df15deb7b57a", "filename": "src/test/ui/traits/trait-upcasting/subtrait-method.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: PartialEq<i32> + std::fmt::Debug + Send + Sync {\n     fn a(&self) -> i32 {"}, {"sha": "918159e845b9e7e5e98b9145aab67aaa3a012605", "filename": "src/test/ui/traits/trait-upcasting/subtrait-method.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fsubtrait-method.stderr?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,64 +1,64 @@\n error[E0599]: no method named `c` found for reference `&dyn Bar` in the current scope\n-  --> $DIR/subtrait-method.rs:56:9\n+  --> $DIR/subtrait-method.rs:55:9\n    |\n LL |     bar.c();\n    |         ^ help: there is a method with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Baz` defines an item `c`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:28:1\n+  --> $DIR/subtrait-method.rs:27:1\n    |\n LL | trait Baz: Bar {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `b` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:60:9\n+  --> $DIR/subtrait-method.rs:59:9\n    |\n LL |     foo.b();\n    |         ^ help: there is a method with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Bar` defines an item `b`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:18:1\n+  --> $DIR/subtrait-method.rs:17:1\n    |\n LL | trait Bar: Foo {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `c` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:62:9\n+  --> $DIR/subtrait-method.rs:61:9\n    |\n LL |     foo.c();\n    |         ^ help: there is a method with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Baz` defines an item `c`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:28:1\n+  --> $DIR/subtrait-method.rs:27:1\n    |\n LL | trait Baz: Bar {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `b` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:66:9\n+  --> $DIR/subtrait-method.rs:65:9\n    |\n LL |     foo.b();\n    |         ^ help: there is a method with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Bar` defines an item `b`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:18:1\n+  --> $DIR/subtrait-method.rs:17:1\n    |\n LL | trait Bar: Foo {\n    | ^^^^^^^^^^^^^^\n \n error[E0599]: no method named `c` found for reference `&dyn Foo` in the current scope\n-  --> $DIR/subtrait-method.rs:68:9\n+  --> $DIR/subtrait-method.rs:67:9\n    |\n LL |     foo.c();\n    |         ^ help: there is a method with a similar name: `a`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Baz` defines an item `c`, perhaps you need to implement it\n-  --> $DIR/subtrait-method.rs:28:1\n+  --> $DIR/subtrait-method.rs:27:1\n    |\n LL | trait Baz: Bar {\n    | ^^^^^^^^^^^^^^"}, {"sha": "6bc9f4a75d3338f9aff95bd80db1fa3fa59be204", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo: Bar<i32> + Bar<u32> {}\n trait Bar<T> {"}, {"sha": "fe269d8e99bf55ed0b6f43d7a2288a7a3c022e81", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,5 +1,5 @@\n error[E0605]: non-primitive cast: `&dyn Foo` as `&dyn Bar<_>`\n-  --> $DIR/type-checking-test-1.rs:17:13\n+  --> $DIR/type-checking-test-1.rs:16:13\n    |\n LL |     let _ = x as &dyn Bar<_>; // Ambiguous\n    |             ^^^^^^^^^^^^^^^^ invalid cast\n@@ -10,7 +10,7 @@ LL |     let _ = &x as &dyn Bar<_>; // Ambiguous\n    |             +\n \n error[E0277]: the trait bound `&dyn Foo: Bar<_>` is not satisfied\n-  --> $DIR/type-checking-test-1.rs:17:13\n+  --> $DIR/type-checking-test-1.rs:16:13\n    |\n LL |     let _ = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo`"}, {"sha": "36b11dffdb158ba608caa531a3ad55aaceddf375", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo<T>: Bar<i32> + Bar<T> {}\n trait Bar<T> {"}, {"sha": "ef007d5cb909f9ae1c47e0844d4e9e3531b7e5cc", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,5 +1,5 @@\n error[E0605]: non-primitive cast: `&dyn Foo<i32>` as `&dyn Bar<u32>`\n-  --> $DIR/type-checking-test-2.rs:20:13\n+  --> $DIR/type-checking-test-2.rs:19:13\n    |\n LL |     let _ = x as &dyn Bar<u32>; // Error\n    |             ^^^^^^^^^^^^^^^^^^ invalid cast\n@@ -10,15 +10,15 @@ LL |     let _ = &x as &dyn Bar<u32>; // Error\n    |             +\n \n error[E0277]: the trait bound `&dyn Foo<i32>: Bar<u32>` is not satisfied\n-  --> $DIR/type-checking-test-2.rs:20:13\n+  --> $DIR/type-checking-test-2.rs:19:13\n    |\n LL |     let _ = x as &dyn Bar<u32>; // Error\n    |             ^ the trait `Bar<u32>` is not implemented for `&dyn Foo<i32>`\n    |\n    = note: required for the cast from `&dyn Foo<i32>` to the object type `dyn Bar<u32>`\n \n error[E0605]: non-primitive cast: `&dyn Foo<u32>` as `&dyn Bar<_>`\n-  --> $DIR/type-checking-test-2.rs:26:13\n+  --> $DIR/type-checking-test-2.rs:25:13\n    |\n LL |     let a = x as &dyn Bar<_>; // Ambiguous\n    |             ^^^^^^^^^^^^^^^^ invalid cast\n@@ -29,7 +29,7 @@ LL |     let a = &x as &dyn Bar<_>; // Ambiguous\n    |             +\n \n error[E0277]: the trait bound `&dyn Foo<u32>: Bar<_>` is not satisfied\n-  --> $DIR/type-checking-test-2.rs:26:13\n+  --> $DIR/type-checking-test-2.rs:25:13\n    |\n LL |     let a = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo<u32>`"}, {"sha": "e6cb6a753998f0ec375f47d0be3239f605ef7f98", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-3.polonius.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.polonius.stderr?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,22 +1,18 @@\n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-3.rs:13:13\n+  --> $DIR/type-checking-test-3.rs:11:13\n    |\n LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'a>; // Error\n    |             ^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-3.rs:18:13\n+  --> $DIR/type-checking-test-3.rs:16:13\n    |\n LL | fn test_wrong2<'a>(x: &dyn Foo<'a>) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'static>; // Error\n    |             ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b2db3a127974c3d57bf8da73a6fbcb0e070cca3a", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-3.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo<'a>: Bar<'a> {}\n trait Bar<'a> {}\n@@ -10,12 +9,12 @@ fn test_correct(x: &dyn Foo<'static>) {\n \n fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n     let _ = x as &dyn Bar<'a>; // Error\n-    //~^ ERROR lifetime may not live long enough\n+                               //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong2<'a>(x: &dyn Foo<'a>) {\n     let _ = x as &dyn Bar<'static>; // Error\n-    //~^ ERROR lifetime may not live long enough\n+                                    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "e6cb6a753998f0ec375f47d0be3239f605ef7f98", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-3.stderr?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,13 +1,13 @@\n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-3.rs:12:13\n+  --> $DIR/type-checking-test-3.rs:11:13\n    |\n LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'a>; // Error\n    |             ^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-3.rs:17:13\n+  --> $DIR/type-checking-test-3.rs:16:13\n    |\n LL | fn test_wrong2<'a>(x: &dyn Foo<'a>) {\n    |                -- lifetime `'a` defined here"}, {"sha": "8d506e5807ece13e6819651672937600bf97b49d", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.polonius.stderr", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.polonius.stderr?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,33 +1,52 @@\n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:17:13\n+  --> $DIR/type-checking-test-4.rs:15:13\n    |\n LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'static, 'a>; // Error\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:22:13\n+  --> $DIR/type-checking-test-4.rs:20:13\n    |\n LL | fn test_wrong2<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'a, 'static>; // Error\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:29:5\n+  --> $DIR/type-checking-test-4.rs:26:5\n    |\n LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                -- lifetime `'a` defined here\n-...\n+LL |     let y = x as &dyn Bar<'_, '_>;\n LL |     y.get_b() // ERROR\n    |     ^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-checking-test-4.rs:31:5\n+   |\n+LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                -- lifetime `'a` defined here\n+LL |     <_ as Bar>::get_b(x) // ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-checking-test-4.rs:36:5\n+   |\n+LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                -- lifetime `'a` defined here\n+LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-checking-test-4.rs:44:5\n    |\n-   = help: consider replacing `'a` with `'static`\n+LL | fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n+   |                -- lifetime `'a` defined here\n+...\n+LL |     z.get_b() // ERROR\n+   |     ^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "f40c48f0d125f72a9795b19174fd06651d89644c", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.rs?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,5 +1,4 @@\n #![feature(trait_upcasting)]\n-#![allow(incomplete_features)]\n \n trait Foo<'a>: Bar<'a, 'a> {}\n trait Bar<'a, 'b> {\n@@ -14,36 +13,36 @@ fn test_correct(x: &dyn Foo<'static>) {\n \n fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n     let _ = x as &dyn Bar<'static, 'a>; // Error\n-    //~^ ERROR lifetime may not live long enough\n+                                        //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong2<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n     let _ = x as &dyn Bar<'a, 'static>; // Error\n-    //~^ ERROR lifetime may not live long enough\n+                                        //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n     let y = x as &dyn Bar<'_, '_>;\n     y.get_b() // ERROR\n-    //~^ ERROR lifetime may not live long enough\n+              //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n     <_ as Bar>::get_b(x) // ERROR\n-    //~^ ERROR lifetime may not live long enough\n+                         //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n-    //~^ ERROR lifetime may not live long enough\n+                                 //~^ ERROR lifetime may not live long enough\n }\n \n fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n     let y = x as &dyn Bar<'_, '_>;\n     y.get_b(); // ERROR\n     let z = y;\n     z.get_b() // ERROR\n-    //~^ ERROR lifetime may not live long enough\n+              //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "8d506e5807ece13e6819651672937600bf97b49d", "filename": "src/test/ui/traits/trait-upcasting/type-checking-test-4.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bef2da06294d7dddeccd1f6ede825fb77a31b6fc/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-4.stderr?ref=bef2da06294d7dddeccd1f6ede825fb77a31b6fc", "patch": "@@ -1,21 +1,21 @@\n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:16:13\n+  --> $DIR/type-checking-test-4.rs:15:13\n    |\n LL | fn test_wrong1<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'static, 'a>; // Error\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:21:13\n+  --> $DIR/type-checking-test-4.rs:20:13\n    |\n LL | fn test_wrong2<'a>(x: &dyn Foo<'static>, y: &'a u32) {\n    |                -- lifetime `'a` defined here\n LL |     let _ = x as &dyn Bar<'a, 'static>; // Error\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:27:5\n+  --> $DIR/type-checking-test-4.rs:26:5\n    |\n LL | fn test_wrong3<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                -- lifetime `'a` defined here\n@@ -24,23 +24,23 @@ LL |     y.get_b() // ERROR\n    |     ^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:32:5\n+  --> $DIR/type-checking-test-4.rs:31:5\n    |\n LL | fn test_wrong4<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                -- lifetime `'a` defined here\n LL |     <_ as Bar>::get_b(x) // ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:37:5\n+  --> $DIR/type-checking-test-4.rs:36:5\n    |\n LL | fn test_wrong5<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                -- lifetime `'a` defined here\n LL |     <_ as Bar<'_, '_>>::get_b(x) // ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/type-checking-test-4.rs:45:5\n+  --> $DIR/type-checking-test-4.rs:44:5\n    |\n LL | fn test_wrong6<'a>(x: &dyn Foo<'a>) -> Option<&'static u32> {\n    |                -- lifetime `'a` defined here"}]}