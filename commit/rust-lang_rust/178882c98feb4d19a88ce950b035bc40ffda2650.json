{"sha": "178882c98feb4d19a88ce950b035bc40ffda2650", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ODg4MmM5OGZlYjRkMTlhODhjZTk1MGIwMzViYzQwZmZkYTI2NTA=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@mozilla.com", "date": "2013-02-15T10:44:18Z"}, "committer": {"name": "Luqman Aden", "email": "laden@mozilla.com", "date": "2013-02-15T10:49:55Z"}, "message": "tests/tutorials: Get rid of `move`.", "tree": {"sha": "f3f8581796ba00b5f57a5b6caa0b99ccc3207e04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3f8581796ba00b5f57a5b6caa0b99ccc3207e04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/178882c98feb4d19a88ce950b035bc40ffda2650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/178882c98feb4d19a88ce950b035bc40ffda2650", "html_url": "https://github.com/rust-lang/rust/commit/178882c98feb4d19a88ce950b035bc40ffda2650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/178882c98feb4d19a88ce950b035bc40ffda2650/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e244f103c9622ef0d13b138ec6f8425840201def", "url": "https://api.github.com/repos/rust-lang/rust/commits/e244f103c9622ef0d13b138ec6f8425840201def", "html_url": "https://github.com/rust-lang/rust/commit/e244f103c9622ef0d13b138ec6f8425840201def"}], "stats": {"total": 820, "additions": 409, "deletions": 411}, "files": [{"sha": "14efa3fcead884c040696744668021fc849554a3", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -213,7 +213,7 @@ else enum extern\n false fn for\n if impl\n let log loop\n-match mod move mut\n+match mod mut\n priv pub pure\n ref return\n self static struct super"}, {"sha": "c13b2528598c18c648956dc5bd38e73637c75216", "filename": "doc/tutorial-borrowed-ptr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/doc%2Ftutorial-borrowed-ptr.md", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/doc%2Ftutorial-borrowed-ptr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-borrowed-ptr.md?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -431,7 +431,7 @@ fn example5c(x: @S) -> int {\n         let y = &v.g;\n         ...\n     }\n-    x.f = move v;          // Replace x.f\n+    x.f = v;          // Replace x.f\n     ...\n # return 0;\n }"}, {"sha": "a3d0ecaa4ba6552e21b33ceacc16d70ca4272527", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -161,7 +161,7 @@ use pipes::{stream, Port, Chan};\n \n let (port, chan): (Port<int>, Chan<int>) = stream();\n \n-do spawn |move chan| {\n+do spawn || {\n     let result = some_expensive_computation();\n     chan.send(result);\n }\n@@ -192,7 +192,7 @@ spawns the child task.\n # use pipes::{stream, Port, Chan};\n # fn some_expensive_computation() -> int { 42 }\n # let (port, chan) = stream();\n-do spawn |move chan| {\n+do spawn || {\n     let result = some_expensive_computation();\n     chan.send(result);\n }\n@@ -229,7 +229,7 @@ following program is ill-typed:\n # fn some_expensive_computation() -> int { 42 }\n let (port, chan) = stream();\n \n-do spawn |move chan| {\n+do spawn {\n     chan.send(some_expensive_computation());\n }\n \n@@ -248,12 +248,12 @@ Instead we can use a `SharedChan`, a type that allows a single\n use pipes::{stream, SharedChan};\n \n let (port, chan) = stream();\n-let chan = SharedChan(move chan);\n+let chan = SharedChan(chan);\n \n for uint::range(0, 3) |init_val| {\n     // Create a new channel handle to distribute to the child task\n     let child_chan = chan.clone();\n-    do spawn |move child_chan| {\n+    do spawn {\n         child_chan.send(some_expensive_computation(init_val));\n     }\n }\n@@ -283,10 +283,10 @@ might look like the example below.\n // Create a vector of ports, one for each child task\n let ports = do vec::from_fn(3) |init_val| {\n     let (port, chan) = stream();\n-    do spawn |move chan| {\n+    do spawn {\n         chan.send(some_expensive_computation(init_val));\n     }\n-    move port\n+    port\n };\n \n // Wait on each port, accumulating the results\n@@ -398,13 +398,13 @@ before returning. Hence:\n # fn sleep_forever() { loop { task::yield() } }\n # do task::try {\n let (receiver, sender): (Port<int>, Chan<int>) = stream();\n-do spawn |move receiver| {  // Bidirectionally linked\n+do spawn {  // Bidirectionally linked\n     // Wait for the supervised child task to exist.\n     let message = receiver.recv();\n     // Kill both it and the parent task.\n     assert message != 42;\n }\n-do try |move sender| {  // Unidirectionally linked\n+do try {  // Unidirectionally linked\n     sender.send(42);\n     sleep_forever();  // Will get woken up by force\n }\n@@ -505,7 +505,7 @@ Here is the code for the parent task:\n \n let (from_child, to_child) = DuplexStream();\n \n-do spawn |move to_child| {\n+do spawn {\n     stringifier(&to_child);\n };\n "}, {"sha": "9550dd927fac36c1457e3e16207c0e1c822649b8", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -1260,7 +1260,7 @@ Moving it into a mutable slot makes the elements assignable.\n let crayons: ~[Crayon] = ~[BananaMania, Beaver, Bittersweet];\n \n // Put the vector into a mutable slot\n-let mut mutable_crayons = move crayons;\n+let mut mutable_crayons = crayons;\n \n // Now it's mutable to the bone\n mutable_crayons[0] = Apricot;"}, {"sha": "ad418943ec06c24874c4741bc7866010141bdb4a", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -1229,7 +1229,7 @@ pub fn encode_metadata(parms: encode_parms, crate: &crate) -> ~[u8] {\n     let ecx: @encode_ctxt = @encode_ctxt({\n         diag: parms.diag,\n         tcx: parms.tcx,\n-        stats: @mut move stats,\n+        stats: @mut stats,\n         reachable: parms.reachable,\n         reexports2: parms.reexports2,\n         item_symbols: parms.item_symbols,"}, {"sha": "3ab101bc0b4e83183f08d78ca084b56dfa8a939c", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -27,7 +27,7 @@ pub mod kitties {\n         cat {\n             meows: in_x,\n             how_hungry: in_y,\n-            info: move in_info\n+            info: in_info\n         }\n     }\n }"}, {"sha": "1dfcb31f19638853ef4d965744efbf3dc8ea8cfa", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -27,7 +27,7 @@ fn collect_dvec(num: uint) -> ~[uint] {\n     for uint::range(0u, num) |i| {\n         result.push(i);\n     }\n-    return dvec::unwrap(move result);\n+    return dvec::unwrap(result);\n }\n \n fn main() {"}, {"sha": "5910ade013e8844f595f5d31d802843dc8fe47dd", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -141,7 +141,7 @@ fn bfs(graph: graph, key: node_id) -> bfs_result {\n         };\n     }\n \n-    move marks\n+    marks\n }\n \n /**\n@@ -260,7 +260,7 @@ fn pbfs(&&graph: arc::ARC<graph>, key: node_id) -> bfs_result {\n         i += 1;\n         let old_len = colors.len();\n \n-        let color = arc::ARC(move colors);\n+        let color = arc::ARC(colors);\n \n         let color_vec = arc::get(&color); // FIXME #3387 requires this temp\n         colors = do par::mapi(*color_vec) {"}, {"sha": "bfbc7ecd20ac692e1efa907f4f13d160ba23185a", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -27,7 +27,7 @@ use io::WriterUtil;\n use pipes::{Port, Chan, SharedChan};\n \n macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n+    { $x:expr } => { unsafe { let y = *ptr::addr_of(&($x)); y } }\n )\n \n enum request {\n@@ -58,7 +58,7 @@ fn run(args: &[~str]) {\n     let (from_child, to_parent) = pipes::stream();\n     let (from_parent, to_child) = pipes::stream();\n \n-    let to_child = SharedChan(move to_child);\n+    let to_child = SharedChan(to_child);\n \n     let size = uint::from_str(args[1]).get();\n     let workers = uint::from_str(args[2]).get();\n@@ -68,16 +68,16 @@ fn run(args: &[~str]) {\n     for uint::range(0, workers) |_i| {\n         let to_child = to_child.clone();\n         do task::task().future_result(|+r| {\n-            worker_results.push(move r);\n-        }).spawn |move to_child| {\n+            worker_results.push(r);\n+        }).spawn || {\n             for uint::range(0, size / workers) |_i| {\n                 //error!(\"worker %?: sending %? bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n             //error!(\"worker %? exiting\", i);\n         };\n     }\n-    do task::spawn |move from_parent, move to_parent| {\n+    do task::spawn || {\n         server(from_parent, to_parent);\n     }\n "}, {"sha": "57d9bb49df25ab03bb48a5066f10c2e02a4e9af9", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -23,7 +23,7 @@ use io::WriterUtil;\n use pipes::{Port, PortSet, Chan};\n \n macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n+    { $x:expr } => { unsafe { let y = *ptr::addr_of(&($x)); y } }\n )\n \n enum request {\n@@ -54,7 +54,7 @@ fn run(args: &[~str]) {\n     let (from_child, to_parent) = pipes::stream();\n     let (from_parent_, to_child) = pipes::stream();\n     let from_parent = PortSet();\n-    from_parent.add(move from_parent_);\n+    from_parent.add(from_parent_);\n \n     let size = uint::from_str(args[1]).get();\n     let workers = uint::from_str(args[2]).get();\n@@ -63,18 +63,18 @@ fn run(args: &[~str]) {\n     let mut worker_results = ~[];\n     for uint::range(0, workers) |_i| {\n         let (from_parent_, to_child) = pipes::stream();\n-        from_parent.add(move from_parent_);\n+        from_parent.add(from_parent_);\n         do task::task().future_result(|+r| {\n-            worker_results.push(move r);\n-        }).spawn |move to_child| {\n+            worker_results.push(r);\n+        }).spawn || {\n             for uint::range(0, size / workers) |_i| {\n                 //error!(\"worker %?: sending %? bytes\", i, num_bytes);\n                 to_child.send(bytes(num_bytes));\n             }\n             //error!(\"worker %? exiting\", i);\n         };\n     }\n-    do task::spawn |move from_parent, move to_parent| {\n+    do task::spawn || {\n         server(from_parent, to_parent);\n     }\n "}, {"sha": "9b6fee5e23bc1280046f2d808d975df3324878c7", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -40,26 +40,26 @@ fn recv(p: &pipe) -> uint {\n \n fn init() -> (pipe,pipe) {\n     let m = arc::MutexARC(~[]);\n-    ((&m).clone(), move m)\n+    ((&m).clone(), m)\n }\n \n \n fn thread_ring(i: uint,\n                count: uint,\n                +num_chan: pipe,\n                +num_port: pipe) {\n-    let mut num_chan = move Some(move num_chan);\n-    let mut num_port = move Some(move num_port);\n+    let mut num_chan = Some(num_chan);\n+    let mut num_port = Some(num_port);\n     // Send/Receive lots of messages.\n     for uint::range(0u, count) |j| {\n         //error!(\"task %?, iter %?\", i, j);\n         let mut num_chan2 = option::swap_unwrap(&mut num_chan);\n         let mut num_port2 = option::swap_unwrap(&mut num_port);\n         send(&num_chan2, i * j);\n-        num_chan = Some(move num_chan2);\n+        num_chan = Some(num_chan2);\n         let _n = recv(&num_port2);\n         //log(error, _n);\n-        num_port = Some(move num_port2);\n+        num_port = Some(num_port2);\n     };\n }\n \n@@ -77,7 +77,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = init();\n-    let mut num_chan = Some(move num_chan);\n+    let mut num_chan = Some(num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -89,22 +89,22 @@ fn main() {\n         let (new_chan, num_port) = init();\n         let num_chan2 = ~mut None;\n         *num_chan2 <-> num_chan;\n-        let num_port = ~mut Some(move num_port);\n-        let new_future = future::spawn(|move num_chan2, move num_port| {\n+        let num_port = ~mut Some(num_port);\n+        let new_future = do future::spawn() || {\n             let mut num_chan = None;\n             num_chan <-> *num_chan2;\n             let mut num_port1 = None;\n             num_port1 <-> *num_port;\n             thread_ring(i, msg_per_task,\n-                        option::unwrap(move num_chan),\n-                        option::unwrap(move num_port1))\n-        });\n-        futures.push(move new_future);\n-        num_chan = Some(move new_chan);\n+                        option::unwrap(num_chan),\n+                        option::unwrap(num_port1))\n+        };\n+        futures.push(new_future);\n+        num_chan = Some(new_chan);\n     };\n \n     // do our iteration\n-    thread_ring(0, msg_per_task, option::unwrap(move num_chan), move num_port);\n+    thread_ring(0, msg_per_task, option::unwrap(num_chan), num_port);\n \n     // synchronize\n     for futures.each |f| { f.get() };"}, {"sha": "71ca0f957657506ad3aae844712715234febfe0a", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -29,25 +29,25 @@ proto! ring (\n )\n \n macro_rules! move_out (\n-    ($x:expr) => { unsafe { let y = move *ptr::addr_of(&$x); move y } }\n+    ($x:expr) => { unsafe { let y = *ptr::addr_of(&$x); y } }\n )\n \n fn thread_ring(i: uint,\n                count: uint,\n                +num_chan: ring::client::num,\n                +num_port: ring::server::num) {\n-    let mut num_chan = move Some(move num_chan);\n-    let mut num_port = move Some(move num_port);\n+    let mut num_chan = Some(num_chan);\n+    let mut num_port = Some(num_port);\n     // Send/Receive lots of messages.\n     for uint::range(0, count) |j| {\n         //error!(\"task %?, iter %?\", i, j);\n         let mut num_chan2 = None;\n         let mut num_port2 = None;\n         num_chan2 <-> num_chan;\n         num_port2 <-> num_port;\n-        num_chan = Some(ring::client::num(option::unwrap(move num_chan2), i * j));\n-        let port = option::unwrap(move num_port2);\n-        match recv(move port) {\n+        num_chan = Some(ring::client::num(option::unwrap(num_chan2), i * j));\n+        let port = option::unwrap(num_port2);\n+        match recv(port) {\n           ring::num(_n, p) => {\n             //log(error, _n);\n             num_port = Some(move_out!(p));\n@@ -70,7 +70,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = ring::init();\n-    let mut num_chan = Some(move num_chan);\n+    let mut num_chan = Some(num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -82,23 +82,22 @@ fn main() {\n         let (new_chan, num_port) = ring::init();\n         let num_chan2 = ~mut None;\n         *num_chan2 <-> num_chan;\n-        let num_port = ~mut Some(move num_port);\n-        let new_future = do future::spawn\n-            |move num_chan2, move num_port| {\n+        let num_port = ~mut Some(num_port);\n+        let new_future = do future::spawn || {\n             let mut num_chan = None;\n             num_chan <-> *num_chan2;\n             let mut num_port1 = None;\n             num_port1 <-> *num_port;\n             thread_ring(i, msg_per_task,\n-                        option::unwrap(move num_chan),\n-                        option::unwrap(move num_port1))\n+                        option::unwrap(num_chan),\n+                        option::unwrap(num_port1))\n         };\n-        futures.push(move new_future);\n-        num_chan = Some(move new_chan);\n+        futures.push(new_future);\n+        num_chan = Some(new_chan);\n     };\n \n     // do our iteration\n-    thread_ring(0, msg_per_task, option::unwrap(move num_chan), move num_port);\n+    thread_ring(0, msg_per_task, option::unwrap(num_chan), num_port);\n \n     // synchronize\n     for futures.each |f| { f.get() };"}, {"sha": "eaae8370d6b8b5b2957c1005c95c8b117907cf74", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -40,26 +40,26 @@ fn recv(p: &pipe) -> uint {\n \n fn init() -> (pipe,pipe) {\n     let x = arc::RWARC(~[]);\n-    ((&x).clone(), move x)\n+    ((&x).clone(), x)\n }\n \n \n fn thread_ring(i: uint,\n                count: uint,\n                +num_chan: pipe,\n                +num_port: pipe) {\n-    let mut num_chan = move Some(move num_chan);\n-    let mut num_port = move Some(move num_port);\n+    let mut num_chan = Some(num_chan);\n+    let mut num_port = Some(num_port);\n     // Send/Receive lots of messages.\n     for uint::range(0u, count) |j| {\n         //error!(\"task %?, iter %?\", i, j);\n         let mut num_chan2 = option::swap_unwrap(&mut num_chan);\n         let mut num_port2 = option::swap_unwrap(&mut num_port);\n         send(&num_chan2, i * j);\n-        num_chan = Some(move num_chan2);\n+        num_chan = Some(num_chan2);\n         let _n = recv(&num_port2);\n         //log(error, _n);\n-        num_port = Some(move num_port2);\n+        num_port = Some(num_port2);\n     };\n }\n \n@@ -77,7 +77,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = init();\n-    let mut num_chan = Some(move num_chan);\n+    let mut num_chan = Some(num_chan);\n \n     let start = time::precise_time_s();\n \n@@ -89,23 +89,22 @@ fn main() {\n         let (new_chan, num_port) = init();\n         let num_chan2 = ~mut None;\n         *num_chan2 <-> num_chan;\n-        let num_port = ~mut Some(move num_port);\n-        let new_future = do future::spawn\n-            |move num_chan2, move num_port| {\n+        let num_port = ~mut Some(num_port);\n+        let new_future = do future::spawn || {\n             let mut num_chan = None;\n             num_chan <-> *num_chan2;\n             let mut num_port1 = None;\n             num_port1 <-> *num_port;\n             thread_ring(i, msg_per_task,\n-                        option::unwrap(move num_chan),\n-                        option::unwrap(move num_port1))\n+                        option::unwrap(num_chan),\n+                        option::unwrap(num_port1))\n         };\n-        futures.push(move new_future);\n-        num_chan = Some(move new_chan);\n+        futures.push(new_future);\n+        num_chan = Some(new_chan);\n     };\n \n     // do our iteration\n-    thread_ring(0, msg_per_task, option::unwrap(move num_chan), move num_port);\n+    thread_ring(0, msg_per_task, option::unwrap(num_chan), num_port);\n \n     // synchronize\n     for futures.each |f| { f.get() };"}, {"sha": "39caba9273293ba24bf7f31fdf08a1e9c24515e8", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -35,8 +35,8 @@ fn Noise2DContext() -> ~Noise2DContext {\n     r.shuffle_mut(permutations);\n \n     ~Noise2DContext{\n-        rgradients: move rgradients,\n-        permutations: move permutations,\n+        rgradients: rgradients,\n+        permutations: permutations,\n     }\n }\n "}, {"sha": "11a127b9722f407c2a624cc16e13062883ba7bb6", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -45,36 +45,36 @@ proto! pingpong_unbounded (\n \n // This stuff should go in libcore::pipes\n macro_rules! move_it (\n-    { $x:expr } => { let t = move *ptr::addr_of(&($x)); move t }\n+    { $x:expr } => { let t = *ptr::addr_of(&($x)); t }\n )\n \n macro_rules! follow (\n     {\n         $($message:path($($x: ident),+) -> $next:ident $e:expr)+\n     } => (\n-        |m| match move m {\n-            $(Some($message($($x,)* move next)) => {\n-                let $next = move next;\n-                move $e })+\n+        |m| match m {\n+            $(Some($message($($x,)* next)) => {\n+                let $next = next;\n+                $e })+\n                 _ => { fail!() }\n         }\n     );\n \n     {\n         $($message:path -> $next:ident $e:expr)+\n     } => (\n-        |m| match move m {\n-            $(Some($message(move next)) => {\n-                let $next = move next;\n-                move $e })+\n+        |m| match m {\n+            $(Some($message(next)) => {\n+                let $next = next;\n+                $e })+\n                 _ => { fail!() }\n         }\n     )\n )\n \n fn switch<T: Owned, Tb: Owned, U>(+endp: pipes::RecvPacketBuffered<T, Tb>,\n                       f: fn(+v: Option<T>) -> U) -> U {\n-    f(pipes::try_recv(move endp))\n+    f(pipes::try_recv(endp))\n }\n \n // Here's the benchmark\n@@ -84,10 +84,10 @@ fn bounded(count: uint) {\n \n     let mut ch = do spawn_service(init) |ch| {\n         let mut count = count;\n-        let mut ch = move ch;\n+        let mut ch = ch;\n         while count > 0 {\n-            ch = switch(move ch, follow! (\n-                ping -> next { server::pong(move next) }\n+            ch = switch(ch, follow! (\n+                ping -> next { server::pong(next) }\n             ));\n \n             count -= 1;\n@@ -96,10 +96,10 @@ fn bounded(count: uint) {\n \n     let mut count = count;\n     while count > 0 {\n-        let ch_ = client::ping(move ch);\n+        let ch_ = client::ping(ch);\n \n-        ch = switch(move ch_, follow! (\n-            pong -> next { move next }\n+        ch = switch(ch_, follow! (\n+            pong -> next { next }\n         ));\n \n         count -= 1;\n@@ -111,10 +111,10 @@ fn unbounded(count: uint) {\n \n     let mut ch = do spawn_service(init) |ch| {\n         let mut count = count;\n-        let mut ch = move ch;\n+        let mut ch = ch;\n         while count > 0 {\n-            ch = switch(move ch, follow! (\n-                ping -> next { server::pong(move next) }\n+            ch = switch(ch, follow! (\n+                ping -> next { server::pong(next) }\n             ));\n \n             count -= 1;\n@@ -123,10 +123,10 @@ fn unbounded(count: uint) {\n \n     let mut count = count;\n     while count > 0 {\n-        let ch_ = client::ping(move ch);\n+        let ch_ = client::ping(ch);\n \n-        ch = switch(move ch_, follow! (\n-            pong -> next { move next }\n+        ch = switch(ch_, follow! (\n+            pong -> next { next }\n         ));\n \n         count -= 1;"}, {"sha": "b42ec246ccb975f935c29fc624ac695eaf1e5272", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -156,7 +156,7 @@ fn rendezvous(nn: uint, set: ~[color]) {\n             let to_rendezvous_log = to_rendezvous_log.clone();\n             let (from_rendezvous, to_creature) = stream();\n             let from_rendezvous = Cell(from_rendezvous);\n-            do task::spawn |move ii, move col| {\n+            do task::spawn || {\n                 creature(ii, col, from_rendezvous.take(), to_rendezvous.clone(),\n                          to_rendezvous_log.clone());\n             }"}, {"sha": "b1b169752122eca367540453688e876fd3cd84ab", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -128,7 +128,7 @@ fn make_sequence_processor(sz: uint, from_parent: pipes::Port<~[u8]>,\n         _ => { ~\"\" }\n    };\n \n-    to_parent.send(move buffer);\n+    to_parent.send(buffer);\n }\n \n // given a FASTA file on stdin, process sequence THREE\n@@ -149,23 +149,23 @@ fn main() {\n    // initialize each sequence sorter\n    let sizes = ~[1,2,3,4,6,12,18];\n     let streams = vec::map(sizes, |_sz| Some(stream()));\n-    let mut streams = move streams;\n+    let mut streams = streams;\n     let mut from_child = ~[];\n     let to_child   = vec::mapi(sizes, |ii, sz| {\n         let sz = *sz;\n         let mut stream = None;\n         stream <-> streams[ii];\n-        let (from_child_, to_parent_) = option::unwrap(move stream);\n+        let (from_child_, to_parent_) = option::unwrap(stream);\n \n-        from_child.push(move from_child_);\n+        from_child.push(from_child_);\n \n         let (from_parent, to_child) = pipes::stream();\n \n-        do task::spawn_with(move from_parent) |move to_parent_, from_parent| {\n+        do task::spawn_with(from_parent) |from_parent| {\n             make_sequence_processor(sz, from_parent, to_parent_);\n         };\n \n-        move to_child\n+        to_child\n     });\n \n "}, {"sha": "5ab9b068d0b0eae8d1f8ebef742cced9f2248d6b", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -172,7 +172,7 @@ fn main() {\n     let pchan = pipes::SharedChan(pchan);\n     for uint::range(0_u, size) |j| {\n         let cchan = pchan.clone();\n-        do task::spawn |move cchan| { cchan.send(chanmb(j, size)) };\n+        do task::spawn || { cchan.send(chanmb(j, size)) };\n     };\n     writer(path, pport, size);\n }"}, {"sha": "2c9da65cc13accd2f57d41e79d7052d50362b5e1", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -43,15 +43,15 @@ fn fib(n: int) -> int {\n         } else {\n             let p = pipes::PortSet();\n             let ch = p.chan();\n-            task::spawn(|move ch| pfib(ch, n - 1) );\n+            task::spawn(|| pfib(ch, n - 1) );\n             let ch = p.chan();\n-            task::spawn(|move ch| pfib(ch, n - 2) );\n+            task::spawn(|| pfib(ch, n - 2) );\n             c.send(p.recv() + p.recv());\n         }\n     }\n \n     let (p, ch) = pipes::stream();\n-    let _t = task::spawn(|move ch| pfib(ch, n) );\n+    let _t = task::spawn(|| pfib(ch, n) );\n     p.recv()\n }\n \n@@ -86,7 +86,7 @@ fn stress(num_tasks: int) {\n     let mut results = ~[];\n     for range(0, num_tasks) |i| {\n         do task::task().future_result(|+r| {\n-            results.push(move r);\n+            results.push(r);\n         }).spawn {\n             stress_task(i);\n         }"}, {"sha": "b4b02c3aaa8d45c1b195330c21dafa0d80bda600", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -99,6 +99,6 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n           }\n         };\n \n-        recurse_or_fail(depth, Some(move st));\n+        recurse_or_fail(depth, Some(st));\n     }\n }"}, {"sha": "f2441755a7b1dab0f1f78ab72bdf21e9f64cd7b7", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -19,14 +19,14 @@ fn child_generation(gens_left: uint, -c: pipes::Chan<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed.\n     // With this code, only as many generations are alive at a time as tasks\n     // alive at a time,\n-    let c = ~mut Some(move c);\n-    do task::spawn_supervised |move c| {\n+    let c = ~mut Some(c);\n+    do task::spawn_supervised || {\n         let c = option::swap_unwrap(c);\n         if gens_left & 1 == 1 {\n             task::yield(); // shake things up a bit\n         }\n         if gens_left > 0 {\n-            child_generation(gens_left - 1, move c); // recurse\n+            child_generation(gens_left - 1, c); // recurse\n         } else {\n             c.send(())\n         }\n@@ -44,7 +44,7 @@ fn main() {\n     };\n \n     let (p,c) = pipes::stream();\n-    child_generation(uint::from_str(args[1]).get(), move c);\n+    child_generation(uint::from_str(args[1]).get(), c);\n     if p.try_recv().is_none() {\n         fail!(~\"it happened when we slumbered\");\n     }"}, {"sha": "3b6ececaef90a5d9953cc37e1e931eade0a07858", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -46,9 +46,9 @@ fn grandchild_group(num_tasks: uint) {\n \n fn spawn_supervised_blocking(myname: &str, +f: fn~()) {\n     let mut res = None;\n-    task::task().future_result(|+r| res = Some(move r)).supervised().spawn(move f);\n+    task::task().future_result(|+r| res = Some(r)).supervised().spawn(f);\n     error!(\"%s group waiting\", myname);\n-    let x = option::unwrap(move res).recv();\n+    let x = option::unwrap(res).recv();\n     assert x == task::Success;\n }\n "}, {"sha": "e9bc4a5e195d795b740f5777d86d8abd6e359baf", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-1.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -18,8 +18,8 @@ impl Drop for X {\n \n fn main() {\n     let x = Some(X { x: () });\n-    match move x {\n-        Some(ref _y @ move _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n+    match x {\n+        Some(ref _y @ _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n         None => fail!()\n     }\n }"}, {"sha": "6548adddf1956aa4651c0e8063bb93603aa3d940", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-2.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -18,8 +18,8 @@ impl Drop for X {\n \n fn main() {\n     let x = Some((X { x: () }, X { x: () }));\n-    match move x {\n-        Some((ref _y, move _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n+    match x {\n+        Some((ref _y, _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n         None => fail!()\n     }\n }"}, {"sha": "aaa9d9f920a6aa52777fc9a41e98012d90aa07b1", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-3.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -20,8 +20,8 @@ enum double_option<T,U> { some2(T,U), none2 }\n \n fn main() {\n     let x = some2(X { x: () }, X { x: () });\n-    match move x {\n-        some2(ref _y, move _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n+    match x {\n+        some2(ref _y, _z) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n         none2 => fail!()\n     }\n }"}, {"sha": "b5686b64c810be3391cbf916949fd62c313a2d9d", "filename": "src/test/compile-fail/bind-by-move-neither-can-live-while-the-other-survives-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-neither-can-live-while-the-other-survives-4.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -18,8 +18,8 @@ impl Drop for X {\n \n fn main() {\n     let x = Some((X { x: () }, X { x: () }));\n-    match move x {\n-        Some((move _y, ref _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n+    match x {\n+        Some((_y, ref _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n         None => fail!()\n     }\n }"}, {"sha": "40a444df12d368b162f370d26edb7259af85d5fb", "filename": "src/test/compile-fail/bind-by-move-no-guards.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -12,9 +12,9 @@ fn main() {\n     let (p,c) = pipes::stream();\n     let x = Some(p);\n     c.send(false);\n-    match move x {\n-        Some(move z) if z.recv() => { fail!() }, //~ ERROR cannot bind by-move into a pattern guard\n-        Some(move z) => { assert !z.recv(); },\n+    match x {\n+        Some(z) if z.recv() => { fail!() }, //~ ERROR cannot bind by-move into a pattern guard\n+        Some(z) => { assert !z.recv(); },\n         None => fail!()\n     }\n }"}, {"sha": "c8537afa1905e59f5e46232d37087f584e6b138f", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -21,7 +21,7 @@ impl Drop for X {\n fn main() {\n     let x = Some(X { x: () });\n     match x {\n-        Some(move _z) => { }, //~ ERROR cannot bind by-move when matching an lvalue\n+        Some(_z) => { }, //~ ERROR cannot bind by-move when matching an lvalue\n         None => fail!()\n     }\n }"}, {"sha": "26b1084c09172e13df0551c4215051803e282359", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -23,7 +23,7 @@ struct Y { y: Option<X> }\n fn main() {\n     let x = Y { y: Some(X { x: () }) };\n     match x.y {\n-        Some(move _z) => { }, //~ ERROR cannot bind by-move when matching an lvalue\n+        Some(_z) => { }, //~ ERROR cannot bind by-move when matching an lvalue\n         None => fail!()\n     }\n }"}, {"sha": "c86158be5ea7f5a11ffcdeffdcd9a613dc2b0ca6", "filename": "src/test/compile-fail/bind-by-move-no-sub-bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-sub-bindings.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -18,8 +18,8 @@ impl Drop for X {\n \n fn main() {\n     let x = Some(X { x: () });\n-    match move x {\n-        Some(move _y @ ref _z) => { }, //~ ERROR cannot bind by-move with sub-bindings\n+    match x {\n+        Some(_y @ ref _z) => { }, //~ ERROR cannot bind by-move with sub-bindings\n         None => fail!()\n     }\n }"}, {"sha": "7b6484fd4aadb649f2c1d11273af65310dd7e288", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -20,6 +20,6 @@ impl Add<foo, foo> for foo {\n \n fn main() {\n     let x = foo(~3);\n-    let _y = x + move x;\n+    let _y = x + x;\n     //~^ ERROR moving out of immutable local variable prohibited due to outstanding loan\n }"}, {"sha": "8f332646bbccde96b333d7c8f8ecb5c908fe40de", "filename": "src/test/compile-fail/borrowck-move-from-unsafe-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-unsafe-ptr.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo(x: *~int) -> ~int {\n-    let y = move *x; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n+    let y = *x; //~ ERROR dereference of unsafe pointer requires unsafe function or block\n     return y;\n }\n "}, {"sha": "cec81d8a6ef5b4c39935f9aefd3a887944e97f92", "filename": "src/test/compile-fail/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-element-loan.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -4,7 +4,7 @@ fn a() -> &[int] {\n         [_a, ..tail] => tail,\n         _ => fail!(~\"foo\")\n     };\n-    move tail\n+    tail\n }\n \n fn main() {"}, {"sha": "714a80def9358de21f52a8d8633c88e079919b43", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -4,7 +4,7 @@ fn a() -> &int {\n         [_a, ..tail] => &tail[0],\n         _ => fail!(~\"foo\")\n     };\n-    move tail\n+    tail\n }\n \n fn main() {"}, {"sha": "f1b31d66b3f685b20666288e06e6676a8b028966", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -23,7 +23,7 @@ fn foo(i:int) -> foo {\n }\n \n fn main() {\n-    let x = move foo(10);\n+    let x = foo(10);\n     let _y = copy x;\n     //~^ ERROR copying a value of non-copyable type `foo`\n     log(error, x);"}, {"sha": "951944e24857f6dda47b26e4c6f1d87dcbb60255", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -34,7 +34,7 @@ fn main() {\n         let mut res = foo(x);\n \n         let mut v = ~[];\n-        v = move ~[(move res)] + v; //~ instantiating a type parameter with an incompatible type `foo`, which does not fulfill `Copy`\n+        v = ~[(res)] + v; //~ instantiating a type parameter with an incompatible type `foo`, which does not fulfill `Copy`\n         assert (v.len() == 2);\n     }\n "}, {"sha": "a71826c629b6c89e92e828da298edebe959142c4", "filename": "src/test/compile-fail/issue-3177-mutable-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3177-mutable-struct.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -17,5 +17,5 @@ struct S<T: Const> {\n \n fn main() {\n     let a1  = ~S{ s: true, cant_nest: () };\n-    let _a2 = ~S{ s: move a1, cant_nest: () };\n+    let _a2 = ~S{ s: a1, cant_nest: () };\n }"}, {"sha": "c88dae232fa0615f21711a0fd82597087e543203", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     let x = @3u;\n     let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n     let _ = fn~(copy x) { foo(x); }; //~ ERROR value has non-owned type `@uint`\n-    let _ = fn~(move x) { foo(x); }; //~ ERROR value has non-owned type `@uint`\n+    let _ = fn~() { foo(x); }; //~ ERROR value has non-owned type `@uint`\n }"}, {"sha": "970abf4fd94b06864561298dae9fc9e70437cd2a", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -68,5 +68,5 @@ impl Drop for r {\n \n fn main() {\n     let x = r { x: () };\n-    fn@(move x) { copy x; }; //~ ERROR copying a value of non-copyable type\n+    fn@() { copy x; }; //~ ERROR copying a value of non-copyable type\n }"}, {"sha": "42bad88633cff40315db2266bdc929c2ddb2603f", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -37,7 +37,7 @@ fn foo(i:int) -> foo {\n }\n \n fn main() {\n-    let x = move foo(10);\n+    let x = foo(10);\n     let _y = copy x; //~ ERROR copying a value of non-copyable type\n     log(error, x);\n }"}, {"sha": "12eef71f38bb3f07cbe53dc859b73da1e2bcb932", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -17,7 +17,7 @@ impl Drop for r {\n }\n \n fn main() {\n-    let i = move ~r { b: true };\n+    let i = ~r { b: true };\n     let _j = copy i; //~ ERROR copying a value of non-copyable type\n     log(debug, i);\n }"}, {"sha": "d36b53eb2ee719729b6638ef486cc724f0b01c15", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -13,5 +13,5 @@ fn f<T: Owned>(_i: T) {\n \n fn main() {\n     let i = ~@100;\n-    f(move i); //~ ERROR does not fulfill `Owned`\n+    f(i); //~ ERROR does not fulfill `Owned`\n }"}, {"sha": "4ff9dd6f9914ef0ea2d2b6a22706c0f02e3c90a3", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -24,8 +24,8 @@ fn f<T>(+_i: ~[T], +_j: ~[T]) {\n fn main() {\n     let i1 = @mut 0;\n     let i2 = @mut 1;\n-    let r1 = move ~[~r { i: i1 }];\n-    let r2 = move ~[~r { i: i2 }];\n+    let r1 = ~[~r { i: i1 }];\n+    let r2 = ~[~r { i: i2 }];\n     f(copy r1, copy r2);\n     //~^ ERROR copying a value of non-copyable type\n     //~^^ ERROR copying a value of non-copyable type"}, {"sha": "8e9ce5f97fc1da0ecc59c3c1026118c051f6f0d1", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -26,5 +26,5 @@ fn foo(i:int, j: @~str) -> foo {\n fn main() {\n   let cat = ~\"kitty\";\n     let (_, ch) = pipes::stream(); //~ ERROR does not fulfill `Owned`\n-  ch.send(foo(42, @(move cat))); //~ ERROR does not fulfill `Owned`\n+  ch.send(foo(42, @(cat))); //~ ERROR does not fulfill `Owned`\n }"}, {"sha": "b06f91d50f25cf0ba24720fa07d56b680f441dc5", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -22,8 +22,8 @@ impl Drop for r {\n \n fn main() {\n     // This can't make sense as it would copy the classes\n-    let i = move ~[r(0)];\n-    let j = move ~[r(1)];\n+    let i = ~[r(0)];\n+    let j = ~[r(1)];\n     let k = i + j;\n     log(debug, j);\n }"}, {"sha": "9dcdaacb3c1a43c824d29532a480da3d67ddc0f2", "filename": "src/test/run-fail/out-of-stack-managed-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Fout-of-stack-managed-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Fout-of-stack-managed-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fout-of-stack-managed-box.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -15,11 +15,11 @@\n \n // error-pattern:ran out of stack\n fn main() {\n-    eat(move @0);\n+    eat(@0);\n }\n \n fn eat(\n     +a: @int\n ) {\n-    eat(move a)\n+    eat(a)\n }"}, {"sha": "d4bc70f43ef6e768ffb960729221ce5e8d95444c", "filename": "src/test/run-fail/out-of-stack-owned-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Fout-of-stack-owned-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Fout-of-stack-owned-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fout-of-stack-owned-box.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,11 +11,11 @@\n // xfail-test\n // error-pattern:ran out of stack\n fn main() {\n-    eat(move ~0);\n+    eat(~0);\n }\n \n fn eat(\n     +a: ~int\n ) {\n-    eat(move a)\n+    eat(a)\n }"}, {"sha": "ba8f2fa37cb3b86338f18bd36d201aa4c98c4bc3", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -36,7 +36,7 @@ fn main() {\n     unsafe {\n         let i1 = ~0;\n         let i1p = cast::reinterpret_cast(&i1);\n-        cast::forget(move i1);\n+        cast::forget(i1);\n         let x = @r(i1p);\n         failfn();\n         log(error, x);"}, {"sha": "6d52046b3e2fe8dcbb9b9edd2eb41a42782aa303", "filename": "src/test/run-fail/unwind-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-closure.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -16,6 +16,6 @@ fn f(a: @int) {\n \n fn main() {\n     let b = @0;\n-    let g : fn@() = |move b|f(b);\n+    let g : fn@() = || f(b);\n     g();\n }"}, {"sha": "b2d30688ec55db08be40bc046714288d5bf8d38c", "filename": "src/test/run-fail/unwind-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Funwind-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Funwind-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-move.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -15,5 +15,5 @@ fn f(-_a: @int) {\n \n fn main() {\n     let a = @0;\n-    f(move a);\n+    f(a);\n }"}, {"sha": "0d57e9279bc72bbc313e42efb80fab6436bfe5d1", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -19,5 +19,5 @@ fn r(i: int) -> r { r { i: i } }\n \n fn main() {\n     @0;\n-    let r = move r(0);\n+    let r = r(0);\n }"}, {"sha": "0b33326abe7190bee5728d953acf3fc0a1e6773e", "filename": "src/test/run-fail/unwind-resource-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -20,6 +20,6 @@ fn r(i: int) -> r { r { i: i } }\n \n fn main() {\n     @0;\n-    let r = move r(0);\n+    let r = r(0);\n     fail!();\n }"}, {"sha": "4474aec3d2e503be58632a711f8e4eb145080329", "filename": "src/test/run-pass/alt-ref-binding-in-guard-3256.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n     let x = Some(private::exclusive(true));\n-    match move x {\n+    match x {\n         Some(ref z) if z.with(|b| *b) => {\n             do z.with |b| { assert *b; }\n         },"}, {"sha": "ba9266b8a30f2c4963622b4b88b176930556dc04", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -24,7 +24,7 @@ fn f2(a: int, f: fn(int)) -> int { f(1); return a; }\n \n pub fn main() {\n     let mut a = X {mut x: 1}, b = 2, c = 3;\n-    assert (f1(a, &mut b, move c) == 6);\n+    assert (f1(a, &mut b, c) == 6);\n     assert (a.x == 0);\n     assert (b == 10);\n     assert (f2(a.x, |x| a.x = 50 ) == 0);"}, {"sha": "d4171ceb70fd2a9ab69fb35e1793f71df9d399c5", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -46,7 +46,7 @@ fn test_ebml<A:\n         let ebml_w = &EBWriter::Encoder(wr);\n         a1.encode(ebml_w)\n     };\n-    let d = EBReader::Doc(@move bytes);\n+    let d = EBReader::Doc(@bytes);\n     let a2: A = Decodable::decode(&EBReader::Decoder(d));\n     assert *a1 == a2;\n }"}, {"sha": "87f70d00f8c9f24b97476be0048ab99b94412b29", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -14,7 +14,7 @@ trait Pushable<T> {\n \n impl<T> Pushable<T> for ~[T] {\n     fn push_val(&mut self, +t: T) {\n-        self.push(move t);\n+        self.push(t);\n     }\n }\n "}, {"sha": "1e836740f8e81d244de611d0ea692f07287af956", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -17,8 +17,8 @@ fn dispose(+_x: arc::ARC<bool>) unsafe { }\n pub fn main() {\n     let p = arc::arc(true);\n     let x = Some(p);\n-    match move x {\n-        Some(move z) => { dispose(z); },\n+    match x {\n+        Some(z) => { dispose(z); },\n         None => fail!()\n     }\n }"}, {"sha": "2d83e9746b580951f258bc2625405315e8a3ced8", "filename": "src/test/run-pass/borrowck-move-from-unsafe-ptr-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -12,7 +12,7 @@\n \n fn bar(x: *~int) -> ~int {\n     unsafe {\n-        let y = move *x;\n+        let y = *x;\n         return y;\n     }\n }"}, {"sha": "e27434400c1851d1faf2347ae5f83ad33d52b246", "filename": "src/test/run-pass/cap-clause-move.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,21 +11,21 @@\n pub fn main() {\n     let x = ~1;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let lam_move = fn@(move x) -> uint { ptr::addr_of(&(*x)) as uint };\n+    let lam_move = fn@() -> uint { ptr::addr_of(&(*x)) as uint };\n     assert lam_move() == y;\n \n     let x = ~2;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let lam_move: fn@() -> uint = |move x| ptr::addr_of(&(*x)) as uint;\n+    let lam_move: fn@() -> uint = || ptr::addr_of(&(*x)) as uint;\n     assert lam_move() == y;\n \n     let x = ~3;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let snd_move = fn~(move x) -> uint { ptr::addr_of(&(*x)) as uint };\n+    let snd_move = fn~() -> uint { ptr::addr_of(&(*x)) as uint };\n     assert snd_move() == y;\n \n     let x = ~4;\n     let y = ptr::addr_of(&(*x)) as uint;\n-    let lam_move: fn~() -> uint = |move x| ptr::addr_of(&(*x)) as uint;\n+    let lam_move: fn~() -> uint = || ptr::addr_of(&(*x)) as uint;\n     assert lam_move() == y;\n }"}, {"sha": "5ef5e55b7293eac539af2a4a53e142b7943a82a8", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -26,7 +26,7 @@ fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {\n     cat {\n         meows: in_x,\n         how_hungry: in_y,\n-        info: move in_info\n+        info: in_info\n     }\n }\n "}, {"sha": "cb8b1c5f25f270675fbc61f054d9c31758bba374", "filename": "src/test/run-pass/dvec-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdvec-test.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -31,6 +31,6 @@ pub fn main() {\n         assert *e == exp[i];\n     }\n \n-    let v = dvec::unwrap(move d);\n+    let v = dvec::unwrap(d);\n     assert v == exp;\n }"}, {"sha": "c875b805ea3ca9e185e11c9b57b7c95c90aeca74", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,7 +11,7 @@\n // This is what the signature to spawn should look like with bare functions\n \n fn spawn<T: Owned>(val: T, f: extern fn(T)) {\n-    f(move val);\n+    f(val);\n }\n \n fn f(+i: int) {"}, {"sha": "6a12704d4b4b52d62017cc27ec50c5ac2a528ce9", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -39,7 +39,7 @@ mod map_reduce {\n         for inputs.each |i| {\n             let ctrl = ctrl.clone();\n             let i = copy *i;\n-            task::spawn(|move i| map_task(ctrl.clone(), copy i) );\n+            task::spawn(|| map_task(ctrl.clone(), copy i) );\n         }\n     }\n "}, {"sha": "0185b19b481771d3941b957605db1771a10395c6", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -32,15 +32,15 @@ fn r(i: @mut int) -> r {\n fn test_box() {\n     let i = @mut 0;\n     {\n-        let a = move @r(i);\n+        let a = @r(i);\n     }\n     assert *i == 1;\n }\n \n fn test_rec() {\n     let i = @mut 0;\n     {\n-        let a = move Box {x: r(i)};\n+        let a = Box {x: r(i)};\n     }\n     assert *i == 1;\n }\n@@ -52,31 +52,31 @@ fn test_tag() {\n \n     let i = @mut 0;\n     {\n-        let a = move t0(r(i));\n+        let a = t0(r(i));\n     }\n     assert *i == 1;\n }\n \n fn test_tup() {\n     let i = @mut 0;\n     {\n-        let a = move (r(i), 0);\n+        let a = (r(i), 0);\n     }\n     assert *i == 1;\n }\n \n fn test_unique() {\n     let i = @mut 0;\n     {\n-        let a = move ~r(i);\n+        let a = ~r(i);\n     }\n     assert *i == 1;\n }\n \n fn test_box_rec() {\n     let i = @mut 0;\n     {\n-        let a = move @Box {\n+        let a = @Box {\n             x: r(i)\n         };\n     }"}, {"sha": "9e8e9d8bc15be1998a915122b8a587df63047aae", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n     unsafe {\n         let mut x = @1;\n         let mut y = @2;\n-        rusti::move_val(&mut y, move x);\n+        rusti::move_val(&mut y, x);\n         assert *y == 1;\n     }\n }"}, {"sha": "42c6ae38b6afbf7c22461b454cf7f279b0ceeca5", "filename": "src/test/run-pass/issue-1895.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-1895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-1895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1895.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -10,7 +10,7 @@\n \n pub fn main() {\n   let x = 1;\n-  let y = fn@(move x) -> int {\n+  let y = fn@() -> int {\n              x\n           }();\n }"}, {"sha": "f3f7f4dacbad4acc5db73f87d5b5b690de68e0ee", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -35,11 +35,11 @@ fn filter<A,IA:iterable<A>>(self: IA, prd: fn@(A) -> bool, blk: fn(A)) {\n }\n \n fn foldl<A,B,IA:iterable<A>>(self: IA, +b0: B, blk: fn(B, A) -> B) -> B {\n-    let mut b = move b0;\n+    let mut b = b0;\n     do self.iter |a| {\n-        b = move blk(b, a);\n+        b = blk(b, a);\n     }\n-    move b\n+    b\n }\n \n fn range(lo: uint, hi: uint, it: fn(uint)) {"}, {"sha": "ba7cf0cc45fbca97342a7262c40f2e52ea3ab836", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -61,39 +61,39 @@ pub mod pipes {\n     // We should consider moving this to ::core::unsafe, although I\n     // suspect graydon would want us to use void pointers instead.\n     pub unsafe fn uniquify<T>(+x: *T) -> ~T {\n-        unsafe { cast::transmute(move x) }\n+        unsafe { cast::transmute(x) }\n     }\n \n     pub fn swap_state_acq(+dst: &mut state, src: state) -> state {\n         unsafe {\n-            transmute(rusti::atomic_xchg_acq(transmute(move dst), src as int))\n+            transmute(rusti::atomic_xchg_acq(transmute(dst), src as int))\n         }\n     }\n \n     pub fn swap_state_rel(+dst: &mut state, src: state) -> state {\n         unsafe {\n-            transmute(rusti::atomic_xchg_rel(transmute(move dst), src as int))\n+            transmute(rusti::atomic_xchg_rel(transmute(dst), src as int))\n         }\n     }\n \n     pub fn send<T: Owned>(-p: send_packet<T>, -payload: T) {\n         let p = p.unwrap();\n         let p = unsafe { uniquify(p) };\n         assert (*p).payload.is_none();\n-        (*p).payload = move Some(move payload);\n+        (*p).payload = Some(payload);\n         let old_state = swap_state_rel(&mut (*p).state, full);\n         match old_state {\n           empty => {\n             // Yay, fastpath.\n \n             // The receiver will eventually clean this up.\n-            unsafe { forget(move p); }\n+            unsafe { forget(p); }\n           }\n           full => { fail!(~\"duplicate send\") }\n           blocked => {\n \n             // The receiver will eventually clean this up.\n-            unsafe { forget(move p); }\n+            unsafe { forget(p); }\n           }\n           terminated => {\n             // The receiver will never receive this. Rely on drop_glue\n@@ -113,7 +113,7 @@ pub mod pipes {\n               full => {\n                 let mut payload = None;\n                 payload <-> (*p).payload;\n-                return Some(option::unwrap(move payload))\n+                return Some(option::unwrap(payload))\n               }\n               terminated => {\n                 assert old_state == terminated;\n@@ -128,7 +128,7 @@ pub mod pipes {\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty | blocked => {\n             // The receiver will eventually clean up.\n-            unsafe { forget(move p) }\n+            unsafe { forget(p) }\n           }\n           full => {\n             // This is impossible\n@@ -145,7 +145,7 @@ pub mod pipes {\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty => {\n             // the sender will clean up\n-            unsafe { forget(move p) }\n+            unsafe { forget(p) }\n           }\n           blocked => {\n             // this shouldn't happen.\n@@ -166,7 +166,7 @@ pub mod pipes {\n             if self.p != None {\n                 let mut p = None;\n                 p <-> self.p;\n-                sender_terminate(option::unwrap(move p))\n+                sender_terminate(option::unwrap(p))\n             }\n         }\n     }\n@@ -175,7 +175,7 @@ pub mod pipes {\n         fn unwrap() -> *packet<T> {\n             let mut p = None;\n             p <-> self.p;\n-            option::unwrap(move p)\n+            option::unwrap(p)\n         }\n     }\n \n@@ -194,7 +194,7 @@ pub mod pipes {\n             if self.p != None {\n                 let mut p = None;\n                 p <-> self.p;\n-                receiver_terminate(option::unwrap(move p))\n+                receiver_terminate(option::unwrap(p))\n             }\n         }\n     }\n@@ -203,7 +203,7 @@ pub mod pipes {\n         fn unwrap() -> *packet<T> {\n             let mut p = None;\n             p <-> self.p;\n-            option::unwrap(move p)\n+            option::unwrap(p)\n         }\n     }\n \n@@ -231,9 +231,9 @@ pub mod pingpong {\n             let addr : *::pipes::send_packet<pong> = match &p {\n               &ping(ref x) => { cast::transmute(ptr::addr_of(x)) }\n             };\n-            let liberated_value = move *addr;\n-            cast::forget(move p);\n-            move liberated_value\n+            let liberated_value = *addr;\n+            cast::forget(p);\n+            liberated_value\n         }\n     }\n \n@@ -242,9 +242,9 @@ pub mod pingpong {\n             let addr : *::pipes::send_packet<ping> = match &p {\n               &pong(ref x) => { cast::transmute(ptr::addr_of(x)) }\n             };\n-            let liberated_value = move *addr;\n-            cast::forget(move p);\n-            move liberated_value\n+            let liberated_value = *addr;\n+            cast::forget(p);\n+            liberated_value\n         }\n     }\n \n@@ -262,16 +262,16 @@ pub mod pingpong {\n         pub fn do_ping(-c: ping) -> pong {\n             let (sp, rp) = ::pipes::entangle();\n \n-            ::pipes::send(move c, pingpong::ping(move sp));\n-            move rp\n+            ::pipes::send(c, pingpong::ping(sp));\n+            rp\n         }\n \n         pub fn do_pong(-c: pong) -> (ping, ()) {\n-            let packet = ::pipes::recv(move c);\n+            let packet = ::pipes::recv(c);\n             if packet.is_none() {\n                 fail!(~\"sender closed the connection\")\n             }\n-            (pingpong::liberate_pong(option::unwrap(move packet)), ())\n+            (pingpong::liberate_pong(option::unwrap(packet)), ())\n         }\n     }\n \n@@ -282,32 +282,32 @@ pub mod pingpong {\n         pub type pong = ::pipes::send_packet<pingpong::pong>;\n \n         pub fn do_ping(-c: ping) -> (pong, ()) {\n-            let packet = ::pipes::recv(move c);\n+            let packet = ::pipes::recv(c);\n             if packet.is_none() {\n                 fail!(~\"sender closed the connection\")\n             }\n-            (pingpong::liberate_ping(option::unwrap(move packet)), ())\n+            (pingpong::liberate_ping(option::unwrap(packet)), ())\n         }\n \n         pub fn do_pong(-c: pong) -> ping {\n             let (sp, rp) = ::pipes::entangle();\n-            ::pipes::send(move c, pingpong::pong(move sp));\n-            move rp\n+            ::pipes::send(c, pingpong::pong(sp));\n+            rp\n         }\n     }\n }\n \n fn client(-chan: pingpong::client::ping) {\n-    let chan = pingpong::client::do_ping(move chan);\n+    let chan = pingpong::client::do_ping(chan);\n     log(error, ~\"Sent ping\");\n-    let (_chan, _data) = pingpong::client::do_pong(move chan);\n+    let (_chan, _data) = pingpong::client::do_pong(chan);\n     log(error, ~\"Received pong\");\n }\n \n fn server(-chan: pingpong::server::ping) {\n-    let (chan, _data) = pingpong::server::do_ping(move chan);\n+    let (chan, _data) = pingpong::server::do_ping(chan);\n     log(error, ~\"Received ping\");\n-    let _chan = pingpong::server::do_pong(move chan);\n+    let _chan = pingpong::server::do_pong(chan);\n     log(error, ~\"Sent pong\");\n }\n \n@@ -319,12 +319,12 @@ pub fn main() {\n     let client_ = ~mut Some(client_);\n     let server_ = ~mut Some(server_);\n \n-    task::spawn {|move client_|\n+    task::spawn {|client_|\n         let mut client__ = none;\n         *client_ <-> client__;\n         client(option::unwrap(client__));\n     };\n-    task::spawn {|move server_|\n+    task::spawn {|server_|\n         let mut server_\u02ca = none;\n         *server_ <-> server_\u02ca;\n         server(option::unwrap(server_\u02ca));"}, {"sha": "84e0f20e61b11eb40e44005c2fb4250d3e1c3576", "filename": "src/test/run-pass/issue-2834.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2834.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -19,7 +19,7 @@ proto! streamp (\n \n fn rendezvous() {\n     let (c, s) = streamp::init();\n-    let streams: ~[streamp::client::open<int>] = ~[move c];\n+    let streams: ~[streamp::client::open<int>] = ~[c];\n \n     error!(\"%?\", streams[0]);\n }"}, {"sha": "9a726bedbc340939326ec0b56ad03d996cf48983", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -60,7 +60,7 @@ fn square_from_char(c: char) -> square {\n }\n \n fn read_board_grid<rdr: &static io::Reader>(+in: rdr) -> ~[~[square]] {\n-    let in = (move in) as io::Reader;\n+    let in = (in) as io::Reader;\n     let mut grid = ~[];\n     for in.each_line |line| {\n         let mut row = ~[];"}, {"sha": "6d22a2ea5edcf26737ee4a0c84bd17d5508b3e0b", "filename": "src/test/run-pass/issue-2930.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-2930.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-2930.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2930.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -17,5 +17,5 @@ proto! stream (\n pub fn main() {\n     let (bc, _bp) = stream::init();\n \n-    stream::client::send(move bc, ~\"abc\");\n+    stream::client::send(bc, ~\"abc\");\n }"}, {"sha": "d40bf6e32cf87a7aa2f682c0f3b09c8707c8529c", "filename": "src/test/run-pass/issue-3168.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-3168.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3168.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -12,15 +12,15 @@\n \n pub fn main() {\n     let (p,c) = pipes::stream();\n-    do task::try |move c| {\n+    do task::try || {\n         let (p2,c2) = pipes::stream();\n-        do task::spawn |move p2| {\n+        do task::spawn || {\n             p2.recv();\n             error!(\"sibling fails\");\n             fail!();\n         }   \n         let (p3,c3) = pipes::stream();\n-        c.send(move c3);\n+        c.send(c3);\n         c2.send(());\n         error!(\"child blocks\");\n         p3.recv();"}, {"sha": "fac73d07b6642188bbffd4637b49cfa526754958", "filename": "src/test/run-pass/issue-3176.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-3176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3176.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -14,19 +14,19 @@ use pipes::{Select2, Selectable};\n \n pub fn main() {\n     let (p,c) = pipes::stream();\n-    do task::try |move c| {\n+    do task::try || {\n         let (p2,c2) = pipes::stream();\n-        do task::spawn |move p2| {\n+        do task::spawn || {\n             p2.recv();\n             error!(\"sibling fails\");\n             fail!();\n         }   \n         let (p3,c3) = pipes::stream();\n-        c.send(move c3);\n+        c.send(c3);\n         c2.send(());\n         error!(\"child blocks\");\n         let (p, c) = pipes::stream();\n-        (move p, move p3).select();\n+        (p, p3).select();\n         c.send(());\n     };  \n     error!(\"parent tries\");"}, {"sha": "ef65531e5546f51ce986d3cd3915ec5374082122", "filename": "src/test/run-pass/issue-3220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-3220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3220.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -23,5 +23,5 @@ impl thing { fn f(self) {} }\n \n pub fn main() {\n     let z = thing();\n-    (move z).f();\n+    (z).f();\n }"}, {"sha": "0bcc5983eb719590cc49a84064e626d819cba37a", "filename": "src/test/run-pass/issue-3447.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-3447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3447.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -20,7 +20,7 @@ impl<T> list<T>{\n             next: option::None\n         };\n \n-        self.next = Some(@(move newList));\n+        self.next = Some(@(newList));\n     }\n }\n "}, {"sha": "a5791e3834351bdbcdc1994f6c88802582dd8e20", "filename": "src/test/run-pass/issue-3878.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3878.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,5 +11,5 @@\n pub fn main()\n {\n     let y = ~1;\n-    move y;\n+    y;\n }"}, {"sha": "307d7974762f733ac9d923454507b420d931f5a2", "filename": "src/test/run-pass/issue-4016.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4016.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -20,7 +20,7 @@ trait JD : Deserializable<json::Deserializer> { }\n \n fn exec<T: JD>() {\n     let doc = result::unwrap(json::from_str(\"\"));\n-    let _v: T = deserialize(&json::Deserializer(move doc));\n+    let _v: T = deserialize(&json::Deserializer(doc));\n     fail!()\n }\n "}, {"sha": "e8083dd3f6b215339d407f6ca293ec65a0017c0f", "filename": "src/test/run-pass/last-use-in-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-block.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -13,14 +13,14 @@\n fn lp<T>(s: ~str, f: fn(~str) -> T) -> T {\n     while false {\n         let r = f(s);\n-        return (move r);\n+        return (r);\n     }\n     fail!();\n }\n \n fn apply<T>(s: ~str, f: fn(~str) -> T) -> T {\n     fn g<T>(s: ~str, f: fn(~str) -> T) -> T {f(s)}\n-    g(s, |v| { let r = f(v); move r })\n+    g(s, |v| { let r = f(v); r })\n }\n \n pub fn main() {}"}, {"sha": "2fd2cc9d22b8125cc4df4c0b5b895e6899fddb2e", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -15,7 +15,7 @@ struct A { a: ~int }\n fn foo() -> fn@() -> int {\n     let k = ~22;\n     let _u = A {a: copy k};\n-    return fn@(move k) -> int { 22 };\n+    return fn@() -> int { 22 };\n }\n \n pub fn main() {"}, {"sha": "8c4b7d57bc201df3ae8463e259ccab8c5fc3f3b9", "filename": "src/test/run-pass/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -15,7 +15,7 @@ fn the_loop() {\n     loop {\n         let x = 5;\n         if x > 3 {\n-            list += ~[take(move x)];\n+            list += ~[take(x)];\n         } else {\n             break;\n         }"}, {"sha": "152dcb3d4a7a7efc3fe2e3edc0da44ec676fcb3d", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -21,7 +21,7 @@ struct V<T> { v: ~[option<T>] }\n \n fn mk<T>() -> @Smallintmap<T> {\n     let mut v: ~[option<T>] = ~[];\n-    return @Smallintmap {mut v: move v};\n+    return @Smallintmap {mut v: v};\n }\n \n fn f<T,U>() {"}, {"sha": "b5af07207bccd2325f36732957af163aa014f2b1", "filename": "src/test/run-pass/monomorphized-callees-with-ty-params-3314.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -25,7 +25,7 @@ struct F<A> { a: A }\n \n impl<A: Copy Serializable> Serializable for F<A> {\n     fn serialize<S: Serializer>(s: S) {\n-        self.a.serialize(move s);\n+        self.a.serialize(s);\n     }\n }\n "}, {"sha": "45ba5eb97481176fc70584ec375b46ed26229e85", "filename": "src/test/run-pass/move-1-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -13,7 +13,7 @@ struct Triple { x: int, y: int, z: int }\n fn test(x: bool, foo: ~Triple) -> int {\n     let bar = foo;\n     let mut y: ~Triple;\n-    if x { y = move bar; } else { y = ~Triple{x: 4, y: 5, z: 6}; }\n+    if x { y = bar; } else { y = ~Triple{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n "}, {"sha": "35cbe6e080cc814175a3ea37d6c09dd7768e051f", "filename": "src/test/run-pass/move-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -13,7 +13,7 @@ struct Triple { x: int, y: int, z: int }\n fn test(x: bool, foo: @Triple) -> int {\n     let bar = foo;\n     let mut y: @Triple;\n-    if x { y = move bar; } else { y = @Triple{x: 4, y: 5, z: 6}; }\n+    if x { y = bar; } else { y = @Triple{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n "}, {"sha": "bc3b5405f1867a92c7239bdded37984adab189be", "filename": "src/test/run-pass/move-2-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,4 +11,4 @@\n \n struct X { x: int, y: int, z: int }\n \n-pub fn main() { let x = ~X{x: 1, y: 2, z: 3}; let y = move x; assert (y.y == 2); }\n+pub fn main() { let x = ~X{x: 1, y: 2, z: 3}; let y = x; assert (y.y == 2); }"}, {"sha": "23ec3a178c15a5acd52f6048e1628b392369f879", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,4 +11,4 @@\n \n struct X { x: int, y: int, z: int }\n \n-pub fn main() { let x = @X {x: 1, y: 2, z: 3}; let y = move x; assert (y.y == 2); }\n+pub fn main() { let x = @X {x: 1, y: 2, z: 3}; let y = x; assert (y.y == 2); }"}, {"sha": "82b8d2c96092197a12c0bd73d34c69de674dc83b", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -15,7 +15,7 @@ struct Triple { x: int, y: int, z: int }\n fn test(x: bool, foo: ~Triple) -> int {\n     let bar = foo;\n     let mut y: ~Triple;\n-    if x { y = move bar; } else { y = ~Triple {x: 4, y: 5, z: 6}; }\n+    if x { y = bar; } else { y = ~Triple {x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n "}, {"sha": "161dc55f8a34b34ae2c5d1fbcc1a8ec2458d01a7", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -15,7 +15,7 @@ struct Triple { x: int, y: int, z: int }\n fn test(x: bool, foo: @Triple) -> int {\n     let bar = foo;\n     let mut y: @Triple;\n-    if x { y = move bar; } else { y = @Triple{x: 4, y: 5, z: 6}; }\n+    if x { y = bar; } else { y = @Triple{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n "}, {"sha": "8845bdfffe146bfd09c1e87d0754de6fa95d7cbc", "filename": "src/test/run-pass/move-4-unique.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -14,9 +14,9 @@ struct Triple {a: int, b: int, c: int}\n \n fn test(foo: ~Triple) -> ~Triple {\n     let foo = foo;\n-    let bar = move foo;\n-    let baz = move bar;\n-    let quux = move baz;\n+    let bar = foo;\n+    let baz = bar;\n+    let quux = baz;\n     return quux;\n }\n "}, {"sha": "1a5432620d3088a44a4065c72366190477c60eb8", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -15,9 +15,9 @@ struct Triple { a: int, b: int, c: int }\n \n fn test(foo: @Triple) -> @Triple {\n     let foo = foo;\n-    let bar = move foo;\n-    let baz = move bar;\n-    let quux = move baz;\n+    let bar = foo;\n+    let baz = bar;\n+    let quux = baz;\n     return quux;\n }\n "}, {"sha": "21969418c3451769bf0df414be71d12dfd289c3d", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -13,7 +13,7 @@ fn test(-foo: ~~[int]) { assert (foo[0] == 10); }\n pub fn main() {\n     let x = ~~[10];\n     // Test forgetting a local by move-in\n-    test(move x);\n+    test(x);\n \n     // Test forgetting a temporary by move-in.\n     test(~~[10]);"}, {"sha": "8c843d2da682feb2816dd1c706232096390bf12b", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -13,7 +13,7 @@ fn test(-foo: @~[int]) { assert (foo[0] == 10); }\n pub fn main() {\n     let x = @~[10];\n     // Test forgetting a local by move-in\n-    test(move x);\n+    test(x);\n \n     // Test forgetting a temporary by move-in.\n     test(@~[10]);"}, {"sha": "570fa6ee39166651267720e6ec82425fad68c758", "filename": "src/test/run-pass/move-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -10,4 +10,4 @@\n \n fn test(-foo: int) { assert (foo == 10); }\n \n-pub fn main() { let x = 10; test(move x); }\n+pub fn main() { let x = 10; test(x); }"}, {"sha": "0114eeefbfb2d8da7b34bde238179534a7191351", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -12,7 +12,7 @@\n fn f2(-thing: fn@()) { }\n \n fn f(-thing: fn@()) {\n-    f2(move thing);\n+    f2(thing);\n }\n \n pub fn main() {"}, {"sha": "a7ddc4e4cdbe2032eba4e1ad4c9a87f0cb417ba5", "filename": "src/test/run-pass/move-scalar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-scalar.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -12,6 +12,6 @@ pub fn main() {\n \n     let y: int = 42;\n     let mut x: int;\n-    x = move y;\n+    x = y;\n     assert (x == 42);\n }"}, {"sha": "37ce1bce9e65973858b295af5bbd4bf6fc851137", "filename": "src/test/run-pass/move-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fmove-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-self.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -4,7 +4,7 @@ struct S {\n \n impl S {\n     fn foo(self) {\n-        (move self).bar();\n+        self.bar();\n     }\n \n     fn bar(self) {"}, {"sha": "2a1f94a1d8cdf61b4f55524d666ed1d682e3e70f", "filename": "src/test/run-pass/non-legacy-modes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -13,7 +13,7 @@ struct X {\n }\n \n fn apply<T>(x: T, f: fn(T)) {\n-    f(move x);\n+    f(x);\n }\n \n fn check_int(x: int) {"}, {"sha": "7616ff5007eee8d0f24f2d9b1b153a4fd30a42cc", "filename": "src/test/run-pass/option-unwrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Foption-unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-unwrap.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -21,8 +21,8 @@ impl Drop for dtor {\n }\n \n fn unwrap<T>(+o: Option<T>) -> T {\n-    match move o {\n-      Some(move v) => move v,\n+    match o {\n+      Some(v) => v,\n       None => fail!()\n     }\n }\n@@ -32,7 +32,7 @@ pub fn main() {\n \n     {\n         let b = Some(dtor { x:x });\n-        let c = unwrap(move b);\n+        let c = unwrap(b);\n     }\n \n     assert *x == 0;"}, {"sha": "bc218e71ede9b690b62f1e4a228c20562a9fb143", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -44,21 +44,21 @@ proto! bank (\n )\n \n macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y = move *ptr::addr_of(&($x)); move y } }\n+    { $x:expr } => { unsafe { let y = *ptr::addr_of(&($x)); y } }\n )\n \n fn switch<T: Owned, U>(+endp: pipes::RecvPacket<T>,\n                       f: fn(+v: Option<T>) -> U) -> U {\n-    f(pipes::try_recv(move endp))\n+    f(pipes::try_recv(endp))\n }\n \n-fn move_it<T>(-x: T) -> T { move x }\n+fn move_it<T>(-x: T) -> T { x }\n \n macro_rules! follow (\n     {\n         $($message:path$(($($x: ident),+))||* -> $next:ident $e:expr)+\n     } => (\n-        |m| match move m {\n+        |m| match m {\n           $(Some($message($($($x,)+)* next)) => {\n             let $next = move_it!(next);\n             $e })+\n@@ -70,15 +70,15 @@ macro_rules! follow (\n fn client_follow(+bank: bank::client::login) {\n     use bank::*;\n \n-    let bank = client::login(move bank, ~\"theincredibleholk\", ~\"1234\");\n-    let bank = switch(move bank, follow! (\n-        ok -> connected { move connected }\n+    let bank = client::login(bank, ~\"theincredibleholk\", ~\"1234\");\n+    let bank = switch(bank, follow! (\n+        ok -> connected { connected }\n         invalid -> _next { fail!(~\"bank closed the connected\") }\n     ));\n \n-    let bank = client::deposit(move bank, 100.00);\n-    let bank = client::withdrawal(move bank, 50.00);\n-    switch(move bank, follow! (\n+    let bank = client::deposit(bank, 100.00);\n+    let bank = client::withdrawal(bank, 50.00);\n+    switch(bank, follow! (\n         money(m) -> _next {\n             io::println(~\"Yay! I got money!\");\n         }\n@@ -91,18 +91,18 @@ fn client_follow(+bank: bank::client::login) {\n fn bank_client(+bank: bank::client::login) {\n     use bank::*;\n \n-    let bank = client::login(move bank, ~\"theincredibleholk\", ~\"1234\");\n-    let bank = match try_recv(move bank) {\n+    let bank = client::login(bank, ~\"theincredibleholk\", ~\"1234\");\n+    let bank = match try_recv(bank) {\n       Some(ok(connected)) => {\n         move_it!(connected)\n       }\n       Some(invalid(_)) => { fail!(~\"login unsuccessful\") }\n       None => { fail!(~\"bank closed the connection\") }\n     };\n \n-    let bank = client::deposit(move bank, 100.00);\n-    let bank = client::withdrawal(move bank, 50.00);\n-    match try_recv(move bank) {\n+    let bank = client::deposit(bank, 100.00);\n+    let bank = client::withdrawal(bank, 50.00);\n+    match try_recv(bank) {\n       Some(money(*)) => {\n         io::println(~\"Yay! I got money!\");\n       }"}, {"sha": "2d765423988419035d70d81ea44f581c9dcfdc0c", "filename": "src/test/run-pass/pipe-detect-term.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -32,7 +32,7 @@ pub fn main() {\n     let iotask = &uv::global_loop::get();\n     \n     pipes::spawn_service(oneshot::init, |p| { \n-        match try_recv(move p) {\n+        match try_recv(p) {\n           Some(*) => { fail!() }\n           None => { }\n         }\n@@ -47,11 +47,11 @@ pub fn main() {\n fn failtest() {\n     let (c, p) = oneshot::init();\n \n-    do task::spawn_with(move c) |_c| { \n+    do task::spawn_with(c) |_c| { \n         fail!();\n     }\n \n-    error!(\"%?\", recv(move p));\n+    error!(\"%?\", recv(p));\n     // make sure we get killed if we missed it in the receive.\n     loop { task::yield() }\n }"}, {"sha": "baa5ba5bf00a82d7b62414511caac0b24d8938ad", "filename": "src/test/run-pass/pipe-peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-peek.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -27,7 +27,7 @@ pub fn main() {\n \n     assert !pipes::peek(&p);\n \n-    oneshot::client::signal(move c);\n+    oneshot::client::signal(c);\n \n     assert pipes::peek(&p);\n }"}, {"sha": "b13b262e8645e85fff0d33254ce6dd0f3f6e585d", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -36,7 +36,7 @@ mod pingpong {\n                 pong: mk_packet::<pong>()\n             }\n         };\n-        do pipes::entangle_buffer(move buffer) |buffer, data| {\n+        do pipes::entangle_buffer(buffer) |buffer, data| {\n             data.ping.set_buffer(buffer);\n             data.pong.set_buffer(buffer);\n             ptr::addr_of(&(data.ping))\n@@ -53,9 +53,9 @@ mod pingpong {\n                 let b = pipe.reuse_buffer();\n                 let s = SendPacketBuffered(ptr::addr_of(&(b.buffer.data.pong)));\n                 let c = RecvPacketBuffered(ptr::addr_of(&(b.buffer.data.pong)));\n-                let message = ::pingpong::ping(move s);\n-                ::pipes::send(move pipe, move message);\n-                move c\n+                let message = ::pingpong::ping(s);\n+                ::pipes::send(pipe, message);\n+                c\n             }\n         }\n         pub type ping = pipes::SendPacketBuffered<::pingpong::ping,\n@@ -74,9 +74,9 @@ mod pingpong {\n                 let b = pipe.reuse_buffer();\n                 let s = SendPacketBuffered(ptr::addr_of(&(b.buffer.data.ping)));\n                 let c = RecvPacketBuffered(ptr::addr_of(&(b.buffer.data.ping)));\n-                let message = ::pingpong::pong(move s);\n-                ::pipes::send(move pipe, move message);\n-                move c\n+                let message = ::pingpong::pong(s);\n+                ::pipes::send(pipe, message);\n+                c\n             }\n         }\n         pub type pong = pipes::SendPacketBuffered<::pingpong::pong,\n@@ -91,34 +91,34 @@ mod test {\n     pub fn client(-chan: ::pingpong::client::ping) {\n         use pingpong::client;\n \n-        let chan = client::ping(move chan); return;\n+        let chan = client::ping(chan); return;\n         log(error, \"Sent ping\");\n-        let pong(_chan) = recv(move chan);\n+        let pong(_chan) = recv(chan);\n         log(error, \"Received pong\");\n     }\n     \n     pub fn server(-chan: ::pingpong::server::ping) {\n         use pingpong::server;\n \n-        let ping(chan) = recv(move chan); return;\n+        let ping(chan) = recv(chan); return;\n         log(error, \"Received ping\");\n-        let _chan = server::pong(move chan);\n+        let _chan = server::pong(chan);\n         log(error, \"Sent pong\");\n     }\n }\n \n pub fn main() {\n     let (client_, server_) = ::pingpong::init();\n-    let client_ = ~mut Some(move client_);\n-    let server_ = ~mut Some(move server_);\n-    do task::spawn |move client_| {\n+    let client_ = ~mut Some(client_);\n+    let server_ = ~mut Some(server_);\n+    do task::spawn || {\n         let mut client__ = None;\n         *client_ <-> client__;\n-        test::client(option::unwrap(move client__));\n+        test::client(option::unwrap(client__));\n     };\n-    do task::spawn |move server_| {\n+    do task::spawn || {\n         let mut server_\u02ca = None;\n         *server_ <-> server_\u02ca;\n-        test::server(option::unwrap(move server_\u02ca));\n+        test::server(option::unwrap(server_\u02ca));\n     };\n }"}, {"sha": "0d71a2c37d162e369c034e195ef09b1b0aa22800", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -33,35 +33,35 @@ mod test {\n     pub fn client(-chan: ::pingpong::client::ping) {\n         use pingpong::client;\n \n-        let chan = client::ping(move chan);\n+        let chan = client::ping(chan);\n         log(error, ~\"Sent ping\");\n-        let pong(_chan) = recv(move chan);\n+        let pong(_chan) = recv(chan);\n         log(error, ~\"Received pong\");\n     }\n     \n     pub fn server(-chan: ::pingpong::server::ping) {\n         use pingpong::server;\n \n-        let ping(chan) = recv(move chan);\n+        let ping(chan) = recv(chan);\n         log(error, ~\"Received ping\");\n-        let _chan = server::pong(move chan);\n+        let _chan = server::pong(chan);\n         log(error, ~\"Sent pong\");\n     }\n }\n \n pub fn main() {\n     let (client_, server_) = pingpong::init();\n-    let client_ = ~mut Some(move client_);\n-    let server_ = ~mut Some(move server_);\n+    let client_ = ~mut Some(client_);\n+    let server_ = ~mut Some(server_);\n \n-    do task::spawn |move client_| {\n+    do task::spawn || {\n         let mut client__ = None;\n         *client_ <-> client__;\n-        test::client(option::unwrap(move client__));\n+        test::client(option::unwrap(client__));\n     };\n-    do task::spawn |move server_| {\n+    do task::spawn || {\n         let mut server_\u02ca = None;\n         *server_ <-> server_\u02ca;\n-        test::server(option::unwrap(move server_\u02ca));\n+        test::server(option::unwrap(server_\u02ca));\n     };\n }"}, {"sha": "5fd1bb276c1e85496e75eb216f167d1bbd96f353", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -34,10 +34,10 @@ macro_rules! select_if (\n         ], )*\n     } => {\n         if $index == $count {\n-            match move pipes::try_recv(move $port) {\n-              $(Some($message($($(move $x,)+)* move next)) => {\n-                let $next = move next;\n-                move $e\n+            match pipes::try_recv($port) {\n+              $(Some($message($($($x,)+)* next)) => {\n+                let $next = next;\n+                $e\n               })+\n               _ => fail!()\n             }\n@@ -105,33 +105,33 @@ fn render(_buffer: &Buffer) {\n }\n \n fn draw_frame(+channel: double_buffer::client::acquire) {\n-    let channel = request(move channel);\n+    let channel = request(channel);\n     select! (\n         channel => {\n             give_buffer(buffer) -> channel {\n                 render(&buffer);\n-                release(move channel, move buffer)\n+                release(channel, buffer)\n             }\n         }\n     );\n }\n \n fn draw_two_frames(+channel: double_buffer::client::acquire) {\n-    let channel = request(move channel);\n+    let channel = request(channel);\n     let channel = select! (\n         channel => {\n             give_buffer(buffer) -> channel {\n                 render(&buffer);\n-                release(move channel, move buffer)\n+                release(channel, buffer)\n             }\n         }\n     );\n-    let channel = request(move channel);\n+    let channel = request(channel);\n     select! (\n         channel => {\n             give_buffer(buffer) -> channel {\n                 render(&buffer);\n-                release(move channel, move buffer)\n+                release(channel, buffer)\n             }\n         }\n     );\n@@ -152,7 +152,7 @@ fn draw_two_frames_bad1(+channel: double_buffer::client::acquire) {\n         channel => {\n             give_buffer(buffer) -> channel {\n                 render(&buffer);\n-                release(channel, move buffer)\n+                release(channel, buffer)\n             }\n         }\n     );\n@@ -165,9 +165,9 @@ fn draw_two_frames_bad2(+channel: double_buffer::client::acquire) {\n         channel => {\n             give_buffer(buffer) -> channel {\n                 render(&buffer);\n-                release(channel, move buffer);\n+                release(channel, buffer);\n                 render(&buffer);\n-                release(channel, move buffer);\n+                release(channel, buffer);\n             }\n         }\n     );"}, {"sha": "0bf739139cfe18716c1d3b288696a6008ca2ad8f", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -41,24 +41,24 @@ pub fn main() {\n     \n     let c = pipes::spawn_service(stream::init, |p| { \n         error!(\"waiting for pipes\");\n-        let stream::send(x, p) = recv(move p);\n+        let stream::send(x, p) = recv(p);\n         error!(\"got pipes\");\n         let (left, right) : (oneshot::server::waiting,\n                              oneshot::server::waiting)\n-            = move x;\n+            = x;\n         error!(\"selecting\");\n-        let (i, _, _) = select(~[move left, move right]);\n+        let (i, _, _) = select(~[left, right]);\n         error!(\"selected\");\n         assert i == 0;\n \n         error!(\"waiting for pipes\");\n-        let stream::send(x, _) = recv(move p);\n+        let stream::send(x, _) = recv(p);\n         error!(\"got pipes\");\n         let (left, right) : (oneshot::server::waiting,\n                              oneshot::server::waiting)\n-            = move x;\n+            = x;\n         error!(\"selecting\");\n-        let (i, m, _) = select(~[move left, move right]);\n+        let (i, m, _) = select(~[left, right]);\n         error!(\"selected %?\", i);\n         if m.is_some() {\n             assert i == 1;\n@@ -68,20 +68,20 @@ pub fn main() {\n     let (c1, p1) = oneshot::init();\n     let (_c2, p2) = oneshot::init();\n \n-    let c = send(move c, (move p1, move p2));\n+    let c = send(c, (p1, p2));\n     \n     sleep(iotask, 100);\n \n-    signal(move c1);\n+    signal(c1);\n \n     let (_c1, p1) = oneshot::init();\n     let (c2, p2) = oneshot::init();\n \n-    send(move c, (move p1, move p2));\n+    send(c, (p1, p2));\n \n     sleep(iotask, 100);\n \n-    signal(move c2);\n+    signal(c2);\n \n     test_select2();\n }\n@@ -90,26 +90,26 @@ fn test_select2() {\n     let (ac, ap) = stream::init();\n     let (bc, bp) = stream::init();\n \n-    stream::client::send(move ac, 42);\n+    stream::client::send(ac, 42);\n \n-    match pipes::select2(move ap, move bp) {\n+    match pipes::select2(ap, bp) {\n       either::Left(*) => { }\n       either::Right(*) => { fail!() }\n     }\n \n-    stream::client::send(move bc, ~\"abc\");\n+    stream::client::send(bc, ~\"abc\");\n \n     error!(\"done with first select2\");\n \n     let (ac, ap) = stream::init();\n     let (bc, bp) = stream::init();\n \n-    stream::client::send(move bc, ~\"abc\");\n+    stream::client::send(bc, ~\"abc\");\n \n-    match pipes::select2(move ap, move bp) {\n+    match pipes::select2(ap, bp) {\n       either::Left(*) => { fail!() }\n       either::Right(*) => { }\n     }\n \n-    stream::client::send(move ac, 42);\n+    stream::client::send(ac, 42);\n }"}, {"sha": "521c400489e95620eac83d53edfee3fc37ef5b06", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -26,10 +26,10 @@ proto! oneshot (\n pub fn main() {\n     use oneshot::client::*;\n \n-    let c = pipes::spawn_service(oneshot::init, |p| { recv(move p); });\n+    let c = pipes::spawn_service(oneshot::init, |p| { recv(p); });\n \n     let iotask = &uv::global_loop::get();\n     sleep(iotask, 500);\n     \n-    signal(move c);\n+    signal(c);\n }"}, {"sha": "ff3e115eda9b0caaefcc36ab3ec4eb4268f918fd", "filename": "src/test/run-pass/regions-copy-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-copy-closure.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -13,7 +13,7 @@ struct closure_box {\n }\n \n fn box_it(+x: &r/fn()) -> closure_box/&r {\n-    closure_box {cl: move x}\n+    closure_box {cl: x}\n }\n \n pub fn main() {"}, {"sha": "00f5e695475a28c9bc412f2cf46dc576286981ff", "filename": "src/test/run-pass/regions-static-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-closure.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -13,7 +13,7 @@ struct closure_box {\n }\n \n fn box_it(+x: &r/fn()) -> closure_box/&r {\n-    closure_box {cl: move x}\n+    closure_box {cl: x}\n }\n \n fn call_static_closure(cl: closure_box/&static) {\n@@ -22,5 +22,5 @@ fn call_static_closure(cl: closure_box/&static) {\n \n pub fn main() {\n     let cl_box = box_it(|| debug!(\"Hello, world!\"));\n-    call_static_closure(move cl_box);\n+    call_static_closure(cl_box);\n }"}, {"sha": "af3c92db8f6a16bb4e73b001fc227dc8f61e034c", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -29,8 +29,8 @@ pub fn main() {\n     // Even though these look like copies, they are guaranteed not to be\n     {\n         let a = r(i);\n-        let b = (move a, 10);\n-        let (c, _d) = move b;\n+        let b = (a, 10);\n+        let (c, _d) = b;\n         log(debug, c);\n     }\n     assert *i == 1;"}, {"sha": "d47d56b6021b31d48116e86be7a469bf08ef4c94", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -45,18 +45,18 @@ pub fn main() {\n     unsafe {\n         let i1 = ~0;\n         let i1p = cast::reinterpret_cast(&i1);\n-        cast::forget(move i1);\n+        cast::forget(i1);\n         let i2 = ~0;\n         let i2p = cast::reinterpret_cast(&i2);\n-        cast::forget(move i2);\n+        cast::forget(i2);\n \n         let x1 = @t(Node{\n             mut next: None,\n               r: {\n               let rs = r(i1p);\n               debug!(\"r = %x\",\n                      cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&rs)));\n-              move rs }\n+              rs }\n         });\n         \n         debug!(\"x1 = %x, x1.r = %x\",\n@@ -69,7 +69,7 @@ pub fn main() {\n               let rs = r(i2p);\n               debug!(\"r2 = %x\",\n                      cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&rs)));\n-              move rs\n+              rs\n                 }\n         });\n         "}, {"sha": "1b39093c7d05cc7e82d40afad210063c13d980e2", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -45,10 +45,10 @@ pub fn main() {\n     unsafe {\n         let i1 = ~0xA;\n         let i1p = cast::reinterpret_cast(&i1);\n-        cast::forget(move i1);\n+        cast::forget(i1);\n         let i2 = ~0xA;\n         let i2p = cast::reinterpret_cast(&i2);\n-        cast::forget(move i2);\n+        cast::forget(i2);\n \n         let u1 = U {a: 0xB, b: 0xC, c: i1p};\n         let u2 = U {a: 0xB, b: 0xC, c: i2p};"}, {"sha": "036ca2496698c1399ff0c6313a7d3ef86c7b5c05", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -54,10 +54,10 @@ pub fn main() {\n     unsafe {\n         let i1 = ~0xA;\n         let i1p = cast::reinterpret_cast(&i1);\n-        cast::forget(move i1);\n+        cast::forget(i1);\n         let i2 = ~0xA;\n         let i2p = cast::reinterpret_cast(&i2);\n-        cast::forget(move i2);\n+        cast::forget(i2);\n \n         let u1 = U {a: 0xB, b: 0xC, c: i1p};\n         let u2 = U {a: 0xB, b: 0xC, c: i2p};"}, {"sha": "3dc4ca7bd61dc13a7aa891564fca33d4cb479fce", "filename": "src/test/run-pass/resource-destruct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-destruct.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -30,7 +30,7 @@ fn shrinky_pointer(i: @@mut int) -> shrinky_pointer {\n \n pub fn main() {\n     let my_total = @@mut 10;\n-    { let pt = move shrinky_pointer(my_total); assert (pt.look_at() == 10); }\n+    { let pt = shrinky_pointer(my_total); assert (pt.look_at() == 10); }\n     log(error, fmt!(\"my_total = %d\", **my_total));\n     assert (**my_total == 9);\n }"}, {"sha": "eb25f20607f41544b9e554468e7f9375b82e58c4", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -33,6 +33,6 @@ pub fn main() {\n     let box = @mut 10;\n     fn dec_box(&&i: @mut int) { *i -= 1; }\n \n-    { let _i = move finish(Arg{val: box, fin: dec_box}); }\n+    { let _i = finish(Arg{val: box, fin: dec_box}); }\n     assert (*box == 9);\n }"}, {"sha": "cefed420546eab56909af6b1e297421e1a6eeca7", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -46,7 +46,7 @@ pub fn main() {\n         };\n         let fptr = cast::reinterpret_cast(&ptr::addr_of(&f));\n         rustrt::start_task(new_task_id, fptr);\n-        cast::forget(move f);\n+        cast::forget(f);\n         po.recv();\n     }\n }"}, {"sha": "d576875be10d8575fe88fcb765be9d15dc6340d8", "filename": "src/test/run-pass/select-macro.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fselect-macro.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -27,18 +27,18 @@ macro_rules! select_if (\n         $count:expr,\n         $port:path => [\n             $(type_this $message:path$(($(x $x: ident),+))dont_type_this*\n-              -> $next:ident => { move $e:expr }),+\n+              -> $next:ident => { $e:expr }),+\n         ]\n         $(, $ports:path => [\n             $(type_this $messages:path$(($(x $xs: ident),+))dont_type_this*\n-              -> $nexts:ident => { move $es:expr }),+\n+              -> $nexts:ident => { $es:expr }),+\n         ] )*\n     } => {\n         if $index == $count {\n-            match move pipes::try_recv($port) {\n-              $(Some($message($($(move $x,)+)* move next)) => {\n-                let $next = move next;\n-                move $e\n+            match pipes::try_recv($port) {\n+              $(Some($message($($($x,)+)* next)) => {\n+                let $next = next;\n+                $e\n               })+\n               _ => fail!()\n             }\n@@ -48,7 +48,7 @@ macro_rules! select_if (\n                 $count + 1\n                 $(, $ports => [\n                     $(type_this $messages$(($(x $xs),+))dont_type_this*\n-                      -> $nexts => { move $es }),+\n+                      -> $nexts => { $es }),+\n                 ])*\n             )\n         }\n@@ -64,7 +64,7 @@ macro_rules! select (\n     } => {\n         let index = pipes::selecti([$(($port).header()),+]);\n         select_if!(index, 0 $(, $port => [\n-            $(type_this $message$(($(x $x),+))dont_type_this* -> $next => { move $e }),+\n+            $(type_this $message$(($(x $x),+))dont_type_this* -> $next => { $e }),+\n         ])+)\n     }\n )"}, {"sha": "fce0889e0a9b8bfbfc913799d011cc49eecdfd56", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -20,7 +20,7 @@ fn test05() {\n         log(error, *three + n); // will copy x into the closure\n         assert(*three == 3);\n     };\n-    task::spawn(fn~(move fn_to_send) {\n+    task::spawn(fn~() {\n         test05_start(fn_to_send);\n     });\n }"}, {"sha": "da79bf53fe06c9deedfc4c19c2249fb58d265b21", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -23,13 +23,13 @@ fn andand<T: bool_like Copy>(x1: T, x2: T) -> T {\n \n impl bool_like for bool {\n     static fn select<A>(&&b: bool, +x1: A, +x2: A) -> A {\n-        if b { move x1 } else { move x2 }\n+        if b { x1 } else { x2 }\n     }\n }\n \n impl bool_like for int {\n     static fn select<A>(&&b: int, +x1: A, +x2: A) -> A {\n-        if b != 0 { move x1 } else { move x2 }\n+        if b != 0 { x1 } else { x2 }\n     }\n }\n "}, {"sha": "aa8a2a9146cbc6466fcfcace5a25e4b60ecec766", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -29,7 +29,7 @@ fn test05_start(ch : Chan<int>) {\n \n fn test05() {\n     let (po, ch) = pipes::stream();\n-    task::spawn(|move ch| test05_start(ch) );\n+    task::spawn(|| test05_start(ch) );\n     let mut value = po.recv();\n     log(error, value);\n     value = po.recv();"}, {"sha": "289a728efc39a535a1ca0d1f99032905177fb340", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -15,7 +15,7 @@ extern mod std;\n \n fn start(c: pipes::Chan<pipes::Chan<~str>>) {\n     let (p, ch) = pipes::stream();\n-    c.send(move ch);\n+    c.send(ch);\n \n     let mut a;\n     let mut b;\n@@ -24,12 +24,12 @@ fn start(c: pipes::Chan<pipes::Chan<~str>>) {\n     log(error, a);\n     b = p.recv();\n     assert b == ~\"B\";\n-    log(error, move b);\n+    log(error, b);\n }\n \n pub fn main() {\n     let (p, ch) = pipes::stream();\n-    let child = task::spawn(|move ch| start(ch) );\n+    let child = task::spawn(|| start(ch) );\n \n     let c = p.recv();\n     c.send(~\"A\");"}, {"sha": "996566abcd89fd49b257a0eb673fb54ef604148e", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -15,11 +15,11 @@ extern mod std;\n \n fn start(c: pipes::Chan<pipes::Chan<int>>) {\n     let (p, ch) = pipes::stream();\n-    c.send(move ch);\n+    c.send(ch);\n }\n \n pub fn main() {\n     let (p, ch) = pipes::stream();\n-    let child = task::spawn(|move ch| start(ch) );\n+    let child = task::spawn(|| start(ch) );\n     let c = p.recv();\n }"}, {"sha": "9f23ab1c9dfa68e0c3f27721cd100d5d652d2404", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -17,7 +17,7 @@ fn start(&&task_number: int) { debug!(\"Started / Finished task.\"); }\n fn test00() {\n     let i: int = 0;\n     let mut result = None;\n-    do task::task().future_result(|+r| { result = Some(move r); }).spawn {\n+    do task::task().future_result(|+r| { result = Some(r); }).spawn {\n         start(i)\n     }\n \n@@ -29,7 +29,7 @@ fn test00() {\n     }\n \n     // Try joining tasks that have already finished.\n-    option::unwrap(move result).recv();\n+    option::unwrap(result).recv();\n \n     debug!(\"Joined task.\");\n }"}, {"sha": "4ee23ec54d6cb9c1a71409eb9dceb01f674ea502", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -22,6 +22,6 @@ fn start(c: pipes::Chan<int>, start: int, number_of_messages: int) {\n pub fn main() {\n     debug!(\"Check that we don't deadlock.\");\n     let (p, ch) = pipes::stream();\n-    task::try(|move ch| start(ch, 0, 10) );\n+    task::try(|| start(ch, 0, 10) );\n     debug!(\"Joined task\");\n }"}, {"sha": "f32fbdd04e62ead75f8ffe8da6bf9e67645b0636", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -19,8 +19,8 @@ pub fn main() {\n     while (i > 0) {\n         log(debug, i);\n         let (p, ch) = pipes::stream();\n-        po.add(move p);\n-        task::spawn({let i = i; |move ch| child(i, ch)});\n+        po.add(p);\n+        task::spawn({let i = i; || child(i, ch)});\n         i = i - 1;\n     }\n "}, {"sha": "957066005acda898cb5d558e621486412fa4ffb5", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -28,6 +28,6 @@ pub fn main() {\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n     let (p, ch) = pipes::stream();\n-    task::spawn(|move ch| start(ch, 10));\n+    task::spawn(|| start(ch, 10));\n     p.recv();\n }"}, {"sha": "648a54d190fa408b0b294f95632510943ce15558", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -100,7 +100,7 @@ fn test_tag() {\n fn test_chan() {\n     let (po, ch) = pipes::stream();\n     let (po0, ch0) = pipes::stream();\n-    ch.send(move ch0);\n+    ch.send(ch0);\n     let ch1 = po.recv();\n     // Does the transmitted channel still work?\n "}, {"sha": "372a0ea434b58b326a1fb2a0eb07b39df6f28d23", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -44,10 +44,10 @@ fn test00() {\n     while i < number_of_tasks {\n         let ch = po.chan();\n         task::task().future_result(|+r| {\n-            results.push(move r);\n+            results.push(r);\n         }).spawn({\n             let i = i;\n-            |move ch| test00_start(ch, i, number_of_messages)\n+            || test00_start(ch, i, number_of_messages)\n         });\n         i = i + 1;\n     }"}, {"sha": "481df2d1d529b4a1c94dfe1b38c6f5ef15e0bf01", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -27,19 +27,19 @@ fn test00() {\n     let number_of_messages: int = 10;\n \n     let c = p.chan();\n-    do task::spawn |move c| {\n+    do task::spawn || {\n         test00_start(c, number_of_messages * 0, number_of_messages);\n     }\n     let c = p.chan();\n-    do task::spawn |move c| {\n+    do task::spawn || {\n         test00_start(c, number_of_messages * 1, number_of_messages);\n     }\n     let c = p.chan();\n-    do task::spawn |move c| {\n+    do task::spawn || {\n         test00_start(c, number_of_messages * 2, number_of_messages);\n     }\n     let c = p.chan();\n-    do task::spawn |move c| {\n+    do task::spawn || {\n         test00_start(c, number_of_messages * 3, number_of_messages);\n     }\n "}, {"sha": "d3ed48f7575239fc67ee9cb63b648ba9a34318a4", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -28,8 +28,8 @@ fn test00() {\n     let ch = p.chan();\n \n     let mut result = None;\n-    do task::task().future_result(|+r| { result = Some(move r); }).spawn\n-          |move ch| {\n+    do task::task().future_result(|+r| { result = Some(r); }).spawn\n+          || {\n         test00_start(ch, number_of_messages);\n     }\n \n@@ -40,7 +40,7 @@ fn test00() {\n         i += 1;\n     }\n \n-    option::unwrap(move result).recv();\n+    option::unwrap(result).recv();\n \n     assert (sum == number_of_messages * (number_of_messages - 1) / 2);\n }"}, {"sha": "5468970ecf555e58d577130c0cf56bbedc85e2a7", "filename": "src/test/run-pass/trait-default-method-bound-subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,13 +11,13 @@\n // xfail-test\n \n trait A<T> {\n-    fn g<U>(x: T, y: U) -> (T, U) { (move x, move y) }\n+    fn g<U>(x: T, y: U) -> (T, U) { (x, y) }\n }\n \n impl A<int> for int { }\n \n fn f<T, U, V: A<T>>(i: V, j: T, k: U) -> (T, U) {\n-    i.g(move j, move k)\n+    i.g(j, k)\n }\n \n fn main () {"}, {"sha": "71f4165db9d64f0a893b91cba7e8c5a74070f450", "filename": "src/test/run-pass/trait-default-method-bound-subst2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst2.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,13 +11,13 @@\n // xfail-test\n \n trait A<T> {\n-    fn g(x: T) -> T { move x }\n+    fn g(x: T) -> T { x }\n }\n \n impl A<int> for int { }\n \n fn f<T, V: A<T>>(i: V, j: T) -> T {\n-    i.g(move j)\n+    i.g(j)\n }\n \n fn main () {"}, {"sha": "f27bd7c0a7bf90c6f557e0999ae0c461f6b90a69", "filename": "src/test/run-pass/trait-default-method-bound-subst3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst3.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,13 +11,13 @@\n #[allow(default_methods)];\n \n trait A {\n-    fn g<T>(x: T, y: T) -> (T, T) { (move x, move y) }\n+    fn g<T>(x: T, y: T) -> (T, T) { (x, y) }\n }\n \n impl A for int { }\n \n fn f<T, V: A>(i: V, j: T, k: T) -> (T, T) {\n-    i.g(move j, move k)\n+    i.g(j, k)\n }\n \n fn main () {"}, {"sha": "8ea5341795164404551338b26b4d1a4486f0643e", "filename": "src/test/run-pass/trait-default-method-bound-subst4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-bound-subst4.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,13 +11,13 @@\n #[allow(default_methods)];\n \n trait A<T> {\n-    fn g(x: uint) -> uint { move x }\n+    fn g(x: uint) -> uint { x }\n }\n \n impl<T> A<T> for int { }\n \n fn f<T, V: A<T>>(i: V, j: uint) -> uint {\n-    i.g(move j)\n+    i.g(j)\n }\n \n fn main () {"}, {"sha": "b3ebc2ba820aabd2a9f00085b65d1afad5d8766a", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -40,7 +40,7 @@ pub fn main() {\n     assert indirect(~[10, 20]) == ~\"[10, 20]!\";\n \n     fn indirect2<T: to_str>(x: T) -> ~str {\n-        indirect(move x)\n+        indirect(x)\n     }\n     assert indirect2(~[1]) == ~\"[1]!\";\n }"}, {"sha": "96e91093d37a2eb40dc0ecf74e27c2d722b2fe1b", "filename": "src/test/run-pass/unique-decl-move-temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-decl-move-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-decl-move-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-move-temp.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn main() {\n-    let i = move ~100;\n+    let i = ~100;\n     assert *i == 100;\n }"}, {"sha": "7723eafc035eed7db487bb80bbc1631b79de9a3e", "filename": "src/test/run-pass/unique-decl-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-decl-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-decl-move.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n     let i = ~100;\n-    let j = move i;\n+    let j = i;\n     assert *j == 100;\n }"}, {"sha": "12e9820361d777a53790019e3d1f586616db3c7b", "filename": "src/test/run-pass/unique-fn-arg-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg-move.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -14,5 +14,5 @@ fn f(-i: ~int) {\n \n pub fn main() {\n     let i = ~100;\n-    f(move i);\n+    f(i);\n }"}, {"sha": "5988a3e8658dce09836d80bac517009cbe358c51", "filename": "src/test/run-pass/unique-move-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-move-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-drop.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,6 +11,6 @@\n pub fn main() {\n     let i = ~100;\n     let j = ~200;\n-    let j = move i;\n+    let j = i;\n     assert *j == 100;\n }"}, {"sha": "08a496987c0a629801d19104352c5916baed735f", "filename": "src/test/run-pass/unique-move-temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-temp.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n     let mut i;\n-    i = move ~100;\n+    i = ~100;\n     assert *i == 100;\n }"}, {"sha": "5e778d581d340a7031c743a37d538e056572bdc2", "filename": "src/test/run-pass/unique-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funique-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,6 +11,6 @@\n pub fn main() {\n     let i = ~100;\n     let mut j;\n-    j = move i;\n+    j = i;\n     assert *j == 100;\n }"}, {"sha": "9c658fdc252760f55df4b26c62b00c1158f6cea4", "filename": "src/test/run-pass/unreachable-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code-1.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -12,7 +12,7 @@\n fn id(x: bool) -> bool { x }\n \n fn call_id() {\n-    let c = move fail!();\n+    let c = fail!();\n     id(c); //~ WARNING unreachable statement\n }\n "}, {"sha": "fa93dfd0fe135a41db8764c6ef890adbd54946a0", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -12,7 +12,7 @@\n fn id(x: bool) -> bool { x }\n \n fn call_id() {\n-    let c = move fail!();\n+    let c = fail!();\n     id(c);\n }\n "}, {"sha": "665abe23ee8935fd43fb22c58306c9b370d47be1", "filename": "src/test/run-pass/unused-move-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funused-move-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move-capture.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -10,6 +10,6 @@\n \n pub fn main() {\n     let x = ~1;\n-    let lam_move = fn@(move x) { };\n+    let lam_move = fn@() { };\n     lam_move();\n }"}, {"sha": "69ce791c1a35aa56c8a93b08a5276b80ef2d39f0", "filename": "src/test/run-pass/unused-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funused-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funused-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funused-move.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -15,5 +15,5 @@\n pub fn main()\n {\n     let y = ~1;\n-    move y;\n+    y;\n }"}, {"sha": "93f1c7b5b45090a0f9a09d835bc88309883f5c9d", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -33,7 +33,7 @@ fn complainer(c: SharedChan<bool>) -> complainer {\n }\n \n fn f(c: SharedChan<bool>) {\n-    let _c = move complainer(c);\n+    let _c = complainer(c);\n     fail!();\n }\n "}, {"sha": "75ce797cfc842955d00ee2a89344ee86d5237c4a", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -26,7 +26,7 @@ fn complainer(c: @int) -> complainer {\n }\n \n fn f() {\n-    let c = move complainer(@0);\n+    let c = complainer(@0);\n     fail!();\n }\n "}, {"sha": "5b515ae5434767bd2d8db372301c31825176a7a8", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -50,7 +50,7 @@ fn zombiejesus() {\n fn notsure() {\n     let mut _x;\n     let mut _y = (_x = 0) == (_x = 0);\n-    let mut _z = (_x = move 0) < (_x = 0);\n+    let mut _z = (_x = 0) < (_x = 0);\n     let _a = (_x += 0) == (_x = 0);\n     let _b = (_y <-> _z) == (_y <-> _z);\n }\n@@ -73,7 +73,7 @@ fn angrydome() {\n       break; }\n }\n \n-fn evil_lincoln() { let evil = move debug!(\"lincoln\"); }\n+fn evil_lincoln() { let evil = debug!(\"lincoln\"); }\n \n pub fn main() {\n     strange();"}, {"sha": "df5f5904793dad7529fbebc15b5b891c8d8c0c05", "filename": "src/test/run-pass/while-loop-constraints-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n     let mut x: int;\n     while z < 50 {\n         z += 1;\n-        while false { x = move y; y = z; }\n+        while false { x = y; y = z; }\n         log(debug, y);\n     }\n     assert (y == 42 && z == 50);"}, {"sha": "16f43016b8e673b0220b166459c9c2190d028e9e", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,13 +11,13 @@\n \n pub fn main() {\n     let mut result = None;\n-    task::task().future_result(|+r| { result = Some(move r); }).spawn(child);\n+    task::task().future_result(|+r| { result = Some(r); }).spawn(child);\n     error!(\"1\");\n     task::yield();\n     error!(\"2\");\n     task::yield();\n     error!(\"3\");\n-    option::unwrap(move result).recv();\n+    option::unwrap(result).recv();\n }\n \n fn child() {"}, {"sha": "ae1271f64e4dc3d84ba5fc621a5e28032e1eeed9", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178882c98feb4d19a88ce950b035bc40ffda2650/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=178882c98feb4d19a88ce950b035bc40ffda2650", "patch": "@@ -11,10 +11,10 @@\n \n pub fn main() {\n     let mut result = None;\n-    task::task().future_result(|+r| { result = Some(move r); }).spawn(child);\n+    task::task().future_result(|+r| { result = Some(r); }).spawn(child);\n     error!(\"1\");\n     task::yield();\n-    option::unwrap(move result).recv();\n+    option::unwrap(result).recv();\n }\n \n fn child() { error!(\"2\"); }"}]}