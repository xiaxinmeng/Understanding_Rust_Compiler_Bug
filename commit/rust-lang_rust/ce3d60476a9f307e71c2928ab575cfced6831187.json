{"sha": "ce3d60476a9f307e71c2928ab575cfced6831187", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlM2Q2MDQ3NmE5ZjMwN2U3MWMyOTI4YWI1NzVjZmNlZDY4MzExODc=", "commit": {"author": {"name": "William Chargin", "email": "wchargin@gmail.com", "date": "2020-11-23T19:59:42Z"}, "committer": {"name": "William Chargin", "email": "wchargin@gmail.com", "date": "2020-11-23T19:59:42Z"}, "message": "std::iter: document iteration over `&T` and `&mut T`\n\nA colleague of mine is new to Rust, and mentioned that it was \u201cslightly\nconfusing\u201d to figure out what `&mut` does in iterating over `&mut foo`:\n\n```rust\nfor value in &mut self.my_vec {\n    // ...\n}\n```\n\nMy colleague had read the `std::iter` docs and not found the answer\nthere. There is a brief section at the top about \u201cthe three forms of\niteration\u201d, which mentions `iter_mut`, but it doesn\u2019t cover the purpose\nof `&mut coll` for a collection `coll`. This patch adds an explanatory\nsection to the docs. I opted to create a new section so that it can\nappear after the note that `impl<I: Iterator> IntoIterator for I`, and\nit\u2019s nice for the existing \u201cthree forms of iteration\u201d to appear near the\ntop.\n\nImplementation note: I haven\u2019t linkified the references to `HashSet` and\n`HashMap`, since those are in `std` and these docs are in `core`;\nlinkifying them gave an \u201cunresolved link\u201d rustdoc error.\n\nTest Plan:\nRan `./x.py doc library/core`, and the result looked good. Manually\ncopy-pasted the two doctests into the playground and ran them.\n\nwchargin-branch: doc-iter-by-reference\nwchargin-source: 0f35369a8a735868621166608797744e97536792", "tree": {"sha": "db7faf4380398de67ed473d119b05a2d2dd8df76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db7faf4380398de67ed473d119b05a2d2dd8df76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce3d60476a9f307e71c2928ab575cfced6831187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3d60476a9f307e71c2928ab575cfced6831187", "html_url": "https://github.com/rust-lang/rust/commit/ce3d60476a9f307e71c2928ab575cfced6831187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce3d60476a9f307e71c2928ab575cfced6831187/comments", "author": {"login": "wchargin", "id": 4317806, "node_id": "MDQ6VXNlcjQzMTc4MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/4317806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wchargin", "html_url": "https://github.com/wchargin", "followers_url": "https://api.github.com/users/wchargin/followers", "following_url": "https://api.github.com/users/wchargin/following{/other_user}", "gists_url": "https://api.github.com/users/wchargin/gists{/gist_id}", "starred_url": "https://api.github.com/users/wchargin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wchargin/subscriptions", "organizations_url": "https://api.github.com/users/wchargin/orgs", "repos_url": "https://api.github.com/users/wchargin/repos", "events_url": "https://api.github.com/users/wchargin/events{/privacy}", "received_events_url": "https://api.github.com/users/wchargin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wchargin", "id": 4317806, "node_id": "MDQ6VXNlcjQzMTc4MDY=", "avatar_url": "https://avatars.githubusercontent.com/u/4317806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wchargin", "html_url": "https://github.com/wchargin", "followers_url": "https://api.github.com/users/wchargin/followers", "following_url": "https://api.github.com/users/wchargin/following{/other_user}", "gists_url": "https://api.github.com/users/wchargin/gists{/gist_id}", "starred_url": "https://api.github.com/users/wchargin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wchargin/subscriptions", "organizations_url": "https://api.github.com/users/wchargin/orgs", "repos_url": "https://api.github.com/users/wchargin/repos", "events_url": "https://api.github.com/users/wchargin/events{/privacy}", "received_events_url": "https://api.github.com/users/wchargin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40cf72108edb9b8633a9d284b238988309204494", "url": "https://api.github.com/repos/rust-lang/rust/commits/40cf72108edb9b8633a9d284b238988309204494", "html_url": "https://github.com/rust-lang/rust/commit/40cf72108edb9b8633a9d284b238988309204494"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "2ace734fb0c7d42bbae83ea7800eb9a1e41e3623", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ce3d60476a9f307e71c2928ab575cfced6831187/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3d60476a9f307e71c2928ab575cfced6831187/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=ce3d60476a9f307e71c2928ab575cfced6831187", "patch": "@@ -206,6 +206,49 @@\n //! 2. If you're creating a collection, implementing [`IntoIterator`] for it\n //!    will allow your collection to be used with the `for` loop.\n //!\n+//! # Iterating by reference\n+//!\n+//! Since [`into_iter()`] takes `self` by value, using a `for` loop to iterate\n+//! over a collection consumes that collection. Often, you may want to iterate\n+//! over a collection without consuming it. Many collections offer methods that\n+//! provide iterators over references, conventionally called `iter()` and\n+//! `iter_mut()` respectively:\n+//!\n+//! ```\n+//! let mut values = vec![41];\n+//! for x in values.iter_mut() {\n+//!     *x += 1;\n+//! }\n+//! for x in values.iter() {\n+//!     assert_eq!(*x, 42);\n+//! }\n+//! assert_eq!(values.len(), 1); // `values` is still owned by this function.\n+//! ```\n+//!\n+//! If a collection type `C` provides `iter()`, it usually also implements\n+//! `IntoIterator` for `&C`, with an implementation that just calls `iter()`.\n+//! Likewise, a collection `C` that provides `iter_mut()` generally implements\n+//! `IntoIterator` for `&mut C` by delegating to `iter_mut()`. This enables a\n+//! convenient shorthand:\n+//!\n+//! ```\n+//! let mut values = vec![41];\n+//! for x in &mut values { // same as `values.iter_mut()`\n+//!     *x += 1;\n+//! }\n+//! for x in &values { // same as `values.iter()`\n+//!     assert_eq!(*x, 42);\n+//! }\n+//! assert_eq!(values.len(), 1);\n+//! ```\n+//!\n+//! While many collections offer `iter()`, not all offer `iter_mut()`. For\n+//! example, mutating the keys of a `HashSet<T>` or `HashMap<K, V>` could put\n+//! the collection into an inconsistent state if the key hashes change, so these\n+//! collections only offer `iter()`.\n+//!\n+//! [`into_iter()`]: IntoIterator::into_iter\n+//!\n //! # Adapters\n //!\n //! Functions which take an [`Iterator`] and return another [`Iterator`] are"}]}