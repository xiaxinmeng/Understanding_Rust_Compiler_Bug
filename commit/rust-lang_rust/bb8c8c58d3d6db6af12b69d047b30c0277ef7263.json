{"sha": "bb8c8c58d3d6db6af12b69d047b30c0277ef7263", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOGM4YzU4ZDNkNmRiNmFmMTJiNjlkMDQ3YjMwYzAyNzdlZjcyNjM=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-06T17:33:14Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-09T20:17:00Z"}, "message": "Make trans::collector only depend on SharedCrateContext.", "tree": {"sha": "0da6f1d6f691eb21cd6aabd12550ba067d854ba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0da6f1d6f691eb21cd6aabd12550ba067d854ba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb8c8c58d3d6db6af12b69d047b30c0277ef7263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8c8c58d3d6db6af12b69d047b30c0277ef7263", "html_url": "https://github.com/rust-lang/rust/commit/bb8c8c58d3d6db6af12b69d047b30c0277ef7263", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb8c8c58d3d6db6af12b69d047b30c0277ef7263/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75bf6173e5f549a8345c092d4c2fe9ba896253e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/75bf6173e5f549a8345c092d4c2fe9ba896253e0", "html_url": "https://github.com/rust-lang/rust/commit/75bf6173e5f549a8345c092d4c2fe9ba896253e0"}], "stats": {"total": 98, "additions": 53, "deletions": 45}, "files": [{"sha": "c89a8a930f72733356512fa13ebf38a297b7eb71", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb8c8c58d3d6db6af12b69d047b30c0277ef7263/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8c8c58d3d6db6af12b69d047b30c0277ef7263/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=bb8c8c58d3d6db6af12b69d047b30c0277ef7263", "patch": "@@ -1824,7 +1824,7 @@ pub fn trans_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                closure_env: closure::ClosureEnv) {\n     ccx.stats().n_closures.set(ccx.stats().n_closures.get() + 1);\n \n-    if collector::collecting_debug_information(ccx) {\n+    if collector::collecting_debug_information(ccx.shared()) {\n         ccx.record_translation_item_as_generated(TransItem::Fn(instance));\n     }\n \n@@ -2738,7 +2738,7 @@ pub fn trans_crate<'tcx>(tcx: &TyCtxt<'tcx>,\n             krate.visit_all_items(&mut TransModVisitor { ccx: &ccx });\n         }\n \n-        collector::print_collection_results(&ccx);\n+        collector::print_collection_results(ccx.shared());\n \n         symbol_names_test::report_symbol_names(&ccx);\n     }\n@@ -2934,7 +2934,7 @@ fn collect_translation_items<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>) {\n     };\n \n     let (items, reference_map) = time(time_passes, \"translation item collection\", || {\n-        collector::collect_crate_translation_items(&ccx, collection_mode)\n+        collector::collect_crate_translation_items(ccx.shared(), collection_mode)\n     });\n \n     let strategy = if ccx.sess().opts.debugging_opts.incremental.is_some() {"}, {"sha": "e815d7b61d7b1edcce80a8573fb16807cbcc9217", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bb8c8c58d3d6db6af12b69d047b30c0277ef7263/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8c8c58d3d6db6af12b69d047b30c0277ef7263/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=bb8c8c58d3d6db6af12b69d047b30c0277ef7263", "patch": "@@ -210,7 +210,7 @@ use syntax::{attr, errors};\n use syntax::parse::token;\n \n use base::{custom_coerce_unsize_info, llvm_linkage_by_name};\n-use context::CrateContext;\n+use context::SharedCrateContext;\n use common::{fulfill_obligation, normalize_and_test_predicates, type_is_sized};\n use glue::{self, DropGlueKind};\n use llvm;\n@@ -319,7 +319,7 @@ impl<'tcx> ReferenceMap<'tcx> {\n     }\n }\n \n-pub fn collect_crate_translation_items<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+pub fn collect_crate_translation_items<'a, 'tcx>(ccx: &SharedCrateContext<'a, 'tcx>,\n                                                  mode: TransItemCollectionMode)\n                                                  -> (FnvHashSet<TransItem<'tcx>>,\n                                                      ReferenceMap<'tcx>) {\n@@ -347,7 +347,7 @@ pub fn collect_crate_translation_items<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n // Find all non-generic items by walking the HIR. These items serve as roots to\n // start monomorphizing from.\n-fn collect_roots<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+fn collect_roots<'a, 'tcx>(ccx: &SharedCrateContext<'a, 'tcx>,\n                            mode: TransItemCollectionMode)\n                            -> Vec<TransItem<'tcx>> {\n     debug!(\"Collecting roots\");\n@@ -368,7 +368,7 @@ fn collect_roots<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n }\n \n // Collect all monomorphized translation items reachable from `starting_point`\n-fn collect_items_rec<'a, 'tcx: 'a>(ccx: &CrateContext<'a, 'tcx>,\n+fn collect_items_rec<'a, 'tcx: 'a>(ccx: &SharedCrateContext<'a, 'tcx>,\n                                    starting_point: TransItem<'tcx>,\n                                    visited: &mut FnvHashSet<TransItem<'tcx>>,\n                                    recursion_depths: &mut DefIdMap<usize>,\n@@ -473,7 +473,7 @@ fn check_recursion_limit<'tcx>(tcx: &TyCtxt<'tcx>,\n }\n \n struct MirNeighborCollector<'a, 'tcx: 'a> {\n-    ccx: &'a CrateContext<'a, 'tcx>,\n+    ccx: &'a SharedCrateContext<'a, 'tcx>,\n     mir: &'a mir::Mir<'tcx>,\n     output: &'a mut Vec<TransItem<'tcx>>,\n     param_substs: &'tcx Substs<'tcx>\n@@ -593,7 +593,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 // object shim or a closure that is handled differently),\n                 // we check if the callee is something that will actually\n                 // result in a translation item ...\n-                if can_result_in_trans_item(self.ccx, callee_def_id) {\n+                if can_result_in_trans_item(self.ccx.tcx(), callee_def_id) {\n                     // ... and create one if it does.\n                     let trans_item = create_fn_trans_item(self.ccx.tcx(),\n                                                           callee_def_id,\n@@ -606,21 +606,21 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n         self.super_operand(operand);\n \n-        fn can_result_in_trans_item<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                              def_id: DefId)\n-                                              -> bool {\n-            if !match ccx.tcx().lookup_item_type(def_id).ty.sty {\n+        fn can_result_in_trans_item<'tcx>(tcx: &TyCtxt<'tcx>,\n+                                          def_id: DefId)\n+                                          -> bool {\n+            if !match tcx.lookup_item_type(def_id).ty.sty {\n                 ty::TyFnDef(def_id, _, _) => {\n                     // Some constructors also have type TyFnDef but they are\n                     // always instantiated inline and don't result in\n                     // translation item. Same for FFI functions.\n-                    match ccx.tcx().map.get_if_local(def_id) {\n+                    match tcx.map.get_if_local(def_id) {\n                         Some(hir_map::NodeVariant(_))    |\n                         Some(hir_map::NodeStructCtor(_)) |\n                         Some(hir_map::NodeForeignItem(_)) => false,\n                         Some(_) => true,\n                         None => {\n-                            ccx.sess().cstore.variant_kind(def_id).is_none()\n+                            tcx.sess.cstore.variant_kind(def_id).is_none()\n                         }\n                     }\n                 }\n@@ -630,7 +630,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 return false;\n             }\n \n-            can_have_local_instance(ccx.tcx(), def_id)\n+            can_have_local_instance(tcx, def_id)\n         }\n     }\n }\n@@ -644,7 +644,7 @@ fn can_have_local_instance<'tcx>(tcx: &TyCtxt<'tcx>,\n     def_id.is_local() || tcx.sess.cstore.is_item_mir_available(def_id)\n }\n \n-fn find_drop_glue_neighbors<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+fn find_drop_glue_neighbors<'a, 'tcx>(ccx: &SharedCrateContext<'a, 'tcx>,\n                                       dg: DropGlueKind<'tcx>,\n                                       output: &mut Vec<TransItem<'tcx>>) {\n     let ty = match dg {\n@@ -700,7 +700,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             substs: self_type_substs,\n         }.to_poly_trait_ref();\n \n-        let substs = match fulfill_obligation(ccx.shared(), DUMMY_SP, trait_ref) {\n+        let substs = match fulfill_obligation(ccx, DUMMY_SP, trait_ref) {\n             traits::VtableImpl(data) => data.substs,\n             _ => bug!()\n         };\n@@ -779,7 +779,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     }\n }\n \n-fn do_static_dispatch<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+fn do_static_dispatch<'a, 'tcx>(ccx: &SharedCrateContext<'a, 'tcx>,\n                                 fn_def_id: DefId,\n                                 fn_substs: &'tcx Substs<'tcx>,\n                                 param_substs: &'tcx Substs<'tcx>)\n@@ -822,7 +822,7 @@ fn do_static_dispatch<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n // Given a trait-method and substitution information, find out the actual\n // implementation of the trait method.\n-fn do_static_trait_method_dispatch<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+fn do_static_trait_method_dispatch<'a, 'tcx>(ccx: &SharedCrateContext<'a, 'tcx>,\n                                              trait_method: &ty::Method,\n                                              trait_id: DefId,\n                                              callee_substs: &'tcx Substs<'tcx>,\n@@ -843,7 +843,7 @@ fn do_static_trait_method_dispatch<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                                        callee_substs);\n \n     let trait_ref = ty::Binder(rcvr_substs.to_trait_ref(tcx, trait_id));\n-    let vtbl = fulfill_obligation(ccx.shared(), DUMMY_SP, trait_ref);\n+    let vtbl = fulfill_obligation(ccx, DUMMY_SP, trait_ref);\n \n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:\n@@ -911,7 +911,7 @@ fn do_static_trait_method_dispatch<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n ///\n /// Finally, there is also the case of custom unsizing coercions, e.g. for\n /// smart pointers such as `Rc` and `Arc`.\n-fn find_vtable_types_for_unsizing<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+fn find_vtable_types_for_unsizing<'a, 'tcx>(ccx: &SharedCrateContext<'a, 'tcx>,\n                                             source_ty: ty::Ty<'tcx>,\n                                             target_ty: ty::Ty<'tcx>)\n                                             -> (ty::Ty<'tcx>, ty::Ty<'tcx>) {\n@@ -936,7 +936,7 @@ fn find_vtable_types_for_unsizing<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n          &ty::TyStruct(target_adt_def, target_substs)) => {\n             assert_eq!(source_adt_def, target_adt_def);\n \n-            let kind = custom_coerce_unsize_info(ccx.shared(), source_ty, target_ty);\n+            let kind = custom_coerce_unsize_info(ccx, source_ty, target_ty);\n \n             let coerce_index = match kind {\n                 CustomCoerceUnsized::Struct(i) => i\n@@ -986,7 +986,7 @@ fn create_fn_trans_item<'tcx>(tcx: &TyCtxt<'tcx>,\n \n /// Creates a `TransItem` for each method that is referenced by the vtable for\n /// the given trait/impl pair.\n-fn create_trans_items_for_vtable_methods<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n+fn create_trans_items_for_vtable_methods<'a, 'tcx>(ccx: &SharedCrateContext<'a, 'tcx>,\n                                                    trait_ty: ty::Ty<'tcx>,\n                                                    impl_ty: ty::Ty<'tcx>,\n                                                    output: &mut Vec<TransItem<'tcx>>) {\n@@ -998,7 +998,7 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n         // Walk all methods of the trait, including those of its supertraits\n         for trait_ref in traits::supertraits(ccx.tcx(), poly_trait_ref) {\n-            let vtable = fulfill_obligation(ccx.shared(), DUMMY_SP, trait_ref);\n+            let vtable = fulfill_obligation(ccx, DUMMY_SP, trait_ref);\n             match vtable {\n                 traits::VtableImpl(\n                     traits::VtableImplData {\n@@ -1035,7 +1035,7 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n //=-----------------------------------------------------------------------------\n \n struct RootCollector<'b, 'a: 'b, 'tcx: 'a + 'b> {\n-    ccx: &'b CrateContext<'a, 'tcx>,\n+    ccx: &'b SharedCrateContext<'a, 'tcx>,\n     mode: TransItemCollectionMode,\n     output: &'b mut Vec<TransItem<'tcx>>,\n     enclosing_item: Option<&'tcx hir::Item>,\n@@ -1546,12 +1546,12 @@ pub enum TransItemState {\n     NotPredictedButGenerated,\n }\n \n-pub fn collecting_debug_information(ccx: &CrateContext) -> bool {\n+pub fn collecting_debug_information(ccx: &SharedCrateContext) -> bool {\n     return cfg!(debug_assertions) &&\n            ccx.sess().opts.debugging_opts.print_trans_items.is_some();\n }\n \n-pub fn print_collection_results<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>) {\n+pub fn print_collection_results<'a, 'tcx>(ccx: &SharedCrateContext<'a, 'tcx>) {\n     use std::hash::{Hash, SipHasher, Hasher};\n \n     if !collecting_debug_information(ccx) {"}, {"sha": "2811148abd68e259a2f92c53d558d2b36edb1058", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb8c8c58d3d6db6af12b69d047b30c0277ef7263/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8c8c58d3d6db6af12b69d047b30c0277ef7263/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=bb8c8c58d3d6db6af12b69d047b30c0277ef7263", "patch": "@@ -1133,7 +1133,7 @@ pub fn trans_static(ccx: &CrateContext,\n                     attrs: &[ast::Attribute])\n                     -> Result<ValueRef, ConstEvalErr> {\n \n-    if collector::collecting_debug_information(ccx) {\n+    if collector::collecting_debug_information(ccx.shared()) {\n         ccx.record_translation_item_as_generated(TransItem::Static(id));\n     }\n "}, {"sha": "323bc338245df58611011dc0269aa906937c3145", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bb8c8c58d3d6db6af12b69d047b30c0277ef7263/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8c8c58d3d6db6af12b69d047b30c0277ef7263/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=bb8c8c58d3d6db6af12b69d047b30c0277ef7263", "patch": "@@ -469,6 +469,28 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn use_dll_storage_attrs(&self) -> bool {\n         self.use_dll_storage_attrs\n     }\n+\n+    pub fn get_mir(&self, def_id: DefId) -> Option<CachedMir<'b, 'tcx>> {\n+        if def_id.is_local() {\n+            let node_id = self.tcx.map.as_local_node_id(def_id).unwrap();\n+            self.mir_map.map.get(&node_id).map(CachedMir::Ref)\n+        } else {\n+            if let Some(mir) = self.mir_cache.borrow().get(&def_id).cloned() {\n+                return Some(CachedMir::Owned(mir));\n+            }\n+\n+            let mir = self.sess().cstore.maybe_get_item_mir(self.tcx, def_id);\n+            let cached = mir.map(Rc::new);\n+            if let Some(ref mir) = cached {\n+                self.mir_cache.borrow_mut().insert(def_id, mir.clone());\n+            }\n+            cached.map(CachedMir::Owned)\n+        }\n+    }\n+\n+    pub fn translation_items(&self) -> &RefCell<FnvHashMap<TransItem<'tcx>, TransItemState>> {\n+        &self.translation_items\n+    }\n }\n \n impl<'tcx> LocalCrateContext<'tcx> {\n@@ -843,21 +865,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     }\n \n     pub fn get_mir(&self, def_id: DefId) -> Option<CachedMir<'b, 'tcx>> {\n-        if def_id.is_local() {\n-            let node_id = self.tcx().map.as_local_node_id(def_id).unwrap();\n-            self.shared.mir_map.map.get(&node_id).map(CachedMir::Ref)\n-        } else {\n-            if let Some(mir) = self.shared.mir_cache.borrow().get(&def_id).cloned() {\n-                return Some(CachedMir::Owned(mir));\n-            }\n-\n-            let mir = self.sess().cstore.maybe_get_item_mir(self.tcx(), def_id);\n-            let cached = mir.map(Rc::new);\n-            if let Some(ref mir) = cached {\n-                self.shared.mir_cache.borrow_mut().insert(def_id, mir.clone());\n-            }\n-            cached.map(CachedMir::Owned)\n-        }\n+        self.shared.get_mir(def_id)\n     }\n \n     pub fn translation_items(&self) -> &RefCell<FnvHashMap<TransItem<'tcx>, TransItemState>> {"}, {"sha": "898ac636c1d431246895eeede989b15fcc36c8c8", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb8c8c58d3d6db6af12b69d047b30c0277ef7263/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8c8c58d3d6db6af12b69d047b30c0277ef7263/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=bb8c8c58d3d6db6af12b69d047b30c0277ef7263", "patch": "@@ -489,7 +489,7 @@ pub fn size_and_align_of_dst<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n \n fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueKind<'tcx>)\n                               -> Block<'blk, 'tcx> {\n-    if collector::collecting_debug_information(bcx.ccx()) {\n+    if collector::collecting_debug_information(bcx.ccx().shared()) {\n         bcx.ccx()\n            .record_translation_item_as_generated(TransItem::DropGlue(g));\n     }"}]}