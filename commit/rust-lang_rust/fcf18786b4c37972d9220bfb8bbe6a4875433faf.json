{"sha": "fcf18786b4c37972d9220bfb8bbe6a4875433faf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZjE4Nzg2YjRjMzc5NzJkOTIyMGJmYjhiYmU2YTQ4NzU0MzNmYWY=", "commit": {"author": {"name": "Micah Chalmer", "email": "micah@micahchalmer.net", "date": "2013-09-06T03:02:37Z"}, "committer": {"name": "Micah Chalmer", "email": "micah@micahchalmer.net", "date": "2013-09-06T05:02:20Z"}, "message": "Add ERT tests", "tree": {"sha": "f729de1c0c35ca1dbe9a1e12d3d77129ae02c363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f729de1c0c35ca1dbe9a1e12d3d77129ae02c363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf18786b4c37972d9220bfb8bbe6a4875433faf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf18786b4c37972d9220bfb8bbe6a4875433faf", "html_url": "https://github.com/rust-lang/rust/commit/fcf18786b4c37972d9220bfb8bbe6a4875433faf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf18786b4c37972d9220bfb8bbe6a4875433faf/comments", "author": {"login": "MicahChalmer", "id": 698400, "node_id": "MDQ6VXNlcjY5ODQwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/698400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicahChalmer", "html_url": "https://github.com/MicahChalmer", "followers_url": "https://api.github.com/users/MicahChalmer/followers", "following_url": "https://api.github.com/users/MicahChalmer/following{/other_user}", "gists_url": "https://api.github.com/users/MicahChalmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicahChalmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicahChalmer/subscriptions", "organizations_url": "https://api.github.com/users/MicahChalmer/orgs", "repos_url": "https://api.github.com/users/MicahChalmer/repos", "events_url": "https://api.github.com/users/MicahChalmer/events{/privacy}", "received_events_url": "https://api.github.com/users/MicahChalmer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MicahChalmer", "id": 698400, "node_id": "MDQ6VXNlcjY5ODQwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/698400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicahChalmer", "html_url": "https://github.com/MicahChalmer", "followers_url": "https://api.github.com/users/MicahChalmer/followers", "following_url": "https://api.github.com/users/MicahChalmer/following{/other_user}", "gists_url": "https://api.github.com/users/MicahChalmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicahChalmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicahChalmer/subscriptions", "organizations_url": "https://api.github.com/users/MicahChalmer/orgs", "repos_url": "https://api.github.com/users/MicahChalmer/repos", "events_url": "https://api.github.com/users/MicahChalmer/events{/privacy}", "received_events_url": "https://api.github.com/users/MicahChalmer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "377b2c77e4bf738c7bfb6d1d4d19d45c0b79d5c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/377b2c77e4bf738c7bfb6d1d4d19d45c0b79d5c1", "html_url": "https://github.com/rust-lang/rust/commit/377b2c77e4bf738c7bfb6d1d4d19d45c0b79d5c1"}], "stats": {"total": 389, "additions": 389, "deletions": 0}, "files": [{"sha": "63fbe1f681cb2deec059b41da34725823c533604", "filename": "src/etc/emacs/README.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcf18786b4c37972d9220bfb8bbe6a4875433faf/src%2Fetc%2Femacs%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/fcf18786b4c37972d9220bfb8bbe6a4875433faf/src%2Fetc%2Femacs%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2FREADME.md?ref=fcf18786b4c37972d9220bfb8bbe6a4875433faf", "patch": "@@ -68,6 +68,12 @@ marking, press x, and ELPA will install the packages for you (under\n \n * or using <kbd>M-x package-install rust-mode\n \n+### Tests via ERT\n+\n+The file `rust-mode-tests.el` contains tests that can be run via ERT.  You can\n+use `run_rust_emacs_tests.sh` to run them in batch mode, if emacs is somewhere\n+in your `$PATH`.\n+\n ### Known bugs\n \n * Combining `global-whitespace-mode` and `rust-mode` is generally glitchy."}, {"sha": "afb98fde7b047282d80a8c3f679bf323bd809f66", "filename": "src/etc/emacs/run_rust_emacs_tests.sh", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcf18786b4c37972d9220bfb8bbe6a4875433faf/src%2Fetc%2Femacs%2Frun_rust_emacs_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fcf18786b4c37972d9220bfb8bbe6a4875433faf/src%2Fetc%2Femacs%2Frun_rust_emacs_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frun_rust_emacs_tests.sh?ref=fcf18786b4c37972d9220bfb8bbe6a4875433faf", "patch": "@@ -0,0 +1,3 @@\n+# This runs the test for emacs rust-mode.\n+# It must be possible to find emacs via PATH.\n+emacs -batch -l rust-mode.el -l rust-mode-tests.el -f ert-run-tests-batch-and-exit"}, {"sha": "a7cb2613b9aa7b985352d186b59f2a9b02905107", "filename": "src/etc/emacs/rust-mode-tests.el", "status": "added", "additions": 380, "deletions": 0, "changes": 380, "blob_url": "https://github.com/rust-lang/rust/blob/fcf18786b4c37972d9220bfb8bbe6a4875433faf/src%2Fetc%2Femacs%2Frust-mode-tests.el", "raw_url": "https://github.com/rust-lang/rust/raw/fcf18786b4c37972d9220bfb8bbe6a4875433faf/src%2Fetc%2Femacs%2Frust-mode-tests.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode-tests.el?ref=fcf18786b4c37972d9220bfb8bbe6a4875433faf", "patch": "@@ -0,0 +1,380 @@\n+;;; rust-mode-tests.el --- ERT tests for rust-mode.el\n+\n+(require 'rust-mode)\n+(require 'ert)\n+(require 'cl)\n+\n+(setq rust-test-fill-column 32)\n+\n+(defun rust-compare-code-after-manip (original point-pos manip-func expected got)\n+  (equal expected got))\n+\n+(defun rust-test-explain-bad-manip (original point-pos manip-func expected got)\n+  (if (equal expected got)\n+      nil\n+    (list \n+     ;; The (goto-char) and (insert) business here is just for\n+     ;; convenience--after an error, you can copy-paste that into emacs eval to\n+     ;; insert the bare strings into a buffer\n+     \"Rust code was manipulated wrong after:\"\n+     `(insert ,original)\n+     `(goto-char ,point-pos)\n+     'expected `(insert ,expected)\n+     'got `(insert ,got)\n+     (loop for i from 0 to (max (length original) (length expected))\n+           for oi = (if (< i (length got)) (elt got i))\n+           for ei = (if (< i (length expected)) (elt expected i))\n+           while (equal oi ei)\n+           finally return `(first-difference-at\n+                            (goto-char ,(+ 1 i))\n+                            expected ,(char-to-string ei)\n+                            got ,(char-to-string oi))))))\n+(put 'rust-compare-code-after-manip 'ert-explainer\n+     'rust-test-explain-bad-manip)\n+\n+(defun rust-test-manip-code (original point-pos manip-func expected)\n+  (with-temp-buffer\n+    (rust-mode)\n+    (insert original)\n+    (goto-char point-pos)\n+    (funcall manip-func)\n+    (should (rust-compare-code-after-manip\n+             original point-pos manip-func expected (buffer-string)))))\n+\n+(defun test-fill-paragraph (unfilled expected &optional start-pos end-pos)\n+  \"We're going to run through many scenarios here--the point should be able to be anywhere from the start-pos (defaults to 1) through end-pos (defaults to the length of what was passed in) and (fill-paragraph) should return the same result.\n+\n+Also, the result should be the same regardless of whether the code is at the beginning or end of the file.  (If you're not careful, that can make a difference.)  So we test each position given above with the passed code at the beginning, the end, neither and both.  So we do this a total of (end-pos - start-pos)*4 times.  Oy.\"\n+  (let* ((start-pos (or start-pos 1))\n+         (end-pos (or end-pos (length unfilled)))\n+         (padding \"\\n     \\n\")\n+         (padding-len (length padding)))\n+    (loop\n+     for pad-at-beginning from 0 to 1\n+     for pad-at-end from 0 to 1\n+     with padding-beginning = (if (= 0 pad-at-beginning) \"\" padding)\n+     with padding-end = (if (= 0 pad-at-end) \"\" padding)\n+     with padding-adjust = (* padding-len pad-at-beginning)\n+     with padding-beginning = (if (= 0 pad-at-beginning) \"\" padding)\n+     with padding-end = (if (= 0 pad-at-end) \"\" padding)\n+     for pos from (if (= 1 start-pos) 1 (+ padding-adjust start-pos)) to (+ end-pos padding-adjust)\n+     do (rust-test-manip-code\n+           (concat padding-beginning unfilled padding-end)\n+           pos\n+           (lambda () \n+             (let ((fill-column rust-test-fill-column))\n+               (fill-paragraph)))\n+           (concat padding-beginning expected padding-end)))))\n+\n+(ert-deftest fill-paragraph-top-level-multi-line-style-doc-comment-second-line ()\n+  (test-fill-paragraph \n+   \"/**\n+ * This is a very very very very very very very long string\n+ */\"\n+   \"/**\n+ * This is a very very very very\n+ * very very very long string\n+ */\"))\n+\n+\n+(ert-deftest fill-paragraph-top-level-multi-line-style-doc-comment-first-line ()\n+  (test-fill-paragraph\n+   \"/** This is a very very very very very very very long string\n+ */\"\n+   \"/** This is a very very very\n+ * very very very very long\n+ * string\n+ */\"))\n+\n+(ert-deftest fill-paragraph-multi-paragraph-multi-line-style-doc-comment ()\n+  (let\n+      ((multi-paragraph-unfilled\n+        \"/**\n+ * This is the first really really really really really really really long paragraph\n+ *\n+ * This is the second really really really really really really long paragraph\n+ */\"))\n+    (test-fill-paragraph\n+     multi-paragraph-unfilled\n+     \"/**\n+ * This is the first really\n+ * really really really really\n+ * really really long paragraph\n+ *\n+ * This is the second really really really really really really long paragraph\n+ */\"\n+     1 89)\n+    (test-fill-paragraph\n+     multi-paragraph-unfilled\n+     \"/**\n+ * This is the first really really really really really really really long paragraph\n+ *\n+ * This is the second really\n+ * really really really really\n+ * really long paragraph\n+ */\"\n+     90)))\n+\n+(ert-deftest fill-paragraph-multi-paragraph-single-line-style-doc-comment ()\n+  (let\n+      ((multi-paragraph-unfilled\n+        \"/// This is the first really really really really really really really long paragraph\n+///\n+/// This is the second really really really really really really long paragraph\"))\n+    (test-fill-paragraph\n+     multi-paragraph-unfilled\n+     \"/// This is the first really\n+/// really really really really\n+/// really really long paragraph\n+///\n+/// This is the second really really really really really really long paragraph\"\n+     1 86)\n+    (test-fill-paragraph\n+     multi-paragraph-unfilled\n+     \"/// This is the first really really really really really really really long paragraph\n+///\n+/// This is the second really\n+/// really really really really\n+/// really long paragraph\"\n+     87)))\n+\n+(ert-deftest fill-paragraph-multi-paragraph-single-line-style-indented ()\n+  (test-fill-paragraph\n+   \"     // This is the first really really really really really really really long paragraph\n+     //\n+     // This is the second really really really really really really long paragraph\"\n+   \"     // This is the first really\n+     // really really really\n+     // really really really\n+     // long paragraph\n+     //\n+     // This is the second really really really really really really long paragraph\" 1 89))\n+\n+(ert-deftest fill-paragraph-multi-line-style-inner-doc-comment ()\n+  (test-fill-paragraph\n+   \"/*! This is a very very very very very very very long string\n+ */\"\n+   \"/*! This is a very very very\n+ * very very very very long\n+ * string\n+ */\"))\n+\n+(ert-deftest fill-paragraph-single-line-style-inner-doc-comment ()\n+  (test-fill-paragraph\n+   \"//! This is a very very very very very very very long string\"\n+   \"//! This is a very very very\n+//! very very very very long\n+//! string\"))\n+\n+(ert-deftest fill-paragraph-prefixless-multi-line-doc-comment ()\n+  (test-fill-paragraph\n+   \"/**\n+This is my summary. Blah blah blah blah blah. Dilly dally dilly dally dilly dally doo.\n+\n+This is some more text.  Fee fie fo fum.  Humpty dumpty sat on a wall.\n+*/\"\n+   \"/**\n+This is my summary. Blah blah\n+blah blah blah. Dilly dally\n+dilly dally dilly dally doo.\n+\n+This is some more text.  Fee fie fo fum.  Humpty dumpty sat on a wall.\n+*/\" 4 90))\n+\n+(ert-deftest fill-paragraph-with-no-space-after-star-prefix ()\n+  (test-fill-paragraph\n+   \"/** \n+ *This is a very very very very very very very long string\n+ */\"\n+   \"/** \n+ *This is a very very very very\n+ *very very very long string\n+ */\"))\n+\n+(defun test-auto-fill (initial position inserted expected)\n+  (rust-test-manip-code \n+   initial\n+   position\n+   (lambda ()\n+     (unwind-protect\n+         (progn\n+           (let ((fill-column rust-test-fill-column))\n+             (auto-fill-mode)\n+             (goto-char position)\n+             (insert inserted)\n+             (syntax-ppss-flush-cache 1)\n+             (funcall auto-fill-function)))\n+       (auto-fill-mode t)))\n+   expected))\n+\n+(ert-deftest auto-fill-multi-line-doc-comment ()\n+  (test-auto-fill\n+   \"/**\n+ * \n+ */\"\n+   8\n+   \"This is a very very very very very very very long string\"\n+   \"/**\n+ * This is a very very very very\n+ * very very very long string\n+ */\"))\n+\n+(ert-deftest auto-fill-single-line-doc-comment ()\n+  (test-auto-fill\n+   \"/// This is the first really\n+/// really really really really\n+/// really really long paragraph\n+///\n+/// \"\n+   103\n+   \"This is the second really really really really really really long paragraph\"\n+    \"/// This is the first really\n+/// really really really really\n+/// really really long paragraph\n+///\n+/// This is the second really\n+/// really really really really\n+/// really long paragraph\"\n+    ))\n+\n+(ert-deftest auto-fill-multi-line-prefixless ()\n+  (test-auto-fill\n+   \"/*\n+\n+ */\"\n+   4\n+   \"This is a very very very very very very very long string\"\n+   \"/*\n+This is a very very very very\n+very very very long string\n+ */\"\n+   ))\n+\n+(defun test-indent (indented)\n+  (let ((deindented (replace-regexp-in-string \"^[[:blank:]]*\" \"      \" indented)))\n+    (rust-test-manip-code\n+     deindented\n+     1\n+     (lambda () (indent-region 1 (buffer-size)))\n+     indented)))\n+\n+\n+(ert-deftest indent-struct-fields-aligned ()\n+  (test-indent\n+\"\n+struct Foo { bar: int,\n+             baz: int }\n+\n+struct Blah {x:int,\n+             y:int,\n+             z:~str}\"))\n+\n+(ert-deftest indent-doc-comments ()\n+  (test-indent\n+\"\n+/**\n+ * This is a doc comment\n+ *\n+ */\n+\n+/// So is this\n+\n+fn foo() {\n+    /*!\n+     * this is a nested doc comment\n+     */\n+    \n+    //! And so is this\n+}\"))\n+\n+(ert-deftest indent-inside-braces ()\n+  (test-indent\n+   \"\n+// struct fields out one level:\n+struct foo {\n+    a:int,\n+    // comments too\n+    b:char\n+}\n+\n+fn bar(x:~int) {   // comment here should not affect the next indent\n+    bla();\n+    bla();\n+}\"))\n+\n+(ert-deftest indent-top-level ()\n+  (test-indent\n+   \"\n+// Everything here is at the top level and should not be indented\n+#[attrib]\n+mod foo;\n+\n+pub static bar = Quux{a: b()}\n+\n+use foo::bar::baz;\n+\n+fn foo() { }\n+\"))\n+\n+(ert-deftest indent-params-no-align ()\n+  (test-indent\n+   \"\n+// Indent out one level because no params appear on the first line\n+fn xyzzy(\n+    a:int,\n+    b:char) { }\n+\n+fn abcdef(\n+    a:int,\n+    b:char)\n+    -> char\n+{ }\"))\n+\n+(ert-deftest indent-params-align ()\n+  (test-indent\n+   \"\n+// Align the second line of params to the first\n+fn foo(a:int,\n+       b:char) { }\n+\n+fn bar(   a:int,\n+          b:char)\n+          -> int\n+{ }\n+\n+fn baz(   a:int,  // shoudl work with a comment here\n+          b:char)\n+          -> int\n+{ }\n+\"))\n+\n+(ert-deftest indent-square-bracket-alignment ()\n+  (test-indent\n+   \"\n+fn args_on_the_next_line( // with a comment\n+    a:int,\n+    b:~str) {\n+    let aaaaaa = [\n+        1,\n+        2,\n+        3];\n+    let bbbbbbb = [1, 2, 3,\n+                   4, 5, 6];\n+    let ccc = [   10, 9, 8,\n+                  7, 6, 5];\n+}\n+\"))\n+\n+(ert-deftest indent-nested-fns ()\n+  (test-indent\n+   \"\n+fn nexted_fns(a: fn(b:int,\n+                    c:char)\n+                    -> int,\n+              d: int)\n+              -> uint\n+{\n+    0\n+}\n+\"\n+))"}]}