{"sha": "b936f34a5c4144db9135baaa07a1c12f73b5d316", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MzZmMzRhNWM0MTQ0ZGI5MTM1YmFhYTA3YTFjMTJmNzNiNWQzMTY=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-06-13T18:45:45Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-06-13T18:45:45Z"}, "message": "Add various special functions (recip, signum, copysign)", "tree": {"sha": "e334cb8aabd1b30fd314ac48aadab430828d13d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e334cb8aabd1b30fd314ac48aadab430828d13d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b936f34a5c4144db9135baaa07a1c12f73b5d316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b936f34a5c4144db9135baaa07a1c12f73b5d316", "html_url": "https://github.com/rust-lang/rust/commit/b936f34a5c4144db9135baaa07a1c12f73b5d316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b936f34a5c4144db9135baaa07a1c12f73b5d316/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96f0f5d29f1af3327805ed1d1864c639baef58c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/96f0f5d29f1af3327805ed1d1864c639baef58c2", "html_url": "https://github.com/rust-lang/rust/commit/96f0f5d29f1af3327805ed1d1864c639baef58c2"}], "stats": {"total": 105, "additions": 104, "deletions": 1}, "files": [{"sha": "5044ac57ec5630e9175fa782edef942b7a48a8eb", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b936f34a5c4144db9135baaa07a1c12f73b5d316/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b936f34a5c4144db9135baaa07a1c12f73b5d316/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=b936f34a5c4144db9135baaa07a1c12f73b5d316", "patch": "@@ -4,7 +4,7 @@\n /// `$lanes` of float `$type`, which uses `$bits_ty` as its binary\n /// representation. Called from `define_float_vector!`.\n macro_rules! impl_float_vector {\n-    { $name:ident, $type:ty, $bits_ty:ident, $mask_ty:ident, $mask_impl_ty:ident } => {\n+    { $name:ident, $type:ident, $bits_ty:ident, $mask_ty:ident, $mask_impl_ty:ident } => {\n         impl_vector! { $name, $type }\n         impl_float_reductions! { $name, $type }\n \n@@ -43,6 +43,25 @@ macro_rules! impl_float_vector {\n             pub fn sqrt(self) -> Self {\n                 unsafe { crate::intrinsics::simd_fsqrt(self) }\n             }\n+\n+            /// Takes the reciprocal (inverse) of each lane, `1/x`.\n+            #[inline]\n+            pub fn recip(self) -> Self {\n+                Self::splat(1.0) / self\n+            }\n+\n+            /// Converts each lane from radians to degrees.\n+            #[inline]\n+            pub fn to_degrees(self) -> Self {\n+                // to_degrees uses a special constant for better precision, so extract that constant\n+                self * Self::splat($type::to_degrees(1.))\n+            }\n+\n+            /// Converts each lane from degrees to radians.\n+            #[inline]\n+            pub fn to_radians(self) -> Self {\n+                self * Self::splat(core::$type::consts::PI / 180.)\n+            }\n         }\n \n         impl<const LANES: usize> $name<LANES>\n@@ -97,6 +116,26 @@ macro_rules! impl_float_vector {\n             pub fn is_normal(self) -> crate::$mask_ty<LANES> {\n                 !(self.abs().lanes_eq(Self::splat(0.0)) | self.is_nan() | self.is_subnormal() | self.is_infinite())\n             }\n+\n+            /// Replaces each lane with a number that represents its sign.\n+            ///\n+            /// * `1.0` if the number is positive, `+0.0`, or `INFINITY`\n+            /// * `-1.0` if the number is negative, `-0.0`, or `NEG_INFINITY`\n+            /// * `NAN` if the number is `NAN`\n+            #[inline]\n+            pub fn signum(self) -> Self {\n+                self.is_nan().select(Self::splat($type::NAN), Self::splat(1.0).copysign(self))\n+            }\n+\n+            /// Returns each lane with the magnitude of `self` and the sign of `sign`.\n+            ///\n+            /// If any lane is a `NAN`, then a `NAN` with the sign of `sign` is returned.\n+            #[inline]\n+            pub fn copysign(self, sign: Self) -> Self {\n+                let sign_bit = sign.to_bits() & Self::splat(-0.).to_bits();\n+                let magnitude = self.to_bits() & !Self::splat(-0.).to_bits();\n+                Self::from_bits(sign_bit | magnitude)\n+            }\n         }\n     };\n }"}, {"sha": "dd7b2225dbd720936f6af349eb480d39469d6ccf", "filename": "crates/core_simd/src/vector/int.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b936f34a5c4144db9135baaa07a1c12f73b5d316/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b936f34a5c4144db9135baaa07a1c12f73b5d316/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs?ref=b936f34a5c4144db9135baaa07a1c12f73b5d316", "patch": "@@ -33,14 +33,28 @@ macro_rules! impl_integer_vector {\n             crate::$mask_ty<LANES>: crate::Mask,\n         {\n             /// Returns true for each positive lane and false if it is zero or negative.\n+            #[inline]\n             pub fn is_positive(self) -> crate::$mask_ty<LANES> {\n                 self.lanes_gt(Self::splat(0))\n             }\n \n             /// Returns true for each negative lane and false if it is zero or positive.\n+            #[inline]\n             pub fn is_negative(self) -> crate::$mask_ty<LANES> {\n                 self.lanes_lt(Self::splat(0))\n             }\n+\n+            /// Returns numbers representing the sign of each lane.\n+            /// * `0` if the number is zero\n+            /// * `1` if the number is positive\n+            /// * `-1` if the number is negative\n+            #[inline]\n+            pub fn signum(self) -> Self {\n+                self.is_positive().select(\n+                    Self::splat(1),\n+                    self.is_negative().select(Self::splat(-1), Self::splat(0))\n+                )\n+            }\n         }\n     }\n }"}, {"sha": "9ada95e851e1a6bc903f2dbb8ab32651b92701ee", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b936f34a5c4144db9135baaa07a1c12f73b5d316/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b936f34a5c4144db9135baaa07a1c12f73b5d316/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=b936f34a5c4144db9135baaa07a1c12f73b5d316", "patch": "@@ -247,6 +247,15 @@ macro_rules! impl_signed_tests {\n                         &|_| true,\n                     );\n                 }\n+\n+                fn signum<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::signum,\n+                        &Scalar::signum,\n+                        &|_| true,\n+                    )\n+                }\n+\n             }\n \n             test_helpers::test_lanes_panic! {\n@@ -433,6 +442,47 @@ macro_rules! impl_float_tests {\n                         &|_| true,\n                     )\n                 }\n+\n+                fn recip<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::recip,\n+                        &Scalar::recip,\n+                        &|_| true,\n+                    )\n+                }\n+\n+                fn to_degrees<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::to_degrees,\n+                        &Scalar::to_degrees,\n+                        &|_| true,\n+                    )\n+                }\n+\n+                fn to_radians<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::to_radians,\n+                        &Scalar::to_radians,\n+                        &|_| true,\n+                    )\n+                }\n+\n+                fn signum<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::signum,\n+                        &Scalar::signum,\n+                        &|_| true,\n+                    )\n+                }\n+\n+                fn copysign<const LANES: usize>() {\n+                    test_helpers::test_binary_elementwise(\n+                        &Vector::<LANES>::copysign,\n+                        &Scalar::copysign,\n+                        &|_, _| true,\n+                    )\n+                }\n+\n                 fn horizontal_sum<const LANES: usize>() {\n                     test_helpers::test_1(&|x| {\n                         test_helpers::prop_assert_biteq! ("}]}