{"sha": "530a845d2fab69282326a7a5d0f8b603012932f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMGE4NDVkMmZhYjY5MjgyMzI2YTdhNWQwZjhiNjAzMDEyOTMyZjM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-10-08T13:36:03Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-10-08T13:36:03Z"}, "message": "Simplify multiline case in rewrite_struct_field()", "tree": {"sha": "bcf592cb4628d3754835d24daf357a3658cfdcdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcf592cb4628d3754835d24daf357a3658cfdcdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/530a845d2fab69282326a7a5d0f8b603012932f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/530a845d2fab69282326a7a5d0f8b603012932f3", "html_url": "https://github.com/rust-lang/rust/commit/530a845d2fab69282326a7a5d0f8b603012932f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/530a845d2fab69282326a7a5d0f8b603012932f3/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55fc5b5ec2c43da2aa876c0d032411dee168e800", "url": "https://api.github.com/repos/rust-lang/rust/commits/55fc5b5ec2c43da2aa876c0d032411dee168e800", "html_url": "https://github.com/rust-lang/rust/commit/55fc5b5ec2c43da2aa876c0d032411dee168e800"}], "stats": {"total": 40, "additions": 11, "deletions": 29}, "files": [{"sha": "be22db49fbf1e79a1c30576443262368fcc9793d", "filename": "src/items.rs", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/530a845d2fab69282326a7a5d0f8b603012932f3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530a845d2fab69282326a7a5d0f8b603012932f3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=530a845d2fab69282326a7a5d0f8b603012932f3", "patch": "@@ -1421,36 +1421,18 @@ pub fn rewrite_struct_field(\n     }\n \n     // We must use multiline.\n-    let last_line_width = last_line_width(&prefix);\n-    let ty_rewritten = rewrite_struct_field_type(context, last_line_width, field, &spacing, shape);\n-\n-    let type_offset = shape.indent.block_indent(context.config);\n-    let rewrite_type_in_next_line = || {\n-        field\n-            .ty\n-            .rewrite(context, Shape::indented(type_offset, context.config))\n-    };\n+    let new_shape = shape.with_max_width(context.config);\n+    let ty_rewritten = field.ty.rewrite(context, new_shape)?;\n \n-    let field_str = match ty_rewritten {\n-        // If we start from the next line and type fits in a single line, then do so.\n-        Some(ref ty) => match rewrite_type_in_next_line() {\n-            Some(ref new_ty) if !new_ty.contains('\\n') => format!(\n-                \"{}\\n{}{}\",\n-                prefix,\n-                type_offset.to_string(context.config),\n-                &new_ty\n-            ),\n-            _ => prefix + ty,\n-        },\n-        _ => {\n-            let ty = rewrite_type_in_next_line()?;\n-            format!(\n-                \"{}\\n{}{}\",\n-                prefix,\n-                type_offset.to_string(context.config),\n-                &ty\n-            )\n-        }\n+    let field_str = if prefix.is_empty() {\n+        ty_rewritten\n+    } else if prefix.len() + first_line_width(&ty_rewritten) + 1 <= shape.width {\n+        prefix + \" \" + &ty_rewritten\n+    } else {\n+        let type_offset = shape.indent.block_indent(context.config);\n+        let nested_shape = Shape::indented(type_offset, context.config);\n+        let nested_ty = field.ty.rewrite(context, nested_shape)?;\n+        prefix + \"\\n\" + &type_offset.to_string(context.config) + &nested_ty\n     };\n     combine_strs_with_missing_comments(\n         context,"}]}