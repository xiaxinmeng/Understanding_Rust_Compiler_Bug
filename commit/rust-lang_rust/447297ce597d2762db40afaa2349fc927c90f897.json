{"sha": "447297ce597d2762db40afaa2349fc927c90f897", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NzI5N2NlNTk3ZDI3NjJkYjQwYWZhYTIzNDlmYzkyN2M5MGY4OTc=", "commit": {"author": {"name": "Thomas Lively", "email": "tlively@google.com", "date": "2017-06-20T20:37:58Z"}, "committer": {"name": "Thomas Lively", "email": "tlively@google.com", "date": "2017-06-23T01:34:56Z"}, "message": "Make wasm32 buildbot test LLVM backend\n\nThis adds the experimental targets option to configure so it can be used\nby the builders and changes the wasm32 Dockerfile accordingly. Instead\nof using LLVM from the emsdk, the builder's emscripten tools now uses\nthe Rust in-tree LLVM, since this is the one built with wasm support.", "tree": {"sha": "c78f7493384a6805b973a49d5b6a685d969072b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c78f7493384a6805b973a49d5b6a685d969072b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/447297ce597d2762db40afaa2349fc927c90f897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/447297ce597d2762db40afaa2349fc927c90f897", "html_url": "https://github.com/rust-lang/rust/commit/447297ce597d2762db40afaa2349fc927c90f897", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/447297ce597d2762db40afaa2349fc927c90f897/comments", "author": {"login": "tlively", "id": 7121787, "node_id": "MDQ6VXNlcjcxMjE3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/7121787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlively", "html_url": "https://github.com/tlively", "followers_url": "https://api.github.com/users/tlively/followers", "following_url": "https://api.github.com/users/tlively/following{/other_user}", "gists_url": "https://api.github.com/users/tlively/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlively/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlively/subscriptions", "organizations_url": "https://api.github.com/users/tlively/orgs", "repos_url": "https://api.github.com/users/tlively/repos", "events_url": "https://api.github.com/users/tlively/events{/privacy}", "received_events_url": "https://api.github.com/users/tlively/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlively", "id": 7121787, "node_id": "MDQ6VXNlcjcxMjE3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/7121787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlively", "html_url": "https://github.com/tlively", "followers_url": "https://api.github.com/users/tlively/followers", "following_url": "https://api.github.com/users/tlively/following{/other_user}", "gists_url": "https://api.github.com/users/tlively/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlively/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlively/subscriptions", "organizations_url": "https://api.github.com/users/tlively/orgs", "repos_url": "https://api.github.com/users/tlively/repos", "events_url": "https://api.github.com/users/tlively/events{/privacy}", "received_events_url": "https://api.github.com/users/tlively/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd62230fbdcaf6508dec02a59818f732bd4c1759", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd62230fbdcaf6508dec02a59818f732bd4c1759", "html_url": "https://github.com/rust-lang/rust/commit/bd62230fbdcaf6508dec02a59818f732bd4c1759"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "e08bcc028272e411565efb7c3d212641b2a169a6", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/447297ce597d2762db40afaa2349fc927c90f897/configure", "raw_url": "https://github.com/rust-lang/rust/raw/447297ce597d2762db40afaa2349fc927c90f897/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=447297ce597d2762db40afaa2349fc927c90f897", "patch": "@@ -490,6 +490,7 @@ valopt musl-root-armhf \"\" \"arm-unknown-linux-musleabihf install directory\"\n valopt musl-root-armv7 \"\" \"armv7-unknown-linux-musleabihf install directory\"\n valopt extra-filename \"\" \"Additional data that is hashed and passed to the -C extra-filename flag\"\n valopt qemu-armhf-rootfs \"\" \"rootfs in qemu testing, you probably don't want to use this\"\n+valopt experimental-targets \"\" \"experimental LLVM targets to build\"\n \n if [ -e ${CFG_SRC_DIR}.git ]\n then"}, {"sha": "3ada846e38236989b8dedd5a1558114ba35ae2d3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/447297ce597d2762db40afaa2349fc927c90f897/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447297ce597d2762db40afaa2349fc927c90f897/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=447297ce597d2762db40afaa2349fc927c90f897", "patch": "@@ -497,6 +497,9 @@ impl Config {\n                 \"CFG_TARGET\" if value.len() > 0 => {\n                     self.target.extend(value.split(\" \").map(|s| s.to_string()));\n                 }\n+                \"CFG_EXPERIMENTAL_TARGETS\" if value.len() > 0 => {\n+                    self.llvm_experimental_targets = Some(value.to_string());\n+                }\n                 \"CFG_MUSL_ROOT\" if value.len() > 0 => {\n                     self.musl_root = Some(parse_configure_path(value));\n                 }"}, {"sha": "f3dd48ae411d725ee4d1cd0aac328b2b41a0cac4", "filename": "src/ci/docker/disabled/wasm32/Dockerfile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/447297ce597d2762db40afaa2349fc927c90f897/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/447297ce597d2762db40afaa2349fc927c90f897/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile?ref=447297ce597d2762db40afaa2349fc927c90f897", "patch": "@@ -20,7 +20,7 @@ RUN sh /scripts/dumb-init.sh\n # emscripten\n COPY scripts/emscripten.sh /scripts/\n RUN bash /scripts/emscripten.sh\n-COPY wasm32/node.sh /usr/local/bin/node\n+COPY disabled/wasm32/node.sh /usr/local/bin/node\n \n # env\n ENV PATH=$PATH:/emsdk-portable\n@@ -30,9 +30,9 @@ ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.37.13/\n ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.37.13_64bit/binaryen/\n ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n-ENV TARGETS=wasm32-unknown-emscripten\n+ENV TARGETS=wasm32-unknown-emscripten,wasm32-experimental-emscripten\n \n-ENV RUST_CONFIGURE_ARGS --target=$TARGETS\n+ENV RUST_CONFIGURE_ARGS --target=$TARGETS --experimental-targets=WebAssembly\n \n ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n "}, {"sha": "516ef0ae0d27affcede65250ee49914c1349ebce", "filename": "src/ci/docker/scripts/emscripten.sh", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/447297ce597d2762db40afaa2349fc927c90f897/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/447297ce597d2762db40afaa2349fc927c90f897/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh?ref=447297ce597d2762db40afaa2349fc927c90f897", "patch": "@@ -40,9 +40,12 @@ hide_output ./emsdk install sdk-1.37.13-64bit\n source ./emsdk_env.sh\n echo \"main(){}\" > a.c\n HOME=/emsdk-portable/ emcc a.c\n-HOME=/emsdk-portable/ emcc -s BINARYEN=1 a.c\n+HOME=/emsdk-portable/ emcc -s WASM=1 a.c\n rm -f a.*\n \n+# Make emscripten use Rust's LLVM\n+echo \"LLVM_ROOT='/checkout/obj/build/x86_64-unknown-linux-gnu/llvm/bin'\" >> /root/.emscripten\n+\n # Make emsdk usable by any user\n cp /root/.emscripten /emsdk-portable\n chmod a+rxw -R /emsdk-portable"}, {"sha": "3b3a94c6c58255f22eb8ee2b8259d1dd36337620", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/447297ce597d2762db40afaa2349fc927c90f897/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447297ce597d2762db40afaa2349fc927c90f897/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=447297ce597d2762db40afaa2349fc927c90f897", "patch": "@@ -1280,6 +1280,12 @@ actual:\\n\\\n         let extra_link_args = vec![\"-L\".to_owned(),\n                                    aux_dir.to_str().unwrap().to_owned()];\n \n+        let mut env = self.props.rustc_env.clone();\n+        // Tell emscripten to link using libc produced with LLVM backend\n+        if self.config.target.contains(\"wasm32\") && self.config.target.contains(\"experimental\") {\n+            env.push((\"EMCC_WASM_BACKEND\".to_string(), \"1\".to_string()));\n+        }\n+\n         for rel_ab in &self.props.aux_builds {\n             let aux_testpaths = self.compute_aux_test_paths(rel_ab);\n             let aux_props = self.props.from_aux_file(&aux_testpaths.file,\n@@ -1319,7 +1325,7 @@ actual:\\n\\\n             };\n             let aux_args = aux_cx.make_compile_args(crate_type, &aux_testpaths.file, aux_output);\n             let auxres = aux_cx.compose_and_run(aux_args,\n-                                                Vec::new(),\n+                                                env.clone(),\n                                                 aux_cx.config.compile_lib_path.to_str().unwrap(),\n                                                 Some(aux_dir.to_str().unwrap()),\n                                                 None);\n@@ -1332,13 +1338,12 @@ actual:\\n\\\n         }\n \n         self.compose_and_run(args,\n-                             self.props.rustc_env.clone(),\n+                             env,\n                              self.config.compile_lib_path.to_str().unwrap(),\n                              Some(aux_dir.to_str().unwrap()),\n                              input)\n     }\n \n-\n     fn compose_and_run(&self,\n                        ProcArgs{ args, prog }: ProcArgs,\n                        procenv: Vec<(String, String)> ,"}]}