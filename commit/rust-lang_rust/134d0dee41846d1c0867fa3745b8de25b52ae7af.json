{"sha": "134d0dee41846d1c0867fa3745b8de25b52ae7af", "node_id": "C_kwDOAAsO6NoAKDEzNGQwZGVlNDE4NDZkMWMwODY3ZmEzNzQ1YjhkZTI1YjUyYWU3YWY", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-07-12T02:00:22Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-07-12T02:28:15Z"}, "message": "declare span variable before call", "tree": {"sha": "6ef375b0f32513ceb1154095b59ddc8ffacf8c8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ef375b0f32513ceb1154095b59ddc8ffacf8c8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/134d0dee41846d1c0867fa3745b8de25b52ae7af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/134d0dee41846d1c0867fa3745b8de25b52ae7af", "html_url": "https://github.com/rust-lang/rust/commit/134d0dee41846d1c0867fa3745b8de25b52ae7af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/134d0dee41846d1c0867fa3745b8de25b52ae7af/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25fe4193ec9403dbb942075b782e4b91b420f2bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/25fe4193ec9403dbb942075b782e4b91b420f2bd", "html_url": "https://github.com/rust-lang/rust/commit/25fe4193ec9403dbb942075b782e4b91b420f2bd"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "8e3ab26a947f1c9413e1e06233696a2c075448c3", "filename": "clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/134d0dee41846d1c0867fa3745b8de25b52ae7af/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134d0dee41846d1c0867fa3745b8de25b52ae7af/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=134d0dee41846d1c0867fa3745b8de25b52ae7af", "patch": "@@ -1,5 +1,5 @@\n use super::{make_iterator_snippet, IncrementVisitor, InitializeVisitor, EXPLICIT_COUNTER_LOOP};\n-use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{get_enclosing_block, is_integer_const};\n use if_chain::if_chain;\n@@ -35,28 +35,24 @@ pub(super) fn check<'tcx>(\n                 if is_integer_const(cx, initializer, 0);\n                 then {\n                     let mut applicability = Applicability::MaybeIncorrect;\n+                    let span = expr.span.with_hi(arg.span.hi());\n \n                     let int_name = match ty.map(Ty::kind) {\n                         // usize or inferred\n                         Some(ty::Uint(UintTy::Usize)) | None => {\n-                            span_lint_and_then(\n+                            span_lint_and_sugg(\n                                 cx,\n                                 EXPLICIT_COUNTER_LOOP,\n-                                expr.span.with_hi(arg.span.hi()),\n+                                span,\n                                 &format!(\"the variable `{}` is used as a loop counter\", name),\n-                                |diag| {\n-                                    diag.span_suggestion(\n-                                        expr.span.with_hi(arg.span.hi()),\n-                                        \"consider using\",\n-                                        format!(\n-                                            \"for ({}, {}) in {}.enumerate()\",\n-                                            name,\n-                                            snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n-                                            make_iterator_snippet(cx, arg, &mut applicability),\n-                                        ),\n-                                        applicability,\n-                                    );\n-                                }\n+                                \"consider using\",\n+                                format!(\n+                                    \"for ({}, {}) in {}.enumerate()\",\n+                                    name,\n+                                    snippet_with_applicability(cx, pat.span, \"item\", &mut applicability),\n+                                    make_iterator_snippet(cx, arg, &mut applicability),\n+                                ),\n+                                applicability,\n                             );\n                             return;\n                         }\n@@ -68,11 +64,11 @@ pub(super) fn check<'tcx>(\n                     span_lint_and_then(\n                         cx,\n                         EXPLICIT_COUNTER_LOOP,\n-                        expr.span.with_hi(arg.span.hi()),\n+                        span,\n                         &format!(\"the variable `{}` is used as a loop counter\", name),\n                         |diag| {\n                             diag.span_suggestion(\n-                                expr.span.with_hi(arg.span.hi()),\n+                                span,\n                                 \"consider using\",\n                                 format!(\n                                     \"for ({}, {}) in (0_{}..).zip({})\","}]}