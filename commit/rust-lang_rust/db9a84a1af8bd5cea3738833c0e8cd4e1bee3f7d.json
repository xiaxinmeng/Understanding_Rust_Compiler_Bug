{"sha": "db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiOWE4NGExYWY4YmQ1Y2VhMzczODgzM2MwZThjZDRlMWJlZTNmN2Q=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-05-07T09:52:21Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-07-29T12:19:57Z"}, "message": "MinGW: emit dllexport/dllimport by rustc\n\nThis fixes various cases where LD could not guess dllexport correctly and greatly improves compatibility with LLD which is not going to support linker scripts anytime soon", "tree": {"sha": "0ecc3a3b448b12cbc53297825fc8c7295671b337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ecc3a3b448b12cbc53297825fc8c7295671b337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d", "html_url": "https://github.com/rust-lang/rust/commit/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ee1b62c811a6eb68d6db6dfb91f66a49956749b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee1b62c811a6eb68d6db6dfb91f66a49956749b", "html_url": "https://github.com/rust-lang/rust/commit/6ee1b62c811a6eb68d6db6dfb91f66a49956749b"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "ee6b28b3d1bb1fd3b72ede38c12ee0d9ce3811c4", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d", "patch": "@@ -168,7 +168,12 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n             }\n         }\n \n-        if cx.use_dll_storage_attrs && tcx.is_dllimport_foreign_item(instance_def_id) {\n+        // MinGW: For backward compatibility we rely on the linker to decide whether it\n+        // should use dllimport for functions.\n+        if cx.use_dll_storage_attrs\n+            && tcx.is_dllimport_foreign_item(instance_def_id)\n+            && tcx.sess.target.target.target_env != \"gnu\"\n+        {\n             unsafe {\n                 llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport);\n             }"}, {"sha": "5b9f131115bdae54868cfcfa56a7102a9dfca394", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d", "patch": "@@ -281,7 +281,7 @@ impl CodegenCx<'ll, 'tcx> {\n             // argument validation.\n             debug_assert!(\n                 !(self.tcx.sess.opts.cg.linker_plugin_lto.enabled()\n-                    && self.tcx.sess.target.target.options.is_like_msvc\n+                    && self.tcx.sess.target.target.options.is_like_windows\n                     && self.tcx.sess.opts.cg.prefer_dynamic)\n             );\n "}, {"sha": "191a337cd565c928ee994d9a4b67cdbf148d4d5f", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d", "patch": "@@ -217,7 +217,16 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         // attributes in LLVM IR as well as native dependencies (in C these\n         // correspond to `__declspec(dllimport)`).\n         //\n-        // Whenever a dynamic library is built by MSVC it must have its public\n+        // LD (BFD) in MinGW mode can often correctly guess `dllexport` but\n+        // relying on that can result in issues like #50176.\n+        // LLD won't support that and expects symbols with proper attributes.\n+        // Because of that we make MinGW target emit dllexport just like MSVC.\n+        // When it comes to dllimport we use it for constants but for functions\n+        // rely on the linker to do the right thing. Opposed to dllexport this\n+        // task is easy for them (both LD and LLD) and allows us to easily use\n+        // symbols from static libraries in shared libraries.\n+        //\n+        // Whenever a dynamic library is built on Windows it must have its public\n         // interface specified by functions tagged with `dllexport` or otherwise\n         // they're not available to be linked against. This poses a few problems\n         // for the compiler, some of which are somewhat fundamental, but we use\n@@ -254,8 +263,8 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         // this effect) by marking very little as `dllimport` and praying the\n         // linker will take care of everything. Fixing this problem will likely\n         // require adding a few attributes to Rust itself (feature gated at the\n-        // start) and then strongly recommending static linkage on MSVC!\n-        let use_dll_storage_attrs = tcx.sess.target.target.options.is_like_msvc;\n+        // start) and then strongly recommending static linkage on Windows!\n+        let use_dll_storage_attrs = tcx.sess.target.target.options.is_like_windows;\n \n         let check_overflow = tcx.sess.overflow_checks();\n "}, {"sha": "aba4991c29537cdf224947629caa970f09d2b21a", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d", "patch": "@@ -523,8 +523,9 @@ impl<'a> Linker for GccLinker<'a> {\n             return;\n         }\n \n+        let is_windows = self.sess.target.target.options.is_like_windows;\n         let mut arg = OsString::new();\n-        let path = tmpdir.join(\"list\");\n+        let path = tmpdir.join(if is_windows { \"list.def\" } else { \"list\" });\n \n         debug!(\"EXPORTED SYMBOLS:\");\n \n@@ -540,6 +541,21 @@ impl<'a> Linker for GccLinker<'a> {\n             if let Err(e) = res {\n                 self.sess.fatal(&format!(\"failed to write lib.def file: {}\", e));\n             }\n+        } else if is_windows {\n+            let res: io::Result<()> = try {\n+                let mut f = BufWriter::new(File::create(&path)?);\n+\n+                // .def file similar to MSVC one but without LIBRARY section\n+                // because LD doesn't like when it's empty\n+                writeln!(f, \"EXPORTS\")?;\n+                for symbol in self.info.exports[&crate_type].iter() {\n+                    debug!(\"  _{}\", symbol);\n+                    writeln!(f, \"  {}\", symbol)?;\n+                }\n+            };\n+            if let Err(e) = res {\n+                self.sess.fatal(&format!(\"failed to write list.def file: {}\", e));\n+            }\n         } else {\n             // Write an LD version script\n             let res: io::Result<()> = try {\n@@ -573,7 +589,10 @@ impl<'a> Linker for GccLinker<'a> {\n             if !self.is_ld {\n                 arg.push(\"-Wl,\")\n             }\n-            arg.push(\"--version-script=\");\n+            // Both LD and LLD accept export list in *.def file form, there are no flags required\n+            if !is_windows {\n+                arg.push(\"--version-script=\")\n+            }\n         }\n \n         arg.push(&path);"}, {"sha": "b0fae566a5aef39b1b77c167951fccd877db58f0", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d", "patch": "@@ -1846,11 +1846,11 @@ fn msvc_imps_needed(tcx: TyCtxt<'_>) -> bool {\n     // something is wrong with commandline arg validation.\n     assert!(\n         !(tcx.sess.opts.cg.linker_plugin_lto.enabled()\n-            && tcx.sess.target.target.options.is_like_msvc\n+            && tcx.sess.target.target.options.is_like_windows\n             && tcx.sess.opts.cg.prefer_dynamic)\n     );\n \n-    tcx.sess.target.target.options.is_like_msvc &&\n+    tcx.sess.target.target.options.is_like_windows &&\n         tcx.sess.crate_types().iter().any(|ct| *ct == CrateType::Rlib) &&\n     // ThinLTO can't handle this workaround in all cases, so we don't\n     // emit the `__imp_` symbols. Instead we make them unnecessary by disallowing"}, {"sha": "eb6fcb93002fc2c64acb5966b0f202ae1c9b7976", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=db9a84a1af8bd5cea3738833c0e8cd4e1bee3f7d", "patch": "@@ -1294,19 +1294,19 @@ pub fn build_session(\n // commandline argument, you can do so here.\n fn validate_commandline_args_with_session_available(sess: &Session) {\n     // Since we don't know if code in an rlib will be linked to statically or\n-    // dynamically downstream, rustc generates `__imp_` symbols that help the\n-    // MSVC linker deal with this lack of knowledge (#27438). Unfortunately,\n+    // dynamically downstream, rustc generates `__imp_` symbols that help linkers\n+    // on Windows deal with this lack of knowledge (#27438). Unfortunately,\n     // these manually generated symbols confuse LLD when it tries to merge\n-    // bitcode during ThinLTO. Therefore we disallow dynamic linking on MSVC\n+    // bitcode during ThinLTO. Therefore we disallow dynamic linking on Windows\n     // when compiling for LLD ThinLTO. This way we can validly just not generate\n     // the `dllimport` attributes and `__imp_` symbols in that case.\n     if sess.opts.cg.linker_plugin_lto.enabled()\n         && sess.opts.cg.prefer_dynamic\n-        && sess.target.target.options.is_like_msvc\n+        && sess.target.target.options.is_like_windows\n     {\n         sess.err(\n             \"Linker plugin based LTO is not supported together with \\\n-                  `-C prefer-dynamic` when targeting MSVC\",\n+                  `-C prefer-dynamic` when targeting Windows-like targets\",\n         );\n     }\n "}]}