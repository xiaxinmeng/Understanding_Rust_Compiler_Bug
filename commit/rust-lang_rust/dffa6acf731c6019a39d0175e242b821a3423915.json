{"sha": "dffa6acf731c6019a39d0175e242b821a3423915", "node_id": "C_kwDOAAsO6NoAKGRmZmE2YWNmNzMxYzYwMTlhMzlkMDE3NWUyNDJiODIxYTM0MjM5MTU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-16T14:15:59Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-16T14:50:43Z"}, "message": "Fix crash after simd type validation error\n\nFixes part of #1319", "tree": {"sha": "a688047473c54cdb845c3430026f69ac0c1ee40f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a688047473c54cdb845c3430026f69ac0c1ee40f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dffa6acf731c6019a39d0175e242b821a3423915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dffa6acf731c6019a39d0175e242b821a3423915", "html_url": "https://github.com/rust-lang/rust/commit/dffa6acf731c6019a39d0175e242b821a3423915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dffa6acf731c6019a39d0175e242b821a3423915/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c724ee6d0e1023a5cd9b8b5c0bf324b45d429c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c724ee6d0e1023a5cd9b8b5c0bf324b45d429c5", "html_url": "https://github.com/rust-lang/rust/commit/1c724ee6d0e1023a5cd9b8b5c0bf324b45d429c5"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "548a6bf45842b84deaec8247d7aa0328a704b954", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffa6acf731c6019a39d0175e242b821a3423915/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffa6acf731c6019a39d0175e242b821a3423915/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=dffa6acf731c6019a39d0175e242b821a3423915", "patch": "@@ -240,10 +240,9 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             substs,\n             args,\n             destination,\n+            target,\n             source_info.span,\n         );\n-        let ret_block = fx.get_block(target);\n-        fx.bcx.ins().jump(ret_block, &[]);\n     } else if codegen_float_intrinsic_call(fx, intrinsic, args, destination) {\n         let ret_block = fx.get_block(target);\n         fx.bcx.ins().jump(ret_block, &[]);"}, {"sha": "791ff5cfcf3c679be43af1f51ffa6abdef546b50", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dffa6acf731c6019a39d0175e242b821a3423915/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffa6acf731c6019a39d0175e242b821a3423915/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=dffa6acf731c6019a39d0175e242b821a3423915", "patch": "@@ -24,6 +24,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n     _substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     ret: CPlace<'tcx>,\n+    target: BasicBlock,\n     span: Span,\n ) {\n     match intrinsic {\n@@ -277,16 +278,15 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             } else {\n                 fx.tcx.sess.span_warn(span, \"Index argument for `simd_extract` is not a constant\");\n                 let trap_block = fx.bcx.create_block();\n-                let dummy_block = fx.bcx.create_block();\n                 let true_ = fx.bcx.ins().iconst(types::I8, 1);\n                 fx.bcx.ins().brnz(true_, trap_block, &[]);\n-                fx.bcx.ins().jump(dummy_block, &[]);\n+                let ret_block = fx.get_block(target);\n+                fx.bcx.ins().jump(ret_block, &[]);\n                 fx.bcx.switch_to_block(trap_block);\n                 crate::trap::trap_unimplemented(\n                     fx,\n                     \"Index argument for `simd_extract` is not a constant\",\n                 );\n-                fx.bcx.switch_to_block(dummy_block);\n                 return;\n             };\n \n@@ -876,7 +876,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         }\n \n         _ => {\n-            fx.tcx.sess.span_fatal(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n+            fx.tcx.sess.span_err(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n+            // Prevent verifier error\n+            fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n         }\n     }\n+    let ret_block = fx.get_block(target);\n+    fx.bcx.ins().jump(ret_block, &[]);\n }"}]}