{"sha": "515ca9312393bd00af0e867fceee9aff9b6e565d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNWNhOTMxMjM5M2JkMDBhZjBlODY3ZmNlZWU5YWZmOWI2ZTU2NWQ=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-02T09:54:31Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-02T09:56:21Z"}, "message": "Look for soft hyphens as well", "tree": {"sha": "e0e0d862d2185cd005c41ee61cc0d5b7612fd787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0e0d862d2185cd005c41ee61cc0d5b7612fd787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/515ca9312393bd00af0e867fceee9aff9b6e565d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/515ca9312393bd00af0e867fceee9aff9b6e565d", "html_url": "https://github.com/rust-lang/rust/commit/515ca9312393bd00af0e867fceee9aff9b6e565d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/515ca9312393bd00af0e867fceee9aff9b6e565d/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0eac45db4c065cd45fde8413623b9fc338fee4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0eac45db4c065cd45fde8413623b9fc338fee4b", "html_url": "https://github.com/rust-lang/rust/commit/f0eac45db4c065cd45fde8413623b9fc338fee4b"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "d3fe60042a87cf908b574876b8510cd4351df8ab", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/515ca9312393bd00af0e867fceee9aff9b6e565d/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/515ca9312393bd00af0e867fceee9aff9b6e565d/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=515ca9312393bd00af0e867fceee9aff9b6e565d", "patch": "@@ -8,18 +8,18 @@ use rustc_span::source_map::Span;\n use unicode_normalization::UnicodeNormalization;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for the Unicode zero-width space in the code.\n+    /// **What it does:** Checks for invisible Unicode characters in the code.\n     ///\n     /// **Why is this bad?** Having an invisible character in the code makes for all\n     /// sorts of April fools, but otherwise is very much frowned upon.\n     ///\n     /// **Known problems:** None.\n     ///\n-    /// **Example:** You don't see it, but there may be a zero-width space\n-    /// somewhere in this text.\n+    /// **Example:** You don't see it, but there may be a zero-width space or soft hyphen\n+    /// some\u00adwhere in this text.\n     pub ZERO_WIDTH_SPACE,\n     correctness,\n-    \"using a zero-width space in a string literal, which is confusing\"\n+    \"using an invisible character in a string literal, which is confusing\"\n }\n \n declare_clippy_lint! {\n@@ -91,14 +91,14 @@ fn escape<T: Iterator<Item = char>>(s: T) -> String {\n \n fn check_str(cx: &LateContext<'_>, span: Span, id: HirId) {\n     let string = snippet(cx, span, \"\");\n-    if string.contains('\\u{200B}') {\n+    if let Some(invisible) = string.chars().find(|c| ['\\u{200B}', '\\u{ad}'].contains(&c)) {\n         span_lint_and_sugg(\n             cx,\n             ZERO_WIDTH_SPACE,\n             span,\n-            \"zero-width space detected\",\n+            &format!(\"invisible character detected: {:?}\", invisible),\n             \"consider replacing the string with\",\n-            string.replace(\"\\u{200B}\", \"\\\\u{200B}\"),\n+            string.replace(\"\\u{200B}\", \"\\\\u{200B}\").replace(\"\\u{ad}\", \"\\\\u{AD}\"),\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "f3fd1c57da6324549588c59e55fc1175bf92ede8", "filename": "tests/ui/unicode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/515ca9312393bd00af0e867fceee9aff9b6e565d/tests%2Fui%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/515ca9312393bd00af0e867fceee9aff9b6e565d/tests%2Fui%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.rs?ref=515ca9312393bd00af0e867fceee9aff9b6e565d", "patch": "@@ -2,6 +2,8 @@\n fn zero() {\n     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n     print!(\"This\\u{200B}is\\u{200B}fine\");\n+    print!(\"Here >\u00ad< is a SHY, and \u00adanother\");\n+    print!(\"This\\u{ad}is\\u{ad}fine\");\n }\n \n #[warn(clippy::unicode_not_nfc)]"}, {"sha": "b0445b070fdd3e1bffbf73fdf5cf5b0d0ebce6c5", "filename": "tests/ui/unicode.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/515ca9312393bd00af0e867fceee9aff9b6e565d/tests%2Fui%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/515ca9312393bd00af0e867fceee9aff9b6e565d/tests%2Fui%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.stderr?ref=515ca9312393bd00af0e867fceee9aff9b6e565d", "patch": "@@ -1,26 +1,32 @@\n-error: zero-width space detected\n+error: invisible character detected: '/u{200b}'\n   --> $DIR/unicode.rs:3:12\n    |\n LL |     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{200B}< is a ZWS, and /u{200B}another\"`\n    |\n    = note: `-D clippy::zero-width-space` implied by `-D warnings`\n \n+error: invisible character detected: '/u{ad}'\n+  --> $DIR/unicode.rs:5:12\n+   |\n+LL |     print!(\"Here >\u00ad< is a SHY, and \u00adanother\");\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider replacing the string with: `\"Here >/u{AD}< is a SHY, and /u{AD}another\"`\n+\n error: non-NFC Unicode sequence detected\n-  --> $DIR/unicode.rs:9:12\n+  --> $DIR/unicode.rs:11:12\n    |\n LL |     print!(\"\u0300a\u0300h?\");\n    |            ^^^^^ help: consider replacing the string with: `\"\u0300\u00e0h?\"`\n    |\n    = note: `-D clippy::unicode-not-nfc` implied by `-D warnings`\n \n error: literal non-ASCII character detected\n-  --> $DIR/unicode.rs:15:12\n+  --> $DIR/unicode.rs:17:12\n    |\n LL |     print!(\"\u00dcben!\");\n    |            ^^^^^^^ help: consider replacing the string with: `\"/u{dc}ben!\"`\n    |\n    = note: `-D clippy::non-ascii-literal` implied by `-D warnings`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}]}