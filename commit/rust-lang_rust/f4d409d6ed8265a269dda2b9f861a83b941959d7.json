{"sha": "f4d409d6ed8265a269dda2b9f861a83b941959d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZDQwOWQ2ZWQ4MjY1YTI2OWRkYTJiOWY4NjFhODNiOTQxOTU5ZDc=", "commit": {"author": {"name": "Michael McConville", "email": "mmcco@mykolab.com", "date": "2015-12-17T02:54:16Z"}, "committer": {"name": "Michael McConville", "email": "mmcco@mykolab.com", "date": "2015-12-19T00:26:09Z"}, "message": "Use the getentropy(2) syscall on OpenBSD\n\nRust already supports Linux's getrandom(2), which is very similar and\nwas based on getentropy(2). This is a pretty clean, simple addition that\nuses the same approach as the iOS randomness API support.", "tree": {"sha": "b01f9fae28a7241391984c399fc2c3a22ab8ac84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b01f9fae28a7241391984c399fc2c3a22ab8ac84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4d409d6ed8265a269dda2b9f861a83b941959d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4d409d6ed8265a269dda2b9f861a83b941959d7", "html_url": "https://github.com/rust-lang/rust/commit/f4d409d6ed8265a269dda2b9f861a83b941959d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4d409d6ed8265a269dda2b9f861a83b941959d7/comments", "author": {"login": "mmcco", "id": 1668979, "node_id": "MDQ6VXNlcjE2Njg5Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1668979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmcco", "html_url": "https://github.com/mmcco", "followers_url": "https://api.github.com/users/mmcco/followers", "following_url": "https://api.github.com/users/mmcco/following{/other_user}", "gists_url": "https://api.github.com/users/mmcco/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmcco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmcco/subscriptions", "organizations_url": "https://api.github.com/users/mmcco/orgs", "repos_url": "https://api.github.com/users/mmcco/repos", "events_url": "https://api.github.com/users/mmcco/events{/privacy}", "received_events_url": "https://api.github.com/users/mmcco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mmcco", "id": 1668979, "node_id": "MDQ6VXNlcjE2Njg5Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1668979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmcco", "html_url": "https://github.com/mmcco", "followers_url": "https://api.github.com/users/mmcco/followers", "following_url": "https://api.github.com/users/mmcco/following{/other_user}", "gists_url": "https://api.github.com/users/mmcco/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmcco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmcco/subscriptions", "organizations_url": "https://api.github.com/users/mmcco/orgs", "repos_url": "https://api.github.com/users/mmcco/repos", "events_url": "https://api.github.com/users/mmcco/events{/privacy}", "received_events_url": "https://api.github.com/users/mmcco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dd29cc3107f7febc26ec56ed4149cd67c1f49d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd29cc3107f7febc26ec56ed4149cd67c1f49d8", "html_url": "https://github.com/rust-lang/rust/commit/5dd29cc3107f7febc26ec56ed4149cd67c1f49d8"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "21e60420c186adb48a19058884006bcd763f2455", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4d409d6ed8265a269dda2b9f861a83b941959d7/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d409d6ed8265a269dda2b9f861a83b941959d7/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=f4d409d6ed8265a269dda2b9f861a83b941959d7", "patch": "@@ -47,6 +47,7 @@\n //!     if the entropy pool is very small, such as immediately after first booting.\n //!     Linux 3.17 added the `getrandom(2)` system call which solves the issue: it blocks if entropy\n //!     pool is not initialized yet, but it does not block once initialized.\n+//!     `getrandom(2)` was based on `getentropy(2)`, an existing system call in OpenBSD.\n //!     `OsRng` tries to use `getrandom(2)` if available, and use `/dev/urandom` fallback if not.\n //!     If an application does not have `getrandom` and likely to be run soon after first booting,\n //!     or on a system with very few entropy sources, one should consider using `/dev/random` via"}, {"sha": "942e81905d301117ae373da2cbb42ea4a7f91c3d", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f4d409d6ed8265a269dda2b9f861a83b941959d7/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4d409d6ed8265a269dda2b9f861a83b941959d7/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=f4d409d6ed8265a269dda2b9f861a83b941959d7", "patch": "@@ -13,7 +13,7 @@\n \n pub use self::imp::OsRng;\n \n-#[cfg(all(unix, not(target_os = \"ios\")))]\n+#[cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"openbsd\")))]\n mod imp {\n     use self::OsRngInner::*;\n \n@@ -131,6 +131,7 @@ mod imp {\n     /// - Windows: calls `CryptGenRandom`, using the default cryptographic\n     ///   service provider with the `PROV_RSA_FULL` type.\n     /// - iOS: calls SecRandomCopyBytes as /dev/(u)random is sandboxed.\n+    /// - OpenBSD: uses the `getentropy(2)` system call.\n     ///\n     /// This does not block.\n     pub struct OsRng {\n@@ -178,6 +179,67 @@ mod imp {\n     }\n }\n \n+#[cfg(target_os = \"openbsd\")]\n+mod imp {\n+    use io;\n+    use mem;\n+    use libc::c_long;\n+    use sys::os::errno;\n+    use rand::Rng;\n+\n+    /// A random number generator that retrieves randomness straight from\n+    /// the operating system. Platform sources:\n+    ///\n+    /// - Unix-like systems (Linux, Android, Mac OSX): read directly from\n+    ///   `/dev/urandom`, or from `getrandom(2)` system call if available.\n+    /// - Windows: calls `CryptGenRandom`, using the default cryptographic\n+    ///   service provider with the `PROV_RSA_FULL` type.\n+    /// - iOS: calls SecRandomCopyBytes as /dev/(u)random is sandboxed.\n+    /// - OpenBSD: uses the `getentropy(2)` system call.\n+    ///\n+    /// This does not block.\n+    pub struct OsRng {\n+        // dummy field to ensure that this struct cannot be constructed outside\n+        // of this module\n+        _dummy: (),\n+    }\n+\n+    extern \"C\" {\n+        fn syscall(number: c_long, ...) -> c_long;\n+    }\n+\n+    impl OsRng {\n+        /// Create a new `OsRng`.\n+        pub fn new() -> io::Result<OsRng> {\n+            Ok(OsRng { _dummy: () })\n+        }\n+    }\n+\n+    impl Rng for OsRng {\n+        fn next_u32(&mut self) -> u32 {\n+            let mut v = [0; 4];\n+            self.fill_bytes(&mut v);\n+            unsafe { mem::transmute(v) }\n+        }\n+        fn next_u64(&mut self) -> u64 {\n+            let mut v = [0; 8];\n+            self.fill_bytes(&mut v);\n+            unsafe { mem::transmute(v) }\n+        }\n+        fn fill_bytes(&mut self, v: &mut [u8]) {\n+            let mut ret: c_long;\n+\n+            // getentropy(2) permits a maximum buffer size of 256 bytes\n+            for s in v.chunks_mut(256) {\n+                unsafe { ret = syscall(7, s.as_mut_ptr(), s.len()); }\n+                if ret == -1 {\n+                    panic!(\"unexpected getrandom error: {}\", errno());\n+                }\n+            }\n+        }\n+    }\n+}\n+\n #[cfg(target_os = \"ios\")]\n mod imp {\n     #[cfg(stage0)] use prelude::v1::*;\n@@ -196,6 +258,7 @@ mod imp {\n     /// - Windows: calls `CryptGenRandom`, using the default cryptographic\n     ///   service provider with the `PROV_RSA_FULL` type.\n     /// - iOS: calls SecRandomCopyBytes as /dev/(u)random is sandboxed.\n+    /// - OpenBSD: uses the `getentropy(2)` system call.\n     ///\n     /// This does not block.\n     pub struct OsRng {\n@@ -261,6 +324,7 @@ mod imp {\n     /// - Windows: calls `CryptGenRandom`, using the default cryptographic\n     ///   service provider with the `PROV_RSA_FULL` type.\n     /// - iOS: calls SecRandomCopyBytes as /dev/(u)random is sandboxed.\n+    /// - OpenBSD: uses the `getentropy(2)` system call.\n     ///\n     /// This does not block.\n     pub struct OsRng {"}]}