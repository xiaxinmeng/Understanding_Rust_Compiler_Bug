{"sha": "611e5c475106d41ee20847f8291594a708f0cbc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMWU1YzQ3NTEwNmQ0MWVlMjA4NDdmODI5MTU5NGE3MDhmMGNiYzQ=", "commit": {"author": {"name": "Pawe\u0142 Romanowski", "email": "pawroman@gmail.com", "date": "2018-10-03T07:08:14Z"}, "committer": {"name": "Pawe\u0142 Romanowski", "email": "pawroman@gmail.com", "date": "2018-10-03T07:08:14Z"}, "message": "Address review comments", "tree": {"sha": "af27614834944bd5c9c61dae6df3d76a70f82abc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af27614834944bd5c9c61dae6df3d76a70f82abc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/611e5c475106d41ee20847f8291594a708f0cbc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/611e5c475106d41ee20847f8291594a708f0cbc4", "html_url": "https://github.com/rust-lang/rust/commit/611e5c475106d41ee20847f8291594a708f0cbc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/611e5c475106d41ee20847f8291594a708f0cbc4/comments", "author": {"login": "pawroman", "id": 914977, "node_id": "MDQ6VXNlcjkxNDk3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/914977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawroman", "html_url": "https://github.com/pawroman", "followers_url": "https://api.github.com/users/pawroman/followers", "following_url": "https://api.github.com/users/pawroman/following{/other_user}", "gists_url": "https://api.github.com/users/pawroman/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawroman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawroman/subscriptions", "organizations_url": "https://api.github.com/users/pawroman/orgs", "repos_url": "https://api.github.com/users/pawroman/repos", "events_url": "https://api.github.com/users/pawroman/events{/privacy}", "received_events_url": "https://api.github.com/users/pawroman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pawroman", "id": 914977, "node_id": "MDQ6VXNlcjkxNDk3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/914977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawroman", "html_url": "https://github.com/pawroman", "followers_url": "https://api.github.com/users/pawroman/followers", "following_url": "https://api.github.com/users/pawroman/following{/other_user}", "gists_url": "https://api.github.com/users/pawroman/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawroman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawroman/subscriptions", "organizations_url": "https://api.github.com/users/pawroman/orgs", "repos_url": "https://api.github.com/users/pawroman/repos", "events_url": "https://api.github.com/users/pawroman/events{/privacy}", "received_events_url": "https://api.github.com/users/pawroman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "url": "https://api.github.com/repos/rust-lang/rust/commits/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "html_url": "https://github.com/rust-lang/rust/commit/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "85b6bcbd144fc7a8debf1e8d8444b1efdcb94f81", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/611e5c475106d41ee20847f8291594a708f0cbc4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611e5c475106d41ee20847f8291594a708f0cbc4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=611e5c475106d41ee20847f8291594a708f0cbc4", "patch": "@@ -384,7 +384,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// This function checks if the specified expression is a built-in range literal.\n-    /// (See: ``librustc::hir::lowering::LoweringContext::lower_expr()``).\n+    /// (See: `LoweringContext::lower_expr()` in `src/librustc/hir/lowering.rs`).\n     fn is_range_literal(&self, expr: &hir::Expr) -> bool {\n         use hir::{Path, QPath, ExprKind, TyKind};\n \n@@ -404,10 +404,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        let is_range_literal = |span: &Span| {\n-            // Tell if expression span snippet doesn't look like an explicit\n-            // Range struct or `new()` call.  This is to allow inferring\n-            // that this is a range literal.\n+        let span_is_range_literal = |span: &Span| {\n+            // Check whether a span corresponding to a range expression\n+            // is a range literal, rather than an explicit struct or `new()` call.\n             let source_map = self.tcx.sess.source_map();\n             let end_point = source_map.end_point(*span);\n \n@@ -423,7 +422,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ExprKind::Struct(QPath::Resolved(None, ref path), _, _) |\n             // `..` desugars to its struct path\n             ExprKind::Path(QPath::Resolved(None, ref path)) => {\n-                return is_range_path(&path) && is_range_literal(&expr.span);\n+                return is_range_path(&path) && span_is_range_literal(&expr.span);\n             }\n \n             // `..=` desugars into `::std::ops::RangeInclusive::new(...)`\n@@ -432,7 +431,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if let TyKind::Path(QPath::Resolved(None, ref path)) = ty.node {\n                         let call_to_new = segment.ident.as_str() == \"new\";\n \n-                        return is_range_path(&path) && is_range_literal(&expr.span) && call_to_new;\n+                        return is_range_path(&path) && span_is_range_literal(&expr.span)\n+                            && call_to_new;\n                     }\n                 }\n             }"}]}