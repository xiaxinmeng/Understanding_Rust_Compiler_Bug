{"sha": "3a5df48021b3d29ca55a712d9677cfe043966c6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNWRmNDgwMjFiM2QyOWNhNTVhNzEyZDk2NzdjZmUwNDM5NjZjNmU=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-27T04:25:30Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2021-04-28T00:12:51Z"}, "message": "adds feature gating of `no_coverage` at either crate-  or function-level", "tree": {"sha": "4f006dfe196f125f327eb7d126ebee09cdc702a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f006dfe196f125f327eb7d126ebee09cdc702a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5df48021b3d29ca55a712d9677cfe043966c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5df48021b3d29ca55a712d9677cfe043966c6e", "html_url": "https://github.com/rust-lang/rust/commit/3a5df48021b3d29ca55a712d9677cfe043966c6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5df48021b3d29ca55a712d9677cfe043966c6e/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "url": "https://api.github.com/repos/rust-lang/rust/commits/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "html_url": "https://github.com/rust-lang/rust/commit/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57"}], "stats": {"total": 205, "additions": 142, "deletions": 63}, "files": [{"sha": "5a4e7fd9d07b4691fa70ee404373263f5531db49", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a5df48021b3d29ca55a712d9677cfe043966c6e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5df48021b3d29ca55a712d9677cfe043966c6e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=3a5df48021b3d29ca55a712d9677cfe043966c6e", "patch": "@@ -16,10 +16,19 @@ pub fn expand_deriving_eq(\n     push: &mut dyn FnMut(Annotatable),\n ) {\n     let inline = cx.meta_word(span, sym::inline);\n+    let no_coverage_ident =\n+        rustc_ast::attr::mk_nested_word_item(Ident::new(sym::no_coverage, span));\n+    let no_coverage_feature =\n+        rustc_ast::attr::mk_list_item(Ident::new(sym::feature, span), vec![no_coverage_ident]);\n     let no_coverage = cx.meta_word(span, sym::no_coverage);\n     let hidden = rustc_ast::attr::mk_nested_word_item(Ident::new(sym::hidden, span));\n     let doc = rustc_ast::attr::mk_list_item(Ident::new(sym::doc, span), vec![hidden]);\n-    let attrs = vec![cx.attribute(inline), cx.attribute(no_coverage), cx.attribute(doc)];\n+    let attrs = vec![\n+        cx.attribute(inline),\n+        cx.attribute(no_coverage_feature),\n+        cx.attribute(no_coverage),\n+        cx.attribute(doc),\n+    ];\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),"}, {"sha": "d5963d34dfaa597d0f37bd73667da8b1df41c162", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a5df48021b3d29ca55a712d9677cfe043966c6e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5df48021b3d29ca55a712d9677cfe043966c6e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=3a5df48021b3d29ca55a712d9677cfe043966c6e", "patch": "@@ -649,6 +649,10 @@ declare_features! (\n     /// Allows `extern \"wasm\" fn`\n     (active, wasm_abi, \"1.53.0\", Some(83788), None),\n \n+    /// Allows function attribute `#[no_coverage]`, to bypass coverage\n+    /// instrumentation of that function.\n+    (active, no_coverage, \"1.53.0\", Some(84605), None),\n+\n     /// Allows trait bounds in `const fn`.\n     (active, const_fn_trait_bound, \"1.53.0\", Some(57563), None),\n "}, {"sha": "5474fea9c78577c7b843d922e685c00a2bb8e83a", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a5df48021b3d29ca55a712d9677cfe043966c6e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5df48021b3d29ca55a712d9677cfe043966c6e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=3a5df48021b3d29ca55a712d9677cfe043966c6e", "patch": "@@ -264,7 +264,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     // Code generation:\n     ungated!(inline, AssumedUsed, template!(Word, List: \"always|never\")),\n-    ungated!(no_coverage, AssumedUsed, template!(Word)),\n     ungated!(cold, AssumedUsed, template!(Word)),\n     ungated!(no_builtins, AssumedUsed, template!(Word)),\n     ungated!(target_feature, AssumedUsed, template!(List: r#\"enable = \"name\"\"#)),\n@@ -274,6 +273,13 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         template!(List: \"address, memory, thread\"),\n         experimental!(no_sanitize)\n     ),\n+    ungated!(\n+        // Not exclusively gated at the crate level (though crate-level is\n+        // supported). The feature can alternatively be enabled on individual\n+        // functions.\n+        no_coverage, AssumedUsed,\n+        template!(Word),\n+    ),\n \n     // FIXME: #14408 assume docs are used since rustdoc looks at them.\n     ungated!(doc, AssumedUsed, template!(List: \"hidden|inline|...\", NameValueStr: \"string\")),"}, {"sha": "190c9d35934f93219450ec50d3ded0a41850f282", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3a5df48021b3d29ca55a712d9677cfe043966c6e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5df48021b3d29ca55a712d9677cfe043966c6e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=3a5df48021b3d29ca55a712d9677cfe043966c6e", "patch": "@@ -2661,6 +2661,8 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     let mut inline_span = None;\n     let mut link_ordinal_span = None;\n     let mut no_sanitize_span = None;\n+    let mut no_coverage_feature_enabled = false;\n+    let mut no_coverage_attr = None;\n     for attr in attrs.iter() {\n         if tcx.sess.check_name(attr, sym::cold) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n@@ -2724,8 +2726,15 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NAKED;\n         } else if tcx.sess.check_name(attr, sym::no_mangle) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_MANGLE;\n+        } else if attr.has_name(sym::feature) {\n+            if let Some(list) = attr.meta_item_list() {\n+                if list.iter().any(|nested_meta_item| nested_meta_item.has_name(sym::no_coverage)) {\n+                    tcx.sess.mark_attr_used(attr);\n+                    no_coverage_feature_enabled = true;\n+                }\n+            }\n         } else if tcx.sess.check_name(attr, sym::no_coverage) {\n-            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE;\n+            no_coverage_attr = Some(attr);\n         } else if tcx.sess.check_name(attr, sym::rustc_std_internal_symbol) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n         } else if tcx.sess.check_name(attr, sym::used) {\n@@ -2936,6 +2945,23 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         }\n     }\n \n+    if let Some(no_coverage_attr) = no_coverage_attr {\n+        if tcx.sess.features_untracked().no_coverage || no_coverage_feature_enabled {\n+            codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE\n+        } else {\n+            let mut err = feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::no_coverage,\n+                no_coverage_attr.span,\n+                \"the `#[no_coverage]` attribute is an experimental feature\",\n+            );\n+            if tcx.sess.parse_sess.unstable_features.is_nightly_build() {\n+                err.help(\"or, alternatively, add `#[feature(no_coverage)]` to the function\");\n+            }\n+            err.emit();\n+        }\n+    }\n+\n     codegen_fn_attrs.inline = attrs.iter().fold(InlineAttr::None, |ia, attr| {\n         if !attr.has_name(sym::inline) {\n             return ia;"}, {"sha": "0a3e5789e8bedc4dc7def36dfe27763d5d3d6ce2", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a5df48021b3d29ca55a712d9677cfe043966c6e/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5df48021b3d29ca55a712d9677cfe043966c6e/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=3a5df48021b3d29ca55a712d9677cfe043966c6e", "patch": "@@ -274,6 +274,7 @@ pub trait Eq: PartialEq<Self> {\n     //\n     // This should never be implemented by hand.\n     #[doc(hidden)]\n+    #[cfg_attr(not(bootstrap), feature(no_coverage))]\n     #[cfg_attr(not(bootstrap), no_coverage)]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "faafa828817ee71eac21efdd042e0297db093cf3", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.issue-84561.txt", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-84561.txt", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-84561.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.issue-84561.txt?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -1,34 +0,0 @@\n-    1|       |// FIXME(#84561): function-like macros produce unintuitive coverage results.\n-    2|       |// This test demonstrates some of the problems.\n-    3|       |\n-    4|      9|#[derive(Debug, PartialEq, Eq)]\n-                       ^5\n-  ------------------\n-  | <issue_84561::Foo as core::cmp::PartialEq>::eq:\n-  |    4|      9|#[derive(Debug, PartialEq, Eq)]\n-  ------------------\n-  | Unexecuted instantiation: <issue_84561::Foo as core::cmp::PartialEq>::ne\n-  ------------------\n-    5|       |struct Foo(u32);\n-    6|       |\n-    7|      1|fn main() {\n-    8|      1|    let bar = Foo(1);\n-    9|      0|    assert_eq!(bar, Foo(1));\n-   10|      1|    let baz = Foo(0);\n-   11|      0|    assert_ne!(baz, Foo(1));\n-   12|      1|    println!(\"{:?}\", Foo(1));\n-   13|      1|    println!(\"{:?}\", bar);\n-   14|      1|    println!(\"{:?}\", baz);\n-   15|       |\n-   16|      1|    assert_eq!(Foo(1), Foo(1));\n-   17|      1|    assert_ne!(Foo(0), Foo(1));\n-   18|      0|    assert_eq!(Foo(2), Foo(2));\n-   19|      1|    let bar = Foo(1);\n-   20|      1|    assert_ne!(Foo(0), Foo(3));\n-   21|      1|    assert_ne!(Foo(0), Foo(4));\n-   22|      1|    assert_eq!(Foo(3), Foo(3));\n-   23|      0|    assert_ne!(Foo(0), Foo(5));\n-   24|      1|    println!(\"{:?}\", bar);\n-   25|      1|    println!(\"{:?}\", Foo(1));\n-   26|      1|}\n-"}, {"sha": "c4a7b0cc7e9f3798b9a5fa468eb18e6ce7b8b60f", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.no_cov_crate.txt", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_crate.txt?ref=3a5df48021b3d29ca55a712d9677cfe043966c6e", "patch": "@@ -0,0 +1,18 @@\n+    1|       |// Enables `no_coverage` on the entire crate\n+    2|       |#![feature(no_coverage)]\n+    3|       |\n+    4|       |#[no_coverage]\n+    5|       |fn do_not_add_coverage_1() {\n+    6|       |    println!(\"called but not covered\");\n+    7|       |}\n+    8|       |\n+    9|       |#[no_coverage]\n+   10|       |fn do_not_add_coverage_2() {\n+   11|       |    println!(\"called but not covered\");\n+   12|       |}\n+   13|       |\n+   14|      1|fn main() {\n+   15|      1|    do_not_add_coverage_1();\n+   16|      1|    do_not_add_coverage_2();\n+   17|      1|}\n+"}, {"sha": "16eaf7c858c19907993b1d788255effb284d0f23", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.no_cov_func.txt", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.no_cov_func.txt?ref=3a5df48021b3d29ca55a712d9677cfe043966c6e", "patch": "@@ -0,0 +1,19 @@\n+    1|       |// Enables `no_coverage` on individual functions\n+    2|       |\n+    3|       |#[feature(no_coverage)]\n+    4|       |#[no_coverage]\n+    5|       |fn do_not_add_coverage_1() {\n+    6|       |    println!(\"called but not covered\");\n+    7|       |}\n+    8|       |\n+    9|       |#[no_coverage]\n+   10|       |#[feature(no_coverage)]\n+   11|       |fn do_not_add_coverage_2() {\n+   12|       |    println!(\"called but not covered\");\n+   13|       |}\n+   14|       |\n+   15|      1|fn main() {\n+   16|      1|    do_not_add_coverage_1();\n+   17|      1|    do_not_add_coverage_2();\n+   18|      1|}\n+"}, {"sha": "dc183685e3d111b06507fb23830773236f64477b", "filename": "src/test/run-make-fulldeps/coverage/issue-84561.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-84561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888d0b4c9691ffcba7cb326a1cd1fc73feb38f57/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-84561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fissue-84561.rs?ref=888d0b4c9691ffcba7cb326a1cd1fc73feb38f57", "patch": "@@ -1,26 +0,0 @@\n-// FIXME(#84561): function-like macros produce unintuitive coverage results.\n-// This test demonstrates some of the problems.\n-\n-#[derive(Debug, PartialEq, Eq)]\n-struct Foo(u32);\n-\n-fn main() {\n-    let bar = Foo(1);\n-    assert_eq!(bar, Foo(1));\n-    let baz = Foo(0);\n-    assert_ne!(baz, Foo(1));\n-    println!(\"{:?}\", Foo(1));\n-    println!(\"{:?}\", bar);\n-    println!(\"{:?}\", baz);\n-\n-    assert_eq!(Foo(1), Foo(1));\n-    assert_ne!(Foo(0), Foo(1));\n-    assert_eq!(Foo(2), Foo(2));\n-    let bar = Foo(1);\n-    assert_ne!(Foo(0), Foo(3));\n-    assert_ne!(Foo(0), Foo(4));\n-    assert_eq!(Foo(3), Foo(3));\n-    assert_ne!(Foo(0), Foo(5));\n-    println!(\"{:?}\", bar);\n-    println!(\"{:?}\", Foo(1));\n-}"}, {"sha": "300570db7e8f7a205e9d626ab556b5a431a1960a", "filename": "src/test/run-make-fulldeps/coverage/no_cov_crate.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_crate.rs?ref=3a5df48021b3d29ca55a712d9677cfe043966c6e", "patch": "@@ -0,0 +1,17 @@\n+// Enables `no_coverage` on the entire crate\n+#![feature(no_coverage)]\n+\n+#[no_coverage]\n+fn do_not_add_coverage_1() {\n+    println!(\"called but not covered\");\n+}\n+\n+#[no_coverage]\n+fn do_not_add_coverage_2() {\n+    println!(\"called but not covered\");\n+}\n+\n+fn main() {\n+    do_not_add_coverage_1();\n+    do_not_add_coverage_2();\n+}"}, {"sha": "e19a2c4a87200ceb2dd2f40832567fe6c72f63b1", "filename": "src/test/run-make-fulldeps/coverage/no_cov_func.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fno_cov_func.rs?ref=3a5df48021b3d29ca55a712d9677cfe043966c6e", "patch": "@@ -0,0 +1,18 @@\n+// Enables `no_coverage` on individual functions\n+\n+#[feature(no_coverage)]\n+#[no_coverage]\n+fn do_not_add_coverage_1() {\n+    println!(\"called but not covered\");\n+}\n+\n+#[no_coverage]\n+#[feature(no_coverage)]\n+fn do_not_add_coverage_2() {\n+    println!(\"called but not covered\");\n+}\n+\n+fn main() {\n+    do_not_add_coverage_1();\n+    do_not_add_coverage_2();\n+}"}, {"sha": "c6b79f9a431710b7983b2b12967562b601d77080", "filename": "src/test/ui/feature-gates/feature-gate-no_coverage.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.rs?ref=3a5df48021b3d29ca55a712d9677cfe043966c6e", "patch": "@@ -0,0 +1,8 @@\n+#![crate_type = \"lib\"]\n+\n+#[no_coverage]\n+#[feature(no_coverage)] // does not have to be enabled before `#[no_coverage]`\n+fn no_coverage_is_enabled_on_this_function() {}\n+\n+#[no_coverage] //~ ERROR the `#[no_coverage]` attribute is an experimental feature\n+fn requires_feature_no_coverage() {}"}, {"sha": "04627be4aaf65f4a1b9325c1652814ecad5984fa", "filename": "src/test/ui/feature-gates/feature-gate-no_coverage.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a5df48021b3d29ca55a712d9677cfe043966c6e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_coverage.stderr?ref=3a5df48021b3d29ca55a712d9677cfe043966c6e", "patch": "@@ -0,0 +1,13 @@\n+error[E0658]: the `#[no_coverage]` attribute is an experimental feature\n+  --> $DIR/feature-gate-no_coverage.rs:7:1\n+   |\n+LL | #[no_coverage]\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #84605 <https://github.com/rust-lang/rust/issues/84605> for more information\n+   = help: add `#![feature(no_coverage)]` to the crate attributes to enable\n+   = help: or, alternatively, add `#[feature(no_coverage)]` to the function\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}