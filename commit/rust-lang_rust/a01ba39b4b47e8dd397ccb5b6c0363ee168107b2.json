{"sha": "a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMWJhMzliNGI0N2U4ZGQzOTdjY2I1YjZjMDM2M2VlMTY4MTA3YjI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-09-14T18:29:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-09-14T18:54:26Z"}, "message": "feature_gate: Merge various attribute gating functions", "tree": {"sha": "7b22f358cf120365296265dd1f0ee93dcbf1e2e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b22f358cf120365296265dd1f0ee93dcbf1e2e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "html_url": "https://github.com/rust-lang/rust/commit/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "966d96c9d2f16fd66eefda2eac25126a353bbb3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/966d96c9d2f16fd66eefda2eac25126a353bbb3a", "html_url": "https://github.com/rust-lang/rust/commit/966d96c9d2f16fd66eefda2eac25126a353bbb3a"}], "stats": {"total": 157, "additions": 54, "deletions": 103}, "files": [{"sha": "b80c530731dfc68734d44cdb36fb6b53a207871d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -26,7 +26,7 @@ use syntax_pos::{Span, DUMMY_SP, FileName};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use std::io::ErrorKind;\n-use std::{iter, mem};\n+use std::{iter, mem, slice};\n use std::ops::DerefMut;\n use std::rc::Rc;\n use std::path::PathBuf;\n@@ -1019,7 +1019,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     fn check_attributes(&mut self, attrs: &[ast::Attribute]) {\n         let features = self.cx.ecfg.features.unwrap();\n         for attr in attrs.iter() {\n-            self.check_attribute_inner(attr, features);\n+            feature_gate::check_attribute(attr, self.cx.parse_sess, features);\n \n             // macros are expanded before any lint passes so this warning has to be hardcoded\n             if attr.path == sym::derive {\n@@ -1029,15 +1029,6 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n             }\n         }\n     }\n-\n-    fn check_attribute(&mut self, at: &ast::Attribute) {\n-        let features = self.cx.ecfg.features.unwrap();\n-        self.check_attribute_inner(at, features);\n-    }\n-\n-    fn check_attribute_inner(&mut self, at: &ast::Attribute, features: &Features) {\n-        feature_gate::check_attribute(at, self.cx.parse_sess, features);\n-    }\n }\n \n impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n@@ -1445,7 +1436,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n                 if let Some(file) = it.value_str() {\n                     let err_count = self.cx.parse_sess.span_diagnostic.err_count();\n-                    self.check_attribute(&at);\n+                    self.check_attributes(slice::from_ref(at));\n                     if self.cx.parse_sess.span_diagnostic.err_count() > err_count {\n                         // avoid loading the file if they haven't enabled the feature\n                         return noop_visit_attribute(at, self);"}, {"sha": "b6e13200f32af19d391311b12885ff3a1ced24d1", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -79,6 +79,7 @@ pub enum AttributeType {\n     CrateLevel,\n }\n \n+#[derive(Clone, Copy)]\n pub enum AttributeGate {\n     /// Is gated by a given feature gate, reason\n     /// and function to check if enabled"}, {"sha": "3a9dae5a8b21741822ea70b66360f91dccfbcdf7", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 40, "deletions": 82, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -1,7 +1,7 @@\n use super::{active::{ACTIVE_FEATURES, Features}, Feature, State as FeatureState};\n use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n-use super::builtin_attrs::{AttributeGate, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n+use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n \n use crate::ast::{\n     self, AssocTyConstraint, AssocTyConstraintKind, NodeId, GenericParam, GenericParamKind,\n@@ -61,40 +61,46 @@ macro_rules! gate_feature {\n     };\n }\n \n-impl<'a> Context<'a> {\n-    fn check_attribute(\n-        &self,\n-        attr: &ast::Attribute,\n-        attr_info: Option<&BuiltinAttribute>,\n-    ) {\n-        debug!(\"check_attribute(attr = {:?})\", attr);\n-        if let Some(&(name, ty, _template, ref gateage)) = attr_info {\n-            if let AttributeGate::Gated(_, name, desc, ref has_feature) = *gateage {\n-                if !attr.span.allows_unstable(name) {\n-                    gate_feature_fn!(\n-                        self, has_feature, attr.span, name, desc, GateStrength::Hard\n-                    );\n-                }\n-            } else if name == sym::doc {\n-                if let Some(content) = attr.meta_item_list() {\n-                    if content.iter().any(|c| c.check_name(sym::include)) {\n-                        gate_feature!(self, external_doc, attr.span,\n-                            \"`#[doc(include = \\\"...\\\")]` is experimental\"\n-                        );\n-                    }\n-                }\n+crate fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features: &Features) {\n+    let cx = &Context { parse_sess, features };\n+    let attr_info =\n+        attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).map(|a| **a);\n+    // Check feature gates for built-in attributes.\n+    if let Some((.., AttributeGate::Gated(_, name, descr, has_feature))) = attr_info {\n+        gate_feature_fn!(cx, has_feature, attr.span, name, descr, GateStrength::Hard);\n+    }\n+    // Check input tokens for built-in and key-value attributes.\n+    match attr_info {\n+        // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n+        Some((name, _, template, _)) if name != sym::rustc_dummy =>\n+            check_builtin_attribute(parse_sess, attr, name, template),\n+        _ => if let Some(TokenTree::Token(token)) = attr.tokens.trees().next() {\n+            if token == token::Eq {\n+                // All key-value attributes are restricted to meta-item syntax.\n+                attr.parse_meta(parse_sess).map_err(|mut err| err.emit()).ok();\n             }\n-            debug!(\"check_attribute: {:?} is builtin, {:?}, {:?}\", attr.path, ty, gateage);\n         }\n     }\n-}\n-\n-pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features: &Features) {\n-    let cx = Context { parse_sess, features };\n-    cx.check_attribute(\n-        attr,\n-        attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name).map(|a| *a)),\n-    );\n+    // Check unstable flavors of the `#[doc]` attribute.\n+    if attr.check_name(sym::doc) {\n+        for nested_meta in attr.meta_item_list().unwrap_or_default() {\n+            macro_rules! gate_doc { ($($name:ident => $feature:ident)*) => {\n+                $(if nested_meta.check_name(sym::$name) {\n+                    let msg = concat!(\"`#[doc(\", stringify!($name), \")]` is experimental\");\n+                    gate_feature!(cx, $feature, attr.span, msg);\n+                })*\n+            }}\n+\n+            gate_doc!(\n+                include => external_doc\n+                cfg => doc_cfg\n+                masked => doc_masked\n+                spotlight => doc_spotlight\n+                alias => doc_alias\n+                keyword => doc_keyword\n+            );\n+        }\n+    }\n }\n \n fn find_lang_feature_issue(feature: Symbol) -> Option<u32> {\n@@ -210,7 +216,6 @@ pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &str =\n \n struct PostExpansionVisitor<'a> {\n     context: &'a Context<'a>,\n-    builtin_attributes: &'static FxHashMap<Symbol, &'static BuiltinAttribute>,\n }\n \n macro_rules! gate_feature_post {\n@@ -287,50 +292,7 @@ impl<'a> PostExpansionVisitor<'a> {\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        let attr_info = attr.ident().and_then(|ident| {\n-            self.builtin_attributes.get(&ident.name).map(|a| *a)\n-        });\n-\n-        // Check for gated attributes.\n-        self.context.check_attribute(attr, attr_info);\n-\n-        if attr.check_name(sym::doc) {\n-            if let Some(content) = attr.meta_item_list() {\n-                if content.len() == 1 && content[0].check_name(sym::cfg) {\n-                    gate_feature_post!(&self, doc_cfg, attr.span,\n-                        \"`#[doc(cfg(...))]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::masked)) {\n-                    gate_feature_post!(&self, doc_masked, attr.span,\n-                        \"`#[doc(masked)]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::spotlight)) {\n-                    gate_feature_post!(&self, doc_spotlight, attr.span,\n-                        \"`#[doc(spotlight)]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::alias)) {\n-                    gate_feature_post!(&self, doc_alias, attr.span,\n-                        \"`#[doc(alias = \\\"...\\\")]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::keyword)) {\n-                    gate_feature_post!(&self, doc_keyword, attr.span,\n-                        \"`#[doc(keyword = \\\"...\\\")]` is experimental\"\n-                    );\n-                }\n-            }\n-        }\n-\n-        match attr_info {\n-            // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n-            Some(&(name, _, template, _)) if name != sym::rustc_dummy =>\n-                check_builtin_attribute(self.context.parse_sess, attr, name, template),\n-            _ => if let Some(TokenTree::Token(token)) = attr.tokens.trees().next() {\n-                if token == token::Eq {\n-                    // All key-value attributes are restricted to meta-item syntax.\n-                    attr.parse_meta(self.context.parse_sess).map_err(|mut err| err.emit()).ok();\n-                }\n-            }\n-        }\n+        check_attribute(attr, self.context.parse_sess, self.context.features);\n     }\n \n     fn visit_name(&mut self, sp: Span, name: ast::Name) {\n@@ -864,11 +826,7 @@ pub fn check_crate(krate: &ast::Crate,\n     gate_all!(yields, generators, \"yield syntax is experimental\");\n     gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n \n-    let visitor = &mut PostExpansionVisitor {\n-        context: &ctx,\n-        builtin_attributes: &*BUILTIN_ATTRIBUTE_MAP,\n-    };\n-    visit::walk_crate(visitor, krate);\n+    visit::walk_crate(&mut PostExpansionVisitor { context: &ctx }, krate);\n }\n \n #[derive(Clone, Copy, Hash)]"}, {"sha": "ca13ab3620508b833cf0724c2d3ecad2d1d0be86", "filename": "src/libsyntax/feature_gate/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -58,7 +58,8 @@ pub use builtin_attrs::{\n     deprecated_attributes, is_builtin_attr,  is_builtin_attr_name,\n };\n pub use check::{\n-    check_attribute, check_crate, get_features, feature_err, emit_feature_err,\n+    check_crate, get_features, feature_err, emit_feature_err,\n     Stability, GateIssue, UnstableFeatures,\n     EXPLAIN_STMT_ATTR_SYNTAX, EXPLAIN_UNSIZED_TUPLE_COERCION,\n };\n+crate use check::check_attribute;"}, {"sha": "c95722102d9b61078b16ec752589f99ed3513522", "filename": "src/test/ui/feature-gates/feature-gate-doc_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.rs?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -1,4 +1,4 @@\n-#[doc(alias = \"foo\")] //~ ERROR: `#[doc(alias = \"...\")]` is experimental\n+#[doc(alias = \"foo\")] //~ ERROR: `#[doc(alias)]` is experimental\n pub struct Foo;\n \n fn main() {}"}, {"sha": "540b1f5ccbe43f8e1f5eabc0b13fd021bdea89b8", "filename": "src/test/ui/feature-gates/feature-gate-doc_alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(alias = \"...\")]` is experimental\n+error[E0658]: `#[doc(alias)]` is experimental\n   --> $DIR/feature-gate-doc_alias.rs:1:1\n    |\n LL | #[doc(alias = \"foo\")]"}, {"sha": "b12b8a105718290abbf99fe73c670e8364211d7a", "filename": "src/test/ui/feature-gates/feature-gate-doc_cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.rs?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -1,2 +1,2 @@\n-#[doc(cfg(unix))] //~ ERROR: `#[doc(cfg(...))]` is experimental\n+#[doc(cfg(unix))] //~ ERROR: `#[doc(cfg)]` is experimental\n fn main() {}"}, {"sha": "eaa908d0037aeb5272305a18cb5506dcaee8d5c2", "filename": "src/test/ui/feature-gates/feature-gate-doc_cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(cfg(...))]` is experimental\n+error[E0658]: `#[doc(cfg)]` is experimental\n   --> $DIR/feature-gate-doc_cfg.rs:1:1\n    |\n LL | #[doc(cfg(unix))]"}, {"sha": "4bb9a40deb0dd844c71635354d13e4606abb3c46", "filename": "src/test/ui/feature-gates/feature-gate-doc_keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -1,4 +1,4 @@\n-#[doc(keyword = \"match\")] //~ ERROR: `#[doc(keyword = \"...\")]` is experimental\n+#[doc(keyword = \"match\")] //~ ERROR: `#[doc(keyword)]` is experimental\n /// wonderful\n mod foo{}\n "}, {"sha": "15a41d9ffa4eaf6f2f8ec552db76d29a9ae3eac5", "filename": "src/test/ui/feature-gates/feature-gate-doc_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(keyword = \"...\")]` is experimental\n+error[E0658]: `#[doc(keyword)]` is experimental\n   --> $DIR/feature-gate-doc_keyword.rs:1:1\n    |\n LL | #[doc(keyword = \"match\")]"}, {"sha": "9d68d3ec4f52a426976b60ea5ffd4f5e66d960b5", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -1,2 +1,2 @@\n-#[doc(include=\"asdf.md\")] //~ ERROR: `#[doc(include = \"...\")]` is experimental\n+#[doc(include=\"asdf.md\")] //~ ERROR: `#[doc(include)]` is experimental\n fn main() {}"}, {"sha": "683c0ad217426b08e31eb5e3ce8cd9c243918d97", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a01ba39b4b47e8dd397ccb5b6c0363ee168107b2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr?ref=a01ba39b4b47e8dd397ccb5b6c0363ee168107b2", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(include = \"...\")]` is experimental\n+error[E0658]: `#[doc(include)]` is experimental\n   --> $DIR/feature-gate-external_doc.rs:1:1\n    |\n LL | #[doc(include=\"asdf.md\")]"}]}