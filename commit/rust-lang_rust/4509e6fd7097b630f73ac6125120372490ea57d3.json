{"sha": "4509e6fd7097b630f73ac6125120372490ea57d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MDllNmZkNzA5N2I2MzBmNzNhYzYxMjUxMjAzNzI0OTBlYTU3ZDM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-21T05:30:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-21T05:31:00Z"}, "message": "Change ty.eq_ty to avoid stringification.", "tree": {"sha": "9476fbe21cbeba3d5175d812e22520065fa8d34d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9476fbe21cbeba3d5175d812e22520065fa8d34d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4509e6fd7097b630f73ac6125120372490ea57d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4509e6fd7097b630f73ac6125120372490ea57d3", "html_url": "https://github.com/rust-lang/rust/commit/4509e6fd7097b630f73ac6125120372490ea57d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4509e6fd7097b630f73ac6125120372490ea57d3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ee96891a0e2df09758f668c51f96a91d33098bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee96891a0e2df09758f668c51f96a91d33098bd", "html_url": "https://github.com/rust-lang/rust/commit/1ee96891a0e2df09758f668c51f96a91d33098bd"}], "stats": {"total": 347, "additions": 304, "deletions": 43}, "files": [{"sha": "9637e038c1aea62c334c27f88648dfbe19603404", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 304, "deletions": 43, "changes": 347, "blob_url": "https://github.com/rust-lang/rust/blob/4509e6fd7097b630f73ac6125120372490ea57d3/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4509e6fd7097b630f73ac6125120372490ea57d3/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=4509e6fd7097b630f73ac6125120372490ea57d3", "patch": "@@ -719,40 +719,6 @@ fn def_to_str(ast.def_id did) -> str {\n     ret #fmt(\"%d:%d\", did._0, did._1);\n }\n \n-fn simple_ty_code(&sty st) -> uint {\n-    alt (st) {\n-        case (ty_nil) { ret 0u; }\n-        case (ty_bool) { ret 1u; }\n-        case (ty_int) { ret 2u; }\n-        case (ty_float) { ret 3u; }\n-        case (ty_uint) { ret 4u; }\n-        case (ty_machine(?tm)) {\n-            alt (tm) {\n-                case (common.ty_i8) { ret 5u; }\n-                case (common.ty_i16) { ret 6u; }\n-                case (common.ty_i32) { ret 7u; }\n-                case (common.ty_i64) { ret 8u; }\n-\n-                case (common.ty_u8) { ret 9u; }\n-                case (common.ty_u16) { ret 10u; }\n-                case (common.ty_u32) { ret 11u; }\n-                case (common.ty_u64) { ret 12u; }\n-\n-                case (common.ty_f32) { ret 13u; }\n-                case (common.ty_f64) { ret 14u; }\n-            }\n-        }\n-        case (ty_char) { ret 15u; }\n-        case (ty_str) { ret 16u; }\n-        case (ty_task) { ret 17u; }\n-        case (ty_type) { ret 18u; }\n-        case (ty_native) { ret 19u; }\n-        case (_) {\n-        }\n-    }\n-    ret 0xffffu;\n-}\n-\n // Type hashing. This function is private to this module (and slow); external\n // users should use `hash_ty()` instead.\n fn hash_type_structure(&sty st) -> uint {\n@@ -854,20 +820,315 @@ fn hash_type_structure(&sty st) -> uint {\n \n fn hash_ty(&@t typ) -> uint { ret typ.hash; }\n \n+\n+\n+fn ty_is_simple(&@t a) -> bool {\n+    // a \"simple\" type is one in which the hash\n+    // field uniquely identifies the type. In\n+    // a world with sane compiler-generated\n+    // structural comparison code, we'd not\n+    // be producing this sort of thing.\n+    alt (a.struct) {\n+        case (ty_nil) { ret true; }\n+        case (ty_bool) { ret true; }\n+        case (ty_int) { ret true; }\n+        case (ty_float) { ret true; }\n+        case (ty_uint) { ret true; }\n+        case (ty_machine(_)) { ret true; }\n+        case (ty_char) { ret true; }\n+        case (ty_str) { ret true; }\n+        case (ty_task) { ret true; }\n+        case (ty_type) { ret true; }\n+        case (_) { ret false; }\n+    }\n+    ret false;\n+}\n+\n+\n+fn eq_args(vec[arg] az, vec[arg] bz) -> bool {\n+    if (_vec.len[arg](az) !=\n+        _vec.len[arg](bz)) { ret false; }\n+    let uint i = 0u;\n+    for (arg a in az) {\n+        if (a.mode != bz.(i).mode) {\n+            ret false;\n+        }\n+        if (!eq_ty(a.ty, bz.(i).ty)) {\n+            ret false;\n+        }\n+        i += 1u;\n+    }\n+    ret true;\n+}\n+\n+\n+fn eq_tys(vec[@t] az, vec[@t] bz) -> bool {\n+    if (_vec.len[@t](az) !=\n+        _vec.len[@t](bz)) { ret false; }\n+    let uint i = 0u;\n+    for (@t a in az) {\n+        if (!eq_ty(a, bz.(i))) {\n+            ret false;\n+        }\n+        i += 1u;\n+    }\n+    ret true;\n+}\n+\n+fn eq_mt(&mt a, &mt b) -> bool {\n+    if (a.mut != b.mut) {\n+        ret false;\n+    }\n+    ret eq_ty(a.ty, b.ty);\n+}\n+\n+fn eq_mts(vec[mt] az, vec[mt] bz) -> bool {\n+    if (_vec.len[mt](az) !=\n+        _vec.len[mt](bz)) { ret false; }\n+    let uint i = 0u;\n+    for (mt a in az) {\n+        if (!eq_mt(a, bz.(i))) {\n+            ret false;\n+        }\n+        i += 1u;\n+    }\n+    ret true;\n+}\n+\n+\n+fn eq_fields(vec[field] az, vec[field] bz) -> bool {\n+    if (_vec.len[field](az) !=\n+        _vec.len[field](bz)) { ret false; }\n+    let uint i = 0u;\n+    for (field a in az) {\n+        if (!_str.eq(a.ident, bz.(i).ident)) {\n+            ret false;\n+        }\n+        if (a.mt.mut != bz.(i).mt.mut) {\n+            ret false;\n+        }\n+        if (!eq_ty(a.mt.ty, bz.(i).mt.ty)) {\n+            ret false;\n+        }\n+        i += 1u;\n+    }\n+    ret true;\n+}\n+\n+fn eq_def_id(&ast.def_id a, &ast.def_id b) -> bool {\n+    ret a._0 == b._0 && a._1 == b._1;\n+}\n+\n fn eq_ty(&@t a, &@t b) -> bool {\n-    auto sa = hash_type_structure(a.struct);\n-    auto sb = hash_type_structure(b.struct);\n-    if (sa != sb) {\n+\n+    if (a.hash != b.hash) {\n         ret false;\n     }\n \n-    // TODO: shortcut for simple types\n \n-    // FIXME: this is gross, but I think it's safe, and I don't think writing\n-    // a giant function to handle all the cases is necessary when structural\n-    // equality will someday save the day.\n-    auto f = def_to_str;\n-    ret _str.eq(metadata.ty_str(a, f), metadata.ty_str(b, f));\n+    if (ty_is_simple(a)) {\n+        if (ty_is_simple(b)) {\n+            ret a.hash == b.hash;\n+        }\n+        ret false;\n+    }\n+\n+    alt (a.struct) {\n+        case (ty_tag(?did_a, ?tys_a)) {\n+            alt (b.struct) {\n+                case (ty_tag(?did_b, ?tys_b)) {\n+                    if (!eq_def_id(did_a, did_b)) {\n+                        ret false;\n+                    }\n+                    ret eq_tys(tys_a, tys_b);\n+                }\n+                case (_) { ret false; }\n+            }\n+        }\n+\n+        case (ty_box(?mt_a)) {\n+            alt (b.struct) {\n+                case (ty_box(?mt_b)) {\n+                    ret eq_mt(mt_a, mt_b);\n+                }\n+                case (_) {\n+                    ret false;\n+                }\n+            }\n+        }\n+\n+        case (ty_vec(?mt_a)) {\n+            alt (b.struct) {\n+                case (ty_vec(?mt_b)) {\n+                    ret eq_mt(mt_a, mt_b);\n+                }\n+                case (_) {\n+                    ret false;\n+                }\n+            }\n+        }\n+\n+        case (ty_port(?t_a)) {\n+            alt (b.struct) {\n+                case (ty_port(?t_b)) {\n+                    ret eq_ty(t_a, t_b);\n+                }\n+                case (_) {\n+                    ret false;\n+                }\n+            }\n+        }\n+\n+        case (ty_chan(?t_a)) {\n+            alt (b.struct) {\n+                case (ty_chan(?t_b)) {\n+                    ret eq_ty(t_a, t_b);\n+                }\n+                case (_) {\n+                    ret false;\n+                }\n+            }\n+        }\n+\n+        case (ty_tup(?mts_a)) {\n+            alt (b.struct) {\n+                case (ty_tup(?mts_b)) {\n+                    ret eq_mts(mts_a, mts_b);\n+                }\n+                case (_) {\n+                    ret false;\n+                }\n+            }\n+        }\n+\n+        case (ty_rec(?fields_a)) {\n+            alt (b.struct) {\n+                case (ty_rec(?fields_b)) {\n+                    ret eq_fields(fields_a, fields_b);\n+                }\n+                case (_) {\n+                    ret false;\n+                }\n+            }\n+        }\n+\n+        case (ty_fn(?proto_a, ?args_a, ?rty_a)) {\n+            alt (b.struct) {\n+                case (ty_fn(?proto_b, ?args_b, ?rty_b)) {\n+                    if (proto_a != proto_b) {\n+                        ret false;\n+                    }\n+                    if (!eq_args(args_a, args_b)) {\n+                        ret false;\n+                    }\n+                    ret eq_ty(rty_a, rty_b);\n+                }\n+                case (_) {\n+                    ret false;\n+                }\n+            }\n+        }\n+\n+        case (ty_native_fn(?abi_a, ?args_a, ?rty_a)) {\n+            alt (b.struct) {\n+                case (ty_native_fn(?abi_b, ?args_b, ?rty_b)) {\n+                    if (abi_a != abi_b) {\n+                        ret false;\n+                    }\n+                    if (!eq_args(args_a, args_b)) {\n+                        ret false;\n+                    }\n+                    ret eq_ty(rty_a, rty_b);\n+                }\n+                case (_) {\n+                    ret false;\n+                }\n+            }\n+        }\n+\n+        case (ty_obj(?methods_a)) {\n+            alt (b.struct) {\n+                case (ty_obj(?methods_b)) {\n+                    if (_vec.len[method](methods_a) !=\n+                        _vec.len[method](methods_b)) {\n+                        ret false;\n+                    }\n+                    let uint i = 0u;\n+                    for (method m_a in methods_a) {\n+                        if (!_str.eq(m_a.ident,\n+                                     methods_b.(i).ident)) {\n+                            ret false;\n+                        }\n+                        if (!eq_args(m_a.inputs,\n+                                     methods_b.(i).inputs)) {\n+                            ret false;\n+                        }\n+                        if (!eq_ty(m_a.output,\n+                                   methods_b.(i).output)) {\n+                            ret false;\n+                        }\n+                        i += 1u;\n+                    }\n+                    ret true;\n+                }\n+                case (_) {\n+                    ret false;\n+                }\n+            }\n+        }\n+\n+        case (ty_var(?v_a)) {\n+            alt (b.struct) {\n+                case (ty_var(?v_b)) {\n+                    ret v_a == v_b;\n+                }\n+                case (_) { ret false; }\n+            }\n+        }\n+\n+        case (ty_local(?did_a)) {\n+            alt (b.struct) {\n+                case (ty_local(?did_b)) {\n+                    ret eq_def_id(did_a, did_b);\n+                }\n+                case (_) { ret false; }\n+            }\n+        }\n+\n+        case (ty_param(?pid_a)) {\n+            alt (b.struct) {\n+                case (ty_param(?pid_b)) {\n+                    ret pid_a == pid_b;\n+                }\n+                case (_) { ret false; }\n+            }\n+        }\n+\n+        case (ty_bound_param(?pid_a)) {\n+            alt (b.struct) {\n+                case (ty_bound_param(?pid_b)) {\n+                    ret pid_a == pid_b;\n+                }\n+                case (_) { ret false; }\n+            }\n+        }\n+\n+        // FIXME: this should carry the native ID with it.\n+        case (ty_native) {\n+            alt (b.struct) {\n+                case (ty_native) {\n+                    ret true;\n+                }\n+                case (_) { ret false; }\n+            }\n+        }\n+\n+        case (_) {\n+            // Should be impossible.\n+            fail;\n+        }\n+    }\n+    ret false;\n }\n \n fn ann_to_type(&ast.ann ann) -> @t {"}]}