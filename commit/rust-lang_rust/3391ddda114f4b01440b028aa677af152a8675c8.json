{"sha": "3391ddda114f4b01440b028aa677af152a8675c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOTFkZGRhMTE0ZjRiMDE0NDBiMDI4YWE2NzdhZjE1MmE4Njc1Yzg=", "commit": {"author": {"name": "inrustwetrust", "email": "inrustwetrust@users.noreply.github.com", "date": "2014-11-15T13:51:22Z"}, "committer": {"name": "inrustwetrust", "email": "inrustwetrust@users.noreply.github.com", "date": "2014-11-15T13:51:22Z"}, "message": "Slightly improved rustc error messages for invalid -C arguments", "tree": {"sha": "c323ccb9d1f093751ba5c3a9a877d42e43f082ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c323ccb9d1f093751ba5c3a9a877d42e43f082ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3391ddda114f4b01440b028aa677af152a8675c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3391ddda114f4b01440b028aa677af152a8675c8", "html_url": "https://github.com/rust-lang/rust/commit/3391ddda114f4b01440b028aa677af152a8675c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3391ddda114f4b01440b028aa677af152a8675c8/comments", "author": {"login": "inrustwetrust", "id": 8572437, "node_id": "MDQ6VXNlcjg1NzI0Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/8572437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inrustwetrust", "html_url": "https://github.com/inrustwetrust", "followers_url": "https://api.github.com/users/inrustwetrust/followers", "following_url": "https://api.github.com/users/inrustwetrust/following{/other_user}", "gists_url": "https://api.github.com/users/inrustwetrust/gists{/gist_id}", "starred_url": "https://api.github.com/users/inrustwetrust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inrustwetrust/subscriptions", "organizations_url": "https://api.github.com/users/inrustwetrust/orgs", "repos_url": "https://api.github.com/users/inrustwetrust/repos", "events_url": "https://api.github.com/users/inrustwetrust/events{/privacy}", "received_events_url": "https://api.github.com/users/inrustwetrust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inrustwetrust", "id": 8572437, "node_id": "MDQ6VXNlcjg1NzI0Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/8572437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inrustwetrust", "html_url": "https://github.com/inrustwetrust", "followers_url": "https://api.github.com/users/inrustwetrust/followers", "following_url": "https://api.github.com/users/inrustwetrust/following{/other_user}", "gists_url": "https://api.github.com/users/inrustwetrust/gists{/gist_id}", "starred_url": "https://api.github.com/users/inrustwetrust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inrustwetrust/subscriptions", "organizations_url": "https://api.github.com/users/inrustwetrust/orgs", "repos_url": "https://api.github.com/users/inrustwetrust/repos", "events_url": "https://api.github.com/users/inrustwetrust/events{/privacy}", "received_events_url": "https://api.github.com/users/inrustwetrust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc0b6120c1de5b8b7325dd5bb1066b6b045f2631", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0b6120c1de5b8b7325dd5bb1066b6b045f2631", "html_url": "https://github.com/rust-lang/rust/commit/bc0b6120c1de5b8b7325dd5bb1066b6b045f2631"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "b60676eb4c3e3a5a5524ff2a46aad8edf4d72c9a", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3391ddda114f4b01440b028aa677af152a8675c8/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3391ddda114f4b01440b028aa677af152a8675c8/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=3391ddda114f4b01440b028aa677af152a8675c8", "patch": "@@ -268,8 +268,21 @@ macro_rules! cgoptions(\n \n     pub type CodegenSetter = fn(&mut CodegenOptions, v: Option<&str>) -> bool;\n     pub const CG_OPTIONS: &'static [(&'static str, CodegenSetter,\n-                                      &'static str)] =\n-        &[ $( (stringify!($opt), cgsetters::$opt, $desc) ),* ];\n+                                     Option<&'static str>, &'static str)] =\n+        &[ $( (stringify!($opt), cgsetters::$opt, cg_type_descs::$parse, $desc) ),* ];\n+\n+    #[allow(non_upper_case_globals)]\n+    mod cg_type_descs {\n+        pub const parse_bool: Option<&'static str> = None;\n+        pub const parse_opt_bool: Option<&'static str> = None;\n+        pub const parse_string: Option<&'static str> = Some(\"a string\");\n+        pub const parse_opt_string: Option<&'static str> = Some(\"a string\");\n+        pub const parse_list: Option<&'static str> = Some(\"a space-separated list of strings\");\n+        pub const parse_opt_list: Option<&'static str> = Some(\"a space-separated list of strings\");\n+        pub const parse_uint: Option<&'static str> = Some(\"a number\");\n+        pub const parse_passes: Option<&'static str> =\n+            Some(\"a space-separated list of passes, or `all`\");\n+    }\n \n     mod cgsetters {\n         use super::{CodegenOptions, Passes, SomePasses, AllPasses};\n@@ -421,19 +434,25 @@ pub fn build_codegen_options(matches: &getopts::Matches) -> CodegenOptions\n         let value = iter.next();\n         let option_to_lookup = key.replace(\"-\", \"_\");\n         let mut found = false;\n-        for &(candidate, setter, _) in CG_OPTIONS.iter() {\n+        for &(candidate, setter, opt_type_desc, _) in CG_OPTIONS.iter() {\n             if option_to_lookup.as_slice() != candidate { continue }\n             if !setter(&mut cg, value) {\n-                match value {\n-                    Some(..) => {\n+                match (value, opt_type_desc) {\n+                    (Some(..), None) => {\n                         early_error(format!(\"codegen option `{}` takes no \\\n                                              value\", key).as_slice())\n                     }\n-                    None => {\n+                    (None, Some(type_desc)) => {\n                         early_error(format!(\"codegen option `{0}` requires \\\n-                                             a value (-C {0}=<value>)\",\n-                                            key).as_slice())\n+                                             {1} (-C {0}=<value>)\",\n+                                            key, type_desc).as_slice())\n+                    }\n+                    (Some(value), Some(type_desc)) => {\n+                        early_error(format!(\"incorrect value `{}` for codegen \\\n+                                             option `{}` - {} was expected\",\n+                                             value, key, type_desc).as_slice())\n                     }\n+                    (None, None) => unreachable!()\n                 }\n             }\n             found = true;"}, {"sha": "546469c3c0e5d4735377a795ec8b92470383c798", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3391ddda114f4b01440b028aa677af152a8675c8/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3391ddda114f4b01440b028aa677af152a8675c8/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=3391ddda114f4b01440b028aa677af152a8675c8", "patch": "@@ -299,14 +299,10 @@ fn describe_debug_flags() {\n \n fn describe_codegen_flags() {\n     println!(\"\\nAvailable codegen options:\\n\");\n-    let mut cg = config::basic_codegen_options();\n-    for &(name, parser, desc) in config::CG_OPTIONS.iter() {\n-        // we invoke the parser function on `None` to see if this option needs\n-        // an argument or not.\n-        let (width, extra) = if parser(&mut cg, None) {\n-            (25, \"\")\n-        } else {\n-            (21, \"=val\")\n+    for &(name, _, opt_type_desc, desc) in config::CG_OPTIONS.iter() {\n+        let (width, extra) = match opt_type_desc {\n+            Some(..) => (21, \"=val\"),\n+            None => (25, \"\")\n         };\n         println!(\"    -C {:>width$s}{} -- {}\", name.replace(\"_\", \"-\"),\n                  extra, desc, width=width);"}, {"sha": "e439b27a19061d350405e9db2ece0d503640accb", "filename": "src/test/run-make/codegen-options-parsing/Makefile", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3391ddda114f4b01440b028aa677af152a8675c8/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3391ddda114f4b01440b028aa677af152a8675c8/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2FMakefile?ref=3391ddda114f4b01440b028aa677af152a8675c8", "patch": "@@ -0,0 +1,24 @@\n+-include ../tools.mk\n+\n+all:\n+\t#Option taking a number\n+\t$(RUSTC) -C codegen-units dummy.rs 2>&1 | \\\n+\t\tgrep 'codegen option `codegen-units` requires a number'\n+\t$(RUSTC) -C codegen-units= dummy.rs 2>&1 | \\\n+\t\tgrep 'incorrect value `` for codegen option `codegen-units` - a number was expected'\n+\t$(RUSTC) -C codegen-units=foo dummy.rs 2>&1 | \\\n+\t\tgrep 'incorrect value `foo` for codegen option `codegen-units` - a number was expected'\n+\t$(RUSTC) -C codegen-units=1 dummy.rs\n+\t#Option taking a string\n+\t$(RUSTC) -C extra-filename dummy.rs 2>&1 | \\\n+\t\tgrep 'codegen option `extra-filename` requires a string'\n+\t$(RUSTC) -C extra-filename= dummy.rs 2>&1\n+\t$(RUSTC) -C extra-filename=foo dummy.rs 2>&1\n+\t#Option taking no argument\n+\t$(RUSTC) -C lto= dummy.rs 2>&1 | \\\n+\t\tgrep 'codegen option `lto` takes no value'\n+\t$(RUSTC) -C lto=1 dummy.rs 2>&1 | \\\n+\t\tgrep 'codegen option `lto` takes no value'\n+\t$(RUSTC) -C lto=foo dummy.rs 2>&1 | \\\n+\t\tgrep 'codegen option `lto` takes no value'\n+\t$(RUSTC) -C lto dummy.rs"}, {"sha": "8ae3d072362ed6b5db81a00be3becce691926a7f", "filename": "src/test/run-make/codegen-options-parsing/dummy.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3391ddda114f4b01440b028aa677af152a8675c8/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2Fdummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3391ddda114f4b01440b028aa677af152a8675c8/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2Fdummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcodegen-options-parsing%2Fdummy.rs?ref=3391ddda114f4b01440b028aa677af152a8675c8", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}]}