{"sha": "367487fe88dca78cffad5138673d5259f7f7ba6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NzQ4N2ZlODhkY2E3OGNmZmFkNTEzODY3M2Q1MjU5ZjdmN2JhNmI=", "commit": {"author": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2020-05-28T19:42:22Z"}, "committer": {"name": "robojumper", "email": "robojumper@gmail.com", "date": "2020-05-28T19:42:22Z"}, "message": "Support raw_ref_op's raw reference operator", "tree": {"sha": "2846ebee3a16875674aed26b534f905a30cb598f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2846ebee3a16875674aed26b534f905a30cb598f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/367487fe88dca78cffad5138673d5259f7f7ba6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/367487fe88dca78cffad5138673d5259f7f7ba6b", "html_url": "https://github.com/rust-lang/rust/commit/367487fe88dca78cffad5138673d5259f7f7ba6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/367487fe88dca78cffad5138673d5259f7f7ba6b/comments", "author": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robojumper", "id": 14299449, "node_id": "MDQ6VXNlcjE0Mjk5NDQ5", "avatar_url": "https://avatars.githubusercontent.com/u/14299449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robojumper", "html_url": "https://github.com/robojumper", "followers_url": "https://api.github.com/users/robojumper/followers", "following_url": "https://api.github.com/users/robojumper/following{/other_user}", "gists_url": "https://api.github.com/users/robojumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/robojumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robojumper/subscriptions", "organizations_url": "https://api.github.com/users/robojumper/orgs", "repos_url": "https://api.github.com/users/robojumper/repos", "events_url": "https://api.github.com/users/robojumper/events{/privacy}", "received_events_url": "https://api.github.com/users/robojumper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190a0595a478d059fdd95a179fe38d59cb6379be", "url": "https://api.github.com/repos/rust-lang/rust/commits/190a0595a478d059fdd95a179fe38d59cb6379be", "html_url": "https://github.com/rust-lang/rust/commit/190a0595a478d059fdd95a179fe38d59cb6379be"}], "stats": {"total": 331, "additions": 259, "deletions": 72}, "files": [{"sha": "905c0cf5dad2b7ead0283af18c1edb4ddb2931b3", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -28,7 +28,7 @@ use crate::{\n     },\n     item_scope::BuiltinShadowMode,\n     path::{GenericArgs, Path},\n-    type_ref::{Mutability, TypeRef},\n+    type_ref::{Mutability, Rawness, TypeRef},\n     AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId,\n     StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n };\n@@ -378,8 +378,21 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::RefExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                let mutability = Mutability::from_mutable(e.mut_token().is_some());\n-                self.alloc_expr(Expr::Ref { expr, mutability }, syntax_ptr)\n+                let raw_tok = e.raw_token().is_some();\n+                let mutability = if raw_tok {\n+                    if e.mut_token().is_some() {\n+                        Mutability::Mut\n+                    } else if e.const_token().is_some() {\n+                        Mutability::Shared\n+                    } else {\n+                        unreachable!(\"parser only remaps to raw_token() if matching mutability token follows\")\n+                    }\n+                } else {\n+                    Mutability::from_mutable(e.mut_token().is_some())\n+                };\n+                let rawness = Rawness::from_raw(raw_tok);\n+\n+                self.alloc_expr(Expr::Ref { expr, rawness, mutability }, syntax_ptr)\n             }\n             ast::Expr::PrefixExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());"}, {"sha": "f25c6f95807962e18ce76a07769f4de75da54a9a", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -19,7 +19,7 @@ use ra_syntax::ast::RangeOp;\n use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     path::{GenericArgs, Path},\n-    type_ref::{Mutability, TypeRef},\n+    type_ref::{Mutability, Rawness, TypeRef},\n };\n \n pub type ExprId = Idx<Expr>;\n@@ -110,6 +110,7 @@ pub enum Expr {\n     },\n     Ref {\n         expr: ExprId,\n+        rawness: Rawness,\n         mutability: Mutability,\n     },\n     Box {"}, {"sha": "86a77b7046d44cc082d901d80a12bfd680e2b876", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -35,6 +35,22 @@ impl Mutability {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum Rawness {\n+    RawPtr,\n+    Ref,\n+}\n+\n+impl Rawness {\n+    pub fn from_raw(is_raw: bool) -> Rawness {\n+        if is_raw {\n+            Rawness::RawPtr\n+        } else {\n+            Rawness::Ref\n+        }\n+    }\n+}\n+\n /// Compare ty::Ty\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum TypeRef {"}, {"sha": "54bab3476c7d00657818bf1fba05b62608e69fa3", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -17,8 +17,8 @@ use crate::{\n     autoderef, method_resolution, op,\n     traits::InEnvironment,\n     utils::{generics, variant_data, Generics},\n-    ApplicationTy, Binders, CallableDef, InferTy, IntTy, Mutability, Obligation, Substs, TraitRef,\n-    Ty, TypeCtor, Uncertain,\n+    ApplicationTy, Binders, CallableDef, InferTy, IntTy, Mutability, Obligation, Rawness, Substs,\n+    TraitRef, Ty, TypeCtor, Uncertain,\n };\n \n use super::{\n@@ -350,19 +350,28 @@ impl<'a> InferenceContext<'a> {\n                 // FIXME check the cast...\n                 cast_ty\n             }\n-            Expr::Ref { expr, mutability } => {\n-                let expectation =\n-                    if let Some((exp_inner, exp_mutability)) = &expected.ty.as_reference() {\n-                        if *exp_mutability == Mutability::Mut && *mutability == Mutability::Shared {\n-                            // FIXME: throw type error - expected mut reference but found shared ref,\n-                            // which cannot be coerced\n-                        }\n-                        Expectation::rvalue_hint(Ty::clone(exp_inner))\n-                    } else {\n-                        Expectation::none()\n-                    };\n+            Expr::Ref { expr, rawness, mutability } => {\n+                let expectation = if let Some((exp_inner, exp_rawness, exp_mutability)) =\n+                    &expected.ty.as_reference_or_ptr()\n+                {\n+                    if *exp_mutability == Mutability::Mut && *mutability == Mutability::Shared {\n+                        // FIXME: throw type error - expected mut reference but found shared ref,\n+                        // which cannot be coerced\n+                    }\n+                    if *exp_rawness == Rawness::Ref && *rawness == Rawness::RawPtr {\n+                        // FIXME: throw type error - expected reference but found ptr,\n+                        // which cannot be coerced\n+                    }\n+                    Expectation::rvalue_hint(Ty::clone(exp_inner))\n+                } else {\n+                    Expectation::none()\n+                };\n                 let inner_ty = self.infer_expr_inner(*expr, &expectation);\n-                Ty::apply_one(TypeCtor::Ref(*mutability), inner_ty)\n+                let ty = match rawness {\n+                    Rawness::RawPtr => TypeCtor::RawPtr(*mutability),\n+                    Rawness::Ref => TypeCtor::Ref(*mutability),\n+                };\n+                Ty::apply_one(ty, inner_ty)\n             }\n             Expr::Box { expr } => {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());"}, {"sha": "9fa8d3bdc3f4c6edf46fff61ac7e0868bdebbe32", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -49,8 +49,10 @@ use std::sync::Arc;\n use std::{iter, mem};\n \n use hir_def::{\n-    expr::ExprId, type_ref::Mutability, AdtId, AssocContainerId, DefWithBodyId, GenericDefId,\n-    HasModule, Lookup, TraitId, TypeAliasId, TypeParamId,\n+    expr::ExprId,\n+    type_ref::{Mutability, Rawness},\n+    AdtId, AssocContainerId, DefWithBodyId, GenericDefId, HasModule, Lookup, TraitId, TypeAliasId,\n+    TypeParamId,\n };\n use ra_db::{impl_intern_key, salsa, CrateId};\n \n@@ -709,6 +711,18 @@ impl Ty {\n         }\n     }\n \n+    pub fn as_reference_or_ptr(&self) -> Option<(&Ty, Rawness, Mutability)> {\n+        match self {\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::Ref(mutability), parameters }) => {\n+                Some((parameters.as_single(), Rawness::Ref, *mutability))\n+            }\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::RawPtr(mutability), parameters }) => {\n+                Some((parameters.as_single(), Rawness::RawPtr, *mutability))\n+            }\n+            _ => None,\n+        }\n+    }\n+\n     pub fn strip_references(&self) -> &Ty {\n         let mut t: &Ty = self;\n "}, {"sha": "6f777ed8c937e5c2b10ffa9bab1a56643fcdbecf", "filename": "crates/ra_hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -116,15 +116,20 @@ fn infer_let_stmt_coerce() {\n     assert_snapshot!(\n         infer(r#\"\n fn test() {\n-    let x: &[i32] = &[1];\n+    let x: &[isize] = &[1];\n+    let x: *const [isize] = &[1];\n }\n \"#),\n         @r###\"\n-    11..40 '{     ...[1]; }': ()\n-    21..22 'x': &[i32]\n-    33..37 '&[1]': &[i32; _]\n-    34..37 '[1]': [i32; _]\n-    35..36 '1': i32\n+    11..76 '{     ...[1]; }': ()\n+    21..22 'x': &[isize]\n+    35..39 '&[1]': &[isize; _]\n+    36..39 '[1]': [isize; _]\n+    37..38 '1': isize\n+    49..50 'x': *const [isize]\n+    69..73 '&[1]': &[isize; _]\n+    70..73 '[1]': [isize; _]\n+    71..72 '1': isize\n     \"###);\n }\n "}, {"sha": "f1db3416049fcdeed5d0c3b6a2b49e21a4a4f909", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -384,6 +384,26 @@ fn test(a: &u32, b: &mut u32, c: *const u32, d: *mut u32) {\n     );\n }\n \n+#[test]\n+fn infer_raw_ref() {\n+    assert_snapshot!(\n+        infer(r#\"\n+fn test(a: i32) {\n+    &raw mut a;\n+    &raw const a;\n+}\n+\"#),\n+        @r###\"\n+    9..10 'a': i32\n+    17..54 '{     ...t a; }': ()\n+    23..33 '&raw mut a': *mut i32\n+    32..33 'a': i32\n+    39..51 '&raw const a': *const i32\n+    50..51 'a': i32\n+    \"###\n+    );\n+}\n+\n #[test]\n fn infer_literals() {\n     assert_snapshot!("}, {"sha": "d6e8df32a14e2e0d4c410295fdddfa8dfb429f38", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -325,13 +325,27 @@ fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)>\n     let kind = match p.current() {\n         // test ref_expr\n         // fn foo() {\n+        //     // reference operator\n         //     let _ = &1;\n         //     let _ = &mut &f();\n+        //     let _ = &raw;\n+        //     let _ = &raw.0;\n+        //     // raw reference operator\n+        //     let _ = &raw mut foo;\n+        //     let _ = &raw const foo;\n         // }\n         T![&] => {\n             m = p.start();\n             p.bump(T![&]);\n-            p.eat(T![mut]);\n+            if p.at(IDENT)\n+                && p.at_contextual_kw(\"raw\")\n+                && (p.nth_at(1, T![mut]) || p.nth_at(1, T![const]))\n+            {\n+                p.bump_remap(T![raw]);\n+                p.bump_any();\n+            } else {\n+                p.eat(T![mut]);\n+            }\n             REF_EXPR\n         }\n         // test unary_expr"}, {"sha": "255402fbce3292287c2abbb51275c1665066054f", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -1235,6 +1235,8 @@ impl CastExpr {\n /// ```\n /// \u2770 &foo \u2771;\n /// \u2770 &mut bar \u2771;\n+/// \u2770 &raw const bar \u2771;\n+/// \u2770 &raw mut bar \u2771;\n /// ```\n ///\n /// [Reference](https://doc.rust-lang.org/reference/expressions/operator-expr.html#borrow-operators)\n@@ -1247,6 +1249,7 @@ impl RefExpr {\n     pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n     pub fn raw_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![raw]) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n+    pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n /// Prefix operator call. This is either `!` or `*` or `-`."}, {"sha": "58bdf7e34c64becb76e0a1850e163fb7328e71d5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0082_ref_expr.rast", "status": "modified", "additions": 128, "deletions": 44, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rast?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -1,5 +1,5 @@\n-SOURCE_FILE@0..52\n-  FN_DEF@0..51\n+SOURCE_FILE@0..200\n+  FN_DEF@0..199\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..6\n@@ -8,47 +8,131 @@ SOURCE_FILE@0..52\n       L_PAREN@6..7 \"(\"\n       R_PAREN@7..8 \")\"\n     WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..51\n+    BLOCK_EXPR@9..199\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      LET_STMT@15..26\n-        LET_KW@15..18 \"let\"\n-        WHITESPACE@18..19 \" \"\n-        PLACEHOLDER_PAT@19..20\n-          UNDERSCORE@19..20 \"_\"\n-        WHITESPACE@20..21 \" \"\n-        EQ@21..22 \"=\"\n-        WHITESPACE@22..23 \" \"\n-        REF_EXPR@23..25\n-          AMP@23..24 \"&\"\n-          LITERAL@24..25\n-            INT_NUMBER@24..25 \"1\"\n-        SEMICOLON@25..26 \";\"\n-      WHITESPACE@26..31 \"\\n    \"\n-      LET_STMT@31..49\n-        LET_KW@31..34 \"let\"\n-        WHITESPACE@34..35 \" \"\n-        PLACEHOLDER_PAT@35..36\n-          UNDERSCORE@35..36 \"_\"\n-        WHITESPACE@36..37 \" \"\n-        EQ@37..38 \"=\"\n-        WHITESPACE@38..39 \" \"\n-        REF_EXPR@39..48\n-          AMP@39..40 \"&\"\n-          MUT_KW@40..43 \"mut\"\n-          WHITESPACE@43..44 \" \"\n-          REF_EXPR@44..48\n-            AMP@44..45 \"&\"\n-            CALL_EXPR@45..48\n-              PATH_EXPR@45..46\n-                PATH@45..46\n-                  PATH_SEGMENT@45..46\n-                    NAME_REF@45..46\n-                      IDENT@45..46 \"f\"\n-              ARG_LIST@46..48\n-                L_PAREN@46..47 \"(\"\n-                R_PAREN@47..48 \")\"\n-        SEMICOLON@48..49 \";\"\n-      WHITESPACE@49..50 \"\\n\"\n-      R_CURLY@50..51 \"}\"\n-  WHITESPACE@51..52 \"\\n\"\n+      COMMENT@15..36 \"// reference operator\"\n+      WHITESPACE@36..41 \"\\n    \"\n+      LET_STMT@41..52\n+        LET_KW@41..44 \"let\"\n+        WHITESPACE@44..45 \" \"\n+        PLACEHOLDER_PAT@45..46\n+          UNDERSCORE@45..46 \"_\"\n+        WHITESPACE@46..47 \" \"\n+        EQ@47..48 \"=\"\n+        WHITESPACE@48..49 \" \"\n+        REF_EXPR@49..51\n+          AMP@49..50 \"&\"\n+          LITERAL@50..51\n+            INT_NUMBER@50..51 \"1\"\n+        SEMICOLON@51..52 \";\"\n+      WHITESPACE@52..57 \"\\n    \"\n+      LET_STMT@57..75\n+        LET_KW@57..60 \"let\"\n+        WHITESPACE@60..61 \" \"\n+        PLACEHOLDER_PAT@61..62\n+          UNDERSCORE@61..62 \"_\"\n+        WHITESPACE@62..63 \" \"\n+        EQ@63..64 \"=\"\n+        WHITESPACE@64..65 \" \"\n+        REF_EXPR@65..74\n+          AMP@65..66 \"&\"\n+          MUT_KW@66..69 \"mut\"\n+          WHITESPACE@69..70 \" \"\n+          REF_EXPR@70..74\n+            AMP@70..71 \"&\"\n+            CALL_EXPR@71..74\n+              PATH_EXPR@71..72\n+                PATH@71..72\n+                  PATH_SEGMENT@71..72\n+                    NAME_REF@71..72\n+                      IDENT@71..72 \"f\"\n+              ARG_LIST@72..74\n+                L_PAREN@72..73 \"(\"\n+                R_PAREN@73..74 \")\"\n+        SEMICOLON@74..75 \";\"\n+      WHITESPACE@75..80 \"\\n    \"\n+      LET_STMT@80..93\n+        LET_KW@80..83 \"let\"\n+        WHITESPACE@83..84 \" \"\n+        PLACEHOLDER_PAT@84..85\n+          UNDERSCORE@84..85 \"_\"\n+        WHITESPACE@85..86 \" \"\n+        EQ@86..87 \"=\"\n+        WHITESPACE@87..88 \" \"\n+        REF_EXPR@88..92\n+          AMP@88..89 \"&\"\n+          PATH_EXPR@89..92\n+            PATH@89..92\n+              PATH_SEGMENT@89..92\n+                NAME_REF@89..92\n+                  IDENT@89..92 \"raw\"\n+        SEMICOLON@92..93 \";\"\n+      WHITESPACE@93..98 \"\\n    \"\n+      LET_STMT@98..113\n+        LET_KW@98..101 \"let\"\n+        WHITESPACE@101..102 \" \"\n+        PLACEHOLDER_PAT@102..103\n+          UNDERSCORE@102..103 \"_\"\n+        WHITESPACE@103..104 \" \"\n+        EQ@104..105 \"=\"\n+        WHITESPACE@105..106 \" \"\n+        REF_EXPR@106..112\n+          AMP@106..107 \"&\"\n+          FIELD_EXPR@107..112\n+            PATH_EXPR@107..110\n+              PATH@107..110\n+                PATH_SEGMENT@107..110\n+                  NAME_REF@107..110\n+                    IDENT@107..110 \"raw\"\n+            DOT@110..111 \".\"\n+            NAME_REF@111..112\n+              INT_NUMBER@111..112 \"0\"\n+        SEMICOLON@112..113 \";\"\n+      WHITESPACE@113..118 \"\\n    \"\n+      COMMENT@118..143 \"// raw reference oper ...\"\n+      WHITESPACE@143..148 \"\\n    \"\n+      LET_STMT@148..169\n+        LET_KW@148..151 \"let\"\n+        WHITESPACE@151..152 \" \"\n+        PLACEHOLDER_PAT@152..153\n+          UNDERSCORE@152..153 \"_\"\n+        WHITESPACE@153..154 \" \"\n+        EQ@154..155 \"=\"\n+        WHITESPACE@155..156 \" \"\n+        REF_EXPR@156..168\n+          AMP@156..157 \"&\"\n+          RAW_KW@157..160 \"raw\"\n+          WHITESPACE@160..161 \" \"\n+          MUT_KW@161..164 \"mut\"\n+          WHITESPACE@164..165 \" \"\n+          PATH_EXPR@165..168\n+            PATH@165..168\n+              PATH_SEGMENT@165..168\n+                NAME_REF@165..168\n+                  IDENT@165..168 \"foo\"\n+        SEMICOLON@168..169 \";\"\n+      WHITESPACE@169..174 \"\\n    \"\n+      LET_STMT@174..197\n+        LET_KW@174..177 \"let\"\n+        WHITESPACE@177..178 \" \"\n+        PLACEHOLDER_PAT@178..179\n+          UNDERSCORE@178..179 \"_\"\n+        WHITESPACE@179..180 \" \"\n+        EQ@180..181 \"=\"\n+        WHITESPACE@181..182 \" \"\n+        REF_EXPR@182..196\n+          AMP@182..183 \"&\"\n+          RAW_KW@183..186 \"raw\"\n+          WHITESPACE@186..187 \" \"\n+          CONST_KW@187..192 \"const\"\n+          WHITESPACE@192..193 \" \"\n+          PATH_EXPR@193..196\n+            PATH@193..196\n+              PATH_SEGMENT@193..196\n+                NAME_REF@193..196\n+                  IDENT@193..196 \"foo\"\n+        SEMICOLON@196..197 \";\"\n+      WHITESPACE@197..198 \"\\n\"\n+      R_CURLY@198..199 \"}\"\n+  WHITESPACE@199..200 \"\\n\""}, {"sha": "c5262f4469b0683a9766b1003c8eea83767cd227", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0082_ref_expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0082_ref_expr.rs?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -1,4 +1,10 @@\n fn foo() {\n+    // reference operator\n     let _ = &1;\n     let _ = &mut &f();\n+    let _ = &raw;\n+    let _ = &raw.0;\n+    // raw reference operator\n+    let _ = &raw mut foo;\n+    let _ = &raw const foo;\n }"}, {"sha": "d4621930ed6527d7feddee46aae5d035c5e1c0f8", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/367487fe88dca78cffad5138673d5259f7f7ba6b/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/367487fe88dca78cffad5138673d5259f7f7ba6b/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=367487fe88dca78cffad5138673d5259f7f7ba6b", "patch": "@@ -1153,10 +1153,12 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         /// ```\n         /// \u2770 &foo \u2771;\n         /// \u2770 &mut bar \u2771;\n+        /// \u2770 &raw const bar \u2771;\n+        /// \u2770 &raw mut bar \u2771;\n         /// ```\n         ///\n         /// [Reference](https://doc.rust-lang.org/reference/expressions/operator-expr.html#borrow-operators)\n-        struct RefExpr: AttrsOwner { T![&], T![raw], T![mut], Expr }\n+        struct RefExpr: AttrsOwner { T![&], T![raw], T![mut], T![const], Expr }\n \n         /// Prefix operator call. This is either `!` or `*` or `-`.\n         ///"}]}