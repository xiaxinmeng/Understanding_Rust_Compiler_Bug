{"sha": "4f7d1a9d699ce7d30946f4ae26622b95e2c75372", "node_id": "C_kwDOAAsO6NoAKDRmN2QxYTlkNjk5Y2U3ZDMwOTQ2ZjRhZTI2NjIyYjk1ZTJjNzUzNzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-19T10:34:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-19T10:34:36Z"}, "message": "Auto merge of #12309 - Veykril:completion, r=Veykril\n\nfix: Fix incorrect expected type in completions for trailing match arms\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/12264", "tree": {"sha": "5731c26a83724c64f706fa85fd72ed963c3c4e31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5731c26a83724c64f706fa85fd72ed963c3c4e31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f7d1a9d699ce7d30946f4ae26622b95e2c75372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7d1a9d699ce7d30946f4ae26622b95e2c75372", "html_url": "https://github.com/rust-lang/rust/commit/4f7d1a9d699ce7d30946f4ae26622b95e2c75372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f7d1a9d699ce7d30946f4ae26622b95e2c75372/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5ab27a0bf46913484d830b8bbeeaafb01c941ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ab27a0bf46913484d830b8bbeeaafb01c941ed", "html_url": "https://github.com/rust-lang/rust/commit/d5ab27a0bf46913484d830b8bbeeaafb01c941ed"}, {"sha": "018975b0418f5b5baa1a5403fce32a53d95e5068", "url": "https://api.github.com/repos/rust-lang/rust/commits/018975b0418f5b5baa1a5403fce32a53d95e5068", "html_url": "https://github.com/rust-lang/rust/commit/018975b0418f5b5baa1a5403fce32a53d95e5068"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "e51ae0dc3b5d7f369756cc0a1e1bb69987fab1fc", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4f7d1a9d699ce7d30946f4ae26622b95e2c75372/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7d1a9d699ce7d30946f4ae26622b95e2c75372/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=4f7d1a9d699ce7d30946f4ae26622b95e2c75372", "patch": "@@ -802,9 +802,19 @@ impl<'a> CompletionContext<'a> {\n                             )\n                         }\n                     },\n+                    // match foo { $0 }\n+                    // match foo { ..., pat => $0 }\n                     ast::MatchExpr(it) => {\n-                        cov_mark::hit!(expected_type_match_arm_without_leading_char);\n-                        let ty = it.expr().and_then(|e| self.sema.type_of_expr(&e)).map(TypeInfo::original);\n+                        let ty = if self.previous_token_is(T![=>]) {\n+                            // match foo { ..., pat => $0 }\n+                            cov_mark::hit!(expected_type_match_arm_body_without_leading_char);\n+                            cov_mark::hit!(expected_type_match_arm_body_with_leading_char);\n+                            self.sema.type_of_expr(&it.into())\n+                        } else {\n+                            // match foo { $0 }\n+                            cov_mark::hit!(expected_type_match_arm_without_leading_char);\n+                            it.expr().and_then(|e| self.sema.type_of_expr(&e))\n+                        }.map(TypeInfo::original);\n                         (ty, None)\n                     },\n                     ast::IfExpr(it) => {\n@@ -1589,6 +1599,36 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn expected_type_match_arm_body_without_leading_char() {\n+        cov_mark::check!(expected_type_match_arm_body_without_leading_char);\n+        check_expected_type_and_name(\n+            r#\"\n+struct Foo;\n+enum E { X }\n+fn foo() -> Foo {\n+   match E::X { E::X => $0 }\n+}\n+\"#,\n+            expect![[r#\"ty: Foo, name: ?\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn expected_type_match_body_arm_with_leading_char() {\n+        cov_mark::check!(expected_type_match_arm_body_with_leading_char);\n+        check_expected_type_and_name(\n+            r#\"\n+struct Foo;\n+enum E { X }\n+fn foo() -> Foo {\n+   match E::X { E::X => c$0 }\n+}\n+\"#,\n+            expect![[r#\"ty: Foo, name: ?\"#]],\n+        );\n+    }\n+\n     #[test]\n     fn expected_type_if_let_without_leading_char() {\n         cov_mark::check!(expected_type_if_let_without_leading_char);"}]}