{"sha": "b90cc77bac0bb2577568fb12d340c0ea7e787d1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MGNjNzdiYWMwYmIyNTc3NTY4ZmIxMmQzNDBjMGVhN2U3ODdkMWQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T14:22:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T14:22:39Z"}, "message": "basic struct and tuple drop \"glue\"", "tree": {"sha": "72aa6b84ea9a9f9a209f6d85ab7d944da5d04d80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72aa6b84ea9a9f9a209f6d85ab7d944da5d04d80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b90cc77bac0bb2577568fb12d340c0ea7e787d1d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYG0gvAAoJEFbW7qD8Z6xGz6AP/1Z6uaYR8Xya6vN4DCmXs/v5\nGJdxoQeTjGbmDU0XkomoGrGG3qe897KOqHazh/B3fQ0ngGyeKjXeHIy6ec8bQdx1\nVEWk/t5YrZkUflwh7nDidtu+FUg0ns0zQsTUmEjT+y67uCmRllhtjcd6wq0MTspu\neoR6KAy4z+mwCNHYtQdYJIcesDHvsSIvCmtqGwLWT/wfelIS7p02j8UIS3vAS0G+\nxXptTVUNCt1Gysa7e97iyRqZWlntxPcOA82z8Z7VVHZ5gcWisTH5Ac+naFRffp/4\nQxQGHjLnXlN/sr2+1wHBb4zzezzngOaDv3bFVGUJLw8j9ym9SI8jqtyzjb4ytwt8\n+p5shCAPcCwq10dK8K16GhFGY1Zv/MRHT+pPOol6WSoxOV29KkdL50h1/4R0eN9E\nP5s6SoPeTKQv3T7bN+7IqhJa9yddlPmcfftFhqTEKdWbwSTvAzRw0BplsAMpVPao\nq3FqeUX1TSm162Y94j/BhSFm++3CRhbGMpIbaMI1o5ojhxccEi9nmD0yUugxaafh\nA86qshS2IVIx6KcdtfKexv4ElkPLhKyqLNgd7PDSSmCf6Dr3okjWaQkK9hkvltoe\n68eDBzDMlCFkQ2B4WkGwWX4ddkQI/fYsJQFc7EcU8bs2QIvl1t22ElAdllEdgHHI\n8qeYfAkbFI7FH+zSf43f\n=DXCB\n-----END PGP SIGNATURE-----", "payload": "tree 72aa6b84ea9a9f9a209f6d85ab7d944da5d04d80\nparent feefb66ebd967e0c9e81e01a814351ab3bc07495\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478182959 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478182959 +0100\n\nbasic struct and tuple drop \"glue\""}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b90cc77bac0bb2577568fb12d340c0ea7e787d1d", "html_url": "https://github.com/rust-lang/rust/commit/b90cc77bac0bb2577568fb12d340c0ea7e787d1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b90cc77bac0bb2577568fb12d340c0ea7e787d1d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feefb66ebd967e0c9e81e01a814351ab3bc07495", "url": "https://api.github.com/repos/rust-lang/rust/commits/feefb66ebd967e0c9e81e01a814351ab3bc07495", "html_url": "https://github.com/rust-lang/rust/commit/feefb66ebd967e0c9e81e01a814351ab3bc07495"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "1b045417f4c2e0b1ff74a0ac5174a2d9266d41b0", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b90cc77bac0bb2577568fb12d340c0ea7e787d1d/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90cc77bac0bb2577568fb12d340c0ea7e787d1d/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=b90cc77bac0bb2577568fb12d340c0ea7e787d1d", "patch": "@@ -104,10 +104,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Drop { ref location, target, .. } => {\n-                let val = self.eval_and_read_lvalue(location)?;\n+                let lval = self.eval_lvalue(location)?;\n \n                 let ty = self.lvalue_ty(location);\n-                self.drop(val, ty)?;\n+                self.drop(lval, ty)?;\n                 self.goto_block(target);\n             }\n \n@@ -468,25 +468,49 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.tcx.type_needs_drop_given_env(ty, &self.tcx.empty_parameter_environment())\n     }\n \n-    fn drop(&mut self, val: Value, ty: Ty<'tcx>) -> EvalResult<'tcx, ()> {\n+    fn drop(&mut self, lval: Lvalue<'tcx>, ty: Ty<'tcx>) -> EvalResult<'tcx, ()> {\n         if !self.type_needs_drop(ty) {\n             debug!(\"no need to drop {:?}\", ty);\n             return Ok(());\n         }\n-        trace!(\"-need to drop {:?}\", ty);\n+        trace!(\"-need to drop {:?} at {:?}\", ty, lval);\n \n         // TODO(solson): Call user-defined Drop::drop impls.\n \n+        // special case `Box` to deallocate the inner allocation\n+        // FIXME: if user defined Drop impls work, then this can go away, since the stdlib calls\n+        // heap::deallocate\n+        if let ty::TyBox(contents_ty) = ty.sty {\n+            let val = self.read_lvalue(lval)?;\n+            let contents_ptr = val.read_ptr(&self.memory)?;\n+            self.drop(Lvalue::from_ptr(contents_ptr), contents_ty)?;\n+            trace!(\"-deallocating box\");\n+            return self.memory.deallocate(contents_ptr);\n+        }\n         match ty.sty {\n-            ty::TyBox(contents_ty) => {\n-                let contents_ptr = val.read_ptr(&self.memory)?;\n-                self.drop(Value::ByRef(contents_ptr), contents_ty)?;\n-                trace!(\"-deallocating box\");\n-                self.memory.deallocate(contents_ptr)?;\n-            }\n-\n-            // TODO(solson): Implement drop for other relevant types (e.g. aggregates).\n-            _ => {}\n+            ty::TyAdt(adt_def, substs) => {\n+                // FIXME: some structs are represented as ByValPair\n+                let ptr = self.force_allocation(lval)?.to_ptr();\n+                if adt_def.is_univariant() {\n+                    for (i, field_ty) in adt_def.struct_variant().fields.iter().enumerate() {\n+                        let field_ty = self.monomorphize_field_ty(field_ty, substs);\n+                        let offset = self.get_field_offset(ty, i)?.bytes() as isize;\n+                        self.drop(Lvalue::from_ptr(ptr.offset(offset)), field_ty)?;\n+                    }\n+                } else {\n+                    unimplemented!()\n+                }\n+            },\n+            ty::TyTuple(fields) => {\n+                // FIXME: some tuples are represented as ByValPair\n+                let ptr = self.force_allocation(lval)?.to_ptr();\n+                for (i, field_ty) in fields.iter().enumerate() {\n+                    let offset = self.get_field_offset(ty, i)?.bytes() as isize;\n+                    self.drop(Lvalue::from_ptr(ptr.offset(offset)), field_ty)?;\n+                }\n+            },\n+            // other types do not need to process drop\n+            _ => {},\n         }\n \n         Ok(())"}]}