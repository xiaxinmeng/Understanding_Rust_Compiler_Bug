{"sha": "cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNGFiNzZlNGExN2UwZWZjNmI1MDZhZjE1ZmQxZGY2NTRjMDQzZmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-02-28T16:57:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-04T17:27:01Z"}, "message": "Adding missing imports for tests, and gate off others", "tree": {"sha": "f12c8ae2ad1979e973ccf4ef95b1a396a2daa246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f12c8ae2ad1979e973ccf4ef95b1a396a2daa246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "comment_count": 21, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "html_url": "https://github.com/rust-lang/rust/commit/cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc3bee410a6967942d18cef59a781603a7db86e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc3bee410a6967942d18cef59a781603a7db86e4", "html_url": "https://github.com/rust-lang/rust/commit/bc3bee410a6967942d18cef59a781603a7db86e4"}], "stats": {"total": 250, "additions": 141, "deletions": 109}, "files": [{"sha": "26a68e3a1990c2b313c9ae9cbdaf76221e4bf259", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -11,8 +11,8 @@\n \n //! Boolean logic\n \n-use cmp;\n use option::{None, Option, Some};\n+#[cfg(notest)] use cmp;\n \n /// Negation / inverse\n pub pure fn not(v: bool) -> bool { !v }\n@@ -80,7 +80,7 @@ impl cmp::Eq for bool {\n #[test]\n pub fn test_bool_from_str() {\n     do all_values |v| {\n-        assert Some(v) == from_str(bool::to_str(v))\n+        assert Some(v) == from_str(to_str(v))\n     }\n }\n "}, {"sha": "36b03af2d383d97191ec3f13f47ba27974b37600", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -10,13 +10,14 @@\n \n //! Utilities for manipulating the char type\n \n-use cmp::Eq;\n use option::{None, Option, Some};\n use str;\n use u32;\n use uint;\n use unicode;\n \n+#[cfg(notest)] use cmp::Eq;\n+\n /*\n     Lu  Uppercase_Letter    an uppercase letter\n     Ll  Lowercase_Letter    a lowercase letter\n@@ -304,8 +305,8 @@ fn test_to_digit() {\n \n #[test]\n fn test_is_ascii() {\n-   assert str::all(~\"banana\", char::is_ascii);\n-   assert ! str::all(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", char::is_ascii);\n+   assert str::all(~\"banana\", is_ascii);\n+   assert ! str::all(~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", is_ascii);\n }\n \n #[test]"}, {"sha": "4d01c102707172c7f235f02b5c3963a4f32c662d", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -19,6 +19,8 @@ use libc::{c_void, size_t, c_int};\n use ptr;\n use vec;\n \n+#[cfg(test)] use rand;\n+\n extern mod rustrt {\n     unsafe fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,\n                                          src_buf_len: size_t,"}, {"sha": "73af0ad371461f80a95fe15b98d23da05d078128", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -10,11 +10,7 @@\n \n //! Logging\n \n-use cast::transmute;\n-use io;\n use libc;\n-use repr;\n-use vec;\n \n #[nolink]\n extern mod rustrt {\n@@ -48,6 +44,11 @@ pub fn console_off() {\n #[cfg(notest)]\n #[lang=\"log_type\"]\n pub fn log_type<T>(level: u32, object: &T) {\n+    use cast::transmute;\n+    use io;\n+    use repr;\n+    use vec;\n+\n     let bytes = do io::with_bytes_writer |writer| {\n         repr::write_repr(writer, object);\n     };"}, {"sha": "cf2af7e38cc6ba36aee2a0245a2615acba3cd8ad", "filename": "src/libcore/nil.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnil.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -14,6 +14,7 @@ Functions for the unit type.\n \n */\n \n+#[cfg(notest)]\n use cmp::{Eq, Ord};\n \n #[cfg(notest)]"}, {"sha": "5100021b954ab91e5d937021c9e63dabfc4a7a6d", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -11,17 +11,18 @@\n //! Operations and constants for `f32`\n \n use cmath;\n-use cmp;\n use libc::{c_float, c_int};\n use num::NumCast;\n use num::strconv;\n use num;\n-use ops;\n use option::Option;\n use unstable::intrinsics::floorf32;\n use from_str;\n use to_str;\n \n+#[cfg(notest)] use cmp;\n+#[cfg(notest)] use ops;\n+\n pub use cmath::c_float_targ_consts::*;\n \n macro_rules! delegate("}, {"sha": "9470922b881efa7bb294fd327727459d060337d7", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -11,17 +11,18 @@\n //! Operations and constants for `f64`\n \n use cmath;\n-use cmp;\n use libc::{c_double, c_int};\n use num::NumCast;\n use num::strconv;\n use num;\n-use ops;\n use option::Option;\n use unstable::intrinsics::floorf64;\n use to_str;\n use from_str;\n \n+#[cfg(notest)] use cmp;\n+#[cfg(notest)] use ops;\n+\n pub use cmath::c_double_targ_consts::*;\n pub use cmp::{min, max};\n "}, {"sha": "5d912472d7dfe88a12845adac9d41f0b08bcd340", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -20,16 +20,17 @@\n \n // PORT this must match in width according to architecture\n \n-use cmp::{Eq, Ord};\n use f64;\n use num::NumCast;\n use num::strconv;\n use num;\n-use ops;\n use option::{None, Option, Some};\n use to_str;\n use from_str;\n \n+#[cfg(notest)] use cmp::{Eq, Ord};\n+#[cfg(notest)] use ops;\n+\n pub use f64::{add, sub, mul, div, rem, lt, le, eq, ne, ge, gt};\n pub use f64::logarithm;\n pub use f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};"}, {"sha": "c0351e2c619c9fbcd3dd969a054975690f6cd201", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -10,7 +10,6 @@\n \n use T = self::inst::T;\n \n-use cmp::{Eq, Ord};\n use to_str::ToStr;\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};"}, {"sha": "0dbf7403e27517954b621b73334b2f8450da1cd2", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -11,7 +11,6 @@\n use T = self::inst::T;\n use T_SIGNED = self::inst::T_SIGNED;\n \n-use cmp::{Eq, Ord};\n use to_str::ToStr;\n use from_str::FromStr;\n use num::{ToStrRadix, FromStrRadix};\n@@ -20,6 +19,8 @@ use num;\n use option::{None, Option, Some};\n use prelude::*;\n \n+#[cfg(notest)] use cmp::{Eq, Ord};\n+\n pub use cmp::{min, max};\n \n pub const bits : uint = inst::bits;"}, {"sha": "206f8c0f6cab2b95e9829c1f47260da0fade2fdd", "filename": "src/libcore/num/uint-template/uint.rs", "status": "modified", "additions": 44, "deletions": 43, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -143,60 +143,61 @@ pub mod inst {\n \n     #[test]\n     fn test_next_power_of_two() {\n-        assert (uint::next_power_of_two(0u) == 0u);\n-        assert (uint::next_power_of_two(1u) == 1u);\n-        assert (uint::next_power_of_two(2u) == 2u);\n-        assert (uint::next_power_of_two(3u) == 4u);\n-        assert (uint::next_power_of_two(4u) == 4u);\n-        assert (uint::next_power_of_two(5u) == 8u);\n-        assert (uint::next_power_of_two(6u) == 8u);\n-        assert (uint::next_power_of_two(7u) == 8u);\n-        assert (uint::next_power_of_two(8u) == 8u);\n-        assert (uint::next_power_of_two(9u) == 16u);\n-        assert (uint::next_power_of_two(10u) == 16u);\n-        assert (uint::next_power_of_two(11u) == 16u);\n-        assert (uint::next_power_of_two(12u) == 16u);\n-        assert (uint::next_power_of_two(13u) == 16u);\n-        assert (uint::next_power_of_two(14u) == 16u);\n-        assert (uint::next_power_of_two(15u) == 16u);\n-        assert (uint::next_power_of_two(16u) == 16u);\n-        assert (uint::next_power_of_two(17u) == 32u);\n-        assert (uint::next_power_of_two(18u) == 32u);\n-        assert (uint::next_power_of_two(19u) == 32u);\n-        assert (uint::next_power_of_two(20u) == 32u);\n-        assert (uint::next_power_of_two(21u) == 32u);\n-        assert (uint::next_power_of_two(22u) == 32u);\n-        assert (uint::next_power_of_two(23u) == 32u);\n-        assert (uint::next_power_of_two(24u) == 32u);\n-        assert (uint::next_power_of_two(25u) == 32u);\n-        assert (uint::next_power_of_two(26u) == 32u);\n-        assert (uint::next_power_of_two(27u) == 32u);\n-        assert (uint::next_power_of_two(28u) == 32u);\n-        assert (uint::next_power_of_two(29u) == 32u);\n-        assert (uint::next_power_of_two(30u) == 32u);\n-        assert (uint::next_power_of_two(31u) == 32u);\n-        assert (uint::next_power_of_two(32u) == 32u);\n-        assert (uint::next_power_of_two(33u) == 64u);\n-        assert (uint::next_power_of_two(34u) == 64u);\n-        assert (uint::next_power_of_two(35u) == 64u);\n-        assert (uint::next_power_of_two(36u) == 64u);\n-        assert (uint::next_power_of_two(37u) == 64u);\n-        assert (uint::next_power_of_two(38u) == 64u);\n-        assert (uint::next_power_of_two(39u) == 64u);\n+        assert (next_power_of_two(0u) == 0u);\n+        assert (next_power_of_two(1u) == 1u);\n+        assert (next_power_of_two(2u) == 2u);\n+        assert (next_power_of_two(3u) == 4u);\n+        assert (next_power_of_two(4u) == 4u);\n+        assert (next_power_of_two(5u) == 8u);\n+        assert (next_power_of_two(6u) == 8u);\n+        assert (next_power_of_two(7u) == 8u);\n+        assert (next_power_of_two(8u) == 8u);\n+        assert (next_power_of_two(9u) == 16u);\n+        assert (next_power_of_two(10u) == 16u);\n+        assert (next_power_of_two(11u) == 16u);\n+        assert (next_power_of_two(12u) == 16u);\n+        assert (next_power_of_two(13u) == 16u);\n+        assert (next_power_of_two(14u) == 16u);\n+        assert (next_power_of_two(15u) == 16u);\n+        assert (next_power_of_two(16u) == 16u);\n+        assert (next_power_of_two(17u) == 32u);\n+        assert (next_power_of_two(18u) == 32u);\n+        assert (next_power_of_two(19u) == 32u);\n+        assert (next_power_of_two(20u) == 32u);\n+        assert (next_power_of_two(21u) == 32u);\n+        assert (next_power_of_two(22u) == 32u);\n+        assert (next_power_of_two(23u) == 32u);\n+        assert (next_power_of_two(24u) == 32u);\n+        assert (next_power_of_two(25u) == 32u);\n+        assert (next_power_of_two(26u) == 32u);\n+        assert (next_power_of_two(27u) == 32u);\n+        assert (next_power_of_two(28u) == 32u);\n+        assert (next_power_of_two(29u) == 32u);\n+        assert (next_power_of_two(30u) == 32u);\n+        assert (next_power_of_two(31u) == 32u);\n+        assert (next_power_of_two(32u) == 32u);\n+        assert (next_power_of_two(33u) == 64u);\n+        assert (next_power_of_two(34u) == 64u);\n+        assert (next_power_of_two(35u) == 64u);\n+        assert (next_power_of_two(36u) == 64u);\n+        assert (next_power_of_two(37u) == 64u);\n+        assert (next_power_of_two(38u) == 64u);\n+        assert (next_power_of_two(39u) == 64u);\n     }\n \n     #[test]\n     fn test_overflows() {\n+        use uint;\n         assert (uint::max_value > 0u);\n         assert (uint::min_value <= 0u);\n         assert (uint::min_value + uint::max_value + 1u == 0u);\n     }\n \n     #[test]\n     fn test_div() {\n-        assert(uint::div_floor(3u, 4u) == 0u);\n-        assert(uint::div_ceil(3u, 4u)  == 1u);\n-        assert(uint::div_round(3u, 4u) == 1u);\n+        assert(div_floor(3u, 4u) == 0u);\n+        assert(div_ceil(3u, 4u)  == 1u);\n+        assert(div_round(3u, 4u) == 1u);\n     }\n \n     #[test]"}, {"sha": "e5719b599bd80baea04e8982d95d2bf571e01dee", "filename": "src/libcore/option.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -46,6 +46,9 @@ use kinds::Copy;\n use util;\n use num::Zero;\n \n+#[cfg(test)] use ptr;\n+#[cfg(test)] use str;\n+\n /// The option type\n #[deriving_eq]\n pub enum Option<T> {"}, {"sha": "486ce44147a2d5f3e0a33b03b39d71313930ca38", "filename": "src/libcore/owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fowned.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations on unique pointer types\n \n-use cmp::{Eq, Ord};\n+#[cfg(notest)] use cmp::{Eq, Ord};\n \n #[cfg(notest)]\n impl<T:Eq> Eq for ~T {"}, {"sha": "bc2d285ad143e3afd22044ff8618472a3a858b03", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -11,12 +11,15 @@\n //! Unsafe pointer utility functions\n \n use cast;\n-use cmp::{Eq, Ord};\n use libc;\n use libc::{c_void, size_t};\n use unstable::intrinsics::{memmove32,memmove64};\n use sys;\n \n+#[cfg(test)] use vec;\n+#[cfg(test)] use str;\n+#[cfg(notest)] use cmp::{Eq, Ord};\n+\n #[nolink]\n #[abi = \"cdecl\"]\n extern mod libc_ {\n@@ -313,13 +316,13 @@ pub fn test() {\n         let mut v0 = ~[32000u16, 32001u16, 32002u16];\n         let mut v1 = ~[0u16, 0u16, 0u16];\n \n-        ptr::copy_memory(ptr::mut_offset(vec::raw::to_mut_ptr(v1), 1u),\n-                    ptr::offset(vec::raw::to_ptr(v0), 1u), 1u);\n+        copy_memory(mut_offset(vec::raw::to_mut_ptr(v1), 1u),\n+                    offset(vec::raw::to_ptr(v0), 1u), 1u);\n         assert (v1[0] == 0u16 && v1[1] == 32001u16 && v1[2] == 0u16);\n-        ptr::copy_memory(vec::raw::to_mut_ptr(v1),\n-                    ptr::offset(vec::raw::to_ptr(v0), 2u), 1u);\n+        copy_memory(vec::raw::to_mut_ptr(v1),\n+                    offset(vec::raw::to_ptr(v0), 2u), 1u);\n         assert (v1[0] == 32002u16 && v1[1] == 32001u16 && v1[2] == 0u16);\n-        ptr::copy_memory(ptr::mut_offset(vec::raw::to_mut_ptr(v1), 2u),\n+        copy_memory(mut_offset(vec::raw::to_mut_ptr(v1), 2u),\n                     vec::raw::to_ptr(v0), 1u);\n         assert (v1[0] == 32002u16 && v1[1] == 32001u16 && v1[2] == 32000u16);\n     }\n@@ -358,15 +361,15 @@ pub fn test_buf_len() {\n \n #[test]\n pub fn test_is_null() {\n-   let p: *int = ptr::null();\n+   let p: *int = null();\n    assert p.is_null();\n    assert !p.is_not_null();\n \n-   let q = ptr::offset(p, 1u);\n+   let q = offset(p, 1u);\n    assert !q.is_null();\n    assert q.is_not_null();\n \n-   let mp: *mut int = ptr::mut_null();\n+   let mp: *mut int = mut_null();\n    assert mp.is_null();\n    assert !mp.is_not_null();\n "}, {"sha": "d0910e7cefb319b85c89b5c1e1ca681429ca29b7", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -32,6 +32,8 @@ use vec::UnboxedVecRepr;\n use vec::raw::{VecRepr, SliceRepr};\n use vec;\n \n+#[cfg(test)] use io;\n+\n pub use managed::raw::BoxRepr;\n \n /// Helpers\n@@ -575,7 +577,7 @@ struct P {a: int, b: float}\n fn test_repr() {\n \n     fn exact_test<T>(t: &T, e:&str) {\n-        let s : &str = io::with_str_writer(|w| repr::write_repr(w, t));\n+        let s : &str = io::with_str_writer(|w| write_repr(w, t));\n         if s != e {\n             error!(\"expected '%s', got '%s'\",\n                    e, s);"}, {"sha": "80d7b4fffdbc2a899b2cda5bb18a6b573abe8038", "filename": "src/libcore/run.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -451,7 +451,6 @@ pub fn waitpid(pid: pid_t) -> int {\n #[cfg(test)]\n mod tests {\n     use debug;\n-    use io::WriterUtil;\n     use option::{None, Some};\n     use os;\n     use run::{readclose, writeclose};"}, {"sha": "471e1ae53963378750a6497008935a0dde2d2b3a", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -20,7 +20,7 @@\n use at_vec;\n use cast;\n use char;\n-use cmp::{Eq, Ord, TotalOrd, Ordering, Less, Equal, Greater};\n+use cmp::{TotalOrd, Ordering, Less, Equal, Greater};\n use libc;\n use option::{None, Option, Some};\n use ptr;\n@@ -29,6 +29,8 @@ use u8;\n use uint;\n use vec;\n \n+#[cfg(notest)] use cmp::{Eq, Ord};\n+\n /*\n Section: Creating a string\n */"}, {"sha": "ae53081c2dbf2f75f0487a597dbf8dca3ba245bd", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -10,10 +10,11 @@\n \n //! Operations on tuples\n \n-use cmp::{Eq, Ord};\n use kinds::Copy;\n use vec;\n \n+#[cfg(notest)] use cmp::{Eq, Ord};\n+\n pub trait CopyableTuple<T, U> {\n     pure fn first() -> T;\n     pure fn second() -> U;"}, {"sha": "dcec424f29000f41f18655b5a1ea4265c8e1d544", "filename": "src/libcore/unstable.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -306,13 +306,8 @@ pub impl<T:Owned> Exclusive<T> {\n \n #[cfg(test)]\n pub mod tests {\n-    use core::option::{None, Some};\n-\n-    use cell::Cell;\n     use comm;\n-    use option;\n     use super::exclusive;\n-    use result;\n     use task;\n     use uint;\n "}, {"sha": "63e7613714d6ae263928edc3716420badb830243", "filename": "src/libcore/unstable/at_exit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Funstable%2Fat_exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Funstable%2Fat_exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fat_exit.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -15,6 +15,8 @@ use vec;\n use rand;\n use libc::{c_void, size_t};\n \n+#[cfg(test)] use uint;\n+\n /**\n Register a function to be run during runtime shutdown.\n "}, {"sha": "9a8b9bdde023dccad026ec762069546eef42d3a8", "filename": "src/libcore/unstable/finally.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Ffinally.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -25,6 +25,8 @@ do || {\n \n use ops::Drop;\n \n+#[cfg(test)] use task::failing;\n+\n pub trait Finally<T> {\n     fn finally(&self, dtor: &fn()) -> T;\n }"}, {"sha": "a0c2955673de1bcc6aeda5656ce05a55f8f9580f", "filename": "src/libcore/unstable/global.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fglobal.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -37,8 +37,10 @@ use unstable::intrinsics::atomic_cxchg;\n use hashmap::linear::LinearMap;\n use sys::Closure;\n \n-#[cfg(test)]\n-use private::{SharedMutableState, shared_mutable_state};\n+#[cfg(test)] use unstable::{SharedMutableState, shared_mutable_state};\n+#[cfg(test)] use unstable::get_shared_immutable_state;\n+#[cfg(test)] use task::spawn;\n+#[cfg(test)] use uint;\n \n pub type GlobalDataKey<T> = &fn(v: T);\n "}, {"sha": "742eee7dc27607be83ac8af7ea55f37b315ab925", "filename": "src/libcore/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -103,6 +103,7 @@ pub fn unreachable() -> ! {\n \n #[cfg(test)]\n mod tests {\n+    use option::{None, Some};\n     use util::{NonCopyable, id, replace, swap};\n \n     #[test]"}, {"sha": "ce51bb9229e301ad304f76072a725977234605cc", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -208,6 +208,8 @@ mod test {\n     use back::rpath::{get_relative_to, get_rpath_relative_to_output};\n     #[cfg(test)]\n     use back::rpath::{minimize_rpaths, rpaths_to_flags};\n+    #[cfg(test)]\n+    use driver::session;\n \n     #[test]\n     pub fn test_rpaths_to_flags() {"}, {"sha": "e03e6bc19b31a3b49c94a62e0c6183a883fda006", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -344,13 +344,10 @@ pub fn sess_os_to_meta_os(os: os) -> metadata::loader::os {\n \n #[cfg(test)]\n pub mod test {\n-    use core::prelude::*;\n-\n     use driver::session::{bin_crate, building_library, lib_crate};\n     use driver::session::{unknown_crate};\n \n     use syntax::ast;\n-    use syntax::ast_util;\n     use syntax::codemap;\n \n     pub fn make_crate_type_attr(+t: ~str) -> ast::attribute {"}, {"sha": "ccdd73053e054e5217b6e94f31b598ee163f793e", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -41,6 +41,9 @@ use syntax::fold;\n use syntax;\n use writer = std::ebml::writer;\n \n+#[cfg(test)] use syntax::parse;\n+#[cfg(test)] use syntax::print::pprust;\n+\n // Auxiliary maps of things to be encoded\n pub struct Maps {\n     mutbl_map: middle::borrowck::mutbl_map,\n@@ -1226,6 +1229,8 @@ fn mk_ctxt() -> fake_ext_ctxt {\n \n #[cfg(test)]\n fn roundtrip(in_item: Option<@ast::item>) {\n+    use std::prettyprint;\n+\n     let in_item = in_item.get();\n     let bytes = do io::with_bytes_writer |wr| {\n         let ebml_w = writer::Encoder(wr);"}, {"sha": "1d1a5209cae38a08f58b9482cc251e0433f9baa8", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -34,10 +34,8 @@ mod test {\n \n     pub fn parse_attributes(source: ~str) -> ~[ast::attribute] {\n         use syntax::parse;\n-        use syntax::parse::parser;\n         use syntax::parse::attr::parser_attr;\n         use syntax::codemap;\n-        use syntax::diagnostic;\n \n         let parse_sess = syntax::parse::new_parse_sess(None);\n         let parser = parse::new_parser_from_source_str("}, {"sha": "4ea67c1bff6e70ff024d7f22fe74779c155e3820", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -11,6 +11,8 @@\n use core::prelude::*;\n \n use doc;\n+#[cfg(test)] use extract;\n+#[cfg(test)] use parse;\n \n use core::vec;\n "}, {"sha": "cb92e078fdd43433b6f2f01daa3c60c6e2f11718", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -22,6 +22,10 @@ use markdown_writer::WriterFactory;\n use pass::Pass;\n use sort_pass;\n \n+#[cfg(test)] use config;\n+#[cfg(test)] use markdown_writer;\n+#[cfg(test)] use page_pass;\n+\n use core::cell::Cell;\n use core::str;\n use core::vec;"}, {"sha": "acd456e77be7da6084d68d5ac009c8581885328d", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -220,7 +220,7 @@ pub fn make_filename(\n \n #[test]\n fn should_use_markdown_file_name_based_off_crate() {\n-    let config = Config {\n+    let config = config::Config {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::Markdown,\n         output_style: config::DocPerCrate,\n@@ -234,7 +234,7 @@ fn should_use_markdown_file_name_based_off_crate() {\n \n #[test]\n fn should_name_html_crate_file_name_index_html_when_doc_per_mod() {\n-    let config = Config {\n+    let config = config::Config {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::PandocHtml,\n         output_style: config::DocPerMod,\n@@ -248,7 +248,7 @@ fn should_name_html_crate_file_name_index_html_when_doc_per_mod() {\n \n #[test]\n fn should_name_mod_file_names_by_path() {\n-    let config = Config {\n+    let config = config::Config {\n         output_dir: Path(\"output/dir\"),\n         output_format: config::PandocHtml,\n         output_style: config::DocPerMod,"}, {"sha": "b4d0cfe7c938f0aecd8848f7dd1a39822a20ba16", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -14,6 +14,8 @@ use astsrv;\n use doc;\n use time;\n \n+#[cfg(test)] use extract;\n+\n use core::vec;\n \n /// A single operation on the document model"}, {"sha": "2663ca8c8769adddd009f4710d2f14a16cdc8aa4", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -19,6 +19,8 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n+#[cfg(test)] use extract;\n+\n use syntax::ast;\n \n pub fn mk_pass() -> Pass {"}, {"sha": "3755fd706c0599002282e32deb7ebdf80c9b1b1d", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -63,6 +63,8 @@ fn is_hidden(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n \n #[test]\n fn should_prune_hidden_items() {\n+    use core::vec;\n+\n     let doc = test::mk_doc(~\"#[doc(hidden)] mod a { }\");\n     assert vec::is_empty(doc.cratemod().mods())\n }"}, {"sha": "b20faf44fa4e47a41474bca6c2878e60f9538569", "filename": "src/librustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_name_pass.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -24,6 +24,9 @@ pub fn mk_pass() -> Pass {\n \n #[test]\n fn test() {\n+    use astsrv;\n+    use extract;\n+\n     let source = ~\"mod z { } fn y() { }\";\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv.clone(), ~\"\");"}, {"sha": "8b39dcb1f8f9def6b280b673a4049be697f9deba", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -38,6 +38,9 @@ pub fn mk_pass() -> Pass {\n \n #[test]\n fn test() {\n+    use astsrv;\n+    use extract;\n+\n     let source =\n         ~\"mod imod { } \\\n          extern mod inmod {"}, {"sha": "c1e58f30c7a452c7a3e96ed769f30911fc343116", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -17,6 +17,8 @@ use fold;\n use pass::Pass;\n use util::NominalOp;\n \n+#[cfg(test)] use extract;\n+\n use std::sort;\n \n pub type ItemLtEqOp = @pure fn(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;"}, {"sha": "eb63d9a52d08354a61e5f27679979312948a157b", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -26,6 +26,8 @@ pub fn mk_pass() -> Pass {\n \n #[test]\n fn should_trim_text() {\n+    use core::option::Some;\n+\n     let doc = test::mk_doc(~\"#[doc = \\\" desc \\\"] \\\n                             mod m {\n                             }\");"}, {"sha": "c7b50bf89083a099c24184e8e174ad2d0604d579", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -273,7 +273,7 @@ pub impl &Arena {\n \n #[test]\n fn test_arena_destructors() {\n-    let arena = arena::Arena();\n+    let arena = Arena();\n     for uint::range(0, 10) |i| {\n         // Arena allocate something with drop glue to make sure it\n         // doesn't leak.\n@@ -286,7 +286,7 @@ fn test_arena_destructors() {\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_arena_destructors_fail() {\n-    let arena = arena::Arena();\n+    let arena = Arena();\n     // Put some stuff in the arena.\n     for uint::range(0, 10) |i| {\n         // Arena allocate something with drop glue to make sure it"}, {"sha": "564d34f73d7f83935cc335ded5245982d8da7048", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -635,8 +635,8 @@ mod test {\n     use flatpipes::pod;\n     use flatpipes::serial;\n     use io_util::BufReader;\n-    use net::tcp::TcpSocketBuf;\n     use flatpipes::{BytePort, FlatChan, FlatPort};\n+    use net::tcp::TcpSocketBuf;\n \n     use core::int;\n     use core::io::{BytesReader, BytesWriter};\n@@ -762,7 +762,6 @@ mod test {\n \n         use core::cell::Cell;\n         use net::ip;\n-        use net::tcp::TcpSocket;\n         use net::tcp;\n         use uv;\n "}, {"sha": "4e851005de5d0b48c4219d3c979c63738f6679a8", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -639,7 +639,6 @@ pub mod groups {\n mod tests {\n     use core::prelude::*;\n \n-    use opt = getopts;\n     use getopts::groups::OptGroup;\n     use getopts::*;\n "}, {"sha": "18f38e074c7cf528faf6bae3187512ed42bb17d2", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -819,7 +819,6 @@ mod tests {\n     use net_url::*;\n \n     use core::hashmap::linear::LinearMap;\n-    use core::str;\n \n     #[test]\n     pub fn test_url_parse() {"}, {"sha": "47948cc3ead893f695c7330f9c569ff5fe6138a8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -1334,15 +1334,15 @@ pub enum inlined_item {\n \n #[cfg(test)]\n mod test {\n-    use std;\n-    use codemap::*;\n-    use super::*;\n-\n     //are asts encodable?\n \n     // it looks like this *will* be a compiler bug, after\n     // I get deriving_eq for crates into incoming :)\n     /*\n+    use std;\n+    use codemap::*;\n+    use super::*;\n+\n     #[test] fn check_asts_encodable() {\n         let bogus_span = span {lo:BytePos(10),\n                                hi:BytePos(20),"}, {"sha": "644afaff37c5c3c2b7835bafd28e8f7dfeec7557", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -1206,14 +1206,7 @@ fn mk_enum_deser_body(\n mod test {\n     use std::serialize::Encodable;\n     use std::serialize::Encoder;\n-    use core::dvec::*;\n     use util::testing::*;\n-    use core::io;\n-    use core::str;\n-    use core::option::Option;\n-    use core::option::Some;\n-    use core::option::None;\n-    use std;\n \n     // just adding the ones I want to test, for now:\n     #[deriving_eq]"}, {"sha": "e9a3f47ab7b78e3b9b0151e9b0ddeb2b6295b3c3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -500,7 +500,6 @@ impl <K: Eq + Hash + IterBytes ,V: Copy> MapChain<K,V>{\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n     use super::MapChain;\n     use util::testing::check_equal;\n     use core::hashmap::linear::LinearMap;"}, {"sha": "b53523f78a4228981dd277b20568dbbafe962b0b", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -10,7 +10,6 @@\n \n use core::prelude::*;\n \n-use ast::tt_delim;\n use ast;\n use codemap::span;\n use ext::base::ext_ctxt;"}, {"sha": "524f9b48dd5d8fbf4ef9556c449f9cc3104274f0", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4ab76e4a17e0efc6b506af15fd1df654c043ff/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=cb4ab76e4a17e0efc6b506af15fd1df654c043ff", "patch": "@@ -779,7 +779,6 @@ pub mod test {\n     use core::option::None;\n     use diagnostic;\n     use parse::token;\n-    use util::interner;\n     use util::testing::{check_equal, check_equal_ptr};\n \n     // represents a testing reader (incl. both reader and interner)"}]}