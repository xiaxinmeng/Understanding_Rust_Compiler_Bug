{"sha": "df55b7c28fdcf96c6eed4356b9c5706496b25438", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNTViN2MyOGZkY2Y5NmM2ZWVkNDM1NmI5YzU3MDY0OTZiMjU0Mzg=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-06-09T14:04:44Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-08-16T19:18:34Z"}, "message": "resolve suggestions should use `create::` when enabled\n\nfixes #51212", "tree": {"sha": "61fe5f3511769f91df0376d3a8f5a4f7653b77a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61fe5f3511769f91df0376d3a8f5a4f7653b77a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df55b7c28fdcf96c6eed4356b9c5706496b25438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df55b7c28fdcf96c6eed4356b9c5706496b25438", "html_url": "https://github.com/rust-lang/rust/commit/df55b7c28fdcf96c6eed4356b9c5706496b25438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df55b7c28fdcf96c6eed4356b9c5706496b25438/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5590423e6ceb048dd7d792382e960d66b7615d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5590423e6ceb048dd7d792382e960d66b7615d2", "html_url": "https://github.com/rust-lang/rust/commit/b5590423e6ceb048dd7d792382e960d66b7615d2"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "96f92299fd67d40d9c81a5ad6ab3f2c839accd2d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df55b7c28fdcf96c6eed4356b9c5706496b25438/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df55b7c28fdcf96c6eed4356b9c5706496b25438/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=df55b7c28fdcf96c6eed4356b9c5706496b25438", "patch": "@@ -4488,7 +4488,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         for UseError { mut err, candidates, node_id, better } in self.use_injections.drain(..) {\n             let (span, found_use) = UsePlacementFinder::check(krate, node_id);\n             if !candidates.is_empty() {\n-                show_candidates(&mut err, span, &candidates, better, found_use);\n+                show_candidates(&mut err, span, &candidates, better, found_use, self.session.features_untracked().crate_in_paths);\n             }\n             err.emit();\n         }\n@@ -4702,7 +4702,8 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n                    span: Option<Span>,\n                    candidates: &[ImportSuggestion],\n                    better: bool,\n-                   found_use: bool) {\n+                   found_use: bool,\n+                   crate_in_paths: bool) {\n \n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n@@ -4726,7 +4727,12 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n             } else {\n                 \"\\n\"\n             };\n-            *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n+            let crate_prefix = if crate_in_paths {\n+                \"crate::\"\n+            } else {\n+                \"\"\n+            };\n+            *candidate = format!(\"use {}{};\\n{}\", crate_prefix, candidate, additional_newline);\n         }\n \n         err.span_suggestions(span, &msg, path_strings);"}, {"sha": "b368f0cb4b6471ef5280f84c97cdcd590ef0c7a5", "filename": "src/test/ui/crate-in-paths.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df55b7c28fdcf96c6eed4356b9c5706496b25438/src%2Ftest%2Fui%2Fcrate-in-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df55b7c28fdcf96c6eed4356b9c5706496b25438/src%2Ftest%2Fui%2Fcrate-in-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-in-paths.rs?ref=df55b7c28fdcf96c6eed4356b9c5706496b25438", "patch": "@@ -0,0 +1,11 @@\n+#![feature(crate_visibility_modifier)]\n+#![feature(crate_in_paths)]\n+\n+mod bar {\n+    crate struct Foo;\n+}\n+\n+fn main() {\n+    Foo;\n+    //~^ ERROR cannot find value `Foo` in this scope [E0425]\n+}"}, {"sha": "207f9599230207bbeef303eceda5f718bd53fa8c", "filename": "src/test/ui/crate-in-paths.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df55b7c28fdcf96c6eed4356b9c5706496b25438/src%2Ftest%2Fui%2Fcrate-in-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df55b7c28fdcf96c6eed4356b9c5706496b25438/src%2Ftest%2Fui%2Fcrate-in-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-in-paths.stderr?ref=df55b7c28fdcf96c6eed4356b9c5706496b25438", "patch": "@@ -0,0 +1,13 @@\n+error[E0425]: cannot find value `Foo` in this scope\n+  --> $DIR/crate-in-paths.rs:9:5\n+   |\n+LL |     Foo;\n+   |     ^^^ not found in this scope\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use crate::bar::Foo;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}