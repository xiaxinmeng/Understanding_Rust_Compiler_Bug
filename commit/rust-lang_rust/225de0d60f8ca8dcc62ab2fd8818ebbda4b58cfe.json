{"sha": "225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNWRlMGQ2MGY4Y2E4ZGNjNjJhYjJmZDg4MThlYmJkYTRiNThjZmU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-11-18T00:49:09Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-11-18T07:43:38Z"}, "message": "Windows and OS X fallout", "tree": {"sha": "afd65a72f97755ed467590b5a9934da862a5dab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afd65a72f97755ed467590b5a9934da862a5dab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "html_url": "https://github.com/rust-lang/rust/commit/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d46f7adb536a44975622890e166c7cdfc698c259", "url": "https://api.github.com/repos/rust-lang/rust/commits/d46f7adb536a44975622890e166c7cdfc698c259", "html_url": "https://github.com/rust-lang/rust/commit/d46f7adb536a44975622890e166c7cdfc698c259"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "acb0a721370485d4ba42a9f84d2830b9f802a021", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "patch": "@@ -140,7 +140,7 @@ pub fn getcwd() -> Path {\n             panic!();\n         }\n     }\n-    Path::new(String::from_utf16(::str::truncate_utf16_at_nul(buf))\n+    Path::new(String::from_utf16(::str::truncate_utf16_at_nul(&buf))\n               .expect(\"GetCurrentDirectoryW returned invalid UTF-16\"))\n }\n \n@@ -2065,12 +2065,12 @@ mod tests {\n             join_paths(input).unwrap().as_slice() == output.as_bytes()\n         }\n \n-        assert!(test_eq([], \"\"));\n-        assert!(test_eq([r\"c:\\windows\", r\"c:\\\"],\n+        assert!(test_eq(&[], \"\"));\n+        assert!(test_eq(&[r\"c:\\windows\", r\"c:\\\"],\n                         r\"c:\\windows;c:\\\"));\n-        assert!(test_eq([\"\", r\"c:\\windows\", \"\", \"\", r\"c:\\\", \"\"],\n+        assert!(test_eq(&[\"\", r\"c:\\windows\", \"\", \"\", r\"c:\\\", \"\"],\n                         r\";c:\\windows;;;c:\\;\"));\n-        assert!(test_eq([r\"c:\\te;st\", r\"c:\\\"],\n+        assert!(test_eq(&[r\"c:\\te;st\", r\"c:\\\"],\n                         r#\"\"c:\\te;st\";c:\\\"#));\n         assert!(join_paths(&[r#\"c:\\te\"st\"#]).is_err());\n     }"}, {"sha": "43a79770fbb84fb5bc7487e243c3004ca3aef353", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "patch": "@@ -298,12 +298,12 @@ mod imp {\n     impl Rng for OsRng {\n         fn next_u32(&mut self) -> u32 {\n             let mut v = [0u8, .. 4];\n-            self.fill_bytes(v);\n+            self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n         fn next_u64(&mut self) -> u64 {\n             let mut v = [0u8, .. 8];\n-            self.fill_bytes(v);\n+            self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n         fn fill_bytes(&mut self, v: &mut [u8]) {"}, {"sha": "ea43111b2b2f7fc89e350966849720b73e94f7a0", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "patch": "@@ -999,7 +999,7 @@ mod imp {\n                     None => try!(w.write(bytes[..bytes.len()-1])),\n                 }\n             }\n-            try!(w.write(['\\n' as u8]));\n+            try!(w.write(&['\\n' as u8]));\n         }\n \n         Ok(())"}, {"sha": "b881eb2d4955cf15b5f6985df4a6d874088fe08f", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "patch": "@@ -263,7 +263,7 @@ pub fn readdir(p: &Path) -> IoResult<Vec<Path>> {\n             let mut more_files = 1 as libc::BOOL;\n             while more_files != 0 {\n                 {\n-                    let filename = str::truncate_utf16_at_nul(wfd.cFileName);\n+                    let filename = str::truncate_utf16_at_nul(&wfd.cFileName);\n                     match String::from_utf16(filename) {\n                         Some(filename) => paths.push(Path::new(filename)),\n                         None => {"}, {"sha": "aa43b42e74643ea1144d14a0637ded88b52a7c79", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "patch": "@@ -76,7 +76,7 @@ pub fn error_string(errnum: i32) -> String {\n             return format!(\"OS Error {} (FormatMessageW() returned error {})\", errnum, fm_err);\n         }\n \n-        let msg = String::from_utf16(::str::truncate_utf16_at_nul(buf));\n+        let msg = String::from_utf16(::str::truncate_utf16_at_nul(&buf));\n         match msg {\n             Some(msg) => format!(\"OS Error {}: {}\", errnum, msg),\n             None => format!(\"OS Error {} (FormatMessageW() returned invalid UTF-16)\", errnum),"}, {"sha": "e38202302fb0eb58a11a5fe26be5581a3f912e05", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "patch": "@@ -395,7 +395,7 @@ impl UnixStream {\n         loop {\n             // Process a timeout if one is pending\n             let wait_succeeded = await(self.handle(), self.read_deadline,\n-                                       [overlapped.hEvent]);\n+                                       &[overlapped.hEvent]);\n \n             let ret = unsafe {\n                 libc::GetOverlappedResult(self.handle(),\n@@ -459,7 +459,7 @@ impl UnixStream {\n                 }\n                 // Process a timeout if one is pending\n                 let wait_succeeded = await(self.handle(), self.write_deadline,\n-                                           [overlapped.hEvent]);\n+                                           &[overlapped.hEvent]);\n                 let ret = unsafe {\n                     libc::GetOverlappedResult(self.handle(),\n                                               &mut overlapped,\n@@ -660,8 +660,8 @@ impl UnixAcceptor {\n             if err == libc::ERROR_IO_PENDING as libc::DWORD {\n                 // Process a timeout if one is pending\n                 let wait_succeeded = await(handle, self.deadline,\n-                                           [self.inner.abort.handle(),\n-                                            overlapped.hEvent]);\n+                                           &[self.inner.abort.handle(),\n+                                             overlapped.hEvent]);\n \n                 // This will block until the overlapped I/O is completed. The\n                 // timeout was previously handled, so this will either block in"}, {"sha": "3fb5ee34356fefb683e777fe81484a37c891380d", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "patch": "@@ -487,24 +487,24 @@ mod tests {\n         }\n \n         assert_eq!(\n-            test_wrapper(\"prog\", [\"aaa\", \"bbb\", \"ccc\"]),\n+            test_wrapper(\"prog\", &[\"aaa\", \"bbb\", \"ccc\"]),\n             \"prog aaa bbb ccc\".to_string()\n         );\n \n         assert_eq!(\n-            test_wrapper(\"C:\\\\Program Files\\\\blah\\\\blah.exe\", [\"aaa\"]),\n+            test_wrapper(\"C:\\\\Program Files\\\\blah\\\\blah.exe\", &[\"aaa\"]),\n             \"\\\"C:\\\\Program Files\\\\blah\\\\blah.exe\\\" aaa\".to_string()\n         );\n         assert_eq!(\n-            test_wrapper(\"C:\\\\Program Files\\\\test\", [\"aa\\\"bb\"]),\n+            test_wrapper(\"C:\\\\Program Files\\\\test\", &[\"aa\\\"bb\"]),\n             \"\\\"C:\\\\Program Files\\\\test\\\" aa\\\\\\\"bb\".to_string()\n         );\n         assert_eq!(\n-            test_wrapper(\"echo\", [\"a b c\"]),\n+            test_wrapper(\"echo\", &[\"a b c\"]),\n             \"echo \\\"a b c\\\"\".to_string()\n         );\n         assert_eq!(\n-            test_wrapper(\"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\", []),\n+            test_wrapper(\"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\", &[]),\n             \"\\u03c0\\u042f\\u97f3\\u00e6\\u221e\".to_string()\n         );\n     }"}, {"sha": "34fbe1c9a956b97bab1d365df27a16be220f9e35", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=225de0d60f8ca8dcc62ab2fd8818ebbda4b58cfe", "patch": "@@ -45,7 +45,7 @@ fn main() {\n                 }\n             };\n             stream.read_byte();\n-            stream.write([2]);\n+            stream.write(&[2]);\n         }\n     });\n     let addr = rx.recv();\n@@ -57,9 +57,9 @@ fn main() {\n             match TcpStream::connect(addr) {\n                 Ok(stream) => {\n                     let mut stream = stream;\n-                    stream.write([1]);\n+                    stream.write(&[1]);\n                     let mut buf = [0];\n-                    stream.read(buf);\n+                    stream.read(&mut buf);\n                 },\n                 Err(e) => debug!(\"{}\", e)\n             }"}]}