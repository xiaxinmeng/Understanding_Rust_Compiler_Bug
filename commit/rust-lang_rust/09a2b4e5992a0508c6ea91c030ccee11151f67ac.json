{"sha": "09a2b4e5992a0508c6ea91c030ccee11151f67ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YTJiNGU1OTkyYTA1MDhjNmVhOTFjMDMwY2NlZTExMTUxZjY3YWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-27T19:20:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-28T19:32:26Z"}, "message": "librustc: Make methods private if the impl is private", "tree": {"sha": "1f2ef67e3def0f64226cc3220a0534bda13d425b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f2ef67e3def0f64226cc3220a0534bda13d425b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09a2b4e5992a0508c6ea91c030ccee11151f67ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09a2b4e5992a0508c6ea91c030ccee11151f67ac", "html_url": "https://github.com/rust-lang/rust/commit/09a2b4e5992a0508c6ea91c030ccee11151f67ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09a2b4e5992a0508c6ea91c030ccee11151f67ac/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "107bf96ff0dcc427c1842ffb232d29afaea53ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/107bf96ff0dcc427c1842ffb232d29afaea53ca5", "html_url": "https://github.com/rust-lang/rust/commit/107bf96ff0dcc427c1842ffb232d29afaea53ca5"}], "stats": {"total": 76, "additions": 63, "deletions": 13}, "files": [{"sha": "1fef4ad42f1de83ab1e2ae4381a3eea2cf3cfbe6", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/09a2b4e5992a0508c6ea91c030ccee11151f67ac/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a2b4e5992a0508c6ea91c030ccee11151f67ac/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=09a2b4e5992a0508c6ea91c030ccee11151f67ac", "patch": "@@ -92,17 +92,6 @@ priv impl<A> DVec<A> {\n         }\n     }\n \n-    #[inline(always)]\n-    fn check_out<B>(f: &fn(v: ~[A]) -> B) -> B {\n-        unsafe {\n-            let mut data = cast::reinterpret_cast(&null::<()>());\n-            data <-> self.data;\n-            let data_ptr: *() = cast::reinterpret_cast(&data);\n-            if data_ptr.is_null() { fail!(~\"Recursive use of dvec\"); }\n-            return f(data);\n-        }\n-    }\n-\n     #[inline(always)]\n     fn give_back(data: ~[A]) {\n         unsafe {\n@@ -118,6 +107,18 @@ priv impl<A> DVec<A> {\n // almost nothing works without the copy bound due to limitations\n // around closures.\n pub impl<A> DVec<A> {\n+    // FIXME (#3758): This should not need to be public.\n+    #[inline(always)]\n+    fn check_out<B>(f: &fn(v: ~[A]) -> B) -> B {\n+        unsafe {\n+            let mut data = cast::reinterpret_cast(&null::<()>());\n+            data <-> self.data;\n+            let data_ptr: *() = cast::reinterpret_cast(&data);\n+            if data_ptr.is_null() { fail!(~\"Recursive use of dvec\"); }\n+            return f(data);\n+        }\n+    }\n+\n     /// Reserves space for N elements\n     fn reserve(count: uint) {\n         vec::reserve(&mut self.data, count)"}, {"sha": "712037720d5bf5f0f7bd3e4f8a569bdaa836ddc3", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/09a2b4e5992a0508c6ea91c030ccee11151f67ac/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a2b4e5992a0508c6ea91c030ccee11151f67ac/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=09a2b4e5992a0508c6ea91c030ccee11151f67ac", "patch": "@@ -25,7 +25,7 @@ use core::util::ignore;\n use syntax::ast::{def_variant, expr_field, expr_method_call, expr_struct};\n use syntax::ast::{expr_unary, ident, item_struct, item_enum, item_impl};\n use syntax::ast::{item_trait, local_crate, node_id, pat_struct, private};\n-use syntax::ast::{provided, required};\n+use syntax::ast::{provided, public, required};\n use syntax::ast;\n use syntax::ast_map::{node_item, node_method};\n use syntax::ast_map;\n@@ -107,7 +107,41 @@ pub fn check_crate(tcx: ty::ctxt,\n                 if method_id.crate == local_crate {\n                     match tcx.items.find(&method_id.node) {\n                         Some(node_method(method, impl_id, _)) => {\n-                            if method.vis == private &&\n+                            let mut is_private = false;\n+                            if method.vis == private {\n+                                is_private = true;\n+                            } else {\n+                                // Look up the enclosing impl.\n+                                if impl_id.crate != local_crate {\n+                                    tcx.sess.span_bug(span,\n+                                                      ~\"local method isn't \\\n+                                                        in local impl?!\");\n+                                }\n+\n+                                match tcx.items.find(&impl_id.node) {\n+                                    Some(node_item(item, _)) => {\n+                                        match item.node {\n+                                            item_impl(_, None, _, _) \n+                                                    if item.vis != public => {\n+                                                is_private = true;\n+                                            }\n+                                            _ => {}\n+                                        }\n+                                    }\n+                                    Some(_) => {\n+                                        tcx.sess.span_bug(span,\n+                                                          ~\"impl wasn't an \\\n+                                                            item?!\");\n+                                    }\n+                                    None => {\n+                                        tcx.sess.span_bug(span,\n+                                                          ~\"impl wasn't in \\\n+                                                            AST map?!\");\n+                                    }\n+                                }\n+                            }\n+\n+                            if is_private &&\n                                     (impl_id.crate != local_crate ||\n                                      !privileged_items\n                                      .contains(&(impl_id.node))) {"}, {"sha": "7b64623e16c3e193fd03bd260f0bd47cabb4d8f5", "filename": "src/test/compile-fail/private-method-inherited.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09a2b4e5992a0508c6ea91c030ccee11151f67ac/src%2Ftest%2Fcompile-fail%2Fprivate-method-inherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09a2b4e5992a0508c6ea91c030ccee11151f67ac/src%2Ftest%2Fcompile-fail%2Fprivate-method-inherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method-inherited.rs?ref=09a2b4e5992a0508c6ea91c030ccee11151f67ac", "patch": "@@ -0,0 +1,15 @@\n+// Tests that inherited visibility applies to methods.\n+\n+mod a {\n+    pub struct Foo;\n+\n+    impl Foo {\n+        fn f(self) {}\n+    }\n+}\n+\n+fn main() {\n+    let x = a::Foo;\n+    x.f();  //~ ERROR method `f` is private\n+}\n+"}]}