{"sha": "bb1e9846b26663e5a504d1293a6c14b1aef9b487", "node_id": "C_kwDOAAsO6NoAKGJiMWU5ODQ2YjI2NjYzZTVhNTA0ZDEyOTNhNmMxNGIxYWVmOWI0ODc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-16T06:10:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-16T06:10:22Z"}, "message": "Rollup merge of #108103 - matthiaskrgr:lice, r=compiler-errors\n\nbe nice and don't slice\n\nThese are already slices, no need to slice them again", "tree": {"sha": "3146addecac0b72e329c895ed0b4f7f9391d03c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3146addecac0b72e329c895ed0b4f7f9391d03c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb1e9846b26663e5a504d1293a6c14b1aef9b487", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7cjOCRBK7hj4Ov3rIwAApUMIACq3p6gzZDTgx1CC1DsD3RAi\nIs3ypS6r1xk7qlSoFkSgYrw6Jac64WGje2ZKgS3ZYmxhMp/5D+y9CLUIZjW1MvvM\nuwYueX+vGqUgGSCTMZbxmj4NHzUwhOyXqHOsKhReYzXkpalsVQCAmfXFfKtruoDp\nlTx4FMkTTWYqC2h7ZRFwm5+sQXu9LU6/j/t31ZDGCI5ydPn6KVnH3lP5h6bhuV4B\nvPllLv/L8C8b7OA4ukfmrWoj25lQTk/IK5igLyqtsrmHOQHiNhwq3DX24iwyWi22\nbzTqZiSMFtXs+LQ1UTzSAIptwoDpPJ71Kt/XiihgzO6gfS7YKR0KeGr1E4XXyUo=\n=vnI/\n-----END PGP SIGNATURE-----\n", "payload": "tree 3146addecac0b72e329c895ed0b4f7f9391d03c5\nparent 7bde7b73f1cc0540dd579fa052b913598f33ed93\nparent e17cd0c01961e58e551958f5878b88141dc5aefb\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676527822 +0530\ncommitter GitHub <noreply@github.com> 1676527822 +0530\n\nRollup merge of #108103 - matthiaskrgr:lice, r=compiler-errors\n\nbe nice and don't slice\n\nThese are already slices, no need to slice them again\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1e9846b26663e5a504d1293a6c14b1aef9b487", "html_url": "https://github.com/rust-lang/rust/commit/bb1e9846b26663e5a504d1293a6c14b1aef9b487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb1e9846b26663e5a504d1293a6c14b1aef9b487/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bde7b73f1cc0540dd579fa052b913598f33ed93", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bde7b73f1cc0540dd579fa052b913598f33ed93", "html_url": "https://github.com/rust-lang/rust/commit/7bde7b73f1cc0540dd579fa052b913598f33ed93"}, {"sha": "e17cd0c01961e58e551958f5878b88141dc5aefb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e17cd0c01961e58e551958f5878b88141dc5aefb", "html_url": "https://github.com/rust-lang/rust/commit/e17cd0c01961e58e551958f5878b88141dc5aefb"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "46dc4141e66193956d9c7ac1daa9d08bc0b9be04", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb1e9846b26663e5a504d1293a6c14b1aef9b487/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb1e9846b26663e5a504d1293a6c14b1aef9b487/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=bb1e9846b26663e5a504d1293a6c14b1aef9b487", "patch": "@@ -1970,7 +1970,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             ) = &qself.kind {\n                                 // If the path segment already has type params, we want to overwrite\n                                 // them.\n-                                match &path.segments[..] {\n+                                match &path.segments {\n                                     // `segment` is the previous to last element on the path,\n                                     // which would normally be the `enum` itself, while the last\n                                     // `_` `PathSegment` corresponds to the variant.\n@@ -2670,7 +2670,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // `Self` in trait or type alias.\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments.iter(), |err| {\n-                    if let [hir::PathSegment { args: Some(args), ident, .. }] = &path.segments[..] {\n+                    if let [hir::PathSegment { args: Some(args), ident, .. }] = &path.segments {\n                         err.span_suggestion_verbose(\n                             ident.span.shrink_to_hi().to(args.span_ext),\n                             \"the `Self` type doesn't accept type parameters\","}]}