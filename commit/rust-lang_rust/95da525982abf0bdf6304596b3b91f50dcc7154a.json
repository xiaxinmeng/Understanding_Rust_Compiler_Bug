{"sha": "95da525982abf0bdf6304596b3b91f50dcc7154a", "node_id": "C_kwDOAAsO6NoAKDk1ZGE1MjU5ODJhYmYwYmRmNjMwNDU5NmIzYjkxZjUwZGNjNzE1NGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-07T14:39:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-07T14:39:07Z"}, "message": "Rollup merge of #105343 - nbdd0121:hir, r=fee1-dead\n\nSimplify attribute handling in rustc_ast_lowering\n\nGiven that attributes is stored in a separate BTreeMap, it's not necessary to pass it in when constructing `hir::Expr`. We can just construct `hir::Expr` and then call `self.lower_attrs` later if it needs attributes.\n\nAs most desugaring code don't use attributes, this allows some code cleanup.", "tree": {"sha": "b27cd3fe4e12d13737f9ce1a4bc7275234957a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b27cd3fe4e12d13737f9ce1a4bc7275234957a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95da525982abf0bdf6304596b3b91f50dcc7154a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjkKWLCRBK7hj4Ov3rIwAA6KsIABnv02zJuD3W4swTRdg5yEZN\nnGYo2b9tgTi5oaw5o5nVm5JHU4ZG2sKwKX4pjEwnr/hDHNQyrDc36Ap+1EFNnThu\nM1z5hz32pfYZgHHTOZPJzrSDXEBDO5EXg6JatyCCF8xWWneTzHXDnFMdq8okYiK/\nb0w8DqvO/V6kRq8MWOYZP00X/zzk6QIpRAsh1PGvY3fGbUWl8eUZ1xsDNkFVSDZY\nQ/D0Q4LT0HJLeEg0H/O7/LAcA7SF7ol9klLSgtnKA+rF3GGCZMilVIfn8qcFSqzk\n+EpYkfp2pHCVFBh3HvR5tV6pbtFUOmhbTegR0pfPFpgInhjRmwrq8exowSRM9Qo=\n=GP7T\n-----END PGP SIGNATURE-----\n", "payload": "tree b27cd3fe4e12d13737f9ce1a4bc7275234957a17\nparent 3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08\nparent c559cf62c21f9e4f804fae633f6d0499be7fae1c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670423947 +0100\ncommitter GitHub <noreply@github.com> 1670423947 +0100\n\nRollup merge of #105343 - nbdd0121:hir, r=fee1-dead\n\nSimplify attribute handling in rustc_ast_lowering\n\nGiven that attributes is stored in a separate BTreeMap, it's not necessary to pass it in when constructing `hir::Expr`. We can just construct `hir::Expr` and then call `self.lower_attrs` later if it needs attributes.\n\nAs most desugaring code don't use attributes, this allows some code cleanup.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95da525982abf0bdf6304596b3b91f50dcc7154a", "html_url": "https://github.com/rust-lang/rust/commit/95da525982abf0bdf6304596b3b91f50dcc7154a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95da525982abf0bdf6304596b3b91f50dcc7154a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08", "html_url": "https://github.com/rust-lang/rust/commit/3bcfa4c45940eb9d41493d9d64c0f1dbe7f14f08"}, {"sha": "c559cf62c21f9e4f804fae633f6d0499be7fae1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c559cf62c21f9e4f804fae633f6d0499be7fae1c", "html_url": "https://github.com/rust-lang/rust/commit/c559cf62c21f9e4f804fae633f6d0499be7fae1c"}], "stats": {"total": 151, "additions": 45, "deletions": 106}, "files": [{"sha": "24e2985cf567a3838ee13e168d5d944c7078e6f5", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 39, "deletions": 94, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/95da525982abf0bdf6304596b3b91f50dcc7154a/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95da525982abf0bdf6304596b3b91f50dcc7154a/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=95da525982abf0bdf6304596b3b91f50dcc7154a", "patch": "@@ -436,18 +436,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let lhs = self.lower_cond(lhs);\n                 let rhs = self.lower_cond(rhs);\n \n-                self.arena.alloc(self.expr(\n-                    cond.span,\n-                    hir::ExprKind::Binary(op, lhs, rhs),\n-                    AttrVec::new(),\n-                ))\n+                self.arena.alloc(self.expr(cond.span, hir::ExprKind::Binary(op, lhs, rhs)))\n             }\n             ExprKind::Let(..) => self.lower_expr(cond),\n             _ => {\n                 let cond = self.lower_expr(cond);\n                 let reason = DesugaringKind::CondTemporary;\n                 let span_block = self.mark_span_with_reason(reason, cond.span, None);\n-                self.expr_drop_temps(span_block, cond, AttrVec::new())\n+                self.expr_drop_temps(span_block, cond)\n             }\n         }\n     }\n@@ -477,12 +473,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> hir::ExprKind<'hir> {\n         let lowered_cond = self.with_loop_condition_scope(|t| t.lower_cond(cond));\n         let then = self.lower_block_expr(body);\n-        let expr_break = self.expr_break(span, AttrVec::new());\n+        let expr_break = self.expr_break(span);\n         let stmt_break = self.stmt_expr(span, expr_break);\n         let else_blk = self.block_all(span, arena_vec![self; stmt_break], None);\n-        let else_expr = self.arena.alloc(self.expr_block(else_blk, AttrVec::new()));\n+        let else_expr = self.arena.alloc(self.expr_block(else_blk));\n         let if_kind = hir::ExprKind::If(lowered_cond, self.arena.alloc(then), Some(else_expr));\n-        let if_expr = self.expr(span, if_kind, AttrVec::new());\n+        let if_expr = self.expr(span, if_kind);\n         let block = self.block_expr(self.arena.alloc(if_expr));\n         let span = self.lower_span(span.with_hi(cond.span.hi()));\n         let opt_label = self.lower_label(opt_label);\n@@ -538,12 +534,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         expr: &'hir hir::Expr<'hir>,\n         overall_span: Span,\n     ) -> &'hir hir::Expr<'hir> {\n-        let constructor = self.arena.alloc(self.expr_lang_item_path(\n-            method_span,\n-            lang_item,\n-            AttrVec::new(),\n-            None,\n-        ));\n+        let constructor = self.arena.alloc(self.expr_lang_item_path(method_span, lang_item, None));\n         self.expr_call(overall_span, constructor, std::slice::from_ref(expr))\n     }\n \n@@ -715,12 +706,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // E0700 in src/test/ui/self/self_lifetime-async.rs\n \n         // `future::identity_future`:\n-        let identity_future = self.expr_lang_item_path(\n-            unstable_span,\n-            hir::LangItem::IdentityFuture,\n-            AttrVec::new(),\n-            None,\n-        );\n+        let identity_future =\n+            self.expr_lang_item_path(unstable_span, hir::LangItem::IdentityFuture, None);\n \n         // `future::identity_future(generator)`:\n         hir::ExprKind::Call(self.arena.alloc(identity_future), arena_vec![self; generator])\n@@ -817,7 +804,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let break_x = self.with_loop_scope(loop_node_id, move |this| {\n                 let expr_break =\n                     hir::ExprKind::Break(this.lower_loop_destination(None), Some(x_expr));\n-                this.arena.alloc(this.expr(gen_future_span, expr_break, AttrVec::new()))\n+                this.arena.alloc(this.expr(gen_future_span, expr_break))\n             });\n             self.arm(ready_pat, break_x)\n         };\n@@ -850,17 +837,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let yield_expr = self.expr(\n                 span,\n                 hir::ExprKind::Yield(unit, hir::YieldSource::Await { expr: Some(expr_hir_id) }),\n-                AttrVec::new(),\n             );\n             let yield_expr = self.arena.alloc(yield_expr);\n \n             if let Some(task_context_hid) = self.task_context {\n                 let lhs = self.expr_ident(span, task_context_ident, task_context_hid);\n-                let assign = self.expr(\n-                    span,\n-                    hir::ExprKind::Assign(lhs, yield_expr, self.lower_span(span)),\n-                    AttrVec::new(),\n-                );\n+                let assign =\n+                    self.expr(span, hir::ExprKind::Assign(lhs, yield_expr, self.lower_span(span)));\n                 self.stmt_expr(span, assign)\n             } else {\n                 // Use of `await` outside of an async context. Return `yield_expr` so that we can\n@@ -1044,7 +1027,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::AsyncGeneratorKind::Closure,\n                     |this| this.with_new_scopes(|this| this.lower_expr_mut(body)),\n                 );\n-                this.expr(fn_decl_span, async_body, AttrVec::new())\n+                this.expr(fn_decl_span, async_body)\n             });\n             body_id\n         });\n@@ -1304,7 +1287,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let ident = self.expr_ident(lhs.span, ident, binding);\n         let assign =\n             hir::ExprKind::Assign(self.lower_expr(lhs), ident, self.lower_span(eq_sign_span));\n-        let expr = self.expr(lhs.span, assign, AttrVec::new());\n+        let expr = self.expr(lhs.span, assign);\n         assignments.push(self.stmt_expr(lhs.span, expr));\n         pat\n     }\n@@ -1345,8 +1328,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let e2 = self.lower_expr_mut(e2);\n         let fn_path =\n             hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, self.lower_span(span), None);\n-        let fn_expr =\n-            self.arena.alloc(self.expr(span, hir::ExprKind::Path(fn_path), AttrVec::new()));\n+        let fn_expr = self.arena.alloc(self.expr(span, hir::ExprKind::Path(fn_path)));\n         hir::ExprKind::Call(fn_expr, arena_vec![self; e1, e2])\n     }\n \n@@ -1518,8 +1500,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         // `None => break`\n         let none_arm = {\n-            let break_expr =\n-                self.with_loop_scope(e.id, |this| this.expr_break_alloc(for_span, AttrVec::new()));\n+            let break_expr = self.with_loop_scope(e.id, |this| this.expr_break_alloc(for_span));\n             let pat = self.pat_none(for_span);\n             self.arm(pat, break_expr)\n         };\n@@ -1528,7 +1509,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let some_arm = {\n             let some_pat = self.pat_some(pat_span, pat);\n             let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n-            let body_expr = self.arena.alloc(self.expr_block(body_block, AttrVec::new()));\n+            let body_expr = self.arena.alloc(self.expr_block(body_block));\n             self.arm(some_pat, body_expr)\n         };\n \n@@ -1591,7 +1572,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // surrounding scope of the `match` since the `match` is not a terminating scope.\n         //\n         // Also, add the attributes to the outer returned expr node.\n-        self.expr_drop_temps_mut(for_span, match_expr, e.attrs.clone())\n+        let expr = self.expr_drop_temps_mut(for_span, match_expr);\n+        self.lower_attrs(expr.hir_id, &e.attrs);\n+        expr\n     }\n \n     /// Desugar `ExprKind::Try` from: `<expr>?` into:\n@@ -1646,12 +1629,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let continue_arm = {\n             let val_ident = Ident::with_dummy_span(sym::val);\n             let (val_pat, val_pat_nid) = self.pat_ident(span, val_ident);\n-            let val_expr = self.arena.alloc(self.expr_ident_with_attrs(\n-                span,\n-                val_ident,\n-                val_pat_nid,\n-                attrs.clone(),\n-            ));\n+            let val_expr = self.expr_ident(span, val_ident, val_pat_nid);\n+            self.lower_attrs(val_expr.hir_id, &attrs);\n             let continue_pat = self.pat_cf_continue(unstable_span, val_pat);\n             self.arm(continue_pat, val_expr)\n         };\n@@ -1677,15 +1656,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         hir::Destination { label: None, target_id },\n                         Some(from_residual_expr),\n                     ),\n-                    attrs,\n                 ))\n             } else {\n-                self.arena.alloc(self.expr(\n-                    try_span,\n-                    hir::ExprKind::Ret(Some(from_residual_expr)),\n-                    attrs,\n-                ))\n+                self.arena.alloc(self.expr(try_span, hir::ExprKind::Ret(Some(from_residual_expr))))\n             };\n+            self.lower_attrs(ret_expr.hir_id, &attrs);\n \n             let break_pat = self.pat_cf_break(try_span, residual_local);\n             self.arm(break_pat, ret_expr)\n@@ -1750,18 +1725,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         &mut self,\n         span: Span,\n         expr: &'hir hir::Expr<'hir>,\n-        attrs: AttrVec,\n     ) -> &'hir hir::Expr<'hir> {\n-        self.arena.alloc(self.expr_drop_temps_mut(span, expr, attrs))\n+        self.arena.alloc(self.expr_drop_temps_mut(span, expr))\n     }\n \n     pub(super) fn expr_drop_temps_mut(\n         &mut self,\n         span: Span,\n         expr: &'hir hir::Expr<'hir>,\n-        attrs: AttrVec,\n     ) -> hir::Expr<'hir> {\n-        self.expr(span, hir::ExprKind::DropTemps(expr), attrs)\n+        self.expr(span, hir::ExprKind::DropTemps(expr))\n     }\n \n     fn expr_match(\n@@ -1771,29 +1744,25 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         arms: &'hir [hir::Arm<'hir>],\n         source: hir::MatchSource,\n     ) -> hir::Expr<'hir> {\n-        self.expr(span, hir::ExprKind::Match(arg, arms, source), AttrVec::new())\n+        self.expr(span, hir::ExprKind::Match(arg, arms, source))\n     }\n \n-    fn expr_break(&mut self, span: Span, attrs: AttrVec) -> hir::Expr<'hir> {\n+    fn expr_break(&mut self, span: Span) -> hir::Expr<'hir> {\n         let expr_break = hir::ExprKind::Break(self.lower_loop_destination(None), None);\n-        self.expr(span, expr_break, attrs)\n+        self.expr(span, expr_break)\n     }\n \n-    fn expr_break_alloc(&mut self, span: Span, attrs: AttrVec) -> &'hir hir::Expr<'hir> {\n-        let expr_break = self.expr_break(span, attrs);\n+    fn expr_break_alloc(&mut self, span: Span) -> &'hir hir::Expr<'hir> {\n+        let expr_break = self.expr_break(span);\n         self.arena.alloc(expr_break)\n     }\n \n     fn expr_mut_addr_of(&mut self, span: Span, e: &'hir hir::Expr<'hir>) -> hir::Expr<'hir> {\n-        self.expr(\n-            span,\n-            hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Mut, e),\n-            AttrVec::new(),\n-        )\n+        self.expr(span, hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Mut, e))\n     }\n \n     fn expr_unit(&mut self, sp: Span) -> &'hir hir::Expr<'hir> {\n-        self.arena.alloc(self.expr(sp, hir::ExprKind::Tup(&[]), AttrVec::new()))\n+        self.arena.alloc(self.expr(sp, hir::ExprKind::Tup(&[])))\n     }\n \n     fn expr_call_mut(\n@@ -1802,7 +1771,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         e: &'hir hir::Expr<'hir>,\n         args: &'hir [hir::Expr<'hir>],\n     ) -> hir::Expr<'hir> {\n-        self.expr(span, hir::ExprKind::Call(e, args), AttrVec::new())\n+        self.expr(span, hir::ExprKind::Call(e, args))\n     }\n \n     fn expr_call(\n@@ -1821,8 +1790,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         args: &'hir [hir::Expr<'hir>],\n         hir_id: Option<hir::HirId>,\n     ) -> hir::Expr<'hir> {\n-        let path =\n-            self.arena.alloc(self.expr_lang_item_path(span, lang_item, AttrVec::new(), hir_id));\n+        let path = self.arena.alloc(self.expr_lang_item_path(span, lang_item, hir_id));\n         self.expr_call_mut(span, path, args)\n     }\n \n@@ -1840,13 +1808,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         &mut self,\n         span: Span,\n         lang_item: hir::LangItem,\n-        attrs: AttrVec,\n         hir_id: Option<hir::HirId>,\n     ) -> hir::Expr<'hir> {\n         self.expr(\n             span,\n             hir::ExprKind::Path(hir::QPath::LangItem(lang_item, self.lower_span(span), hir_id)),\n-            attrs,\n         )\n     }\n \n@@ -1860,20 +1826,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     pub(super) fn expr_ident_mut(\n-        &mut self,\n-        sp: Span,\n-        ident: Ident,\n-        binding: hir::HirId,\n-    ) -> hir::Expr<'hir> {\n-        self.expr_ident_with_attrs(sp, ident, binding, AttrVec::new())\n-    }\n-\n-    fn expr_ident_with_attrs(\n         &mut self,\n         span: Span,\n         ident: Ident,\n         binding: hir::HirId,\n-        attrs: AttrVec,\n     ) -> hir::Expr<'hir> {\n         let hir_id = self.next_id();\n         let res = Res::Local(binding);\n@@ -1886,7 +1842,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }),\n         ));\n \n-        self.expr(span, expr_path, attrs)\n+        self.expr(span, expr_path)\n     }\n \n     fn expr_unsafe(&mut self, expr: &'hir hir::Expr<'hir>) -> hir::Expr<'hir> {\n@@ -1905,32 +1861,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }),\n                 None,\n             ),\n-            AttrVec::new(),\n         )\n     }\n \n     fn expr_block_empty(&mut self, span: Span) -> &'hir hir::Expr<'hir> {\n         let blk = self.block_all(span, &[], None);\n-        let expr = self.expr_block(blk, AttrVec::new());\n+        let expr = self.expr_block(blk);\n         self.arena.alloc(expr)\n     }\n \n-    pub(super) fn expr_block(\n-        &mut self,\n-        b: &'hir hir::Block<'hir>,\n-        attrs: AttrVec,\n-    ) -> hir::Expr<'hir> {\n-        self.expr(b.span, hir::ExprKind::Block(b, None), attrs)\n+    pub(super) fn expr_block(&mut self, b: &'hir hir::Block<'hir>) -> hir::Expr<'hir> {\n+        self.expr(b.span, hir::ExprKind::Block(b, None))\n     }\n \n-    pub(super) fn expr(\n-        &mut self,\n-        span: Span,\n-        kind: hir::ExprKind<'hir>,\n-        attrs: AttrVec,\n-    ) -> hir::Expr<'hir> {\n+    pub(super) fn expr(&mut self, span: Span, kind: hir::ExprKind<'hir>) -> hir::Expr<'hir> {\n         let hir_id = self.next_id();\n-        self.lower_attrs(hir_id, &attrs);\n         hir::Expr { hir_id, kind, span: self.lower_span(span) }\n     }\n "}, {"sha": "d73d6d3918ea618dde2c3bbaa77e0954c73f5627", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95da525982abf0bdf6304596b3b91f50dcc7154a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95da525982abf0bdf6304596b3b91f50dcc7154a/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=95da525982abf0bdf6304596b3b91f50dcc7154a", "patch": "@@ -796,7 +796,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     /// Construct `ExprKind::Err` for the given `span`.\n     pub(crate) fn expr_err(&mut self, span: Span) -> hir::Expr<'hir> {\n-        self.expr(span, hir::ExprKind::Err, AttrVec::new())\n+        self.expr(span, hir::ExprKind::Err)\n     }\n \n     fn lower_impl_item(&mut self, i: &AssocItem) -> &'hir hir::ImplItem<'hir> {\n@@ -1151,11 +1151,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     // Transform into `drop-temps { <user-body> }`, an expression:\n                     let desugared_span =\n                         this.mark_span_with_reason(DesugaringKind::Async, user_body.span, None);\n-                    let user_body = this.expr_drop_temps(\n-                        desugared_span,\n-                        this.arena.alloc(user_body),\n-                        AttrVec::new(),\n-                    );\n+                    let user_body =\n+                        this.expr_drop_temps(desugared_span, this.arena.alloc(user_body));\n \n                     // As noted above, create the final block like\n                     //\n@@ -1172,14 +1169,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         Some(user_body),\n                     );\n \n-                    this.expr_block(body, AttrVec::new())\n+                    this.expr_block(body)\n                 },\n             );\n \n-            (\n-                this.arena.alloc_from_iter(parameters),\n-                this.expr(body.span, async_expr, AttrVec::new()),\n-            )\n+            (this.arena.alloc_from_iter(parameters), this.expr(body.span, async_expr))\n         })\n     }\n "}, {"sha": "07558ca075d3c022521fc73ba082a59b047149ac", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95da525982abf0bdf6304596b3b91f50dcc7154a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95da525982abf0bdf6304596b3b91f50dcc7154a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=95da525982abf0bdf6304596b3b91f50dcc7154a", "patch": "@@ -2291,7 +2291,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// has no attributes and is not targeted by a `break`.\n     fn lower_block_expr(&mut self, b: &Block) -> hir::Expr<'hir> {\n         let block = self.lower_block(b, false);\n-        self.expr_block(block, AttrVec::new())\n+        self.expr_block(block)\n     }\n \n     fn lower_array_length(&mut self, c: &AnonConst) -> hir::ArrayLen {"}]}