{"sha": "e2ab2885c262d5993ec3de4b4ccb6ffd52783f56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYWIyODg1YzI2MmQ1OTkzZWMzZGU0YjRjY2I2ZmZkNTI3ODNmNTY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-05-01T10:15:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-30T16:55:33Z"}, "message": "Mark allocations as mutable when necessary", "tree": {"sha": "b1860b789e874ab8c1549a6f33216ecd2c0ffe1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1860b789e874ab8c1549a6f33216ecd2c0ffe1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2ab2885c262d5993ec3de4b4ccb6ffd52783f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ab2885c262d5993ec3de4b4ccb6ffd52783f56", "html_url": "https://github.com/rust-lang/rust/commit/e2ab2885c262d5993ec3de4b4ccb6ffd52783f56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2ab2885c262d5993ec3de4b4ccb6ffd52783f56/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa6a4acd787b87e1ca19fb27da79ce072b9725ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6a4acd787b87e1ca19fb27da79ce072b9725ab", "html_url": "https://github.com/rust-lang/rust/commit/aa6a4acd787b87e1ca19fb27da79ce072b9725ab"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "5c760a467c63190c5a7f917a322d9bba9830e674", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e2ab2885c262d5993ec3de4b4ccb6ffd52783f56/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ab2885c262d5993ec3de4b4ccb6ffd52783f56/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=e2ab2885c262d5993ec3de4b4ccb6ffd52783f56", "patch": "@@ -132,7 +132,7 @@ pub(crate) fn trans_const_value<'tcx>(\n                     let base_addr = match alloc_kind {\n                         Some(GlobalAlloc::Memory(alloc)) => {\n                             fx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n-                            let data_id = data_id_for_alloc_id(fx.module, ptr.alloc_id, alloc.align);\n+                            let data_id = data_id_for_alloc_id(fx.module, ptr.alloc_id, alloc.align, alloc.mutability);\n                             let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             #[cfg(debug_assertions)]\n                             fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n@@ -182,7 +182,7 @@ fn pointer_for_allocation<'tcx>(\n ) -> crate::pointer::Pointer {\n     let alloc_id = fx.tcx.create_memory_alloc(alloc);\n     fx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n-    let data_id = data_id_for_alloc_id(fx.module, alloc_id, alloc.align);\n+    let data_id = data_id_for_alloc_id(fx.module, alloc_id, alloc.align, alloc.mutability);\n \n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n@@ -195,12 +195,13 @@ fn data_id_for_alloc_id<B: Backend>(\n     module: &mut Module<B>,\n     alloc_id: AllocId,\n     align: Align,\n+    mutability: rustc_hir::Mutability,\n ) -> DataId {\n     module\n         .declare_data(\n             &format!(\"__alloc_{}\", alloc_id.0),\n             Linkage::Local,\n-            false,\n+            mutability == rustc_hir::Mutability::Mut,\n             false,\n             Some(align.bytes() as u8),\n         )\n@@ -271,7 +272,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                     GlobalAlloc::Memory(alloc) => alloc,\n                     GlobalAlloc::Function(_) | GlobalAlloc::Static(_) => unreachable!(),\n                 };\n-                let data_id = data_id_for_alloc_id(module, alloc_id, alloc.align);\n+                let data_id = data_id_for_alloc_id(module, alloc_id, alloc.align, alloc.mutability);\n                 (data_id, alloc, None)\n             }\n             TodoItem::Static(def_id) => {\n@@ -333,9 +334,9 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n                     data_ctx.write_function_addr(offset.bytes() as u32, local_func_id);\n                     continue;\n                 }\n-                GlobalAlloc::Memory(_) => {\n+                GlobalAlloc::Memory(target_alloc) => {\n                     cx.todo.push(TodoItem::Alloc(reloc));\n-                    data_id_for_alloc_id(module, reloc, alloc.align)\n+                    data_id_for_alloc_id(module, reloc, target_alloc.align, target_alloc.mutability)\n                 }\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL) {"}]}