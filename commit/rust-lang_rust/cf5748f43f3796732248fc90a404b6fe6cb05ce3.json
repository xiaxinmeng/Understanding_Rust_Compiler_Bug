{"sha": "cf5748f43f3796732248fc90a404b6fe6cb05ce3", "node_id": "C_kwDOAAsO6NoAKGNmNTc0OGY0M2YzNzk2NzMyMjQ4ZmM5MGE0MDRiNmZlNmNiMDVjZTM", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-07T01:55:13Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-05-07T02:32:27Z"}, "message": "Make `AnonConst` in asm_consts generic", "tree": {"sha": "5c8e236a5c0bd941ac855ee311a7338e20b3fb55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c8e236a5c0bd941ac855ee311a7338e20b3fb55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf5748f43f3796732248fc90a404b6fe6cb05ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5748f43f3796732248fc90a404b6fe6cb05ce3", "html_url": "https://github.com/rust-lang/rust/commit/cf5748f43f3796732248fc90a404b6fe6cb05ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf5748f43f3796732248fc90a404b6fe6cb05ce3/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77652b9ef3fc98e2df0e260efedb80aa68c08c06", "url": "https://api.github.com/repos/rust-lang/rust/commits/77652b9ef3fc98e2df0e260efedb80aa68c08c06", "html_url": "https://github.com/rust-lang/rust/commit/77652b9ef3fc98e2df0e260efedb80aa68c08c06"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "d083c872d2c65e165b1b5e9f417e369b8cf10bce", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf5748f43f3796732248fc90a404b6fe6cb05ce3/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf5748f43f3796732248fc90a404b6fe6cb05ce3/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=cf5748f43f3796732248fc90a404b6fe6cb05ce3", "patch": "@@ -1558,6 +1558,18 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                     Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) => {\n                         Some(tcx.typeck_root_def_id(def_id))\n                     }\n+                    // Exclude `GlobalAsm` here which cannot have generics.\n+                    Node::Expr(&Expr { kind: ExprKind::InlineAsm(asm), .. })\n+                        if asm.operands.iter().any(|(op, _op_sp)| match op {\n+                            hir::InlineAsmOperand::Const { anon_const }\n+                            | hir::InlineAsmOperand::SymFn { anon_const } => {\n+                                anon_const.hir_id == hir_id\n+                            }\n+                            _ => false,\n+                        }) =>\n+                    {\n+                        Some(parent_def_id.to_def_id())\n+                    }\n                     _ => None,\n                 }\n             }"}]}