{"sha": "2590bc64fe6413135626e51de8df1c5cac07a346", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OTBiYzY0ZmU2NDEzMTM1NjI2ZTUxZGU4ZGYxYzVjYWMwN2EzNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T19:07:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-03T19:07:45Z"}, "message": "Auto merge of #1614 - RalfJung:raw-retag, r=RalfJung\n\nStacked Borrows: test raw-ref-to-field with raw ptr tracking\n\nAdds a test for https://github.com/rust-lang/rust/pull/78597 (blocked on that landing first)", "tree": {"sha": "6dc8ec273f38535764a2dd4c71266da6a05439a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dc8ec273f38535764a2dd4c71266da6a05439a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2590bc64fe6413135626e51de8df1c5cac07a346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2590bc64fe6413135626e51de8df1c5cac07a346", "html_url": "https://github.com/rust-lang/rust/commit/2590bc64fe6413135626e51de8df1c5cac07a346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2590bc64fe6413135626e51de8df1c5cac07a346/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a2cfbfc0a6029944fa87372da6870e147961187", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2cfbfc0a6029944fa87372da6870e147961187", "html_url": "https://github.com/rust-lang/rust/commit/9a2cfbfc0a6029944fa87372da6870e147961187"}, {"sha": "571b48cc47a7a4826f16766a4668168dd090a6f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/571b48cc47a7a4826f16766a4668168dd090a6f8", "html_url": "https://github.com/rust-lang/rust/commit/571b48cc47a7a4826f16766a4668168dd090a6f8"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "578ca0251c5e4c15d9b34df4453444159a9c398e", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2590bc64fe6413135626e51de8df1c5cac07a346/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2590bc64fe6413135626e51de8df1c5cac07a346/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2590bc64fe6413135626e51de8df1c5cac07a346", "patch": "@@ -411,7 +411,7 @@ Violations of [Stacked Borrows] found that are likely bugs (but Stacked Borrows\n * [TiKV creating overlapping mutable reference and raw pointer](https://github.com/tikv/tikv/pull/7709)\n * [Windows `Env` iterator using a raw pointer outside its valid memory area](https://github.com/rust-lang/rust/pull/70479)\n * [`VecDeque::iter_mut` creating overlapping mutable references](https://github.com/rust-lang/rust/issues/74029)\n-* [Standard library `SipHasher` using a raw pointer outside its valid memory area](https://github.com/rust-lang/rust/pull/78484)\n+* [Various standard library aliasing issues involving raw pointers](https://github.com/rust-lang/rust/pull/78602)\n \n ## License\n "}, {"sha": "efb6b94d3b40ff13f01374b25565073adea2a747", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2590bc64fe6413135626e51de8df1c5cac07a346/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/2590bc64fe6413135626e51de8df1c5cac07a346/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=2590bc64fe6413135626e51de8df1c5cac07a346", "patch": "@@ -1 +1 @@\n-a53fb30e3bf2655b0563da6d561c23cda5f3ec11\n+5cdf5b882da9e8b7c73b5cadeb7745cb68f6ff63"}, {"sha": "47f29992c459d05b4097cd4ec57068b36cf11655", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2590bc64fe6413135626e51de8df1c5cac07a346/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2590bc64fe6413135626e51de8df1c5cac07a346/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=2590bc64fe6413135626e51de8df1c5cac07a346", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zmiri-track-raw-pointers\n+// ignore-windows (FIXME: tracking raw pointers does not work on Windows)\n #![feature(new_uninit)]\n #![feature(get_mut_unchecked)]\n "}, {"sha": "efba0da1b93586c2f21e46fe76b158735633bcf6", "filename": "tests/run-pass/stacked-borrows/int-to-ptr.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2590bc64fe6413135626e51de8df1c5cac07a346/tests%2Frun-pass%2Fstacked-borrows%2Fint-to-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2590bc64fe6413135626e51de8df1c5cac07a346/tests%2Frun-pass%2Fstacked-borrows%2Fint-to-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows%2Fint-to-ptr.rs?ref=2590bc64fe6413135626e51de8df1c5cac07a346", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    ref_raw_int_raw();\n+}\n+\n+// Just to make sure that casting a ref to raw, to int and back to raw\n+// and only then using it works. This rules out ideas like \"do escape-to-raw lazily\";\n+// after casting to int and back, we lost the tag that could have let us do that.\n+fn ref_raw_int_raw() {\n+    let mut x = 3;\n+    let xref = &mut x;\n+    let xraw = xref as *mut i32 as usize as *mut i32;\n+    assert_eq!(unsafe { *xraw }, 3);\n+}"}, {"sha": "ad1877fc019bc2e98a3ab4fe7a50db5688044beb", "filename": "tests/run-pass/stacked-borrows/stacked-borrows.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2590bc64fe6413135626e51de8df1c5cac07a346/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2590bc64fe6413135626e51de8df1c5cac07a346/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs?ref=2590bc64fe6413135626e51de8df1c5cac07a346", "patch": "@@ -1,8 +1,12 @@\n+// compile-flags: -Zmiri-track-raw-pointers\n+// ignore-windows (FIXME: tracking raw pointers does not work on Windows)\n+#![feature(raw_ref_macros)]\n+use std::ptr;\n+    \n // Test various stacked-borrows-related things.\n fn main() {\n     read_does_not_invalidate1();\n     read_does_not_invalidate2();\n-    ref_raw_int_raw();\n     mut_raw_then_mut_shr();\n     mut_shr_then_mut_raw();\n     mut_raw_mut();\n@@ -12,6 +16,7 @@ fn main() {\n     two_raw();\n     shr_and_raw();\n     disjoint_mutable_subborrows();\n+    raw_ref_to_part();\n }\n \n // Make sure that reading from an `&mut` does, like reborrowing to `&`,\n@@ -37,16 +42,6 @@ fn read_does_not_invalidate2() {\n     assert_eq!(*foo(&mut (1, 2)), 2);\n }\n \n-// Just to make sure that casting a ref to raw, to int and back to raw\n-// and only then using it works. This rules out ideas like \"do escape-to-raw lazily\";\n-// after casting to int and back, we lost the tag that could have let us do that.\n-fn ref_raw_int_raw() {\n-    let mut x = 3;\n-    let xref = &mut x;\n-    let xraw = xref as *mut i32 as usize as *mut i32;\n-    assert_eq!(unsafe { *xraw }, 3);\n-}\n-\n // Escape a mut to raw, then share the same mut and use the share, then the raw.\n // That should work.\n fn mut_raw_then_mut_shr() {\n@@ -162,3 +157,22 @@ fn disjoint_mutable_subborrows() {\n     a.push_str(\" world\");\n     eprintln!(\"{:?} {:?}\", a, b);\n }\n+\n+fn raw_ref_to_part() {\n+    struct Part {\n+        _lame: i32,\n+    }\n+\n+    #[repr(C)]\n+    struct Whole {\n+        part: Part,\n+        extra: i32,\n+    }\n+\n+    let it = Box::new(Whole { part: Part { _lame: 0 }, extra: 42 });\n+    let whole = ptr::raw_mut!(*Box::leak(it));\n+    let part = unsafe { ptr::raw_mut!((*whole).part) };\n+    let typed = unsafe { &mut *(part as *mut Whole) };\n+    assert!(typed.extra == 42);\n+    drop(unsafe { Box::from_raw(whole) });\n+}"}, {"sha": "72ab973b0f08f80069f903b7389328255efd37da", "filename": "tests/run-pass/thread-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2590bc64fe6413135626e51de8df1c5cac07a346/tests%2Frun-pass%2Fthread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2590bc64fe6413135626e51de8df1c5cac07a346/tests%2Frun-pass%2Fthread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fthread-local.rs?ref=2590bc64fe6413135626e51de8df1c5cac07a346", "patch": "@@ -58,7 +58,7 @@ fn main() {\n         // Initialize the keys we use to check destructor ordering\n         for (key, global) in KEYS.iter_mut().zip(GLOBALS.iter_mut()) {\n             *key = create(Some(mem::transmute(dtor as unsafe extern fn(*mut u64))));\n-            set(*key, global as *const _ as *mut _);\n+            set(*key, global as *mut _ as *mut u8);\n         }\n \n         // Initialize cannary"}]}