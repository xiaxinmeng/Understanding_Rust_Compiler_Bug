{"sha": "a28f9ba52651798b0a17f7f4fb83e927200594f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOGY5YmE1MjY1MTc5OGIwYTE3ZjdmNGZiODNlOTI3MjAwNTk0ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-27T08:04:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-27T08:04:33Z"}, "message": "auto merge of #7361 : brson/rust/incoming, r=brson", "tree": {"sha": "fbe012d31f1e762b96e3f1634f079f339c6b45d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbe012d31f1e762b96e3f1634f079f339c6b45d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a28f9ba52651798b0a17f7f4fb83e927200594f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a28f9ba52651798b0a17f7f4fb83e927200594f5", "html_url": "https://github.com/rust-lang/rust/commit/a28f9ba52651798b0a17f7f4fb83e927200594f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a28f9ba52651798b0a17f7f4fb83e927200594f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1e09d6f1faa6e4d7d4d19123d1633fce370e145", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e09d6f1faa6e4d7d4d19123d1633fce370e145", "html_url": "https://github.com/rust-lang/rust/commit/f1e09d6f1faa6e4d7d4d19123d1633fce370e145"}, {"sha": "332671c4794f159129eeb948aef4b5e928d38894", "url": "https://api.github.com/repos/rust-lang/rust/commits/332671c4794f159129eeb948aef4b5e928d38894", "html_url": "https://github.com/rust-lang/rust/commit/332671c4794f159129eeb948aef4b5e928d38894"}], "stats": {"total": 396, "additions": 175, "deletions": 221}, "files": [{"sha": "683d5fecc3491b9d4c571b9cdcd62122a39627aa", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -254,9 +254,17 @@ pub fn make_test(config: &config, testfile: &Path) -> test::TestDescAndFn {\n }\n \n pub fn make_test_name(config: &config, testfile: &Path) -> test::TestName {\n+\n+    // Try to elide redundant long paths\n+    fn shorten(path: &Path) -> ~str {\n+        let filename = path.filename();\n+        let dir = path.pop().filename();\n+        fmt!(\"%s/%s\", dir.get_or_default(~\"\"), filename.get_or_default(~\"\"))\n+    }\n+\n     test::DynTestName(fmt!(\"[%s] %s\",\n                            mode_str(config.mode),\n-                           testfile.to_str()))\n+                           shorten(testfile)))\n }\n \n pub fn make_test_closure(config: &config, testfile: &Path) -> test::TestFn {"}, {"sha": "aad6395b82790c8f2f4e46dcdc08b528d584f236", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -2,7 +2,7 @@\n \" Language:     Rust\n \" Maintainer:   Patrick Walton <pcwalton@mozilla.com>\n \" Maintainer:   Ben Blum <bblum@cs.cmu.edu>\n-\" Last Change:  2012 Jun 14\n+\" Last Change:  2013 Jun 14\n \n if version < 600\n   syntax clear"}, {"sha": "c04ee63880e99010c0c9afc9376dbe72071a1882", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -19,7 +19,7 @@\n  *\n  * ~~~ {.rust}\n  * extern mod std;\n- * use std::arc;\n+ * use extra::arc;\n  * let numbers=vec::from_fn(100, |ind| (ind as float)*rand::random());\n  * let shared_numbers=arc::ARC(numbers);\n  *"}, {"sha": "392e7ff29a22624e3d64e00fc4b8ada2624b98b2", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -36,8 +36,8 @@ impl<'self> ToBase64 for &'self [u8] {\n      * # Example\n      *\n      * ~~~ {.rust}\n-     * extern mod std;\n-     * use std::base64::ToBase64;\n+     * extern mod extra;\n+     * use extra::base64::ToBase64;\n      *\n      * fn main () {\n      *     let str = [52,32].to_base64();\n@@ -99,8 +99,8 @@ impl<'self> ToBase64 for &'self str {\n      * # Example\n      *\n      * ~~~ {.rust}\n-     * extern mod std;\n-     * use std::base64::ToBase64;\n+     * extern mod extra;\n+     * use extra::base64::ToBase64;\n      *\n      * fn main () {\n      *     let str = \"Hello, World\".to_base64();\n@@ -127,9 +127,9 @@ impl<'self> FromBase64 for &'self [u8] {\n      * # Example\n      *\n      * ~~~ {.rust}\n-     * extern mod std;\n-     * use std::base64::ToBase64;\n-     * use std::base64::FromBase64;\n+     * extern mod extra;\n+     * use extra::base64::ToBase64;\n+     * use extra::base64::FromBase64;\n      *\n      * fn main () {\n      *     let str = [52,32].to_base64();\n@@ -207,9 +207,9 @@ impl<'self> FromBase64 for &'self str {\n      * This converts a string literal to base64 and back.\n      *\n      * ~~~ {.rust}\n-     * extern mod std;\n-     * use std::base64::ToBase64;\n-     * use std::base64::FromBase64;\n+     * extern mod extra;\n+     * use extra::base64::ToBase64;\n+     * use extra::base64::FromBase64;\n      * use core::str;\n      *\n      * fn main () {"}, {"sha": "f2cd64085efff40166c383b45f850c1c3d78fcbd", "filename": "src/libextra/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -17,7 +17,7 @@\n  * ~~~ {.rust}\n  * # fn fib(n: uint) -> uint {42};\n  * # fn make_a_sandwich() {};\n- * let mut delayed_fib = std::future::spawn (|| fib(5000) );\n+ * let mut delayed_fib = extra::future::spawn (|| fib(5000) );\n  * make_a_sandwich();\n  * println(fmt!(\"fib(5000) = %?\", delayed_fib.get()))\n  * ~~~"}, {"sha": "fc3c765999bc12ad9998416e624ec3b6eece1307", "filename": "src/libextra/net_ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibextra%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibextra%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_ip.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -55,7 +55,7 @@ pub struct ParseAddrErr {\n  *\n  * # Arguments\n  *\n- * * ip - a `std::net::ip::IpAddr`\n+ * * ip - a `extra::net::ip::IpAddr`\n  */\n pub fn format_addr(ip: &IpAddr) -> ~str {\n     match *ip {\n@@ -80,7 +80,7 @@ pub fn format_addr(ip: &IpAddr) -> ~str {\n  * Get the associated port\n  *\n  * # Arguments\n- * * ip - a `std::net::ip::IpAddr`\n+ * * ip - a `extra::net::ip::IpAddr`\n  */\n pub fn get_port(ip: &IpAddr) -> uint {\n     match *ip {"}, {"sha": "f487c73372fad5bdf14a48a6a2579e36692021bf", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -7,7 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+use core::prelude::*;\n+use core::cast;\n \n // EBML enum definitions and utils shared by the encoder and decoder\n \n@@ -111,6 +112,7 @@ pub static tag_items_data_item_reexport_def_id: uint = 0x4e;\n pub static tag_items_data_item_reexport_name: uint = 0x4f;\n \n // used to encode crate_ctxt side tables\n+#[deriving(Eq)]\n pub enum astencode_tag { // Reserves 0x50 -- 0x6f\n     tag_ast = 0x50,\n \n@@ -136,6 +138,16 @@ pub enum astencode_tag { // Reserves 0x50 -- 0x6f\n     tag_table_moves_map = 0x63,\n     tag_table_capture_map = 0x64\n }\n+static first_astencode_tag : uint = tag_ast as uint;\n+static last_astencode_tag : uint = tag_table_capture_map as uint;\n+impl astencode_tag {\n+    pub fn from_uint(value : uint) -> Option<astencode_tag> {\n+        let is_a_tag = first_astencode_tag <= value && value <= last_astencode_tag;\n+        if !is_a_tag { None } else {\n+            Some(unsafe { cast::transmute(value as int) })\n+        }\n+    }\n+}\n \n pub static tag_item_trait_method_sort: uint = 0x70;\n "}, {"sha": "30f0a52b4e54bc7533e9e0e0731bd34f17621955", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -100,10 +100,8 @@ enum Family {\n     MutStatic,             // b\n     Fn,                    // f\n     UnsafeFn,              // u\n-    PureFn,                // p\n     StaticMethod,          // F\n     UnsafeStaticMethod,    // U\n-    PureStaticMethod,      // P\n     ForeignFn,             // e\n     Type,                  // y\n     ForeignType,           // T\n@@ -126,10 +124,8 @@ fn item_family(item: ebml::Doc) -> Family {\n       'b' => MutStatic,\n       'f' => Fn,\n       'u' => UnsafeFn,\n-      'p' => PureFn,\n       'F' => StaticMethod,\n       'U' => UnsafeStaticMethod,\n-      'P' => PureStaticMethod,\n       'e' => ForeignFn,\n       'y' => Type,\n       'T' => ForeignType,\n@@ -327,7 +323,6 @@ fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n         Struct    => dl_def(ast::def_struct(did)),\n         UnsafeFn  => dl_def(ast::def_fn(did, ast::unsafe_fn)),\n         Fn        => dl_def(ast::def_fn(did, ast::impure_fn)),\n-        PureFn    => dl_def(ast::def_fn(did, ast::pure_fn)),\n         ForeignFn => dl_def(ast::def_fn(did, ast::extern_fn)),\n         UnsafeStaticMethod => {\n             let trait_did_opt = translated_parent_item_opt(cnum, item);\n@@ -337,10 +332,6 @@ fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n             let trait_did_opt = translated_parent_item_opt(cnum, item);\n             dl_def(ast::def_static_method(did, trait_did_opt, ast::impure_fn))\n         }\n-        PureStaticMethod => {\n-            let trait_did_opt = translated_parent_item_opt(cnum, item);\n-            dl_def(ast::def_static_method(did, trait_did_opt, ast::pure_fn))\n-        }\n         Type | ForeignType => dl_def(ast::def_ty(did)),\n         Mod => dl_def(ast::def_mod(did)),\n         ForeignMod => dl_def(ast::def_foreign_mod(did)),\n@@ -819,12 +810,11 @@ pub fn get_static_methods_if_impl(intr: @ident_interner,\n         let impl_method_doc = lookup_item(impl_method_id.node, cdata.data);\n         let family = item_family(impl_method_doc);\n         match family {\n-            StaticMethod | UnsafeStaticMethod | PureStaticMethod => {\n+            StaticMethod | UnsafeStaticMethod => {\n                 let purity;\n                 match item_family(impl_method_doc) {\n                     StaticMethod => purity = ast::impure_fn,\n                     UnsafeStaticMethod => purity = ast::unsafe_fn,\n-                    PureStaticMethod => purity = ast::pure_fn,\n                     _ => fail!()\n                 }\n \n@@ -932,10 +922,8 @@ fn item_family_to_str(fam: Family) -> ~str {\n       MutStatic => ~\"static mut\",\n       Fn => ~\"fn\",\n       UnsafeFn => ~\"unsafe fn\",\n-      PureFn => ~\"pure fn\",\n       StaticMethod => ~\"static method\",\n       UnsafeStaticMethod => ~\"unsafe static method\",\n-      PureStaticMethod => ~\"pure static method\",\n       ForeignFn => ~\"foreign fn\",\n       Type => ~\"type\",\n       ForeignType => ~\"foreign type\","}, {"sha": "b96e96c9618fb07be9c75a270b59ee003f565246", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -753,7 +753,6 @@ fn encode_info_for_method(ecx: &EncodeContext,\n fn purity_fn_family(p: purity) -> char {\n     match p {\n       unsafe_fn => 'u',\n-      pure_fn => 'p',\n       impure_fn => 'f',\n       extern_fn => 'e'\n     }\n@@ -762,7 +761,6 @@ fn purity_fn_family(p: purity) -> char {\n fn purity_static_method_family(p: purity) -> char {\n     match p {\n       unsafe_fn => 'U',\n-      pure_fn => 'P',\n       impure_fn => 'F',\n       _ => fail!(\"extern fn can't be static\")\n     }"}, {"sha": "c3840c9c87fb2789f68b6e5b99261b6caaf634d7", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -440,10 +440,9 @@ fn parse_hex(st: &mut PState) -> uint {\n fn parse_purity(c: char) -> purity {\n     match c {\n       'u' => unsafe_fn,\n-      'p' => pure_fn,\n       'i' => impure_fn,\n       'c' => extern_fn,\n-      _ => fail!(\"parse_purity: bad purity\")\n+      _ => fail!(\"parse_purity: bad purity %c\", c)\n     }\n }\n "}, {"sha": "37fedc16122e59fcac8518b7171ef26763637b76", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -350,7 +350,6 @@ fn enc_sigil(w: @io::Writer, sigil: Sigil) {\n \n fn enc_purity(w: @io::Writer, p: purity) {\n     match p {\n-      pure_fn => w.write_char('p'),\n       impure_fn => w.write_char('i'),\n       unsafe_fn => w.write_char('u'),\n       extern_fn => w.write_char('c')"}, {"sha": "fb8238b84d6e69c31d1bf1123c747b8a51c680b5", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 89, "deletions": 86, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -319,15 +319,10 @@ fn simplify_ast(ii: &ast::inlined_item) -> ast::inlined_item {\n     });\n \n     match *ii {\n-      ast::ii_item(i) => {\n-        ast::ii_item(fld.fold_item(i).get()) //hack: we're not dropping items\n-      }\n-      ast::ii_method(d, m) => {\n-        ast::ii_method(d, fld.fold_method(m))\n-      }\n-      ast::ii_foreign(i) => {\n-        ast::ii_foreign(fld.fold_foreign_item(i))\n-      }\n+        //hack: we're not dropping items\n+        ast::ii_item(i) => ast::ii_item(fld.fold_item(i).get()),\n+        ast::ii_method(d, m) => ast::ii_method(d, fld.fold_method(m)),\n+        ast::ii_foreign(i) => ast::ii_foreign(fld.fold_foreign_item(i))\n     }\n }\n \n@@ -346,16 +341,10 @@ fn renumber_ast(xcx: @ExtendedDecodeContext, ii: ast::inlined_item)\n     });\n \n     match ii {\n-      ast::ii_item(i) => {\n-        ast::ii_item(fld.fold_item(i).get())\n-      }\n-      ast::ii_method(d, m) => {\n-        ast::ii_method(xcx.tr_def_id(d), fld.fold_method(m))\n-      }\n-      ast::ii_foreign(i) => {\n-        ast::ii_foreign(fld.fold_foreign_item(i))\n-      }\n-     }\n+        ast::ii_item(i) => ast::ii_item(fld.fold_item(i).get()),\n+        ast::ii_method(d, m) => ast::ii_method(xcx.tr_def_id(d), fld.fold_method(m)),\n+        ast::ii_foreign(i) => ast::ii_foreign(fld.fold_foreign_item(i)),\n+    }\n }\n \n // ______________________________________________________________________\n@@ -374,22 +363,22 @@ fn decode_def(xcx: @ExtendedDecodeContext, doc: ebml::Doc) -> ast::def {\n impl tr for ast::def {\n     fn tr(&self, xcx: @ExtendedDecodeContext) -> ast::def {\n         match *self {\n-          ast::def_fn(did, p) => { ast::def_fn(did.tr(xcx), p) }\n+          ast::def_fn(did, p) => ast::def_fn(did.tr(xcx), p),\n           ast::def_static_method(did, did2_opt, p) => {\n             ast::def_static_method(did.tr(xcx),\n                                    did2_opt.map(|did2| did2.tr(xcx)),\n                                    p)\n-          }\n-          ast::def_self_ty(nid) => { ast::def_self_ty(xcx.tr_id(nid)) }\n-          ast::def_self(nid, i) => { ast::def_self(xcx.tr_id(nid), i) }\n-          ast::def_mod(did) => { ast::def_mod(did.tr(xcx)) }\n-          ast::def_foreign_mod(did) => { ast::def_foreign_mod(did.tr(xcx)) }\n-          ast::def_static(did, m) => { ast::def_static(did.tr(xcx), m) }\n-          ast::def_arg(nid, b) => { ast::def_arg(xcx.tr_id(nid), b) }\n-          ast::def_local(nid, b) => { ast::def_local(xcx.tr_id(nid), b) }\n+          },\n+          ast::def_self_ty(nid) => ast::def_self_ty(xcx.tr_id(nid)),\n+          ast::def_self(nid, i) => ast::def_self(xcx.tr_id(nid), i),\n+          ast::def_mod(did) => ast::def_mod(did.tr(xcx)),\n+          ast::def_foreign_mod(did) => ast::def_foreign_mod(did.tr(xcx)),\n+          ast::def_static(did, m) => ast::def_static(did.tr(xcx), m),\n+          ast::def_arg(nid, b) => ast::def_arg(xcx.tr_id(nid), b),\n+          ast::def_local(nid, b) => ast::def_local(xcx.tr_id(nid), b),\n           ast::def_variant(e_did, v_did) => {\n             ast::def_variant(e_did.tr(xcx), v_did.tr(xcx))\n-          }\n+          },\n           ast::def_trait(did) => ast::def_trait(did.tr(xcx)),\n           ast::def_ty(did) => ast::def_ty(did.tr(xcx)),\n           ast::def_prim_ty(p) => ast::def_prim_ty(p),\n@@ -402,9 +391,7 @@ impl tr for ast::def {\n                            xcx.tr_id(nid2),\n                            xcx.tr_id(nid3))\n           }\n-          ast::def_struct(did) => {\n-            ast::def_struct(did.tr(xcx))\n-          }\n+          ast::def_struct(did) => ast::def_struct(did.tr(xcx)),\n           ast::def_region(nid) => ast::def_region(xcx.tr_id(nid)),\n           ast::def_typaram_binder(nid) => {\n             ast::def_typaram_binder(xcx.tr_id(nid))\n@@ -419,12 +406,9 @@ impl tr for ast::def {\n \n impl tr for ty::AutoAdjustment {\n     fn tr(&self, xcx: @ExtendedDecodeContext) -> ty::AutoAdjustment {\n-        match self {\n-            &ty::AutoAddEnv(r, s) => {\n-                ty::AutoAddEnv(r.tr(xcx), s)\n-            }\n-\n-            &ty::AutoDerefRef(ref adr) => {\n+        match *self {\n+            ty::AutoAddEnv(r, s) => ty::AutoAddEnv(r.tr(xcx), s),\n+            ty::AutoDerefRef(ref adr) => {\n                 ty::AutoDerefRef(ty::AutoDerefRef {\n                     autoderefs: adr.autoderefs,\n                     autoref: adr.autoref.map(|ar| ar.tr(xcx)),\n@@ -1110,56 +1094,75 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                 found for id %d (orig %d)\",\n                tag, id, id0);\n \n-        if tag == (c::tag_table_moves_map as uint) {\n-            dcx.maps.moves_map.insert(id);\n-        } else {\n-            let val_doc = entry_doc.get(c::tag_table_val as uint);\n-            let mut val_dsr = reader::Decoder(val_doc);\n-            let val_dsr = &mut val_dsr;\n-            if tag == (c::tag_table_def as uint) {\n-                let def = decode_def(xcx, val_doc);\n-                dcx.tcx.def_map.insert(id, def);\n-            } else if tag == (c::tag_table_node_type as uint) {\n-                let ty = val_dsr.read_ty(xcx);\n-                debug!(\"inserting ty for node %?: %s\",\n-                       id, ty_to_str(dcx.tcx, ty));\n-                dcx.tcx.node_types.insert(id as uint, ty);\n-            } else if tag == (c::tag_table_node_type_subst as uint) {\n-                let tys = val_dsr.read_tys(xcx);\n-                dcx.tcx.node_type_substs.insert(id, tys);\n-            } else if tag == (c::tag_table_freevars as uint) {\n-                let fv_info = @val_dsr.read_to_vec(|val_dsr| {\n-                    @val_dsr.read_freevar_entry(xcx)\n-                });\n-                dcx.tcx.freevars.insert(id, fv_info);\n-            } else if tag == (c::tag_table_tcache as uint) {\n-                let tpbt = val_dsr.read_ty_param_bounds_and_ty(xcx);\n-                let lid = ast::def_id { crate: ast::local_crate, node: id };\n-                dcx.tcx.tcache.insert(lid, tpbt);\n-            } else if tag == (c::tag_table_param_defs as uint) {\n-                let bounds = val_dsr.read_type_param_def(xcx);\n-                dcx.tcx.ty_param_defs.insert(id, bounds);\n-            } else if tag == (c::tag_table_method_map as uint) {\n-                dcx.maps.method_map.insert(\n-                    id,\n-                    val_dsr.read_method_map_entry(xcx));\n-            } else if tag == (c::tag_table_vtable_map as uint) {\n-                dcx.maps.vtable_map.insert(id,\n-                                           val_dsr.read_vtable_res(xcx));\n-            } else if tag == (c::tag_table_adjustments as uint) {\n-                let adj: @ty::AutoAdjustment = @Decodable::decode(val_dsr);\n-                adj.tr(xcx);\n-                dcx.tcx.adjustments.insert(id, adj);\n-            } else if tag == (c::tag_table_capture_map as uint) {\n-                let cvars =\n-                    at_vec::to_managed_consume(\n-                        val_dsr.read_to_vec(\n-                            |val_dsr| val_dsr.read_capture_var(xcx)));\n-                dcx.maps.capture_map.insert(id, cvars);\n-            } else {\n+        match c::astencode_tag::from_uint(tag) {\n+            None => {\n                 xcx.dcx.tcx.sess.bug(\n                     fmt!(\"unknown tag found in side tables: %x\", tag));\n             }\n+            Some(value) => if value == c::tag_table_moves_map {\n+                dcx.maps.moves_map.insert(id);\n+            } else {\n+                let val_doc = entry_doc.get(c::tag_table_val as uint);\n+                let mut val_dsr = reader::Decoder(val_doc);\n+                let val_dsr = &mut val_dsr;\n+\n+                match value {\n+                    c::tag_table_def => {\n+                        let def = decode_def(xcx, val_doc);\n+                        dcx.tcx.def_map.insert(id, def);\n+                    }\n+                    c::tag_table_node_type => {\n+                        let ty = val_dsr.read_ty(xcx);\n+                        debug!(\"inserting ty for node %?: %s\",\n+                               id, ty_to_str(dcx.tcx, ty));\n+                        dcx.tcx.node_types.insert(id as uint, ty);\n+                    }\n+                    c::tag_table_node_type_subst => {\n+                        let tys = val_dsr.read_tys(xcx);\n+                        dcx.tcx.node_type_substs.insert(id, tys);\n+                    }\n+                    c::tag_table_freevars => {\n+                        let fv_info = @val_dsr.read_to_vec(|val_dsr| {\n+                            @val_dsr.read_freevar_entry(xcx)\n+                        });\n+                        dcx.tcx.freevars.insert(id, fv_info);\n+                    }\n+                    c::tag_table_tcache => {\n+                        let tpbt = val_dsr.read_ty_param_bounds_and_ty(xcx);\n+                        let lid = ast::def_id { crate: ast::local_crate, node: id };\n+                        dcx.tcx.tcache.insert(lid, tpbt);\n+                    }\n+                    c::tag_table_param_defs => {\n+                        let bounds = val_dsr.read_type_param_def(xcx);\n+                        dcx.tcx.ty_param_defs.insert(id, bounds);\n+                    }\n+                    c::tag_table_method_map => {\n+                        dcx.maps.method_map.insert(\n+                            id,\n+                            val_dsr.read_method_map_entry(xcx));\n+                    }\n+                    c::tag_table_vtable_map => {\n+                        dcx.maps.vtable_map.insert(id,\n+                                                   val_dsr.read_vtable_res(xcx));\n+                    }\n+                    c::tag_table_adjustments => {\n+                        let adj: @ty::AutoAdjustment = @Decodable::decode(val_dsr);\n+                        adj.tr(xcx);\n+                        dcx.tcx.adjustments.insert(id, adj);\n+                    }\n+                    c::tag_table_capture_map => {\n+                        let cvars =\n+                            at_vec::to_managed_consume(\n+                                val_dsr.read_to_vec(\n+                                    |val_dsr| val_dsr.read_capture_var(xcx)));\n+                        dcx.maps.capture_map.insert(id, cvars);\n+                    }\n+                    _ => {\n+                        xcx.dcx.tcx.sess.bug(\n+                            fmt!(\"unknown tag found in side tables: %x\", tag));\n+                    }\n+                }\n+            }\n         }\n \n         debug!(\">< Side table doc loaded\");"}, {"sha": "2fa25b10f60518d744e2298934e8828fbe8a08dd", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -235,22 +235,17 @@ pub fn check_item_recursion(sess: Session,\n \n     fn visit_expr(e: @expr, (env, v): (env, visit::vt<env>)) {\n         match e.node {\n-          expr_path(*) => {\n-            match env.def_map.find(&e.id) {\n-              Some(&def_static(def_id, _)) => {\n-                if ast_util::is_local(def_id) {\n-                  match env.ast_map.get_copy(&def_id.node) {\n-                    ast_map::node_item(it, _) => {\n-                      (v.visit_item)(it, (env, v));\n-                    }\n-                    _ => fail!(\"const not bound to an item\")\n-                  }\n-                }\n-              }\n-              _ => ()\n-            }\n-          }\n-          _ => ()\n+            expr_path(*) => match env.def_map.find(&e.id) {\n+                Some(&def_static(def_id, _)) if ast_util::is_local(def_id) =>\n+                    match env.ast_map.get_copy(&def_id.node) {\n+                        ast_map::node_item(it, _) => {\n+                            (v.visit_item)(it, (env, v));\n+                        }\n+                        _ => fail!(\"const not bound to an item\")\n+                    },\n+                _ => ()\n+            },\n+            _ => ()\n         }\n         visit::visit_expr(e, (env, v));\n     }"}, {"sha": "299d71b2567a12faa881fbd7559d943f80998277", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 13, "deletions": 58, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -420,73 +420,28 @@ pub fn lit_to_const(lit: @lit) -> const_val {\n     }\n }\n \n+fn compare_vals<T : Eq + Ord>(a: T, b: T) -> Option<int> {\n+    Some(if a == b { 0 } else if a < b { -1 } else { 1 })\n+}\n pub fn compare_const_vals(a: &const_val, b: &const_val) -> Option<int> {\n-  match (a, b) {\n-    (&const_int(a), &const_int(b)) => {\n-        if a == b {\n-            Some(0)\n-        } else if a < b {\n-            Some(-1)\n-        } else {\n-            Some(1)\n-        }\n-    }\n-    (&const_uint(a), &const_uint(b)) => {\n-        if a == b {\n-            Some(0)\n-        } else if a < b {\n-            Some(-1)\n-        } else {\n-            Some(1)\n-        }\n-    }\n-    (&const_float(a), &const_float(b)) => {\n-        if a == b {\n-            Some(0)\n-        } else if a < b {\n-            Some(-1)\n-        } else {\n-            Some(1)\n-        }\n-    }\n-    (&const_str(ref a), &const_str(ref b)) => {\n-        if (*a) == (*b) {\n-            Some(0)\n-        } else if (*a) < (*b) {\n-            Some(-1)\n-        } else {\n-            Some(1)\n-        }\n-    }\n-    (&const_bool(a), &const_bool(b)) => {\n-        if a == b {\n-            Some(0)\n-        } else if a < b {\n-            Some(-1)\n-        } else {\n-            Some(1)\n-        }\n-    }\n-    _ => {\n-        None\n+    match (a, b) {\n+        (&const_int(a), &const_int(b)) => compare_vals(a, b),\n+        (&const_uint(a), &const_uint(b)) => compare_vals(a, b),\n+        (&const_float(a), &const_float(b)) => compare_vals(a, b),\n+        (&const_str(a), &const_str(b)) => compare_vals(a, b),\n+        (&const_bool(a), &const_bool(b)) => compare_vals(a, b),\n+        _ => None\n     }\n-  }\n }\n \n pub fn compare_lit_exprs(tcx: middle::ty::ctxt, a: @expr, b: @expr) -> Option<int> {\n     compare_const_vals(&eval_const_expr(tcx, a), &eval_const_expr(tcx, b))\n }\n \n pub fn lit_expr_eq(tcx: middle::ty::ctxt, a: @expr, b: @expr) -> Option<bool> {\n-    match compare_lit_exprs(tcx, a, b) {\n-        Some(val) => Some(val == 0),\n-        None =>  None,\n-    }\n+    compare_lit_exprs(tcx, a, b).map(|&val| val == 0)\n }\n \n pub fn lit_eq(a: @lit, b: @lit) -> Option<bool> {\n-    match compare_const_vals(&lit_to_const(a), &lit_to_const(b)) {\n-        Some(val) => Some(val == 0),\n-        None =>  None,\n-    }\n+    compare_const_vals(&lit_to_const(a), &lit_to_const(b)).map(|&val| val == 0)\n }"}, {"sha": "24c7333469765182dca575d04f3145492ec855da", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -396,7 +396,6 @@ pub fn ast_sigil_constant(sigil: ast::Sigil) -> uint {\n \n pub fn ast_purity_constant(purity: ast::purity) -> uint {\n     match purity {\n-        ast::pure_fn => 0u,\n         ast::unsafe_fn => 1u,\n         ast::impure_fn => 2u,\n         ast::extern_fn => 3u"}, {"sha": "242c617a0e8762776b3ed58f70345db39f204c64", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -1251,7 +1251,7 @@ pub fn mk_ctor_fn(cx: ctxt, input_tys: &[ty::t], output: ty::t) -> t {\n     let input_args = input_tys.map(|t| *t);\n     mk_bare_fn(cx,\n                BareFnTy {\n-                   purity: ast::pure_fn,\n+                   purity: ast::impure_fn,\n                    abis: AbiSet::Rust(),\n                    sig: FnSig {\n                     bound_lifetime_names: opt_vec::Empty,"}, {"sha": "a38a2dced93b62ab55be0e199b1b9e6056fe6684", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -275,7 +275,7 @@ pub fn blank_fn_ctxt(ccx: @mut CrateCtxt,\n         err_count_on_creation: ccx.tcx.sess.err_count(),\n         ret_ty: rty,\n         indirect_ret_ty: None,\n-        ps: PurityState::function(ast::pure_fn, 0),\n+        ps: PurityState::function(ast::impure_fn, 0),\n         region_lb: region_bnd,\n         in_scope_regions: @Nil,\n         fn_kind: Vanilla,"}, {"sha": "47fb28f84845adbc09a9747ac9e2e73539f789b1", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -23,7 +23,7 @@ use middle::typeck::infer::fold_regions_in_sig;\n use middle::typeck::isr_alist;\n use syntax::ast;\n use syntax::ast::{Many, Once, extern_fn, impure_fn, m_const, m_imm, m_mutbl};\n-use syntax::ast::{pure_fn, unsafe_fn};\n+use syntax::ast::{unsafe_fn};\n use syntax::ast::{Onceness, purity};\n use syntax::abi::AbiSet;\n use syntax::codemap::span;\n@@ -103,7 +103,6 @@ impl Combine for Glb {\n \n     fn purities(&self, a: purity, b: purity) -> cres<purity> {\n         match (a, b) {\n-          (pure_fn, _) | (_, pure_fn) => Ok(pure_fn),\n           (extern_fn, _) | (_, extern_fn) => Ok(extern_fn),\n           (impure_fn, _) | (_, impure_fn) => Ok(impure_fn),\n           (unsafe_fn, unsafe_fn) => Ok(unsafe_fn)"}, {"sha": "c77bef835e4f8b91851956bddf4147b7415afdaa", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -28,7 +28,7 @@ use extra::list;\n use syntax::abi::AbiSet;\n use syntax::ast;\n use syntax::ast::{Many, Once, extern_fn, m_const, impure_fn};\n-use syntax::ast::{pure_fn, unsafe_fn};\n+use syntax::ast::{unsafe_fn};\n use syntax::ast::{Onceness, purity};\n use syntax::codemap::span;\n \n@@ -92,8 +92,7 @@ impl Combine for Lub {\n         match (a, b) {\n           (unsafe_fn, _) | (_, unsafe_fn) => Ok(unsafe_fn),\n           (impure_fn, _) | (_, impure_fn) => Ok(impure_fn),\n-          (extern_fn, _) | (_, extern_fn) => Ok(extern_fn),\n-          (pure_fn, pure_fn) => Ok(pure_fn)\n+          (extern_fn, extern_fn) => Ok(extern_fn),\n         }\n     }\n "}, {"sha": "0f6517f5799811f2d74f12282ad1feef7614a391", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -1712,5 +1712,5 @@ mod tests {\n         assert!(!os::mkdir_recursive(&path, (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n     }\n \n-    // More recursive_mkdir tests are in std::tempfile\n+    // More recursive_mkdir tests are in extra::tempfile\n }"}, {"sha": "801a4af281ec373eccac3569fe6c229f60543566", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -14,7 +14,7 @@\n  * Strings are a packed UTF-8 representation of text, stored as null\n  * terminated buffers of u8 bytes.  Strings should be indexed in bytes,\n  * for efficiency, but UTF-8 unsafe operations should be avoided.  For\n- * some heavy-duty uses, try std::rope.\n+ * some heavy-duty uses, try extra::rope.\n  */\n \n use at_vec;"}, {"sha": "feb03896558e7b520540430de8dce9732df4b151", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -847,7 +847,6 @@ pub struct fn_decl {\n \n #[deriving(Eq, Encodable, Decodable)]\n pub enum purity {\n-    pure_fn, // declared with \"pure fn\"\n     unsafe_fn, // declared with \"unsafe fn\"\n     impure_fn, // declared with \"fn\"\n     extern_fn, // declared with \"extern fn\"\n@@ -858,7 +857,6 @@ impl ToStr for purity {\n         match *self {\n             impure_fn => ~\"impure\",\n             unsafe_fn => ~\"unsafe\",\n-            pure_fn => ~\"pure\",\n             extern_fn => ~\"extern\"\n         }\n     }"}, {"sha": "9a1682bf063d7312acbfc5d08189179dd86adf15", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -2210,26 +2210,29 @@ pub fn print_fn_header_info(s: @ps,\n     print_opt_sigil(s, opt_sigil);\n }\n \n-pub fn opt_sigil_to_str(opt_p: Option<ast::Sigil>) -> ~str {\n+pub fn opt_sigil_to_str(opt_p: Option<ast::Sigil>) -> &'static str {\n     match opt_p {\n-      None => ~\"fn\",\n-      Some(p) => fmt!(\"fn%s\", p.to_str())\n+      None => \"fn\",\n+      Some(p) => match p {\n+          ast::BorrowedSigil => \"fn&\",\n+          ast::OwnedSigil => \"fn~\",\n+          ast::ManagedSigil => \"fn@\"\n+      }\n     }\n }\n \n-pub fn purity_to_str(p: ast::purity) -> ~str {\n+pub fn purity_to_str(p: ast::purity) -> &'static str {\n     match p {\n-      ast::impure_fn => ~\"impure\",\n-      ast::unsafe_fn => ~\"unsafe\",\n-      ast::pure_fn => ~\"pure\",\n-      ast::extern_fn => ~\"extern\"\n+      ast::impure_fn => \"impure\",\n+      ast::unsafe_fn => \"unsafe\",\n+      ast::extern_fn => \"extern\"\n     }\n }\n \n-pub fn onceness_to_str(o: ast::Onceness) -> ~str {\n+pub fn onceness_to_str(o: ast::Onceness) -> &'static str {\n     match o {\n-        ast::Once => ~\"once\",\n-        ast::Many => ~\"many\"\n+        ast::Once => \"once\",\n+        ast::Many => \"many\"\n     }\n }\n "}, {"sha": "4dfe3575eb5915f995bc87714b80597f43adca2e", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a28f9ba52651798b0a17f7f4fb83e927200594f5/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=a28f9ba52651798b0a17f7f4fb83e927200594f5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test ~fn is not inferred\n // Test that the lambda kind is inferred correctly as a return\n // expression\n "}]}