{"sha": "6673cc8329a2bc1395cf6c3c1ec194cbd83b567e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NzNjYzgzMjlhMmJjMTM5NWNmNmMzYzFlYzE5NGNiZDgzYjU2N2U=", "commit": {"author": {"name": "mlegner", "email": "markus@legner.ch", "date": "2020-03-02T21:44:32Z"}, "committer": {"name": "mlegner", "email": "markus@legner.ch", "date": "2020-03-04T12:21:00Z"}, "message": "Resolve false positives for hex int cast.", "tree": {"sha": "3728690ee066805e5f6ae29323c1fdface9b2e23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3728690ee066805e5f6ae29323c1fdface9b2e23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6673cc8329a2bc1395cf6c3c1ec194cbd83b567e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE8Gd4tklnUGrwqsxng3PtO0zPqEUFAl5fnSwACgkQg3PtO0zP\nqEXldQ/+J9oI9Xjberrn9MFtd+MEEijsZ5MhbcOD1DPgVLsQ/HSEL4rDZAE00yRS\nk83E2qjuO2n8TbEUjghP+PweccmZRu4/qS/C+DQBOATnvuLYlNyhazelIoo+xAOo\nw+TboGuIm6Wyb+yJphLlV7AY9951Xjt6S0lXanzVXbt0J7mWVHJCJhpGeTdX2Xhm\nPGs99ZKat5DvmfmlCyvWWnU0KGntRIhr2MXvSfSgBfbZCYeBEad0DSbZ3wRyBkVE\ng43Xp3zAGOaLlaCaNcbX5ADQ0uuhiJivmf4kVSpDJXL54vMT8hYgQm6HNCu+ybAp\nqrYBGTM44X+VPWXerWxVCjC6RFgsmUesBmopT+jt6fB0nn3f9OHMJGDIKML3PUJF\no9rg0vaSp1LPmS5ERyb+z3gn6Zlv2vQy9XLDigURF2gEpWOPLEsvFZCAwIUf5LFQ\nTifhmjEYE+INSEUn0IrxmDmtDWz53WVAZY2iWiVLhGYYb9yYU0yTsnkAsnM6QEdi\nHDHuC0/E5DOnEHfmbFUfyJtclj96MCpzmbCW46RoqLeYBd5M0PcLfRgkfwouS8+k\nSz/vWZtPXkr212Bf9KjWPqFZcinI32+dOKKRVckbnqlR4hP0daYNKTkVvD8i1n59\npORClOCbUseiz/JcK04N2Kr5wqOlaRg66cAuyVKUq2qe5qLJAjA=\n=sZuh\n-----END PGP SIGNATURE-----", "payload": "tree 3728690ee066805e5f6ae29323c1fdface9b2e23\nparent 9ff4581cd31ede554eabf97b47df033c39752b23\nauthor mlegner <markus@legner.ch> 1583185472 +0100\ncommitter mlegner <markus@legner.ch> 1583324460 +0100\n\nResolve false positives for hex int cast.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6673cc8329a2bc1395cf6c3c1ec194cbd83b567e", "html_url": "https://github.com/rust-lang/rust/commit/6673cc8329a2bc1395cf6c3c1ec194cbd83b567e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6673cc8329a2bc1395cf6c3c1ec194cbd83b567e/comments", "author": {"login": "mlegner", "id": 5960634, "node_id": "MDQ6VXNlcjU5NjA2MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5960634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlegner", "html_url": "https://github.com/mlegner", "followers_url": "https://api.github.com/users/mlegner/followers", "following_url": "https://api.github.com/users/mlegner/following{/other_user}", "gists_url": "https://api.github.com/users/mlegner/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlegner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlegner/subscriptions", "organizations_url": "https://api.github.com/users/mlegner/orgs", "repos_url": "https://api.github.com/users/mlegner/repos", "events_url": "https://api.github.com/users/mlegner/events{/privacy}", "received_events_url": "https://api.github.com/users/mlegner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mlegner", "id": 5960634, "node_id": "MDQ6VXNlcjU5NjA2MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5960634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlegner", "html_url": "https://github.com/mlegner", "followers_url": "https://api.github.com/users/mlegner/followers", "following_url": "https://api.github.com/users/mlegner/following{/other_user}", "gists_url": "https://api.github.com/users/mlegner/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlegner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlegner/subscriptions", "organizations_url": "https://api.github.com/users/mlegner/orgs", "repos_url": "https://api.github.com/users/mlegner/repos", "events_url": "https://api.github.com/users/mlegner/events{/privacy}", "received_events_url": "https://api.github.com/users/mlegner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ff4581cd31ede554eabf97b47df033c39752b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff4581cd31ede554eabf97b47df033c39752b23", "html_url": "https://github.com/rust-lang/rust/commit/9ff4581cd31ede554eabf97b47df033c39752b23"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "43b2c4e78b47882859414b765aafca64cf8ca1ee", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6673cc8329a2bc1395cf6c3c1ec194cbd83b567e/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6673cc8329a2bc1395cf6c3c1ec194cbd83b567e/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=6673cc8329a2bc1395cf6c3c1ec194cbd83b567e", "patch": "@@ -131,7 +131,7 @@ pub fn format_numeric_literal(lit: &str, type_suffix: Option<&str>, float: bool)\n #[derive(Debug)]\n pub(super) struct NumericLiteral<'a> {\n     /// Which radix the literal was represented in.\n-    radix: Radix,\n+    pub radix: Radix,\n     /// The radix prefix, if present.\n     prefix: Option<&'a str>,\n \n@@ -147,16 +147,20 @@ pub(super) struct NumericLiteral<'a> {\n }\n \n impl<'a> NumericLiteral<'a> {\n-    fn from_lit(src: &'a str, lit: &Lit) -> Option<NumericLiteral<'a>> {\n-        if lit.kind.is_numeric() && src.chars().next().map_or(false, |c| c.is_digit(10)) {\n-            let (unsuffixed, suffix) = split_suffix(&src, &lit.kind);\n-            let float = if let LitKind::Float(..) = lit.kind { true } else { false };\n+    pub fn from_lit_kind(src: &'a str, lit_kind: &LitKind) -> Option<NumericLiteral<'a>> {\n+        if lit_kind.is_numeric() && src.chars().next().map_or(false, |c| c.is_digit(10)) {\n+            let (unsuffixed, suffix) = split_suffix(&src, lit_kind);\n+            let float = if let LitKind::Float(..) = lit_kind { true } else { false };\n             Some(NumericLiteral::new(unsuffixed, suffix, float))\n         } else {\n             None\n         }\n     }\n \n+    fn from_lit(src: &'a str, lit: &Lit) -> Option<NumericLiteral<'a>> {\n+        NumericLiteral::from_lit_kind(src, &lit.kind)\n+    }\n+\n     #[must_use]\n     fn new(lit: &'a str, suffix: Option<&'a str>, float: bool) -> Self {\n         // Determine delimiter for radix prefix, if present, and radix."}, {"sha": "ada5c8f2d9f9742e6421dafe0cb207bad7f64421", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6673cc8329a2bc1395cf6c3c1ec194cbd83b567e/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6673cc8329a2bc1395cf6c3c1ec194cbd83b567e/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=6673cc8329a2bc1395cf6c3c1ec194cbd83b567e", "patch": "@@ -27,6 +27,7 @@ use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n \n use crate::consts::{constant, Constant};\n+use crate::literal_representation::{NumericLiteral, Radix};\n use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, int_bits, last_path_segment, match_def_path,\n@@ -1210,21 +1211,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n             if let ExprKind::Lit(ref lit) = ex.kind {\n-                if let LitKind::Int(n, _) = lit.node {\n-                    if cast_to.is_floating_point() {\n+                if_chain! {\n+                    if let LitKind::Int(n, _) = lit.node;\n+                    if let Some(src) = snippet_opt(cx, lit.span);\n+                    if cast_to.is_floating_point();\n+                    then {\n                         let from_nbits = 128 - n.leading_zeros();\n                         let to_nbits = fp_ty_mantissa_nbits(cast_to);\n-                        if from_nbits != 0 && to_nbits != 0 && from_nbits <= to_nbits {\n-                            span_lint_and_sugg(\n-                                cx,\n-                                UNNECESSARY_CAST,\n-                                expr.span,\n-                                &format!(\"casting integer literal to `{}` is unnecessary\", cast_to),\n-                                \"try\",\n-                                format!(\"{}_{}\", n, cast_to),\n-                                Applicability::MachineApplicable,\n-                            );\n-                            return;\n+                        if let Some(num_lit) = NumericLiteral::from_lit_kind(&src, &lit.node) {\n+                            if from_nbits != 0 && to_nbits != 0 && from_nbits <= to_nbits &&\n+                            num_lit.radix != Radix::Hexadecimal {\n+                                span_lint_and_sugg(\n+                                    cx,\n+                                    UNNECESSARY_CAST,\n+                                    expr.span,\n+                                    &format!(\"casting integer literal to `{}` is unnecessary\", cast_to),\n+                                    \"try\",\n+                                    format!(\"{}_{}\", n, cast_to),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                                return;\n+                            }\n                         }\n                     }\n                 }"}]}