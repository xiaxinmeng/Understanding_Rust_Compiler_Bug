{"sha": "e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NWZjZmFmYzdhMjM0OTIxNzA5NmJjMWVkOGI4YzI3M2I2YTBlMmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-11T14:37:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-11T14:37:36Z"}, "message": "auto merge of #7632 : gavinb/rust/7484_manpages, r=cmr\n\nThis patch updates the existing manpage and creates new pages for all of the rust command line tools. Closes #7484.", "tree": {"sha": "eba8e909f30171ea21199e0af01c32f76039102d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eba8e909f30171ea21199e0af01c32f76039102d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b", "html_url": "https://github.com/rust-lang/rust/commit/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "323ac9931b9636a3989c408f5d142803240192d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/323ac9931b9636a3989c408f5d142803240192d0", "html_url": "https://github.com/rust-lang/rust/commit/323ac9931b9636a3989c408f5d142803240192d0"}, {"sha": "50600c302e3573e10e7b9b70ea7b570eefea1171", "url": "https://api.github.com/repos/rust-lang/rust/commits/50600c302e3573e10e7b9b70ea7b570eefea1171", "html_url": "https://github.com/rust-lang/rust/commit/50600c302e3573e10e7b9b70ea7b570eefea1171"}], "stats": {"total": 464, "additions": 460, "deletions": 4}, "files": [{"sha": "66bebb7ebe38488e4c9a4deddc932cdfcb7bd573", "filename": "man/rust.1", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/man%2Frust.1", "raw_url": "https://github.com/rust-lang/rust/raw/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/man%2Frust.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frust.1?ref=e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b", "patch": "@@ -0,0 +1,111 @@\n+.TH RUST \"1\" \"July 2013\" \"rust 0.7\" \"User Commands\"\n+.SH NAME\n+rust \\- a front-end to the Rust toolchain\n+.SH SYNOPSIS\n+.B rust\n+[\\fICOMMAND\\fR] [\\fIOPTIONS\\fR] \\fIINPUT\\fR\n+\n+.SH DESCRIPTION\n+This tool is a front-end for the Rust language, available at\n+<\\fBhttps://www.rust-lang.org\\fR>. It provides commands to\n+run, test and package Rust programs.\n+\n+.SH COMMANDS\n+\n+.TP\n+\\fBbuild\\fR\n+compile rust source files\n+.TP\n+\\fBrun\\fR\n+build an executable, and run it\n+.TP\n+\\fBtest\\fR\n+build a test executable, and run it\n+.TP\n+\\fBdoc\\fR\n+generate documentation from doc comments\n+.TP\n+\\fBpkg\\fR\n+download, build, install rust packages\n+.TP\n+\\fBsketch\\fR\n+run a rust interpreter\n+.TP\n+\\fBhelp\\fR\n+show detailed usage of a command\n+\n+The build, run and test commands take the same parameters\n+as the rustc command.\n+\n+.SS \"BUILD COMMAND\"\n+\n+The \\fBbuild\\fR command is a shortcut for the \\fBrustc\\fR command line.\n+All options will be passed to the compiler verbatim. For example, to build\n+an optimised version:\n+\n+    $ rust build -O <filename>\n+\n+.SS \"RUN COMMAND\"\n+\n+The \\fBrun\\fR command is a shortcut for the \\fBrustc\\fR command line.\n+All options will be passed to the compiler verbatim, and if the compilation\n+is successful, the resultant executable will be invoked. For example, to\n+build and run an optimised version:\n+\n+    $ rust run -O <filename>\n+\n+.SS \"TEST COMMAND\"\n+\n+The \\fBtest\\fR command is a shortcut for the command line:\n+\n+    $ rustc --test <filename> -o <filestem>test~ && ./<filestem>test~\n+\n+.SS \"DOC COMMAND\"\n+\n+The \\fBdoc\\fR command is an alias for the rustdoc program. It is equivalent to:\n+\n+    $ rustdoc [options] <cratefile>\n+\n+.SS \"PKG COMMAND\"\n+\n+The \\fBpkg\\fR command is an alias for the rustpkg program. It is equivalent to:\n+\n+    $ rustpkg [options] <cratefile>\n+\n+.SS \"SKETCH COMMAND\"\n+\n+The \\fBsketch\\fR command launches the \\fBrusti\\fR interactive shell.\n+\n+.SS \"HELP COMMAND\"\n+\n+The \\fBhelp\\fR command displays a summary of available commands (ie. this text).\n+\n+.SH \"EXAMPLES\"\n+\n+To build an executable (with a main function):\n+    $ rust build hello.rs\n+\n+To build a library from a source file:\n+    $ rust build --lib hello-lib.rs\n+\n+To build and run an executable:\n+    $ rust run hello.rs\n+\n+To build an executable with unit tests and execute the tests:\n+    $ rust test hello.rs\n+\n+To create a package \n+\n+.SH \"SEE ALSO\"\n+rustc, rustdoc, rustpkg, rusti\n+\n+.SH \"BUGS\"\n+See <\\fBhttps://github.com/mozilla/rust/issues\\fR> for issues.\n+\n+.SH \"AUTHOR\"\n+See \\fBAUTHORS.txt\\fR in the rust source distribution. Graydon Hoare\n+<\\fIgraydon@mozilla.com\\fR> is the project leader.\n+\n+.SH \"COPYRIGHT\"\n+This work is dual-licensed under Apache 2.0 and MIT terms.  See \\fBCOPYRIGHT\\fR\n+file in the rust source distribution."}, {"sha": "2298d5e54554e1708a2fca0e16ae16e7b29cea9c", "filename": "man/rustc.1", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b", "patch": "@@ -86,10 +86,10 @@ Build a test harness\n \\fB\\-\\-target\\fR TRIPLE\n Target triple cpu-manufacturer-kernel[-os] to compile for (see\n http://sources.redhat.com/autobook/autobook/autobook_17.html\n-for detail)\n+for details)\n .TP\n \\fB\\-\\-target-feature\\fR TRIPLE\n-Target-specific attributes (see llc -mattr=help for detail)\n+Target-specific attributes (see llc -mattr=help for details)\n .TP\n \\fB\\-\\-android-cross-path\\fR PATH\n The path to the Android NDK\n@@ -128,6 +128,9 @@ To build either with a crate (.rc) file:\n To build an executable with debug info (experimental):\n     $ rustc -Z debug-info -o hello hello.rs\n \n+.SH \"SEE ALSO\"\n+\n+rust, rustdoc, rustpkg, rusti\n \n .SH \"BUGS\"\n See <\\fBhttps://github.com/mozilla/rust/issues\\fR> for issues."}, {"sha": "93a8f49898cd1164c7cc335cebb56ede28986f75", "filename": "man/rustdoc.1", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/man%2Frustdoc.1", "raw_url": "https://github.com/rust-lang/rust/raw/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/man%2Frustdoc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustdoc.1?ref=e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b", "patch": "@@ -0,0 +1,63 @@\n+.TH RUSTDOC \"1\" \"July 2013\" \"rustdoc 0.7\" \"User Commands\"\n+.SH NAME\n+rustdoc \\- generate documentation from Rust source code\n+.SH SYNOPSIS\n+.B rustdoc\n+[\\fIOPTIONS\\fR] \\fICRATEFILE\\fR\n+\n+.SH DESCRIPTION\n+This tool generates API reference documentation by extracting comments from\n+source code written in the Rust language, available at <\\fBhttps://www.rust-\n+lang.org\\fR>. It provides several output formats for the generated\n+documentation.\n+\n+.SH COMMANDS\n+\n+.TP\n+--output-dir <val>\n+Put documents here (default: .)\n+.TP\n+--output-format <val>\n+markdown or html (default: html)\n+.TP\n+--output-style <val>\n+doc-per-crate or doc-per-mod (default: doc-per-mod)\n+.TP\n+--pandoc-cmd <val>\n+Command for running pandoc\n+.TP\n+-h, --help\n+Print help\n+\n+.SH \"OUTPUT FORMATS\"\n+\n+The rustdoc tool can generate documentation in either the Markdown\n+or HTML formats. It requires the pandoc tool\n+<\\fBhttp://johnmacfarlane.net/pandoc/\\fR> for conversion features.\n+\n+.SH \"EXAMPLES\"\n+\n+To generate documentation for the source in the current directory:\n+    $ rustdoc hello.rs\n+\n+To build documentation into a subdirectory named 'doc' in the Markdown\n+format:\n+    $ rustdoc --output-dir doc --output-format markdown hello.rs\n+\n+The generated HTML can be viewed with any standard web browser, while\n+the Markdown version is well-suited for conversion into other formats.\n+\n+.SH \"SEE ALSO\"\n+\n+rust, rustc, rustpkg, rusti\n+\n+.SH \"BUGS\"\n+See <\\fBhttps://github.com/mozilla/rust/issues\\fR> for issues.\n+\n+.SH \"AUTHOR\"\n+See \\fBAUTHORS.txt\\fR in the rust source distribution. Graydon Hoare\n+<\\fIgraydon@mozilla.com\\fR> is the project leader.\n+\n+.SH \"COPYRIGHT\"\n+This work is dual-licensed under Apache 2.0 and MIT terms.  See \\fBCOPYRIGHT\\fR\n+file in the rust source distribution."}, {"sha": "9f7d1733c6514a070d129a4a7a2e23400da35736", "filename": "man/rusti.1", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/man%2Frusti.1", "raw_url": "https://github.com/rust-lang/rust/raw/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/man%2Frusti.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frusti.1?ref=e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b", "patch": "@@ -0,0 +1,82 @@\n+.TH RUSTI \"1\" \"July 2013\" \"rusti 0.7\" \"User Commands\"\n+\\\" Macros\n+..\n+.de Vb \\\" Begin verbatim text                                                   \n+.ft CW\n+.nf\n+.ne \\\\$1\n+..\n+.de Ve \\\" End verbatim text                                                     \n+.ft R\n+.fi\n+..\n+.SH NAME\n+rusti \\- Rust interactive shell\n+\n+.SH SYNOPSIS\n+.B rusti\n+\n+.SH DESCRIPTION\n+\n+This program is a REPL (Read-Eval-Print Loop) for the Rust language, available\n+at <\\fBhttps://www.rust-lang.org\\fR>. It provides an interactive shell to\n+evaluate Rust expressions, functions and code snippets, and to experiment with\n+Rust code.\n+\n+.B WARNING:\n+The Rust REPL is experimental and may be unstable. If you encounter problems,\n+please use the compiler instead.\n+\n+.SH OPTIONS\n+\n+Currently none.\n+\n+.SH SPECIAL COMMANDS\n+\n+The interactive shell evaluates all input as a sequence of Rust expressions,\n+except for a set of special commands prefixed by a colon ':'. These special\n+commands are described below:\n+\n+.TP\n+\\fB:help\\fR\n+Display a summary of available commands.\n+.TP\n+\\fB:{\\\\n ..lines.. \\\\n:}\\\\n\\fR\n+execute multiline command\n+.TP\n+\\fB:load <crate> ...\\fR\n+loads given crates as dynamic libraries\n+.TP\n+\\fB:clear\\fR\n+clear the bindings\n+.TP\n+\\fB:exit\\fR\n+exit from the repl\n+\n+.SH \"EXAMPLES\"\n+\n+A simple example session, declaring a variable, defining a function,\n+evaluating an expression and printing the result:\n+\n+.PP\n+.Vb\n+\\&\t\\fBrusti>\\fR let x = 42;\n+\\&\t\\fBrusti>\\fR fn square(n: int) -> int { n*n }\n+\\&\t\\fBrusti>\\fR println(fmt!(\"%d squared is %d\", x, square(x)));\n+\\&\t42 squared is 1764\n+.Ve\n+\n+.SH \"SEE ALSO\"\n+\n+rust, rustc, rustdoc, rustpkg\n+\n+.SH \"BUGS\"\n+See <\\fBhttps://github.com/mozilla/rust/issues\\fR> for issues.\n+\n+.SH \"AUTHOR\"\n+See \\fBAUTHORS.txt\\fR in the rust source distribution. Graydon Hoare\n+<\\fIgraydon@mozilla.com\\fR> is the project leader.\n+\n+.SH \"COPYRIGHT\"\n+This work is dual-licensed under Apache 2.0 and MIT terms.  See \\fBCOPYRIGHT\\fR\n+file in the rust source distribution."}, {"sha": "a3178e616c6739536a141afd37552db037d5c2be", "filename": "man/rustpkg.1", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/man%2Frustpkg.1", "raw_url": "https://github.com/rust-lang/rust/raw/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/man%2Frustpkg.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustpkg.1?ref=e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b", "patch": "@@ -0,0 +1,194 @@\n+.TH RUSTPKG \"1\" \"July 2013\" \"rustpkg 0.7\" \"User Commands\"\n+.SH NAME\n+rustpkg \\- package manager for Rust applications\n+.SH SYNOPSIS\n+.B rustpkg\n+[\\fICOMMAND\\fR] [\\fIOPTIONS\\fR] \\fIINPUT\\fR\n+\n+.SH DESCRIPTION\n+\n+This tool is a package manager for applications written in the Rust language,\n+available at <\\fBhttps://www.rust-lang.org\\fR>. It provides commands to build,\n+install and test Rust programs.\n+\n+.SH COMMANDS\n+\n+.TP\n+\\fBbuild\\fR\n+Searches for a package with the specified name and builds it in the workspace in\n+which it is found.\n+.TP\n+\\fBclean\\fR\n+Remove all generated files from the \\fIbuild\\fR directory in the target's workspace.\n+.TP\n+\\fBinstall\\fR\n+Builds the specified target, and all its dependencies, and then installs the\n+build products into the \\fIlib\\fR and \\fIbin\\fR directories of their respective\n+workspaces.\n+.TP\n+\\fBtest\\fR\n+Builds the module called \\fItest.rs\\fR in the specified workspace, and then runs\n+the resulting executable in test mode.\n+\n+.SS \"BUILD COMMAND\"\n+\n+    rustpkg build \\fI[pkgname]\\fR\n+\n+The \\fBbuild\\fR command searches for a package with specified package name and\n+builds it in any workspace(s) where it finds one. Any dependent packages are\n+also built. The output files produced by the build phase are stored in the\n+\\fIbuild\\fR subdirectories of each package. The executables and libraries are\n+not copied to the 'bin' or 'lib' directories; that is the purpose of the\n+\\fBinstall\\fR command.\n+\n+.SS \"CLEAN COMMAND\"\n+\n+    rustpkg clean \\fI[pkgname]\\fR\n+\n+deletes the contents of package's build directory.\n+\n+.SS \"INSTALL COMMAND\"\n+\n+    rustpkg install \\fI[url]\\fR\n+\n+builds the libraries and/or executables that are targets for the specified\n+package name or URL, and then installs them either into package's \\fIlib\\fR\n+and \\fIbin\\fR directories, or into the \\fIlib\\fR and \\fIbin\\fR subdirectories\n+of the first entry in RUST_PATH.\n+\n+Examples:\n+\n+    $ rustpkg install git://github.com/mozilla/servo.git#1.2\n+    $ rustpkg install rust-glfw\n+\n+.SS \"TEST COMMAND\"\n+\n+    rustpkg test \\fI[pkgname]\\fR\n+\n+The test command is a shortcut for the command line:\n+\n+    $ rustc --test <filename> -o <filestem>test~ && ./<filestem>test~\n+\n+Note the suffix on the output filename (the word \"test\" followed by a tilde),\n+which should ensure the file does not clash with a user-generated files.\n+\n+.SH \"ENVIRONMENT\"\n+\n+.TP\n+RUST_PATH\n+A colon-separated (semicolon-separated) list of paths denoting workspaces\n+to search for Rust source files. See the section \\fBPATHS\\fR for full details.\n+\n+.SH \"PATHS\"\n+\n+The \\fBrustpkg\\fR tool searches for packages in the folders specified by the\n+\\fBRUST_PATH\\fR environment variable. Each folder constitutes a\n+\\fIworkspace\\fR, which contains one or more modules available to import.\n+\n+In addition to the RUST_PATH settings, the following implicit paths are\n+\\fIalways\\fR searched, in the following order:\n+\n+1. Any folders named \".rust\" in the current directory, \\fIand every parent\\fR\n+of the curent directory, up to the filesystem root;\n+\n+2. The system path \"/usr/local\" on Unix-style systems, or the equivalent on\n+Windows; and\n+\n+3. A folder named \".rust\" in the user's home directory (ie. \"~/.rust\" on Unix-\n+style systems or the equivalent on Windows).\n+\n+.SH \"PACKAGE STRUCTURE\"\n+\n+A valid workspace must contain each of the following subdirectories:\n+\n+.TP\n+\\fBsrc/\\fR\n+Contains the Rust source code, with one subdirectory per package. Each\n+subdirectory contains source files for a given package.\n+.TP\n+\\fBlib/\\fR\n+\"rustpkg install\" installs libraries into a target-specific subdirectory of this directory.\n+.TP\n+\\fBbin/\\fR\n+\"rustpkg install\" installs executable binaries into a target-specific subdirectory of this directory.\n+.TP\n+\\fBbuild/\\fR\n+\"rustpkg build\" stores temporary build artifacts in a target-specific subdirectory of this directory.\n+\n+For example, if \"foo\" is a workspace containing the package \"bar\", then\n+\"foo/src/bar/main.rs\" would be the \"main\" entry point for building a \"bar\"\n+executable.\n+\n+.SH \"PACKAGE IDENTIFIERS\"\n+\n+A package identifier uniquely identifies a package. A package can be stored in\n+a workspace on the local file system, or on a remote Web server, in which case\n+the package ID resembles a URL.\n+\n+For example, \\fIgithub.com/mozilla/rust\\fR is a package ID\n+that would refer to the git repository browsable at \\fIhttp://github.com/mozilla/rust\\fR.\n+\n+A package ID can also specify a version, like:\n+\\fIgithub.com/mozilla/rust#0.3\\fR. In this case, \\fBrustpkg\\fR will check that\n+the repository \\fIgithub.com/mozilla/rust\\fR has a tag named \\fI0.3\\fR, and\n+report an error otherwise.\n+\n+.SH \"SPECIAL MODULES\"\n+\n+\\fBrustpkg\\fR searches for four different known filenames in the src directory\n+in order to determine which crates to build:\n+\n+.TP\n+\\fBmain.rs\\fR\n+Assumed to be a main entry point for building an executable (install destination is 'bin' directory).\n+.TP\n+\\fBlib.rs\\fR\n+Assumed to be a library crate (install destination is 'lib' directory).\n+.TP\n+\\fBtest.rs\\fR\n+Assumed to contain tests declared with the \\fI#[test]\\fR attribute.\n+.TP\n+\\fBbench.rs\\fR\n+Assumed to contain benchmarks declared with the \\fI#[bench]\\fR attribute.\n+\n+.SH \"CRATE VERSIONS\"\n+\n+\\fBrustpkg\\fR packages do not need to declare their versions with an attribute\n+inside one of the source files, because rustpkg infers it from the version\n+control system. When building a package that is in a git repository,\n+rustpkg assumes that the most recent tag specifies the current version. When\n+building a package that is not under version control, or that has no tags,\n+rustpkg defaults the version to 0.1.\n+\n+.SH \"DEPENDENCIES\"\n+\n+rustpkg infers dependencies from \"extern mod\" directives. Thus, there should\n+be no need to pass a \"-L\" flag to rustpkg to tell it where to find a library.\n+(In the future, it will also be possible to write an \"extern mod\" directive\n+referring to a remote package.)\n+\n+.SH \"CUSTOM BUILD SCRIPTS\"\n+\n+A file called \\fIpkg.rs\\fR at the root level in a workspace is called a \\fIpackage\n+script\\fR. If a package script exists, rustpkg executes it to build the\n+package rather than inferring crates as described previously.\n+\n+Inside \\fIpkg.rs\\fR, it's possible to call back into rustpkg to finish up the\n+build. The \\fIrustpkg::api\\fR module contains functions to build, install, or\n+clean libraries and executables in the way rustpkg normally would without\n+custom build logic.\n+\n+.SH \"SEE ALSO\"\n+\n+rust, rustc, rustdoc, rusti\n+\n+.SH \"BUGS\"\n+See <\\fBhttps://github.com/mozilla/rust/issues\\fR> for issues.\n+\n+.SH \"AUTHOR\"\n+See \\fBAUTHORS.txt\\fR in the rust source distribution. Graydon Hoare\n+<\\fIgraydon@mozilla.com\\fR> is the project leader.\n+\n+.SH \"COPYRIGHT\"\n+This work is dual-licensed under Apache 2.0 and MIT terms.  See \\fBCOPYRIGHT\\fR\n+file in the rust source distribution."}, {"sha": "2eb2ad47db40697d220f8a19cc7158dd49991995", "filename": "mk/install.mk", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=e95fcfafc7a2349217096bc1ed8b8c273b6a0e2b", "patch": "@@ -150,8 +150,11 @@ install-host: $(CSREQ$(ISTAGE)_T_$(CFG_BUILD_TRIPLE)_H_$(CFG_BUILD_TRIPLE))\n \t$(Q)$(call INSTALL_LIB,$(LIBRUSTDOC_GLOB_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUNTIME_$(CFG_BUILD_TRIPLE)))\n \t$(Q)$(call INSTALL,$(HL),$(PHL),$(CFG_RUSTLLVM_$(CFG_BUILD_TRIPLE)))\n-\t$(Q)$(call INSTALL,$(S)/man, \\\n-\t     $(PREFIX_ROOT)/share/man/man1,rustc.1)\n+\t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rust.1)\n+\t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rustc.1)\n+\t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rustdoc.1)\n+\t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rusti.1)\n+\t$(Q)$(call INSTALL,$(S)/man, $(PREFIX_ROOT)/share/man/man1,rustpkg.1)\n \n install-targets: $(INSTALL_TARGET_RULES)\n "}]}