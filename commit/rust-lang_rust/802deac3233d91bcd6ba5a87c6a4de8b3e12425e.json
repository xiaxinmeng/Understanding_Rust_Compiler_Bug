{"sha": "802deac3233d91bcd6ba5a87c6a4de8b3e12425e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMmRlYWMzMjMzZDkxYmNkNmJhNWE4N2M2YTRkZThiM2UxMjQyNWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-29T06:23:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-29T06:34:01Z"}, "message": "stdlib: Add fs::splitext\n\nSplits a path into the filename + extension", "tree": {"sha": "29843187afb551550e9804df7408a0028ee97b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29843187afb551550e9804df7408a0028ee97b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/802deac3233d91bcd6ba5a87c6a4de8b3e12425e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/802deac3233d91bcd6ba5a87c6a4de8b3e12425e", "html_url": "https://github.com/rust-lang/rust/commit/802deac3233d91bcd6ba5a87c6a4de8b3e12425e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/802deac3233d91bcd6ba5a87c6a4de8b3e12425e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2377ccf91158ce5c9da2e5d0cc1f56fa562b2fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2377ccf91158ce5c9da2e5d0cc1f56fa562b2fe", "html_url": "https://github.com/rust-lang/rust/commit/a2377ccf91158ce5c9da2e5d0cc1f56fa562b2fe"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "057f933d0a567f7822b2b06dd8c6a20b0b2bea23", "filename": "src/lib/fs.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/802deac3233d91bcd6ba5a87c6a4de8b3e12425e/src%2Flib%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802deac3233d91bcd6ba5a87c6a4de8b3e12425e/src%2Flib%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffs.rs?ref=802deac3233d91bcd6ba5a87c6a4de8b3e12425e", "patch": "@@ -176,6 +176,55 @@ fn split(p: path) -> [path] {\n     ret split2;\n }\n \n+/*\n+Function: splitext\n+\n+Split a path into a pair of strings with the first element being the filename\n+without the extension and the second being either empty or the file extension\n+including the period. Leading periods in the basename are ignored.  If the\n+path includes directory components then they are included in the filename part\n+of the result pair.\n+*/\n+fn splitext(p: path) -> (str, str) {\n+    if str::is_empty(p) { (\"\", \"\") }\n+    else {\n+        let parts = str::split(p, '.' as u8);\n+        if vec::len(parts) > 1u {\n+            let base = str::connect(vec::init(parts), \".\");\n+            let ext = \".\" + option::get(vec::last(parts));\n+\n+            fn is_dotfile(base: str) -> bool {\n+                str::is_empty(base)\n+                    || str::ends_with(\n+                        base, str::from_char(os_fs::path_sep))\n+                    || str::ends_with(\n+                        base, str::from_char(os_fs::alt_path_sep))\n+            }\n+\n+            fn ext_contains_sep(ext: str) -> bool {\n+                vec::len(split(ext)) > 1u\n+            }\n+\n+            fn no_basename(ext: str) -> bool {\n+                str::ends_with(\n+                    ext, str::from_char(os_fs::path_sep))\n+                    || str::ends_with(\n+                        ext, str::from_char(os_fs::alt_path_sep))\n+            }\n+\n+            if is_dotfile(base)\n+                || ext_contains_sep(ext)\n+                || no_basename(ext) {\n+                (p, \"\")\n+            } else {\n+                (base, ext)\n+            }\n+        } else {\n+            (p, \"\")\n+        }\n+    }\n+}\n+\n /*\n Function: normalize\n "}, {"sha": "66cec07c79550caa34451346030748a916985e3f", "filename": "src/test/stdtest/fs.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/802deac3233d91bcd6ba5a87c6a4de8b3e12425e/src%2Ftest%2Fstdtest%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802deac3233d91bcd6ba5a87c6a4de8b3e12425e/src%2Ftest%2Fstdtest%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ffs.rs?ref=802deac3233d91bcd6ba5a87c6a4de8b3e12425e", "patch": "@@ -156,4 +156,60 @@ fn normalize12() {\n #[cfg(target_os = \"win32\")]\n fn path_is_absolute_win32() {\n    assert fs::path_is_absolute(\"C:/whatever\");\n+}\n+\n+#[test]\n+fn splitext_empty() {\n+    let (base, ext) = fs::splitext(\"\");\n+    assert base == \"\";\n+    assert ext == \"\";\n+}\n+\n+#[test]\n+fn splitext_ext() {\n+    let (base, ext) = fs::splitext(\"grum.exe\");\n+    assert base == \"grum\";\n+    assert ext == \".exe\";\n+}\n+\n+#[test]\n+fn splitext_noext() {\n+    let (base, ext) = fs::splitext(\"grum\");\n+    assert base == \"grum\";\n+    assert ext == \"\";\n+}\n+\n+#[test]\n+fn splitext_dotfile() {\n+    let (base, ext) = fs::splitext(\".grum\");\n+    assert base == \".grum\";\n+    assert ext == \"\";\n+}\n+\n+#[test]\n+fn splitext_path_ext() {\n+    let (base, ext) = fs::splitext(\"oh/grum.exe\");\n+    assert base == \"oh/grum\";\n+    assert ext == \".exe\";\n+}\n+\n+#[test]\n+fn splitext_path_noext() {\n+    let (base, ext) = fs::splitext(\"oh/grum\");\n+    assert base == \"oh/grum\";\n+    assert ext == \"\";\n+}\n+\n+#[test]\n+fn splitext_dot_in_path() {\n+    let (base, ext) = fs::splitext(\"oh.my/grum\");\n+    assert base == \"oh.my/grum\";\n+    assert ext == \"\";\n+}\n+\n+#[test]\n+fn splitext_nobasename() {\n+    let (base, ext) = fs::splitext(\"oh.my/\");\n+    assert base == \"oh.my/\";\n+    assert ext == \"\";\n }\n\\ No newline at end of file"}]}