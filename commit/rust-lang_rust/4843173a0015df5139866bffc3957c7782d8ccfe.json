{"sha": "4843173a0015df5139866bffc3957c7782d8ccfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NDMxNzNhMDAxNWRmNTEzOTg2NmJmZmMzOTU3Yzc3ODJkOGNjZmU=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-11-30T11:57:50Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-11-30T11:57:50Z"}, "message": "Document why as_mut_ptr is safe", "tree": {"sha": "e585ef9579581cce9111508d32de8b06b22cb93a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e585ef9579581cce9111508d32de8b06b22cb93a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4843173a0015df5139866bffc3957c7782d8ccfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4843173a0015df5139866bffc3957c7782d8ccfe", "html_url": "https://github.com/rust-lang/rust/commit/4843173a0015df5139866bffc3957c7782d8ccfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4843173a0015df5139866bffc3957c7782d8ccfe/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23c5e584e0ea40a6f630be0d4c5151b67ba96dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c5e584e0ea40a6f630be0d4c5151b67ba96dd1", "html_url": "https://github.com/rust-lang/rust/commit/23c5e584e0ea40a6f630be0d4c5151b67ba96dd1"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "3a5b4135a917c2180468ff69762d9896e55fe57a", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4843173a0015df5139866bffc3957c7782d8ccfe/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4843173a0015df5139866bffc3957c7782d8ccfe/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=4843173a0015df5139866bffc3957c7782d8ccfe", "patch": "@@ -809,6 +809,12 @@ impl AtomicBool {\n     /// This method is mostly useful for FFI, where the function signature may use\n     /// `*mut bool` instead of `&AtomicBool`.\n     ///\n+    /// Returning an `*mut` pointer from a shared reference to this atomic is safe because the\n+    /// atomic types work with interior mutability. All modifications of an atomic change the value\n+    /// through a shared reference, and can do so safely as long as they use atomic operations. Any\n+    /// use of the returned raw pointer requires an `unsafe` block and still has to uphold the same\n+    /// restriction: operations on it must be atomic.\n+    ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n     ///\n     /// # Examples\n@@ -1929,6 +1935,12 @@ Doing non-atomic reads and writes on the resulting integer can be a data race.\n This method is mostly useful for FFI, where the function signature may use\n `*mut \", stringify!($int_type), \"` instead of `&\", stringify!($atomic_type), \"`.\n \n+Returning an `*mut` pointer from a shared reference to this atomic is safe because the\n+atomic types work with interior mutability. All modifications of an atomic change the value\n+through a shared reference, and can do so safely as long as they use atomic operations. Any\n+use of the returned raw pointer requires an `unsafe` block and still has to uphold the same\n+restriction: operations on it must be atomic.\n+\n # Examples\n \n ```ignore (extern-declaration)"}]}