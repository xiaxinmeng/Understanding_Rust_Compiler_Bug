{"sha": "2b43fac2b98fd9b2c12decca18a086f96d068b35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiNDNmYWMyYjk4ZmQ5YjJjMTJkZWNjYTE4YTA4NmY5NmQwNjhiMzU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-19T09:34:19Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-22T20:01:38Z"}, "message": "Remove `CrateReader`, use `CrateLoader` instead.", "tree": {"sha": "6b9519df348262294819ca2c735189c6e4f19b5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b9519df348262294819ca2c735189c6e4f19b5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b43fac2b98fd9b2c12decca18a086f96d068b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b43fac2b98fd9b2c12decca18a086f96d068b35", "html_url": "https://github.com/rust-lang/rust/commit/2b43fac2b98fd9b2c12decca18a086f96d068b35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b43fac2b98fd9b2c12decca18a086f96d068b35/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f6d7ec2d4e231b9ef0c8a9e8e7ec8a7f67d2ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f6d7ec2d4e231b9ef0c8a9e8e7ec8a7f67d2ae", "html_url": "https://github.com/rust-lang/rust/commit/b5f6d7ec2d4e231b9ef0c8a9e8e7ec8a7f67d2ae"}], "stats": {"total": 61, "additions": 21, "deletions": 40}, "files": [{"sha": "9b27f7a29e9a87832c7813c14646b25c9d11c1a8", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b43fac2b98fd9b2c12decca18a086f96d068b35/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b43fac2b98fd9b2c12decca18a086f96d068b35/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2b43fac2b98fd9b2c12decca18a086f96d068b35", "patch": "@@ -645,7 +645,8 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n     // its contents but the results of name resolution on those contents. Hopefully we'll push\n     // this back at some point.\n     let _ignore = sess.dep_graph.in_ignore();\n-    let mut crate_loader = CrateLoader::new(sess, &cstore, &krate, crate_name);\n+    let mut crate_loader = CrateLoader::new(sess, &cstore, crate_name, krate.config.clone());\n+    crate_loader.preprocess(&krate);\n     let resolver_arenas = Resolver::arenas();\n     let mut resolver =\n         Resolver::new(sess, &krate, make_glob_map, &mut crate_loader, &resolver_arenas);"}, {"sha": "e3a589c6c032bc0f909378a639efa863db173a72", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 14, "deletions": 34, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2b43fac2b98fd9b2c12decca18a086f96d068b35/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b43fac2b98fd9b2c12decca18a086f96d068b35/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=2b43fac2b98fd9b2c12decca18a086f96d068b35", "patch": "@@ -42,12 +42,6 @@ use log;\n \n pub struct CrateLoader<'a> {\n     pub sess: &'a Session,\n-    pub creader: CrateReader<'a>,\n-    cstore: &'a CStore,\n-}\n-\n-pub struct CrateReader<'a> {\n-    sess: &'a Session,\n     cstore: &'a CStore,\n     next_crate_num: CrateNum,\n     foreign_item_map: FnvHashMap<String, Vec<ast::NodeId>>,\n@@ -159,13 +153,13 @@ pub struct Macros {\n     pub dylib: Option<PathBuf>,\n }\n \n-impl<'a> CrateReader<'a> {\n+impl<'a> CrateLoader<'a> {\n     pub fn new(sess: &'a Session,\n                cstore: &'a CStore,\n                local_crate_name: &str,\n                local_crate_config: ast::CrateConfig)\n-               -> CrateReader<'a> {\n-        CrateReader {\n+               -> Self {\n+        CrateLoader {\n             sess: sess,\n             cstore: cstore,\n             next_crate_num: cstore.next_crate_num(),\n@@ -890,7 +884,7 @@ impl<'a> CrateReader<'a> {\n }\n \n impl ExtensionCrate {\n-    fn register(self, creader: &mut CrateReader) {\n+    fn register(self, loader: &mut CrateLoader) {\n         if !self.should_link {\n             return\n         }\n@@ -901,31 +895,17 @@ impl ExtensionCrate {\n         };\n \n         // Register crate now to avoid double-reading metadata\n-        creader.register_crate(&None,\n-                               &self.ident,\n-                               &self.name,\n-                               self.span,\n-                               library,\n-                               true);\n+        loader.register_crate(&None, &self.ident, &self.name, self.span, library, true);\n     }\n }\n \n impl<'a> CrateLoader<'a> {\n-    pub fn new(sess: &'a Session, cstore: &'a CStore, krate: &ast::Crate, crate_name: &str)\n-               -> Self {\n-        let loader = CrateLoader {\n-            sess: sess,\n-            cstore: cstore,\n-            creader: CrateReader::new(sess, cstore, crate_name, krate.config.clone()),\n-        };\n-\n+    pub fn preprocess(&mut self, krate: &ast::Crate) {\n         for attr in krate.attrs.iter().filter(|m| m.name() == \"link_args\") {\n             if let Some(ref linkarg) = attr.value_str() {\n-                loader.cstore.add_used_link_args(&linkarg);\n+                self.cstore.add_used_link_args(&linkarg);\n             }\n         }\n-\n-        loader\n     }\n \n     fn process_foreign_mod(&mut self, i: &ast::Item, fm: &ast::ForeignMod) {\n@@ -982,7 +962,7 @@ impl<'a> CrateLoader<'a> {\n                 Some(name) => name,\n                 None => continue,\n             };\n-            let list = self.creader.foreign_item_map.entry(lib_name.to_string())\n+            let list = self.foreign_item_map.entry(lib_name.to_string())\n                                                     .or_insert(Vec::new());\n             list.extend(fm.items.iter().map(|it| it.id));\n         }\n@@ -991,8 +971,8 @@ impl<'a> CrateLoader<'a> {\n \n impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n     fn postprocess(&mut self, krate: &ast::Crate) {\n-        self.creader.inject_allocator_crate();\n-        self.creader.inject_panic_runtime(krate);\n+        self.inject_allocator_crate();\n+        self.inject_panic_runtime(krate);\n \n         if log_enabled!(log::INFO) {\n             dump_crates(&self.cstore);\n@@ -1001,7 +981,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         for &(ref name, kind) in &self.sess.opts.libs {\n             register_native_lib(self.sess, self.cstore, None, name.clone(), kind);\n         }\n-        self.creader.register_statically_included_foreign_items();\n+        self.register_statically_included_foreign_items();\n     }\n \n     fn process_item(&mut self, item: &ast::Item, definitions: &hir_map::Definitions) {\n@@ -1024,12 +1004,12 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n             }\n         }\n \n-        if let Some(info) = self.creader.extract_crate_info(item) {\n+        if let Some(info) = self.extract_crate_info(item) {\n             if !info.should_link {\n                 return;\n             }\n \n-            let (cnum, ..) = self.creader.resolve_crate(\n+            let (cnum, ..) = self.resolve_crate(\n                 &None, &info.ident, &info.name, None, item.span, PathKind::Crate, true,\n             );\n \n@@ -1038,7 +1018,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n \n             let extern_crate =\n                 ExternCrate { def_id: def_id, span: item.span, direct: true, path_len: len };\n-            self.creader.update_extern_crate(cnum, extern_crate, &mut FnvHashSet());\n+            self.update_extern_crate(cnum, extern_crate, &mut FnvHashSet());\n \n             self.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n         }"}, {"sha": "ddc254a16d9f496a0a7e7b3fc5e07ee974eec468", "filename": "src/librustc_metadata/macro_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b43fac2b98fd9b2c12decca18a086f96d068b35/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b43fac2b98fd9b2c12decca18a086f96d068b35/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=2b43fac2b98fd9b2c12decca18a086f96d068b35", "patch": "@@ -110,7 +110,7 @@ impl<'a> CrateLoader<'a> {\n             if sel.is_empty() && reexport.is_empty() {\n                 // Make sure we can read macros from `#[no_link]` crates.\n                 if no_link {\n-                    self.creader.read_macros(vi);\n+                    self.read_macros(vi);\n                 }\n                 return Vec::new();\n             }\n@@ -122,7 +122,7 @@ impl<'a> CrateLoader<'a> {\n             return Vec::new();\n         }\n \n-        let mut macros = self.creader.read_macros(vi);\n+        let mut macros = self.read_macros(vi);\n         let mut ret = Vec::new();\n         let mut seen = HashSet::new();\n "}, {"sha": "669df3ad95065ae8195e1a1e5e6768be6fef6aa5", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b43fac2b98fd9b2c12decca18a086f96d068b35/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b43fac2b98fd9b2c12decca18a086f96d068b35/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=2b43fac2b98fd9b2c12decca18a086f96d068b35", "patch": "@@ -11,7 +11,7 @@\n //! Used by `rustc` when loading a plugin.\n \n use rustc::session::Session;\n-use rustc_metadata::creader::CrateReader;\n+use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n use registry::Registry;\n \n@@ -33,7 +33,7 @@ pub struct PluginRegistrar {\n \n struct PluginLoader<'a> {\n     sess: &'a Session,\n-    reader: CrateReader<'a>,\n+    reader: CrateLoader<'a>,\n     plugins: Vec<PluginRegistrar>,\n }\n \n@@ -96,7 +96,7 @@ impl<'a> PluginLoader<'a> {\n             -> PluginLoader<'a> {\n         PluginLoader {\n             sess: sess,\n-            reader: CrateReader::new(sess, cstore, crate_name, crate_config),\n+            reader: CrateLoader::new(sess, cstore, crate_name, crate_config),\n             plugins: vec![],\n         }\n     }"}]}