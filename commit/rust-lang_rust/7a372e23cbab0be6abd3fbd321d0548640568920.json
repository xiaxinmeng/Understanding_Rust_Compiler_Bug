{"sha": "7a372e23cbab0be6abd3fbd321d0548640568920", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzcyZTIzY2JhYjBiZTZhYmQzZmJkMzIxZDA1NDg2NDA1Njg5MjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-07T21:26:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-20T14:16:20Z"}, "message": "Require that objects can only be made from Sized types. Fixes #18333.", "tree": {"sha": "8a7ccd1dbf4b3e462e679ebb3eb4a69f5c8261ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a7ccd1dbf4b3e462e679ebb3eb4a69f5c8261ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a372e23cbab0be6abd3fbd321d0548640568920", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a372e23cbab0be6abd3fbd321d0548640568920", "html_url": "https://github.com/rust-lang/rust/commit/7a372e23cbab0be6abd3fbd321d0548640568920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a372e23cbab0be6abd3fbd321d0548640568920/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd5ce5ae2f254cc42763518909f6e7c486d9502a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5ce5ae2f254cc42763518909f6e7c486d9502a", "html_url": "https://github.com/rust-lang/rust/commit/dd5ce5ae2f254cc42763518909f6e7c486d9502a"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "0a47d647890381d27ca17d249f10e1f3649ca03d", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=7a372e23cbab0be6abd3fbd321d0548640568920", "patch": "@@ -94,6 +94,9 @@ pub enum ObligationCauseCode<'tcx> {\n \n     // Types of fields (other than the last) in a struct must be sized.\n     FieldSized,\n+\n+    // Only Sized types can be made into objects\n+    ObjectSized,\n }\n \n pub type Obligations<'tcx> = subst::VecPerParamSpace<Obligation<'tcx>>;"}, {"sha": "704168da1582a8dadaf3322152650ac4e0ee9887", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7a372e23cbab0be6abd3fbd321d0548640568920", "patch": "@@ -1771,12 +1771,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ty::UnsizeVtable(ref ty_trait, self_ty) => {\n                 vtable::check_object_safety(self.tcx(), ty_trait, span);\n+\n                 // If the type is `Foo+'a`, ensures that the type\n                 // being cast to `Foo+'a` implements `Foo`:\n                 vtable::register_object_cast_obligations(self,\n-                                                          span,\n-                                                          ty_trait,\n-                                                          self_ty);\n+                                                         span,\n+                                                         ty_trait,\n+                                                         self_ty);\n \n                 // If the type is `Foo+'a`, ensures that the type\n                 // being cast to `Foo+'a` outlives `'a`:"}, {"sha": "1619a4224f9f02218fd92562dc2e02c723e0ac7a", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=7a372e23cbab0be6abd3fbd321d0548640568920", "patch": "@@ -21,6 +21,7 @@ use middle::typeck::infer;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::Span;\n+use util::common::ErrorReported;\n use util::ppaux::{UserString, Repr, ty_to_string};\n \n pub fn check_object_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n@@ -238,6 +239,20 @@ pub fn register_object_cast_obligations<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                                   referent_ty: Ty<'tcx>)\n                                                   -> Rc<ty::TraitRef<'tcx>>\n {\n+    // We can only make objects from sized types.\n+    let sized_obligation =\n+        traits::obligation_for_builtin_bound(\n+            fcx.tcx(),\n+            traits::ObligationCause::new(span, traits::ObjectSized),\n+            referent_ty,\n+            ty::BoundSized);\n+    match sized_obligation {\n+        Ok(sized_obligation) => {\n+            fcx.register_obligation(sized_obligation);\n+        }\n+        Err(ErrorReported) => { }\n+    }\n+\n     // This is just for better error reporting. Kinda goofy. The object type stuff\n     // needs some refactoring so there is a more convenient type to pass around.\n     let object_trait_ty =\n@@ -543,5 +558,9 @@ fn note_obligation_cause<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                        \"only the last field of a struct or enum variant \\\n                        may have a dynamically sized type\")\n         }\n+        traits::ObjectSized => {\n+            span_note!(tcx.sess, obligation.cause.span,\n+                       \"only sized types can be made into objects\");\n+        }\n     }\n }"}, {"sha": "e2fa02584f4fd70be3c9db8a37837be299b13ee6", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=7a372e23cbab0be6abd3fbd321d0548640568920", "patch": "@@ -20,7 +20,8 @@ use syntax::ast;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-// An error has already been reported to the user, so no need to continue checking.\n+// Useful type to use with `Result<>` indicate that an error has already\n+// been reported to the user, so no need to continue checking.\n #[deriving(Clone,Show)]\n pub struct ErrorReported;\n "}, {"sha": "e40cc342c0b4914c4cdda370bf5bbaa3a0b77a4b", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=7a372e23cbab0be6abd3fbd321d0548640568920", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we cannot create objects from unsized types.\n+\n+trait Foo for Sized? {}\n+impl Foo for str {}\n+\n+fn test<Sized? T: Foo>(t: &T) {\n+    let u: &Foo = t;\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `T`\n+\n+    let v: &Foo = t as &Foo;\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `T`\n+}\n+\n+fn main() {\n+    let _: &[&Foo] = &[\"hi\"];\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `str`\n+\n+    let _: &Foo = \"hi\" as &Foo;\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `str`\n+}"}, {"sha": "01a15023fbaada5f68e74d61ceb027b95b5d2c00", "filename": "src/test/compile-fail/issue-14366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a372e23cbab0be6abd3fbd321d0548640568920/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs?ref=7a372e23cbab0be6abd3fbd321d0548640568920", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     let _x = \"test\" as &::std::any::Any;\n //~^ ERROR the trait `core::kinds::Sized` is not implemented for the type `str`\n-//~^^ NOTE the trait `core::kinds::Sized` must be implemented for the cast to the object type\n+//~^^ ERROR the trait `core::kinds::Sized` is not implemented for the type `str`\n }"}]}