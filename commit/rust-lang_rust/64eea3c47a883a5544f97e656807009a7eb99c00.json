{"sha": "64eea3c47a883a5544f97e656807009a7eb99c00", "node_id": "C_kwDOAAsO6NoAKDY0ZWVhM2M0N2E4ODNhNTU0NGY5N2U2NTY4MDcwMDlhN2ViOTljMDA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-07T22:26:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-08T01:58:15Z"}, "message": "Tweak E0740", "tree": {"sha": "7198c696ee022872628217e2549eac943f4553f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7198c696ee022872628217e2549eac943f4553f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64eea3c47a883a5544f97e656807009a7eb99c00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64eea3c47a883a5544f97e656807009a7eb99c00", "html_url": "https://github.com/rust-lang/rust/commit/64eea3c47a883a5544f97e656807009a7eb99c00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64eea3c47a883a5544f97e656807009a7eb99c00/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e5a77b069dc55481fef6a415c5bb8f056c00c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e5a77b069dc55481fef6a415c5bb8f056c00c9", "html_url": "https://github.com/rust-lang/rust/commit/08e5a77b069dc55481fef6a415c5bb8f056c00c9"}], "stats": {"total": 147, "additions": 81, "deletions": 66}, "files": [{"sha": "44580a468536d5f781726a3f87cf37fd40c89e18", "filename": "compiler/rustc_hir_analysis/locales/en-US.ftl", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64eea3c47a883a5544f97e656807009a7eb99c00/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/64eea3c47a883a5544f97e656807009a7eb99c00/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl?ref=64eea3c47a883a5544f97e656807009a7eb99c00", "patch": "@@ -163,3 +163,10 @@ hir_analysis_pass_to_variadic_function = can't pass `{$ty}` to variadic function\n     .help = cast the value to `{$cast_ty}`\n \n hir_analysis_cast_thin_pointer_to_fat_pointer = cannot cast thin pointer `{$expr_ty}` to fat pointer `{$cast_ty}`\n+\n+hir_analysis_invalid_union_field =\n+    field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n+    .note = union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+\n+hir_analysis_invalid_union_field_sugg =\n+    wrap the field type in `ManuallyDrop<...>`"}, {"sha": "be0ae4ce2ef694e632f58cfe23afd44840ec6b95", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/64eea3c47a883a5544f97e656807009a7eb99c00/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eea3c47a883a5544f97e656807009a7eb99c00/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=64eea3c47a883a5544f97e656807009a7eb99c00", "patch": "@@ -1,5 +1,5 @@\n use crate::check::intrinsicck::InlineAsmCtxt;\n-use crate::errors::LinkageType;\n+use crate::errors::{self, LinkageType};\n \n use super::compare_impl_item::check_type_bounds;\n use super::compare_impl_item::{compare_impl_method, compare_impl_ty};\n@@ -133,26 +133,14 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n                     Some(Node::Field(field)) => (field.span, field.ty.span),\n                     _ => unreachable!(\"mir field has to correspond to hir field\"),\n                 };\n-                struct_span_err!(\n-                    tcx.sess,\n+                tcx.sess.emit_err(errors::InvalidUnionField {\n                     field_span,\n-                    E0740,\n-                    \"unions cannot contain fields that may need dropping\"\n-                )\n-                .note(\n-                    \"a type is guaranteed not to need dropping \\\n-                    when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\",\n-                )\n-                .multipart_suggestion_verbose(\n-                    \"when the type does not implement `Copy`, \\\n-                    wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\",\n-                    vec![\n-                        (ty_span.shrink_to_lo(), \"std::mem::ManuallyDrop<\".into()),\n-                        (ty_span.shrink_to_hi(), \">\".into()),\n-                    ],\n-                    Applicability::MaybeIncorrect,\n-                )\n-                .emit();\n+                    sugg: errors::InvalidUnionFieldSuggestion {\n+                        lo: ty_span.shrink_to_lo(),\n+                        hi: ty_span.shrink_to_hi(),\n+                    },\n+                    note: (),\n+                });\n                 return false;\n             } else if field_ty.needs_drop(tcx, param_env) {\n                 // This should never happen. But we can get here e.g. in case of name resolution errors."}, {"sha": "dd40706f1d34580884bd8e6f598d3b36974b9c65", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/64eea3c47a883a5544f97e656807009a7eb99c00/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eea3c47a883a5544f97e656807009a7eb99c00/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=64eea3c47a883a5544f97e656807009a7eb99c00", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::{\n     error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic,\n     MultiSpan,\n };\n-use rustc_macros::Diagnostic;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n@@ -430,3 +430,23 @@ pub(crate) struct CastThinPointerToFatPointer<'tcx> {\n     pub expr_ty: Ty<'tcx>,\n     pub cast_ty: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_invalid_union_field, code = \"E0740\")]\n+pub(crate) struct InvalidUnionField {\n+    #[primary_span]\n+    pub field_span: Span,\n+    #[subdiagnostic]\n+    pub sugg: InvalidUnionFieldSuggestion,\n+    #[note]\n+    pub note: (),\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(hir_analysis_invalid_union_field_sugg, applicability = \"machine-applicable\")]\n+pub(crate) struct InvalidUnionFieldSuggestion {\n+    #[suggestion_part(code = \"std::mem::ManuallyDrop<\")]\n+    pub lo: Span,\n+    #[suggestion_part(code = \">\")]\n+    pub hi: Span,\n+}"}, {"sha": "bb4eccb4cf896a93124cca2db73635252399d7e2", "filename": "tests/ui/union/field_checks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Ffield_checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Ffield_checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Ffield_checks.rs?ref=64eea3c47a883a5544f97e656807009a7eb99c00", "patch": "@@ -21,15 +21,15 @@ union U24<T> { // OK\n }\n \n union U3 {\n-    a: String, //~ ERROR unions cannot contain fields that may need dropping\n+    a: String, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union U32 { // field that does not drop but is not `Copy`, either\n-    a: std::cell::RefCell<i32>, //~ ERROR unions cannot contain fields that may need dropping\n+    a: std::cell::RefCell<i32>, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union U4<T> {\n-    a: T, //~ ERROR unions cannot contain fields that may need dropping\n+    a: T, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union U5 { // Having a drop impl is OK\n@@ -41,11 +41,11 @@ impl Drop for U5 {\n }\n \n union U5Nested { // a nested union that drops is NOT OK\n-    nest: U5, //~ ERROR unions cannot contain fields that may need dropping\n+    nest: U5, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union U5Nested2 { // for now we don't special-case empty arrays\n-    nest: [U5; 0], //~ ERROR unions cannot contain fields that may need dropping\n+    nest: [U5; 0], //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union U6 { // OK"}, {"sha": "32407a749709cd5b6885201d8536ff944dce9a7d", "filename": "tests/ui/union/field_checks.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Ffield_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Ffield_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Ffield_checks.stderr?ref=64eea3c47a883a5544f97e656807009a7eb99c00", "patch": "@@ -1,59 +1,59 @@\n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/field_checks.rs:24:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/field_checks.rs:28:5\n    |\n LL |     a: std::cell::RefCell<i32>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<std::cell::RefCell<i32>>,\n    |        +++++++++++++++++++++++                       +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/field_checks.rs:32:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/field_checks.rs:44:5\n    |\n LL |     nest: U5,\n    |     ^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     nest: std::mem::ManuallyDrop<U5>,\n    |           +++++++++++++++++++++++  +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/field_checks.rs:48:5\n    |\n LL |     nest: [U5; 0],\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     nest: std::mem::ManuallyDrop<[U5; 0]>,\n    |           +++++++++++++++++++++++       +"}, {"sha": "f7a82b4e7cf5d17ab806a44c4a9d893a1e0c0452", "filename": "tests/ui/union/issue-41073.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Fissue-41073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Fissue-41073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Fissue-41073.rs?ref=64eea3c47a883a5544f97e656807009a7eb99c00", "patch": "@@ -1,5 +1,5 @@\n union Test {\n-    a: A, //~ ERROR unions cannot contain fields that may need dropping\n+    a: A, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n     b: B\n }\n "}, {"sha": "ae1c4dfed9a2340bb6c4825d16542b98a9cb3a64", "filename": "tests/ui/union/issue-41073.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Fissue-41073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Fissue-41073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Fissue-41073.stderr?ref=64eea3c47a883a5544f97e656807009a7eb99c00", "patch": "@@ -1,11 +1,11 @@\n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/issue-41073.rs:2:5\n    |\n LL |     a: A,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<A>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "9861a21cb3d8f5122068ad1de5e31007f6b9451a", "filename": "tests/ui/union/union-with-drop-fields.mirunsafeck.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr?ref=64eea3c47a883a5544f97e656807009a7eb99c00", "patch": "@@ -1,35 +1,35 @@\n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:11:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<S>,\n    |        +++++++++++++++++++++++ +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "9720830fb1ff2ca836e1c0b101f5d729b379c7db", "filename": "tests/ui/union/union-with-drop-fields.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Funion-with-drop-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Funion-with-drop-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-with-drop-fields.rs?ref=64eea3c47a883a5544f97e656807009a7eb99c00", "patch": "@@ -8,20 +8,20 @@ union U {\n }\n \n union W {\n-    a: String, //~ ERROR unions cannot contain fields that may need dropping\n+    a: String, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n     b: String, // OK, only one field is reported\n }\n \n struct S(String);\n \n // `S` doesn't implement `Drop` trait, but still has non-trivial destructor\n union Y {\n-    a: S, //~ ERROR unions cannot contain fields that may need dropping\n+    a: S, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n // We don't know if `T` is trivially-destructable or not until trans\n union J<T> {\n-    a: T, //~ ERROR unions cannot contain fields that may need dropping\n+    a: T, //~ ERROR field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n }\n \n union H<T: Copy> {"}, {"sha": "9861a21cb3d8f5122068ad1de5e31007f6b9451a", "filename": "tests/ui/union/union-with-drop-fields.thirunsafeck.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64eea3c47a883a5544f97e656807009a7eb99c00/tests%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr?ref=64eea3c47a883a5544f97e656807009a7eb99c00", "patch": "@@ -1,35 +1,35 @@\n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:11:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<S>,\n    |        +++++++++++++++++++++++ +\n \n-error[E0740]: unions cannot contain fields that may need dropping\n+error[E0740]: field must implement `Copy` or be wrapped in `ManuallyDrop<...>` to be used in a union\n   --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n-help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n+   = note: union fields must not have drop side-effects, which is currently enforced via either `Copy` or `ManuallyDrop<...>`\n+help: wrap the field type in `ManuallyDrop<...>`\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +"}]}