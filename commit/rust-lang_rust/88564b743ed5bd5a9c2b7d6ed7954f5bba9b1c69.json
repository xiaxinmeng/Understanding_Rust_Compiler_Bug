{"sha": "88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NTY0Yjc0M2VkNWJkNWE5YzJiN2Q2ZWQ3OTU0ZjViYmE5YjFjNjk=", "commit": {"author": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2018-10-19T22:04:15Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2018-12-21T03:45:37Z"}, "message": "Teach `suspicious_else_formatting` about `if .. {..} {..}`", "tree": {"sha": "3d52524e9521152dfb528da010ed2fcbb7b64198", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d52524e9521152dfb528da010ed2fcbb7b64198"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFIBAABCAAyFiEE30PRORiHa0gkBHJnH7R33dJ4Ic4FAlwcYeEUHGhtcGVyc29u\nMUBnbWFpbC5jb20ACgkQH7R33dJ4Ic78gwf+K3whdvKO4VCGBpQYy68QbjAlivfs\nVtphvH1/8N3uZ+DNixNKWJn1mhO/1mxjcJZ8EA9Ix9EjV7bA/rGP4RINLWSV4omt\norxcxfpMnrEeW/c5cSiOPkX9RBfCzE5CEOEniKSFXqpFB2FiVwSOFxdFEq1HguPJ\n+2vNV6sgCAhWQK89v7jNtytmzKxwp+CiA4pgYZVykIv9VDXvzwfpWOm4PofvgtG0\n6P21KANkZotalBxUF5VilVhBMDUHmhKHHa+WlRBvBNWFAv3jdU0QeAMfvKVouf1J\nDbf6Jx6jWZiXw1q6l620hSAs25TLNajR+9mb4+WzFonEP6u93chMdzvpTg==\n=t7Qo\n-----END PGP SIGNATURE-----", "payload": "tree 3d52524e9521152dfb528da010ed2fcbb7b64198\nparent 80c07d4c28c16f87fc7bf5a972e90d2037a9a691\nauthor HMPerson1 <hmperson1@gmail.com> 1539986655 -0400\ncommitter HMPerson1 <hmperson1@gmail.com> 1545363937 -0500\n\nTeach `suspicious_else_formatting` about `if .. {..} {..}`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69", "html_url": "https://github.com/rust-lang/rust/commit/88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80c07d4c28c16f87fc7bf5a972e90d2037a9a691", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c07d4c28c16f87fc7bf5a972e90d2037a9a691", "html_url": "https://github.com/rust-lang/rust/commit/80c07d4c28c16f87fc7bf5a972e90d2037a9a691"}], "stats": {"total": 219, "additions": 155, "deletions": 64}, "files": [{"sha": "1fae0974d952216d6ec249fc5fc801acf69395df", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 50, "deletions": 17, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69", "patch": "@@ -31,8 +31,8 @@ declare_clippy_lint! {\n     \"suspicious formatting of `*=`, `-=` or `!=`\"\n }\n \n-/// **What it does:** Checks for formatting of `else if`. It lints if the `else`\n-/// and `if` are not on the same line or the `else` seems to be missing.\n+/// **What it does:** Checks for formatting of `else`. It lints if the `else`\n+/// is followed immediately by a newline or the `else` seems to be missing.\n ///\n /// **Why is this bad?** This is probably some refactoring remnant, even if the\n /// code is correct, it might look confusing.\n@@ -42,19 +42,29 @@ declare_clippy_lint! {\n /// **Example:**\n /// ```rust,ignore\n /// if foo {\n+/// } { // looks like an `else` is missing here\n+/// }\n+///\n+/// if foo {\n /// } if bar { // looks like an `else` is missing here\n /// }\n ///\n /// if foo {\n /// } else\n ///\n+/// { // this is the `else` block of the previous `if`, but should it be?\n+/// }\n+///\n+/// if foo {\n+/// } else\n+///\n /// if bar { // this is the `else` block of the previous `if`, but should it be?\n /// }\n /// ```\n declare_clippy_lint! {\n     pub SUSPICIOUS_ELSE_FORMATTING,\n     style,\n-    \"suspicious formatting of `else if`\"\n+    \"suspicious formatting of `else`\"\n }\n \n /// **What it does:** Checks for possible missing comma in an array. It lints if\n@@ -96,7 +106,7 @@ impl EarlyLintPass for Formatting {\n             match (&w[0].node, &w[1].node) {\n                 (&ast::StmtKind::Expr(ref first), &ast::StmtKind::Expr(ref second))\n                 | (&ast::StmtKind::Expr(ref first), &ast::StmtKind::Semi(ref second)) => {\n-                    check_consecutive_ifs(cx, first, second);\n+                    check_missing_else(cx, first, second);\n                 },\n                 _ => (),\n             }\n@@ -105,7 +115,7 @@ impl EarlyLintPass for Formatting {\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n         check_assign(cx, expr);\n-        check_else_if(cx, expr);\n+        check_else(cx, expr);\n         check_array(cx, expr);\n     }\n }\n@@ -139,10 +149,13 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     }\n }\n \n-/// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for weird `else if`.\n-fn check_else_if(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n+/// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for weird `else`.\n+fn check_else(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     if let Some((then, &Some(ref else_))) = unsugar_if(expr) {\n-        if unsugar_if(else_).is_some() && !differing_macro_contexts(then.span, else_.span) && !in_macro(then.span) {\n+        if (is_block(else_) || unsugar_if(else_).is_some())\n+            && !differing_macro_contexts(then.span, else_.span)\n+            && !in_macro(then.span)\n+        {\n             // this will be a span from the closing \u2018}\u2019 of the \u201cthen\u201d block (excluding) to\n             // the\n             // \u201cif\u201d of the \u201celse if\u201d block (excluding)\n@@ -154,14 +167,19 @@ fn check_else_if(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n                 let else_pos = else_snippet.find(\"else\").expect(\"there must be a `else` here\");\n \n                 if else_snippet[else_pos..].contains('\\n') {\n+                    let else_desc = if unsugar_if(else_).is_some() { \"if\" } else { \"{..}\" };\n+\n                     span_note_and_lint(\n                         cx,\n                         SUSPICIOUS_ELSE_FORMATTING,\n                         else_span,\n-                        \"this is an `else if` but the formatting might hide it\",\n+                        &format!(\"this is an `else {}` but the formatting might hide it\", else_desc),\n                         else_span,\n-                        \"to remove this lint, remove the `else` or remove the new line between `else` \\\n-                         and `if`\",\n+                        &format!(\n+                            \"to remove this lint, remove the `else` or remove the new line between \\\n+                             `else` and `{}`\",\n+                            else_desc,\n+                        ),\n                     );\n                 }\n             }\n@@ -200,32 +218,47 @@ fn check_array(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     }\n }\n \n-/// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for consecutive ifs.\n-fn check_consecutive_ifs(cx: &EarlyContext<'_>, first: &ast::Expr, second: &ast::Expr) {\n+fn check_missing_else(cx: &EarlyContext<'_>, first: &ast::Expr, second: &ast::Expr) {\n     if !differing_macro_contexts(first.span, second.span)\n         && !in_macro(first.span)\n         && unsugar_if(first).is_some()\n-        && unsugar_if(second).is_some()\n+        && (is_block(second) || unsugar_if(second).is_some())\n     {\n         // where the else would be\n         let else_span = first.span.between(second.span);\n \n         if let Some(else_snippet) = snippet_opt(cx, else_span) {\n             if !else_snippet.contains('\\n') {\n+                let (looks_like, next_thing) = if unsugar_if(second).is_some() {\n+                    (\"an `else if`\", \"the second `if`\")\n+                } else {\n+                    (\"an `else {..}`\", \"the next block\")\n+                };\n+\n                 span_note_and_lint(\n                     cx,\n                     SUSPICIOUS_ELSE_FORMATTING,\n                     else_span,\n-                    \"this looks like an `else if` but the `else` is missing\",\n+                    &format!(\"this looks like {} but the `else` is missing\", looks_like),\n                     else_span,\n-                    \"to remove this lint, add the missing `else` or add a new line before the second \\\n-                     `if`\",\n+                    &format!(\n+                        \"to remove this lint, add the missing `else` or add a new line before {}\",\n+                        next_thing,\n+                    ),\n                 );\n             }\n         }\n     }\n }\n \n+fn is_block(expr: &ast::Expr) -> bool {\n+    if let ast::ExprKind::Block(..) = expr.node {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n /// Match `if` or `if let` expressions and return the `then` and `else` block.\n fn unsugar_if(expr: &ast::Expr) -> Option<(&P<ast::Block>, &Option<P<ast::Expr>>)> {\n     match expr.node {"}, {"sha": "b74f778b129dfb17344706756b60619d54bb9fd1", "filename": "tests/ui/formatting.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69", "patch": "@@ -16,7 +16,11 @@\n fn foo() -> bool { true }\n \n fn main() {\n-    // weird `else if` formatting:\n+    // weird `else` formatting:\n+    if foo() {\n+    } {\n+    }\n+\n     if foo() {\n     } if foo() {\n     }\n@@ -41,6 +45,17 @@ fn main() {\n         let _ = 0;\n     };\n \n+    if foo() {\n+    } else\n+    {\n+    }\n+\n+    if foo() {\n+    }\n+    else\n+    {\n+    }\n+\n     if foo() {\n     } else\n     if foo() { // the span of the above error should continue here\n@@ -53,6 +68,20 @@ fn main() {\n     }\n \n     // those are ok:\n+    if foo() {\n+    }\n+    {\n+    }\n+\n+    if foo() {\n+    } else {\n+    }\n+\n+    if foo() {\n+    }\n+    else {\n+    }\n+\n     if foo() {\n     }\n     if foo() {"}, {"sha": "9f00a51bc1fd4a985c9e92ab9b92f96b807d6199", "filename": "tests/ui/formatting.stderr", "status": "modified", "additions": 75, "deletions": 46, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=88564b743ed5bd5a9c2b7d6ed7954f5bba9b1c69", "patch": "@@ -1,90 +1,119 @@\n-error: this looks like an `else if` but the `else` is missing\n+error: this looks like an `else {..}` but the `else` is missing\n   --> $DIR/formatting.rs:21:6\n    |\n-21 |     } if foo() {\n+21 |     } {\n    |      ^\n    |\n    = note: `-D clippy::suspicious-else-formatting` implied by `-D warnings`\n+   = note: to remove this lint, add the missing `else` or add a new line before the next block\n+\n+error: this looks like an `else if` but the `else` is missing\n+  --> $DIR/formatting.rs:25:6\n+   |\n+25 |     } if foo() {\n+   |      ^\n+   |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n error: this looks like an `else if` but the `else` is missing\n-  --> $DIR/formatting.rs:28:10\n+  --> $DIR/formatting.rs:32:10\n    |\n-28 |         } if foo() {\n+32 |         } if foo() {\n    |          ^\n    |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n error: this looks like an `else if` but the `else` is missing\n-  --> $DIR/formatting.rs:36:10\n+  --> $DIR/formatting.rs:40:10\n    |\n-36 |         } if foo() {\n+40 |         } if foo() {\n    |          ^\n    |\n    = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n \n+error: this is an `else {..}` but the formatting might hide it\n+  --> $DIR/formatting.rs:49:6\n+   |\n+49 |       } else\n+   |  ______^\n+50 | |     {\n+   | |____^\n+   |\n+   = note: to remove this lint, remove the `else` or remove the new line between `else` and `{..}`\n+\n+error: this is an `else {..}` but the formatting might hide it\n+  --> $DIR/formatting.rs:54:6\n+   |\n+54 |       }\n+   |  ______^\n+55 | |     else\n+56 | |     {\n+   | |____^\n+   |\n+   = note: to remove this lint, remove the `else` or remove the new line between `else` and `{..}`\n+\n error: this is an `else if` but the formatting might hide it\n-  --> $DIR/formatting.rs:45:6\n+  --> $DIR/formatting.rs:60:6\n    |\n-45 |       } else\n+60 |       } else\n    |  ______^\n-46 | |     if foo() { // the span of the above error should continue here\n+61 | |     if foo() { // the span of the above error should continue here\n    | |____^\n    |\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n \n error: this is an `else if` but the formatting might hide it\n-  --> $DIR/formatting.rs:50:6\n+  --> $DIR/formatting.rs:65:6\n    |\n-50 |       }\n+65 |       }\n    |  ______^\n-51 | |     else\n-52 | |     if foo() { // the span of the above error should continue here\n+66 | |     else\n+67 | |     if foo() { // the span of the above error should continue here\n    | |____^\n    |\n    = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n \n error: this looks like you are trying to use `.. -= ..`, but you really are doing `.. = (- ..)`\n-  --> $DIR/formatting.rs:77:6\n-   |\n-77 |     a =- 35;\n-   |      ^^^^\n-   |\n-   = note: `-D clippy::suspicious-assignment-formatting` implied by `-D warnings`\n-   = note: to remove this lint, use either `-=` or `= -`\n+   --> $DIR/formatting.rs:106:6\n+    |\n+106 |     a =- 35;\n+    |      ^^^^\n+    |\n+    = note: `-D clippy::suspicious-assignment-formatting` implied by `-D warnings`\n+    = note: to remove this lint, use either `-=` or `= -`\n \n error: this looks like you are trying to use `.. *= ..`, but you really are doing `.. = (* ..)`\n-  --> $DIR/formatting.rs:78:6\n-   |\n-78 |     a =* &191;\n-   |      ^^^^\n-   |\n-   = note: to remove this lint, use either `*=` or `= *`\n+   --> $DIR/formatting.rs:107:6\n+    |\n+107 |     a =* &191;\n+    |      ^^^^\n+    |\n+    = note: to remove this lint, use either `*=` or `= *`\n \n error: this looks like you are trying to use `.. != ..`, but you really are doing `.. = (! ..)`\n-  --> $DIR/formatting.rs:81:6\n-   |\n-81 |     b =! false;\n-   |      ^^^^\n-   |\n-   = note: to remove this lint, use either `!=` or `= !`\n+   --> $DIR/formatting.rs:110:6\n+    |\n+110 |     b =! false;\n+    |      ^^^^\n+    |\n+    = note: to remove this lint, use either `!=` or `= !`\n \n error: possibly missing a comma here\n-  --> $DIR/formatting.rs:90:19\n-   |\n-90 |         -1, -2, -3 // <= no comma here\n-   |                   ^\n-   |\n-   = note: `-D clippy::possible-missing-comma` implied by `-D warnings`\n-   = note: to remove this lint, add a comma or write the expr in a single line\n+   --> $DIR/formatting.rs:119:19\n+    |\n+119 |         -1, -2, -3 // <= no comma here\n+    |                   ^\n+    |\n+    = note: `-D clippy::possible-missing-comma` implied by `-D warnings`\n+    = note: to remove this lint, add a comma or write the expr in a single line\n \n error: possibly missing a comma here\n-  --> $DIR/formatting.rs:94:19\n-   |\n-94 |         -1, -2, -3 // <= no comma here\n-   |                   ^\n-   |\n-   = note: to remove this lint, add a comma or write the expr in a single line\n+   --> $DIR/formatting.rs:123:19\n+    |\n+123 |         -1, -2, -3 // <= no comma here\n+    |                   ^\n+    |\n+    = note: to remove this lint, add a comma or write the expr in a single line\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 13 previous errors\n "}]}