{"sha": "1152e70363702919a729b9a83eb7550c9392d306", "node_id": "C_kwDOAAsO6NoAKDExNTJlNzAzNjM3MDI5MTlhNzI5YjlhODNlYjc1NTBjOTM5MmQzMDY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-23T20:09:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-25T03:39:22Z"}, "message": "Deeply deny fn and raw ptrs in const generics", "tree": {"sha": "da086a5691459e0234ab2430f3cef618c4365a94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da086a5691459e0234ab2430f3cef618c4365a94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1152e70363702919a729b9a83eb7550c9392d306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1152e70363702919a729b9a83eb7550c9392d306", "html_url": "https://github.com/rust-lang/rust/commit/1152e70363702919a729b9a83eb7550c9392d306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1152e70363702919a729b9a83eb7550c9392d306/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "babff2211e3ae9ef52852dc1b01f3eacdd94c12e", "url": "https://api.github.com/repos/rust-lang/rust/commits/babff2211e3ae9ef52852dc1b01f3eacdd94c12e", "html_url": "https://github.com/rust-lang/rust/commit/babff2211e3ae9ef52852dc1b01f3eacdd94c12e"}], "stats": {"total": 208, "additions": 147, "deletions": 61}, "files": [{"sha": "b97dd1ae8d592249ce00016eedbb98ca27028073", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -226,7 +226,7 @@ impl Qualif for CustomEq {\n         // because that component may be part of an enum variant (e.g.,\n         // `Option::<NonStructuralMatchTy>::Some`), in which case some values of this type may be\n         // structural-match (`Option::None`).\n-        traits::search_for_structural_match_violation(cx.body.span, cx.tcx, ty, true).is_some()\n+        traits::search_for_structural_match_violation(cx.body.span, cx.tcx, ty, false).is_some()\n     }\n \n     fn in_adt_inherently<'tcx>("}, {"sha": "f8792edc017b2d8d3a5da6affae1e10302511dce", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -203,7 +203,7 @@ impl<'tcx> Const<'tcx> {\n     pub fn to_valtree(self) -> ty::ValTree<'tcx> {\n         match self.kind() {\n             ty::ConstKind::Value(valtree) => valtree,\n-            _ => bug!(\"expected ConstKind::Value\"),\n+            _ => bug!(\"expected ConstKind::Value, got {:?}\", self.kind()),\n         }\n     }\n "}, {"sha": "44faed3fa9fb9790cb7218c7cb591e8d53709ce8", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n     }\n \n     fn search_for_structural_match_violation(&self, ty: Ty<'tcx>) -> Option<String> {\n-        traits::search_for_structural_match_violation(self.span, self.tcx(), ty, true).map(\n+        traits::search_for_structural_match_violation(self.span, self.tcx(), ty, false).map(\n             |non_sm_ty| {\n                 with_no_trimmed_paths!(match non_sm_ty.kind {\n                     traits::NonStructuralMatchTyKind::Adt(adt) => self.adt_derive_msg(adt),\n@@ -139,6 +139,12 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     traits::NonStructuralMatchTyKind::Float => {\n                         \"floating-point numbers cannot be used in patterns\".to_string()\n                     }\n+                    traits::NonStructuralMatchTyKind::FnPtr => {\n+                        \"function pointers cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTyKind::RawPtr => {\n+                        \"raw pointers cannot be used in patterns\".to_string()\n+                    }\n                     traits::NonStructuralMatchTyKind::Param => {\n                         bug!(\"use of a constant whose type is a parameter inside a pattern\")\n                     }"}, {"sha": "25a66bb9d08afa1abc8b7fa206eed65384bb39f8", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 47, "deletions": 23, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -27,6 +27,8 @@ pub enum NonStructuralMatchTyKind<'tcx> {\n     Generator,\n     Projection,\n     Float,\n+    FnPtr,\n+    RawPtr,\n }\n \n /// This method traverses the structure of `ty`, trying to find an\n@@ -55,14 +57,15 @@ pub enum NonStructuralMatchTyKind<'tcx> {\n /// that arose when the requirement was not enforced completely, see\n /// Rust RFC 1445, rust-lang/rust#61188, and rust-lang/rust#62307.\n ///\n-/// The floats_allowed flag is used to deny constants in floating point\n+/// When the `valtree_semantics` flag is set, then we also deny additional\n+/// types that are not evaluatable to valtrees, such as floats and fn ptrs.\n pub fn search_for_structural_match_violation<'tcx>(\n     span: Span,\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n-    floats_allowed: bool,\n+    valtree_semantics: bool,\n ) -> Option<NonStructuralMatchTy<'tcx>> {\n-    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default(), floats_allowed })\n+    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default(), valtree_semantics })\n         .break_value()\n }\n \n@@ -125,7 +128,9 @@ struct Search<'tcx> {\n     /// we will not recur on them again.\n     seen: FxHashSet<hir::def_id::DefId>,\n \n-    floats_allowed: bool,\n+    // Additionally deny things that have been allowed in patterns,\n+    // but are not evaluatable to a valtree, such as floats and fn ptrs.\n+    valtree_semantics: bool,\n }\n \n impl<'tcx> Search<'tcx> {\n@@ -170,24 +175,7 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n                 let kind = NonStructuralMatchTyKind::Generator;\n                 return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n-            ty::RawPtr(..) => {\n-                // structural-match ignores substructure of\n-                // `*const _`/`*mut _`, so skip `super_visit_with`.\n-                //\n-                // For example, if you have:\n-                // ```\n-                // struct NonStructural;\n-                // #[derive(PartialEq, Eq)]\n-                // struct T(*const NonStructural);\n-                // const C: T = T(std::ptr::null());\n-                // ```\n-                //\n-                // Even though `NonStructural` does not implement `PartialEq`,\n-                // structural equality on `T` does not recur into the raw\n-                // pointer. Therefore, one can still use `C` in a pattern.\n-                return ControlFlow::CONTINUE;\n-            }\n-            ty::FnDef(..) | ty::FnPtr(..) => {\n+            ty::FnDef(..) => {\n                 // Types of formals and return in `fn(_) -> _` are also irrelevant;\n                 // so we do not recur into them via `super_visit_with`\n                 return ControlFlow::CONTINUE;\n@@ -206,8 +194,44 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n                 return ControlFlow::CONTINUE;\n             }\n \n+            ty::FnPtr(..) => {\n+                if !self.valtree_semantics {\n+                    return ControlFlow::CONTINUE;\n+                } else {\n+                    return ControlFlow::Break(NonStructuralMatchTy {\n+                        ty,\n+                        kind: NonStructuralMatchTyKind::FnPtr,\n+                    });\n+                }\n+            }\n+\n+            ty::RawPtr(..) => {\n+                if !self.valtree_semantics {\n+                    // structural-match ignores substructure of\n+                    // `*const _`/`*mut _`, so skip `super_visit_with`.\n+                    //\n+                    // For example, if you have:\n+                    // ```\n+                    // struct NonStructural;\n+                    // #[derive(PartialEq, Eq)]\n+                    // struct T(*const NonStructural);\n+                    // const C: T = T(std::ptr::null());\n+                    // ```\n+                    //\n+                    // Even though `NonStructural` does not implement `PartialEq`,\n+                    // structural equality on `T` does not recur into the raw\n+                    // pointer. Therefore, one can still use `C` in a pattern.\n+                    return ControlFlow::CONTINUE;\n+                } else {\n+                    return ControlFlow::Break(NonStructuralMatchTy {\n+                        ty,\n+                        kind: NonStructuralMatchTyKind::FnPtr,\n+                    });\n+                }\n+            }\n+\n             ty::Float(_) => {\n-                if self.floats_allowed {\n+                if !self.valtree_semantics {\n                     return ControlFlow::CONTINUE;\n                 } else {\n                     return ControlFlow::Break(NonStructuralMatchTy {"}, {"sha": "324b229fa5941a58191267c0c90a7e019288195e", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -848,29 +848,13 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n             let ty = tcx.type_of(tcx.hir().local_def_id(param.hir_id));\n \n             if tcx.features().adt_const_params {\n-                let err = match ty.peel_refs().kind() {\n-                    ty::FnPtr(_) => Some(\"function pointers\"),\n-                    ty::RawPtr(_) => Some(\"raw pointers\"),\n-                    _ => None,\n-                };\n-\n-                if let Some(unsupported_type) = err {\n-                    tcx.sess.span_err(\n-                        hir_ty.span,\n-                        &format!(\n-                            \"using {} as const generic parameters is forbidden\",\n-                            unsupported_type\n-                        ),\n-                    );\n-                }\n-\n                 if let Some(non_structural_match_ty) =\n-                    traits::search_for_structural_match_violation(param.span, tcx, ty, false)\n+                    traits::search_for_structural_match_violation(param.span, tcx, ty, true)\n                 {\n                     // We use the same error code in both branches, because this is really the same\n                     // issue: we just special-case the message for type parameters to make it\n                     // clearer.\n-                    match ty.peel_refs().kind() {\n+                    match non_structural_match_ty.ty.kind() {\n                         ty::Param(_) => {\n                             // Const parameters may not have type parameters as their types,\n                             // because we cannot be sure that the type parameter derives `PartialEq`\n@@ -902,6 +886,24 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                             .note(\"floats do not derive `Eq` or `Ord`, which are required for const parameters\")\n                             .emit();\n                         }\n+                        ty::FnPtr(_) => {\n+                            struct_span_err!(\n+                                tcx.sess,\n+                                hir_ty.span,\n+                                E0741,\n+                                \"using function pointers as const generic parameters is forbidden\",\n+                            )\n+                            .emit();\n+                        }\n+                        ty::RawPtr(_) => {\n+                            struct_span_err!(\n+                                tcx.sess,\n+                                hir_ty.span,\n+                                E0741,\n+                                \"using raw pointers as const generic parameters is forbidden\",\n+                            )\n+                            .emit();\n+                        }\n                         _ => {\n                             let mut diag = struct_span_err!(\n                                 tcx.sess,"}, {"sha": "b55c2449858c9fe0b9966d4428b795298b2c2afe", "filename": "src/test/ui/const-generics/fn-const-param-call.full.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.full.stderr?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -1,14 +1,15 @@\n-error: using function pointers as const generic parameters is forbidden\n+error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/fn-const-param-call.rs:11:25\n    |\n LL | struct Wrapper<const F: fn() -> u32>;\n    |                         ^^^^^^^^^^^\n \n-error: using function pointers as const generic parameters is forbidden\n+error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/fn-const-param-call.rs:13:15\n    |\n LL | impl<const F: fn() -> u32> Wrapper<F> {\n    |               ^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "2d66a19233269cb7fc93d31465a74a2b44f61efe", "filename": "src/test/ui/const-generics/fn-const-param-infer.full.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.full.stderr?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -1,8 +1,9 @@\n-error: using function pointers as const generic parameters is forbidden\n+error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/fn-const-param-infer.rs:6:25\n    |\n LL | struct Checked<const F: fn(usize) -> bool>;\n    |                         ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "e17cf96aa3e3d0bdfea2d317753a8bdaf5094c3a", "filename": "src/test/ui/const-generics/issues/issue-71381.full.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.full.stderr?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -10,18 +10,19 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                                        ^^^^ the type must not depend on the parameter `Args`\n \n-error: using function pointers as const generic parameters is forbidden\n+error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71381.rs:14:61\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: using function pointers as const generic parameters is forbidden\n+error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71381.rs:23:19\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0770`.\n+Some errors have detailed explanations: E0741, E0770.\n+For more information about an error, try `rustc --explain E0741`."}, {"sha": "ab2a4e64a838978bade17de81988f5540df5062b", "filename": "src/test/ui/const-generics/issues/issue-71382.full.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.full.stderr?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -1,8 +1,9 @@\n-error: using function pointers as const generic parameters is forbidden\n+error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71382.rs:16:23\n    |\n LL |     fn test<const FN: fn()>(&self) {\n    |                       ^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "656aa29e19b2595579442e16cea4575ffb83638f", "filename": "src/test/ui/const-generics/issues/issue-71611.full.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.full.stderr?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -4,12 +4,13 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                               ^ the type must not depend on the parameter `A`\n \n-error: using function pointers as const generic parameters is forbidden\n+error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71611.rs:5:21\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                     ^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0770`.\n+Some errors have detailed explanations: E0741, E0770.\n+For more information about an error, try `rustc --explain E0741`."}, {"sha": "92580b33685d190c45541ebb5b930dea8ee4b412", "filename": "src/test/ui/const-generics/issues/issue-72352.full.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.full.stderr?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -1,8 +1,9 @@\n-error: using function pointers as const generic parameters is forbidden\n+error[E0741]: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-72352.rs:7:42\n    |\n LL | unsafe fn unsafely_do_the_thing<const F: fn(&CStr) -> usize>(ptr: *const i8) -> usize {\n    |                                          ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "fae6d3fc41fb86ae77d179e7058bf79e26fecd7c", "filename": "src/test/ui/const-generics/issues/issue-99641.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.rs?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -0,0 +1,18 @@\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n+\n+fn main() {\n+    pub struct Color<const WHITE: (fn(),)>;\n+    //~^ ERROR using function pointers\n+\n+    impl<const WHITE: (fn(),)> Color<WHITE> {\n+        //~^ ERROR using function pointers\n+        pub fn new() -> Self {\n+            Color::<WHITE>\n+        }\n+    }\n+\n+    pub const D65: (fn(),) = (|| {},);\n+\n+    Color::<D65>::new();\n+}"}, {"sha": "349ebba08d53f5ba385b3ab9d667514457480560", "filename": "src/test/ui/const-generics/issues/issue-99641.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-99641.stderr?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -0,0 +1,15 @@\n+error[E0741]: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-99641.rs:5:35\n+   |\n+LL |     pub struct Color<const WHITE: (fn(),)>;\n+   |                                   ^^^^^^^\n+\n+error[E0741]: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-99641.rs:8:23\n+   |\n+LL |     impl<const WHITE: (fn(),)> Color<WHITE> {\n+   |                       ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "657eee2be24431697ed97a7a1e42a14a2ecc9cd4", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.full.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.full.stderr?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -1,14 +1,15 @@\n-error: using raw pointers as const generic parameters is forbidden\n+error[E0741]: using raw pointers as const generic parameters is forbidden\n   --> $DIR/raw-ptr-const-param-deref.rs:9:23\n    |\n LL | struct Const<const P: *const u32>;\n    |                       ^^^^^^^^^^\n \n-error: using raw pointers as const generic parameters is forbidden\n+error[E0741]: using raw pointers as const generic parameters is forbidden\n   --> $DIR/raw-ptr-const-param-deref.rs:11:15\n    |\n LL | impl<const P: *const u32> Const<P> {\n    |               ^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "69f1aae5681a4371897857de6529bce118bec9a3", "filename": "src/test/ui/const-generics/raw-ptr-const-param.full.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.full.stderr?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -1,8 +1,9 @@\n-error: using raw pointers as const generic parameters is forbidden\n+error[E0741]: using raw pointers as const generic parameters is forbidden\n   --> $DIR/raw-ptr-const-param.rs:6:23\n    |\n LL | struct Const<const P: *const u32>;\n    |                       ^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "1496b28bd3ee6f4c2b3f466e9d19f8fbb2d5ed98", "filename": "src/test/ui/consts/refs_check_const_eq-issue-88384.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.rs?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -1,5 +1,3 @@\n-// check-pass\n-\n #![feature(fn_traits)]\n #![feature(adt_const_params)]\n //~^ WARNING the feature `adt_const_params` is incomplete\n@@ -10,8 +8,10 @@ struct CompileTimeSettings{\n }\n \n struct Foo<const T: CompileTimeSettings>;\n+//~^ ERROR using function pointers as const generic parameters is forbidden\n \n impl<const T: CompileTimeSettings> Foo<T> {\n+    //~^ ERROR using function pointers as const generic parameters is forbidden\n     fn call_hooks(){\n     }\n }"}, {"sha": "4f2f5e244b67e51e005e3cbe20c435da60571f7f", "filename": "src/test/ui/consts/refs_check_const_eq-issue-88384.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1152e70363702919a729b9a83eb7550c9392d306/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frefs_check_const_eq-issue-88384.stderr?ref=1152e70363702919a729b9a83eb7550c9392d306", "patch": "@@ -1,11 +1,24 @@\n warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/refs_check_const_eq-issue-88384.rs:4:12\n+  --> $DIR/refs_check_const_eq-issue-88384.rs:2:12\n    |\n LL | #![feature(adt_const_params)]\n    |            ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #95174 <https://github.com/rust-lang/rust/issues/95174> for more information\n \n-warning: 1 warning emitted\n+error[E0741]: using function pointers as const generic parameters is forbidden\n+  --> $DIR/refs_check_const_eq-issue-88384.rs:10:21\n+   |\n+LL | struct Foo<const T: CompileTimeSettings>;\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+\n+error[E0741]: using function pointers as const generic parameters is forbidden\n+  --> $DIR/refs_check_const_eq-issue-88384.rs:13:15\n+   |\n+LL | impl<const T: CompileTimeSettings> Foo<T> {\n+   |               ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0741`."}]}