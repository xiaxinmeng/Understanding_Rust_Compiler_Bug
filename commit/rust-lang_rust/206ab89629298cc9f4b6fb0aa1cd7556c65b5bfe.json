{"sha": "206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNmFiODk2MjkyOThjYzlmNGI2ZmIwYWExY2Q3NTU2YzY1YjViZmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-25T02:35:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-30T02:04:53Z"}, "message": "librustc: Stop reexporting the standard modules from prelude.", "tree": {"sha": "6a899250550f71bf26f5d57e3cbeee8b97661c9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a899250550f71bf26f5d57e3cbeee8b97661c9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "html_url": "https://github.com/rust-lang/rust/commit/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "html_url": "https://github.com/rust-lang/rust/commit/4e3d4b36dc3a030bb5f152afbfccfd4427830dac"}], "stats": {"total": 2318, "additions": 1868, "deletions": 450}, "files": [{"sha": "9d96cc1dd98d25fbfcced636dd9fc944c6d497ef", "filename": "doc/rust.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -1840,6 +1840,7 @@ is bounds-checked at run-time. When the check fails, it will put the\n task in a _failing state_.\n \n ~~~~\n+# use std::task;\n # do task::spawn_unlinked {\n \n ([1, 2, 3, 4])[0];\n@@ -2168,7 +2169,7 @@ fn ten_times(f: &fn(int)) {\n     }\n }\n \n-ten_times(|j| io::println(fmt!(\"hello, %d\", j)));\n+ten_times(|j| println(fmt!(\"hello, %d\", j)));\n \n ~~~~\n \n@@ -2189,7 +2190,7 @@ An example:\n let mut i = 0;\n \n while i < 10 {\n-    io::println(\"hello\\n\");\n+    println(\"hello\\n\");\n     i = i + 1;\n }\n ~~~~\n@@ -2335,6 +2336,7 @@ for v.each |e| {\n An example of a for loop over a series of integers:\n \n ~~~~\n+# use std::uint;\n # fn bar(b:uint) { }\n for uint::range(0, 256) |i| {\n     bar(i);\n@@ -2798,6 +2800,7 @@ the vtable pointer for the `T` implementation of `R`, and the pointer value of `\n An example of an object type:\n \n ~~~~~~~~\n+# use std::int;\n trait Printable {\n   fn to_str(&self) -> ~str;\n }\n@@ -2807,7 +2810,7 @@ impl Printable for int {\n }\n \n fn print(a: @Printable) {\n-   io::println(a.to_str());\n+   println(a.to_str());\n }\n \n fn main() {"}, {"sha": "88f2f374cf5dd721d76e0dff7bd77fb13db360d9", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -149,7 +149,9 @@ A type with the same functionality as owned boxes can be implemented by\n wrapping `malloc` and `free`:\n \n ~~~~\n+use std::cast;\n use std::libc::{c_void, size_t, malloc, free};\n+use std::ptr;\n use std::unstable::intrinsics;\n use std::util;\n "}, {"sha": "2f150755fc2d9c5ebd50129e8ccf16d1d0b04df9", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -120,6 +120,7 @@ should interleave the output in vaguely random order.\n ~~~\n # use std::io::print;\n # use std::task::spawn;\n+# use std::int;\n \n for int::range(0, 20) |child_task_number| {\n     do spawn {\n@@ -236,6 +237,7 @@ Instead we can use a `SharedChan`, a type that allows a single\n ~~~\n # use std::task::spawn;\n # use std::comm::{stream, SharedChan};\n+# use std::uint;\n \n let (port, chan) = stream();\n let chan = SharedChan::new(chan);\n@@ -269,6 +271,7 @@ might look like the example below.\n ~~~\n # use std::task::spawn;\n # use std::comm::stream;\n+# use std::vec;\n \n // Create a vector of ports, one for each child task\n let ports = do vec::from_fn(3) |init_val| {\n@@ -310,6 +313,8 @@ the future needs to be mutable so that it can save the result for next time `get\n Here is another example showing how futures allow you to background computations. The workload will\n be distributed on the available cores.\n ~~~\n+# use std::vec;\n+# use std::uint;\n fn partial_sum(start: uint) -> f64 {\n     let mut local_sum = 0f64;\n     for uint::range(start*100000, (start+1)*100000) |num| {\n@@ -343,14 +348,17 @@ acts as a reference to the shared data and only this reference is shared and clo\n Here is a small example showing how to use ARCs. We wish to run concurrently several computations on\n a single large vector of floats. Each task needs the full vector to perform its duty.\n ~~~\n+# use std::vec;\n+# use std::uint;\n+# use std::rand;\n use extra::arc::ARC;\n \n fn pnorm(nums: &~[float], p: uint) -> float {\n     (vec::foldl(0.0, *nums, |a,b| a+(*b).pow(p as float) )).pow(1f / (p as float))\n }\n \n fn main() {\n-    let numbers=vec::from_fn(1000000, |_| rand::random::<float>());\n+    let numbers = vec::from_fn(1000000, |_| rand::random::<float>());\n     println(fmt!(\"Inf-norm = %?\",  numbers.max()));\n \n     let numbers_arc = ARC(numbers);\n@@ -373,12 +381,16 @@ at the power given as argument and takes the inverse power of this value). The A\n created by the line\n ~~~\n # use extra::arc::ARC;\n-# let numbers=vec::from_fn(1000000, |_| rand::random::<float>());\n+# use std::vec;\n+# use std::rand;\n+# let numbers = vec::from_fn(1000000, |_| rand::random::<float>());\n let numbers_arc=ARC(numbers);\n ~~~\n and a clone of it is sent to each task\n ~~~\n # use extra::arc::ARC;\n+# use std::vec;\n+# use std::rand;\n # let numbers=vec::from_fn(1000000, |_| rand::random::<float>());\n # let numbers_arc = ARC(numbers);\n # let (port, chan)  = stream();\n@@ -389,6 +401,8 @@ copying only the wrapper and not its contents.\n Each task recovers the underlying data by\n ~~~\n # use extra::arc::ARC;\n+# use std::vec;\n+# use std::rand;\n # let numbers=vec::from_fn(1000000, |_| rand::random::<float>());\n # let numbers_arc=ARC(numbers);\n # let (port, chan)  = stream();\n@@ -416,6 +430,7 @@ of all tasks are intertwined: if one fails, so do all the others.\n \n ~~~\n # use std::task::spawn;\n+# use std::task;\n # fn do_some_work() { loop { task::yield() } }\n # do task::try {\n // Create a child task that fails\n@@ -437,6 +452,7 @@ field (representing a successful result) or an `Err` result (representing\n termination with an error).\n \n ~~~\n+# use std::task;\n # fn some_condition() -> bool { false }\n # fn calculate_result() -> int { 0 }\n let result: Result<int, ()> = do task::try {\n@@ -479,6 +495,7 @@ By default, task failure is _bidirectionally linked_, which means that if\n either task fails, it kills the other one.\n \n ~~~\n+# use std::task;\n # fn sleep_forever() { loop { task::yield() } }\n # do task::try {\n do spawn {\n@@ -501,6 +518,7 @@ before returning. Hence:\n ~~~\n # use std::comm::{stream, Chan, Port};\n # use std::task::{spawn, try};\n+# use std::task;\n # fn sleep_forever() { loop { task::yield() } }\n # do task::try {\n let (receiver, sender): (Port<int>, Chan<int>) = stream();\n@@ -528,6 +546,7 @@ Supervised task failure propagates across multiple generations even if\n an intermediate generation has already exited:\n \n ~~~\n+# use std::task;\n # fn sleep_forever() { loop { task::yield() } }\n # fn wait_for_a_while() { for 1000.times { task::yield() } }\n # do task::try::<int> {\n@@ -546,6 +565,7 @@ Finally, tasks can be configured to not propagate failure to each\n other at all, using `task::spawn_unlinked` for _isolated failure_.\n \n ~~~\n+# use std::task;\n # fn random() -> uint { 100 }\n # fn sleep_for(i: uint) { for i.times { task::yield() } }\n # do task::try::<()> {\n@@ -574,6 +594,7 @@ Here is the function that implements the child task:\n \n ~~~~\n # use extra::comm::DuplexStream;\n+# use std::uint;\n fn stringifier(channel: &DuplexStream<~str, uint>) {\n     let mut value: uint;\n     loop {\n@@ -596,6 +617,7 @@ Here is the code for the parent task:\n \n ~~~~\n # use std::task::spawn;\n+# use std::uint;\n # use extra::comm::DuplexStream;\n # fn stringifier(channel: &DuplexStream<~str, uint>) {\n #     let mut value: uint;"}, {"sha": "14a0c6fdcfe270eefbc045abf9e757a94edeb0e0", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -502,6 +502,7 @@ types.\n > items.\n \n ~~~~\n+# use std::float;\n fn angle(vector: (float, float)) -> float {\n     let pi = float::consts::pi;\n     match vector {\n@@ -556,6 +557,7 @@ while cake_amount > 0 {\n `loop` denotes an infinite loop, and is the preferred way of writing `while true`:\n \n ~~~~\n+# use std::int;\n let mut x = 5;\n loop {\n     x += x - 3;\n@@ -699,6 +701,7 @@ get at their contents. All variant constructors can be used as\n patterns, as in this definition of `area`:\n \n ~~~~\n+# use std::float;\n # struct Point {x: float, y: float}\n # enum Shape { Circle(Point, float), Rectangle(Point, Point) }\n fn area(sh: Shape) -> float {\n@@ -1829,6 +1832,7 @@ vector consisting of the result of applying `function` to each element\n of `vector`:\n \n ~~~~\n+# use std::vec;\n fn map<T, U>(vector: &[T], function: &fn(v: &T) -> U) -> ~[U] {\n     let mut accumulator = ~[];\n     for vec::each(vector) |element| {\n@@ -2026,6 +2030,7 @@ themselves contain type parameters. A trait for generalized sequence\n types might look like the following:\n \n ~~~~\n+# use std::vec;\n trait Seq<T> {\n     fn len(&self) -> uint;\n     fn iter(&self, b: &fn(v: &T));"}, {"sha": "1ac6c215d27a51b280dce35f218f2c543cbb1ede", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,13 +16,13 @@\n #[no_std];\n \n extern mod core(name = \"std\", vers = \"0.7-pre\");\n-extern mod std(name = \"extra\", vers = \"0.7-pre\");\n+extern mod extra(name = \"extra\", vers = \"0.7-pre\");\n \n use core::prelude::*;\n use core::*;\n \n-use std::getopts;\n-use std::test;\n+use extra::getopts;\n+use extra::test;\n \n use core::result::{Ok, Err};\n \n@@ -42,6 +42,13 @@ pub mod runtest;\n pub mod common;\n pub mod errors;\n \n+mod std {\n+    pub use core::cmp;\n+    pub use core::str;\n+    pub use core::sys;\n+    pub use core::unstable;\n+}\n+\n pub fn main() {\n     let args = os::args();\n     let config = parse_config(args);"}, {"sha": "728548caf77c1a435d17322102a6fed8d39740eb", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,9 @@\n \n use core::prelude::*;\n \n+use core::io;\n+use core::str;\n+\n pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n \n // Load any test directives embedded in the file"}, {"sha": "2bfc92bc70416c8de753524ef2cf7410c0728111", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,8 +10,12 @@\n \n use core::prelude::*;\n \n-use common;\n use common::config;\n+use common;\n+\n+use core::io;\n+use core::os;\n+use core::str;\n \n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out"}, {"sha": "57a6dc8037e021bc2c0e768aee60dc8734f66301", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,7 +10,13 @@\n \n use core::prelude::*;\n \n+use core::comm;\n+use core::io;\n+use core::libc::c_int;\n+use core::os;\n use core::run;\n+use core::str;\n+use core::task;\n \n #[cfg(target_os = \"win32\")]\n fn target_env(lib_path: &str, prog: &str) -> ~[(~str,~str)] {"}, {"sha": "4db1fa6d0a0b537878166c3f338e6a9e5d39c863", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,6 +22,12 @@ use procsrv;\n use util;\n use util::logv;\n \n+use core::io;\n+use core::os;\n+use core::str;\n+use core::uint;\n+use core::vec;\n+\n pub fn run(config: config, testfile: ~str) {\n     if config.verbose {\n         // We're going to be dumping a lot of info. Start on a new line."}, {"sha": "26a62f8a5b22456c58687e690b22dd3265209411", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,6 +12,7 @@ use core::prelude::*;\n \n use common::config;\n \n+use core::io;\n use core::os::getenv;\n \n pub fn make_new_path(path: &str) -> ~str {"}, {"sha": "e73b49044d42110ecf93601ecd5d3703f7f73091", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 50, "deletions": 40, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -510,9 +510,13 @@ pub impl<'self, T:Const + Owned> RWReadMode<'self, T> {\n #[cfg(test)]\n mod tests {\n     use core::prelude::*;\n-    use core::cell::Cell;\n+\n     use arc::*;\n \n+    use core::cell::Cell;\n+    use core::comm;\n+    use core::task;\n+\n     #[test]\n     fn manually_share_arc() {\n         let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n@@ -541,59 +545,65 @@ mod tests {\n \n     #[test]\n     fn test_mutex_arc_condvar() {\n-        let arc = ~MutexARC(false);\n-        let arc2 = ~arc.clone();\n-        let (p,c) = comm::oneshot();\n-        let (c,p) = (Cell(c), Cell(p));\n-        do task::spawn || {\n-            // wait until parent gets in\n-            comm::recv_one(p.take());\n-            do arc2.access_cond |state, cond| {\n-                *state = true;\n-                cond.signal();\n+        unsafe {\n+            let arc = ~MutexARC(false);\n+            let arc2 = ~arc.clone();\n+            let (p,c) = comm::oneshot();\n+            let (c,p) = (Cell(c), Cell(p));\n+            do task::spawn || {\n+                // wait until parent gets in\n+                comm::recv_one(p.take());\n+                do arc2.access_cond |state, cond| {\n+                    *state = true;\n+                    cond.signal();\n+                }\n             }\n-        }\n-        do arc.access_cond |state, cond| {\n-            comm::send_one(c.take(), ());\n-            assert!(!*state);\n-            while !*state {\n-                cond.wait();\n+            do arc.access_cond |state, cond| {\n+                comm::send_one(c.take(), ());\n+                assert!(!*state);\n+                while !*state {\n+                    cond.wait();\n+                }\n             }\n         }\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn test_arc_condvar_poison() {\n-        let arc = ~MutexARC(1);\n-        let arc2 = ~arc.clone();\n-        let (p, c) = comm::stream();\n-\n-        do task::spawn_unlinked || {\n-            let _ = p.recv();\n-            do arc2.access_cond |one, cond| {\n-                cond.signal();\n-                // Parent should fail when it wakes up.\n-                assert_eq!(*one, 0);\n+        unsafe {\n+            let arc = ~MutexARC(1);\n+            let arc2 = ~arc.clone();\n+            let (p, c) = comm::stream();\n+\n+            do task::spawn_unlinked || {\n+                let _ = p.recv();\n+                do arc2.access_cond |one, cond| {\n+                    cond.signal();\n+                    // Parent should fail when it wakes up.\n+                    assert_eq!(*one, 0);\n+                }\n             }\n-        }\n \n-        do arc.access_cond |one, cond| {\n-            c.send(());\n-            while *one == 1 {\n-                cond.wait();\n+            do arc.access_cond |one, cond| {\n+                c.send(());\n+                while *one == 1 {\n+                    cond.wait();\n+                }\n             }\n         }\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn test_mutex_arc_poison() {\n-        let arc = ~MutexARC(1);\n-        let arc2 = ~arc.clone();\n-        do task::try || {\n-            do arc2.access |one| {\n-                assert_eq!(*one, 2);\n+        unsafe {\n+            let arc = ~MutexARC(1);\n+            let arc2 = ~arc.clone();\n+            do task::try || {\n+                do arc2.access |one| {\n+                    assert_eq!(*one, 2);\n+                }\n+            };\n+            do arc.access |one| {\n+                assert_eq!(*one, 1);\n             }\n-        };\n-        do arc.access |one| {\n-            assert_eq!(*one, 1);\n         }\n     }\n     #[test] #[should_fail] #[ignore(cfg(windows))]"}, {"sha": "373bebeec71ce0ae70d0c924ff6d80516ff126d6", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,6 +12,9 @@\n \n use core::prelude::*;\n \n+use core::str;\n+use core::vec;\n+\n pub trait ToBase64 {\n     fn to_base64(&self) -> ~str;\n }"}, {"sha": "afd82d425891b3b63dea6c301d4dbdeea751219a", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,12 @@\n \n use core::prelude::*;\n \n+use core::cmp;\n+use core::ops;\n+use core::uint;\n+use core::vec::from_elem;\n+use core::vec;\n+\n struct SmallBitv {\n     /// only the lowest nbits of this value are used. the rest is undefined.\n     bits: uint"}, {"sha": "7cc7b659ed9dd9f38b53718c807b48f54ac72c91", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -38,6 +38,9 @@\n \n use core::prelude::*;\n \n+use core::option;\n+use core::ptr;\n+\n /**\n  * The type representing a foreign chunk of memory\n  *"}, {"sha": "1ef61926c92002e3e8c2fd2de0d8030cf9d3a432", "filename": "src/libextra/comm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcomm.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,6 +18,7 @@ use core::prelude::*;\n \n use core::comm::{GenericChan, GenericSmartChan, GenericPort};\n use core::comm::{Chan, Port, Selectable, Peekable};\n+use core::comm;\n use core::pipes;\n \n /// An extension of `pipes::stream` that allows both sending and receiving."}, {"sha": "ccb52fa038c1288839af1c7b09c45b417adea58f", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,7 +12,9 @@\n \n use core::prelude::*;\n \n+use core::uint;\n use core::util::replace;\n+use core::vec;\n \n static initial_capacity: uint = 32u; // 2^5\n "}, {"sha": "fc6cdb102a0ef2bfacf9d327797a50a40c8cac0a", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -21,6 +21,8 @@ Do not use ==, !=, <, etc on doubly-linked lists -- it may not terminate.\n use core::prelude::*;\n \n use core::managed;\n+use core::old_iter;\n+use core::vec;\n \n pub type DListLink<T> = Option<@mut DListNode<T>>;\n \n@@ -538,6 +540,9 @@ mod tests {\n \n     use super::*;\n \n+    use core::old_iter;\n+    use core::vec;\n+\n     #[test]\n     fn test_dlist_concat() {\n         let a = from_vec([1,2]);"}, {"sha": "e6f3fba6b157fcfb3a4749403b5a9469d0aa3abb", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -96,6 +96,11 @@ total line count).\n \n use core::prelude::*;\n \n+use core::io::ReaderUtil;\n+use core::io;\n+use core::os;\n+use core::vec;\n+\n /**\n A summary of the internal state of a `FileInput` object. `line_num`\n and `line_num_file` represent the number of lines read in total and in\n@@ -407,6 +412,11 @@ mod test {\n \n     use super::{FileInput, pathify, input_vec, input_vec_state};\n \n+    use core::io;\n+    use core::str;\n+    use core::uint;\n+    use core::vec;\n+\n     fn make_file(path : &Path, contents: &[~str]) {\n         let file = io::file_writer(path, [io::Create, io::Truncate]).get();\n "}, {"sha": "e24c80b4463c3dd085857757769c9525ac93ddd6", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,8 +16,9 @@ Simple compression\n \n use core::prelude::*;\n \n-use core::libc;\n use core::libc::{c_void, size_t, c_int};\n+use core::libc;\n+use core::vec;\n \n pub mod rustrt {\n     use core::libc::{c_int, c_void, size_t};"}, {"sha": "955da13c7b38b867e01de44e0ccda467e6f24476", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -345,11 +345,11 @@ pub mod flatteners {\n \n     use core::cast;\n     use core::io::{Writer, Reader, ReaderUtil};\n+    use core::io;\n     use core::ptr;\n     use core::sys::size_of;\n     use core::vec;\n \n-\n     // FIXME #4074: Copy + Owned != POD\n     pub struct PodUnflattener<T> {\n         bogus: ()\n@@ -511,8 +511,10 @@ pub mod bytepipes {\n \n     use flatpipes::{ByteChan, BytePort};\n \n-    use core::io::{Writer, Reader, ReaderUtil};\n     use core::comm::{Port, Chan};\n+    use core::comm;\n+    use core::io::{Writer, Reader, ReaderUtil};\n+    use core::vec;\n \n     pub struct ReaderBytePort<R> {\n         reader: R\n@@ -646,7 +648,12 @@ mod test {\n     use flatpipes::{BytePort, FlatChan, FlatPort};\n     use net::tcp::TcpSocketBuf;\n \n+    use core::comm;\n+    use core::int;\n     use core::io::BytesWriter;\n+    use core::result;\n+    use core::sys;\n+    use core::task;\n \n     #[test]\n     #[ignore(reason = \"ebml failure\")]\n@@ -873,6 +880,11 @@ mod test {\n         use flatpipes::pod;\n         use io_util::BufReader;\n \n+        use core::comm;\n+        use core::io;\n+        use core::sys;\n+        use core::task;\n+\n         type PortLoader<P> =\n             ~fn(~[u8]) -> FlatPort<int, PodUnflattener<int>, P>;\n "}, {"sha": "c3ef346dba3ba484c5ea2eab3e71cc88c2baffb8", "filename": "src/libextra/json.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,8 +16,14 @@\n \n use core::prelude::*;\n \n-use core::io::{WriterUtil, ReaderUtil};\n+use core::char;\n+use core::float;\n use core::hashmap::HashMap;\n+use core::io::{WriterUtil, ReaderUtil};\n+use core::io;\n+use core::str;\n+use core::to_str;\n+use core::vec;\n \n use serialize::Encodable;\n use serialize;\n@@ -1332,6 +1338,8 @@ mod tests {\n     use super::*;\n \n     use core::hashmap::HashMap;\n+    use core::io;\n+    use core::result;\n \n     use std::serialize::Decodable;\n "}, {"sha": "6f2c8447ecac890f0c29346709ea444e715a4304", "filename": "src/libextra/list.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flist.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! A standard linked list\n+//! A standard, garbage-collected linked list.\n \n use core::prelude::*;\n \n+use core::vec;\n+\n #[deriving(Eq)]\n pub enum List<T> {\n     Cons(T, @List<T>),"}, {"sha": "8dff9b330a5b013cb21fe33e762cc9ddb4082a78", "filename": "src/libextra/net_tcp.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_tcp.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -1451,6 +1451,10 @@ mod test {\n \n     use core::cell::Cell;\n     use core::comm::{stream, SharedChan};\n+    use core::io;\n+    use core::result;\n+    use core::str;\n+    use core::task;\n \n     // FIXME don't run on fbsd or linux 32 bit (#2064)\n     #[cfg(target_os=\"win32\")]"}, {"sha": "0151c300a4a2abe2209df7b5ec7bad1fc17c96bd", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,7 +19,11 @@ A BigInt is a combination of BigUint and Sign.\n use core::prelude::*;\n \n use core::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n+use core::int;\n use core::num::{IntConvertible, Zero, One, ToStrRadix, FromStrRadix, Orderable};\n+use core::str;\n+use core::uint;\n+use core::vec;\n \n /**\n A BigDigit is a BigUint's composing element.\n@@ -1148,8 +1152,13 @@ mod biguint_tests {\n     use core::prelude::*;\n \n     use super::*;\n-    use core::num::{IntConvertible, Zero, One, FromStrRadix};\n+\n     use core::cmp::{Less, Equal, Greater};\n+    use core::int;\n+    use core::num::{IntConvertible, Zero, One, FromStrRadix};\n+    use core::str;\n+    use core::uint;\n+    use core::vec;\n \n     #[test]\n     fn test_from_slice() {\n@@ -1616,8 +1625,12 @@ mod bigint_tests {\n     use core::prelude::*;\n \n     use super::*;\n+\n     use core::cmp::{Less, Equal, Greater};\n+    use core::int;\n     use core::num::{IntConvertible, Zero, One, FromStrRadix};\n+    use core::uint;\n+    use core::vec;\n \n     #[test]\n     fn test_from_biguint() {"}, {"sha": "b33d113161c36cb5ca42cd208d7c2da954b26b85", "filename": "src/libextra/num/rational.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Frational.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,8 +13,11 @@\n \n use core::prelude::*;\n \n-use core::num::{Zero,One,ToStrRadix,FromStrRadix,Round};\n+use core::cmp;\n use core::from_str::FromStr;\n+use core::num::{Zero,One,ToStrRadix,FromStrRadix,Round};\n+use core::str;\n+use core::vec;\n use super::bigint::BigInt;\n \n /// Represents the ratio between 2 numbers."}, {"sha": "49696a5fa25c74135d6f5262ca6949650f8d384f", "filename": "src/libextra/par.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpar.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,11 @@\n \n use core::prelude::*;\n \n+use core::cast;\n+use core::ptr;\n+use core::sys;\n+use core::uint;\n+use core::vec;\n use future_spawn = future::spawn;\n \n /**"}, {"sha": "9345c24675091d02d559b381aaeba293fbbd2de2", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,6 +15,7 @@ use core::prelude::*;\n use core::old_iter::BaseIter;\n use core::unstable::intrinsics::{move_val_init, init};\n use core::util::{replace, swap};\n+use core::vec;\n \n pub struct PriorityQueue<T> {\n     priv data: ~[T],"}, {"sha": "73f98a3b19c59e0c3ee0cd64434d356d6be243bb", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -21,7 +21,10 @@ cycle cannot be created with `Rc<T>` because there is no way to modify it after\n \n use core::prelude::*;\n \n+use core::cast;\n use core::libc::{c_void, size_t, malloc, free};\n+use core::ptr;\n+use core::sys;\n use core::unstable::intrinsics;\n use core::util;\n "}, {"sha": "040adcc443d92a5d2a4cf2cc7961e8a74d885c50", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,6 +14,8 @@\n use core::prelude::*;\n \n use core::libc::{c_char, c_int};\n+use core::local_data;\n+use core::str;\n \n pub mod rustrt {\n     use core::libc::{c_char, c_int};"}, {"sha": "566bbfd6df6a333e2189e6c2c4ef4e703e177772", "filename": "src/libextra/rope.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frope.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -35,6 +35,10 @@\n \n use core::prelude::*;\n \n+use core::str;\n+use core::uint;\n+use core::vec;\n+\n /// The type of ropes.\n pub type Rope = node::Root;\n \n@@ -556,6 +560,11 @@ pub mod node {\n \n     use rope::node;\n \n+    use core::cast;\n+    use core::str;\n+    use core::uint;\n+    use core::vec;\n+\n     /// Implementation of type `rope`\n     pub enum Root {\n         /// An empty rope\n@@ -1137,6 +1146,8 @@ pub mod node {\n \n         use rope::node::{Concat, Leaf, Node, height};\n \n+        use core::vec;\n+\n         pub struct T {\n             stack: ~[@Node],\n             stackpos: int,\n@@ -1176,6 +1187,8 @@ pub mod node {\n     pub mod char_iterator {\n         use core::prelude::*;\n \n+        use core::str;\n+\n         use rope::node::{Leaf, Node};\n         use rope::node::leaf_iterator;\n \n@@ -1258,9 +1271,14 @@ pub mod node {\n \n #[cfg(test)]\n mod tests {\n-    use rope::*;\n     use core::prelude::*;\n \n+    use rope::*;\n+\n+    use core::str;\n+    use core::uint;\n+    use core::vec;\n+\n     //Utility function, used for sanity check\n     fn rope_to_string(r: Rope) -> ~str {\n         match (r) {"}, {"sha": "d20aed69240d2d82fbaf0f9a10e3b6e2e62507ec", "filename": "src/libextra/serialize.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fserialize.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,8 +18,11 @@ Core encoding and decoding interfaces.\n \n use core::prelude::*;\n \n+use core::at_vec;\n use core::hashmap::{HashMap, HashSet};\n use core::trie::{TrieMap, TrieSet};\n+use core::uint;\n+use core::vec;\n use deque::Deque;\n use dlist::DList;\n use treemap::{TreeMap, TreeSet};"}, {"sha": "a85f113b68fb4dd1d4e867e881ba7826e29e1fb3", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,11 +15,13 @@\n \n use core::prelude::*;\n \n+use core::cmp;\n use core::container::{Container, Mutable, Map, Set};\n use core::old_iter::BaseIter;\n use core::old_iter;\n-use core::option::{Some, None};\n+use core::uint;\n use core::util::replace;\n+use core::vec;\n \n pub struct SmallIntMap<T> {\n     priv v: ~[Option<T>],\n@@ -285,6 +287,11 @@ mod tests {\n \n     use super::SmallIntMap;\n \n+    use core::local_data;\n+    use core::rand;\n+    use core::uint;\n+    use core::vec;\n+\n     #[test]\n     fn test_find_mut() {\n         let mut m = SmallIntMap::new();\n@@ -380,6 +387,8 @@ mod test_set {\n \n     use super::SmallIntSet;\n \n+    use core::vec;\n+\n     #[test]\n     fn test_disjoint() {\n         let mut xs = SmallIntSet::new();"}, {"sha": "b3118dd37e12ef90905ceb08030fc855f2e88afc", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,9 +13,10 @@\n use core::prelude::*;\n \n use core::cmp::{Eq, Ord};\n+use core::uint;\n+use core::util::swap;\n use core::vec::len;\n use core::vec;\n-use core::util::swap;\n \n type Le<'self, T> = &'self fn(v1: &T, v2: &T) -> bool;\n \n@@ -926,7 +927,12 @@ mod test_tim_sort {\n     use core::prelude::*;\n \n     use sort::tim_sort;\n+\n+    use core::local_data;\n     use core::rand::RngUtil;\n+    use core::rand;\n+    use core::uint;\n+    use core::vec;\n \n     struct CVal {\n         val: float,\n@@ -1019,7 +1025,12 @@ mod big_tests {\n     use core::prelude::*;\n \n     use sort::*;\n+\n+    use core::local_data;\n     use core::rand::RngUtil;\n+    use core::rand;\n+    use core::uint;\n+    use core::vec;\n \n     #[test]\n     fn test_unique() {"}, {"sha": "8c03701f513104fc478f7ad88b7921cc81d5f2cc", "filename": "src/libextra/std.rc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstd.rc?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -133,6 +133,9 @@ pub mod std {\n     pub use core::condition;\n     pub use core::cmp;\n     pub use core::sys;\n+    pub use core::unstable;\n+    pub use core::str;\n+    pub use core::os;\n }\n #[doc(hidden)]\n pub mod extra {"}, {"sha": "5a1982d830d650ce2293af2975d5cf35ad79eac8", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -17,9 +17,10 @@\n \n use core::prelude::*;\n \n-use core::unstable::sync::{Exclusive, exclusive};\n+use core::comm;\n use core::ptr;\n use core::task;\n+use core::unstable::sync::{Exclusive, exclusive};\n use core::util;\n \n /****************************************************************************\n@@ -728,6 +729,8 @@ mod tests {\n \n     use core::cast;\n     use core::cell::Cell;\n+    use core::comm;\n+    use core::ptr;\n     use core::result;\n     use core::task;\n     use core::vec;"}, {"sha": "eba4f0d1b75c06f6236fee680b41353044db7598", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,6 +14,7 @@\n use core::prelude::*;\n \n use core::comm::Chan;\n+use core::comm;\n use core::task::SchedMode;\n use core::task;\n use core::vec;\n@@ -101,6 +102,6 @@ fn test_task_pool() {\n     };\n     let mut pool = TaskPool::new(4, Some(SingleThreaded), f);\n     for 8.times {\n-        pool.execute(|i| io::println(fmt!(\"Hello from thread %u!\", *i)));\n+        pool.execute(|i| println(fmt!(\"Hello from thread %u!\", *i)));\n     }\n }"}, {"sha": "c514631e787fb8c0f15e397a4e587fe6e89043a9", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,7 +12,9 @@\n \n use core::prelude::*;\n \n+use core::os;\n use core::rand::RngUtil;\n+use core::rand;\n \n pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n     let mut r = rand::rng();\n@@ -30,7 +32,10 @@ mod tests {\n     use core::prelude::*;\n \n     use tempfile::mkdtemp;\n+    use tempfile;\n+\n     use core::os;\n+    use core::str;\n \n     #[test]\n     fn test_mkdtemp() {"}, {"sha": "59c6a12e036431591dd83a6d8e29ebe499b0390f", "filename": "src/libextra/test.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -21,8 +21,18 @@ use getopts;\n use sort;\n use term;\n \n-use core::to_str::ToStr;\n use core::comm::{stream, SharedChan};\n+use core::either;\n+use core::io;\n+use core::num;\n+use core::option;\n+use core::result;\n+use core::str;\n+use core::task;\n+use core::to_str::ToStr;\n+use core::u64;\n+use core::uint;\n+use core::vec;\n \n pub mod rustrt {\n     use core::libc::size_t;\n@@ -601,10 +611,14 @@ fn calc_result(desc: &TestDesc, task_succeeded: bool) -> TestResult {\n pub mod bench {\n     use core::prelude::*;\n \n-    use time::precise_time_ns;\n-    use test::{BenchHarness, BenchSamples};\n-    use stats::Stats;\n+    use core::num;\n     use core::rand::RngUtil;\n+    use core::rand;\n+    use core::u64;\n+    use core::vec;\n+    use stats::Stats;\n+    use test::{BenchHarness, BenchSamples};\n+    use time::precise_time_ns;\n \n     pub impl BenchHarness {\n "}, {"sha": "93fbf6a405431496b3b1b314c87fb768349afbb7", "filename": "src/libextra/time.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,11 @@\n \n use core::prelude::*;\n \n+use core::i32;\n+use core::int;\n+use core::io;\n+use core::str;\n+\n static NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n \n pub mod rustrt {"}, {"sha": "4f662613b00afdbd07f848054d4dc4fc99256dc5", "filename": "src/libextra/timer.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftimer.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,6 +19,7 @@ use uv::iotask::IoTask;\n use core::cast::transmute;\n use core::cast;\n use core::comm::{stream, Chan, SharedChan, Port, select2i};\n+use core::either;\n use core::libc::c_void;\n use core::libc;\n \n@@ -179,9 +180,12 @@ mod test {\n \n     use timer::*;\n     use uv;\n+\n     use core::cell::Cell;\n-    use core::rand::RngUtil;\n     use core::pipes::{stream, SharedChan};\n+    use core::rand::RngUtil;\n+    use core::rand;\n+    use core::task;\n \n     #[test]\n     fn test_gl_timer_simple_sleep_test() {"}, {"sha": "a05c532c92f6e23175ef7e746bef3cf2d9cb2d9f", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,6 +15,7 @@\n use core::prelude::*;\n \n use core::iterator::*;\n+use core::uint;\n use core::util::{swap, replace};\n \n // This is implemented as an AA tree, which is a simplified variation of\n@@ -701,9 +702,13 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n mod test_treemap {\n     use core::prelude::*;\n \n-    use core::iterator::*;\n     use super::*;\n+\n+    use core::iterator::*;\n     use core::rand::RngUtil;\n+    use core::rand;\n+    use core::str;\n+    use core::vec;\n \n     #[test]\n     fn find_empty() {\n@@ -1021,8 +1026,11 @@ mod test_treemap {\n mod test_set {\n     use core::prelude::*;\n     use core::iterator::*;\n+\n     use super::*;\n \n+    use core::vec;\n+\n     #[test]\n     fn test_clear() {\n         let mut s = TreeSet::new();"}, {"sha": "8752f675a8d275fe78be095c06a3521a7a4dd994", "filename": "src/libextra/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_global_loop.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,7 +16,9 @@ use iotask = uv_iotask;\n use uv_iotask::{IoTask, spawn_iotask};\n \n use core::comm::Chan;\n+use core::libc;\n use core::option::{Some, None};\n+use core::str;\n use core::task::task;\n use core::unstable::global::{global_data_clone_create, global_data_clone};\n use core::unstable::weak_task::weaken_task;"}, {"sha": "6cf753b801620b9b56142fee569697c8db01af5d", "filename": "src/libextra/uv_iotask.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_iotask.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,6 +22,7 @@ use ll = uv_ll;\n use core::comm::{stream, Port, Chan, SharedChan};\n use core::libc::c_void;\n use core::libc;\n+use core::task;\n \n /// Used to abstract-away direct interaction with a libuv loop.\n pub struct IoTask {\n@@ -223,6 +224,8 @@ struct AhData {\n \n #[cfg(test)]\n fn impl_uv_iotask_async(iotask: &IoTask) {\n+    use core::ptr;\n+\n     let async_handle = ll::async_t();\n     let ah_ptr: *ll::uv_async_t = &async_handle;\n     let (exit_po, exit_ch) = stream::<()>();"}, {"sha": "d5f7cb12e4f0bf3df37a261d38b60b16ad3e8df9", "filename": "src/libextra/uv_ll.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuv_ll.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -34,9 +34,12 @@\n \n use core::prelude::*;\n \n-use core::libc::size_t;\n-use core::libc::c_void;\n+use core::libc::{c_void, size_t};\n+use core::libc;\n use core::ptr::to_unsafe_ptr;\n+use core::ptr;\n+use core::str;\n+use core::vec;\n \n pub type uv_handle_t = c_void;\n pub type uv_loop_t = c_void;\n@@ -1225,9 +1228,17 @@ pub unsafe fn addrinfo_as_sockaddr_in6(input: *addrinfo) -> *sockaddr_in6 {\n #[cfg(test)]\n mod test {\n     use core::prelude::*;\n-    use core::comm::{SharedChan, stream, GenericChan, GenericPort};\n+\n     use super::*;\n \n+    use core::comm::{SharedChan, stream, GenericChan, GenericPort};\n+    use core::libc;\n+    use core::result;\n+    use core::str;\n+    use core::sys;\n+    use core::task;\n+    use core::vec;\n+\n     enum tcp_read_data {\n         tcp_read_eof,\n         tcp_read_more(~[u8]),"}, {"sha": "798cf1ba55d6f8ee2e9040fd77eff614b2483b1d", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -21,7 +21,9 @@ use core::comm::{PortOne, oneshot, send_one, recv_one};\n use core::either::{Either, Left, Right};\n use core::hashmap::HashMap;\n use core::io;\n+use core::result;\n use core::run;\n+use core::task;\n use core::to_bytes;\n use core::util::replace;\n "}, {"sha": "9280be146f9c1f0dc43fa69b26c20c0c8adf8eda", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -28,7 +28,16 @@ extern mod extra(name = \"extra\", vers = \"0.7-pre\");\n extern mod syntax(vers = \"0.7-pre\");\n \n use std::prelude::*;\n+\n+use std::int;\n+use std::io;\n+use std::option;\n+use std::os;\n+use std::result;\n use std::run;\n+use std::str;\n+use std::uint;\n+use std::vec;\n \n use syntax::diagnostic;\n use syntax::parse::token::ident_interner;"}, {"sha": "ff766417c2ace0f2293e36226d31458e6fc13624", "filename": "src/librust/rust.rc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -31,8 +31,18 @@ extern mod rustc;\n \n use core::prelude::*;\n \n+use core::io;\n+use core::os;\n use core::run;\n use core::libc::exit;\n+use core::str;\n+\n+// For bootstrapping.\n+mod std {\n+    pub use core::os;\n+    pub use core::str;\n+    pub use core::unstable;\n+}\n \n enum ValidUsage {\n     Valid(int), Invalid"}, {"sha": "785b79f66b9d172226ca8bc63df7bd761bf0d208", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,12 +22,17 @@ use middle::trans::common::CrateContext;\n use middle::ty;\n use util::ppaux;\n \n+use core::char;\n use core::hash::Streaming;\n use core::hash;\n use core::libc::{c_int, c_uint};\n use core::os::consts::{macos, freebsd, linux, android, win32};\n+use core::os;\n+use core::ptr;\n use core::rt::io::Writer;\n use core::run;\n+use core::str;\n+use core::vec;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::attr;\n@@ -100,7 +105,12 @@ pub mod jit {\n     use lib::llvm::{ModuleRef, PassManagerRef};\n     use metadata::cstore;\n \n+    use core::cast;\n+    use core::char;\n     use core::libc::c_int;\n+    use core::os;\n+    use core::ptr;\n+    use core::str;\n \n     pub mod rusti {\n         #[nolink]\n@@ -188,6 +198,7 @@ pub mod write {\n     use core::libc::{c_int, c_uint};\n     use core::path::Path;\n     use core::run;\n+    use core::str;\n \n     pub fn is_object_or_assembly_or_exe(ot: output_type) -> bool {\n         if ot == output_type_assembly || ot == output_type_object ||"}, {"sha": "16d10d0a35e6e36db36c9b24e06470c03f08a188", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,8 +14,11 @@ use driver::session;\n use metadata::cstore;\n use metadata::filesearch;\n \n-use core::util;\n use core::hashmap::HashSet;\n+use core::os;\n+use core::uint;\n+use core::util;\n+use core::vec;\n \n fn not_win32(os: session::os) -> bool {\n   match os {\n@@ -210,6 +213,13 @@ pub fn minimize_rpaths(rpaths: &[Path]) -> ~[Path] {\n mod test {\n     use core::prelude::*;\n \n+    use core::os;\n+    use core::str;\n+\n+    // FIXME(#2119): the outer attribute should be #[cfg(unix, test)], then\n+    // these redundant #[cfg(test)] blocks can be removed\n+    #[cfg(test)]\n+    #[cfg(test)]\n     use back::rpath::{get_absolute_rpath, get_install_prefix_rpath};\n     use back::rpath::{get_relative_to, get_rpath_relative_to_output};\n     use back::rpath::{minimize_rpaths, rpaths_to_flags};"}, {"sha": "f7ce376ca28e9e152d14da9ddb9066e90124f12d", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,8 @@\n \n use core::prelude::*;\n \n+use core::option;\n+use core::vec;\n use syntax::{ast, fold, attr};\n \n type in_cfg_pred = @fn(attrs: ~[ast::attribute]) -> bool;"}, {"sha": "2cdfd17c169a08213aa2bf69e133614d6ca4f2af", "filename": "src/librustc/front/intrinsic_inject.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,7 @@\n \n use core::prelude::*;\n \n+use core::vec;\n use driver::session::Session;\n use syntax::parse;\n use syntax::ast;"}, {"sha": "a05dfc446ec423fbfbe2e7b17525cc349fa88f35", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,10 +12,11 @@ use core::prelude::*;\n \n use driver::session::Session;\n \n+use core::vec;\n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap;\n use syntax::codemap::dummy_sp;\n+use syntax::codemap;\n use syntax::fold;\n \n static STD_VERSION: &'static str = \"0.7-pre\";"}, {"sha": "08a19577308914ad20c1d1dfe89a5284536a0c7f", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,6 +15,7 @@ use core::prelude::*;\n use driver::session;\n use front::config;\n \n+use core::vec;\n use syntax::ast_util::*;\n use syntax::attr;\n use syntax::codemap::{dummy_sp, span, ExpandedFrom, CallInfo, NameAndSpan};\n@@ -309,7 +310,7 @@ fn mk_test_module(cx: &TestCtxt) -> @ast::item {\n     let mainfn = (quote_item!(\n         pub fn main() {\n             #[main];\n-            extra::test::test_main_static(::os::args(), tests);\n+            extra::test::test_main_static(::std::os::args(), tests);\n         }\n     )).get();\n "}, {"sha": "49a682e68f19bbee720b7a330d5405d91de437d8", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,6 +12,10 @@ use core::prelude::*;\n \n use core::hashmap::HashMap;\n use core::libc::{c_uint, c_ushort};\n+use core::option;\n+use core::ptr;\n+use core::str;\n+use core::vec;\n \n pub type Opcode = u32;\n pub type Bool = c_uint;"}, {"sha": "2c9b3c3a4efd62f096b202949794eac93b6861da", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,6 +18,7 @@ use metadata::filesearch::FileSearch;\n use metadata::loader;\n \n use core::hashmap::HashMap;\n+use core::vec;\n use syntax::attr;\n use syntax::codemap::{span, dummy_sp};\n use syntax::diagnostic::span_handler;"}, {"sha": "2a2419b0e30d71439b6d24b351763c5491c82923", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,6 +18,7 @@ use metadata::decoder;\n use metadata;\n use middle::{ty, resolve};\n \n+use core::vec;\n use reader = extra::ebml::reader;\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "6cc01cb90b8be9fe39390291a1e335eb57ed1a3a", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,6 +18,7 @@ use metadata::cstore;\n use metadata::decoder;\n \n use core::hashmap::HashMap;\n+use core::vec;\n use extra;\n use syntax::ast;\n use syntax::parse::token::ident_interner;"}, {"sha": "a488d39d1875625438639526701e15575f0deada", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,9 +22,14 @@ use middle::ty;\n use middle;\n use util::ppaux::ty_to_str;\n \n-use extra::flate;\n use core::hash::HashUtil;\n use core::hashmap::HashMap;\n+use core::int;\n+use core::io;\n+use core::str;\n+use core::uint;\n+use core::vec;\n+use extra::flate;\n use extra::serialize::Encodable;\n use extra;\n use syntax::abi::AbiSet;\n@@ -34,10 +39,10 @@ use syntax::ast_map;\n use syntax::ast_util::*;\n use syntax::attr;\n use syntax::diagnostic::span_handler;\n-use syntax::parse::token::special_idents;\n-use syntax::{ast_util, visit};\n use syntax::opt_vec::OptVec;\n use syntax::opt_vec;\n+use syntax::parse::token::special_idents;\n+use syntax::{ast_util, visit};\n use syntax;\n use writer = extra::ebml::writer;\n "}, {"sha": "4dbcd21e8f3d5db594ddc85bf5460ca1e427d770", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,11 @@\n \n use core::prelude::*;\n \n+use core::option;\n+use core::os;\n+use core::result;\n+use core::str;\n+\n // A module for searching for libraries\n // FIXME (#2658): I'm not happy how this module turned out. Should\n // probably just be folded into cstore."}, {"sha": "5c64bd43943512dd1bbd837584a58cb1f73fd4cb", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -23,8 +23,15 @@ use syntax::parse::token::ident_interner;\n use syntax::print::pprust;\n use syntax::{ast, attr};\n \n-use extra::flate;\n+use core::cast;\n+use core::io;\n+use core::option;\n use core::os::consts::{macos, freebsd, linux, android, win32};\n+use core::ptr;\n+use core::str;\n+use core::uint;\n+use core::vec;\n+use extra::flate;\n \n pub enum os {\n     os_macos,"}, {"sha": "f26a52cd8cd333503aad8f1c3ba6b569b7ec8bd4", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,6 +18,9 @@ use core::prelude::*;\n \n use middle::ty;\n \n+use core::str;\n+use core::uint;\n+use core::vec;\n use syntax::abi::AbiSet;\n use syntax::abi;\n use syntax::ast;"}, {"sha": "276b78d2e12d0e5d17ac69c69403de96bbfa0f1c", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -25,6 +25,9 @@ use middle::{ty, typeck, moves};\n use middle;\n use util::ppaux::ty_to_str;\n \n+use core::at_vec;\n+use core::str;\n+use core::uint;\n use extra::ebml::reader;\n use extra::ebml;\n use extra::serialize;"}, {"sha": "1801585900b645c8bd8732c6474aecec12047e4e", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,17 +19,18 @@\n \n use core::prelude::*;\n \n-use middle::moves;\n-use middle::borrowck::*;\n+use core::hashmap::HashSet;\n+use core::uint;\n use mc = middle::mem_categorization;\n+use middle::borrowck::*;\n+use middle::moves;\n use middle::ty;\n-use util::ppaux::Repr;\n-use core::hashmap::HashSet;\n use syntax::ast::{m_mutbl, m_imm, m_const};\n use syntax::ast;\n use syntax::ast_util;\n-use syntax::visit;\n use syntax::codemap::span;\n+use syntax::visit;\n+use util::ppaux::Repr;\n \n struct CheckLoanCtxt<'self> {\n     bccx: @BorrowckCtxt,"}, {"sha": "6bd32f04ce5b9c9ed542ee7dacd42e1b95d45f05", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,6 +12,7 @@\n \n use core::prelude::*;\n \n+use core::vec;\n use middle::borrowck::*;\n use mc = middle::mem_categorization;\n use middle::ty;"}, {"sha": "066d0189fcb1073fe844dbbc6762d439e5c8a4dc", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -23,8 +23,9 @@ use util::ppaux::{note_and_explain_region, Repr, UserString};\n \n use core::hashmap::{HashSet, HashMap};\n use core::io;\n-use core::result::{Result};\n use core::ops::{BitOr, BitAnd};\n+use core::result::{Result};\n+use core::str;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::visit;"}, {"sha": "2443c19ac97c5ef320e91909012ae1dc3ecca0c5", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,7 +16,9 @@ comments in the section \"Moves and initialization\" and in `doc.rs`.\n */\n \n use core::prelude::*;\n+\n use core::hashmap::{HashMap, HashSet};\n+use core::uint;\n use middle::borrowck::*;\n use middle::dataflow::DataFlowContext;\n use middle::dataflow::DataFlowOperator;"}, {"sha": "58c5ce6f2b51b5d7a2e695fbfc34ad23700f7558", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,6 +19,8 @@ use middle::typeck::method_map;\n use middle::moves;\n use util::ppaux::ty_to_str;\n \n+use core::uint;\n+use core::vec;\n use extra::sort;\n use syntax::ast::*;\n use syntax::ast_util::{unguarded_pat, walk_pat};"}, {"sha": "d68bbf8cdb316d16d502bfde6c134b0586d2aaef", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,7 +18,9 @@ use middle;\n use syntax::{ast, ast_map, ast_util, visit};\n use syntax::ast::*;\n \n+use core::float;\n use core::hashmap::{HashMap, HashSet};\n+use core::vec;\n \n //\n // This pass classifies expressions by their constant-ness."}, {"sha": "cd60279873aae335ca8a02b8007cae05db320b32", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,7 +19,10 @@\n use core::prelude::*;\n \n use core::cast;\n+use core::io;\n+use core::str;\n use core::uint;\n+use core::vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::ast_util::id_range;"}, {"sha": "d809e653f69d82a794536bfe9aa86c3e9a91e7ab", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -73,15 +73,17 @@ pub fn check_crate(tcx: ty::ctxt,\n \n     let visitor = visit::mk_vt(@visit::Visitor {\n         visit_fn: |fn_kind, fn_decl, block, span, node_id, _, visitor| {\n-            let is_unsafe_fn = match *fn_kind {\n-                fk_item_fn(_, _, purity, _) => purity == unsafe_fn,\n-                fk_method(_, _, method) => method.purity == unsafe_fn,\n-                _ => false,\n+            let (is_item_fn, is_unsafe_fn) = match *fn_kind {\n+                fk_item_fn(_, _, purity, _) => (true, purity == unsafe_fn),\n+                fk_method(_, _, method) => (true, method.purity == unsafe_fn),\n+                _ => (false, false),\n             };\n \n             let old_unsafe_context = context.unsafe_context;\n             if is_unsafe_fn {\n                 context.unsafe_context = UnsafeFn\n+            } else if is_item_fn {\n+                context.unsafe_context = SafeContext\n             }\n \n             visit::visit_fn(fn_kind,\n@@ -97,7 +99,8 @@ pub fn check_crate(tcx: ty::ctxt,\n \n         visit_block: |block, _, visitor| {\n             let old_unsafe_context = context.unsafe_context;\n-            if block.node.rules == unsafe_blk {\n+            if block.node.rules == unsafe_blk &&\n+                    context.unsafe_context == SafeContext {\n                 context.unsafe_context = UnsafeBlock(block.node.id)\n             }\n "}, {"sha": "7a57f78d60bb98a15c41fe1d772a1006a300b403", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -17,6 +17,7 @@ use middle::resolve;\n use middle::ty;\n \n use core::hashmap::HashMap;\n+use core::vec;\n use syntax::codemap::span;\n use syntax::{ast, ast_util, visit};\n "}, {"sha": "b988a88a9019c29f38cdfd92c817d1c380de4d2f", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,6 +18,7 @@ use middle::typeck;\n use util::ppaux::{Repr, ty_to_str};\n use util::ppaux::UserString;\n \n+use core::vec;\n use syntax::ast::*;\n use syntax::attr::attrs_contains_name;\n use syntax::codemap::span;"}, {"sha": "56c024f12ae086543b7f3dcdafa7a88af6274aa2", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,7 +15,19 @@ use middle::ty;\n use middle::pat_util;\n use util::ppaux::{ty_to_str};\n \n+use core::char;\n+use core::cmp;\n use core::hashmap::HashMap;\n+use core::i16;\n+use core::i32;\n+use core::i64;\n+use core::i8;\n+use core::str;\n+use core::u16;\n+use core::u32;\n+use core::u64;\n+use core::u8;\n+use core::vec;\n use extra::smallintmap::SmallIntMap;\n use syntax::attr;\n use syntax::codemap::span;"}, {"sha": "ee7b21638b24089c8b5e458e2811204efa3d7905", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -112,6 +112,11 @@ use middle::moves;\n \n use core::cast::transmute;\n use core::hashmap::HashMap;\n+use core::io;\n+use core::old_iter;\n+use core::to_str;\n+use core::uint;\n+use core::vec;\n use syntax::ast::*;\n use syntax::codemap::span;\n use syntax::parse::token::special_idents;"}, {"sha": "3a14a6816289e17c1fb04506d26058309a1a6965", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -53,6 +53,7 @@ use middle::typeck;\n use util::ppaux::{ty_to_str, region_to_str, Repr};\n use util::common::indenter;\n \n+use core::uint;\n use syntax::ast::{m_imm, m_const, m_mutbl};\n use syntax::ast;\n use syntax::codemap::span;"}, {"sha": "c58ebcd1ee4bbbac5e48da4f4de01a257bf37760", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -136,6 +136,7 @@ use util::ppaux;\n use util::ppaux::Repr;\n use util::common::indenter;\n \n+use core::at_vec;\n use core::hashmap::{HashSet, HashMap};\n use syntax::ast::*;\n use syntax::ast_util;"}, {"sha": "fa17fa04ed82096b459a5b2eaafb219c763298fb", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -39,8 +39,10 @@ use syntax::visit::{visit_foreign_item, visit_item};\n use syntax::visit::{visit_mod, visit_ty, vt};\n use syntax::opt_vec::OptVec;\n \n-use core::option::Some;\n use core::str::each_split_str;\n+use core::str;\n+use core::uint;\n+use core::vec;\n use core::hashmap::{HashMap, HashSet};\n use core::util;\n "}, {"sha": "ca7ce9c02d162fb80d2228e8053776b54ef73c2e", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -168,6 +168,7 @@ use middle::ty;\n use util::common::indenter;\n \n use core::hashmap::HashMap;\n+use core::vec;\n use syntax::ast;\n use syntax::ast::ident;\n use syntax::ast_util::path_to_ident;"}, {"sha": "bfcd6b16857b898d57a1786d30e66baf769b1498", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -20,6 +20,7 @@ use middle::trans::callee;\n use middle::trans::common::*;\n use middle::ty;\n \n+use core::str;\n use syntax::ast;\n \n // Take an inline assembly expression and splat it out via LLVM"}, {"sha": "a36eb39c049faadcbb410f4ea2a0be59e75b480e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -66,7 +66,12 @@ use util::ppaux::{Repr, ty_to_str};\n \n use core::hash;\n use core::hashmap::{HashMap, HashSet};\n+use core::int;\n+use core::io;\n use core::libc::c_uint;\n+use core::str;\n+use core::uint;\n+use core::vec;\n use extra::time;\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt_to_str, path_name};"}, {"sha": "a77e27bf0fe41a888eb5cb8a966b57f26ad8c7c8", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,8 +19,11 @@ use middle::trans::common::*;\n use middle::trans::machine::llalign_of_min;\n use syntax::codemap::span;\n \n+use core::cast;\n use core::hashmap::HashMap;\n use core::libc::{c_uint, c_ulonglong, c_char};\n+use core::str;\n+use core::vec;\n \n pub fn terminate(cx: block, _: &str) {\n     cx.terminated = true;"}, {"sha": "c9fb01905fb2f00f4c37109f7be13c7098a3e92a", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,6 +11,9 @@\n use core::prelude::*;\n \n use core::libc::c_uint;\n+use core::ptr;\n+use core::uint;\n+use core::vec;\n use lib::llvm::{llvm, TypeRef, Integer, Pointer, Float, Double};\n use lib::llvm::{Struct, Array, Attribute};\n use lib::llvm::{StructRetAttribute};"}, {"sha": "1e6e31e4277f47c70dad582c03c829054a859fb3", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -43,6 +43,7 @@ use middle::ty;\n use middle::typeck;\n use util::ppaux::Repr;\n \n+use core::vec;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::visit;"}, {"sha": "fa3e6eeb0b6a10a921c7ad1e398011c525373ba9", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -26,6 +26,8 @@ use middle::trans::type_of::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n+use core::str;\n+use core::vec;\n use syntax::ast;\n use syntax::ast_map::path_name;\n use syntax::ast_util;"}, {"sha": "d148dbd2183b9366bbaf2813f2d9d2f1e74159e2", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -40,11 +40,15 @@ use middle::borrowck::root_map_key;\n use util::ppaux::{Repr};\n \n use core::cast::transmute;\n+use core::cast;\n use core::hash;\n use core::hashmap::{HashMap, HashSet};\n use core::libc::{c_uint, c_longlong, c_ulonglong};\n+use core::ptr;\n+use core::str;\n use core::to_bytes;\n use core::vec::raw::to_ptr;\n+use core::vec;\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt};\n use syntax::codemap::span;"}, {"sha": "d47fc184cf3c983fde3d43125be478cb499233c4", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -31,6 +31,7 @@ use middle::ty;\n use util::ppaux::{Repr, ty_to_str};\n \n use core::libc::c_uint;\n+use core::str;\n use syntax::{ast, ast_util, ast_map};\n \n pub fn const_lit(cx: @CrateContext, e: @ast::expr, lit: ast::lit)"}, {"sha": "5ef4376e8117c25e52bfc9a13d63b9576c9cb39b", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -24,6 +24,8 @@ use middle::ty;\n use util::common::indenter;\n use util::ppaux;\n \n+use core::str;\n+use core::vec;\n use syntax::ast;\n use syntax::ast::ident;\n use syntax::ast_map::path_mod;"}, {"sha": "c8b9e3f8f0e199222dffe35caab6397faddf4f52", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -104,6 +104,7 @@ use util::common::indenter;\n use util::ppaux::ty_to_str;\n \n use core::to_bytes;\n+use core::uint;\n use syntax::ast;\n use syntax::codemap::span;\n use syntax::parse::token::special_idents;"}, {"sha": "c1661b80cf865ced493e2f8cba4c89ef29429033", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -20,8 +20,14 @@ use middle::trans;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n+use core::cast;\n use core::hashmap::HashMap;\n use core::libc;\n+use core::option;\n+use core::ptr;\n+use core::str;\n+use core::sys;\n+use core::vec;\n use syntax::codemap::span;\n use syntax::parse::token::ident_interner;\n use syntax::{ast, codemap, ast_util, ast_map};"}, {"sha": "99860e60c6b8ded66a8ca06a17bd043d585616c2", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -154,6 +154,7 @@ use util::ppaux::Repr;\n \n use core::cast::transmute;\n use core::hashmap::HashMap;\n+use core::vec;\n use syntax::print::pprust::{expr_to_str};\n use syntax::ast;\n use syntax::codemap;"}, {"sha": "a7a8cd088d2b0d26d14c0ea403c5dc5c4774ecad", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -34,6 +34,9 @@ use middle::ty;\n use middle::ty::FnSig;\n use util::ppaux::ty_to_str;\n \n+use core::str;\n+use core::uint;\n+use core::vec;\n use syntax::codemap::span;\n use syntax::{ast, ast_util};\n use syntax::{attr, ast_map};"}, {"sha": "013a40c95c54d06196e3e992d656b6509fdfd6a1", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -36,7 +36,10 @@ use middle::ty;\n use util::ppaux;\n use util::ppaux::ty_to_short_str;\n \n+use core::io;\n use core::libc::c_uint;\n+use core::str;\n+use core::vec;\n use extra::time;\n use syntax::ast;\n "}, {"sha": "1f9bdcb5abb21857c204a96749977b5d79ecd028", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,6 +19,7 @@ use middle::trans::common::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n+use core::vec;\n use syntax::ast;\n use syntax::ast_map::path_name;\n use syntax::ast_util::local_def;"}, {"sha": "1e43a3c502bae407310e139158c223874bf27eef", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -31,6 +31,8 @@ use middle::typeck;\n use util::common::indenter;\n use util::ppaux::Repr;\n \n+use core::str;\n+use core::vec;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::ast_util;\n use syntax::{ast, ast_map};"}, {"sha": "7e29d3bd33a823ec3accdc6a8831069470d2d5db", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -32,6 +32,7 @@ use middle::ty::{FnSig};\n use middle::typeck;\n use util::ppaux::Repr;\n \n+use core::vec;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_map::path_name;"}, {"sha": "8815259b3cc7b9c5258966b1caf8195b8effb427", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -27,9 +27,17 @@ use util::ppaux::{Repr, UserString};\n use util::common::{indenter};\n use util::enum_set::{EnumSet, CLike};\n \n+use core::cast;\n+use core::cmp;\n+use core::hashmap::{HashMap, HashSet};\n+use core::iter;\n+use core::ops;\n use core::ptr::to_unsafe_ptr;\n use core::to_bytes;\n-use core::hashmap::{HashMap, HashSet};\n+use core::u32;\n+use core::uint;\n+use core::vec;\n+use extra::smallintmap::SmallIntMap;\n use syntax::ast::*;\n use syntax::ast_util::is_local;\n use syntax::ast_util;"}, {"sha": "390ba2dc0de530ffb7f4f6d7b5ac446fd56b90aa", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -63,6 +63,8 @@ use middle::typeck::rscope::{region_scope, RegionError};\n use middle::typeck::rscope::RegionParamNames;\n use middle::typeck::lookup_def_tcx;\n \n+use core::result;\n+use core::vec;\n use syntax::abi::AbiSet;\n use syntax::{ast, ast_util};\n use syntax::codemap::span;"}, {"sha": "e469856f08fa6598c50bc5a53345f05e8d6e22a3", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,6 +19,7 @@ use middle::typeck::check::{structure_of, valid_range_bounds};\n use middle::typeck::require_same_types;\n \n use core::hashmap::{HashMap, HashSet};\n+use core::vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;"}, {"sha": "1b7368b3dbfbe8c8327979d85a0e89210a29eacf", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -96,6 +96,9 @@ use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use util::common::indenter;\n \n use core::hashmap::HashSet;\n+use core::result;\n+use core::uint;\n+use core::vec;\n use extra::list::Nil;\n use syntax::ast::{def_id, sty_value, sty_region, sty_box};\n use syntax::ast::{sty_uniq, sty_static, node_id};"}, {"sha": "7ba759e63ee1d86449e0341da156bde9a4711cff", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -111,7 +111,10 @@ use util::ppaux;\n \n use core::cast::transmute;\n use core::hashmap::HashMap;\n+use core::result;\n+use core::str;\n use core::util::replace;\n+use core::vec;\n use extra::list::Nil;\n use syntax::abi::AbiSet;\n use syntax::ast::{provided, required};"}, {"sha": "13b9c59e2d9cc597014f9743983a9571b459f70d", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -36,10 +36,11 @@ use middle::typeck::check::FnCtxt;\n use middle::typeck::check::regionmanip::relate_nested_regions;\n use middle::typeck::infer::resolve_and_force_all_but_regions;\n use middle::typeck::infer::resolve_type;\n-use util::ppaux::{note_and_explain_region, ty_to_str,\n-                  region_to_str};\n+use util::ppaux::{note_and_explain_region, ty_to_str, region_to_str};\n use middle::pat_util;\n \n+use core::result;\n+use core::uint;\n use syntax::ast::{ManagedSigil, OwnedSigil, BorrowedSigil};\n use syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n use syntax::ast;\n@@ -789,6 +790,8 @@ pub mod guarantor {\n     use syntax::codemap::span;\n     use util::ppaux::{ty_to_str};\n \n+    use core::uint;\n+\n     pub fn for_addr_of(rcx: @mut Rcx, expr: @ast::expr, base: @ast::expr) {\n         /*!\n          * Computes the guarantor for an expression `&base` and then"}, {"sha": "37497e9a2bb2d1b33282509737246dd8542ce3f0", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -26,6 +26,8 @@ use util::ppaux::tys_to_str;\n use util::ppaux;\n \n use core::hashmap::HashSet;\n+use core::result;\n+use core::uint;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;"}, {"sha": "f9aa01c09564c655d25d1da7049817b9a4e77889", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -54,9 +54,11 @@ use syntax::visit::{Visitor, SimpleVisitor};\n use syntax::visit::{visit_mod};\n use util::ppaux::ty_to_str;\n \n-use core::result::Ok;\n use core::hashmap::{HashMap, HashSet};\n+use core::old_iter;\n+use core::result::Ok;\n use core::uint;\n+use core::vec;\n \n pub struct UniversalQuantificationResult {\n     monotype: t,"}, {"sha": "a2c1211c5c46ecdf988472c2a0ef042ac9d8a07e", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -47,6 +47,8 @@ use util::common::pluralize;\n use util::ppaux;\n use util::ppaux::UserString;\n \n+use core::result;\n+use core::vec;\n use syntax::abi::AbiSet;\n use syntax::ast::{RegionTyParamBound, TraitTyParamBound};\n use syntax::ast;"}, {"sha": "f0fe48918073edaadf5964d2dac8259c4725e2c7", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -68,6 +68,7 @@ use middle::typeck::infer::{cres, InferCtxt, ures};\n use util::common::indent;\n \n use core::result::{iter_vec2, map_vec2};\n+use core::vec;\n use syntax::ast::{Onceness, purity};\n use syntax::ast;\n use syntax::opt_vec;"}, {"sha": "6a1fd05baf74531fcd319a99eb0da65a09dca9a4", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -267,6 +267,8 @@ use middle::typeck::isr_alist;\n use util::common::indent;\n use util::ppaux::{bound_region_to_str, ty_to_str, trait_ref_to_str};\n \n+use core::result;\n+use core::vec;\n use extra::list::Nil;\n use extra::smallintmap::SmallIntMap;\n use syntax::ast::{m_imm, m_mutbl};"}, {"sha": "ea0bdc68ac2533526a0d38db624547b50b59fcf9", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -58,6 +58,7 @@ use middle::typeck::infer::unify::Root;\n use util::common::{indent, indenter};\n use util::ppaux::ty_to_str;\n \n+use core::vec;\n use syntax::ast;\n \n pub static resolve_nested_tvar: uint = 0b0000000001;"}, {"sha": "ef3b837e98a16829099ebee687cf1191a8e13cb0", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,6 +18,8 @@ use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::unify::{Redirect, Root, VarValue};\n use util::ppaux::{mt_to_str, ty_to_str, trait_ref_to_str};\n \n+use core::str;\n+use core::uint;\n use syntax::ast;\n \n pub trait InferStr {"}, {"sha": "5cb4928d51486b760bcfb02fb336566cf50112d0", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -59,6 +59,7 @@ use util::ppaux::Repr;\n use util::ppaux;\n \n use core::hashmap::HashMap;\n+use core::result;\n use extra::list::List;\n use extra::list;\n use syntax::codemap::span;"}, {"sha": "709d631de117a99e341ad29c1012e866308dec54", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,6 +12,7 @@ use core::prelude::*;\n \n use middle::ty;\n \n+use core::result;\n use syntax::ast;\n use syntax::codemap::span;\n use syntax::opt_vec::OptVec;"}, {"sha": "07056a10f3a94dfb83e59afa6aa294327173315d", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -34,6 +34,12 @@ extern mod std(name = \"extra\", vers = \"0.7-pre\");\n #[cfg(not(stage0))]\n extern mod std(name = \"std\", vers = \"0.7-pre\");\n \n+// For bootstrapping purposes.\n+#[cfg(stage0)]\n+pub use core::str;\n+#[cfg(stage0)]\n+pub use core::unstable;\n+\n use core::prelude::*;\n \n use driver::driver::{host_triple, optgroups, early_error};\n@@ -44,6 +50,13 @@ use driver::driver::{compile_input};\n use driver::session;\n use middle::lint;\n \n+use core::io;\n+use core::os;\n+use core::result;\n+use core::str;\n+use core::task;\n+use core::uint;\n+use core::vec;\n use extra::getopts::{groups, opt_present};\n use extra::getopts;\n use syntax::codemap;\n@@ -148,6 +161,18 @@ pub mod lib {\n     pub mod llvm;\n }\n \n+// A curious inner module that allows ::std::foo to be available in here for\n+// macros.\n+mod std {\n+    pub use core::cmp;\n+    pub use core::os;\n+    pub use core::str;\n+    pub use core::sys;\n+    pub use core::to_bytes;\n+    pub use core::unstable;\n+    pub use extra::serialize;\n+}\n+\n pub fn version(argv0: &str) {\n     let mut vers = ~\"unknown version\";\n     let env_vers = env!(\"CFG_VERSION\");"}, {"sha": "a44c409aa33b585792f5c3484bf3248c71634829", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,6 +15,8 @@ use syntax::codemap::{span};\n use syntax::visit;\n \n use core::hashmap::HashSet;\n+use core::io;\n+use core::str;\n use extra;\n \n pub fn time<T>(do_it: bool, what: ~str, thunk: &fn() -> T) -> T {"}, {"sha": "4e9b7cf00a0bd843e620789e06020047d9effe9b", "filename": "src/librustc/util/enum_set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Futil%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Futil%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fenum_set.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -98,6 +98,7 @@ impl<E:CLike> BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n mod test {\n     use core::prelude::*;\n \n+    use core::cast;\n     use core::iter;\n \n     use util::enum_set::*;"}, {"sha": "dcf631f0f7b7f40a64c90475dbfde2b7968d6760", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -31,6 +31,9 @@ use syntax::codemap::span;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n \n+use core::str;\n+use core::vec;\n+\n /// Produces a string suitable for debugging output.\n pub trait Repr {\n     fn repr(&self, tcx: ctxt) -> ~str;"}, {"sha": "23810748b436fbf99240579aa171454415d50070", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -23,6 +23,8 @@ use parse;\n \n use core::cell::Cell;\n use core::comm::{stream, SharedChan, Port};\n+use core::task;\n+use core::vec;\n use rustc::driver::driver;\n use rustc::driver::session::Session;\n use rustc::driver::session::{basic_options, options};"}, {"sha": "d2d9ec7d79bd85e0a4cc9203ea9f2b52bfcf07d9", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -17,6 +17,7 @@ an AST's attributes.\n \n use core::prelude::*;\n \n+use core::str;\n use syntax::ast;\n use syntax::attr;\n "}, {"sha": "a1dad7d17f8e8d2b9afe7b2c7a2c372c136a6d3d", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -27,6 +27,7 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n+use core::vec;\n use syntax::ast;\n use syntax::ast_map;\n "}, {"sha": "4beb8583bae7b5c15212ed85c4f780e0fb53720d", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,9 +11,12 @@\n use core::prelude::*;\n \n use core::cell::Cell;\n-use core::run;\n-use core::run::ProcessOutput;\n+use core::os;\n use core::result::Result;\n+use core::result;\n+use core::run::ProcessOutput;\n+use core::run;\n+use core::vec;\n use extra::getopts;\n \n /// The type of document to output\n@@ -243,7 +246,9 @@ pub fn maybe_find_pandoc(\n #[cfg(test)]\n mod test {\n     use core::prelude::*;\n+\n     use config::*;\n+    use core::result;\n     use core::run::ProcessOutput;\n \n     fn parse_config(args: &[~str]) -> Result<Config, ~str> {"}, {"sha": "7a3ab259b1d97abcd3ce08fe5c56f0b0857ee376", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -24,7 +24,9 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n+use core::str;\n use core::util;\n+use core::vec;\n \n pub fn mk_pass() -> Pass {\n     Pass {"}, {"sha": "2d5f60e714b5082511c9697d7d534ca9498c063f", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,6 +14,8 @@ use core::prelude::*;\n \n use doc;\n \n+use core::vec;\n+\n pub type AstId = int;\n \n #[deriving(Eq)]"}, {"sha": "3303a79d1b284551753ee579af10b64ff40cc9a3", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,6 +16,8 @@ use astsrv;\n use doc::ItemUtils;\n use doc;\n \n+use core::local_data::local_data_get;\n+use core::vec;\n use syntax::ast;\n use syntax::parse::token::{ident_interner};\n use syntax::parse::token;"}, {"sha": "bd999b637c28bac3c415ce510916291597fcda63", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,6 +14,8 @@ use doc;\n #[cfg(test)] use extract;\n #[cfg(test)] use parse;\n \n+use core::vec;\n+\n pub struct Fold<T> {\n     ctxt: T,\n     fold_doc: FoldDoc<T>,"}, {"sha": "87a73f5c9d3e013628e5d9832374def2d279acd0", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,6 +22,8 @@ use markdown_pass;\n use markdown_writer;\n use pass::Pass;\n \n+use core::str;\n+\n pub fn mk_pass(config: config::Config) -> Pass {\n     Pass {\n         name: ~\"markdown_index\","}, {"sha": "d34aa7c9955d537ea7904f3fdaf884faf93a5c23", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -23,6 +23,8 @@ use pass::Pass;\n use sort_pass;\n \n use core::cell::Cell;\n+use core::str;\n+use core::vec;\n use syntax;\n \n pub fn mk_pass(writer_factory: WriterFactory) -> Pass {\n@@ -539,6 +541,8 @@ mod test {\n     use tystr_pass;\n     use unindent_pass;\n \n+    use core::str;\n+\n     fn render(source: ~str) -> ~str {\n         let (srv, doc) = create_doc_srv(source);\n         let markdown = write_markdown_str_srv(srv, doc);"}, {"sha": "86b51dfabf04edbb1edbcf19fadbbaa9b617a0a7", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,8 +14,15 @@ use config;\n use doc::ItemUtils;\n use doc;\n \n-use core::run;\n use core::comm::*;\n+use core::comm;\n+use core::io;\n+use core::libc;\n+use core::os;\n+use core::result;\n+use core::run;\n+use core::str;\n+use core::task;\n use extra::future;\n \n pub enum WriteInstr {"}, {"sha": "29a6765f16d537700284d1b423e68f6272386ecf", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -27,6 +27,7 @@ use pass::Pass;\n use util::NominalOp;\n \n use core::comm::*;\n+use core::task;\n use syntax::ast;\n \n #[cfg(test)] use doc::PageUtils;"}, {"sha": "8a51339c89669451cbceb3064849e7fb614d1409", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,8 @@\n \n use core::prelude::*;\n \n+use core::vec;\n+\n use astsrv;\n use doc;\n use time;"}, {"sha": "7ed5d5f5516308dab8d770c580941c5ef2ab2f93", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -66,6 +66,15 @@ pub mod escape_pass;\n pub mod prune_private_pass;\n pub mod util;\n \n+mod std {\n+    pub use core::clone;\n+    pub use core::cmp;\n+    pub use core::os;\n+    pub use core::str;\n+    pub use core::sys;\n+    pub use core::unstable;\n+}\n+\n pub fn main() {\n     let args = os::args();\n "}, {"sha": "1a475879fc10bf4cf8ab2ccc5f318bf7dc58a65a", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,6 +19,8 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n+use core::str;\n+\n pub fn mk_pass() -> Pass {\n     Pass {\n         name: ~\"sectionalize\",\n@@ -170,6 +172,9 @@ mod test {\n     use extract;\n     use sectionalize_pass::run;\n \n+    use core::str;\n+    use core::vec;\n+\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv.clone(), ~\"\");"}, {"sha": "7e5444af05ceddb1af18d9845655ee81a0297fd0", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -149,6 +149,8 @@ mod test {\n     use sectionalize_pass;\n     use text_pass::mk_pass;\n \n+    use core::str;\n+\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv.clone(), ~\"\");"}, {"sha": "57a45d3dcc26b15489c176bfdfdcafc6a748081c", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -21,6 +21,7 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n+use core::vec;\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::ast_map;"}, {"sha": "e78edf1fbf3d63774ddcddb5b57dc35c62612065", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -21,6 +21,10 @@ middle of a line, and each of the following lines is indented.\n \n use core::prelude::*;\n \n+use core::str;\n+use core::task;\n+use core::uint;\n+use core::vec;\n use pass::Pass;\n use text_pass;\n "}, {"sha": "d17379a2193b5f702f505592585ed63235764e36", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -223,7 +223,7 @@ fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n             None => { },\n         }\n         if (should_compile) {\n-            io::println(fmt!(\"compiling %s...\", src_filename));\n+            println(fmt!(\"compiling %s...\", src_filename));\n             driver::compile_upto(sess, cfg, &input, driver::cu_everything,\n                                  Some(outputs));\n             true\n@@ -271,7 +271,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n             //rl::clear();\n         }\n         ~\"help\" => {\n-            io::println(\n+            println(\n                 ~\":{\\\\n ..lines.. \\\\n:}\\\\n - execute multiline command\\n\" +\n                 \":load <crate> ... - \\\n                   loads given crates as dynamic libraries\\n\" +\n@@ -305,9 +305,9 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n                 }\n             }\n             if loaded_crates.is_empty() {\n-                io::println(\"no crates loaded\");\n+                println(\"no crates loaded\");\n             } else {\n-                io::println(fmt!(\"crates loaded: %s\",\n+                println(fmt!(\"crates loaded: %s\",\n                                  str::connect(loaded_crates, \", \")));\n             }\n         }\n@@ -328,7 +328,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n             }\n             action = action_run_line(multiline_cmd);\n         }\n-        _ => io::println(~\"unknown cmd: \" + cmd)\n+        _ => println(~\"unknown cmd: \" + cmd)\n     }\n     return action;\n }\n@@ -394,9 +394,9 @@ pub fn main() {\n \n     // only print this stuff if the user is actually typing into rusti\n     if istty {\n-        io::println(\"WARNING: The Rust REPL is experimental and may be\");\n-        io::println(\"unstable. If you encounter problems, please use the\");\n-        io::println(\"compiler instead. Type :help for help.\");\n+        println(\"WARNING: The Rust REPL is experimental and may be\");\n+        println(\"unstable. If you encounter problems, please use the\");\n+        println(\"compiler instead. Type :help for help.\");\n \n         unsafe {\n             do rl::complete |line, suggest| {\n@@ -416,7 +416,7 @@ pub fn main() {\n             Some(line) => {\n                 if line.is_empty() {\n                     if istty {\n-                        io::println(\"()\");\n+                        println(\"()\");\n                     }\n                     loop;\n                 }"}, {"sha": "664e5e3b246397a72b36e2b9f1fef4bac03a550c", "filename": "src/librusti/wrapper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrusti%2Fwrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrusti%2Fwrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fwrapper.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -26,5 +26,5 @@\n extern mod std;\n \n fn print<T>(result: T) {\n-    io::println(fmt!(\"%?\", result));\n+    println(fmt!(\"%?\", result));\n }"}, {"sha": "2fca04196293647de3ad99087e3f3d2243bdffdd", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,10 +11,12 @@\n // rustpkg utilities having to do with paths and directories\n \n use core::prelude::*;\n+\n pub use util::{PkgId, RemotePath, LocalPath};\n+pub use util::{normalize, OutputType, Main, Lib, Bench, Test};\n use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n use core::os::mkdir_recursive;\n-pub use util::{normalize, OutputType, Main, Lib, Bench, Test};\n+use core::os;\n \n /// Returns the value of RUST_PATH, as a list\n /// of Paths. In general this should be read from the"}, {"sha": "6b560541e52bc62527648d3a2d1d0abbeb1c3ca7", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -21,7 +21,7 @@\n #[no_std];\n \n extern mod core(name = \"std\");\n-extern mod std(name = \"extra\");\n+extern mod extra(name = \"extra\");\n \n extern mod rustc;\n extern mod syntax;\n@@ -32,7 +32,7 @@ pub use core::path::Path;\n use core::hashmap::HashMap;\n use rustc::driver::{driver, session};\n use rustc::metadata::filesearch;\n-use std::{getopts};\n+use extra::{getopts};\n use syntax::{ast, diagnostic};\n use util::*;\n use path_util::{build_pkg_id_in_workspace, pkgid_src_in_workspace, u_rwx};\n@@ -51,6 +51,15 @@ mod workspace;\n \n pub mod usage;\n \n+mod std {\n+    pub use core::cmp;\n+    pub use core::condition;\n+    pub use core::os;\n+    pub use core::str;\n+    pub use core::sys;\n+    pub use core::unstable;\n+}\n+\n /// A PkgScript represents user-supplied custom logic for\n /// special build hooks. This only exists for packages with\n /// an explicit package script."}, {"sha": "9499430ef4c20a6ca87aa035f9240a378fd5104c", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,8 +12,11 @@\n \n use context::Ctx;\n use core::hashmap::HashMap;\n+use core::io;\n+use core::os;\n use core::prelude::*;\n-use std::tempfile::mkdtemp;\n+use core::result;\n+use extra::tempfile::mkdtemp;\n use util::{PkgId, default_version};\n use path_util::{target_executable_in_workspace, target_library_in_workspace,\n                target_test_in_workspace, target_bench_in_workspace,"}, {"sha": "8019b3b8afb00494b012cd9c8ed09015353d29cc", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,9 +15,9 @@ use core::hash::Streaming;\n use core::rt::io::Writer;\n use rustc::driver::{driver, session};\n use rustc::metadata::filesearch;\n-use std::getopts::groups::getopts;\n-use std::semver;\n-use std::term;\n+use extra::getopts::groups::getopts;\n+use extra::semver;\n+use extra::term;\n use syntax::ast_util::*;\n use syntax::codemap::{dummy_sp, spanned, dummy_spanned};\n use syntax::ext::base::ExtCtxt;"}, {"sha": "e3d3642d6c7e958b7b473130d287609501fe6b88", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -282,6 +282,8 @@ mod test {\n     use super::*;\n     use prelude::*;\n \n+    use uint;\n+\n     #[test]\n     fn test() {\n         // Some code that could use that, then:"}, {"sha": "b80d3ae68f890b0913258ac6332a8bdd6f624d5c", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,6 +11,7 @@\n //! A mutable, nullable memory location\n \n use cast::transmute_mut;\n+use cmp;\n use prelude::*;\n use util::replace;\n "}, {"sha": "94b32b6af4c77819c0e78bd1ce892bb6fef8e090", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,8 +10,9 @@\n \n /*! Condition handling */\n \n-use prelude::*;\n use local_data::{local_data_pop, local_data_set};\n+use local_data;\n+use prelude::*;\n \n // helper for transmutation, shown below.\n type RustClosure = (int, int);"}, {"sha": "85397cbe777996dbc5ba1e5a467097acf1e816d8", "filename": "src/libstd/core.rc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcore.rc?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -224,5 +224,8 @@ mod std {\n     pub use kinds;\n     pub use sys;\n     pub use pipes;\n+    pub use unstable;\n+    pub use str;\n+    pub use os;\n }\n "}, {"sha": "9828ff4e31742c10f6ffe0588483a7730dbf1e45", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -387,6 +387,8 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n+    use uint;\n+\n     #[test]\n     fn test_siphash() {\n         let vecs : [[u8, ..8], ..64] = ["}, {"sha": "5847034d02601334356e9461852ae7c15327a117", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -257,6 +257,9 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n+    use int;\n+    use uint;\n+\n     #[test]\n     fn test_to_vec() {\n         let xs = ~[1, 2, 3];"}, {"sha": "69bb1b0b766cf1026c754069f1a7208f6dbff329", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -17,8 +17,11 @@ implementing the `Iterator` trait.\n \n */\n \n-use prelude::*;\n+use cmp;\n+use iter;\n use num::{Zero, One};\n+use num;\n+use prelude::*;\n \n pub trait Iterator<A> {\n     /// Advance the iterator and return the next value. Return `None` when the end is reached.\n@@ -506,6 +509,9 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n+    use iter;\n+    use uint;\n+\n     #[test]\n     fn test_counter_to_vec() {\n         let mut it = Counter::new(0, 5).take(10);"}, {"sha": "6227f9ad3888e82ab1d3a5d172e36d8306907bba", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -27,7 +27,9 @@ magic.\n */\n \n use prelude::*;\n+\n use task::local_data_priv::{local_get, local_pop, local_modify, local_set, Handle};\n+use task;\n \n /**\n  * Indexes a task-local data slot. The function's code pointer is used for"}, {"sha": "64737c47f295d67748448aa9c8bc5504591a8600", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,7 +13,9 @@\n use libc::c_int;\n use num::{Zero, One, strconv};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n+use num;\n use prelude::*;\n+use to_str;\n \n pub use cmath::c_float_targ_consts::*;\n \n@@ -958,9 +960,12 @@ impl num::FromStrRadix for f32 {\n #[cfg(test)]\n mod tests {\n     use f32::*;\n-    use num::*;\n     use prelude::*;\n \n+    use num::*;\n+    use num;\n+    use sys;\n+\n     #[test]\n     fn test_num() {\n         num::test_num(10f32, 2f32);"}, {"sha": "f01d45bbd1db491978739e19690e9ca9ce1babbb", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,7 +13,9 @@\n use libc::c_int;\n use num::{Zero, One, strconv};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n+use num;\n use prelude::*;\n+use to_str;\n \n pub use cmath::c_double_targ_consts::*;\n pub use cmp::{min, max};\n@@ -999,9 +1001,12 @@ impl num::FromStrRadix for f64 {\n #[cfg(test)]\n mod tests {\n     use f64::*;\n-    use num::*;\n     use prelude::*;\n \n+    use num::*;\n+    use num;\n+    use sys;\n+\n     #[test]\n     fn test_num() {\n         num::test_num(10f64, 2f64);"}, {"sha": "30de95b484669d6eb2fbc8571ef99f79d51b3f61", "filename": "src/libstd/num/float.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -20,10 +20,13 @@\n \n // PORT this must match in width according to architecture\n \n+use f64;\n use libc::c_int;\n use num::{Zero, One, strconv};\n use num::FPCategory;\n+use num;\n use prelude::*;\n+use to_str;\n \n pub use f64::{add, sub, mul, div, rem, lt, le, eq, ne, ge, gt};\n pub use f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};\n@@ -43,7 +46,7 @@ pub static neg_infinity: float = -1.0/0.0;\n pub mod consts {\n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n     // staticants from cmath.\n-    /// Archimedes' staticant\n+    /// Archimedes' constant\n     pub static pi: float = 3.14159265358979323846264338327950288;\n \n     /// pi/2.0\n@@ -945,10 +948,13 @@ impl Float for float {\n \n #[cfg(test)]\n mod tests {\n-    use num::*;\n     use super::*;\n     use prelude::*;\n \n+    use num::*;\n+    use num;\n+    use sys;\n+\n     #[test]\n     fn test_num() {\n         num::test_num(10f, 2f);"}, {"sha": "778e741ff3be359dd59c4e7e85422abb3892a9f7", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -557,6 +557,13 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n+    use i16;\n+    use i32;\n+    use i64;\n+    use i8;\n+    use num;\n+    use sys;\n+\n     #[test]\n     fn test_num() {\n         num::test_num(10 as $T, 2 as $T);"}, {"sha": "f16b4f4a740b1b2a65dd1e471becd990e95b3ca6", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -402,6 +402,14 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n+    use num;\n+    use sys;\n+    use u16;\n+    use u32;\n+    use u64;\n+    use u8;\n+    use uint;\n+\n     #[test]\n     fn test_num() {\n         num::test_num(10 as $T, 2 as $T);"}, {"sha": "c1b5c159a24cd6fd8ab2f80e45b0651983e5ea26", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -31,8 +31,10 @@ use io;\n use libc;\n use libc::{c_char, c_void, c_int, size_t};\n use libc::{mode_t, FILE};\n+use local_data;\n use option;\n use option::{Some, None};\n+use os;\n use prelude::*;\n use ptr;\n use str;"}, {"sha": "07864ce419e628ae9be5a543279b0cb0a57fe603", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 4, "deletions": 48, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,8 +10,7 @@\n \n //! The Rust prelude. Imported into every module by default.\n \n-/* Reexported core operators */\n-\n+// Reexported core operators\n pub use either::{Either, Left, Right};\n pub use kinds::{Const, Copy, Owned};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n@@ -21,12 +20,10 @@ pub use ops::{Shl, Shr, Index};\n pub use option::{Option, Some, None};\n pub use result::{Result, Ok, Err};\n \n-/* Reexported functions */\n-\n+// Reexported functions\n pub use io::{print, println};\n \n-/* Reexported types and traits */\n-\n+// Reexported types and traits\n pub use clone::{Clone, DeepClone};\n pub use cmp::{Eq, ApproxEq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater, Equiv};\n pub use char::Char;\n@@ -64,48 +61,7 @@ pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{OwnedVector, OwnedCopyableVector, MutableVector};\n pub use io::{Reader, ReaderUtil, Writer, WriterUtil};\n \n-/* Reexported runtime types */\n+// Reexported runtime types\n pub use comm::{stream, Port, Chan, GenericChan, GenericSmartChan, GenericPort, Peekable};\n pub use task::spawn;\n \n-/* Reexported modules */\n-\n-pub use at_vec;\n-pub use bool;\n-pub use cast;\n-pub use char;\n-pub use cmp;\n-pub use either;\n-pub use f32;\n-pub use f64;\n-pub use float;\n-pub use i16;\n-pub use i32;\n-pub use i64;\n-pub use i8;\n-pub use int;\n-pub use io;\n-pub use iter;\n-pub use old_iter;\n-pub use libc;\n-pub use local_data;\n-pub use num;\n-pub use ops;\n-pub use option;\n-pub use os;\n-pub use path;\n-pub use comm;\n-pub use unstable;\n-pub use ptr;\n-pub use rand;\n-pub use result;\n-pub use str;\n-pub use sys;\n-pub use task;\n-pub use to_str;\n-pub use u16;\n-pub use u32;\n-pub use u64;\n-pub use u8;\n-pub use uint;\n-pub use vec;"}, {"sha": "65375e410a67fbb176ee59a0a5ecafc5b30124fa", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -430,6 +430,11 @@ pub mod ptr_tests {\n     use super::*;\n     use prelude::*;\n \n+    use cast;\n+    use libc;\n+    use str;\n+    use vec;\n+\n     #[test]\n     fn test() {\n         unsafe {\n@@ -522,18 +527,19 @@ pub mod ptr_tests {\n \n     #[test]\n     fn test_to_option() {\n-        let p: *int = null();\n-        // FIXME (#6641): Usage of unsafe methods in safe code doesn't cause an error.\n-        assert_eq!(p.to_option(), None);\n+        unsafe {\n+            let p: *int = null();\n+            assert_eq!(p.to_option(), None);\n \n-        let q: *int = &2;\n-        assert_eq!(q.to_option().unwrap(), &2);     // FIXME (#6641)\n+            let q: *int = &2;\n+            assert_eq!(q.to_option().unwrap(), &2);\n \n-        let p: *mut int = mut_null();\n-        assert_eq!(p.to_option(), None);            // FIXME (#6641)\n+            let p: *mut int = mut_null();\n+            assert_eq!(p.to_option(), None);\n \n-        let q: *mut int = &mut 2;\n-        assert_eq!(q.to_option().unwrap(), &2);     // FIXME (#6641)\n+            let q: *mut int = &mut 2;\n+            assert_eq!(q.to_option().unwrap(), &2);\n+        }\n     }\n \n     #[test]"}, {"sha": "2c8681ef2883a1b5d73753c438c6c37f2124e4da", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -40,10 +40,13 @@ fn main () {\n ~~~\n */\n \n-\n+use cast;\n+use cmp;\n use int;\n+use local_data;\n use prelude::*;\n use str;\n+use sys;\n use u32;\n use uint;\n use util;"}, {"sha": "a66e35f68df7dba2d699833c1579b8e4a4659f21", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -20,6 +20,7 @@\n // Generating Random Variables\"], but more robust. If one wanted, one\n // could implement VIZIGNOR the ZIGNOR paper for more speed.\n \n+use f64;\n use prelude::*;\n use rand::{Rng,Rand};\n "}, {"sha": "0a9e0b1e38f23268f2d852002813505b6ef3dfd2", "filename": "src/libstd/rt/io/flate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frt%2Fio%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fflate.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -100,6 +100,8 @@ mod test {\n     use super::super::mem::*;\n     use super::super::Decorator;\n \n+    use str;\n+\n     #[test]\n     #[ignore]\n     fn smoke_test() {"}, {"sha": "bd9cff76e57630754591785c8e1208bb7c541047", "filename": "src/libstd/rt/io/mem.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frt%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frt%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmem.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,9 +15,10 @@\n //! * Should probably have something like this for strings.\n //! * Should they implement Closable? Would take extra state.\n \n+use cmp::min;\n use prelude::*;\n use super::*;\n-use cmp::min;\n+use vec;\n \n /// Writes to an owned, growable byte vector\n pub struct MemWriter {"}, {"sha": "12c683120c8da688b05138e5726ec62ea26e0ad4", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,12 +13,14 @@\n //! local storage, and logging. Even a 'freestanding' Rust would likely want\n //! to implement this.\n \n-use prelude::*;\n-use libc::{c_void, uintptr_t};\n use cast::transmute;\n+use libc::{c_void, uintptr_t};\n+use ptr;\n+use prelude::*;\n use rt::local::Local;\n-use super::local_heap::LocalHeap;\n use rt::logging::StdErrLogger;\n+use super::local_heap::LocalHeap;\n+use super::sched::Scheduler;\n \n pub struct Task {\n     heap: LocalHeap,"}, {"sha": "6263fd47df67405236155b3db0d217200bd40eee", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -31,7 +31,11 @@\n \n use libc::{size_t, c_int, c_uint, c_void, c_char, uintptr_t};\n use libc::{malloc, free};\n+use libc;\n use prelude::*;\n+use ptr;\n+use str;\n+use vec;\n \n pub static UNKNOWN: c_int = -1;\n pub static OK: c_int = 0;"}, {"sha": "7c73aca3af93270655855618c6f866612cb77971", "filename": "src/libstd/run.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,10 +11,11 @@\n //! Process spawning.\n \n use cast;\n+use comm::{stream, SharedChan, GenericChan, GenericPort};\n+use int;\n use io;\n-use libc;\n use libc::{pid_t, c_void, c_int};\n-use comm::{stream, SharedChan, GenericChan, GenericPort};\n+use libc;\n use option::{Some, None};\n use os;\n use prelude::*;\n@@ -463,6 +464,9 @@ fn spawn_process_os(prog: &str, args: &[~str],\n     };\n     use libc::funcs::extra::msvcrt::get_osfhandle;\n \n+    use sys;\n+    use uint;\n+\n     unsafe {\n \n         let mut si = zeroed_startupinfo();\n@@ -574,6 +578,8 @@ fn zeroed_process_information() -> libc::types::os::arch::extra::PROCESS_INFORMA\n #[cfg(windows)]\n pub fn make_command_line(prog: &str, args: &[~str]) -> ~str {\n \n+    use uint;\n+\n     let mut cmd = ~\"\";\n     append_arg(&mut cmd, prog);\n     for args.each |arg| {"}, {"sha": "9c9a91f9548565c19a3d93cb10c852b5e069078d", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -33,17 +33,22 @@\n  * ~~~\n  */\n \n+use prelude::*;\n+\n+use cast;\n use cell::Cell;\n use cmp::Eq;\n-use result::Result;\n use comm::{stream, Chan, GenericChan, GenericPort, Port};\n-use prelude::*;\n+use comm;\n+use ptr;\n+use result::Result;\n use result;\n+use rt::{context, OldTaskContext};\n use task::rt::{task_id, sched_id};\n-use util;\n-use util::replace;\n+use task;\n use unstable::finally::Finally;\n-use rt::{context, OldTaskContext};\n+use util::replace;\n+use util;\n \n #[cfg(test)] use comm::SharedChan;\n "}, {"sha": "0b345b88d626196219454945807c5a1074b3f391", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -72,12 +72,14 @@\n \n #[doc(hidden)];\n \n+use prelude::*;\n+\n use cast::transmute;\n use cast;\n use cell::Cell;\n use container::Map;\n use comm::{Chan, GenericChan};\n-use prelude::*;\n+use comm;\n use ptr;\n use hashmap::HashSet;\n use task::local_data_priv::{local_get, local_set, OldHandle};\n@@ -87,6 +89,7 @@ use task::{Failure, ManualThreads, PlatformThread, SchedOpts, SingleThreaded};\n use task::{Success, TaskOpts, TaskResult, ThreadPerCore, ThreadPerTask};\n use task::{ExistingScheduler, SchedulerHandle};\n use task::unkillable;\n+use task;\n use uint;\n use util;\n use unstable::sync::{Exclusive, exclusive};"}, {"sha": "1490841b7e6510794b984126d383055ebb8160c5", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,8 +10,12 @@\n \n //! An ordered map and set for integer keys implemented as a radix trie\n \n+use local_data;\n+use os;\n use prelude::*;\n+use uint;\n use util::{swap, replace};\n+use vec;\n \n // FIXME: #5244: need to manually update the TrieNode constructor\n static SHIFT: uint = 4;"}, {"sha": "1f73aa02b017b84df2a6a852aeabf4de7f50a4ae", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,9 +10,11 @@\n \n #[doc(hidden)];\n \n-use libc;\n use comm::{GenericChan, GenericPort};\n+use comm;\n+use libc;\n use prelude::*;\n+use ptr;\n use task;\n \n pub mod at_exit;"}, {"sha": "bee317a0b930e805665e308a2c28d0c0d9dce2df", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -214,48 +214,52 @@ mod tests {\n \n     #[test]\n     fn exclusive_arc() {\n-        let mut futures = ~[];\n+        unsafe {\n+            let mut futures = ~[];\n \n-        let num_tasks = 10;\n-        let count = 10;\n+            let num_tasks = 10;\n+            let count = 10;\n \n-        let total = exclusive(~0);\n+            let total = exclusive(~0);\n \n-        for uint::range(0, num_tasks) |_i| {\n-            let total = total.clone();\n-            let (port, chan) = comm::stream();\n-            futures.push(port);\n+            for uint::range(0, num_tasks) |_i| {\n+                let total = total.clone();\n+                let (port, chan) = comm::stream();\n+                futures.push(port);\n \n-            do task::spawn || {\n-                for uint::range(0, count) |_i| {\n-                    do total.with |count| {\n-                        **count += 1;\n+                do task::spawn || {\n+                    for uint::range(0, count) |_i| {\n+                        do total.with |count| {\n+                            **count += 1;\n+                        }\n                     }\n+                    chan.send(());\n                 }\n-                chan.send(());\n-            }\n-        };\n+            };\n \n-        for futures.each |f| { f.recv() }\n+            for futures.each |f| { f.recv() }\n \n-        do total.with |total| {\n-            assert!(**total == num_tasks * count)\n-        };\n+            do total.with |total| {\n+                assert!(**total == num_tasks * count)\n+            };\n+        }\n     }\n \n     #[test] #[should_fail] #[ignore(cfg(windows))]\n     fn exclusive_poison() {\n-        // Tests that if one task fails inside of an exclusive, subsequent\n-        // accesses will also fail.\n-        let x = exclusive(1);\n-        let x2 = x.clone();\n-        do task::try || {\n-            do x2.with |one| {\n-                assert_eq!(*one, 2);\n+        unsafe {\n+            // Tests that if one task fails inside of an exclusive, subsequent\n+            // accesses will also fail.\n+            let x = exclusive(1);\n+            let x2 = x.clone();\n+            do task::try || {\n+                do x2.with |one| {\n+                    assert_eq!(*one, 2);\n+                }\n+            };\n+            do x.with |one| {\n+                assert_eq!(*one, 1);\n             }\n-        };\n-        do x.with |one| {\n-            assert_eq!(*one, 1);\n         }\n     }\n }"}, {"sha": "5539881a6481f00778bb9ff3930dae864ecc8da4", "filename": "src/libstd/util.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*!\n-\n-Miscellaneous helpers for common patterns.\n-\n-*/\n+//! Miscellaneous helpers for common patterns.\n \n+use cast;\n+use local_data;\n+use ptr;\n use prelude::*;\n use unstable::intrinsics;\n "}, {"sha": "2b8d8cb3d31dbcf25b7b48ec2a61b3fec19a45ab", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,7 @@\n \n use core::prelude::*;\n \n+use core::str;\n use core::to_bytes;\n \n #[deriving(Eq)]"}, {"sha": "48c2df5a894e6025e7b2f91a61d18487d3b8a533", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,7 +22,10 @@ use print::pprust;\n use visit;\n use syntax::parse::token::special_idents;\n \n+use core::cmp;\n use core::hashmap::HashMap;\n+use core::str;\n+use core::vec;\n \n pub enum path_elt {\n     path_mod(ident),"}, {"sha": "c8cac4ba2d77b81e95374d5dc0ed7c2945a1d673", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,11 +14,14 @@ use ast::*;\n use ast;\n use ast_util;\n use codemap::{span, spanned};\n+use opt_vec;\n use parse::token;\n use visit;\n-use opt_vec;\n-use core::hashmap::HashMap;\n \n+use core::hashmap::HashMap;\n+use core::int;\n+use core::option;\n+use core::str;\n use core::to_bytes;\n \n pub fn path_name_i(idents: &[ident], intr: @token::ident_interner) -> ~str {"}, {"sha": "2da64563159ed72f7a4ff3c689409d90e1ec9793", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -20,6 +20,7 @@ use diagnostic::span_handler;\n use parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n \n use core::hashmap::HashSet;\n+use core::vec;\n use extra;\n \n /* Constructors */"}, {"sha": "aedf30127ad49f8220415aae652dc7eb67b43d7c", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -23,7 +23,10 @@ source code snippets, etc.\n \n use core::prelude::*;\n \n+use core::cmp;\n+use core::str;\n use core::to_bytes;\n+use core::uint;\n use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {"}, {"sha": "76ede098ac34dbed32ba8e312a5e0e4ac1b91d34", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,6 +13,10 @@ use core::prelude::*;\n use codemap::{Pos, span};\n use codemap;\n \n+use core::io;\n+use core::str;\n+use core::uint;\n+use core::vec;\n use extra::term;\n \n pub type Emitter = @fn(cmsp: Option<(@codemap::CodeMap, span)>,"}, {"sha": "874c10fae5fce14f4fe587017a74988f36751759", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -21,6 +21,9 @@ use ext::base::*;\n use parse;\n use parse::token;\n \n+use core::str;\n+use core::vec;\n+\n enum State {\n     Asm,\n     Outputs,"}, {"sha": "a9b12c16b31181259539d4ac4b8776a17e1b1bc5", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -20,6 +20,7 @@ use parse;\n use parse::token;\n \n use core::hashmap::HashMap;\n+use core::vec;\n \n // new-style macro! tt code:\n //"}, {"sha": "4ae4533956e95a93640c31457aea89d124ffb7c3", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,15 +15,17 @@ encodable.rs for more.\n \n use core::prelude::*;\n \n-use ast;\n use ast::*;\n+use ast;\n+use ast_util;\n+use codemap::{span, spanned};\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::*;\n-use codemap::{span, spanned};\n-use ast_util;\n use opt_vec;\n \n+use core::uint;\n+\n pub fn expand_deriving_decodable(\n     cx: @ExtCtxt,\n     span: span,"}, {"sha": "d4b3488cc4f9fbce92f67037fca8771fd6ae899a", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -173,6 +173,9 @@ use ext::deriving::*;\n use codemap::{span,respan};\n use opt_vec;\n \n+use core::uint;\n+use core::vec;\n+\n pub use self::ty::*;\n mod ty;\n "}, {"sha": "64ce6dfbc196808a71979c782010fd13055308f6", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,6 +16,8 @@ use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use ext::deriving::generic::*;\n \n+use core::vec;\n+\n pub fn expand_deriving_iter_bytes(cx: @ExtCtxt,\n                                   span: span,\n                                   mitem: @meta_item,"}, {"sha": "796ccd304ff868cca16c0ea8e15fcf320c21d93a", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -28,6 +28,9 @@ use codemap::span;\n use parse::token::special_idents::clownshoes_extensions;\n use opt_vec;\n \n+use core::uint;\n+use core::vec;\n+\n pub mod clone;\n pub mod iter_bytes;\n pub mod encodable;"}, {"sha": "b2e039786ad7ebce083f22317caee3fbe0f6baf6", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -17,6 +17,8 @@ use ext::base::ExtCtxt;\n use ext::build::{AstBuilder, Duplicate};\n use ext::deriving::generic::*;\n \n+use core::vec;\n+\n pub fn expand_deriving_rand(cx: @ExtCtxt,\n                             span: span,\n                             mitem: @meta_item,"}, {"sha": "4d074b4d0e644addeecf6ba5bfe188bb4aaf819d", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,6 +22,8 @@ use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n \n+use core::os;\n+\n pub fn expand_syntax_ext(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n     -> base::MacResult {\n "}, {"sha": "89ed9b7294d3f8c9dba34dff91ff3453cc880345", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -24,6 +24,8 @@ use fold::*;\n use parse;\n use parse::{parse_item_from_source_str};\n \n+use core::vec;\n+\n pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                    cx: @ExtCtxt,\n                    e: &expr_,"}, {"sha": "65b29ecaa91f7162b444797fbf1cdf6376929551", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,7 +22,9 @@ use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n \n+use core::option;\n use core::unstable::extfmt::ct::*;\n+use core::vec;\n \n pub fn expand_syntax_ext(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n     -> base::MacResult {\n@@ -52,8 +54,11 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n    -> @ast::expr {\n     fn make_path_vec(cx: @ExtCtxt, ident: &str) -> ~[ast::ident] {\n         let intr = cx.parse_sess().interner;\n-        return ~[intr.intern(\"unstable\"), intr.intern(\"extfmt\"),\n-                 intr.intern(\"rt\"), intr.intern(ident)];\n+        return ~[intr.intern(\"std\"),\n+                 intr.intern(\"unstable\"),\n+                 intr.intern(\"extfmt\"),\n+                 intr.intern(\"rt\"),\n+                 intr.intern(ident)];\n     }\n     fn make_rt_path_expr(cx: @ExtCtxt, sp: span, nm: &str) -> @ast::expr {\n         let path = make_path_vec(cx, nm);\n@@ -252,6 +257,7 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n     /* 'ident' is the local buffer building up the result of fmt! */\n     let ident = cx.parse_sess().interner.intern(\"__fmtbuf\");\n     let buf = || cx.expr_ident(fmt_sp, ident);\n+    let core_ident = cx.parse_sess().interner.intern(\"std\");\n     let str_ident = cx.parse_sess().interner.intern(\"str\");\n     let push_ident = cx.parse_sess().interner.intern(\"push_str\");\n     let mut stms = ~[];\n@@ -273,7 +279,9 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n                 } else {\n                     let args = ~[cx.expr_mut_addr_of(fmt_sp, buf()), cx.expr_str(fmt_sp, s)];\n                     let call = cx.expr_call_global(fmt_sp,\n-                                                   ~[str_ident, push_ident],\n+                                                   ~[core_ident,\n+                                                     str_ident,\n+                                                     push_ident],\n                                                    args);\n                     stms.push(cx.stmt_expr(call));\n                 }"}, {"sha": "95cf4a18ab4fbabf427fbcc2c17dceb3ec400283", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,6 +16,9 @@ use ext::base::*;\n use ext::base;\n use print;\n \n+use core::io;\n+use core::vec;\n+\n pub fn expand_syntax_ext(cx: @ExtCtxt,\n                          sp: codemap::span,\n                          tt: &[ast::token_tree])"}, {"sha": "37d5e0206cb02e5628db3e6d2415b635c919b546", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,6 +19,9 @@ use ast::ident;\n use ast;\n use codemap::span;\n \n+use core::str;\n+use core::vec;\n+\n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n     pub use ext;"}, {"sha": "43bcb68b8e08f7e38703f1d384990fcee0e380e9", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -42,6 +42,7 @@ use core::prelude::*;\n use ext::base::ExtCtxt;\n use ext::pipes::proto::{protocol_};\n \n+use core::str;\n use extra::bitv::Bitv;\n \n pub fn analyze(proto: @mut protocol_, _cx: @ExtCtxt) {"}, {"sha": "db0efdd7b0fff6f7ee634d572a74157e07949046", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -23,6 +23,9 @@ use ext::quote::rt::*;\n use opt_vec;\n use opt_vec::OptVec;\n \n+use core::str;\n+use core::vec;\n+\n pub trait gen_send {\n     fn gen_send(&mut self, cx: @ExtCtxt, try: bool) -> @ast::item;\n     fn to_ty(&mut self, cx: @ExtCtxt) -> @ast::Ty;"}, {"sha": "9182b99bf301ef64464901cff9073369cc4cb871", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,6 +19,8 @@ use parse::token::*;\n use parse::token;\n use parse;\n \n+use core::vec;\n+\n /**\n *\n * Quasiquoting works via token trees."}, {"sha": "8a60b239b8904d616fd49e68489eaf5922cca3b0", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -20,6 +20,11 @@ use ext::build::AstBuilder;\n use parse;\n use print::pprust;\n \n+use core::io;\n+use core::result;\n+use core::str;\n+use core::vec;\n+\n // These macros all relate to the file system; they either return\n // the column/row/filename of the expression, or they include\n // a given file into the current one."}, {"sha": "111e176d4c5ca6d3c5c66e4715d4fa8ffcc4789c", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,6 +18,8 @@ use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n use parse::token::keywords;\n \n+use core::vec;\n+\n pub fn expand_trace_macros(cx: @ExtCtxt,\n                            sp: span,\n                            tt: &[ast::token_tree])"}, {"sha": "183bc2a77c502e17e4b5b2f875c43a01a5f0e52c", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -23,6 +23,9 @@ use parse::token::{Token, EOF, to_str, nonterminal};\n use parse::token;\n \n use core::hashmap::HashMap;\n+use core::str;\n+use core::uint;\n+use core::vec;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,\n only by calling out to the main rust parser for named nonterminals (which it"}, {"sha": "261943132b32e544665a2ccba83c9434872843a6", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -26,6 +26,7 @@ use parse::token::{FAT_ARROW, SEMI, nt_matchers, nt_tt};\n use print;\n \n use core::io;\n+use core::vec;\n \n pub fn add_new_extension(cx: @ExtCtxt,\n                          sp: span,"}, {"sha": "cac963727e3dc1e776e5ce1ee6a64cdd33a87d6c", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,6 +19,8 @@ use parse::token::{EOF, INTERPOLATED, IDENT, Token, nt_ident, ident_interner};\n use parse::lexer::TokenAndSpan;\n \n use core::hashmap::HashMap;\n+use core::option;\n+use core::vec;\n \n ///an unzipping of `token_tree`s\n struct TtFrame {"}, {"sha": "27a10c36eadd36c2ca7966334c58b22ae35751a7", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,6 +15,8 @@ use ast;\n use codemap::{span, spanned};\n use opt_vec::OptVec;\n \n+use core::vec;\n+\n pub trait ast_fold {\n     fn fold_crate(@self, &crate) -> crate;\n     fn fold_view_item(@self, @view_item) -> @view_item;"}, {"sha": "001a693d1aed413f2c5d9e77eda7d19c26f2e501", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -20,6 +20,10 @@ use parse::lexer;\n use parse::token;\n use parse;\n \n+use core::io;\n+use core::str;\n+use core::uint;\n+\n #[deriving(Eq)]\n pub enum cmnt_style {\n     isolated, // No code on either side of each line of the comment"}, {"sha": "4a9ef2faa549e9f6d19bd041da0bd3c5851ce00d", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,6 +18,11 @@ use ext::tt::transcribe::{tt_next_token};\n use ext::tt::transcribe::{dup_tt_reader};\n use parse::token;\n \n+use core::char;\n+use core::either;\n+use core::str;\n+use core::u64;\n+\n pub use ext::tt::transcribe::{TtReader, new_tt_reader};\n \n pub trait reader {"}, {"sha": "085d24d7e68b156aa46de5df8d2dda6ea573e2aa", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -26,6 +26,7 @@ use parse::parser::Parser;\n use parse::token::{keywords, Token};\n use parse::token;\n \n+use core::str;\n use core::to_bytes;\n \n /// The specific types of unsupported syntax"}, {"sha": "27dfc2c0a46d1708f137af0ff962ce4c7da8f746", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -92,9 +92,11 @@ use parse::{new_sub_parser_from_file, next_node_id, ParseSess};\n use opt_vec;\n use opt_vec::OptVec;\n \n+use core::char;\n use core::either::Either;\n use core::either;\n use core::hashmap::HashSet;\n+use core::str;\n use core::vec;\n \n #[deriving(Eq)]"}, {"sha": "b1a385ada0734efd82ff3623e5c28aefab92bb6f", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,8 +16,14 @@ use parse::token;\n use util::interner::StrInterner;\n use util::interner;\n \n+use core::cast;\n+use core::char;\n use core::cmp::Equiv;\n+use core::hashmap::HashSet;\n+use core::local_data;\n+use core::str;\n use core::to_bytes;\n+use core::vec;\n \n #[deriving(Encodable, Decodable, Eq)]\n pub enum binop {"}, {"sha": "11830dc3c2908d9960f8b4196e2edf2ad33f473b", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -63,6 +63,9 @@\n \n use core::prelude::*;\n \n+use core::io;\n+use core::vec;\n+\n #[deriving(Eq)]\n pub enum breaks { consistent, inconsistent, }\n "}, {"sha": "6a32e5352959e2baaf5dfed6c248ab95862f4813", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -29,6 +29,13 @@ use print::pp::{breaks, consistent, inconsistent, eof};\n use print::pp;\n use print::pprust;\n \n+use core::char;\n+use core::io;\n+use core::str;\n+use core::u64;\n+use core::uint;\n+use core::vec;\n+\n // The @ps is stored here to prevent recursive type.\n pub enum ann_node<'self> {\n     node_block(@ps, &'self ast::blk),"}, {"sha": "78fbcab213c81d62ed56da7f31b34bd181a882de", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -35,6 +35,12 @@ extern mod std(name = \"extra\");\n #[cfg(not(stage0))]\n extern mod std(name = \"std\");\n \n+// For bootstrapping purposes.\n+#[cfg(stage0)]\n+pub use core::str;\n+#[cfg(stage0)]\n+pub use core::unstable;\n+\n use core::prelude::*;\n \n pub mod util {"}, {"sha": "77f257ea4f52c32037c3f444b852de4bf843eacf", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,6 +14,10 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n+\n+use std::libc;\n+\n extern {\n-  fn rust_get_argc() -> libc::c_int;\n+    pub fn rust_get_argc() -> libc::c_int;\n }\n+"}, {"sha": "e58b28aa3ded1fd9e1ea845d2c3cdd608639f22f", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::comm::*;\n+use std::task;\n \n pub fn foo<T:Owned + Copy>(x: T) -> Port<T> {\n     let (p, c) = stream();"}, {"sha": "10dedc12399d11f2580774250881ea564ef8003a", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n pub mod kitties {\n+    use std::uint;\n+\n     pub struct cat {\n         priv meows : uint,\n         how_hungry : int,"}, {"sha": "be65cadcc7f803a611a73cf774b23a3637afe873", "filename": "src/test/auxiliary/explicit_self_xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -20,6 +20,6 @@ pub struct Bar {\n impl Foo for Bar {\n     #[inline(always)]\n     fn f(&self) {\n-        io::println((*self).x);\n+        println((*self).x);\n     }\n }"}, {"sha": "ba9091ce0e5bf5b3df0dd215e9a333f807eb7b12", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,7 +13,11 @@\n \n #[crate_type = \"lib\"];\n \n+use std::libc;\n+\n pub mod rustrt {\n+    use std::libc;\n+\n     pub extern {\n         pub fn rust_dbg_call(cb: *u8, data: libc::uintptr_t)\n                              -> libc::uintptr_t;"}, {"sha": "f8b2c2f458afbd0484905204ec26aa48b03ab0b5", "filename": "src/test/auxiliary/foreign_lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fforeign_lib.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,6 +11,8 @@\n #[link(name=\"foreign_lib\", vers=\"0.0\")];\n \n pub mod rustrt {\n+    use std::libc;\n+\n     pub extern {\n         pub fn rust_get_argc() -> libc::c_int;\n     }"}, {"sha": "ce40afff3ae3d3c7754f139bb8060302c43b5990", "filename": "src/test/auxiliary/issue-3012-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-3012-1.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,6 +12,8 @@\n #[crate_type = \"lib\"];\n \n pub mod socket {\n+    use std::libc;\n+\n     pub struct socket_handle {\n         sockfd: libc::c_int,\n     }"}, {"sha": "b3a9b3e1ee9ac66e583179093ea5012578d9f25e", "filename": "src/test/auxiliary/moves_based_on_type_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,7 +16,7 @@ pub struct S {\n \n impl Drop for S {\n     fn finalize(&self) {\n-        io::println(\"goodbye\");\n+        println(\"goodbye\");\n     }\n }\n "}, {"sha": "b5b338531294929104e2f46b5076d53dac0ac146", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,6 +13,8 @@\n \n #[crate_type = \"lib\"];\n \n+use std::int;\n+\n pub trait read {\n     fn readMaybe(s: ~str) -> Option<Self>;\n }"}, {"sha": "fd1110abb224a00f1a6ca055e424ff3908d221a5", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,12 +10,15 @@\n \n extern mod extra;\n \n-use std::io;\n use extra::time;\n use extra::treemap::TreeMap;\n use std::hashmap::{HashMap, HashSet};\n-use std::trie::TrieMap;\n+use std::io;\n+use std::os;\n use std::rand::Rng;\n+use std::trie::TrieMap;\n+use std::uint;\n+use std::vec;\n \n fn timed(label: &str, f: &fn()) {\n     let start = time::precise_time_s();"}, {"sha": "5281c1b863c6ae80a7ddf357fb5b59c89d523d64", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -9,9 +9,14 @@\n // except according to those terms.\n \n extern mod extra;\n-use std::hashmap::HashSet;\n+\n use extra::bitv::BitvSet;\n use extra::treemap::TreeSet;\n+use std::hashmap::HashSet;\n+use std::io;\n+use std::os;\n+use std::rand;\n+use std::uint;\n \n struct Results {\n     sequential_ints: float,"}, {"sha": "287daf68effbef8080bde5e180adc529ef9e0c3e", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,8 +13,15 @@\n extern mod extra;\n \n use extra::time::precise_time_s;\n+use std::int;\n+use std::io;\n+use std::os;\n use std::rand::RngUtil;\n+use std::rand;\n+use std::result;\n+use std::uint;\n use std::util;\n+use std::vec;\n \n macro_rules! bench (\n     ($id:ident) => (maybe_run_test(argv, stringify!($id).to_owned(), $id))"}, {"sha": "cbf73d5c0594f4f98a7bb9e882ea328d4dd01bef", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::os;\n+use std::uint;\n+\n fn main() {\n     let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {"}, {"sha": "38cc31273430222cbb50f276bc8fc935a3d51fff", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -23,7 +23,12 @@ use extra::deque::Deque;\n use extra::par;\n use std::hashmap::HashSet;\n use std::int::abs;\n+use std::io;\n+use std::os;\n use std::rand::RngUtil;\n+use std::rand;\n+use std::uint;\n+use std::vec;\n \n type node_id = i64;\n type graph = ~[~[node_id]];"}, {"sha": "9fbc1d4590de4a80269be7d86767fc49b004ba89", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -19,10 +19,16 @@\n // version.\n \n extern mod extra;\n-use std::io::Writer;\n-use std::io::WriterUtil;\n \n use std::comm::{Port, Chan, SharedChan};\n+use std::comm;\n+use std::io::{Writer, WriterUtil};\n+use std::io;\n+use std::os;\n+use std::task;\n+use std::ptr;\n+use std::uint;\n+use std::vec;\n \n macro_rules! move_out (\n     { $x:expr } => { unsafe { let y = *ptr::to_unsafe_ptr(&($x)); y } }"}, {"sha": "2663bb266706d6529e482dc1c2d185d3d29e8bfa", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,10 +15,15 @@\n // I *think* it's the same, more or less.\n \n extern mod extra;\n-use std::io::Writer;\n-use std::io::WriterUtil;\n \n use std::comm::{Port, PortSet, Chan, stream};\n+use std::io::{Writer, WriterUtil};\n+use std::io;\n+use std::os;\n+use std::ptr;\n+use std::task;\n+use std::uint;\n+use std::vec;\n \n macro_rules! move_out (\n     { $x:expr } => { unsafe { let y = *ptr::to_unsafe_ptr(&($x)); y } }"}, {"sha": "3d3a6a68beb39f483f646300f1372c339b47c003", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,26 +16,35 @@\n // This also serves as a pipes test, because ARCs are implemented with pipes.\n \n extern mod extra;\n-use extra::time;\n+\n use extra::arc;\n use extra::future;\n+use extra::time;\n use std::cell::Cell;\n+use std::io;\n+use std::os;\n+use std::uint;\n+use std::vec;\n \n // A poor man's pipe.\n type pipe = arc::MutexARC<~[uint]>;\n \n fn send(p: &pipe, msg: uint) {\n-    do p.access_cond |state, cond| {\n-        state.push(msg);\n-        cond.signal();\n+    unsafe {\n+        do p.access_cond |state, cond| {\n+            state.push(msg);\n+            cond.signal();\n+        }\n     }\n }\n fn recv(p: &pipe) -> uint {\n-    do p.access_cond |state, cond| {\n-        while vec::is_empty(*state) {\n-            cond.wait();\n+    unsafe {\n+        do p.access_cond |state, cond| {\n+            while vec::is_empty(*state) {\n+                cond.wait();\n+            }\n+            state.pop()\n         }\n-        state.pop()\n     }\n }\n "}, {"sha": "21753f5f33191fc41f4c23327f9ea81544db7e7d", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,11 +18,15 @@\n \n extern mod extra;\n \n+use extra::future;\n+use extra::time;\n use std::cell::Cell;\n+use std::io;\n+use std::os;\n use std::pipes::recv;\n+use std::ptr;\n+use std::uint;\n use std::util;\n-use extra::time;\n-use extra::future;\n \n proto! ring (\n     num:send {"}, {"sha": "46ca59f2d31592730d2f33337d51fa156db037b6", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -17,10 +17,14 @@\n \n extern mod extra;\n \n-use std::cell::Cell;\n-use extra::time;\n use extra::arc;\n use extra::future;\n+use extra::time;\n+use std::cell::Cell;\n+use std::io;\n+use std::os;\n+use std::uint;\n+use std::vec;\n \n // A poor man's pipe.\n type pipe = arc::RWARC<~[uint]>;"}, {"sha": "8f39ae62f9e39a56c888747052e4bd369dc783f4", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -1,6 +1,10 @@\n // Perlin noise benchmark from https://gist.github.com/1170424\n \n+use std::f32;\n+use std::float;\n+use std::int;\n use std::rand::{Rng, RngUtil};\n+use std::rand;\n \n struct Vec2 {\n     x: f32,"}, {"sha": "382de68ba5776216d020f27008fbf3599eadd31c", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,9 +14,12 @@\n \n extern mod extra;\n \n+use extra::time::precise_time_s;\n use std::cell::Cell;\n+use std::io;\n+use std::os;\n use std::pipes::*;\n-use extra::time::precise_time_s;\n+use std::task;\n \n proto! pingpong (\n     ping: send {"}, {"sha": "51fec4dbfe8b685d8ed117b869e89078f79a0b54", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,10 @@\n \n extern mod extra;\n \n+use std::int;\n+use std::io;\n+use std::os;\n+\n fn ack(m: int, n: int) -> int {\n     if m == 0 {\n         return n + 1"}, {"sha": "58b8a9cd47bb0e7eeec98ac26131e11e2c97ad3e", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,9 +11,16 @@\n // chameneos\n \n extern mod extra;\n+\n use extra::sort;\n use std::cell::Cell;\n use std::comm::*;\n+use std::io;\n+use std::option;\n+use std::os;\n+use std::task;\n+use std::uint;\n+use std::vec;\n \n fn print_complements() {\n     let all = ~[Blue, Red, Yellow];"}, {"sha": "1dd346a28135bbbb0bc07a961e6a83c11544ec1f", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -1,6 +1,8 @@\n use std::from_str::FromStr;\n use std::i32::range;\n+use std::os;\n use std::vec::MutableVector;\n+use std::vec;\n \n fn max(a: i32, b: i32) -> i32 {\n     if a > b {"}, {"sha": "9ea58d9970d62289fefe0c5839e5dc63685d4b27", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -1,8 +1,11 @@\n use std::cast::transmute;\n use std::from_str::FromStr;\n use std::libc::{FILE, STDOUT_FILENO, c_int, fdopen, fputc, fputs, fwrite, size_t};\n+use std::os;\n+use std::str;\n use std::uint::{min, range};\n use std::vec::bytes::copy_memory;\n+use std::vec;\n \n static LINE_LEN: uint = 60;\n static LOOKUP_SIZE: uint = 4 * 1024;"}, {"sha": "78a37f06bb93ddbbbad8fa65a3dcfed5db452f4f", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,7 +16,17 @@\n  * http://shootout.alioth.debian.org/\n  */\n extern mod extra;\n+\n+use std::int;\n+use std::io;\n+use std::option;\n+use std::os;\n use std::rand::Rng;\n+use std::rand;\n+use std::result;\n+use std::str;\n+use std::uint;\n+use std::vec;\n \n fn LINE_LENGTH() -> uint { return 60u; }\n "}, {"sha": "a1bb0e9e6d8d5e35de42b1b6d88ed60a19f752fd", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,10 @@\n \n extern mod extra;\n \n+use std::int;\n+use std::io;\n+use std::os;\n+\n fn fib(n: int) -> int {\n     if n < 2 {\n         return 1;"}, {"sha": "e403ba6e73decc6fa3a76de484ab24785b73a157", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,12 +12,21 @@\n // multi tasking k-nucleotide\n \n extern mod extra;\n+\n use extra::sort;\n+use std::cmp::Ord;\n+use std::comm::{stream, Port, Chan};\n+use std::comm;\n use std::hashmap::HashMap;\n use std::io::ReaderUtil;\n-use std::comm::{stream, Port, Chan};\n-use std::cmp::Ord;\n+use std::io;\n+use std::option;\n+use std::os;\n+use std::result;\n+use std::str;\n+use std::task;\n use std::util;\n+use std::vec;\n \n // given a map, print a sorted version of it\n fn sort_and_fmt(mm: &HashMap<~[u8], uint>, total: uint) -> ~str {"}, {"sha": "69eff07093b7442e250134b343f06d0e29782794", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -2,6 +2,7 @@ use std::cast::transmute;\n use std::from_str::FromStr;\n use std::i32::range;\n use std::libc::{STDOUT_FILENO, c_int, fdopen, fputc};\n+use std::os;\n \n static ITER: uint = 50;\n static LIMIT: f64 = 2.0;"}, {"sha": "744e3041c8fc16f307ac54916b60be09d9883855", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -1,5 +1,8 @@\n+use std::f64;\n use std::from_str::FromStr;\n+use std::os;\n use std::uint::range;\n+use std::vec;\n \n static PI: f64 = 3.141592653589793;\n static SOLAR_MASS: f64 = 4.0 * PI * PI;"}, {"sha": "0a093d87a1586dbe55f8abf90f94bea809043ad0", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,11 +22,17 @@\n extern mod extra;\n \n use extra::{time, getopts};\n-use std::int::range;\n use std::comm::*;\n+use std::int::range;\n use std::io::WriterUtil;\n-\n+use std::io;\n+use std::os;\n use std::result::{Ok, Err};\n+use std::str;\n+use std::task;\n+use std::u64;\n+use std::uint;\n+use std::vec;\n \n fn fib(n: int) -> int {\n     fn pfib(c: &Chan<int>, n: int) {"}, {"sha": "77aaa2782d87e3beac0fb018b1d06418ad0f22df", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -1,5 +1,8 @@\n+use std::f64;\n use std::from_str::FromStr;\n use std::iter::ExtendedMutableIter;\n+use std::os;\n+use std::vec;\n \n #[inline]\n fn A(i: i32, j: i32) -> i32 {"}, {"sha": "23ac68315e3a002b2c2e769d75a9add66ef287cd", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,8 +11,12 @@\n // Microbenchmark for the smallintmap library\n \n extern mod extra;\n+\n use extra::smallintmap::SmallIntMap;\n use std::io::WriterUtil;\n+use std::io;\n+use std::os;\n+use std::uint;\n \n fn append_sequential(min: uint, max: uint, map: &mut SmallIntMap<uint>) {\n     for uint::range(min, max) |i| {"}, {"sha": "dbce9d60af7faaa1ba2c1187cafdc9e84c9a885e", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,7 +14,12 @@ extern mod extra;\n \n use std::io::{ReaderUtil, WriterUtil};\n use std::io;\n+use std::os;\n+use std::str;\n+use std::u8;\n+use std::uint;\n use std::unstable::intrinsics::cttz16;\n+use std::vec;\n \n // Computes a single solution to a given 9x9 sudoku\n //\n@@ -167,10 +172,10 @@ impl Colors {\n         let val = **self & heads;\n         if (0u16 == val) {\n             return 0u8;\n-        }\n-        else\n-        {\n-            return cttz16(val as i16) as u8;\n+        } else {\n+            unsafe {\n+                return cttz16(val as i16) as u8;\n+            }\n         }\n     }\n "}, {"sha": "a0363bd568ae915d8848db17a74bcc77cf94f08d", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,6 +14,8 @@ extern mod extra;\n \n use extra::list::{List, Cons, Nil};\n use extra::time::precise_time_s;\n+use std::os;\n+use std::task;\n \n enum UniqueList {\n     ULNil, ULCons(~UniqueList)"}, {"sha": "78923c8cc968817ea7ab6f0f43b1b268099fb68b", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,6 +18,10 @@\n // The filename is a song reference; google it in quotes.\n \n use std::cell::Cell;\n+use std::comm;\n+use std::os;\n+use std::task;\n+use std::uint;\n \n fn child_generation(gens_left: uint, c: comm::Chan<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed."}, {"sha": "514b85c6ae05f97739c55376d56e31c2d8bc8b22", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -23,6 +23,10 @@\n // Doesn't return until all such tasks are ready, but doesn't block forever itself.\n \n use std::comm::*;\n+use std::os;\n+use std::result;\n+use std::task;\n+use std::uint;\n \n fn grandchild_group(num_tasks: uint) {\n     let (po, ch) = stream();"}, {"sha": "e1a5253444f8889fd888b198559b3641ac289436", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,6 +11,10 @@\n // Test for concurrent tasks\n \n use std::comm::*;\n+use std::os;\n+use std::task;\n+use std::uint;\n+use std::vec;\n \n fn calc(children: uint, parent_wait_chan: &Chan<Chan<Chan<int>>>) {\n "}, {"sha": "1a8fc7e098ddb94ceeb54df573f3cb652a76ddfa", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::os;\n+use std::task;\n+use std::uint;\n+\n fn f(n: uint) {\n     let mut i = 0u;\n     while i < n {"}, {"sha": "55a358a32e200ba9f3055b4da2f7adb32f27f7e4", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  priv mut meows : uint,\n+  priv meows : uint,\n \n   how_hungry : int,\n }"}, {"sha": "348781d74977e79710b52ee6563fd2d088f4f233", "filename": "src/test/compile-fail/bind-by-move-no-guards.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-guards.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::comm;\n+\n fn main() {\n     let (p,c) = comm::stream();\n     let x = Some(p);"}, {"sha": "dc90dfb2cadde77af41860fdada39a16697a45ff", "filename": "src/test/compile-fail/block-arg-as-stmt-with-value.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::vec;\n \n fn compute1() -> float {\n     let v = ~[0f, 1f, 2f, 3f];"}, {"sha": "778309122cba1252fe696b75ab52b47a29a02416", "filename": "src/test/compile-fail/block-must-not-have-result-for.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-for.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::vec;\n+\n fn main() {\n     for vec::each(~[0]) |_i| {  //~ ERROR A for-loop body must return (), but\n         true"}, {"sha": "b9758e669e07ee1ed63d902228cd105fdf954f98", "filename": "src/test/compile-fail/borrowck-auto-mut-ref-to-immut-var.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,8 @@\n \n // Tests that auto-ref can't create mutable aliases to immutable memory.\n \n+use std::io;\n+\n struct Foo {\n     x: int\n }"}, {"sha": "1e74e91a82196f97bc8cd60bbde08afa877632f9", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::task;\n+\n fn borrow(v: &int, f: &fn(x: &int)) {\n     f(v);\n }"}, {"sha": "01ca3cd1c282f457aa7427f88c1a2aa7dfa5e3e3", "filename": "src/test/compile-fail/borrowck-loan-local-as-both-mut-and-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-local-as-both-mut-and-imm.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,7 +22,7 @@ use std::either::{Either, Left, Right};\n \n     fn g() {\n         let mut x: Either<int,float> = Left(3);\n-        io::println(f(&mut x, &x).to_str()); //~ ERROR cannot borrow\n+        println(f(&mut x, &x).to_str()); //~ ERROR cannot borrow\n     }\n \n     fn h() {"}, {"sha": "443bcc921837c53325e4dac951ab615b6d72c13a", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,7 +13,7 @@ struct Point {\n     y: int,\n }\n \n-impl ops::Add<int,int> for Point {\n+impl Add<int,int> for Point {\n     fn add(&self, z: &int) -> int {\n         self.x + self.y + (*z)\n     }"}, {"sha": "cb56e929754da1ccf77669eb819f65065e54372b", "filename": "src/test/compile-fail/borrowck-ref-into-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-ref-into-rvalue.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -16,5 +16,5 @@ fn main() {\n         },\n         None => { fail!() }\n     }\n-    io::println(*msg);\n+    println(*msg);\n }"}, {"sha": "c02a0b4cfafd5c4068e675873286f945c76eec2b", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -9,5 +9,5 @@ fn a() -> &int {\n \n fn main() {\n     let fifth = a();\n-    io::println(fmt!(\"%d\", *fifth));\n+    println(fmt!(\"%d\", *fifth));\n }"}, {"sha": "8c0cf68c164b12901c8589dc11e3ceee17688ed0", "filename": "src/test/compile-fail/by-move-pattern-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fby-move-pattern-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fby-move-pattern-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fby-move-pattern-binding.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -17,6 +17,6 @@ fn main() {\n     };\n     match &s.x {\n         &Foo => {}\n-        &Bar(ref identifier) => io::println(*identifier)\n+        &Bar(ref identifier) => println(*identifier)\n     };\n }"}, {"sha": "8df9650d9507700f943485b9cceef9be7487748d", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,9 +13,9 @@ trait noisy {\n }\n \n struct cat {\n-  priv mut meows : uint,\n+  priv meows : uint,\n \n-  mut how_hungry : int,\n+  how_hungry : int,\n   name : ~str,\n }\n "}, {"sha": "4d1c22dfabe81f1122fb110b596e98d1eaf6f6a8", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  priv mut meows : uint,\n+  priv meows : uint,\n }\n \n priv impl cat {"}, {"sha": "c7f5e27181837905d0231079cc75ee5f88c476f2", "filename": "src/test/compile-fail/die-not-static.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -1,3 +1,5 @@\n+use std::str;\n+\n fn main() {\n     let v = ~\"test\";\n     let sslice = str::slice(v, 0, v.len());"}, {"sha": "5e422d267538ba2d5ee7021f15baf5c04b4d6584", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,7 +13,7 @@ type Foo = @[u8];\n impl Drop for Foo {   //~ ERROR the Drop trait may only be implemented\n //~^ ERROR cannot provide an extension implementation\n     fn finalize(&self) {\n-        io::println(\"kaboom\");\n+        println(\"kaboom\");\n     }\n }\n "}, {"sha": "ce2942c3146c4144e76e9d6a721e464c0037a306", "filename": "src/test/compile-fail/explicit-call-to-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n \n impl Drop for Foo {\n     fn finalize(&self) {\n-        io::println(\"kaboom\");\n+        println(\"kaboom\");\n     }\n }\n "}, {"sha": "1a5eb696fa2e710e02afdd1e0e19caceb7a32af7", "filename": "src/test/compile-fail/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,7 +18,7 @@ trait Bar : Drop {\n \n impl Drop for Foo {\n     fn finalize(&self) {\n-        io::println(\"kaboom\");\n+        println(\"kaboom\");\n     }\n }\n "}, {"sha": "fce269ab5174e1b8447d32439ad0690bdf8629c7", "filename": "src/test/compile-fail/foreign-unsafe-fn.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e3d4b36dc3a030bb5f152afbfccfd4427830dac/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fforeign-unsafe-fn.rs?ref=4e3d4b36dc3a030bb5f152afbfccfd4427830dac", "patch": "@@ -1,23 +0,0 @@\n-// -*- rust -*-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-mod test {\n-    #[abi = \"cdecl\"]\n-    pub extern {\n-        pub unsafe fn free();\n-    }\n-}\n-\n-fn main() {\n-    let x = test::free;\n-    //~^ ERROR call to unsafe function requires unsafe function or block\n-}"}, {"sha": "8f4bbe4eabc74baa20b8fdea943eb0c7794f9553", "filename": "src/test/compile-fail/issue-2151.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2151.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::vec;\n+\n fn main() {\n     for vec::each(fail!()) |i| {\n         let _ = i * 2; //~ ERROR the type of this value must be known"}, {"sha": "2f69000844060849e95e3ce903beae258978f9ca", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -20,7 +20,7 @@ struct foo {\n impl Drop for foo {\n     fn finalize(&self) {\n         unsafe {\n-            io::println(\"Goodbye, World!\");\n+            println(\"Goodbye, World!\");\n             *self.x += 1;\n         }\n     }"}, {"sha": "166f7e048df1cd0db977aa6ea0982bc8f86cac8c", "filename": "src/test/compile-fail/issue-2817-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2817-2.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::uint;\n+\n fn not_bool(f: &fn(int) -> ~str) -> bool {}\n \n fn main() {"}, {"sha": "49516831904be60c98535dcd2f2deb0eb8280800", "filename": "src/test/compile-fail/issue-2817.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2817.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::uint;\n+\n fn uuid() -> uint { fail!(); }\n \n fn from_str(s: ~str) -> uint { fail!(); }"}, {"sha": "4cac844bdea703b7d5909a93337cb72498030a5a", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::vec;\n+\n fn main() {\n     let needlesArr: ~[char] = ~['a', 'f'];\n     do vec::foldr(needlesArr) |x, y| {"}, {"sha": "5f3af86545462ddfd8bbfd413952a80ae825d73a", "filename": "src/test/compile-fail/issue-3096-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3096-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3096-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3096-2.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ptr;\n+\n enum bottom { }\n \n fn main() {"}, {"sha": "ac5b469c56e20eb5c1484045582dcf3178dcab2f", "filename": "src/test/compile-fail/issue-3344.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct thing(uint);\n-impl cmp::Ord for thing { //~ ERROR missing method `gt`\n+impl Ord for thing { //~ ERROR missing method `gt`\n     fn lt(&self, other: &thing) -> bool { **self < **other }\n     fn le(&self, other: &thing) -> bool { **self < **other }\n     fn ge(&self, other: &thing) -> bool { **self < **other }"}, {"sha": "7e65d8ab82d9b4dbb0f3b26474d31198c5ad0921", "filename": "src/test/compile-fail/issue-3651.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3651.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::task;\n+\n fn main() {\n     for task::spawn { return true; } //~ ERROR A `for` loop iterator should expect a closure that\n                                      //~^ ERROR expected `for` closure to return `bool`"}, {"sha": "8fafd04d1e2a52b1da8d3da1e42e48fbcaf8c4b2", "filename": "src/test/compile-fail/issue-3820.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,5 +22,5 @@ fn main() {\n     let u = Thing {x: 2};\n     let _v = u.mul(&3); // This is ok\n     let w = u * 3; //~ ERROR binary operation * cannot be applied to type `Thing`\n-    io::println(fmt!(\"%i\", w.x));\n+    println(fmt!(\"%i\", w.x));\n }"}, {"sha": "e3af6ce78e2c9be2e13f054642702b88a3d3ac9b", "filename": "src/test/compile-fail/issue-3953.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3953.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -31,8 +31,8 @@ impl Eq for Lol {\n \n fn main() {\n     if Lol(2) == Lol(4) {\n-        io::println(\"2 == 4\");\n+        println(\"2 == 4\");\n     } else {\n-        io::println(\"2 != 4\");\n+        println(\"2 != 4\");\n     }\n }"}, {"sha": "ffa11e592608de38fa6e24a445102278e6d65c4f", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -14,5 +14,5 @@ fn f<'r, T>(v: &'r T) -> &'r fn()->T { id::<&'r fn()->T>(|| *v) } //~ ERROR cann\n \n fn main() {\n     let v = &5;\n-    io::println(fmt!(\"%d\", f(v)()));\n+    println(fmt!(\"%d\", f(v)()));\n }"}, {"sha": "ed2eede76c6700a87abd7cd4450cb6689ecc0384", "filename": "src/test/compile-fail/issue-511.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fissue-511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-511.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,10 +12,10 @@ extern mod extra;\n use std::cmp::Eq;\n \n fn f<T:Eq>(o: &mut Option<T>) {\n-    assert!(*o == option::None);\n+    assert!(*o == None);\n }\n \n fn main() {\n-    f::<int>(&mut option::None);\n+    f::<int>(&mut None);\n     //~^ ERROR cannot borrow\n }"}, {"sha": "b21063361abccde11087c924df2f7956142b0ba7", "filename": "src/test/compile-fail/kindck-implicit-close-over-mut-var.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-implicit-close-over-mut-var.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::task;\n+\n fn user(_i: int) {}\n \n fn foo() {"}, {"sha": "23befde7559c726dd17637d83df031c0d90645b5", "filename": "src/test/compile-fail/lint-default-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Flint-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Flint-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-default-methods.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -1,7 +1,7 @@\n #[forbid(default_methods)];\n \n trait Foo { //~ ERROR default methods are experimental\n-    fn bar(&self) { io::println(\"hi\"); }\n+    fn bar(&self) { println(\"hi\"); }\n }\n \n fn main() {}"}, {"sha": "4a748cc56700a33166c9d7b6c54e7673c959bbe9", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,6 +12,8 @@\n \n use cal = bar::c::cc;\n \n+use std::io;\n+\n use std::either::Right;        //~ ERROR unused import\n \n use std::util::*;              // shouldn't get errors for not using"}, {"sha": "1b5aabb953713943251606cb3a38fede9a90ed10", "filename": "src/test/compile-fail/lint-unused-unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -27,8 +27,8 @@ unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n fn bad4() { unsafe { do callback {} } }  //~ ERROR: unnecessary `unsafe` block\n unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n fn bad6() {\n-    unsafe {                             //~ ERROR: unnecessary `unsafe` block\n-        unsafe {                         // don't put the warning here\n+    unsafe {                             // don't put the warning here\n+        unsafe {                         //~ ERROR: unnecessary `unsafe` block\n             unsf()\n         }\n     }"}, {"sha": "ec4f3f9a3fdbacc2b531207fed867f236e68424b", "filename": "src/test/compile-fail/liveness-issue-2163.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-issue-2163.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::vec;\n+\n fn main() {\n     let a: ~[int] = ~[];\n     vec::each(a, |_| -> bool {"}, {"sha": "3930e7d219201f0410f60c85861908f9d06ed0f4", "filename": "src/test/compile-fail/match-vec-unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     }\n \n     match [~\"foo\", ~\"bar\", ~\"baz\"] {\n-        [a, _, _, .._] => { io::println(a); }\n+        [a, _, _, .._] => { println(a); }\n         [~\"foo\", ~\"bar\", ~\"baz\", ~\"foo\", ~\"bar\"] => { } //~ ERROR unreachable pattern\n         _ => { }\n     }"}, {"sha": "11c4d078208eee242dd32127bfc77a5a97c4b1a1", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,7 +18,7 @@ fn main() {\n         do f(&s) |hellothere| {\n             match hellothere.x {\n                 ~Foo(_) => {}\n-                ~Bar(x) => io::println(x.to_str()), //~ ERROR cannot move out\n+                ~Bar(x) => println(x.to_str()), //~ ERROR cannot move out\n                 ~Baz => {}\n             }\n         }"}, {"sha": "706ab051ca1a0ca8bf6aa91c0e0fc5cbe8687167", "filename": "src/test/compile-fail/moves-based-on-type-capture-clause-bad.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-capture-clause-bad.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -1,7 +1,9 @@\n+use std::task;\n+\n fn main() {\n     let x = ~\"Hello world!\";\n     do task::spawn {\n-        io::println(x);\n+        println(x);\n     }\n-    io::println(x); //~ ERROR use of moved value\n+    println(x); //~ ERROR use of moved value\n }"}, {"sha": "d39b2e06e69f6b75aefd52d5e8e14a778d81b682", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -1,6 +1,8 @@\n // Tests that references to move-by-default values trigger moves when\n // they occur as part of various kinds of expressions.\n \n+use std::vec;\n+\n struct Foo<A> { f: A }\n fn guard(_s: ~str) -> bool {fail!()}\n fn touch<A>(_a: &A) {}"}, {"sha": "e25ba0f39f2e81ee1f73c4c477d9849fa7b763a5", "filename": "src/test/compile-fail/moves-based-on-type-move-out-of-closure-env-issue-1965.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::uint;\n+\n fn test(_x: ~uint) {}\n \n fn main() {"}, {"sha": "7d41481354fa6ff3dfcd80108ac1531cd568d0ac", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  priv mut meows : uint,\n+  priv meows : uint,\n \n   how_hungry : int,\n }"}, {"sha": "a88156a4b477d66cb1e311c50448bb870f22c047", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  priv mut meows : uint,\n+  priv meows : uint,\n   how_hungry : int,\n }\n "}, {"sha": "b036071fd879488db5f81fc38a656852dc2ac3ad", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,6 +13,8 @@\n extern mod extra;\n use extra::arc;\n \n+use std::task;\n+\n fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = arc::ARC(v);"}, {"sha": "28f3ea7af9f8c83de42f98ea6e426d6d68b5932a", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,6 +11,8 @@\n extern mod extra;\n use extra::arc;\n \n+use std::task;\n+\n fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = arc::ARC(v);"}, {"sha": "9847efd2dd58bffe855f1b22f428825a9b4a9def", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::cell::Cell;\n+use std::task;\n \n struct Port<T>(@T);\n "}, {"sha": "f979f8273a04e9886d57aac0b88973b11a16cdc2", "filename": "src/test/compile-fail/non-copyable-void.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::libc;\n+\n fn main() {\n     let x : *~[int] = &~[1,2,3];\n     let y : *libc::c_void = x as *libc::c_void;"}, {"sha": "a7c8950486c05ed66556169f3090af43396781ee", "filename": "src/test/compile-fail/noncopyable-match-pattern.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-match-pattern.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,12 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::unstable;\n+\n fn main() {\n-    let x = Some(unstable::sync::exclusive(false));\n-    match x {\n-        Some(copy z) => { //~ ERROR copying a value of non-copyable type\n-            do z.with |b| { assert!(!*b); }\n+    unsafe {\n+        let x = Some(unstable::sync::exclusive(false));\n+        match x {\n+            Some(copy z) => { //~ ERROR copying a value of non-copyable type\n+                do z.with |b| { assert!(!*b); }\n+            }\n+            None => fail!()\n         }\n-        None => fail!()\n     }\n }"}, {"sha": "3b9b17e051d6f62941130f1676f5614f7f23913a", "filename": "src/test/compile-fail/packed-struct-generic-transmute.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,6 +15,8 @@\n \n // error-pattern: transmute called on types with different size\n \n+use std::cast;\n+\n #[packed]\n struct Foo<T,S> {\n     bar: T,"}, {"sha": "bf62bab8b408fcf8032e2d3f8b4feb5fcde2041b", "filename": "src/test/compile-fail/packed-struct-transmute.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -15,6 +15,8 @@\n \n // error-pattern: transmute called on types with different size\n \n+use std::cast;\n+\n #[packed]\n struct Foo {\n     bar: u8,"}, {"sha": "800bb1c5703948fd2fe1d09d048c860c8ede51ef", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,8 +11,10 @@\n // error-pattern:method `nap` is private\n \n mod kitties {\n+    use std::uint;\n+\n     pub struct cat {\n-        priv mut meows : uint,\n+        priv meows : uint,\n \n         how_hungry : int,\n     }"}, {"sha": "524deed20f243c43764449d45e0744175a968b3e", "filename": "src/test/compile-fail/refutable-pattern-in-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-in-fn-arg.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let f = |3: int| io::println(\"hello\");  //~ ERROR refutable pattern\n+    let f = |3: int| println(\"hello\");  //~ ERROR refutable pattern\n     f(4);\n }"}, {"sha": "1c7235743eaa8de75b79c37eafe920c1572e6dcd", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::uint;\n+\n struct dog {\n     food: uint,\n }"}, {"sha": "0dd12822dfae54479222b87d5054fa0de803ae8d", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -18,7 +18,7 @@ struct Foo {\n \n impl Drop for Foo {\n     fn finalize(&self) {\n-        io::println(\"Goodbye!\");\n+        println(\"Goodbye!\");\n     }\n }\n "}, {"sha": "8db2c686f30ac7d36873f5c79537dbc15d910fa8", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -12,4 +12,6 @@\n \n extern mod extra;\n \n+use std::task;\n+\n fn main() { task::spawn(|| -> int { 10 }); }"}, {"sha": "785eeb24784fa71416829353e6df0ac6315bb457", "filename": "src/test/compile-fail/tuple-struct-nonexhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -13,7 +13,7 @@ struct Foo(int, int);\n fn main() {\n     let x = Foo(1, 2);\n     match x {   //~ ERROR non-exhaustive\n-        Foo(1, b) => io::println(fmt!(\"%d\", b)),\n-        Foo(2, b) => io::println(fmt!(\"%d\", b))\n+        Foo(1, b) => println(fmt!(\"%d\", b)),\n+        Foo(2, b) => println(fmt!(\"%d\", b))\n     }\n }"}, {"sha": "3844dab726e682587ef72706ed90fee479862600", "filename": "src/test/compile-fail/unique-object-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-object-noncopyable.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -22,7 +22,7 @@ impl Drop for Bar {\n \n impl Foo for Bar {\n     fn f(&self) {\n-        io::println(\"hi\");\n+        println(\"hi\");\n     }\n }\n "}, {"sha": "58de0926f7c6611b8e603a32d6b0a381b6f24c99", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,6 +11,8 @@\n // Test that a class with an unsendable field can't be\n // sent\n \n+use std::comm;\n+\n struct foo {\n   i: int,\n   j: @~str,"}, {"sha": "da8f69d7eae2d05d7f7dbb8933c8b897cf02bccb", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:unsupported cast\n \n+use std::libc;\n+\n fn main() {\n   debug!(1.0 as *libc::FILE); // Can't cast float to foreign.\n }"}, {"sha": "e8802e6e5cb6857ceaa74f042870f9741a620f82", "filename": "src/test/compile-fail/use-after-move-based-on-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fuse-after-move-based-on-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe/src%2Ftest%2Fcompile-fail%2Fuse-after-move-based-on-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-based-on-type.rs?ref=206ab89629298cc9f4b6fb0aa1cd7556c65b5bfe", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     let x = ~\"Hello!\";\n     let _y = x;\n-    io::println(x); //~ ERROR use of moved value\n+    println(x); //~ ERROR use of moved value\n }"}]}