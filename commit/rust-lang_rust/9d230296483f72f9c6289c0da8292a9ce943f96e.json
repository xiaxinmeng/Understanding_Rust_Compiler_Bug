{"sha": "9d230296483f72f9c6289c0da8292a9ce943f96e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMjMwMjk2NDgzZjcyZjljNjI4OWMwZGE4MjkyYTljZTk0M2Y5NmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-10T21:04:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-13T22:55:11Z"}, "message": "libsyntax: Implement `deriving` for struct-like enum variants. r=brson", "tree": {"sha": "312fc84a2080db089e8b6dbbba65f0c124c26b40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/312fc84a2080db089e8b6dbbba65f0c124c26b40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d230296483f72f9c6289c0da8292a9ce943f96e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d230296483f72f9c6289c0da8292a9ce943f96e", "html_url": "https://github.com/rust-lang/rust/commit/9d230296483f72f9c6289c0da8292a9ce943f96e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d230296483f72f9c6289c0da8292a9ce943f96e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "html_url": "https://github.com/rust-lang/rust/commit/efb9b747185f8cb15a0f5b7deb8db633f0a420c3"}], "stats": {"total": 84, "additions": 68, "deletions": 16}, "files": [{"sha": "1e7d27bee6e489790a4a1eb8fce87357b61c011d", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d230296483f72f9c6289c0da8292a9ce943f96e/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d230296483f72f9c6289c0da8292a9ce943f96e/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=9d230296483f72f9c6289c0da8292a9ce943f96e", "patch": "@@ -219,6 +219,14 @@ fn mk_pat_enum(cx: ext_ctxt,\n     let pat = ast::pat_enum(path, Some(move subpats));\n     mk_pat(cx, span, move pat)\n }\n+fn mk_pat_struct(cx: ext_ctxt,\n+                 span: span,\n+                 path: @ast::path,\n+                 +field_pats: ~[ast::field_pat])\n+              -> @ast::pat {\n+    let pat = ast::pat_struct(path, move field_pats, false);\n+    mk_pat(cx, span, move pat)\n+}\n fn mk_bool(cx: ext_ctxt, span: span, value: bool) -> @ast::expr {\n     let lit_expr = ast::expr_lit(@{ node: ast::lit_bool(value), span: span });\n     build::mk_expr(cx, span, move lit_expr)"}, {"sha": "d1ba835a3e5198326dbe5a270589a9474aff993c", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9d230296483f72f9c6289c0da8292a9ce943f96e/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d230296483f72f9c6289c0da8292a9ce943f96e/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=9d230296483f72f9c6289c0da8292a9ce943f96e", "patch": "@@ -318,6 +318,26 @@ fn create_iter_bytes_method(cx: ext_ctxt,\n     }\n }\n \n+fn create_subpatterns(cx: ext_ctxt,\n+                      span: span,\n+                      prefix: ~str,\n+                      n: uint)\n+                   -> ~[@pat] {\n+    let subpats = dvec::DVec();\n+    for uint::range(0, n) |_i| {\n+        // Create the subidentifier.\n+        let index = subpats.len().to_str();\n+        let ident = cx.ident_of(prefix + index);\n+\n+        // Create the subpattern.\n+        let subpath = build::mk_raw_path(span, ~[ ident ]);\n+        let subpat = pat_ident(bind_by_ref(m_imm), subpath, None);\n+        let subpat = build::mk_pat(cx, span, move subpat);\n+        subpats.push(subpat);\n+    }\n+    return dvec::unwrap(move subpats);\n+}\n+\n fn create_enum_variant_pattern(cx: ext_ctxt,\n                                span: span,\n                                variant: &variant,\n@@ -330,25 +350,37 @@ fn create_enum_variant_pattern(cx: ext_ctxt,\n                 return build::mk_pat_ident(cx, span, variant_ident);\n             }\n \n-            let subpats = dvec::DVec();\n-            for variant_args.each |_variant_arg| {\n-                // Create the subidentifier.\n-                let index = subpats.len().to_str();\n-                let ident = cx.ident_of(prefix + index);\n-\n-                // Create the subpattern.\n-                let subpath = build::mk_raw_path(span, ~[ ident ]);\n-                let subpat = pat_ident(bind_by_ref(m_imm), subpath, None);\n-                let subpat = build::mk_pat(cx, span, move subpat);\n-                subpats.push(subpat);\n-            }\n-\n             let matching_path = build::mk_raw_path(span, ~[ variant_ident ]);\n-            let subpats = dvec::unwrap(move subpats);\n+            let subpats = create_subpatterns(cx,\n+                                             span,\n+                                             prefix,\n+                                             variant_args.len());\n+\n             return build::mk_pat_enum(cx, span, matching_path, move subpats);\n         }\n-        struct_variant_kind(*) => {\n-            cx.span_unimpl(span, ~\"struct variants for `deriving`\");\n+        struct_variant_kind(struct_def) => {\n+            let matching_path = build::mk_raw_path(span, ~[ variant_ident ]);\n+            let subpats = create_subpatterns(cx,\n+                                             span,\n+                                             prefix,\n+                                             struct_def.fields.len());\n+\n+            let field_pats = dvec::DVec();\n+            for struct_def.fields.eachi |i, struct_field| {\n+                let ident = match struct_field.node.kind {\n+                    named_field(ident, _, _) => ident,\n+                    unnamed_field => {\n+                        cx.span_bug(span, ~\"unexpected unnamed field\");\n+                    }\n+                };\n+                field_pats.push({ ident: ident, pat: subpats[i] });\n+            }\n+            let field_pats = dvec::unwrap(move field_pats);\n+\n+            return build::mk_pat_struct(cx,\n+                                        span,\n+                                        matching_path,\n+                                        move field_pats);\n         }\n         enum_variant_kind(*) => {\n             cx.span_unimpl(span, ~\"enum variants for `deriving`\");"}, {"sha": "c5e41826a354071711a13f66319ea21907da48cb", "filename": "src/test/run-pass/deriving-via-extension-struct-like-enum-variant.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d230296483f72f9c6289c0da8292a9ce943f96e/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d230296483f72f9c6289c0da8292a9ce943f96e/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs?ref=9d230296483f72f9c6289c0da8292a9ce943f96e", "patch": "@@ -0,0 +1,12 @@\n+#[deriving_eq]\n+enum S {\n+    X { x: int, y: int },\n+    Y\n+}\n+\n+fn main() {\n+    let x = X { x: 1, y: 2 };\n+    assert x == x;\n+    assert !(x != x);\n+}\n+"}]}