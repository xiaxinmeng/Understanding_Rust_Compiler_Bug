{"sha": "efbe798e626bee92cb7b2858b26ead38746b1960", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYmU3OThlNjI2YmVlOTJjYjdiMjg1OGIyNmVhZDM4NzQ2YjE5NjA=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-30T19:21:45Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-30T19:21:45Z"}, "message": "Avoid buffer allocation to read files", "tree": {"sha": "c69b6cfb88fa7e109ef89fae3071ad8699dba52f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c69b6cfb88fa7e109ef89fae3071ad8699dba52f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efbe798e626bee92cb7b2858b26ead38746b1960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efbe798e626bee92cb7b2858b26ead38746b1960", "html_url": "https://github.com/rust-lang/rust/commit/efbe798e626bee92cb7b2858b26ead38746b1960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efbe798e626bee92cb7b2858b26ead38746b1960/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775246e3297ef49ae361a43fc5ce469f1cc26c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/775246e3297ef49ae361a43fc5ce469f1cc26c96", "html_url": "https://github.com/rust-lang/rust/commit/775246e3297ef49ae361a43fc5ce469f1cc26c96"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "6b1952e8d66abda245aa31b5451e33d67dab3a99", "filename": "src/shims/io.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/efbe798e626bee92cb7b2858b26ead38746b1960/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efbe798e626bee92cb7b2858b26ead38746b1960/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=efbe798e626bee92cb7b2858b26ead38746b1960", "patch": "@@ -2,6 +2,8 @@ use std::collections::HashMap;\n use std::fs::File;\n use std::io::Read;\n \n+use rustc::ty::layout::Size;\n+\n use crate::stacked_borrows::Tag;\n use crate::*;\n \n@@ -53,7 +55,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = File::open(&path).map(|file| {\n             let mut fh = &mut this.machine.file_handler;\n             fh.low += 1;\n-            fh.handles.insert(fh.low, FileHandle{ file, flag});\n+            fh.handles.insert(fh.low, FileHandle { file, flag });\n             fh.low\n         });\n \n@@ -81,7 +83,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let flag = this.read_scalar(arg_op.unwrap())?.to_i32()?;\n             // The only usage of this in stdlib at the moment is to enable the `FD_CLOEXEC` flag.\n             let fd_cloexec = this.eval_libc_i32(\"FD_CLOEXEC\")?;\n-            if let Some(FileHandle{ flag: old_flag, .. }) = this.machine.file_handler.handles.get_mut(&fd) {\n+            if let Some(FileHandle { flag: old_flag, .. }) =\n+                this.machine.file_handler.handles.get_mut(&fd)\n+            {\n                 if flag ^ *old_flag == fd_cloexec {\n                     *old_flag = flag;\n                 } else {\n@@ -136,23 +140,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n         let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n \n-        let mut bytes = vec![0; count as usize];\n-\n-        let read_result = if let Some(FileHandle { file, ..}) = this.machine.file_handler.handles.get_mut(&fd) {\n-            file.read(&mut bytes).map(|bytes| bytes as i64)\n+        // Remove the file handle to avoid borrowing issues\n+        if let Some(mut handle) = this.machine.file_handler.handles.remove(&fd) {\n+            let bytes = handle\n+                .file\n+                .read(this.memory_mut().get_mut(buf.alloc_id)?.get_bytes_mut(\n+                    tcx,\n+                    buf,\n+                    Size::from_bytes(count),\n+                )?)\n+                .map(|bytes| bytes as i64);\n+            // Reinsert the file handle\n+            this.machine.file_handler.handles.insert(fd, handle);\n+            this.consume_result::<i64>(bytes, -1)\n         } else {\n             this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n-            return Ok(-1);\n-        };\n-\n-        let read_bytes = this.consume_result::<i64>(read_result, -1)?;\n-        if read_bytes != -1 {\n-            bytes.truncate(read_bytes as usize);\n-            this.memory_mut()\n-                .get_mut(buf.alloc_id)?\n-                .write_bytes(tcx, buf, &bytes)?;\n+            Ok(-1)\n         }\n-        Ok(read_bytes)\n     }\n \n     fn consume_result<T>(&mut self, result: std::io::Result<T>, t: T) -> InterpResult<'tcx, T> {"}]}