{"sha": "556fd86524e37dc7f33cba66bec5f45794219457", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NmZkODY1MjRlMzdkYzdmMzNjYmE2NmJlYzVmNDU3OTQyMTk0NTc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-22T20:23:01Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-24T02:40:20Z"}, "message": "Disambiguate char -> prim@char for `core`\n\nThis also changes human intuition -> intuition. 'human intuition' sounds\nvaguely menacing.", "tree": {"sha": "bfd8b56086b29d2a562485b441518431bc9f1897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd8b56086b29d2a562485b441518431bc9f1897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/556fd86524e37dc7f33cba66bec5f45794219457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/556fd86524e37dc7f33cba66bec5f45794219457", "html_url": "https://github.com/rust-lang/rust/commit/556fd86524e37dc7f33cba66bec5f45794219457", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/556fd86524e37dc7f33cba66bec5f45794219457/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47b8a5258df2e8ca59bf989b2dca2f1619e24092", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b8a5258df2e8ca59bf989b2dca2f1619e24092", "html_url": "https://github.com/rust-lang/rust/commit/47b8a5258df2e8ca59bf989b2dca2f1619e24092"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "ab9afeb25e0cec7d0e6191ac65c33c0361173113", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/556fd86524e37dc7f33cba66bec5f45794219457/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/556fd86524e37dc7f33cba66bec5f45794219457/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=556fd86524e37dc7f33cba66bec5f45794219457", "patch": "@@ -476,6 +476,7 @@ Section: Iterators\n /// This struct is created by the [`chars`] method on [`str`].\n /// See its documentation for more.\n ///\n+/// [`char`]: prim@char\n /// [`chars`]: str::chars\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -673,6 +674,7 @@ impl<'a> Chars<'a> {\n /// This struct is created by the [`char_indices`] method on [`str`].\n /// See its documentation for more.\n ///\n+/// [`char`]: prim@char\n /// [`char_indices`]: str::char_indices\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2270,6 +2272,8 @@ impl str {\n     /// This length is in bytes, not [`char`]s or graphemes. In other words,\n     /// it may not be what a human considers the length of the string.\n     ///\n+    /// [`char`]: prim@char\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2791,7 +2795,9 @@ impl str {\n     /// assert_eq!(None, chars.next());\n     /// ```\n     ///\n-    /// Remember, [`char`]s may not match your human intuition about characters:\n+    /// Remember, [`char`]s may not match your intuition about characters:\n+    ///\n+    /// [`char`]: prim@char\n     ///\n     /// ```\n     /// let y = \"y\u0306\";\n@@ -2842,7 +2848,9 @@ impl str {\n     /// assert_eq!(None, char_indices.next());\n     /// ```\n     ///\n-    /// Remember, [`char`]s may not match your human intuition about characters:\n+    /// Remember, [`char`]s may not match your intuition about characters:\n+    ///\n+    /// [`char`]: prim@char\n     ///\n     /// ```\n     /// let yes = \"y\u0306es\";\n@@ -3053,6 +3061,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Examples\n@@ -3079,6 +3088,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Examples\n@@ -3104,6 +3114,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Examples\n@@ -3132,6 +3143,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Examples\n@@ -3179,6 +3191,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Examples\n@@ -3225,6 +3238,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n@@ -3344,6 +3358,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Examples\n@@ -3383,6 +3398,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n@@ -3434,6 +3450,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// Equivalent to [`split`], except that the trailing substring\n@@ -3478,6 +3495,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// Equivalent to [`split`], except that the trailing substring is\n@@ -3526,6 +3544,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n@@ -3578,6 +3597,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n@@ -3666,6 +3686,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n@@ -3702,6 +3723,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n@@ -3743,6 +3765,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n@@ -3785,6 +3808,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n@@ -4003,6 +4027,7 @@ impl str {\n     /// The [pattern] can be a [`char`], a slice of [`char`]s, or a function\n     /// or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Examples\n@@ -4050,6 +4075,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Text directionality\n@@ -4094,6 +4120,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Examples\n@@ -4121,6 +4148,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Examples\n@@ -4147,6 +4175,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Text directionality\n@@ -4195,6 +4224,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Text directionality\n@@ -4231,6 +4261,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n+    /// [`char`]: prim@char\n     /// [pattern]: self::pattern\n     ///\n     /// # Text directionality"}]}