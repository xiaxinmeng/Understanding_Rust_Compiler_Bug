{"sha": "5f44c653cff61d0f55f53e07a188f755c7acddd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNDRjNjUzY2ZmNjFkMGY1NWY1M2UwN2ExODhmNzU1YzdhY2RkZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-24T15:11:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-24T15:11:11Z"}, "message": "Auto merge of #46093 - scottmcm:lower-128-mir, r=nagisa\n\nAdd a MIR pass to lower 128-bit operators to lang item calls\n\nRuns only with `-Z lower_128bit_ops` since it's not hooked into targets yet.\n\nThis isn't really useful on its own, but the declarations for the lang items need to be in the compiler before compiler-builtins can be updated to define them, so this is part 1 of at least 3.\n\ncc https://github.com/rust-lang/rust/issues/45676 @est31 @nagisa", "tree": {"sha": "5fa1e64973c8f8316b714ceb40ffd31fe5e9539c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fa1e64973c8f8316b714ceb40ffd31fe5e9539c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f44c653cff61d0f55f53e07a188f755c7acddd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f44c653cff61d0f55f53e07a188f755c7acddd1", "html_url": "https://github.com/rust-lang/rust/commit/5f44c653cff61d0f55f53e07a188f755c7acddd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f44c653cff61d0f55f53e07a188f755c7acddd1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71da1c21ebc79f19e749344c8b4e2c13f533872e", "url": "https://api.github.com/repos/rust-lang/rust/commits/71da1c21ebc79f19e749344c8b4e2c13f533872e", "html_url": "https://github.com/rust-lang/rust/commit/71da1c21ebc79f19e749344c8b4e2c13f533872e"}, {"sha": "42208c122757fca706bc5224f3a0c7200fae32e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/42208c122757fca706bc5224f3a0c7200fae32e9", "html_url": "https://github.com/rust-lang/rust/commit/42208c122757fca706bc5224f3a0c7200fae32e9"}], "stats": {"total": 536, "additions": 536, "deletions": 0}, "files": [{"sha": "a858a8d7449f499daa6c13e80e55fa1dbf4a7d60", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=5f44c653cff61d0f55f53e07a188f755c7acddd1", "patch": "@@ -310,6 +310,34 @@ language_item_table! {\n     NonZeroItem,                     \"non_zero\",                non_zero;\n \n     DebugTraitLangItem,              \"debug_trait\",             debug_trait;\n+\n+    // A lang item for each of the 128-bit operators we can optionally lower.\n+    I128AddFnLangItem,               \"i128_add\",                i128_add_fn;\n+    U128AddFnLangItem,               \"u128_add\",                u128_add_fn;\n+    I128SubFnLangItem,               \"i128_sub\",                i128_sub_fn;\n+    U128SubFnLangItem,               \"u128_sub\",                u128_sub_fn;\n+    I128MulFnLangItem,               \"i128_mul\",                i128_mul_fn;\n+    U128MulFnLangItem,               \"u128_mul\",                u128_mul_fn;\n+    I128DivFnLangItem,               \"i128_div\",                i128_div_fn;\n+    U128DivFnLangItem,               \"u128_div\",                u128_div_fn;\n+    I128RemFnLangItem,               \"i128_rem\",                i128_rem_fn;\n+    U128RemFnLangItem,               \"u128_rem\",                u128_rem_fn;\n+    I128ShlFnLangItem,               \"i128_shl\",                i128_shl_fn;\n+    U128ShlFnLangItem,               \"u128_shl\",                u128_shl_fn;\n+    I128ShrFnLangItem,               \"i128_shr\",                i128_shr_fn;\n+    U128ShrFnLangItem,               \"u128_shr\",                u128_shr_fn;\n+    // And overflow versions for the operators that are checkable.\n+    // While MIR calls these Checked*, they return (T,bool), not Option<T>.\n+    I128AddoFnLangItem,              \"i128_addo\",               i128_addo_fn;\n+    U128AddoFnLangItem,              \"u128_addo\",               u128_addo_fn;\n+    I128SuboFnLangItem,              \"i128_subo\",               i128_subo_fn;\n+    U128SuboFnLangItem,              \"u128_subo\",               u128_subo_fn;\n+    I128MuloFnLangItem,              \"i128_mulo\",               i128_mulo_fn;\n+    U128MuloFnLangItem,              \"u128_mulo\",               u128_mulo_fn;\n+    I128ShloFnLangItem,              \"i128_shlo\",               i128_shlo_fn;\n+    U128ShloFnLangItem,              \"u128_shlo\",               u128_shlo_fn;\n+    I128ShroFnLangItem,              \"i128_shro\",               i128_shro_fn;\n+    U128ShroFnLangItem,              \"u128_shro\",               u128_shro_fn;\n }\n \n impl<'a, 'tcx, 'gcx> TyCtxt<'a, 'tcx, 'gcx> {"}, {"sha": "d093ab45b552583bf799129814deebcdc21ff9c6", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5f44c653cff61d0f55f53e07a188f755c7acddd1", "patch": "@@ -170,6 +170,15 @@ impl<'tcx> Mir<'tcx> {\n         &mut self.basic_blocks\n     }\n \n+    #[inline]\n+    pub fn basic_blocks_and_local_decls_mut(&mut self) -> (\n+        &mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+        &mut LocalDecls<'tcx>,\n+    ) {\n+        self.cache.invalidate();\n+        (&mut self.basic_blocks, &mut self.local_decls)\n+    }\n+\n     #[inline]\n     pub fn predecessors(&self) -> Ref<IndexVec<BasicBlock, Vec<BasicBlock>>> {\n         self.cache.predecessors(self)"}, {"sha": "a56f850942cedc2828c0dcf4e5e25f6a884d183d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5f44c653cff61d0f55f53e07a188f755c7acddd1", "patch": "@@ -1144,6 +1144,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n          the max/min integer respectively, and NaN is mapped to 0\"),\n+    lower_128bit_ops: bool = (false, parse_bool, [TRACKED],\n+        \"rewrite operators on i128 and u128 into lang item calls (typically provided \\\n+         by compiler-builtins) so translation doesn't need to support them\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "9dc5fdadbb195cf9739e2332fe452d8a2720f3e9", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=5f44c653cff61d0f55f53e07a188f755c7acddd1", "patch": "@@ -0,0 +1,240 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Replaces 128-bit operators with lang item calls\n+\n+use rustc::hir::def_id::DefId;\n+use rustc::middle::lang_items::LangItem;\n+use rustc::mir::*;\n+use rustc::ty::{Slice, Ty, TyCtxt, TypeVariants};\n+use rustc_data_structures::indexed_vec::{Idx};\n+use transform::{MirPass, MirSource};\n+use syntax;\n+\n+pub struct Lower128Bit;\n+\n+impl MirPass for Lower128Bit {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _src: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n+        if !tcx.sess.opts.debugging_opts.lower_128bit_ops {\n+            return\n+        }\n+\n+        self.lower_128bit_ops(tcx, mir);\n+    }\n+}\n+\n+impl Lower128Bit {\n+    fn lower_128bit_ops<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Mir<'tcx>) {\n+        let mut new_blocks = Vec::new();\n+        let cur_len = mir.basic_blocks().len();\n+\n+        let (basic_blocks, local_decls) = mir.basic_blocks_and_local_decls_mut();\n+        for block in basic_blocks.iter_mut() {\n+            for i in (0..block.statements.len()).rev() {\n+                let (lang_item, rhs_kind) =\n+                    if let Some((lang_item, rhs_kind)) =\n+                        lower_to(&block.statements[i], local_decls, tcx)\n+                    {\n+                        (lang_item, rhs_kind)\n+                    } else {\n+                        continue;\n+                    };\n+\n+                let rhs_override_ty = rhs_kind.ty(tcx);\n+                let cast_local =\n+                    match rhs_override_ty {\n+                        None => None,\n+                        Some(ty) => {\n+                            let local_decl = LocalDecl::new_internal(\n+                                ty, block.statements[i].source_info.span);\n+                            Some(local_decls.push(local_decl))\n+                        },\n+                    };\n+\n+                let storage_dead = cast_local.map(|local| {\n+                    Statement {\n+                        source_info: block.statements[i].source_info,\n+                        kind: StatementKind::StorageDead(local),\n+                    }\n+                });\n+                let after_call = BasicBlockData {\n+                    statements: storage_dead.into_iter()\n+                        .chain(block.statements.drain((i+1)..)).collect(),\n+                    is_cleanup: block.is_cleanup,\n+                    terminator: block.terminator.take(),\n+                };\n+\n+                let bin_statement = block.statements.pop().unwrap();\n+                let (source_info, lvalue, lhs, mut rhs) = match bin_statement {\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(\n+                            lvalue,\n+                            Rvalue::BinaryOp(_, lhs, rhs))\n+                    } => (source_info, lvalue, lhs, rhs),\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(\n+                            lvalue,\n+                            Rvalue::CheckedBinaryOp(_, lhs, rhs))\n+                    } => (source_info, lvalue, lhs, rhs),\n+                    _ => bug!(\"Statement doesn't match pattern any more?\"),\n+                };\n+\n+                if let Some(local) = cast_local {\n+                    block.statements.push(Statement {\n+                        source_info: source_info,\n+                        kind: StatementKind::StorageLive(local),\n+                    });\n+                    block.statements.push(Statement {\n+                        source_info: source_info,\n+                        kind: StatementKind::Assign(\n+                            Lvalue::Local(local),\n+                            Rvalue::Cast(\n+                                CastKind::Misc,\n+                                rhs,\n+                                rhs_override_ty.unwrap())),\n+                    });\n+                    rhs = Operand::Consume(Lvalue::Local(local));\n+                }\n+\n+                let call_did = check_lang_item_type(\n+                    lang_item, &lvalue, &lhs, &rhs, local_decls, tcx);\n+\n+                let bb = BasicBlock::new(cur_len + new_blocks.len());\n+                new_blocks.push(after_call);\n+\n+                block.terminator =\n+                    Some(Terminator {\n+                        source_info,\n+                        kind: TerminatorKind::Call {\n+                            func: Operand::function_handle(tcx, call_did,\n+                                Slice::empty(), source_info.span),\n+                            args: vec![lhs, rhs],\n+                            destination: Some((lvalue, bb)),\n+                            cleanup: None,\n+                        },\n+                    });\n+            }\n+        }\n+\n+        basic_blocks.extend(new_blocks);\n+    }\n+}\n+\n+fn check_lang_item_type<'a, 'tcx, D>(\n+    lang_item: LangItem,\n+    lvalue: &Lvalue<'tcx>,\n+    lhs: &Operand<'tcx>,\n+    rhs: &Operand<'tcx>,\n+    local_decls: &D,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+-> DefId\n+    where D: HasLocalDecls<'tcx>\n+{\n+    let did = tcx.require_lang_item(lang_item);\n+    let poly_sig = tcx.fn_sig(did);\n+    let sig = tcx.no_late_bound_regions(&poly_sig).unwrap();\n+    let lhs_ty = lhs.ty(local_decls, tcx);\n+    let rhs_ty = rhs.ty(local_decls, tcx);\n+    let lvalue_ty = lvalue.ty(local_decls, tcx).to_ty(tcx);\n+    let expected = [lhs_ty, rhs_ty, lvalue_ty];\n+    assert_eq!(sig.inputs_and_output[..], expected,\n+        \"lang item {}\", tcx.def_symbol_name(did));\n+    did\n+}\n+\n+fn lower_to<'a, 'tcx, D>(statement: &Statement<'tcx>, local_decls: &D, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+    -> Option<(LangItem, RhsKind)>\n+    where D: HasLocalDecls<'tcx>\n+{\n+    match statement.kind {\n+        StatementKind::Assign(_, Rvalue::BinaryOp(bin_op, ref lhs, _)) => {\n+            let ty = lhs.ty(local_decls, tcx);\n+            if let Some(is_signed) = sign_of_128bit(ty) {\n+                return item_for_op(bin_op, is_signed);\n+            }\n+        },\n+        StatementKind::Assign(_, Rvalue::CheckedBinaryOp(bin_op, ref lhs, _)) => {\n+            let ty = lhs.ty(local_decls, tcx);\n+            if let Some(is_signed) = sign_of_128bit(ty) {\n+                return item_for_checked_op(bin_op, is_signed);\n+            }\n+        },\n+        _ => {},\n+    }\n+    None\n+}\n+\n+#[derive(Copy, Clone)]\n+enum RhsKind {\n+    Unchanged,\n+    ForceU128,\n+    ForceU32,\n+}\n+\n+impl RhsKind {\n+    fn ty<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Ty<'tcx>> {\n+        match *self {\n+            RhsKind::Unchanged => None,\n+            RhsKind::ForceU128 => Some(tcx.types.u128),\n+            RhsKind::ForceU32 => Some(tcx.types.u32),\n+        }\n+    }\n+}\n+\n+fn sign_of_128bit(ty: Ty) -> Option<bool> {\n+    match ty.sty {\n+        TypeVariants::TyInt(syntax::ast::IntTy::I128) => Some(true),\n+        TypeVariants::TyUint(syntax::ast::UintTy::U128) => Some(false),\n+        _ => None,\n+    }\n+}\n+\n+fn item_for_op(bin_op: BinOp, is_signed: bool) -> Option<(LangItem, RhsKind)> {\n+    let i = match (bin_op, is_signed) {\n+        (BinOp::Add, true) => (LangItem::I128AddFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Add, false) => (LangItem::U128AddFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Sub, true) => (LangItem::I128SubFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Sub, false) => (LangItem::U128SubFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Mul, true) => (LangItem::I128MulFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Mul, false) => (LangItem::U128MulFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Div, true) => (LangItem::I128DivFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Div, false) => (LangItem::U128DivFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Rem, true) => (LangItem::I128RemFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Rem, false) => (LangItem::U128RemFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Shl, true) => (LangItem::I128ShlFnLangItem, RhsKind::ForceU32),\n+        (BinOp::Shl, false) => (LangItem::U128ShlFnLangItem, RhsKind::ForceU32),\n+        (BinOp::Shr, true) => (LangItem::I128ShrFnLangItem, RhsKind::ForceU32),\n+        (BinOp::Shr, false) => (LangItem::U128ShrFnLangItem, RhsKind::ForceU32),\n+        _ => return None,\n+    };\n+    Some(i)\n+}\n+\n+fn item_for_checked_op(bin_op: BinOp, is_signed: bool) -> Option<(LangItem, RhsKind)> {\n+    let i = match (bin_op, is_signed) {\n+        (BinOp::Add, true) => (LangItem::I128AddoFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Add, false) => (LangItem::U128AddoFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Sub, true) => (LangItem::I128SuboFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Sub, false) => (LangItem::U128SuboFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Mul, true) => (LangItem::I128MuloFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Mul, false) => (LangItem::U128MuloFnLangItem, RhsKind::Unchanged),\n+        (BinOp::Shl, true) => (LangItem::I128ShloFnLangItem, RhsKind::ForceU128),\n+        (BinOp::Shl, false) => (LangItem::U128ShloFnLangItem, RhsKind::ForceU128),\n+        (BinOp::Shr, true) => (LangItem::I128ShroFnLangItem, RhsKind::ForceU128),\n+        (BinOp::Shr, false) => (LangItem::U128ShroFnLangItem, RhsKind::ForceU128),\n+        _ => bug!(\"That should be all the checked ones?\"),\n+    };\n+    Some(i)\n+}\n\\ No newline at end of file"}, {"sha": "6987cfa79be097f0ac21fb0f019b04e6fe6aebd4", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=5f44c653cff61d0f55f53e07a188f755c7acddd1", "patch": "@@ -42,6 +42,7 @@ pub mod copy_prop;\n pub mod generator;\n pub mod inline;\n pub mod nll;\n+pub mod lower_128bit;\n \n pub(crate) fn provide(providers: &mut Providers) {\n     self::qualify_consts::provide(providers);\n@@ -241,6 +242,8 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         // From here on out, regions are gone.\n         erase_regions::EraseRegions,\n \n+        lower_128bit::Lower128Bit,\n+\n         // Optimizations begin.\n         inline::Inline,\n         instcombine::InstCombine,"}, {"sha": "4626dc17e1f6efe75dd347cc7c95741d6a0ab6fe", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=5f44c653cff61d0f55f53e07a188f755c7acddd1", "patch": "@@ -0,0 +1,145 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z lower_128bit_ops -C debug_assertions=yes\n+\n+#![feature(i128_type)]\n+#![feature(lang_items)]\n+\n+#[lang=\"i128_div\"]\n+fn i128_div(_x: i128, _y: i128) -> i128 { 3 }\n+#[lang=\"u128_div\"]\n+fn u128_div(_x: u128, _y: u128) -> u128 { 4 }\n+#[lang=\"i128_rem\"]\n+fn i128_rem(_x: i128, _y: i128) -> i128 { 5 }\n+#[lang=\"u128_rem\"]\n+fn u128_rem(_x: u128, _y: u128) -> u128 { 6 }\n+\n+#[lang=\"i128_addo\"]\n+fn i128_addo(_x: i128, _y: i128) -> (i128, bool) { (0, false) }\n+#[lang=\"u128_addo\"]\n+fn u128_addo(_x: u128, _y: u128) -> (u128, bool) { (1, false) }\n+#[lang=\"i128_subo\"]\n+fn i128_subo(_x: i128, _y: i128) -> (i128, bool) { (2, false) }\n+#[lang=\"u128_subo\"]\n+fn u128_subo(_x: u128, _y: u128) -> (u128, bool) { (3, false) }\n+#[lang=\"i128_mulo\"]\n+fn i128_mulo(_x: i128, _y: i128) -> (i128, bool) { (4, false) }\n+#[lang=\"u128_mulo\"]\n+fn u128_mulo(_x: u128, _y: u128) -> (u128, bool) { (5, false) }\n+#[lang=\"i128_shlo\"]\n+fn i128_shlo(_x: i128, _y: u128) -> (i128, bool) { (6, false) }\n+#[lang=\"u128_shlo\"]\n+fn u128_shlo(_x: u128, _y: u128) -> (u128, bool) { (6, false) }\n+#[lang=\"i128_shro\"]\n+fn i128_shro(_x: i128, _y: u128) -> (i128, bool) { (7, false) }\n+#[lang=\"u128_shro\"]\n+fn u128_shro(_x: u128, _y: u128) -> (u128, bool) { (8, false) }\n+\n+fn test_signed(mut x: i128) -> i128 {\n+    x += 1;\n+    x -= 2;\n+    x *= 3;\n+    x /= 4;\n+    x %= 5;\n+    x <<= 6;\n+    x >>= 7;\n+    x\n+}\n+\n+fn test_unsigned(mut x: u128) -> u128 {\n+    x += 1;\n+    x -= 2;\n+    x *= 3;\n+    x /= 4;\n+    x %= 5;\n+    x <<= 6;\n+    x >>= 7;\n+    x\n+}\n+\n+fn main() {\n+    test_signed(-200);\n+    test_unsigned(200);\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.test_signed.Lower128Bit.after.mir\n+//     _2 = const i128_addo(_1, const 1i128) -> bb10;\n+//     ...\n+//     _1 = (_2.0: i128);\n+//     _3 = const i128_subo(_1, const 2i128) -> bb11;\n+//     ...\n+//     _1 = (_3.0: i128);\n+//     _4 = const i128_mulo(_1, const 3i128) -> bb12;\n+//     ...\n+//     _1 = (_4.0: i128);\n+//     ...\n+//     _1 = const i128_div(_1, const 4i128) -> bb13;\n+//     ...\n+//     _1 = const i128_rem(_1, const 5i128) -> bb15;\n+//     ...\n+//     _1 = (_13.0: i128);\n+//     ...\n+//     _17 = const 7i32 as u128 (Misc);\n+//     _14 = const i128_shro(_1, _17) -> bb16;\n+//     ...\n+//     _1 = (_14.0: i128);\n+//     ...\n+//     assert(!(_2.1: bool), \"attempt to add with overflow\") -> bb1;\n+//     ...\n+//     assert(!(_3.1: bool), \"attempt to subtract with overflow\") -> bb2;\n+//     ...\n+//     assert(!(_4.1: bool), \"attempt to multiply with overflow\") -> bb3;\n+//     ...\n+//     assert(!(_13.1: bool), \"attempt to shift left with overflow\") -> bb8;\n+//     ...\n+//     _16 = const 6i32 as u128 (Misc);\n+//     _13 = const i128_shlo(_1, _16) -> bb14;\n+//     ...\n+//     assert(!(_14.1: bool), \"attempt to shift right with overflow\") -> bb9;\n+// END rustc.test_signed.Lower128Bit.after.mir\n+\n+// START rustc.test_unsigned.Lower128Bit.after.mir\n+//     _2 = const u128_addo(_1, const 1u128) -> bb8;\n+//     ...\n+//     _1 = (_2.0: u128);\n+//     _3 = const u128_subo(_1, const 2u128) -> bb9;\n+//     ...\n+//     _1 = (_3.0: u128);\n+//     _4 = const u128_mulo(_1, const 3u128) -> bb10;\n+//     ...\n+//     _1 = (_4.0: u128);\n+//     ...\n+//     _1 = const u128_div(_1, const 4u128) -> bb11;\n+//     ...\n+//     _1 = const u128_rem(_1, const 5u128) -> bb13;\n+//     ...\n+//     _1 = (_7.0: u128);\n+//     ...\n+//     _11 = const 7i32 as u128 (Misc);\n+//     _8 = const u128_shro(_1, _11) -> bb14;\n+//     ...\n+//     _1 = (_8.0: u128);\n+//     ...\n+//     assert(!(_2.1: bool), \"attempt to add with overflow\") -> bb1;\n+//     ...\n+//     assert(!(_3.1: bool), \"attempt to subtract with overflow\") -> bb2;\n+//     ...\n+//     assert(!(_4.1: bool), \"attempt to multiply with overflow\") -> bb3;\n+//     ...\n+//     assert(!(_7.1: bool), \"attempt to shift left with overflow\") -> bb6;\n+//     ...\n+//     _10 = const 6i32 as u128 (Misc);\n+//     _7 = const u128_shlo(_1, _10) -> bb12;\n+//     ...\n+//     assert(!(_8.1: bool), \"attempt to shift right with overflow\") -> bb7;\n+// END rustc.test_unsigned.Lower128Bit.after.mir"}, {"sha": "207cd0ac57eb0d683feb0b8cbe189be0f22ef0ea", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f44c653cff61d0f55f53e07a188f755c7acddd1/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=5f44c653cff61d0f55f53e07a188f755c7acddd1", "patch": "@@ -0,0 +1,108 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z lower_128bit_ops -C debug_assertions=no\n+\n+#![feature(i128_type)]\n+#![feature(lang_items)]\n+\n+#[lang=\"i128_add\"]\n+fn i128_add(_x: i128, _y: i128) -> i128 { 0 }\n+#[lang=\"u128_add\"]\n+fn u128_add(_x: u128, _y: u128) -> u128 { 0 }\n+#[lang=\"i128_sub\"]\n+fn i128_sub(_x: i128, _y: i128) -> i128 { 1 }\n+#[lang=\"u128_sub\"]\n+fn u128_sub(_x: u128, _y: u128) -> u128 { 1 }\n+#[lang=\"i128_mul\"]\n+fn i128_mul(_x: i128, _y: i128) -> i128 { 2 }\n+#[lang=\"u128_mul\"]\n+fn u128_mul(_x: u128, _y: u128) -> u128 { 2 }\n+#[lang=\"i128_div\"]\n+fn i128_div(_x: i128, _y: i128) -> i128 { 3 }\n+#[lang=\"u128_div\"]\n+fn u128_div(_x: u128, _y: u128) -> u128 { 4 }\n+#[lang=\"i128_rem\"]\n+fn i128_rem(_x: i128, _y: i128) -> i128 { 5 }\n+#[lang=\"u128_rem\"]\n+fn u128_rem(_x: u128, _y: u128) -> u128 { 6 }\n+#[lang=\"i128_shl\"]\n+fn i128_shl(_x: i128, _y: u32) -> i128 { 7 }\n+#[lang=\"u128_shl\"]\n+fn u128_shl(_x: u128, _y: u32) -> u128 { 7 }\n+#[lang=\"i128_shr\"]\n+fn i128_shr(_x: i128, _y: u32) -> i128 { 8 }\n+#[lang=\"u128_shr\"]\n+fn u128_shr(_x: u128, _y: u32) -> u128 { 9 }\n+\n+fn test_signed(mut x: i128) -> i128 {\n+    x += 1;\n+    x -= 2;\n+    x *= 3;\n+    x /= 4;\n+    x %= 5;\n+    x <<= 6;\n+    x >>= 7;\n+    x\n+}\n+\n+fn test_unsigned(mut x: u128) -> u128 {\n+    x += 1;\n+    x -= 2;\n+    x *= 3;\n+    x /= 4;\n+    x %= 5;\n+    x <<= 6;\n+    x >>= 7;\n+    x\n+}\n+\n+fn main() {\n+    test_signed(-200);\n+    test_unsigned(200);\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.test_signed.Lower128Bit.after.mir\n+//     _1 = const i128_add(_1, const 1i128) -> bb7;\n+//     ...\n+//     _1 = const i128_div(_1, const 4i128) -> bb8;\n+//     ...\n+//     _1 = const i128_rem(_1, const 5i128) -> bb11;\n+//     ...\n+//     _1 = const i128_mul(_1, const 3i128) -> bb5;\n+//     ...\n+//     _1 = const i128_sub(_1, const 2i128) -> bb6;\n+//     ...\n+//     _11 = const 7i32 as u32 (Misc);\n+//     _1 = const i128_shr(_1, _11) -> bb9;\n+//     ...\n+//     _12 = const 6i32 as u32 (Misc);\n+//     _1 = const i128_shl(_1, _12) -> bb10;\n+// END rustc.test_signed.Lower128Bit.after.mir\n+\n+// START rustc.test_unsigned.Lower128Bit.after.mir\n+//     _1 = const u128_add(_1, const 1u128) -> bb5;\n+//     ...\n+//     _1 = const u128_div(_1, const 4u128) -> bb6;\n+//     ...\n+//     _1 = const u128_rem(_1, const 5u128) -> bb9;\n+//     ...\n+//     _1 = const u128_mul(_1, const 3u128) -> bb3;\n+//     ...\n+//     _1 = const u128_sub(_1, const 2u128) -> bb4;\n+//     ...\n+//     _5 = const 7i32 as u32 (Misc);\n+//     _1 = const u128_shr(_1, _5) -> bb7;\n+//     ...\n+//     _6 = const 6i32 as u32 (Misc);\n+//     _1 = const u128_shl(_1, _6) -> bb8;\n+// END rustc.test_unsigned.Lower128Bit.after.mir"}]}