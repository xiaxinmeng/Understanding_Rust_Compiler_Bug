{"sha": "30b27f350ccca8f2b08b54b256f7e1fdb8c8ddb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYjI3ZjM1MGNjY2E4ZjJiMDhiNTRiMjU2ZjdlMWZkYjhjOGRkYjA=", "commit": {"author": {"name": "Andrew Champion", "email": "andrew.champion@gmail.com", "date": "2019-06-08T15:26:34Z"}, "committer": {"name": "Andrew Champion", "email": "andrew.champion@gmail.com", "date": "2019-06-08T15:26:34Z"}, "message": "core: check for pointer equality when comparing Eq slices\n\nBecause Eq types must be reflexively equal, an equal-length slice to the\nsame memory location must be equal.", "tree": {"sha": "98742040b4713b89dd82a25c9bb6cf64b2e2c109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98742040b4713b89dd82a25c9bb6cf64b2e2c109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30b27f350ccca8f2b08b54b256f7e1fdb8c8ddb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30b27f350ccca8f2b08b54b256f7e1fdb8c8ddb0", "html_url": "https://github.com/rust-lang/rust/commit/30b27f350ccca8f2b08b54b256f7e1fdb8c8ddb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30b27f350ccca8f2b08b54b256f7e1fdb8c8ddb0/comments", "author": {"login": "aschampion", "id": 460206, "node_id": "MDQ6VXNlcjQ2MDIwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/460206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aschampion", "html_url": "https://github.com/aschampion", "followers_url": "https://api.github.com/users/aschampion/followers", "following_url": "https://api.github.com/users/aschampion/following{/other_user}", "gists_url": "https://api.github.com/users/aschampion/gists{/gist_id}", "starred_url": "https://api.github.com/users/aschampion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aschampion/subscriptions", "organizations_url": "https://api.github.com/users/aschampion/orgs", "repos_url": "https://api.github.com/users/aschampion/repos", "events_url": "https://api.github.com/users/aschampion/events{/privacy}", "received_events_url": "https://api.github.com/users/aschampion/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aschampion", "id": 460206, "node_id": "MDQ6VXNlcjQ2MDIwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/460206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aschampion", "html_url": "https://github.com/aschampion", "followers_url": "https://api.github.com/users/aschampion/followers", "following_url": "https://api.github.com/users/aschampion/following{/other_user}", "gists_url": "https://api.github.com/users/aschampion/gists{/gist_id}", "starred_url": "https://api.github.com/users/aschampion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aschampion/subscriptions", "organizations_url": "https://api.github.com/users/aschampion/orgs", "repos_url": "https://api.github.com/users/aschampion/repos", "events_url": "https://api.github.com/users/aschampion/events{/privacy}", "received_events_url": "https://api.github.com/users/aschampion/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f90abe3aa1864e40e3d516b936c4a1a84e72aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f90abe3aa1864e40e3d516b936c4a1a84e72aee", "html_url": "https://github.com/rust-lang/rust/commit/7f90abe3aa1864e40e3d516b936c4a1a84e72aee"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "f972d13f7c391734944a1b915e9aaa4d36e30dc0", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/30b27f350ccca8f2b08b54b256f7e1fdb8c8ddb0/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b27f350ccca8f2b08b54b256f7e1fdb8c8ddb0/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=30b27f350ccca8f2b08b54b256f7e1fdb8c8ddb0", "patch": "@@ -5304,6 +5304,29 @@ impl<A, B> SlicePartialEq<B> for [A]\n     }\n }\n \n+// Use an equal-pointer optimization when types are `Eq`\n+impl<A> SlicePartialEq<A> for [A]\n+    where A: PartialEq<A> + Eq\n+{\n+    default fn equal(&self, other: &[A]) -> bool {\n+        if self.len() != other.len() {\n+            return false;\n+        }\n+\n+        if self.as_ptr() == other.as_ptr() {\n+            return true;\n+        }\n+\n+        for i in 0..self.len() {\n+            if !self[i].eq(&other[i]) {\n+                return false;\n+            }\n+        }\n+\n+        true\n+    }\n+}\n+\n // Use memcmp for bytewise equality when the types allow\n impl<A> SlicePartialEq<A> for [A]\n     where A: PartialEq<A> + BytewiseEquality\n@@ -5409,7 +5432,7 @@ impl SliceOrd<u8> for [u8] {\n #[doc(hidden)]\n /// Trait implemented for types that can be compared for equality using\n /// their bytewise representation\n-trait BytewiseEquality { }\n+trait BytewiseEquality: Eq + Copy { }\n \n macro_rules! impl_marker_for {\n     ($traitname:ident, $($ty:ty)*) => {"}]}