{"sha": "6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "node_id": "C_kwDOAAsO6NoAKDYyMTJlNmIzMzk2ZDhhZWI1YWIzNWYxMmNhYWY2ZWNlZWE5Yjg4MzY", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-29T12:16:43Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-29T12:16:43Z"}, "message": "avoid many `&str` to `String` conversions with `MultiSpan::push_span_label`", "tree": {"sha": "194ee3233a5c4f575cd8b8fd00ce4844c7df589b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/194ee3233a5c4f575cd8b8fd00ce4844c7df589b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "html_url": "https://github.com/rust-lang/rust/commit/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e1a6fb463e7075572cee841525bf44a864da807", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1a6fb463e7075572cee841525bf44a864da807", "html_url": "https://github.com/rust-lang/rust/commit/0e1a6fb463e7075572cee841525bf44a864da807"}], "stats": {"total": 104, "additions": 38, "deletions": 66}, "files": [{"sha": "e44f060819633dbfe1f27333f962fec276d6a8b8", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -136,7 +136,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n         let mut msp = MultiSpan::from_span(primary_span);\n         for span_label in span_labels {\n             let span = make_span(&file_text, &span_label.start, &span_label.end);\n-            msp.push_span_label(span, span_label.label.to_string());\n+            msp.push_span_label(span, span_label.label);\n             println!(\"span: {:?} label: {:?}\", span, span_label.label);\n             println!(\"text: {:?}\", source_map.span_to_snippet(span));\n         }"}, {"sha": "09430a135a3376016a24eb678989e0189ea61b9d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -194,24 +194,18 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         if !v.0.is_empty() {\n                             span = v.0.clone().into();\n                             for sp in v.0 {\n-                                span.push_span_label(\n-                                    sp,\n-                                    \"`'static` requirement introduced here\".to_string(),\n-                                );\n+                                span.push_span_label(sp, \"`'static` requirement introduced here\");\n                             }\n                             add_label = false;\n                         }\n                     }\n                     if add_label {\n                         span.push_span_label(\n                             fn_decl.output.span(),\n-                            \"requirement introduced by this return type\".to_string(),\n+                            \"requirement introduced by this return type\",\n                         );\n                     }\n-                    span.push_span_label(\n-                        cause.span,\n-                        \"because of this returned expression\".to_string(),\n-                    );\n+                    span.push_span_label(cause.span, \"because of this returned expression\");\n                     err.span_note(\n                         span,\n                         \"`'static` lifetime requirement introduced by the return type\",\n@@ -523,13 +517,11 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             hir_v.visit_ty(&self_ty);\n             for span in &traits {\n                 let mut multi_span: MultiSpan = vec![*span].into();\n-                multi_span.push_span_label(\n-                    *span,\n-                    \"this has an implicit `'static` lifetime requirement\".to_string(),\n-                );\n+                multi_span\n+                    .push_span_label(*span, \"this has an implicit `'static` lifetime requirement\");\n                 multi_span.push_span_label(\n                     ident.span,\n-                    \"calling this method introduces the `impl`'s 'static` requirement\".to_string(),\n+                    \"calling this method introduces the `impl`'s 'static` requirement\",\n                 );\n                 err.span_note(multi_span, \"the used `impl` has a `'static` requirement\");\n                 err.span_suggestion_verbose("}, {"sha": "f6b49e41d4c47048c0ceb4cffc980df14ca65101", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -128,10 +128,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n         let mut type_param_span: MultiSpan = visitor.types.to_vec().into();\n         for &span in &visitor.types {\n-            type_param_span.push_span_label(\n-                span,\n-                \"consider borrowing this type parameter in the trait\".to_string(),\n-            );\n+            type_param_span\n+                .push_span_label(span, \"consider borrowing this type parameter in the trait\");\n         }\n \n         err.note(&format!(\"expected `{}`\\n   found `{}`\", expected, found));"}, {"sha": "4eafa3329c36ad3d4aa440385e8e5e135d4c93ff", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -85,8 +85,7 @@ pub fn report_object_safety_error<'tcx>(\n     let has_multi_span = !multi_span.is_empty();\n     let mut note_span = MultiSpan::from_spans(multi_span.clone());\n     if let (Some(trait_span), true) = (trait_span, has_multi_span) {\n-        note_span\n-            .push_span_label(trait_span, \"this trait cannot be made into an object...\".to_string());\n+        note_span.push_span_label(trait_span, \"this trait cannot be made into an object...\");\n     }\n     for (span, msg) in iter::zip(multi_span, messages) {\n         note_span.push_span_label(span, msg);"}, {"sha": "61ac3d14e50e29baee0b81e621d71a3b1e12a107", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -947,7 +947,7 @@ fn adt_defined_here<'p, 'tcx>(\n \n         span.push_span_label(def_span, String::new());\n         for pat in spans {\n-            span.push_span_label(pat, \"not covered\".to_string());\n+            span.push_span_label(pat, \"not covered\");\n         }\n         err.span_note(span, &format!(\"`{}` defined here\", ty));\n     }"}, {"sha": "1bdc980bfaf2d17f3026bf3678dcef7cdb882b4b", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -887,22 +887,19 @@ impl<'a> Parser<'a> {\n         let mut first_note = MultiSpan::from(vec![initial_semicolon]);\n         first_note.push_span_label(\n             initial_semicolon,\n-            \"this `;` turns the preceding closure into a statement\".to_string(),\n+            \"this `;` turns the preceding closure into a statement\",\n         );\n         first_note.push_span_label(\n             closure_spans.body,\n-            \"this expression is a statement because of the trailing semicolon\".to_string(),\n+            \"this expression is a statement because of the trailing semicolon\",\n         );\n         expect_err.span_note(first_note, \"statement found outside of a block\");\n \n         let mut second_note = MultiSpan::from(vec![closure_spans.whole_closure]);\n-        second_note.push_span_label(\n-            closure_spans.whole_closure,\n-            \"this is the parsed closure...\".to_string(),\n-        );\n+        second_note.push_span_label(closure_spans.whole_closure, \"this is the parsed closure...\");\n         second_note.push_span_label(\n             following_token_span,\n-            \"...but likely you meant the closure to end here\".to_string(),\n+            \"...but likely you meant the closure to end here\",\n         );\n         expect_err.span_note(second_note, \"the closure body may be incorrectly delimited\");\n "}, {"sha": "40545b19b24dc1364f55ec0301ea9ffe0efc9a18", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -857,11 +857,8 @@ impl CheckAttrVisitor<'_> {\n             if let Some((prev_inline, prev_span)) = *specified_inline {\n                 if do_inline != prev_inline {\n                     let mut spans = MultiSpan::from_spans(vec![prev_span, meta.span()]);\n-                    spans.push_span_label(prev_span, String::from(\"this attribute...\"));\n-                    spans.push_span_label(\n-                        meta.span(),\n-                        String::from(\"...conflicts with this attribute\"),\n-                    );\n+                    spans.push_span_label(prev_span, \"this attribute...\");\n+                    spans.push_span_label(meta.span(), \"...conflicts with this attribute\");\n                     self.tcx\n                         .sess\n                         .struct_span_err(spans, \"conflicting doc inlining attributes\")"}, {"sha": "e8b7cee5734909d83acd130ece3e82531a6001cd", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -2561,7 +2561,7 @@ fn show_candidates(\n                 let span = source_span[local_def_id];\n                 let span = session.source_map().guess_head_span(span);\n                 let mut multi_span = MultiSpan::from_span(span);\n-                multi_span.push_span_label(span, \"not accessible\".to_string());\n+                multi_span.push_span_label(span, \"not accessible\");\n                 err.span_note(multi_span, &msg);\n             } else {\n                 err.note(&msg);"}, {"sha": "2b4e64bddc24bd3fb722fd5a6a5ed4124014c6aa", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -601,10 +601,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         };\n                         multi_span.push_span_label(sp, msg);\n                     }\n-                    multi_span.push_span_label(\n-                        base_error.span,\n-                        \"expected this type to be a trait...\".to_string(),\n-                    );\n+                    multi_span\n+                        .push_span_label(base_error.span, \"expected this type to be a trait...\");\n                     err.span_help(\n                         multi_span,\n                         \"`+` is used to constrain a \\\"trait object\\\" type with lifetimes or \\\n@@ -1227,17 +1225,14 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         let mut m: MultiSpan = non_visible_spans.clone().into();\n                         non_visible_spans\n                             .into_iter()\n-                            .for_each(|s| m.push_span_label(s, \"private field\".to_string()));\n+                            .for_each(|s| m.push_span_label(s, \"private field\"));\n                         err.span_note(m, \"constructor is not visible here due to private fields\");\n                     }\n \n                     return true;\n                 }\n \n-                err.span_label(\n-                    span,\n-                    \"constructor is not visible here due to private fields\".to_string(),\n-                );\n+                err.span_label(span, \"constructor is not visible here due to private fields\");\n             }\n             (\n                 Res::Def("}, {"sha": "dfbb47cf4c557d71527a10c3f0952dd66a9d2dde", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -2204,8 +2204,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             _ => true,\n                         };\n                     if !ident.span.overlaps(span) && !same_line {\n-                        multispan\n-                            .push_span_label(ident.span, \"required by a bound in this\".to_string());\n+                        multispan.push_span_label(ident.span, \"required by a bound in this\");\n                     }\n                 }\n                 let descr = format!(\"required by a bound in `{}`\", item_name);"}, {"sha": "612dc384521886407bbb682917bc37be02885c68", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -645,7 +645,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 err.emit();\n             } else {\n                 let mut multispan = MultiSpan::from_span(span);\n-                multispan.push_span_label(span_late, note.to_string());\n+                multispan.push_span_label(span_late, note);\n                 tcx.struct_span_lint_hir(\n                     LATE_BOUND_LIFETIME_ARGUMENTS,\n                     args.args[0].id(),"}, {"sha": "035571c881c5646f7c52e4ba0798262685e1bdc4", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -154,18 +154,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ret_span.push_span_label(\n                         expr.span,\n                         \"this could be implicitly returned but it is a statement, not a \\\n-                            tail expression\"\n-                            .to_owned(),\n-                    );\n-                    ret_span.push_span_label(\n-                        ret,\n-                        \"the `match` arms can conform to this return type\".to_owned(),\n+                            tail expression\",\n                     );\n+                    ret_span\n+                        .push_span_label(ret, \"the `match` arms can conform to this return type\");\n                     ret_span.push_span_label(\n                         semi_span,\n                         \"the `match` is a statement because of this semicolon, consider \\\n-                            removing it\"\n-                            .to_owned(),\n+                            removing it\",\n                     );\n                     err.span_note(\n                         ret_span,"}, {"sha": "2f5c81af18ba3ffbed22dbfbc8817a1c6b6b744e", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -1591,8 +1591,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> E\n             } else {\n                 let mut multispan: MultiSpan = spans.clone().into();\n                 for span in spans {\n-                    multispan\n-                        .push_span_label(span, \"this returned value is of `!` type\".to_string());\n+                    multispan.push_span_label(span, \"this returned value is of `!` type\");\n                 }\n                 err.span_note(multispan, \"these returned values have a concrete \\\"never\\\" type\");\n             }"}, {"sha": "d5075537ceddaa66706c5588a694dcb1cc6792e8", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -1034,7 +1034,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n             sp.push_span_label(\n                 rcvr.span,\n-                \"you probably want to use this value after calling the method...\".to_string(),\n+                \"you probably want to use this value after calling the method...\",\n             );\n             err.span_note(\n                 sp,"}, {"sha": "2c7ca2757604f5c70fbb48f8ddad4909f02ff9f3", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -1768,7 +1768,7 @@ fn label_fn_like<'tcx>(\n             .flat_map(|id| tcx.hir().body(id).params);\n \n         for param in params {\n-            spans.push_span_label(param.span, String::new());\n+            spans.push_span_label(param.span, \"\");\n         }\n \n         let def_kind = tcx.def_kind(def_id);"}, {"sha": "fa5f0eff22329f2275454b3adc435775b383398f", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -638,7 +638,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let parent_trait_ref = data.parent_trait_pred;\n                         let path = parent_trait_ref.print_modifiers_and_trait_path();\n                         let tr_self_ty = parent_trait_ref.skip_binder().self_ty();\n-                        let unsatisfied_msg = \"unsatisfied trait bound introduced here\".to_string();\n+                        let unsatisfied_msg = \"unsatisfied trait bound introduced here\";\n                         let derive_msg =\n                             \"unsatisfied trait bound introduced in this `derive` macro\";\n                         match self.tcx.hir().get_if_local(impl_def_id) {\n@@ -655,7 +655,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             {\n                                 let span = ident.span.ctxt().outer_expn_data().call_site;\n                                 let mut spans: MultiSpan = span.into();\n-                                spans.push_span_label(span, derive_msg.to_string());\n+                                spans.push_span_label(span, derive_msg);\n                                 let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n                             }\n@@ -678,7 +678,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             {\n                                 let span = self_ty.span.ctxt().outer_expn_data().call_site;\n                                 let mut spans: MultiSpan = span.into();\n-                                spans.push_span_label(span, derive_msg.to_string());\n+                                spans.push_span_label(span, derive_msg);\n                                 let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n                             }\n@@ -706,7 +706,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 } else {\n                                     ident.span.into()\n                                 };\n-                                spans.push_span_label(ident.span, \"in this trait\".to_string());\n+                                spans.push_span_label(ident.span, \"in this trait\");\n                                 let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n                             }\n@@ -747,9 +747,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     spans.into()\n                                 };\n                                 if let Some(trait_ref) = of_trait {\n-                                    spans.push_span_label(trait_ref.path.span, String::new());\n+                                    spans.push_span_label(trait_ref.path.span, \"\");\n                                 }\n-                                spans.push_span_label(self_ty.span, String::new());\n+                                spans.push_span_label(self_ty.span, \"\");\n \n                                 let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);"}, {"sha": "72a32dade4eeffe26438d2d93db1e73642a16066", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6212e6b3396d8aeb5ab35f12caaf6eceea9b8836/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=6212e6b3396d8aeb5ab35f12caaf6eceea9b8836", "patch": "@@ -836,7 +836,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                     .take(bound)\n                     .map(|param| {\n                         let span = self.tcx.def_span(param.def_id);\n-                        spans.push_span_label(span, String::new());\n+                        spans.push_span_label(span, \"\");\n                         param\n                     })\n                     .map(|param| format!(\"`{}`\", param.name))"}]}