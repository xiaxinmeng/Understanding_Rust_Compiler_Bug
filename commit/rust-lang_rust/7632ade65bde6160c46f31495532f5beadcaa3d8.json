{"sha": "7632ade65bde6160c46f31495532f5beadcaa3d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MzJhZGU2NWJkZTYxNjBjNDZmMzE0OTU1MzJmNWJlYWRjYWEzZDg=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-01-22T15:33:46Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-01-30T14:01:56Z"}, "message": "clarify \"incorrect issue\" error", "tree": {"sha": "63a8d391519257cfd3807a7c286264a0bcc3b942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a8d391519257cfd3807a7c286264a0bcc3b942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7632ade65bde6160c46f31495532f5beadcaa3d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl4y4dgWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdCUeCAC222qHZnrQzK8D6YlyaJzg3OiV\nhmam4H56oUw1WtK3MEFeSZ/MuXZUZw4TMi490TU8ATSZpOgV2FFm8ufDYjEBoNGC\nYxDwjUfOpfEevQ7wkFwHQuqtMLySomX/jaKOr+pSyGILELRofpNhm+nLLU2x3DYq\nXD0qTj5Wjwquu4npLinfeLo+Zg5dZbKaL2LFgtRI6U5lzICspIKQwZsjYnsIhcth\nOm0lDlewequs+ndcCIl+53J7NZy8sK/D34DSMqpQfs2HOfLuekARI7ACFgnOsG+/\nvGB6JmqtbqkzZLAFcOm7kSdnzGYv0jxV1OHC+KJT2F9gP/mCgmbYddAMDtn6\n=Ztq/\n-----END PGP SIGNATURE-----", "payload": "tree 63a8d391519257cfd3807a7c286264a0bcc3b942\nparent c4071d09197e22d2fab8334aa8d30659961bb977\nauthor Andy Russell <arussell123@gmail.com> 1579707226 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1580392916 -0500\n\nclarify \"incorrect issue\" error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7632ade65bde6160c46f31495532f5beadcaa3d8", "html_url": "https://github.com/rust-lang/rust/commit/7632ade65bde6160c46f31495532f5beadcaa3d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7632ade65bde6160c46f31495532f5beadcaa3d8/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4071d09197e22d2fab8334aa8d30659961bb977", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4071d09197e22d2fab8334aa8d30659961bb977", "html_url": "https://github.com/rust-lang/rust/commit/c4071d09197e22d2fab8334aa8d30659961bb977"}], "stats": {"total": 77, "additions": 47, "deletions": 30}, "files": [{"sha": "1da005d70d41b25725b511204b0cb7dc99c84e6c", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7632ade65bde6160c46f31495532f5beadcaa3d8/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7632ade65bde6160c46f31495532f5beadcaa3d8/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=7632ade65bde6160c46f31495532f5beadcaa3d8", "patch": "@@ -371,6 +371,7 @@ where\n                     let mut feature = None;\n                     let mut reason = None;\n                     let mut issue = None;\n+                    let mut issue_num = None;\n                     let mut is_soft = false;\n                     for meta in metas {\n                         if let Some(mi) = meta.meta_item() {\n@@ -389,6 +390,37 @@ where\n                                     if !get(mi, &mut issue) {\n                                         continue 'outer;\n                                     }\n+\n+                                    // These unwraps are safe because `get` ensures the meta item\n+                                    // is a name/value pair string literal.\n+                                    issue_num = match &*issue.unwrap().as_str() {\n+                                        \"none\" => None,\n+                                        issue => {\n+                                            match issue.parse() {\n+                                                Ok(num) => {\n+                                                    // FIXME(rossmacarthur): disallow 0\n+                                                    // Disallowing this requires updates to\n+                                                    // some submodules\n+                                                    NonZeroU32::new(num)\n+                                                }\n+                                                Err(err) => {\n+                                                    struct_span_err!(\n+                                                        diagnostic,\n+                                                        mi.span,\n+                                                        E0545,\n+                                                        \"`issue` must be a numeric string \\\n+                                                        or \\\"none\\\"\",\n+                                                    )\n+                                                    .span_label(\n+                                                        mi.name_value_literal().unwrap().span,\n+                                                        &err.to_string(),\n+                                                    )\n+                                                    .emit();\n+                                                    continue 'outer;\n+                                                }\n+                                            }\n+                                        }\n+                                    };\n                                 }\n                                 sym::soft => {\n                                     if !mi.is_word() {\n@@ -420,27 +452,8 @@ where\n                     }\n \n                     match (feature, reason, issue) {\n-                        (Some(feature), reason, Some(issue)) => {\n-                            let issue = match &*issue.as_str() {\n-                                \"none\" => None,\n-                                issue => {\n-                                    if let Ok(num) = issue.parse() {\n-                                        // FIXME(rossmacarthur): disallow 0\n-                                        // Disallowing this requires updates to some submodules\n-                                        NonZeroU32::new(num)\n-                                    } else {\n-                                        struct_span_err!(\n-                                            diagnostic,\n-                                            attr.span,\n-                                            E0545,\n-                                            \"incorrect 'issue'\"\n-                                        )\n-                                        .emit();\n-                                        continue;\n-                                    }\n-                                }\n-                            };\n-                            let level = Unstable { reason, issue, is_soft };\n+                        (Some(feature), reason, Some(_)) => {\n+                            let level = Unstable { reason, issue: issue_num, is_soft };\n                             if sym::unstable == meta_name {\n                                 stab = Some(Stability { level, feature, rustc_depr: None });\n                             } else {"}, {"sha": "7a2bf468f893a59917876a672843d702b063ce05", "filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7632ade65bde6160c46f31495532f5beadcaa3d8/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7632ade65bde6160c46f31495532f5beadcaa3d8/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.rs?ref=7632ade65bde6160c46f31495532f5beadcaa3d8", "patch": "@@ -9,5 +9,5 @@ fn unstable_issue_0() {}\n #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n fn unstable_issue_none() {}\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"something\")] //~ ERROR incorrect 'issue'\n-fn unstable_issue_not_allowed() {}\n+#[unstable(feature = \"unstable_test_feature\", issue = \"something\")]\n+fn unstable_issue_not_allowed() {} //~^ ERROR `issue` must be a numeric string or \"none\""}, {"sha": "21ff12185ec5f962b0c7729ec7791261e66640de", "filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-0.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7632ade65bde6160c46f31495532f5beadcaa3d8/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7632ade65bde6160c46f31495532f5beadcaa3d8/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.stderr?ref=7632ade65bde6160c46f31495532f5beadcaa3d8", "patch": "@@ -1,8 +1,10 @@\n-error[E0545]: incorrect 'issue'\n-  --> $DIR/unstable-attribute-allow-issue-0.rs:12:1\n+error[E0545]: `issue` must be a numeric string or \"none\"\n+  --> $DIR/unstable-attribute-allow-issue-0.rs:12:47\n    |\n LL | #[unstable(feature = \"unstable_test_feature\", issue = \"something\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^-----------\n+   |                                                       |\n+   |                                                       invalid digit found in string\n \n error: aborting due to previous error\n "}, {"sha": "e74147ce900e865c213c31c33e5fd32c420d33a4", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7632ade65bde6160c46f31495532f5beadcaa3d8/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7632ade65bde6160c46f31495532f5beadcaa3d8/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.rs?ref=7632ade65bde6160c46f31495532f5beadcaa3d8", "patch": "@@ -10,7 +10,7 @@ fn f1() { }\n #[stable(feature = \"a\", sinse = \"1.0.0\")] //~ ERROR unknown meta item 'sinse'\n fn f2() { }\n \n-#[unstable(feature = \"a\", issue = \"no\")] //~ ERROR incorrect 'issue'\n+#[unstable(feature = \"a\", issue = \"no\")] //~ ERROR `issue` must be a numeric string or \"none\"\n fn f3() { }\n \n fn main() { }"}, {"sha": "541b94afe0f67acfc716cbba03cefa61f17561df", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-2.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7632ade65bde6160c46f31495532f5beadcaa3d8/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7632ade65bde6160c46f31495532f5beadcaa3d8/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-2.stderr?ref=7632ade65bde6160c46f31495532f5beadcaa3d8", "patch": "@@ -10,11 +10,13 @@ error[E0541]: unknown meta item 'sinse'\n LL | #[stable(feature = \"a\", sinse = \"1.0.0\")]\n    |                         ^^^^^^^^^^^^^^^ expected one of `since`, `note`\n \n-error[E0545]: incorrect 'issue'\n-  --> $DIR/stability-attribute-sanity-2.rs:13:1\n+error[E0545]: `issue` must be a numeric string or \"none\"\n+  --> $DIR/stability-attribute-sanity-2.rs:13:27\n    |\n LL | #[unstable(feature = \"a\", issue = \"no\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ^^^^^^^^----\n+   |                                   |\n+   |                                   invalid digit found in string\n \n error: aborting due to 3 previous errors\n "}]}