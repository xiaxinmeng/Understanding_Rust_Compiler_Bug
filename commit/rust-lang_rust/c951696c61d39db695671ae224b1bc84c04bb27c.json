{"sha": "c951696c61d39db695671ae224b1bc84c04bb27c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NTE2OTZjNjFkMzlkYjY5NTY3MWFlMjI0YjFiYzg0YzA0YmIyN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-03T22:51:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-03T22:51:42Z"}, "message": "auto merge of #12673 : huonw/rust/extendable-vec, r=Aatch\n\nstd: add reserve_additional and an Extendable impl to Vec.", "tree": {"sha": "b1915bf8225758fb03f1a393228c0b12a2d4d292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1915bf8225758fb03f1a393228c0b12a2d4d292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c951696c61d39db695671ae224b1bc84c04bb27c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c951696c61d39db695671ae224b1bc84c04bb27c", "html_url": "https://github.com/rust-lang/rust/commit/c951696c61d39db695671ae224b1bc84c04bb27c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c951696c61d39db695671ae224b1bc84c04bb27c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e7f170fedd3c526a643c0b2d13863acd982be02", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e7f170fedd3c526a643c0b2d13863acd982be02", "html_url": "https://github.com/rust-lang/rust/commit/6e7f170fedd3c526a643c0b2d13863acd982be02"}, {"sha": "6cb34cf08f4d5d791801f032607a7752489bffbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb34cf08f4d5d791801f032607a7752489bffbe", "html_url": "https://github.com/rust-lang/rust/commit/6cb34cf08f4d5d791801f032607a7752489bffbe"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "225bfc25d8830fd3624ff636c4dc7ce6fcd90d3b", "filename": "src/libstd/vec_ng.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c951696c61d39db695671ae224b1bc84c04bb27c/src%2Flibstd%2Fvec_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c951696c61d39db695671ae224b1bc84c04bb27c/src%2Flibstd%2Fvec_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec_ng.rs?ref=c951696c61d39db695671ae224b1bc84c04bb27c", "patch": "@@ -17,11 +17,11 @@ use cmp::{Eq, Ordering, TotalEq, TotalOrd};\n use container::Container;\n use default::Default;\n use fmt;\n-use iter::{DoubleEndedIterator, FromIterator, Iterator};\n+use iter::{DoubleEndedIterator, FromIterator, Extendable, Iterator};\n use libc::{free, c_void};\n use mem::{size_of, move_val_init};\n use num;\n-use num::CheckedMul;\n+use num::{CheckedMul, CheckedAdd};\n use ops::Drop;\n use option::{None, Option, Some};\n use ptr::RawPtr;\n@@ -126,6 +126,16 @@ impl<T> FromIterator<T> for Vec<T> {\n     }\n }\n \n+impl<T> Extendable<T> for Vec<T> {\n+    fn extend<I: Iterator<T>>(&mut self, iterator: &mut I) {\n+        let (lower, _) = iterator.size_hint();\n+        self.reserve_additional(lower);\n+        for element in *iterator {\n+            self.push(element)\n+        }\n+    }\n+}\n+\n impl<T:Eq> Eq for Vec<T> {\n     #[inline]\n     fn eq(&self, other: &Vec<T>) -> bool {\n@@ -160,6 +170,15 @@ impl<T> Vec<T> {\n         self.cap\n     }\n \n+    pub fn reserve_additional(&mut self, extra: uint) {\n+        if self.cap - self.len < extra {\n+            match self.len.checked_add(&extra) {\n+                None => fail!(\"Vec::reserve_additional: `uint` overflow\"),\n+                Some(new_cap) => self.reserve(new_cap)\n+            }\n+        }\n+    }\n+\n     pub fn reserve(&mut self, capacity: uint) {\n         if capacity >= self.len {\n             self.reserve_exact(num::next_power_of_two(capacity))\n@@ -453,3 +472,48 @@ impl<T> Drop for MoveItems<T> {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::Vec;\n+    use iter::{Iterator, range, Extendable};\n+    use option::{Some, None};\n+\n+    #[test]\n+    fn test_reserve_additional() {\n+        let mut v = Vec::new();\n+        assert_eq!(v.capacity(), 0);\n+\n+        v.reserve_additional(2);\n+        assert!(v.capacity() >= 2);\n+\n+        for i in range(0, 16) {\n+            v.push(i);\n+        }\n+\n+        assert!(v.capacity() >= 16);\n+        v.reserve_additional(16);\n+        assert!(v.capacity() >= 32);\n+\n+        v.push(16);\n+\n+        v.reserve_additional(16);\n+        assert!(v.capacity() >= 33)\n+    }\n+\n+    #[test]\n+    fn test_extend() {\n+        let mut v = Vec::new();\n+        let mut w = Vec::new();\n+\n+        v.extend(&mut range(0, 3));\n+        for i in range(0, 3) { w.push(i) }\n+\n+        assert_eq!(v, w);\n+\n+        v.extend(&mut range(3, 10));\n+        for i in range(3, 10) { w.push(i) }\n+\n+        assert_eq!(v, w);\n+    }\n+}"}]}