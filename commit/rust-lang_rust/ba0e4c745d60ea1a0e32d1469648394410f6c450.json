{"sha": "ba0e4c745d60ea1a0e32d1469648394410f6c450", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMGU0Yzc0NWQ2MGVhMWEwZTMyZDE0Njk2NDgzOTQ0MTBmNmM0NTA=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-17T17:28:00Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-17T17:28:27Z"}, "message": "Apply `#[cfg]`s when computing function signatures", "tree": {"sha": "1ab75b7b8486b1cb1dd55ca819850e41c27cae83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ab75b7b8486b1cb1dd55ca819850e41c27cae83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba0e4c745d60ea1a0e32d1469648394410f6c450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0e4c745d60ea1a0e32d1469648394410f6c450", "html_url": "https://github.com/rust-lang/rust/commit/ba0e4c745d60ea1a0e32d1469648394410f6c450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba0e4c745d60ea1a0e32d1469648394410f6c450/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6356ea24dd026cc386dace23087cdbce7570f369", "url": "https://api.github.com/repos/rust-lang/rust/commits/6356ea24dd026cc386dace23087cdbce7570f369", "html_url": "https://github.com/rust-lang/rust/commit/6356ea24dd026cc386dace23087cdbce7570f369"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "e976e419ebc7c42af1cafa82ce5867b3621eb3b6", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e4c745d60ea1a0e32d1469648394410f6c450/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e4c745d60ea1a0e32d1469648394410f6c450/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=ba0e4c745d60ea1a0e32d1469648394410f6c450", "patch": "@@ -36,18 +36,25 @@ impl FunctionData {\n     pub(crate) fn fn_data_query(db: &dyn DefDatabase, func: FunctionId) -> Arc<FunctionData> {\n         let loc = func.lookup(db);\n         let krate = loc.container.module(db).krate;\n+        let crate_graph = db.crate_graph();\n+        let cfg_options = &crate_graph[krate].cfg_options;\n         let item_tree = db.item_tree(loc.id.file_id);\n         let func = &item_tree[loc.id.value];\n-        let is_varargs = func\n+\n+        let enabled_params = func\n             .params\n             .clone()\n-            .last()\n+            .filter(|&param| item_tree.attrs(db, krate, param.into()).is_cfg_enabled(cfg_options));\n+\n+        // If last cfg-enabled param is a `...` param, it's a varargs function.\n+        let is_varargs = enabled_params\n+            .clone()\n+            .next_back()\n             .map_or(false, |param| matches!(item_tree[param], Param::Varargs));\n \n         Arc::new(FunctionData {\n             name: func.name.clone(),\n-            params: func\n-                .params\n+            params: enabled_params\n                 .clone()\n                 .filter_map(|id| match &item_tree[id] {\n                     Param::Normal(ty) => Some(item_tree[*ty].clone()),"}, {"sha": "90df3d9291d90fbb3001cdbd5796b7af9da94d5a", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba0e4c745d60ea1a0e32d1469648394410f6c450/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0e4c745d60ea1a0e32d1469648394410f6c450/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=ba0e4c745d60ea1a0e32d1469648394410f6c450", "patch": "@@ -824,6 +824,12 @@ impl<T> Iterator for IdRange<T> {\n     }\n }\n \n+impl<T> DoubleEndedIterator for IdRange<T> {\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        self.range.next_back().map(|raw| Idx::from_raw(raw.into()))\n+    }\n+}\n+\n impl<T> fmt::Debug for IdRange<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(&format!(\"IdRange::<{}>\", type_name::<T>())).field(&self.range).finish()"}]}