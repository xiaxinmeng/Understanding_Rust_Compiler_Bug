{"sha": "5b8f284536d00ba649ca968584bedab4820d8527", "node_id": "C_kwDOAAsO6NoAKDViOGYyODQ1MzZkMDBiYTY0OWNhOTY4NTg0YmVkYWI0ODIwZDg1Mjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-12T17:20:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-12T17:20:33Z"}, "message": "Auto merge of #107643 - Zoxc:single-cache, r=cjgillot\n\nCreate a single value cache for the () query key\n\nSince queries using `()` as the key can only store a single value, specialize for that case.\n\nThis looks like a minor performance improvement:\n<table><tr><td rowspan=\"2\">Benchmark</td><td colspan=\"1\"><b>Before</b></th><td colspan=\"2\"><b>After</b></th></tr><tr><td align=\"right\">Time</td><td align=\"right\">Time</td><td align=\"right\">%</th></tr><tr><td>\ud83d\udfe3 <b>clap</b>:check</td><td align=\"right\">1.8477s</td><td align=\"right\">1.8415s</td><td align=\"right\"> -0.33%</td></tr><tr><td>\ud83d\udfe3 <b>hyper</b>:check</td><td align=\"right\">0.2666s</td><td align=\"right\">0.2655s</td><td align=\"right\"> -0.40%</td></tr><tr><td>\ud83d\udfe3 <b>syntex_syntax</b>:check</td><td align=\"right\">6.3943s</td><td align=\"right\">6.3686s</td><td align=\"right\"> -0.40%</td></tr><tr><td>\ud83d\udfe3 <b>syn</b>:check</td><td align=\"right\">1.6413s</td><td align=\"right\">1.6345s</td><td align=\"right\"> -0.42%</td></tr><tr><td>\ud83d\udfe3 <b>regex</b>:check</td><td align=\"right\">1.0337s</td><td align=\"right\">1.0313s</td><td align=\"right\"> -0.24%</td></tr><tr><td>Total</td><td align=\"right\">11.1836s</td><td align=\"right\">11.1414s</td><td align=\"right\"> -0.38%</td></tr><tr><td>Summary</td><td align=\"right\">1.0000s</td><td align=\"right\">0.9964s</td><td align=\"right\"> -0.36%</td></tr></table>", "tree": {"sha": "90a2990e7f59355309098ced463046459f7bb8e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90a2990e7f59355309098ced463046459f7bb8e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b8f284536d00ba649ca968584bedab4820d8527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8f284536d00ba649ca968584bedab4820d8527", "html_url": "https://github.com/rust-lang/rust/commit/5b8f284536d00ba649ca968584bedab4820d8527", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b8f284536d00ba649ca968584bedab4820d8527/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cf19a75a7055171a4ffc8cc557ff63953c9754", "url": "https://api.github.com/repos/rust-lang/rust/commits/00cf19a75a7055171a4ffc8cc557ff63953c9754", "html_url": "https://github.com/rust-lang/rust/commit/00cf19a75a7055171a4ffc8cc557ff63953c9754"}, {"sha": "80d265240bf1b884753bafc8f07e43fc8236679f", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d265240bf1b884753bafc8f07e43fc8236679f", "html_url": "https://github.com/rust-lang/rust/commit/80d265240bf1b884753bafc8f07e43fc8236679f"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "dc02fd53ed02cd26d2d2832c4d02c374fcea6ca3", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8f284536d00ba649ca968584bedab4820d8527/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8f284536d00ba649ca968584bedab4820d8527/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=5b8f284536d00ba649ca968584bedab4820d8527", "patch": "@@ -8,7 +8,7 @@ use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, layout::TyAndLayout, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::hir_id::{HirId, OwnerId};\n-use rustc_query_system::query::{DefaultCacheSelector, VecCacheSelector};\n+use rustc_query_system::query::{DefaultCacheSelector, SingleCacheSelector, VecCacheSelector};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -45,7 +45,7 @@ pub trait Key: Sized {\n }\n \n impl Key for () {\n-    type CacheSelector = DefaultCacheSelector<Self>;\n+    type CacheSelector = SingleCacheSelector;\n \n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {"}, {"sha": "c9dd75e4d554b3ebb492161897d2df175b7e081c", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5b8f284536d00ba649ca968584bedab4820d8527/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8f284536d00ba649ca968584bedab4820d8527/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=5b8f284536d00ba649ca968584bedab4820d8527", "patch": "@@ -5,7 +5,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sharded;\n #[cfg(parallel_compiler)]\n use rustc_data_structures::sharded::Sharded;\n-#[cfg(not(parallel_compiler))]\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::sync::WorkerLocal;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -117,6 +116,52 @@ where\n     }\n }\n \n+pub struct SingleCacheSelector;\n+\n+impl<'tcx, V: 'tcx> CacheSelector<'tcx, V> for SingleCacheSelector {\n+    type Cache = SingleCache<V>\n+    where\n+        V: Copy;\n+    type ArenaCache = ArenaCache<'tcx, (), V>;\n+}\n+\n+pub struct SingleCache<V> {\n+    cache: Lock<Option<(V, DepNodeIndex)>>,\n+}\n+\n+impl<V> Default for SingleCache<V> {\n+    fn default() -> Self {\n+        SingleCache { cache: Lock::new(None) }\n+    }\n+}\n+\n+impl<V: Copy + Debug> QueryStorage for SingleCache<V> {\n+    type Value = V;\n+    type Stored = V;\n+}\n+\n+impl<V> QueryCache for SingleCache<V>\n+where\n+    V: Copy + Debug,\n+{\n+    type Key = ();\n+\n+    #[inline(always)]\n+    fn lookup(&self, _key: &()) -> Option<(V, DepNodeIndex)> {\n+        *self.cache.lock()\n+    }\n+\n+    #[inline]\n+    fn complete(&self, _key: (), value: V, index: DepNodeIndex) -> Self::Stored {\n+        *self.cache.lock() = Some((value.clone(), index));\n+        value\n+    }\n+\n+    fn iter(&self, f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex)) {\n+        self.cache.lock().as_ref().map(|value| f(&(), &value.0, value.1));\n+    }\n+}\n+\n pub struct ArenaCache<'tcx, K, V> {\n     arena: WorkerLocal<TypedArena<(V, DepNodeIndex)>>,\n     #[cfg(parallel_compiler)]"}, {"sha": "6c0ee2bc2f6f06e241976bfea59d647c0443dcbd", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b8f284536d00ba649ca968584bedab4820d8527/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8f284536d00ba649ca968584bedab4820d8527/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=5b8f284536d00ba649ca968584bedab4820d8527", "patch": "@@ -8,7 +8,8 @@ pub use self::job::{print_query_stack, QueryInfo, QueryJob, QueryJobId, QueryJob\n \n mod caches;\n pub use self::caches::{\n-    CacheSelector, DefaultCacheSelector, QueryCache, QueryStorage, VecCacheSelector,\n+    CacheSelector, DefaultCacheSelector, QueryCache, QueryStorage, SingleCacheSelector,\n+    VecCacheSelector,\n };\n \n mod config;"}]}