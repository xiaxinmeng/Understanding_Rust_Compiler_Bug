{"sha": "6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMTczMzBlZjRmOWE5N2JkNTM5YjU1ZWRiNGU3Y2NkYjZjMDAxMzM=", "commit": {"author": {"name": "Sebastian Imlay", "email": "sebastian@easypost.com", "date": "2020-02-15T00:05:45Z"}, "committer": {"name": "Sebastian Imlay", "email": "sebastian@easypost.com", "date": "2020-02-15T00:05:45Z"}, "message": "Merged apple_tvos_base and apple_ios_base into apple_sdk_base.", "tree": {"sha": "233c3fb9c40caeaba9e412f33f611a39de2ab2ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/233c3fb9c40caeaba9e412f33f611a39de2ab2ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "html_url": "https://github.com/rust-lang/rust/commit/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/comments", "author": null, "committer": null, "parents": [{"sha": "a2661695e8953199a746895e2e65225a9922753b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2661695e8953199a746895e2e65225a9922753b", "html_url": "https://github.com/rust-lang/rust/commit/a2661695e8953199a746895e2e65225a9922753b"}], "stats": {"total": 201, "additions": 51, "deletions": 150}, "files": [{"sha": "2216af428fa133d2fa2a821167644613fff733f1", "filename": "src/librustc_target/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs?ref=6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, Arch, AppleOS};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Arm64)?;\n+    let base = opts(Arch::Arm64, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"arm64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "a87d5965c3daeba5a99db85991c69c636035bd80", "filename": "src/librustc_target/spec/aarch64_apple_tvos.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs?ref=6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_tvos_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, Arch, AppleOS};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Arm64)?;\n+    let base = opts(Arch::Arm64, AppleOS::tvOS)?;\n     Ok(Target {\n         llvm_target: \"arm64-apple-tvos\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "2c93cbc4d8595d7406b47dfb8e6a617ee7aefed2", "filename": "src/librustc_target/spec/apple_sdk_base.rs", "status": "renamed", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_sdk_base.rs?ref=6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "patch": "@@ -1,11 +1,11 @@\n+\n use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n use std::env;\n use std::io;\n use std::path::Path;\n use std::process::Command;\n \n use Arch::*;\n-\n #[allow(non_camel_case_types)]\n #[derive(Copy, Clone)]\n pub enum Arch {\n@@ -17,6 +17,13 @@ pub enum Arch {\n     X86_64_macabi,\n }\n \n+#[allow(non_camel_case_types)]\n+#[derive(Copy, Clone)]\n+pub enum AppleOS {\n+    tvOS,\n+    iOS,\n+}\n+\n impl Arch {\n     pub fn to_string(self) -> &'static str {\n         match self {\n@@ -41,6 +48,17 @@ pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n         let p = Path::new(&sdkroot);\n         match sdk_name {\n             // Ignore `SDKROOT` if it's clearly set for the wrong platform.\n+            \"appletvos\"\n+                if sdkroot.contains(\"TVSimulator.platform\")\n+                    || sdkroot.contains(\"MacOSX.platform\") =>\n+            {\n+                ()\n+            }\n+            \"appletvsimulator\"\n+                if sdkroot.contains(\"TVOS.platform\") || sdkroot.contains(\"MacOSX.platform\") =>\n+            {\n+                ()\n+            }\n             \"iphoneos\"\n                 if sdkroot.contains(\"iPhoneSimulator.platform\")\n                     || sdkroot.contains(\"MacOSX.platform\") =>\n@@ -82,11 +100,17 @@ pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n     }\n }\n \n-fn build_pre_link_args(arch: Arch) -> Result<LinkArgs, String> {\n-    let sdk_name = match arch {\n-        Armv7 | Armv7s | Arm64 => \"iphoneos\",\n-        I386 | X86_64 => \"iphonesimulator\",\n-        X86_64_macabi => \"macosx10.15\",\n+fn build_pre_link_args(arch: Arch, os: AppleOS) -> Result<LinkArgs, String> {\n+    let sdk_name = match (arch, os) {\n+        (Arm64,                 AppleOS::tvOS) => \"appletvos\",\n+        (X86_64,                AppleOS::tvOS) => \"appletvsimulator\",\n+        (Armv7,                  AppleOS::iOS) => \"iphoneos\",\n+        (Armv7s,                 AppleOS::iOS) => \"iphoneos\",\n+        (Arm64,                  AppleOS::iOS) => \"iphoneos\",\n+        (I386,                   AppleOS::iOS) => \"iphonesimulator\",\n+        (X86_64,                 AppleOS::iOS) => \"iphonesimulator\",\n+        (X86_64_macabi,          AppleOS::iOS) => \"macosx10.15\",\n+        _ => unreachable!(),\n     };\n \n     let arch_name = arch.to_string();\n@@ -121,15 +145,16 @@ fn target_cpu(arch: Arch) -> String {\n     .to_string()\n }\n \n+\n fn link_env_remove(arch: Arch) -> Vec<String> {\n     match arch {\n         Armv7 | Armv7s | Arm64 | I386 | X86_64 => vec![\"MACOSX_DEPLOYMENT_TARGET\".to_string()],\n-        X86_64_macabi => vec![\"IPHONEOS_DEPLOYMENT_TARGET\".to_string()],\n+        X86_64_macabi => vec![ \"IPHONEOS_DEPLOYMENT_TARGET\".to_string() ,],\n     }\n }\n \n-pub fn opts(arch: Arch) -> Result<TargetOptions, String> {\n-    let pre_link_args = build_pre_link_args(arch)?;\n+pub fn opts(arch: Arch, os: AppleOS) -> Result<TargetOptions, String> {\n+    let pre_link_args = build_pre_link_args(arch, os)?;\n     Ok(TargetOptions {\n         cpu: target_cpu(arch),\n         dynamic_linking: false,", "previous_filename": "src/librustc_target/spec/apple_ios_base.rs"}, {"sha": "70dc8093f88c14938647f93a33eb79650950a9bc", "filename": "src/librustc_target/spec/apple_tvos_base.rs", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/a2661695e8953199a746895e2e65225a9922753b/src%2Flibrustc_target%2Fspec%2Fapple_tvos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2661695e8953199a746895e2e65225a9922753b/src%2Flibrustc_target%2Fspec%2Fapple_tvos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_tvos_base.rs?ref=a2661695e8953199a746895e2e65225a9922753b", "patch": "@@ -1,123 +0,0 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::env;\n-use std::io;\n-use std::path::Path;\n-use std::process::Command;\n-\n-use Arch::*;\n-\n-#[allow(non_camel_case_types)]\n-#[derive(Copy, Clone)]\n-pub enum Arch {\n-    Arm64,\n-    X86_64,\n-}\n-\n-impl Arch {\n-    pub fn to_string(self) -> &'static str {\n-        match self {\n-            Arm64 => \"arm64\",\n-            X86_64 => \"x86_64\",\n-        }\n-    }\n-}\n-\n-pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n-    // Following what clang does\n-    // (https://github.com/llvm/llvm-project/blob/\n-    // 296a80102a9b72c3eda80558fb78a3ed8849b341/clang/lib/Driver/ToolChains/Darwin.cpp#L1661-L1678)\n-    // to allow the SDK path to be set. (For clang, xcrun sets\n-    // SDKROOT; for rustc, the user or build system can set it, or we\n-    // can fall back to checking for xcrun on PATH.)\n-    if let Some(sdkroot) = env::var(\"SDKROOT\").ok() {\n-        let p = Path::new(&sdkroot);\n-        match sdk_name {\n-            // Ignore `SDKROOT` if it's clearly set for the wrong platform.\n-            \"appletvos\"\n-                if sdkroot.contains(\"TVSimulator.platform\")\n-                    || sdkroot.contains(\"MacOSX.platform\") =>\n-            {\n-                ()\n-            }\n-            \"appletvsimulator\"\n-                if sdkroot.contains(\"TVOS.platform\") || sdkroot.contains(\"MacOSX.platform\") =>\n-            {\n-                ()\n-            }\n-            // Ignore `SDKROOT` if it's not a valid path.\n-            _ if !p.is_absolute() || p == Path::new(\"/\") || !p.exists() => (),\n-            _ => return Ok(sdkroot),\n-        }\n-    }\n-    let res =\n-        Command::new(\"xcrun\").arg(\"--show-sdk-path\").arg(\"-sdk\").arg(sdk_name).output().and_then(\n-            |output| {\n-                if output.status.success() {\n-                    Ok(String::from_utf8(output.stdout).unwrap())\n-                } else {\n-                    let error = String::from_utf8(output.stderr);\n-                    let error = format!(\"process exit with error: {}\", error.unwrap());\n-                    Err(io::Error::new(io::ErrorKind::Other, &error[..]))\n-                }\n-            },\n-        );\n-\n-    match res {\n-        Ok(output) => Ok(output.trim().to_string()),\n-        Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e)),\n-    }\n-}\n-\n-fn build_pre_link_args(arch: Arch) -> Result<LinkArgs, String> {\n-    let sdk_name = match arch {\n-        Arm64 => \"appletvos\",\n-        X86_64 => \"appletvsimulator\",\n-    };\n-\n-    let arch_name = arch.to_string();\n-\n-    let sdk_root = get_sdk_root(sdk_name)?;\n-\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            \"-arch\".to_string(),\n-            arch_name.to_string(),\n-            \"-isysroot\".to_string(),\n-            sdk_root.clone(),\n-            \"-Wl,-syslibroot\".to_string(),\n-            sdk_root,\n-        ],\n-    );\n-\n-    Ok(args)\n-}\n-\n-fn target_cpu(arch: Arch) -> String {\n-    match arch {\n-        Arm64 => \"cyclone\",\n-        X86_64 => \"core2\",\n-    }\n-    .to_string()\n-}\n-\n-fn link_env_remove(arch: Arch) -> Vec<String> {\n-    match arch {\n-        Arm64 | X86_64 => vec![\"MACOSX_DEPLOYMENT_TARGET\".to_string()],\n-    }\n-}\n-\n-pub fn opts(arch: Arch) -> Result<TargetOptions, String> {\n-    let pre_link_args = build_pre_link_args(arch)?;\n-    Ok(TargetOptions {\n-        cpu: target_cpu(arch),\n-        dynamic_linking: false,\n-        executables: true,\n-        pre_link_args,\n-        link_env_remove: link_env_remove(arch),\n-        has_elf_tls: false,\n-        eliminate_frame_pointer: false,\n-        ..super::apple_base::opts()\n-    })\n-}"}, {"sha": "19d189e2543fc54147fba262bab27615a874450d", "filename": "src/librustc_target/spec/armv7_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs?ref=6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, Arch, AppleOS};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Armv7)?;\n+    let base = opts(Arch::Armv7, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"armv7-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "53fb8a9ff9fdccd305013d8c0cce55101c44a601", "filename": "src/librustc_target/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs?ref=6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, Arch, AppleOS};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::Armv7s)?;\n+    let base = opts(Arch::Armv7s, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"armv7s-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "eb0c68bc7b83e0ed036bc559fba29b27eab6d357", "filename": "src/librustc_target/spec/i386_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi386_apple_ios.rs?ref=6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, Arch, AppleOS};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::I386)?;\n+    let base = opts(Arch::I386, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"i386-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "37eabb4f26d4b0af159f5cd3fee564a07261d8d4", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "patch": "@@ -47,8 +47,7 @@ use rustc_macros::HashStable_Generic;\n pub mod abi;\n mod android_base;\n mod apple_base;\n-mod apple_ios_base;\n-mod apple_tvos_base;\n+mod apple_sdk_base;\n mod arm_base;\n mod cloudabi_base;\n mod dragonfly_base;"}, {"sha": "db5361f1d813d91195b5be5569930df51fdc0a5c", "filename": "src/librustc_target/spec/x86_64_apple_ios.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios.rs?ref=6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, Arch, AppleOS};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::X86_64)?;\n+    let base = opts(Arch::X86_64, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"x86_64-apple-ios\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "cce6221134df37efb84df8f5d34b546e92eb14a7", "filename": "src/librustc_target/spec/x86_64_apple_ios_macabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_ios_macabi.rs?ref=6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_ios_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, Arch, AppleOS};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::X86_64_macabi)?;\n+    let base = opts(Arch::X86_64_macabi, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"x86_64-apple-ios13.0-macabi\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "794df42f43e32754fb3482647505418f88191568", "filename": "src/librustc_target/spec/x86_64_apple_tvos.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b17330ef4f9a97bd539b55edb4e7ccdb6c00133/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_tvos.rs?ref=6b17330ef4f9a97bd539b55edb4e7ccdb6c00133", "patch": "@@ -1,8 +1,8 @@\n-use super::apple_tvos_base::{opts, Arch};\n+use super::apple_sdk_base::{opts, Arch, AppleOS};\n use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let base = opts(Arch::X86_64)?;\n+    let base = opts(Arch::X86_64, AppleOS::iOS)?;\n     Ok(Target {\n         llvm_target: \"x86_64-apple-tvos\".to_string(),\n         target_endian: \"little\".to_string(),"}]}