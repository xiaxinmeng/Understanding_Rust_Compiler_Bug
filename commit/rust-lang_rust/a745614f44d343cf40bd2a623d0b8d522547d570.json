{"sha": "a745614f44d343cf40bd2a623d0b8d522547d570", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NDU2MTRmNDRkMzQzY2Y0MGJkMmE2MjNkMGI4ZDUyMjU0N2Q1NzA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-26T17:56:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-18T01:14:46Z"}, "message": "Use lint instead of warning", "tree": {"sha": "2a73d5f992d4d24a52baa5f4cc8633d258f36c18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a73d5f992d4d24a52baa5f4cc8633d258f36c18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a745614f44d343cf40bd2a623d0b8d522547d570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a745614f44d343cf40bd2a623d0b8d522547d570", "html_url": "https://github.com/rust-lang/rust/commit/a745614f44d343cf40bd2a623d0b8d522547d570", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a745614f44d343cf40bd2a623d0b8d522547d570/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a9239c964f4589c7f1646a1faf8412eb0c37a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9239c964f4589c7f1646a1faf8412eb0c37a0e", "html_url": "https://github.com/rust-lang/rust/commit/1a9239c964f4589c7f1646a1faf8412eb0c37a0e"}], "stats": {"total": 159, "additions": 128, "deletions": 31}, "files": [{"sha": "2c5c664566a38e8fcb34ec23ccf5dccc18984fc5", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=a745614f44d343cf40bd2a623d0b8d522547d570", "patch": "@@ -117,6 +117,13 @@ declare_lint! {\n     Allow,\n     \"detects trivial casts of numeric types which could be removed\"\n }\n+\n+declare_lint! {\n+    pub PRIVATE_IN_PUBLIC,\n+    Warn,\n+    \"detect private items in public interfaces not caught by the old implementation\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -141,6 +148,7 @@ impl LintPass for HardwiredLints {\n             FAT_PTR_TRANSMUTES,\n             TRIVIAL_CASTS,\n             TRIVIAL_NUMERIC_CASTS,\n+            PRIVATE_IN_PUBLIC,\n             CONST_ERR\n         )\n     }"}, {"sha": "1d0c616c3b71b631424b6a389c82988e48c1b812", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=a745614f44d343cf40bd2a623d0b8d522547d570", "patch": "@@ -146,6 +146,9 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_MUT, UNREACHABLE_CODE, UNUSED_MUST_USE,\n                     UNUSED_UNSAFE, PATH_STATEMENTS, UNUSED_ATTRIBUTES);\n \n+    add_lint_group!(sess, \"future_incompatible\",\n+                    PRIVATE_IN_PUBLIC);\n+\n     // We have one lint pass defined specially\n     store.register_late_pass(sess, false, box lint::GatherNodeLevels);\n "}, {"sha": "275f328bfe013d07df91c51b997ebeee19e118e9", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a745614f44d343cf40bd2a623d0b8d522547d570", "patch": "@@ -38,6 +38,7 @@ use std::mem::replace;\n use rustc_front::hir;\n use rustc_front::intravisit::{self, Visitor};\n \n+use rustc::lint;\n use rustc::middle::def;\n use rustc::middle::def_id::DefId;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n@@ -1488,9 +1489,17 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n                             }\n                             if item.vis != hir::Public {\n                                 if !self.is_quiet {\n-                                    let is_warning = !self.old_error_set.contains(&ty.id);\n-                                    span_err_or_warn!(is_warning, self.tcx.sess, ty.span, E0446,\n-                                                      \"private type in public interface\");\n+                                    if self.old_error_set.contains(&ty.id) {\n+                                        span_err!(self.tcx.sess, ty.span, E0446,\n+                                                  \"private type in public interface\");\n+                                    } else {\n+                                        self.tcx.sess.add_lint (\n+                                            lint::builtin::PRIVATE_IN_PUBLIC,\n+                                            node_id,\n+                                            ty.span,\n+                                            \"private type in public interface\".to_string()\n+                                        );\n+                                    }\n                                 }\n                                 self.is_public = false;\n                             }\n@@ -1515,9 +1524,15 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n             if let Some(ast_map::NodeItem(ref item)) = self.tcx.map.find(node_id) {\n                 if item.vis != hir::Public {\n                     if !self.is_quiet {\n-                        let is_warning = !self.old_error_set.contains(&trait_ref.ref_id);\n-                        span_err_or_warn!(is_warning, self.tcx.sess, trait_ref.path.span, E0445,\n-                                          \"private trait in public interface\");\n+                        if self.old_error_set.contains(&trait_ref.ref_id) {\n+                            span_err!(self.tcx.sess, trait_ref.path.span, E0445,\n+                                      \"private trait in public interface\");\n+                        } else {\n+                            self.tcx.sess.add_lint(lint::builtin::PRIVATE_IN_PUBLIC,\n+                                                   node_id,\n+                                                   trait_ref.path.span,\n+                                                   \"private trait in public interface\".to_string());\n+                        }\n                     }\n                     self.is_public = false;\n                 }"}, {"sha": "7239e6ddc3794c93681e7b1db5aab4ee6eaf3ac5", "filename": "src/test/compile-fail/issue-28450-1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Fissue-28450-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Fissue-28450-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28450-1.rs?ref=a745614f44d343cf40bd2a623d0b8d522547d570", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks for private types in public interfaces\n+\n+type Foo = u8;\n+pub fn foo(f: Foo) {} //~ ERROR private type in public interface\n+\n+fn main() {}"}, {"sha": "65c5978103ae8f9c37e2f38f0da87fcd535d4374", "filename": "src/test/compile-fail/issue-28450.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Fissue-28450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Fissue-28450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28450.rs?ref=a745614f44d343cf40bd2a623d0b8d522547d570", "patch": "@@ -10,6 +10,8 @@\n \n // Checks for private types in public interfaces\n \n+#![feature(rustc_attrs)]\n+\n struct Priv;\n \n pub use self::private::public;\n@@ -28,9 +30,6 @@ impl<T> Pointer for *const T { type Pointee = T; }\n pub type __CFArrayRevealed = <CFArrayRef as Pointer>::Pointee;\n //~^ WARN private type in public interface\n \n-type Foo = u8;\n-pub fn foo(f: Foo) {} //~ ERROR private type in public interface\n-\n pub trait Exporter {\n     type Output;\n }\n@@ -49,6 +48,7 @@ pub fn block() -> <Helper as Exporter>::Output {\n     Inner\n }\n \n-fn main() {\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n     block().poke();\n }"}, {"sha": "f9b049c5d3360e584af7a77e377f00e88d14dabe", "filename": "src/test/compile-fail/lint-private-in-public.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Flint-private-in-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Flint-private-in-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-private-in-public.rs?ref=a745614f44d343cf40bd2a623d0b8d522547d570", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod m1 {\n+    #![deny(private_in_public)]\n+\n+    pub struct Pub;\n+    struct Priv;\n+\n+    impl Pub {\n+        pub fn f() -> Priv {} //~ ERROR private type in public interface\n+    }\n+}\n+\n+mod m2 {\n+    #![deny(future_incompatible)]\n+\n+    pub struct Pub;\n+    struct Priv;\n+\n+    impl Pub {\n+        pub fn f() -> Priv {} //~ ERROR private type in public interface\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "69c4eca1a0a7281f400b52b89aec3b5392c493e2", "filename": "src/test/compile-fail/lint-visible-private-types-1.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types-1.rs?ref=a745614f44d343cf40bd2a623d0b8d522547d570", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+use std::marker;\n+\n+struct Private<T>(marker::PhantomData<T>);\n+pub struct Public<T>(marker::PhantomData<T>);\n+\n+pub trait PubTrait {\n+    type Output;\n+}\n+\n+type PrivAlias = Public<i8>;\n+\n+trait PrivTrait2 {\n+    type Alias;\n+}\n+impl PrivTrait2 for Private<isize> {\n+    type Alias = Public<u8>;\n+}\n+\n+impl PubTrait for PrivAlias {\n+    type Output = Private<isize>; //~ WARN private type in public interface\n+}\n+\n+impl PubTrait for <Private<isize> as PrivTrait2>::Alias {\n+    type Output = Private<isize>; //~ WARN private type in public interface\n+}\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}, {"sha": "1fd616055575215775eeea7517bb1cfb06c5809d", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745614f44d343cf40bd2a623d0b8d522547d570/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=a745614f44d343cf40bd2a623d0b8d522547d570", "patch": "@@ -75,8 +75,8 @@ pub trait PubTrait {\n }\n \n impl PubTrait for Public<isize> {\n-    fn bar(&self) -> Private<isize> { panic!() } //~ WARN private type in public interface\n-    fn baz() -> Private<isize> { panic!() } //~ WARN private type in public interface\n+    fn bar(&self) -> Private<isize> { panic!() } // Warns in lint checking phase\n+    fn baz() -> Private<isize> { panic!() } // Warns in lint checking phase\n }\n impl PubTrait for Public<Private<isize>> {\n     fn bar(&self) -> Private<isize> { panic!() }\n@@ -121,22 +121,3 @@ impl<T: ParamTrait<Private<isize>>>  //~ ERROR private type in public interface\n      ParamTrait<T> for Public<i8> {\n     fn foo() -> T { panic!() }\n }\n-\n-type PrivAlias = Public<i8>;\n-\n-trait PrivTrait2 {\n-    type Alias;\n-}\n-impl PrivTrait2 for Private<isize> {\n-    type Alias = Public<u8>;\n-}\n-\n-impl PubTrait for PrivAlias {\n-    fn bar(&self) -> Private<isize> { panic!() } //~ WARN private type in public interface\n-    fn baz() -> Private<isize> { panic!() } //~ WARN private type in public interface\n-}\n-\n-impl PubTrait for <Private<isize> as PrivTrait2>::Alias {\n-    fn bar(&self) -> Private<isize> { panic!() } //~ WARN private type in public interface\n-    fn baz() -> Private<isize> { panic!() } //~ WARN private type in public interface\n-}"}]}