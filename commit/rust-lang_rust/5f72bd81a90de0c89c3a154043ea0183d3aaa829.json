{"sha": "5f72bd81a90de0c89c3a154043ea0183d3aaa829", "node_id": "C_kwDOAAsO6NoAKDVmNzJiZDgxYTkwZGUwYzg5YzNhMTU0MDQzZWEwMTgzZDNhYWE4Mjk", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-12T13:07:57Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-12T15:05:59Z"}, "message": "impl PartialOrd codegen for tuple enum", "tree": {"sha": "0a92bff78e18b08f54b9cdc7029ae561ac5b758d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a92bff78e18b08f54b9cdc7029ae561ac5b758d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f72bd81a90de0c89c3a154043ea0183d3aaa829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f72bd81a90de0c89c3a154043ea0183d3aaa829", "html_url": "https://github.com/rust-lang/rust/commit/5f72bd81a90de0c89c3a154043ea0183d3aaa829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f72bd81a90de0c89c3a154043ea0183d3aaa829/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77b5fe6c52bad2f04c552e8a72362ec8864ca6a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/77b5fe6c52bad2f04c552e8a72362ec8864ca6a2", "html_url": "https://github.com/rust-lang/rust/commit/77b5fe6c52bad2f04c552e8a72362ec8864ca6a2"}], "stats": {"total": 68, "additions": 56, "deletions": 12}, "files": [{"sha": "4fceefe331dc10baeea4056f4a2e8c27ed6315e7", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5f72bd81a90de0c89c3a154043ea0183d3aaa829/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f72bd81a90de0c89c3a154043ea0183d3aaa829/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=5f72bd81a90de0c89c3a154043ea0183d3aaa829", "patch": "@@ -821,6 +821,47 @@ impl PartialOrd for Foo {\n         )\n     }\n \n+    #[test]\n+    fn add_custom_impl_partial_ord_tuple_enum() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: ord\n+#[derive(Partial$0Ord)]\n+enum Foo {\n+    Bar(String),\n+    Baz(String, String),\n+    Qux(),\n+    Bin,\n+}\n+\"#,\n+            r#\"\n+enum Foo {\n+    Bar(String),\n+    Baz(String, String),\n+    Qux(),\n+    Bin,\n+}\n+\n+impl PartialOrd for Foo {\n+    $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n+        match (self, other) {\n+            (Self::Bar(l0), Self::Bar(r0)) => l0.partial_cmp(r0),\n+            (Self::Baz(l0, l1), Self::Baz(r0, r1)) => {\n+                match l0.partial_cmp(r0) {\n+                    Some(core::cmp::Ordering::Eq) => {}\n+                    ord => return ord,\n+                }\n+                l1.partial_cmp(r1)\n+            }\n+            _ => core::mem::discriminant(self).partial_cmp(core::mem::discriminant(other)),\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn add_custom_impl_partial_eq_record_struct() {\n         check_assist("}, {"sha": "10b781636f439ea202c8e776c80af14373a10c50", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5f72bd81a90de0c89c3a154043ea0183d3aaa829/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f72bd81a90de0c89c3a154043ea0183d3aaa829/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=5f72bd81a90de0c89c3a154043ea0183d3aaa829", "patch": "@@ -574,13 +574,6 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n }\n \n fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    fn gen_eq_chain(expr: Option<ast::Expr>, cmp: ast::Expr) -> Option<ast::Expr> {\n-        match expr {\n-            Some(expr) => Some(make::expr_op(ast::BinOp::BooleanAnd, expr, cmp)),\n-            None => Some(cmp),\n-        }\n-    }\n-\n     fn gen_partial_eq_match(match_target: ast::Expr) -> Option<ast::Stmt> {\n         let mut arms = vec![];\n \n@@ -683,7 +676,7 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                     }\n \n                     Some(ast::FieldList::TupleFieldList(list)) => {\n-                        let mut expr = None;\n+                        let mut exprs = vec![];\n                         let mut l_fields = vec![];\n                         let mut r_fields = vec![];\n \n@@ -698,16 +691,26 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n                             let lhs = make::expr_path(make::ext::ident_path(&l_name));\n                             let rhs = make::expr_path(make::ext::ident_path(&r_name));\n-                            let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n-                            expr = gen_eq_chain(expr, cmp);\n+                            let ord = gen_partial_cmp_call(lhs, rhs);\n+                            exprs.push(ord);\n                         }\n \n                         let left = make::tuple_struct_pat(gen_variant_path(&variant)?, l_fields);\n                         let right = make::tuple_struct_pat(gen_variant_path(&variant)?, r_fields);\n                         let tuple = make::tuple_pat(vec![left.into(), right.into()]);\n \n-                        if let Some(expr) = expr {\n-                            arms.push(make::match_arm(Some(tuple.into()), None, expr));\n+                        if let Some(tail) = exprs.pop() {\n+                            let stmts = exprs\n+                                .into_iter()\n+                                .map(gen_partial_eq_match)\n+                                .collect::<Option<Vec<ast::Stmt>>>()?;\n+                            let expr = match stmts.len() {\n+                                0 => tail,\n+                                _ => make::block_expr(stmts.into_iter(), Some(tail))\n+                                    .indent(ast::edit::IndentLevel(1))\n+                                    .into(),\n+                            };\n+                            arms.push(make::match_arm(Some(tuple.into()), None, expr.into()));\n                         }\n                     }\n                     None => continue,"}]}