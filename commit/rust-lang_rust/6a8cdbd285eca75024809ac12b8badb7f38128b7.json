{"sha": "6a8cdbd285eca75024809ac12b8badb7f38128b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOGNkYmQyODVlY2E3NTAyNDgwOWFjMTJiOGJhZGI3ZjM4MTI4Yjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-28T16:39:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-28T16:39:40Z"}, "message": "Rollup merge of #76474 - bjorn3:driver_selected_codegen, r=oli-obk\n\nAdd option to pass a custom codegen backend from a driver\n\nThis allows the driver to pass information to the codegen backend. For example the headcrab debugger may in the future want to use cg_clif to JIT code to be injected in the debuggee. This would PR make it possible to tell cg_clif which symbol can be found at which address and to tell it to inject the JITed code into the right process.\n\nThis PR may also help with https://github.com/rust-lang/miri/pull/1540 by allowing miri to provide a codegen backend that only emits metadata and doesn't perform any codegen.\n\ncc @nbaksalyar (headcrab)\ncc @RalfJung (miri)", "tree": {"sha": "ada61884c9beb8066641008c25db858d22307079", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ada61884c9beb8066641008c25db858d22307079"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a8cdbd285eca75024809ac12b8badb7f38128b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfchHNCRBK7hj4Ov3rIwAAdHIIAGvkGHcw1sSXG9LN/95EhgVM\nOSgYR0KJSEnG6B8ikYpW0jp9o5ZZ1UqdMprL7BDNB14xGVzFE7SL5N/ioEts4wIi\nQY6uch2N3CBAz7POzYguQN+E0KjFbzfuFhhJ88ImaaxkKKyrXZK9XIcAKD9pTHI0\nmTI76L5ltNtcSYCfrjFwLUWP13sU+QD0RMi6mgkg/RPYko6xJULIfpvCQGHswh8G\ndJHC1QDfUcD2r+iZWxaEtA39rNoQTrn1OHTjA05fL4bvAhjaHywEDnZ4jzy+IuVm\n+fzM5gZOAIhxR6dqJHN4Xa+I8cWpZ+kcd1RiClZ1xNTzVoKK10WEmgW/SPqoRF0=\n=1z/+\n-----END PGP SIGNATURE-----\n", "payload": "tree ada61884c9beb8066641008c25db858d22307079\nparent 734c57d45c3b3d6ff19bc7d04ce00f7c9441c368\nparent 71bc62b9f696ae83ef1713bd96054c92cda9f27f\nauthor Ralf Jung <post@ralfj.de> 1601311180 +0200\ncommitter GitHub <noreply@github.com> 1601311180 +0200\n\nRollup merge of #76474 - bjorn3:driver_selected_codegen, r=oli-obk\n\nAdd option to pass a custom codegen backend from a driver\n\nThis allows the driver to pass information to the codegen backend. For example the headcrab debugger may in the future want to use cg_clif to JIT code to be injected in the debuggee. This would PR make it possible to tell cg_clif which symbol can be found at which address and to tell it to inject the JITed code into the right process.\n\nThis PR may also help with https://github.com/rust-lang/miri/pull/1540 by allowing miri to provide a codegen backend that only emits metadata and doesn't perform any codegen.\n\ncc @nbaksalyar (headcrab)\ncc @RalfJung (miri)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a8cdbd285eca75024809ac12b8badb7f38128b7", "html_url": "https://github.com/rust-lang/rust/commit/6a8cdbd285eca75024809ac12b8badb7f38128b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a8cdbd285eca75024809ac12b8badb7f38128b7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734c57d45c3b3d6ff19bc7d04ce00f7c9441c368", "url": "https://api.github.com/repos/rust-lang/rust/commits/734c57d45c3b3d6ff19bc7d04ce00f7c9441c368", "html_url": "https://github.com/rust-lang/rust/commit/734c57d45c3b3d6ff19bc7d04ce00f7c9441c368"}, {"sha": "71bc62b9f696ae83ef1713bd96054c92cda9f27f", "url": "https://api.github.com/repos/rust-lang/rust/commits/71bc62b9f696ae83ef1713bd96054c92cda9f27f", "html_url": "https://github.com/rust-lang/rust/commit/71bc62b9f696ae83ef1713bd96054c92cda9f27f"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "544efc124e117ef34c53910c48c3771f4bdbe1a6", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a8cdbd285eca75024809ac12b8badb7f38128b7/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8cdbd285eca75024809ac12b8badb7f38128b7/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=6a8cdbd285eca75024809ac12b8badb7f38128b7", "patch": "@@ -141,6 +141,9 @@ pub fn run_compiler(\n     callbacks: &mut (dyn Callbacks + Send),\n     file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n     emitter: Option<Box<dyn Write + Send>>,\n+    make_codegen_backend: Option<\n+        Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>,\n+    >,\n ) -> interface::Result<()> {\n     let mut args = Vec::new();\n     for arg in at_args {\n@@ -162,6 +165,11 @@ pub fn run_compiler(\n     let sopts = config::build_session_options(&matches);\n     let cfg = interface::parse_cfgspecs(matches.opt_strs(\"cfg\"));\n \n+    // We wrap `make_codegen_backend` in another `Option` such that `dummy_config` can take\n+    // ownership of it when necessary, while also allowing the non-dummy config to take ownership\n+    // when `dummy_config` is not used.\n+    let mut make_codegen_backend = Some(make_codegen_backend);\n+\n     let mut dummy_config = |sopts, cfg, diagnostic_output| {\n         let mut config = interface::Config {\n             opts: sopts,\n@@ -177,6 +185,7 @@ pub fn run_compiler(\n             lint_caps: Default::default(),\n             register_lints: None,\n             override_queries: None,\n+            make_codegen_backend: make_codegen_backend.take().unwrap(),\n             registry: diagnostics_registry(),\n         };\n         callbacks.config(&mut config);\n@@ -253,6 +262,7 @@ pub fn run_compiler(\n         lint_caps: Default::default(),\n         register_lints: None,\n         override_queries: None,\n+        make_codegen_backend: make_codegen_backend.unwrap(),\n         registry: diagnostics_registry(),\n     };\n \n@@ -1265,7 +1275,7 @@ pub fn main() -> ! {\n                 })\n             })\n             .collect::<Vec<_>>();\n-        run_compiler(&args, &mut callbacks, None, None)\n+        run_compiler(&args, &mut callbacks, None, None, None)\n     });\n     // The extra `\\t` is necessary to align this label with the others.\n     print_time_passes_entry(callbacks.time_passes, \"\\ttotal\", start.elapsed());"}, {"sha": "73a51ad477b22e90b886cd14288e5ae0542045a3", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a8cdbd285eca75024809ac12b8badb7f38128b7/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8cdbd285eca75024809ac12b8badb7f38128b7/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=6a8cdbd285eca75024809ac12b8badb7f38128b7", "patch": "@@ -154,6 +154,10 @@ pub struct Config {\n     pub override_queries:\n         Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::Providers)>,\n \n+    /// This is a callback from the driver that is called to create a codegen backend.\n+    pub make_codegen_backend:\n+        Option<Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>>,\n+\n     /// Registry of diagnostics codes.\n     pub registry: Registry,\n }\n@@ -167,6 +171,7 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n         config.file_loader,\n         config.input_path.clone(),\n         config.lint_caps,\n+        config.make_codegen_backend,\n         registry.clone(),\n     );\n "}, {"sha": "7ace707cc88e9d0d00204b85bdc09e5ada7ba8aa", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a8cdbd285eca75024809ac12b8badb7f38128b7/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8cdbd285eca75024809ac12b8badb7f38128b7/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=6a8cdbd285eca75024809ac12b8badb7f38128b7", "patch": "@@ -63,9 +63,17 @@ pub fn create_session(\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     input_path: Option<PathBuf>,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+    make_codegen_backend: Option<\n+        Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>,\n+    >,\n     descriptions: Registry,\n ) -> (Lrc<Session>, Lrc<Box<dyn CodegenBackend>>) {\n-    let codegen_backend = get_codegen_backend(&sopts);\n+    let codegen_backend = if let Some(make_codegen_backend) = make_codegen_backend {\n+        make_codegen_backend(&sopts)\n+    } else {\n+        get_codegen_backend(&sopts)\n+    };\n+\n     // target_override is documented to be called before init(), so this is okay\n     let target_override = codegen_backend.target_override(&sopts);\n "}, {"sha": "391859050e8a641f6dd15169bfb56fa6f8096cb6", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a8cdbd285eca75024809ac12b8badb7f38128b7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8cdbd285eca75024809ac12b8badb7f38128b7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=6a8cdbd285eca75024809ac12b8badb7f38128b7", "patch": "@@ -419,6 +419,7 @@ pub fn run_core(\n                 (rustc_interface::DEFAULT_QUERY_PROVIDERS.typeck)(tcx, def_id)\n             };\n         }),\n+        make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),\n     };\n "}, {"sha": "7a6c9eabb5f405533442deb5c570da729a4dafb7", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a8cdbd285eca75024809ac12b8badb7f38128b7/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8cdbd285eca75024809ac12b8badb7f38128b7/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=6a8cdbd285eca75024809ac12b8badb7f38128b7", "patch": "@@ -95,6 +95,7 @@ pub fn run(options: Options) -> Result<(), ErrorReported> {\n         lint_caps,\n         register_lints: None,\n         override_queries: None,\n+        make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),\n     };\n "}, {"sha": "2636423c1a480c36f9adc78ee7740270505a3e5f", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a8cdbd285eca75024809ac12b8badb7f38128b7/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8cdbd285eca75024809ac12b8badb7f38128b7/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=6a8cdbd285eca75024809ac12b8badb7f38128b7", "patch": "@@ -60,6 +60,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         lint_caps: Default::default(),\n         register_lints: None,\n         override_queries: None,\n+        make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),\n     };\n "}, {"sha": "0025b47403d19f30f49b5edac7df4947c886d95f", "filename": "src/test/ui-fulldeps/compiler-calls.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a8cdbd285eca75024809ac12b8badb7f38128b7/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8cdbd285eca75024809ac12b8badb7f38128b7/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs?ref=6a8cdbd285eca75024809ac12b8badb7f38128b7", "patch": "@@ -26,7 +26,13 @@ fn main() {\n     let mut count = 1;\n     let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n     rustc_driver::catch_fatal_errors(|| {\n-        rustc_driver::run_compiler(&args, &mut TestCalls { count: &mut count }, None, None).ok();\n+        rustc_driver::run_compiler(\n+            &args,\n+            &mut TestCalls { count: &mut count },\n+            None,\n+            None,\n+            None,\n+        ).ok();\n     }).ok();\n     assert_eq!(count, 2);\n }"}, {"sha": "f4f2259cefd51a937753e424ec675df7042ae339", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a8cdbd285eca75024809ac12b8badb7f38128b7/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a8cdbd285eca75024809ac12b8badb7f38128b7/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=6a8cdbd285eca75024809ac12b8badb7f38128b7", "patch": "@@ -357,7 +357,7 @@ pub fn main() {\n                 args.extend(vec![\"--sysroot\".into(), sys_root]);\n             };\n \n-            return rustc_driver::run_compiler(&args, &mut DefaultCallbacks, None, None);\n+            return rustc_driver::run_compiler(&args, &mut DefaultCallbacks, None, None, None);\n         }\n \n         if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n@@ -420,6 +420,6 @@ pub fn main() {\n         let mut default = DefaultCallbacks;\n         let callbacks: &mut (dyn rustc_driver::Callbacks + Send) =\n             if clippy_enabled { &mut clippy } else { &mut default };\n-        rustc_driver::run_compiler(&args, callbacks, None, None)\n+        rustc_driver::run_compiler(&args, callbacks, None, None, None)\n     }))\n }"}]}