{"sha": "8ea79aa0259c497006bdd56e0690c1420b6d8514", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYTc5YWEwMjU5YzQ5NzAwNmJkZDU2ZTA2OTBjMTQyMGI2ZDg1MTQ=", "commit": {"author": {"name": "kngwyu", "email": "yuji.kngw.80s.revive@gmail.com", "date": "2018-03-05T13:45:40Z"}, "committer": {"name": "kngwyu", "email": "yuji.kngw.80s.revive@gmail.com", "date": "2018-03-05T13:45:40Z"}, "message": "add offset_left(4) for 'dyn '", "tree": {"sha": "fbcd5a512565a518b5e3b4895e7c86d221a2d41f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbcd5a512565a518b5e3b4895e7c86d221a2d41f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ea79aa0259c497006bdd56e0690c1420b6d8514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea79aa0259c497006bdd56e0690c1420b6d8514", "html_url": "https://github.com/rust-lang/rust/commit/8ea79aa0259c497006bdd56e0690c1420b6d8514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ea79aa0259c497006bdd56e0690c1420b6d8514/comments", "author": {"login": "kngwyu", "id": 16046705, "node_id": "MDQ6VXNlcjE2MDQ2NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/16046705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kngwyu", "html_url": "https://github.com/kngwyu", "followers_url": "https://api.github.com/users/kngwyu/followers", "following_url": "https://api.github.com/users/kngwyu/following{/other_user}", "gists_url": "https://api.github.com/users/kngwyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/kngwyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kngwyu/subscriptions", "organizations_url": "https://api.github.com/users/kngwyu/orgs", "repos_url": "https://api.github.com/users/kngwyu/repos", "events_url": "https://api.github.com/users/kngwyu/events{/privacy}", "received_events_url": "https://api.github.com/users/kngwyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kngwyu", "id": 16046705, "node_id": "MDQ6VXNlcjE2MDQ2NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/16046705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kngwyu", "html_url": "https://github.com/kngwyu", "followers_url": "https://api.github.com/users/kngwyu/followers", "following_url": "https://api.github.com/users/kngwyu/following{/other_user}", "gists_url": "https://api.github.com/users/kngwyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/kngwyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kngwyu/subscriptions", "organizations_url": "https://api.github.com/users/kngwyu/orgs", "repos_url": "https://api.github.com/users/kngwyu/repos", "events_url": "https://api.github.com/users/kngwyu/events{/privacy}", "received_events_url": "https://api.github.com/users/kngwyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8f5d5c68cdc5168c32f19d7e09b81fe733c9bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f5d5c68cdc5168c32f19d7e09b81fe733c9bac", "html_url": "https://github.com/rust-lang/rust/commit/f8f5d5c68cdc5168c32f19d7e09b81fe733c9bac"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "fd6b6e3ca56ec1f8278e0edce8312b1df1366474", "filename": "src/types.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ea79aa0259c497006bdd56e0690c1420b6d8514/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ea79aa0259c497006bdd56e0690c1420b6d8514/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=8ea79aa0259c497006bdd56e0690c1420b6d8514", "patch": "@@ -617,9 +617,12 @@ impl Rewrite for ast::Ty {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         match self.node {\n             ast::TyKind::TraitObject(ref bounds, tobj_syntax) => {\n-                let res = bounds.rewrite(context, shape)?;\n                 // we have to consider 'dyn' keyword is used or not!!!\n-                if tobj_syntax == ast::TraitObjectSyntax::Dyn {\n+                let is_dyn = tobj_syntax == ast::TraitObjectSyntax::Dyn;\n+                // 4 is length of 'dyn '\n+                let shape = if is_dyn { shape.offset_left(4)? } else { shape };\n+                let res = bounds.rewrite(context, shape)?;\n+                if is_dyn {\n                     Some(format!(\"dyn {}\", res))\n                 } else {\n                     Some(res)"}]}