{"sha": "6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMGU1OGZjNWYwZTBiMWQyMWUwMzNkNTA2OGRjYjQwMzg2ZTNmOWY=", "commit": {"author": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2016-01-06T12:16:30Z"}, "committer": {"name": "Ms2ger", "email": "Ms2ger@gmail.com", "date": "2016-01-06T12:16:30Z"}, "message": "Stop re-exporting MutateMode's variants.", "tree": {"sha": "5e33251baebc74bad8e535fa1af9b9c4080702e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e33251baebc74bad8e535fa1af9b9c4080702e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f", "html_url": "https://github.com/rust-lang/rust/commit/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1f442634c2e37a8b80d59e27edcc24b5614d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1f442634c2e37a8b80d59e27edcc24b5614d4e", "html_url": "https://github.com/rust-lang/rust/commit/dc1f442634c2e37a8b80d59e27edcc24b5614d4e"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "dbf8ce3db3b6628fd9c02302b258825cc6fcfd78", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f", "patch": "@@ -18,9 +18,8 @@ use middle::const_eval::{const_expr_to_pat, lookup_const_by_id};\n use middle::const_eval::EvalHint::ExprTypeChecked;\n use middle::def::*;\n use middle::def_id::{DefId};\n-use middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Init};\n-use middle::expr_use_visitor::{JustWrite, LoanCause, MutateMode};\n-use middle::expr_use_visitor::WriteAndRead;\n+use middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n+use middle::expr_use_visitor::{LoanCause, MutateMode};\n use middle::expr_use_visitor as euv;\n use middle::infer;\n use middle::mem_categorization::{cmt};\n@@ -1160,10 +1159,10 @@ impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n     fn decl_without_init(&mut self, _: NodeId, _: Span) {}\n     fn mutate(&mut self, _: NodeId, span: Span, _: cmt, mode: MutateMode) {\n         match mode {\n-            JustWrite | WriteAndRead => {\n+            MutateMode::JustWrite | MutateMode::WriteAndRead => {\n                 span_err!(self.cx.tcx.sess, span, E0302, \"cannot assign in a pattern guard\")\n             }\n-            Init => {}\n+            MutateMode::Init => {}\n         }\n     }\n }"}, {"sha": "9584d118bc3e576d5afed96b8778058521447720", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f", "patch": "@@ -12,7 +12,6 @@\n //! normal visitor, which just walks the entire body in one shot, the\n //! `ExprUseVisitor` determines how expressions are being used.\n \n-pub use self::MutateMode::*;\n pub use self::LoanCause::*;\n pub use self::ConsumeMode::*;\n pub use self::MoveReason::*;\n@@ -465,7 +464,11 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                         self.consume_expr(&*output.expr);\n                     } else {\n                         self.mutate_expr(expr, &*output.expr,\n-                                         if output.is_rw { WriteAndRead } else { JustWrite });\n+                                         if output.is_rw {\n+                                             MutateMode::WriteAndRead\n+                                         } else {\n+                                             MutateMode::JustWrite\n+                                         });\n                     }\n                 }\n             }\n@@ -519,7 +522,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n             }\n \n             hir::ExprAssign(ref lhs, ref rhs) => {\n-                self.mutate_expr(expr, &**lhs, JustWrite);\n+                self.mutate_expr(expr, &**lhs, MutateMode::JustWrite);\n                 self.consume_expr(&**rhs);\n             }\n \n@@ -532,7 +535,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                 assert!(::rustc_front::util::is_by_value_binop(op.node));\n \n                 if !self.walk_overloaded_operator(expr, lhs, vec![rhs], PassArgs::ByValue) {\n-                    self.mutate_expr(expr, &**lhs, WriteAndRead);\n+                    self.mutate_expr(expr, &**lhs, MutateMode::WriteAndRead);\n                     self.consume_expr(&**rhs);\n                 }\n             }\n@@ -991,7 +994,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                 let def = def_map.borrow().get(&pat.id).unwrap().full_def();\n                 match mc.cat_def(pat.id, pat.span, pat_ty, def) {\n                     Ok(binding_cmt) => {\n-                        delegate.mutate(pat.id, pat.span, binding_cmt, Init);\n+                        delegate.mutate(pat.id, pat.span, binding_cmt, MutateMode::Init);\n                     }\n                     Err(_) => { }\n                 }"}, {"sha": "2d30b827750acda7b2bbba833b7689d829066dff", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f", "patch": "@@ -21,6 +21,7 @@ use self::UseError::*;\n use borrowck::*;\n use borrowck::InteriorKind::{InteriorElement, InteriorField};\n use rustc::middle::expr_use_visitor as euv;\n+use rustc::middle::expr_use_visitor::MutateMode;\n use rustc::middle::infer;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n@@ -161,7 +162,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for CheckLoanCtxt<'a, 'tcx> {\n         match opt_loan_path(&assignee_cmt) {\n             Some(lp) => {\n                 match mode {\n-                    euv::Init | euv::JustWrite => {\n+                    MutateMode::Init | MutateMode::JustWrite => {\n                         // In a case like `path = 1`, then path does not\n                         // have to be *FULLY* initialized, but we still\n                         // must be careful lest it contains derefs of\n@@ -171,7 +172,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for CheckLoanCtxt<'a, 'tcx> {\n                                                              MovedInUse,\n                                                              &lp);\n                     }\n-                    euv::WriteAndRead => {\n+                    MutateMode::WriteAndRead => {\n                         // In a case like `path += 1`, then path must be\n                         // fully initialized, since we will read it before\n                         // we write it."}, {"sha": "735e618cc732b1f0da607b438e7e58c57de0369c", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=6f0e58fc5f0e0b1d21e033d5068dcb40386e3f9f", "patch": "@@ -20,6 +20,7 @@ use rustc::middle::dataflow::BitwiseOperator;\n use rustc::middle::dataflow::DataFlowOperator;\n use rustc::middle::dataflow::KillFrom;\n use rustc::middle::expr_use_visitor as euv;\n+use rustc::middle::expr_use_visitor::MutateMode;\n use rustc::middle::ty;\n use rustc::util::nodemap::{FnvHashMap, NodeSet};\n \n@@ -406,10 +407,10 @@ impl<'tcx> MoveData<'tcx> {\n         self.fragments.borrow_mut().add_assignment(path_index);\n \n         match mode {\n-            euv::Init | euv::JustWrite => {\n+            MutateMode::Init | MutateMode::JustWrite => {\n                 self.assignee_ids.borrow_mut().insert(assignee_id);\n             }\n-            euv::WriteAndRead => { }\n+            MutateMode::WriteAndRead => { }\n         }\n \n         let assignment = Assignment {"}]}