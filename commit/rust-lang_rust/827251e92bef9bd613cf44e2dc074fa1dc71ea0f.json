{"sha": "827251e92bef9bd613cf44e2dc074fa1dc71ea0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNzI1MWU5MmJlZjliZDYxM2NmNDRlMmRjMDc0ZmExZGM3MWVhMGY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "mackendy@localhost.localdomain", "date": "2018-05-09T22:52:16Z"}, "committer": {"name": "Dylan MacKenzie", "email": "mackendy@localhost.localdomain", "date": "2018-05-09T22:52:16Z"}, "message": "Shorten ownership safety discussion in `read_volatile`\n\nNon-`Copy` types should not be in volatile memory.", "tree": {"sha": "c996131d01059145f9464779b660caa2b42ea569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c996131d01059145f9464779b660caa2b42ea569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/827251e92bef9bd613cf44e2dc074fa1dc71ea0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/827251e92bef9bd613cf44e2dc074fa1dc71ea0f", "html_url": "https://github.com/rust-lang/rust/commit/827251e92bef9bd613cf44e2dc074fa1dc71ea0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/827251e92bef9bd613cf44e2dc074fa1dc71ea0f/comments", "author": null, "committer": null, "parents": [{"sha": "e350ba48ed80c000fd2d2b5ac37e53a9efe1f587", "url": "https://api.github.com/repos/rust-lang/rust/commits/e350ba48ed80c000fd2d2b5ac37e53a9efe1f587", "html_url": "https://github.com/rust-lang/rust/commit/e350ba48ed80c000fd2d2b5ac37e53a9efe1f587"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "f3cf206876651b84a1f99104edb2bbcc67fd6eb8", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/827251e92bef9bd613cf44e2dc074fa1dc71ea0f/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827251e92bef9bd613cf44e2dc074fa1dc71ea0f/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=827251e92bef9bd613cf44e2dc074fa1dc71ea0f", "patch": "@@ -622,6 +622,11 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n /// to not be elided or reordered by the compiler across other volatile\n /// operations.\n ///\n+/// Memory read with `read_volatile` should almost always be written to using\n+/// [`write_volatile`].\n+///\n+/// [`write_volatile`]: ./fn.write_volatile.html\n+///\n /// # Notes\n ///\n /// Rust does not currently have a rigorously and formally defined memory model,\n@@ -644,16 +649,13 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n ///\n /// * `src` must be properly aligned.\n ///\n-/// Additionally, if `T` is not [`Copy`], only the returned value *or* the\n-/// pointed-to value can be used or dropped after calling `read_volatile`.\n-/// `read_volatile` creates a bitwise copy of `T`, regardless of whether `T:\n-/// Copy`, which can result in undefined behavior if both copies are used.\n-/// Note that `*src = foo` counts as a use because it will attempt to drop the\n-/// value previously at `*src`. [`write_volatile`] can be used to overwrite\n-/// data without causing it to be dropped.\n+/// Like [`read`], `read_volatile` creates a bitwise copy of the pointed-to\n+/// object, regardless of whether `T` is [`Copy`]. Using both values can cause\n+/// undefined behavior. However, storing non-[`Copy`] data in I/O memory is\n+/// almost certainly incorrect.\n ///\n /// [`Copy`]: ../marker/trait.Copy.html\n-/// [`write_volatile`]: ./fn.write_volatile.html\n+/// [`read`]: ./fn.read.html\n ///\n /// # Examples\n ///\n@@ -680,13 +682,18 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n /// to not be elided or reordered by the compiler across other volatile\n /// operations.\n ///\n+/// Memory written with `write_volatile` should almost always be read from using\n+/// [`read_volatile`].\n+///\n /// `write_volatile` does not drop the contents of `dst`. This is safe, but it\n /// could leak allocations or resources, so care must be taken not to overwrite\n /// an object that should be dropped.\n ///\n /// Additionally, it does not drop `src`. Semantically, `src` is moved into the\n /// location pointed to by `dst`.\n ///\n+/// [`read_volatile`]: ./fn.read_volatile.html\n+///\n /// # Notes\n ///\n /// Rust does not currently have a rigorously and formally defined memory model,"}]}