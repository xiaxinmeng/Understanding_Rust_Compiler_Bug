{"sha": "f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "node_id": "C_kwDOAAsO6NoAKGY0ZjVmYzNlNWNjNzBiN2E0M2JmN2I1MThjNDU1ZjNkOWJhZGE5ZTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-17T11:27:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-17T11:27:21Z"}, "message": "Auto merge of #107965 - BoxyUwU:add_const_arg_has_type_predicate, r=compiler-errors\n\nAdd `Clause::ConstArgHasType`\n\nCurrently the way that we check that a const arg has the correct type for the const param it is an argument for is by setting the expected type of `typeck` on the anon const of the argument to be the const param's type.\n\nIn the future for a potential `min_generic_const_exprs` we will allow providing const arguments that do not have an associated anon const that can be typeck'd which will require us to actually check that  the const argument has the correct type. While it would potentially be possible to just call `eq` when creating substs this would not work if we support generics of the form `const N: T, T` (the const parameters type referencing generics declared after itself).\n\nAdditionally having `ConstArgHasType` will allow us to potentially make progress on removing the `ty` field of `Const` which may be desirable. Once progress has been made on this, `ConstArgHasType` will also be helpful in ensuring we do not make mistakes in trait/impl checking by declaring functions with the wrong const parameter types as the checks that the param env is compatible would catch it. (We have messed this up in the past, and with generic const parameter types these checks will get more complex)\n\nThere is a [document](https://hackmd.io/wuCS6CJBQ9-fWbwaW7nQRw?view) about the types of const generics that may provide some general information on this subject\n\n---\n\nThis PR shouldn't have any impact on whether code compiles or not on stable, it primarily exists to make progress on unstable const generics features that are desirable.", "tree": {"sha": "e42ae3e6952c4e776ce7be5453f5548c04223662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e42ae3e6952c4e776ce7be5453f5548c04223662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "html_url": "https://github.com/rust-lang/rust/commit/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5c8c329a7b4f6a12ae72ae41cb834989228221e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c8c329a7b4f6a12ae72ae41cb834989228221e", "html_url": "https://github.com/rust-lang/rust/commit/b5c8c329a7b4f6a12ae72ae41cb834989228221e"}, {"sha": "90c8d6bbe4725ca83e79e73e9cdf1f66840db79f", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c8d6bbe4725ca83e79e73e9cdf1f66840db79f", "html_url": "https://github.com/rust-lang/rust/commit/90c8d6bbe4725ca83e79e73e9cdf1f66840db79f"}], "stats": {"total": 198, "additions": 183, "deletions": 15}, "files": [{"sha": "abc33e84139fc60b27bfc11d9feeba1ec0349611", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -1328,7 +1328,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ty::Clause::TypeOutlives(_) => {\n                         // Do nothing, we deal with regions separately\n                     }\n-                    ty::Clause::RegionOutlives(_) => bug!(),\n+                    ty::Clause::RegionOutlives(_) | ty::Clause::ConstArgHasType(..) => bug!(),\n                 },\n                 ty::PredicateKind::WellFormed(_)\n                 | ty::PredicateKind::AliasEq(..)"}, {"sha": "2badd66e346f106e68b8eb46240c13d2ad2f9d59", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -9,8 +9,8 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{GenericPredicates, ToPredicate};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -151,7 +151,8 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     trace!(?generics);\n \n     // Collect the predicates that were written inline by the user on each\n-    // type parameter (e.g., `<T: Foo>`).\n+    // type parameter (e.g., `<T: Foo>`). Also add `ConstArgHasType` predicates\n+    // for each const parameter.\n     for param in ast_generics.params {\n         match param.kind {\n             // We already dealt with early bound lifetimes above.\n@@ -175,7 +176,19 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                 trace!(?predicates);\n             }\n             GenericParamKind::Const { .. } => {\n-                // Bounds on const parameters are currently not possible.\n+                let name = param.name.ident().name;\n+                let param_const = ty::ParamConst::new(index, name);\n+\n+                let ct_ty = tcx.type_of(param.def_id.to_def_id()).subst_identity();\n+\n+                let ct = tcx.mk_const(param_const, ct_ty);\n+\n+                let predicate = ty::Binder::dummy(ty::PredicateKind::Clause(\n+                    ty::Clause::ConstArgHasType(ct, ct_ty),\n+                ))\n+                .to_predicate(tcx);\n+                predicates.insert((predicate, param.span));\n+\n                 index += 1;\n             }\n         }\n@@ -439,7 +452,9 @@ pub(super) fn explicit_predicates_of<'tcx>(\n             let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n             let parent_def_id = tcx.hir().get_parent_item(hir_id);\n \n-            if tcx.hir().opt_const_param_default_param_def_id(hir_id).is_some() {\n+            if let Some(defaulted_param_def_id) =\n+                tcx.hir().opt_const_param_default_param_def_id(hir_id)\n+            {\n                 // In `generics_of` we set the generics' parent to be our parent's parent which means that\n                 // we lose out on the predicates of our actual parent if we dont return those predicates here.\n                 // (See comment in `generics_of` for more information on why the parent shenanigans is necessary)\n@@ -452,7 +467,39 @@ pub(super) fn explicit_predicates_of<'tcx>(\n                 //\n                 // In the above code we want the anon const to have predicates in its param env for `T: Trait`\n                 // and we would be calling `explicit_predicates_of(Foo)` here\n-                return tcx.explicit_predicates_of(parent_def_id);\n+                let parent_preds = tcx.explicit_predicates_of(parent_def_id);\n+\n+                // If we dont filter out `ConstArgHasType` predicates then every single defaulted const parameter\n+                // will ICE because of #106994. FIXME(generic_const_exprs): remove this when a more general solution\n+                // to #106994 is implemented.\n+                let filtered_predicates = parent_preds\n+                    .predicates\n+                    .into_iter()\n+                    .filter(|(pred, _)| {\n+                        if let ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, _)) =\n+                            pred.kind().skip_binder()\n+                        {\n+                            match ct.kind() {\n+                                ty::ConstKind::Param(param_const) => {\n+                                    let defaulted_param_idx = tcx\n+                                        .generics_of(parent_def_id)\n+                                        .param_def_id_to_index[&defaulted_param_def_id.to_def_id()];\n+                                    param_const.index < defaulted_param_idx\n+                                }\n+                                _ => bug!(\n+                                    \"`ConstArgHasType` in `predicates_of`\\\n+                                 that isn't a `Param` const\"\n+                                ),\n+                            }\n+                        } else {\n+                            true\n+                        }\n+                    })\n+                    .cloned();\n+                return GenericPredicates {\n+                    parent: parent_preds.parent,\n+                    predicates: { tcx.arena.alloc_from_iter(filtered_predicates) },\n+                };\n             }\n \n             let parent_def_kind = tcx.def_kind(parent_def_id);"}, {"sha": "4741e4b095d22afc0bee5cee96d203719457da3e", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -496,6 +496,16 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n                 )\n                 .emit();\n         }\n+        ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => {\n+            // FIXME(min_specialization), FIXME(const_generics):\n+            // It probably isn't right to allow _every_ `ConstArgHasType` but I am somewhat unsure\n+            // about the actual rules that would be sound. Can't just always error here because otherwise\n+            // std/core doesn't even compile as they have `const N: usize` in some specializing impls.\n+            //\n+            // While we do not support constructs like `<T, const N: T>` there is probably no risk of\n+            // soundness bugs, but when we support generic const parameter types this will need to be\n+            // revisited.\n+        }\n         _ => {\n             tcx.sess\n                 .struct_span_err(span, &format!(\"cannot specialize on predicate `{}`\", predicate))\n@@ -517,6 +527,7 @@ fn trait_predicate_kind<'tcx>(\n         ty::PredicateKind::Clause(ty::Clause::RegionOutlives(_))\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_))\n         | ty::PredicateKind::Clause(ty::Clause::Projection(_))\n+        | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n         | ty::PredicateKind::AliasEq(..)\n         | ty::PredicateKind::WellFormed(_)\n         | ty::PredicateKind::Subtype(_)"}, {"sha": "9ee6785970c46b562a5343fa73ff435c6ef337a2", "filename": "compiler/rustc_hir_analysis/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -54,6 +54,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n \n                     ty::PredicateKind::Clause(ty::Clause::Trait(..))\n                     | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n+                    | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                     | ty::PredicateKind::WellFormed(..)\n                     | ty::PredicateKind::AliasEq(..)\n                     | ty::PredicateKind::ObjectSafe(..)"}, {"sha": "5b641be062be6921f4fc27fbd7269c924733b137", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -663,6 +663,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 ty::PredicateKind::Clause(ty::Clause::Trait(..))\n                 | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))"}, {"sha": "0e3a16ac7172d49693e1c59d8fb9c42129ef9659", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -826,6 +826,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     }\n                 }\n                 ty::PredicateKind::Subtype(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                 | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))"}, {"sha": "83f3d5a74fb48d9a25e422758cc988172c963e8e", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -21,6 +21,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n         .filter_map(move |kind| match kind {\n             ty::PredicateKind::Clause(ty::Clause::Projection(..))\n             | ty::PredicateKind::Clause(ty::Clause::Trait(..))\n+            | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n             | ty::PredicateKind::AliasEq(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::Subtype(..)"}, {"sha": "c1f0a6e98340de4396e21fb4708bf74a5c0a73dd", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -297,6 +297,9 @@ impl<'tcx> Elaborator<'tcx> {\n             ty::PredicateKind::AliasEq(..) => {\n                 // No\n             }\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => {\n+                // Nothing to elaborate\n+            }\n         }\n     }\n }"}, {"sha": "11fb1f80a111d2741b60af075534eee3aba61ccd", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -1595,6 +1595,8 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     Clause(Clause::TypeOutlives(..)) |\n                     Clause(Clause::RegionOutlives(..)) => \"lifetime\",\n \n+                    // `ConstArgHasType` is never global as `ct` is always a param\n+                    Clause(Clause::ConstArgHasType(..)) |\n                     // Ignore projections, as they can only be global\n                     // if the trait bound is global\n                     Clause(Clause::Projection(..)) |"}, {"sha": "91241ff404f4cbd485a50fa6b0f8b84ca27ef81e", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -251,6 +251,10 @@ impl FlagComputation {\n                 self.add_ty(ty);\n                 self.add_region(region);\n             }\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n+                self.add_const(ct);\n+                self.add_ty(ty);\n+            }\n             ty::PredicateKind::Subtype(ty::SubtypePredicate { a_is_expected: _, a, b }) => {\n                 self.add_ty(a);\n                 self.add_ty(b);"}, {"sha": "4b4f62b67f21ea97f0b426d5ac44a4aa5fd76e26", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -552,6 +552,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::Clause(Clause::RegionOutlives(_))\n             | PredicateKind::Clause(Clause::TypeOutlives(_))\n             | PredicateKind::Clause(Clause::Projection(_))\n+            | PredicateKind::Clause(Clause::ConstArgHasType(..))\n             | PredicateKind::AliasEq(..)\n             | PredicateKind::ObjectSafe(_)\n             | PredicateKind::ClosureKind(_, _, _)\n@@ -590,6 +591,10 @@ pub enum Clause<'tcx> {\n     /// `where <T as TraitRef>::Name == X`, approximately.\n     /// See the `ProjectionPredicate` struct for details.\n     Projection(ProjectionPredicate<'tcx>),\n+\n+    /// Ensures that a const generic argument to a parameter `const N: u8`\n+    /// is of type `u8`.\n+    ConstArgHasType(Const<'tcx>, Ty<'tcx>),\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n@@ -1193,6 +1198,7 @@ impl<'tcx> Predicate<'tcx> {\n         match predicate.skip_binder() {\n             PredicateKind::Clause(Clause::Trait(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Projection(..))\n+            | PredicateKind::Clause(Clause::ConstArgHasType(..))\n             | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n@@ -1213,6 +1219,7 @@ impl<'tcx> Predicate<'tcx> {\n         match predicate.skip_binder() {\n             PredicateKind::Clause(Clause::Projection(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Trait(..))\n+            | PredicateKind::Clause(Clause::ConstArgHasType(..))\n             | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n@@ -1233,6 +1240,7 @@ impl<'tcx> Predicate<'tcx> {\n         match predicate.skip_binder() {\n             PredicateKind::Clause(Clause::TypeOutlives(data)) => Some(predicate.rebind(data)),\n             PredicateKind::Clause(Clause::Trait(..))\n+            | PredicateKind::Clause(Clause::ConstArgHasType(..))\n             | PredicateKind::Clause(Clause::Projection(..))\n             | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)"}, {"sha": "1e59983583b14c5d3a2fa81f9e27fbee66468935", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -2822,15 +2822,18 @@ define_print_and_forward_display! {\n             ty::PredicateKind::Clause(ty::Clause::RegionOutlives(predicate)) => p!(print(predicate)),\n             ty::PredicateKind::Clause(ty::Clause::TypeOutlives(predicate)) => p!(print(predicate)),\n             ty::PredicateKind::Clause(ty::Clause::Projection(predicate)) => p!(print(predicate)),\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n+                p!(\"the constant `\", print(ct), \"` has type `\", print(ty), \"`\")\n+            },\n             ty::PredicateKind::WellFormed(arg) => p!(print(arg), \" well-formed\"),\n             ty::PredicateKind::ObjectSafe(trait_def_id) => {\n                 p!(\"the trait `\", print_def_path(trait_def_id, &[]), \"` is object-safe\")\n             }\n-            ty::PredicateKind::ClosureKind(closure_def_id, _closure_substs, kind) => {\n-                p!(\"the closure `\",\n+            ty::PredicateKind::ClosureKind(closure_def_id, _closure_substs, kind) => p!(\n+                \"the closure `\",\n                 print_value_path(closure_def_id, &[]),\n-                write(\"` implements the trait `{}`\", kind))\n-            }\n+                write(\"` implements the trait `{}`\", kind)\n+            ),\n             ty::PredicateKind::ConstEvaluatable(ct) => {\n                 p!(\"the constant `\", print(ct), \"` can be evaluated\")\n             }"}, {"sha": "d8dbd04f43897b7e7fd69c20092ef0d92683c775", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -147,6 +147,7 @@ impl<'tcx> fmt::Debug for ty::Predicate<'tcx> {\n impl<'tcx> fmt::Debug for ty::Clause<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n+            ty::Clause::ConstArgHasType(ct, ty) => write!(f, \"ConstArgHasType({ct:?}, {ty:?})\"),\n             ty::Clause::Trait(ref a) => a.fmt(f),\n             ty::Clause::RegionOutlives(ref pair) => pair.fmt(f),\n             ty::Clause::TypeOutlives(ref pair) => pair.fmt(f),"}, {"sha": "58dfca75c65f7188d6ae6be8a11847042101740b", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -159,9 +159,21 @@ where\n                 _region,\n             ))) => ty.visit_with(self),\n             ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..)) => ControlFlow::Continue(()),\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n+                ct.visit_with(self)?;\n+                ty.visit_with(self)\n+            }\n             ty::PredicateKind::ConstEvaluatable(ct) => ct.visit_with(self),\n             ty::PredicateKind::WellFormed(arg) => arg.visit_with(self),\n-            _ => bug!(\"unexpected predicate: {:?}\", predicate),\n+\n+            ty::PredicateKind::ObjectSafe(_)\n+            | ty::PredicateKind::ClosureKind(_, _, _)\n+            | ty::PredicateKind::Subtype(_)\n+            | ty::PredicateKind::Coerce(_)\n+            | ty::PredicateKind::ConstEquate(_, _)\n+            | ty::PredicateKind::TypeWellFormedFromEnv(_)\n+            | ty::PredicateKind::Ambiguous\n+            | ty::PredicateKind::AliasEq(_, _) => bug!(\"unexpected predicate: {:?}\", predicate),\n         }\n     }\n "}, {"sha": "6890811fd046e581898138c7e2da3a19540087b4", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -25,7 +25,7 @@ use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::Obligation;\n use rustc_middle::infer::canonical::Certainty as OldCertainty;\n use rustc_middle::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{\n     CoercePredicate, RegionOutlivesPredicate, SubtypePredicate, ToPredicate, TypeOutlivesPredicate,\n };\n@@ -290,6 +290,9 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 ty::PredicateKind::Clause(ty::Clause::RegionOutlives(predicate)) => {\n                     self.compute_region_outlives_goal(Goal { param_env, predicate })\n                 }\n+                ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n+                    self.compute_const_arg_has_type_goal(Goal { param_env, predicate: (ct, ty) })\n+                }\n                 ty::PredicateKind::Subtype(predicate) => {\n                     self.compute_subtype_goal(Goal { param_env, predicate })\n                 }\n@@ -471,6 +474,16 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    fn compute_const_arg_has_type_goal(\n+        &mut self,\n+        goal: Goal<'tcx, (ty::Const<'tcx>, Ty<'tcx>)>,\n+    ) -> QueryResult<'tcx> {\n+        let (ct, ty) = goal.predicate;\n+        let nested_goals = self.infcx.eq(goal.param_env, ct.ty(), ty)?;\n+        self.evaluate_all_and_make_canonical_response(nested_goals)\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}, {"sha": "9776cc57af8e8618e367501c2c6c41885db187a6", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -830,6 +830,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 // and these don't correspond to adding any new bounds to\n                 // the `ParamEnv`.\n                 ty::PredicateKind::WellFormed(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ClosureKind(..)"}, {"sha": "2511e9a955a56471709e8206a75c49c19eaa861a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -1282,6 +1282,13 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         span,\n                         \"AliasEq predicate should never be the predicate cause of a SelectionError\"\n                     ),\n+\n+                    ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n+                        self.tcx.sess.struct_span_err(\n+                            span,\n+                            &format!(\"the constant `{}` is not of type `{}`\", ct, ty),\n+                        )\n+                    }\n                 }\n             }\n "}, {"sha": "deeed930e50e240a88e7858a87fe74283c45902f", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -313,6 +313,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 }\n                 ty::PredicateKind::Clause(ty::Clause::RegionOutlives(_))\n                 | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_))\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::WellFormed(_)\n                 | ty::PredicateKind::ObjectSafe(_)\n                 | ty::PredicateKind::ClosureKind(..)\n@@ -600,6 +601,19 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 ty::PredicateKind::AliasEq(..) => {\n                     bug!(\"AliasEq is only used for new solver\")\n                 }\n+                ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n+                    match self\n+                        .selcx\n+                        .infcx\n+                        .at(&obligation.cause, obligation.param_env)\n+                        .eq(ct.ty(), ty)\n+                    {\n+                        Ok(inf_ok) => ProcessResult::Changed(mk_pending(inf_ok.into_obligations())),\n+                        Err(_) => ProcessResult::Error(FulfillmentErrorCode::CodeSelectionError(\n+                            SelectionError::Unimplemented,\n+                        )),\n+                    }\n+                }\n             },\n         }\n     }"}, {"sha": "93c3364de8f5f0e617598c12910b19b479c5af7e", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -327,6 +327,10 @@ fn predicate_references_self<'tcx>(\n             // possible alternatives.\n             data.projection_ty.substs[1..].iter().any(has_self_ty).then_some(sp)\n         }\n+        ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(_ct, ty)) => {\n+            has_self_ty(&ty.into()).then_some(sp)\n+        }\n+\n         ty::PredicateKind::AliasEq(..) => bug!(\"`AliasEq` not allowed as assumption\"),\n \n         ty::PredicateKind::WellFormed(..)\n@@ -362,6 +366,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n                 trait_pred.def_id() == sized_def_id && trait_pred.self_ty().is_param(0)\n             }\n             ty::PredicateKind::Clause(ty::Clause::Projection(..))\n+            | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))"}, {"sha": "e6fc9bb92397941443689ac1dcf793ffdacf4445", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -993,6 +993,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     bug!(\"AliasEq is only used for new solver\")\n                 }\n                 ty::PredicateKind::Ambiguous => Ok(EvaluatedToAmbig),\n+                ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n+                    match self.infcx.at(&obligation.cause, obligation.param_env).eq(ct.ty(), ty) {\n+                        Ok(inf_ok) => self.evaluate_predicates_recursively(\n+                            previous_stack,\n+                            inf_ok.into_obligations(),\n+                        ),\n+                        Err(_) => Ok(EvaluatedToErr),\n+                    }\n+                }\n             }\n         })\n     }"}, {"sha": "6a881c233db093eed446a5b0345d451068a371af", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -163,6 +163,10 @@ pub fn predicate_obligations<'tcx>(\n                 ty::TermKind::Const(c) => c.into(),\n             })\n         }\n+        ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(ct, ty)) => {\n+            wf.compute(ct.into());\n+            wf.compute(ty.into());\n+        }\n         ty::PredicateKind::WellFormed(arg) => {\n             wf.compute(arg);\n         }\n@@ -922,6 +926,7 @@ pub(crate) fn required_region_bounds<'tcx>(\n             match obligation.predicate.kind().skip_binder() {\n                 ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                 | ty::PredicateKind::Clause(ty::Clause::Trait(..))\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::WellFormed(..)"}, {"sha": "7635f4bfec3bad4df60b59394f0b487426708549", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -117,6 +117,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                     )),\n                 },\n                 ty::PredicateKind::ObjectSafe(..)\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)\n@@ -212,6 +213,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             // We can defer this, but ultimately we'll want to express\n             // some of these in terms of chalk operations.\n             ty::PredicateKind::ClosureKind(..)\n+            | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n             | ty::PredicateKind::AliasEq(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n@@ -646,6 +648,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n                 Some(chalk_ir::WhereClause::AliasEq(predicate.lower_into(interner)))\n             }\n             ty::PredicateKind::WellFormed(_ty) => None,\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n             ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::AliasEq(..)\n@@ -780,6 +783,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n             }\n             ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_predicate)) => None,\n             ty::PredicateKind::WellFormed(_ty) => None,\n+            ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n             ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n             | ty::PredicateKind::AliasEq(..)"}, {"sha": "abf0c1c5f3e9ad55820d4fa35fa24aaf1df4923b", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -99,6 +99,9 @@ fn compute_implied_outlives_bounds<'tcx>(\n             };\n             match pred {\n                 ty::PredicateKind::Clause(ty::Clause::Trait(..))\n+                // FIXME(const_generics): Make sure that `<'a, 'b, const N: &'a &'b u32>` is sound\n+                // if we ever support that\n+                | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::Clause(ty::Clause::Projection(..))"}, {"sha": "2c18a034050742ea2a184d019245bfba4259fd89", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -60,6 +60,7 @@ fn not_outlives_predicate(p: ty::Predicate<'_>) -> bool {\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..)) => false,\n         ty::PredicateKind::Clause(ty::Clause::Trait(..))\n         | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n+        | ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..))\n         | ty::PredicateKind::AliasEq(..)\n         | ty::PredicateKind::WellFormed(..)\n         | ty::PredicateKind::ObjectSafe(..)"}, {"sha": "0c70d31ed607e413c180f10e5009cd7a1fc89456", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -320,6 +320,7 @@ pub(crate) fn clean_predicate<'tcx>(\n         // FIXME(generic_const_exprs): should this do something?\n         ty::PredicateKind::ConstEvaluatable(..) => None,\n         ty::PredicateKind::WellFormed(..) => None,\n+        ty::PredicateKind::Clause(ty::Clause::ConstArgHasType(..)) => None,\n \n         ty::PredicateKind::Subtype(..)\n         | ty::PredicateKind::AliasEq(..)"}, {"sha": "1a35fe05067fc2ec715765c4c3321dd8cc57a6db", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -30,7 +30,8 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n                     ty::Clause::RegionOutlives(_)\n                     | ty::Clause::TypeOutlives(_)\n                     | ty::Clause::Projection(_)\n-                    | ty::Clause::Trait(..),\n+                    | ty::Clause::Trait(..)\n+                    | ty::Clause::ConstArgHasType(..),\n                 )\n                 | ty::PredicateKind::WellFormed(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)"}, {"sha": "257a9e31e14b2a842cae9abf99bded3f33dc30fc", "filename": "tests/ui/const-generics/nested-type.min.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/tests%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/tests%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fnested-type.min.stderr?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -1,3 +1,11 @@\n+error[E0015]: cannot call non-const fn `Foo::{constant#0}::Foo::<17>::value` in constants\n+  --> $DIR/nested-type.rs:15:5\n+   |\n+LL |     Foo::<17>::value()\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+\n error: `[u8; {\n            struct Foo<const N: usize>;\n        \n@@ -24,5 +32,6 @@ LL | | }]>;\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "5240f5c3b0b64b8d4cc3919b3cd167ecdfb3ce15", "filename": "tests/ui/const-generics/nested-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/tests%2Fui%2Fconst-generics%2Fnested-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3/tests%2Fui%2Fconst-generics%2Fnested-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fnested-type.rs?ref=f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "patch": "@@ -13,7 +13,7 @@ struct Foo<const N: [u8; { //[min]~ ERROR `[u8; _]` is forbidden\n     }\n \n     Foo::<17>::value()\n-    //[full]~^ ERROR cannot call non-const fn\n+    //~^ ERROR cannot call non-const fn\n }]>;\n \n fn main() {}"}]}