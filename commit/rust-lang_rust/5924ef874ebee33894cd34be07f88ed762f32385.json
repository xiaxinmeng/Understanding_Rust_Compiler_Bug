{"sha": "5924ef874ebee33894cd34be07f88ed762f32385", "node_id": "C_kwDOAAsO6NoAKDU5MjRlZjg3NGViZWUzMzg5NGNkMzRiZTA3Zjg4ZWQ3NjJmMzIzODU", "commit": {"author": {"name": "Takayuki Maeda", "email": "41065217+TaKO8Ki@users.noreply.github.com", "date": "2022-04-18T03:51:12Z"}, "committer": {"name": "Takayuki Maeda", "email": "41065217+TaKO8Ki@users.noreply.github.com", "date": "2022-04-18T03:51:12Z"}, "message": "stop using `Autoderef`", "tree": {"sha": "81b7156ad215bb47e43b977f695cddb33c1b2483", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81b7156ad215bb47e43b977f695cddb33c1b2483"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5924ef874ebee33894cd34be07f88ed762f32385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5924ef874ebee33894cd34be07f88ed762f32385", "html_url": "https://github.com/rust-lang/rust/commit/5924ef874ebee33894cd34be07f88ed762f32385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5924ef874ebee33894cd34be07f88ed762f32385/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59cc5774b2b599e697db5175c331f5f98e42001", "url": "https://api.github.com/repos/rust-lang/rust/commits/a59cc5774b2b599e697db5175c331f5f98e42001", "html_url": "https://github.com/rust-lang/rust/commit/a59cc5774b2b599e697db5175c331f5f98e42001"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "151adb69aa932e8f27a02ed9b3d489bd08c00003", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5924ef874ebee33894cd34be07f88ed762f32385/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5924ef874ebee33894cd34be07f88ed762f32385/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=5924ef874ebee33894cd34be07f88ed762f32385", "patch": "@@ -2055,35 +2055,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             && let (Some(span), true) = (ti.span, ti.origin_expr)\n             && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span)\n         {\n-            let any_target_ty = Autoderef::new(\n-                &self.infcx,\n-                self.param_env,\n-                self.body_id,\n-                span,\n-                self.resolve_vars_if_possible(ti.expected),\n-                span,\n-            )\n-            .any(|(ty, _)| {\n-                debug!(\"kind={:?}\", ty.kind());\n-                match ty.kind() {\n-                    ty::Adt(adt_def, _)\n-                        if self.tcx.is_diagnostic_item(sym::Option, adt_def.did())\n-                            || self.tcx.is_diagnostic_item(sym::Result, adt_def.did()) =>\n-                    {\n-                        // Slicing won't work here, but `.as_deref()` might (issue #91328).\n-                        err.span_suggestion(\n-                            span,\n-                            \"consider using `as_deref` here\",\n-                            format!(\"{snippet}.as_deref()\"),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        false\n-                    }\n-                    _ => self.is_slice_or_array_or_vector(ty),\n+            let ty = self.resolve_vars_if_possible(ti.expected);\n+            let is_slice_or_array_or_vector = self.is_slice_or_array_or_vector(&mut err, snippet.clone(), ty);\n+            match is_slice_or_array_or_vector.1.kind() {\n+                ty::Adt(adt_def, _)\n+                    if self.tcx.is_diagnostic_item(sym::Option, adt_def.did())\n+                        || self.tcx.is_diagnostic_item(sym::Result, adt_def.did()) =>\n+                {\n+                    // Slicing won't work here, but `.as_deref()` might (issue #91328).\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider using `as_deref` here\",\n+                        format!(\"{snippet}.as_deref()\"),\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n-            });\n-\n-            if any_target_ty {\n+                _ => ()\n+            }\n+            if is_slice_or_array_or_vector.0 {\n                 err.span_suggestion(\n                     span,\n                     \"consider slicing here\",\n@@ -2096,12 +2085,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n-    fn is_slice_or_array_or_vector(&self, ty: Ty<'tcx>) -> bool {\n+    fn is_slice_or_array_or_vector(\n+        &self,\n+        err: &mut Diagnostic,\n+        snippet: String,\n+        ty: Ty<'tcx>,\n+    ) -> (bool, Ty<'tcx>) {\n         match ty.kind() {\n-            ty::Adt(adt_def, _) if self.tcx.is_diagnostic_item(sym::Vec, adt_def.did()) => true,\n-            ty::Ref(_, ty, _) => self.is_slice_or_array_or_vector(*ty),\n-            ty::Slice(..) | ty::Array(..) => true,\n-            _ => false,\n+            ty::Adt(adt_def, _) if self.tcx.is_diagnostic_item(sym::Vec, adt_def.did()) => {\n+                (true, ty)\n+            }\n+            ty::Ref(_, ty, _) => self.is_slice_or_array_or_vector(err, snippet, *ty),\n+            ty::Slice(..) | ty::Array(..) => (true, ty),\n+            _ => (false, ty),\n         }\n     }\n }"}]}