{"sha": "ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNDI5MDU2ZmZhMTY2YTlkM2ExNWM4NjQxYTgzOGE3YTJmNWY4NmU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-03-22T23:18:37Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-03-23T09:41:23Z"}, "message": "iter: remove `to_owned_vec`\n\nThis needs to be removed as part of removing `~[T]`. Partial type hints\nare now allowed, and will remove the need to add a version of this\nmethod for `Vec<T>`. For now, this involves a few workarounds for\npartial type hints not completely working.", "tree": {"sha": "50c0bc32881b66d226081b4fd040532c1d908a32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50c0bc32881b66d226081b4fd040532c1d908a32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "html_url": "https://github.com/rust-lang/rust/commit/ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f", "html_url": "https://github.com/rust-lang/rust/commit/7e7a5e3d3eabe0ee46474b0eb701c159a45b490f"}], "stats": {"total": 109, "additions": 48, "deletions": 61}, "files": [{"sha": "53fb20b16a79453e7ee442316d47859c856c7b34", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -452,7 +452,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n         let options_to_remove = [~\"-O\", ~\"-g\", ~\"--debuginfo\"];\n         let new_options = split_maybe_args(options).move_iter()\n                                                    .filter(|x| !options_to_remove.contains(x))\n-                                                   .to_owned_vec()\n+                                                   .collect::<~[~str]>()\n                                                    .connect(\" \");\n         Some(new_options)\n     }"}, {"sha": "1411fe89e6bb5dc0717d99e3f7ca3d1e9f7a7f81", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -223,7 +223,7 @@ impl Pattern {\n      */\n     pub fn new(pattern: &str) -> Pattern {\n \n-        let chars = pattern.chars().to_owned_vec();\n+        let chars = pattern.chars().collect::<~[_]>();\n         let mut tokens = Vec::new();\n         let mut i = 0;\n "}, {"sha": "f58d007c9363929bc1f6cc920fe50aa61cde84fa", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -826,7 +826,7 @@ mod test {\n         let max_val = 100;\n \n         let mut r = task_rng();\n-        let vals = range(min_val, max_val).to_owned_vec();\n+        let vals = range(min_val, max_val).collect::<~[int]>();\n         let small_sample = r.sample(vals.iter(), 5);\n         let large_sample = r.sample(vals.iter(), vals.len() + 5);\n "}, {"sha": "958c6373a8c9a194d409f975b3662b95c6dd38aa", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -197,7 +197,7 @@ fn visit_item(e: &Env, i: &ast::Item) {\n                 } else {\n                     None\n                 })\n-                .to_owned_vec();\n+                .collect::<~[&ast::Attribute]>();\n             for m in link_args.iter() {\n                 match m.value_str() {\n                     Some(linkarg) => e.sess.cstore.add_used_link_args(linkarg.get()),\n@@ -212,7 +212,7 @@ fn visit_item(e: &Env, i: &ast::Item) {\n                 } else {\n                     None\n                 })\n-                .to_owned_vec();\n+                .collect::<~[&ast::Attribute]>();\n             for m in link_args.iter() {\n                 match m.meta_item_list() {\n                     Some(items) => {"}, {"sha": "a00bcdd7037d8be693842666016adc81f6dc255d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -236,7 +236,7 @@ fn get_extern_rust_fn(ccx: &CrateContext, inputs: &[ty::t], output: ty::t,\n \n     let f = decl_rust_fn(ccx, false, inputs, output, name);\n     csearch::get_item_attrs(&ccx.sess().cstore, did, |meta_items| {\n-        set_llvm_fn_attrs(meta_items.iter().map(|&x| attr::mk_attr(x)).to_owned_vec(), f)\n+        set_llvm_fn_attrs(meta_items.iter().map(|&x| attr::mk_attr(x)).collect::<~[_]>(), f)\n     });\n \n     ccx.externs.borrow_mut().insert(name.to_owned(), f);"}, {"sha": "dc154206e71175d44cc3f38265c8d7e38a47f144", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -538,7 +538,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n               };\n \n               expr::with_field_tys(tcx, ety, Some(e.id), |discr, field_tys| {\n-                  let cs = field_tys.iter().enumerate()\n+                  let (cs, inlineable) = slice::unzip(field_tys.iter().enumerate()\n                       .map(|(ix, &field_ty)| {\n                       match fs.iter().find(|f| field_ty.ident.name == f.ident.node.name) {\n                           Some(f) => const_expr(cx, (*f).expr, is_local),\n@@ -552,8 +552,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n                               }\n                           }\n                       }\n-                  }).to_owned_vec();\n-                  let (cs, inlineable) = slice::unzip(cs.move_iter());\n+                  }));\n                   (adt::trans_const(cx, repr, discr, cs),\n                    inlineable.iter().fold(true, |a, &b| a && b))\n               })"}, {"sha": "b162d9d4b789567a09bcb44496f17cf60df39091", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -133,7 +133,7 @@ pub fn render(w: &mut io::Writer, s: &str, print_toc: bool) -> fmt::Result {\n             slice::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n                 let text = str::from_utf8(text).unwrap();\n                 let mut lines = text.lines().filter(|l| stripped_filtered_line(*l).is_none());\n-                let text = lines.to_owned_vec().connect(\"\\n\");\n+                let text = lines.collect::<~[&str]>().connect(\"\\n\");\n \n                 let buf = buf {\n                     data: text.as_bytes().as_ptr(),\n@@ -186,7 +186,7 @@ pub fn render(w: &mut io::Writer, s: &str, print_toc: bool) -> fmt::Result {\n                 Some(s) => s.to_lower().into_str(),\n                 None => s.to_owned()\n             }\n-        }).to_owned_vec().connect(\"-\");\n+        }).collect::<~[~str]>().connect(\"-\");\n \n         let opaque = unsafe {&mut *(opaque as *mut my_opaque)};\n \n@@ -284,7 +284,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n                 let tests = &mut *(opaque as *mut ::test::Collector);\n                 let text = str::from_utf8(text).unwrap();\n                 let mut lines = text.lines().map(|l| stripped_filtered_line(l).unwrap_or(l));\n-                let text = lines.to_owned_vec().connect(\"\\n\");\n+                let text = lines.collect::<~[&str]>().connect(\"\\n\");\n                 tests.add_test(text, should_fail, no_run);\n             })\n         }"}, {"sha": "66b965633a0d9a53bf3369c8ef45243922a1473c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -1205,8 +1205,8 @@ fn item_trait(w: &mut Writer, it: &clean::Item,\n                   it.name.get_ref().as_slice(),\n                   t.generics,\n                   parents));\n-    let required = t.methods.iter().filter(|m| m.is_req()).to_owned_vec();\n-    let provided = t.methods.iter().filter(|m| !m.is_req()).to_owned_vec();\n+    let required = t.methods.iter().filter(|m| m.is_req()).collect::<~[&clean::TraitMethod]>();\n+    let provided = t.methods.iter().filter(|m| !m.is_req()).collect::<~[&clean::TraitMethod]>();\n \n     if t.methods.len() == 0 {\n         try!(write!(w, \"\\\\{ \\\\}\"));\n@@ -1502,11 +1502,11 @@ fn render_methods(w: &mut Writer, it: &clean::Item) -> fmt::Result {\n                 let mut non_trait = v.iter().filter(|p| {\n                     p.ref0().trait_.is_none()\n                 });\n-                let non_trait = non_trait.to_owned_vec();\n+                let non_trait = non_trait.collect::<~[&(clean::Impl, Option<~str>)]>();\n                 let mut traits = v.iter().filter(|p| {\n                     p.ref0().trait_.is_some()\n                 });\n-                let traits = traits.to_owned_vec();\n+                let traits = traits.collect::<~[&(clean::Impl, Option<~str>)]>();\n \n                 if non_trait.len() > 0 {\n                     try!(write!(w, \"<h2 id='methods'>Methods</h2>\"));"}, {"sha": "85df875dc1d62fb1514c299ec3e031e35e52089f", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -400,7 +400,7 @@ unsafe fn str_map_bytes(string: ~str, map: &'static [u8]) -> ~str {\n \n #[inline]\n unsafe fn str_copy_map_bytes(string: &str, map: &'static [u8]) -> ~str {\n-    let bytes = string.bytes().map(|b| map[b]).to_owned_vec();\n+    let bytes = string.bytes().map(|b| map[b]).collect::<~[_]>();\n \n     str::raw::from_utf8_owned(bytes)\n }"}, {"sha": "ead26fb920cd7a484aec91003c3a1ce563d043d8", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -463,21 +463,6 @@ pub trait Iterator<A> {\n         FromIterator::from_iterator(self)\n     }\n \n-    /// Loops through the entire iterator, collecting all of the elements into\n-    /// a unique vector. This is simply collect() specialized for vectors.\n-    ///\n-    /// # Example\n-    ///\n-    /// ```rust\n-    /// let a = [1, 2, 3, 4, 5];\n-    /// let b: ~[int] = a.iter().map(|&x| x).to_owned_vec();\n-    /// assert!(a == b);\n-    /// ```\n-    #[inline]\n-    fn to_owned_vec(&mut self) -> ~[A] {\n-        self.collect()\n-    }\n-\n     /// Loops through `n` iterations, returning the `n`th element of the\n     /// iterator.\n     ///"}, {"sha": "fd9423ad3e7c9b9f572be52b77b3bc9d1bf66f56", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -1177,26 +1177,26 @@ mod tests {\n             (s: $path:expr, $exp:expr) => (\n                 {\n                     let path = Path::new($path);\n-                    let comps = path.components().to_owned_vec();\n+                    let comps = path.components().collect::<~[&[u8]]>();\n                     let exp: &[&str] = $exp;\n-                    let exps = exp.iter().map(|x| x.as_bytes()).to_owned_vec();\n+                    let exps = exp.iter().map(|x| x.as_bytes()).collect::<~[&[u8]]>();\n                     assert!(comps == exps, \"components: Expected {:?}, found {:?}\",\n                             comps, exps);\n-                    let comps = path.rev_components().to_owned_vec();\n-                    let exps = exps.move_rev_iter().to_owned_vec();\n+                    let comps = path.rev_components().collect::<~[&[u8]]>();\n+                    let exps = exps.move_rev_iter().collect::<~[&[u8]]>();\n                     assert!(comps == exps, \"rev_components: Expected {:?}, found {:?}\",\n                             comps, exps);\n                 }\n             );\n             (v: [$($arg:expr),+], [$([$($exp:expr),*]),*]) => (\n                 {\n                     let path = Path::new(b!($($arg),+));\n-                    let comps = path.components().to_owned_vec();\n+                    let comps = path.components().collect::<~[&[u8]]>();\n                     let exp: &[&[u8]] = [$(b!($($exp),*)),*];\n                     assert!(comps.as_slice() == exp, \"components: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n-                    let comps = path.rev_components().to_owned_vec();\n-                    let exp = exp.rev_iter().map(|&x|x).to_owned_vec();\n+                    let comps = path.rev_components().collect::<~[&[u8]]>();\n+                    let exp = exp.rev_iter().map(|&x|x).collect::<~[&[u8]]>();\n                     assert!(comps.as_slice() == exp,\n                             \"rev_components: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n@@ -1226,13 +1226,13 @@ mod tests {\n             (v: [$($arg:expr),+], $exp:expr) => (\n                 {\n                     let path = Path::new(b!($($arg),+));\n-                    let comps = path.str_components().to_owned_vec();\n+                    let comps = path.str_components().collect::<~[Option<&str>]>();\n                     let exp: &[Option<&str>] = $exp;\n                     assert!(comps.as_slice() == exp,\n                             \"str_components: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n-                    let comps = path.rev_str_components().to_owned_vec();\n-                    let exp = exp.rev_iter().map(|&x|x).to_owned_vec();\n+                    let comps = path.rev_str_components().collect::<~[Option<&str>]>();\n+                    let exp = exp.rev_iter().map(|&x|x).collect::<~[Option<&str>]>();\n                     assert!(comps.as_slice() == exp,\n                             \"rev_str_components: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);"}, {"sha": "2a77f63acc2cf1fa5dde0d77c163ba21765b0d8f", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -2224,13 +2224,15 @@ mod tests {\n             (s: $path:expr, $exp:expr) => (\n                 {\n                     let path = Path::new($path);\n-                    let comps = path.str_components().map(|x|x.unwrap()).to_owned_vec();\n+                    let comps = path.str_components().map(|x|x.unwrap())\n+                                .collect::<~[&str]>();\n                     let exp: &[&str] = $exp;\n                     assert!(comps.as_slice() == exp,\n                             \"str_components: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n-                    let comps = path.rev_str_components().map(|x|x.unwrap()).to_owned_vec();\n-                    let exp = exp.rev_iter().map(|&x|x).to_owned_vec();\n+                    let comps = path.rev_str_components().map(|x|x.unwrap())\n+                                .collect::<~[&str]>();\n+                    let exp = exp.rev_iter().map(|&x|x).collect::<~[&str]>();\n                     assert!(comps.as_slice() == exp,\n                             \"rev_str_components: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n@@ -2239,13 +2241,14 @@ mod tests {\n             (v: [$($arg:expr),+], $exp:expr) => (\n                 {\n                     let path = Path::new(b!($($arg),+));\n-                    let comps = path.str_components().map(|x|x.unwrap()).to_owned_vec();\n+                    let comps = path.str_components().map(|x|x.unwrap()).collect::<~[&str]>();\n                     let exp: &[&str] = $exp;\n                     assert!(comps.as_slice() == exp,\n                             \"str_components: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n-                    let comps = path.rev_str_components().map(|x|x.unwrap()).to_owned_vec();\n-                    let exp = exp.rev_iter().map(|&x|x).to_owned_vec();\n+                    let comps = path.rev_str_components().map(|x|x.unwrap())\n+                                .collect::<~[&str]>();\n+                    let exp = exp.rev_iter().map(|&x|x).collect::<~[&str]>();\n                     assert!(comps.as_slice() == exp,\n                             \"rev_str_components: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n@@ -2299,12 +2302,12 @@ mod tests {\n             (s: $path:expr, $exp:expr) => (\n                 {\n                     let path = Path::new($path);\n-                    let comps = path.components().to_owned_vec();\n+                    let comps = path.components().collect::<~[&[u8]]>();\n                     let exp: &[&[u8]] = $exp;\n                     assert!(comps.as_slice() == exp, \"components: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);\n-                    let comps = path.rev_components().to_owned_vec();\n-                    let exp = exp.rev_iter().map(|&x|x).to_owned_vec();\n+                    let comps = path.rev_components().collect::<~[&[u8]]>();\n+                    let exp = exp.rev_iter().map(|&x|x).collect::<~[&[u8]]>();\n                     assert!(comps.as_slice() == exp,\n                             \"rev_components: Expected {:?}, found {:?}\",\n                             comps.as_slice(), exp);"}, {"sha": "83f2299ad7b1eb7b38df08e2da8ca6e038204bfa", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -436,7 +436,7 @@ impl ElementSwaps {\n             emit_reset: true,\n             sdir: range(0, length)\n                     .map(|i| SizeDirection{ size: i, dir: Neg })\n-                    .to_owned_vec()\n+                    .collect::<~[_]>()\n         }\n     }\n }\n@@ -3539,7 +3539,7 @@ mod tests {\n                         let n = task_rng().gen::<uint>() % 10;\n                         counts[n] += 1;\n                         (n, counts[n])\n-                    }).to_owned_vec();\n+                    }).collect::<~[(uint, int)]>();\n \n                 // only sort on the first element, so an unstable sort\n                 // may mix up the counts.\n@@ -4207,7 +4207,7 @@ mod tests {\n         assert_eq!(xs.capacity(), 128);\n         xs.shrink_to_fit();\n         assert_eq!(xs.capacity(), 100);\n-        assert_eq!(xs, range(0, 100).to_owned_vec());\n+        assert_eq!(xs, range(0, 100).collect::<~[_]>());\n     }\n \n     #[test]"}, {"sha": "6a3b4485a24ec5bb4d9f9ac72fd9e4637d246d74", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -937,7 +937,7 @@ impl<'a> Iterator<UTF16Item> for UTF16Items<'a> {\n ///          0x0073, 0xDD1E, 0x0069, 0x0063,\n ///          0xD834];\n ///\n-/// assert_eq!(str::utf16_items(v).to_owned_vec(),\n+/// assert_eq!(str::utf16_items(v).collect::<~[_]>(),\n ///            ~[ScalarValue('\ud834\udd1e'),\n ///              ScalarValue('m'), ScalarValue('u'), ScalarValue('s'),\n ///              LoneSurrogate(0xDD1E),"}, {"sha": "80a5b9ce3bbc5202d1c181a29a387cb7e37baa16", "filename": "src/libstd/sync/deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Flibstd%2Fsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fdeque.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -494,7 +494,7 @@ mod tests {\n                     }\n                 }\n             })\n-        }).to_owned_vec();\n+        }).collect::<~[Thread<()>]>();\n \n         while remaining.load(SeqCst) > 0 {\n             match w.pop() {\n@@ -525,7 +525,7 @@ mod tests {\n             Thread::start(proc() {\n                 stampede(w, s, 4, 10000);\n             })\n-        }).to_owned_vec();\n+        }).collect::<~[Thread<()>]>();\n \n         for thread in threads.move_iter() {\n             thread.join();\n@@ -556,7 +556,7 @@ mod tests {\n                     }\n                 }\n             })\n-        }).to_owned_vec();\n+        }).collect::<~[Thread<()>]>();\n \n         let mut rng = rand::task_rng();\n         let mut expected = 0;"}, {"sha": "62b01779ac25a6f8cf99e50ed92f18d26298aae2", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -76,7 +76,7 @@ fn main() {\n                 format!(\"{}\\t trees of depth {}\\t check: {}\",\n                         iterations * 2, depth, chk)\n             })\n-        }).to_owned_vec();\n+        }).collect::<~[Future<~str>]>();\n \n     for message in messages.mut_iter() {\n         println!(\"{}\", *message.get_ref());"}, {"sha": "2f3ddb8589cc28719781dc6f8a3ac9226491ebce", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -62,7 +62,7 @@ pub fn main() {\n \n     assert!(map.pop(&Slice(\"foo\")).is_some());\n     assert_eq!(map.move_iter().map(|(k, v)| k.to_str() + v.to_str())\n-                              .to_owned_vec()\n+                              .collect::<~[~str]>()\n                               .concat(),\n                ~\"abc50bcd51cde52def53\");\n }"}, {"sha": "1cd31195b56c5436e6680878becab39ff317e4dc", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae429056ffa166a9d3a15c8641a838a7a2f5f86e/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=ae429056ffa166a9d3a15c8641a838a7a2f5f86e", "patch": "@@ -21,7 +21,7 @@ impl to_str for int {\n \n impl<T:to_str> to_str for Vec<T> {\n     fn to_string(&self) -> ~str {\n-        format!(\"[{}]\", self.iter().map(|e| e.to_string()).to_owned_vec().connect(\", \"))\n+        format!(\"[{}]\", self.iter().map(|e| e.to_string()).collect::<~[~str]>().connect(\", \"))\n     }\n }\n "}]}