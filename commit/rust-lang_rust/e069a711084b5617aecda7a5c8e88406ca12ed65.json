{"sha": "e069a711084b5617aecda7a5c8e88406ca12ed65", "node_id": "C_kwDOAAsO6NoAKGUwNjlhNzExMDg0YjU2MTdhZWNkYTdhNWM4ZTg4NDA2Y2ExMmVkNjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-06T05:54:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-06T05:54:07Z"}, "message": "Auto merge of #93689 - matthiaskrgr:rollup-3pd1ept, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #91939 (Clarify error on casting larger integers to char)\n - #92300 (mips64-openwrt-linux-musl: Add Tier 3 target)\n - #92383 (Add new target armv7-unknown-linux-uclibceabi (softfloat))\n - #92651 (Remove \"up here\" arrow on item-infos)\n - #93556 (Change struct expr pretty printing to match rustfmt style)\n - #93649 (Add regression tests for issue 80309)\n - #93657 (Update CPU idle tracking for apple hosts)\n - #93659 (Refactor conditional)\n - #93669 (Resolve lifetimes for const generic defaults)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "042d13b207200b53e3e760bd9be25b1c0346a0ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/042d13b207200b53e3e760bd9be25b1c0346a0ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e069a711084b5617aecda7a5c8e88406ca12ed65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e069a711084b5617aecda7a5c8e88406ca12ed65", "html_url": "https://github.com/rust-lang/rust/commit/e069a711084b5617aecda7a5c8e88406ca12ed65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e069a711084b5617aecda7a5c8e88406ca12ed65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "719b04ca99be0c78e09a8ec5e2eda082a5d8ccae", "url": "https://api.github.com/repos/rust-lang/rust/commits/719b04ca99be0c78e09a8ec5e2eda082a5d8ccae", "html_url": "https://github.com/rust-lang/rust/commit/719b04ca99be0c78e09a8ec5e2eda082a5d8ccae"}, {"sha": "cbf4b4664068e255fac92f898b9a0e046680dd08", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf4b4664068e255fac92f898b9a0e046680dd08", "html_url": "https://github.com/rust-lang/rust/commit/cbf4b4664068e255fac92f898b9a0e046680dd08"}], "stats": {"total": 653, "additions": 522, "deletions": 131}, "files": [{"sha": "ddce86f216538fc0732ae216bfadccf336e65889", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -148,7 +148,7 @@ pub enum Breaks {\n     Inconsistent,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, PartialEq)]\n enum IndentStyle {\n     /// Vertically aligned under whatever column this block begins at.\n     ///\n@@ -164,19 +164,20 @@ enum IndentStyle {\n     Block { offset: isize },\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Default, PartialEq)]\n pub struct BreakToken {\n     offset: isize,\n     blank_space: isize,\n+    pre_break: Option<char>,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, PartialEq)]\n pub struct BeginToken {\n     indent: IndentStyle,\n     breaks: Breaks,\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, PartialEq)]\n pub enum Token {\n     // In practice a string token contains either a `&'static str` or a\n     // `String`. `Cow` is overkill for this because we never modify the data,\n@@ -313,6 +314,12 @@ impl Printer {\n         }\n     }\n \n+    pub fn offset(&mut self, offset: isize) {\n+        if let Some(BufEntry { token: Token::Break(token), .. }) = &mut self.buf.last_mut() {\n+            token.offset += offset;\n+        }\n+    }\n+\n     fn check_stream(&mut self) {\n         while self.right_total - self.left_total > self.space {\n             if *self.scan_stack.front().unwrap() == self.buf.index_of_first() {\n@@ -391,7 +398,9 @@ impl Printer {\n         if size > self.space {\n             self.print_stack.push(PrintFrame::Broken { indent: self.indent, breaks: token.breaks });\n             self.indent = match token.indent {\n-                IndentStyle::Block { offset } => (self.indent as isize + offset) as usize,\n+                IndentStyle::Block { offset } => {\n+                    usize::try_from(self.indent as isize + offset).unwrap()\n+                }\n                 IndentStyle::Visual => (MARGIN - self.space) as usize,\n             };\n         } else {\n@@ -415,6 +424,9 @@ impl Printer {\n             self.pending_indentation += token.blank_space;\n             self.space -= token.blank_space;\n         } else {\n+            if let Some(pre_break) = token.pre_break {\n+                self.out.push(pre_break);\n+            }\n             self.out.push('\\n');\n             let indent = self.indent as isize + token.offset;\n             self.pending_indentation = indent;"}, {"sha": "785e6886d8a3841ecac46ee1eeed4a9e033eeaa8", "filename": "compiler/rustc_ast_pretty/src/pp/convenience.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -3,20 +3,17 @@ use std::borrow::Cow;\n \n impl Printer {\n     /// \"raw box\"\n-    pub fn rbox(&mut self, indent: usize, breaks: Breaks) {\n-        self.scan_begin(BeginToken {\n-            indent: IndentStyle::Block { offset: indent as isize },\n-            breaks,\n-        })\n+    pub fn rbox(&mut self, indent: isize, breaks: Breaks) {\n+        self.scan_begin(BeginToken { indent: IndentStyle::Block { offset: indent }, breaks })\n     }\n \n     /// Inconsistent breaking box\n-    pub fn ibox(&mut self, indent: usize) {\n+    pub fn ibox(&mut self, indent: isize) {\n         self.rbox(indent, Breaks::Inconsistent)\n     }\n \n     /// Consistent breaking box\n-    pub fn cbox(&mut self, indent: usize) {\n+    pub fn cbox(&mut self, indent: isize) {\n         self.rbox(indent, Breaks::Consistent)\n     }\n \n@@ -25,7 +22,11 @@ impl Printer {\n     }\n \n     pub fn break_offset(&mut self, n: usize, off: isize) {\n-        self.scan_break(BreakToken { offset: off, blank_space: n as isize })\n+        self.scan_break(BreakToken {\n+            offset: off,\n+            blank_space: n as isize,\n+            ..BreakToken::default()\n+        });\n     }\n \n     pub fn end(&mut self) {\n@@ -66,12 +67,24 @@ impl Printer {\n     }\n \n     pub fn hardbreak_tok_offset(off: isize) -> Token {\n-        Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })\n+        Token::Break(BreakToken {\n+            offset: off,\n+            blank_space: SIZE_INFINITY,\n+            ..BreakToken::default()\n+        })\n+    }\n+\n+    pub fn trailing_comma(&mut self) {\n+        self.scan_break(BreakToken {\n+            blank_space: 1,\n+            pre_break: Some(','),\n+            ..BreakToken::default()\n+        });\n     }\n }\n \n impl Token {\n     pub fn is_hardbreak_tok(&self) -> bool {\n-        matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))\n+        *self == Printer::hardbreak_tok_offset(0)\n     }\n }"}, {"sha": "b2c62383fb69af5600a325f4223d730c3b5d590b", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -1,3 +1,4 @@\n+mod delimited;\n mod expr;\n mod item;\n \n@@ -23,6 +24,8 @@ use rustc_span::{BytePos, FileName, Span};\n \n use std::borrow::Cow;\n \n+pub use self::delimited::IterDelimited;\n+\n pub enum MacHeader<'a> {\n     Path(&'a ast::Path),\n     Keyword(&'static str),\n@@ -92,7 +95,7 @@ pub struct State<'a> {\n     ann: &'a (dyn PpAnn + 'a),\n }\n \n-crate const INDENT_UNIT: usize = 4;\n+crate const INDENT_UNIT: isize = 4;\n \n /// Requires you to pass an input filename and reader so that\n /// it can scan the input text for comments to copy forward."}, {"sha": "fe0640baaa1b0a0890cb485da741e0b0e5cf83af", "filename": "compiler/rustc_ast_pretty/src/pprust/state/delimited.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fdelimited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fdelimited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fdelimited.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -0,0 +1,41 @@\n+use std::iter::Peekable;\n+use std::mem;\n+use std::ops::Deref;\n+\n+pub struct Delimited<I: Iterator> {\n+    is_first: bool,\n+    iter: Peekable<I>,\n+}\n+\n+pub trait IterDelimited: Iterator + Sized {\n+    fn delimited(self) -> Delimited<Self> {\n+        Delimited { is_first: true, iter: self.peekable() }\n+    }\n+}\n+\n+impl<I: Iterator> IterDelimited for I {}\n+\n+pub struct IteratorItem<T> {\n+    value: T,\n+    pub is_first: bool,\n+    pub is_last: bool,\n+}\n+\n+impl<I: Iterator> Iterator for Delimited<I> {\n+    type Item = IteratorItem<I::Item>;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let value = self.iter.next()?;\n+        let is_first = mem::replace(&mut self.is_first, false);\n+        let is_last = self.iter.peek().is_none();\n+        Some(IteratorItem { value, is_first, is_last })\n+    }\n+}\n+\n+impl<T> Deref for IteratorItem<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.value\n+    }\n+}"}, {"sha": "44116fa76a0c1e0265d39cd8217cf5a1022644bf", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -1,5 +1,5 @@\n-use crate::pp::Breaks::{Consistent, Inconsistent};\n-use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n+use crate::pp::Breaks::Inconsistent;\n+use crate::pprust::state::{AnnNode, IterDelimited, PrintState, State, INDENT_UNIT};\n \n use rustc_ast::ptr::P;\n use rustc_ast::util::parser::{self, AssocOp, Fixity};\n@@ -117,38 +117,46 @@ impl<'a> State<'a> {\n         } else {\n             self.print_path(path, true, 0);\n         }\n+        self.nbsp();\n         self.word(\"{\");\n-        self.commasep_cmnt(\n-            Consistent,\n-            fields,\n-            |s, field| {\n-                s.print_outer_attributes(&field.attrs);\n-                s.ibox(INDENT_UNIT);\n-                if !field.is_shorthand {\n-                    s.print_ident(field.ident);\n-                    s.word_space(\":\");\n-                }\n-                s.print_expr(&field.expr);\n-                s.end();\n-            },\n-            |f| f.span,\n-        );\n-        match rest {\n-            ast::StructRest::Base(_) | ast::StructRest::Rest(_) => {\n-                self.ibox(INDENT_UNIT);\n-                if !fields.is_empty() {\n-                    self.word(\",\");\n-                    self.space();\n-                }\n-                self.word(\"..\");\n-                if let ast::StructRest::Base(ref expr) = *rest {\n-                    self.print_expr(expr);\n-                }\n-                self.end();\n+        let has_rest = match rest {\n+            ast::StructRest::Base(_) | ast::StructRest::Rest(_) => true,\n+            ast::StructRest::None => false,\n+        };\n+        if fields.is_empty() && !has_rest {\n+            self.word(\"}\");\n+            return;\n+        }\n+        self.cbox(0);\n+        for field in fields.iter().delimited() {\n+            self.maybe_print_comment(field.span.hi());\n+            self.print_outer_attributes(&field.attrs);\n+            if field.is_first {\n+                self.space_if_not_bol();\n+            }\n+            if !field.is_shorthand {\n+                self.print_ident(field.ident);\n+                self.word_nbsp(\":\");\n+            }\n+            self.print_expr(&field.expr);\n+            if !field.is_last || has_rest {\n+                self.word_space(\",\");\n+            } else {\n+                self.trailing_comma();\n             }\n-            ast::StructRest::None if !fields.is_empty() => self.word(\",\"),\n-            _ => {}\n         }\n+        if has_rest {\n+            if fields.is_empty() {\n+                self.space();\n+            }\n+            self.word(\"..\");\n+            if let ast::StructRest::Base(expr) = rest {\n+                self.print_expr(expr);\n+            }\n+            self.space();\n+        }\n+        self.offset(-INDENT_UNIT);\n+        self.end();\n         self.word(\"}\");\n     }\n "}, {"sha": "806f0001c60fda3ac92c55637efdcc4b6c79fdf2", "filename": "compiler/rustc_error_codes/src/error_codes/E0604.md", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0604.md", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0604.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0604.md?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -6,11 +6,16 @@ Erroneous code example:\n 0u32 as char; // error: only `u8` can be cast as `char`, not `u32`\n ```\n \n-As the error message indicates, only `u8` can be cast into `char`. Example:\n+`char` is a Unicode Scalar Value, an integer value from 0 to 0xD7FF and\n+0xE000 to 0x10FFFF. (The gap is for surrogate pairs.) Only `u8` always fits in\n+those ranges so only `u8` may be cast to `char`.\n+\n+To allow larger values, use `char::from_u32`, which checks the value is valid.\n \n ```\n-let c = 86u8 as char; // ok!\n-assert_eq!(c, 'V');\n+assert_eq!(86u8 as char, 'V'); // ok!\n+assert_eq!(char::from_u32(0x3B1), Some('\u03b1')); // ok!\n+assert_eq!(char::from_u32(0xD800), None); // not a USV.\n ```\n \n For more information about casts, take a look at the Type cast section in"}, {"sha": "13008a8337979dca2dc39f0640d436bb45c23dc0", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -139,7 +139,7 @@ impl<'a> PrintState<'a> for State<'a> {\n     }\n }\n \n-pub const INDENT_UNIT: usize = 4;\n+pub const INDENT_UNIT: isize = 4;\n \n /// Requires you to pass an input filename and reader so that\n /// it can scan the input text for comments to copy forward."}, {"sha": "f3d57139e08174bb315eb29077326172b17a08ef", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -1339,11 +1339,14 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             this.visit_ty(&ty);\n                         }\n                     }\n-                    GenericParamKind::Const { ref ty, .. } => {\n+                    GenericParamKind::Const { ref ty, default } => {\n                         let was_in_const_generic = this.is_in_const_generic;\n                         this.is_in_const_generic = true;\n                         walk_list!(this, visit_param_bound, param.bounds);\n                         this.visit_ty(&ty);\n+                        if let Some(default) = default {\n+                            this.visit_body(this.tcx.hir().body(default.body));\n+                        }\n                         this.is_in_const_generic = was_in_const_generic;\n                     }\n                 }"}, {"sha": "7faa8ed7a800e88a78d83758c4c8d9c237bfe00e", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_uclibceabi.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_uclibceabi.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -0,0 +1,23 @@\n+use crate::spec::{Target, TargetOptions};\n+\n+// This target is for uclibc Linux on ARMv7 without NEON,\n+// thumb-mode or hardfloat.\n+\n+pub fn target() -> Target {\n+    let base = super::linux_uclibc_base::opts();\n+    Target {\n+        llvm_target: \"armv7-unknown-linux-gnueabi\".to_string(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+\n+        options: TargetOptions {\n+            features: \"+v7,+thumb2,+soft-float,-neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n+            mcount: \"_mcount\".to_string(),\n+            abi: \"eabi\".to_string(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "1199ed44202f97b7affc6108b6dc610314693197", "filename": "compiler/rustc_target/src/spec/mips64_openwrt_linux_musl.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_openwrt_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_openwrt_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_openwrt_linux_musl.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -0,0 +1,26 @@\n+/// A target tuple for OpenWrt MIPS64 targets\n+///\n+use crate::abi::Endian;\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_musl_base::opts();\n+    base.cpu = \"mips64r2\".to_string();\n+    base.features = \"+mips64r2\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.crt_static_default = false;\n+\n+    Target {\n+        // LLVM doesn't recognize \"muslabi64\" yet.\n+        llvm_target: \"mips64-unknown-linux-musl\".to_string(),\n+        pointer_width: 64,\n+        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n+        arch: \"mips64\".to_string(),\n+        options: TargetOptions {\n+            abi: \"abi64\".to_string(),\n+            endian: Endian::Big,\n+            mcount: \"_mcount\".to_string(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "92ee3fd294bdf748ff65fd41b9ce59d0d8706e55", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -1013,9 +1013,12 @@ supported_targets! {\n \n     (\"armv6k-nintendo-3ds\", armv6k_nintendo_3ds),\n \n+    (\"armv7-unknown-linux-uclibceabi\", armv7_unknown_linux_uclibceabi),\n     (\"armv7-unknown-linux-uclibceabihf\", armv7_unknown_linux_uclibceabihf),\n \n     (\"x86_64-unknown-none\", x86_64_unknown_none),\n+\n+    (\"mips64-openwrt-linux-musl\", mips64_openwrt_linux_musl),\n }\n \n /// Warnings encountered when parsing the target `json`."}, {"sha": "be0b7733579b5cf321a33ab6b7f2c18ce598db52", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -328,16 +328,28 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 err.emit();\n             }\n             CastError::CastToChar => {\n-                type_error_struct!(\n+                let mut err = type_error_struct!(\n                     fcx.tcx.sess,\n                     self.span,\n                     self.expr_ty,\n                     E0604,\n                     \"only `u8` can be cast as `char`, not `{}`\",\n                     self.expr_ty\n-                )\n-                .span_label(self.span, \"invalid cast\")\n-                .emit();\n+                );\n+                err.span_label(self.span, \"invalid cast\");\n+                if self.expr_ty.is_numeric() {\n+                    err.span_help(\n+                        self.span,\n+                        if self.expr_ty == fcx.tcx.types.i8 {\n+                            \"try casting from `u8` instead\"\n+                        } else if self.expr_ty == fcx.tcx.types.u32 {\n+                            \"try `char::from_u32` instead\"\n+                        } else {\n+                            \"try `char::from_u32` instead (via a `u32`)\"\n+                        },\n+                    );\n+                }\n+                err.emit();\n             }\n             CastError::NonScalar => {\n                 let mut err = type_error_struct!("}, {"sha": "adfd895ead04e8b0e14f4d97be6382675036710d", "filename": "src/ci/cpu-usage-over-time.py", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Fci%2Fcpu-usage-over-time.py", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Fci%2Fcpu-usage-over-time.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fcpu-usage-over-time.py?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -108,37 +108,37 @@ def idle_since(self, prev):\n     from ctypes import *\n     libc = cdll.LoadLibrary('/usr/lib/libc.dylib')\n \n-    PROESSOR_CPU_LOAD_INFO = c_int(2)\n+    class host_cpu_load_info_data_t(Structure):\n+        _fields_ = [(\"cpu_ticks\", c_uint * 4)]\n+\n+    host_statistics = libc.host_statistics\n+    host_statistics.argtypes = [\n+        c_uint,\n+        c_int,\n+        POINTER(host_cpu_load_info_data_t),\n+        POINTER(c_int)\n+    ]\n+    host_statistics.restype = c_int\n+\n     CPU_STATE_USER = 0\n     CPU_STATE_SYSTEM = 1\n     CPU_STATE_IDLE = 2\n     CPU_STATE_NICE = 3\n-    c_int_p = POINTER(c_int)\n-\n     class State:\n         def __init__(self):\n-            num_cpus_u = c_uint(0)\n-            cpu_info = c_int_p()\n-            cpu_info_cnt = c_int(0)\n-            err = libc.host_processor_info(\n+            stats = host_cpu_load_info_data_t()\n+            count = c_int(4) # HOST_CPU_LOAD_INFO_COUNT\n+            err = libc.host_statistics(\n                 libc.mach_host_self(),\n-                PROESSOR_CPU_LOAD_INFO,\n-                byref(num_cpus_u),\n-                byref(cpu_info),\n-                byref(cpu_info_cnt),\n+                c_int(3), # HOST_CPU_LOAD_INFO\n+                byref(stats),\n+                byref(count),\n             )\n             assert err == 0\n-            self.user = 0\n-            self.system = 0\n-            self.idle = 0\n-            self.nice = 0\n-            cur = 0\n-            while cur < cpu_info_cnt.value:\n-                self.user += cpu_info[cur + CPU_STATE_USER]\n-                self.system += cpu_info[cur + CPU_STATE_SYSTEM]\n-                self.idle += cpu_info[cur + CPU_STATE_IDLE]\n-                self.nice += cpu_info[cur + CPU_STATE_NICE]\n-                cur += num_cpus_u.value\n+            self.system = stats.cpu_ticks[CPU_STATE_SYSTEM]\n+            self.user = stats.cpu_ticks[CPU_STATE_USER]\n+            self.idle = stats.cpu_ticks[CPU_STATE_IDLE]\n+            self.nice = stats.cpu_ticks[CPU_STATE_NICE]\n \n         def idle_since(self, prev):\n             user = self.user - prev.user"}, {"sha": "2cf26603273844f696a3b64923a0c1946f603f7b", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -15,6 +15,7 @@\n - [Platform Support](platform-support.md)\n     - [Template for target-specific documentation](platform-support/TEMPLATE.md)\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n+    - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [*-unknown-openbsd](platform-support/openbsd.md)"}, {"sha": "b6ae8c9333f319caefa44d5f470ecac37cc4555b", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -220,7 +220,8 @@ target | std | host | notes\n `armv6-unknown-netbsd-eabihf` | ? |  |\n `armv6k-nintendo-3ds` | * |  | ARMv6K Nintendo 3DS, Horizon (Requires devkitARM toolchain)\n `armv7-apple-ios` | \u2713 |  | ARMv7 iOS, Cortex-a8\n-[`armv7-unknown-linux-uclibceabihf`](platform-support/armv7-unknown-linux-uclibceabihf.md) | \u2713 | ? | ARMv7 Linux uClibc\n+[`armv7-unknown-linux-uclibceabi`](platform-support/armv7-unknown-linux-uclibceabi.md) | \u2713 | \u2713 | ARMv7 Linux with uClibc, softfloat\n+[`armv7-unknown-linux-uclibceabihf`](platform-support/armv7-unknown-linux-uclibceabihf.md) | \u2713 | ? | ARMv7 Linux with uClibc, hardfloat\n `armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD\n `armv7-unknown-netbsd-eabihf` | \u2713 | \u2713 |\n `armv7-wrs-vxworks-eabihf` | ? |  |\n@@ -244,6 +245,7 @@ target | std | host | notes\n `i686-wrs-vxworks` | ? |  |\n `m68k-unknown-linux-gnu` | ? |  | Motorola 680x0 Linux\n `mips-unknown-linux-uclibc` | \u2713 |  | MIPS Linux with uClibc\n+`mips64-openwrt-linux-musl` | ? |  | MIPS64 for OpenWrt Linux MUSL\n `mipsel-sony-psp` | * |  | MIPS (LE) Sony PlayStation Portable (PSP)\n `mipsel-unknown-linux-uclibc` | \u2713 |  | MIPS (LE) Linux with uClibc\n `mipsel-unknown-none` | * |  | Bare MIPS (LE) softfloat"}, {"sha": "d58b857059589bbb295365f13eb525210dcb857f", "filename": "src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabi.md", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -0,0 +1,121 @@\n+# `armv7-unknown-linux-uclibceabi`\n+\n+**Tier: 3**\n+\n+This target supports ARMv7 softfloat CPUs and uses the uclibc-ng standard library. This is a common configuration on many consumer routers (e.g., Netgear R7000, Asus RT-AC68U).\n+\n+## Target maintainers\n+\n+* [@lancethepants](https://github.com/lancethepants)\n+\n+## Requirements\n+\n+This target is cross compiled, and requires a cross toolchain.\n+\n+This target supports host tools and std.\n+\n+## Building the target\n+\n+You will need to download or build a `'C'` cross toolchain that targets ARMv7 softfloat and that uses the uclibc-ng standard library. If your target hardware is something like a router or an embedded device, keep in mind that manufacturer supplied SDKs for this class of CPU could be outdated and potentially unsuitable for bootstrapping rust.\n+\n+[Here](https://github.com/lancethepants/tomatoware-toolchain) is a sample toolchain that is built using [buildroot](https://buildroot.org/). It uses modern toolchain components, older thus universal kernel headers (2.6.36.4), and is used for a project called [Tomatoware](https://github.com/lancethepants/tomatoware). This toolchain is patched so that its sysroot is located at /mmc (e.g., /mmc/bin, /mmc/lib, /mmc/include). This is useful in scenarios where the root filesystem is read-only but you are able attach external storage loaded with user applications. Tomatoware is an example of this that even allows you to run various compilers and developer tools natively on the target device.\n+\n+Utilizing the Tomatoware toolchain this target can be built for cross compilation and native compilation (host tools) with project\n+\n+[rust-bootstrap-armv7-unknown-linux-uclibceabi](https://github.com/lancethepants/rust-bootstrap-armv7-unknown-linux-uclibceabi).\n+\n+\n+Here is a sample config if using your own toolchain.\n+\n+```toml\n+[build]\n+build-stage = 2\n+target = [\"armv7-unknown-linux-uclibceabi\"]\n+\n+[target.armv7-unknown-linux-uclibceabi]\n+cc = \"/path/to/arm-unknown-linux-uclibcgnueabi-gcc\"\n+cxx = \"/path/to/arm-unknown-linux-uclibcgnueabi-g++\"\n+ar = \"path/to/arm-unknown-linux-uclibcgnueabi-ar\"\n+ranlib = \"path/to/arm-unknown-linux-uclibcgnueabi-\"\n+linker = \"/path/to/arm-unknown-linux-uclibcgnueabi-\"\n+```\n+\n+## Building Rust programs\n+\n+The following assumes you are using the Tomatoware toolchain and environment. Adapt if you are using your own toolchain.\n+\n+### Native compilation\n+\n+Since this target supports host tools, you can natively build rust applications directly on your target device. This can be convenient because it removes the complexities of cross compiling and you can immediately test and deploy your binaries. One downside is that compiling on your ARMv7 CPU will probably be much slower than cross compilation on your x86 machine.\n+\n+To setup native compilation:\n+\n+* Download Tomatoware to your device using the latest nightly release found [here](https://files.lancethepants.com/Tomatoware/Nightly/).\n+* Extract `tar zxvf arm-soft-mmc.tgz -C /mmc`\n+* Add `/mmc/bin:/mmc:sbin/` to your PATH, or `source /mmc/etc/profile`\n+* `apt update && apt install rust`\n+\n+If you bootstrap rust on your own using the project above, it will create a .deb file that you then can install with\n+```text\n+dpkg -i rust_1.xx.x-x_arm.deb\n+```\n+\n+After completing these steps you can use rust normally in a native environment.\n+\n+### Cross Compilation\n+\n+To cross compile, you'll need to:\n+\n+* Build the rust cross toochain using  [rust-bootstrap-armv7-unknown-linux-uclibceabi](https://github.com/lancethepants/rust-bootstrap-armv7-unknown-linux-uclibceabi) or your own built toolchain.\n+* Link your built toolchain with\n+\n+    ```text\n+    rustup toolchain link stage2 \\\n+    ${HOME}/rust-bootstrap-armv7-unknown-linux-uclibceabi/src/rust/rust/build/x86_64-unknown-linux-gnu/stage2\n+    ```\n+* Build with:\n+    ```text\n+    CC=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \\\n+    CXX=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-g++ \\\n+    AR=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-ar \\\n+    CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_LINKER=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \\\n+    CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_RUSTFLAGS='-Clink-arg=-s -Clink-arg=-Wl,--dynamic-linker=/mmc/lib/ld-uClibc.so.1 -Clink-arg=-Wl,-rpath,/mmc/lib' \\\n+    cargo +stage2 build --target armv7-unknown-linux-uclibceabi --release\n+    ```\n+* Copy the binary to your target device and run.\n+\n+We specify `CC`, `CXX`, and `AR` because somtimes a project or a subproject requires the use of your `'C'` cross toolchain. Since Tomatoware has a modified sysroot we also pass via RUSTFLAGS the location of the dynamic-linker and rpath.\n+\n+### Test with QEMU\n+\n+To test a cross-compiled binary on your build system follow the instructions for `Cross Compilation`, install `qemu-arm-static`, and run with the following.\n+```text\n+CC=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \\\n+CXX=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-g++ \\\n+AR=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-ar \\\n+CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_LINKER=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \\\n+CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_RUNNER=\"qemu-arm-static -L /opt/tomatoware/arm-soft-mmc/arm-tomatoware-linux-uclibcgnueabi/sysroot/\" \\\n+cargo +stage2 run --target armv7-unknown-linux-uclibceabi --release\n+```\n+### Run in a chroot\n+\n+It's also possible to build in a chroot environment. This is a convenient way to work without needing to access the target hardware.\n+\n+To build the chroot:\n+\n+* `sudo debootstrap --arch armel bullseye $HOME/debian`\n+* `sudo chroot $HOME/debian/ /bin/bash`\n+* `mount proc /proc -t proc`\n+* `mount -t sysfs /sys sys/`\n+* `export PATH=/mmc/bin:/mmc/sbin:$PATH`\n+\n+From here you can setup your environment (e.g., add user, install wget).\n+\n+* Download Tomatoware to the chroot environment using the latest nightly release found [here](https://files.lancethepants.com/Tomatoware/Nightly/).\n+* Extract `tar zxvf arm-soft-mmc.tgz -C /mmc`\n+* Add `/mmc/bin:/mmc:sbin/` to your PATH, or `source /mmc/etc/profile`\n+* `sudo /mmc/bin/apt update && sudo /mmc/bin/apt install rust`\n+\n+After completing these steps you can use rust normally in a chroot environment.\n+\n+Remember when using `sudo` the root user's PATH could differ from your user's PATH."}, {"sha": "07470eef051d80fb7740773a0657b43d0e681172", "filename": "src/doc/rustc/src/platform-support/mips64-openwrt-linux-musl.md", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fmips64-openwrt-linux-musl.md", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fmips64-openwrt-linux-musl.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fmips64-openwrt-linux-musl.md?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -0,0 +1,28 @@\n+# `mips64-openwrt-linux-musl`\n+**Tier: 3**\n+\n+## Target maintainers\n+- Donald Hoskins `grommish@gmail.com`, https://github.com/Itus-Shield\n+\n+## Requirements\n+This target is cross-compiled. There is no support for `std`. There is no\n+default allocator, but it's possible to use `alloc` by supplying an allocator.\n+\n+By default, Rust code generated for this target uses `-msoft-float` and is\n+dynamically linked.\n+\n+This target generated binaries in the ELF format.\n+\n+## Building the target\n+This target is built exclusively within the `OpenWrt` build system via\n+the `rust-lang` HOST package\n+\n+## Building Rust programs\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you will either need to build Rust with the target enabled (see\n+\"Building the target\" above).\n+\n+## Testing\n+As `mips64-openwrt-linux-musl` supports a variety of different environments and does\n+not support `std`, this target does not support running the Rust testsuite at this\n+time."}, {"sha": "38ececf5e78f838cfa086bf86319ca1fd36093f3", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -175,11 +175,13 @@ h3.code-header {\n h4.code-header {\n \tfont-size: 1rem;\n }\n-h3.code-header, h4.code-header {\n+.code-header {\n \tfont-weight: 600;\n \tborder-bottom-style: none;\n-\tpadding: 0;\n \tmargin: 0;\n+\tpadding: 0;\n+\tmargin-top: 0.6em;\n+\tmargin-bottom: 0.4em;\n }\n .impl,\n .impl-items .method,\n@@ -192,8 +194,6 @@ h3.code-header, h4.code-header {\n .methods .associatedtype {\n \tflex-basis: 100%;\n \tfont-weight: 600;\n-\tmargin-top: 16px;\n-\tmargin-bottom: 10px;\n \tposition: relative;\n }\n \n@@ -744,21 +744,13 @@ nav.sub {\n \n .content .item-info {\n \tposition: relative;\n-\tmargin-left: 33px;\n+\tmargin-left: 24px;\n }\n \n .sub-variant > div > .item-info {\n \tmargin-top: initial;\n }\n \n-.content .item-info::before {\n-\tcontent: '\u2b11';\n-\tfont-size: 1.5625rem;\n-\tposition: absolute;\n-\ttop: -6px;\n-\tleft: -19px;\n-}\n-\n .content .impl-items .docblock, .content .impl-items .item-info {\n \tmargin-bottom: .6em;\n }\n@@ -777,6 +769,7 @@ nav.sub {\n \n #main-content > .item-info {\n \tmargin-top: 0;\n+\tmargin-left: 0;\n }\n \n nav.sub {\n@@ -1125,13 +1118,6 @@ body.blur > :not(#help) {\n \tfloat: right;\n }\n \n-.has-srclink {\n-\tfont-size: 1rem;\n-\tmargin-bottom: 12px;\n-\t/* Push the src link out to the right edge consistently */\n-\tjustify-content: space-between;\n-}\n-\n .variants_table {\n \twidth: 100%;\n }\n@@ -2066,6 +2052,24 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t}\n }\n \n+.method-toggle summary,\n+.implementors-toggle summary {\n+\tmargin-bottom: 0.75em;\n+}\n+\n+.method-toggle[open] {\n+\tmargin-bottom: 2em;\n+}\n+\n+.implementors-toggle[open]  {\n+\tmargin-bottom: 2em;\n+}\n+\n+#trait-implementations-list .method-toggle,\n+#synthetic-implementations-list .method-toggle,\n+#blanket-implementations-list .method-toggle {\n+\tmargin-bottom: 1em;\n+}\n \n /* Begin: styles for --scrape-examples feature */\n "}, {"sha": "0aaa3b7c17902f33e726b3a6462382d621c7963c", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -587,11 +587,8 @@ window.initSearch = function(rawSearchIndex) {\n         }\n \n         function typePassesFilter(filter, type) {\n-            // No filter\n-            if (filter <= NO_TYPE_FILTER) return true;\n-\n-            // Exact match\n-            if (filter === type) return true;\n+            // No filter or Exact mach\n+            if (filter <= NO_TYPE_FILTER || filter === type) return true;\n \n             // Match related items\n             var name = itemTypes[type];"}, {"sha": "27c86ec22b84ef1f52c9428debee24246c7d4511", "filename": "src/test/pretty/ast-stmt-expr-attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -119,9 +119,9 @@ fn syntax() {\n     let _ = #[attr] foo![#! [attr]];\n     let _ = #[attr] foo! {};\n     let _ = #[attr] foo! { #! [attr] };\n-    let _ = #[attr] Foo{bar: baz,};\n-    let _ = #[attr] Foo{..foo};\n-    let _ = #[attr] Foo{bar: baz, ..foo};\n+    let _ = #[attr] Foo { bar: baz };\n+    let _ = #[attr] Foo { ..foo };\n+    let _ = #[attr] Foo { bar: baz, ..foo };\n     let _ = #[attr] (0);\n \n     {"}, {"sha": "80f739f4f9e1aa196be31d9ed4339a137caef71b", "filename": "src/test/pretty/issue-68710-field-attr-proc-mac-lost.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -8,9 +8,10 @@ struct C {\n \n #[allow()]\n const C: C =\n-    C{\n+    C {\n         #[cfg(debug_assertions)]\n         field: 0,\n \n         #[cfg(not(debug_assertions))]\n-        field: 1,};\n+        field: 1,\n+    };"}, {"sha": "7ab22f1960c2d8fbc8daf2f8c5d253b97104135d", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -90,9 +90,9 @@ struct Bar(());\n fn _7() {\n \n     #[rustc_dummy]\n-    Foo{data: (),};\n+    Foo { data: () };\n \n-    let _ = #[rustc_dummy] Foo{data: (),};\n+    let _ = #[rustc_dummy] Foo { data: () };\n }\n \n fn _8() {\n@@ -209,7 +209,7 @@ fn _11() {\n     let mut x = 0;\n     let _ = #[rustc_dummy] x = 15;\n     let _ = #[rustc_dummy] x += 15;\n-    let s = Foo{data: (),};\n+    let s = Foo { data: () };\n     let _ = #[rustc_dummy] s.data;\n     let _ = (#[rustc_dummy] s).data;\n     let t = Bar(());\n@@ -235,9 +235,9 @@ fn _11() {\n     let _ = #[rustc_dummy] expr_mac!();\n     let _ = #[rustc_dummy] expr_mac![];\n     let _ = #[rustc_dummy] expr_mac! {};\n-    let _ = #[rustc_dummy] Foo{data: (),};\n-    let _ = #[rustc_dummy] Foo{..s};\n-    let _ = #[rustc_dummy] Foo{data: (), ..s};\n+    let _ = #[rustc_dummy] Foo { data: () };\n+    let _ = #[rustc_dummy] Foo { ..s };\n+    let _ = #[rustc_dummy] Foo { data: (), ..s };\n     let _ = #[rustc_dummy] (0);\n }\n "}, {"sha": "2885978ce1f215b1cadd9ee6fdb3e5a94c406406", "filename": "src/test/rustdoc-gui/hash-item-expansion.goml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -4,10 +4,6 @@ goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.borrow\n assert-attribute: (\"#blanket-implementations-list > details:nth-child(2)\", {\"open\": \"\"})\n // We first check that the impl block is open by default.\n assert-attribute: (\"#implementations + details\", {\"open\": \"\"})\n-// We collapse it.\n-click: \"#implementations + details > summary\"\n-// We check that it was collapsed as expected.\n-assert-attribute-false: (\"#implementations + details\", {\"open\": \"\"})\n // To ensure that we will click on the currently hidden method.\n assert-text: (\".sidebar-links > a\", \"must_use\")\n click: \".sidebar-links > a\""}, {"sha": "1c4cf4ddf87f327b5a9c6acbe3f7f9789c67830a", "filename": "src/test/rustdoc-gui/item-info-width.goml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -3,5 +3,6 @@ goto: file://|DOC_PATH|/lib2/struct.Foo.html\n // We set a fixed size so there is no chance of \"random\" resize.\n size: (1100, 800)\n // We check that \".item-info\" is bigger than its content.\n-assert-css: (\".item-info\", {\"width\": \"757px\"})\n+assert-css: (\".item-info\", {\"width\": \"790px\"})\n assert-css: (\".item-info .stab\", {\"width\": \"341px\"})\n+assert-position: (\".item-info .stab\", {\"x\": 295})"}, {"sha": "6a8fe64d1875dd5be7bb8ff22dcf41e6d3be401c", "filename": "src/test/ui/const-generics/issue-93647.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -0,0 +1,6 @@\n+struct X<const N: usize = {\n+    (||1usize)()\n+    //~^ ERROR calls in constants are limited to\n+}>;\n+\n+fn main() {}"}, {"sha": "0fe54e7de41f086ef1846675a953b291236b791b", "filename": "src/test/ui/const-generics/issue-93647.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-93647.stderr?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-93647.rs:2:5\n+   |\n+LL |     (||1usize)()\n+   |     ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "3018439afa7170e39bfccecd96d0698a7b0eb29d", "filename": "src/test/ui/const-generics/outer-lifetime-in-const-generic-default.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -0,0 +1,10 @@\n+struct Foo<\n+    'a,\n+    const N: usize = {\n+        let x: &'a ();\n+        //~^ ERROR use of non-static lifetime `'a` in const generic\n+        3\n+    },\n+>(&'a ());\n+\n+fn main() {}"}, {"sha": "9d9555d3f647f396c89ecd3c16610dbadf6d219e", "filename": "src/test/ui/const-generics/outer-lifetime-in-const-generic-default.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fouter-lifetime-in-const-generic-default.stderr?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -0,0 +1,11 @@\n+error[E0771]: use of non-static lifetime `'a` in const generic\n+  --> $DIR/outer-lifetime-in-const-generic-default.rs:4:17\n+   |\n+LL |         let x: &'a ();\n+   |                 ^^\n+   |\n+   = note: for more information, see issue #74052 <https://github.com/rust-lang/rust/issues/74052>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0771`."}, {"sha": "f59ff329d18ace8ee4731ebdaf9724d0c53c3e82", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -17,6 +17,12 @@ error[E0604]: only `u8` can be cast as `char`, not `i8`\n    |\n LL |     : [u32; 5i8 as char as usize]\n    |             ^^^^^^^^^^^ invalid cast\n+   |\n+help: try casting from `u8` instead\n+  --> $DIR/const-eval-overflow-4b.rs:22:13\n+   |\n+LL |     : [u32; 5i8 as char as usize]\n+   |             ^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d715d28b73c01a36c432262527b6ad5ae9e7a05a", "filename": "src/test/ui/error-codes/E0604.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -3,6 +3,12 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n    |\n LL |     1u32 as char;\n    |     ^^^^^^^^^^^^ invalid cast\n+   |\n+help: try `char::from_u32` instead\n+  --> $DIR/E0604.rs:2:5\n+   |\n+LL |     1u32 as char;\n+   |     ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0ddb6fc99b004d4459e24dfd28c715ed69937ca6", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -58,6 +58,12 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n    |\n LL |     0u32 as char;\n    |     ^^^^^^^^^^^^ invalid cast\n+   |\n+help: try `char::from_u32` instead\n+  --> $DIR/error-festival.rs:25:5\n+   |\n+LL |     0u32 as char;\n+   |     ^^^^^^^^^^^^\n \n error[E0605]: non-primitive cast: `u8` as `Vec<u8>`\n   --> $DIR/error-festival.rs:29:5"}, {"sha": "57e5ab42f79d3a641d1406e9ccc9239aff81c003", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -315,17 +315,17 @@ fn test_expr() {\n     assert_eq!(stringify_expr!(mac! { ... }), \"mac! { ... }\");\n \n     // ExprKind::Struct\n-    assert_eq!(stringify_expr!(Struct {}), \"Struct{}\"); // FIXME\n+    assert_eq!(stringify_expr!(Struct {}), \"Struct {}\");\n     #[rustfmt::skip] // https://github.com/rust-lang/rustfmt/issues/5151\n-    assert_eq!(stringify_expr!(<Struct as Trait>::Type {}), \"<Struct as Trait>::Type{}\");\n-    assert_eq!(stringify_expr!(Struct { .. }), \"Struct{..}\"); // FIXME\n-    assert_eq!(stringify_expr!(Struct { ..base }), \"Struct{..base}\"); // FIXME\n-    assert_eq!(stringify_expr!(Struct { x }), \"Struct{x,}\");\n-    assert_eq!(stringify_expr!(Struct { x, .. }), \"Struct{x, ..}\");\n-    assert_eq!(stringify_expr!(Struct { x, ..base }), \"Struct{x, ..base}\");\n-    assert_eq!(stringify_expr!(Struct { x: true }), \"Struct{x: true,}\");\n-    assert_eq!(stringify_expr!(Struct { x: true, .. }), \"Struct{x: true, ..}\");\n-    assert_eq!(stringify_expr!(Struct { x: true, ..base }), \"Struct{x: true, ..base}\");\n+    assert_eq!(stringify_expr!(<Struct as Trait>::Type {}), \"<Struct as Trait>::Type {}\");\n+    assert_eq!(stringify_expr!(Struct { .. }), \"Struct { .. }\");\n+    assert_eq!(stringify_expr!(Struct { ..base }), \"Struct { ..base }\");\n+    assert_eq!(stringify_expr!(Struct { x }), \"Struct { x }\");\n+    assert_eq!(stringify_expr!(Struct { x, .. }), \"Struct { x, .. }\");\n+    assert_eq!(stringify_expr!(Struct { x, ..base }), \"Struct { x, ..base }\");\n+    assert_eq!(stringify_expr!(Struct { x: true }), \"Struct { x: true }\");\n+    assert_eq!(stringify_expr!(Struct { x: true, .. }), \"Struct { x: true, .. }\");\n+    assert_eq!(stringify_expr!(Struct { x: true, ..base }), \"Struct { x: true, ..base }\");\n \n     // ExprKind::Repeat\n     assert_eq!(stringify_expr!([(); 0]), \"[(); 0]\");"}, {"sha": "6dbf24baf2315d8c05d7a3481fb96107b8062d0e", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -99,6 +99,12 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n    |\n LL |     let _ = 0x61u32 as char;\n    |             ^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: try `char::from_u32` instead\n+  --> $DIR/cast-rfc0401.rs:41:13\n+   |\n+LL |     let _ = 0x61u32 as char;\n+   |             ^^^^^^^^^^^^^^^\n \n error[E0606]: casting `bool` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:43:13"}, {"sha": "ca3778aab2da34a82cb97c31e1e557e192009a6e", "filename": "src/test/ui/ptr_ops/issue-80309-safe.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309-safe.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+// min-llvm-version: 13.0\n+// compiler-flags: -O\n+\n+// Regression test for issue #80309\n+\n+pub fn zero(x: usize) -> usize {\n+    std::ptr::null::<i8>().wrapping_add(x) as usize - x\n+}\n+pub fn qux(x: &[i8]) -> i8 {\n+    x[zero(x.as_ptr() as usize)]\n+}\n+\n+fn main() {\n+    let z = vec![42, 43];\n+    println!(\"{}\", qux(&z));\n+}"}, {"sha": "bbec1012082c32b7531e1247771c4225777b7b08", "filename": "src/test/ui/ptr_ops/issue-80309.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fptr_ops%2Fissue-80309.rs?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+// min-llvm-version: 13.0\n+// compiler-flags: -O\n+\n+// Regression test for issue #80309\n+\n+pub unsafe fn foo(x: *const i8) -> i8 {\n+    *x.wrapping_sub(x as _).wrapping_add(x as _)\n+}\n+\n+fn main() {\n+    let x = 42;\n+    println!(\"{}\", unsafe { foo(&x) });\n+}"}, {"sha": "49d72158e92ba8a813d451b2f29937b764edd16c", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e069a711084b5617aecda7a5c8e88406ca12ed65/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr?ref=e069a711084b5617aecda7a5c8e88406ca12ed65", "patch": "@@ -1,6 +1,6 @@\n [$DIR/dbg-macro-expected-behavior.rs:20] Unit = Unit\n [$DIR/dbg-macro-expected-behavior.rs:21] a = Unit\n-[$DIR/dbg-macro-expected-behavior.rs:27] Point{x: 42, y: 24,} = Point {\n+[$DIR/dbg-macro-expected-behavior.rs:27] Point { x: 42, y: 24 } = Point {\n     x: 42,\n     y: 24,\n }"}]}