{"sha": "1de2257c3f6579028f2b8d97908ba12896abca61", "node_id": "C_kwDOAAsO6NoAKDFkZTIyNTdjM2Y2NTc5MDI4ZjJiOGQ5NzkwOGJhMTI4OTZhYmNhNjE", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-23T00:14:19Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-23T00:22:03Z"}, "message": "Add `intrinsics::transmute_unchecked`\n\nThis takes a whole 3 lines in `compiler/` since it lowers to `CastKind::Transmute` in MIR *exactly* the same as the existing `intrinsics::transmute` does, it just doesn't have the fancy checking in `hir_typeck`.\n\nAdded to enable experimenting with the request in <https://github.com/rust-lang/rust/pull/106281#issuecomment-1496648190> and because the portable-simd folks might be interested for dependently-sized array-vector conversions.\n\nIt also simplifies a couple places in `core`.", "tree": {"sha": "776f4c8609e8a3654c1de39ff885a8de03bd5dc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/776f4c8609e8a3654c1de39ff885a8de03bd5dc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1de2257c3f6579028f2b8d97908ba12896abca61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1de2257c3f6579028f2b8d97908ba12896abca61", "html_url": "https://github.com/rust-lang/rust/commit/1de2257c3f6579028f2b8d97908ba12896abca61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1de2257c3f6579028f2b8d97908ba12896abca61/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4396ceca05585ad887976b985cfa8dd8e58cd512", "url": "https://api.github.com/repos/rust-lang/rust/commits/4396ceca05585ad887976b985cfa8dd8e58cd512", "html_url": "https://github.com/rust-lang/rust/commit/4396ceca05585ad887976b985cfa8dd8e58cd512"}], "stats": {"total": 97, "additions": 43, "deletions": 54}, "files": [{"sha": "0fcbaa2efabb865ac99999b0a99999974a9ebcf6", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1de2257c3f6579028f2b8d97908ba12896abca61/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de2257c3f6579028f2b8d97908ba12896abca61/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=1de2257c3f6579028f2b8d97908ba12896abca61", "patch": "@@ -198,7 +198,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             | sym::assert_zero_valid\n             | sym::assert_mem_uninitialized_valid => (1, Vec::new(), tcx.mk_unit()),\n             sym::forget => (1, vec![param(0)], tcx.mk_unit()),\n-            sym::transmute => (2, vec![param(0)], param(1)),\n+            sym::transmute | sym::transmute_unchecked => (2, vec![param(0)], param(1)),\n             sym::prefetch_read_data\n             | sym::prefetch_write_data\n             | sym::prefetch_read_instruction"}, {"sha": "c7d3f6c9f044c1ded059b4ac5af09a170673dfe5", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1de2257c3f6579028f2b8d97908ba12896abca61/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de2257c3f6579028f2b8d97908ba12896abca61/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=1de2257c3f6579028f2b8d97908ba12896abca61", "patch": "@@ -221,7 +221,7 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n                     }\n-                    sym::transmute => {\n+                    sym::transmute | sym::transmute_unchecked => {\n                         let dst_ty = destination.ty(local_decls, tcx).ty;\n                         let Ok([arg]) = <[_; 1]>::try_from(std::mem::take(args)) else {\n                             span_bug!("}, {"sha": "70b9088de506490502ac444b4ca5431487142e88", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1de2257c3f6579028f2b8d97908ba12896abca61/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de2257c3f6579028f2b8d97908ba12896abca61/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1de2257c3f6579028f2b8d97908ba12896abca61", "patch": "@@ -1505,6 +1505,7 @@ symbols! {\n         transmute_generic_consts,\n         transmute_opts,\n         transmute_trait,\n+        transmute_unchecked,\n         transparent,\n         transparent_enums,\n         transparent_unions,"}, {"sha": "587877dff552f381c867cea8c6404899fb73d668", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1de2257c3f6579028f2b8d97908ba12896abca61/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de2257c3f6579028f2b8d97908ba12896abca61/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=1de2257c3f6579028f2b8d97908ba12896abca61", "patch": "@@ -3,8 +3,9 @@\n use crate::num::NonZeroUsize;\n use crate::{\n     fmt,\n+    intrinsics::transmute_unchecked,\n     iter::{self, ExactSizeIterator, FusedIterator, TrustedLen},\n-    mem::{self, MaybeUninit},\n+    mem::MaybeUninit,\n     ops::{IndexRange, Range},\n     ptr,\n };\n@@ -63,18 +64,11 @@ impl<T, const N: usize> IntoIterator for [T; N] {\n         // an array of `T`.\n         //\n         // With that, this initialization satisfies the invariants.\n-\n-        // FIXME(LukasKalbertodt): actually use `mem::transmute` here, once it\n-        // works with const generics:\n-        //     `mem::transmute::<[T; N], [MaybeUninit<T>; N]>(array)`\n         //\n-        // Until then, we can use `mem::transmute_copy` to create a bitwise copy\n-        // as a different type, then forget `array` so that it is not dropped.\n-        unsafe {\n-            let iter = IntoIter { data: mem::transmute_copy(&self), alive: IndexRange::zero_to(N) };\n-            mem::forget(self);\n-            iter\n-        }\n+        // FIXME: If normal `transmute` ever gets smart enough to allow this\n+        // directly, use it instead of `transmute_unchecked`.\n+        let data: [MaybeUninit<T>; N] = unsafe { transmute_unchecked(self) };\n+        IntoIter { data, alive: IndexRange::zero_to(N) }\n     }\n }\n "}, {"sha": "39edfd8265b41d54cf90be27deb5f07f6fbae830", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1de2257c3f6579028f2b8d97908ba12896abca61/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de2257c3f6579028f2b8d97908ba12896abca61/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1de2257c3f6579028f2b8d97908ba12896abca61", "patch": "@@ -1376,6 +1376,20 @@ extern \"rust-intrinsic\" {\n     #[rustc_nounwind]\n     pub fn transmute<Src, Dst>(src: Src) -> Dst;\n \n+    /// Like [`transmute`], but even less checked at compile-time: rather than\n+    /// giving an error for `size_of::<Src>() != size_of::<Dst>()`, it's\n+    /// **Undefined Behaviour** at runtime.\n+    ///\n+    /// Prefer normal `transmute` where possible, for the extra checking, since\n+    /// both do exactly the same thing at runtime, if they both compile.\n+    ///\n+    /// This is not expected to ever be exposed directly to users, rather it\n+    /// may eventually be exposed through some more-constrained API.\n+    #[cfg(not(bootstrap))]\n+    #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n+    #[rustc_nounwind]\n+    pub fn transmute_unchecked<Src, Dst>(src: Src) -> Dst;\n+\n     /// Returns `true` if the actual type given as `T` requires drop\n     /// glue; returns `false` if the actual type provided for `T`\n     /// implements `Copy`.\n@@ -2798,3 +2812,11 @@ pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n         write_bytes(dst, val, count)\n     }\n }\n+\n+/// Polyfill for bootstrap\n+#[cfg(bootstrap)]\n+pub const unsafe fn transmute_unchecked<Src, Dst>(src: Src) -> Dst {\n+    use crate::mem::*;\n+    // SAFETY: It's a transmute -- the caller promised it's fine.\n+    unsafe { transmute_copy(&ManuallyDrop::new(src)) }\n+}"}, {"sha": "2588b7d2befac4b71c866135f12416ddd16923a2", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1de2257c3f6579028f2b8d97908ba12896abca61/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de2257c3f6579028f2b8d97908ba12896abca61/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=1de2257c3f6579028f2b8d97908ba12896abca61", "patch": "@@ -945,14 +945,10 @@ impl<T> MaybeUninit<T> {\n         // * `MaybeUninit<T>` and T are guaranteed to have the same layout\n         // * `MaybeUninit` does not drop, so there are no double-frees\n         // And thus the conversion is safe\n-        let ret = unsafe {\n+        unsafe {\n             intrinsics::assert_inhabited::<[T; N]>();\n-            (&array as *const _ as *const [T; N]).read()\n-        };\n-\n-        // FIXME: required to avoid `~const Destruct` bound\n-        super::forget(array);\n-        ret\n+            intrinsics::transmute_unchecked(array)\n+        }\n     }\n \n     /// Assuming all the elements are initialized, get a slice to them."}, {"sha": "664e697c2a5d2976539c759b992e78204ea62beb", "filename": "tests/codegen/intrinsics/transmute.rs", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1de2257c3f6579028f2b8d97908ba12896abca61/tests%2Fcodegen%2Fintrinsics%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1de2257c3f6579028f2b8d97908ba12896abca61/tests%2Fcodegen%2Fintrinsics%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fintrinsics%2Ftransmute.rs?ref=1de2257c3f6579028f2b8d97908ba12896abca61", "patch": "@@ -8,10 +8,10 @@\n #![feature(inline_const)]\n #![allow(unreachable_code)]\n \n-use std::mem::{transmute, MaybeUninit};\n+use std::mem::MaybeUninit;\n+use std::intrinsics::{transmute, transmute_unchecked};\n \n-// Some of the cases here are statically rejected by `mem::transmute`, so\n-// we need to generate custom MIR for those cases to get to codegen.\n+// Some of these need custom MIR to not get removed by MIR optimizations.\n use std::intrinsics::mir::*;\n \n enum Never {}\n@@ -30,59 +30,35 @@ pub struct Aggregate8(u8);\n \n // CHECK-LABEL: @check_bigger_size(\n #[no_mangle]\n-#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n pub unsafe fn check_bigger_size(x: u16) -> u32 {\n     // CHECK: call void @llvm.trap\n-    mir!{\n-        {\n-            RET = CastTransmute(x);\n-            Return()\n-        }\n-    }\n+    transmute_unchecked(x)\n }\n \n // CHECK-LABEL: @check_smaller_size(\n #[no_mangle]\n-#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n pub unsafe fn check_smaller_size(x: u32) -> u16 {\n     // CHECK: call void @llvm.trap\n-    mir!{\n-        {\n-            RET = CastTransmute(x);\n-            Return()\n-        }\n-    }\n+    transmute_unchecked(x)\n }\n \n // CHECK-LABEL: @check_smaller_array(\n #[no_mangle]\n-#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n pub unsafe fn check_smaller_array(x: [u32; 7]) -> [u32; 3] {\n     // CHECK: call void @llvm.trap\n-    mir!{\n-        {\n-            RET = CastTransmute(x);\n-            Return()\n-        }\n-    }\n+    transmute_unchecked(x)\n }\n \n // CHECK-LABEL: @check_bigger_array(\n #[no_mangle]\n-#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n pub unsafe fn check_bigger_array(x: [u32; 3]) -> [u32; 7] {\n     // CHECK: call void @llvm.trap\n-    mir!{\n-        {\n-            RET = CastTransmute(x);\n-            Return()\n-        }\n-    }\n+    transmute_unchecked(x)\n }\n \n // CHECK-LABEL: @check_to_uninhabited(\n #[no_mangle]\n-#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n pub unsafe fn check_to_uninhabited(x: u16) -> BigNever {\n     // CHECK: call void @llvm.trap\n     mir!{\n@@ -95,7 +71,7 @@ pub unsafe fn check_to_uninhabited(x: u16) -> BigNever {\n \n // CHECK-LABEL: @check_from_uninhabited(\n #[no_mangle]\n-#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n+#[custom_mir(dialect = \"runtime\", phase = \"optimized\")]\n pub unsafe fn check_from_uninhabited(x: BigNever) -> u16 {\n     // CHECK: ret i16 poison\n     mir!{"}]}