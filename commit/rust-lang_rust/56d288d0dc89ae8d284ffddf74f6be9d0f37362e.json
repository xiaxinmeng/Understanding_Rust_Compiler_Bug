{"sha": "56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDI4OGQwZGM4OWFlOGQyODRmZmRkZjc0ZjZiZTlkMGYzNzM2MmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-21T15:49:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-21T15:49:13Z"}, "message": "auto merge of #5464 : luqmana/rust/const-pat, r=pcwalton\n\nr? @pcwalton", "tree": {"sha": "dd80e056d5b30e46416b367ed9cf4fd9c0ba04ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd80e056d5b30e46416b367ed9cf4fd9c0ba04ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "html_url": "https://github.com/rust-lang/rust/commit/56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb5f8734aec0e6e7325b32425716587f59203a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb5f8734aec0e6e7325b32425716587f59203a3", "html_url": "https://github.com/rust-lang/rust/commit/efb5f8734aec0e6e7325b32425716587f59203a3"}, {"sha": "3f2d576a38854c1f6ffd21016e4c8a2822d64fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2d576a38854c1f6ffd21016e4c8a2822d64fee", "html_url": "https://github.com/rust-lang/rust/commit/3f2d576a38854c1f6ffd21016e4c8a2822d64fee"}], "stats": {"total": 109, "additions": 93, "deletions": 16}, "files": [{"sha": "24e94c7ca6d41fc32e6a581a25b5407322da8447", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "patch": "@@ -528,6 +528,25 @@ pub fn specialize(cx: @MatchCheckCtxt,\n             }\n             pat_enum(_, args) => {\n                 match cx.tcx.def_map.get(&pat_id) {\n+                    def_const(did) => {\n+                        let const_expr =\n+                            lookup_const_by_id(cx.tcx, did).get();\n+                        let e_v = eval_const_expr(cx.tcx, const_expr);\n+                        let match_ = match ctor_id {\n+                            val(ref v) => compare_const_vals(e_v, (*v)) == 0,\n+                            range(ref c_lo, ref c_hi) => {\n+                                compare_const_vals((*c_lo), e_v) >= 0 &&\n+                                    compare_const_vals((*c_hi), e_v) <= 0\n+                            }\n+                            single => true,\n+                            _ => fail!(~\"type error\")\n+                        };\n+                        if match_ {\n+                            Some(vec::from_slice(r.tail()))\n+                        } else {\n+                            None\n+                        }\n+                    }\n                     def_variant(_, id) if variant(id) == ctor_id => {\n                         let args = match args {\n                             Some(args) => args,"}, {"sha": "ba6348bb1de81c2ae28934f10de7f560d271ebfc", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "patch": "@@ -10,6 +10,8 @@\n \n use core::prelude::*;\n \n+use metadata::csearch;\n+use middle::astencode;\n use middle::resolve;\n use middle::ty;\n use middle;\n@@ -19,6 +21,8 @@ use core::vec;\n use syntax::{ast, ast_map, ast_util, visit};\n use syntax::ast::*;\n \n+use std::oldmap::HashMap;\n+\n //\n // This pass classifies expressions by their constant-ness.\n //\n@@ -187,7 +191,24 @@ pub fn lookup_const_by_id(tcx: ty::ctxt,\n             Some(_) => None\n         }\n     } else {\n-        None\n+        let maps = astencode::Maps {\n+            mutbl_map: HashMap(),\n+            root_map: HashMap(),\n+            last_use_map: HashMap(),\n+            method_map: HashMap(),\n+            vtable_map: HashMap(),\n+            write_guard_map: HashMap(),\n+            moves_map: HashMap(),\n+            capture_map: HashMap()\n+        };\n+        match csearch::maybe_get_item_ast(tcx, def_id,\n+            |a, b, c, d| astencode::decode_inlined_item(a, b, maps, /*bar*/ copy c, d)) {\n+            csearch::found(ast::ii_item(item)) => match item.node {\n+                item_const(_, const_expr) => Some(const_expr),\n+                _ => None\n+            },\n+            _ => None\n+        }\n     }\n }\n "}, {"sha": "a471d91877a62572eba29b00b5faa59541150779", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "patch": "@@ -916,6 +916,11 @@ pub impl mem_categorization_ctxt {\n                         self.cat_pattern(cmt_field, *subpat, op);\n                     }\n                 }\n+                Some(ast::def_const(*)) => {\n+                    for subpats.each |subpat| {\n+                        self.cat_pattern(cmt, *subpat, op);\n+                    }\n+                }\n                 _ => {\n                     self.tcx.sess.span_bug(\n                         pat.span,"}, {"sha": "a25fddcad88c8e5db575d5279b5e0a3bc8654ea2", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "patch": "@@ -43,7 +43,7 @@ pub fn pat_is_variant_or_struct(dm: resolve::DefMap, pat: @pat) -> bool {\n \n pub fn pat_is_const(dm: resolve::DefMap, pat: &pat) -> bool {\n     match pat.node {\n-        pat_ident(_, _, None) => {\n+        pat_ident(_, _, None) | pat_enum(*) => {\n             match dm.find(&pat.id) {\n                 Some(def_const(*)) => true,\n                 _ => false"}, {"sha": "f0e7ef0c5899a0d6614bd46dfce7bf5e32d86527", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "patch": "@@ -4333,23 +4333,24 @@ pub impl Resolver {\n                 }\n \n                 pat_enum(path, _) => {\n-                    // This must be an enum variant or struct.\n+                    // This must be an enum variant, struct or const.\n                     match self.resolve_path(path, ValueNS, false, visitor) {\n                         Some(def @ def_variant(*)) |\n-                                Some(def @ def_struct(*)) => {\n+                        Some(def @ def_struct(*))  |\n+                        Some(def @ def_const(*)) => {\n                             self.record_def(pattern.id, def);\n                         }\n                         Some(_) => {\n                             self.session.span_err(\n                                 path.span,\n-                                fmt!(\"not an enum variant or struct: %s\",\n+                                fmt!(\"not an enum variant, struct or const: %s\",\n                                      *self.session.str_of(\n                                          *path.idents.last())));\n                         }\n                         None => {\n                             self.session.span_err(path.span,\n-                                                  ~\"unresolved enum variant \\\n-                                                    or struct\");\n+                                                  ~\"unresolved enum variant, \\\n+                                                    struct or const\");\n                         }\n                     }\n "}, {"sha": "09f0a4f547a038f3c19a87e014abfc80aa6298ad", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "patch": "@@ -502,6 +502,16 @@ pub fn enter_opt(bcx: block, m: &[@Match/&r], opt: &Opt, col: uint,\n     let dummy = @ast::pat {id: 0, node: ast::pat_wild, span: dummy_sp()};\n     do enter_match(bcx, tcx.def_map, m, col, val) |p| {\n         match p.node {\n+            ast::pat_enum(*) |\n+            ast::pat_ident(_, _, None) if pat_is_const(tcx.def_map, p) => {\n+                let const_def = tcx.def_map.get(&p.id);\n+                let const_def_id = ast_util::def_id_of_def(const_def);\n+                if opt_eq(tcx, &lit(ConstLit(const_def_id)), opt) {\n+                    Some(~[])\n+                } else {\n+                    None\n+                }\n+            }\n             ast::pat_enum(_, ref subpats) => {\n                 if opt_eq(tcx, &variant_opt(bcx, p.id), opt) {\n                     match *subpats {\n@@ -520,15 +530,6 @@ pub fn enter_opt(bcx: block, m: &[@Match/&r], opt: &Opt, col: uint,\n                     None\n                 }\n             }\n-            ast::pat_ident(_, _, None) if pat_is_const(tcx.def_map, p) => {\n-                let const_def = tcx.def_map.get(&p.id);\n-                let const_def_id = ast_util::def_id_of_def(const_def);\n-                if opt_eq(tcx, &lit(ConstLit(const_def_id)), opt) {\n-                    Some(~[])\n-                } else {\n-                    None\n-                }\n-            }\n             ast::pat_lit(l) => {\n                 if opt_eq(tcx, &lit(ExprLit(l)), opt) {Some(~[])} else {None}\n             }\n@@ -806,6 +807,10 @@ pub fn get_options(bcx: block, m: &[@Match], col: uint) -> ~[Opt] {\n                         add_to_set(ccx.tcx, &mut found,\n                                    variant_opt(bcx, cur.id));\n                     }\n+                    Some(ast::def_const(const_did)) => {\n+                        add_to_set(ccx.tcx, &mut found,\n+                                   lit(ConstLit(const_did)));\n+                    }\n                     _ => {}\n                 }\n             }\n@@ -1782,6 +1787,9 @@ pub fn bind_irrefutable_pat(bcx: block,\n                         }\n                     }\n                 }\n+                Some(ast::def_const(*)) => {\n+                    bcx = bind_irrefutable_pat(bcx, pat, val, make_copy, binding_mode);\n+                }\n                 _ => {\n                     // Nothing to do here.\n                 }"}, {"sha": "5dcbcbda35cb34053df3ded3431e7f65ee5bb1d1", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "patch": "@@ -366,6 +366,7 @@ pub fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n         }\n         fcx.write_ty(pat.id, b_ty);\n       }\n+      ast::pat_enum(*) |\n       ast::pat_ident(*) if pat_is_const(tcx.def_map, pat) => {\n         let const_did = ast_util::def_id_of_def(tcx.def_map.get(&pat.id));\n         let const_tpt = ty::lookup_item_type(tcx, const_did);"}, {"sha": "0a0e2356f4443298c0533d1683e76f7b9bb2485b", "filename": "src/test/run-pass/cross-crate-const-pat.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Ftest%2Frun-pass%2Fcross-crate-const-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d288d0dc89ae8d284ffddf74f6be9d0f37362e/src%2Ftest%2Frun-pass%2Fcross-crate-const-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcross-crate-const-pat.rs?ref=56d288d0dc89ae8d284ffddf74f6be9d0f37362e", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:cci_const.rs\n+\n+extern mod cci_const;\n+\n+fn main() {\n+    let x = cci_const::uint_val;\n+    match x {\n+        cci_const::uint_val => {}\n+        _ => {}\n+    }\n+}"}]}