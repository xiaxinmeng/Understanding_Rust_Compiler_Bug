{"sha": "cf69604551324f68d1fc7ab0386ecbe9e1aaa504", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNjk2MDQ1NTEzMjRmNjhkMWZjN2FiMDM4NmVjYmU5ZTFhYWE1MDQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-26T05:10:28Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-26T18:14:39Z"}, "message": "Incorporate class fields into recursive-type check\n\nNoticed while investigating issue 2718 that the typechecker allowed\nsome non-instantiable types involving classes. This wasn't the root of\n2718, but fixed it anyway.", "tree": {"sha": "de351651ef98070c47a68a19ce658a72b66b85a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de351651ef98070c47a68a19ce658a72b66b85a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf69604551324f68d1fc7ab0386ecbe9e1aaa504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf69604551324f68d1fc7ab0386ecbe9e1aaa504", "html_url": "https://github.com/rust-lang/rust/commit/cf69604551324f68d1fc7ab0386ecbe9e1aaa504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf69604551324f68d1fc7ab0386ecbe9e1aaa504/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d513d9893ecd416943d96822f794c3212c8b60b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d513d9893ecd416943d96822f794c3212c8b60b8", "html_url": "https://github.com/rust-lang/rust/commit/d513d9893ecd416943d96822f794c3212c8b60b8"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "3a9d320c77e08d32fe135c1fa10e2251eacaebaf", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf69604551324f68d1fc7ab0386ecbe9e1aaa504/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf69604551324f68d1fc7ab0386ecbe9e1aaa504/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=cf69604551324f68d1fc7ab0386ecbe9e1aaa504", "patch": "@@ -1218,7 +1218,6 @@ fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n            accum\n          }\n       }\n-\n       ty_tup(elts) {\n         for elts.each {|m| if type_needs_drop(cx, m) { accum = true; } }\n         accum\n@@ -1720,6 +1719,7 @@ fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n fn type_structurally_contains(cx: ctxt, ty: t, test: fn(sty) -> bool) ->\n    bool {\n     let sty = get(ty).struct;\n+    #debug(\"type_structurally_contains: %s\", ty_to_str(cx, ty));\n     if test(sty) { ret true; }\n     alt sty {\n       ty_enum(did, substs) {\n@@ -1737,6 +1737,14 @@ fn type_structurally_contains(cx: ctxt, ty: t, test: fn(sty) -> bool) ->\n         }\n         ret false;\n       }\n+      ty_class(did, substs) {\n+        for lookup_class_fields(cx, did).each {|field|\n+            let ft = lookup_field_type(cx, did, field.id, substs);\n+            if type_structurally_contains(cx, ft, test) { ret true; }\n+        }\n+        ret false;\n+      }\n+\n       ty_tup(ts) {\n         for ts.each {|tt|\n             if type_structurally_contains(cx, tt, test) { ret true; }"}, {"sha": "1eb8d4a1b695e06f63fa475c68288b94a433440b", "filename": "src/test/compile-fail/issue-2718-a.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf69604551324f68d1fc7ab0386ecbe9e1aaa504/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf69604551324f68d1fc7ab0386ecbe9e1aaa504/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2718-a.rs?ref=cf69604551324f68d1fc7ab0386ecbe9e1aaa504", "patch": "@@ -0,0 +1,12 @@\n+class send_packet<T: copy> {\n+  let p: T;\n+  new(p: T) { self.p = p; }\n+}\n+\n+\n+mod pingpong {\n+    type ping = send_packet<pong>;\n+    enum pong = send_packet<ping>; //! ERROR illegal recursive enum type; wrap the inner value in a box to make it representable\n+}\n+\n+fn main() {}"}]}