{"sha": "3af09b8cf1229fb05a549a13b144aca6b60784c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZjA5YjhjZjEyMjlmYjA1YTU0OWExM2IxNDRhY2E2YjYwNzg0Yzc=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-12-13T04:32:41Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2020-12-13T04:32:41Z"}, "message": "New internal lint: interning_defined_symbol", "tree": {"sha": "9f179f7e4764f7a5b723b80000c312df6d8c8ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f179f7e4764f7a5b723b80000c312df6d8c8ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3af09b8cf1229fb05a549a13b144aca6b60784c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3af09b8cf1229fb05a549a13b144aca6b60784c7", "html_url": "https://github.com/rust-lang/rust/commit/3af09b8cf1229fb05a549a13b144aca6b60784c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3af09b8cf1229fb05a549a13b144aca6b60784c7/comments", "author": null, "committer": null, "parents": [{"sha": "89c282fb633bd7e0d8af6c07ee7ad837bb196cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/89c282fb633bd7e0d8af6c07ee7ad837bb196cb7", "html_url": "https://github.com/rust-lang/rust/commit/89c282fb633bd7e0d8af6c07ee7ad837bb196cb7"}], "stats": {"total": 183, "additions": 183, "deletions": 0}, "files": [{"sha": "97018599b05aa396c7cde4409c6c5de07610124f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3af09b8cf1229fb05a549a13b144aca6b60784c7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af09b8cf1229fb05a549a13b144aca6b60784c7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3af09b8cf1229fb05a549a13b144aca6b60784c7", "patch": "@@ -513,6 +513,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         #[cfg(feature = \"internal-lints\")]\n         &utils::internal_lints::INVALID_PATHS,\n         #[cfg(feature = \"internal-lints\")]\n+        &utils::internal_lints::INTERNING_DEFINED_SYMBOL,\n+        #[cfg(feature = \"internal-lints\")]\n         &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n         #[cfg(feature = \"internal-lints\")]\n         &utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM,\n@@ -958,6 +960,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n         store.register_late_pass(|| box utils::internal_lints::CompilerLintFunctions::new());\n         store.register_late_pass(|| box utils::internal_lints::InvalidPaths);\n+        store.register_late_pass(|| box utils::internal_lints::InterningDefinedSymbol::default());\n         store.register_late_pass(|| box utils::internal_lints::LintWithoutLintPass::default());\n         store.register_late_pass(|| box utils::internal_lints::MatchTypeOnDiagItem);\n         store.register_late_pass(|| box utils::internal_lints::OuterExpnDataPass);\n@@ -1350,6 +1353,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&utils::internal_lints::COMPILER_LINT_FUNCTIONS),\n         LintId::of(&utils::internal_lints::DEFAULT_LINT),\n         LintId::of(&utils::internal_lints::INVALID_PATHS),\n+        LintId::of(&utils::internal_lints::INTERNING_DEFINED_SYMBOL),\n         LintId::of(&utils::internal_lints::LINT_WITHOUT_LINT_PASS),\n         LintId::of(&utils::internal_lints::MATCH_TYPE_ON_DIAGNOSTIC_ITEM),\n         LintId::of(&utils::internal_lints::OUTER_EXPN_EXPN_DATA),"}, {"sha": "0de87fab528ad9c77615454234c63f49bd628fbc", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3af09b8cf1229fb05a549a13b144aca6b60784c7/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af09b8cf1229fb05a549a13b144aca6b60784c7/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=3af09b8cf1229fb05a549a13b144aca6b60784c7", "patch": "@@ -15,6 +15,7 @@ use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Crate, Expr, ExprKind, HirId, Item, MutTy, Mutability, Node, Path, StmtKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n@@ -247,6 +248,30 @@ declare_clippy_lint! {\n     \"invalid path\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:**\n+    /// Checks for interning symbols that have already been pre-interned and defined as constants.\n+    ///\n+    /// **Why is this bad?**\n+    /// It's faster and easier to use the symbol constant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust,ignore\n+    /// let _ = sym!(f32);\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust,ignore\n+    /// let _ = sym::f32;\n+    /// ```\n+    pub INTERNING_DEFINED_SYMBOL,\n+    internal,\n+    \"interning a symbol that is pre-interned and defined as a constant\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -840,3 +865,58 @@ impl<'tcx> LateLintPass<'tcx> for InvalidPaths {\n         }\n     }\n }\n+\n+#[derive(Default)]\n+pub struct InterningDefinedSymbol {\n+    // Maps the symbol to the constant name.\n+    symbol_map: FxHashMap<String, String>,\n+}\n+\n+impl_lint_pass!(InterningDefinedSymbol => [INTERNING_DEFINED_SYMBOL]);\n+\n+impl<'tcx> LateLintPass<'tcx> for InterningDefinedSymbol {\n+    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+        if !self.symbol_map.is_empty() {\n+            return;\n+        }\n+\n+        if let Some(Res::Def(_, def_id)) = path_to_res(cx, &paths::SYM_MODULE) {\n+            for item in cx.tcx.item_children(def_id).iter() {\n+                if_chain! {\n+                    if let Res::Def(DefKind::Const, item_def_id) = item.res;\n+                    let ty = cx.tcx.type_of(item_def_id);\n+                    if match_type(cx, ty, &paths::SYMBOL);\n+                    if let Ok(ConstValue::Scalar(value)) = cx.tcx.const_eval_poly(item_def_id);\n+                    if let Ok(value) = value.to_u32();\n+                    then {\n+                        // SAFETY: We're converting the raw bytes of the symbol value back\n+                        // into a Symbol instance.\n+                        let symbol = unsafe { std::mem::transmute::<u32, Symbol>(value) };\n+                        self.symbol_map.insert(symbol.to_string(), item.ident.to_string());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::Call(func, [arg]) = &expr.kind;\n+            if let ty::FnDef(def_id, _) = cx.typeck_results().expr_ty(func).kind();\n+            if match_def_path(cx, *def_id, &paths::SYMBOL_INTERN);\n+            if let Some(Constant::Str(arg)) = constant_simple(cx, cx.typeck_results(), arg);\n+            if let Some(symbol_const) = self.symbol_map.get(&arg);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    INTERNING_DEFINED_SYMBOL,\n+                    is_expn_of(expr.span, \"sym\").unwrap_or(expr.span),\n+                    \"interning a defined symbol\",\n+                    \"try\",\n+                    format!(\"rustc_span::symbol::sym::{}\", symbol_const),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "2080a49a11cd668ffc27626fd85be35bd9759803", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3af09b8cf1229fb05a549a13b144aca6b60784c7/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af09b8cf1229fb05a549a13b144aca6b60784c7/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=3af09b8cf1229fb05a549a13b144aca6b60784c7", "patch": "@@ -146,6 +146,12 @@ pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];\n pub const STR_STARTS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"starts_with\"];\n #[cfg(feature = \"internal-lints\")]\n+pub const SYMBOL: [&str; 3] = [\"rustc_span\", \"symbol\", \"Symbol\"];\n+#[cfg(feature = \"internal-lints\")]\n+pub const SYMBOL_INTERN: [&str; 4] = [\"rustc_span\", \"symbol\", \"Symbol\", \"intern\"];\n+#[cfg(feature = \"internal-lints\")]\n+pub const SYM_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"sym\"];\n+#[cfg(feature = \"internal-lints\")]\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];\n pub const TO_OWNED: [&str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];"}, {"sha": "c6b84d2ef650b890d5bd29b31192cc5ceaff6488", "filename": "tests/ui-internal/interning_defined_symbol.fixed", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3af09b8cf1229fb05a549a13b144aca6b60784c7/tests%2Fui-internal%2Finterning_defined_symbol.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3af09b8cf1229fb05a549a13b144aca6b60784c7/tests%2Fui-internal%2Finterning_defined_symbol.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finterning_defined_symbol.fixed?ref=3af09b8cf1229fb05a549a13b144aca6b60784c7", "patch": "@@ -0,0 +1,33 @@\n+// run-rustfix\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_span;\n+\n+use rustc_span::symbol::Symbol;\n+\n+macro_rules! sym {\n+    ($tt:tt) => {\n+        rustc_span::symbol::Symbol::intern(stringify!($tt))\n+    };\n+}\n+\n+fn main() {\n+    // Direct use of Symbol::intern\n+    let _ = rustc_span::symbol::sym::f32;\n+\n+    // Using a sym macro\n+    let _ = rustc_span::symbol::sym::f32;\n+\n+    // Correct suggestion when symbol isn't stringified constant name\n+    let _ = rustc_span::symbol::sym::proc_dash_macro;\n+\n+    // Interning a symbol that is not defined\n+    let _ = Symbol::intern(\"xyz123\");\n+    let _ = sym!(xyz123);\n+\n+    // Using a different `intern` function\n+    let _ = intern(\"f32\");\n+}\n+\n+fn intern(_: &str) {}"}, {"sha": "9ec82d4ad0baed230a4e6f1e542e43471d6c6d2a", "filename": "tests/ui-internal/interning_defined_symbol.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3af09b8cf1229fb05a549a13b144aca6b60784c7/tests%2Fui-internal%2Finterning_defined_symbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af09b8cf1229fb05a549a13b144aca6b60784c7/tests%2Fui-internal%2Finterning_defined_symbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finterning_defined_symbol.rs?ref=3af09b8cf1229fb05a549a13b144aca6b60784c7", "patch": "@@ -0,0 +1,33 @@\n+// run-rustfix\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc_span;\n+\n+use rustc_span::symbol::Symbol;\n+\n+macro_rules! sym {\n+    ($tt:tt) => {\n+        rustc_span::symbol::Symbol::intern(stringify!($tt))\n+    };\n+}\n+\n+fn main() {\n+    // Direct use of Symbol::intern\n+    let _ = Symbol::intern(\"f32\");\n+\n+    // Using a sym macro\n+    let _ = sym!(f32);\n+\n+    // Correct suggestion when symbol isn't stringified constant name\n+    let _ = Symbol::intern(\"proc-macro\");\n+\n+    // Interning a symbol that is not defined\n+    let _ = Symbol::intern(\"xyz123\");\n+    let _ = sym!(xyz123);\n+\n+    // Using a different `intern` function\n+    let _ = intern(\"f32\");\n+}\n+\n+fn intern(_: &str) {}"}, {"sha": "74b906c8a5797205bc9b46ff4ee55e3ed5d1c9c1", "filename": "tests/ui-internal/interning_defined_symbol.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3af09b8cf1229fb05a549a13b144aca6b60784c7/tests%2Fui-internal%2Finterning_defined_symbol.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3af09b8cf1229fb05a549a13b144aca6b60784c7/tests%2Fui-internal%2Finterning_defined_symbol.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finterning_defined_symbol.stderr?ref=3af09b8cf1229fb05a549a13b144aca6b60784c7", "patch": "@@ -0,0 +1,27 @@\n+error: interning a defined symbol\n+  --> $DIR/interning_defined_symbol.rs:17:13\n+   |\n+LL |     let _ = Symbol::intern(\"f32\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::symbol::sym::f32`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/interning_defined_symbol.rs:2:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::interning_defined_symbol)]` implied by `#[deny(clippy::internal)]`\n+\n+error: interning a defined symbol\n+  --> $DIR/interning_defined_symbol.rs:20:13\n+   |\n+LL |     let _ = sym!(f32);\n+   |             ^^^^^^^^^ help: try: `rustc_span::symbol::sym::f32`\n+\n+error: interning a defined symbol\n+  --> $DIR/interning_defined_symbol.rs:23:13\n+   |\n+LL |     let _ = Symbol::intern(\"proc-macro\");\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::symbol::sym::proc_dash_macro`\n+\n+error: aborting due to 3 previous errors\n+"}]}