{"sha": "cd8ca262570d856d354d4ea28632197ca8be15b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOGNhMjYyNTcwZDg1NmQzNTRkNGVhMjg2MzIxOTdjYThiZTE1Yjk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-27T22:25:18Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-28T18:12:41Z"}, "message": "Point at lifetimes instead of def span for E0195", "tree": {"sha": "4531bda2e94455607849664f971ffeeafb766bc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4531bda2e94455607849664f971ffeeafb766bc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd8ca262570d856d354d4ea28632197ca8be15b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8ca262570d856d354d4ea28632197ca8be15b9", "html_url": "https://github.com/rust-lang/rust/commit/cd8ca262570d856d354d4ea28632197ca8be15b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd8ca262570d856d354d4ea28632197ca8be15b9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d95db34a472dc09a90737c83ab533b840dcd224", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d95db34a472dc09a90737c83ab533b840dcd224", "html_url": "https://github.com/rust-lang/rust/commit/5d95db34a472dc09a90737c83ab533b840dcd224"}], "stats": {"total": 89, "additions": 63, "deletions": 26}, "files": [{"sha": "33cae96dd07a266c93678033415e16d2461e3f81", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd8ca262570d856d354d4ea28632197ca8be15b9/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8ca262570d856d354d4ea28632197ca8be15b9/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=cd8ca262570d856d354d4ea28632197ca8be15b9", "patch": "@@ -25,7 +25,7 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, Name, NodeId, CRATE_NODE_ID};\n use syntax::codemap::Spanned;\n use syntax::ext::base::MacroKind;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n \n use hir::*;\n use hir::print::Nested;\n@@ -664,6 +664,26 @@ impl<'hir> Map<'hir> {\n         self.as_local_node_id(id).map(|id| self.get(id)) // read recorded by `get`\n     }\n \n+    pub fn get_generics(&self, id: DefId) -> Option<&'hir Generics> {\n+        self.get_if_local(id).and_then(|node| {\n+            match node {\n+                NodeImplItem(ref impl_item) => Some(&impl_item.generics),\n+                NodeTraitItem(ref trait_item) => Some(&trait_item.generics),\n+                NodeItem(ref item) => {\n+                    match item.node {\n+                        ItemFn(_, _, ref generics, _) => Some(generics),\n+                        _ => None,\n+                    }\n+                }\n+                _ => None,\n+            }\n+        })\n+    }\n+\n+    pub fn get_generics_span(&self, id: DefId) -> Option<Span> {\n+        self.get_generics(id).map(|generics| generics.span).filter(|sp| *sp != DUMMY_SP)\n+    }\n+\n     /// Retrieve the Node corresponding to `id`, returning None if\n     /// cannot be found.\n     pub fn find(&self, id: NodeId) -> Option<Node<'hir>> {"}, {"sha": "4c903b6fe5851976d8b2087d32b83a4159beb013", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cd8ca262570d856d354d4ea28632197ca8be15b9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8ca262570d856d354d4ea28632197ca8be15b9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=cd8ca262570d856d354d4ea28632197ca8be15b9", "patch": "@@ -356,7 +356,6 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 impl_generics: &ty::Generics,\n                                                 trait_to_skol_substs: &Substs<'tcx>)\n                                                 -> Result<(), ErrorReported> {\n-    let span = tcx.sess.codemap().def_span(span);\n     let trait_params = trait_generics.own_counts().lifetimes;\n     let impl_params = impl_generics.own_counts().lifetimes;\n \n@@ -378,16 +377,20 @@ fn check_region_bounds_on_impl_method<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // are zero. Since I don't quite know how to phrase things at\n     // the moment, give a kind of vague error message.\n     if trait_params != impl_params {\n-        let mut err = struct_span_err!(tcx.sess,\n-                                       span,\n-                                       E0195,\n-                                       \"lifetime parameters or bounds on method `{}` do not match \\\n-                                        the trait declaration\",\n-                                       impl_m.ident);\n+        let def_span = tcx.sess.codemap().def_span(span);\n+        let span = tcx.hir.get_generics_span(impl_m.def_id).unwrap_or(def_span);\n+        let mut err = struct_span_err!(\n+            tcx.sess,\n+            span,\n+            E0195,\n+            \"lifetime parameters or bounds on method `{}` do not match the trait declaration\",\n+            impl_m.ident,\n+        );\n         err.span_label(span, \"lifetimes do not match method in trait\");\n         if let Some(sp) = tcx.hir.span_if_local(trait_m.def_id) {\n-            err.span_label(tcx.sess.codemap().def_span(sp),\n-                           \"lifetimes in impl do not match this method in trait\");\n+            let def_sp = tcx.sess.codemap().def_span(sp);\n+            let sp = tcx.hir.get_generics_span(trait_m.def_id).unwrap_or(def_sp);\n+            err.span_label(sp, \"lifetimes in impl do not match this method in trait\");\n         }\n         err.emit();\n         return Err(ErrorReported);"}, {"sha": "04f90ea9ad3a2e2bb44a7e24683a0c5151adf639", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cd8ca262570d856d354d4ea28632197ca8be15b9/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8ca262570d856d354d4ea28632197ca8be15b9/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs?ref=cd8ca262570d856d354d4ea28632197ca8be15b9", "patch": "@@ -20,6 +20,7 @@ pub trait Foo<'a, 't> {\n     fn no_bound<'b>(self, b: Inv<'b>);\n     fn has_bound<'b:'a>(self, b: Inv<'b>);\n     fn wrong_bound1<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n+    fn wrong_bound2<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n     fn okay_bound<'b,'c,'d:'a+'b+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n }\n@@ -47,6 +48,10 @@ impl<'a, 't> Foo<'a, 't> for &'a isize {\n         // cases.\n     }\n \n+    fn wrong_bound2(self, b: Inv, c: Inv, d: Inv) {\n+        //~^ ERROR lifetime parameters or bounds on method `wrong_bound2` do not match the trait\n+    }\n+\n     fn okay_bound<'b,'c,'e:'b+'c>(self, b: Inv<'b>, c: Inv<'c>, e: Inv<'e>) {\n     }\n "}, {"sha": "b530fea1e5977a3f44659ec3ad8f2deab756660c", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cd8ca262570d856d354d4ea28632197ca8be15b9/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8ca262570d856d354d4ea28632197ca8be15b9/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=cd8ca262570d856d354d4ea28632197ca8be15b9", "patch": "@@ -1,50 +1,59 @@\n error[E0195]: lifetime parameters or bounds on method `no_bound` do not match the trait declaration\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:28:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:29:16\n    |\n LL |     fn no_bound<'b>(self, b: Inv<'b>);\n-   |     ---------------------------------- lifetimes in impl do not match this method in trait\n+   |                ---- lifetimes in impl do not match this method in trait\n ...\n LL |     fn no_bound<'b:'a>(self, b: Inv<'b>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+   |                ^^^^^^^ lifetimes do not match method in trait\n \n error[E0195]: lifetime parameters or bounds on method `has_bound` do not match the trait declaration\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:32:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:33:17\n    |\n LL |     fn has_bound<'b:'a>(self, b: Inv<'b>);\n-   |     -------------------------------------- lifetimes in impl do not match this method in trait\n+   |                 ------- lifetimes in impl do not match this method in trait\n ...\n LL |     fn has_bound<'b>(self, b: Inv<'b>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+   |                 ^^^^ lifetimes do not match method in trait\n \n error[E0308]: method not compatible with trait\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:5\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n               found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n-note: the lifetime 'c as defined on the method body at 36:5...\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+note: the lifetime 'c as defined on the method body at 37:5...\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:5\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 36:5\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 37:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:5\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0195]: lifetime parameters or bounds on method `wrong_bound2` do not match the trait declaration\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:51:5\n+   |\n+LL |     fn wrong_bound2<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n+   |                    ---------------- lifetimes in impl do not match this method in trait\n+...\n+LL |     fn wrong_bound2(self, b: Inv, c: Inv, d: Inv) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:53:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:58:5\n    |\n LL |     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n    |     ------------------------------------------------------- definition of `another_bound` from trait\n ...\n LL |     fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'x: 't`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0195, E0276, E0308.\n For more information about an error, try `rustc --explain E0195`."}, {"sha": "3860c93a45f49abd76d491d72b4008fc6148a997", "filename": "src/test/ui/error-codes/E0195.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd8ca262570d856d354d4ea28632197ca8be15b9/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd8ca262570d856d354d4ea28632197ca8be15b9/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0195.stderr?ref=cd8ca262570d856d354d4ea28632197ca8be15b9", "patch": "@@ -1,11 +1,11 @@\n error[E0195]: lifetime parameters or bounds on method `bar` do not match the trait declaration\n-  --> $DIR/E0195.rs:19:5\n+  --> $DIR/E0195.rs:19:11\n    |\n LL |     fn bar<'a,'b:'a>(x: &'a str, y: &'b str);\n-   |     ----------------------------------------- lifetimes in impl do not match this method in trait\n+   |           ---------- lifetimes in impl do not match this method in trait\n ...\n LL |     fn bar<'a,'b>(x: &'a str, y: &'b str) { //~ ERROR E0195\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n+   |           ^^^^^^^ lifetimes do not match method in trait\n \n error: aborting due to previous error\n "}]}