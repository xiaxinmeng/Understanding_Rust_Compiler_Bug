{"sha": "1594b58ce78b772aeb4bc8913f7f0c6ea3e0fcc7", "node_id": "C_kwDOAAsO6NoAKDE1OTRiNThjZTc4Yjc3MmFlYjRiYzg5MTNmN2YwYzZlYTNlMGZjYzc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-03T22:15:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-03T22:15:22Z"}, "message": "Rollup merge of #107595 - michaelwoerister:retry_proc_macro_loading, r=petrochenkov\n\nRetry opening proc-macro DLLs a few times on Windows.\n\nOn Windows, the compiler [sometimes](https://users.rust-lang.org/t/error-loadlibraryexw-failed/77603) fails with the message `error: LoadLibraryExW failed` when trying to load a proc-macro crate. The error seems to occur intermittently, similar to https://github.com/rust-lang/rust/issues/86929, however, it seems to be almost impossible to reproduce outside of CI environments and thus very hard to debug. The fact that the error only occurs intermittently makes me think that this is a timing related issue.\n\nThis PR is an attempt to mitigate the issue by letting the compiler retry a few times when encountering this specific error (which resolved the issue described in https://github.com/rust-lang/rust/issues/86929).", "tree": {"sha": "29c7c3d693002c29ead56dacc73ffc02b3dbcf7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29c7c3d693002c29ead56dacc73ffc02b3dbcf7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1594b58ce78b772aeb4bc8913f7f0c6ea3e0fcc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj3Yd6CRBK7hj4Ov3rIwAAR0oIABbb67HzlY76pP2UOvwdu49Y\nd6GSvinQs7ShU3DArl4Z4jNdygSIcBj1ckDZlGT377pBq8ugCOLprAaGp2VJ3Mmu\nVYhD6SdcCq8Ye0gBl903v0SszgNlQEDARtWnNILIuxezgkmyB70qKTzWrDSjU4AE\nQjX1woNIV+5W4ozxmLM0VIGrqn+VAgw9lPjHmu5zj/m88h7cWcs6Q2vhIVQ1a1Je\nCqxkd+HFS4soGMS/qv9yI9I64ty58YDJKGzdNRkw64xOg5o7HNbXzywFw7Mb1by5\nn29mnhAaNEyVhHDuBYJZ83XUSFEb+cCGZQtdKfQODddJSrDk0km7t1bGrs4UF7c=\n=Y/2A\n-----END PGP SIGNATURE-----\n", "payload": "tree 29c7c3d693002c29ead56dacc73ffc02b3dbcf7f\nparent e99e05d13592d2e9868fa69f98dc01f9766f05ed\nparent 227b2858da8aac6791e86a86f938a652993e5ea3\nauthor Michael Goulet <michael@errs.io> 1675462522 -0800\ncommitter GitHub <noreply@github.com> 1675462522 -0800\n\nRollup merge of #107595 - michaelwoerister:retry_proc_macro_loading, r=petrochenkov\n\nRetry opening proc-macro DLLs a few times on Windows.\n\nOn Windows, the compiler [sometimes](https://users.rust-lang.org/t/error-loadlibraryexw-failed/77603) fails with the message `error: LoadLibraryExW failed` when trying to load a proc-macro crate. The error seems to occur intermittently, similar to https://github.com/rust-lang/rust/issues/86929, however, it seems to be almost impossible to reproduce outside of CI environments and thus very hard to debug. The fact that the error only occurs intermittently makes me think that this is a timing related issue.\n\nThis PR is an attempt to mitigate the issue by letting the compiler retry a few times when encountering this specific error (which resolved the issue described in https://github.com/rust-lang/rust/issues/86929).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1594b58ce78b772aeb4bc8913f7f0c6ea3e0fcc7", "html_url": "https://github.com/rust-lang/rust/commit/1594b58ce78b772aeb4bc8913f7f0c6ea3e0fcc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1594b58ce78b772aeb4bc8913f7f0c6ea3e0fcc7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99e05d13592d2e9868fa69f98dc01f9766f05ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/e99e05d13592d2e9868fa69f98dc01f9766f05ed", "html_url": "https://github.com/rust-lang/rust/commit/e99e05d13592d2e9868fa69f98dc01f9766f05ed"}, {"sha": "227b2858da8aac6791e86a86f938a652993e5ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/227b2858da8aac6791e86a86f938a652993e5ea3", "html_url": "https://github.com/rust-lang/rust/commit/227b2858da8aac6791e86a86f938a652993e5ea3"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "44d6c587da3dfce7a336daa6ce1a9828c0d03fff", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1594b58ce78b772aeb4bc8913f7f0c6ea3e0fcc7/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1594b58ce78b772aeb4bc8913f7f0c6ea3e0fcc7/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=1594b58ce78b772aeb4bc8913f7f0c6ea3e0fcc7", "patch": "@@ -33,6 +33,7 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n use proc_macro::bridge::client::ProcMacro;\n use std::ops::Fn;\n use std::path::Path;\n+use std::time::Duration;\n use std::{cmp, env};\n \n #[derive(Clone)]\n@@ -689,8 +690,7 @@ impl<'a> CrateLoader<'a> {\n     ) -> Result<&'static [ProcMacro], CrateError> {\n         // Make sure the path contains a / or the linker will search for it.\n         let path = env::current_dir().unwrap().join(path);\n-        let lib = unsafe { libloading::Library::new(path) }\n-            .map_err(|err| CrateError::DlOpen(err.to_string()))?;\n+        let lib = load_dylib(&path, 5).map_err(|err| CrateError::DlOpen(err))?;\n \n         let sym_name = self.sess.generate_proc_macro_decls_symbol(stable_crate_id);\n         let sym = unsafe { lib.get::<*const &[ProcMacro]>(sym_name.as_bytes()) }\n@@ -1093,3 +1093,41 @@ fn alloc_error_handler_spans(sess: &Session, krate: &ast::Crate) -> Vec<Span> {\n     visit::walk_crate(&mut f, krate);\n     f.spans\n }\n+\n+// On Windows the compiler would sometimes intermittently fail to open the\n+// proc-macro DLL with `Error::LoadLibraryExW`. It is suspected that something in the\n+// system still holds a lock on the file, so we retry a few times before calling it\n+// an error.\n+fn load_dylib(path: &Path, max_attempts: usize) -> Result<libloading::Library, String> {\n+    assert!(max_attempts > 0);\n+\n+    let mut last_error = None;\n+\n+    for attempt in 0..max_attempts {\n+        match unsafe { libloading::Library::new(&path) } {\n+            Ok(lib) => {\n+                if attempt > 0 {\n+                    debug!(\n+                        \"Loaded proc-macro `{}` after {} attempts.\",\n+                        path.display(),\n+                        attempt + 1\n+                    );\n+                }\n+                return Ok(lib);\n+            }\n+            Err(err) => {\n+                // Only try to recover from this specific error.\n+                if !matches!(err, libloading::Error::LoadLibraryExW { .. }) {\n+                    return Err(err.to_string());\n+                }\n+\n+                last_error = Some(err);\n+                std::thread::sleep(Duration::from_millis(100));\n+                debug!(\"Failed to load proc-macro `{}`. Retrying.\", path.display());\n+            }\n+        }\n+    }\n+\n+    debug!(\"Failed to load proc-macro `{}` even after {} attempts.\", path.display(), max_attempts);\n+    Err(format!(\"{} (retried {} times)\", last_error.unwrap(), max_attempts))\n+}"}]}