{"sha": "983bc9d0a5c1296400ab6b85641fb1a0fc967842", "node_id": "C_kwDOAAsO6NoAKDk4M2JjOWQwYTVjMTI5NjQwMGFiNmI4NTY0MWZiMWEwZmM5Njc4NDI", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-10-04T23:24:37Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-10-05T01:03:22Z"}, "message": "Use arrays over tuples in SIMD tests\n\nSimd([u8; 64]) is now valid for repr(simd), so simplify tests with\nhuge tuples instead. This also found some completely untested code,\nso let's just ditch that.", "tree": {"sha": "757ea6c57b61d7a4ec9f273ac42da01a9b66a82e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/757ea6c57b61d7a4ec9f273ac42da01a9b66a82e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/983bc9d0a5c1296400ab6b85641fb1a0fc967842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/983bc9d0a5c1296400ab6b85641fb1a0fc967842", "html_url": "https://github.com/rust-lang/rust/commit/983bc9d0a5c1296400ab6b85641fb1a0fc967842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/983bc9d0a5c1296400ab6b85641fb1a0fc967842/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3", "html_url": "https://github.com/rust-lang/rust/commit/175b8db73bfd078b4bcd3c28c8d6f51d5895ebf3"}], "stats": {"total": 291, "additions": 69, "deletions": 222}, "files": [{"sha": "92c4e67dfdd1961b68adaf7b54df1b03dfdec5ef", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/983bc9d0a5c1296400ab6b85641fb1a0fc967842/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983bc9d0a5c1296400ab6b85641fb1a0fc967842/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=983bc9d0a5c1296400ab6b85641fb1a0fc967842", "patch": "@@ -8,62 +8,39 @@\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-pub struct u32x2(pub u32, pub u32);\n+pub struct u32x2([u32; 2]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n+pub struct u32x4([u32; 4]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x8(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n+struct u8x8([u8; 8]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x16(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n+struct u8x16([u8; 16]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x32(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n+struct u8x32([u8; 32]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x64(\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-    pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8, pub u8,\n-);\n+struct u8x64([u8; 64]);\n \n extern \"platform-intrinsic\" {\n     fn simd_bitmask<T, U>(x: T) -> U;\n }\n \n fn main() {\n-    let m2 = u32x2(0, 0);\n-    let m4 = u32x4(0, 0, 0, 0);\n-    let m8 = u8x8(0, 0, 0, 0, 0, 0, 0, 0);\n-    let m16 = u8x16(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n-    let m32 = u8x32(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n-    let m64 = u8x64(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n+    let m2 = u32x2([0; 2]);\n+    let m4 = u32x4([0; 4]);\n+    let m8 = u8x8([0; 8]);\n+    let m16 = u8x16([0; 16]);\n+    let m32 = u8x32([0; 32]);\n+    let m64 = u8x64([0; 64]);\n \n     unsafe {\n         let _: u8 = simd_bitmask(m2);"}, {"sha": "4919b724df2e958b594d8130d2818a878090d4de", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-bitmask.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/983bc9d0a5c1296400ab6b85641fb1a0fc967842/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/983bc9d0a5c1296400ab6b85641fb1a0fc967842/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.stderr?ref=983bc9d0a5c1296400ab6b85641fb1a0fc967842", "patch": "@@ -1,29 +1,29 @@\n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:76:22\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:53:22\n    |\n LL |         let _: u16 = simd_bitmask(m2);\n    |                      ^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:79:22\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:56:22\n    |\n LL |         let _: u16 = simd_bitmask(m8);\n    |                      ^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u32`, expected `u16`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:82:22\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:59:22\n    |\n LL |         let _: u32 = simd_bitmask(m16);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u64`, expected `u32`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:85:22\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:62:22\n    |\n LL |         let _: u64 = simd_bitmask(m32);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u128`, expected `u64`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:88:23\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:65:23\n    |\n LL |         let _: u128 = simd_bitmask(m64);\n    |                       ^^^^^^^^^^^^^^^^^"}, {"sha": "0dee3a0e869d79eaaeffd40c37b10159dd0a86f8", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.rs", "status": "modified", "additions": 27, "deletions": 141, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/983bc9d0a5c1296400ab6b85641fb1a0fc967842/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983bc9d0a5c1296400ab6b85641fb1a0fc967842/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs?ref=983bc9d0a5c1296400ab6b85641fb1a0fc967842", "patch": "@@ -6,160 +6,53 @@\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x2(u8, u8);\n+struct u8x2([u8; 2]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x4(u8, u8, u8, u8);\n+struct u8x4([u8; 4]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x8(u8, u8, u8, u8, u8, u8, u8, u8);\n+struct u8x8([u8; 8]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x16(\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-);\n+struct u8x16([u8; 16]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x32(\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-);\n+struct u8x32([u8; 32]);\n \n #[repr(simd)]\n #[derive(Copy, Clone)]\n-struct u8x64(\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-    u8,\n-);\n+struct u8x64([u8; 64]);\n+\n+extern \"platform-intrinsic\" {\n+    pub fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n+    pub fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;\n+    pub fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\n+    pub fn simd_shuffle16<T, U>(x: T, y: T, idx: [u32; 16]) -> U;\n+    pub fn simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U;\n+    pub fn simd_shuffle64<T, U>(x: T, y: T, idx: [u32; 64]) -> U;\n+}\n \n // Test vectors by lane size. Since LLVM does not distinguish between a shuffle\n // over two f32s and a shuffle over two u64s, or any other such combination,\n // it is not necessary to test every possible vector, only lane counts.\n macro_rules! test_shuffle_lanes {\n-    ($n:literal, $x:ident, $y:ident, $t:tt) => {\n+    ($n:literal, $x:ident, $y:ident) => {\n         unsafe {\n                 let shuffle: $x = {\n                     const ARR: [u32; $n] = {\n                         let mut arr = [0; $n];\n                         arr[0] = $n * 2;\n                         arr\n                     };\n-                    extern \"platform-intrinsic\" {\n-                        pub fn $y<T, U>(x: T, y: T, idx: [u32; $n]) -> U;\n-                    }\n-                    let vec1 = $x$t;\n-                    let vec2 = $x$t;\n+                    let mut n: u8 = $n;\n+                    let vals = [0; $n].map(|_| { n = n - 1; n });\n+                    let vec1 = $x(vals);\n+                    let vec2 = $x(vals);\n                     $y(vec1, vec2, ARR)\n                 };\n         }\n@@ -175,24 +68,17 @@ macro_rules! test_shuffle_lanes {\n // And unfortunately, standard comments, as in the UI test harness, disappear in macros!\n \n fn main() {\n-    test_shuffle_lanes!(2, u8x2, simd_shuffle2, (2, 1));\n-    test_shuffle_lanes!(4, u8x4, simd_shuffle4, (4, 3, 2, 1));\n-    test_shuffle_lanes!(8, u8x8, simd_shuffle8, (8, 7, 6, 5, 4, 3, 2, 1));\n-    test_shuffle_lanes!(16, u8x16, simd_shuffle16,\n-        (16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n-    test_shuffle_lanes!(32, u8x32, simd_shuffle32,\n-        (32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n-         15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n-    test_shuffle_lanes!(64, u8x64, simd_shuffle64,\n-        (64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49,\n-         48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,\n-         32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n-         16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+    test_shuffle_lanes!(2, u8x2, simd_shuffle2);\n+    test_shuffle_lanes!(4, u8x4, simd_shuffle4);\n+    test_shuffle_lanes!(8, u8x8, simd_shuffle8);\n+    test_shuffle_lanes!(16, u8x16, simd_shuffle16);\n+    test_shuffle_lanes!(32, u8x32, simd_shuffle32);\n+    test_shuffle_lanes!(64, u8x64, simd_shuffle64);\n \n     extern \"platform-intrinsic\" {\n         fn simd_shuffle<T, I, U>(a: T, b: T, i: I) -> U;\n     }\n-    let v = u8x2(0, 0);\n+    let v = u8x2([0, 0]);\n     const I: [u32; 2] = [4, 4];\n     unsafe {\n         let _: u8x2 = simd_shuffle(v, v, I);"}, {"sha": "5492d14f7c924bcd2961d64da58babe31ce5f2f1", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.stderr", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/983bc9d0a5c1296400ab6b85641fb1a0fc967842/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/983bc9d0a5c1296400ab6b85641fb1a0fc967842/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr?ref=983bc9d0a5c1296400ab6b85641fb1a0fc967842", "patch": "@@ -1,78 +1,71 @@\n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: shuffle index #0 is out of bounds (limit 4)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n LL |                     $y(vec1, vec2, ARR)\n    |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL |     test_shuffle_lanes!(2, u8x2, simd_shuffle2, (2, 1));\n-   |     ---------------------------------------------------- in this macro invocation\n+LL |     test_shuffle_lanes!(2, u8x2, simd_shuffle2);\n+   |     -------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: shuffle index #0 is out of bounds (limit 8)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n LL |                     $y(vec1, vec2, ARR)\n    |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL |     test_shuffle_lanes!(4, u8x4, simd_shuffle4, (4, 3, 2, 1));\n-   |     ---------------------------------------------------------- in this macro invocation\n+LL |     test_shuffle_lanes!(4, u8x4, simd_shuffle4);\n+   |     -------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: shuffle index #0 is out of bounds (limit 16)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n LL |                     $y(vec1, vec2, ARR)\n    |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL |     test_shuffle_lanes!(8, u8x8, simd_shuffle8, (8, 7, 6, 5, 4, 3, 2, 1));\n-   |     ---------------------------------------------------------------------- in this macro invocation\n+LL |     test_shuffle_lanes!(8, u8x8, simd_shuffle8);\n+   |     -------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle16` intrinsic: shuffle index #0 is out of bounds (limit 32)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n-LL |                       $y(vec1, vec2, ARR)\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL | /     test_shuffle_lanes!(16, u8x16, simd_shuffle16,\n-LL | |         (16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n-   | |_________________________________________________________________- in this macro invocation\n+LL |     test_shuffle_lanes!(16, u8x16, simd_shuffle16);\n+   |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle32` intrinsic: shuffle index #0 is out of bounds (limit 64)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n-LL |                       $y(vec1, vec2, ARR)\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL | /     test_shuffle_lanes!(32, u8x32, simd_shuffle32,\n-LL | |         (32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n-LL | |          15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n-   | |_____________________________________________________________- in this macro invocation\n+LL |     test_shuffle_lanes!(32, u8x32, simd_shuffle32);\n+   |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle64` intrinsic: shuffle index #0 is out of bounds (limit 128)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+  --> $DIR/shuffle-not-out-of-bounds.rs:56:21\n    |\n-LL |                       $y(vec1, vec2, ARR)\n-   |                       ^^^^^^^^^^^^^^^^^^^\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n ...\n-LL | /     test_shuffle_lanes!(64, u8x64, simd_shuffle64,\n-LL | |         (64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49,\n-LL | |          48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,\n-LL | |          32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n-LL | |          16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n-   | |_________________________________________________________________- in this macro invocation\n+LL |     test_shuffle_lanes!(64, u8x64, simd_shuffle64);\n+   |     ----------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle` intrinsic: shuffle index #0 is out of bounds (limit 4)\n-  --> $DIR/shuffle-not-out-of-bounds.rs:198:23\n+  --> $DIR/shuffle-not-out-of-bounds.rs:84:23\n    |\n LL |         let _: u8x2 = simd_shuffle(v, v, I);\n    |                       ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4a54afee8075899771243858c438a7f62841ba52", "filename": "src/test/ui/simd/simd-intrinsic-generic-reduction.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/983bc9d0a5c1296400ab6b85641fb1a0fc967842/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983bc9d0a5c1296400ab6b85641fb1a0fc967842/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-reduction.rs?ref=983bc9d0a5c1296400ab6b85641fb1a0fc967842", "patch": "@@ -24,15 +24,6 @@ struct f32x4(pub f32, pub f32, pub f32, pub f32);\n #[derive(Copy, Clone)]\n struct b8x4(pub i8, pub i8, pub i8, pub i8);\n \n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-struct b8x16(\n-    pub i8, pub i8, pub i8, pub i8,\n-    pub i8, pub i8, pub i8, pub i8,\n-    pub i8, pub i8, pub i8, pub i8,\n-    pub i8, pub i8, pub i8, pub i8\n-);\n-\n extern \"platform-intrinsic\" {\n     fn simd_reduce_add_unordered<T, U>(x: T) -> U;\n     fn simd_reduce_mul_unordered<T, U>(x: T) -> U;"}]}