{"sha": "f8477c9da5ed784f5981611b6c12623cd2b44806", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NDc3YzlkYTVlZDc4NGY1OTgxNjExYjZjMTI2MjNjZDJiNDQ4MDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-22T01:26:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-22T01:26:14Z"}, "message": "auto merge of #11500 : jhasse/rust/patch-rlib, r=alexcrichton\n\nCurrently `rustpkg` only looks for shared libraries. After this patch it also looks for `*.rlib` files.", "tree": {"sha": "db5a4450a71091410420ec9f4552b3191bfe63ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db5a4450a71091410420ec9f4552b3191bfe63ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8477c9da5ed784f5981611b6c12623cd2b44806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8477c9da5ed784f5981611b6c12623cd2b44806", "html_url": "https://github.com/rust-lang/rust/commit/f8477c9da5ed784f5981611b6c12623cd2b44806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8477c9da5ed784f5981611b6c12623cd2b44806/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "918a7314a8d49d870ff95f8ed6c7bdc5895138c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/918a7314a8d49d870ff95f8ed6c7bdc5895138c9", "html_url": "https://github.com/rust-lang/rust/commit/918a7314a8d49d870ff95f8ed6c7bdc5895138c9"}, {"sha": "6ccc1e88b7bdfde84df408eb559197ba786dbb22", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ccc1e88b7bdfde84df408eb559197ba786dbb22", "html_url": "https://github.com/rust-lang/rust/commit/6ccc1e88b7bdfde84df408eb559197ba786dbb22"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "3c91e6607849acbc42dca55b0639686a47c5c567", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f8477c9da5ed784f5981611b6c12623cd2b44806/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8477c9da5ed784f5981611b6c12623cd2b44806/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=f8477c9da5ed784f5981611b6c12623cd2b44806", "patch": "@@ -226,10 +226,13 @@ fn library_in(short_name: &str, version: &Version, dir_to_search: &Path) -> Opti\n     };\n     debug!(\"dir has {:?} entries\", dir_contents.len());\n \n-    let lib_prefix = format!(\"{}{}\", os::consts::DLL_PREFIX, short_name);\n-    let lib_filetype = os::consts::DLL_EXTENSION;\n+    let dll_prefix = format!(\"{}{}\", os::consts::DLL_PREFIX, short_name);\n+    let dll_filetype = os::consts::DLL_EXTENSION;\n+    let rlib_prefix = format!(\"{}{}\", \"lib\", short_name);\n+    let rlib_filetype = \"rlib\";\n \n-    debug!(\"lib_prefix = {} and lib_filetype = {}\", lib_prefix, lib_filetype);\n+    debug!(\"dll_prefix = {} and dll_filetype = {}\", dll_prefix, dll_filetype);\n+    debug!(\"rlib_prefix = {} and rlib_filetype = {}\", rlib_prefix, rlib_filetype);\n \n     // Find a filename that matches the pattern:\n     // (lib_prefix)-hash-(version)(lib_suffix)\n@@ -238,7 +241,7 @@ fn library_in(short_name: &str, version: &Version, dir_to_search: &Path) -> Opti\n         debug!(\"p = {}, p's extension is {:?}\", p.display(), extension);\n         match extension {\n             None => false,\n-            Some(ref s) => lib_filetype == *s\n+            Some(ref s) => dll_filetype == *s || rlib_filetype == *s,\n         }\n     });\n \n@@ -258,17 +261,21 @@ fn library_in(short_name: &str, version: &Version, dir_to_search: &Path) -> Opti\n                 Some(i) => {\n                     debug!(\"Maybe {} is a version\", f_name.slice(i + 1, f_name.len()));\n                     match try_parsing_version(f_name.slice(i + 1, f_name.len())) {\n-                       Some(ref found_vers) if version == found_vers => {\n-                           match f_name.slice(0, i).rfind('-') {\n-                               Some(j) => {\n-                                   debug!(\"Maybe {} equals {}\", f_name.slice(0, j), lib_prefix);\n-                                   if f_name.slice(0, j) == lib_prefix {\n-                                       result_filename = Some(p_path.clone());\n-                                   }\n-                                   break;\n-                               }\n-                               None => break\n-                           }\n+                        Some(ref found_vers) if version == found_vers => {\n+                            match f_name.slice(0, i).rfind('-') {\n+                                Some(j) => {\n+                                    let lib_prefix = match p_path.extension_str() {\n+                                        Some(ref s) if dll_filetype == *s => &dll_prefix,\n+                                        _ => &rlib_prefix,\n+                                    };\n+                                    debug!(\"Maybe {} equals {}\", f_name.slice(0, j), *lib_prefix);\n+                                    if f_name.slice(0, j) == *lib_prefix {\n+                                        result_filename = Some(p_path.clone());\n+                                    }\n+                                    break;\n+                                }\n+                                None => break\n+                            }\n \n                        }\n                        _ => { f_name = f_name.slice(0, i); }"}]}