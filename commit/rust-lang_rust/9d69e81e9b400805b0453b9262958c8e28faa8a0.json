{"sha": "9d69e81e9b400805b0453b9262958c8e28faa8a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNjllODFlOWI0MDA4MDViMDQ1M2I5MjYyOTU4YzhlMjhmYWE4YTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-29T02:08:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-29T02:08:02Z"}, "message": "Auto merge of #53642 - alexcrichton:fix-target-cpu-native, r=arielb1\n\nFix warnings about the `native` target-cpu\n\nThis fixes a regression from #53031 where specifying `-C target-cpu=native` is\nprinting a lot of warnings from LLVM about `native` being an unknown CPU. It\nturns out that `native` is indeed an unknown CPU and we have to perform a\nmapping to an actual CPU name, but this mapping is only performed in one\nlocation rather than all locations we inform LLVM about the target CPU.\n\nThis commit centralizes the mapping of `native` to LLVM's value of the native\nCPU, ensuring that all locations we inform LLVM about the `target-cpu` it's\nnever `native`.\n\nCloses #53322", "tree": {"sha": "a2683e57d8b6c9eaf1044fe7b6d6b8389c7ff532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2683e57d8b6c9eaf1044fe7b6d6b8389c7ff532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d69e81e9b400805b0453b9262958c8e28faa8a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d69e81e9b400805b0453b9262958c8e28faa8a0", "html_url": "https://github.com/rust-lang/rust/commit/9d69e81e9b400805b0453b9262958c8e28faa8a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d69e81e9b400805b0453b9262958c8e28faa8a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1d02c307348057fd0554ad934006b186f8b6826", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d02c307348057fd0554ad934006b186f8b6826", "html_url": "https://github.com/rust-lang/rust/commit/f1d02c307348057fd0554ad934006b186f8b6826"}, {"sha": "1fd45a13dee17701fc0aeaa847c1919d485d09fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd45a13dee17701fc0aeaa847c1919d485d09fd", "html_url": "https://github.com/rust-lang/rust/commit/1fd45a13dee17701fc0aeaa847c1919d485d09fd"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "c8c0d4c38a22126fb405cbd9f65acd7228dbd380", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9d69e81e9b400805b0453b9262958c8e28faa8a0", "patch": "@@ -649,13 +649,6 @@ impl Session {\n         }\n     }\n \n-    pub fn target_cpu(&self) -> &str {\n-        match self.opts.cg.target_cpu {\n-            Some(ref s) => &**s,\n-            None => &*self.target.target.options.cpu\n-        }\n-    }\n-\n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         if let Some(x) = self.opts.cg.force_frame_pointers {\n             x"}, {"sha": "c8a2b47e98d77e9472b73d4abc4d1e0c886ea807", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=9d69e81e9b400805b0453b9262958c8e28faa8a0", "patch": "@@ -124,7 +124,8 @@ pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n }\n \n pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n-    let target_cpu = CString::new(cx.tcx.sess.target_cpu().to_string()).unwrap();\n+    let cpu = llvm_util::target_cpu(cx.tcx.sess);\n+    let target_cpu = CString::new(cpu).unwrap();\n     llvm::AddFunctionAttrStringValue(\n             llfn,\n             llvm::AttributePlace::Function,"}, {"sha": "eee60b262a1c7b44b9d90f4745d67db015015742", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=9d69e81e9b400805b0453b9262958c8e28faa8a0", "patch": "@@ -26,6 +26,7 @@ use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n use serialize::{json, Encoder};\n+use llvm_util;\n \n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n@@ -202,7 +203,7 @@ impl<'a> GccLinker<'a> {\n         };\n \n         self.linker_arg(&format!(\"-plugin-opt={}\", opt_level));\n-        self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", self.sess.target_cpu()));\n+        self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", llvm_util::target_cpu(self.sess)));\n \n         match self.sess.opts.cg.lto {\n             config::Lto::Thin |"}, {"sha": "2373428d68c0d64be518e5cccd91c154770c46f6", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=9d69e81e9b400805b0453b9262958c8e28faa8a0", "patch": "@@ -25,6 +25,7 @@ use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n use time_graph::{self, TimeGraph, Timeline};\n use llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n+use llvm_util;\n use {CodegenResults, ModuleSource, ModuleCodegen, CompiledModule, ModuleKind};\n use CrateInfo;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n@@ -173,7 +174,7 @@ pub fn target_machine_factory(sess: &Session, find_features: bool)\n     let singlethread = sess.target.target.options.singlethread;\n \n     let triple = SmallCStr::new(&sess.target.target.llvm_target);\n-    let cpu = SmallCStr::new(sess.target_cpu());\n+    let cpu = SmallCStr::new(llvm_util::target_cpu(sess));\n     let features = attributes::llvm_target_features(sess)\n         .collect::<Vec<_>>()\n         .join(\",\");"}, {"sha": "51b0299e63f46c57eff8199809d3595ccb963716", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=9d69e81e9b400805b0453b9262958c8e28faa8a0", "patch": "@@ -1449,6 +1449,7 @@ extern \"C\" {\n     pub fn LLVMRustPrintTargetCPUs(T: &TargetMachine);\n     pub fn LLVMRustPrintTargetFeatures(T: &TargetMachine);\n \n+    pub fn LLVMRustGetHostCPUName(len: *mut usize) -> *const c_char;\n     pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,\n                                        CPU: *const c_char,\n                                        Features: *const c_char,"}, {"sha": "9fcc33d82cfa4d1ea751db891308dc3680eda081", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=9d69e81e9b400805b0453b9262958c8e28faa8a0", "patch": "@@ -17,6 +17,8 @@ use libc::c_int;\n use std::ffi::CString;\n use syntax::feature_gate::UnstableFeatures;\n \n+use std::str;\n+use std::slice;\n use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::Once;\n \n@@ -262,3 +264,19 @@ pub(crate) fn print(req: PrintRequest, sess: &Session) {\n         }\n     }\n }\n+\n+pub fn target_cpu(sess: &Session) -> &str {\n+    let name = match sess.opts.cg.target_cpu {\n+        Some(ref s) => &**s,\n+        None => &*sess.target.target.options.cpu\n+    };\n+    if name != \"native\" {\n+        return name\n+    }\n+\n+    unsafe {\n+        let mut len = 0;\n+        let ptr = llvm::LLVMRustGetHostCPUName(&mut len);\n+        str::from_utf8(slice::from_raw_parts(ptr as *const u8, len)).unwrap()\n+    }\n+}"}, {"sha": "09befdaae37c5971a331f2c19376876c1d21491c", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=9d69e81e9b400805b0453b9262958c8e28faa8a0", "patch": "@@ -359,6 +359,12 @@ extern \"C\" void LLVMRustPrintTargetFeatures(LLVMTargetMachineRef) {\n }\n #endif\n \n+extern \"C\" const char* LLVMRustGetHostCPUName(size_t *len) {\n+  StringRef Name = sys::getHostCPUName();\n+  *len = Name.size();\n+  return Name.data();\n+}\n+\n extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     const char *TripleStr, const char *CPU, const char *Feature,\n     LLVMRustCodeModel RustCM, LLVMRustRelocMode RustReloc,\n@@ -381,11 +387,6 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     return nullptr;\n   }\n \n-  StringRef RealCPU = CPU;\n-  if (RealCPU == \"native\") {\n-    RealCPU = sys::getHostCPUName();\n-  }\n-\n   TargetOptions Options;\n \n   Options.FloatABIType = FloatABI::Default;\n@@ -417,7 +418,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   if (RustCM != LLVMRustCodeModel::None)\n     CM = fromRust(RustCM);\n   TargetMachine *TM = TheTarget->createTargetMachine(\n-      Trip.getTriple(), RealCPU, Feature, Options, RM, CM, OptLevel);\n+      Trip.getTriple(), CPU, Feature, Options, RM, CM, OptLevel);\n   return wrap(TM);\n }\n "}, {"sha": "fee41461612dbdc72ce984189bb5c1c27452e82a", "filename": "src/test/run-make-fulldeps/target-cpu-native/Makefile", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Ftest%2Frun-make-fulldeps%2Ftarget-cpu-native%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9d69e81e9b400805b0453b9262958c8e28faa8a0/src%2Ftest%2Frun-make-fulldeps%2Ftarget-cpu-native%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftarget-cpu-native%2FMakefile?ref=9d69e81e9b400805b0453b9262958c8e28faa8a0", "patch": "@@ -1,5 +1,20 @@\n -include ../tools.mk\n \n-all:\n-\t$(RUSTC) foo.rs -C target-cpu=native\n+# I *really* don't want to deal with a cross-platform way to compare file sizes,\n+# tests in `make` sort of are awful\n+ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n+all: $(TMPDIR)/out.log\n+\t# Make sure no warnings about \"unknown CPU `native`\" were emitted\n+\tif [ \"$$(wc -c $(TMPDIR)/out.log | cut -d' ' -f 1)\" = \"0\" ]; then \\\n+\t  echo no warnings generated; \\\n+\telse \\\n+\t  exit 1; \\\n+\tfi\n+else\n+all: $(TMPDIR)/out.log\n+endif\n+\n+\n+$(TMPDIR)/out.log:\n+\t$(RUSTC) foo.rs -C target-cpu=native 2>&1 | tee $(TMPDIR)/out.log\n \t$(call RUN,foo)"}]}