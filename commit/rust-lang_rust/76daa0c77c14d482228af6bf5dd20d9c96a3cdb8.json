{"sha": "76daa0c77c14d482228af6bf5dd20d9c96a3cdb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZGFhMGM3N2MxNGQ0ODIyMjhhZjZiZjVkZDIwZDljOTZhM2NkYjg=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-17T23:23:57Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-17T23:23:57Z"}, "message": "rollup merge of #18921: oli-obk/refactoring/graphviz/id/new/result_instead_of_fail\n\ncreating a new Id object requires the format to match a subset of `ID` format defined by the DOT language. When the format did not match, the function called assert. This was not mentioned in the docs or the spec. I made the failure explicit by returning an Result<Id, ()>.", "tree": {"sha": "ff913b9275983964e70fbce83e9a8b3f01552736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff913b9275983964e70fbce83e9a8b3f01552736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76daa0c77c14d482228af6bf5dd20d9c96a3cdb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76daa0c77c14d482228af6bf5dd20d9c96a3cdb8", "html_url": "https://github.com/rust-lang/rust/commit/76daa0c77c14d482228af6bf5dd20d9c96a3cdb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76daa0c77c14d482228af6bf5dd20d9c96a3cdb8/comments", "author": null, "committer": null, "parents": [{"sha": "db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5", "html_url": "https://github.com/rust-lang/rust/commit/db4d60afb0d17c9bff72bb7b6c3754c0e6d3f2b5"}, {"sha": "70bf4f72efc2f005e7cfc94b74bd946439272ca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/70bf4f72efc2f005e7cfc94b74bd946439272ca6", "html_url": "https://github.com/rust-lang/rust/commit/70bf4f72efc2f005e7cfc94b74bd946439272ca6"}], "stats": {"total": 54, "additions": 40, "deletions": 14}, "files": [{"sha": "e3b87e9b9df4b9c7b3b03e152e886b5bf20f581e", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/76daa0c77c14d482228af6bf5dd20d9c96a3cdb8/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76daa0c77c14d482228af6bf5dd20d9c96a3cdb8/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=76daa0c77c14d482228af6bf5dd20d9c96a3cdb8", "patch": "@@ -60,10 +60,10 @@ pub fn render_to<W:Writer>(output: &mut W) {\n }\n \n impl<'a> dot::Labeller<'a, Nd, Ed> for Edges {\n-    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(\"example1\") }\n+    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(\"example1\").unwrap() }\n \n     fn node_id(&'a self, n: &Nd) -> dot::Id<'a> {\n-        dot::Id::new(format!(\"N{}\", *n))\n+        dot::Id::new(format!(\"N{}\", *n)).unwrap()\n     }\n }\n \n@@ -163,9 +163,9 @@ pub fn render_to<W:Writer>(output: &mut W) {\n }\n \n impl<'a> dot::Labeller<'a, Nd, Ed<'a>> for Graph {\n-    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(\"example2\") }\n+    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(\"example2\").unwrap() }\n     fn node_id(&'a self, n: &Nd) -> dot::Id<'a> {\n-        dot::Id::new(format!(\"N{}\", n))\n+        dot::Id::new(format!(\"N{}\", n)).unwrap()\n     }\n     fn node_label<'a>(&'a self, n: &Nd) -> dot::LabelText<'a> {\n         dot::LabelStr(str::Slice(self.nodes[*n].as_slice()))\n@@ -219,9 +219,9 @@ pub fn render_to<W:Writer>(output: &mut W) {\n }\n \n impl<'a> dot::Labeller<'a, Nd<'a>, Ed<'a>> for Graph {\n-    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(\"example3\") }\n+    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(\"example3\").unwrap() }\n     fn node_id(&'a self, n: &Nd<'a>) -> dot::Id<'a> {\n-        dot::Id::new(format!(\"N{:u}\", n.val0()))\n+        dot::Id::new(format!(\"N{:u}\", n.val0())).unwrap()\n     }\n     fn node_label<'a>(&'a self, n: &Nd<'a>) -> dot::LabelText<'a> {\n         let &(i, _) = n;\n@@ -354,14 +354,22 @@ impl<'a> Id<'a> {\n     /// defined by the DOT language.  This function may change in the\n     /// future to accept a broader subset, or the entirety, of DOT's\n     /// `ID` format.)\n-    pub fn new<Name:str::IntoMaybeOwned<'a>>(name: Name) -> Id<'a> {\n+    ///\n+    /// Passing an invalid string (containing spaces, brackets,\n+    /// quotes, ...) will return an empty `Err` value.\n+    pub fn new<Name:str::IntoMaybeOwned<'a>>(name: Name) -> Result<Id<'a>, ()> {\n         let name = name.into_maybe_owned();\n         {\n             let mut chars = name.as_slice().chars();\n-            assert!(is_letter_or_underscore(chars.next().unwrap()));\n-            assert!(chars.all(is_constituent));\n+            match chars.next() {\n+                Some(c) if is_letter_or_underscore(c) => { ; },\n+                _ => return Err(())\n+            }\n+            if !chars.all(is_constituent) {\n+                return Err(());\n+            }\n         }\n-        return Id{ name: name };\n+        return Ok(Id{ name: name });\n \n         fn is_letter_or_underscore(c: char) -> bool {\n             in_range('a', c, 'z') || in_range('A', c, 'Z') || c == '_'\n@@ -627,12 +635,12 @@ mod tests {\n     }\n \n     fn id_name<'a>(n: &Node) -> Id<'a> {\n-        Id::new(format!(\"N{:u}\", *n))\n+        Id::new(format!(\"N{:u}\", *n)).unwrap()\n     }\n \n     impl<'a> Labeller<'a, Node, &'a Edge> for LabelledGraph {\n         fn graph_id(&'a self) -> Id<'a> {\n-            Id::new(self.name.as_slice())\n+            Id::new(self.name.as_slice()).unwrap()\n         }\n         fn node_id(&'a self, n: &Node) -> Id<'a> {\n             id_name(n)\n@@ -825,4 +833,22 @@ r#\"digraph syntax_tree {\n }\n \"#);\n     }\n+\n+    #[test]\n+    fn simple_id_construction() {\n+        let id1 = dot::Id::new(\"hello\");\n+        match id1 {\n+            Ok(_) => {;},\n+            Err(_) => panic!(\"'hello' is not a valid value for id anymore\")\n+        }\n+    }\n+\n+    #[test]\n+    fn badly_formatted_id() {\n+        let id2 = dot::Id::new(\"Weird { struct : ure } !!!\");\n+        match id2 {\n+            Ok(_) => panic!(\"graphviz id suddenly allows spaces, brackets and stuff\"),\n+            Err(_) => {;}\n+        }\n+    }\n }"}, {"sha": "78b3a1179ca59283f99e9a407b0575a874b629cb", "filename": "src/librustc/middle/cfg/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76daa0c77c14d482228af6bf5dd20d9c96a3cdb8/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76daa0c77c14d482228af6bf5dd20d9c96a3cdb8/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs?ref=76daa0c77c14d482228af6bf5dd20d9c96a3cdb8", "patch": "@@ -50,10 +50,10 @@ fn replace_newline_with_backslash_l(s: String) -> String {\n }\n \n impl<'a, 'ast> dot::Labeller<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast> {\n-    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(self.name.as_slice()) }\n+    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(self.name.as_slice()).unwrap() }\n \n     fn node_id(&'a self, &(i,_): &Node<'a>) -> dot::Id<'a> {\n-        dot::Id::new(format!(\"N{:u}\", i.node_id()))\n+        dot::Id::new(format!(\"N{:u}\", i.node_id())).unwrap()\n     }\n \n     fn node_label(&'a self, &(i, n): &Node<'a>) -> dot::LabelText<'a> {"}]}