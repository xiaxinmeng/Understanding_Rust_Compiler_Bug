{"sha": "77c8bd0b4e1805980ea811f543e65f870b74a59a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YzhiZDBiNGUxODA1OTgwZWE4MTFmNTQzZTY1Zjg3MGI3NGE1OWE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-06-02T19:14:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-02T19:14:22Z"}, "message": "Rollup merge of #50167 - fintelia:duration-nanos, r=sfackler\n\n Add as_nanos function to Duration\n\nDuration has historically lacked a way to get the actual number of nanoseconds it contained as a normal Rust type because u64 was of insufficient range, and f64 of insufficient precision. The u128 type solves both issues, so I propose adding an `as_nanos` function to expose the capability.", "tree": {"sha": "25cfd50f02661b4dac0263d98ad63f16e58a82a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25cfd50f02661b4dac0263d98ad63f16e58a82a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77c8bd0b4e1805980ea811f543e65f870b74a59a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbEuyOCRBK7hj4Ov3rIwAAdHIIABbHVKODvD4xcQ+OZn65rGNG\n02U0wgG0FL6huzZ4haWP5EVmOE79x6TZilFfeWHlbbG14kzO3n/svse726uPj70W\nFf57gMn8cC7ucMX+D7ByouP83DsZCBkLKbWApY1QgJ6eRmdcppM+mjCcDPaFpu7/\nm9ntiOKa8P29Gq9HLPW9GpyWjNYUSpvhxgB4NqZJR5Hs74Jtw9Wz2nHFN0ZdXdhH\n7K0AKIMdYT35esx4WgXfFCJ0dnH17q07UWd/Ez16rDk0ZdaYgT5brTRap1AXSCKm\ngzw5qPcCnqmSFJE9741ZQILuJyUH3u4Xt9M1vyOGkFZDrSD69mi3/wLcoEKV3AY=\n=Mder\n-----END PGP SIGNATURE-----\n", "payload": "tree 25cfd50f02661b4dac0263d98ad63f16e58a82a7\nparent 4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6\nparent fc895665c9a6ba9bc0be7844cb7162797b557a34\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1527966862 -0600\ncommitter GitHub <noreply@github.com> 1527966862 -0600\n\nRollup merge of #50167 - fintelia:duration-nanos, r=sfackler\n\n Add as_nanos function to Duration\n\nDuration has historically lacked a way to get the actual number of nanoseconds it contained as a normal Rust type because u64 was of insufficient range, and f64 of insufficient precision. The u128 type solves both issues, so I propose adding an `as_nanos` function to expose the capability.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77c8bd0b4e1805980ea811f543e65f870b74a59a", "html_url": "https://github.com/rust-lang/rust/commit/77c8bd0b4e1805980ea811f543e65f870b74a59a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77c8bd0b4e1805980ea811f543e65f870b74a59a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "html_url": "https://github.com/rust-lang/rust/commit/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6"}, {"sha": "fc895665c9a6ba9bc0be7844cb7162797b557a34", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc895665c9a6ba9bc0be7844cb7162797b557a34", "html_url": "https://github.com/rust-lang/rust/commit/fc895665c9a6ba9bc0be7844cb7162797b557a34"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "563eea0066d59abdb10f5fdcd1bbe72c31a62c24", "filename": "src/libcore/time.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/77c8bd0b4e1805980ea811f543e65f870b74a59a/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c8bd0b4e1805980ea811f543e65f870b74a59a/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=77c8bd0b4e1805980ea811f543e65f870b74a59a", "patch": "@@ -268,6 +268,57 @@ impl Duration {\n     #[inline]\n     pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n \n+    /// Returns the total number of milliseconds contained by this `Duration`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(duration_as_u128)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::new(5, 730023852);\n+    /// assert_eq!(duration.as_millis(), 5730);\n+    /// ```\n+    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+    #[inline]\n+    pub fn as_millis(&self) -> u128 {\n+        self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n+    }\n+\n+    /// Returns the total number of microseconds contained by this `Duration`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(duration_as_u128)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::new(5, 730023852);\n+    /// assert_eq!(duration.as_micros(), 5730023);\n+    /// ```\n+    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+    #[inline]\n+    pub fn as_micros(&self) -> u128 {\n+        self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n+    }\n+\n+    /// Returns the total number of nanoseconds contained by this `Duration`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(duration_as_u128)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::new(5, 730023852);\n+    /// assert_eq!(duration.as_nanos(), 5730023852);\n+    /// ```\n+    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+    #[inline]\n+    pub fn as_nanos(&self) -> u128 {\n+        self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128\n+    }\n+\n     /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n     /// if overflow occurred.\n     ///"}]}