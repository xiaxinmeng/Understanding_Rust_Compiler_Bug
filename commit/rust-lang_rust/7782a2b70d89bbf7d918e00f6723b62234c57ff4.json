{"sha": "7782a2b70d89bbf7d918e00f6723b62234c57ff4", "node_id": "C_kwDOAAsO6NoAKDc3ODJhMmI3MGQ4OWJiZjdkOTE4ZTAwZjY3MjNiNjIyMzRjNTdmZjQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-15T15:44:33Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-06T18:59:46Z"}, "message": "Remove now-redundant file/line info from const backtraces", "tree": {"sha": "438a0ead0302f06f4130d47b85ef7bdbd4d55582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/438a0ead0302f06f4130d47b85ef7bdbd4d55582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7782a2b70d89bbf7d918e00f6723b62234c57ff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7782a2b70d89bbf7d918e00f6723b62234c57ff4", "html_url": "https://github.com/rust-lang/rust/commit/7782a2b70d89bbf7d918e00f6723b62234c57ff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7782a2b70d89bbf7d918e00f6723b62234c57ff4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10b75cbbb04796cdf5264616493f3a20eb43ed0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b75cbbb04796cdf5264616493f3a20eb43ed0c", "html_url": "https://github.com/rust-lang/rust/commit/10b75cbbb04796cdf5264616493f3a20eb43ed0c"}], "stats": {"total": 1834, "additions": 911, "deletions": 923}, "files": [{"sha": "0b2809f1d2c285238c1a93a8bb65fc314483de87", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::{\n };\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_session::Limit;\n-use rustc_span::{Pos, Span};\n+use rustc_span::Span;\n use rustc_target::abi::{call::FnAbi, Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n@@ -256,25 +256,13 @@ impl<'tcx> fmt::Display for FrameInfo<'tcx> {\n             if tcx.def_key(self.instance.def_id()).disambiguated_data.data\n                 == DefPathData::ClosureExpr\n             {\n-                write!(f, \"inside closure\")?;\n+                write!(f, \"inside closure\")\n             } else {\n                 // Note: this triggers a `good_path_bug` state, which means that if we ever get here\n                 // we must emit a diagnostic. We should never display a `FrameInfo` unless we\n                 // actually want to emit a warning or error to the user.\n-                write!(f, \"inside `{}`\", self.instance)?;\n+                write!(f, \"inside `{}`\", self.instance)\n             }\n-            if !self.span.is_dummy() {\n-                let sm = tcx.sess.source_map();\n-                let lo = sm.lookup_char_pos(self.span.lo());\n-                write!(\n-                    f,\n-                    \" at {}:{}:{}\",\n-                    sm.filename_for_diagnostics(&lo.file.name),\n-                    lo.line,\n-                    lo.col.to_usize() + 1\n-                )?;\n-            }\n-            Ok(())\n         })\n     }\n }"}, {"sha": "ce9ffbea9cd65faee0d10d5a9ad86a24d9c1f9ae", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-81899.rs:11:5\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   |                        -------------- inside `_CONST` at $DIR/issue-81899.rs:4:24\n+   |                        -------------- inside `_CONST`\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-81899.rs:11:5\n-   |     inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:34]>`\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3e0f6df07ed6960b7fcdf8859c2458ab1451b8e4", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-88434-minimal-example.rs:10:5\n    |\n LL | const _CONST: &() = &f(&|_| {});\n-   |                      ---------- inside `_CONST` at $DIR/issue-88434-minimal-example.rs:3:22\n+   |                      ---------- inside `_CONST`\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:10:5\n-   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:28]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:28]>`\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b971daf7c86000c4f553790dc526fe3227a8d953", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n    |\n LL | const _CONST: &[u8] = &f(&[], |_| {});\n-   |                        -------------- inside `_CONST` at $DIR/issue-88434-removal-index-should-be-less.rs:3:24\n+   |                        -------------- inside `_CONST`\n ...\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:10:5\n-   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:34]>`\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "fbc6b6d0ddf3388d970b9963172be8a2a8990696", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-80742.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,12 +5,12 @@ LL |     intrinsics::size_of::<T>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     size_of called on unsized type `dyn Debug`\n-   |     inside `std::mem::size_of::<dyn Debug>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |     inside `std::mem::size_of::<dyn Debug>`\n    |\n   ::: $DIR/issue-80742.rs:22:10\n    |\n LL |     [u8; size_of::<T>() + 1]: ,\n-   |          -------------- inside `Inline::<dyn Debug>::{constant#0}` at $DIR/issue-80742.rs:22:10\n+   |          -------------- inside `Inline::<dyn Debug>::{constant#0}`\n \n error[E0599]: the function or associated item `new` exists for struct `Inline<dyn Debug>`, but its trait bounds were not satisfied\n   --> $DIR/issue-80742.rs:30:36\n@@ -36,12 +36,12 @@ LL |     intrinsics::size_of::<T>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     size_of called on unsized type `dyn Debug`\n-   |     inside `std::mem::size_of::<dyn Debug>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |     inside `std::mem::size_of::<dyn Debug>`\n    |\n   ::: $DIR/issue-80742.rs:14:10\n    |\n LL |     [u8; size_of::<T>() + 1]: ,\n-   |          -------------- inside `Inline::<dyn Debug>::{constant#0}` at $DIR/issue-80742.rs:14:10\n+   |          -------------- inside `Inline::<dyn Debug>::{constant#0}`\n \n error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n   --> $DIR/issue-80742.rs:30:15"}, {"sha": "2198265ef08875a52e0933f6749d68bc81f5f689", "filename": "src/test/ui/const-generics/issues/issue-100313.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-100313.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,10 +5,10 @@ LL |             *(B as *const bool as *mut bool) = false;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |             |\n    |             writing to alloc7 which is read-only\n-   |             inside `T::<&true>::set_false` at $DIR/issue-100313.rs:10:13\n+   |             inside `T::<&true>::set_false`\n ...\n LL |     x.set_false();\n-   |     ------------- inside `_` at $DIR/issue-100313.rs:18:5\n+   |     ------------- inside `_`\n \n error: aborting due to previous error\n "}, {"sha": "9cfe4996c3a4ac2b6f9c8224818c2465fdadcf8a", "filename": "src/test/ui/const-ptr/forbidden_slices.32bit.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.32bit.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,12 +5,12 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u32>`\n    |\n   ::: $DIR/forbidden_slices.rs:18:34\n    |\n LL | pub static S0: &[u32] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                  ------------------------------ inside `S0` at $DIR/forbidden_slices.rs:18:34\n+   |                                  ------------------------------ inside `S0`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -19,12 +19,12 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, ()>`\n    |\n   ::: $DIR/forbidden_slices.rs:19:33\n    |\n LL | pub static S1: &[()] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                 ------------------------------ inside `S1` at $DIR/forbidden_slices.rs:19:33\n+   |                                 ------------------------------ inside `S1`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -33,12 +33,12 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u32>`\n    |\n   ::: $DIR/forbidden_slices.rs:22:34\n    |\n LL | pub static S2: &[u32] = unsafe { from_raw_parts(&D0, 2) };\n-   |                                  ---------------------- inside `S2` at $DIR/forbidden_slices.rs:22:34\n+   |                                  ---------------------- inside `S2`\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:25:1\n@@ -92,12 +92,12 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<'_, u64>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u64>`\n    |\n   ::: $DIR/forbidden_slices.rs:43:5\n    |\n LL |     from_raw_parts(ptr, 1)\n-   |     ---------------------- inside `S8` at $DIR/forbidden_slices.rs:43:5\n+   |     ---------------------- inside `S8`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -106,17 +106,17 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>`\n    |\n   ::: $DIR/forbidden_slices.rs:46:34\n    |\n LL | pub static R0: &[u32] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                  ---------------------------------------- inside `R0` at $DIR/forbidden_slices.rs:46:34\n+   |                                  ---------------------------------------- inside `R0`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -125,17 +125,17 @@ LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |         inside `ptr::const_ptr::<impl *const ()>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |         inside `ptr::const_ptr::<impl *const ()>::sub_ptr`\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, ()>`\n    |\n   ::: $DIR/forbidden_slices.rs:47:33\n    |\n LL | pub static R1: &[()] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                 ---------------------------------------- inside `R1` at $DIR/forbidden_slices.rs:47:33\n+   |                                 ---------------------------------------- inside `R1`\n    |\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -146,15 +146,15 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u32>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u32>::offset`\n ...\n LL |         unsafe { self.offset(count as isize) }\n-   |                  --------------------------- inside `ptr::const_ptr::<impl *const u32>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  --------------------------- inside `ptr::const_ptr::<impl *const u32>::add`\n    |\n   ::: $DIR/forbidden_slices.rs:50:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(2))\n-   |                         ---------- inside `R2` at $DIR/forbidden_slices.rs:50:25\n+   |                         ---------- inside `R2`\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:52:1\n@@ -208,15 +208,15 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u64>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u64>::offset`\n ...\n LL |         unsafe { self.offset(count as isize) }\n-   |                  --------------------------- inside `ptr::const_ptr::<impl *const u64>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  --------------------------- inside `ptr::const_ptr::<impl *const u64>::add`\n    |\n   ::: $DIR/forbidden_slices.rs:74:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(1))\n-   |                         ---------- inside `R8` at $DIR/forbidden_slices.rs:74:25\n+   |                         ---------- inside `R8`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -225,17 +225,17 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  `ptr_offset_from_unsigned` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>`\n    |\n   ::: $DIR/forbidden_slices.rs:79:34\n    |\n LL | pub static R9: &[u32] = unsafe { from_ptr_range(&D0..(&D0 as *const u32).add(1)) };\n-   |                                  ----------------------------------------------- inside `R9` at $DIR/forbidden_slices.rs:79:34\n+   |                                  ----------------------------------------------- inside `R9`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -244,17 +244,17 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  `ptr_offset_from_unsigned` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>`\n    |\n   ::: $DIR/forbidden_slices.rs:80:35\n    |\n LL | pub static R10: &[u32] = unsafe { from_ptr_range(&D0..&D0) };\n-   |                                   ------------------------ inside `R10` at $DIR/forbidden_slices.rs:80:35\n+   |                                   ------------------------ inside `R10`\n \n error: aborting due to 18 previous errors\n "}, {"sha": "1ad7f408c2cd919a813a9c7c3e03925932c65fed", "filename": "src/test/ui/const-ptr/forbidden_slices.64bit.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,12 +5,12 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u32>`\n    |\n   ::: $DIR/forbidden_slices.rs:18:34\n    |\n LL | pub static S0: &[u32] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                  ------------------------------ inside `S0` at $DIR/forbidden_slices.rs:18:34\n+   |                                  ------------------------------ inside `S0`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -19,12 +19,12 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: null pointer is a dangling pointer (it has no provenance)\n-   |         inside `std::slice::from_raw_parts::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, ()>`\n    |\n   ::: $DIR/forbidden_slices.rs:19:33\n    |\n LL | pub static S1: &[()] = unsafe { from_raw_parts(ptr::null(), 0) };\n-   |                                 ------------------------------ inside `S1` at $DIR/forbidden_slices.rs:19:33\n+   |                                 ------------------------------ inside `S1`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -33,12 +33,12 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u32>`\n    |\n   ::: $DIR/forbidden_slices.rs:22:34\n    |\n LL | pub static S2: &[u32] = unsafe { from_raw_parts(&D0, 2) };\n-   |                                  ---------------------- inside `S2` at $DIR/forbidden_slices.rs:22:34\n+   |                                  ---------------------- inside `S2`\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:25:1\n@@ -92,12 +92,12 @@ LL |         &*ptr::slice_from_raw_parts(data, len)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         dereferencing pointer failed: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |         inside `std::slice::from_raw_parts::<'_, u64>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |         inside `std::slice::from_raw_parts::<'_, u64>`\n    |\n   ::: $DIR/forbidden_slices.rs:43:5\n    |\n LL |     from_raw_parts(ptr, 1)\n-   |     ---------------------- inside `S8` at $DIR/forbidden_slices.rs:43:5\n+   |     ---------------------- inside `S8`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -106,17 +106,17 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>`\n    |\n   ::: $DIR/forbidden_slices.rs:46:34\n    |\n LL | pub static R0: &[u32] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                  ---------------------------------------- inside `R0` at $DIR/forbidden_slices.rs:46:34\n+   |                                  ---------------------------------------- inside `R0`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -125,17 +125,17 @@ LL |         assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         the evaluated program panicked at 'assertion failed: 0 < pointee_size && pointee_size <= isize::MAX as usize', $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-   |         inside `ptr::const_ptr::<impl *const ()>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |         inside `ptr::const_ptr::<impl *const ()>::sub_ptr`\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, ()>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, ()>`\n    |\n   ::: $DIR/forbidden_slices.rs:47:33\n    |\n LL | pub static R1: &[()] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n-   |                                 ---------------------------------------- inside `R1` at $DIR/forbidden_slices.rs:47:33\n+   |                                 ---------------------------------------- inside `R1`\n    |\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -146,15 +146,15 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 4, so pointer to 8 bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u32>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u32>::offset`\n ...\n LL |         unsafe { self.offset(count as isize) }\n-   |                  --------------------------- inside `ptr::const_ptr::<impl *const u32>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  --------------------------- inside `ptr::const_ptr::<impl *const u32>::add`\n    |\n   ::: $DIR/forbidden_slices.rs:50:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(2))\n-   |                         ---------- inside `R2` at $DIR/forbidden_slices.rs:50:25\n+   |                         ---------- inside `R2`\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/forbidden_slices.rs:52:1\n@@ -208,15 +208,15 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: ALLOC_ID has size 8, so pointer to 8 bytes starting at offset 1 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u64>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u64>::offset`\n ...\n LL |         unsafe { self.offset(count as isize) }\n-   |                  --------------------------- inside `ptr::const_ptr::<impl *const u64>::add` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  --------------------------- inside `ptr::const_ptr::<impl *const u64>::add`\n    |\n   ::: $DIR/forbidden_slices.rs:74:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(1))\n-   |                         ---------- inside `R8` at $DIR/forbidden_slices.rs:74:25\n+   |                         ---------- inside `R8`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -225,17 +225,17 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  `ptr_offset_from_unsigned` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>`\n    |\n   ::: $DIR/forbidden_slices.rs:79:34\n    |\n LL | pub static R9: &[u32] = unsafe { from_ptr_range(&D0..(&D0 as *const u32).add(1)) };\n-   |                                  ----------------------------------------------- inside `R9` at $DIR/forbidden_slices.rs:79:34\n+   |                                  ----------------------------------------------- inside `R9`\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -244,17 +244,17 @@ LL |         unsafe { intrinsics::ptr_offset_from_unsigned(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  `ptr_offset_from_unsigned` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n    |\n   ::: $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n LL |     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n-   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>` at $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+   |                                          ------------------------------ inside `from_ptr_range::<'_, u32>`\n    |\n   ::: $DIR/forbidden_slices.rs:80:35\n    |\n LL | pub static R10: &[u32] = unsafe { from_ptr_range(&D0..&D0) };\n-   |                                   ------------------------ inside `R10` at $DIR/forbidden_slices.rs:80:35\n+   |                                   ------------------------ inside `R10`\n \n error: aborting due to 18 previous errors\n "}, {"sha": "fdb423ecbde135833849b8d194adc70ff417b450", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,12 +5,12 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         inside `std::ptr::read::<u32>`\n    |\n   ::: $DIR/out_of_bounds_read.rs:12:33\n    |\n LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n-   |                                 ----------------------- inside `_READ` at $DIR/out_of_bounds_read.rs:12:33\n+   |                                 ----------------------- inside `_READ`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n@@ -19,17 +19,17 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         inside `std::ptr::read::<u32>`\n    |\n   ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read`\n    |\n   ::: $DIR/out_of_bounds_read.rs:13:39\n    |\n LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n-   |                                       ------------------- inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:13:39\n+   |                                       ------------------- inside `_CONST_READ`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n@@ -38,17 +38,17 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         memory access failed: alloc5 has size 4, so pointer to 4 bytes starting at offset 4 is out-of-bounds\n-   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         inside `std::ptr::read::<u32>`\n    |\n   ::: $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::mut_ptr::<impl *mut u32>::read` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+   |                  ---------- inside `ptr::mut_ptr::<impl *mut u32>::read`\n    |\n   ::: $DIR/out_of_bounds_read.rs:14:37\n    |\n LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n-   |                                     --------------------------------- inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:14:37\n+   |                                     --------------------------------- inside `_MUT_READ`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e4b08fb7ecf70dc5fd3e397c2454b9e5b984d852", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,10 +5,10 @@ LL |     x(y)\n    |     ^^^^\n    |     |\n    |     calling non-const function `double`\n-   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:9:5\n+   |     inside `bar`\n ...\n LL | const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday\n-   |                  --------- inside `Y` at $DIR/const_fn_ptr_fail2.rs:14:18\n+   |                  --------- inside `Y`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_fn_ptr_fail2.rs:9:5\n@@ -17,10 +17,10 @@ LL |     x(y)\n    |     ^^^^\n    |     |\n    |     calling non-const function `double`\n-   |     inside `bar` at $DIR/const_fn_ptr_fail2.rs:9:5\n+   |     inside `bar`\n ...\n LL | const Z: usize = bar(double, 2); // FIXME: should fail to typeck someday\n-   |                  -------------- inside `Z` at $DIR/const_fn_ptr_fail2.rs:15:18\n+   |                  -------------- inside `Z`\n \n warning: skipping const checks\n    |"}, {"sha": "b198ac966be7f205a82294e859bc3824bb0106f2", "filename": "src/test/ui/consts/const-eval/const_panic_track_caller.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_track_caller.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,10 +5,10 @@ LL |     b()\n    |     ^^^\n    |     |\n    |     the evaluated program panicked at 'hey', $DIR/const_panic_track_caller.rs:15:5\n-   |     inside `c` at $DIR/const_panic_track_caller.rs:15:5\n+   |     inside `c`\n ...\n LL | const X: u32 = c();\n-   |                --- inside `X` at $DIR/const_panic_track_caller.rs:21:16\n+   |                --- inside `X`\n \n error: aborting due to previous error\n "}, {"sha": "46e2644ab72b1bf11d4526a7427b6a2c5f79994c", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/alloc_intrinsic_errors.rs:9:17\n    |\n LL | const FOO: i32 = foo();\n-   |                  ----- inside `FOO` at $DIR/alloc_intrinsic_errors.rs:6:18\n+   |                  ----- inside `FOO`\n ...\n LL |         let _ = intrinsics::const_allocate(4, 3) as *mut i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 align has to be a power of 2, `3` is not a power of 2\n-   |                 inside `foo` at $DIR/alloc_intrinsic_errors.rs:9:17\n+   |                 inside `foo`\n \n error: aborting due to previous error\n "}, {"sha": "d97835458de81394b624ba8e87ea394ca16bd95c", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,10 +5,10 @@ LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:4:5\n-   |     inside `foo` at $SRC_DIR/std/src/panic.rs:LL:COL\n+   |     inside `foo`\n ...\n LL | const _: () = foo();\n-   |               ----- inside `_` at $DIR/unwind-abort.rs:7:15\n+   |               ----- inside `_`\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "ab18b52299102ff2738bb491f000d9bca963d947", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -17,10 +17,10 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              transmuting to uninhabited type\n-   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n+   |              inside `foo`\n ...\n LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n-   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:19:33\n+   |                                 ----- inside `FOO`\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_uninhabited_zsts.rs:21:1"}, {"sha": "ab18b52299102ff2738bb491f000d9bca963d947", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -17,10 +17,10 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              transmuting to uninhabited type\n-   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:4:14\n+   |              inside `foo`\n ...\n LL | const FOO: [empty::Empty; 3] = [foo(); 3];\n-   |                                 ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:19:33\n+   |                                 ----- inside `FOO`\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/validate_uninhabited_zsts.rs:21:1"}, {"sha": "8db492112288610c8626a37ebff5a6a3cbdc5187", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,15 +5,15 @@ LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                     |\n    |                     the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n-   |                     inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32` at $SRC_DIR/core/src/panic.rs:LL:COL\n+   |                     inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32`\n ...\n LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n-   |                  -------------------------------------------------------------------- inside `core::f32::<impl f32>::to_bits` at $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   |                  -------------------------------------------------------------------- inside `core::f32::<impl f32>::to_bits`\n    |\n   ::: $DIR/const-float-bits-reject-conv.rs:28:30\n    |\n LL |     const MASKED_NAN1: u32 = f32::NAN.to_bits() ^ 0x002A_AAAA;\n-   |                              ------------------ inside `f32::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:28:30\n+   |                              ------------------ inside `f32::MASKED_NAN1`\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -24,15 +24,15 @@ LL |                     panic!(\"const-eval error: cannot use f32::to_bits on a\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                     |\n    |                     the evaluated program panicked at 'const-eval error: cannot use f32::to_bits on a NaN', $SRC_DIR/core/src/num/f32.rs:LL:COL\n-   |                     inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32` at $SRC_DIR/core/src/panic.rs:LL:COL\n+   |                     inside `core::f32::<impl f32>::to_bits::ct_f32_to_u32`\n ...\n LL |         unsafe { intrinsics::const_eval_select((self,), ct_f32_to_u32, rt_f32_to_u32) }\n-   |                  -------------------------------------------------------------------- inside `core::f32::<impl f32>::to_bits` at $SRC_DIR/core/src/num/f32.rs:LL:COL\n+   |                  -------------------------------------------------------------------- inside `core::f32::<impl f32>::to_bits`\n    |\n   ::: $DIR/const-float-bits-reject-conv.rs:30:30\n    |\n LL |     const MASKED_NAN2: u32 = f32::NAN.to_bits() ^ 0x0055_5555;\n-   |                              ------------------ inside `f32::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:30:30\n+   |                              ------------------ inside `f32::MASKED_NAN2`\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -67,15 +67,15 @@ LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                     |\n    |                     the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n-   |                     inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64` at $SRC_DIR/core/src/panic.rs:LL:COL\n+   |                     inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64`\n ...\n LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n-   |                  -------------------------------------------------------------------- inside `core::f64::<impl f64>::to_bits` at $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   |                  -------------------------------------------------------------------- inside `core::f64::<impl f64>::to_bits`\n    |\n   ::: $DIR/const-float-bits-reject-conv.rs:50:30\n    |\n LL |     const MASKED_NAN1: u64 = f64::NAN.to_bits() ^ 0x000A_AAAA_AAAA_AAAA;\n-   |                              ------------------ inside `f64::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:50:30\n+   |                              ------------------ inside `f64::MASKED_NAN1`\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -86,15 +86,15 @@ LL |                     panic!(\"const-eval error: cannot use f64::to_bits on a\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                     |\n    |                     the evaluated program panicked at 'const-eval error: cannot use f64::to_bits on a NaN', $SRC_DIR/core/src/num/f64.rs:LL:COL\n-   |                     inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64` at $SRC_DIR/core/src/panic.rs:LL:COL\n+   |                     inside `core::f64::<impl f64>::to_bits::ct_f64_to_u64`\n ...\n LL |         unsafe { intrinsics::const_eval_select((self,), ct_f64_to_u64, rt_f64_to_u64) }\n-   |                  -------------------------------------------------------------------- inside `core::f64::<impl f64>::to_bits` at $SRC_DIR/core/src/num/f64.rs:LL:COL\n+   |                  -------------------------------------------------------------------- inside `core::f64::<impl f64>::to_bits`\n    |\n   ::: $DIR/const-float-bits-reject-conv.rs:52:30\n    |\n LL |     const MASKED_NAN2: u64 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n-   |                              ------------------ inside `f64::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:52:30\n+   |                              ------------------ inside `f64::MASKED_NAN2`\n    |\n    = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "612a48e082b6f850cfa69fb466ce083a3a3c67d7", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,10 +5,10 @@ LL |     Some(&mut *(42 as *mut i32))\n    |          ^^^^^^^^^^^^^^^^^^^^^^\n    |          |\n    |          dereferencing pointer failed: 0x2a[noalloc] is a dangling pointer (it has no provenance)\n-   |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n+   |          inside `helper`\n ...\n LL | const A: Option<&mut i32> = helper();\n-   |                             -------- inside `A` at $DIR/mut_ref_in_final_dynamic_check.rs:18:29\n+   |                             -------- inside `A`\n \n error: encountered dangling pointer in final constant\n   --> $DIR/mut_ref_in_final_dynamic_check.rs:25:1"}, {"sha": "213e7c035dc06a742ac7ca41eb44a5ec6667d0bb", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,15 +5,15 @@ LL |         intrinsics::unreachable()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         entering unreachable code\n-   |         inside `unreachable_unchecked` at $SRC_DIR/core/src/hint.rs:LL:COL\n+   |         inside `unreachable_unchecked`\n    |\n   ::: $DIR/const_unsafe_unreachable_ub.rs:6:18\n    |\n LL |         false => std::hint::unreachable_unchecked(),\n-   |                  ---------------------------------- inside `foo` at $DIR/const_unsafe_unreachable_ub.rs:6:18\n+   |                  ---------------------------------- inside `foo`\n ...\n LL | const BAR: bool = unsafe { foo(false) };\n-   |                            ---------- inside `BAR` at $DIR/const_unsafe_unreachable_ub.rs:10:28\n+   |                            ---------- inside `BAR`\n \n error: aborting due to previous error\n "}, {"sha": "cc3356d64dbadcd64d8b91a5c767130380eec60c", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -35,17 +35,17 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         accessing memory with alignment 1, but alignment 4 is required\n-   |         inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         inside `std::ptr::read::<u32>`\n    |\n   ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ---------- inside `ptr::const_ptr::<impl *const u32>::read`\n    |\n   ::: $DIR/detect-extra-ub.rs:38:9\n    |\n LL |         ptr.read();\n-   |         ---------- inside `INNER` at $DIR/detect-extra-ub.rs:38:9\n+   |         ---------- inside `INNER`\n \n note: erroneous constant used\n   --> $DIR/detect-extra-ub.rs:32:5"}, {"sha": "8989eb5011e76b380c0bea032e40233763f042b8", "filename": "src/test/ui/consts/issue-miri-1910.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-miri-1910.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,17 +5,17 @@ LL |         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         unable to copy parts of a pointer from memory at ALLOC\n-   |         inside `std::ptr::read::<u8>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |         inside `std::ptr::read::<u8>`\n    |\n   ::: $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n LL |         unsafe { read(self) }\n-   |                  ---------- inside `ptr::const_ptr::<impl *const u8>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  ---------- inside `ptr::const_ptr::<impl *const u8>::read`\n    |\n   ::: $DIR/issue-miri-1910.rs:8:5\n    |\n LL |     (&foo as *const _ as *const u8).add(one_and_a_half_pointers).read();\n-   |     ------------------------------------------------------------------- inside `C` at $DIR/issue-miri-1910.rs:8:5\n+   |     ------------------------------------------------------------------- inside `C`\n    |\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported"}, {"sha": "d9d2aadf17bc2f01f0ec2ae9308db4c39d685727", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,10 +5,10 @@ LL |     my_fn();\n    |     ^^^^^^^\n    |     |\n    |     calling a function with calling convention C using calling convention Rust\n-   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:9:5\n+   |     inside `call_rust_fn`\n ...\n LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   |                  --------------------------------------------------------------------- inside `VAL` at $DIR/abi-mismatch.rs:15:18\n+   |                  --------------------------------------------------------------------- inside `VAL`\n \n warning: skipping const checks\n    |"}, {"sha": "b3bb63eead77bbb4a180adbdc22b748dcf684915", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,13 +5,13 @@ LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |\n    | calling non-const function `<Vec<u32> as Drop>::drop`\n-   | inside `std::ptr::drop_in_place::<Vec<u32>> - shim(Some(Vec<u32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-   | inside `std::ptr::drop_in_place::<(Vec<u32>, u32)> - shim(Some((Vec<u32>, u32)))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | inside `std::ptr::drop_in_place::<Vec<u32>> - shim(Some(Vec<u32>))`\n+   | inside `std::ptr::drop_in_place::<(Vec<u32>, u32)> - shim(Some((Vec<u32>, u32)))`\n    |\n   ::: $DIR/assoc_const.rs:12:31\n    |\n LL |     const F: u32 = (U::X, 42).1;\n-   |                               - inside `<String as Bar<Vec<u32>, String>>::F` at $DIR/assoc_const.rs:12:31\n+   |                               - inside `<String as Bar<Vec<u32>, String>>::F`\n \n note: erroneous constant used\n   --> $DIR/assoc_const.rs:29:13"}, {"sha": "c43d055c2c926fb6a7e268696770d3f4aeb0163c", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,12 +5,12 @@ LL | pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |\n    | calling non-const function `<Vec<i32> as Drop>::drop`\n-   | inside `std::ptr::drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   | inside `std::ptr::drop_in_place::<Vec<i32>> - shim(Some(Vec<i32>))`\n    |\n   ::: $DIR/drop.rs:17:1\n    |\n LL | };\n-   | - inside `TEST_BAD` at $DIR/drop.rs:17:1\n+   | - inside `TEST_BAD`\n \n warning: skipping const checks\n    |"}, {"sha": "23844dd3b3e700b3de70090dc204e569796ec900", "filename": "src/test/ui/consts/missing_span_in_backtrace.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmissing_span_in_backtrace.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -1,10 +1,10 @@\n error[E0080]: evaluation of constant value failed\n-/rustc/xyz/library/core/src/ptr/mod.rs:929:14: inside `swap_nonoverlapping::<MaybeUninit<u8>>` at /rustc/xyz/library/core/src/ptr/mod.rs:929:14\n-/rustc/xyz/library/core/src/ptr/mod.rs:948:9: inside `ptr::swap_nonoverlapping_simple_untyped::<MaybeUninit<u8>>` at /rustc/xyz/library/core/src/ptr/mod.rs:948:9\n---> /rustc/xyz/library/core/src/ptr/mod.rs:1139:9\n-note: unable to copy parts of a pointer from memory at alloc6+0x1\n-note: inside `std::ptr::read::<MaybeUninit<MaybeUninit<u8>>>` at /rustc/xyz/library/core/src/ptr/mod.rs:1139:9\n-/rustc/xyz/library/core/src/mem/mod.rs:776:17: inside `mem::swap_simple::<MaybeUninit<MaybeUninit<u8>>>` at /rustc/xyz/library/core/src/mem/mod.rs:776:17\n+/rustc/xyz/library/core/src/ptr/mod.rs:925:14: inside `swap_nonoverlapping::<MaybeUninit<u8>>`\n+/rustc/xyz/library/core/src/ptr/mod.rs:944:9: inside `ptr::swap_nonoverlapping_simple_untyped::<MaybeUninit<u8>>`\n+--> /rustc/xyz/library/core/src/ptr/mod.rs:1135:9\n+note: unable to copy parts of a pointer from memory at alloc10\n+note: inside `std::ptr::read::<MaybeUninit<MaybeUninit<u8>>>`\n+/rustc/xyz/library/core/src/mem/mod.rs:773:17: inside `mem::swap_simple::<MaybeUninit<MaybeUninit<u8>>>`\n    |\n   ::: $DIR/missing_span_in_backtrace.rs:16:9\n    |\n@@ -13,7 +13,7 @@ LL | |             &mut ptr1 as *mut _ as *mut MaybeUninit<u8>,\n LL | |             &mut ptr2 as *mut _ as *mut MaybeUninit<u8>,\n LL | |             mem::size_of::<&i32>(),\n LL | |         );\n-   | |_________- inside `X` at $DIR/missing_span_in_backtrace.rs:16:9\n+   | |_________- inside `X`\n    |\n    = help: this code performed an operation that depends on the underlying bytes representing a pointer\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported"}, {"sha": "222333bf1135ff41b8df451aed48be9ddaadee25", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -11,12 +11,12 @@ LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  `ptr_offset_from` called on pointers into different allocations\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from`\n    |\n   ::: $DIR/offset_from_ub.rs:24:14\n    |\n LL |     unsafe { (42 as *const u8).offset_from(&5u8) as usize }\n-   |              ----------------------------------- inside `NOT_PTR` at $DIR/offset_from_ub.rs:24:14\n+   |              ----------------------------------- inside `NOT_PTR`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:31:14\n@@ -91,12 +91,12 @@ LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from`\n    |\n   ::: $DIR/offset_from_ub.rs:115:14\n    |\n LL |     unsafe { ptr2.offset_from(ptr1) }\n-   |              ---------------------- inside `OFFSET_VERY_FAR1` at $DIR/offset_from_ub.rs:115:14\n+   |              ---------------------- inside `OFFSET_VERY_FAR1`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -105,12 +105,12 @@ LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds offset_from: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset_from`\n    |\n   ::: $DIR/offset_from_ub.rs:121:14\n    |\n LL |     unsafe { ptr1.offset_from(ptr2.wrapping_offset(1)) }\n-   |              ----------------------------------------- inside `OFFSET_VERY_FAR2` at $DIR/offset_from_ub.rs:121:14\n+   |              ----------------------------------------- inside `OFFSET_VERY_FAR2`\n \n error: aborting due to 15 previous errors\n "}, {"sha": "680ab163add2e659ad72088179da8c41eff035ef", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,12 +5,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n    |\n   ::: $DIR/offset_ub.rs:7:46\n    |\n LL | pub const BEFORE_START: *const u8 = unsafe { (&0u8 as *const u8).offset(-1) };\n-   |                                              ------------------------------ inside `BEFORE_START` at $DIR/offset_ub.rs:7:46\n+   |                                              ------------------------------ inside `BEFORE_START`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -19,12 +19,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n    |\n   ::: $DIR/offset_ub.rs:8:43\n    |\n LL | pub const AFTER_END: *const u8 = unsafe { (&0u8 as *const u8).offset(2) };\n-   |                                           ----------------------------- inside `AFTER_END` at $DIR/offset_ub.rs:8:43\n+   |                                           ----------------------------- inside `AFTER_END`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -33,12 +33,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: allocN has size 100, so pointer to 101 bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n    |\n   ::: $DIR/offset_ub.rs:9:45\n    |\n LL | pub const AFTER_ARRAY: *const u8 = unsafe { [0u8; 100].as_ptr().offset(101) };\n-   |                                             ------------------------------- inside `AFTER_ARRAY` at $DIR/offset_ub.rs:9:45\n+   |                                             ------------------------------- inside `AFTER_ARRAY`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -47,12 +47,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u16>::offset`\n    |\n   ::: $DIR/offset_ub.rs:11:43\n    |\n LL | pub const OVERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MAX) };\n-   |                                           ------------------------------------- inside `OVERFLOW` at $DIR/offset_ub.rs:11:43\n+   |                                           ------------------------------------- inside `OVERFLOW`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -61,12 +61,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u16>::offset`\n    |\n   ::: $DIR/offset_ub.rs:12:44\n    |\n LL | pub const UNDERFLOW: *const u16 = unsafe { [0u16; 1].as_ptr().offset(isize::MIN) };\n-   |                                            ------------------------------------- inside `UNDERFLOW` at $DIR/offset_ub.rs:12:44\n+   |                                            ------------------------------------- inside `UNDERFLOW`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -75,12 +75,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n    |\n   ::: $DIR/offset_ub.rs:13:56\n    |\n LL | pub const OVERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (usize::MAX as *const u8).offset(2) };\n-   |                                                        ----------------------------------- inside `OVERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:13:56\n+   |                                                        ----------------------------------- inside `OVERFLOW_ADDRESS_SPACE`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -89,12 +89,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  overflowing in-bounds pointer arithmetic\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n    |\n   ::: $DIR/offset_ub.rs:14:57\n    |\n LL | pub const UNDERFLOW_ADDRESS_SPACE: *const u8 = unsafe { (1 as *const u8).offset(-2) };\n-   |                                                         --------------------------- inside `UNDERFLOW_ADDRESS_SPACE` at $DIR/offset_ub.rs:14:57\n+   |                                                         --------------------------- inside `UNDERFLOW_ADDRESS_SPACE`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -103,12 +103,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: allocN has size 1, so pointer to 2 bytes starting at offset -4 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n    |\n   ::: $DIR/offset_ub.rs:15:49\n    |\n LL | pub const NEGATIVE_OFFSET: *const u8 = unsafe { [0u8; 1].as_ptr().wrapping_offset(-2).offset(-2) };\n-   |                                                 ------------------------------------------------ inside `NEGATIVE_OFFSET` at $DIR/offset_ub.rs:15:49\n+   |                                                 ------------------------------------------------ inside `NEGATIVE_OFFSET`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -117,12 +117,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: allocN has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n    |\n   ::: $DIR/offset_ub.rs:17:50\n    |\n LL | pub const ZERO_SIZED_ALLOC: *const u8 = unsafe { [0u8; 0].as_ptr().offset(1) };\n-   |                                                  --------------------------- inside `ZERO_SIZED_ALLOC` at $DIR/offset_ub.rs:17:50\n+   |                                                  --------------------------- inside `ZERO_SIZED_ALLOC`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n@@ -131,12 +131,12 @@ LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+   |                  inside `ptr::mut_ptr::<impl *mut u8>::offset`\n    |\n   ::: $DIR/offset_ub.rs:18:42\n    |\n LL | pub const DANGLING: *const u8 = unsafe { ptr::NonNull::<u8>::dangling().as_ptr().offset(4) };\n-   |                                          ------------------------------------------------- inside `DANGLING` at $DIR/offset_ub.rs:18:42\n+   |                                          ------------------------------------------------- inside `DANGLING`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -145,12 +145,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n    |\n   ::: $DIR/offset_ub.rs:21:50\n    |\n LL | pub const NULL_OFFSET_ZERO: *const u8 = unsafe { ptr::null::<u8>().offset(0) };\n-   |                                                  --------------------------- inside `NULL_OFFSET_ZERO` at $DIR/offset_ub.rs:21:50\n+   |                                                  --------------------------- inside `NULL_OFFSET_ZERO`\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -159,12 +159,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: 0x7f..f[noalloc] is a dangling pointer (it has no provenance)\n-   |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const u8>::offset`\n    |\n   ::: $DIR/offset_ub.rs:24:47\n    |\n LL | pub const UNDERFLOW_ABS: *const u8 = unsafe { (usize::MAX as *const u8).offset(isize::MIN) };\n-   |                                               -------------------------------------------- inside `UNDERFLOW_ABS` at $DIR/offset_ub.rs:24:47\n+   |                                               -------------------------------------------- inside `UNDERFLOW_ABS`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "a485b44555f88e9f6c1bc4ae69d1823269014184", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,12 +5,12 @@ LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  out-of-bounds pointer arithmetic: alloc3 has size $WORD, so pointer to $TWO_WORDS bytes starting at offset 0 is out-of-bounds\n-   |                  inside `ptr::const_ptr::<impl *const usize>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |                  inside `ptr::const_ptr::<impl *const usize>::offset`\n    |\n   ::: $DIR/ptr_comparisons.rs:50:34\n    |\n LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n-   |                                  ------------------------------- inside `_` at $DIR/ptr_comparisons.rs:50:34\n+   |                                  ------------------------------- inside `_`\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/ptr_comparisons.rs:53:33"}, {"sha": "c81300046341e3f4aafa4ee5dc3ed8af009465a7", "filename": "src/test/ui/consts/recursive.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -16,11 +16,11 @@ LL |     f(x);\n    |     ^^^^\n    |     |\n    |     reached the configured maximum number of stack frames\n-   |     inside `f::<i32>` at $DIR/recursive.rs:4:5\n-   |     [... 126 additional calls inside `f::<i32>` at $DIR/recursive.rs:4:5 ...]\n+   |     inside `f::<i32>`\n+   |     [... 126 additional calls inside `f::<i32>` ...]\n ...\n LL | const X: () = f(1);\n-   |               ---- inside `X` at $DIR/recursive.rs:8:15\n+   |               ---- inside `X`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "41b79847e4e672b41bd08aaf5d18bb8b81dd2e3c", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 128, "deletions": 128, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,140 +5,140 @@ LL |     hint_unreachable()\n    |     ^^^^^^^^^^^^^^^^^^\n    |     |\n    |     reached the configured maximum number of stack frames\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n-   |     inside `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<!>`\n+   |     inside `fake_type::<i32>`\n ...\n LL |     fake_type()\n    |     -----------\n    |     |\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n-   |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n+   |     inside `hint_unreachable`\n ...\n LL |     const CONSTANT: i32 = unsafe { fake_type() };\n-   |                                    ----------- inside `<i32 as Const>::CONSTANT` at $DIR/uninhabited-const-issue-61744.rs:12:36\n+   |                                    ----------- inside `<i32 as Const>::CONSTANT`\n \n note: erroneous constant used\n   --> $DIR/uninhabited-const-issue-61744.rs:18:10"}, {"sha": "f0c9bceb7aac9b15af10975fce18d8fc4a88868e", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 128, "deletions": 128, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,140 +5,140 @@ LL |     b()\n    |     ^^^\n    |     |\n    |     reached the configured maximum number of stack frames\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n-   |     inside `a` at $DIR/infinite-recursion-const-fn.rs:4:5\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n+   |     inside `a`\n ...\n LL |     a()\n    |     ---\n    |     |\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n-   |     inside `b` at $DIR/infinite-recursion-const-fn.rs:7:5\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n+   |     inside `b`\n LL | }\n LL | const ARR: [i32; a()] = [5; 6];\n-   |                  --- inside `ARR::{constant#0}` at $DIR/infinite-recursion-const-fn.rs:9:18\n+   |                  --- inside `ARR::{constant#0}`\n \n error: aborting due to previous error\n "}, {"sha": "df7e8a16bdf89fa4d5e2f5561fa1ae89f618cd7a", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -2,12 +2,12 @@ error[E0080]: values of the type `[u8; SIZE]` are too big for the current archit\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ inside `std::mem::size_of::<[u8; SIZE]>` at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ inside `std::mem::size_of::<[u8; SIZE]>`\n    |\n   ::: $DIR/issue-55878.rs:7:26\n    |\n LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n-   |                          ---------------------------------------------- inside `main` at $DIR/issue-55878.rs:7:26\n+   |                          ---------------------------------------------- inside `main`\n \n note: erroneous constant used\n   --> $DIR/issue-55878.rs:7:26"}, {"sha": "473b49a6fbacb1001f287fd3cbad07a405e3f0f3", "filename": "src/tools/miri/tests/extern-so/fail/function_not_in_so.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |         foo();\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/function_not_in_so.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d95afcb05a4039792a9228ce115502ca675339ea", "filename": "src/tools/miri/tests/fail/abort-terminator.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -9,8 +9,8 @@ LL | |     panic!()\n LL | | }\n    | |_^ the program aborted execution\n    |\n-   = note: inside `panic_abort` at $DIR/abort-terminator.rs:LL:CC\n-note: inside `main` at $DIR/abort-terminator.rs:LL:CC\n+   = note: inside `panic_abort`\n+note: inside `main`\n   --> $DIR/abort-terminator.rs:LL:CC\n    |\n LL |     panic_abort();"}, {"sha": "23b0835465499dc2d6d5879cc480c4f8692c8f22", "filename": "src/tools/miri/tests/fail/alloc/deallocate-bad-alignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/deallocate-bad-alignment.rs:LL:CC\n+   = note: inside `std::alloc::dealloc`\n+note: inside `main`\n   --> $DIR/deallocate-bad-alignment.rs:LL:CC\n    |\n LL |         dealloc(x, Layout::from_size_align_unchecked(1, 2));"}, {"sha": "7e903bdd3c640fd7494eb4975165725e1f859d61", "filename": "src/tools/miri/tests/fail/alloc/deallocate-bad-size.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/deallocate-bad-size.rs:LL:CC\n+   = note: inside `std::alloc::dealloc`\n+note: inside `main`\n   --> $DIR/deallocate-bad-size.rs:LL:CC\n    |\n LL |         dealloc(x, Layout::from_size_align_unchecked(2, 1));"}, {"sha": "a4721fbe25d31c19fee151a0df66a714a12c40b5", "filename": "src/tools/miri/tests/fail/alloc/deallocate-twice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fdeallocate-twice.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/deallocate-twice.rs:LL:CC\n+   = note: inside `std::alloc::dealloc`\n+note: inside `main`\n   --> $DIR/deallocate-twice.rs:LL:CC\n    |\n LL |         dealloc(x, Layout::from_size_align_unchecked(1, 1));"}, {"sha": "17953ad90e4f68c46447d8bb26124fe2e6bc3e55", "filename": "src/tools/miri/tests/fail/alloc/global_system_mixup.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,9 +7,9 @@ LL |         FREE();\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `std::sys::PLATFORM::alloc::<impl std::alloc::GlobalAlloc for std::alloc::System>::dealloc` at RUSTLIB/std/src/sys/PLATFORM/alloc.rs:LL:CC\n-   = note: inside `<std::alloc::System as std::alloc::Allocator>::deallocate` at RUSTLIB/std/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/global_system_mixup.rs:LL:CC\n+   = note: inside `std::sys::PLATFORM::alloc::<impl std::alloc::GlobalAlloc for std::alloc::System>::dealloc`\n+   = note: inside `<std::alloc::System as std::alloc::Allocator>::deallocate`\n+note: inside `main`\n   --> $DIR/global_system_mixup.rs:LL:CC\n    |\n LL |         System.deallocate(ptr, l);"}, {"sha": "ee7887352a7b7650b33f90c6058018f339c9f001", "filename": "src/tools/miri/tests/fail/alloc/no_global_allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fno_global_allocator.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |         __rust_alloc(1, 1);\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `start` at $DIR/no_global_allocator.rs:LL:CC\n+   = note: inside `start`\n \n error: aborting due to previous error\n "}, {"sha": "e7c8a45bca03624d4a0bc19f2e2711a9a541569c", "filename": "src/tools/miri/tests/fail/alloc/reallocate-bad-size.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-bad-size.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `std::alloc::realloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/reallocate-bad-size.rs:LL:CC\n+   = note: inside `std::alloc::realloc`\n+note: inside `main`\n   --> $DIR/reallocate-bad-size.rs:LL:CC\n    |\n LL |         let _y = realloc(x, Layout::from_size_align_unchecked(2, 1), 1);"}, {"sha": "de1e456d1ca6777a985d3a39246751757dce134d", "filename": "src/tools/miri/tests/fail/alloc/reallocate-change-alloc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-change-alloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-change-alloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-change-alloc.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let _z = *x;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/reallocate-change-alloc.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "7e61dbe601769c26d6bee766af8ed35b39d2cfc7", "filename": "src/tools/miri/tests/fail/alloc/reallocate-dangling.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Freallocate-dangling.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `std::alloc::realloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-note: inside `main` at $DIR/reallocate-dangling.rs:LL:CC\n+   = note: inside `std::alloc::realloc`\n+note: inside `main`\n   --> $DIR/reallocate-dangling.rs:LL:CC\n    |\n LL |         let _z = realloc(x, Layout::from_size_align_unchecked(1, 1), 1);"}, {"sha": "62809dec13398b177db9f39594fd3d0f14fdd181", "filename": "src/tools/miri/tests/fail/alloc/stack_free.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Falloc%2Fstack_free.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,12 +7,12 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n-   = note: inside `std::mem::drop::<std::boxed::Box<i32>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n-note: inside `main` at $DIR/stack_free.rs:LL:CC\n+   = note: inside `std::alloc::dealloc`\n+   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate`\n+   = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>`\n+   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))`\n+   = note: inside `std::mem::drop::<std::boxed::Box<i32>>`\n+note: inside `main`\n   --> $DIR/stack_free.rs:LL:CC\n    |\n LL |     drop(bad_box);"}, {"sha": "d7a409d9202ac09a483c7883a4a71f1fc63928e4", "filename": "src/tools/miri/tests/fail/box-cell-alias.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbox-cell-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbox-cell-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbox-cell-alias.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,8 +20,8 @@ help: <TAG> was later invalidated at offsets [0x0..0x1] by a Unique retag\n LL |     let res = helper(val, ptr);\n    |                      ^^^\n    = note: BACKTRACE:\n-   = note: inside `helper` at $DIR/box-cell-alias.rs:LL:CC\n-note: inside `main` at $DIR/box-cell-alias.rs:LL:CC\n+   = note: inside `helper`\n+note: inside `main`\n   --> $DIR/box-cell-alias.rs:LL:CC\n    |\n LL |     let res = helper(val, ptr);"}, {"sha": "dbd180a11e54a1d60a3231eb7782b586861255fb", "filename": "src/tools/miri/tests/fail/branchless-select-i128-pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbranchless-select-i128-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbranchless-select-i128-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbranchless-select-i128-pointer.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -11,7 +11,7 @@ LL | |             )\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/branchless-select-i128-pointer.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0b63599dadf0d334bd0ab66deaad51b3128b0c49", "filename": "src/tools/miri/tests/fail/breakpoint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbreakpoint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbreakpoint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fbreakpoint.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -4,7 +4,7 @@ error: abnormal termination: Trace/breakpoint trap\n LL |         core::intrinsics::breakpoint()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Trace/breakpoint trap\n    |\n-   = note: inside `main` at $DIR/breakpoint.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "a91ca7c3445cba78dd121434b4a0b1dbc4c22ee0", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_create_too_few_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     panic!()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n+   = note: inside `thread_start`\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "9f706bdd61daf3245538a1bb5b04a6122f6ab9b4", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_create_too_many_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     panic!()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n+   = note: inside `thread_start`\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "5ccdf2cabbdaa15a1335d318044fd831c1755825", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_join_detached.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_join_detached.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "459e8252b98d901eb3a44a177ea61bb517e5a131", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_join_joined.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_join_joined.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b3cb8cdc2fa13018bc7c34c61dabcbcec42347f3", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_join_main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             assert_eq!(libc::pthread_join(thread_id, ptr::null_mut()), 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/libc_pthread_join_main.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e26f51f57a933db3049066130a5069ace42826b1", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_join_multiple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL | ...   assert_eq!(libc::pthread_join(native_copy, ptr::null_mut()), 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/libc_pthread_join_multiple.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e6226532558f710a251d58aefa8a14be6ef91f47", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_join_self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/libc_pthread_join_self.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "59dac7afa55f62ac7847c8f86e7629dfc93a56c9", "filename": "src/tools/miri/tests/fail/concurrency/read_only_atomic_cmpxchg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fread_only_atomic_cmpxchg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fread_only_atomic_cmpxchg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fread_only_atomic_cmpxchg.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -13,7 +13,7 @@ please report an issue at <https://github.com/rust-lang/miri/issues> if this is\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/read_only_atomic_cmpxchg.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "3610dcb14e04bb36fb533a7ee9fe1233ecac3a47", "filename": "src/tools/miri/tests/fail/concurrency/read_only_atomic_load.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fread_only_atomic_load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fread_only_atomic_load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fread_only_atomic_load.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -13,7 +13,7 @@ please report an issue at <https://github.com/rust-lang/miri/issues> if this is\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/read_only_atomic_load.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "c343a8d1051831b01e0b387047c53c21894f6905", "filename": "src/tools/miri/tests/fail/concurrency/thread_local_static_dealloc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let _val = *dangling_ptr.0;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/thread_local_static_dealloc.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "826c883a7a9888b455f13559efe0723adc5f407f", "filename": "src/tools/miri/tests/fail/concurrency/unwind_top_of_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -12,7 +12,7 @@ LL | | }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `thread_start` at $DIR/unwind_top_of_stack.rs:LL:CC\n+   = note: inside `thread_start`\n \n error: aborting due to previous error\n "}, {"sha": "1e7dfaa7499041851561a4da9b354f1b33b6dd95", "filename": "src/tools/miri/tests/fail/crates/tokio_mvp.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fcrates%2Ftokio_mvp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fcrates%2Ftokio_mvp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fcrates%2Ftokio_mvp.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |         let res = syscall!(epoll_create1(libc::EPOLL_CLOEXEC));\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-note: inside `main` at $DIR/tokio_mvp.rs:LL:CC\n+note: inside `main`\n   --> $DIR/tokio_mvp.rs:LL:CC\n    |\n LL | #[tokio::main]"}, {"sha": "462e09ee57fe081488589232b9ec573d08a2a5ad", "filename": "src/tools/miri/tests/fail/dangling_pointers/dangling_pointer_addr_of.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let x = unsafe { ptr::addr_of!(*p) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+   = note: inside `main`\n    = note: this error originates in the macro `ptr::addr_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9d113479cc7eb8caa9c0937976659e7433b7eee0", "filename": "src/tools/miri/tests/fail/dangling_pointers/dangling_pointer_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let x = unsafe { *p };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/dangling_pointer_deref.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e1264d2a3756035be656a35b392dde5bf9c80e92", "filename": "src/tools/miri/tests/fail/dangling_pointers/dangling_zst_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = unsafe { *p };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/dangling_zst_deref.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "c4a820f45097a6a3cb40890ffe6b79466927a875", "filename": "src/tools/miri/tests/fail/dangling_pointers/deref-invalid-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _y = unsafe { &*x as *const u32 };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/deref-invalid-ptr.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "05b0c979a39709b77408d6917dd3fd6958d3fca5", "filename": "src/tools/miri/tests/fail/dangling_pointers/deref-partially-dangling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let val = unsafe { (*xptr).1 };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/deref-partially-dangling.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "513fecb33a6769c90bc460bb9d64faf0285b2e4e", "filename": "src/tools/miri/tests/fail/dangling_pointers/dyn_size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdyn_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdyn_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdyn_size.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _ptr = unsafe { &*ptr };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/dyn_size.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "a99264e416d27d81444997431217cecda2bddc2a", "filename": "src/tools/miri/tests/fail/dangling_pointers/maybe_null_pointer_deref_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _x: () = unsafe { *ptr };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/maybe_null_pointer_deref_zst.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "1dd25d428ed60dfcdf21e46cacc0905646c2f7ac", "filename": "src/tools/miri/tests/fail/dangling_pointers/maybe_null_pointer_write_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { *ptr = zst_val };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/maybe_null_pointer_write_zst.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "54080a3fda3d318ef55deffaaa8f39ae33b1459c", "filename": "src/tools/miri/tests/fail/dangling_pointers/null_pointer_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let x: i32 = unsafe { *std::ptr::null() };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/null_pointer_deref.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "59cf70eb72bb1b1e2618d21c5ce2c23cd20ece3f", "filename": "src/tools/miri/tests/fail/dangling_pointers/null_pointer_deref_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let x: () = unsafe { *std::ptr::null() };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/null_pointer_deref_zst.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "c0662579768947ddfc69bdacaf3fa4b54cee3ed1", "filename": "src/tools/miri/tests/fail/dangling_pointers/null_pointer_write.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { *std::ptr::null_mut() = 0i32 };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/null_pointer_write.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "f6752c8916b0b2dd21990c8f90db2eded11c4af7", "filename": "src/tools/miri/tests/fail/dangling_pointers/null_pointer_write_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/null_pointer_write_zst.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "2ad54ff784137ad3d6a54dffb12c825e21080177", "filename": "src/tools/miri/tests/fail/dangling_pointers/out_of_bounds_read1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let x = unsafe { *v.as_ptr().wrapping_offset(5) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/out_of_bounds_read1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "ff064768bf3d915626de91359d4a4b07067a7a4c", "filename": "src/tools/miri/tests/fail/dangling_pointers/out_of_bounds_read2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let x = unsafe { *v.as_ptr().wrapping_offset(5) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/out_of_bounds_read2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d7e967eb60f7db917b61b8ea82e871be5614b390", "filename": "src/tools/miri/tests/fail/dangling_pointers/stack_temporary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstack_temporary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstack_temporary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstack_temporary.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let val = *x;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/stack_temporary.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "58c5c37db0305829b3338a5279b54c27346eea00", "filename": "src/tools/miri/tests/fail/dangling_pointers/storage_dead_dangling.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |     unsafe { &mut *(LEAK as *mut i32) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `evil` at $DIR/storage_dead_dangling.rs:LL:CC\n-note: inside `main` at $DIR/storage_dead_dangling.rs:LL:CC\n+   = note: inside `evil`\n+note: inside `main`\n   --> $DIR/storage_dead_dangling.rs:LL:CC\n    |\n LL |     evil();"}, {"sha": "f0620faa7c2e949d255eda7f3887c887446e19c5", "filename": "src/tools/miri/tests/fail/dangling_pointers/wild_pointer_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let x = unsafe { *p };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/wild_pointer_deref.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "cab54c2403448aff88ba5df9815cdf67a0676694", "filename": "src/tools/miri/tests/fail/data_race/alloc_read_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             *pointer.load(Ordering::Relaxed)\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/alloc_read_race.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "10ff7991e40a83bfefb998a1ab15dafa4504e856", "filename": "src/tools/miri/tests/fail/data_race/alloc_write_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             *pointer.load(Ordering::Relaxed) = 2;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/alloc_write_race.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "3813cde23836174fe1b86e99fd3dc180012390b5", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             (&*c.0).load(Ordering::SeqCst)\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/atomic_read_na_write_race1.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "689e1c9460f1a33aac4cf4916983b33e4cb394a4", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             *atomic_ref.get_mut() = 32;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/atomic_read_na_write_race2.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "2d289e01ae3f000edc0f027a4a20a1e1797bcaa3", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             *atomic_ref.get_mut()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/atomic_write_na_read_race1.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "244a8be0a75ef04532edafb46689b8c0eaa65211", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             (&*c.0).store(32, Ordering::SeqCst);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/atomic_write_na_read_race2.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "aaaa33a892a427a90a796cf5c4946dd7bf7efd81", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             (&*c.0).store(64, Ordering::SeqCst);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/atomic_write_na_write_race1.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "64a94813f38ace733f6bd18bd5d3112f4dffc407", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             *atomic_ref.get_mut() = 32;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/atomic_write_na_write_race2.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "8386578d9ad42b5780e397a8e5b863985feac1b6", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_async_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             *c.0 = 64;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/dangling_thread_async_race.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "fdfd85b89e79d26a825c969642e8ba4e652bde2c", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         *c.0 = 64;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/dangling_thread_race.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "847e42750f88af147ec01dc10dd540f7888de7bf", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -12,7 +12,7 @@ LL | |             );\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/dealloc_read_race1.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0170c9cc66283d5feacfff4a8104a8f79b49cdb1", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             *ptr.0\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/dealloc_read_race2.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "2939d4f4399aec4702fb3c5c26c81a72af477a14", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/dealloc_read_race_stack.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "74df8802241a117ea8f11d66c72be14afe648c14", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -12,7 +12,7 @@ LL | |             );\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/dealloc_write_race1.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e7eedb0a44899a7544f962ad543693bd5e9e7a2f", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             *ptr.0 = 2;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/dealloc_write_race2.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "eb47b3ac9e380295608d3631cae9a5098c18c19f", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/dealloc_write_race_stack.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "5229aa4567e1c28f0acf8a80f111e0716a82e2ba", "filename": "src/tools/miri/tests/fail/data_race/enable_after_join_to_main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             *c.0 = 64;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/enable_after_join_to_main.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "65b5a06e62f980c74e24b4a3725fb8a32dbb9ddf", "filename": "src/tools/miri/tests/fail/data_race/fence_after_load.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Ffence_after_load.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { V = 2 }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/fence_after_load.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "1c9f583bda1a546f8cb1818d59f3c61b00ed43aa", "filename": "src/tools/miri/tests/fail/data_race/read_write_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             *c.0 = 64;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/read_write_race.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "2bc8352429c012f2d9f4344071b6c47c80c86b60", "filename": "src/tools/miri/tests/fail/data_race/read_write_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             stack_var\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/read_write_race_stack.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "c08fc43873025578dea3d9a43b99d196cdb76fb2", "filename": "src/tools/miri/tests/fail/data_race/relax_acquire_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |                 *c.0\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/relax_acquire_race.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "faa10d880de818fa516b19933594312e2e49abd2", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |                 *c.0\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/release_seq_race.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "64960e42c6a3299f84c02860ab26e0e1592f87cd", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race_same_thread.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |                 *c.0\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/release_seq_race_same_thread.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d47d7c143aeb0dabd02aeafd62ce8ad5bedadb60", "filename": "src/tools/miri/tests/fail/data_race/rmw_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |                 *c.0\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/rmw_race.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "8aa06a74c6859def1c91e280e941a55f41ea9c65", "filename": "src/tools/miri/tests/fail/data_race/stack_pop_race.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL | }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `race` at $DIR/stack_pop_race.rs:LL:CC\n-note: inside `main` at $DIR/stack_pop_race.rs:LL:CC\n+   = note: inside `race`\n+note: inside `main`\n   --> $DIR/stack_pop_race.rs:LL:CC\n    |\n LL |     race(0);"}, {"sha": "0046aa9cd289eb0820b8bb64f8ed616cd172ed27", "filename": "src/tools/miri/tests/fail/data_race/write_write_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             *c.0 = 64;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/write_write_race.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "ab26d9c9598984738b960aa45d3f38110d8ad9c1", "filename": "src/tools/miri/tests/fail/data_race/write_write_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             stack_var = 1usize;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/write_write_race_stack.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "892bfc95d78d94c52c4f8b4cf4801d36d6635950", "filename": "src/tools/miri/tests/fail/dyn-call-trait-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdyn-call-trait-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdyn-call-trait-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdyn-call-trait-mismatch.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     r2.method2();\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/dyn-call-trait-mismatch.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "4453a3af6e91a2e41df866f23c90520cd09b404f", "filename": "src/tools/miri/tests/fail/dyn-upcast-trait-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _err = baz_fake as &dyn Foo;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/dyn-upcast-trait-mismatch.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "205c861a5d3e345628f91d6adf387e8e0d632ec5", "filename": "src/tools/miri/tests/fail/environ-gets-deallocated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fenviron-gets-deallocated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fenviron-gets-deallocated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fenviron-gets-deallocated.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _y = unsafe { *pointer };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/environ-gets-deallocated.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "517cff2a726741c54db411d0d3f779ea05a498a5", "filename": "src/tools/miri/tests/fail/extern_static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fextern_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fextern_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fextern_static.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { std::ptr::addr_of!(FOO) };\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/extern_static.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b9835d6ca880e02a76170bef48e8fd34def1ac83", "filename": "src/tools/miri/tests/fail/extern_static_in_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fextern_static_in_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fextern_static_in_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fextern_static_in_const.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = X;\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/extern_static_in_const.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "cbf084ecd5d88260d6532815f1e99870b02f0b1b", "filename": "src/tools/miri/tests/fail/extern_static_wrong_size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fextern_static_wrong_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fextern_static_wrong_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fextern_static_wrong_size.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { environ };\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/extern_static_wrong_size.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "3ebfe49ad219c87b8e8a307d8f147e00099c5204", "filename": "src/tools/miri/tests/fail/fast_math_both.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffast_math_both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffast_math_both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffast_math_both.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL | ...: f32 = core::intrinsics::fsub_fast(f32::NAN, f32::NAN);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/fast_math_both.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "cc385c0e9e39890e948e761f9582ccba69cb9799", "filename": "src/tools/miri/tests/fail/fast_math_first.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffast_math_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffast_math_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffast_math_first.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL | ...   let _x: f32 = core::intrinsics::frem_fast(f32::NAN, 3.2);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/fast_math_first.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0d5d822989cad6ddd90fcf6ba4a7849c19bfc7cd", "filename": "src/tools/miri/tests/fail/fast_math_second.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffast_math_second.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffast_math_second.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffast_math_second.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL | ...f32 = core::intrinsics::fmul_fast(3.4f32, f32::INFINITY);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/fast_math_second.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "40d4f73a32a321168774e121f8372bd2aa145477", "filename": "src/tools/miri/tests/fail/function_calls/check_arg_abi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let _ = malloc(0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/check_arg_abi.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "3ed14b18f381366992d7ee454e7052bf90aa1f39", "filename": "src/tools/miri/tests/fail/function_calls/check_arg_count_abort.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         abort(1);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/check_arg_count_abort.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "8b363d5ba4705fd00c15cfc1383e34dcbe02496a", "filename": "src/tools/miri/tests/fail/function_calls/check_arg_count_too_few_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let _ = malloc();\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/check_arg_count_too_few_args.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "71b7e6235c4bab262726040ac838a419e25124dc", "filename": "src/tools/miri/tests/fail/function_calls/check_arg_count_too_many_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let _ = malloc(1, 2);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/check_arg_count_too_many_args.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "23e8fce7baaa1c64fd68ca1874505dde791633e8", "filename": "src/tools/miri/tests/fail/function_calls/check_callback_abi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -12,7 +12,7 @@ LL | |         );\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/check_callback_abi.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "9e123ffb203979045ba4a44a6df192822d2c490e", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_abi_mismatch.cache.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             foo();\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "9e6b12466ae3da730a08dc414969023b09cf9e3c", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_abi_mismatch.fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         std::mem::transmute::<unsafe fn(), unsafe extern \"C\" fn()>(foo)();\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "9e123ffb203979045ba4a44a6df192822d2c490e", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_abi_mismatch.no_cache.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |             foo();\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "a36389047ed6d081b45fda1505d27475e5d95dd3", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -9,7 +9,7 @@ LL |     unsafe { unwind() }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exported_symbol_bad_unwind1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "bd41683160c5da76a0bb3f1f42857bbe9a1a8354", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.both.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -10,8 +10,8 @@ LL | |     panic!();\n LL | | }\n    | |_^ the program aborted execution\n    |\n-   = note: inside `nounwind` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n-note: inside `main` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+   = note: inside `nounwind`\n+note: inside `main`\n   --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n    |\n LL |     unsafe { nounwind() }"}, {"sha": "bd41683160c5da76a0bb3f1f42857bbe9a1a8354", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.definition.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -10,8 +10,8 @@ LL | |     panic!();\n LL | | }\n    | |_^ the program aborted execution\n    |\n-   = note: inside `nounwind` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n-note: inside `main` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+   = note: inside `nounwind`\n+note: inside `main`\n   --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n    |\n LL |     unsafe { nounwind() }"}, {"sha": "a661e72639967194c48f1272210169303105ea1f", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.extern_block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -9,7 +9,7 @@ LL |     unsafe { nounwind() }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "5827e042d07ffdc21e3a896ceac47b78445717f3", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_clashing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -15,7 +15,7 @@ help: then it's defined here again, in crate `exported_symbol_clashing`\n LL | fn bar() {}\n    | ^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exported_symbol_clashing.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d39a26a5429da7ac55d55bf1e0608fdb81ddcaeb", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_shim_clashing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -13,7 +13,7 @@ LL | |     unreachable!()\n LL | | }\n    | |_^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exported_symbol_shim_clashing.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "3d0a5ce56bb5b7012dbdbe7705f62619cf9583ad", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_wrong_arguments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { foo(1) }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exported_symbol_wrong_arguments.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "7d495e3f46bedb8be91d8f23de130d560fa41f12", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_wrong_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { FOO() }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exported_symbol_wrong_type.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "2b5b46d6c4b40a6b822a0592c9655c9382f9e254", "filename": "src/tools/miri/tests/fail/function_pointers/cast_box_int_to_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     (*g)(42)\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/cast_box_int_to_fn_ptr.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "a8218469607f198e5c7561ca1ebff900a57ae0c3", "filename": "src/tools/miri/tests/fail/function_pointers/cast_fn_ptr1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     g(42)\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/cast_fn_ptr1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d2de935848f20af2365e7e98421115aa3e083138", "filename": "src/tools/miri/tests/fail/function_pointers/cast_fn_ptr2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     g(42)\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/cast_fn_ptr2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "caa29343aff044eb5614647513e87f0a02a035bf", "filename": "src/tools/miri/tests/fail/function_pointers/cast_fn_ptr3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     g()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/cast_fn_ptr3.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "1d84fdb0c9dadbd2a55deced222adbf159ae36db", "filename": "src/tools/miri/tests/fail/function_pointers/cast_fn_ptr4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     g(&42 as *const i32)\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/cast_fn_ptr4.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "7187d1ff2d7eb84f57bb15d68779a95158c2126d", "filename": "src/tools/miri/tests/fail/function_pointers/cast_fn_ptr5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     g()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/cast_fn_ptr5.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "a27fe21d6cdb6554e6f95354c830bc7a4b134b7a", "filename": "src/tools/miri/tests/fail/function_pointers/cast_int_to_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     g(42)\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/cast_int_to_fn_ptr.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "56b82fe2560de8e50dabc70bc82c66ed189b8e35", "filename": "src/tools/miri/tests/fail/function_pointers/deref_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         *std::mem::transmute::<fn(), *const u8>(f)\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/deref_fn_ptr.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "aeea7f36ff6bd9a494d2d39e9e58213ce0dfa223", "filename": "src/tools/miri/tests/fail/function_pointers/execute_memory.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fexecute_memory.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fexecute_memory.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Fexecute_memory.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         f()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/execute_memory.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "1e0e6f33d1b6a11739c6e75dbf29b468b1caef55", "filename": "src/tools/miri/tests/fail/function_pointers/fn_ptr_offset.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     x();\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/fn_ptr_offset.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "071642cde8a8a918f6b3f4eb9a79aade203d6e4f", "filename": "src/tools/miri/tests/fail/generator-pinned-moved.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fgenerator-pinned-moved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fgenerator-pinned-moved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fgenerator-pinned-moved.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,14 +7,14 @@ LL |         *num += 1;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/generator-pinned-moved.rs:LL:CC\n-note: inside `<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC]> as std::iter::Iterator>::next` at $DIR/generator-pinned-moved.rs:LL:CC\n+   = note: inside closure\n+note: inside `<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC]> as std::iter::Iterator>::next`\n   --> $DIR/generator-pinned-moved.rs:LL:CC\n    |\n LL |         match me.resume(()) {\n    |               ^^^^^^^^^^^^^\n-   = note: inside `<std::boxed::Box<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC]>> as std::iter::Iterator>::next` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n-note: inside `main` at $DIR/generator-pinned-moved.rs:LL:CC\n+   = note: inside `<std::boxed::Box<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC]>> as std::iter::Iterator>::next`\n+note: inside `main`\n   --> $DIR/generator-pinned-moved.rs:LL:CC\n    |\n LL |     generator_iterator_2.next(); // and use moved value"}, {"sha": "0d81f2e9d995dcc83afaf93cd6a2a081d99bde8f", "filename": "src/tools/miri/tests/fail/intrinsics/assume.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fassume.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fassume.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fassume.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         std::intrinsics::assume(x > 42);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/assume.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b4f08e2b484472c930aefb42698303d11635eba4", "filename": "src/tools/miri/tests/fail/intrinsics/copy_null.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_null.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         copy_nonoverlapping(std::ptr::null(), ptr, 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/copy_null.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0039d3ee80b08ceef111613d6382f085270ee6d6", "filename": "src/tools/miri/tests/fail/intrinsics/copy_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         (&mut y as *mut i32).copy_from(&x, 1usize << (mem::size_of::<usize>\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/copy_overflow.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "5d5f3abc46c23752b6501f9b5bba47cde1753785", "filename": "src/tools/miri/tests/fail/intrinsics/copy_overlapping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_overlapping.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         copy_nonoverlapping(a, b, 2);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/copy_overlapping.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "3cd149ced5b44ef755b3336320c08264fa35b129", "filename": "src/tools/miri/tests/fail/intrinsics/copy_unaligned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_unaligned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_unaligned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcopy_unaligned.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         copy_nonoverlapping(&data[5], ptr, 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/copy_unaligned.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "ba55324b3b4efba7781f2665b10ffb960c867d7e", "filename": "src/tools/miri/tests/fail/intrinsics/ctlz_nonzero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fctlz_nonzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fctlz_nonzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fctlz_nonzero.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         ctlz_nonzero(0u8);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ctlz_nonzero.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "5479e92ca049f986abc17c42a1643118bb4fd8ce", "filename": "src/tools/miri/tests/fail/intrinsics/cttz_nonzero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcttz_nonzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcttz_nonzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fcttz_nonzero.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         cttz_nonzero(0u8);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/cttz_nonzero.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "92f0e20497c5f868ed21d473b62014a25754907a", "filename": "src/tools/miri/tests/fail/intrinsics/div-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fdiv-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fdiv-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fdiv-by-zero.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let _n = unchecked_div(1i64, 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/div-by-zero.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "7c909e59b2fabf384f1baff9b2ff9e225b87ccd5", "filename": "src/tools/miri/tests/fail/intrinsics/exact_div1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { std::intrinsics::exact_div(2, 0) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exact_div1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "de1c6c2de96df00a45e6d45e9a87f0898cb5dc3f", "filename": "src/tools/miri/tests/fail/intrinsics/exact_div2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { std::intrinsics::exact_div(2u16, 3) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exact_div2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b56c9fce5d3e6df36187acfb6af7d12ac54273ea", "filename": "src/tools/miri/tests/fail/intrinsics/exact_div3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div3.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { std::intrinsics::exact_div(-19i8, 2) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exact_div3.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "9135ecfaaaf64c721843d109db75732757f72b35", "filename": "src/tools/miri/tests/fail/intrinsics/exact_div4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fexact_div4.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { std::intrinsics::exact_div(i64::MIN, -1) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exact_div4.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "f3baa65a4298be64a77dacaaac51309f5615bf11", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_32_inf1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f32, i32>(f32::INFINITY);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_32_inf1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e9876aeb1de6a33b59e9c280ec71f95d1aa59080", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_32_infneg1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f32, i32>(f32::NEG_INFINITY);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_32_infneg1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "a783134f1730df564e04c49785c5a2e31da4d72f", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_32_nan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f32, u32>(f32::NAN);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_32_nan.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "19696314d1965775fccf5555ca7acdadc34e734c", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_32_nanneg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f32, u32>(-f32::NAN);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_32_nanneg.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e316b3e50aa2c4c3b6515e6a488b0db271c98190", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_32_neg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f32, u32>(-1.000000001f32);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_32_neg.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e1ae541a9c7a469fbbad3e373623519a0354fddb", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_32_too_big1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f32, i32>(2147483648.0f32);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_32_too_big1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "6b363ad90918d42f3ea51fe9e2138582c2c17f63", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_32_too_big2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f32, u32>((u32::MAX - 127) as f32);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_32_too_big2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "48a18bd9839eed366db72eb0cbf822b23558c5d2", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_32_too_small1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f32, i32>(-2147483904.0f32);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_32_too_small1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "f0da1e48efa97fda991f8b277df6d5adcb87471a", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_inf1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, u128>(f64::INFINITY);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_inf1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "31a7a9fa4bdde6ef01f702fb55eee40e53a6da4c", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_infneg1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, u128>(f64::NEG_INFINITY);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_infneg1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "bd4d2b0566cb46922dddf83a20ca53aa656fa65e", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_infneg2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, i128>(f64::NEG_INFINITY);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_infneg2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "13c1fe72aab4967e00fdf292c0a9bd5142f7d4ef", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_nan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, u32>(f64::NAN);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_nan.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "5abc854596a36dae1872e66c1a7de9d0accf21a6", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_neg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, u128>(-1.0000000000001f64);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_neg.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "38563416455623f80d4531c2e4af44d0309af8f8", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, i32>(2147483648.0f64);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_too_big1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "c688a9b930d2b50b5e551d2223531256f60b2601", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, i64>(9223372036854775808.0f64);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_too_big2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "6ce4afb493cee343a58f38f4584ad927441e8c2a", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, u64>(18446744073709551616.0f64);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_too_big3.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "5c41cdcaa246a92f91c41772662667245314af83", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, u128>(u128::MAX as f64);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_too_big4.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "8595b3dac901a9d5abdf0cbcdd1d6640ba434e7d", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, i128>(2402823669209384634633746074317\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_too_big5.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d62df4c83c934e4fff43b871bb4c9055c65ed0c9", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, u128>(f64::MAX);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_too_big6.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d54b0efdfb37b666c2b94ec9291676e744245c5e", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_big7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, i128>(f64::MIN);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_too_big7.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "1d8cd75e3e688fef43e1339e4ab38303901b9d12", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_small1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, i32>(-2147483649.0f64);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_too_small1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "de4f355a55e5fd59e1c12ef2fbb65d2b9667c5b7", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_small2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, i64>(-9223372036854777856.0f64);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_too_small2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "a2e17d5a963ee84f21ebbdf8fc33635ce8021b08", "filename": "src/tools/miri/tests/fail/intrinsics/float_to_int_64_too_small3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         float_to_int_unchecked::<f64, i128>(-240282366920938463463374607431\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/float_to_int_64_too_small3.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "8f164a2aee3b37c359d49f8e28e7aac853994713", "filename": "src/tools/miri/tests/fail/intrinsics/out_of_bounds_ptr_1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let x = unsafe { x.offset(5) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/out_of_bounds_ptr_1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b98e0f295f29a02f69cabeac7bfc095c3f905d73", "filename": "src/tools/miri/tests/fail/intrinsics/out_of_bounds_ptr_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let x = unsafe { x.offset(isize::MIN) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/out_of_bounds_ptr_2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b24eb6fc519d7b79692ec3a9fdfbc44cc0b1d44a", "filename": "src/tools/miri/tests/fail/intrinsics/out_of_bounds_ptr_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let x = unsafe { x.offset(-1) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/out_of_bounds_ptr_3.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "3473d53f3e2a28ecc7561e5e438f2caefceae742", "filename": "src/tools/miri/tests/fail/intrinsics/overflowing-unchecked-rsh.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let _n = 1i64.unchecked_shr(64);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/overflowing-unchecked-rsh.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "c4fa6e655fba06879205624f9b0adaff951d44b2", "filename": "src/tools/miri/tests/fail/intrinsics/ptr_offset_0_plus_0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = unsafe { x.offset(0) }; // UB despite offset 0, NULL is never\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ptr_offset_0_plus_0.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "4fd811f937ba63c37291b1e02a17dcb983917919", "filename": "src/tools/miri/tests/fail/intrinsics/ptr_offset_from_oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { end_ptr.offset_from(end_ptr) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ptr_offset_from_oob.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "002fe1927bdd478b66b67098117cbfec73de36da", "filename": "src/tools/miri/tests/fail/intrinsics/ptr_offset_from_unsigned_neg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _val = unsafe { ptr1.sub_ptr(ptr2) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ptr_offset_from_unsigned_neg.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "2ca2009d809017684f5b9ba5df2e3be0697c1779", "filename": "src/tools/miri/tests/fail/intrinsics/ptr_offset_int_plus_int.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let _val = (1 as *mut u8).offset(1);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ptr_offset_int_plus_int.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "8ec8cb6654c2fb79d3efcf06eea8876a3c891c7c", "filename": "src/tools/miri/tests/fail/intrinsics/ptr_offset_int_plus_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let _val = (1 as *mut u8).offset(ptr as isize);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b3d50bae0cfcf3ca47563bb3bf0c95df72e1bea0", "filename": "src/tools/miri/tests/fail/intrinsics/ptr_offset_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _val = unsafe { x.offset(isize::MIN) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ptr_offset_overflow.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e4f71c8a0647da9e9d9dd379b41d2a9efb0d3d7b", "filename": "src/tools/miri/tests/fail/intrinsics/ptr_offset_ptr_plus_0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = unsafe { x.offset(0) }; // UB despite offset 0, the pointer is\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ptr_offset_ptr_plus_0.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d6dd00f729ebfd57f4b6a838fdb69ca0f1e90c56", "filename": "src/tools/miri/tests/fail/intrinsics/raw_eq_on_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { raw_eq(&x, &x) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/raw_eq_on_ptr.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b3c0e51521964edde520d10093734f7cdc782ccb", "filename": "src/tools/miri/tests/fail/intrinsics/rem-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Frem-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Frem-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Frem-by-zero.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let _n = unchecked_rem(3u32, 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/rem-by-zero.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d333e85599bcd9a9cc7e9046457fec3fa50b8378", "filename": "src/tools/miri/tests/fail/intrinsics/simd-div-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         simd_div(x, y);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/simd-div-by-zero.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "9fbc4f9cc655a4867ee1e2fb3dfaa3b94c3e7ef6", "filename": "src/tools/miri/tests/fail/intrinsics/simd-div-overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         simd_div(x, y);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/simd-div-overflow.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "bdb7dbf9264ab9c50ba0842c78a2bb959506890e", "filename": "src/tools/miri/tests/fail/intrinsics/simd-float-to-int.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |         unsafe { intrinsics::simd_cast(self) }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `std::simd::Simd::<f32, 2>::to_int_unchecked::<i32>` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n-note: inside `main` at $DIR/simd-float-to-int.rs:LL:CC\n+   = note: inside `std::simd::Simd::<f32, 2>::to_int_unchecked::<i32>`\n+note: inside `main`\n   --> $DIR/simd-float-to-int.rs:LL:CC\n    |\n LL |         let _x: i32x2 = f32x2::from_array([f32::MAX, f32::MIN]).to_int_unchecked();"}, {"sha": "718bd572627fde170484fdedd0a180b72e7e7591", "filename": "src/tools/miri/tests/fail/intrinsics/simd-gather.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |         unsafe { intrinsics::simd_gather(or, ptrs, enable.to_int()) }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `std::simd::Simd::<i8, 4>::gather_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n-note: inside `main` at $DIR/simd-gather.rs:LL:CC\n+   = note: inside `std::simd::Simd::<i8, 4>::gather_select_unchecked`\n+note: inside `main`\n   --> $DIR/simd-gather.rs:LL:CC\n    |\n LL |         let _result = Simd::gather_select_unchecked(&vec, Mask::splat(true), idxs, Simd::splat(0));"}, {"sha": "eeae3f906549c55a0e7544396378e300820df742", "filename": "src/tools/miri/tests/fail/intrinsics/simd-reduce-invalid-bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         simd_reduce_any(x);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/simd-reduce-invalid-bool.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "5af18d671bcbd9e1fe73239d468a578fadb0a628", "filename": "src/tools/miri/tests/fail/intrinsics/simd-rem-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         simd_rem(x, y);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/simd-rem-by-zero.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e2928e899ea89fca6a438375e97e3d695086d4c9", "filename": "src/tools/miri/tests/fail/intrinsics/simd-scatter.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |             intrinsics::simd_scatter(self, ptrs, enable.to_int())\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `std::simd::Simd::<i8, 4>::scatter_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n-note: inside `main` at $DIR/simd-scatter.rs:LL:CC\n+   = note: inside `std::simd::Simd::<i8, 4>::scatter_select_unchecked`\n+note: inside `main`\n   --> $DIR/simd-scatter.rs:LL:CC\n    |\n LL | /         Simd::from_array([-27, 82, -41, 124]).scatter_select_unchecked("}, {"sha": "1aeda92400cbc7202eeb4265efd0ee5aea01d98b", "filename": "src/tools/miri/tests/fail/intrinsics/simd-select-bitmask-invalid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         simd_select_bitmask(0b11111111u8, x, x);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/simd-select-bitmask-invalid.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "420178ed722eb7afd52ce070ff0c278a76a73d06", "filename": "src/tools/miri/tests/fail/intrinsics/simd-select-invalid-bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         simd_select(x, x, x);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/simd-select-invalid-bool.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "33c00b412ae3ce1fec2d51dbf28f2d69e9a90c14", "filename": "src/tools/miri/tests/fail/intrinsics/simd-shl-too-far.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         simd_shl(x, y);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/simd-shl-too-far.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "7210f133309d198bf070bfee24f3d4fad67ec303", "filename": "src/tools/miri/tests/fail/intrinsics/simd-shr-too-far.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         simd_shr(x, y);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/simd-shr-too-far.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0c5873fd28b46af7a2a9aabb468bcc8a1b17b3d8", "filename": "src/tools/miri/tests/fail/intrinsics/unchecked_add1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _val = unsafe { 40000u16.unchecked_add(30000) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/unchecked_add1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0b132c4739d6c5b3bf620a918f2888fad1f1d34a", "filename": "src/tools/miri/tests/fail/intrinsics/unchecked_add2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _val = unsafe { (-30000i16).unchecked_add(-8000) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/unchecked_add2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "3d95487fe66d09f9bcce7b23e47c742451e7ce36", "filename": "src/tools/miri/tests/fail/intrinsics/unchecked_div1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_div1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_div1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_div1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         std::intrinsics::unchecked_div(i16::MIN, -1);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/unchecked_div1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "1c7bae9ebd6a2315a4ae5f60728f6e97f3dbbed0", "filename": "src/tools/miri/tests/fail/intrinsics/unchecked_mul1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _val = unsafe { 300u16.unchecked_mul(250u16) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/unchecked_mul1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "7b9b040b85f2609cd5772a5666b1b42e32d0f68b", "filename": "src/tools/miri/tests/fail/intrinsics/unchecked_mul2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _val = unsafe { 1_000_000_000i32.unchecked_mul(-4) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/unchecked_mul2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "2dbf39836ec576d2b1672978c5d4cb1f68628377", "filename": "src/tools/miri/tests/fail/intrinsics/unchecked_sub1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _val = unsafe { 14u32.unchecked_sub(22) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/unchecked_sub1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b5266fe40a77296d9ebd5cbfac5d2f8fce3c8360", "filename": "src/tools/miri/tests/fail/intrinsics/unchecked_sub2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _val = unsafe { 30000i16.unchecked_sub(-7000) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/unchecked_sub2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d44ba4f18119f34876ea68d76240081c34644cc1", "filename": "src/tools/miri/tests/fail/intrinsics/uninit_uninhabited_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Funinit_uninhabited_type.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -4,7 +4,7 @@ error: abnormal termination: aborted execution: attempted to instantiate uninhab\n LL |     unsafe { std::mem::uninitialized::<!>() };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to instantiate uninhabited type `!`\n    |\n-   = note: inside `main` at $DIR/uninit_uninhabited_type.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "857e8581e73009d04488bade2bbd06d541eb99bb", "filename": "src/tools/miri/tests/fail/intrinsics/write_bytes_null.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { write_bytes::<u8>(std::ptr::null_mut(), 0, 0) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/write_bytes_null.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "7f0307348e9493b7514fa9969d75e22b135b6dd9", "filename": "src/tools/miri/tests/fail/intrinsics/write_bytes_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         (&mut y as *mut i32).write_bytes(0u8, 1usize << (mem::size_of::<usi\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/write_bytes_overflow.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "cc22de306bf2b0f0eee98cfb50874b0308ed39f1", "filename": "src/tools/miri/tests/fail/intrinsics/zero_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fintrinsics%2Fzero_fn_ptr.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -4,7 +4,7 @@ error: abnormal termination: aborted execution: attempted to zero-initialize typ\n LL |     unsafe { std::mem::zeroed::<fn()>() };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n    |\n-   = note: inside `main` at $DIR/zero_fn_ptr.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "7a69bcb42f5715e5cd0b535c09ae588cf5190b03", "filename": "src/tools/miri/tests/fail/invalid_bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_bool.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = b == std::hint::black_box(true);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/invalid_bool.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "53372e72052fbe4da0dc557319d5fb68bad6a159", "filename": "src/tools/miri/tests/fail/invalid_char.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_char.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = c == 'x';\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/invalid_char.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e6dce409ced2aa54cf3c92d978c40c04412f99c0", "filename": "src/tools/miri/tests/fail/invalid_enum_tag.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_enum_tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_enum_tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_enum_tag.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _val = mem::discriminant(&f);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/invalid_enum_tag.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "3a7f44422574192bd90a89424711fb3a987dbc16", "filename": "src/tools/miri/tests/fail/invalid_int.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Finvalid_int.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let i = unsafe { std::mem::MaybeUninit::<i32>::uninit().assume_init() }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/invalid_int.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b2c1e2f446f36f280544d7bb6a44fe157deeff24", "filename": "src/tools/miri/tests/fail/issue-miri-1112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fissue-miri-1112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fissue-miri-1112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fissue-miri-1112.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |         let obj = std::mem::transmute::<FatPointer, *mut FunnyPointer>(obj)\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `FunnyPointer::from_data_ptr` at $DIR/issue-miri-1112.rs:LL:CC\n-note: inside `main` at $DIR/issue-miri-1112.rs:LL:CC\n+   = note: inside `FunnyPointer::from_data_ptr`\n+note: inside `main`\n   --> $DIR/issue-miri-1112.rs:LL:CC\n    |\n LL |         let _raw: &FunnyPointer = FunnyPointer::from_data_ptr(&hello, &meta as *const _);"}, {"sha": "d31968364850a1131a5ac1c9cd5e05aa232713be", "filename": "src/tools/miri/tests/fail/issue-miri-2432.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fissue-miri-2432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fissue-miri-2432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fissue-miri-2432.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     <dyn X as X>::foo(&());\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/issue-miri-2432.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "fce0a79b7bea9f3c7d4cd289abd5b62cfc0c7269", "filename": "src/tools/miri/tests/fail/modifying_constants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmodifying_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmodifying_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fmodifying_constants.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     *y = 42;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/modifying_constants.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "6fb6c03406e93cacfbb7e0f27a758708a3db245f", "filename": "src/tools/miri/tests/fail/never_say_never.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_say_never.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         *(y as *const _ as *const !)\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/never_say_never.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "a3a3f132427f8010f0a45576965675c3a694973a", "filename": "src/tools/miri/tests/fail/never_transmute_humans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_humans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_humans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_humans.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         std::mem::transmute::<Human, !>(Human)\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/never_transmute_humans.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "1387ccfdae4fe8f86296fe5b0a9be4cf970c8466", "filename": "src/tools/miri/tests/fail/never_transmute_void.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_void.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_void.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fnever_transmute_void.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |         match v.0 {}\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `m::f` at $DIR/never_transmute_void.rs:LL:CC\n-note: inside `main` at $DIR/never_transmute_void.rs:LL:CC\n+   = note: inside `m::f`\n+note: inside `main`\n   --> $DIR/never_transmute_void.rs:LL:CC\n    |\n LL |     m::f(v);"}, {"sha": "958597fce1893e28d38501294b022edec3e164db", "filename": "src/tools/miri/tests/fail/panic/bad_miri_start_panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fbad_miri_start_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fbad_miri_start_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fbad_miri_start_panic.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     unsafe { miri_start_panic(&mut 0) }\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/bad_miri_start_panic.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "76867f8c288369ec369041da55cfc4cef73f4851", "filename": "src/tools/miri/tests/fail/panic/bad_unwind.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fbad_unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fbad_unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fbad_unwind.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -9,11 +9,11 @@ LL |     std::panic::catch_unwind(|| unwind()).unwrap_err();\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/bad_unwind.rs:LL:CC\n-   = note: inside `std::panicking::r#try::do_call::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::panicking::r#try::<(), [closure@$DIR/bad_unwind.rs:LL:CC]>` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::panic::catch_unwind::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>` at RUSTLIB/std/src/panic.rs:LL:CC\n-note: inside `main` at $DIR/bad_unwind.rs:LL:CC\n+   = note: inside closure\n+   = note: inside `std::panicking::r#try::do_call::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>`\n+   = note: inside `std::panicking::r#try::<(), [closure@$DIR/bad_unwind.rs:LL:CC]>`\n+   = note: inside `std::panic::catch_unwind::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>`\n+note: inside `main`\n   --> $DIR/bad_unwind.rs:LL:CC\n    |\n LL |     std::panic::catch_unwind(|| unwind()).unwrap_err();"}, {"sha": "b6185effdece5a35e4e65124b44405b61f110e61", "filename": "src/tools/miri/tests/fail/panic/double_panic.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -71,17 +71,17 @@ error: abnormal termination: the program aborted execution\n LL |     ABORT();\n    | ^ the program aborted execution\n    |\n-   = note: inside `std::sys::PLATFORM::abort_internal` at RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n-note: inside `<Foo as std::ops::Drop>::drop` at RUSTLIB/std/src/panic.rs:LL:CC\n+   = note: inside `std::sys::PLATFORM::abort_internal`\n+   = note: inside `std::panicking::rust_panic_with_hook`\n+   = note: inside closure\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>`\n+note: inside `<Foo as std::ops::Drop>::drop`\n   --> $DIR/double_panic.rs:LL:CC\n    |\n LL |         panic!(\"second\");\n    | ^\n-   = note: inside `std::ptr::drop_in_place::<Foo> - shim(Some(Foo))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n-note: inside `main` at $DIR/double_panic.rs:LL:CC\n+   = note: inside `std::ptr::drop_in_place::<Foo> - shim(Some(Foo))`\n+note: inside `main`\n   --> $DIR/double_panic.rs:LL:CC\n    |\n LL | }"}, {"sha": "36afd962b66424684ac77d8ca378db307909d3c1", "filename": "src/tools/miri/tests/fail/panic/no_std.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -5,8 +5,8 @@ error: abnormal termination: the program aborted execution\n LL |     core::intrinsics::abort();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the program aborted execution\n    |\n-   = note: inside `panic_handler` at $DIR/no_std.rs:LL:CC\n-note: inside `start` at RUSTLIB/core/src/panic.rs:LL:CC\n+   = note: inside `panic_handler`\n+note: inside `start`\n   --> $DIR/no_std.rs:LL:CC\n    |\n LL |     panic!(\"blarg I am dead\")"}, {"sha": "9c586534ecbfa04d6b153442cec956e097e0f1a8", "filename": "src/tools/miri/tests/fail/panic/panic_abort1.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,13 +6,13 @@ error: abnormal termination: the program aborted execution\n LL |                 ABORT();\n    | ^ the program aborted execution\n    |\n-   = note: inside `panic_abort::__rust_start_panic::abort` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n-   = note: inside `panic_abort::__rust_start_panic` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n-note: inside `main` at RUSTLIB/std/src/panic.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic::abort`\n+   = note: inside `panic_abort::__rust_start_panic`\n+   = note: inside `std::panicking::rust_panic`\n+   = note: inside `std::panicking::rust_panic_with_hook`\n+   = note: inside closure\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>`\n+note: inside `main`\n   --> $DIR/panic_abort1.rs:LL:CC\n    |\n LL |     std::panic!(\"panicking from libstd\");"}, {"sha": "2bcb1c206e4c6c700ebc90e7f19ab4bfe6db2123", "filename": "src/tools/miri/tests/fail/panic/panic_abort2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,14 +6,14 @@ error: abnormal termination: the program aborted execution\n LL |                 ABORT();\n    | ^ the program aborted execution\n    |\n-   = note: inside `panic_abort::__rust_start_panic::abort` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n-   = note: inside `panic_abort::__rust_start_panic` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n-   = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n-note: inside `main` at RUSTLIB/std/src/panic.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic::abort`\n+   = note: inside `panic_abort::__rust_start_panic`\n+   = note: inside `std::panicking::rust_panic`\n+   = note: inside `std::panicking::rust_panic_with_hook`\n+   = note: inside closure\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>`\n+   = note: inside `std::panicking::begin_panic_handler`\n+note: inside `main`\n   --> $DIR/panic_abort2.rs:LL:CC\n    |\n LL |     std::panic!(\"{}-panicking from libstd\", 42);"}, {"sha": "2218d75917bf453f030036b9dde1fb8322ea9699", "filename": "src/tools/miri/tests/fail/panic/panic_abort3.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,14 +6,14 @@ error: abnormal termination: the program aborted execution\n LL |                 ABORT();\n    | ^ the program aborted execution\n    |\n-   = note: inside `panic_abort::__rust_start_panic::abort` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n-   = note: inside `panic_abort::__rust_start_panic` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n-   = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n-note: inside `main` at RUSTLIB/core/src/panic.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic::abort`\n+   = note: inside `panic_abort::__rust_start_panic`\n+   = note: inside `std::panicking::rust_panic`\n+   = note: inside `std::panicking::rust_panic_with_hook`\n+   = note: inside closure\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>`\n+   = note: inside `std::panicking::begin_panic_handler`\n+note: inside `main`\n   --> $DIR/panic_abort3.rs:LL:CC\n    |\n LL |     core::panic!(\"panicking from libcore\");"}, {"sha": "645532c7e5acdf2701bcee5970bcd3f1c84ec402", "filename": "src/tools/miri/tests/fail/panic/panic_abort4.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,14 +6,14 @@ error: abnormal termination: the program aborted execution\n LL |                 ABORT();\n    | ^ the program aborted execution\n    |\n-   = note: inside `panic_abort::__rust_start_panic::abort` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n-   = note: inside `panic_abort::__rust_start_panic` at RUSTLIB/panic_abort/src/lib.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n-   = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n-note: inside `main` at RUSTLIB/core/src/panic.rs:LL:CC\n+   = note: inside `panic_abort::__rust_start_panic::abort`\n+   = note: inside `panic_abort::__rust_start_panic`\n+   = note: inside `std::panicking::rust_panic`\n+   = note: inside `std::panicking::rust_panic_with_hook`\n+   = note: inside closure\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>`\n+   = note: inside `std::panicking::begin_panic_handler`\n+note: inside `main`\n   --> $DIR/panic_abort4.rs:LL:CC\n    |\n LL |     core::panic!(\"{}-panicking from libcore\", 42);"}, {"sha": "6212f9758cd750e9943066bd29ed8d57fd1060a0", "filename": "src/tools/miri/tests/fail/panic/unwind_panic_abort.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Funwind_panic_abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Funwind_panic_abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Funwind_panic_abort.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         miri_start_panic(&mut 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/unwind_panic_abort.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0af63c2bbaed40573ec17b417aa6597e2d07edde", "filename": "src/tools/miri/tests/fail/provenance/pointer_partial_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fpointer_partial_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fpointer_partial_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fpointer_partial_overwrite.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let x = *p;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/pointer_partial_overwrite.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "008a48580a99be2e01205bf0d75a57666a2f983f", "filename": "src/tools/miri/tests/fail/provenance/provenance_transmute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |         let _val = *left_ptr;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `deref` at $DIR/provenance_transmute.rs:LL:CC\n-note: inside `main` at $DIR/provenance_transmute.rs:LL:CC\n+   = note: inside `deref`\n+note: inside `main`\n   --> $DIR/provenance_transmute.rs:LL:CC\n    |\n LL |         deref(ptr1, ptr2.with_addr(ptr1.addr()));"}, {"sha": "a674705682f133f4788cd9b0b7b9915ed703f871", "filename": "src/tools/miri/tests/fail/provenance/ptr_int_unexposed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fptr_int_unexposed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fptr_int_unexposed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fptr_int_unexposed.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     assert_eq!(unsafe { *ptr }, 3);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ptr_int_unexposed.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e042138f6572370148a5c0042aa4a01f864398c1", "filename": "src/tools/miri/tests/fail/provenance/ptr_invalid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fptr_invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fptr_invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fptr_invalid.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _val = unsafe { *xptr_invalid };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ptr_invalid.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "98d00deebf508787e72677da915e5ba525963011", "filename": "src/tools/miri/tests/fail/provenance/ptr_invalid_offset.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     let _ = unsafe { roundtrip.offset(1) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/ptr_invalid_offset.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "a6bad09fcb6b31ed77b410f16461494c2149c754", "filename": "src/tools/miri/tests/fail/provenance/strict_provenance_cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |     let _ptr = std::ptr::from_exposed_addr::<i32>(addr);\n    |\n    = help: use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/strict_provenance_cast.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "bc5f780e48770f5dde12a6b90690a2315ee2d13f", "filename": "src/tools/miri/tests/fail/rc_as_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Frc_as_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Frc_as_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Frc_as_ptr.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |     assert_eq!(42, **unsafe { &*Weak::as_ptr(&weak) });\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at RUSTLIB/core/src/macros/mod.rs:LL:CC\n+   = note: inside `main`\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5bf736ffa41043295c781a8c20a88dd532ab8ba2", "filename": "src/tools/miri/tests/fail/reading_half_a_pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Freading_half_a_pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Freading_half_a_pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Freading_half_a_pointer.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         let _val = *x;\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/reading_half_a_pointer.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0c2d9073bb6f8f4b713c6a2873a052bf5837abff", "filename": "src/tools/miri/tests/fail/shims/backtrace/bad-backtrace-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL | ...   miri_resolve_frame(*frame, 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/bad-backtrace-decl.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "f2164edb3aa188e73f15595bac76f7d8201c0aa9", "filename": "src/tools/miri/tests/fail/shims/backtrace/bad-backtrace-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |         miri_get_backtrace(2, std::ptr::null_mut());\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/bad-backtrace-flags.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0b370bfee2f916e42a8e9a606b84f6254b8da799", "filename": "src/tools/miri/tests/fail/shims/backtrace/bad-backtrace-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         miri_resolve_frame(std::ptr::null_mut(), 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/bad-backtrace-ptr.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "75b9342ad8e7cf94b1958515e886c3fcbae367be", "filename": "src/tools/miri/tests/fail/shims/backtrace/bad-backtrace-resolve-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |         miri_resolve_frame(buf[0], 2);\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/bad-backtrace-resolve-flags.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "8fb5fccf0dc5bffe00b2af89566c2dc107801ca3", "filename": "src/tools/miri/tests/fail/shims/backtrace/bad-backtrace-resolve-names-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL | ...   miri_resolve_frame_names(buf[0], 2, std::ptr::null_mut(), std::ptr::n\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/bad-backtrace-resolve-names-flags.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "29ef78afcc38c9fc71d42061d20903f4f2fd5c7f", "filename": "src/tools/miri/tests/fail/shims/backtrace/bad-backtrace-size-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |         miri_backtrace_size(2);\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/bad-backtrace-size-flags.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "8d44ae8ddf6188f83862a93591a65fa48f97c09a", "filename": "src/tools/miri/tests/fail/shims/fs/close_stdout.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |         libc::close(1);\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/close_stdout.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "177ff0fe821fdbdd103555e85bd3ae4a0f4d6844", "filename": "src/tools/miri/tests/fail/shims/fs/isolated_file.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,17 +7,17 @@ LL |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode a\n    = help: pass the flag `-Zmiri-disable-isolation` to disable isolation;\n    = help: or pass `-Zmiri-isolation-error=warn` to configure Miri to return an error code from isolated operations (if supported for that operation) and continue with a warning\n    = note: BACKTRACE:\n-   = note: inside closure at RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC\n-   = note: inside `std::sys::PLATFORM::cvt_r::<i32, [closure@std::sys::PLATFORM::fs::File::open_c::{closure#0}]>` at RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC\n-   = note: inside `std::sys::PLATFORM::fs::File::open_c` at RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC\n-   = note: inside closure at RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC\n-   = note: inside `std::sys::PLATFORM::small_c_string::run_with_cstr::<std::sys::PLATFORM::fs::File, [closure@std::sys::PLATFORM::fs::File::open::{closure#0}]>` at RUSTLIB/std/src/sys/PLATFORM/small_c_string.rs:LL:CC\n-   = note: inside `std::sys::PLATFORM::small_c_string::run_path_with_cstr::<std::sys::PLATFORM::fs::File, [closure@std::sys::PLATFORM::fs::File::open::{closure#0}]>` at RUSTLIB/std/src/sys/PLATFORM/small_c_string.rs:LL:CC\n-   = note: inside `std::sys::PLATFORM::fs::File::open` at RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC\n-   = note: inside `std::fs::OpenOptions::_open` at RUSTLIB/std/src/fs.rs:LL:CC\n-   = note: inside `std::fs::OpenOptions::open::<&std::path::Path>` at RUSTLIB/std/src/fs.rs:LL:CC\n-   = note: inside `std::fs::File::open::<&str>` at RUSTLIB/std/src/fs.rs:LL:CC\n-note: inside `main` at $DIR/isolated_file.rs:LL:CC\n+   = note: inside closure\n+   = note: inside `std::sys::PLATFORM::cvt_r::<i32, [closure@std::sys::PLATFORM::fs::File::open_c::{closure#0}]>`\n+   = note: inside `std::sys::PLATFORM::fs::File::open_c`\n+   = note: inside closure\n+   = note: inside `std::sys::PLATFORM::small_c_string::run_with_cstr::<std::sys::PLATFORM::fs::File, [closure@std::sys::PLATFORM::fs::File::open::{closure#0}]>`\n+   = note: inside `std::sys::PLATFORM::small_c_string::run_path_with_cstr::<std::sys::PLATFORM::fs::File, [closure@std::sys::PLATFORM::fs::File::open::{closure#0}]>`\n+   = note: inside `std::sys::PLATFORM::fs::File::open`\n+   = note: inside `std::fs::OpenOptions::_open`\n+   = note: inside `std::fs::OpenOptions::open::<&std::path::Path>`\n+   = note: inside `std::fs::File::open::<&str>`\n+note: inside `main`\n   --> $DIR/isolated_file.rs:LL:CC\n    |\n LL |     let _file = std::fs::File::open(\"file.txt\").unwrap();"}, {"sha": "fd371cbaeaf0898ea1ca8ae3d8b093923cb0c55f", "filename": "src/tools/miri/tests/fail/shims/fs/isolated_stdin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::read(0, bytes.as_mut_ptr() as *mut libc::c_void, 512);\n    = help: pass the flag `-Zmiri-disable-isolation` to disable isolation;\n    = help: or pass `-Zmiri-isolation-error=warn` to configure Miri to return an error code from isolated operations (if supported for that operation) and continue with a warning\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/isolated_stdin.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "c889e44b526c1f4f5d0be17df881bad0ea8e8d6c", "filename": "src/tools/miri/tests/fail/shims/fs/mkstemp_immutable_arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |     let _fd = unsafe { libc::mkstemp(s) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `test_mkstemp_immutable_arg` at $DIR/mkstemp_immutable_arg.rs:LL:CC\n-note: inside `main` at $DIR/mkstemp_immutable_arg.rs:LL:CC\n+   = note: inside `test_mkstemp_immutable_arg`\n+note: inside `main`\n   --> $DIR/mkstemp_immutable_arg.rs:LL:CC\n    |\n LL |     test_mkstemp_immutable_arg();"}, {"sha": "3f46a475e55a9c7706914774d50f93302ab656ac", "filename": "src/tools/miri/tests/fail/shims/fs/read_from_stdout.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |         libc::read(1, bytes.as_mut_ptr() as *mut libc::c_void, 512);\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/read_from_stdout.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "f319e57345d309e93f76792b3e8b3b55009813bd", "filename": "src/tools/miri/tests/fail/shims/fs/unix_open_missing_required_mode.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL | ...safe { libc::open(name_ptr, libc::O_CREAT) };\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `test_file_open_missing_needed_mode` at $DIR/unix_open_missing_required_mode.rs:LL:CC\n-note: inside `main` at $DIR/unix_open_missing_required_mode.rs:LL:CC\n+   = note: inside `test_file_open_missing_needed_mode`\n+note: inside `main`\n   --> $DIR/unix_open_missing_required_mode.rs:LL:CC\n    |\n LL |     test_file_open_missing_needed_mode();"}, {"sha": "0dfb68a8b2eea9041ce8b2cfc0d25dbf3ac89ff5", "filename": "src/tools/miri/tests/fail/shims/fs/write_to_stdin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -6,7 +6,7 @@ LL |         libc::write(0, bytes.as_ptr() as *const libc::c_void, 5);\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/write_to_stdin.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "2a2dbe58667dafc1b0511d0b73eb894d8ccae22b", "filename": "src/tools/miri/tests/fail/shims/shim_arg_size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fshim_arg_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fshim_arg_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fshim_arg_size.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         memchr(std::ptr::null(), 0, 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/shim_arg_size.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "c5b550eab1d18dbb661317f77076047d9168268c", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_cond_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_cond_destroy(cond.as_mut_ptr());\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_cond_double_destroy.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "2e28d31e74ef341a4e976d33bf6d420848d6c8da", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_condattr_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_condattr_destroy(attr.as_mut_ptr());\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_condattr_double_destroy.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "22c35cf7a72dbd383ba07ed56da370ab99ee0ac3", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_mutex_NULL_deadlock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_mutex_lock(&mut mutex as *mut _);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_mutex_NULL_deadlock.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "fb3da39eeec478a88fc299949b99fa1a27f1ae18", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_mutex_deadlock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_deadlock.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -4,7 +4,7 @@ error: deadlock: the evaluated program deadlocked\n LL |             assert_eq!(libc::pthread_mutex_lock(lock_copy.0.get() as *mut _), 0);\n    |                                                                            ^ the evaluated program deadlocked\n    |\n-   = note: inside closure at $DIR/libc_pthread_mutex_deadlock.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "8ab2fb0b743dbea7c5c4c6b4dd50e683ffb99726", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_mutex_default_deadlock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_mutex_lock(&mut mutex as *mut _);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_mutex_default_deadlock.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "483bf431c8310b5866ff88b286a81104ed61f259", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_mutex_destroy_locked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_mutex_destroy(&mut mutex as *mut _);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_mutex_destroy_locked.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d28d12b009abde10288b4fc2eed2110abdcf6ee1", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_mutex_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_mutex_destroy(mutex.as_mut_ptr());\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_mutex_double_destroy.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "89a248c628463febbc756444c5e45a71e57fb6c0", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_mutex_normal_deadlock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_deadlock.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -4,7 +4,7 @@ error: deadlock: the evaluated program deadlocked\n LL |         libc::pthread_mutex_lock(&mut mutex as *mut _);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program deadlocked\n    |\n-   = note: inside `main` at $DIR/libc_pthread_mutex_normal_deadlock.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "4449b4ada93e7344ad9f66955c8dfbbf1141f0b1", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_mutex_normal_unlock_unlocked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_mutex_unlock(&mut mutex as *mut _);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_mutex_normal_unlock_unlocked.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "084deb6b1ba69baee90ad90fea8cbce0a691475c", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_mutex_wrong_owner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL | ...t_eq!(libc::pthread_mutex_unlock(lock_copy.0.get() as *mut _), 0);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/libc_pthread_mutex_wrong_owner.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "9a546b5ecad2fb1bd94e41c76be534f783c53df2", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_mutexattr_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_mutexattr_double_destroy.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "3dc538c5ba5d1e8f140485066f2a99f8981280c6", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_rwlock_destroy_read_locked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_rwlock_destroy(rw.get());\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_rwlock_destroy_read_locked.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "92ae22fe003854db4a1fdcbaece97e4e21f6b280", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_rwlock_destroy_write_locked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_rwlock_destroy(rw.get());\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_rwlock_destroy_write_locked.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "f88e7bf5ed7b85a9a609d8b184a6d68aeca8497b", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_rwlock_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_rwlock_destroy(&mut lock);\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_rwlock_double_destroy.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "f665baac58b3677e0edb55c5d6e9a500f1cf11de", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_rwlock_read_write_deadlock_single_thread.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -4,7 +4,7 @@ error: deadlock: the evaluated program deadlocked\n LL |         libc::pthread_rwlock_wrlock(rw.get());\n    |                                             ^ the evaluated program deadlocked\n    |\n-   = note: inside `main` at $DIR/libc_pthread_rwlock_read_write_deadlock_single_thread.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "45959dc0b96a08560b1c809040e75f21d9c5e233", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_rwlock_read_wrong_owner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL | ...   assert_eq!(libc::pthread_rwlock_unlock(lock_copy.0.get() as *mut _),\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/libc_pthread_rwlock_read_wrong_owner.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "da31193804d678e64f7a295d34940eddb36e90a2", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_rwlock_unlock_unlocked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL |         libc::pthread_rwlock_unlock(rw.get());\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/libc_pthread_rwlock_unlock_unlocked.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "768a7eee99067651296f1b8f27fde049686ca2c7", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_rwlock_write_read_deadlock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -4,7 +4,7 @@ error: deadlock: the evaluated program deadlocked\n LL |             assert_eq!(libc::pthread_rwlock_wrlock(lock_copy.0.get() as *mut _), 0);\n    |                                                                               ^ the evaluated program deadlocked\n    |\n-   = note: inside closure at $DIR/libc_pthread_rwlock_write_read_deadlock.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "3655bdff20a45de2f1c79099bdc730ef99005598", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_rwlock_write_read_deadlock_single_thread.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -4,7 +4,7 @@ error: deadlock: the evaluated program deadlocked\n LL |         libc::pthread_rwlock_rdlock(rw.get());\n    |                                             ^ the evaluated program deadlocked\n    |\n-   = note: inside `main` at $DIR/libc_pthread_rwlock_write_read_deadlock_single_thread.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0085db9d47fbf6b94d277cc5621e7eea48b1b6f9", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_rwlock_write_write_deadlock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -4,7 +4,7 @@ error: deadlock: the evaluated program deadlocked\n LL |             assert_eq!(libc::pthread_rwlock_wrlock(lock_copy.0.get() as *mut _), 0);\n    |                                                                               ^ the evaluated program deadlocked\n    |\n-   = note: inside closure at $DIR/libc_pthread_rwlock_write_write_deadlock.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "14289cd2e13a1c3832ecf68cce90575d7d5d5a3d", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_rwlock_write_write_deadlock_single_thread.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -4,7 +4,7 @@ error: deadlock: the evaluated program deadlocked\n LL |         libc::pthread_rwlock_wrlock(rw.get());\n    |                                             ^ the evaluated program deadlocked\n    |\n-   = note: inside `main` at $DIR/libc_pthread_rwlock_write_write_deadlock_single_thread.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b1a12badf03c3a318e4ae337bc41c0dfe5ede666", "filename": "src/tools/miri/tests/fail/shims/sync/libc_pthread_rwlock_write_wrong_owner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,7 +7,7 @@ LL | ...   assert_eq!(libc::pthread_rwlock_unlock(lock_copy.0.get() as *mut _),\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside closure at $DIR/libc_pthread_rwlock_write_wrong_owner.rs:LL:CC\n+   = note: inside closure\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "1e3173b60729fc1357b68c7c9d6f032634a64db4", "filename": "src/tools/miri/tests/fail/should-pass/cpp20_rwc_syncs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,8 +7,8 @@ LL |             std::hint::unreachable_unchecked();\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `test_cpp20_rwc_syncs` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n-note: inside `main` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n+   = note: inside `test_cpp20_rwc_syncs`\n+note: inside `main`\n   --> $DIR/cpp20_rwc_syncs.rs:LL:CC\n    |\n LL |         test_cpp20_rwc_syncs();"}, {"sha": "84480307164cb7791bf9e1b2ea6ad84c6132bb93", "filename": "src/tools/miri/tests/fail/stacked_borrows/alias_through_mutation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n LL |     *target = 13;\n    |     ^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/alias_through_mutation.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "5736ecfed828c341d5ccb0139c18d20f0b1d0849", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -17,8 +17,8 @@ help: <TAG> is this argument\n LL | pub fn safe(_x: &mut i32, _y: &mut i32) {}\n    |             ^^\n    = note: BACKTRACE:\n-   = note: inside `safe` at $DIR/aliasing_mut1.rs:LL:CC\n-note: inside `main` at $DIR/aliasing_mut1.rs:LL:CC\n+   = note: inside `safe`\n+note: inside `main`\n   --> $DIR/aliasing_mut1.rs:LL:CC\n    |\n LL |     safe_raw(xraw, xraw);"}, {"sha": "e9ef219a3db9e9017999e7299c1237f59a5a41d5", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -17,8 +17,8 @@ help: <TAG> is this argument\n LL | pub fn safe(_x: &i32, _y: &mut i32) {}\n    |             ^^\n    = note: BACKTRACE:\n-   = note: inside `safe` at $DIR/aliasing_mut2.rs:LL:CC\n-note: inside `main` at $DIR/aliasing_mut2.rs:LL:CC\n+   = note: inside `safe`\n+note: inside `main`\n   --> $DIR/aliasing_mut2.rs:LL:CC\n    |\n LL |     safe_raw(xshr, xraw);"}, {"sha": "7aabfe9938737641789f4e9c538b36731c522054", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,8 +20,8 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry reta\n LL |     safe_raw(xraw, xshr);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `safe` at $DIR/aliasing_mut3.rs:LL:CC\n-note: inside `main` at $DIR/aliasing_mut3.rs:LL:CC\n+   = note: inside `safe`\n+note: inside `main`\n   --> $DIR/aliasing_mut3.rs:LL:CC\n    |\n LL |     safe_raw(xraw, xshr);"}, {"sha": "07995cdec447d5de715d5ee0d85075909c67e709", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -17,8 +17,8 @@ help: <TAG> is this argument\n LL | pub fn safe(_x: &i32, _y: &mut Cell<i32>) {}\n    |             ^^\n    = note: BACKTRACE:\n-   = note: inside `safe` at $DIR/aliasing_mut4.rs:LL:CC\n-note: inside `main` at $DIR/aliasing_mut4.rs:LL:CC\n+   = note: inside `safe`\n+note: inside `main`\n   --> $DIR/aliasing_mut4.rs:LL:CC\n    |\n LL |     safe_raw(xshr, xraw as *mut _);"}, {"sha": "9d356dc84ae4e86add56bee6265d55415f73ed4e", "filename": "src/tools/miri/tests/fail/stacked_borrows/box_exclusive_violation1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,13 +20,13 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n LL |     *our = 5;\n    |     ^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `unknown_code_2` at $DIR/box_exclusive_violation1.rs:LL:CC\n-note: inside `demo_box_advanced_unique` at $DIR/box_exclusive_violation1.rs:LL:CC\n+   = note: inside `unknown_code_2`\n+note: inside `demo_box_advanced_unique`\n   --> $DIR/box_exclusive_violation1.rs:LL:CC\n    |\n LL |     unknown_code_2();\n    |     ^^^^^^^^^^^^^^^^\n-note: inside `main` at $DIR/box_exclusive_violation1.rs:LL:CC\n+note: inside `main`\n   --> $DIR/box_exclusive_violation1.rs:LL:CC\n    |\n LL |     demo_box_advanced_unique(Box::new(0));"}, {"sha": "320dbacfbdd992fb690f406d0f0cd26c09587fbb", "filename": "src/tools/miri/tests/fail/stacked_borrows/buggy_as_mut_slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0xc] by a Unique retag\n LL |         unsafe { from_raw_parts_mut(self_.as_ptr() as *mut T, self_.len()) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/buggy_as_mut_slice.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "4a1cfc88c092e662d0cbbb61a3a50cf5c7c38c1a", "filename": "src/tools/miri/tests/fail/stacked_borrows/buggy_split_at_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x10] by a Unique retag\n LL |                 from_raw_parts_mut(ptr.offset(mid as isize), len - mid),\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/buggy_split_at_mut.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "66b08da58fab9db7b18f0db7244bb1f934d4c529", "filename": "src/tools/miri/tests/fail/stacked_borrows/deallocate_against_protector1.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,23 +7,23 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n    = note: BACKTRACE:\n-   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n-   = note: inside `std::mem::drop::<std::boxed::Box<i32>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n-note: inside closure at $DIR/deallocate_against_protector1.rs:LL:CC\n+   = note: inside `std::alloc::dealloc`\n+   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate`\n+   = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>`\n+   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<i32>> - shim(Some(std::boxed::Box<i32>))`\n+   = note: inside `std::mem::drop::<std::boxed::Box<i32>>`\n+note: inside closure\n   --> $DIR/deallocate_against_protector1.rs:LL:CC\n    |\n LL |         drop(unsafe { Box::from_raw(raw) });\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: inside `<[closure@$DIR/deallocate_against_protector1.rs:LL:CC] as std::ops::FnOnce<(&mut i32,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n-note: inside `inner` at $DIR/deallocate_against_protector1.rs:LL:CC\n+   = note: inside `<[closure@$DIR/deallocate_against_protector1.rs:LL:CC] as std::ops::FnOnce<(&mut i32,)>>::call_once - shim`\n+note: inside `inner`\n   --> $DIR/deallocate_against_protector1.rs:LL:CC\n    |\n LL |     f(x)\n    |     ^^^^\n-note: inside `main` at $DIR/deallocate_against_protector1.rs:LL:CC\n+note: inside `main`\n   --> $DIR/deallocate_against_protector1.rs:LL:CC\n    |\n LL | /     inner(Box::leak(Box::new(0)), |x| {"}, {"sha": "89aeb90d36ae1c9f973453f0cba2167d8ad0d47a", "filename": "src/tools/miri/tests/fail/stacked_borrows/deallocate_against_protector2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -7,23 +7,23 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n    = note: BACKTRACE:\n-   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `alloc::alloc::box_free::<NotUnpin, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n-   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<NotUnpin>> - shim(Some(std::boxed::Box<NotUnpin>))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n-   = note: inside `std::mem::drop::<std::boxed::Box<NotUnpin>>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n-note: inside closure at $DIR/deallocate_against_protector2.rs:LL:CC\n+   = note: inside `std::alloc::dealloc`\n+   = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate`\n+   = note: inside `alloc::alloc::box_free::<NotUnpin, std::alloc::Global>`\n+   = note: inside `std::ptr::drop_in_place::<std::boxed::Box<NotUnpin>> - shim(Some(std::boxed::Box<NotUnpin>))`\n+   = note: inside `std::mem::drop::<std::boxed::Box<NotUnpin>>`\n+note: inside closure\n   --> $DIR/deallocate_against_protector2.rs:LL:CC\n    |\n LL |         drop(unsafe { Box::from_raw(raw) });\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: inside `<[closure@$DIR/deallocate_against_protector2.rs:LL:CC] as std::ops::FnOnce<(&mut NotUnpin,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC\n-note: inside `inner` at $DIR/deallocate_against_protector2.rs:LL:CC\n+   = note: inside `<[closure@$DIR/deallocate_against_protector2.rs:LL:CC] as std::ops::FnOnce<(&mut NotUnpin,)>>::call_once - shim`\n+note: inside `inner`\n   --> $DIR/deallocate_against_protector2.rs:LL:CC\n    |\n LL |     f(x)\n    |     ^^^^\n-note: inside `main` at $DIR/deallocate_against_protector2.rs:LL:CC\n+note: inside `main`\n   --> $DIR/deallocate_against_protector2.rs:LL:CC\n    |\n LL | /     inner(Box::leak(Box::new(NotUnpin(0, PhantomPinned))), |x| {"}, {"sha": "4e0dfe3227d12d70326f6c2be620ba94886ce60c", "filename": "src/tools/miri/tests/fail/stacked_borrows/disable_mut_does_not_merge_srw.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n LL |         *base = 1;\n    |         ^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/disable_mut_does_not_merge_srw.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "ea49d7f481673c67b60e82b32c7be754bb63da7e", "filename": "src/tools/miri/tests/fail/stacked_borrows/exposed_only_ro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -10,7 +10,7 @@ LL |     unsafe { *ptr = 0 };\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/exposed_only_ro.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "799669f71f41d76a4c269aa9dcdc909dd2967a91", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry reta\n LL |     x.do_bad();\n    |     ^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/fnentry_invalidation.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "238a99a37131287e2888cb78a50766f3ebb813b2", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0xc] by a Unique FnEntry reta\n LL |     let _ = t.sli.as_mut_ptr();\n    |             ^^^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/fnentry_invalidation2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "c6db00b01f3028a7fde8432dfc54a00e57235d48", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n LL |     let _val = unsafe { *xraw };\n    |                         ^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_read1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "f200d55d853334ea86264dee799008f6919f6b2b", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a SharedReadOnly reta\n LL |     let shr = unsafe { &*xraw };\n    |                        ^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_read2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "7e2e7244914f0f9f174432a0f02ecdac0d176d4a", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n LL |     let _val = unsafe { *xref1.r };\n    |                         ^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_read3.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "46231a3d405242df58bbf9523af0a7792b62d6f2", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n LL |     let _val = unsafe { *xraw }; // use the raw again, this invalidates xref2 *even* with the special read except for uniq refs\n    |                         ^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_read4.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "8d12930bc47b3bb730736d22fa68de739a45b7b5", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [$HEX..$HEX] by a read access\n LL |     mem::forget(unsafe { ptr::read(xshr) }); // but after reading through the shared ref\n    |                          ^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_read5.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "2a8c5990ffd4ac1ab005315667320981bda1bab8", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n LL |         let x = &mut *x; // kill `raw`\n    |                 ^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_read6.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d7bb30e8e18205ad2a7929310798b08640c5a510", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n LL |         let _val = ptr::read(raw);\n    |                    ^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_read7.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "52087e471c71f0fb442ce3d901ea50c50ecca910", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read8.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n LL |         *y2 += 1;\n    |         ^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_read8.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "e93d338b288fd12ac099f6ec0c9c1f58c90b89c1", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read_despite_exposed1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n LL |         *exposed_ptr = 0;\n    |         ^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_read_despite_exposed1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "4639bc018c5e040510786c2b1b783d8f1449d554", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_read_despite_exposed2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n LL |         let _val = *exposed_ptr;\n    |                    ^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_read_despite_exposed2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "8c47c2a3076a772b8147067e1b5d7d361af9b7e7", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -15,7 +15,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n LL |         let x: *mut u32 = xref as *const _ as *mut _;\n    |                           ^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_write1.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "63e7968ab3e62c5d547807c601b1f9ddd9d13e29", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n LL |     drop(&mut *target); // reborrow\n    |          ^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_write2.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "7145610f40e2b694c62ef983aea5eda6e8e91328", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -15,7 +15,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n LL |     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n    |               ^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_write3.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "6e3a619e4acbfc0fc93a96a169b51b6e1a5f244b", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n LL |     let _mut_ref: &mut i32 = unsafe { mem::transmute(raw) }; // &mut, with raw tag\n    |                                       ^^^^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_write4.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "05c63be0752cbf0f2e0ff4089e5f25350dbb737e", "filename": "src/tools/miri/tests/fail/stacked_borrows/illegal_write5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7782a2b70d89bbf7d918e00f6723b62234c57ff4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr?ref=7782a2b70d89bbf7d918e00f6723b62234c57ff4", "patch": "@@ -20,7 +20,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n LL |     unsafe { *xraw = 15 };\n    |              ^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `main` at $DIR/illegal_write5.rs:LL:CC\n+   = note: inside `main`\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}]}