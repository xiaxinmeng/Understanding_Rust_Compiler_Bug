{"sha": "622217da59ae7b4d1d5128255c9517aeb2174ea6", "node_id": "C_kwDOAAsO6NoAKDYyMjIxN2RhNTlhZTdiNGQxZDUxMjgyNTVjOTUxN2FlYjIxNzRlYTY", "commit": {"author": {"name": "AndyJado", "email": "101876416+AndyJado@users.noreply.github.com", "date": "2022-08-26T02:32:59Z"}, "committer": {"name": "AndyJado", "email": "101876416+AndyJado@users.noreply.github.com", "date": "2022-08-26T02:32:59Z"}, "message": "diag-mig", "tree": {"sha": "ca793228c4ce0fae94d57dafc2671ed85c58d01e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca793228c4ce0fae94d57dafc2671ed85c58d01e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/622217da59ae7b4d1d5128255c9517aeb2174ea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/622217da59ae7b4d1d5128255c9517aeb2174ea6", "html_url": "https://github.com/rust-lang/rust/commit/622217da59ae7b4d1d5128255c9517aeb2174ea6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/622217da59ae7b4d1d5128255c9517aeb2174ea6/comments", "author": {"login": "AndyJado", "id": 101876416, "node_id": "U_kgDOBhKCwA", "avatar_url": "https://avatars.githubusercontent.com/u/101876416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndyJado", "html_url": "https://github.com/AndyJado", "followers_url": "https://api.github.com/users/AndyJado/followers", "following_url": "https://api.github.com/users/AndyJado/following{/other_user}", "gists_url": "https://api.github.com/users/AndyJado/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndyJado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndyJado/subscriptions", "organizations_url": "https://api.github.com/users/AndyJado/orgs", "repos_url": "https://api.github.com/users/AndyJado/repos", "events_url": "https://api.github.com/users/AndyJado/events{/privacy}", "received_events_url": "https://api.github.com/users/AndyJado/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndyJado", "id": 101876416, "node_id": "U_kgDOBhKCwA", "avatar_url": "https://avatars.githubusercontent.com/u/101876416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndyJado", "html_url": "https://github.com/AndyJado", "followers_url": "https://api.github.com/users/AndyJado/followers", "following_url": "https://api.github.com/users/AndyJado/following{/other_user}", "gists_url": "https://api.github.com/users/AndyJado/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndyJado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndyJado/subscriptions", "organizations_url": "https://api.github.com/users/AndyJado/orgs", "repos_url": "https://api.github.com/users/AndyJado/repos", "events_url": "https://api.github.com/users/AndyJado/events{/privacy}", "received_events_url": "https://api.github.com/users/AndyJado/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfb5ae26a4496b7d35180f15e47ada0f3897c7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb5ae26a4496b7d35180f15e47ada0f3897c7e8", "html_url": "https://github.com/rust-lang/rust/commit/cfb5ae26a4496b7d35180f15e47ada0f3897c7e8"}], "stats": {"total": 287, "additions": 211, "deletions": 76}, "files": [{"sha": "00fdf331ca60ce8c270a3ce98ec6a41d35baafa6", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 41, "deletions": 52, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/622217da59ae7b4d1d5128255c9517aeb2174ea6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622217da59ae7b4d1d5128255c9517aeb2174ea6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=622217da59ae7b4d1d5128255c9517aeb2174ea6", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n //! Error reporting machinery for lifetime errors.\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -23,7 +25,10 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n \n use crate::borrowck_errors;\n-use crate::session_diagnostics::GenericDoesNotLiveLongEnough;\n+use crate::session_diagnostics::{\n+    FnMutError, FnMutReturnTypeErr, GenericDoesNotLiveLongEnough, LifetimeOutliveErr,\n+    LifetimeReturnCategoryErr, RequireStaticErr, VarHereDenote,\n+};\n \n use super::{OutlivesSuggestionBuilder, RegionName};\n use crate::region_infer::BlameConstraint;\n@@ -488,32 +493,27 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let ErrorConstraintInfo { outlived_fr, span, .. } = errci;\n \n-        let mut diag = self\n-            .infcx\n-            .tcx\n-            .sess\n-            .struct_span_err(*span, \"captured variable cannot escape `FnMut` closure body\");\n-\n         let mut output_ty = self.regioncx.universal_regions().unnormalized_output_ty;\n         if let ty::Opaque(def_id, _) = *output_ty.kind() {\n             output_ty = self.infcx.tcx.type_of(def_id)\n         };\n \n         debug!(\"report_fnmut_error: output_ty={:?}\", output_ty);\n \n-        let message = match output_ty.kind() {\n-            ty::Closure(_, _) => {\n-                \"returns a closure that contains a reference to a captured variable, which then \\\n-                 escapes the closure body\"\n-            }\n-            ty::Adt(def, _) if self.infcx.tcx.is_diagnostic_item(sym::gen_future, def.did()) => {\n-                \"returns an `async` block that contains a reference to a captured variable, which then \\\n-                 escapes the closure body\"\n-            }\n-            _ => \"returns a reference to a captured variable which escapes the closure body\",\n+        let err = FnMutError {\n+            span: *span,\n+            ty_err: match output_ty.kind() {\n+                ty::Closure(_, _) => FnMutReturnTypeErr::ReturnClosure { span: *span },\n+                ty::Adt(def, _)\n+                    if self.infcx.tcx.is_diagnostic_item(sym::gen_future, def.did()) =>\n+                {\n+                    FnMutReturnTypeErr::ReturnAsyncBlock { span: *span }\n+                }\n+                _ => FnMutReturnTypeErr::ReturnRef { span: *span },\n+            },\n         };\n \n-        diag.span_label(*span, message);\n+        let mut diag = self.infcx.tcx.sess.create_err(err);\n \n         if let ReturnConstraint::ClosureUpvar(upvar_field) = kind {\n             let def_id = match self.regioncx.universal_regions().defining_ty {\n@@ -532,20 +532,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let upvars_map = self.infcx.tcx.upvars_mentioned(def_id).unwrap();\n                 let upvar_def_span = self.infcx.tcx.hir().span(def_hir);\n                 let upvar_span = upvars_map.get(&def_hir).unwrap().span;\n-                diag.span_label(upvar_def_span, \"variable defined here\");\n-                diag.span_label(upvar_span, \"variable captured here\");\n+                diag.subdiagnostic(VarHereDenote::Defined { span: upvar_def_span });\n+                diag.subdiagnostic(VarHereDenote::Captured { span: upvar_span });\n             }\n         }\n \n         if let Some(fr_span) = self.give_region_a_name(*outlived_fr).unwrap().span() {\n-            diag.span_label(fr_span, \"inferred to be a `FnMut` closure\");\n+            diag.subdiagnostic(VarHereDenote::FnMutInferred { span: fr_span });\n         }\n \n-        diag.note(\n-            \"`FnMut` closures only have access to their captured variables while they are \\\n-             executing...\",\n-        );\n-        diag.note(\"...therefore, they cannot allow references to captured variables to escape\");\n         self.suggest_move_on_borrowing_closure(&mut diag);\n \n         diag\n@@ -681,39 +676,33 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             ..\n         } = errci;\n \n-        let mut diag =\n-            self.infcx.tcx.sess.struct_span_err(*span, \"lifetime may not live long enough\");\n-\n         let (_, mir_def_name) =\n             self.infcx.tcx.article_and_description(self.mir_def_id().to_def_id());\n \n+        let err = LifetimeOutliveErr { span: *span };\n+        let mut diag = self.infcx.tcx.sess.create_err(err);\n+\n         let fr_name = self.give_region_a_name(*fr).unwrap();\n         fr_name.highlight_region_name(&mut diag);\n         let outlived_fr_name = self.give_region_a_name(*outlived_fr).unwrap();\n         outlived_fr_name.highlight_region_name(&mut diag);\n \n-        match (category, outlived_fr_is_local, fr_is_local) {\n-            (ConstraintCategory::Return(_), true, _) => {\n-                diag.span_label(\n-                    *span,\n-                    format!(\n-                        \"{mir_def_name} was supposed to return data with lifetime `{outlived_fr_name}` but it is returning \\\n-                         data with lifetime `{fr_name}`\",\n-                    ),\n-                );\n-            }\n-            _ => {\n-                diag.span_label(\n-                    *span,\n-                    format!(\n-                        \"{}requires that `{}` must outlive `{}`\",\n-                        category.description(),\n-                        fr_name,\n-                        outlived_fr_name,\n-                    ),\n-                );\n-            }\n-        }\n+        let err_category = match (category, outlived_fr_is_local, fr_is_local) {\n+            (ConstraintCategory::Return(_), true, _) => LifetimeReturnCategoryErr::WrongReturn {\n+                span: *span,\n+                mir_def_name,\n+                outlived_fr_name,\n+                fr_name: &fr_name,\n+            },\n+            _ => LifetimeReturnCategoryErr::ShortReturn {\n+                span: *span,\n+                category_desc: category.description(),\n+                free_region_name: &fr_name,\n+                outlived_fr_name,\n+            },\n+        };\n+\n+        diag.subdiagnostic(err_category);\n \n         self.add_static_impl_trait_suggestion(&mut diag, *fr, fr_name, *outlived_fr);\n         self.suggest_adding_lifetime_params(&mut diag, *fr, *outlived_fr);\n@@ -862,7 +851,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     ident.span,\n                     \"calling this method introduces the `impl`'s 'static` requirement\",\n                 );\n-                err.span_note(multi_span, \"the used `impl` has a `'static` requirement\");\n+                err.subdiagnostic(RequireStaticErr::UsedImpl { multi_span });\n                 err.span_suggestion_verbose(\n                     span.shrink_to_hi(),\n                     \"consider relaxing the implicit `'static` requirement\","}, {"sha": "0f8afb038f455c8393b671a4a05ff97976d81916", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/622217da59ae7b4d1d5128255c9517aeb2174ea6/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622217da59ae7b4d1d5128255c9517aeb2174ea6/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=622217da59ae7b4d1d5128255c9517aeb2174ea6", "patch": "@@ -18,7 +18,7 @@ extern crate tracing;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_index::bit_set::ChunkedBitSet;\n@@ -50,6 +50,8 @@ use rustc_mir_dataflow::move_paths::{InitLocation, LookupResult, MoveData, MoveE\n use rustc_mir_dataflow::Analysis;\n use rustc_mir_dataflow::MoveDataParamEnv;\n \n+use crate::session_diagnostics::VarNeedNotMut;\n+\n use self::diagnostics::{AccessKind, RegionName};\n use self::location::LocationTable;\n use self::prefixes::PrefixSet;\n@@ -424,17 +426,9 @@ fn do_mir_borrowck<'a, 'tcx>(\n             continue;\n         }\n \n-        tcx.struct_span_lint_hir(UNUSED_MUT, lint_root, span, |lint| {\n-            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n-            lint.build(\"variable does not need to be mutable\")\n-                .span_suggestion_short(\n-                    mut_span,\n-                    \"remove this `mut`\",\n-                    \"\",\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n-        })\n+        let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n+\n+        tcx.emit_spanned_lint(UNUSED_MUT, lint_root, span, VarNeedNotMut { span: mut_span })\n     }\n \n     let tainted_by_errors = mbcx.emit_errors();"}, {"sha": "127cb4e408372e800e9ef7380f04c8ee59cf9e8d", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/622217da59ae7b4d1d5128255c9517aeb2174ea6/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622217da59ae7b4d1d5128255c9517aeb2174ea6/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=622217da59ae7b4d1d5128255c9517aeb2174ea6", "patch": "@@ -16,6 +16,8 @@ use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::TraitEngineExt as _;\n \n+use crate::session_diagnostics::ConstNotUsedTraitAlias;\n+\n use super::RegionInferenceContext;\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n@@ -639,17 +641,10 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                     Some(GenericArgKind::Const(c1)) => c1,\n                     Some(u) => panic!(\"const mapped to unexpected kind: {:?}\", u),\n                     None => {\n-                        self.tcx\n-                            .sess\n-                            .struct_span_err(\n-                                self.span,\n-                                &format!(\n-                                    \"const parameter `{}` is part of concrete type but not \\\n-                                          used in parameter list for the `impl Trait` type alias\",\n-                                    ct\n-                                ),\n-                            )\n-                            .emit();\n+                        self.tcx.sess.emit_err(ConstNotUsedTraitAlias {\n+                            ct: ct.to_string(),\n+                            span: self.span,\n+                        });\n \n                         self.tcx().const_error(ct.ty())\n                     }"}, {"sha": "5d750c6ca8c7beac7cd32767ab2bbb35d76ce3b4", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 116, "deletions": 1, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/622217da59ae7b4d1d5128255c9517aeb2174ea6/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622217da59ae7b4d1d5128255c9517aeb2174ea6/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=622217da59ae7b4d1d5128255c9517aeb2174ea6", "patch": "@@ -1,7 +1,10 @@\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_errors::{IntoDiagnosticArg, MultiSpan};\n+use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n \n+use crate::diagnostics::RegionName;\n+\n #[derive(SessionDiagnostic)]\n #[diag(borrowck::move_unsized, code = \"E0161\")]\n pub(crate) struct MoveUnsized<'tcx> {\n@@ -42,3 +45,115 @@ pub(crate) struct GenericDoesNotLiveLongEnough {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[diag(borrowck::var_does_not_need_mut)]\n+pub(crate) struct VarNeedNotMut {\n+    #[suggestion_short(applicability = \"machine-applicable\", code = \"\")]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(borrowck::const_not_used_in_type_alias)]\n+pub(crate) struct ConstNotUsedTraitAlias {\n+    pub ct: String,\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(borrowck::var_cannot_escape_closure)]\n+#[note]\n+#[note(borrowck::cannot_escape)]\n+pub(crate) struct FnMutError {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub ty_err: FnMutReturnTypeErr,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub(crate) enum VarHereDenote {\n+    #[label(borrowck::var_here_captured)]\n+    Captured {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[label(borrowck::var_here_defined)]\n+    Defined {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[label(borrowck::closure_inferred_mut)]\n+    FnMutInferred {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub(crate) enum FnMutReturnTypeErr {\n+    #[label(borrowck::returned_closure_escaped)]\n+    ReturnClosure {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[label(borrowck::returned_async_block_escaped)]\n+    ReturnAsyncBlock {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[label(borrowck::returned_ref_escaped)]\n+    ReturnRef {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(borrowck::lifetime_constraints_error)]\n+pub(crate) struct LifetimeOutliveErr {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub(crate) enum LifetimeReturnCategoryErr<'a> {\n+    #[label(borrowck::returned_lifetime_wrong)]\n+    WrongReturn {\n+        #[primary_span]\n+        span: Span,\n+        mir_def_name: &'a str,\n+        outlived_fr_name: RegionName,\n+        fr_name: &'a RegionName,\n+    },\n+    #[label(borrowck::returned_lifetime_short)]\n+    ShortReturn {\n+        #[primary_span]\n+        span: Span,\n+        category_desc: &'static str,\n+        free_region_name: &'a RegionName,\n+        outlived_fr_name: RegionName,\n+    },\n+}\n+\n+impl IntoDiagnosticArg for &RegionName {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        format!(\"{}\", self).into_diagnostic_arg()\n+    }\n+}\n+\n+impl IntoDiagnosticArg for RegionName {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        format!(\"{}\", self).into_diagnostic_arg()\n+    }\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub(crate) enum RequireStaticErr {\n+    #[note(borrowck::used_impl_require_static)]\n+    UsedImpl {\n+        #[primary_span]\n+        multi_span: MultiSpan,\n+    },\n+}"}, {"sha": "67f2156f32e509eb78fb18267f48330d5fae2356", "filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/622217da59ae7b4d1d5128255c9517aeb2174ea6/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/622217da59ae7b4d1d5128255c9517aeb2174ea6/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl?ref=622217da59ae7b4d1d5128255c9517aeb2174ea6", "patch": "@@ -16,3 +16,45 @@ borrowck_higher_ranked_subtype_error =\n \n borrowck_generic_does_not_live_long_enough =\n     `{$kind}` does not live long enough\n+\n+borrowck_move_borrowed =\n+    cannot move out of `{$desc}` beacause it is borrowed\n+\n+borrowck_var_does_not_need_mut =\n+    variable does not need to be mutable\n+    .suggestion = remove this `mut`\n+\n+borrowck_const_not_used_in_type_alias =\n+    const parameter `{$ct}` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n+\n+borrowck_var_cannot_escape_closure =\n+    captured variable cannot escape `FnMut` closure body\n+    .note = `FnMut` closures only have access to their captured variables while they are executing...\n+    .cannot_escape = ...therefore, they cannot allow references to captured variables to escape\n+\n+borrowck_var_here_defined = variable defined here\n+\n+borrowck_var_here_captured = variable captured here\n+\n+borrowck_closure_inferred_mut =  inferred to be a `FnMut` closure\n+\n+borrowck_returned_closure_escaped =\n+    returns a closure that contains a reference to a captured variable, which then escapes the closure body\n+\n+borrowck_returned_async_block_escaped =\n+    returns an `async` block that contains a reference to a captured variable, which then escapes the closure body\n+\n+borrowck_returned_ref_escaped =\n+    returns a reference to a captured variable which escapes the closure body\n+\n+borrowck_lifetime_constraints_error =\n+    lifetime may not live long enough\n+\n+borrowck_returned_lifetime_wrong =\n+    {$mir_def_name} was supposed to return data with lifetime `{$outlived_fr_name}` but it is returning data with lifetime `{$fr_name}`\n+\n+borrowck_returned_lifetime_short =\n+    {$category_desc}requires that `{$free_region_name}` must outlive `{$outlived_fr_name}`\n+\n+borrowck_used_impl_require_static =\n+    the used `impl` has a `'static` requirement"}]}