{"sha": "1eba7e5f5e80e085cea33fbac94c4238a297cf59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYmE3ZTVmNWU4MGUwODVjZWEzM2ZiYWM5NGM0MjM4YTI5N2NmNTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-07T19:45:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-08T16:20:24Z"}, "message": "Implement drop for trait objects", "tree": {"sha": "fc6bb9dd5e9f1e3e950b48133f58a026fbdd593f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc6bb9dd5e9f1e3e950b48133f58a026fbdd593f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eba7e5f5e80e085cea33fbac94c4238a297cf59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eba7e5f5e80e085cea33fbac94c4238a297cf59", "html_url": "https://github.com/rust-lang/rust/commit/1eba7e5f5e80e085cea33fbac94c4238a297cf59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eba7e5f5e80e085cea33fbac94c4238a297cf59/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e506ff1ddbdac2333df24ce29de74cf9c017966c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e506ff1ddbdac2333df24ce29de74cf9c017966c", "html_url": "https://github.com/rust-lang/rust/commit/e506ff1ddbdac2333df24ce29de74cf9c017966c"}], "stats": {"total": 118, "additions": 67, "deletions": 51}, "files": [{"sha": "0ddd3ade401785a46638b4ef532f2db79fad0fb8", "filename": "example/mini_core.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1eba7e5f5e80e085cea33fbac94c4238a297cf59/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eba7e5f5e80e085cea33fbac94c4238a297cf59/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=1eba7e5f5e80e085cea33fbac94c4238a297cf59", "patch": "@@ -294,6 +294,12 @@ pub struct Box<T: ?Sized>(*mut T);\n \n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n \n+impl<T: ?Sized> Drop for Box<T> {\n+    fn drop(&mut self) {\n+        // drop is currently performed by compiler.\n+    }\n+}\n+\n #[lang = \"exchange_malloc\"]\n // Make it available to jited mini_core_hello_world\n // FIXME remove next line when jit supports linking rlibs\n@@ -302,6 +308,12 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n     libc::malloc(size)\n }\n \n+#[lang = \"box_free\"]\n+#[inline(always)]\n+unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n+    libc::free(ptr as *mut u8);\n+}\n+\n #[lang = \"drop\"]\n pub trait Drop {\n     fn drop(&mut self);\n@@ -327,6 +339,7 @@ pub mod libc {\n     extern \"C\" {\n         pub fn puts(s: *const u8);\n         pub fn malloc(size: usize) -> *mut u8;\n+        pub fn free(ptr: *mut u8);\n         pub fn memcpy(dst: *mut u8, src: *const u8, size: usize);\n         pub fn memmove(dst: *mut u8, src: *const u8, size: usize);\n         pub fn strncpy(dst: *mut u8, src: *const u8, size: usize);"}, {"sha": "293ab8bfbff128d4d96c69c3ef2cefbd4a7433d0", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1eba7e5f5e80e085cea33fbac94c4238a297cf59/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eba7e5f5e80e085cea33fbac94c4238a297cf59/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=1eba7e5f5e80e085cea33fbac94c4238a297cf59", "patch": "@@ -62,6 +62,10 @@ impl Drop for NoisyDropInner {\n     }\n }\n \n+impl SomeTrait for NoisyDrop {\n+    fn object_safe(&self) {}\n+}\n+\n enum Ordering {\n     Less = -1,\n     Equal = 0,\n@@ -152,10 +156,10 @@ fn main() {\n         intrinsics::size_of_val(&MyDst([0u8; 4]) as &MyDst<[u8]>);\n     }\n \n-    let _ = NoisyDrop {\n-        text: \"Outer got dropped!\\0\",\n+    let _ = box NoisyDrop {\n+        text: \"Boxed outer got dropped!\\0\",\n         inner: NoisyDropInner,\n-    };\n+    } as Box<SomeTrait>;\n \n     const FUNC_REF: Option<fn()> = Some(main);\n     match FUNC_REF {"}, {"sha": "70e94db93ae17b964e319c5d8d1b26d0c81bc8a1", "filename": "src/abi.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1eba7e5f5e80e085cea33fbac94c4238a297cf59/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eba7e5f5e80e085cea33fbac94c4238a297cf59/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=1eba7e5f5e80e085cea33fbac94c4238a297cf59", "patch": "@@ -671,6 +671,25 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n     }\n }\n \n+pub fn codegen_drop<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+    drop_place: CPlace<'tcx>,\n+    drop_fn_ty: Ty<'tcx>,\n+) {\n+    let (ptr, vtable) = drop_place.to_addr_maybe_unsized(fx);\n+    let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable.unwrap());\n+\n+    let fn_sig = ty_fn_sig(fx.tcx, drop_fn_ty);\n+\n+    match get_pass_mode(fx.tcx, fn_sig.output(), true) {\n+        PassMode::NoPass => {},\n+        _ => unreachable!(),\n+    };\n+\n+    let sig = fx.bcx.import_signature(clif_sig_from_fn_sig(fx.tcx, fn_sig));\n+    fx.bcx.ins().call_indirect(sig, drop_fn, &[ptr]);\n+}\n+\n pub fn codegen_return(fx: &mut FunctionCx<impl Backend>) {\n     match get_pass_mode(fx.tcx, fx.return_type(), true) {\n         PassMode::NoPass | PassMode::ByRef => {"}, {"sha": "94598c65672ac0e37a16354c0a39a6e9370c8a82", "filename": "src/base.rs", "status": "modified", "additions": 15, "deletions": 48, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/1eba7e5f5e80e085cea33fbac94c4238a297cf59/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eba7e5f5e80e085cea33fbac94c4238a297cf59/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=1eba7e5f5e80e085cea33fbac94c4238a297cf59", "patch": "@@ -242,7 +242,8 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n             TerminatorKind::Yield { .. }\n             | TerminatorKind::FalseEdges { .. }\n             | TerminatorKind::FalseUnwind { .. }\n-            | TerminatorKind::DropAndReplace { .. } => {\n+            | TerminatorKind::DropAndReplace { .. }\n+            | TerminatorKind::GeneratorDrop => {\n                 bug!(\"shouldn't exist at trans {:?}\", bb_data.terminator());\n             }\n             TerminatorKind::Drop {\n@@ -258,23 +259,23 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n                     // we don't actually need to drop anything\n                 } else {\n                     let drop_place = trans_place(fx, location);\n-                    let arg_place = CPlace::new_stack_slot(\n-                        fx,\n-                        fx.tcx.mk_ref(\n-                            &ty::RegionKind::ReErased,\n-                            TypeAndMut {\n-                                ty,\n-                                mutbl: crate::rustc::hir::Mutability::MutMutable,\n-                            },\n-                        ),\n-                    );\n-                    drop_place.write_place_ref(fx, arg_place);\n+                    let drop_fn_ty = drop_fn.ty(fx.tcx);\n                     match ty.sty {\n                         ty::Dynamic(..) => {\n-                            fx.tcx.sess.warn(\"Drop for trait object\");\n+                            crate::abi::codegen_drop(fx, drop_place, drop_fn_ty);\n                         }\n                         _ => {\n-                            let drop_fn_ty = drop_fn.ty(fx.tcx);\n+                            let arg_place = CPlace::new_stack_slot(\n+                                fx,\n+                                fx.tcx.mk_ref(\n+                                    &ty::RegionKind::ReErased,\n+                                    TypeAndMut {\n+                                        ty,\n+                                        mutbl: crate::rustc::hir::Mutability::MutMutable,\n+                                    },\n+                                ),\n+                            );\n+                            drop_place.write_place_ref(fx, arg_place);\n                             let arg_value = arg_place.to_cvalue(fx);\n                             crate::abi::codegen_call_inner(\n                                 fx,\n@@ -285,45 +286,11 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n                             );\n                         }\n                     }\n-                    /*\n-                    let (args1, args2);\n-                    /*let mut args = if let Some(llextra) = place.llextra {\n-                        args2 = [place.llval, llextra];\n-                        &args2[..]\n-                    } else {\n-                        args1 = [place.llval];\n-                        &args1[..]\n-                    };*/\n-                    let (drop_fn, fn_ty) = match ty.sty {\n-                    ty::Dynamic(..) => {\n-                    let fn_ty = drop_fn.ty(bx.cx.tcx);\n-                    let sig = common::ty_fn_sig(bx.cx, fn_ty);\n-                    let sig = bx.tcx().normalize_erasing_late_bound_regions(\n-                    ty::ParamEnv::reveal_all(),\n-                    &sig,\n-                    );\n-                    let fn_ty = FnType::new_vtable(bx.cx, sig, &[]);\n-                    let vtable = args[1];\n-                    args = &args[..1];\n-                    (meth::DESTRUCTOR.get_fn(&bx, vtable, &fn_ty), fn_ty)\n-                    }\n-                    _ => {\n-                    let value = place.to_cvalue(fx);\n-                    (callee::get_fn(bx.cx, drop_fn),\n-                    FnType::of_instance(bx.cx, &drop_fn))\n-                    }\n-                    };\n-                    do_call(self, bx, fn_ty, drop_fn, args,\n-                    Some((ReturnDest::Nothing, target)),\n-                    unwind);*/\n                 }\n \n                 let target_ebb = fx.get_ebb(*target);\n                 fx.bcx.ins().jump(target_ebb, &[]);\n             }\n-            TerminatorKind::GeneratorDrop => {\n-                unimplemented!(\"terminator GeneratorDrop\");\n-            }\n         };\n     }\n "}, {"sha": "720582b7caed0edd62a2149f1a9ba7a0653ae7ca", "filename": "src/vtable.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1eba7e5f5e80e085cea33fbac94c4238a297cf59/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eba7e5f5e80e085cea33fbac94c4238a297cf59/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=1eba7e5f5e80e085cea33fbac94c4238a297cf59", "patch": "@@ -6,6 +6,19 @@ const DROP_FN_INDEX: usize = 0;\n const SIZE_INDEX: usize = 1;\n const ALIGN_INDEX: usize = 2;\n \n+pub fn drop_fn_of_obj<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+    vtable: Value,\n+) -> Value {\n+    let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n+    fx.bcx.ins().load(\n+        pointer_ty(fx.tcx),\n+        MemFlags::new(),\n+        vtable,\n+        (DROP_FN_INDEX * usize_size) as i32,\n+    )\n+}\n+\n pub fn size_of_obj<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     vtable: Value,"}]}