{"sha": "5f8b708aca74cb7316d2f8dfd81feae087473907", "node_id": "C_kwDOAAsO6NoAKDVmOGI3MDhhY2E3NGNiNzMxNmQyZjhkZmQ4MWZlYWUwODc0NzM5MDc", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T12:28:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T12:28:24Z"}, "message": "move tests", "tree": {"sha": "700ab6d9fbfff1adc97f904ce4a1f8d4460008bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/700ab6d9fbfff1adc97f904ce4a1f8d4460008bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f8b708aca74cb7316d2f8dfd81feae087473907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f8b708aca74cb7316d2f8dfd81feae087473907", "html_url": "https://github.com/rust-lang/rust/commit/5f8b708aca74cb7316d2f8dfd81feae087473907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f8b708aca74cb7316d2f8dfd81feae087473907/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a3fc849214b9f56e0649656cea722f9eba4627f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3fc849214b9f56e0649656cea722f9eba4627f", "html_url": "https://github.com/rust-lang/rust/commit/6a3fc849214b9f56e0649656cea722f9eba4627f"}], "stats": {"total": 239, "additions": 155, "deletions": 84}, "files": [{"sha": "c317dc27a58350cae02bf3dd99e8b7c1f753add2", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f8b708aca74cb7316d2f8dfd81feae087473907/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8b708aca74cb7316d2f8dfd81feae087473907/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=5f8b708aca74cb7316d2f8dfd81feae087473907", "patch": "@@ -46,17 +46,19 @@ fn check(ra_fixture: &str, mut expect: Expect) {\n     let mut expansions = Vec::new();\n     for macro_call in source_file.syntax().descendants().filter_map(ast::MacroCall::cast) {\n         let macro_call = InFile::new(source.file_id, &macro_call);\n+        let mut error = None;\n         let macro_call_id = macro_call\n             .as_call_id_with_errors(\n                 &db,\n                 krate,\n                 |path| resolver.resolve_path_as_macro(&db, &path),\n-                &mut |err| panic!(\"{}\", err),\n+                &mut |err| error = Some(err),\n             )\n             .unwrap()\n             .unwrap();\n         let macro_file = MacroFile { macro_call_id };\n-        let expansion_result = db.parse_macro_expansion(macro_file);\n+        let mut expansion_result = db.parse_macro_expansion(macro_file);\n+        expansion_result.err = expansion_result.err.or(error);\n         expansions.push((macro_call.value.clone(), expansion_result));\n     }\n "}, {"sha": "1b25caa0ff1b0fc1102f5d43d5d74d4b46f0b2b7", "filename": "crates/hir_def/src/macro_expansion_tests/builtin.rs", "status": "modified", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/5f8b708aca74cb7316d2f8dfd81feae087473907/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8b708aca74cb7316d2f8dfd81feae087473907/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin.rs?ref=5f8b708aca74cb7316d2f8dfd81feae087473907", "patch": "@@ -119,3 +119,154 @@ fn main() { \"\"; }\n \"##]],\n     );\n }\n+\n+#[test]\n+fn test_assert_expand() {\n+    check(\n+        r#\"\n+#[rustc_builtin_macro]\n+macro_rules! assert {\n+    ($cond:expr) => ({ /* compiler built-in */ });\n+    ($cond:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+}\n+\n+fn main() {\n+    assert!(true, \"{} {:?}\", arg1(a, b, c), arg2);\n+}\n+\"#,\n+        expect![[r##\"\n+#[rustc_builtin_macro]\n+macro_rules! assert {\n+    ($cond:expr) => ({ /* compiler built-in */ });\n+    ($cond:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+}\n+\n+fn main() {\n+     {\n+        if !true {\n+            $crate::panic!(\"{} {:?}\", arg1(a, b, c), arg2);\n+        }\n+    };\n+}\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_compile_error_expand() {\n+    check(\n+        r#\"\n+#[rustc_builtin_macro]\n+macro_rules! compile_error {\n+    ($msg:expr) => ({ /* compiler built-in */ });\n+    ($msg:expr,) => ({ /* compiler built-in */ })\n+}\n+\n+// This expands to nothing (since it's in item position), but emits an error.\n+compile_error!(\"error!\");\n+\"#,\n+        expect![[r##\"\n+#[rustc_builtin_macro]\n+macro_rules! compile_error {\n+    ($msg:expr) => ({ /* compiler built-in */ });\n+    ($msg:expr,) => ({ /* compiler built-in */ })\n+}\n+\n+/* error: error! */\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_format_args_expand() {\n+    check(\n+        r#\"\n+#[rustc_builtin_macro]\n+macro_rules! format_args {\n+    ($fmt:expr) => ({ /* compiler built-in */ });\n+    ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+}\n+\n+fn main() {\n+    format_args!(\"{} {:?}\", arg1(a, b, c), arg2);\n+}\n+\"#,\n+        expect![[r##\"\n+#[rustc_builtin_macro]\n+macro_rules! format_args {\n+    ($fmt:expr) => ({ /* compiler built-in */ });\n+    ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+}\n+\n+fn main() {\n+    unsafe {\n+        std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(arg1(a, b, c)), std::fmt::Display::fmt), std::fmt::ArgumentV1::new(&(arg2), std::fmt::Display::fmt), ])\n+    };\n+}\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_format_args_expand_with_comma_exprs() {\n+    check(\n+        r#\"\n+#[rustc_builtin_macro]\n+macro_rules! format_args {\n+    ($fmt:expr) => ({ /* compiler built-in */ });\n+    ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+}\n+\n+fn main() {\n+    format_args!(\"{} {:?}\", a::<A,B>(), b);\n+}\n+\"#,\n+        expect![[r##\"\n+#[rustc_builtin_macro]\n+macro_rules! format_args {\n+    ($fmt:expr) => ({ /* compiler built-in */ });\n+    ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+}\n+\n+fn main() {\n+    unsafe {\n+        std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(a::<A, B>()), std::fmt::Display::fmt), std::fmt::ArgumentV1::new(&(b), std::fmt::Display::fmt), ])\n+    };\n+}\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_format_args_expand_with_broken_member_access() {\n+    check(\n+        r#\"\n+#[rustc_builtin_macro]\n+macro_rules! format_args {\n+    ($fmt:expr) => ({ /* compiler built-in */ });\n+    ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+}\n+\n+fn main() {\n+    let _ =\n+        // +errors\n+        format_args!(\"{} {:?}\", a.);\n+}\n+\"#,\n+        expect![[r##\"\n+#[rustc_builtin_macro]\n+macro_rules! format_args {\n+    ($fmt:expr) => ({ /* compiler built-in */ });\n+    ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+}\n+\n+fn main() {\n+    let _ =\n+        /* parse error: expected field name or number */\n+unsafe {\n+            std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(a.), std::fmt::Display::fmt), ])\n+        };\n+}\n+\"##]],\n+    );\n+}"}, {"sha": "f988ffff09ee3d270648f10874fbf3a1f96a90f1", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5f8b708aca74cb7316d2f8dfd81feae087473907/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f8b708aca74cb7316d2f8dfd81feae087473907/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=5f8b708aca74cb7316d2f8dfd81feae087473907", "patch": "@@ -669,88 +669,6 @@ mod tests {\n         expect.assert_eq(&expansion);\n     }\n \n-    #[test]\n-    fn test_assert_expand() {\n-        check_expansion(\n-            r#\"\n-            #[rustc_builtin_macro]\n-            macro_rules! assert {\n-                ($cond:expr) => ({ /* compiler built-in */ });\n-                ($cond:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n-            }\n-            assert!(true, \"{} {:?}\", arg1(a, b, c), arg2);\n-            \"#,\n-            expect![[r#\"{if!true{$crate::panic!(\"{} {:?}\",arg1(a,b,c),arg2);}}\"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_compile_error_expand() {\n-        check_expansion(\n-            r#\"\n-            #[rustc_builtin_macro]\n-            macro_rules! compile_error {\n-                ($msg:expr) => ({ /* compiler built-in */ });\n-                ($msg:expr,) => ({ /* compiler built-in */ })\n-            }\n-            compile_error!(\"error!\");\n-            \"#,\n-            // This expands to nothing (since it's in item position), but emits an error.\n-            expect![[\"\"]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_format_args_expand() {\n-        check_expansion(\n-            r#\"\n-            #[rustc_builtin_macro]\n-            macro_rules! format_args {\n-                ($fmt:expr) => ({ /* compiler built-in */ });\n-                ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n-            }\n-            format_args!(\"{} {:?}\", arg1(a, b, c), arg2);\n-            \"#,\n-            expect![[\n-                r#\"unsafe{std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(arg1(a,b,c)),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(arg2),std::fmt::Display::fmt),])}\"#\n-            ]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_format_args_expand_with_comma_exprs() {\n-        check_expansion(\n-            r#\"\n-            #[rustc_builtin_macro]\n-            macro_rules! format_args {\n-                ($fmt:expr) => ({ /* compiler built-in */ });\n-                ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n-            }\n-            format_args!(\"{} {:?}\", a::<A,B>(), b);\n-            \"#,\n-            expect![[\n-                r#\"unsafe{std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(a::<A,B>()),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(b),std::fmt::Display::fmt),])}\"#\n-            ]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_format_args_expand_with_broken_member_access() {\n-        check_expansion(\n-            r#\"\n-            #[rustc_builtin_macro]\n-            macro_rules! format_args {\n-                ($fmt:expr) => ({ /* compiler built-in */ });\n-                ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n-            }\n-            format_args!(\"{} {:?}\", a.);\n-            \"#,\n-            expect![[\n-                r#\"unsafe{std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(a.),std::fmt::Display::fmt),])}\"#\n-            ]],\n-        );\n-    }\n-\n     #[test]\n     fn test_include_bytes_expand() {\n         check_expansion("}]}