{"sha": "bd47e140b6f6f39743d52f72437e6eaa2bfd9de1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNDdlMTQwYjZmNmYzOTc0M2Q1MmY3MjQzN2U2ZWFhMmJmZDlkZTE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-04T14:19:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-04T14:19:09Z"}, "message": "Show GotoTypeAction for ConstParam", "tree": {"sha": "d28417cc2832a5d3126cb43b3b9800f2afb4aed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d28417cc2832a5d3126cb43b3b9800f2afb4aed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd47e140b6f6f39743d52f72437e6eaa2bfd9de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd47e140b6f6f39743d52f72437e6eaa2bfd9de1", "html_url": "https://github.com/rust-lang/rust/commit/bd47e140b6f6f39743d52f72437e6eaa2bfd9de1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd47e140b6f6f39743d52f72437e6eaa2bfd9de1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd6426afe5daaeb90c4398669bcae03a6c353658", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6426afe5daaeb90c4398669bcae03a6c353658", "html_url": "https://github.com/rust-lang/rust/commit/cd6426afe5daaeb90c4398669bcae03a6c353658"}], "stats": {"total": 109, "additions": 72, "deletions": 37}, "files": [{"sha": "a7a38d43a3bde33754c5da93e8e8a8ee621ad47e", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd47e140b6f6f39743d52f72437e6eaa2bfd9de1/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd47e140b6f6f39743d52f72437e6eaa2bfd9de1/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=bd47e140b6f6f39743d52f72437e6eaa2bfd9de1", "patch": "@@ -1343,6 +1343,12 @@ impl ConstParam {\n     pub fn parent(self, _db: &dyn HirDatabase) -> GenericDef {\n         self.id.parent.into()\n     }\n+\n+    pub fn ty(self, db: &dyn HirDatabase) -> Type {\n+        let def = self.id.parent;\n+        let krate = def.module(db.upcast()).krate;\n+        Type::new(db, krate, def, db.const_param_ty(self.id))\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "932279a06395a8439b22e9a84f7a4a1c7c959069", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 66, "deletions": 37, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/bd47e140b6f6f39743d52f72437e6eaa2bfd9de1/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd47e140b6f6f39743d52f72437e6eaa2bfd9de1/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=bd47e140b6f6f39743d52f72437e6eaa2bfd9de1", "patch": "@@ -228,45 +228,41 @@ fn runnable_action(\n }\n \n fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n-    match def {\n-        Definition::Local(it) => {\n-            let mut targets: Vec<ModuleDef> = Vec::new();\n-            let mut push_new_def = |item: ModuleDef| {\n-                if !targets.contains(&item) {\n-                    targets.push(item);\n-                }\n-            };\n+    let ty = match def {\n+        Definition::Local(it) => it.ty(db),\n+        Definition::ConstParam(it) => it.ty(db),\n+        _ => return None,\n+    };\n+    let mut targets: Vec<ModuleDef> = Vec::new();\n+    let mut push_new_def = |item: ModuleDef| {\n+        if !targets.contains(&item) {\n+            targets.push(item);\n+        }\n+    };\n \n-            it.ty(db).walk(db, |t| {\n-                if let Some(adt) = t.as_adt() {\n-                    push_new_def(adt.into());\n-                } else if let Some(trait_) = t.as_dyn_trait() {\n-                    push_new_def(trait_.into());\n-                } else if let Some(traits) = t.as_impl_traits(db) {\n-                    traits.into_iter().for_each(|it| push_new_def(it.into()));\n-                } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n-                    push_new_def(trait_.into());\n-                }\n-            });\n-\n-            let targets = targets\n-                .into_iter()\n-                .filter_map(|it| {\n-                    Some(HoverGotoTypeData {\n-                        mod_path: render_path(\n-                            db,\n-                            it.module(db)?,\n-                            it.name(db).map(|name| name.to_string()),\n-                        ),\n-                        nav: it.try_to_nav(db)?,\n-                    })\n-                })\n-                .collect();\n-\n-            Some(HoverAction::GoToType(targets))\n+    ty.walk(db, |t| {\n+        if let Some(adt) = t.as_adt() {\n+            push_new_def(adt.into());\n+        } else if let Some(trait_) = t.as_dyn_trait() {\n+            push_new_def(trait_.into());\n+        } else if let Some(traits) = t.as_impl_traits(db) {\n+            traits.into_iter().for_each(|it| push_new_def(it.into()));\n+        } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n+            push_new_def(trait_.into());\n         }\n-        _ => None,\n-    }\n+    });\n+\n+    let targets = targets\n+        .into_iter()\n+        .filter_map(|it| {\n+            Some(HoverGotoTypeData {\n+                mod_path: render_path(db, it.module(db)?, it.name(db).map(|name| name.to_string())),\n+                nav: it.try_to_nav(db)?,\n+            })\n+        })\n+        .collect();\n+\n+    Some(HoverAction::GoToType(targets))\n }\n \n fn hover_markup(\n@@ -3083,6 +3079,39 @@ fn main() { let s<|>t = test().get(); }\n         );\n     }\n \n+    #[test]\n+    fn test_hover_const_param_has_goto_type_action() {\n+        check_actions(\n+            r#\"\n+struct Bar;\n+struct Foo<const BAR: Bar>;\n+\n+impl<const BAR: Bar> Foo<BAR<|>> {} \n+\"#,\n+            expect![[r#\"\n+                [\n+                    GoToType(\n+                        [\n+                            HoverGotoTypeData {\n+                                mod_path: \"test::Bar\",\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        0,\n+                                    ),\n+                                    full_range: 0..11,\n+                                    focus_range: 7..10,\n+                                    name: \"Bar\",\n+                                    kind: Struct,\n+                                    description: \"struct Bar\",\n+                                },\n+                            },\n+                        ],\n+                    ),\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn hover_displays_normalized_crate_names() {\n         check("}]}