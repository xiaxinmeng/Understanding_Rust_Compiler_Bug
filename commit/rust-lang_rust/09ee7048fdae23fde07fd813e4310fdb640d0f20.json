{"sha": "09ee7048fdae23fde07fd813e4310fdb640d0f20", "node_id": "C_kwDOAAsO6NoAKDA5ZWU3MDQ4ZmRhZTIzZmRlMDdmZDgxM2U0MzEwZmRiNjQwZDBmMjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-24T07:53:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-24T07:53:48Z"}, "message": "Rollup merge of #106100 - scottmcm:derived-less-than-test, r=compiler-errors\n\nCodegen test for derived `<` on trivial newtype [TEST ONLY]\n\nI originally wrote this for #106065, but the libcore changes there aren't necessarily a win.\n\nSo I pulled out this test to be its own PR since it's important (see https://github.com/rust-lang/rust/pull/105840#discussion_r1056030324) and well-intentioned changes to core or the derive could accidentally break it without that being obvious (other than by massive unexplained perf changes).", "tree": {"sha": "0d6ea4e4ce287d50b3fdd4eb95ff8c9f7270c7c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d6ea4e4ce287d50b3fdd4eb95ff8c9f7270c7c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09ee7048fdae23fde07fd813e4310fdb640d0f20", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjprAMCRBK7hj4Ov3rIwAAyLwIAA7s7IZRNxB1jd3rJsuYOJdj\nogkGaqZ3xyw3CxUjoF9HWg+sX9caNmXU6lOFwJdfD9BFKXiUZUTPsobk5C7TbniW\ni1+IjIwHsxXrR8z7i1RagCOnsABq0BL/mxnzUeazZZW3GCoeLnZAksM2l1CQVWBj\nX1twwhI01uaIQ8AFmmGUnsTQ6m7mmVxwLHH06koZh1LubsxzOz78hY1Ds7L7izpn\nphzwr72GTWy3TpjtrC9aonKgU85Tj5gqcm+9Uz3Tdg9fsW44S2WMEVbql9ZUPQz+\ng7Q/jpM1PCifk7dtpBBVUHkPWsAlL12tBIlMOt24uX38rkNRMuEkRrjzrAtZCTI=\n=Rlmr\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d6ea4e4ce287d50b3fdd4eb95ff8c9f7270c7c3\nparent edb2b71fdb2e4905aaf501b972680ad0930144c9\nparent 4cb7bd36d7809d656d585656b9002b12d6d40e4f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671868428 +0100\ncommitter GitHub <noreply@github.com> 1671868428 +0100\n\nRollup merge of #106100 - scottmcm:derived-less-than-test, r=compiler-errors\n\nCodegen test for derived `<` on trivial newtype [TEST ONLY]\n\nI originally wrote this for #106065, but the libcore changes there aren't necessarily a win.\n\nSo I pulled out this test to be its own PR since it's important (see https://github.com/rust-lang/rust/pull/105840#discussion_r1056030324) and well-intentioned changes to core or the derive could accidentally break it without that being obvious (other than by massive unexplained perf changes).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09ee7048fdae23fde07fd813e4310fdb640d0f20", "html_url": "https://github.com/rust-lang/rust/commit/09ee7048fdae23fde07fd813e4310fdb640d0f20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09ee7048fdae23fde07fd813e4310fdb640d0f20/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edb2b71fdb2e4905aaf501b972680ad0930144c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb2b71fdb2e4905aaf501b972680ad0930144c9", "html_url": "https://github.com/rust-lang/rust/commit/edb2b71fdb2e4905aaf501b972680ad0930144c9"}, {"sha": "4cb7bd36d7809d656d585656b9002b12d6d40e4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb7bd36d7809d656d585656b9002b12d6d40e4f", "html_url": "https://github.com/rust-lang/rust/commit/4cb7bd36d7809d656d585656b9002b12d6d40e4f"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "5cf6c3ac0a2333f55db87a00349ae93ae0ee9fef", "filename": "src/test/codegen/comparison-operators-newtype.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/09ee7048fdae23fde07fd813e4310fdb640d0f20/src%2Ftest%2Fcodegen%2Fcomparison-operators-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09ee7048fdae23fde07fd813e4310fdb640d0f20/src%2Ftest%2Fcodegen%2Fcomparison-operators-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcomparison-operators-newtype.rs?ref=09ee7048fdae23fde07fd813e4310fdb640d0f20", "patch": "@@ -0,0 +1,49 @@\n+// The `derive(PartialOrd)` for a newtype doesn't override `lt`/`le`/`gt`/`ge`.\n+// This double-checks that the `Option<Ordering>` intermediate values used\n+// in the operators for such a type all optimize away.\n+\n+// compile-flags: -C opt-level=1\n+// min-llvm-version: 15.0\n+\n+#![crate_type = \"lib\"]\n+\n+use std::cmp::Ordering;\n+\n+#[derive(PartialOrd, PartialEq)]\n+pub struct Foo(u16);\n+\n+// CHECK-LABEL: @check_lt\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_lt(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp ult i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a < b\n+}\n+\n+// CHECK-LABEL: @check_le\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_le(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp ule i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a <= b\n+}\n+\n+// CHECK-LABEL: @check_gt\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_gt(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp ugt i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a > b\n+}\n+\n+// CHECK-LABEL: @check_ge\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_ge(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp uge i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a >= b\n+}"}]}