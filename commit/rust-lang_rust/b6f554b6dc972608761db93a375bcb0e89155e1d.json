{"sha": "b6f554b6dc972608761db93a375bcb0e89155e1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZjU1NGI2ZGM5NzI2MDg3NjFkYjkzYTM3NWJjYjBlODkxNTVlMWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-22T21:36:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-28T15:06:52Z"}, "message": "std: Mark allocation functions as nounwind\n\nThis commit flags all allocation-related functions in liballoc as \"this can't\nunwind\" which should largely resolve the size-related issues found on #42808.\nThe documentation on the trait was updated with such a restriction (they can't\npanic) as well as some other words about the relative instability about\nimplementing a bullet-proof allocator.\n\nCloses #42808", "tree": {"sha": "4543e921c025346532151af3a5ec8ae5b8666447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4543e921c025346532151af3a5ec8ae5b8666447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6f554b6dc972608761db93a375bcb0e89155e1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f554b6dc972608761db93a375bcb0e89155e1d", "html_url": "https://github.com/rust-lang/rust/commit/b6f554b6dc972608761db93a375bcb0e89155e1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6f554b6dc972608761db93a375bcb0e89155e1d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "url": "https://api.github.com/repos/rust-lang/rust/commits/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "html_url": "https://github.com/rust-lang/rust/commit/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "c71770290119a69f9204ed79d256a6687bb4b6ea", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b6f554b6dc972608761db93a375bcb0e89155e1d/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f554b6dc972608761db93a375bcb0e89155e1d/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=b6f554b6dc972608761db93a375bcb0e89155e1d", "patch": "@@ -464,6 +464,29 @@ impl fmt::Display for CannotReallocInPlace {\n ///  * if a layout `k` fits a memory block (denoted by `ptr`)\n ///    currently allocated via an allocator `a`, then it is legal to\n ///    use that layout to deallocate it, i.e. `a.dealloc(ptr, k);`.\n+///\n+/// # Unsafety\n+///\n+/// The `Alloc` trait is an `unsafe` trait for a number of reasons, and\n+/// implementors must ensure that they adhere to these contracts:\n+///\n+/// * Pointers returned from allocation functions must point to valid memory and\n+///   retain their validity until at least the instance of `Alloc` is dropped\n+///   itself.\n+///\n+/// * It's undefined behavior if global allocators unwind.  This restriction may\n+///   be lifted in the future, but currently a panic from any of these\n+///   functions may lead to memory unsafety. Note that as of the time of this\n+///   writing allocators *not* intending to be global allocators can still panic\n+///   in their implementation without violating memory safety.\n+///\n+/// * `Layout` queries and calculations in general must be correct. Callers of\n+///   this trait are allowed to rely on the contracts defined on each method,\n+///   and implementors must ensure such contracts remain true.\n+///\n+/// Note that this list may get tweaked over time as clarifications are made in\n+/// the future. Additionally global allocators may gain unique requirements for\n+/// how to safely implement one in the future as well.\n pub unsafe trait Alloc {\n \n     // (Note: existing allocators have unspecified but well-defined"}, {"sha": "b2bd9d7d8fafadf9006240a698d0609f0f6a0bd5", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6f554b6dc972608761db93a375bcb0e89155e1d/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f554b6dc972608761db93a375bcb0e89155e1d/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=b6f554b6dc972608761db93a375bcb0e89155e1d", "patch": "@@ -27,36 +27,46 @@ pub mod __core {\n \n extern \"Rust\" {\n     #[allocator]\n+    #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize, err: *mut u8) -> *mut u8;\n     #[cold]\n+    #[rustc_allocator_nounwind]\n     fn __rust_oom(err: *const u8) -> !;\n+    #[rustc_allocator_nounwind]\n     fn __rust_dealloc(ptr: *mut u8, size: usize, align: usize);\n+    #[rustc_allocator_nounwind]\n     fn __rust_usable_size(layout: *const u8,\n                           min: *mut usize,\n                           max: *mut usize);\n+    #[rustc_allocator_nounwind]\n     fn __rust_realloc(ptr: *mut u8,\n                       old_size: usize,\n                       old_align: usize,\n                       new_size: usize,\n                       new_align: usize,\n                       err: *mut u8) -> *mut u8;\n+    #[rustc_allocator_nounwind]\n     fn __rust_alloc_zeroed(size: usize, align: usize, err: *mut u8) -> *mut u8;\n+    #[rustc_allocator_nounwind]\n     fn __rust_alloc_excess(size: usize,\n                            align: usize,\n                            excess: *mut usize,\n                            err: *mut u8) -> *mut u8;\n+    #[rustc_allocator_nounwind]\n     fn __rust_realloc_excess(ptr: *mut u8,\n                              old_size: usize,\n                              old_align: usize,\n                              new_size: usize,\n                              new_align: usize,\n                              excess: *mut usize,\n                              err: *mut u8) -> *mut u8;\n+    #[rustc_allocator_nounwind]\n     fn __rust_grow_in_place(ptr: *mut u8,\n                             old_size: usize,\n                             old_align: usize,\n                             new_size: usize,\n                             new_align: usize) -> u8;\n+    #[rustc_allocator_nounwind]\n     fn __rust_shrink_in_place(ptr: *mut u8,\n                               old_size: usize,\n                               old_align: usize,"}, {"sha": "66928e9a480ed51e2e436fb990bfd27a990518e3", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6f554b6dc972608761db93a375bcb0e89155e1d/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f554b6dc972608761db93a375bcb0e89155e1d/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=b6f554b6dc972608761db93a375bcb0e89155e1d", "patch": "@@ -107,6 +107,7 @@\n #![feature(pattern)]\n #![feature(placement_in_syntax)]\n #![feature(placement_new_protocol)]\n+#![feature(rustc_attrs)]\n #![feature(shared)]\n #![feature(slice_get_slice)]\n #![feature(slice_patterns)]"}, {"sha": "b6ca1460a7d0ac9df44378709e3783aaa35f63d8", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6f554b6dc972608761db93a375bcb0e89155e1d/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f554b6dc972608761db93a375bcb0e89155e1d/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=b6f554b6dc972608761db93a375bcb0e89155e1d", "patch": "@@ -119,6 +119,8 @@ pub fn from_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRe\n                 llvm::AttributePlace::ReturnValue(), llfn);\n         } else if attr.check_name(\"unwind\") {\n             unwind(llfn, true);\n+        } else if attr.check_name(\"rustc_allocator_nounwind\") {\n+            unwind(llfn, false);\n         }\n     }\n     if !target_features.is_empty() {"}, {"sha": "551b66e103a11cab1097f9d3843d4a3ab469fe71", "filename": "src/test/codegen/dealloc-no-unwind.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b6f554b6dc972608761db93a375bcb0e89155e1d/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f554b6dc972608761db93a375bcb0e89155e1d/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdealloc-no-unwind.rs?ref=b6f554b6dc972608761db93a375bcb0e89155e1d", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// no-system-llvm\n+// compile-flags: -O\n+\n+#![crate_type=\"lib\"]\n+\n+struct A;\n+\n+impl Drop for A {\n+    fn drop(&mut self) {\n+        extern { fn foo(); }\n+        unsafe { foo(); }\n+    }\n+}\n+\n+#[no_mangle]\n+pub fn a(a: Box<i32>) {\n+    // CHECK-LABEL: define void @a\n+    // CHECK: call void @__rust_dealloc\n+    // CHECK-NEXT: call void @foo\n+    let _a = A;\n+    drop(a);\n+}"}]}