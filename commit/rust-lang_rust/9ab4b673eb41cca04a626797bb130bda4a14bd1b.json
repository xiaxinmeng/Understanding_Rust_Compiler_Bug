{"sha": "9ab4b673eb41cca04a626797bb130bda4a14bd1b", "node_id": "C_kwDOAAsO6NoAKDlhYjRiNjczZWI0MWNjYTA0YTYyNjc5N2JiMTMwYmRhNGExNGJkMWI", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-09-07T09:18:27Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:11Z"}, "message": "Simplifying `next_pos` init", "tree": {"sha": "4b42c90de223269c38ab67d6a1a70465d551e5bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b42c90de223269c38ab67d6a1a70465d551e5bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab4b673eb41cca04a626797bb130bda4a14bd1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab4b673eb41cca04a626797bb130bda4a14bd1b", "html_url": "https://github.com/rust-lang/rust/commit/9ab4b673eb41cca04a626797bb130bda4a14bd1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab4b673eb41cca04a626797bb130bda4a14bd1b/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24aba2c1a8663c2ddebdae740689f8a7bdcadb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e24aba2c1a8663c2ddebdae740689f8a7bdcadb7", "html_url": "https://github.com/rust-lang/rust/commit/e24aba2c1a8663c2ddebdae740689f8a7bdcadb7"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "b38b8e44f1c679e5ca45455df7571928f480149b", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ab4b673eb41cca04a626797bb130bda4a14bd1b/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab4b673eb41cca04a626797bb130bda4a14bd1b/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=9ab4b673eb41cca04a626797bb130bda4a14bd1b", "patch": "@@ -164,7 +164,7 @@ fn get_closure_suggestion<'tcx>(\n     let mut visitor = DerefDelegate {\n         cx,\n         closure_span: search_arg.span,\n-        next_pos: None,\n+        next_pos: search_arg.span.lo(),\n         suggestion_start: String::new(),\n         suggestion_end: String::new(),\n         applicability: Applicability::MachineApplicable,\n@@ -186,7 +186,7 @@ fn get_closure_suggestion<'tcx>(\n struct DerefDelegate<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     closure_span: Span,\n-    next_pos: Option<BytePos>,\n+    next_pos: BytePos,\n     suggestion_start: String,\n     suggestion_end: String,\n     applicability: Applicability,\n@@ -200,11 +200,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n             let map = self.cx.tcx.hir();\n             let ident_str = map.name(id).to_string();\n             let span = map.span(cmt.hir_id);\n-            let start_span = if let Some(next_pos) = self.next_pos {\n-                Span::new(next_pos, span.lo(), span.ctxt())\n-            } else {\n-                self.closure_span.until(span)\n-            };\n+            let start_span = Span::new(self.next_pos, span.lo(), span.ctxt());\n             let start_snip = snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n             let end_span = Span::new(span.hi(), self.closure_span.hi(), span.ctxt());\n             let end_snip = snippet_with_applicability(self.cx, end_span, \"..\", &mut self.applicability);\n@@ -224,17 +220,13 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                             for arg in &args_to_handle {\n                                 let arg_ty_kind = self.cx.typeck_results().expr_ty(arg).kind();\n                                 if matches!(arg_ty_kind, ty::Ref(_, _, Mutability::Not)) {\n-                                    let start_span = if let Some(next_pos) = self.next_pos {\n-                                        Span::new(next_pos, span.lo(), span.ctxt())\n-                                    } else {\n-                                        self.closure_span.until(span)\n-                                    };\n+                                    let start_span = Span::new(self.next_pos, span.lo(), span.ctxt());\n                                     let start_snip =\n                                         snippet_with_applicability(self.cx, start_span, \"..\", &mut self.applicability);\n \n                                     self.suggestion_start.push_str(&format!(\"{}&{}\", start_snip, ident_str));\n                                     self.suggestion_end = end_snip.to_string();\n-                                    self.next_pos = Some(span.hi());\n+                                    self.next_pos = span.hi();\n                                 } else {\n                                     self.applicability = Applicability::Unspecified;\n                                 }\n@@ -268,7 +260,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                     .push_str(&format!(\"{}{}\", start_snip, replacement_str));\n                 self.suggestion_end = end_snip.to_string();\n             }\n-            self.next_pos = Some(span.hi());\n+            self.next_pos = span.hi();\n         }\n     }\n "}]}