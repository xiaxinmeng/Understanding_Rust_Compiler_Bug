{"sha": "644818351b95c7a50eb05d73164cc6f4480ce9e7", "node_id": "C_kwDOAAsO6NoAKDY0NDgxODM1MWI5NWM3YTUwZWIwNWQ3MzE2NGNjNmY0NDgwY2U5ZTc", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2023-05-20T23:34:31Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2023-05-20T23:34:31Z"}, "message": "ensure !Unpin types do not get noalias", "tree": {"sha": "e025671639258e2e8736786cf16ad84c24632cb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e025671639258e2e8736786cf16ad84c24632cb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644818351b95c7a50eb05d73164cc6f4480ce9e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644818351b95c7a50eb05d73164cc6f4480ce9e7", "html_url": "https://github.com/rust-lang/rust/commit/644818351b95c7a50eb05d73164cc6f4480ce9e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644818351b95c7a50eb05d73164cc6f4480ce9e7/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47444d7c2559f4a82ec2d5ca65d86ad795e48aef", "url": "https://api.github.com/repos/rust-lang/rust/commits/47444d7c2559f4a82ec2d5ca65d86ad795e48aef", "html_url": "https://github.com/rust-lang/rust/commit/47444d7c2559f4a82ec2d5ca65d86ad795e48aef"}], "stats": {"total": 78, "additions": 42, "deletions": 36}, "files": [{"sha": "15c19104616665d893436ab3b73b9f0c2644d88a", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/644818351b95c7a50eb05d73164cc6f4480ce9e7/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644818351b95c7a50eb05d73164cc6f4480ce9e7/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=644818351b95c7a50eb05d73164cc6f4480ce9e7", "patch": "@@ -238,7 +238,7 @@ fn adjust_for_rust_scalar<'tcx>(\n     layout: TyAndLayout<'tcx>,\n     offset: Size,\n     is_return: bool,\n-    is_drop_target: bool,\n+    drop_target_pointee: Option<Ty<'tcx>>,\n ) {\n     // Booleans are always a noundef i1 that needs to be zero-extended.\n     if scalar.is_bool() {\n@@ -252,14 +252,24 @@ fn adjust_for_rust_scalar<'tcx>(\n     }\n \n     // Only pointer types handled below.\n-    let Scalar::Initialized { value: Pointer(_), valid_range} = scalar else { return };\n+    let Scalar::Initialized { value: Pointer(_), valid_range } = scalar else { return };\n \n-    if !valid_range.contains(0) {\n+    // Set `nonnull` if the validity range excludes zero, or for the argument to `drop_in_place`,\n+    // which must be nonnull per its documented safety requirements.\n+    if !valid_range.contains(0) || drop_target_pointee.is_some() {\n         attrs.set(ArgAttribute::NonNull);\n     }\n \n     if let Some(pointee) = layout.pointee_info_at(&cx, offset) {\n-        if let Some(kind) = pointee.safe {\n+        let kind = if let Some(kind) = pointee.safe {\n+            Some(kind)\n+        } else if let Some(pointee) = drop_target_pointee {\n+            // The argument to `drop_in_place` is semantically equivalent to a mutable reference.\n+            Some(PointerKind::MutableRef { unpin: pointee.is_unpin(cx.tcx, cx.param_env()) })\n+        } else {\n+            None\n+        };\n+        if let Some(kind) = kind {\n             attrs.pointee_align = Some(pointee.align);\n \n             // `Box` are not necessarily dereferenceable for the entire duration of the function as\n@@ -307,18 +317,6 @@ fn adjust_for_rust_scalar<'tcx>(\n                 attrs.set(ArgAttribute::ReadOnly);\n             }\n         }\n-\n-        // If this is the argument to `drop_in_place`, the contents of which we fully control as the\n-        // compiler, then we mark this argument as `noalias`, aligned, and dereferenceable. (The\n-        // standard library documents the necessary requirements to uphold these attributes for code\n-        // that calls this method directly.) This can enable better optimizations, such as argument\n-        // promotion.\n-        if is_drop_target {\n-            attrs.set(ArgAttribute::NoAlias);\n-            attrs.set(ArgAttribute::NonNull);\n-            attrs.pointee_size = pointee.size;\n-            attrs.pointee_align = Some(pointee.align);\n-        }\n     }\n }\n \n@@ -383,6 +381,10 @@ fn fn_abi_new_uncached<'tcx>(\n         let _entered = span.enter();\n         let is_return = arg_idx.is_none();\n         let is_drop_target = is_drop_in_place && arg_idx == Some(0);\n+        let drop_target_pointee = is_drop_target.then(|| match ty.kind() {\n+            ty::RawPtr(ty::TypeAndMut { ty, .. }) => *ty,\n+            _ => bug!(\"argument to drop_in_place is not a raw ptr: {:?}\", ty),\n+        });\n \n         let layout = cx.layout_of(ty)?;\n         let layout = if force_thin_self_ptr && arg_idx == Some(0) {\n@@ -403,7 +405,7 @@ fn fn_abi_new_uncached<'tcx>(\n                 *layout,\n                 offset,\n                 is_return,\n-                is_drop_target,\n+                drop_target_pointee,\n             );\n             attrs\n         });"}, {"sha": "74d40c13c4c7381653172b7345513a011b0eb861", "filename": "tests/codegen/drop-in-place-noalias.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/644818351b95c7a50eb05d73164cc6f4480ce9e7/tests%2Fcodegen%2Fdrop-in-place-noalias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644818351b95c7a50eb05d73164cc6f4480ce9e7/tests%2Fcodegen%2Fdrop-in-place-noalias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fdrop-in-place-noalias.rs?ref=644818351b95c7a50eb05d73164cc6f4480ce9e7", "patch": "@@ -1,34 +1,38 @@\n-// Tests that the compiler can mark `drop_in_place` as `noalias` when safe to do so.\n+// compile-flags: -C no-prepopulate-passes\n+\n+// Tests that the compiler can apply `noalias` and other &mut attributes to `drop_in_place`.\n+// Note that non-Unpin types should not get `noalias`, matching &mut behavior.\n \n #![crate_type=\"lib\"]\n \n-use std::hint::black_box;\n+use std::marker::PhantomPinned;\n+\n+// CHECK: define internal void @{{.*}}core{{.*}}ptr{{.*}}drop_in_place{{.*}}StructUnpin{{.*}}({{.*\\*|ptr}} noalias noundef align 4 dereferenceable(12) %{{.+}})\n \n-// CHECK: define{{.*}}core{{.*}}ptr{{.*}}drop_in_place{{.*}}Foo{{.*}}({{.*}}noalias {{.*}} align 4 dereferenceable(12){{.*}})\n+// CHECK: define internal void @{{.*}}core{{.*}}ptr{{.*}}drop_in_place{{.*}}StructNotUnpin{{.*}}({{.*\\*|ptr}} noundef nonnull align 4 %{{.+}})\n \n-#[repr(C)]\n-pub struct Foo {\n+pub struct StructUnpin {\n     a: i32,\n     b: i32,\n     c: i32,\n }\n \n-impl Drop for Foo {\n-    #[inline(never)]\n-    fn drop(&mut self) {\n-        black_box(self.a);\n-    }\n+impl Drop for StructUnpin {\n+    fn drop(&mut self) {}\n+}\n+\n+pub struct StructNotUnpin {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    p: PhantomPinned,\n }\n \n-extern {\n-    fn bar();\n-    fn baz(foo: Foo);\n+impl Drop for StructNotUnpin {\n+    fn drop(&mut self) {}\n }\n \n-pub fn haha() {\n-    let foo = Foo { a: 1, b: 2, c: 3 };\n-    unsafe {\n-        bar();\n-        baz(foo);\n-    }\n+pub unsafe fn main(x: StructUnpin, y: StructNotUnpin) {\n+    drop(x);\n+    drop(y);\n }"}]}