{"sha": "e1279a0b30a6a36822ecf7c7cc683953e1239745", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMjc5YTBiMzBhNmEzNjgyMmVjZjdjN2NjNjgzOTUzZTEyMzk3NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-01T09:56:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-01T09:56:18Z"}, "message": "Auto merge of #38726 - japaric:sparc64, r=sanxiyn\n\nsparc64-linux support\n\nThis is built on top of #38656 and depends on rust-lang/libc#483\n\nHello world works.\n\nThe libc-test test suite passes.\n\n`panic!` doesn't fully work:\n\n```\n$ qemu-sparc64-static ./panic\nthread 'main' panicked at 'explicit panic', panic.rs:1\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nIllegal instruction (core dumped)\n```\n\nBacktraces don't work either, probably related to the previous point:\n\n```\n$ export RUST_BACKTRACE=1\n$ qemu-sparc64-static ./panic\nthread 'main' panicked at 'explicit panic', panic.rs:1\nstack backtrace:\nIllegal instruction (core dumped)\n```\n\nr? @alexcrichton\n\n@jakllsch Does panicking / backtraces work on sparc64-netbsd?\n\ncc @glaubitz", "tree": {"sha": "39c4f3349ee7128c7d9e546b1a93eb05326fa913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39c4f3349ee7128c7d9e546b1a93eb05326fa913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1279a0b30a6a36822ecf7c7cc683953e1239745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1279a0b30a6a36822ecf7c7cc683953e1239745", "html_url": "https://github.com/rust-lang/rust/commit/e1279a0b30a6a36822ecf7c7cc683953e1239745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1279a0b30a6a36822ecf7c7cc683953e1239745/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e227433dc39ab13aa2368814169c049b8f876825", "url": "https://api.github.com/repos/rust-lang/rust/commits/e227433dc39ab13aa2368814169c049b8f876825", "html_url": "https://github.com/rust-lang/rust/commit/e227433dc39ab13aa2368814169c049b8f876825"}, {"sha": "b14785d3d0e3093983f6d6e266b754e1b536da10", "url": "https://api.github.com/repos/rust-lang/rust/commits/b14785d3d0e3093983f6d6e266b754e1b536da10", "html_url": "https://github.com/rust-lang/rust/commit/b14785d3d0e3093983f6d6e266b754e1b536da10"}], "stats": {"total": 303, "additions": 291, "deletions": 12}, "files": [{"sha": "beb0a9d43a0cf4cd87b2a48da157c64e5589cbfc", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/configure", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -1822,7 +1822,7 @@ do\n         CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n     fi\n \n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGETS_TO_BUILD='X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430'\"\n+    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGETS_TO_BUILD='X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc'\"\n     CMAKE_ARGS=\"$CMAKE_ARGS -G '$CFG_CMAKE_GENERATOR'\"\n     CMAKE_ARGS=\"$CMAKE_ARGS $CFG_LLVM_SRC_DIR\"\n "}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/sparc64-unknown-linux-gnu.mk", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/mk%2Fcfg%2Fsparc64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/mk%2Fcfg%2Fsparc64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fsparc64-unknown-linux-gnu.mk?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -0,0 +1 @@\n+# rustbuild-only target"}, {"sha": "a2b01ba0537c7f78ff72eb87b01e7df996530b1a", "filename": "mk/cfg/sparc64-unknown-netbsd.mk", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/mk%2Fcfg%2Fsparc64-unknown-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/mk%2Fcfg%2Fsparc64-unknown-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fsparc64-unknown-netbsd.mk?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -0,0 +1,3 @@\n+# This file is intentially left empty to indicate that, while this target is\n+# supported, it's not supported using plain GNU Make builds. Use a --rustbuild\n+# instead."}, {"sha": "2c646450d018e013adbf4982e6a5026bec3721f0", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -285,7 +285,7 @@ endif\n # LLVM macros\n ######################################################################\n \n-LLVM_OPTIONAL_COMPONENTS=x86 arm aarch64 mips powerpc pnacl systemz jsbackend msp430\n+LLVM_OPTIONAL_COMPONENTS=x86 arm aarch64 mips powerpc pnacl systemz jsbackend msp430 sparc\n LLVM_REQUIRED_COMPONENTS=ipo bitreader bitwriter linker asmparser mcjit \\\n                 interpreter instrumentation\n "}, {"sha": "1edcb0b1f24ded01964c8fc3166e572136727372", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -151,6 +151,12 @@ fn main() {\n     cmd.arg(format!(\"--host={}\", build_helper::gnu_target(&target)));\n     cmd.arg(format!(\"--build={}\", build_helper::gnu_target(&host)));\n \n+    // for some reason, jemalloc configure doesn't detect this value\n+    // automatically for this target\n+    if target == \"sparc64-unknown-linux-gnu\" {\n+        cmd.arg(\"--with-lg-quantum=4\");\n+    }\n+\n     run(&mut cmd);\n     let mut make = Command::new(build_helper::make(&host));\n     make.current_dir(&build_dir)"}, {"sha": "f2df393ad777f08db39ecaab8566e1c61adceacd", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -84,7 +84,8 @@ mod imp {\n                   target_arch = \"aarch64\",\n                   target_arch = \"powerpc64\",\n                   target_arch = \"mips64\",\n-                  target_arch = \"s390x\")))]\n+                  target_arch = \"s390x\",\n+                  target_arch = \"sparc64\")))]\n     const MIN_ALIGN: usize = 16;\n \n     // MALLOCX_ALIGN(a) macro"}, {"sha": "5f0b637656b7df486821cee1a02d0c576beb223d", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -35,7 +35,8 @@ const MIN_ALIGN: usize = 8;\n #[cfg(all(any(target_arch = \"x86_64\",\n               target_arch = \"aarch64\",\n               target_arch = \"mips64\",\n-              target_arch = \"s390x\")))]\n+              target_arch = \"s390x\",\n+              target_arch = \"sparc64\")))]\n const MIN_ALIGN: usize = 16;\n \n #[no_mangle]"}, {"sha": "98589876259e19f13eab81b033ced95bbb6deca0", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -1 +1 @@\n-Subproject commit e49e9bb7c3d9c7f2fd893f0ee0db81617b8db21f\n+Subproject commit 98589876259e19f13eab81b033ced95bbb6deca0"}, {"sha": "e8b3a9a42c292033dc4889f7b5c6e562f687abea", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -133,6 +133,9 @@ const UNWIND_DATA_REG: (i32, i32) = (3, 4); // R3, R4 / X3, X4\n #[cfg(target_arch = \"s390x\")]\n const UNWIND_DATA_REG: (i32, i32) = (6, 7); // R6, R7\n \n+#[cfg(target_arch = \"sparc64\")]\n+const UNWIND_DATA_REG: (i32, i32) = (24, 25); // I0, I1\n+\n // The following code is based on GCC's C and C++ personality routines.  For reference, see:\n // https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/eh_personality.cc\n // https://github.com/gcc-mirror/gcc/blob/trunk/libgcc/unwind-c.c"}, {"sha": "5afa85d155279e17a905edf5885a32d677209914", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -158,6 +158,8 @@ supported_targets! {\n     (\"mips-unknown-linux-uclibc\", mips_unknown_linux_uclibc),\n     (\"mipsel-unknown-linux-uclibc\", mipsel_unknown_linux_uclibc),\n \n+    (\"sparc64-unknown-linux-gnu\", sparc64_unknown_linux_gnu),\n+\n     (\"i686-linux-android\", i686_linux_android),\n     (\"arm-linux-androideabi\", arm_linux_androideabi),\n     (\"armv7-linux-androideabi\", armv7_linux_androideabi),\n@@ -174,6 +176,7 @@ supported_targets! {\n     (\"i686-unknown-openbsd\", i686_unknown_openbsd),\n     (\"x86_64-unknown-openbsd\", x86_64_unknown_openbsd),\n \n+    (\"sparc64-unknown-netbsd\", sparc64_unknown_netbsd),\n     (\"x86_64-unknown-netbsd\", x86_64_unknown_netbsd),\n     (\"x86_64-rumprun-netbsd\", x86_64_rumprun_netbsd),\n "}, {"sha": "f627cc18f0b3d709dbdd513e0ad3de4fba6e2b43", "filename": "src/librustc_back/target/sparc64_unknown_linux_gnu.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_linux_gnu.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::linux_base::opts();\n+    base.cpu = \"v9\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.exe_allocation_crate = \"alloc_system\".to_string();\n+\n+    Ok(Target {\n+        llvm_target: \"sparc64-unknown-linux-gnu\".to_string(),\n+        target_endian: \"big\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n+        arch: \"sparc64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    })\n+}"}, {"sha": "f30cebbc2d5a7e91c292eb875d10919794056b9f", "filename": "src/librustc_back/target/sparc64_unknown_netbsd.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fsparc64_unknown_netbsd.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::netbsd_base::opts();\n+    base.cpu = \"v9\".to_string();\n+    base.pre_link_args.push(\"-m64\".to_string());\n+    base.max_atomic_width = Some(64);\n+\n+    Ok(Target {\n+        llvm_target: \"sparc64-unknown-netbsd\".to_string(),\n+        target_endian: \"big\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n+        arch: \"sparc64\".to_string(),\n+        target_os: \"netbsd\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    })\n+}"}, {"sha": "b3eec5d66c4683c9dac02d81f6216200e20810b9", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -25,6 +25,7 @@ use cabi_mips64;\n use cabi_asmjs;\n use cabi_msp430;\n use cabi_sparc;\n+use cabi_sparc64;\n use cabi_nvptx;\n use cabi_nvptx64;\n use machine::{llalign_of_min, llsize_of, llsize_of_alloc};\n@@ -614,6 +615,7 @@ impl FnType {\n             \"wasm32\" => cabi_asmjs::compute_abi_info(ccx, self),\n             \"msp430\" => cabi_msp430::compute_abi_info(ccx, self),\n             \"sparc\" => cabi_sparc::compute_abi_info(ccx, self),\n+            \"sparc64\" => cabi_sparc64::compute_abi_info(ccx, self),\n             \"nvptx\" => cabi_nvptx::compute_abi_info(ccx, self),\n             \"nvptx64\" => cabi_nvptx64::compute_abi_info(ccx, self),\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))"}, {"sha": "e675cca33d1be9576a0b5e009fb39a29f76137b0", "filename": "src/librustc_trans/cabi_sparc64.rs", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_trans%2Fcabi_sparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_trans%2Fcabi_sparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_sparc64.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -0,0 +1,185 @@\n+// Copyright 2014-2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// FIXME: This needs an audit for correctness and completeness.\n+\n+use llvm::{Integer, Pointer, Float, Double, Struct, Vector, Array};\n+use abi::{self, FnType, ArgType};\n+use context::CrateContext;\n+use type_::Type;\n+\n+fn ty_size(ty: Type) -> usize {\n+    if ty.kind() == Vector {\n+        bug!(\"ty_size: unhandled type\")\n+    } else {\n+        abi::ty_size(ty, 8)\n+    }\n+}\n+\n+fn is_homogenous_aggregate_ty(ty: Type) -> Option<(Type, u64)> {\n+    fn check_array(ty: Type) -> Option<(Type, u64)> {\n+        let len = ty.array_length() as u64;\n+        if len == 0 {\n+            return None\n+        }\n+        let elt = ty.element_type();\n+\n+        // if our element is an HFA/HVA, so are we; multiply members by our len\n+        is_homogenous_aggregate_ty(elt).map(|(base_ty, members)| (base_ty, len * members))\n+    }\n+\n+    fn check_struct(ty: Type) -> Option<(Type, u64)> {\n+        let str_tys = ty.field_types();\n+        if str_tys.len() == 0 {\n+            return None\n+        }\n+\n+        let mut prev_base_ty = None;\n+        let mut members = 0;\n+        for opt_homog_agg in str_tys.iter().map(|t| is_homogenous_aggregate_ty(*t)) {\n+            match (prev_base_ty, opt_homog_agg) {\n+                // field isn't itself an HFA, so we aren't either\n+                (_, None) => return None,\n+\n+                // first field - store its type and number of members\n+                (None, Some((field_ty, field_members))) => {\n+                    prev_base_ty = Some(field_ty);\n+                    members = field_members;\n+                },\n+\n+                // 2nd or later field - give up if it's a different type; otherwise incr. members\n+                (Some(prev_ty), Some((field_ty, field_members))) => {\n+                    if prev_ty != field_ty {\n+                        return None;\n+                    }\n+                    members += field_members;\n+                }\n+            }\n+        }\n+\n+        // Because of previous checks, we know prev_base_ty is Some(...) because\n+        //   1. str_tys has at least one element; and\n+        //   2. prev_base_ty was filled in (or we would've returned early)\n+        let (base_ty, members) = (prev_base_ty.unwrap(), members);\n+\n+        // Ensure there is no padding.\n+        if ty_size(ty) == ty_size(base_ty) * (members as usize) {\n+            Some((base_ty, members))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    let homog_agg = match ty.kind() {\n+        Float  => Some((ty, 1)),\n+        Double => Some((ty, 1)),\n+        Array  => check_array(ty),\n+        Struct => check_struct(ty),\n+        _ => None\n+    };\n+\n+    // Ensure we have at most eight uniquely addressable members\n+    homog_agg.and_then(|(base_ty, members)| {\n+        if members > 0 && members <= 8 {\n+            Some((base_ty, members))\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n+    if is_reg_ty(ret.ty) {\n+        ret.extend_integer_width_to(64);\n+        return;\n+    }\n+\n+    // don't return aggregates in registers\n+    ret.make_indirect(ccx);\n+\n+    if let Some((base_ty, members)) = is_homogenous_aggregate_ty(ret.ty) {\n+        ret.cast = Some(Type::array(&base_ty, members));\n+        return;\n+    }\n+    let size = ty_size(ret.ty);\n+    if size <= 16 {\n+        let llty = if size <= 1 {\n+            Type::i8(ccx)\n+        } else if size <= 2 {\n+            Type::i16(ccx)\n+        } else if size <= 4 {\n+            Type::i32(ccx)\n+        } else if size <= 8 {\n+            Type::i64(ccx)\n+        } else {\n+            Type::array(&Type::i64(ccx), ((size + 7 ) / 8 ) as u64)\n+        };\n+        ret.cast = Some(llty);\n+        return;\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType) {\n+    if is_reg_ty(arg.ty) {\n+        arg.extend_integer_width_to(64);\n+        return;\n+    }\n+\n+    if let Some((base_ty, members)) = is_homogenous_aggregate_ty(arg.ty) {\n+        arg.cast = Some(Type::array(&base_ty, members));\n+        return;\n+    }\n+\n+    arg.cast = Some(struct_ty(ccx, arg.ty));\n+}\n+\n+fn is_reg_ty(ty: Type) -> bool {\n+    match ty.kind() {\n+        Integer\n+        | Pointer\n+        | Float\n+        | Double => true,\n+        _ => false\n+    }\n+}\n+\n+fn coerce_to_long(ccx: &CrateContext, size: usize) -> Vec<Type> {\n+    let long_ty = Type::i64(ccx);\n+    let mut args = Vec::new();\n+\n+    let mut n = size / 64;\n+    while n > 0 {\n+        args.push(long_ty);\n+        n -= 1;\n+    }\n+\n+    let r = size % 64;\n+    if r > 0 {\n+        args.push(Type::ix(ccx, r as u64));\n+    }\n+\n+    args\n+}\n+\n+fn struct_ty(ccx: &CrateContext, ty: Type) -> Type {\n+    let size = ty_size(ty) * 8;\n+    Type::struct_(ccx, &coerce_to_long(ccx, size), false)\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() { continue; }\n+        classify_arg_ty(ccx, arg);\n+    }\n+}"}, {"sha": "3a4171e1d0ec6fcb0f3b728c1d62083248730712", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -110,6 +110,7 @@ mod cabi_powerpc;\n mod cabi_powerpc64;\n mod cabi_s390x;\n mod cabi_sparc;\n+mod cabi_sparc64;\n mod cabi_x86;\n mod cabi_x86_64;\n mod cabi_x86_win64;"}, {"sha": "d843d97420a189951d107c0fa682d459b553937a", "filename": "src/libstd/env.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -712,6 +712,7 @@ pub mod consts {\n     /// - powerpc\n     /// - powerpc64\n     /// - s390x\n+    /// - sparc64\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n     pub const ARCH: &'static str = super::arch::ARCH;\n \n@@ -843,6 +844,11 @@ mod arch {\n     pub const ARCH: &'static str = \"s390x\";\n }\n \n+#[cfg(target_arch = \"sparc64\")]\n+mod arch {\n+    pub const ARCH: &'static str = \"sparc64\";\n+}\n+\n #[cfg(target_arch = \"le32\")]\n mod arch {\n     pub const ARCH: &'static str = \"le32\";"}, {"sha": "bb1830a147e43ec196affc82aba84d01ed57941c", "filename": "src/libstd/os/linux/raw.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibstd%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fraw.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -157,12 +157,9 @@ mod arch {\n     }\n }\n \n-#[cfg(target_arch = \"mips64\")]\n-mod arch {\n-    pub use libc::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n-}\n-\n-#[cfg(target_arch = \"s390x\")]\n+#[cfg(any(target_arch = \"mips64\",\n+          target_arch = \"s390x\",\n+          target_arch = \"sparc64\"))]\n mod arch {\n     pub use libc::{off_t, ino_t, nlink_t, blksize_t, blkcnt_t, stat, time_t};\n }"}, {"sha": "269c2d65b632706f71d8f304ab4eb51987622d2d", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -65,6 +65,9 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(target_arch = \"s390x\")]\n pub const unwinder_private_data_size: usize = 2;\n \n+#[cfg(target_arch = \"sparc64\")]\n+pub const unwinder_private_data_size: usize = 2;\n+\n #[cfg(target_os = \"emscripten\")]\n pub const unwinder_private_data_size: usize = 20;\n "}, {"sha": "7bc6e8b0ecb11ef656a0004d5e8f3af09b7a7851", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e1279a0b30a6a36822ecf7c7cc683953e1239745/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=e1279a0b30a6a36822ecf7c7cc683953e1239745", "patch": "@@ -141,14 +141,21 @@ extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PM, LLVMPassRef rust_pass) {\n #define SUBTARGET_MSP430\n #endif\n \n+#ifdef LLVM_COMPONENT_SPARC\n+#define SUBTARGET_SPARC SUBTARGET(Sparc)\n+#else\n+#define SUBTARGET_SPARC\n+#endif\n+\n #define GEN_SUBTARGETS                                                         \\\n   SUBTARGET_X86                                                                \\\n   SUBTARGET_ARM                                                                \\\n   SUBTARGET_AARCH64                                                            \\\n   SUBTARGET_MIPS                                                               \\\n   SUBTARGET_PPC                                                                \\\n   SUBTARGET_SYSTEMZ                                                            \\\n-  SUBTARGET_MSP430\n+  SUBTARGET_MSP430                                                             \\\n+  SUBTARGET_SPARC\n \n #define SUBTARGET(x)                                                           \\\n   namespace llvm {                                                             \\"}]}