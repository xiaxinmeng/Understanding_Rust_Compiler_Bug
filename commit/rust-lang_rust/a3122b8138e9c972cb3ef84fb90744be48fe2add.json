{"sha": "a3122b8138e9c972cb3ef84fb90744be48fe2add", "node_id": "C_kwDOAAsO6NoAKGEzMTIyYjgxMzhlOWM5NzJjYjNlZjg0ZmI5MDc0NGJlNDhmZTJhZGQ", "commit": {"author": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2022-07-16T16:38:03Z"}, "committer": {"name": "yanchith", "email": "yanchi.toth@gmail.com", "date": "2022-07-16T16:38:03Z"}, "message": "Parametrize BinaryHeap with Allocator", "tree": {"sha": "ae0a9838635276f47ee793598e7bc4542b91fe2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae0a9838635276f47ee793598e7bc4542b91fe2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3122b8138e9c972cb3ef84fb90744be48fe2add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3122b8138e9c972cb3ef84fb90744be48fe2add", "html_url": "https://github.com/rust-lang/rust/commit/a3122b8138e9c972cb3ef84fb90744be48fe2add", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3122b8138e9c972cb3ef84fb90744be48fe2add/comments", "author": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yanchith", "id": 1099245, "node_id": "MDQ6VXNlcjEwOTkyNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1099245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanchith", "html_url": "https://github.com/yanchith", "followers_url": "https://api.github.com/users/yanchith/followers", "following_url": "https://api.github.com/users/yanchith/following{/other_user}", "gists_url": "https://api.github.com/users/yanchith/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanchith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanchith/subscriptions", "organizations_url": "https://api.github.com/users/yanchith/orgs", "repos_url": "https://api.github.com/users/yanchith/repos", "events_url": "https://api.github.com/users/yanchith/events{/privacy}", "received_events_url": "https://api.github.com/users/yanchith/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6c43cf8b98e4837bbee1cab225621001a3f2230", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c43cf8b98e4837bbee1cab225621001a3f2230", "html_url": "https://github.com/rust-lang/rust/commit/e6c43cf8b98e4837bbee1cab225621001a3f2230"}], "stats": {"total": 156, "additions": 111, "deletions": 45}, "files": [{"sha": "97f0c1eeb0de0cf9d5c2f2ea92ea142c9b776217", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 111, "deletions": 45, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/a3122b8138e9c972cb3ef84fb90744be48fe2add/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3122b8138e9c972cb3ef84fb90744be48fe2add/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=a3122b8138e9c972cb3ef84fb90744be48fe2add", "patch": "@@ -143,12 +143,14 @@\n #![allow(missing_docs)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use core::alloc::Allocator;\n use core::fmt;\n use core::iter::{FromIterator, FusedIterator, InPlaceIterable, SourceIter, TrustedLen};\n use core::mem::{self, swap, ManuallyDrop};\n use core::ops::{Deref, DerefMut};\n use core::ptr;\n \n+use crate::alloc::Global;\n use crate::collections::TryReserveError;\n use crate::slice;\n use crate::vec::{self, AsVecIntoIter, Vec};\n@@ -265,8 +267,11 @@ mod tests;\n /// [peek\\_mut]: BinaryHeap::peek_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"BinaryHeap\")]\n-pub struct BinaryHeap<T> {\n-    data: Vec<T>,\n+pub struct BinaryHeap<\n+    T,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n+> {\n+    data: Vec<T, A>,\n }\n \n /// Structure wrapping a mutable reference to the greatest item on a\n@@ -277,20 +282,24 @@ pub struct BinaryHeap<T> {\n ///\n /// [`peek_mut`]: BinaryHeap::peek_mut\n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-pub struct PeekMut<'a, T: 'a + Ord> {\n-    heap: &'a mut BinaryHeap<T>,\n+pub struct PeekMut<\n+    'a,\n+    T: 'a + Ord,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator + 'a = Global,\n+> {\n+    heap: &'a mut BinaryHeap<T, A>,\n     sift: bool,\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<T: Ord + fmt::Debug> fmt::Debug for PeekMut<'_, T> {\n+impl<T: Ord + fmt::Debug, A: Allocator> fmt::Debug for PeekMut<'_, T, A> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"PeekMut\").field(&self.heap.data[0]).finish()\n     }\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<T: Ord> Drop for PeekMut<'_, T> {\n+impl<T: Ord, A: Allocator> Drop for PeekMut<'_, T, A> {\n     fn drop(&mut self) {\n         if self.sift {\n             // SAFETY: PeekMut is only instantiated for non-empty heaps.\n@@ -300,7 +309,7 @@ impl<T: Ord> Drop for PeekMut<'_, T> {\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<T: Ord> Deref for PeekMut<'_, T> {\n+impl<T: Ord, A: Allocator> Deref for PeekMut<'_, T, A> {\n     type Target = T;\n     fn deref(&self) -> &T {\n         debug_assert!(!self.heap.is_empty());\n@@ -310,7 +319,7 @@ impl<T: Ord> Deref for PeekMut<'_, T> {\n }\n \n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-impl<T: Ord> DerefMut for PeekMut<'_, T> {\n+impl<T: Ord, A: Allocator> DerefMut for PeekMut<'_, T, A> {\n     fn deref_mut(&mut self) -> &mut T {\n         debug_assert!(!self.heap.is_empty());\n         self.sift = true;\n@@ -330,7 +339,7 @@ impl<'a, T: Ord> PeekMut<'a, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Clone> Clone for BinaryHeap<T> {\n+impl<T: Clone, A: Allocator + Clone> Clone for BinaryHeap<T, A> {\n     fn clone(&self) -> Self {\n         BinaryHeap { data: self.data.clone() }\n     }\n@@ -350,13 +359,13 @@ impl<T: Ord> Default for BinaryHeap<T> {\n }\n \n #[stable(feature = \"binaryheap_debug\", since = \"1.4.0\")]\n-impl<T: fmt::Debug> fmt::Debug for BinaryHeap<T> {\n+impl<T: fmt::Debug, A: Allocator> fmt::Debug for BinaryHeap<T, A> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.iter()).finish()\n     }\n }\n \n-impl<T: Ord> BinaryHeap<T> {\n+impl<T: Ord> BinaryHeap<T, Global> {\n     /// Creates an empty `BinaryHeap` as a max-heap.\n     ///\n     /// # Examples\n@@ -394,6 +403,52 @@ impl<T: Ord> BinaryHeap<T> {\n     pub fn with_capacity(capacity: usize) -> BinaryHeap<T> {\n         BinaryHeap { data: Vec::with_capacity(capacity) }\n     }\n+}\n+\n+impl<T: Ord, A: Allocator> BinaryHeap<T, A> {\n+    /// Creates an empty `BinaryHeap` as a max-heap, using `A` as allocator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api)]\n+    ///\n+    /// use std::alloc::System;\n+    /// use std::collections::BinaryHeap;\n+    /// let mut heap = BinaryHeap::new_in(System);\n+    /// heap.push(4);\n+    /// ```\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[must_use]\n+    pub fn new_in(alloc: A) -> BinaryHeap<T, A> {\n+        BinaryHeap { data: Vec::new_in(alloc) }\n+    }\n+\n+    /// Creates an empty `BinaryHeap` with at least the specified capacity, using `A` as allocator.\n+    ///\n+    /// The binary heap will be able to hold at least `capacity` elements without\n+    /// reallocating. This method is allowed to allocate for more elements than\n+    /// `capacity`. If `capacity` is 0, the binary heap will not allocate.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(allocator_api)]\n+    ///\n+    /// use std::alloc::System;\n+    /// use std::collections::BinaryHeap;\n+    /// let mut heap = BinaryHeap::with_capacity_in(10, System);\n+    /// heap.push(4);\n+    /// ```\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+    #[must_use]\n+    pub fn with_capacity_in(capacity: usize, alloc: A) -> BinaryHeap<T, A> {\n+        BinaryHeap { data: Vec::with_capacity_in(capacity, alloc) }\n+    }\n \n     /// Returns a mutable reference to the greatest item in the binary heap, or\n     /// `None` if it is empty.\n@@ -425,7 +480,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// If the item is modified then the worst case time complexity is *O*(log(*n*)),\n     /// otherwise it's *O*(1).\n     #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n-    pub fn peek_mut(&mut self) -> Option<PeekMut<'_, T>> {\n+    pub fn peek_mut(&mut self) -> Option<PeekMut<'_, T, A>> {\n         if self.is_empty() { None } else { Some(PeekMut { heap: self, sift: false }) }\n     }\n \n@@ -520,7 +575,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n-    pub fn into_sorted_vec(mut self) -> Vec<T> {\n+    pub fn into_sorted_vec(mut self) -> Vec<T, A> {\n         let mut end = self.len();\n         while end > 1 {\n             end -= 1;\n@@ -778,7 +833,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-    pub fn drain_sorted(&mut self) -> DrainSorted<'_, T> {\n+    pub fn drain_sorted(&mut self) -> DrainSorted<'_, T, A> {\n         DrainSorted { inner: self }\n     }\n \n@@ -821,7 +876,7 @@ impl<T: Ord> BinaryHeap<T> {\n     }\n }\n \n-impl<T> BinaryHeap<T> {\n+impl<T, A: Allocator> BinaryHeap<T, A> {\n     /// Returns an iterator visiting all values in the underlying vector, in\n     /// arbitrary order.\n     ///\n@@ -858,7 +913,7 @@ impl<T> BinaryHeap<T> {\n     /// assert_eq!(heap.into_iter_sorted().take(2).collect::<Vec<_>>(), [5, 4]);\n     /// ```\n     #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n-    pub fn into_iter_sorted(self) -> IntoIterSorted<T> {\n+    pub fn into_iter_sorted(self) -> IntoIterSorted<T, A> {\n         IntoIterSorted { inner: self }\n     }\n \n@@ -1124,7 +1179,7 @@ impl<T> BinaryHeap<T> {\n     /// ```\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n-    pub fn into_vec(self) -> Vec<T> {\n+    pub fn into_vec(self) -> Vec<T, A> {\n         self.into()\n     }\n \n@@ -1195,7 +1250,7 @@ impl<T> BinaryHeap<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n-    pub fn drain(&mut self) -> Drain<'_, T> {\n+    pub fn drain(&mut self) -> Drain<'_, T, A> {\n         Drain { iter: self.data.drain(..) }\n     }\n \n@@ -1438,12 +1493,15 @@ unsafe impl<I> AsVecIntoIter for IntoIter<I> {\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n #[derive(Clone, Debug)]\n-pub struct IntoIterSorted<T> {\n-    inner: BinaryHeap<T>,\n+pub struct IntoIterSorted<\n+    T,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global,\n+> {\n+    inner: BinaryHeap<T, A>,\n }\n \n #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n-impl<T: Ord> Iterator for IntoIterSorted<T> {\n+impl<T: Ord, A: Allocator> Iterator for IntoIterSorted<T, A> {\n     type Item = T;\n \n     #[inline]\n@@ -1459,13 +1517,13 @@ impl<T: Ord> Iterator for IntoIterSorted<T> {\n }\n \n #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n-impl<T: Ord> ExactSizeIterator for IntoIterSorted<T> {}\n+impl<T: Ord, A: Allocator> ExactSizeIterator for IntoIterSorted<T, A> {}\n \n #[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]\n-impl<T: Ord> FusedIterator for IntoIterSorted<T> {}\n+impl<T: Ord, A: Allocator> FusedIterator for IntoIterSorted<T, A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<T: Ord> TrustedLen for IntoIterSorted<T> {}\n+unsafe impl<T: Ord, A: Allocator> TrustedLen for IntoIterSorted<T, A> {}\n \n /// A draining iterator over the elements of a `BinaryHeap`.\n ///\n@@ -1475,12 +1533,16 @@ unsafe impl<T: Ord> TrustedLen for IntoIterSorted<T> {}\n /// [`drain`]: BinaryHeap::drain\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n #[derive(Debug)]\n-pub struct Drain<'a, T: 'a> {\n-    iter: vec::Drain<'a, T>,\n+pub struct Drain<\n+    'a,\n+    T: 'a,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator + 'a = Global,\n+> {\n+    iter: vec::Drain<'a, T, A>,\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<T> Iterator for Drain<'_, T> {\n+impl<'a, T, A: Allocator + 'a> Iterator for Drain<'a, T, A> {\n     type Item = T;\n \n     #[inline]\n@@ -1495,22 +1557,22 @@ impl<T> Iterator for Drain<'_, T> {\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<T> DoubleEndedIterator for Drain<'_, T> {\n+impl<'a, T, A: Allocator + 'a> DoubleEndedIterator for Drain<'a, T, A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n         self.iter.next_back()\n     }\n }\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<T> ExactSizeIterator for Drain<'_, T> {\n+impl<'a, T, A: Allocator + 'a> ExactSizeIterator for Drain<'a, T, A> {\n     fn is_empty(&self) -> bool {\n         self.iter.is_empty()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<T> FusedIterator for Drain<'_, T> {}\n+impl<'a, T, A: Allocator + 'a> FusedIterator for Drain<'a, T, A> {}\n \n /// A draining iterator over the elements of a `BinaryHeap`.\n ///\n@@ -1520,17 +1582,21 @@ impl<T> FusedIterator for Drain<'_, T> {}\n /// [`drain_sorted`]: BinaryHeap::drain_sorted\n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n #[derive(Debug)]\n-pub struct DrainSorted<'a, T: Ord> {\n-    inner: &'a mut BinaryHeap<T>,\n+pub struct DrainSorted<\n+    'a,\n+    T: Ord,\n+    #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator + 'a = Global,\n+> {\n+    inner: &'a mut BinaryHeap<T, A>,\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<'a, T: Ord> Drop for DrainSorted<'a, T> {\n+impl<'a, T: Ord, A: Allocator + 'a> Drop for DrainSorted<'a, T, A> {\n     /// Removes heap elements in heap order.\n     fn drop(&mut self) {\n-        struct DropGuard<'r, 'a, T: Ord>(&'r mut DrainSorted<'a, T>);\n+        struct DropGuard<'r, 'a, T: Ord, A: Allocator + 'a>(&'r mut DrainSorted<'a, T, A>);\n \n-        impl<'r, 'a, T: Ord> Drop for DropGuard<'r, 'a, T> {\n+        impl<'r, 'a, T: Ord, A: Allocator + 'a> Drop for DropGuard<'r, 'a, T, A> {\n             fn drop(&mut self) {\n                 while self.0.inner.pop().is_some() {}\n             }\n@@ -1545,7 +1611,7 @@ impl<'a, T: Ord> Drop for DrainSorted<'a, T> {\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<T: Ord> Iterator for DrainSorted<'_, T> {\n+impl<T: Ord, A: Allocator> Iterator for DrainSorted<'_, T, A> {\n     type Item = T;\n \n     #[inline]\n@@ -1561,20 +1627,20 @@ impl<T: Ord> Iterator for DrainSorted<'_, T> {\n }\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<T: Ord> ExactSizeIterator for DrainSorted<'_, T> {}\n+impl<T: Ord, A: Allocator> ExactSizeIterator for DrainSorted<'_, T, A> {}\n \n #[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]\n-impl<T: Ord> FusedIterator for DrainSorted<'_, T> {}\n+impl<T: Ord, A: Allocator> FusedIterator for DrainSorted<'_, T, A> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<T: Ord> TrustedLen for DrainSorted<'_, T> {}\n+unsafe impl<T: Ord, A: Allocator> TrustedLen for DrainSorted<'_, T, A> {}\n \n #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n-impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {\n+impl<T: Ord, A: Allocator> From<Vec<T, A>> for BinaryHeap<T, A> {\n     /// Converts a `Vec<T>` into a `BinaryHeap<T>`.\n     ///\n     /// This conversion happens in-place, and has *O*(*n*) time complexity.\n-    fn from(vec: Vec<T>) -> BinaryHeap<T> {\n+    fn from(vec: Vec<T, A>) -> BinaryHeap<T, A> {\n         let mut heap = BinaryHeap { data: vec };\n         heap.rebuild();\n         heap\n@@ -1598,12 +1664,12 @@ impl<T: Ord, const N: usize> From<[T; N]> for BinaryHeap<T> {\n }\n \n #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n-impl<T> From<BinaryHeap<T>> for Vec<T> {\n+impl<T, A: Allocator> From<BinaryHeap<T, A>> for Vec<T, A> {\n     /// Converts a `BinaryHeap<T>` into a `Vec<T>`.\n     ///\n     /// This conversion requires no data movement or allocation, and has\n     /// constant time complexity.\n-    fn from(heap: BinaryHeap<T>) -> Vec<T> {\n+    fn from(heap: BinaryHeap<T, A>) -> Vec<T, A> {\n         heap.data\n     }\n }\n@@ -1644,7 +1710,7 @@ impl<T> IntoIterator for BinaryHeap<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> IntoIterator for &'a BinaryHeap<T> {\n+impl<'a, T, A: Allocator + 'a> IntoIterator for &'a BinaryHeap<T, A> {\n     type Item = &'a T;\n     type IntoIter = Iter<'a, T>;\n \n@@ -1691,7 +1757,7 @@ impl<T: Ord> SpecExtend<BinaryHeap<T>> for BinaryHeap<T> {\n     }\n }\n \n-impl<T: Ord> BinaryHeap<T> {\n+impl<T: Ord, A: Allocator> BinaryHeap<T, A> {\n     fn extend_desugared<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n         let iterator = iter.into_iter();\n         let (lower, _) = iterator.size_hint();"}]}