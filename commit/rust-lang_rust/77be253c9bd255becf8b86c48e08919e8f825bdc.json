{"sha": "77be253c9bd255becf8b86c48e08919e8f825bdc", "node_id": "C_kwDOAAsO6NoAKDc3YmUyNTNjOWJkMjU1YmVjZjhiODZjNDhlMDg5MTllOGY4MjViZGM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-22T13:23:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-22T15:51:44Z"}, "message": "cargotest: do not run quickcheck tests in xsv", "tree": {"sha": "dc6ed26002fb25459b17022a4da24269977787ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc6ed26002fb25459b17022a4da24269977787ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77be253c9bd255becf8b86c48e08919e8f825bdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77be253c9bd255becf8b86c48e08919e8f825bdc", "html_url": "https://github.com/rust-lang/rust/commit/77be253c9bd255becf8b86c48e08919e8f825bdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77be253c9bd255becf8b86c48e08919e8f825bdc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41419e70366962c9a878bfe673ef4df38db6f7f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/41419e70366962c9a878bfe673ef4df38db6f7f1", "html_url": "https://github.com/rust-lang/rust/commit/41419e70366962c9a878bfe673ef4df38db6f7f1"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "95fe98a683ffdb66748054c965dc9159e7a91e54", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/77be253c9bd255becf8b86c48e08919e8f825bdc/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77be253c9bd255becf8b86c48e08919e8f825bdc/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=77be253c9bd255becf8b86c48e08919e8f825bdc", "patch": "@@ -11,6 +11,8 @@ struct Test {\n     packages: &'static [&'static str],\n     features: Option<&'static [&'static str]>,\n     manifest_path: Option<&'static str>,\n+    /// `filters` are passed to libtest (i.e., after a `--` in the `cargo test` invocation).\n+    filters: &'static [&'static str],\n }\n \n const TEST_REPOS: &[Test] = &[\n@@ -22,6 +24,7 @@ const TEST_REPOS: &[Test] = &[\n         packages: &[],\n         features: None,\n         manifest_path: None,\n+        filters: &[],\n     },\n     Test {\n         name: \"ripgrep\",\n@@ -31,6 +34,7 @@ const TEST_REPOS: &[Test] = &[\n         packages: &[],\n         features: None,\n         manifest_path: None,\n+        filters: &[],\n     },\n     Test {\n         name: \"tokei\",\n@@ -40,6 +44,7 @@ const TEST_REPOS: &[Test] = &[\n         packages: &[],\n         features: None,\n         manifest_path: None,\n+        filters: &[],\n     },\n     Test {\n         name: \"xsv\",\n@@ -49,6 +54,21 @@ const TEST_REPOS: &[Test] = &[\n         packages: &[],\n         features: None,\n         manifest_path: None,\n+        // Many tests here use quickcheck and some of them can fail randomly, so only run deterministic tests.\n+        filters: &[\n+            \"test_flatten::\",\n+            \"test_fmt::\",\n+            \"test_headers::\",\n+            \"test_index::\",\n+            \"test_join::\",\n+            \"test_partition::\",\n+            \"test_search::\",\n+            \"test_select::\",\n+            \"test_slice::\",\n+            \"test_split::\",\n+            \"test_stats::\",\n+            \"test_table::\",\n+        ],\n     },\n     Test {\n         name: \"servo\",\n@@ -60,6 +80,7 @@ const TEST_REPOS: &[Test] = &[\n         packages: &[\"selectors\"],\n         features: None,\n         manifest_path: None,\n+        filters: &[],\n     },\n     Test {\n         name: \"diesel\",\n@@ -75,6 +96,7 @@ const TEST_REPOS: &[Test] = &[\n         // not any other crate present in the diesel workspace\n         // (This is required to set the feature flags above)\n         manifest_path: Some(\"diesel/Cargo.toml\"),\n+        filters: &[],\n     },\n ];\n \n@@ -97,7 +119,8 @@ fn test_repo(cargo: &Path, out_dir: &Path, test: &Test) {\n     if let Some(lockfile) = test.lock {\n         fs::write(&dir.join(\"Cargo.lock\"), lockfile).unwrap();\n     }\n-    if !run_cargo_test(cargo, &dir, test.packages, test.features, test.manifest_path) {\n+    if !run_cargo_test(cargo, &dir, test.packages, test.features, test.manifest_path, test.filters)\n+    {\n         panic!(\"tests failed for {}\", test.repo);\n     }\n }\n@@ -155,6 +178,7 @@ fn run_cargo_test(\n     packages: &[&str],\n     features: Option<&[&str]>,\n     manifest_path: Option<&str>,\n+    filters: &[&str],\n ) -> bool {\n     let mut command = Command::new(cargo_path);\n     command.arg(\"test\");\n@@ -174,6 +198,9 @@ fn run_cargo_test(\n         command.arg(\"-p\").arg(name);\n     }\n \n+    command.arg(\"--\");\n+    command.args(filters);\n+\n     let status = command\n         // Disable rust-lang/cargo's cross-compile tests\n         .env(\"CFG_DISABLE_CROSS_TESTS\", \"1\")"}]}