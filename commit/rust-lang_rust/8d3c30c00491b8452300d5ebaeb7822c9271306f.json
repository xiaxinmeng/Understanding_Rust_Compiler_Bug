{"sha": "8d3c30c00491b8452300d5ebaeb7822c9271306f", "node_id": "C_kwDOAAsO6NoAKDhkM2MzMGMwMDQ5MWI4NDUyMzAwZDVlYmFlYjc4MjJjOTI3MTMwNmY", "commit": {"author": {"name": "Niklas Jonsson", "email": "niklasandersjonsson@gmail.com", "date": "2022-07-16T13:16:57Z"}, "committer": {"name": "Niklas Jonsson", "email": "niklasandersjonsson@gmail.com", "date": "2022-09-10T09:49:12Z"}, "message": "rustc_error, rustc_private, rustc_ast: Switch to stable hash containers", "tree": {"sha": "c5bd568c4528edd2ee7d6b4ff4adf5cbade9f9b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5bd568c4528edd2ee7d6b4ff4adf5cbade9f9b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d3c30c00491b8452300d5ebaeb7822c9271306f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3c30c00491b8452300d5ebaeb7822c9271306f", "html_url": "https://github.com/rust-lang/rust/commit/8d3c30c00491b8452300d5ebaeb7822c9271306f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d3c30c00491b8452300d5ebaeb7822c9271306f/comments", "author": {"login": "NiklasJonsson", "id": 14359487, "node_id": "MDQ6VXNlcjE0MzU5NDg3", "avatar_url": "https://avatars.githubusercontent.com/u/14359487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NiklasJonsson", "html_url": "https://github.com/NiklasJonsson", "followers_url": "https://api.github.com/users/NiklasJonsson/followers", "following_url": "https://api.github.com/users/NiklasJonsson/following{/other_user}", "gists_url": "https://api.github.com/users/NiklasJonsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/NiklasJonsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NiklasJonsson/subscriptions", "organizations_url": "https://api.github.com/users/NiklasJonsson/orgs", "repos_url": "https://api.github.com/users/NiklasJonsson/repos", "events_url": "https://api.github.com/users/NiklasJonsson/events{/privacy}", "received_events_url": "https://api.github.com/users/NiklasJonsson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NiklasJonsson", "id": 14359487, "node_id": "MDQ6VXNlcjE0MzU5NDg3", "avatar_url": "https://avatars.githubusercontent.com/u/14359487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NiklasJonsson", "html_url": "https://github.com/NiklasJonsson", "followers_url": "https://api.github.com/users/NiklasJonsson/followers", "following_url": "https://api.github.com/users/NiklasJonsson/following{/other_user}", "gists_url": "https://api.github.com/users/NiklasJonsson/gists{/gist_id}", "starred_url": "https://api.github.com/users/NiklasJonsson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NiklasJonsson/subscriptions", "organizations_url": "https://api.github.com/users/NiklasJonsson/orgs", "repos_url": "https://api.github.com/users/NiklasJonsson/repos", "events_url": "https://api.github.com/users/NiklasJonsson/events{/privacy}", "received_events_url": "https://api.github.com/users/NiklasJonsson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "html_url": "https://github.com/rust-lang/rust/commit/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "7b5acc3f4859624c4d48baf3a99a346b00fae8f8", "filename": "compiler/rustc_ast/src/node_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fnode_id.rs?ref=8d3c30c00491b8452300d5ebaeb7822c9271306f", "patch": "@@ -13,7 +13,7 @@ rustc_index::newtype_index! {\n     }\n }\n \n-rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeId);\n+rustc_data_structures::define_id_collections!(NodeMap, NodeSet, NodeMapEntry, NodeId);\n \n /// The [`NodeId`] used to represent the root of the crate.\n pub const CRATE_NODE_ID: NodeId = NodeId::from_u32(0);"}, {"sha": "0d0c51b6819460f58ddfd8f8faec421d451f6829", "filename": "compiler/rustc_data_structures/src/fx.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_data_structures%2Fsrc%2Ffx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_data_structures%2Fsrc%2Ffx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffx.rs?ref=8d3c30c00491b8452300d5ebaeb7822c9271306f", "patch": "@@ -2,13 +2,26 @@ use std::hash::BuildHasherDefault;\n \n pub use rustc_hash::{FxHashMap, FxHashSet, FxHasher};\n \n+pub type StdEntry<'a, K, V> = std::collections::hash_map::Entry<'a, K, V>;\n+\n pub type FxIndexMap<K, V> = indexmap::IndexMap<K, V, BuildHasherDefault<FxHasher>>;\n pub type FxIndexSet<V> = indexmap::IndexSet<V, BuildHasherDefault<FxHasher>>;\n+pub type IndexEntry<'a, K, V> = indexmap::map::Entry<'a, K, V>;\n \n #[macro_export]\n macro_rules! define_id_collections {\n-    ($map_name:ident, $set_name:ident, $key:ty) => {\n+    ($map_name:ident, $set_name:ident, $entry_name:ident, $key:ty) => {\n         pub type $map_name<T> = $crate::fx::FxHashMap<$key, T>;\n         pub type $set_name = $crate::fx::FxHashSet<$key>;\n+        pub type $entry_name<'a, T> = $crate::fx::StdEntry<'a, $key, T>;\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! define_stable_id_collections {\n+    ($map_name:ident, $set_name:ident, $entry_name:ident, $key:ty) => {\n+        pub type $map_name<T> = $crate::fx::FxIndexMap<$key, T>;\n+        pub type $set_name = $crate::fx::FxIndexSet<$key>;\n+        pub type $entry_name<'a, T> = $crate::fx::IndexEntry<'a, $key, T>;\n     };\n }"}, {"sha": "1d260f7cafccd5de0b07957a6d0c2b5646d58437", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=8d3c30c00491b8452300d5ebaeb7822c9271306f", "patch": "@@ -22,7 +22,7 @@ use crate::{\n \n use rustc_lint_defs::pluralize;\n \n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_data_structures::sync::Lrc;\n use rustc_error_messages::FluentArgs;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -1487,7 +1487,7 @@ impl EmitterWriter {\n                 );\n \n                 // Contains the vertical lines' positions for active multiline annotations\n-                let mut multilines = FxHashMap::default();\n+                let mut multilines = FxIndexMap::default();\n \n                 // Get the left-side margin to remove it\n                 let mut whitespace_margin = usize::MAX;"}, {"sha": "fb7ae6f99cf5a8134088bdfe9dab2b3501b707fb", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=8d3c30c00491b8452300d5ebaeb7822c9271306f", "patch": "@@ -12,7 +12,6 @@\n #![feature(result_option_inspect)]\n #![feature(rustc_attrs)]\n #![allow(incomplete_features)]\n-#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_macros;\n@@ -27,7 +26,7 @@ use Level::*;\n \n use emitter::{is_case_difference, Emitter, EmitterWriter};\n use registry::Registry;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n@@ -413,7 +412,7 @@ struct HandlerInner {\n     taught_diagnostics: FxHashSet<DiagnosticId>,\n \n     /// Used to suggest rustc --explain <error code>\n-    emitted_diagnostic_codes: FxHashSet<DiagnosticId>,\n+    emitted_diagnostic_codes: FxIndexSet<DiagnosticId>,\n \n     /// This set contains a hash of every diagnostic that has been emitted by\n     /// this handler. These hashes is used to avoid emitting the same error"}, {"sha": "84b0740c7b313cb7ea89a60223d18561456bd579", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=8d3c30c00491b8452300d5ebaeb7822c9271306f", "patch": "@@ -67,8 +67,13 @@ impl PartialOrd for HirId {\n     }\n }\n \n-rustc_data_structures::define_id_collections!(HirIdMap, HirIdSet, HirId);\n-rustc_data_structures::define_id_collections!(ItemLocalMap, ItemLocalSet, ItemLocalId);\n+rustc_data_structures::define_stable_id_collections!(HirIdMap, HirIdSet, HirIdMapEntry, HirId);\n+rustc_data_structures::define_id_collections!(\n+    ItemLocalMap,\n+    ItemLocalSet,\n+    ItemLocalMapEntry,\n+    ItemLocalId\n+);\n \n rustc_index::newtype_index! {\n     /// An `ItemLocalId` uniquely identifies something within a given \"item-like\";"}, {"sha": "b8e81bb5d20ed2a0db6e31857c1bd194ef853bd9", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=8d3c30c00491b8452300d5ebaeb7822c9271306f", "patch": "@@ -5,7 +5,6 @@\n #![feature(rustc_private)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n "}, {"sha": "37b8371a8fe286f510ea6033a27941c2c777c2ae", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3c30c00491b8452300d5ebaeb7822c9271306f/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=8d3c30c00491b8452300d5ebaeb7822c9271306f", "patch": "@@ -337,7 +337,7 @@ impl fmt::Debug for DefId {\n     }\n }\n \n-rustc_data_structures::define_id_collections!(DefIdMap, DefIdSet, DefId);\n+rustc_data_structures::define_id_collections!(DefIdMap, DefIdSet, DefIdMapEntry, DefId);\n \n /// A `LocalDefId` is equivalent to a `DefId` with `krate == LOCAL_CRATE`. Since\n /// we encode this information in the type, we can ensure at compile time that\n@@ -399,7 +399,12 @@ impl<D: Decoder> Decodable<D> for LocalDefId {\n     }\n }\n \n-rustc_data_structures::define_id_collections!(LocalDefIdMap, LocalDefIdSet, LocalDefId);\n+rustc_data_structures::define_id_collections!(\n+    LocalDefIdMap,\n+    LocalDefIdSet,\n+    LocalDefIdMapEntry,\n+    LocalDefId\n+);\n \n impl<CTX: HashStableContext> HashStable<CTX> for DefId {\n     #[inline]"}, {"sha": "d37f44d4a17e40f3712bc5193758b28c30f575d6", "filename": "src/tools/clippy/clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d3c30c00491b8452300d5ebaeb7822c9271306f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3c30c00491b8452300d5ebaeb7822c9271306f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=8d3c30c00491b8452300d5ebaeb7822c9271306f", "patch": "@@ -8,11 +8,10 @@ use rustc_arena::DroplessArena;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{Arm, Expr, ExprKind, HirId, HirIdMap, HirIdSet, Pat, PatKind, RangeEnd};\n+use rustc_hir::{Arm, Expr, ExprKind, HirId, HirIdMap, HirIdMapEntry, HirIdSet, Pat, PatKind, RangeEnd};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_span::Symbol;\n-use std::collections::hash_map::Entry;\n \n use super::MATCH_SAME_ARMS;\n \n@@ -71,9 +70,9 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n                 if let Some(a_id) = path_to_local(a);\n                 if let Some(b_id) = path_to_local(b);\n                 let entry = match local_map.entry(a_id) {\n-                    Entry::Vacant(entry) => entry,\n+                    HirIdMapEntry::Vacant(entry) => entry,\n                     // check if using the same bindings as before\n-                    Entry::Occupied(entry) => return *entry.get() == b_id,\n+                    HirIdMapEntry::Occupied(entry) => return *entry.get() == b_id,\n                 };\n                 // the names technically don't have to match; this makes the lint more conservative\n                 if cx.tcx.hir().name(a_id) == cx.tcx.hir().name(b_id);"}]}