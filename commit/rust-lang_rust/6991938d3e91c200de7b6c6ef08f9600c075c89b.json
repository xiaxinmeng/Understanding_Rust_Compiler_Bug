{"sha": "6991938d3e91c200de7b6c6ef08f9600c075c89b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OTE5MzhkM2U5MWMyMDBkZTdiNmM2ZWYwOGY5NjAwYzA3NWM4OWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-26T01:51:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-26T01:51:26Z"}, "message": "Auto merge of #38961 - steveklabnik:fix-sort-wording, r=alexcrichton\n\nFix wording around sort guarantees\n\nFixes #38524\n\n/cc @rust-lang/libs @stjepang", "tree": {"sha": "ee4632216c86fc68f08eea359913a3b422eb66ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee4632216c86fc68f08eea359913a3b422eb66ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6991938d3e91c200de7b6c6ef08f9600c075c89b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6991938d3e91c200de7b6c6ef08f9600c075c89b", "html_url": "https://github.com/rust-lang/rust/commit/6991938d3e91c200de7b6c6ef08f9600c075c89b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6991938d3e91c200de7b6c6ef08f9600c075c89b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df8debf6d9afc431adbbd8311dcaf2b70eb9762e", "url": "https://api.github.com/repos/rust-lang/rust/commits/df8debf6d9afc431adbbd8311dcaf2b70eb9762e", "html_url": "https://github.com/rust-lang/rust/commit/df8debf6d9afc431adbbd8311dcaf2b70eb9762e"}, {"sha": "e02f923e37402273a4971e2c015842ecc4c5f0d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e02f923e37402273a4971e2c015842ecc4c5f0d9", "html_url": "https://github.com/rust-lang/rust/commit/e02f923e37402273a4971e2c015842ecc4c5f0d9"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "fc49c9f56438ca412da444c9ae5f287717694abb", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6991938d3e91c200de7b6c6ef08f9600c075c89b/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6991938d3e91c200de7b6c6ef08f9600c075c89b/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=6991938d3e91c200de7b6c6ef08f9600c075c89b", "patch": "@@ -1064,8 +1064,17 @@ impl<T> [T] {\n \n     /// This is equivalent to `self.sort_by(|a, b| a.cmp(b))`.\n     ///\n-    /// This sort is stable and `O(n log n)` worst-case, but allocates\n-    /// temporary storage half the size of `self`.\n+    /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n+    ///\n+    /// # Current implementation\n+    ///\n+    /// The current algorithm is an adaptive, iterative merge sort inspired by\n+    /// [timsort](https://en.wikipedia.org/wiki/Timsort).\n+    /// It is designed to be very fast in cases where the slice is nearly sorted, or consists of\n+    /// two or more sorted sequences concatenated one after another.\n+    ///\n+    /// Also, it allocates temporary storage half the size of `self`, but for short slices a\n+    /// non-allocating insertion sort is used instead.\n     ///\n     /// # Examples\n     ///\n@@ -1083,11 +1092,19 @@ impl<T> [T] {\n         self.sort_by(|a, b| a.cmp(b))\n     }\n \n-    /// Sorts the slice, in place, using `f` to extract a key by which to\n-    /// order the sort by.\n+    /// Sorts the slice using `f` to extract a key to compare elements by.\n+    ///\n+    /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n+    ///\n+    /// # Current implementation\n     ///\n-    /// This sort is stable and `O(n log n)` worst-case, but allocates\n-    /// temporary storage half the size of `self`.\n+    /// The current algorithm is an adaptive, iterative merge sort inspired by\n+    /// [timsort](https://en.wikipedia.org/wiki/Timsort).\n+    /// It is designed to be very fast in cases where the slice is nearly sorted, or consists of\n+    /// two or more sorted sequences concatenated one after another.\n+    ///\n+    /// Also, it allocates temporary storage half the size of `self`, but for short slices a\n+    /// non-allocating insertion sort is used instead.\n     ///\n     /// # Examples\n     ///\n@@ -1105,11 +1122,19 @@ impl<T> [T] {\n         self.sort_by(|a, b| f(a).cmp(&f(b)))\n     }\n \n-    /// Sorts the slice, in place, using `compare` to compare\n-    /// elements.\n+    /// Sorts the slice using `compare` to compare elements.\n+    ///\n+    /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n+    ///\n+    /// # Current implementation\n+    ///\n+    /// The current algorithm is an adaptive, iterative merge sort inspired by\n+    /// [timsort](https://en.wikipedia.org/wiki/Timsort).\n+    /// It is designed to be very fast in cases where the slice is nearly sorted, or consists of\n+    /// two or more sorted sequences concatenated one after another.\n     ///\n-    /// This sort is stable and `O(n log n)` worst-case, but allocates\n-    /// temporary storage half the size of `self`.\n+    /// Also, it allocates temporary storage half the size of `self`, but for short slices a\n+    /// non-allocating insertion sort is used instead.\n     ///\n     /// # Examples\n     ///\n@@ -1535,7 +1560,7 @@ fn merge_sort<T, F>(v: &mut [T], mut compare: F)\n \n     // FIXME #12092: These numbers are platform-specific and need more extensive testing/tuning.\n     //\n-    // If `v` has length up to `insertion_len`, simply switch to insertion sort because it is going\n+    // If `v` has length up to `max_insertion`, simply switch to insertion sort because it is going\n     // to perform better than merge sort. For bigger types `T`, the threshold is smaller.\n     //\n     // Short runs are extended using insertion sort to span at least `min_run` elements, in order"}]}