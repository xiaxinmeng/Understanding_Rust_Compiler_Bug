{"sha": "aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNzJjYWM4N2E4MWQ0YTBhODdkOTBjMGUwYzlmNWI5NGQxYTkzZjY=", "commit": {"author": {"name": "Florian Gilcher", "email": "florian.gilcher@asquera.de", "date": "2019-07-06T09:40:14Z"}, "committer": {"name": "Florian Gilcher", "email": "florian.gilcher@asquera.de", "date": "2019-07-09T15:02:26Z"}, "message": "Improve cast_ptr_alignment lint\n\n* print alignment in bytes in the lint message\n* ignore ZST left-hand types", "tree": {"sha": "2c2d69044fd99914b52911e3e4fd9d8772b1b461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c2d69044fd99914b52911e3e4fd9d8772b1b461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE8tkovRSbKSh8NuS057UdM/jr9hsFAl0krIQACgkQ57UdM/jr\n9htg/ggAoD2zIapzahjxvNwUYoPBe8vJPKuQ1tLCPVzmbdh+AU1thc8M5jubXw3x\np3hgzsL4uj+wzx2Zj+kew53NzYYr5H9c+oJuTouVqt7utd+u1TsxFo+HhZxiKJn3\nmK3HyWRlt5p/PDg02MmmzD0K/zic1UErpGISvqwEu8ebs6fBjgsDlPbDyTWNJHKu\n0UafIdxT72RI8sLfg67rLSCB4FfEeu3SAAPewtKWj/ZxhhnROEcD+eDFxNpQHfii\nmKxf/skH/B/ldPH5fyZbudE/aX3dIQMO5KOeiHeTy4Ckl+pQTuW8Tjo+HbMEUbDI\nomg5zCiNNYGGTv/urQqBNxGKHTVyvQ==\n=b7Io\n-----END PGP SIGNATURE-----", "payload": "tree 2c2d69044fd99914b52911e3e4fd9d8772b1b461\nparent 8744e8ed26f3609c64c89b578e569366bfe1d551\nauthor Florian Gilcher <florian.gilcher@asquera.de> 1562406014 +0200\ncommitter Florian Gilcher <florian.gilcher@asquera.de> 1562684546 +0200\n\nImprove cast_ptr_alignment lint\n\n* print alignment in bytes in the lint message\n* ignore ZST left-hand types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6", "html_url": "https://github.com/rust-lang/rust/commit/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6/comments", "author": {"login": "skade", "id": 47542, "node_id": "MDQ6VXNlcjQ3NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/47542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skade", "html_url": "https://github.com/skade", "followers_url": "https://api.github.com/users/skade/followers", "following_url": "https://api.github.com/users/skade/following{/other_user}", "gists_url": "https://api.github.com/users/skade/gists{/gist_id}", "starred_url": "https://api.github.com/users/skade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skade/subscriptions", "organizations_url": "https://api.github.com/users/skade/orgs", "repos_url": "https://api.github.com/users/skade/repos", "events_url": "https://api.github.com/users/skade/events{/privacy}", "received_events_url": "https://api.github.com/users/skade/received_events", "type": "User", "site_admin": false}, "committer": {"login": "skade", "id": 47542, "node_id": "MDQ6VXNlcjQ3NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/47542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skade", "html_url": "https://github.com/skade", "followers_url": "https://api.github.com/users/skade/followers", "following_url": "https://api.github.com/users/skade/following{/other_user}", "gists_url": "https://api.github.com/users/skade/gists{/gist_id}", "starred_url": "https://api.github.com/users/skade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skade/subscriptions", "organizations_url": "https://api.github.com/users/skade/orgs", "repos_url": "https://api.github.com/users/skade/repos", "events_url": "https://api.github.com/users/skade/events{/privacy}", "received_events_url": "https://api.github.com/users/skade/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8744e8ed26f3609c64c89b578e569366bfe1d551", "url": "https://api.github.com/repos/rust-lang/rust/commits/8744e8ed26f3609c64c89b578e569366bfe1d551", "html_url": "https://github.com/rust-lang/rust/commit/8744e8ed26f3609c64c89b578e569366bfe1d551"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "b5023e26873e8bde1d5d0ab8aea8786dda574d47", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6", "patch": "@@ -1210,17 +1210,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n             if_chain! {\n                 if let ty::RawPtr(from_ptr_ty) = &cast_from.sty;\n                 if let ty::RawPtr(to_ptr_ty) = &cast_to.sty;\n-                if let Some(from_align) = cx.layout_of(from_ptr_ty.ty).ok().map(|a| a.align.abi);\n-                if let Some(to_align) = cx.layout_of(to_ptr_ty.ty).ok().map(|a| a.align.abi);\n-                if from_align < to_align;\n+                if let Ok(from_layout) = cx.layout_of(from_ptr_ty.ty);\n+                if let Ok(to_layout) = cx.layout_of(to_ptr_ty.ty);\n+                if from_layout.align.abi < to_layout.align.abi;\n                 // with c_void, we inherently need to trust the user\n                 if !is_c_void(cx, from_ptr_ty.ty);\n+                // when casting from a ZST, we don't know enough to properly lint\n+                if !from_layout.is_zst();\n                 then {\n                     span_lint(\n                         cx,\n                         CAST_PTR_ALIGNMENT,\n                         expr.span,\n-                        &format!(\"casting from `{}` to a more-strictly-aligned pointer (`{}`)\", cast_from, cast_to)\n+                        &format!(\n+                            \"casting from `{}` to a more-strictly-aligned pointer (`{}`) ({} < {} bytes)\",\n+                            cast_from,\n+                            cast_to,\n+                            from_layout.align.abi.bytes(),\n+                            to_layout.align.abi.bytes(),\n+                        ),\n                     );\n                 }\n             }"}, {"sha": "4c08935639f1f3a5ae5fd847de7c3398ae71b31e", "filename": "tests/ui/cast_alignment.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6", "patch": "@@ -22,4 +22,6 @@ fn main() {\n     // For c_void, we should trust the user. See #2677\n     (&1u32 as *const u32 as *const std::os::raw::c_void) as *const u32;\n     (&1u32 as *const u32 as *const libc::c_void) as *const u32;\n+    // For ZST, we should trust the user. See #4256\n+    (&1u32 as *const u32 as *const ()) as *const u32;\n }"}, {"sha": "79219f86155a4458fe95c46dbc9b699b0738bca1", "filename": "tests/ui/cast_alignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6/tests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6/tests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.stderr?ref=aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6", "patch": "@@ -1,12 +1,12 @@\n-error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`)\n+error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`) (1 < 2 bytes)\n   --> $DIR/cast_alignment.rs:12:5\n    |\n LL |     (&1u8 as *const u8) as *const u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-ptr-alignment` implied by `-D warnings`\n \n-error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`)\n+error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1 < 2 bytes)\n   --> $DIR/cast_alignment.rs:13:5\n    |\n LL |     (&mut 1u8 as *mut u8) as *mut u16;"}]}