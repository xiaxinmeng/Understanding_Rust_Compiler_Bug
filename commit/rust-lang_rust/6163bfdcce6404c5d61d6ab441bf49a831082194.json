{"sha": "6163bfdcce6404c5d61d6ab441bf49a831082194", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNjNiZmRjY2U2NDA0YzVkNjFkNmFiNDQxYmY0OWE4MzEwODIxOTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-04T10:32:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-04T10:32:28Z"}, "message": "Auto merge of #80661 - jyn514:duplicate-types, r=GuillaumeGomez\n\nCleanup rustdoc handling of associated types\n\nThis is best reviewed a commit at a time. No particular reason for these changes, they just stood out as I was reviewing https://github.com/rust-lang/rust/pull/80653 and thinking about https://github.com/rust-lang/rust/issues/80379. The new test case worked before, it just wasn't tested.\n\nr? `@GuillaumeGomez`", "tree": {"sha": "df84df6a3ff736da63f3c06a84595b7e310cffc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df84df6a3ff736da63f3c06a84595b7e310cffc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6163bfdcce6404c5d61d6ab441bf49a831082194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6163bfdcce6404c5d61d6ab441bf49a831082194", "html_url": "https://github.com/rust-lang/rust/commit/6163bfdcce6404c5d61d6ab441bf49a831082194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6163bfdcce6404c5d61d6ab441bf49a831082194/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887398ff688e2e3cf8a95e588d0b51420e08fb6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/887398ff688e2e3cf8a95e588d0b51420e08fb6b", "html_url": "https://github.com/rust-lang/rust/commit/887398ff688e2e3cf8a95e588d0b51420e08fb6b"}, {"sha": "24ef94593c84084be03e6461b702178523767cf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ef94593c84084be03e6461b702178523767cf7", "html_url": "https://github.com/rust-lang/rust/commit/24ef94593c84084be03e6461b702178523767cf7"}], "stats": {"total": 84, "additions": 53, "deletions": 31}, "files": [{"sha": "ed972cc16e95424d4787a5ff7bdfeea8bfef8b3b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6163bfdcce6404c5d61d6ab441bf49a831082194/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6163bfdcce6404c5d61d6ab441bf49a831082194/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6163bfdcce6404c5d61d6ab441bf49a831082194", "patch": "@@ -261,26 +261,12 @@ fn build_union(cx: &DocContext<'_>, did: DefId) -> clean::Union {\n \n fn build_type_alias(cx: &DocContext<'_>, did: DefId) -> clean::Typedef {\n     let predicates = cx.tcx.explicit_predicates_of(did);\n+    let type_ = cx.tcx.type_of(did).clean(cx);\n \n     clean::Typedef {\n-        type_: cx.tcx.type_of(did).clean(cx),\n+        type_,\n         generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n-        item_type: build_type_alias_type(cx, did),\n-    }\n-}\n-\n-fn build_type_alias_type(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n-    let type_ = cx.tcx.type_of(did).clean(cx);\n-    type_.def_id().and_then(|did| build_ty(cx, did))\n-}\n-\n-crate fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n-    match cx.tcx.def_kind(did) {\n-        DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::Const | DefKind::Static => {\n-            Some(cx.tcx.type_of(did).clean(cx))\n-        }\n-        DefKind::TyAlias => build_type_alias_type(cx, did),\n-        _ => None,\n+        item_type: None,\n     }\n }\n "}, {"sha": "0b979120ff91f1a591a6806d9ba3f2b14eb3ad62", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6163bfdcce6404c5d61d6ab441bf49a831082194/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6163bfdcce6404c5d61d6ab441bf49a831082194/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6163bfdcce6404c5d61d6ab441bf49a831082194", "patch": "@@ -1119,10 +1119,17 @@ impl Clean<Item> for hir::ImplItem<'_> {\n                     }\n                     MethodItem(m, Some(self.defaultness))\n                 }\n-                hir::ImplItemKind::TyAlias(ref ty) => {\n-                    let type_ = ty.clean(cx);\n-                    let item_type = type_.def_id().and_then(|did| inline::build_ty(cx, did));\n-                    TypedefItem(Typedef { type_, generics: Generics::default(), item_type }, true)\n+                hir::ImplItemKind::TyAlias(ref hir_ty) => {\n+                    let type_ = hir_ty.clean(cx);\n+                    let item_type = hir_ty_to_ty(cx.tcx, hir_ty).clean(cx);\n+                    TypedefItem(\n+                        Typedef {\n+                            type_,\n+                            generics: Generics::default(),\n+                            item_type: Some(item_type),\n+                        },\n+                        true,\n+                    )\n                 }\n             };\n             Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx)\n@@ -1268,13 +1275,13 @@ impl Clean<Item> for ty::AssocItem {\n \n                     AssocTypeItem(bounds, ty.clean(cx))\n                 } else {\n+                    // FIXME: when could this happen? ASsociated items in inherent impls?\n                     let type_ = cx.tcx.type_of(self.def_id).clean(cx);\n-                    let item_type = type_.def_id().and_then(|did| inline::build_ty(cx, did));\n                     TypedefItem(\n                         Typedef {\n                             type_,\n                             generics: Generics { params: Vec::new(), where_predicates: Vec::new() },\n-                            item_type,\n+                            item_type: None,\n                         },\n                         true,\n                     )\n@@ -1987,11 +1994,15 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                     bounds: ty.bounds.clean(cx),\n                     generics: ty.generics.clean(cx),\n                 }),\n-                ItemKind::TyAlias(ty, ref generics) => {\n-                    let rustdoc_ty = ty.clean(cx);\n-                    let item_type = rustdoc_ty.def_id().and_then(|did| inline::build_ty(cx, did));\n+                ItemKind::TyAlias(hir_ty, ref generics) => {\n+                    let rustdoc_ty = hir_ty.clean(cx);\n+                    let ty = hir_ty_to_ty(cx.tcx, hir_ty).clean(cx);\n                     TypedefItem(\n-                        Typedef { type_: rustdoc_ty, generics: generics.clean(cx), item_type },\n+                        Typedef {\n+                            type_: rustdoc_ty,\n+                            generics: generics.clean(cx),\n+                            item_type: Some(ty),\n+                        },\n                         false,\n                     )\n                 }"}, {"sha": "cc31461646cc9241a67cbcc9cf82304f8b369069", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6163bfdcce6404c5d61d6ab441bf49a831082194/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6163bfdcce6404c5d61d6ab441bf49a831082194/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6163bfdcce6404c5d61d6ab441bf49a831082194", "patch": "@@ -332,6 +332,10 @@ crate enum ItemKind {\n     ProcMacroItem(ProcMacro),\n     PrimitiveItem(PrimitiveType),\n     AssocConstItem(Type, Option<String>),\n+    /// An associated item in a trait or trait impl.\n+    ///\n+    /// The bounds may be non-empty if there is a `where` clause.\n+    /// The `Option<Type>` is the default concrete type (e.g. `trait Trait { type Target = usize; }`)\n     AssocTypeItem(Vec<GenericBound>, Option<Type>),\n     /// An item that has been stripped by a rustdoc pass\n     StrippedItem(Box<ItemKind>),\n@@ -1804,7 +1808,12 @@ crate struct PathSegment {\n crate struct Typedef {\n     crate type_: Type,\n     crate generics: Generics,\n-    // Type of target item.\n+    /// `type_` can come from either the HIR or from metadata. If it comes from HIR, it may be a type\n+    /// alias instead of the final type. This will always have the final type, regardless of whether\n+    /// `type_` came from HIR or from metadata.\n+    ///\n+    /// If `item_type.is_none()`, `type_` is guarenteed to come from metadata (and therefore hold the\n+    /// final type).\n     crate item_type: Option<Type>,\n }\n "}, {"sha": "f7eb136a754e2e40f770ecd3d9fe8d645a542ff1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6163bfdcce6404c5d61d6ab441bf49a831082194/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6163bfdcce6404c5d61d6ab441bf49a831082194/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6163bfdcce6404c5d61d6ab441bf49a831082194", "patch": "@@ -4303,6 +4303,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                 .filter(|i| i.inner_impl().trait_.is_some())\n                 .find(|i| i.inner_impl().trait_.def_id() == c.deref_trait_did)\n             {\n+                debug!(\"found Deref: {:?}\", impl_);\n                 if let Some((target, real_target)) =\n                     impl_.inner_impl().items.iter().find_map(|item| match *item.kind {\n                         clean::TypedefItem(ref t, true) => Some(match *t {\n@@ -4312,6 +4313,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                         _ => None,\n                     })\n                 {\n+                    debug!(\"found target, real_target: {:?} {:?}\", target, real_target);\n                     let deref_mut = v\n                         .iter()\n                         .filter(|i| i.inner_impl().trait_.is_some())\n@@ -4325,6 +4327,7 @@ fn sidebar_assoc_items(it: &clean::Item) -> String {\n                         })\n                         .and_then(|did| c.impls.get(&did));\n                     if let Some(impls) = inner_impl {\n+                        debug!(\"found inner_impl: {:?}\", impls);\n                         out.push_str(\"<a class=\\\"sidebar-title\\\" href=\\\"#deref-methods\\\">\");\n                         out.push_str(&format!(\n                             \"Methods from {}&lt;Target={}&gt;\","}, {"sha": "e2dac2cf417da334657b39fdb617b55e87c5bb66", "filename": "src/test/rustdoc/deref-typedef.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6163bfdcce6404c5d61d6ab441bf49a831082194/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6163bfdcce6404c5d61d6ab441bf49a831082194/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-typedef.rs?ref=6163bfdcce6404c5d61d6ab441bf49a831082194", "patch": "@@ -1,18 +1,27 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/struct.Bar.html'\n-// @has '-' '//*[@id=\"deref-methods\"]' 'Methods from Deref<Target = FooC>'\n+// @has '-' '//*[@id=\"deref-methods\"]' 'Methods from Deref<Target = FooJ>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_a\"]' 'pub fn foo_a(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_b\"]' 'pub fn foo_b(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_c\"]' 'pub fn foo_c(&self)'\n-// @has '-' '//*[@class=\"sidebar-title\"]' 'Methods from Deref<Target=FooC>'\n+// @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_j\"]' 'pub fn foo_j(&self)'\n+// @has '-' '//*[@class=\"sidebar-title\"]' 'Methods from Deref<Target=FooJ>'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_a\"]' 'foo_a'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_b\"]' 'foo_b'\n // @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_c\"]' 'foo_c'\n+// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_j\"]' 'foo_j'\n \n pub struct FooA;\n pub type FooB = FooA;\n pub type FooC = FooB;\n+pub type FooD = FooC;\n+pub type FooE = FooD;\n+pub type FooF = FooE;\n+pub type FooG = FooF;\n+pub type FooH = FooG;\n+pub type FooI = FooH;\n+pub type FooJ = FooI;\n \n impl FooA {\n     pub fn foo_a(&self) {}\n@@ -26,8 +35,12 @@ impl FooC {\n     pub fn foo_c(&self) {}\n }\n \n+impl FooJ {\n+    pub fn foo_j(&self) {}\n+}\n+\n pub struct Bar;\n impl std::ops::Deref for Bar {\n-    type Target = FooC;\n+    type Target = FooJ;\n     fn deref(&self) -> &Self::Target { unimplemented!() }\n }"}]}