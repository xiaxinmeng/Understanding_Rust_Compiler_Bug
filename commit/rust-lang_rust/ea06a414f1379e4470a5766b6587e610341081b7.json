{"sha": "ea06a414f1379e4470a5766b6587e610341081b7", "node_id": "C_kwDOAAsO6NoAKGVhMDZhNDE0ZjEzNzllNDQ3MGE1NzY2YjY1ODdlNjEwMzQxMDgxYjc", "commit": {"author": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-05-26T16:30:44Z"}, "committer": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-05-26T16:30:44Z"}, "message": "fix", "tree": {"sha": "ddeba358bd4cdcbff9caf369bce4e1eb222e46fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddeba358bd4cdcbff9caf369bce4e1eb222e46fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea06a414f1379e4470a5766b6587e610341081b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea06a414f1379e4470a5766b6587e610341081b7", "html_url": "https://github.com/rust-lang/rust/commit/ea06a414f1379e4470a5766b6587e610341081b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea06a414f1379e4470a5766b6587e610341081b7/comments", "author": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc4d39e5fea64970dded1e6d2132d41435c0ef24", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4d39e5fea64970dded1e6d2132d41435c0ef24", "html_url": "https://github.com/rust-lang/rust/commit/bc4d39e5fea64970dded1e6d2132d41435c0ef24"}], "stats": {"total": 206, "additions": 200, "deletions": 6}, "files": [{"sha": "17deccf8c3930b4fbc6f4ffc7e1077181345a010", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ea06a414f1379e4470a5766b6587e610341081b7/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea06a414f1379e4470a5766b6587e610341081b7/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=ea06a414f1379e4470a5766b6587e610341081b7", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::{is_in_cfg_test, is_in_test_function};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n@@ -30,14 +30,27 @@ declare_clippy_lint! {\n     \"`dbg!` macro is intended as a debugging tool\"\n }\n \n-declare_lint_pass!(DbgMacro => [DBG_MACRO]);\n+#[derive(Copy, Clone)]\n+pub struct DbgMacro {\n+    allow_dbg_in_tests: bool,\n+}\n+\n+impl_lint_pass!(DbgMacro => [DBG_MACRO]);\n+\n+impl DbgMacro {\n+    pub fn new(allow_dbg_in_tests: bool) -> Self {\n+        DbgMacro { allow_dbg_in_tests }\n+    }\n+}\n \n impl LateLintPass<'_> for DbgMacro {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return };\n         if cx.tcx.is_diagnostic_item(sym::dbg_macro, macro_call.def_id) {\n-            // we make an exception for test code\n-            if is_in_test_function(cx.tcx, expr.hir_id) || is_in_cfg_test(cx.tcx, expr.hir_id) {\n+            // allows `dbg!` in test code if allow-dbg-in-test is set to true in clippy.toml\n+            if self.allow_dbg_in_tests\n+                && (is_in_test_function(cx.tcx, expr.hir_id) || is_in_cfg_test(cx.tcx, expr.hir_id))\n+            {\n                 return;\n             }\n             let mut applicability = Applicability::MachineApplicable;"}, {"sha": "ffbf9a65917082096e8e17e002dc9ca93fda20b2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea06a414f1379e4470a5766b6587e610341081b7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea06a414f1379e4470a5766b6587e610341081b7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ea06a414f1379e4470a5766b6587e610341081b7", "patch": "@@ -888,7 +888,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(default_union_representation::DefaultUnionRepresentation));\n     store.register_late_pass(|| Box::new(only_used_in_recursion::OnlyUsedInRecursion));\n     store.register_late_pass(|| Box::new(significant_drop_in_scrutinee::SignificantDropInScrutinee));\n-    store.register_late_pass(|| Box::new(dbg_macro::DbgMacro));\n+    let allow_dbg_in_tests = conf.allow_dbg_in_tests;\n+    store.register_late_pass(move || Box::new(dbg_macro::DbgMacro::new(allow_dbg_in_tests)));\n     let cargo_ignore_publish = conf.cargo_ignore_publish;\n     store.register_late_pass(move || {\n         Box::new(cargo::Cargo {"}, {"sha": "b5c5d35135f90e2ec74a139ecb6cf70d59710842", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea06a414f1379e4470a5766b6587e610341081b7/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea06a414f1379e4470a5766b6587e610341081b7/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=ea06a414f1379e4470a5766b6587e610341081b7", "patch": "@@ -340,6 +340,10 @@ define_Conf! {\n     ///\n     /// Whether `unwrap` should be allowed in test functions\n     (allow_unwrap_in_tests: bool = false),\n+    /// Lint: DBG_MACRO.\n+    ///\n+    /// Whether `dbg!` should be allowed in test functions\n+    (allow_dbg_in_tests: bool = false),\n }\n \n /// Search for the configuration file."}, {"sha": "4296655a040fa23a278eb5a1055ddcbb85fb8c71", "filename": "tests/ui-toml/dbg_macro/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea06a414f1379e4470a5766b6587e610341081b7/tests%2Fui-toml%2Fdbg_macro%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ea06a414f1379e4470a5766b6587e610341081b7/tests%2Fui-toml%2Fdbg_macro%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdbg_macro%2Fclippy.toml?ref=ea06a414f1379e4470a5766b6587e610341081b7", "patch": "@@ -0,0 +1 @@\n+allow-dbg-in-tests = true"}, {"sha": "5d9ce18f631b6b947fe0b6a9f991436b81295317", "filename": "tests/ui-toml/dbg_macro/dbg_macro.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ea06a414f1379e4470a5766b6587e610341081b7/tests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea06a414f1379e4470a5766b6587e610341081b7/tests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.rs?ref=ea06a414f1379e4470a5766b6587e610341081b7", "patch": "@@ -0,0 +1,39 @@\n+// compile-flags: --test\n+#![warn(clippy::dbg_macro)]\n+\n+fn foo(n: u32) -> u32 {\n+    if let Some(n) = dbg!(n.checked_sub(4)) { n } else { n }\n+}\n+\n+fn factorial(n: u32) -> u32 {\n+    if dbg!(n <= 1) {\n+        dbg!(1)\n+    } else {\n+        dbg!(n * factorial(n - 1))\n+    }\n+}\n+\n+fn main() {\n+    dbg!(42);\n+    dbg!(dbg!(dbg!(42)));\n+    foo(3) + dbg!(factorial(4));\n+    dbg!(1, 2, dbg!(3, 4));\n+    dbg!(1, 2, 3, 4, 5);\n+}\n+\n+#[test]\n+pub fn issue8481() {\n+    dbg!(1);\n+}\n+\n+#[cfg(test)]\n+fn foo2() {\n+    dbg!(1);\n+}\n+\n+#[cfg(test)]\n+mod mod1 {\n+    fn func() {\n+        dbg!(1);\n+    }\n+}"}, {"sha": "46efb86dcfc5f5c1384b81628302619c396d53cb", "filename": "tests/ui-toml/dbg_macro/dbg_macro.stderr", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/ea06a414f1379e4470a5766b6587e610341081b7/tests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea06a414f1379e4470a5766b6587e610341081b7/tests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.stderr?ref=ea06a414f1379e4470a5766b6587e610341081b7", "patch": "@@ -0,0 +1,102 @@\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:5:22\n+   |\n+LL |     if let Some(n) = dbg!(n.checked_sub(4)) { n } else { n }\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::dbg-macro` implied by `-D warnings`\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     if let Some(n) = n.checked_sub(4) { n } else { n }\n+   |                      ~~~~~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:9:8\n+   |\n+LL |     if dbg!(n <= 1) {\n+   |        ^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     if n <= 1 {\n+   |        ~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:10:9\n+   |\n+LL |         dbg!(1)\n+   |         ^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |         1\n+   |\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:12:9\n+   |\n+LL |         dbg!(n * factorial(n - 1))\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |         n * factorial(n - 1)\n+   |\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:17:5\n+   |\n+LL |     dbg!(42);\n+   |     ^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     42;\n+   |     ~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:18:5\n+   |\n+LL |     dbg!(dbg!(dbg!(42)));\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     dbg!(dbg!(42));\n+   |     ~~~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:19:14\n+   |\n+LL |     foo(3) + dbg!(factorial(4));\n+   |              ^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     foo(3) + factorial(4);\n+   |              ~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:20:5\n+   |\n+LL |     dbg!(1, 2, dbg!(3, 4));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     (1, 2, dbg!(3, 4));\n+   |     ~~~~~~~~~~~~~~~~~~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:21:5\n+   |\n+LL |     dbg!(1, 2, 3, 4, 5);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     (1, 2, 3, 4, 5);\n+   |     ~~~~~~~~~~~~~~~\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "1d87fd91a2532a179fc8adb499558e6fa7e3ee29", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea06a414f1379e4470a5766b6587e610341081b7/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea06a414f1379e4470a5766b6587e610341081b7/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=ea06a414f1379e4470a5766b6587e610341081b7", "patch": "@@ -1,4 +1,5 @@\n error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of\n+           allow-dbg-in-tests\n            allow-expect-in-tests\n            allow-unwrap-in-tests\n            allowed-scripts"}, {"sha": "e6a65b46d975c80bdeb7eef62144efd45e19b1a7", "filename": "tests/ui/dbg_macro.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ea06a414f1379e4470a5766b6587e610341081b7/tests%2Fui%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea06a414f1379e4470a5766b6587e610341081b7/tests%2Fui%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdbg_macro.stderr?ref=ea06a414f1379e4470a5766b6587e610341081b7", "patch": "@@ -109,5 +109,38 @@ help: ensure to avoid having uses of it in version control\n LL |         2;\n    |         ~\n \n-error: aborting due to 10 previous errors\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:47:5\n+   |\n+LL |     dbg!(1);\n+   |     ^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     1;\n+   |     ~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:52:5\n+   |\n+LL |     dbg!(1);\n+   |     ^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |     1;\n+   |     ~\n+\n+error: `dbg!` macro is intended as a debugging tool\n+  --> $DIR/dbg_macro.rs:58:9\n+   |\n+LL |         dbg!(1);\n+   |         ^^^^^^^\n+   |\n+help: ensure to avoid having uses of it in version control\n+   |\n+LL |         1;\n+   |         ~\n+\n+error: aborting due to 13 previous errors\n "}]}