{"sha": "71fed065f7006f4102ac8130896a407aabb5de82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZmVkMDY1ZjcwMDZmNDEwMmFjODEzMDg5NmE0MDdhYWJiNWRlODI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-05T14:40:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-08T23:20:37Z"}, "message": "extract more helper fns around user substs", "tree": {"sha": "4cae79748659e575773ecbb5c5a99c1eb8973d79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cae79748659e575773ecbb5c5a99c1eb8973d79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71fed065f7006f4102ac8130896a407aabb5de82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71fed065f7006f4102ac8130896a407aabb5de82", "html_url": "https://github.com/rust-lang/rust/commit/71fed065f7006f4102ac8130896a407aabb5de82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71fed065f7006f4102ac8130896a407aabb5de82/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4b711516d0ef53957c1f65590051ed9e43cb4a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b711516d0ef53957c1f65590051ed9e43cb4a9", "html_url": "https://github.com/rust-lang/rust/commit/f4b711516d0ef53957c1f65590051ed9e43cb4a9"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "c969a3ef3485ff1fabe2c221add74a8473b596ca", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/71fed065f7006f4102ac8130896a407aabb5de82/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71fed065f7006f4102ac8130896a407aabb5de82/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=71fed065f7006f4102ac8130896a407aabb5de82", "patch": "@@ -476,7 +476,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 adt_def: adt,\n                                 variant_index: 0,\n                                 substs,\n-                                user_ty: cx.user_annotated_ty_for_adt(expr.hir_id, adt),\n+                                user_ty: cx.user_substs_applied_to_adt(expr.hir_id, adt),\n                                 fields: field_refs(cx, fields),\n                                 base: base.as_ref().map(|base| {\n                                     FruInfo {\n@@ -502,7 +502,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                         adt_def: adt,\n                                         variant_index: index,\n                                         substs,\n-                                        user_ty: cx.user_annotated_ty_for_adt(expr.hir_id, adt),\n+                                        user_ty: cx.user_substs_applied_to_adt(expr.hir_id, adt),\n                                         fields: field_refs(cx, fields),\n                                         base: None,\n                                     }\n@@ -788,30 +788,12 @@ fn user_annotated_ty_for_def(\n         // user.\n         Def::StructCtor(_def_id, CtorKind::Const) |\n         Def::VariantCtor(_def_id, CtorKind::Const) =>\n-            match &cx.tables().node_id_to_type(hir_id).sty {\n-                ty::Adt(adt_def, _) => cx.user_annotated_ty_for_adt(hir_id, adt_def),\n-                sty => bug!(\"unexpected sty: {:?}\", sty),\n-            },\n+            cx.user_substs_applied_to_ty_of_hir_id(hir_id),\n \n         // `Self` is used in expression as a tuple struct constructor or an unit struct constructor\n-        Def::SelfCtor(_) => {\n-            let sty = &cx.tables().node_id_to_type(hir_id).sty;\n-            match sty {\n-                ty::FnDef(ref def_id, _) => {\n-                    Some(cx.tables().user_substs(hir_id)?.unchecked_map(|user_substs| {\n-                        // Here, we just pair a `DefId` with the\n-                        // `user_substs`, so no new types etc are introduced.\n-                        cx.tcx().mk_fn_def(*def_id, user_substs)\n-                    }))\n-                }\n-                ty::Adt(ref adt_def, _) => {\n-                    cx.user_annotated_ty_for_adt(hir_id, adt_def)\n-                }\n-                _ => {\n-                    bug!(\"unexpected sty: {:?}\", sty)\n-                }\n-            }\n-        }\n+        Def::SelfCtor(_) =>\n+            cx.user_substs_applied_to_ty_of_hir_id(hir_id),\n+\n         _ =>\n             bug!(\"user_annotated_ty_for_def: unexpected def {:?} at {:?}\", def, hir_id)\n     }\n@@ -931,7 +913,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         adt_def,\n                         variant_index: adt_def.variant_index_with_id(def_id),\n                         substs,\n-                        user_ty: cx.user_annotated_ty_for_adt(expr.hir_id, adt_def),\n+                        user_ty: cx.user_substs_applied_to_adt(expr.hir_id, adt_def),\n                         fields: vec![],\n                         base: None,\n                     }"}, {"sha": "48a2e67a3dcc3a5dbd2d5c4d718731fcf9e7c37d", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/71fed065f7006f4102ac8130896a407aabb5de82/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71fed065f7006f4102ac8130896a407aabb5de82/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=71fed065f7006f4102ac8130896a407aabb5de82", "patch": "@@ -16,7 +16,7 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n \n     fn tables(&self) -> &ty::TypeckTables<'tcx>;\n \n-    fn user_annotated_ty_for_adt(\n+    fn user_substs_applied_to_adt(\n         &self,\n         hir_id: hir::HirId,\n         adt_def: &'tcx AdtDef,\n@@ -28,4 +28,29 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n             self.tcx().mk_adt(adt_def, user_substs)\n         }))\n     }\n+\n+    /// Looks up the type associated with this hir-id and applies the\n+    /// user-given substitutions; the hir-id must map to a suitable\n+    /// type.\n+    fn user_substs_applied_to_ty_of_hir_id(&self, hir_id: hir::HirId) -> Option<CanonicalTy<'tcx>> {\n+        let user_substs = self.tables().user_substs(hir_id)?;\n+        match &self.tables().node_id_to_type(hir_id).sty {\n+            ty::Adt(adt_def, _) => Some(user_substs.unchecked_map(|user_substs| {\n+                // Ok to call `unchecked_map` because we just pair an\n+                // `AdtDef` with the `user_substs`, so no new types\n+                // etc are introduced.\n+                self.tcx().mk_adt(adt_def, user_substs)\n+            })),\n+            ty::FnDef(def_id, _) => Some(user_substs.unchecked_map(|user_substs| {\n+                // Here, we just pair a `DefId` with the\n+                // `user_substs`, so no new types etc are introduced.\n+                self.tcx().mk_fn_def(*def_id, user_substs)\n+            })),\n+            sty => bug!(\n+                \"sty: {:?} should not have user-substs {:?} recorded \",\n+                sty,\n+                user_substs\n+            ),\n+        }\n+    }\n }"}]}