{"sha": "934127cca51219a19c213429d873d1153af78c1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNDEyN2NjYTUxMjE5YTE5YzIxMzQyOWQ4NzNkMTE1M2FmNzhjMWM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-01T02:18:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-01T02:18:16Z"}, "message": "Rollup merge of #76003 - richkadel:llvm-coverage-map-gen-6b.4, r=wesleywiser\n\nAdds two source span utility functions used in source-based coverage\n\n`span.is_empty()` - returns true if `lo()` and `hi()` are equal. This is\nnot only a convenience, but makes it clear that a `Span` can be empty\n(that is, retrieving the source for an empty `Span` will return an empty\nstring), and codifies the (otherwise undocumented--in the rustc_span\npackage, at least) fact that `Span` is a half-open interval (where\n`hi()` is the open end).\n\n`source_map.lookup_file_span()` - returns an enclosing `Span`\nrepresenting the start and end positions of the file enclosing the given\n`BytePos`. This gives developers a clear way to quickly determine if any\nany other `BytePos` or `Span` is also from the same file (for example,\nby simply calling `file_span.contains(span)`).\n\nThis results in much simpler code and is much more runtime efficient\ncompared with the obvious alternative: calling `source_map.lookup_line()`\nfor any two `Span`'s byte positions, handle both arms of the `Result`\n(both contain the file), and then compare files. It is also more\nefficient than the non-public method `lookup_source_file_idx()` for each\n`BytePos`, because, while comparing the internal source file indexes\nwould be efficient, looking up the source file index for every `BytePos`\nor `Span` to be compared requires a binary search (worst case\nperformance being O(log n) for every lookup).\n\n`source_map.lookup_file_span()` performs the binary search only once, to\nget the `file_span` result that can be used to compare to any number of\nother `BytePos` or `Span` values and those comparisons are always O(1).\n\nThis PR was split out from PR #75828 .\n\nr? @tmandry\nFYI: @wesleywiser", "tree": {"sha": "b79106178405a9b4d14b17d9ae628c070f43520f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b79106178405a9b4d14b17d9ae628c070f43520f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/934127cca51219a19c213429d873d1153af78c1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfTa9oCRBK7hj4Ov3rIwAAdHIIAK2yDVxt5gsgLy37LZ2n34xu\n3b8xWgToLk6yuvPFUFRHZ8s1mu80BdLH50uPn2Tfdr2NLT2u0Ntdysjx32QfndTV\n7zTWgQLua4ixLpFgUKQCn253ebzLl5i9vNwSrLStXiBvXIvSDliL+C/9X6kMxcDp\ni8+f/9hzihDjNsSNJ+yJm7qYIJVGoo7t2bCKpVpHesH78hgH5xb4tKzRNTrwfByE\n2US19sPwUifrrnH1BM+IHXSJ+tzHHMeHWrlTwB00Bq60UL8S7JW9YIXtjb2iV87T\nFhcwR7ywwOPrPCbmCi3AKU0x2/zjA9PWISn+HWCaKxVb21FPjEP/TiMMX8CmOzc=\n=YoI/\n-----END PGP SIGNATURE-----\n", "payload": "tree b79106178405a9b4d14b17d9ae628c070f43520f\nparent 6d834a4046f9591ea9678ce9be2adbbb4a9aeedd\nparent 7225f668874779f9791fec778e2502e45b311e37\nauthor Tyler Mandry <tmandry@gmail.com> 1598926696 -0700\ncommitter GitHub <noreply@github.com> 1598926696 -0700\n\nRollup merge of #76003 - richkadel:llvm-coverage-map-gen-6b.4, r=wesleywiser\n\nAdds two source span utility functions used in source-based coverage\n\n`span.is_empty()` - returns true if `lo()` and `hi()` are equal. This is\nnot only a convenience, but makes it clear that a `Span` can be empty\n(that is, retrieving the source for an empty `Span` will return an empty\nstring), and codifies the (otherwise undocumented--in the rustc_span\npackage, at least) fact that `Span` is a half-open interval (where\n`hi()` is the open end).\n\n`source_map.lookup_file_span()` - returns an enclosing `Span`\nrepresenting the start and end positions of the file enclosing the given\n`BytePos`. This gives developers a clear way to quickly determine if any\nany other `BytePos` or `Span` is also from the same file (for example,\nby simply calling `file_span.contains(span)`).\n\nThis results in much simpler code and is much more runtime efficient\ncompared with the obvious alternative: calling `source_map.lookup_line()`\nfor any two `Span`'s byte positions, handle both arms of the `Result`\n(both contain the file), and then compare files. It is also more\nefficient than the non-public method `lookup_source_file_idx()` for each\n`BytePos`, because, while comparing the internal source file indexes\nwould be efficient, looking up the source file index for every `BytePos`\nor `Span` to be compared requires a binary search (worst case\nperformance being O(log n) for every lookup).\n\n`source_map.lookup_file_span()` performs the binary search only once, to\nget the `file_span` result that can be used to compare to any number of\nother `BytePos` or `Span` values and those comparisons are always O(1).\n\nThis PR was split out from PR #75828 .\n\nr? @tmandry\nFYI: @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/934127cca51219a19c213429d873d1153af78c1c", "html_url": "https://github.com/rust-lang/rust/commit/934127cca51219a19c213429d873d1153af78c1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/934127cca51219a19c213429d873d1153af78c1c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d834a4046f9591ea9678ce9be2adbbb4a9aeedd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d834a4046f9591ea9678ce9be2adbbb4a9aeedd", "html_url": "https://github.com/rust-lang/rust/commit/6d834a4046f9591ea9678ce9be2adbbb4a9aeedd"}, {"sha": "7225f668874779f9791fec778e2502e45b311e37", "url": "https://api.github.com/repos/rust-lang/rust/commits/7225f668874779f9791fec778e2502e45b311e37", "html_url": "https://github.com/rust-lang/rust/commit/7225f668874779f9791fec778e2502e45b311e37"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "b478a1d15c5065cc574c0e49b8d141f5319c13c0", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/934127cca51219a19c213429d873d1153af78c1c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934127cca51219a19c213429d873d1153af78c1c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=934127cca51219a19c213429d873d1153af78c1c", "patch": "@@ -400,6 +400,13 @@ impl Span {\n         span.with_lo(span.hi)\n     }\n \n+    #[inline]\n+    /// Returns true if hi == lo\n+    pub fn is_empty(&self) -> bool {\n+        let span = self.data();\n+        span.hi == span.lo\n+    }\n+\n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n     pub fn substitute_dummy(self, other: Span) -> Span {\n         if self.is_dummy() { other } else { self }"}, {"sha": "37596b8ef6fcaadf1639eee2ad32b07f8f97a39a", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/934127cca51219a19c213429d873d1153af78c1c/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934127cca51219a19c213429d873d1153af78c1c/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=934127cca51219a19c213429d873d1153af78c1c", "patch": "@@ -487,6 +487,15 @@ impl SourceMap {\n         }\n     }\n \n+    /// Returns a new `Span` covering the start and end `BytePos`s of the file containing the given\n+    /// `pos`. This can be used to quickly determine if another `BytePos` or `Span` is from the same\n+    /// file.\n+    pub fn lookup_file_span(&self, pos: BytePos) -> Span {\n+        let idx = self.lookup_source_file_idx(pos);\n+        let SourceFile { start_pos, end_pos, .. } = *(*self.files.borrow().source_files)[idx];\n+        Span::with_root_ctxt(start_pos, end_pos)\n+    }\n+\n     /// Returns `Some(span)`, a union of the LHS and RHS span. The LHS must precede the RHS. If\n     /// there are gaps between LHS and RHS, the resulting union will cross these gaps.\n     /// For this to work,"}]}