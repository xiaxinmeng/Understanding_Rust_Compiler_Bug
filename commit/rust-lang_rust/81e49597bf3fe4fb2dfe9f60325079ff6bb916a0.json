{"sha": "81e49597bf3fe4fb2dfe9f60325079ff6bb916a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZTQ5NTk3YmYzZmU0ZmIyZGZlOWY2MDMyNTA3OWZmNmJiOTE2YTA=", "commit": {"author": {"name": "penpalperson", "email": "16357077+penpalperson@users.noreply.github.com", "date": "2018-01-29T04:55:05Z"}, "committer": {"name": "penpalperson", "email": "16357077+penpalperson@users.noreply.github.com", "date": "2018-01-29T04:55:05Z"}, "message": "Added inline to fmt for debug implementations of primitives.", "tree": {"sha": "1e20ef8f6bb4acc5592f26c5959c60e5ede96f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e20ef8f6bb4acc5592f26c5959c60e5ede96f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0", "html_url": "https://github.com/rust-lang/rust/commit/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0/comments", "author": null, "committer": null, "parents": [{"sha": "771873c84137842c78cfc39625613b95867d21ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/771873c84137842c78cfc39625613b95867d21ef", "html_url": "https://github.com/rust-lang/rust/commit/771873c84137842c78cfc39625613b95867d21ef"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "28f1da27bdb57670214cd4ef4b8af871cb3c3c65", "filename": "src/libcore/array.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=81e49597bf3fe4fb2dfe9f60325079ff6bb916a0", "patch": "@@ -185,6 +185,7 @@ macro_rules! array_impls {\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<T: fmt::Debug> fmt::Debug for [T; $N] {\n+                #[inline]\n                 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                     fmt::Debug::fmt(&&self[..], f)\n                 }"}, {"sha": "24ffe8c688885b5460aafdbb2ffb71b2becef429", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=81e49597bf3fe4fb2dfe9f60325079ff6bb916a0", "patch": "@@ -125,6 +125,7 @@ macro_rules! floating {\n     ($ty:ident) => (\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Debug for $ty {\n+            #[inline]\n             fn fmt(&self, fmt: &mut Formatter) -> Result {\n                 float_to_decimal_common(fmt, self, true, 1)\n             }"}, {"sha": "b4d23d153d80098e832c97de61bde79045912a9d", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=81e49597bf3fe4fb2dfe9f60325079ff6bb916a0", "patch": "@@ -1558,10 +1558,12 @@ macro_rules! fmt_refs {\n         $(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<'a, T: ?Sized + $tr> $tr for &'a T {\n+            #[inline]\n             fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n         }\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<'a, T: ?Sized + $tr> $tr for &'a mut T {\n+            #[inline]\n             fn fmt(&self, f: &mut Formatter) -> Result { $tr::fmt(&**self, f) }\n         }\n         )*\n@@ -1586,6 +1588,7 @@ impl Display for ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for bool {\n+    #[inline]\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         Display::fmt(self, f)\n     }\n@@ -1600,6 +1603,7 @@ impl Display for bool {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for str {\n+    #[inline]\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.write_char('\"')?;\n         let mut from = 0;\n@@ -1628,6 +1632,7 @@ impl Display for str {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for char {\n+    #[inline]\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.write_char('\\'')?;\n         for c in self.escape_debug() {\n@@ -1701,10 +1706,12 @@ impl<'a, T: ?Sized> Pointer for &'a mut T {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Debug for *const T {\n+    #[inline]\n     fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Debug for *mut T {\n+    #[inline]\n     fn fmt(&self, f: &mut Formatter) -> Result { Pointer::fmt(self, f) }\n }\n \n@@ -1718,6 +1725,7 @@ macro_rules! tuple {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<$($name:Debug),*> Debug for ($($name,)*) where last_type!($($name,)+): ?Sized {\n             #[allow(non_snake_case, unused_assignments, deprecated)]\n+            #[inline]\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 let mut builder = f.debug_tuple(\"\");\n                 let ($(ref $name,)*) = *self;\n@@ -1741,13 +1749,15 @@ tuple! { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Debug> Debug for [T] {\n+    #[inline]\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.debug_list().entries(self.iter()).finish()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for () {\n+    #[inline]\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         f.pad(\"()\")\n     }"}, {"sha": "2992e7cf8db341cf0fde7730212752b19ed70096", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=81e49597bf3fe4fb2dfe9f60325079ff6bb916a0", "patch": "@@ -157,6 +157,7 @@ macro_rules! debug {\n     ($T:ident) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl fmt::Debug for $T {\n+            #[inline]\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 fmt::Display::fmt(self, f)\n             }"}, {"sha": "3e162afd6490940913beef63ad28fa4c416f1ea6", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81e49597bf3fe4fb2dfe9f60325079ff6bb916a0/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=81e49597bf3fe4fb2dfe9f60325079ff6bb916a0", "patch": "@@ -2202,6 +2202,7 @@ macro_rules! fnptr_impls_safety_abi {\n \n         #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n         impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n+            #[inline]\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 fmt::Pointer::fmt(&(*self as *const ()), f)\n             }"}]}