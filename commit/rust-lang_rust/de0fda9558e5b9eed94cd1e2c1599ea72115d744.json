{"sha": "de0fda9558e5b9eed94cd1e2c1599ea72115d744", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMGZkYTk1NThlNWI5ZWVkOTRjZDFlMmMxNTk5ZWE3MjExNWQ3NDQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-16T16:57:31Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-28T02:16:34Z"}, "message": "Address review comments\n\n- Add back `HirIdVec`, with a comment that it will soon be used.\n- Add back `*_region` functions, with a comment they may soon be used.\n- Remove `-Z borrowck_stats` completely. It didn't do anything.\n- Remove `make_nop` completely.\n- Add back `current_loc`, which is used by an out-of-tree tool.\n- Fix style nits\n- Remove `AtomicCell` with `cfg(parallel_compiler)` for consistency.", "tree": {"sha": "942ff681716427b047195805b3e7c578a5d012be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/942ff681716427b047195805b3e7c578a5d012be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de0fda9558e5b9eed94cd1e2c1599ea72115d744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de0fda9558e5b9eed94cd1e2c1599ea72115d744", "html_url": "https://github.com/rust-lang/rust/commit/de0fda9558e5b9eed94cd1e2c1599ea72115d744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de0fda9558e5b9eed94cd1e2c1599ea72115d744/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441dc3640a408e612064464b0c6308bdca6c16ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/441dc3640a408e612064464b0c6308bdca6c16ce", "html_url": "https://github.com/rust-lang/rust/commit/441dc3640a408e612064464b0c6308bdca6c16ce"}], "stats": {"total": 172, "additions": 154, "deletions": 18}, "files": [{"sha": "af9d3d2dc260aec0fc1b3220a5c498b8f1c526a5", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=de0fda9558e5b9eed94cd1e2c1599ea72115d744", "patch": "@@ -703,6 +703,74 @@ pub mod coverageinfo {\n                 kind: RegionKind::CodeRegion,\n             }\n         }\n+\n+        // This function might be used in the future; the LLVM API is still evolving, as is coverage\n+        // support.\n+        #[allow(dead_code)]\n+        crate fn expansion_region(\n+            file_id: u32,\n+            expanded_file_id: u32,\n+            start_line: u32,\n+            start_col: u32,\n+            end_line: u32,\n+            end_col: u32,\n+        ) -> Self {\n+            Self {\n+                counter: coverage_map::Counter::zero(),\n+                file_id,\n+                expanded_file_id,\n+                start_line,\n+                start_col,\n+                end_line,\n+                end_col,\n+                kind: RegionKind::ExpansionRegion,\n+            }\n+        }\n+\n+        // This function might be used in the future; the LLVM API is still evolving, as is coverage\n+        // support.\n+        #[allow(dead_code)]\n+        crate fn skipped_region(\n+            file_id: u32,\n+            start_line: u32,\n+            start_col: u32,\n+            end_line: u32,\n+            end_col: u32,\n+        ) -> Self {\n+            Self {\n+                counter: coverage_map::Counter::zero(),\n+                file_id,\n+                expanded_file_id: 0,\n+                start_line,\n+                start_col,\n+                end_line,\n+                end_col,\n+                kind: RegionKind::SkippedRegion,\n+            }\n+        }\n+\n+        // This function might be used in the future; the LLVM API is still evolving, as is coverage\n+        // support.\n+        #[allow(dead_code)]\n+        crate fn gap_region(\n+            counter: coverage_map::Counter,\n+            file_id: u32,\n+            start_line: u32,\n+            start_col: u32,\n+            end_line: u32,\n+            end_col: u32,\n+        ) -> Self {\n+            Self {\n+                counter,\n+                file_id,\n+                expanded_file_id: 0,\n+                start_line,\n+                start_col,\n+                end_line,\n+                end_col: ((1 as u32) << 31) | end_col,\n+                kind: RegionKind::GapRegion,\n+            }\n+        }\n     }\n }\n "}, {"sha": "357686342bed0a59ef3211c838acf825e6c6467d", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=de0fda9558e5b9eed94cd1e2c1599ea72115d744", "patch": "@@ -236,8 +236,6 @@ cfg_if! {\n \n         pub use std::sync::atomic::{AtomicBool, AtomicUsize, AtomicU32, AtomicU64};\n \n-        pub use crossbeam_utils::atomic::AtomicCell;\n-\n         pub use std::sync::Arc as Lrc;\n         pub use std::sync::Weak as Weak;\n "}, {"sha": "c8891734ccec8728d0775e3e4acfd6d08c964fd5", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=de0fda9558e5b9eed94cd1e2c1599ea72115d744", "patch": "@@ -157,10 +157,9 @@ impl<'a, 'b> RunCompiler<'a, 'b> {\n         self\n     }\n     /// Used by RLS.\n-    pub fn set_emitter(&mut self, emitter: Option<Box<dyn Write + Send>>) -> &mut Self\n-    {\n-           self.emitter = emitter;\n-           self\n+    pub fn set_emitter(&mut self, emitter: Option<Box<dyn Write + Send>>) -> &mut Self {\n+        self.emitter = emitter;\n+        self\n     }\n     /// Used by RLS.\n     pub fn set_file_loader("}, {"sha": "d91c1813da3ba5da5c2ed2aa445a03019cbd3471", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=de0fda9558e5b9eed94cd1e2c1599ea72115d744", "patch": "@@ -2206,7 +2206,7 @@ impl PrimTy {\n         Self::Str,\n     ];\n \n-    /// [`PrimTy::name`], but returns a &str instead of a symbol.\n+    /// Like [`PrimTy::name`], but returns a &str instead of a symbol.\n     ///\n     /// Used by rustdoc.\n     pub fn name_str(self) -> &'static str {"}, {"sha": "0b25ebc27bd3f9d671432daa8da9548b0a5633ae", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=de0fda9558e5b9eed94cd1e2c1599ea72115d744", "patch": "@@ -1,4 +1,5 @@\n use crate::def_id::{LocalDefId, CRATE_DEF_INDEX};\n+use rustc_index::vec::IndexVec;\n use std::fmt;\n \n /// Uniquely identifies a node in the HIR of the current crate. It is\n@@ -61,3 +62,70 @@ pub const CRATE_HIR_ID: HirId = HirId {\n     owner: LocalDefId { local_def_index: CRATE_DEF_INDEX },\n     local_id: ItemLocalId::from_u32(0),\n };\n+\n+/// N.B. This collection is currently unused, but will be used by #72015 and future PRs.\n+#[derive(Clone, Default, Debug, Encodable, Decodable)]\n+pub struct HirIdVec<T> {\n+    map: IndexVec<LocalDefId, IndexVec<ItemLocalId, T>>,\n+}\n+\n+impl<T> HirIdVec<T> {\n+    pub fn push_owner(&mut self, id: LocalDefId) {\n+        self.map.ensure_contains_elem(id, IndexVec::new);\n+    }\n+\n+    pub fn push(&mut self, id: HirId, value: T) {\n+        if id.local_id == ItemLocalId::from_u32(0) {\n+            self.push_owner(id.owner);\n+        }\n+        let submap = &mut self.map[id.owner];\n+        let _ret_id = submap.push(value);\n+        debug_assert_eq!(_ret_id, id.local_id);\n+    }\n+\n+    pub fn push_sparse(&mut self, id: HirId, value: T)\n+    where\n+        T: Default,\n+    {\n+        self.map.ensure_contains_elem(id.owner, IndexVec::new);\n+        let submap = &mut self.map[id.owner];\n+        let i = id.local_id.index();\n+        let len = submap.len();\n+        if i >= len {\n+            submap.extend(std::iter::repeat_with(T::default).take(i - len + 1));\n+        }\n+        submap[id.local_id] = value;\n+    }\n+\n+    pub fn get(&self, id: HirId) -> Option<&T> {\n+        self.map.get(id.owner)?.get(id.local_id)\n+    }\n+\n+    pub fn get_owner(&self, id: LocalDefId) -> &IndexVec<ItemLocalId, T> {\n+        &self.map[id]\n+    }\n+\n+    pub fn iter(&self) -> impl Iterator<Item = &T> {\n+        self.map.iter().flat_map(|la| la.iter())\n+    }\n+\n+    pub fn iter_enumerated(&self) -> impl Iterator<Item = (HirId, &T)> {\n+        self.map.iter_enumerated().flat_map(|(owner, la)| {\n+            la.iter_enumerated().map(move |(local_id, attr)| (HirId { owner, local_id }, attr))\n+        })\n+    }\n+}\n+\n+impl<T> std::ops::Index<HirId> for HirIdVec<T> {\n+    type Output = T;\n+\n+    fn index(&self, id: HirId) -> &T {\n+        &self.map[id.owner][id.local_id]\n+    }\n+}\n+\n+impl<T> std::ops::IndexMut<HirId> for HirIdVec<T> {\n+    fn index_mut(&mut self, id: HirId) -> &mut T {\n+        &mut self.map[id.owner][id.local_id]\n+    }\n+}"}, {"sha": "683c1df783e63e2d85e1cb4126755bfb6f43484e", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=de0fda9558e5b9eed94cd1e2c1599ea72115d744", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> TypeVariableValue<'tcx> {\n     }\n }\n \n-pub(crate) struct Instantiate {}\n+pub(crate) struct Instantiate;\n \n pub(crate) struct Delegate;\n \n@@ -222,7 +222,7 @@ impl<'tcx> TypeVariableTable<'_, 'tcx> {\n         // Hack: we only need this so that `types_escaping_snapshot`\n         // can see what has been unified; see the Delegate impl for\n         // more details.\n-        self.undo_log.push(Instantiate {});\n+        self.undo_log.push(Instantiate);\n     }\n \n     /// Creates a new type variable."}, {"sha": "1653d3bdba16e746803d9511d06332d0f719469f", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=de0fda9558e5b9eed94cd1e2c1599ea72115d744", "patch": "@@ -471,7 +471,6 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(ast_json, true);\n     untracked!(ast_json_noexpand, true);\n     untracked!(borrowck, String::from(\"other\"));\n-    untracked!(borrowck_stats, true);\n     untracked!(deduplicate_diagnostics, true);\n     untracked!(dep_tasks, true);\n     untracked!(dont_buffer_diagnostics, true);"}, {"sha": "18d4d71e517ea36af7afd1adcb8402ef09e0f7fd", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=de0fda9558e5b9eed94cd1e2c1599ea72115d744", "patch": "@@ -226,6 +226,18 @@ impl<'mir, 'tcx, Tag> Frame<'mir, 'tcx, Tag> {\n }\n \n impl<'mir, 'tcx, Tag, Extra> Frame<'mir, 'tcx, Tag, Extra> {\n+    /// Get the current location within the Frame.\n+    ///\n+    /// If this is `Err`, we are not currently executing any particular statement in\n+    /// this frame (can happen e.g. during frame initialization, and during unwinding on\n+    /// frames without cleanup code).\n+    /// We basically abuse `Result` as `Either`.\n+    ///\n+    /// Used by priroda.\n+    pub fn current_loc(&self) -> Result<mir::Location, Span> {\n+        self.loc\n+    }\n+\n     /// Return the `SourceInfo` of the current instruction.\n     pub fn current_source_info(&self) -> Option<&mir::SourceInfo> {\n         self.loc.ok().map(|loc| self.body.source_info(loc))"}, {"sha": "d09195f53aecc6c0cde6c071debcfd738ad569a9", "filename": "compiler/rustc_mir/src/util/patch.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpatch.rs?ref=de0fda9558e5b9eed94cd1e2c1599ea72115d744", "patch": "@@ -13,7 +13,6 @@ pub struct MirPatch<'tcx> {\n     new_locals: Vec<LocalDecl<'tcx>>,\n     resume_block: BasicBlock,\n     next_local: usize,\n-    make_nop: Vec<Location>,\n }\n \n impl<'tcx> MirPatch<'tcx> {\n@@ -25,7 +24,6 @@ impl<'tcx> MirPatch<'tcx> {\n             new_locals: vec![],\n             next_local: body.local_decls.len(),\n             resume_block: START_BLOCK,\n-            make_nop: vec![],\n         };\n \n         // make sure the MIR we create has a resume block. It is\n@@ -118,10 +116,6 @@ impl<'tcx> MirPatch<'tcx> {\n     }\n \n     pub fn apply(self, body: &mut Body<'tcx>) {\n-        debug!(\"MirPatch: make nops at: {:?}\", self.make_nop);\n-        for loc in self.make_nop {\n-            body.make_statement_nop(loc);\n-        }\n         debug!(\n             \"MirPatch: {:?} new temps, starting from index {}: {:?}\",\n             self.new_locals.len(),"}, {"sha": "e50972e59a72226343693dc3412e9478579dabd7", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0fda9558e5b9eed94cd1e2c1599ea72115d744/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=de0fda9558e5b9eed94cd1e2c1599ea72115d744", "patch": "@@ -906,8 +906,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         (default: no)\"),\n     borrowck: String = (\"migrate\".to_string(), parse_string, [UNTRACKED],\n         \"select which borrowck is used (`mir` or `migrate`) (default: `migrate`)\"),\n-    borrowck_stats: bool = (false, parse_bool, [UNTRACKED],\n-        \"gather borrowck statistics (default: no)\"),\n     cgu_partitioning_strategy: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the codegen unit partitioning strategy to use\"),\n     chalk: bool = (false, parse_bool, [TRACKED],"}]}