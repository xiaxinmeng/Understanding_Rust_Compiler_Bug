{"sha": "0128be9ad70970829420ed498d2f2943a72e1b62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMjhiZTlhZDcwOTcwODI5NDIwZWQ0OThkMmYyOTQzYTcyZTFiNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-19T11:21:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-19T11:21:09Z"}, "message": "Auto merge of #39871 - binarycrusader:issue-39868, r=alexcrichton\n\nlibstd needs update for pending libc change\n\nThis  updates libstd to accommodate the fixes made in https://github.com/rust-lang/libc/pull/523\n\nFixes #39868", "tree": {"sha": "c09e714ab539ac9d39fdbc67d16bef7410b5cb0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c09e714ab539ac9d39fdbc67d16bef7410b5cb0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0128be9ad70970829420ed498d2f2943a72e1b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0128be9ad70970829420ed498d2f2943a72e1b62", "html_url": "https://github.com/rust-lang/rust/commit/0128be9ad70970829420ed498d2f2943a72e1b62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0128be9ad70970829420ed498d2f2943a72e1b62/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aff6161a9e54c767de403a61791df8cfe530009c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff6161a9e54c767de403a61791df8cfe530009c", "html_url": "https://github.com/rust-lang/rust/commit/aff6161a9e54c767de403a61791df8cfe530009c"}, {"sha": "68a9d8bf217572ee32bce12e311d5849d149b6b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a9d8bf217572ee32bce12e311d5849d149b6b4", "html_url": "https://github.com/rust-lang/rust/commit/68a9d8bf217572ee32bce12e311d5849d149b6b4"}], "stats": {"total": 40, "additions": 10, "deletions": 30}, "files": [{"sha": "7a3754f2bb5e65eb39adacb189c3626173032177", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=0128be9ad70970829420ed498d2f2943a72e1b62", "patch": "@@ -1 +1 @@\n-Subproject commit 8d8264b967a31a1a8cebe2a05110564106b6e909\n+Subproject commit 7a3754f2bb5e65eb39adacb189c3626173032177"}, {"sha": "e78928c266792adb7006cab1b1857ac318aab0e8", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 9, "deletions": 29, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0128be9ad70970829420ed498d2f2943a72e1b62/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0128be9ad70970829420ed498d2f2943a72e1b62/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=0128be9ad70970829420ed498d2f2943a72e1b62", "patch": "@@ -483,41 +483,21 @@ pub fn home_dir() -> Option<PathBuf> {\n                   target_os = \"nacl\",\n                   target_os = \"emscripten\")))]\n     unsafe fn fallback() -> Option<OsString> {\n-        #[cfg(not(target_os = \"solaris\"))]\n-        unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n-                              buf: &mut Vec<c_char>) -> Option<()> {\n-            let mut result = ptr::null_mut();\n-            match libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n-                                   buf.capacity(),\n-                                   &mut result) {\n-                0 if !result.is_null() => Some(()),\n-                _ => None\n-            }\n-        }\n-\n-        #[cfg(target_os = \"solaris\")]\n-        unsafe fn getpwduid_r(me: libc::uid_t, passwd: &mut libc::passwd,\n-                              buf: &mut Vec<c_char>) -> Option<()> {\n-            // getpwuid_r semantics is different on Illumos/Solaris:\n-            // http://illumos.org/man/3c/getpwuid_r\n-            let result = libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n-                                          buf.capacity());\n-            if result.is_null() { None } else { Some(()) }\n-        }\n-\n         let amt = match libc::sysconf(libc::_SC_GETPW_R_SIZE_MAX) {\n             n if n < 0 => 512 as usize,\n             n => n as usize,\n         };\n         let mut buf = Vec::with_capacity(amt);\n         let mut passwd: libc::passwd = mem::zeroed();\n-\n-        if getpwduid_r(libc::getuid(), &mut passwd, &mut buf).is_some() {\n-            let ptr = passwd.pw_dir as *const _;\n-            let bytes = CStr::from_ptr(ptr).to_bytes().to_vec();\n-            Some(OsStringExt::from_vec(bytes))\n-        } else {\n-            None\n+        let mut result = ptr::null_mut();\n+        match libc::getpwuid_r(libc::getuid(), &mut passwd, buf.as_mut_ptr(),\n+                               buf.capacity(), &mut result) {\n+            0 if !result.is_null() => {\n+                let ptr = passwd.pw_dir as *const _;\n+                let bytes = CStr::from_ptr(ptr).to_bytes().to_vec();\n+                Some(OsStringExt::from_vec(bytes))\n+            },\n+            _ => None,\n         }\n     }\n }"}]}