{"sha": "10f217159b7ee7492fceb369aab179110affe2db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZjIxNzE1OWI3ZWU3NDkyZmNlYjM2OWFhYjE3OTExMGFmZmUyZGI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-06-24T19:51:49Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-07-04T21:36:07Z"}, "message": "Rename `bloom` to `hashes`", "tree": {"sha": "5a7dba07c659951b5ba1b57005a2d71489610f4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a7dba07c659951b5ba1b57005a2d71489610f4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10f217159b7ee7492fceb369aab179110affe2db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10f217159b7ee7492fceb369aab179110affe2db", "html_url": "https://github.com/rust-lang/rust/commit/10f217159b7ee7492fceb369aab179110affe2db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10f217159b7ee7492fceb369aab179110affe2db/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6aea935cf70bb79ed88dc891b517fc5130ab398", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6aea935cf70bb79ed88dc891b517fc5130ab398", "html_url": "https://github.com/rust-lang/rust/commit/c6aea935cf70bb79ed88dc891b517fc5130ab398"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "020abbf94c5b1fbf11db77e6dba7710e2016721d", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10f217159b7ee7492fceb369aab179110affe2db/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f217159b7ee7492fceb369aab179110affe2db/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=10f217159b7ee7492fceb369aab179110affe2db", "patch": "@@ -148,14 +148,14 @@ type EvalSnapshot<'a, 'mir, 'tcx, M>\n pub(crate) struct InfiniteLoopDetector<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// The set of all `EvalSnapshot` *hashes* observed by this detector.\n     ///\n-    /// Not a proper bloom filter.\n-    bloom: FxHashSet<u64>,\n+    /// When a collision occurs in this table, we store the full snapshot in `snapshots`.\n+    hashes: FxHashSet<u64>,\n \n     /// The set of all `EvalSnapshot`s observed by this detector.\n     ///\n-    /// An `EvalSnapshot` will only be fully cloned once it has caused a collision\n-    /// in `bloom`. As a result, the detector must observe *two* full cycles of\n-    /// an infinite loop before it triggers.\n+    /// An `EvalSnapshot` will only be fully cloned once it has caused a collision in `hashes`. As\n+    /// a result, the detector must observe at least *two* full cycles of an infinite loop before\n+    /// it triggers.\n     snapshots: FxHashSet<EvalSnapshot<'a, 'mir, 'tcx, M>>,\n }\n \n@@ -165,7 +165,7 @@ impl<'a, 'mir, 'tcx, M> Default for InfiniteLoopDetector<'a, 'mir, 'tcx, M>\n {\n     fn default() -> Self {\n         InfiniteLoopDetector {\n-            bloom: FxHashSet::default(),\n+            hashes: FxHashSet::default(),\n             snapshots: FxHashSet::default(),\n         }\n     }\n@@ -177,7 +177,7 @@ impl<'a, 'mir, 'tcx, M> InfiniteLoopDetector<'a, 'mir, 'tcx, M>\n {\n     /// Returns `true` if the loop detector has not yet observed a snapshot.\n     pub fn is_empty(&self) -> bool {\n-        self.bloom.is_empty()\n+        self.hashes.is_empty()\n     }\n \n     pub fn observe_and_analyze(\n@@ -192,7 +192,7 @@ impl<'a, 'mir, 'tcx, M> InfiniteLoopDetector<'a, 'mir, 'tcx, M>\n         snapshot.hash(&mut fx);\n         let hash = fx.finish();\n \n-        if self.bloom.insert(hash) {\n+        if self.hashes.insert(hash) {\n             // No collision\n             return Ok(())\n         }"}, {"sha": "2025db4871824936917be64047ff168a0d013396", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10f217159b7ee7492fceb369aab179110affe2db/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10f217159b7ee7492fceb369aab179110affe2db/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=10f217159b7ee7492fceb369aab179110affe2db", "patch": "@@ -16,10 +16,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     pub fn is_loop_detector_scheduled(&self) -> bool {\n         /// The number of steps between loop detector snapshots.\n         /// Should be a power of two for performance reasons.\n-        const LOOP_SNAPSHOT_PERIOD: isize = 1 << 8;\n+        const DETECTOR_SNAPSHOT_PERIOD: isize = 1 << 8;\n \n         let steps = self.steps_until_detector_enabled;\n-        steps <= 0 && steps % LOOP_SNAPSHOT_PERIOD == 0\n+        steps <= 0 && steps % DETECTOR_SNAPSHOT_PERIOD == 0\n     }\n \n     pub fn inc_step_counter_and_detect_loops(&mut self, n: usize) -> EvalResult<'tcx, ()> {"}]}