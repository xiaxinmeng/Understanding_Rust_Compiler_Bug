{"sha": "85ab34826a606308451bf8b47143b64f224bfaf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YWIzNDgyNmE2MDYzMDg0NTFiZjhiNDcxNDNiNjRmMjI0YmZhZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-09T10:42:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-09T10:42:02Z"}, "message": "Auto merge of #1144 - RalfJung:panic-location, r=RalfJung\n\ntest that unwrap gets us the right panic location\n\nMake sure this stuff works in Miri as well -- basically, an integration test for `track_caller` and the panic machinery (we already have more focused tests as well).", "tree": {"sha": "e0a45998e721b6de0e40a57a03597782628e9194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0a45998e721b6de0e40a57a03597782628e9194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85ab34826a606308451bf8b47143b64f224bfaf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85ab34826a606308451bf8b47143b64f224bfaf9", "html_url": "https://github.com/rust-lang/rust/commit/85ab34826a606308451bf8b47143b64f224bfaf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85ab34826a606308451bf8b47143b64f224bfaf9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71a7b9bd2640a9473bf6e8217b7f20da0ce587a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a7b9bd2640a9473bf6e8217b7f20da0ce587a0", "html_url": "https://github.com/rust-lang/rust/commit/71a7b9bd2640a9473bf6e8217b7f20da0ce587a0"}, {"sha": "833816dd359edd79a103a32039f8aa24f8e051d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/833816dd359edd79a103a32039f8aa24f8e051d9", "html_url": "https://github.com/rust-lang/rust/commit/833816dd359edd79a103a32039f8aa24f8e051d9"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "d1b498871e87bf400dd3b67add6009e4a4596535", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85ab34826a606308451bf8b47143b64f224bfaf9/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/85ab34826a606308451bf8b47143b64f224bfaf9/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=85ab34826a606308451bf8b47143b64f224bfaf9", "patch": "@@ -1 +1 @@\n-ebbb2bf37aedaaa64dfaa52ba337ca6efb6b9093\n+adc65725004c8aac16392fe4052c3e347181157d"}, {"sha": "d5f38fc2672e7ed0b8e74d5627ba5a89b1a76c1c", "filename": "tests/run-pass/panic/std-panic-locations.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/85ab34826a606308451bf8b47143b64f224bfaf9/tests%2Frun-pass%2Fpanic%2Fstd-panic-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85ab34826a606308451bf8b47143b64f224bfaf9/tests%2Frun-pass%2Fpanic%2Fstd-panic-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fstd-panic-locations.rs?ref=85ab34826a606308451bf8b47143b64f224bfaf9", "patch": "@@ -0,0 +1,45 @@\n+// ignore-windows: Unwind panicking does not currently work on Windows\n+#![feature(option_expect_none, option_unwrap_none)]\n+//! Test that panic locations for `#[track_caller]` functions in std have the correct\n+//! location reported.\n+\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+static HOOK_COUNT: AtomicUsize = AtomicUsize::new(0);\n+\n+fn main() {\n+    // inspect the `PanicInfo` we receive to ensure the right file is the source\n+    std::panic::set_hook(Box::new(|info| {\n+        HOOK_COUNT.fetch_add(1, Ordering::Relaxed);\n+        let actual = info.location().unwrap();\n+        if actual.file() != file!() {\n+            eprintln!(\"expected a location in the test file, found {:?}\", actual);\n+            panic!();\n+        }\n+    }));\n+\n+    fn assert_panicked(f: impl FnOnce() + std::panic::UnwindSafe) {\n+        std::panic::catch_unwind(f).unwrap_err();\n+    }\n+\n+    let nope: Option<()> = None;\n+    assert_panicked(|| nope.unwrap());\n+    assert_panicked(|| nope.expect(\"\"));\n+\n+    let yep: Option<()> = Some(());\n+    assert_panicked(|| yep.unwrap_none());\n+    assert_panicked(|| yep.expect_none(\"\"));\n+\n+    let oops: Result<(), ()> = Err(());\n+    assert_panicked(|| oops.unwrap());\n+    assert_panicked(|| oops.expect(\"\"));\n+\n+    let fine: Result<(), ()> = Ok(());\n+    assert_panicked(|| fine.unwrap_err());\n+    assert_panicked(|| fine.expect_err(\"\"));\n+\n+    // Cleanup: reset to default hook.\n+    drop(std::panic::take_hook());\n+\n+    assert_eq!(HOOK_COUNT.load(Ordering::Relaxed), 8);\n+}"}]}