{"sha": "819d07af7f73af36a2bef102b92e5a8701122312", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOWQwN2FmN2Y3M2FmMzZhMmJlZjEwMmI5MmU1YTg3MDExMjIzMTI=", "commit": {"author": {"name": "Ralph Bodenner", "email": "rkbodenner+github@gmail.com", "date": "2013-06-17T06:21:49Z"}, "committer": {"name": "Ralph Bodenner", "email": "rkbodenner+github@gmail.com", "date": "2013-06-17T06:26:08Z"}, "message": "Update doc references to new names for std, extra, and std::libc", "tree": {"sha": "072bcdc960a5fe093a5030c2f1de78fd7375ad0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072bcdc960a5fe093a5030c2f1de78fd7375ad0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/819d07af7f73af36a2bef102b92e5a8701122312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/819d07af7f73af36a2bef102b92e5a8701122312", "html_url": "https://github.com/rust-lang/rust/commit/819d07af7f73af36a2bef102b92e5a8701122312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/819d07af7f73af36a2bef102b92e5a8701122312/comments", "author": {"login": "rkbodenner", "id": 97996, "node_id": "MDQ6VXNlcjk3OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/97996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkbodenner", "html_url": "https://github.com/rkbodenner", "followers_url": "https://api.github.com/users/rkbodenner/followers", "following_url": "https://api.github.com/users/rkbodenner/following{/other_user}", "gists_url": "https://api.github.com/users/rkbodenner/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkbodenner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkbodenner/subscriptions", "organizations_url": "https://api.github.com/users/rkbodenner/orgs", "repos_url": "https://api.github.com/users/rkbodenner/repos", "events_url": "https://api.github.com/users/rkbodenner/events{/privacy}", "received_events_url": "https://api.github.com/users/rkbodenner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rkbodenner", "id": 97996, "node_id": "MDQ6VXNlcjk3OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/97996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkbodenner", "html_url": "https://github.com/rkbodenner", "followers_url": "https://api.github.com/users/rkbodenner/followers", "following_url": "https://api.github.com/users/rkbodenner/following{/other_user}", "gists_url": "https://api.github.com/users/rkbodenner/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkbodenner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkbodenner/subscriptions", "organizations_url": "https://api.github.com/users/rkbodenner/orgs", "repos_url": "https://api.github.com/users/rkbodenner/repos", "events_url": "https://api.github.com/users/rkbodenner/events{/privacy}", "received_events_url": "https://api.github.com/users/rkbodenner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98bd68343c053ff62cbc6617d04e34c54a3cf720", "url": "https://api.github.com/repos/rust-lang/rust/commits/98bd68343c053ff62cbc6617d04e34c54a3cf720", "html_url": "https://github.com/rust-lang/rust/commit/98bd68343c053ff62cbc6617d04e34c54a3cf720"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "f229068731f44189b67ec01b720606e8cade4e4e", "filename": "src/README.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/819d07af7f73af36a2bef102b92e5a8701122312/src%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/819d07af7f73af36a2bef102b92e5a8701122312/src%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.txt?ref=819d07af7f73af36a2bef102b92e5a8701122312", "patch": "@@ -4,8 +4,8 @@ Source layout:\n \n librustc/          The self-hosted compiler\n \n-libcore/           The core library (imported and linked by default)\n-libstd/            The standard library (slightly more peripheral code)\n+libstd/            The standard library (imported and linked by default)\n+libextra/          The \"extras\" library (slightly more peripheral code)\n libsyntax/         The Rust parser and pretty-printer\n \n rt/                The runtime system"}, {"sha": "f5c98f9a11d483f78b375b27a707d6bd5a4f7078", "filename": "src/libextra/std.rc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/819d07af7f73af36a2bef102b92e5a8701122312/src%2Flibextra%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/819d07af7f73af36a2bef102b92e5a8701122312/src%2Flibextra%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstd.rc?ref=819d07af7f73af36a2bef102b92e5a8701122312", "patch": "@@ -10,19 +10,19 @@\n \n /*!\n \n-The Rust standard library.\n+The Rust \"extras\" library.\n \n-The Rust standand library provides a number of useful features that are\n-not required in or otherwise suitable for the core library.\n+The Rust extras library (`extra`) provides a number of useful features that\n+are not required in or otherwise suitable for the standard library (`std`).\n \n */\n \n #[link(name = \"extra\",\n        vers = \"0.7-pre\",\n        uuid = \"122bed0b-c19b-4b82-b0b7-7ae8aead7297\",\n-       url = \"https://github.com/mozilla/rust/tree/master/src/libstd\")];\n+       url = \"https://github.com/mozilla/rust/tree/master/src/libextra\")];\n \n-#[comment = \"The Rust standard library\"];\n+#[comment = \"The Rust extras library\"];\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n@@ -128,7 +128,7 @@ pub mod test;\n pub mod serialize;\n \n // A curious inner-module that's not exported that contains the binding\n-// 'extra' so that macro-expanded references to std::serialize and such\n+// 'extra' so that macro-expanded references to extra::serialize and such\n // can be resolved within libextra.\n #[doc(hidden)]\n pub mod std {"}, {"sha": "e1f8137a4a9d845a40b06af7b43f3031f67736d1", "filename": "src/libstd/core.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/819d07af7f73af36a2bef102b92e5a8701122312/src%2Flibstd%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/819d07af7f73af36a2bef102b92e5a8701122312/src%2Flibstd%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcore.rc?ref=819d07af7f73af36a2bef102b92e5a8701122312", "patch": "@@ -38,7 +38,7 @@ with the `std::` path prefix, as in `use std::vec`, `use std::task::spawn`,\n etc.\n \n Additionally, `std` contains a `prelude` module that reexports many of the\n-most common std modules, types and traits. The contents of the prelude are\n+most common `std` modules, types and traits. The contents of the prelude are\n imported into every *module* by default.  Implicitly, all modules behave as if\n they contained the following prologue:\n \n@@ -66,7 +66,7 @@ they contained the following prologue:\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n \n-// Make core testable by not duplicating lang items. See #2912\n+// Make std testable by not duplicating lang items. See #2912\n #[cfg(test)] extern mod realstd(name = \"std\");\n #[cfg(test)] pub use kinds = realstd::kinds;\n #[cfg(test)] pub use ops = realstd::ops;"}, {"sha": "37562a014fb710de43633c50b37d3e390c058c67", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/819d07af7f73af36a2bef102b92e5a8701122312/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819d07af7f73af36a2bef102b92e5a8701122312/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=819d07af7f73af36a2bef102b92e5a8701122312", "patch": "@@ -14,8 +14,8 @@\n * This module contains bindings to the C standard library,\n * organized into modules by their defining standard.\n * Additionally, it contains some assorted platform-specific definitions.\n-* For convenience, most functions and types are reexported from `core::libc`,\n-* so `pub use core::libc::*` will import the available\n+* For convenience, most functions and types are reexported from `std::libc`,\n+* so `pub use std::libc::*` will import the available\n * C bindings as appropriate for the target platform. The exact\n * set of functions available are platform specific.\n *"}]}