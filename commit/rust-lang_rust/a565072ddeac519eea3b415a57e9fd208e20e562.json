{"sha": "a565072ddeac519eea3b415a57e9fd208e20e562", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NjUwNzJkZGVhYzUxOWVlYTNiNDE1YTU3ZTlmZDIwOGUyMGU1NjI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-06T18:30:15Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-06T20:25:22Z"}, "message": "Try to make go to definition work in format!\n\nSourceAnalyzer didn't work properly within expression macro expansions because\nit didn't find the enclosing function. Fix this by going up the expansion chain\nto find ancestors. This makes the test work, but apparently in real usage it's\nstill not working.", "tree": {"sha": "4c76dbe6729de22de2f00862b56ed5dfd46d699b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c76dbe6729de22de2f00862b56ed5dfd46d699b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a565072ddeac519eea3b415a57e9fd208e20e562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a565072ddeac519eea3b415a57e9fd208e20e562", "html_url": "https://github.com/rust-lang/rust/commit/a565072ddeac519eea3b415a57e9fd208e20e562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a565072ddeac519eea3b415a57e9fd208e20e562/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eae425b10fd7803ae67d2d39e9aca902daa353ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/eae425b10fd7803ae67d2d39e9aca902daa353ba", "html_url": "https://github.com/rust-lang/rust/commit/eae425b10fd7803ae67d2d39e9aca902daa353ba"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "cb4345ca1496fdcffc104e019afeaec504726637", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a565072ddeac519eea3b415a57e9fd208e20e562/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a565072ddeac519eea3b415a57e9fd208e20e562/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=a565072ddeac519eea3b415a57e9fd208e20e562", "patch": "@@ -76,18 +76,30 @@ fn def_with_body_from_child_node(\n     db: &impl HirDatabase,\n     child: InFile<&SyntaxNode>,\n ) -> Option<DefWithBody> {\n-    child.value.ancestors().find_map(|node| {\n+    ancestors_with_macros(db, child).find_map(|node| {\n+        let n = &node.value;\n         match_ast! {\n-            match node {\n-                ast::FnDef(def)  => { return Function::from_source(db, child.with_value(def)).map(DefWithBody::from); },\n-                ast::ConstDef(def) => { return Const::from_source(db, child.with_value(def)).map(DefWithBody::from); },\n-                ast::StaticDef(def) => { return Static::from_source(db, child.with_value(def)).map(DefWithBody::from); },\n+            match n {\n+                ast::FnDef(def)  => { return Function::from_source(db, node.with_value(def)).map(DefWithBody::from); },\n+                ast::ConstDef(def) => { return Const::from_source(db, node.with_value(def)).map(DefWithBody::from); },\n+                ast::StaticDef(def) => { return Static::from_source(db, node.with_value(def)).map(DefWithBody::from); },\n                 _ => { None },\n             }\n         }\n     })\n }\n \n+fn ancestors_with_macros<'a>(\n+    db: &'a (impl HirDatabase),\n+    node: InFile<&SyntaxNode>,\n+) -> impl Iterator<Item = InFile<SyntaxNode>> + 'a {\n+    let file = node.with_value(()); // keep just the file id for borrow checker purposes\n+    let parent_node = node.file_id.call_node(db);\n+    let parent_ancestors: Box<dyn Iterator<Item = InFile<SyntaxNode>>> =\n+        Box::new(parent_node.into_iter().flat_map(move |n| ancestors_with_macros(db, n.as_ref())));\n+    node.value.ancestors().map(move |n| file.with_value(n)).chain(parent_ancestors)\n+}\n+\n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n /// original source files. It should not be used inside the HIR itself.\n #[derive(Debug)]\n@@ -135,6 +147,7 @@ pub struct ReferenceDescriptor {\n     pub name: String,\n }\n \n+#[derive(Debug)]\n pub struct Expansion {\n     macro_file_kind: MacroFileKind,\n     macro_call_id: MacroCallId,"}, {"sha": "0c1dc87e6719f30a0fb85640a3848ab8313514b2", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a565072ddeac519eea3b415a57e9fd208e20e562/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a565072ddeac519eea3b415a57e9fd208e20e562/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=a565072ddeac519eea3b415a57e9fd208e20e562", "patch": "@@ -76,6 +76,17 @@ impl HirFileId {\n         }\n     }\n \n+    /// If this is a macro call, returns the syntax node of the call.\n+    pub fn call_node(self, db: &dyn db::AstDatabase) -> Option<InFile<SyntaxNode>> {\n+        match self.0 {\n+            HirFileIdRepr::FileId(_) => None,\n+            HirFileIdRepr::MacroFile(macro_file) => {\n+                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                Some(loc.kind.node(db))\n+            }\n+        }\n+    }\n+\n     /// Return expansion information if it is a macro-expansion file\n     pub fn expansion_info(self, db: &dyn db::AstDatabase) -> Option<ExpansionInfo> {\n         match self.0 {\n@@ -176,6 +187,13 @@ impl MacroCallKind {\n         }\n     }\n \n+    pub fn node(&self, db: &dyn db::AstDatabase) -> InFile<SyntaxNode> {\n+        match self {\n+            MacroCallKind::FnLike(ast_id) => ast_id.with_value(ast_id.to_node(db).syntax().clone()),\n+            MacroCallKind::Attr(ast_id) => ast_id.with_value(ast_id.to_node(db).syntax().clone()),\n+        }\n+    }\n+\n     pub fn arg(&self, db: &dyn db::AstDatabase) -> Option<SyntaxNode> {\n         match self {\n             MacroCallKind::FnLike(ast_id) => {"}, {"sha": "b1d567ca7706a08c3d5a82cd6fdbf7d22685f934", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a565072ddeac519eea3b415a57e9fd208e20e562/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a565072ddeac519eea3b415a57e9fd208e20e562/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=a565072ddeac519eea3b415a57e9fd208e20e562", "patch": "@@ -693,4 +693,31 @@ mod tests {\n             \"foo FN_DEF FileId(1) [52; 63) [55; 58)\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_through_format() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            #[macro_export]\n+            macro_rules! format {\n+                ($($arg:tt)*) => ($crate::fmt::format($crate::__export::format_args!($($arg)*)))\n+            }\n+            #[rustc_builtin_macro]\n+            #[macro_export]\n+            macro_rules! format_args {\n+                ($fmt:expr) => ({ /* compiler built-in */ });\n+                ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+            }\n+            pub mod __export {\n+                pub use crate::format_args;\n+            }\n+            fn foo() -> i8 {}\n+            fn test() {\n+                format!(\\\"{}\\\", fo<|>o())\n+            }\n+            \",\n+            \"foo FN_DEF FileId(1) [359; 376) [362; 365)\",\n+        );\n+    }\n }"}]}