{"sha": "200bc02a5e41e763175b5fa9eb97f27a472c777f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMGJjMDJhNWU0MWU3NjMxNzViNWZhOWViOTdmMjdhNDcyYzc3N2Y=", "commit": {"author": {"name": "Lucas Molas", "email": "schomatis@gmail.com", "date": "2019-02-15T00:33:31Z"}, "committer": {"name": "Lucas Molas", "email": "schomatis@gmail.com", "date": "2019-02-15T23:54:46Z"}, "message": "nll: remove `NllLivenessMap` from `LivenessContext`\n\nIt was used in `compute_for_all_locals` to iterate only the `Local`s that need\nliveness analysis (filtered through `compute`). Instead, explicitly extract that\nreduced set (as `live_locals`) in `trace` and pass it to\n`compute_for_all_locals`.\n\nChange the variable type used in `compute_for_all_locals` from `LiveVar` to\n`Local` and do the same for its helper functions (and the functions in\n`LocalUseMap` they rely on):\n\n* `add_defs_for`                 -> `LocalUseMap::defs`\n* `compute_use_live_points_for`  -> `LocalUseMap::uses`\n* `compute_drop_live_points_for` -> `LocalUseMap::drops`\n\nPush back the use of `LiveVar` to the `LocalUseMap` (where the other\n`NllLivenessMap` remains embedded) functions which internally do the\n`from_local` conversion.", "tree": {"sha": "6fa9cbcb1f88721a35688bc5e48ae80f24a200d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa9cbcb1f88721a35688bc5e48ae80f24a200d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200bc02a5e41e763175b5fa9eb97f27a472c777f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200bc02a5e41e763175b5fa9eb97f27a472c777f", "html_url": "https://github.com/rust-lang/rust/commit/200bc02a5e41e763175b5fa9eb97f27a472c777f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200bc02a5e41e763175b5fa9eb97f27a472c777f/comments", "author": {"login": "schomatis", "id": 10407385, "node_id": "MDQ6VXNlcjEwNDA3Mzg1", "avatar_url": "https://avatars.githubusercontent.com/u/10407385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schomatis", "html_url": "https://github.com/schomatis", "followers_url": "https://api.github.com/users/schomatis/followers", "following_url": "https://api.github.com/users/schomatis/following{/other_user}", "gists_url": "https://api.github.com/users/schomatis/gists{/gist_id}", "starred_url": "https://api.github.com/users/schomatis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schomatis/subscriptions", "organizations_url": "https://api.github.com/users/schomatis/orgs", "repos_url": "https://api.github.com/users/schomatis/repos", "events_url": "https://api.github.com/users/schomatis/events{/privacy}", "received_events_url": "https://api.github.com/users/schomatis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "schomatis", "id": 10407385, "node_id": "MDQ6VXNlcjEwNDA3Mzg1", "avatar_url": "https://avatars.githubusercontent.com/u/10407385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schomatis", "html_url": "https://github.com/schomatis", "followers_url": "https://api.github.com/users/schomatis/followers", "following_url": "https://api.github.com/users/schomatis/following{/other_user}", "gists_url": "https://api.github.com/users/schomatis/gists{/gist_id}", "starred_url": "https://api.github.com/users/schomatis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schomatis/subscriptions", "organizations_url": "https://api.github.com/users/schomatis/orgs", "repos_url": "https://api.github.com/users/schomatis/repos", "events_url": "https://api.github.com/users/schomatis/events{/privacy}", "received_events_url": "https://api.github.com/users/schomatis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9410cd1af7c1194fbda1457c74b8ab25547e1e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9410cd1af7c1194fbda1457c74b8ab25547e1e6", "html_url": "https://github.com/rust-lang/rust/commit/a9410cd1af7c1194fbda1457c74b8ab25547e1e6"}], "stats": {"total": 59, "additions": 27, "deletions": 32}, "files": [{"sha": "fccd633aaa1e36bbf68ff19448f685a0572d4d00", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/200bc02a5e41e763175b5fa9eb97f27a472c777f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200bc02a5e41e763175b5fa9eb97f27a472c777f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=200bc02a5e41e763175b5fa9eb97f27a472c777f", "patch": "@@ -73,18 +73,21 @@ impl LocalUseMap<'me> {\n         local_use_map\n     }\n \n-    crate fn defs(&self, local: LiveVar) -> impl Iterator<Item = PointIndex> + '_ {\n-        vll::iter(self.first_def_at[local], &self.appearances)\n+    crate fn defs(&self, local: Local) -> impl Iterator<Item = PointIndex> + '_ {\n+        let live_var = self.liveness_map.from_local(local).unwrap();\n+        vll::iter(self.first_def_at[live_var], &self.appearances)\n             .map(move |aa| self.appearances[aa].point_index)\n     }\n \n-    crate fn uses(&self, local: LiveVar) -> impl Iterator<Item = PointIndex> + '_ {\n-        vll::iter(self.first_use_at[local], &self.appearances)\n+    crate fn uses(&self, local: Local) -> impl Iterator<Item = PointIndex> + '_ {\n+        let live_var = self.liveness_map.from_local(local).unwrap();\n+        vll::iter(self.first_use_at[live_var], &self.appearances)\n             .map(move |aa| self.appearances[aa].point_index)\n     }\n \n-    crate fn drops(&self, local: LiveVar) -> impl Iterator<Item = PointIndex> + '_ {\n-        vll::iter(self.first_drop_at[local], &self.appearances)\n+    crate fn drops(&self, local: Local) -> impl Iterator<Item = PointIndex> + '_ {\n+        let live_var = self.liveness_map.from_local(local).unwrap();\n+        vll::iter(self.first_drop_at[live_var], &self.appearances)\n             .map(move |aa| self.appearances[aa].point_index)\n     }\n }"}, {"sha": "67dcf255f56765f13717ede5d5569308acf9f68a", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/200bc02a5e41e763175b5fa9eb97f27a472c777f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200bc02a5e41e763175b5fa9eb97f27a472c777f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=200bc02a5e41e763175b5fa9eb97f27a472c777f", "patch": "@@ -1,13 +1,12 @@\n use crate::borrow_check::location::LocationTable;\n use crate::borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n-use crate::borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n+use crate::borrow_check::nll::type_check::liveness::liveness_map::NllLivenessMap;\n use crate::borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n use crate::borrow_check::nll::type_check::NormalizeLocation;\n use crate::borrow_check::nll::type_check::TypeChecker;\n use crate::dataflow::move_paths::indexes::MovePathIndex;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n-use crate::util::liveness::LiveVariableMap;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, Mir};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n@@ -56,12 +55,12 @@ pub(super) fn trace(\n         elements,\n         local_use_map,\n         move_data,\n-        liveness_map,\n         drop_data: FxHashMap::default(),\n         location_table,\n     };\n \n-    LivenessResults::new(cx).compute_for_all_locals();\n+    let live_locals: Vec<Local> = liveness_map.to_local.clone().into_iter().collect();\n+    LivenessResults::new(cx).compute_for_all_locals(live_locals);\n }\n \n /// Contextual state for the type-liveness generator.\n@@ -95,9 +94,6 @@ where\n     /// dropped.\n     local_use_map: &'me LocalUseMap<'me>,\n \n-    /// Map tracking which variables need liveness computation.\n-    liveness_map: &'me NllLivenessMap,\n-\n     /// Maps between a MIR Location and a LocationIndex\n     location_table: &'me LocationTable,\n }\n@@ -148,15 +144,12 @@ impl LivenessResults<'me, 'typeck, 'flow, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn compute_for_all_locals(&mut self) {\n-        for live_local in self.cx.liveness_map.to_local.indices() {\n-            let local = self.cx.liveness_map.from_live_var(live_local);\n-            debug!(\"local={:?} live_local={:?}\", local, live_local);\n-\n+    fn compute_for_all_locals(&mut self, live_locals: Vec<Local>) {\n+        for local in live_locals {\n             self.reset_local_state();\n-            self.add_defs_for(live_local);\n-            self.compute_use_live_points_for(live_local);\n-            self.compute_drop_live_points_for(live_local);\n+            self.add_defs_for(local);\n+            self.compute_use_live_points_for(local);\n+            self.compute_drop_live_points_for(local);\n \n             let local_ty = self.cx.mir.local_decls[local].ty;\n \n@@ -185,23 +178,23 @@ impl LivenessResults<'me, 'typeck, 'flow, 'gcx, 'tcx> {\n     }\n \n     /// Adds the definitions of `local` into `self.defs`.\n-    fn add_defs_for(&mut self, live_local: LiveVar) {\n-        for def in self.cx.local_use_map.defs(live_local) {\n+    fn add_defs_for(&mut self, local: Local) {\n+        for def in self.cx.local_use_map.defs(local) {\n             debug!(\"- defined at {:?}\", def);\n             self.defs.insert(def);\n         }\n     }\n \n     /// Computes all points where local is \"use live\" -- meaning its\n     /// current value may be used later (except by a drop). This is\n-    /// done by walking backwards from each use of `live_local` until we\n+    /// done by walking backwards from each use of `local` until we\n     /// find a `def` of local.\n     ///\n-    /// Requires `add_defs_for(live_local)` to have been executed.\n-    fn compute_use_live_points_for(&mut self, live_local: LiveVar) {\n-        debug!(\"compute_use_live_points_for(live_local={:?})\", live_local);\n+    /// Requires `add_defs_for(local)` to have been executed.\n+    fn compute_use_live_points_for(&mut self, local: Local) {\n+        debug!(\"compute_use_live_points_for(local={:?})\", local);\n \n-        self.stack.extend(self.cx.local_use_map.uses(live_local));\n+        self.stack.extend(self.cx.local_use_map.uses(local));\n         while let Some(p) = self.stack.pop() {\n             if self.defs.contains(p) {\n                 continue;\n@@ -224,15 +217,14 @@ impl LivenessResults<'me, 'typeck, 'flow, 'gcx, 'tcx> {\n     ///\n     /// Requires `compute_use_live_points_for` and `add_defs_for` to\n     /// have been executed.\n-    fn compute_drop_live_points_for(&mut self, live_local: LiveVar) {\n-        debug!(\"compute_drop_live_points_for(live_local={:?})\", live_local);\n+    fn compute_drop_live_points_for(&mut self, local: Local) {\n+        debug!(\"compute_drop_live_points_for(local={:?})\", local);\n \n-        let local = self.cx.liveness_map.from_live_var(live_local);\n         let mpi = self.cx.move_data.rev_lookup.find_local(local);\n         debug!(\"compute_drop_live_points_for: mpi = {:?}\", mpi);\n \n         // Find the drops where `local` is initialized.\n-        for drop_point in self.cx.local_use_map.drops(live_local) {\n+        for drop_point in self.cx.local_use_map.drops(local) {\n             let location = self.cx.elements.to_location(drop_point);\n             debug_assert_eq!(self.cx.mir.terminator_loc(location.block), location,);\n "}]}