{"sha": "a0a3b4c0585129405c09a9be46a1a3f8d3411b3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYTNiNGMwNTg1MTI5NDA1YzA5YTliZTQ2YTFhM2Y4ZDM0MTFiM2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-17T15:48:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-19T12:31:35Z"}, "message": "replace `UserTypeAnnotation::AdtDef` with `TypeOf`", "tree": {"sha": "0318bc3bdcaa6a9c5cc8007b1c4ad4405f2259d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0318bc3bdcaa6a9c5cc8007b1c4ad4405f2259d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b", "html_url": "https://github.com/rust-lang/rust/commit/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94959b9369d611aed86a4c179406a96e983278a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94959b9369d611aed86a4c179406a96e983278a", "html_url": "https://github.com/rust-lang/rust/commit/e94959b9369d611aed86a4c179406a96e983278a"}], "stats": {"total": 32, "additions": 3, "deletions": 29}, "files": [{"sha": "a82a8ca6bdff0e1ef312a615b0984010a21596f5", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=a0a3b4c0585129405c09a9be46a1a3f8d3411b3b", "patch": "@@ -601,10 +601,6 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for mir::UserTypeAnnotation<\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n             }\n-            mir::UserTypeAnnotation::AdtDef(ref def_id, ref substs) => {\n-                def_id.hash_stable(hcx, hasher);\n-                substs.hash_stable(hcx, hasher);\n-            }\n         }\n     }\n }"}, {"sha": "34fc81a495e249682fa9ccd9bf63c2ab47b731e5", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=a0a3b4c0585129405c09a9be46a1a3f8d3411b3b", "patch": "@@ -2429,18 +2429,12 @@ pub enum UserTypeAnnotation<'tcx> {\n     /// The canonical type is the result of `type_of(def_id)` with the\n     /// given substitutions applied.\n     TypeOf(DefId, CanonicalUserSubsts<'tcx>),\n-\n-    /// The canonical type is the given ADT with the given\n-    /// substitutions applied (in this case, `user_self_ty` had better\n-    /// be `None`).\n-    AdtDef(&'tcx AdtDef, CanonicalUserSubsts<'tcx>),\n }\n \n EnumTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for UserTypeAnnotation<'tcx> {\n         (UserTypeAnnotation::Ty)(ty),\n         (UserTypeAnnotation::TypeOf)(def, substs),\n-        (UserTypeAnnotation::AdtDef)(def, substs),\n     }\n }\n "}, {"sha": "665ed24ac3d2650d478b35423570beebfab96c93", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=a0a3b4c0585129405c09a9be46a1a3f8d3411b3b", "patch": "@@ -132,22 +132,6 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n \n             Ok(ty)\n         }\n-        UserTypeAnnotation::AdtDef(adt_def, canonical_substs) => {\n-            let (\n-                UserSubsts {\n-                    substs,\n-                    user_self_ty,\n-                },\n-                _,\n-            ) = infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_substs);\n-\n-            // We don't extract adt-defs with a self-type.\n-            assert!(user_self_ty.is_none());\n-\n-            let ty = infcx.tcx.mk_adt(adt_def, substs);\n-            type_relating.relate(&ty, &a)?;\n-            Ok(ty)\n-        }\n     }\n }\n "}, {"sha": "04dd1aa3c8880229306aa383b670cde30d4eece0", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=a0a3b4c0585129405c09a9be46a1a3f8d3411b3b", "patch": "@@ -295,7 +295,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     let substs = cx.tables().node_substs(fun.hir_id);\n \n                     let user_ty = cx.tables().user_substs(fun.hir_id)\n-                        .map(|user_substs| UserTypeAnnotation::AdtDef(adt_def, user_substs));\n+                        .map(|user_substs| UserTypeAnnotation::TypeOf(adt_def.did, user_substs));\n \n                     let field_refs = args.iter()\n                         .enumerate()"}, {"sha": "f81a0fa5dfadbac95d5717ce9897b58e4652bde2", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a3b4c0585129405c09a9be46a1a3f8d3411b3b/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=a0a3b4c0585129405c09a9be46a1a3f8d3411b3b", "patch": "@@ -23,7 +23,7 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n         adt_def: &'tcx AdtDef,\n     ) -> Option<UserTypeAnnotation<'tcx>> {\n         let user_substs = self.tables().user_substs(hir_id)?;\n-        Some(UserTypeAnnotation::AdtDef(adt_def, user_substs))\n+        Some(UserTypeAnnotation::TypeOf(adt_def.did, user_substs))\n     }\n \n     /// Looks up the type associated with this hir-id and applies the\n@@ -35,7 +35,7 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n     ) -> Option<UserTypeAnnotation<'tcx>> {\n         let user_substs = self.tables().user_substs(hir_id)?;\n         match &self.tables().node_id_to_type(hir_id).sty {\n-            ty::Adt(adt_def, _) => Some(UserTypeAnnotation::AdtDef(adt_def, user_substs)),\n+            ty::Adt(adt_def, _) => Some(UserTypeAnnotation::TypeOf(adt_def.did, user_substs)),\n             ty::FnDef(def_id, _) => Some(UserTypeAnnotation::TypeOf(*def_id, user_substs)),\n             sty => bug!(\n                 \"sty: {:?} should not have user-substs {:?} recorded \","}]}