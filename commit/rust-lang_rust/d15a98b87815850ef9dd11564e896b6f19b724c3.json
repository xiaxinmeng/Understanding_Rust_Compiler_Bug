{"sha": "d15a98b87815850ef9dd11564e896b6f19b724c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNWE5OGI4NzgxNTg1MGVmOWRkMTE1NjRlODk2YjZmMTliNzI0YzM=", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-02-22T13:03:46Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-02-22T13:03:46Z"}, "message": "Stabilize const for integer {to,from}_{be,le,ne}_bytes methods\n\nAll of these functions can be implemented simply and naturally as\nconst functions, e.g. u32::from_le_bytes can be implemented as\n\n    (bytes[0] as u32)\n        | (bytes[1] as u32) << 8\n        | (bytes[2] as u32) << 16\n        | (bytes[3] as u32) << 24\n\nSo stabilizing the constness will not expose that internally they are\nimplemented using transmute which is not const in stable.", "tree": {"sha": "c99c374a6aee399b457c0f69b74ee79e8e2ffde3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c99c374a6aee399b457c0f69b74ee79e8e2ffde3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d15a98b87815850ef9dd11564e896b6f19b724c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d15a98b87815850ef9dd11564e896b6f19b724c3", "html_url": "https://github.com/rust-lang/rust/commit/d15a98b87815850ef9dd11564e896b6f19b724c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d15a98b87815850ef9dd11564e896b6f19b724c3/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d2f5cd6c634b1fdcd26b036009aa4dce37fdfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d2f5cd6c634b1fdcd26b036009aa4dce37fdfc", "html_url": "https://github.com/rust-lang/rust/commit/03d2f5cd6c634b1fdcd26b036009aa4dce37fdfc"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "00909094cd0f50b3ffd8fa48d763a36afb28dd41", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d15a98b87815850ef9dd11564e896b6f19b724c3/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15a98b87815850ef9dd11564e896b6f19b724c3/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d15a98b87815850ef9dd11564e896b6f19b724c3", "patch": "@@ -131,7 +131,6 @@\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n #![feature(hexagon_target_feature)]\n-#![feature(const_int_conversion)]\n #![feature(const_transmute)]\n #![feature(structural_match)]\n #![feature(abi_unadjusted)]"}, {"sha": "22897680567e28228985ceb9b8506bc3fd8e6eaa", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d15a98b87815850ef9dd11564e896b6f19b724c3/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15a98b87815850ef9dd11564e896b6f19b724c3/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d15a98b87815850ef9dd11564e896b6f19b724c3", "patch": "@@ -2195,7 +2195,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -2215,7 +2215,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -2250,7 +2250,8 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[allow_internal_unstable(const_transmute)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -2284,7 +2285,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2317,7 +2318,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2360,7 +2361,8 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[allow_internal_unstable(const_transmute)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n@@ -4132,7 +4134,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -4152,7 +4154,7 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -4187,7 +4189,8 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[allow_internal_unstable(const_transmute)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -4221,7 +4224,7 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -4254,7 +4257,7 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -4297,7 +4300,8 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.43.0\")]\n+            #[allow_internal_unstable(const_transmute)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "6484169dd9ae12e4e6ef7013741105c595770d53", "filename": "src/test/ui/consts/const-int-conversion-rpass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d15a98b87815850ef9dd11564e896b6f19b724c3/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15a98b87815850ef9dd11564e896b6f19b724c3/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion-rpass.rs?ref=d15a98b87815850ef9dd11564e896b6f19b724c3", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_int_conversion)]\n-\n const REVERSE: u32 = 0x12345678_u32.reverse_bits();\n const FROM_BE_BYTES: i32 = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);\n const FROM_LE_BYTES: i32 = i32::from_le_bytes([0x12, 0x34, 0x56, 0x78]);"}]}