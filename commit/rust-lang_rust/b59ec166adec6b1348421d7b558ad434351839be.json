{"sha": "b59ec166adec6b1348421d7b558ad434351839be", "node_id": "C_kwDOAAsO6NoAKGI1OWVjMTY2YWRlYzZiMTM0ODQyMWQ3YjU1OGFkNDM0MzUxODM5YmU", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-14T06:39:16Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-04-14T06:39:48Z"}, "message": "allow `repr(align = x)` on inherent methods", "tree": {"sha": "c10c968f83fbc71569e5daa2946b97b56a5bb10c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c10c968f83fbc71569e5daa2946b97b56a5bb10c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b59ec166adec6b1348421d7b558ad434351839be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b59ec166adec6b1348421d7b558ad434351839be", "html_url": "https://github.com/rust-lang/rust/commit/b59ec166adec6b1348421d7b558ad434351839be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b59ec166adec6b1348421d7b558ad434351839be/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d558796beb400cceb2a2b8950f35aa518a58a586", "url": "https://api.github.com/repos/rust-lang/rust/commits/d558796beb400cceb2a2b8950f35aa518a58a586", "html_url": "https://github.com/rust-lang/rust/commit/d558796beb400cceb2a2b8950f35aa518a58a586"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "0d706996810f3d6b55f9df3377f1dd12ad7710df", "filename": "compiler/rustc_passes/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b59ec166adec6b1348421d7b558ad434351839be/compiler%2Frustc_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b59ec166adec6b1348421d7b558ad434351839be/compiler%2Frustc_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fmessages.ftl?ref=b59ec166adec6b1348421d7b558ad434351839be", "patch": "@@ -631,6 +631,10 @@ passes_attr_application_struct_enum_function_union =\n     attribute should be applied to a struct, enum, function, or union\n     .label = not a struct, enum, function, or union\n \n+passes_attr_application_struct_enum_function_inherent_method_union =\n+    attribute should be applied to a struct, enum, function, inherent method, or union\n+    .label = not a struct, enum, function, inherent method, or union\n+\n passes_transparent_incompatible =\n     transparent {$target} cannot have other repr hints\n "}, {"sha": "a03c991d3bee0bce105c346b16f10fc95ace7627", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b59ec166adec6b1348421d7b558ad434351839be/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b59ec166adec6b1348421d7b558ad434351839be/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=b59ec166adec6b1348421d7b558ad434351839be", "patch": "@@ -1728,7 +1728,9 @@ impl CheckAttrVisitor<'_> {\n                     }\n                 }\n                 sym::align => {\n-                    if let (Target::Fn, false) = (target, self.tcx.features().fn_align) {\n+                    if let (Target::Fn | Target::Method(MethodKind::Inherent), false) =\n+                        (target, self.tcx.features().fn_align)\n+                    {\n                         feature_err(\n                             &self.tcx.sess.parse_sess,\n                             sym::fn_align,\n@@ -1739,10 +1741,14 @@ impl CheckAttrVisitor<'_> {\n                     }\n \n                     match target {\n-                        Target::Struct | Target::Union | Target::Enum | Target::Fn => continue,\n+                        Target::Struct\n+                        | Target::Union\n+                        | Target::Enum\n+                        | Target::Fn\n+                        | Target::Method(MethodKind::Inherent) => continue,\n                         _ => {\n                             self.tcx.sess.emit_err(\n-                                errors::AttrApplication::StructEnumFunctionUnion {\n+                                errors::AttrApplication::StructEnumFunctionInherentMethodUnion {\n                                     hint_span: hint.span(),\n                                     span,\n                                 },"}, {"sha": "27039a2a5a21fc3ac44ad849218644e33dfe0dab", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b59ec166adec6b1348421d7b558ad434351839be/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b59ec166adec6b1348421d7b558ad434351839be/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=b59ec166adec6b1348421d7b558ad434351839be", "patch": "@@ -1355,8 +1355,8 @@ pub enum AttrApplication {\n         #[label]\n         span: Span,\n     },\n-    #[diag(passes_attr_application_struct_enum_function_union, code = \"E0517\")]\n-    StructEnumFunctionUnion {\n+    #[diag(passes_attr_application_struct_enum_function_inherent_method_union, code = \"E0517\")]\n+    StructEnumFunctionInherentMethodUnion {\n         #[primary_span]\n         hint_span: Span,\n         #[label]"}, {"sha": "7238e7f53c3682c63c4f85c36e30a7618371634c", "filename": "tests/codegen/align-fn.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b59ec166adec6b1348421d7b558ad434351839be/tests%2Fcodegen%2Falign-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b59ec166adec6b1348421d7b558ad434351839be/tests%2Fcodegen%2Falign-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Falign-fn.rs?ref=b59ec166adec6b1348421d7b558ad434351839be", "patch": "@@ -7,3 +7,12 @@\n #[no_mangle]\n #[repr(align(16))]\n pub fn fn_align() {}\n+\n+pub struct A;\n+\n+impl A {\n+    // CHECK: align 16\n+    #[no_mangle]\n+    #[repr(align(16))]\n+    pub fn method_align(self) {}\n+}"}]}