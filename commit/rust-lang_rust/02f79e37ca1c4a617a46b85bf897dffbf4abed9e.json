{"sha": "02f79e37ca1c4a617a46b85bf897dffbf4abed9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZjc5ZTM3Y2ExYzRhNjE3YTQ2Yjg1YmY4OTdkZmZiZjRhYmVkOWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-21T16:26:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-21T16:26:28Z"}, "message": "Remove import source map", "tree": {"sha": "ed2274938d6e2991a25077d2df8413fd36dfc4a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed2274938d6e2991a25077d2df8413fd36dfc4a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02f79e37ca1c4a617a46b85bf897dffbf4abed9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02f79e37ca1c4a617a46b85bf897dffbf4abed9e", "html_url": "https://github.com/rust-lang/rust/commit/02f79e37ca1c4a617a46b85bf897dffbf4abed9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02f79e37ca1c4a617a46b85bf897dffbf4abed9e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec56f59ac17ad5ae797ce431883be8f31e795d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec56f59ac17ad5ae797ce431883be8f31e795d1b", "html_url": "https://github.com/rust-lang/rust/commit/ec56f59ac17ad5ae797ce431883be8f31e795d1b"}], "stats": {"total": 81, "additions": 15, "deletions": 66}, "files": [{"sha": "f5ffd64fa7b17622250d204d26ebf855fad4295b", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02f79e37ca1c4a617a46b85bf897dffbf4abed9e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f79e37ca1c4a617a46b85bf897dffbf4abed9e/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=02f79e37ca1c4a617a46b85bf897dffbf4abed9e", "patch": "@@ -4,8 +4,8 @@ pub use hir_def::db::{\n     BodyQuery, BodyWithSourceMapQuery, ConstDataQuery, CrateDefMapQuery, CrateLangItemsQuery,\n     DefDatabase, DefDatabaseStorage, DocumentationQuery, EnumDataQuery, ExprScopesQuery,\n     FunctionDataQuery, GenericParamsQuery, ImplDataQuery, InternDatabase, InternDatabaseStorage,\n-    LangItemQuery, ModuleLangItemsQuery, RawItemsQuery, RawItemsWithSourceMapQuery,\n-    StaticDataQuery, StructDataQuery, TraitDataQuery, TypeAliasDataQuery,\n+    LangItemQuery, ModuleLangItemsQuery, RawItemsQuery, StaticDataQuery, StructDataQuery,\n+    TraitDataQuery, TypeAliasDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,"}, {"sha": "c55fd411107f9baca6fa9d569c6318a7aebbaa35", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02f79e37ca1c4a617a46b85bf897dffbf4abed9e/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f79e37ca1c4a617a46b85bf897dffbf4abed9e/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=02f79e37ca1c4a617a46b85bf897dffbf4abed9e", "patch": "@@ -13,10 +13,7 @@ use crate::{\n     docs::Documentation,\n     generics::GenericParams,\n     lang_item::{LangItemTarget, LangItems},\n-    nameres::{\n-        raw::{ImportSourceMap, RawItems},\n-        CrateDefMap,\n-    },\n+    nameres::{raw::RawItems, CrateDefMap},\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n     GenericDefId, ImplId, ImplLoc, ModuleId, StaticId, StaticLoc, StructId, StructLoc, TraitId,\n     TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc,\n@@ -46,12 +43,6 @@ pub trait InternDatabase: SourceDatabase {\n \n #[salsa::query_group(DefDatabaseStorage)]\n pub trait DefDatabase: InternDatabase + AstDatabase {\n-    #[salsa::invoke(RawItems::raw_items_with_source_map_query)]\n-    fn raw_items_with_source_map(\n-        &self,\n-        file_id: HirFileId,\n-    ) -> (Arc<RawItems>, Arc<ImportSourceMap>);\n-\n     #[salsa::invoke(RawItems::raw_items_query)]\n     fn raw_items(&self, file_id: HirFileId) -> Arc<RawItems>;\n "}, {"sha": "73e57f1e55887c065b5a4539a4e727a16f2fb5c6", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 12, "deletions": 44, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/02f79e37ca1c4a617a46b85bf897dffbf4abed9e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f79e37ca1c4a617a46b85bf897dffbf4abed9e/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=02f79e37ca1c4a617a46b85bf897dffbf4abed9e", "patch": "@@ -7,23 +7,21 @@\n \n use std::{ops::Index, sync::Arc};\n \n-use either::Either;\n use hir_expand::{\n     ast_id_map::AstIdMap,\n     db::AstDatabase,\n     hygiene::Hygiene,\n     name::{AsName, Name},\n };\n-use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n+use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n-    AstNode, AstPtr,\n+    AstNode,\n };\n use test_utils::tested_by;\n \n use crate::{\n-    attr::Attrs, db::DefDatabase, path::ModPath, trace::Trace, FileAstId, HirFileId, InFile,\n-    LocalImportId,\n+    attr::Attrs, db::DefDatabase, path::ModPath, FileAstId, HirFileId, InFile, LocalImportId,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -41,29 +39,14 @@ pub struct RawItems {\n     items: Vec<RawItem>,\n }\n \n-#[derive(Debug, Default, PartialEq, Eq)]\n-pub struct ImportSourceMap {\n-    map: ArenaMap<LocalImportId, ImportSourcePtr>,\n-}\n-\n-type ImportSourcePtr = Either<AstPtr<ast::UseTree>, AstPtr<ast::ExternCrateItem>>;\n-\n impl RawItems {\n     pub(crate) fn raw_items_query(\n         db: &(impl DefDatabase + AstDatabase),\n         file_id: HirFileId,\n     ) -> Arc<RawItems> {\n-        db.raw_items_with_source_map(file_id).0\n-    }\n-\n-    pub(crate) fn raw_items_with_source_map_query(\n-        db: &(impl DefDatabase + AstDatabase),\n-        file_id: HirFileId,\n-    ) -> (Arc<RawItems>, Arc<ImportSourceMap>) {\n         let mut collector = RawItemsCollector {\n             raw_items: RawItems::default(),\n             source_ast_id_map: db.ast_id_map(file_id),\n-            imports: Trace::new(),\n             file_id,\n             hygiene: Hygiene::new(db, file_id),\n         };\n@@ -74,11 +57,8 @@ impl RawItems {\n                 collector.process_module(None, item_list);\n             }\n         }\n-        let mut raw_items = collector.raw_items;\n-        let (arena, map) = collector.imports.into_arena_and_map();\n-        raw_items.imports = arena;\n-        let source_map = ImportSourceMap { map };\n-        (Arc::new(raw_items), Arc::new(source_map))\n+        let raw_items = collector.raw_items;\n+        Arc::new(raw_items)\n     }\n \n     pub(super) fn items(&self) -> &[RawItem] {\n@@ -217,7 +197,6 @@ pub(super) struct ImplData {\n \n struct RawItemsCollector {\n     raw_items: RawItems,\n-    imports: Trace<LocalImportId, ImportData, ImportSourcePtr>,\n     source_ast_id_map: Arc<AstIdMap>,\n     file_id: HirFileId,\n     hygiene: Hygiene,\n@@ -324,7 +303,7 @@ impl RawItemsCollector {\n         ModPath::expand_use_item(\n             InFile { value: use_item, file_id: self.file_id },\n             &self.hygiene,\n-            |path, use_tree, is_glob, alias| {\n+            |path, _use_tree, is_glob, alias| {\n                 let import_data = ImportData {\n                     path,\n                     alias,\n@@ -333,11 +312,11 @@ impl RawItemsCollector {\n                     is_extern_crate: false,\n                     is_macro_use: false,\n                 };\n-                buf.push((import_data, Either::Left(AstPtr::new(use_tree))));\n+                buf.push(import_data);\n             },\n         );\n-        for (import_data, ptr) in buf {\n-            self.push_import(current_module, attrs.clone(), import_data, ptr);\n+        for import_data in buf {\n+            self.push_import(current_module, attrs.clone(), import_data);\n         }\n     }\n \n@@ -360,12 +339,7 @@ impl RawItemsCollector {\n                 is_extern_crate: true,\n                 is_macro_use,\n             };\n-            self.push_import(\n-                current_module,\n-                attrs,\n-                import_data,\n-                Either::Right(AstPtr::new(&extern_crate)),\n-            );\n+            self.push_import(current_module, attrs, import_data);\n         }\n     }\n \n@@ -396,14 +370,8 @@ impl RawItemsCollector {\n         self.push_item(current_module, attrs, RawItemKind::Impl(imp))\n     }\n \n-    fn push_import(\n-        &mut self,\n-        current_module: Option<Module>,\n-        attrs: Attrs,\n-        data: ImportData,\n-        source: ImportSourcePtr,\n-    ) {\n-        let import = self.imports.alloc(|| source, || data);\n+    fn push_import(&mut self, current_module: Option<Module>, attrs: Attrs, data: ImportData) {\n+        let import = self.raw_items.imports.alloc(data);\n         self.push_item(current_module, attrs, RawItemKind::Import(import))\n     }\n "}, {"sha": "9769e88df583779c035a9d8a33c7d4d7df574814", "filename": "crates/ra_hir_def/src/trace.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02f79e37ca1c4a617a46b85bf897dffbf4abed9e/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f79e37ca1c4a617a46b85bf897dffbf4abed9e/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs?ref=02f79e37ca1c4a617a46b85bf897dffbf4abed9e", "patch": "@@ -18,10 +18,6 @@ pub(crate) struct Trace<ID: ArenaId, T, V> {\n }\n \n impl<ID: ra_arena::ArenaId + Copy, T, V> Trace<ID, T, V> {\n-    pub(crate) fn new() -> Trace<ID, T, V> {\n-        Trace { arena: Some(Arena::default()), map: Some(ArenaMap::default()), len: 0 }\n-    }\n-\n     pub(crate) fn new_for_arena() -> Trace<ID, T, V> {\n         Trace { arena: Some(Arena::default()), map: None, len: 0 }\n     }\n@@ -52,8 +48,4 @@ impl<ID: ra_arena::ArenaId + Copy, T, V> Trace<ID, T, V> {\n     pub(crate) fn into_map(mut self) -> ArenaMap<ID, V> {\n         self.map.take().unwrap()\n     }\n-\n-    pub(crate) fn into_arena_and_map(mut self) -> (Arena<ID, T>, ArenaMap<ID, V>) {\n-        (self.arena.take().unwrap(), self.map.take().unwrap())\n-    }\n }"}, {"sha": "387a9cafb65751833f6335248c3f2325121e4657", "filename": "crates/ra_ide/src/change.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02f79e37ca1c4a617a46b85bf897dffbf4abed9e/crates%2Fra_ide%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f79e37ca1c4a617a46b85bf897dffbf4abed9e/crates%2Fra_ide%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fchange.rs?ref=02f79e37ca1c4a617a46b85bf897dffbf4abed9e", "patch": "@@ -270,7 +270,6 @@ impl RootDatabase {\n \n         self.query(hir::db::AstIdMapQuery).sweep(sweep);\n \n-        self.query(hir::db::RawItemsWithSourceMapQuery).sweep(sweep);\n         self.query(hir::db::BodyWithSourceMapQuery).sweep(sweep);\n \n         self.query(hir::db::ExprScopesQuery).sweep(sweep);\n@@ -309,7 +308,6 @@ impl RootDatabase {\n             hir::db::StructDataQuery\n             hir::db::EnumDataQuery\n             hir::db::TraitDataQuery\n-            hir::db::RawItemsWithSourceMapQuery\n             hir::db::RawItemsQuery\n             hir::db::CrateDefMapQuery\n             hir::db::GenericParamsQuery"}]}