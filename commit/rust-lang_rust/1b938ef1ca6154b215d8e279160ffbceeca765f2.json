{"sha": "1b938ef1ca6154b215d8e279160ffbceeca765f2", "node_id": "C_kwDOAAsO6NoAKDFiOTM4ZWYxY2E2MTU0YjIxNWQ4ZTI3OTE2MGZmYmNlZWNhNzY1ZjI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-22T19:03:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-22T19:03:07Z"}, "message": "Merge #10834\n\n10834: Make lint groups work correctly with `warningsAsInfo` and `warningsAsHint` r=Veykril a=Emilgardis\n\nthis change makes it possible to specify\r\n\r\n```json\r\n{\r\n   \"rust-analyzer.diagnostics.warningsAsInfo\": [\"unused\"],\r\n}\r\n```\r\n\r\nto make all lints in the `unused` group show as info, etc.\n\nCo-authored-by: Emil Gardstr\u00f6m <emil.gardstrom@gmail.com>", "tree": {"sha": "3735c11eabd20be894e1f25017f838b09c2540b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3735c11eabd20be894e1f25017f838b09c2540b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b938ef1ca6154b215d8e279160ffbceeca765f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhm+lrCRBK7hj4Ov3rIwAAeMAIAHGCqcZwTGOJUW1twVVG1HoP\nrTLXNWtFfmTrM3nQOemNWBJkZmz+DKUZ6/vRomYrQVn/0vYXzxBPRc3dsjcnnnde\n1GqjQZKTOsf/6L6eFVUhFSYFov9jfI7f5f2JnQCsiU2ZtBzcvDoEv0mL3GhN4vJy\neKIyv/VGi5dbAg4G/LKCDCuILxuK9d5gCal2mXfYrtAocTh9YfeK37K1Tiva0O6d\nQY1f7QronHBKG+1370zxMN2TIv7T+y1/TKAqHtCXdMJ/6QSALehHJGjC4Ubz9vF6\nxm56OdrviLtHKXku0bm6qLRggTeKMwbNIe4swRHv8w2DKjrsAftKmoDUzGzQVS4=\n=uJl4\n-----END PGP SIGNATURE-----\n", "payload": "tree 3735c11eabd20be894e1f25017f838b09c2540b6\nparent a07e406d06978c6f5efc9ba80fac27e4a786e4e0\nparent 3dc898389f16b34643992d10699fc7b79baab7e8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637607787 +0000\ncommitter GitHub <noreply@github.com> 1637607787 +0000\n\nMerge #10834\n\n10834: Make lint groups work correctly with `warningsAsInfo` and `warningsAsHint` r=Veykril a=Emilgardis\n\nthis change makes it possible to specify\r\n\r\n```json\r\n{\r\n   \"rust-analyzer.diagnostics.warningsAsInfo\": [\"unused\"],\r\n}\r\n```\r\n\r\nto make all lints in the `unused` group show as info, etc.\n\nCo-authored-by: Emil Gardstr\u00f6m <emil.gardstrom@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b938ef1ca6154b215d8e279160ffbceeca765f2", "html_url": "https://github.com/rust-lang/rust/commit/1b938ef1ca6154b215d8e279160ffbceeca765f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b938ef1ca6154b215d8e279160ffbceeca765f2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a07e406d06978c6f5efc9ba80fac27e4a786e4e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a07e406d06978c6f5efc9ba80fac27e4a786e4e0", "html_url": "https://github.com/rust-lang/rust/commit/a07e406d06978c6f5efc9ba80fac27e4a786e4e0"}, {"sha": "3dc898389f16b34643992d10699fc7b79baab7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc898389f16b34643992d10699fc7b79baab7e8", "html_url": "https://github.com/rust-lang/rust/commit/3dc898389f16b34643992d10699fc7b79baab7e8"}], "stats": {"total": 1136, "additions": 1042, "deletions": 94}, "files": [{"sha": "97aff0970a8e71f69e2c12ada87d0ce6c26074bc", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b938ef1ca6154b215d8e279160ffbceeca765f2/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b938ef1ca6154b215d8e279160ffbceeca765f2/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=1b938ef1ca6154b215d8e279160ffbceeca765f2", "patch": "@@ -282,3 +282,21 @@ pub fn for_each_break_expr(\n         }\n     }\n }\n+\n+/// Checks if the given lint is equal or is contained by the other lint which may or may not be a group.\n+pub fn lint_eq_or_in_group(lint: &str, lint_is: &str) -> bool {\n+    if lint == lint_is {\n+        return true;\n+    }\n+\n+    if let Some(group) = generated_lints::DEFAULT_LINT_GROUPS\n+        .iter()\n+        .chain(generated_lints::CLIPPY_LINT_GROUPS.iter())\n+        .chain(generated_lints::RUSTDOC_LINT_GROUPS.iter())\n+        .find(|&check| check.lint.label == lint_is)\n+    {\n+        group.children.contains(&lint)\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "25b0a463fb0d48e33a628468fe85d68ca3dc65d2", "filename": "crates/ide_db/src/helpers/generated_lints.rs", "status": "modified", "additions": 913, "deletions": 78, "changes": 991, "blob_url": "https://github.com/rust-lang/rust/blob/1b938ef1ca6154b215d8e279160ffbceeca765f2/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b938ef1ca6154b215d8e279160ffbceeca765f2/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs?ref=1b938ef1ca6154b215d8e279160ffbceeca765f2", "patch": "@@ -4,6 +4,10 @@ pub struct Lint {\n     pub label: &'static str,\n     pub description: &'static str,\n }\n+pub struct LintGroup {\n+    pub lint: Lint,\n+    pub children: &'static [&'static str],\n+}\n pub const DEFAULT_LINTS: &[Lint] = &[\n     Lint {\n         label: \"absolute_paths_not_starting_with_crate\",\n@@ -30,6 +34,10 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         description: r##\"detects pattern bindings with the same name as one of the matched variants\"##,\n     },\n     Lint { label: \"box_pointers\", description: r##\"use of owned (Box type) heap memory\"## },\n+    Lint {\n+        label: \"break_with_label_and_loop\",\n+        description: r##\"`break` expression with label and unlabeled loop as value expression\"##,\n+    },\n     Lint {\n         label: \"cenum_impl_drop_cast\",\n         description: r##\"a C-like enum implementing Drop is cast\"##,\n@@ -68,11 +76,18 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"deprecated_in_future\",\n         description: r##\"detects use of items that will be deprecated in a future version\"##,\n     },\n+    Lint {\n+        label: \"deref_into_dyn_supertrait\",\n+        description: r##\"`Deref` implementation usage with a supertrait trait object for output might be shadowed in the future\"##,\n+    },\n     Lint {\n         label: \"deref_nullptr\",\n         description: r##\"detects when an null pointer is dereferenced\"##,\n     },\n-    Lint { label: \"drop_bounds\", description: r##\"bounds of the form `T: Drop` are useless\"## },\n+    Lint {\n+        label: \"drop_bounds\",\n+        description: r##\"bounds of the form `T: Drop` are most likely incorrect\"##,\n+    },\n     Lint {\n         label: \"dyn_drop\",\n         description: r##\"trait objects of the form `dyn Drop` are useless\"##,\n@@ -85,6 +100,10 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"ellipsis_inclusive_range_patterns\",\n         description: r##\"`...` range patterns are deprecated\"##,\n     },\n+    Lint {\n+        label: \"enum_intrinsics_non_enums\",\n+        description: r##\"detects calls to `core::mem::discriminant` and `core::mem::variant_count` with non-enum types\"##,\n+    },\n     Lint {\n         label: \"explicit_outlives_requirements\",\n         description: r##\"outlives requirements can be inferred\"##,\n@@ -100,7 +119,7 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n     },\n     Lint {\n         label: \"future_incompatible\",\n-        description: r##\"lint group for: forbidden-lint-groups, illegal-floating-point-literal-pattern, private-in-public, pub-use-of-private-extern-crate, invalid-type-param-default, const-err, unaligned-references, patterns-in-fns-without-body, missing-fragment-specifier, late-bound-lifetime-arguments, order-dependent-trait-objects, coherence-leak-check, unstable-name-collisions, where-clauses-object-safety, proc-macro-derive-resolution-fallback, macro-expanded-macro-exports-accessed-by-absolute-paths, ill-formed-attribute-input, conflicting-repr-hints, ambiguous-associated-items, mutable-borrow-reservation-conflict, indirect-structural-match, pointer-structural-match, nontrivial-structural-match, soft-unstable, cenum-impl-drop-cast, const-evaluatable-unchecked, uninhabited-static, unsupported-naked-functions, invalid-doc-attributes, semicolon-in-expressions-from-macros, legacy-derive-helpers, proc-macro-back-compat, unsupported-calling-conventions\"##,\n+        description: r##\"lint group for: forbidden-lint-groups, illegal-floating-point-literal-pattern, private-in-public, pub-use-of-private-extern-crate, invalid-type-param-default, const-err, unaligned-references, patterns-in-fns-without-body, missing-fragment-specifier, late-bound-lifetime-arguments, order-dependent-trait-objects, coherence-leak-check, unstable-name-collisions, where-clauses-object-safety, proc-macro-derive-resolution-fallback, macro-expanded-macro-exports-accessed-by-absolute-paths, ill-formed-attribute-input, conflicting-repr-hints, ambiguous-associated-items, mutable-borrow-reservation-conflict, indirect-structural-match, pointer-structural-match, nontrivial-structural-match, soft-unstable, cenum-impl-drop-cast, const-evaluatable-unchecked, uninhabited-static, unsupported-naked-functions, invalid-doc-attributes, semicolon-in-expressions-from-macros, legacy-derive-helpers, proc-macro-back-compat, unsupported-calling-conventions, deref-into-dyn-supertrait\"##,\n     },\n     Lint {\n         label: \"ill_formed_attribute_input\",\n@@ -135,6 +154,10 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"inline_no_sanitize\",\n         description: r##\"detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`\"##,\n     },\n+    Lint {\n+        label: \"invalid_atomic_ordering\",\n+        description: r##\"usage of invalid atomic ordering in atomic operations and memory fences\"##,\n+    },\n     Lint {\n         label: \"invalid_doc_attributes\",\n         description: r##\"detects invalid `#[doc(...)]` attributes\"##,\n@@ -197,6 +220,10 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"mixed_script_confusables\",\n         description: r##\"detects Unicode scripts whose mixed script confusables codepoints are solely used\"##,\n     },\n+    Lint {\n+        label: \"must_not_suspend\",\n+        description: r##\"use of a `#[must_not_suspend]` value across a yield point\"##,\n+    },\n     Lint {\n         label: \"mutable_borrow_reservation_conflict\",\n         description: r##\"reservation of a two-phased borrow conflicts with other shared borrows\"##,\n@@ -205,6 +232,7 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"mutable_transmutes\",\n         description: r##\"mutating transmuted &mut T from &T may cause undefined behavior\"##,\n     },\n+    Lint { label: \"named_asm_labels\", description: r##\"named labels in inline assembly\"## },\n     Lint {\n         label: \"no_mangle_const_items\",\n         description: r##\"const items will not have their symbols exported\"##,\n@@ -215,6 +243,10 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"non_camel_case_types\",\n         description: r##\"types, variants, traits and type parameters should have camel case names\"##,\n     },\n+    Lint {\n+        label: \"non_exhaustive_omitted_patterns\",\n+        description: r##\"detect when patterns of types marked `non_exhaustive` are missed\"##,\n+    },\n     Lint {\n         label: \"non_fmt_panics\",\n         description: r##\"detect single-argument panic!() invocations in which the argument is not a format string\"##,\n@@ -333,6 +365,14 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         label: \"temporary_cstring_as_ptr\",\n         description: r##\"detects getting the inner pointer of a temporary `CString`\"##,\n     },\n+    Lint {\n+        label: \"text_direction_codepoint_in_comment\",\n+        description: r##\"invisible directionality-changing codepoints in comment\"##,\n+    },\n+    Lint {\n+        label: \"text_direction_codepoint_in_literal\",\n+        description: r##\"detect special Unicode codepoints that affect the visual representation of text on screen, changing the direction in which text flows\"##,\n+    },\n     Lint {\n         label: \"trivial_bounds\",\n         description: r##\"these bounds don't depend on an type parameters\"##,\n@@ -501,6 +541,133 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         description: r##\"suggest using `loop { }` instead of `while true { }`\"##,\n     },\n ];\n+pub const DEFAULT_LINT_GROUPS: &[LintGroup] = &[\n+    LintGroup {\n+        lint: Lint {\n+            label: \"future_incompatible\",\n+            description: r##\"lint group for: forbidden-lint-groups, illegal-floating-point-literal-pattern, private-in-public, pub-use-of-private-extern-crate, invalid-type-param-default, const-err, unaligned-references, patterns-in-fns-without-body, missing-fragment-specifier, late-bound-lifetime-arguments, order-dependent-trait-objects, coherence-leak-check, unstable-name-collisions, where-clauses-object-safety, proc-macro-derive-resolution-fallback, macro-expanded-macro-exports-accessed-by-absolute-paths, ill-formed-attribute-input, conflicting-repr-hints, ambiguous-associated-items, mutable-borrow-reservation-conflict, indirect-structural-match, pointer-structural-match, nontrivial-structural-match, soft-unstable, cenum-impl-drop-cast, const-evaluatable-unchecked, uninhabited-static, unsupported-naked-functions, invalid-doc-attributes, semicolon-in-expressions-from-macros, legacy-derive-helpers, proc-macro-back-compat, unsupported-calling-conventions, deref-into-dyn-supertrait\"##,\n+        },\n+        children: &[\n+            \"forbidden_lint_groups\",\n+            \"illegal_floating_point_literal_pattern\",\n+            \"private_in_public\",\n+            \"pub_use_of_private_extern_crate\",\n+            \"invalid_type_param_default\",\n+            \"const_err\",\n+            \"unaligned_references\",\n+            \"patterns_in_fns_without_body\",\n+            \"missing_fragment_specifier\",\n+            \"late_bound_lifetime_arguments\",\n+            \"order_dependent_trait_objects\",\n+            \"coherence_leak_check\",\n+            \"unstable_name_collisions\",\n+            \"where_clauses_object_safety\",\n+            \"proc_macro_derive_resolution_fallback\",\n+            \"macro_expanded_macro_exports_accessed_by_absolute_paths\",\n+            \"ill_formed_attribute_input\",\n+            \"conflicting_repr_hints\",\n+            \"ambiguous_associated_items\",\n+            \"mutable_borrow_reservation_conflict\",\n+            \"indirect_structural_match\",\n+            \"pointer_structural_match\",\n+            \"nontrivial_structural_match\",\n+            \"soft_unstable\",\n+            \"cenum_impl_drop_cast\",\n+            \"const_evaluatable_unchecked\",\n+            \"uninhabited_static\",\n+            \"unsupported_naked_functions\",\n+            \"invalid_doc_attributes\",\n+            \"semicolon_in_expressions_from_macros\",\n+            \"legacy_derive_helpers\",\n+            \"proc_macro_back_compat\",\n+            \"unsupported_calling_conventions\",\n+            \"deref_into_dyn_supertrait\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"nonstandard_style\",\n+            description: r##\"lint group for: non-camel-case-types, non-snake-case, non-upper-case-globals\"##,\n+        },\n+        children: &[\"non_camel_case_types\", \"non_snake_case\", \"non_upper_case_globals\"],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"rust_2018_compatibility\",\n+            description: r##\"lint group for: keyword-idents, anonymous-parameters, tyvar-behind-raw-pointer, absolute-paths-not-starting-with-crate\"##,\n+        },\n+        children: &[\n+            \"keyword_idents\",\n+            \"anonymous_parameters\",\n+            \"tyvar_behind_raw_pointer\",\n+            \"absolute_paths_not_starting_with_crate\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"rust_2018_idioms\",\n+            description: r##\"lint group for: bare-trait-objects, unused-extern-crates, ellipsis-inclusive-range-patterns, elided-lifetimes-in-paths, explicit-outlives-requirements\"##,\n+        },\n+        children: &[\n+            \"bare_trait_objects\",\n+            \"unused_extern_crates\",\n+            \"ellipsis_inclusive_range_patterns\",\n+            \"elided_lifetimes_in_paths\",\n+            \"explicit_outlives_requirements\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"rust_2021_compatibility\",\n+            description: r##\"lint group for: ellipsis-inclusive-range-patterns, bare-trait-objects, rust-2021-incompatible-closure-captures, rust-2021-incompatible-or-patterns, rust-2021-prelude-collisions, rust-2021-prefixes-incompatible-syntax, array-into-iter, non-fmt-panics\"##,\n+        },\n+        children: &[\n+            \"ellipsis_inclusive_range_patterns\",\n+            \"bare_trait_objects\",\n+            \"rust_2021_incompatible_closure_captures\",\n+            \"rust_2021_incompatible_or_patterns\",\n+            \"rust_2021_prelude_collisions\",\n+            \"rust_2021_prefixes_incompatible_syntax\",\n+            \"array_into_iter\",\n+            \"non_fmt_panics\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"unused\",\n+            description: r##\"lint group for: unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comments, unused-extern-crates, unused-features, unused-labels, unused-parens, unused-braces, redundant-semicolons\"##,\n+        },\n+        children: &[\n+            \"unused_imports\",\n+            \"unused_variables\",\n+            \"unused_assignments\",\n+            \"dead_code\",\n+            \"unused_mut\",\n+            \"unreachable_code\",\n+            \"unreachable_patterns\",\n+            \"unused_must_use\",\n+            \"unused_unsafe\",\n+            \"path_statements\",\n+            \"unused_attributes\",\n+            \"unused_macros\",\n+            \"unused_allocation\",\n+            \"unused_doc_comments\",\n+            \"unused_extern_crates\",\n+            \"unused_features\",\n+            \"unused_labels\",\n+            \"unused_parens\",\n+            \"unused_braces\",\n+            \"redundant_semicolons\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"warnings\",\n+            description: r##\"lint group for: all lints that are set to issue warnings\"##,\n+        },\n+        children: &[],\n+    },\n+];\n \n pub const RUSTDOC_LINTS: &[Lint] = &[\n     Lint {\n@@ -541,6 +708,23 @@ pub const RUSTDOC_LINTS: &[Lint] = &[\n         description: r##\"linking from a public item to a private one\"##,\n     },\n ];\n+pub const RUSTDOC_LINT_GROUPS: &[LintGroup] = &[LintGroup {\n+    lint: Lint {\n+        label: \"rustdoc::all\",\n+        description: r##\"lint group for: rustdoc::broken-intra-doc-links, rustdoc::private-intra-doc-links, rustdoc::missing-doc-code-examples, rustdoc::private-doc-tests, rustdoc::invalid-codeblock-attributes, rustdoc::invalid-rust-codeblocks, rustdoc::invalid-html-tags, rustdoc::bare-urls, rustdoc::missing-crate-level-docs\"##,\n+    },\n+    children: &[\n+        \"rustdoc::broken_intra_doc_links\",\n+        \"rustdoc::private_intra_doc_links\",\n+        \"rustdoc::missing_doc_code_examples\",\n+        \"rustdoc::private_doc_tests\",\n+        \"rustdoc::invalid_codeblock_attributes\",\n+        \"rustdoc::invalid_rust_codeblocks\",\n+        \"rustdoc::invalid_html_tags\",\n+        \"rustdoc::bare_urls\",\n+        \"rustdoc::missing_crate_level_docs\",\n+    ],\n+}];\n \n pub const FEATURES: &[Lint] = &[\n     Lint {\n@@ -789,6 +973,47 @@ detail of the `global_allocator` feature not intended for use outside the\n compiler.\n \n ------------------------\n+\"##,\n+    },\n+    Lint {\n+        label: \"arbitrary_enum_discriminant\",\n+        description: r##\"# `arbitrary_enum_discriminant`\n+\n+The tracking issue for this feature is: [#60553]\n+\n+[#60553]: https://github.com/rust-lang/rust/issues/60553\n+\n+------------------------\n+\n+The `arbitrary_enum_discriminant` feature permits tuple-like and\n+struct-like enum variants with `#[repr(<int-type>)]` to have explicit discriminants.\n+\n+## Examples\n+\n+```rust\n+#![feature(arbitrary_enum_discriminant)]\n+\n+#[allow(dead_code)]\n+#[repr(u8)]\n+enum Enum {\n+    Unit = 3,\n+    Tuple(u16) = 2,\n+    Struct {\n+        a: u8,\n+        b: u16,\n+    } = 1,\n+}\n+\n+impl Enum {\n+    fn tag(&self) -> u8 {\n+        unsafe { *(self as *const Self as *const u8) }\n+    }\n+}\n+\n+assert_eq!(3, Enum::Unit.tag());\n+assert_eq!(2, Enum::Tuple(5).tag());\n+assert_eq!(1, Enum::Struct{a: 7, b: 11}.tag());\n+```\n \"##,\n     },\n     Lint {\n@@ -861,7 +1086,7 @@ assert_eq!(x, 5);\n This will write the value `5` into the `u64` variable `x`.\n You can see that the string literal we use to specify instructions is actually a template string.\n It is governed by the same rules as Rust [format strings][format-syntax].\n-The arguments that are inserted into the template however look a bit different then you may\n+The arguments that are inserted into the template however look a bit different than you may\n be familiar with. First we need to specify if the variable is an input or an output of the\n inline assembly. In this case it is an output. We declared this by writing `out`.\n We also need to specify in what kind of register the assembly expects the variable.\n@@ -901,7 +1126,7 @@ code.\n Second, we can see that inputs are declared by writing `in` instead of `out`.\n \n Third, one of our operands has a type we haven't seen yet, `const`.\n-This tells the compiler to expand this argument to value directly inside the assembly template.\n+This tells the compiler to expand this argument to a value directly inside the assembly template.\n This is only possible for constants and literals.\n \n Fourth, we can see that we can specify an argument number, or name as in any format string.\n@@ -1052,7 +1277,7 @@ unsafe {\n }\n \n println!(\n-    \"L1 Cache: {}\",\n+    \"L0 Cache: {}\",\n     ((ebx >> 22) + 1) * (((ebx >> 12) & 0x3ff) + 1) * ((ebx & 0xfff) + 1) * (ecx + 1)\n );\n ```\n@@ -1114,7 +1339,7 @@ fn call_foo(arg: i32) -> i32 {\n \n Note that the `fn` or `static` item does not need to be public or `#[no_mangle]`: the compiler will automatically insert the appropriate mangled symbol name into the assembly code.\n \n-By default, `asm!` assumes that any register not specified as an output will have its contents preserved by the assembly code. The [`clobber_abi`](#abi-clobbers) argument to `asm!` tells the compiler to automatically insert the necessary clobber operands according to the given calling convention ABI: any register which is not fully preserved in that ABI will be treated as clobbered.\n+By default, `asm!` assumes that any register not specified as an output will have its contents preserved by the assembly code. The [`clobber_abi`](#abi-clobbers) argument to `asm!` tells the compiler to automatically insert the necessary clobber operands according to the given calling convention ABI: any register which is not fully preserved in that ABI will be treated as clobbered.  Multiple `clobber_abi` arguments may be provided and all clobbers from all specified ABIs will be inserted.\n \n ## Register template modifiers\n \n@@ -1248,10 +1473,10 @@ reg_spec := <register class> / \"<explicit register>\"\n operand_expr := expr / \"_\" / expr \"=>\" expr / expr \"=>\" \"_\"\n reg_operand := dir_spec \"(\" reg_spec \")\" operand_expr\n operand := reg_operand / \"const\" const_expr / \"sym\" path\n-clobber_abi := \"clobber_abi(\" <abi> \")\"\n+clobber_abi := \"clobber_abi(\" <abi> *[\",\" <abi>] [\",\"] \")\"\n option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / \"noreturn\" / \"nostack\" / \"att_syntax\" / \"raw\"\n options := \"options(\" option *[\",\" option] [\",\"] \")\"\n-asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) [\",\" clobber_abi] *(\",\" options) [\",\"] \")\"\n+asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" [ident \"=\"] operand) *(\",\" clobber_abi) *(\",\" options) [\",\"] \")\"\n ```\n \n Inline assembly is currently supported on the following architectures:\n@@ -1357,9 +1582,12 @@ Here is the list of currently supported register classes:\n | AArch64 | `vreg` | `v[0-31]` | `w` |\n | AArch64 | `vreg_low16` | `v[0-15]` | `x` |\n | AArch64 | `preg` | `p[0-15]`, `ffr` | Only clobbers |\n-| ARM | `reg` | `r[0-12]`, `r14` | `r` |\n-| ARM (Thumb) | `reg_thumb` | `r[0-r7]` | `l` |\n+| ARM (ARM) | `reg` | `r[0-12]`, `r14` | `r` |\n+| ARM (Thumb2) | `reg` | `r[0-12]`, `r14` | `r` |\n+| ARM (Thumb1) | `reg` | `r[0-7]` | `r` |\n | ARM (ARM) | `reg_thumb` | `r[0-r12]`, `r14` | `l` |\n+| ARM (Thumb2) | `reg_thumb` | `r[0-7]` | `l` |\n+| ARM (Thumb1) | `reg_thumb` | `r[0-7]` | `l` |\n | ARM | `sreg` | `s[0-31]` | `t` |\n | ARM | `sreg_low16` | `s[0-15]` | `x` |\n | ARM | `dreg` | `d[0-31]` | `w` |\n@@ -1594,6 +1822,8 @@ As stated in the previous section, passing an input value smaller than the regis\n \n The `clobber_abi` keyword can be used to apply a default set of clobbers to an `asm` block. This will automatically insert the necessary clobber constraints as needed for calling a function with a particular calling convention: if the calling convention does not fully preserve the value of a register across a call then a `lateout(\"reg\") _` is implicitly added to the operands list.\n \n+`clobber_abi` may be specified any number of times. It will insert a clobber for all unique registers in the union of all specified calling conventions.\n+\n Generic register class outputs are disallowed by the compiler when `clobber_abi` is used: all outputs must specify an explicit register. Explicit register outputs have precedence over the implicit clobbers inserted by `clobber_abi`: a clobber will only be inserted for a register if that register is not used as an output.\n The following ABIs can be used with `clobber_abi`:\n \n@@ -1680,6 +1910,8 @@ The compiler performs some additional checks on options:\n     - You are responsible for switching any target-specific state (e.g. thread-local storage, stack bounds).\n     - The set of memory locations that you may access is the intersection of those allowed by the `asm!` blocks you entered and exited.\n - You cannot assume that an `asm!` block will appear exactly once in the output binary. The compiler is allowed to instantiate multiple copies of the `asm!` block, for example when the function containing it is inlined in multiple places.\n+- On x86, inline assembly must not end with an instruction prefix (such as `LOCK`) that would apply to instructions generated by the compiler.\n+  - The compiler is currently unable to detect this due to the way inline assembly is compiled, but may catch and reject this in the future.\n \n > **Note**: As a general rule, the flags covered by `preserves_flags` are those which are *not* preserved when performing a function call.\n \"##,\n@@ -2782,57 +3014,6 @@ fn main() {\n     assert_eq!(adder(2), 5);\n }\n ```\n-\"##,\n-    },\n-    Lint {\n-        label: \"format_args_capture\",\n-        description: r##\"# `format_args_capture`\n-\n-The tracking issue for this feature is: [#67984]\n-\n-[#67984]: https://github.com/rust-lang/rust/issues/67984\n-\n-------------------------\n-\n-Enables `format_args!` (and macros which use `format_args!` in their implementation, such\n-as `format!`, `print!` and `panic!`) to capture variables from the surrounding scope.\n-This avoids the need to pass named parameters when the binding in question\n-already exists in scope.\n-\n-```rust\n-#![feature(format_args_capture)]\n-\n-let (person, species, name) = (\"Charlie Brown\", \"dog\", \"Snoopy\");\n-\n-// captures named argument `person`\n-print!(\"Hello {person}\");\n-\n-// captures named arguments `species` and `name`\n-format!(\"The {species}'s name is {name}.\");\n-```\n-\n-This also works for formatting parameters such as width and precision:\n-\n-```rust\n-#![feature(format_args_capture)]\n-\n-let precision = 2;\n-let s = format!(\"{:.precision$}\", 1.324223);\n-\n-assert_eq!(&s, \"1.32\");\n-```\n-\n-A non-exhaustive list of macros which benefit from this functionality include:\n-- `format!`\n-- `print!` and `println!`\n-- `eprint!` and `eprintln!`\n-- `write!` and `writeln!`\n-- `panic!`\n-- `unreachable!`\n-- `unimplemented!`\n-- `todo!`\n-- `assert!` and similar\n-- macros in many thirdparty crates, such as `log`\n \"##,\n     },\n     Lint {\n@@ -3164,7 +3345,7 @@ are concatenated into one or assembled separately.\n constants defined in Rust to be used in assembly code:\n \n ```rust,no_run\n-#![feature(global_asm)]\n+#![feature(global_asm, asm_const)]\n # #[cfg(any(target_arch=\"x86\", target_arch=\"x86_64\"))]\n # mod x86 {\n const C: i32 = 1234;\n@@ -3185,7 +3366,7 @@ override this by adding `options(att_syntax)` at the end of the macro\n arguments list:\n \n ```rust,no_run\n-#![feature(global_asm)]\n+#![feature(global_asm, asm_const)]\n # #[cfg(any(target_arch=\"x86\", target_arch=\"x86_64\"))]\n # mod x86 {\n global_asm!(\"movl ${}, %ecx\", const 5, options(att_syntax));\n@@ -4937,6 +5118,43 @@ let result: Result<i32, ParseIntError> = try {\n };\n assert!(result.is_err());\n ```\n+\"##,\n+    },\n+    Lint {\n+        label: \"type_changing_struct_update\",\n+        description: r##\"# `type_changing_struct_update`\n+\n+The tracking issue for this feature is: [#86555]\n+\n+[#86555]: https://github.com/rust-lang/rust/issues/86555\n+\n+------------------------\n+\n+This implements [RFC2528]. When turned on, you can create instances of the same struct\n+that have different generic type or lifetime parameters.\n+\n+[RFC2528]: https://github.com/rust-lang/rfcs/blob/master/text/2528-type-changing-struct-update-syntax.md\n+\n+```rust\n+#![allow(unused_variables, dead_code)]\n+#![feature(type_changing_struct_update)]\n+\n+fn main () {\n+    struct Foo<T, U> {\n+        field1: T,\n+        field2: U,\n+    }\n+\n+    let base: Foo<String, i32> = Foo {\n+        field1: String::from(\"hello\"),\n+        field2: 1234,\n+    };\n+    let updated: Foo<f64, i32> = Foo {\n+        field1: 3.14,\n+        ..base\n+    };\n+}\n+```\n \"##,\n     },\n     Lint {\n@@ -5574,7 +5792,7 @@ explicitly or vice versa.\"##,\n explicitly or vice versa.\"##,\n     },\n     Lint {\n-        label: \"clippy::disallowed_method\",\n+        label: \"clippy::disallowed_methods\",\n         description: r##\"Denies the configured methods and functions in clippy.toml\"##,\n     },\n     Lint {\n@@ -5593,7 +5811,7 @@ See also: [`non_ascii_idents`].\n [supported_scripts]: https://www.unicode.org/iso15924/iso15924-codes.html\"##,\n     },\n     Lint {\n-        label: \"clippy::disallowed_type\",\n+        label: \"clippy::disallowed_types\",\n         description: r##\"Denies the configured types in clippy.toml.\"##,\n     },\n     Lint {\n@@ -5919,10 +6137,6 @@ else branch.\"##,\n         description: r##\"Checks for `if/else` with the same body as the *then* part\n and the *else* part.\"##,\n     },\n-    Lint {\n-        label: \"clippy::if_then_panic\",\n-        description: r##\"Detects `if`-then-`panic!` that can be replaced with `assert!`.\"##,\n-    },\n     Lint {\n         label: \"clippy::if_then_some_else_none\",\n         description: r##\"Checks for if-else that could be written to `bool::then`.\"##,\n@@ -5965,6 +6179,11 @@ grouped inconsistently with underscores.\"##,\n         description: r##\"Checks for struct constructors where all fields are shorthand and\n the order of the field init shorthand in the constructor is inconsistent\n with the order in the struct definition.\"##,\n+    },\n+    Lint {\n+        label: \"clippy::index_refutable_slice\",\n+        description: r##\"The lint checks for slice bindings in patterns that are only used to\n+access individual slice values.\"##,\n     },\n     Lint {\n         label: \"clippy::indexing_slicing\",\n@@ -6160,7 +6379,8 @@ where expr has a type that implements `Drop`\"##,\n     },\n     Lint {\n         label: \"clippy::let_underscore_lock\",\n-        description: r##\"Checks for `let _ = sync_lock`\"##,\n+        description: r##\"Checks for `let _ = sync_lock`.\n+This supports `mutex` and `rwlock` in `std::sync` and `parking_lot`.\"##,\n     },\n     Lint {\n         label: \"clippy::let_underscore_must_use\",\n@@ -6190,6 +6410,10 @@ cannot be represented as the underlying type without loss.\"##,\n         label: \"clippy::main_recursion\",\n         description: r##\"Checks for recursion using the entrypoint.\"##,\n     },\n+    Lint {\n+        label: \"clippy::manual_assert\",\n+        description: r##\"Detects `if`-then-`panic!` that can be replaced with `assert!`.\"##,\n+    },\n     Lint {\n         label: \"clippy::manual_async_fn\",\n         description: r##\"It checks for manual implementations of `async` functions.\"##,\n@@ -6348,10 +6572,6 @@ and take drastic actions like `panic!`.\"##,\n         label: \"clippy::maybe_infinite_iter\",\n         description: r##\"Checks for iteration that may be infinite.\"##,\n     },\n-    Lint {\n-        label: \"clippy::mem_discriminant_non_enum\",\n-        description: r##\"Checks for calls of `mem::discriminant()` on a non-enum type.\"##,\n-    },\n     Lint {\n         label: \"clippy::mem_forget\",\n         description: r##\"Checks for usage of `std::mem::forget(t)` where `t` is\n@@ -6410,7 +6630,7 @@ return a `Result` type and warns if there is no `# Errors` section.\"##,\n     },\n     Lint {\n         label: \"clippy::missing_inline_in_public_items\",\n-        description: r##\"it lints if an exported function, method, trait method with default impl,\n+        description: r##\"It lints if an exported function, method, trait method with default impl,\n or trait method impl is not `#[inline]`.\"##,\n     },\n     Lint {\n@@ -6578,6 +6798,10 @@ collection just to get the values by index.\"##,\n         label: \"clippy::needless_return\",\n         description: r##\"Checks for return statements at the end of a block.\"##,\n     },\n+    Lint {\n+        label: \"clippy::needless_splitn\",\n+        description: r##\"Checks for usages of `str::splitn` (or `str::rsplitn`) where using `str::split` would be the same.\"##,\n+    },\n     Lint {\n         label: \"clippy::needless_update\",\n         description: r##\"Checks for needlessly including a base struct on update\n@@ -6988,6 +7212,12 @@ one from a trait, another not from trait.\"##,\n         label: \"clippy::semicolon_if_nothing_returned\",\n         description: r##\"Looks for blocks of expressions and fires if the last expression returns\n `()` but is not followed by a semicolon.\"##,\n+    },\n+    Lint {\n+        label: \"clippy::separated_literal_suffix\",\n+        description: r##\"Warns if literal suffixes are separated by an underscore.\n+To enforce separated literal suffix style,\n+see the `unseparated_literal_suffix` lint.\"##,\n     },\n     Lint {\n         label: \"clippy::serde_api_misuse\",\n@@ -7107,6 +7337,10 @@ match.\"##,\n         description: r##\"Checks for the `as_bytes` method called on string literals\n that contain only ASCII characters.\"##,\n     },\n+    Lint {\n+        label: \"clippy::string_slice\",\n+        description: r##\"Checks for slice operations on strings\"##,\n+    },\n     Lint {\n         label: \"clippy::string_to_string\",\n         description: r##\"This lint checks for `.to_string()` method calls on values of type `String`.\"##,\n@@ -7206,6 +7440,10 @@ in a macro that does formatting.\"##,\n         description: r##\"Checks for function arguments and let bindings denoted as\n `ref`.\"##,\n     },\n+    Lint {\n+        label: \"clippy::trailing_empty_array\",\n+        description: r##\"Displays a warning when a struct with a trailing zero-sized array is declared without a `repr` attribute.\"##,\n+    },\n     Lint {\n         label: \"clippy::trait_duplication_in_bounds\",\n         description: r##\"Checks for cases where generics are being used and multiple\n@@ -7231,7 +7469,10 @@ syntax specifications for trait bounds are used simultaneously.\"##,\n         label: \"clippy::transmute_int_to_float\",\n         description: r##\"Checks for transmutes from an integer to a float.\"##,\n     },\n-    Lint { label: \"clippy::transmute_num_to_bytes\", description: r##\"\"## },\n+    Lint {\n+        label: \"clippy::transmute_num_to_bytes\",\n+        description: r##\"Checks for transmutes from a number to an array of `u8`\"##,\n+    },\n     Lint {\n         label: \"clippy::transmute_ptr_to_ptr\",\n         description: r##\"Checks for transmutes from a pointer to a pointer, or\n@@ -7310,6 +7551,7 @@ unit literal (`()`).\"##,\n         description: r##\"Checks for comparisons to unit. This includes all binary\n comparisons (like `==` and `<`) and asserts.\"##,\n     },\n+    Lint { label: \"clippy::unit_hash\", description: r##\"Detects `().hash(_)`.\"## },\n     Lint {\n         label: \"clippy::unit_return_expecting_ord\",\n         description: r##\"Checks for functions that expect closures of type\n@@ -7418,7 +7660,9 @@ name.\"##,\n     Lint {\n         label: \"clippy::unseparated_literal_suffix\",\n         description: r##\"Warns if literal suffixes are not separated by an\n-underscore.\"##,\n+underscore.\n+To enforce unseparated literal suffix style,\n+see the `separated_literal_suffix` lint.\"##,\n     },\n     Lint {\n         label: \"clippy::unsound_collection_transmute\",\n@@ -7460,7 +7704,7 @@ by nibble or byte.\"##,\n     },\n     Lint {\n         label: \"clippy::unwrap_in_result\",\n-        description: r##\"Checks for functions of type Result that contain `expect()` or `unwrap()`\"##,\n+        description: r##\"Checks for functions of type `Result` that contain `expect()` or `unwrap()`\"##,\n     },\n     Lint {\n         label: \"clippy::unwrap_or_else_default\",\n@@ -7656,3 +7900,594 @@ architecture.\"##,\n zero-sized types\"##,\n     },\n ];\n+pub const CLIPPY_LINT_GROUPS: &[LintGroup] = &[\n+    LintGroup {\n+        lint: Lint {\n+            label: \"clippy::cargo\",\n+            description: r##\"lint group for: clippy::cargo_common_metadata, clippy::multiple_crate_versions, clippy::negative_feature_names, clippy::redundant_feature_names, clippy::wildcard_dependencies\"##,\n+        },\n+        children: &[\n+            \"clippy::cargo_common_metadata\",\n+            \"clippy::multiple_crate_versions\",\n+            \"clippy::negative_feature_names\",\n+            \"clippy::redundant_feature_names\",\n+            \"clippy::wildcard_dependencies\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"clippy::complexity\",\n+            description: r##\"lint group for: clippy::bind_instead_of_map, clippy::bool_comparison, clippy::borrowed_box, clippy::char_lit_as_u8, clippy::clone_on_copy, clippy::crosspointer_transmute, clippy::deprecated_cfg_attr, clippy::deref_addrof, clippy::derivable_impls, clippy::diverging_sub_expression, clippy::double_comparisons, clippy::double_parens, clippy::duration_subsec, clippy::explicit_counter_loop, clippy::explicit_write, clippy::extra_unused_lifetimes, clippy::filter_map_identity, clippy::filter_next, clippy::flat_map_identity, clippy::get_last_with_len, clippy::identity_op, clippy::inspect_for_each, clippy::int_plus_one, clippy::iter_count, clippy::manual_filter_map, clippy::manual_find_map, clippy::manual_flatten, clippy::manual_split_once, clippy::manual_strip, clippy::manual_swap, clippy::manual_unwrap_or, clippy::map_identity, clippy::match_as_ref, clippy::match_single_binding, clippy::needless_arbitrary_self_type, clippy::needless_bool, clippy::needless_borrowed_reference, clippy::needless_lifetimes, clippy::needless_option_as_deref, clippy::needless_question_mark, clippy::needless_splitn, clippy::needless_update, clippy::neg_cmp_op_on_partial_ord, clippy::no_effect, clippy::nonminimal_bool, clippy::option_as_ref_deref, clippy::option_filter_map, clippy::option_map_unit_fn, clippy::overflow_check_conditional, clippy::partialeq_ne_impl, clippy::precedence, clippy::ptr_offset_with_cast, clippy::range_zip_with_len, clippy::redundant_closure_call, clippy::redundant_slicing, clippy::ref_in_deref, clippy::repeat_once, clippy::result_map_unit_fn, clippy::search_is_some, clippy::short_circuit_statement, clippy::single_element_loop, clippy::skip_while_next, clippy::string_from_utf8_as_bytes, clippy::strlen_on_c_strings, clippy::temporary_assignment, clippy::too_many_arguments, clippy::transmute_bytes_to_str, clippy::transmute_float_to_int, clippy::transmute_int_to_bool, clippy::transmute_int_to_char, clippy::transmute_int_to_float, clippy::transmute_num_to_bytes, clippy::transmute_ptr_to_ref, clippy::transmutes_expressible_as_ptr_casts, clippy::type_complexity, clippy::unit_arg, clippy::unnecessary_cast, clippy::unnecessary_filter_map, clippy::unnecessary_operation, clippy::unnecessary_sort_by, clippy::unnecessary_unwrap, clippy::unneeded_wildcard_pattern, clippy::useless_asref, clippy::useless_conversion, clippy::useless_format, clippy::vec_box, clippy::while_let_loop, clippy::wildcard_in_or_patterns, clippy::zero_divided_by_zero, clippy::zero_prefixed_literal\"##,\n+        },\n+        children: &[\n+            \"clippy::bind_instead_of_map\",\n+            \"clippy::bool_comparison\",\n+            \"clippy::borrowed_box\",\n+            \"clippy::char_lit_as_u8\",\n+            \"clippy::clone_on_copy\",\n+            \"clippy::crosspointer_transmute\",\n+            \"clippy::deprecated_cfg_attr\",\n+            \"clippy::deref_addrof\",\n+            \"clippy::derivable_impls\",\n+            \"clippy::diverging_sub_expression\",\n+            \"clippy::double_comparisons\",\n+            \"clippy::double_parens\",\n+            \"clippy::duration_subsec\",\n+            \"clippy::explicit_counter_loop\",\n+            \"clippy::explicit_write\",\n+            \"clippy::extra_unused_lifetimes\",\n+            \"clippy::filter_map_identity\",\n+            \"clippy::filter_next\",\n+            \"clippy::flat_map_identity\",\n+            \"clippy::get_last_with_len\",\n+            \"clippy::identity_op\",\n+            \"clippy::inspect_for_each\",\n+            \"clippy::int_plus_one\",\n+            \"clippy::iter_count\",\n+            \"clippy::manual_filter_map\",\n+            \"clippy::manual_find_map\",\n+            \"clippy::manual_flatten\",\n+            \"clippy::manual_split_once\",\n+            \"clippy::manual_strip\",\n+            \"clippy::manual_swap\",\n+            \"clippy::manual_unwrap_or\",\n+            \"clippy::map_identity\",\n+            \"clippy::match_as_ref\",\n+            \"clippy::match_single_binding\",\n+            \"clippy::needless_arbitrary_self_type\",\n+            \"clippy::needless_bool\",\n+            \"clippy::needless_borrowed_reference\",\n+            \"clippy::needless_lifetimes\",\n+            \"clippy::needless_option_as_deref\",\n+            \"clippy::needless_question_mark\",\n+            \"clippy::needless_splitn\",\n+            \"clippy::needless_update\",\n+            \"clippy::neg_cmp_op_on_partial_ord\",\n+            \"clippy::no_effect\",\n+            \"clippy::nonminimal_bool\",\n+            \"clippy::option_as_ref_deref\",\n+            \"clippy::option_filter_map\",\n+            \"clippy::option_map_unit_fn\",\n+            \"clippy::overflow_check_conditional\",\n+            \"clippy::partialeq_ne_impl\",\n+            \"clippy::precedence\",\n+            \"clippy::ptr_offset_with_cast\",\n+            \"clippy::range_zip_with_len\",\n+            \"clippy::redundant_closure_call\",\n+            \"clippy::redundant_slicing\",\n+            \"clippy::ref_in_deref\",\n+            \"clippy::repeat_once\",\n+            \"clippy::result_map_unit_fn\",\n+            \"clippy::search_is_some\",\n+            \"clippy::short_circuit_statement\",\n+            \"clippy::single_element_loop\",\n+            \"clippy::skip_while_next\",\n+            \"clippy::string_from_utf8_as_bytes\",\n+            \"clippy::strlen_on_c_strings\",\n+            \"clippy::temporary_assignment\",\n+            \"clippy::too_many_arguments\",\n+            \"clippy::transmute_bytes_to_str\",\n+            \"clippy::transmute_float_to_int\",\n+            \"clippy::transmute_int_to_bool\",\n+            \"clippy::transmute_int_to_char\",\n+            \"clippy::transmute_int_to_float\",\n+            \"clippy::transmute_num_to_bytes\",\n+            \"clippy::transmute_ptr_to_ref\",\n+            \"clippy::transmutes_expressible_as_ptr_casts\",\n+            \"clippy::type_complexity\",\n+            \"clippy::unit_arg\",\n+            \"clippy::unnecessary_cast\",\n+            \"clippy::unnecessary_filter_map\",\n+            \"clippy::unnecessary_operation\",\n+            \"clippy::unnecessary_sort_by\",\n+            \"clippy::unnecessary_unwrap\",\n+            \"clippy::unneeded_wildcard_pattern\",\n+            \"clippy::useless_asref\",\n+            \"clippy::useless_conversion\",\n+            \"clippy::useless_format\",\n+            \"clippy::vec_box\",\n+            \"clippy::while_let_loop\",\n+            \"clippy::wildcard_in_or_patterns\",\n+            \"clippy::zero_divided_by_zero\",\n+            \"clippy::zero_prefixed_literal\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"clippy::correctness\",\n+            description: r##\"lint group for: clippy::absurd_extreme_comparisons, clippy::almost_swapped, clippy::approx_constant, clippy::async_yields_async, clippy::bad_bit_mask, clippy::cast_ref_to_mut, clippy::clone_double_ref, clippy::cmp_nan, clippy::deprecated_semver, clippy::derive_hash_xor_eq, clippy::derive_ord_xor_partial_ord, clippy::drop_copy, clippy::drop_ref, clippy::enum_clike_unportable_variant, clippy::eq_op, clippy::erasing_op, clippy::fn_address_comparisons, clippy::forget_copy, clippy::forget_ref, clippy::if_let_mutex, clippy::if_same_then_else, clippy::ifs_same_cond, clippy::ineffective_bit_mask, clippy::infinite_iter, clippy::inherent_to_string_shadow_display, clippy::inline_fn_without_body, clippy::invalid_null_ptr_usage, clippy::invalid_regex, clippy::invisible_characters, clippy::iter_next_loop, clippy::iterator_step_by_zero, clippy::let_underscore_lock, clippy::logic_bug, clippy::match_str_case_mismatch, clippy::mem_replace_with_uninit, clippy::min_max, clippy::mismatched_target_os, clippy::mistyped_literal_suffixes, clippy::modulo_one, clippy::mut_from_ref, clippy::never_loop, clippy::non_octal_unix_permissions, clippy::nonsensical_open_options, clippy::not_unsafe_ptr_arg_deref, clippy::option_env_unwrap, clippy::out_of_bounds_indexing, clippy::panicking_unwrap, clippy::possible_missing_comma, clippy::reversed_empty_ranges, clippy::self_assignment, clippy::serde_api_misuse, clippy::size_of_in_element_count, clippy::suspicious_splitn, clippy::to_string_in_display, clippy::transmuting_null, clippy::undropped_manually_drops, clippy::uninit_assumed_init, clippy::uninit_vec, clippy::unit_cmp, clippy::unit_hash, clippy::unit_return_expecting_ord, clippy::unsound_collection_transmute, clippy::unused_io_amount, clippy::useless_attribute, clippy::vec_resize_to_zero, clippy::vtable_address_comparisons, clippy::while_immutable_condition, clippy::wrong_transmute, clippy::zst_offset\"##,\n+        },\n+        children: &[\n+            \"clippy::absurd_extreme_comparisons\",\n+            \"clippy::almost_swapped\",\n+            \"clippy::approx_constant\",\n+            \"clippy::async_yields_async\",\n+            \"clippy::bad_bit_mask\",\n+            \"clippy::cast_ref_to_mut\",\n+            \"clippy::clone_double_ref\",\n+            \"clippy::cmp_nan\",\n+            \"clippy::deprecated_semver\",\n+            \"clippy::derive_hash_xor_eq\",\n+            \"clippy::derive_ord_xor_partial_ord\",\n+            \"clippy::drop_copy\",\n+            \"clippy::drop_ref\",\n+            \"clippy::enum_clike_unportable_variant\",\n+            \"clippy::eq_op\",\n+            \"clippy::erasing_op\",\n+            \"clippy::fn_address_comparisons\",\n+            \"clippy::forget_copy\",\n+            \"clippy::forget_ref\",\n+            \"clippy::if_let_mutex\",\n+            \"clippy::if_same_then_else\",\n+            \"clippy::ifs_same_cond\",\n+            \"clippy::ineffective_bit_mask\",\n+            \"clippy::infinite_iter\",\n+            \"clippy::inherent_to_string_shadow_display\",\n+            \"clippy::inline_fn_without_body\",\n+            \"clippy::invalid_null_ptr_usage\",\n+            \"clippy::invalid_regex\",\n+            \"clippy::invisible_characters\",\n+            \"clippy::iter_next_loop\",\n+            \"clippy::iterator_step_by_zero\",\n+            \"clippy::let_underscore_lock\",\n+            \"clippy::logic_bug\",\n+            \"clippy::match_str_case_mismatch\",\n+            \"clippy::mem_replace_with_uninit\",\n+            \"clippy::min_max\",\n+            \"clippy::mismatched_target_os\",\n+            \"clippy::mistyped_literal_suffixes\",\n+            \"clippy::modulo_one\",\n+            \"clippy::mut_from_ref\",\n+            \"clippy::never_loop\",\n+            \"clippy::non_octal_unix_permissions\",\n+            \"clippy::nonsensical_open_options\",\n+            \"clippy::not_unsafe_ptr_arg_deref\",\n+            \"clippy::option_env_unwrap\",\n+            \"clippy::out_of_bounds_indexing\",\n+            \"clippy::panicking_unwrap\",\n+            \"clippy::possible_missing_comma\",\n+            \"clippy::reversed_empty_ranges\",\n+            \"clippy::self_assignment\",\n+            \"clippy::serde_api_misuse\",\n+            \"clippy::size_of_in_element_count\",\n+            \"clippy::suspicious_splitn\",\n+            \"clippy::to_string_in_display\",\n+            \"clippy::transmuting_null\",\n+            \"clippy::undropped_manually_drops\",\n+            \"clippy::uninit_assumed_init\",\n+            \"clippy::uninit_vec\",\n+            \"clippy::unit_cmp\",\n+            \"clippy::unit_hash\",\n+            \"clippy::unit_return_expecting_ord\",\n+            \"clippy::unsound_collection_transmute\",\n+            \"clippy::unused_io_amount\",\n+            \"clippy::useless_attribute\",\n+            \"clippy::vec_resize_to_zero\",\n+            \"clippy::vtable_address_comparisons\",\n+            \"clippy::while_immutable_condition\",\n+            \"clippy::wrong_transmute\",\n+            \"clippy::zst_offset\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"clippy::deprecated\",\n+            description: r##\"lint group for: clippy::assign_ops, clippy::extend_from_slice, clippy::filter_map, clippy::find_map, clippy::if_let_redundant_pattern_matching, clippy::misaligned_transmute, clippy::pub_enum_variant_names, clippy::range_step_by_zero, clippy::regex_macro, clippy::replace_consts, clippy::should_assert_eq, clippy::unsafe_vector_initialization, clippy::unstable_as_mut_slice, clippy::unstable_as_slice, clippy::unused_collect, clippy::wrong_pub_self_convention\"##,\n+        },\n+        children: &[\n+            \"clippy::assign_ops\",\n+            \"clippy::extend_from_slice\",\n+            \"clippy::filter_map\",\n+            \"clippy::find_map\",\n+            \"clippy::if_let_redundant_pattern_matching\",\n+            \"clippy::misaligned_transmute\",\n+            \"clippy::pub_enum_variant_names\",\n+            \"clippy::range_step_by_zero\",\n+            \"clippy::regex_macro\",\n+            \"clippy::replace_consts\",\n+            \"clippy::should_assert_eq\",\n+            \"clippy::unsafe_vector_initialization\",\n+            \"clippy::unstable_as_mut_slice\",\n+            \"clippy::unstable_as_slice\",\n+            \"clippy::unused_collect\",\n+            \"clippy::wrong_pub_self_convention\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"clippy::nursery\",\n+            description: r##\"lint group for: clippy::branches_sharing_code, clippy::cognitive_complexity, clippy::debug_assert_with_mut_call, clippy::disallowed_methods, clippy::disallowed_types, clippy::empty_line_after_outer_attr, clippy::equatable_if_let, clippy::fallible_impl_from, clippy::future_not_send, clippy::imprecise_flops, clippy::index_refutable_slice, clippy::missing_const_for_fn, clippy::mutex_integer, clippy::nonstandard_macro_braces, clippy::option_if_let_else, clippy::path_buf_push_overwrite, clippy::redundant_pub_crate, clippy::string_lit_as_bytes, clippy::suboptimal_flops, clippy::suspicious_operation_groupings, clippy::trailing_empty_array, clippy::trivial_regex, clippy::use_self, clippy::useless_let_if_seq, clippy::useless_transmute\"##,\n+        },\n+        children: &[\n+            \"clippy::branches_sharing_code\",\n+            \"clippy::cognitive_complexity\",\n+            \"clippy::debug_assert_with_mut_call\",\n+            \"clippy::disallowed_methods\",\n+            \"clippy::disallowed_types\",\n+            \"clippy::empty_line_after_outer_attr\",\n+            \"clippy::equatable_if_let\",\n+            \"clippy::fallible_impl_from\",\n+            \"clippy::future_not_send\",\n+            \"clippy::imprecise_flops\",\n+            \"clippy::index_refutable_slice\",\n+            \"clippy::missing_const_for_fn\",\n+            \"clippy::mutex_integer\",\n+            \"clippy::nonstandard_macro_braces\",\n+            \"clippy::option_if_let_else\",\n+            \"clippy::path_buf_push_overwrite\",\n+            \"clippy::redundant_pub_crate\",\n+            \"clippy::string_lit_as_bytes\",\n+            \"clippy::suboptimal_flops\",\n+            \"clippy::suspicious_operation_groupings\",\n+            \"clippy::trailing_empty_array\",\n+            \"clippy::trivial_regex\",\n+            \"clippy::use_self\",\n+            \"clippy::useless_let_if_seq\",\n+            \"clippy::useless_transmute\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"clippy::pedantic\",\n+            description: r##\"lint group for: clippy::await_holding_lock, clippy::await_holding_refcell_ref, clippy::case_sensitive_file_extension_comparisons, clippy::cast_lossless, clippy::cast_possible_truncation, clippy::cast_possible_wrap, clippy::cast_precision_loss, clippy::cast_ptr_alignment, clippy::cast_sign_loss, clippy::checked_conversions, clippy::cloned_instead_of_copied, clippy::copy_iterator, clippy::default_trait_access, clippy::doc_markdown, clippy::empty_enum, clippy::enum_glob_use, clippy::expl_impl_clone_on_copy, clippy::explicit_deref_methods, clippy::explicit_into_iter_loop, clippy::explicit_iter_loop, clippy::filter_map_next, clippy::flat_map_option, clippy::float_cmp, clippy::fn_params_excessive_bools, clippy::from_iter_instead_of_collect, clippy::if_not_else, clippy::implicit_clone, clippy::implicit_hasher, clippy::implicit_saturating_sub, clippy::inconsistent_struct_constructor, clippy::inefficient_to_string, clippy::inline_always, clippy::invalid_upcast_comparisons, clippy::items_after_statements, clippy::iter_not_returning_iterator, clippy::large_digit_groups, clippy::large_stack_arrays, clippy::large_types_passed_by_value, clippy::let_underscore_drop, clippy::let_unit_value, clippy::linkedlist, clippy::macro_use_imports, clippy::manual_assert, clippy::manual_ok_or, clippy::many_single_char_names, clippy::map_flatten, clippy::map_unwrap_or, clippy::match_bool, clippy::match_on_vec_items, clippy::match_same_arms, clippy::match_wild_err_arm, clippy::match_wildcard_for_single_variants, clippy::maybe_infinite_iter, clippy::missing_errors_doc, clippy::missing_panics_doc, clippy::module_name_repetitions, clippy::must_use_candidate, clippy::mut_mut, clippy::naive_bytecount, clippy::needless_bitwise_bool, clippy::needless_continue, clippy::needless_for_each, clippy::needless_pass_by_value, clippy::no_effect_underscore_binding, clippy::option_option, clippy::ptr_as_ptr, clippy::range_minus_one, clippy::range_plus_one, clippy::redundant_closure_for_method_calls, clippy::redundant_else, clippy::ref_binding_to_reference, clippy::ref_option_ref, clippy::same_functions_in_if_condition, clippy::semicolon_if_nothing_returned, clippy::similar_names, clippy::single_match_else, clippy::string_add_assign, clippy::struct_excessive_bools, clippy::too_many_lines, clippy::trait_duplication_in_bounds, clippy::transmute_ptr_to_ptr, clippy::trivially_copy_pass_by_ref, clippy::type_repetition_in_bounds, clippy::unicode_not_nfc, clippy::unnecessary_wraps, clippy::unnested_or_patterns, clippy::unreadable_literal, clippy::unsafe_derive_deserialize, clippy::unused_async, clippy::unused_self, clippy::used_underscore_binding, clippy::verbose_bit_mask, clippy::wildcard_imports, clippy::zero_sized_map_values\"##,\n+        },\n+        children: &[\n+            \"clippy::await_holding_lock\",\n+            \"clippy::await_holding_refcell_ref\",\n+            \"clippy::case_sensitive_file_extension_comparisons\",\n+            \"clippy::cast_lossless\",\n+            \"clippy::cast_possible_truncation\",\n+            \"clippy::cast_possible_wrap\",\n+            \"clippy::cast_precision_loss\",\n+            \"clippy::cast_ptr_alignment\",\n+            \"clippy::cast_sign_loss\",\n+            \"clippy::checked_conversions\",\n+            \"clippy::cloned_instead_of_copied\",\n+            \"clippy::copy_iterator\",\n+            \"clippy::default_trait_access\",\n+            \"clippy::doc_markdown\",\n+            \"clippy::empty_enum\",\n+            \"clippy::enum_glob_use\",\n+            \"clippy::expl_impl_clone_on_copy\",\n+            \"clippy::explicit_deref_methods\",\n+            \"clippy::explicit_into_iter_loop\",\n+            \"clippy::explicit_iter_loop\",\n+            \"clippy::filter_map_next\",\n+            \"clippy::flat_map_option\",\n+            \"clippy::float_cmp\",\n+            \"clippy::fn_params_excessive_bools\",\n+            \"clippy::from_iter_instead_of_collect\",\n+            \"clippy::if_not_else\",\n+            \"clippy::implicit_clone\",\n+            \"clippy::implicit_hasher\",\n+            \"clippy::implicit_saturating_sub\",\n+            \"clippy::inconsistent_struct_constructor\",\n+            \"clippy::inefficient_to_string\",\n+            \"clippy::inline_always\",\n+            \"clippy::invalid_upcast_comparisons\",\n+            \"clippy::items_after_statements\",\n+            \"clippy::iter_not_returning_iterator\",\n+            \"clippy::large_digit_groups\",\n+            \"clippy::large_stack_arrays\",\n+            \"clippy::large_types_passed_by_value\",\n+            \"clippy::let_underscore_drop\",\n+            \"clippy::let_unit_value\",\n+            \"clippy::linkedlist\",\n+            \"clippy::macro_use_imports\",\n+            \"clippy::manual_assert\",\n+            \"clippy::manual_ok_or\",\n+            \"clippy::many_single_char_names\",\n+            \"clippy::map_flatten\",\n+            \"clippy::map_unwrap_or\",\n+            \"clippy::match_bool\",\n+            \"clippy::match_on_vec_items\",\n+            \"clippy::match_same_arms\",\n+            \"clippy::match_wild_err_arm\",\n+            \"clippy::match_wildcard_for_single_variants\",\n+            \"clippy::maybe_infinite_iter\",\n+            \"clippy::missing_errors_doc\",\n+            \"clippy::missing_panics_doc\",\n+            \"clippy::module_name_repetitions\",\n+            \"clippy::must_use_candidate\",\n+            \"clippy::mut_mut\",\n+            \"clippy::naive_bytecount\",\n+            \"clippy::needless_bitwise_bool\",\n+            \"clippy::needless_continue\",\n+            \"clippy::needless_for_each\",\n+            \"clippy::needless_pass_by_value\",\n+            \"clippy::no_effect_underscore_binding\",\n+            \"clippy::option_option\",\n+            \"clippy::ptr_as_ptr\",\n+            \"clippy::range_minus_one\",\n+            \"clippy::range_plus_one\",\n+            \"clippy::redundant_closure_for_method_calls\",\n+            \"clippy::redundant_else\",\n+            \"clippy::ref_binding_to_reference\",\n+            \"clippy::ref_option_ref\",\n+            \"clippy::same_functions_in_if_condition\",\n+            \"clippy::semicolon_if_nothing_returned\",\n+            \"clippy::similar_names\",\n+            \"clippy::single_match_else\",\n+            \"clippy::string_add_assign\",\n+            \"clippy::struct_excessive_bools\",\n+            \"clippy::too_many_lines\",\n+            \"clippy::trait_duplication_in_bounds\",\n+            \"clippy::transmute_ptr_to_ptr\",\n+            \"clippy::trivially_copy_pass_by_ref\",\n+            \"clippy::type_repetition_in_bounds\",\n+            \"clippy::unicode_not_nfc\",\n+            \"clippy::unnecessary_wraps\",\n+            \"clippy::unnested_or_patterns\",\n+            \"clippy::unreadable_literal\",\n+            \"clippy::unsafe_derive_deserialize\",\n+            \"clippy::unused_async\",\n+            \"clippy::unused_self\",\n+            \"clippy::used_underscore_binding\",\n+            \"clippy::verbose_bit_mask\",\n+            \"clippy::wildcard_imports\",\n+            \"clippy::zero_sized_map_values\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"clippy::perf\",\n+            description: r##\"lint group for: clippy::box_collection, clippy::boxed_local, clippy::cmp_owned, clippy::expect_fun_call, clippy::extend_with_drain, clippy::format_in_format_args, clippy::iter_nth, clippy::large_const_arrays, clippy::large_enum_variant, clippy::manual_memcpy, clippy::manual_str_repeat, clippy::map_entry, clippy::mutex_atomic, clippy::needless_collect, clippy::or_fun_call, clippy::redundant_allocation, clippy::redundant_clone, clippy::single_char_pattern, clippy::slow_vector_initialization, clippy::stable_sort_primitive, clippy::to_string_in_format_args, clippy::useless_vec, clippy::vec_init_then_push\"##,\n+        },\n+        children: &[\n+            \"clippy::box_collection\",\n+            \"clippy::boxed_local\",\n+            \"clippy::cmp_owned\",\n+            \"clippy::expect_fun_call\",\n+            \"clippy::extend_with_drain\",\n+            \"clippy::format_in_format_args\",\n+            \"clippy::iter_nth\",\n+            \"clippy::large_const_arrays\",\n+            \"clippy::large_enum_variant\",\n+            \"clippy::manual_memcpy\",\n+            \"clippy::manual_str_repeat\",\n+            \"clippy::map_entry\",\n+            \"clippy::mutex_atomic\",\n+            \"clippy::needless_collect\",\n+            \"clippy::or_fun_call\",\n+            \"clippy::redundant_allocation\",\n+            \"clippy::redundant_clone\",\n+            \"clippy::single_char_pattern\",\n+            \"clippy::slow_vector_initialization\",\n+            \"clippy::stable_sort_primitive\",\n+            \"clippy::to_string_in_format_args\",\n+            \"clippy::useless_vec\",\n+            \"clippy::vec_init_then_push\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"clippy::restriction\",\n+            description: r##\"lint group for: clippy::as_conversions, clippy::clone_on_ref_ptr, clippy::create_dir, clippy::dbg_macro, clippy::decimal_literal_representation, clippy::default_numeric_fallback, clippy::disallowed_script_idents, clippy::else_if_without_else, clippy::exhaustive_enums, clippy::exhaustive_structs, clippy::exit, clippy::expect_used, clippy::filetype_is_file, clippy::float_arithmetic, clippy::float_cmp_const, clippy::fn_to_numeric_cast_any, clippy::get_unwrap, clippy::if_then_some_else_none, clippy::implicit_return, clippy::indexing_slicing, clippy::inline_asm_x86_att_syntax, clippy::inline_asm_x86_intel_syntax, clippy::integer_arithmetic, clippy::integer_division, clippy::let_underscore_must_use, clippy::lossy_float_literal, clippy::map_err_ignore, clippy::mem_forget, clippy::missing_docs_in_private_items, clippy::missing_enforced_import_renames, clippy::missing_inline_in_public_items, clippy::mod_module_files, clippy::modulo_arithmetic, clippy::multiple_inherent_impl, clippy::non_ascii_literal, clippy::panic, clippy::panic_in_result_fn, clippy::pattern_type_mismatch, clippy::print_stderr, clippy::print_stdout, clippy::rc_buffer, clippy::rc_mutex, clippy::rest_pat_in_fully_bound_structs, clippy::same_name_method, clippy::self_named_module_files, clippy::separated_literal_suffix, clippy::shadow_reuse, clippy::shadow_same, clippy::shadow_unrelated, clippy::str_to_string, clippy::string_add, clippy::string_slice, clippy::string_to_string, clippy::todo, clippy::undocumented_unsafe_blocks, clippy::unimplemented, clippy::unnecessary_self_imports, clippy::unneeded_field_pattern, clippy::unreachable, clippy::unseparated_literal_suffix, clippy::unwrap_in_result, clippy::unwrap_used, clippy::use_debug, clippy::verbose_file_reads, clippy::wildcard_enum_match_arm\"##,\n+        },\n+        children: &[\n+            \"clippy::as_conversions\",\n+            \"clippy::clone_on_ref_ptr\",\n+            \"clippy::create_dir\",\n+            \"clippy::dbg_macro\",\n+            \"clippy::decimal_literal_representation\",\n+            \"clippy::default_numeric_fallback\",\n+            \"clippy::disallowed_script_idents\",\n+            \"clippy::else_if_without_else\",\n+            \"clippy::exhaustive_enums\",\n+            \"clippy::exhaustive_structs\",\n+            \"clippy::exit\",\n+            \"clippy::expect_used\",\n+            \"clippy::filetype_is_file\",\n+            \"clippy::float_arithmetic\",\n+            \"clippy::float_cmp_const\",\n+            \"clippy::fn_to_numeric_cast_any\",\n+            \"clippy::get_unwrap\",\n+            \"clippy::if_then_some_else_none\",\n+            \"clippy::implicit_return\",\n+            \"clippy::indexing_slicing\",\n+            \"clippy::inline_asm_x86_att_syntax\",\n+            \"clippy::inline_asm_x86_intel_syntax\",\n+            \"clippy::integer_arithmetic\",\n+            \"clippy::integer_division\",\n+            \"clippy::let_underscore_must_use\",\n+            \"clippy::lossy_float_literal\",\n+            \"clippy::map_err_ignore\",\n+            \"clippy::mem_forget\",\n+            \"clippy::missing_docs_in_private_items\",\n+            \"clippy::missing_enforced_import_renames\",\n+            \"clippy::missing_inline_in_public_items\",\n+            \"clippy::mod_module_files\",\n+            \"clippy::modulo_arithmetic\",\n+            \"clippy::multiple_inherent_impl\",\n+            \"clippy::non_ascii_literal\",\n+            \"clippy::panic\",\n+            \"clippy::panic_in_result_fn\",\n+            \"clippy::pattern_type_mismatch\",\n+            \"clippy::print_stderr\",\n+            \"clippy::print_stdout\",\n+            \"clippy::rc_buffer\",\n+            \"clippy::rc_mutex\",\n+            \"clippy::rest_pat_in_fully_bound_structs\",\n+            \"clippy::same_name_method\",\n+            \"clippy::self_named_module_files\",\n+            \"clippy::separated_literal_suffix\",\n+            \"clippy::shadow_reuse\",\n+            \"clippy::shadow_same\",\n+            \"clippy::shadow_unrelated\",\n+            \"clippy::str_to_string\",\n+            \"clippy::string_add\",\n+            \"clippy::string_slice\",\n+            \"clippy::string_to_string\",\n+            \"clippy::todo\",\n+            \"clippy::undocumented_unsafe_blocks\",\n+            \"clippy::unimplemented\",\n+            \"clippy::unnecessary_self_imports\",\n+            \"clippy::unneeded_field_pattern\",\n+            \"clippy::unreachable\",\n+            \"clippy::unseparated_literal_suffix\",\n+            \"clippy::unwrap_in_result\",\n+            \"clippy::unwrap_used\",\n+            \"clippy::use_debug\",\n+            \"clippy::verbose_file_reads\",\n+            \"clippy::wildcard_enum_match_arm\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"clippy::style\",\n+            description: r##\"lint group for: clippy::assertions_on_constants, clippy::assign_op_pattern, clippy::blacklisted_name, clippy::blocks_in_if_conditions, clippy::bool_assert_comparison, clippy::borrow_interior_mutable_const, clippy::builtin_type_shadow, clippy::bytes_nth, clippy::chars_last_cmp, clippy::chars_next_cmp, clippy::cmp_null, clippy::collapsible_else_if, clippy::collapsible_if, clippy::collapsible_match, clippy::comparison_chain, clippy::comparison_to_empty, clippy::declare_interior_mutable_const, clippy::double_must_use, clippy::double_neg, clippy::duplicate_underscore_argument, clippy::enum_variant_names, clippy::excessive_precision, clippy::field_reassign_with_default, clippy::fn_to_numeric_cast, clippy::fn_to_numeric_cast_with_truncation, clippy::for_kv_map, clippy::from_over_into, clippy::from_str_radix_10, clippy::inconsistent_digit_grouping, clippy::infallible_destructuring_match, clippy::inherent_to_string, clippy::into_iter_on_ref, clippy::iter_cloned_collect, clippy::iter_next_slice, clippy::iter_nth_zero, clippy::iter_skip_next, clippy::just_underscores_and_digits, clippy::len_without_is_empty, clippy::len_zero, clippy::let_and_return, clippy::main_recursion, clippy::manual_async_fn, clippy::manual_map, clippy::manual_non_exhaustive, clippy::manual_range_contains, clippy::manual_saturating_arithmetic, clippy::map_clone, clippy::map_collect_result_unit, clippy::match_like_matches_macro, clippy::match_overlapping_arm, clippy::match_ref_pats, clippy::match_result_ok, clippy::mem_replace_option_with_none, clippy::mem_replace_with_default, clippy::missing_safety_doc, clippy::mixed_case_hex_literals, clippy::module_inception, clippy::must_use_unit, clippy::mut_mutex_lock, clippy::needless_borrow, clippy::needless_doctest_main, clippy::needless_range_loop, clippy::needless_return, clippy::neg_multiply, clippy::new_ret_no_self, clippy::new_without_default, clippy::ok_expect, clippy::op_ref, clippy::option_map_or_none, clippy::print_literal, clippy::print_with_newline, clippy::println_empty_string, clippy::ptr_arg, clippy::ptr_eq, clippy::question_mark, clippy::redundant_closure, clippy::redundant_field_names, clippy::redundant_pattern, clippy::redundant_pattern_matching, clippy::redundant_static_lifetimes, clippy::result_map_or_into_option, clippy::result_unit_err, clippy::same_item_push, clippy::self_named_constructors, clippy::should_implement_trait, clippy::single_char_add_str, clippy::single_component_path_imports, clippy::single_match, clippy::string_extend_chars, clippy::tabs_in_doc_comments, clippy::to_digit_is_some, clippy::toplevel_ref_arg, clippy::try_err, clippy::unnecessary_fold, clippy::unnecessary_lazy_evaluations, clippy::unnecessary_mut_passed, clippy::unsafe_removed_from_name, clippy::unused_unit, clippy::unusual_byte_groupings, clippy::unwrap_or_else_default, clippy::upper_case_acronyms, clippy::while_let_on_iterator, clippy::write_literal, clippy::write_with_newline, clippy::writeln_empty_string, clippy::wrong_self_convention, clippy::zero_ptr\"##,\n+        },\n+        children: &[\n+            \"clippy::assertions_on_constants\",\n+            \"clippy::assign_op_pattern\",\n+            \"clippy::blacklisted_name\",\n+            \"clippy::blocks_in_if_conditions\",\n+            \"clippy::bool_assert_comparison\",\n+            \"clippy::borrow_interior_mutable_const\",\n+            \"clippy::builtin_type_shadow\",\n+            \"clippy::bytes_nth\",\n+            \"clippy::chars_last_cmp\",\n+            \"clippy::chars_next_cmp\",\n+            \"clippy::cmp_null\",\n+            \"clippy::collapsible_else_if\",\n+            \"clippy::collapsible_if\",\n+            \"clippy::collapsible_match\",\n+            \"clippy::comparison_chain\",\n+            \"clippy::comparison_to_empty\",\n+            \"clippy::declare_interior_mutable_const\",\n+            \"clippy::double_must_use\",\n+            \"clippy::double_neg\",\n+            \"clippy::duplicate_underscore_argument\",\n+            \"clippy::enum_variant_names\",\n+            \"clippy::excessive_precision\",\n+            \"clippy::field_reassign_with_default\",\n+            \"clippy::fn_to_numeric_cast\",\n+            \"clippy::fn_to_numeric_cast_with_truncation\",\n+            \"clippy::for_kv_map\",\n+            \"clippy::from_over_into\",\n+            \"clippy::from_str_radix_10\",\n+            \"clippy::inconsistent_digit_grouping\",\n+            \"clippy::infallible_destructuring_match\",\n+            \"clippy::inherent_to_string\",\n+            \"clippy::into_iter_on_ref\",\n+            \"clippy::iter_cloned_collect\",\n+            \"clippy::iter_next_slice\",\n+            \"clippy::iter_nth_zero\",\n+            \"clippy::iter_skip_next\",\n+            \"clippy::just_underscores_and_digits\",\n+            \"clippy::len_without_is_empty\",\n+            \"clippy::len_zero\",\n+            \"clippy::let_and_return\",\n+            \"clippy::main_recursion\",\n+            \"clippy::manual_async_fn\",\n+            \"clippy::manual_map\",\n+            \"clippy::manual_non_exhaustive\",\n+            \"clippy::manual_range_contains\",\n+            \"clippy::manual_saturating_arithmetic\",\n+            \"clippy::map_clone\",\n+            \"clippy::map_collect_result_unit\",\n+            \"clippy::match_like_matches_macro\",\n+            \"clippy::match_overlapping_arm\",\n+            \"clippy::match_ref_pats\",\n+            \"clippy::match_result_ok\",\n+            \"clippy::mem_replace_option_with_none\",\n+            \"clippy::mem_replace_with_default\",\n+            \"clippy::missing_safety_doc\",\n+            \"clippy::mixed_case_hex_literals\",\n+            \"clippy::module_inception\",\n+            \"clippy::must_use_unit\",\n+            \"clippy::mut_mutex_lock\",\n+            \"clippy::needless_borrow\",\n+            \"clippy::needless_doctest_main\",\n+            \"clippy::needless_range_loop\",\n+            \"clippy::needless_return\",\n+            \"clippy::neg_multiply\",\n+            \"clippy::new_ret_no_self\",\n+            \"clippy::new_without_default\",\n+            \"clippy::ok_expect\",\n+            \"clippy::op_ref\",\n+            \"clippy::option_map_or_none\",\n+            \"clippy::print_literal\",\n+            \"clippy::print_with_newline\",\n+            \"clippy::println_empty_string\",\n+            \"clippy::ptr_arg\",\n+            \"clippy::ptr_eq\",\n+            \"clippy::question_mark\",\n+            \"clippy::redundant_closure\",\n+            \"clippy::redundant_field_names\",\n+            \"clippy::redundant_pattern\",\n+            \"clippy::redundant_pattern_matching\",\n+            \"clippy::redundant_static_lifetimes\",\n+            \"clippy::result_map_or_into_option\",\n+            \"clippy::result_unit_err\",\n+            \"clippy::same_item_push\",\n+            \"clippy::self_named_constructors\",\n+            \"clippy::should_implement_trait\",\n+            \"clippy::single_char_add_str\",\n+            \"clippy::single_component_path_imports\",\n+            \"clippy::single_match\",\n+            \"clippy::string_extend_chars\",\n+            \"clippy::tabs_in_doc_comments\",\n+            \"clippy::to_digit_is_some\",\n+            \"clippy::toplevel_ref_arg\",\n+            \"clippy::try_err\",\n+            \"clippy::unnecessary_fold\",\n+            \"clippy::unnecessary_lazy_evaluations\",\n+            \"clippy::unnecessary_mut_passed\",\n+            \"clippy::unsafe_removed_from_name\",\n+            \"clippy::unused_unit\",\n+            \"clippy::unusual_byte_groupings\",\n+            \"clippy::unwrap_or_else_default\",\n+            \"clippy::upper_case_acronyms\",\n+            \"clippy::while_let_on_iterator\",\n+            \"clippy::write_literal\",\n+            \"clippy::write_with_newline\",\n+            \"clippy::writeln_empty_string\",\n+            \"clippy::wrong_self_convention\",\n+            \"clippy::zero_ptr\",\n+        ],\n+    },\n+    LintGroup {\n+        lint: Lint {\n+            label: \"clippy::suspicious\",\n+            description: r##\"lint group for: clippy::blanket_clippy_restriction_lints, clippy::empty_loop, clippy::eval_order_dependence, clippy::float_equality_without_abs, clippy::for_loops_over_fallibles, clippy::misrefactored_assign_op, clippy::mut_range_bound, clippy::mutable_key_type, clippy::non_send_fields_in_send_ty, clippy::suspicious_arithmetic_impl, clippy::suspicious_assignment_formatting, clippy::suspicious_else_formatting, clippy::suspicious_map, clippy::suspicious_op_assign_impl, clippy::suspicious_unary_op_formatting\"##,\n+        },\n+        children: &[\n+            \"clippy::blanket_clippy_restriction_lints\",\n+            \"clippy::empty_loop\",\n+            \"clippy::eval_order_dependence\",\n+            \"clippy::float_equality_without_abs\",\n+            \"clippy::for_loops_over_fallibles\",\n+            \"clippy::misrefactored_assign_op\",\n+            \"clippy::mut_range_bound\",\n+            \"clippy::mutable_key_type\",\n+            \"clippy::non_send_fields_in_send_ty\",\n+            \"clippy::suspicious_arithmetic_impl\",\n+            \"clippy::suspicious_assignment_formatting\",\n+            \"clippy::suspicious_else_formatting\",\n+            \"clippy::suspicious_map\",\n+            \"clippy::suspicious_op_assign_impl\",\n+            \"clippy::suspicious_unary_op_formatting\",\n+        ],\n+    },\n+];"}, {"sha": "3c7587635f3dadc435371f4fc73c6ec17c80479b", "filename": "crates/ide_db/src/tests/sourcegen_lints.rs", "status": "modified", "additions": 99, "deletions": 14, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/1b938ef1ca6154b215d8e279160ffbceeca765f2/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b938ef1ca6154b215d8e279160ffbceeca765f2/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs?ref=1b938ef1ca6154b215d8e279160ffbceeca765f2", "patch": "@@ -22,6 +22,10 @@ pub struct Lint {\n     pub label: &'static str,\n     pub description: &'static str,\n }\n+pub struct LintGroup {\n+    pub lint: Lint,\n+    pub children: &'static [&'static str],\n+}\n \",\n     );\n \n@@ -60,17 +64,41 @@ fn generate_lint_descriptor(buf: &mut String) {\n     let lints = stdout[start_lints..].lines().skip(1).take_while(|l| !l.is_empty()).map(|line| {\n         let (name, rest) = line.trim().split_once(char::is_whitespace).unwrap();\n         let (_default_level, description) = rest.trim().split_once(char::is_whitespace).unwrap();\n-        (name.trim(), Cow::Borrowed(description.trim()))\n+        (name.trim(), Cow::Borrowed(description.trim()), vec![])\n     });\n     let lint_groups =\n         stdout[start_lint_groups..].lines().skip(1).take_while(|l| !l.is_empty()).map(|line| {\n             let (name, lints) = line.trim().split_once(char::is_whitespace).unwrap();\n-            (name.trim(), format!(\"lint group for: {}\", lints.trim()).into())\n+            (\n+                name.trim(),\n+                format!(\"lint group for: {}\", lints.trim()).into(),\n+                lints\n+                    .split_ascii_whitespace()\n+                    .map(|s| s.trim().trim_matches(',').replace(\"-\", \"_\"))\n+                    .collect(),\n+            )\n         });\n \n-    lints.chain(lint_groups).sorted_by(|(ident, _), (ident2, _)| ident.cmp(ident2)).for_each(\n-        |(name, description)| push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description),\n-    );\n+    let lints = lints\n+        .chain(lint_groups)\n+        .sorted_by(|(ident, ..), (ident2, ..)| ident.cmp(ident2))\n+        .collect::<Vec<_>>();\n+    for (name, description, ..) in &lints {\n+        push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description);\n+    }\n+    buf.push_str(\"];\\n\");\n+    buf.push_str(r#\"pub const DEFAULT_LINT_GROUPS: &[LintGroup] = &[\"#);\n+    for (name, description, children) in &lints {\n+        if !children.is_empty() {\n+            // HACK: warnings is emitted with a general description, not with its members\n+            if name == &\"warnings\" {\n+                push_lint_group(buf, &name, &description, &Vec::new());\n+                continue;\n+            }\n+            push_lint_group(buf, &name.replace(\"-\", \"_\"), &description, children);\n+        }\n+    }\n+    buf.push('\\n');\n     buf.push_str(\"];\\n\");\n \n     // rustdoc\n@@ -84,22 +112,40 @@ fn generate_lint_descriptor(buf: &mut String) {\n             let (name, rest) = line.trim().split_once(char::is_whitespace).unwrap();\n             let (_default_level, description) =\n                 rest.trim().split_once(char::is_whitespace).unwrap();\n-            (name.trim(), Cow::Borrowed(description.trim()))\n+            (name.trim(), Cow::Borrowed(description.trim()), vec![])\n         });\n     let lint_groups_rustdoc =\n         stdout[start_lint_groups_rustdoc..].lines().skip(2).take_while(|l| !l.is_empty()).map(\n             |line| {\n                 let (name, lints) = line.trim().split_once(char::is_whitespace).unwrap();\n-                (name.trim(), format!(\"lint group for: {}\", lints.trim()).into())\n+                (\n+                    name.trim(),\n+                    format!(\"lint group for: {}\", lints.trim()).into(),\n+                    lints\n+                        .split_ascii_whitespace()\n+                        .map(|s| s.trim().trim_matches(',').replace(\"-\", \"_\"))\n+                        .collect(),\n+                )\n             },\n         );\n \n-    lints_rustdoc\n+    let lints_rustdoc = lints_rustdoc\n         .chain(lint_groups_rustdoc)\n-        .sorted_by(|(ident, _), (ident2, _)| ident.cmp(ident2))\n-        .for_each(|(name, description)| {\n-            push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description)\n-        });\n+        .sorted_by(|(ident, ..), (ident2, ..)| ident.cmp(ident2))\n+        .collect::<Vec<_>>();\n+\n+    for (name, description, ..) in &lints_rustdoc {\n+        push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description)\n+    }\n+    buf.push_str(\"];\\n\");\n+\n+    buf.push_str(r#\"pub const RUSTDOC_LINT_GROUPS: &[LintGroup] = &[\"#);\n+    for (name, description, children) in &lints_rustdoc {\n+        if !children.is_empty() {\n+            push_lint_group(buf, &name.replace(\"-\", \"_\"), &description, children);\n+        }\n+    }\n+    buf.push('\\n');\n     buf.push_str(\"];\\n\");\n }\n \n@@ -140,6 +186,7 @@ fn unescape(s: &str) -> String {\n fn generate_descriptor_clippy(buf: &mut String, path: &Path) {\n     let file_content = std::fs::read_to_string(path).unwrap();\n     let mut clippy_lints: Vec<ClippyLint> = Vec::new();\n+    let mut clippy_groups: std::collections::BTreeMap<String, Vec<String>> = Default::default();\n \n     for line in file_content.lines().map(|line| line.trim()) {\n         if let Some(line) = line.strip_prefix(r#\"\"id\": \"\"#) {\n@@ -148,6 +195,13 @@ fn generate_descriptor_clippy(buf: &mut String, path: &Path) {\n                 help: String::new(),\n             };\n             clippy_lints.push(clippy_lint)\n+        } else if let Some(line) = line.strip_prefix(r#\"\"group\": \"\"#) {\n+            if let Some(group) = line.strip_suffix(\"\\\",\") {\n+                clippy_groups\n+                    .entry(group.to_owned())\n+                    .or_default()\n+                    .push(clippy_lints.last().unwrap().id.clone());\n+            }\n         } else if let Some(line) = line.strip_prefix(r#\"\"docs\": \"\"#) {\n             let prefix_to_strip = r#\" ### What it does\"#;\n             let line = match line.strip_prefix(prefix_to_strip) {\n@@ -176,16 +230,47 @@ fn generate_descriptor_clippy(buf: &mut String, path: &Path) {\n         push_lint_completion(buf, &lint_ident, &doc);\n     }\n     buf.push_str(\"];\\n\");\n+\n+    buf.push_str(r#\"pub const CLIPPY_LINT_GROUPS: &[LintGroup] = &[\"#);\n+    for (id, children) in clippy_groups {\n+        let children = children.iter().map(|id| format!(\"clippy::{}\", id)).collect::<Vec<_>>();\n+        if !children.is_empty() {\n+            let lint_ident = format!(\"clippy::{}\", id);\n+            let description = format!(\"lint group for: {}\", children.iter().join(\", \"));\n+            push_lint_group(buf, &lint_ident, &description, &children);\n+        }\n+    }\n+    buf.push('\\n');\n+    buf.push_str(\"];\\n\");\n }\n \n fn push_lint_completion(buf: &mut String, label: &str, description: &str) {\n     format_to!(\n         buf,\n         r###\"    Lint {{\n         label: \"{}\",\n-        description: r##\"{}\"##\n+        description: r##\"{}\"##,\n     }},\"###,\n         label,\n-        description\n+        description,\n+    );\n+}\n+\n+fn push_lint_group<'a>(buf: &mut String, label: &str, description: &str, children: &[String]) {\n+    buf.push_str(\n+        r###\"    LintGroup {\n+        lint:\n+        \"###,\n+    );\n+\n+    push_lint_completion(buf, label, description);\n+\n+    let children = format!(\"&[{}]\", children.iter().map(|it| format!(\"\\\"{}\\\"\", it)).join(\", \"));\n+    format_to!(\n+        buf,\n+        r###\"\n+        children: {},\n+        }},\"###,\n+        children,\n     );\n }"}, {"sha": "bdc56b31962d5426349ab2dbd63260b85ea0e889", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b938ef1ca6154b215d8e279160ffbceeca765f2/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b938ef1ca6154b215d8e279160ffbceeca765f2/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=1b938ef1ca6154b215d8e279160ffbceeca765f2", "patch": "@@ -21,10 +21,20 @@ fn diagnostic_severity(\n         DiagnosticLevel::Ice => lsp_types::DiagnosticSeverity::ERROR,\n         DiagnosticLevel::Error => lsp_types::DiagnosticSeverity::ERROR,\n         DiagnosticLevel::Warning => match &code {\n-            Some(code) if config.warnings_as_hint.contains(&code.code) => {\n+            // HACK: special case for `warnings` rustc lint.\n+            Some(code)\n+                if config.warnings_as_hint.iter().any(|lint| {\n+                    lint == \"warnings\" || ide_db::helpers::lint_eq_or_in_group(&code.code, &lint)\n+                }) =>\n+            {\n                 lsp_types::DiagnosticSeverity::HINT\n             }\n-            Some(code) if config.warnings_as_info.contains(&code.code) => {\n+            // HACK: special case for `warnings` rustc lint.\n+            Some(code)\n+                if config.warnings_as_info.iter().any(|lint| {\n+                    lint == \"warnings\" || ide_db::helpers::lint_eq_or_in_group(&code.code, &lint)\n+                }) =>\n+            {\n                 lsp_types::DiagnosticSeverity::INFORMATION\n             }\n             _ => lsp_types::DiagnosticSeverity::WARNING,"}]}