{"sha": "36a7c0e00902172af7ea43704e58eedd32b308bc", "node_id": "C_kwDOAAsO6NoAKDM2YTdjMGUwMDkwMjE3MmFmN2VhNDM3MDRlNThlZWRkMzJiMzA4YmM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-11T17:51:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-11T17:51:02Z"}, "message": "Merge #10988\n\n10988: Fix expected type calculation in struct literal if followed by comma r=flodiebold a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "27f4af9fc1c46071fb6af5bd66ffd2ec717e2ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27f4af9fc1c46071fb6af5bd66ffd2ec717e2ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a7c0e00902172af7ea43704e58eedd32b308bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtOUHCRBK7hj4Ov3rIwAA+VgIADxqD+RSS51mP3MhN+CFDwiZ\nLNILsIWDAhkksq9ezPIKJBd42uvV5ZmO0J+OzGVkBJBJSLsGTiylOmck4+FwktoD\nvz8MMh4nXs2VRlBoBrDJocATSkSr/7tRBMPKx7gWkVgKXthP7hrIoX1n83b/AMIT\n15yzCDYkzEnMG1EiiaTrporPjwIYHsiusIDkXw7Fg7NMvvpMEqcrDtDrt12SZVpn\nkmhuwa9htBiBCtRyqAuiANLelmo246Q+6MLZZ8Wp7rgHp4w76R7F+tdhrAGz8PnM\neZV1vIWWWzp2maiaiCsoDeX6etcn8BNyK02nUdTAIOQLbm7ONAJu1ZvbZeTG3lk=\n=UAbh\n-----END PGP SIGNATURE-----\n", "payload": "tree 27f4af9fc1c46071fb6af5bd66ffd2ec717e2ff6\nparent 0eb6039e4eee23ec6df7fdacde7a72e842af96e2\nparent d599f819e09b06f37482bf46f12e3231533de8d7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639245062 +0000\ncommitter GitHub <noreply@github.com> 1639245062 +0000\n\nMerge #10988\n\n10988: Fix expected type calculation in struct literal if followed by comma r=flodiebold a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a7c0e00902172af7ea43704e58eedd32b308bc", "html_url": "https://github.com/rust-lang/rust/commit/36a7c0e00902172af7ea43704e58eedd32b308bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a7c0e00902172af7ea43704e58eedd32b308bc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eb6039e4eee23ec6df7fdacde7a72e842af96e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb6039e4eee23ec6df7fdacde7a72e842af96e2", "html_url": "https://github.com/rust-lang/rust/commit/0eb6039e4eee23ec6df7fdacde7a72e842af96e2"}, {"sha": "d599f819e09b06f37482bf46f12e3231533de8d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d599f819e09b06f37482bf46f12e3231533de8d7", "html_url": "https://github.com/rust-lang/rust/commit/d599f819e09b06f37482bf46f12e3231533de8d7"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "d459e5116142f482639a27e5fae3daa0e3f83a58", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36a7c0e00902172af7ea43704e58eedd32b308bc/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a7c0e00902172af7ea43704e58eedd32b308bc/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=36a7c0e00902172af7ea43704e58eedd32b308bc", "patch": "@@ -561,11 +561,21 @@ impl<'a> CompletionContext<'a> {\n                         })().unwrap_or((None, None))\n                     },\n                     ast::RecordExprField(it) => {\n-                        cov_mark::hit!(expected_type_struct_field_with_leading_char);\n-                        (\n-                            it.expr().as_ref().and_then(|e| self.sema.type_of_expr(e)).map(TypeInfo::original),\n-                            it.field_name().map(NameOrNameRef::NameRef),\n-                        )\n+                        if let Some(expr) = it.expr() {\n+                            cov_mark::hit!(expected_type_struct_field_with_leading_char);\n+                            (\n+                                self.sema.type_of_expr(&expr).map(TypeInfo::original),\n+                                it.field_name().map(NameOrNameRef::NameRef),\n+                            )\n+                        } else {\n+                            cov_mark::hit!(expected_type_struct_field_followed_by_comma);\n+                            let ty = self.sema.resolve_record_field(&it)\n+                                .map(|(_, _, ty)| ty);\n+                            (\n+                                ty,\n+                                it.field_name().map(NameOrNameRef::NameRef),\n+                            )\n+                        }\n                     },\n                     ast::MatchExpr(it) => {\n                         cov_mark::hit!(expected_type_match_arm_without_leading_char);\n@@ -1008,6 +1018,20 @@ fn foo() {\n         )\n     }\n \n+    #[test]\n+    fn expected_type_struct_field_followed_by_comma() {\n+        cov_mark::check!(expected_type_struct_field_followed_by_comma);\n+        check_expected_type_and_name(\n+            r#\"\n+struct Foo { a: u32 }\n+fn foo() {\n+    Foo { a: $0, };\n+}\n+\"#,\n+            expect![[r#\"ty: u32, name: a\"#]],\n+        )\n+    }\n+\n     #[test]\n     fn expected_type_generic_struct_field() {\n         check_expected_type_and_name("}]}