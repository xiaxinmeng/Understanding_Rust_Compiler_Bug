{"sha": "6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyODhmYWEzYTMxODQ0YTM4YjcwM2IyYTIwYTdmM2NiOWUxNWVkMzE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-09T17:53:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:22:08Z"}, "message": "`trans_apply_param_substs` => `subst_and_normalize_erasing_regions`\n\nConsolidate `trans_apply_param_substs` and\n`trans_apply_param_substs_env`. Also remove `trans_impl_self_ty`", "tree": {"sha": "c614013ab2584ad6bd2ab795968125829b81317c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c614013ab2584ad6bd2ab795968125829b81317c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "html_url": "https://github.com/rust-lang/rust/commit/6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d17f95465ae3f0c865153fc902eae55ea94e2a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d17f95465ae3f0c865153fc902eae55ea94e2a9", "html_url": "https://github.com/rust-lang/rust/commit/0d17f95465ae3f0c865153fc902eae55ea94e2a9"}], "stats": {"total": 161, "additions": 91, "deletions": 70}, "files": [{"sha": "cc8b74e0ee23a3fad3a90288ae5ff918c8dab0bd", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "patch": "@@ -16,7 +16,6 @@\n use dep_graph::{DepKind, DepTrackingMapConfig};\n use std::marker::PhantomData;\n use syntax_pos::DUMMY_SP;\n-use hir::def_id::DefId;\n use infer::InferCtxt;\n use syntax_pos::Span;\n use traits::{FulfillmentContext, Obligation, ObligationCause, SelectionContext, Vtable};\n@@ -88,43 +87,30 @@ pub fn trans_fulfill_obligation<'a, 'tcx>(ty: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n-    /// Monomorphizes a type from the AST by first applying the in-scope\n-    /// substitutions and then normalizing any associated types.\n-    pub fn trans_apply_param_substs<T>(self,\n-                                       param_substs: &Substs<'tcx>,\n-                                       value: &T)\n-                                       -> T\n-        where T: TypeFoldable<'tcx>\n-    {\n-        debug!(\"apply_param_substs(param_substs={:?}, value={:?})\", param_substs, value);\n-        let substituted = value.subst(self, param_substs);\n-        self.normalize_erasing_regions(ty::ParamEnv::reveal_all(), substituted)\n-    }\n-\n-    pub fn trans_apply_param_substs_env<T>(\n+    /// Monomorphizes a type from the AST by first applying the\n+    /// in-scope substitutions and then normalizing any associated\n+    /// types.\n+    pub fn subst_and_normalize_erasing_regions<T>(\n         self,\n         param_substs: &Substs<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        value: &T,\n+        value: &T\n     ) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n         debug!(\n-            \"apply_param_substs_env(param_substs={:?}, value={:?}, param_env={:?})\",\n+            \"subst_and_normalize_erasing_regions(\\\n+             param_substs={:?}, \\\n+             value={:?}, \\\n+             param_env={:?})\",\n             param_substs,\n             value,\n             param_env,\n         );\n         let substituted = value.subst(self, param_substs);\n         self.normalize_erasing_regions(param_env, substituted)\n     }\n-\n-    pub fn trans_impl_self_ty(&self, def_id: DefId, substs: &'tcx Substs<'tcx>)\n-                              -> Ty<'tcx>\n-    {\n-        self.trans_apply_param_substs(substs, &self.type_of(def_id))\n-    }\n }\n \n // Implement DepTrackingMapConfig for `trait_cache`"}, {"sha": "76f7a0b59a2a568352ee86726154598e2a21d76b", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "patch": "@@ -51,7 +51,11 @@ impl<'a, 'tcx> Instance<'tcx> {\n               -> Ty<'tcx>\n     {\n         let ty = tcx.type_of(self.def.def_id());\n-        tcx.trans_apply_param_substs(self.substs, &ty)\n+        tcx.subst_and_normalize_erasing_regions(\n+            self.substs,\n+            ty::ParamEnv::reveal_all(),\n+            &ty,\n+        )\n     }\n }\n \n@@ -184,7 +188,11 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n             resolve_associated_item(tcx, &item, param_env, trait_def_id, substs)\n         } else {\n             let ty = tcx.type_of(def_id);\n-            let item_type = tcx.trans_apply_param_substs_env(substs, param_env, &ty);\n+            let item_type = tcx.subst_and_normalize_erasing_regions(\n+                substs,\n+                param_env,\n+                &ty,\n+            );\n \n             let def = match item_type.sty {\n                 ty::TyFnDef(..) if {"}, {"sha": "c236ce2abc5f01cdf5cac0bd25907dbc5076e3b3", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "patch": "@@ -249,7 +249,11 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n         trace!(\"resolve: {:?}, {:#?}\", def_id, substs);\n         trace!(\"substs: {:#?}\", self.substs());\n         trace!(\"param_env: {:#?}\", self.param_env);\n-        let substs = self.tcx.trans_apply_param_substs_env(self.substs(), self.param_env, &substs);\n+        let substs = self.tcx.subst_and_normalize_erasing_regions(\n+            self.substs(),\n+            self.param_env,\n+            &substs,\n+        );\n         ty::Instance::resolve(\n             *self.tcx,\n             self.param_env,\n@@ -722,7 +726,11 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     ClosureFnPointer => {\n                         match self.eval_operand(operand)?.ty.sty {\n                             ty::TyClosure(def_id, substs) => {\n-                                let substs = self.tcx.trans_apply_param_substs(self.substs(), &substs);\n+                                let substs = self.tcx.subst_and_normalize_erasing_regions(\n+                                    self.substs(),\n+                                    ty::ParamEnv::reveal_all(),\n+                                    &substs,\n+                                );\n                                 let instance = ty::Instance::resolve_closure(\n                                     *self.tcx,\n                                     def_id,"}, {"sha": "be34b8705eb18de6ce11272a11f33c5357fa19ec", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "patch": "@@ -122,7 +122,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 // FIXME(CTFE): forbid drop in const eval\n                 let place = self.eval_place(location)?;\n                 let ty = self.place_ty(location);\n-                let ty = self.tcx.trans_apply_param_substs(self.substs(), &ty);\n+                let ty = self.tcx.subst_and_normalize_erasing_regions(\n+                    self.substs(),\n+                    ty::ParamEnv::reveal_all(),\n+                    &ty,\n+                );\n                 trace!(\"TerminatorKind::drop: {:?}, type {}\", location, ty);\n \n                 let instance = ::monomorphize::resolve_drop_in_place(*self.tcx, ty);"}, {"sha": "7fd2ea265de8025579deb08ae0d72fc4372daf77", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "patch": "@@ -523,11 +523,17 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             // have to instantiate all methods of the trait being cast to, so we\n             // can build the appropriate vtable.\n             mir::Rvalue::Cast(mir::CastKind::Unsize, ref operand, target_ty) => {\n-                let target_ty = self.tcx.trans_apply_param_substs(self.param_substs,\n-                                                                  &target_ty);\n+                let target_ty = self.tcx.subst_and_normalize_erasing_regions(\n+                    self.param_substs,\n+                    ty::ParamEnv::reveal_all(),\n+                    &target_ty,\n+                );\n                 let source_ty = operand.ty(self.mir, self.tcx);\n-                let source_ty = self.tcx.trans_apply_param_substs(self.param_substs,\n-                                                                  &source_ty);\n+                let source_ty = self.tcx.subst_and_normalize_erasing_regions(\n+                    self.param_substs,\n+                    ty::ParamEnv::reveal_all(),\n+                    &source_ty,\n+                );\n                 let (source_ty, target_ty) = find_vtable_types_for_unsizing(self.tcx,\n                                                                             source_ty,\n                                                                             target_ty);\n@@ -543,14 +549,20 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             }\n             mir::Rvalue::Cast(mir::CastKind::ReifyFnPointer, ref operand, _) => {\n                 let fn_ty = operand.ty(self.mir, self.tcx);\n-                let fn_ty = self.tcx.trans_apply_param_substs(self.param_substs,\n-                                                              &fn_ty);\n+                let fn_ty = self.tcx.subst_and_normalize_erasing_regions(\n+                    self.param_substs,\n+                    ty::ParamEnv::reveal_all(),\n+                    &fn_ty,\n+                );\n                 visit_fn_use(self.tcx, fn_ty, false, &mut self.output);\n             }\n             mir::Rvalue::Cast(mir::CastKind::ClosureFnPointer, ref operand, _) => {\n                 let source_ty = operand.ty(self.mir, self.tcx);\n-                let source_ty = self.tcx.trans_apply_param_substs(self.param_substs,\n-                                                                  &source_ty);\n+                let source_ty = self.tcx.subst_and_normalize_erasing_regions(\n+                    self.param_substs,\n+                    ty::ParamEnv::reveal_all(),\n+                    &source_ty,\n+                );\n                 match source_ty.sty {\n                     ty::TyClosure(def_id, substs) => {\n                         let instance = monomorphize::resolve_closure(\n@@ -595,14 +607,22 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         match *kind {\n             mir::TerminatorKind::Call { ref func, .. } => {\n                 let callee_ty = func.ty(self.mir, tcx);\n-                let callee_ty = tcx.trans_apply_param_substs(self.param_substs, &callee_ty);\n+                let callee_ty = tcx.subst_and_normalize_erasing_regions(\n+                    self.param_substs,\n+                    ty::ParamEnv::reveal_all(),\n+                    &callee_ty,\n+                );\n                 visit_fn_use(self.tcx, callee_ty, true, &mut self.output);\n             }\n             mir::TerminatorKind::Drop { ref location, .. } |\n             mir::TerminatorKind::DropAndReplace { ref location, .. } => {\n                 let ty = location.ty(self.mir, self.tcx)\n                     .to_ty(self.tcx);\n-                let ty = tcx.trans_apply_param_substs(self.param_substs, &ty);\n+                let ty = tcx.subst_and_normalize_erasing_regions(\n+                    self.param_substs,\n+                    ty::ParamEnv::reveal_all(),\n+                    &ty,\n+                );\n                 visit_drop_use(self.tcx, ty, true, self.output);\n             }\n             mir::TerminatorKind::Goto { .. } |\n@@ -1155,8 +1175,11 @@ fn collect_const<'a, 'tcx>(\n     let val = match constant.val {\n         ConstVal::Unevaluated(def_id, substs) => {\n             let param_env = ty::ParamEnv::reveal_all();\n-            let substs = tcx.trans_apply_param_substs(param_substs,\n-                                                        &substs);\n+            let substs = tcx.subst_and_normalize_erasing_regions(\n+                param_substs,\n+                param_env,\n+                &substs,\n+            );\n             let instance = ty::Instance::resolve(tcx,\n                                                 param_env,\n                                                 def_id,"}, {"sha": "3789342b3891dd9b7d0a91b9f12f0f7b61826fb7", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "patch": "@@ -645,7 +645,11 @@ fn characteristic_def_id_of_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n                 // This is a method within an inherent impl, find out what the\n                 // self-type is:\n-                let impl_self_ty = tcx.trans_impl_self_ty(impl_def_id, instance.substs);\n+                let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n+                    instance.substs,\n+                    ty::ParamEnv::reveal_all(),\n+                    &tcx.type_of(impl_def_id),\n+                );\n                 if let Some(def_id) = characteristic_def_id_of_type(impl_self_ty) {\n                     return Some(def_id);\n                 }"}, {"sha": "6380d2a5c15fee12e0729cbded2f3ff961958687", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "patch": "@@ -19,7 +19,7 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n use rustc::mir::*;\n use rustc::mir::visit::*;\n-use rustc::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, Instance, Ty, TyCtxt};\n use rustc::ty::subst::{Subst,Substs};\n \n use std::collections::VecDeque;\n@@ -129,8 +129,12 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 let callee_mir = match ty::queries::optimized_mir::try_get(self.tcx,\n                                                                            callsite.location.span,\n                                                                            callsite.callee) {\n-                    Ok(ref callee_mir) if self.should_inline(callsite, callee_mir) => {\n-                        subst_and_normalize(callee_mir, self.tcx, &callsite.substs, param_env)\n+                    Ok(callee_mir) if self.should_inline(callsite, callee_mir) => {\n+                        self.tcx.subst_and_normalize_erasing_regions(\n+                            &callsite.substs,\n+                            param_env,\n+                            callee_mir,\n+                        )\n                     }\n                     Ok(_) => continue,\n \n@@ -664,30 +668,6 @@ fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tcx.layout_of(param_env.and(ty)).ok().map(|layout| layout.size.bytes())\n }\n \n-fn subst_and_normalize<'a, 'tcx: 'a>(\n-    mir: &Mir<'tcx>,\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    substs: &'tcx ty::subst::Substs<'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-) -> Mir<'tcx> {\n-    struct Folder<'a, 'tcx: 'a> {\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        substs: &'tcx ty::subst::Substs<'tcx>,\n-    }\n-    impl<'a, 'tcx: 'a> ty::fold::TypeFolder<'tcx, 'tcx> for Folder<'a, 'tcx> {\n-        fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> {\n-            self.tcx\n-        }\n-\n-        fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-            self.tcx.trans_apply_param_substs_env(&self.substs, self.param_env, &t)\n-        }\n-    }\n-    let mut f = Folder { tcx, param_env, substs };\n-    mir.fold_with(&mut f)\n-}\n-\n /**\n  * Integrator.\n  *"}, {"sha": "c13b91eb3b6bd228f162c2c60d5451e07f9c3b0b", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "patch": "@@ -429,7 +429,11 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         let self_type = cx.tcx.impl_of_method(instance.def_id()).and_then(|impl_def_id| {\n             // If the method does *not* belong to a trait, proceed\n             if cx.tcx.trait_id_of_impl(impl_def_id).is_none() {\n-                let impl_self_ty = cx.tcx.trans_impl_self_ty(impl_def_id, instance.substs);\n+                let impl_self_ty = cx.tcx.subst_and_normalize_erasing_regions(\n+                    instance.substs,\n+                    ty::ParamEnv::reveal_all(),\n+                    &cx.tcx.type_of(impl_def_id),\n+                );\n \n                 // Only \"class\" methods are generally understood by LLVM,\n                 // so avoid methods on other types (e.g. `<*mut T>::null`)."}, {"sha": "0533b04a0c1d88a0897ae897b960f94b4a02f494", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6288faa3a31844a38b703b2a20a7f3cb9e15ed31/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=6288faa3a31844a38b703b2a20a7f3cb9e15ed31", "patch": "@@ -109,7 +109,11 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n     pub fn monomorphize<T>(&self, value: &T) -> T\n         where T: TypeFoldable<'tcx>\n     {\n-        self.cx.tcx.trans_apply_param_substs(self.param_substs, value)\n+        self.cx.tcx.subst_and_normalize_erasing_regions(\n+            self.param_substs,\n+            ty::ParamEnv::reveal_all(),\n+            value,\n+        )\n     }\n \n     pub fn set_debug_loc(&mut self, bx: &Builder, source_info: mir::SourceInfo) {"}]}