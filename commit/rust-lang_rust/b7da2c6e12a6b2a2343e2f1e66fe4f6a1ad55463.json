{"sha": "b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZGEyYzZlMTJhNmIyYTIzNDNlMmYxZTY2ZmU0ZjZhMWFkNTU0NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-09T00:18:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-09T00:18:34Z"}, "message": "Auto merge of #56630 - sinkuu:core_iter, r=kennytm\n\nResolve FIXME in libcore/iter/mod.rs\n\nand makes a few improvements.", "tree": {"sha": "481ef614252d8aa77850a9517772b20b1ea09d93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481ef614252d8aa77850a9517772b20b1ea09d93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463", "html_url": "https://github.com/rust-lang/rust/commit/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7a9d961c349bb7826ece463e51f10667a9fb851", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a9d961c349bb7826ece463e51f10667a9fb851", "html_url": "https://github.com/rust-lang/rust/commit/d7a9d961c349bb7826ece463e51f10667a9fb851"}, {"sha": "5728a043e8280e96cbae784a731d43f2c7a50137", "url": "https://api.github.com/repos/rust-lang/rust/commits/5728a043e8280e96cbae784a731d43f2c7a50137", "html_url": "https://github.com/rust-lang/rust/commit/5728a043e8280e96cbae784a731d43f2c7a50137"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "b0aca658343702fb67cf6da3dc65494fa8654621", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463", "patch": "@@ -282,6 +282,12 @@ bench_sums! {\n     (0i64..1000000).chain(1000000..).take_while(|&x| x < 1111111)\n }\n \n+bench_sums! {\n+    bench_cycle_take_sum,\n+    bench_cycle_take_ref_sum,\n+    (0i64..10000).cycle().take(1000000)\n+}\n+\n // Checks whether Skip<Zip<A,B>> is as fast as Zip<Skip<A>, Skip<B>>, from\n // https://users.rust-lang.org/t/performance-difference-between-iterator-zip-and-skip-order/15743\n #[bench]"}, {"sha": "7b273f7862a1f14f730437311ee1714ce1211ea7", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463", "patch": "@@ -649,6 +649,19 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n             _ => (usize::MAX, None)\n         }\n     }\n+\n+    #[inline]\n+    fn try_fold<Acc, F, R>(&mut self, init: Acc, mut f: F) -> R where\n+        Self: Sized, F: FnMut(Acc, Self::Item) -> R, R: Try<Ok=Acc>\n+    {\n+        let mut accum = init;\n+        while let Some(x) = self.iter.next() {\n+            accum = f(accum, x)?;\n+            accum = self.iter.try_fold(accum, &mut f)?;\n+            self.iter = self.orig.clone();\n+        }\n+        Try::from_ok(accum)\n+    }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n@@ -1855,18 +1868,11 @@ impl<I: Iterator> Iterator for Peekable<I> {\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        // FIXME(#43234): merge these when borrow-checking gets better.\n-        if n == 0 {\n-            match self.peeked.take() {\n-                Some(v) => v,\n-                None => self.iter.nth(n),\n-            }\n-        } else {\n-            match self.peeked.take() {\n-                Some(None) => None,\n-                Some(Some(_)) => self.iter.nth(n - 1),\n-                None => self.iter.nth(n),\n-            }\n+        match self.peeked.take() {\n+            Some(None) => None,\n+            Some(v @ Some(_)) if n == 0 => v,\n+            Some(Some(_)) => self.iter.nth(n - 1),\n+            None => self.iter.nth(n),\n         }\n     }\n \n@@ -1965,14 +1971,8 @@ impl<I: Iterator> Peekable<I> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn peek(&mut self) -> Option<&I::Item> {\n-        if self.peeked.is_none() {\n-            self.peeked = Some(self.iter.next());\n-        }\n-        match self.peeked {\n-            Some(Some(ref value)) => Some(value),\n-            Some(None) => None,\n-            _ => unreachable!(),\n-        }\n+        let iter = &mut self.iter;\n+        self.peeked.get_or_insert_with(|| iter.next()).as_ref()\n     }\n }\n \n@@ -2109,8 +2109,12 @@ impl<I: Iterator, P> Iterator for TakeWhile<I, P>\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let (_, upper) = self.iter.size_hint();\n-        (0, upper) // can't know a lower bound, due to the predicate\n+        if self.flag {\n+            (0, Some(0))\n+        } else {\n+            let (_, upper) = self.iter.size_hint();\n+            (0, upper) // can't know a lower bound, due to the predicate\n+        }\n     }\n \n     #[inline]\n@@ -2321,6 +2325,10 @@ impl<I> Iterator for Take<I> where I: Iterator{\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n+        if self.n == 0 {\n+            return (0, Some(0));\n+        }\n+\n         let (lower, upper) = self.iter.size_hint();\n \n         let lower = cmp::min(lower, self.n);"}, {"sha": "1287e11cff47bc1be6f74d76dc605c82614fb3b7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463", "patch": "@@ -92,6 +92,7 @@\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]\n #![feature(nll)]\n+#![feature(bind_by_move_pattern_guards)]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n #![feature(on_unimplemented)]"}, {"sha": "4efa01363146b314aa6ac50964a95605f73ae68e", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=b7da2c6e12a6b2a2343e2f1e66fe4f6a1ad55463", "patch": "@@ -1001,6 +1001,8 @@ fn test_cycle() {\n     let mut it = (0..).step_by(1).take(0).cycle();\n     assert_eq!(it.size_hint(), (0, Some(0)));\n     assert_eq!(it.next(), None);\n+\n+    assert_eq!(empty::<i32>().cycle().fold(0, |acc, x| acc + x), 0);\n }\n \n #[test]"}]}