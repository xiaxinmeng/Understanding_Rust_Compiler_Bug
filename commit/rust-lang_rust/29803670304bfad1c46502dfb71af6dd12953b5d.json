{"sha": "29803670304bfad1c46502dfb71af6dd12953b5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODAzNjcwMzA0YmZhZDFjNDY1MDJkZmI3MWFmNmRkMTI5NTNiNWQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-12T16:28:57Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-11-05T09:22:08Z"}, "message": "Add new lint for automatic_links improvements", "tree": {"sha": "ad1f4079fbf468d001921b535dfd3d7d5636b441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad1f4079fbf468d001921b535dfd3d7d5636b441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29803670304bfad1c46502dfb71af6dd12953b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29803670304bfad1c46502dfb71af6dd12953b5d", "html_url": "https://github.com/rust-lang/rust/commit/29803670304bfad1c46502dfb71af6dd12953b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29803670304bfad1c46502dfb71af6dd12953b5d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c2070121905b66698ebbfb105eab30f3484e602", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2070121905b66698ebbfb105eab30f3484e602", "html_url": "https://github.com/rust-lang/rust/commit/8c2070121905b66698ebbfb105eab30f3484e602"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "0da3ece167e97281651f425b99228bd01334f301", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29803670304bfad1c46502dfb71af6dd12953b5d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29803670304bfad1c46502dfb71af6dd12953b5d/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=29803670304bfad1c46502dfb71af6dd12953b5d", "patch": "@@ -67,7 +67,7 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n-    BARE_TRAIT_OBJECTS, BROKEN_INTRA_DOC_LINKS, ELIDED_LIFETIMES_IN_PATHS,\n+    AUTOMATIC_LINKS, BARE_TRAIT_OBJECTS, BROKEN_INTRA_DOC_LINKS, ELIDED_LIFETIMES_IN_PATHS,\n     EXPLICIT_OUTLIVES_REQUIREMENTS, INVALID_CODEBLOCK_ATTRIBUTES, INVALID_HTML_TAGS,\n     MISSING_DOC_CODE_EXAMPLES, PRIVATE_DOC_TESTS,\n };\n@@ -313,6 +313,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n \n     add_lint_group!(\n         \"rustdoc\",\n+        AUTOMATIC_LINKS,\n         BROKEN_INTRA_DOC_LINKS,\n         PRIVATE_INTRA_DOC_LINKS,\n         INVALID_CODEBLOCK_ATTRIBUTES,"}, {"sha": "3fc9c096696badb98bb3eeffca41b56101aa30c0", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29803670304bfad1c46502dfb71af6dd12953b5d/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29803670304bfad1c46502dfb71af6dd12953b5d/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=29803670304bfad1c46502dfb71af6dd12953b5d", "patch": "@@ -1890,6 +1890,17 @@ declare_lint! {\n     \"detects invalid HTML tags in doc comments\"\n }\n \n+declare_lint! {\n+    /// The `automatic_links` lint detects when a URL/email address could be\n+    /// written using only brackets. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#automatic_links\n+    pub AUTOMATIC_LINKS,\n+    Allow,\n+    \"detects URLs/email adresses that could be written using only brackets\"\n+}\n+\n declare_lint! {\n     /// The `where_clauses_object_safety` lint detects for [object safety] of\n     /// [where clauses].\n@@ -2795,6 +2806,7 @@ declare_lint_pass! {\n         MISSING_DOC_CODE_EXAMPLES,\n         INVALID_HTML_TAGS,\n         PRIVATE_DOC_TESTS,\n+        AUTOMATIC_LINKS,\n         WHERE_CLAUSES_OBJECT_SAFETY,\n         PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n         MACRO_USE_EXTERN_CRATE,"}, {"sha": "f834be84d4c596480264a45bdd57a2603eee8ad2", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29803670304bfad1c46502dfb71af6dd12953b5d/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29803670304bfad1c46502dfb71af6dd12953b5d/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=29803670304bfad1c46502dfb71af6dd12953b5d", "patch": "@@ -330,11 +330,13 @@ pub fn run_core(\n     let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n     let invalid_html_tags = rustc_lint::builtin::INVALID_HTML_TAGS.name;\n     let renamed_and_removed_lints = rustc_lint::builtin::RENAMED_AND_REMOVED_LINTS.name;\n+    let automatic_links = rustc_lint::builtin::AUTOMATIC_LINKS.name;\n     let unknown_lints = rustc_lint::builtin::UNKNOWN_LINTS.name;\n \n     // In addition to those specific lints, we also need to allow those given through\n     // command line, otherwise they'll get ignored and we don't want that.\n     let lints_to_show = vec![\n+        automatic_links.to_owned(),\n         intra_link_resolution_failure_name.to_owned(),\n         missing_docs.to_owned(),\n         missing_doc_example.to_owned(),"}, {"sha": "79542241326da4e702b874f13ea8b1dd35c12ac0", "filename": "src/librustdoc/passes/automatic_links.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/29803670304bfad1c46502dfb71af6dd12953b5d/src%2Flibrustdoc%2Fpasses%2Fautomatic_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29803670304bfad1c46502dfb71af6dd12953b5d/src%2Flibrustdoc%2Fpasses%2Fautomatic_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fautomatic_links.rs?ref=29803670304bfad1c46502dfb71af6dd12953b5d", "patch": "@@ -0,0 +1,93 @@\n+use super::{span_of_attrs, Pass};\n+use crate::clean::*;\n+use crate::core::DocContext;\n+use crate::fold::DocFolder;\n+use crate::html::markdown::opts;\n+use pulldown_cmark::{Event, Parser, Tag};\n+use rustc_feature::UnstableFeatures;\n+use rustc_session::lint;\n+\n+pub const CHECK_AUTOMATIC_LINKS: Pass = Pass {\n+    name: \"check-automatic-links\",\n+    run: check_automatic_links,\n+    description: \"detects URLS/email addresses that could be written using brackets\",\n+};\n+\n+struct AutomaticLinksLinter<'a, 'tcx> {\n+    cx: &'a DocContext<'tcx>,\n+}\n+\n+impl<'a, 'tcx> AutomaticLinksLinter<'a, 'tcx> {\n+    fn new(cx: &'a DocContext<'tcx>) -> Self {\n+        AutomaticLinksLinter { cx }\n+    }\n+}\n+\n+pub fn check_automatic_links(krate: Crate, cx: &DocContext<'_>) -> Crate {\n+    if !UnstableFeatures::from_environment().is_nightly_build() {\n+        krate\n+    } else {\n+        let mut coll = AutomaticLinksLinter::new(cx);\n+\n+        coll.fold_crate(krate)\n+    }\n+}\n+\n+impl<'a, 'tcx> DocFolder for AutomaticLinksLinter<'a, 'tcx> {\n+    fn fold_item(&mut self, item: Item) -> Option<Item> {\n+        let hir_id = match self.cx.as_local_hir_id(item.def_id) {\n+            Some(hir_id) => hir_id,\n+            None => {\n+                // If non-local, no need to check anything.\n+                return self.fold_item_recur(item);\n+            }\n+        };\n+        let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n+        if !dox.is_empty() {\n+            let cx = &self.cx;\n+\n+            let p = Parser::new_ext(&dox, opts()).into_offset_iter();\n+\n+            let mut title = String::new();\n+            let mut in_link = false;\n+\n+            for (event, range) in p {\n+                match event {\n+                    Event::Start(Tag::Link(..)) => in_link = true,\n+                    Event::End(Tag::Link(_, url, _)) => {\n+                        in_link = false;\n+                        if url.as_ref() != title {\n+                            continue;\n+                        }\n+                        let sp = match super::source_span_for_markdown_range(\n+                            cx,\n+                            &dox,\n+                            &range,\n+                            &item.attrs,\n+                        ) {\n+                            Some(sp) => sp,\n+                            None => span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n+                        };\n+                        cx.tcx.struct_span_lint_hir(\n+                            lint::builtin::AUTOMATIC_LINKS,\n+                            hir_id,\n+                            sp,\n+                            |lint| {\n+                                lint.build(\"Unneeded long form for URL\")\n+                                    .help(&format!(\"Try with `<{}>` instead\", url))\n+                                    .emit()\n+                            },\n+                        );\n+                        title.clear();\n+                    }\n+                    Event::Text(s) if in_link => {\n+                        title.push_str(&s);\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+\n+        self.fold_item_recur(item)\n+    }\n+}"}, {"sha": "48dc52c9550065b9cda65799287714313bb61e57", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29803670304bfad1c46502dfb71af6dd12953b5d/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29803670304bfad1c46502dfb71af6dd12953b5d/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=29803670304bfad1c46502dfb71af6dd12953b5d", "patch": "@@ -11,6 +11,9 @@ use crate::core::DocContext;\n mod stripper;\n pub use stripper::*;\n \n+mod automatic_links;\n+pub use self::automatic_links::CHECK_AUTOMATIC_LINKS;\n+\n mod collapse_docs;\n pub use self::collapse_docs::COLLAPSE_DOCS;\n \n@@ -90,6 +93,7 @@ pub const PASSES: &[Pass] = &[\n     COLLECT_TRAIT_IMPLS,\n     CALCULATE_DOC_COVERAGE,\n     CHECK_INVALID_HTML_TAGS,\n+    CHECK_AUTOMATIC_LINKS,\n ];\n \n /// The list of passes run by default.\n@@ -105,6 +109,7 @@ pub const DEFAULT_PASSES: &[ConditionalPass] = &[\n     ConditionalPass::always(CHECK_CODE_BLOCK_SYNTAX),\n     ConditionalPass::always(CHECK_INVALID_HTML_TAGS),\n     ConditionalPass::always(PROPAGATE_DOC_CFG),\n+    ConditionalPass::always(CHECK_AUTOMATIC_LINKS),\n ];\n \n /// The list of default passes run when `--doc-coverage` is passed to rustdoc."}]}