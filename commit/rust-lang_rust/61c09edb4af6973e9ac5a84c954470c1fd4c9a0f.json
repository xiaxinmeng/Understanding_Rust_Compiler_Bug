{"sha": "61c09edb4af6973e9ac5a84c954470c1fd4c9a0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYzA5ZWRiNGFmNjk3M2U5YWM1YTg0Yzk1NDQ3MGMxZmQ0YzlhMGY=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2019-04-08T13:47:28Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2019-04-08T13:47:28Z"}, "message": "Avoid two-phase borrow conflict", "tree": {"sha": "69bfedb7842b2d39f4a2ef382b84e5adb0d4aa95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69bfedb7842b2d39f4a2ef382b84e5adb0d4aa95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61c09edb4af6973e9ac5a84c954470c1fd4c9a0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61c09edb4af6973e9ac5a84c954470c1fd4c9a0f", "html_url": "https://github.com/rust-lang/rust/commit/61c09edb4af6973e9ac5a84c954470c1fd4c9a0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61c09edb4af6973e9ac5a84c954470c1fd4c9a0f/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2178eb8e02b0118c8cad7e631368cbee94ea72", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2178eb8e02b0118c8cad7e631368cbee94ea72", "html_url": "https://github.com/rust-lang/rust/commit/1e2178eb8e02b0118c8cad7e631368cbee94ea72"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "28947be5128c259a5fbf4a874f30d23a0fc529ae", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61c09edb4af6973e9ac5a84c954470c1fd4c9a0f/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61c09edb4af6973e9ac5a84c954470c1fd4c9a0f/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=61c09edb4af6973e9ac5a84c954470c1fd4c9a0f", "patch": "@@ -489,8 +489,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 Some(ty)\n             }\n             Resolution::LocalBinding(pat) => {\n-                let ty = self.type_of_pat.get(pat)?;\n-                let ty = self.resolve_ty_as_possible(&mut vec![], ty.clone());\n+                let ty = self.type_of_pat.get(pat)?.clone();\n+                let ty = self.resolve_ty_as_possible(&mut vec![], ty);\n                 Some(ty)\n             }\n             Resolution::GenericParam(..) => {"}]}