{"sha": "d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MDk1MzI5YTFjMTJlOTM2NTNkOGRlNGE5M2YwYjRmNWNhZDRjNmU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-14T21:43:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-14T21:43:36Z"}, "message": "Phase out SourceFileEdits in favour of a plain HashMap", "tree": {"sha": "1de73ddefe48cc9f82cb4f063eaddc069adf83bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1de73ddefe48cc9f82cb4f063eaddc069adf83bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "html_url": "https://github.com/rust-lang/rust/commit/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e23bfafb32a235fdb60ba279ea68b5aa381c2110", "url": "https://api.github.com/repos/rust-lang/rust/commits/e23bfafb32a235fdb60ba279ea68b5aa381c2110", "html_url": "https://github.com/rust-lang/rust/commit/e23bfafb32a235fdb60ba279ea68b5aa381c2110"}], "stats": {"total": 393, "additions": 179, "deletions": 214}, "files": [{"sha": "321fe77f37b3a379d3ce1b9d1cd69e42733bd5ad", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -10,7 +10,7 @@ use ide_db::{\n };\n use ide_db::{\n     label::Label,\n-    source_change::{FileSystemEdit, SourceChange, SourceFileEdits},\n+    source_change::{FileSystemEdit, SourceChange},\n     RootDatabase,\n };\n use syntax::{\n@@ -180,20 +180,12 @@ impl Assists {\n pub(crate) struct AssistBuilder {\n     edit: TextEditBuilder,\n     file_id: FileId,\n-    is_snippet: bool,\n-    source_file_edits: SourceFileEdits,\n-    file_system_edits: Vec<FileSystemEdit>,\n+    source_change: SourceChange,\n }\n \n impl AssistBuilder {\n     pub(crate) fn new(file_id: FileId) -> AssistBuilder {\n-        AssistBuilder {\n-            edit: TextEdit::builder(),\n-            file_id,\n-            is_snippet: false,\n-            source_file_edits: SourceFileEdits::default(),\n-            file_system_edits: Vec::default(),\n-        }\n+        AssistBuilder { edit: TextEdit::builder(), file_id, source_change: SourceChange::default() }\n     }\n \n     pub(crate) fn edit_file(&mut self, file_id: FileId) {\n@@ -204,7 +196,7 @@ impl AssistBuilder {\n     fn commit(&mut self) {\n         let edit = mem::take(&mut self.edit).finish();\n         if !edit.is_empty() {\n-            self.source_file_edits.insert(self.file_id, edit);\n+            self.source_change.insert_source_edit(self.file_id, edit);\n         }\n     }\n \n@@ -223,7 +215,7 @@ impl AssistBuilder {\n         offset: TextSize,\n         snippet: impl Into<String>,\n     ) {\n-        self.is_snippet = true;\n+        self.source_change.is_snippet = true;\n         self.insert(offset, snippet);\n     }\n     /// Replaces specified `range` of text with a given string.\n@@ -237,7 +229,7 @@ impl AssistBuilder {\n         range: TextRange,\n         snippet: impl Into<String>,\n     ) {\n-        self.is_snippet = true;\n+        self.source_change.is_snippet = true;\n         self.replace(range, snippet);\n     }\n     pub(crate) fn replace_ast<N: AstNode>(&mut self, old: N, new: N) {\n@@ -252,15 +244,11 @@ impl AssistBuilder {\n     pub(crate) fn create_file(&mut self, dst: AnchoredPathBuf, content: impl Into<String>) {\n         let file_system_edit =\n             FileSystemEdit::CreateFile { dst: dst.clone(), initial_contents: content.into() };\n-        self.file_system_edits.push(file_system_edit);\n+        self.source_change.push_file_system_edit(file_system_edit);\n     }\n \n     fn finish(mut self) -> SourceChange {\n         self.commit();\n-        SourceChange {\n-            source_file_edits: mem::take(&mut self.source_file_edits),\n-            file_system_edits: mem::take(&mut self.file_system_edits),\n-            is_snippet: self.is_snippet,\n-        }\n+        mem::take(&mut self.source_change)\n     }\n }"}, {"sha": "71431b4065c7b1d32e3238c156766aea73c340fb", "filename": "crates/assists/src/tests.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fassists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fassists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -80,7 +80,7 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let actual = {\n         let source_change = assist.source_change.unwrap();\n         let mut actual = before;\n-        if let Some(source_file_edit) = source_change.source_file_edits.edits.get(&file_id) {\n+        if let Some(source_file_edit) = source_change.get_source_edit(file_id) {\n             source_file_edit.apply(&mut actual);\n         }\n         actual\n@@ -120,7 +120,7 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n                 && source_change.file_system_edits.len() == 0;\n \n             let mut buf = String::new();\n-            for (file_id, edit) in source_change.source_file_edits.edits {\n+            for (file_id, edit) in source_change.source_file_edits {\n                 let mut text = db.file_text(file_id).as_ref().to_owned();\n                 edit.apply(&mut text);\n                 if !skip_header {\n@@ -132,18 +132,15 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n                 buf.push_str(&text);\n             }\n \n-            for file_system_edit in source_change.file_system_edits.clone() {\n-                match file_system_edit {\n-                    FileSystemEdit::CreateFile { dst, initial_contents } => {\n-                        let sr = db.file_source_root(dst.anchor);\n-                        let sr = db.source_root(sr);\n-                        let mut base = sr.path_for_file(&dst.anchor).unwrap().clone();\n-                        base.pop();\n-                        let created_file_path = format!(\"{}{}\", base.to_string(), &dst.path[1..]);\n-                        format_to!(buf, \"//- {}\\n\", created_file_path);\n-                        buf.push_str(&initial_contents);\n-                    }\n-                    _ => (),\n+            for file_system_edit in source_change.file_system_edits {\n+                if let FileSystemEdit::CreateFile { dst, initial_contents } = file_system_edit {\n+                    let sr = db.file_source_root(dst.anchor);\n+                    let sr = db.source_root(sr);\n+                    let mut base = sr.path_for_file(&dst.anchor).unwrap().clone();\n+                    base.pop();\n+                    let created_file_path = format!(\"{}{}\", base.to_string(), &dst.path[1..]);\n+                    format_to!(buf, \"//- {}\\n\", created_file_path);\n+                    buf.push_str(&initial_contents);\n                 }\n             }\n "}, {"sha": "2e5395b518cf65540557d4f08f71431543d8392b", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -13,7 +13,7 @@ use hir::{\n     diagnostics::{Diagnostic as _, DiagnosticCode, DiagnosticSinkBuilder},\n     Semantics,\n };\n-use ide_db::{base_db::SourceDatabase, source_change::SourceFileEdits, RootDatabase};\n+use ide_db::{base_db::SourceDatabase, RootDatabase};\n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n@@ -219,7 +219,7 @@ fn check_unnecessary_braces_in_use_statement(\n             Diagnostic::hint(use_range, \"Unnecessary braces in use statement\".to_string())\n                 .with_fix(Some(Fix::new(\n                     \"Remove unnecessary braces\",\n-                    SourceFileEdits::from_text_edit(file_id, edit).into(),\n+                    SourceChange::from_text_edit(file_id, edit),\n                     use_range,\n                 ))),\n         );\n@@ -264,10 +264,10 @@ mod tests {\n             .unwrap();\n         let fix = diagnostic.fix.unwrap();\n         let actual = {\n-            let file_id = *fix.source_change.source_file_edits.edits.keys().next().unwrap();\n+            let file_id = *fix.source_change.source_file_edits.keys().next().unwrap();\n             let mut actual = analysis.file_text(file_id).unwrap().to_string();\n \n-            for edit in fix.source_change.source_file_edits.edits.values() {\n+            for edit in fix.source_change.source_file_edits.values() {\n                 edit.apply(&mut actual);\n             }\n             actual\n@@ -613,9 +613,7 @@ fn test_fn() {\n                             Fix {\n                                 label: \"Create module\",\n                                 source_change: SourceChange {\n-                                    source_file_edits: SourceFileEdits {\n-                                        edits: {},\n-                                    },\n+                                    source_file_edits: {},\n                                     file_system_edits: [\n                                         CreateFile {\n                                             dst: AnchoredPathBuf {"}, {"sha": "5c89e21707e8a85ca651698bac568e89105880c8", "filename": "crates/ide/src/diagnostics/field_shorthand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffield_shorthand.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -1,7 +1,7 @@\n //! Suggests shortening `Foo { field: field }` to `Foo { field }` in both\n //! expressions and patterns.\n \n-use ide_db::{base_db::FileId, source_change::SourceFileEdits};\n+use ide_db::{base_db::FileId, source_change::SourceChange};\n use syntax::{ast, match_ast, AstNode, SyntaxNode};\n use text_edit::TextEdit;\n \n@@ -49,7 +49,7 @@ fn check_expr_field_shorthand(\n             Diagnostic::hint(field_range, \"Shorthand struct initialization\".to_string()).with_fix(\n                 Some(Fix::new(\n                     \"Use struct shorthand initialization\",\n-                    SourceFileEdits::from_text_edit(file_id, edit).into(),\n+                    SourceChange::from_text_edit(file_id, edit),\n                     field_range,\n                 )),\n             ),\n@@ -88,7 +88,7 @@ fn check_pat_field_shorthand(\n         acc.push(Diagnostic::hint(field_range, \"Shorthand struct pattern\".to_string()).with_fix(\n             Some(Fix::new(\n                 \"Use struct field shorthand\",\n-                SourceFileEdits::from_text_edit(file_id, edit).into(),\n+                SourceChange::from_text_edit(file_id, edit),\n                 field_range,\n             )),\n         ));"}, {"sha": "e4335119bc9e22bb4f0324036882bfcd876d2db2", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -10,7 +10,7 @@ use hir::{\n };\n use ide_db::{\n     base_db::{AnchoredPathBuf, FileId},\n-    source_change::{FileSystemEdit, SourceFileEdits},\n+    source_change::{FileSystemEdit, SourceChange},\n     RootDatabase,\n };\n use syntax::{\n@@ -88,7 +88,7 @@ impl DiagnosticWithFix for MissingFields {\n         };\n         Some(Fix::new(\n             \"Fill struct fields\",\n-            SourceFileEdits::from_text_edit(self.file.original_file(sema.db), edit).into(),\n+            SourceChange::from_text_edit(self.file.original_file(sema.db), edit),\n             sema.original_range(&field_list_parent.syntax()).range,\n         ))\n     }\n@@ -101,8 +101,7 @@ impl DiagnosticWithFix for MissingOkOrSomeInTailExpr {\n         let tail_expr_range = tail_expr.syntax().text_range();\n         let replacement = format!(\"{}({})\", self.required, tail_expr.syntax());\n         let edit = TextEdit::replace(tail_expr_range, replacement);\n-        let source_change =\n-            SourceFileEdits::from_text_edit(self.file.original_file(sema.db), edit).into();\n+        let source_change = SourceChange::from_text_edit(self.file.original_file(sema.db), edit);\n         let name = if self.required == \"Ok\" { \"Wrap with Ok\" } else { \"Wrap with Some\" };\n         Some(Fix::new(name, source_change, tail_expr_range))\n     }\n@@ -122,8 +121,7 @@ impl DiagnosticWithFix for RemoveThisSemicolon {\n             .text_range();\n \n         let edit = TextEdit::delete(semicolon);\n-        let source_change =\n-            SourceFileEdits::from_text_edit(self.file.original_file(sema.db), edit).into();\n+        let source_change = SourceChange::from_text_edit(self.file.original_file(sema.db), edit);\n \n         Some(Fix::new(\"Remove this semicolon\", source_change, semicolon))\n     }\n@@ -204,15 +202,11 @@ fn missing_record_expr_field_fix(\n         new_field = format!(\",{}\", new_field);\n     }\n \n-    let source_change = SourceFileEdits::from_text_edit(\n+    let source_change = SourceChange::from_text_edit(\n         def_file_id,\n         TextEdit::insert(last_field_syntax.text_range().end(), new_field),\n     );\n-    return Some(Fix::new(\n-        \"Create field\",\n-        source_change.into(),\n-        record_expr_field.syntax().text_range(),\n-    ));\n+    return Some(Fix::new(\"Create field\", source_change, record_expr_field.syntax().text_range()));\n \n     fn record_field_list(field_def_list: ast::FieldList) -> Option<ast::RecordFieldList> {\n         match field_def_list {"}, {"sha": "afd552008db1431fb829e635304ba5bd53d42022", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -98,7 +98,7 @@ pub use ide_db::{\n     label::Label,\n     line_index::{LineCol, LineIndex},\n     search::SearchScope,\n-    source_change::{FileSystemEdit, SourceChange, SourceFileEdits},\n+    source_change::{FileSystemEdit, SourceChange},\n     symbol_index::Query,\n     RootDatabase,\n };"}, {"sha": "039efb26fdf22c888a1791bdab170f565e065cc0", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 95, "deletions": 100, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -21,7 +21,7 @@ use text_edit::TextEdit;\n \n use crate::{\n     FilePosition, FileSystemEdit, RangeInfo, ReferenceKind, ReferenceSearchResult, SourceChange,\n-    SourceFileEdits, TextRange, TextSize,\n+    TextRange, TextSize,\n };\n \n type RenameResult<T> = Result<T, RenameError>;\n@@ -249,8 +249,8 @@ fn rename_mod(\n     if IdentifierKind::Ident != check_identifier(new_name)? {\n         bail!(\"Invalid name `{0}`: cannot rename module to {0}\", new_name);\n     }\n-    let mut source_file_edits = SourceFileEdits::default();\n-    let mut file_system_edits = Vec::new();\n+\n+    let mut source_change = SourceChange::default();\n \n     let src = module.definition_source(sema.db);\n     let file_id = src.file_id.original_file(sema.db);\n@@ -264,25 +264,27 @@ fn rename_mod(\n             };\n             let dst = AnchoredPathBuf { anchor: file_id, path };\n             let move_file = FileSystemEdit::MoveFile { src: file_id, dst };\n-            file_system_edits.push(move_file);\n+            source_change.push_file_system_edit(move_file);\n         }\n         ModuleSource::Module(..) => {}\n     }\n \n     if let Some(src) = module.declaration_source(sema.db) {\n         let file_id = src.file_id.original_file(sema.db);\n         let name = src.value.name().unwrap();\n-        source_file_edits\n-            .insert(file_id, TextEdit::replace(name.syntax().text_range(), new_name.into()));\n+        source_change.insert_source_edit(\n+            file_id,\n+            TextEdit::replace(name.syntax().text_range(), new_name.into()),\n+        );\n     }\n \n     let RangeInfo { range, info: refs } = find_all_refs(sema, position)?;\n     let ref_edits = refs.references().iter().map(|(&file_id, references)| {\n         source_edit_from_references(sema, file_id, references, new_name)\n     });\n-    source_file_edits.extend(ref_edits);\n+    source_change.extend(ref_edits);\n \n-    Ok(RangeInfo::new(range, SourceChange::from_edits(source_file_edits, file_system_edits)))\n+    Ok(RangeInfo::new(range, source_change))\n }\n \n fn rename_to_self(\n@@ -331,13 +333,16 @@ fn rename_to_self(\n \n     let RangeInfo { range, info: refs } = find_all_refs(sema, position)?;\n \n-    let mut edits = SourceFileEdits::default();\n-    edits.extend(refs.references().iter().map(|(&file_id, references)| {\n+    let mut source_change = SourceChange::default();\n+    source_change.extend(refs.references().iter().map(|(&file_id, references)| {\n         source_edit_from_references(sema, file_id, references, \"self\")\n     }));\n-    edits.insert(position.file_id, TextEdit::replace(param_range, String::from(self_param)));\n+    source_change.insert_source_edit(\n+        position.file_id,\n+        TextEdit::replace(param_range, String::from(self_param)),\n+    );\n \n-    Ok(RangeInfo::new(range, edits.into()))\n+    Ok(RangeInfo::new(range, source_change))\n }\n \n fn text_edit_from_self_param(\n@@ -391,7 +396,7 @@ fn rename_self_to_param(\n         .ok_or_else(|| format_err!(\"No surrounding method declaration found\"))?;\n     let search_range = fn_def.syntax().text_range();\n \n-    let mut edits = SourceFileEdits::default();\n+    let mut source_change = SourceChange::default();\n \n     for (idx, _) in text.match_indices(\"self\") {\n         let offset: TextSize = idx.try_into().unwrap();\n@@ -405,18 +410,18 @@ fn rename_self_to_param(\n             } else {\n                 TextEdit::replace(usage.text_range(), String::from(new_name))\n             };\n-            edits.insert(position.file_id, edit);\n+            source_change.insert_source_edit(position.file_id, edit);\n         }\n     }\n \n-    if edits.len() > 1 && ident_kind == IdentifierKind::Underscore {\n+    if source_change.source_file_edits.len() > 1 && ident_kind == IdentifierKind::Underscore {\n         bail!(\"Cannot rename reference to `_` as it is being referenced multiple times\");\n     }\n \n     let range = ast::SelfParam::cast(self_token.parent())\n         .map_or(self_token.text_range(), |p| p.syntax().text_range());\n \n-    Ok(RangeInfo::new(range, edits.into()))\n+    Ok(RangeInfo::new(range, source_change))\n }\n \n fn rename_reference(\n@@ -453,12 +458,12 @@ fn rename_reference(\n         (IdentifierKind::Ident, _) | (IdentifierKind::Underscore, _) => mark::hit!(rename_ident),\n     }\n \n-    let mut edits = SourceFileEdits::default();\n-    edits.extend(refs.into_iter().map(|(file_id, references)| {\n+    let mut source_change = SourceChange::default();\n+    source_change.extend(refs.into_iter().map(|(file_id, references)| {\n         source_edit_from_references(sema, file_id, &references, new_name)\n     }));\n \n-    Ok(RangeInfo::new(range, edits.into()))\n+    Ok(RangeInfo::new(range, source_change))\n }\n \n #[cfg(test)]\n@@ -480,7 +485,7 @@ mod tests {\n             Ok(source_change) => {\n                 let mut text_edit_builder = TextEdit::builder();\n                 let mut file_id: Option<FileId> = None;\n-                for edit in source_change.info.source_file_edits.edits {\n+                for edit in source_change.info.source_file_edits {\n                     file_id = Some(edit.0);\n                     for indel in edit.1.into_iter() {\n                         text_edit_builder.replace(indel.delete, indel.insert);\n@@ -882,18 +887,16 @@ mod foo$0;\n                 RangeInfo {\n                     range: 4..7,\n                     info: SourceChange {\n-                        source_file_edits: SourceFileEdits {\n-                            edits: {\n-                                FileId(\n-                                    1,\n-                                ): TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"foo2\",\n-                                            delete: 4..7,\n-                                        },\n-                                    ],\n-                                },\n+                        source_file_edits: {\n+                            FileId(\n+                                1,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"foo2\",\n+                                        delete: 4..7,\n+                                    },\n+                                ],\n                             },\n                         },\n                         file_system_edits: [\n@@ -936,28 +939,26 @@ use crate::foo$0::FooContent;\n                 RangeInfo {\n                     range: 11..14,\n                     info: SourceChange {\n-                        source_file_edits: SourceFileEdits {\n-                            edits: {\n-                                FileId(\n-                                    0,\n-                                ): TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"quux\",\n-                                            delete: 8..11,\n-                                        },\n-                                    ],\n-                                },\n-                                FileId(\n-                                    2,\n-                                ): TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"quux\",\n-                                            delete: 11..14,\n-                                        },\n-                                    ],\n-                                },\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"quux\",\n+                                        delete: 8..11,\n+                                    },\n+                                ],\n+                            },\n+                            FileId(\n+                                2,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"quux\",\n+                                        delete: 11..14,\n+                                    },\n+                                ],\n                             },\n                         },\n                         file_system_edits: [\n@@ -994,18 +995,16 @@ mod fo$0o;\n                 RangeInfo {\n                     range: 4..7,\n                     info: SourceChange {\n-                        source_file_edits: SourceFileEdits {\n-                            edits: {\n-                                FileId(\n-                                    0,\n-                                ): TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"foo2\",\n-                                            delete: 4..7,\n-                                        },\n-                                    ],\n-                                },\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"foo2\",\n+                                        delete: 4..7,\n+                                    },\n+                                ],\n                             },\n                         },\n                         file_system_edits: [\n@@ -1043,18 +1042,16 @@ mod outer { mod fo$0o; }\n                 RangeInfo {\n                     range: 16..19,\n                     info: SourceChange {\n-                        source_file_edits: SourceFileEdits {\n-                            edits: {\n-                                FileId(\n-                                    0,\n-                                ): TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"bar\",\n-                                            delete: 16..19,\n-                                        },\n-                                    ],\n-                                },\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"bar\",\n+                                        delete: 16..19,\n+                                    },\n+                                ],\n                             },\n                         },\n                         file_system_edits: [\n@@ -1115,28 +1112,26 @@ pub mod foo$0;\n                 RangeInfo {\n                     range: 8..11,\n                     info: SourceChange {\n-                        source_file_edits: SourceFileEdits {\n-                            edits: {\n-                                FileId(\n-                                    0,\n-                                ): TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"foo2\",\n-                                            delete: 27..30,\n-                                        },\n-                                    ],\n-                                },\n-                                FileId(\n-                                    1,\n-                                ): TextEdit {\n-                                    indels: [\n-                                        Indel {\n-                                            insert: \"foo2\",\n-                                            delete: 8..11,\n-                                        },\n-                                    ],\n-                                },\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"foo2\",\n+                                        delete: 27..30,\n+                                    },\n+                                ],\n+                            },\n+                            FileId(\n+                                1,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"foo2\",\n+                                        delete: 8..11,\n+                                    },\n+                                ],\n                             },\n                         },\n                         file_system_edits: ["}, {"sha": "e3c3aebac2dc8ff6f2dd5ac1175b672fd42959f5", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -17,7 +17,6 @@ mod on_enter;\n \n use ide_db::{\n     base_db::{FilePosition, SourceDatabase},\n-    source_change::SourceFileEdits,\n     RootDatabase,\n };\n use syntax::{\n@@ -59,7 +58,7 @@ pub(crate) fn on_char_typed(\n     let file = &db.parse(position.file_id).tree();\n     assert_eq!(file.syntax().text().char_at(position.offset), Some(char_typed));\n     let edit = on_char_typed_inner(file, position.offset, char_typed)?;\n-    Some(SourceFileEdits::from_text_edit(position.file_id, edit).into())\n+    Some(SourceChange::from_text_edit(position.file_id, edit))\n }\n \n fn on_char_typed_inner(file: &SourceFile, offset: TextSize, char_typed: char) -> Option<TextEdit> {"}, {"sha": "b1f87731bfdf4389b38d3d6eb27b9f6e5288d83f", "filename": "crates/ide_db/src/source_change.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fide_db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsource_change.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -10,11 +10,12 @@ use std::{\n \n use base_db::{AnchoredPathBuf, FileId};\n use rustc_hash::FxHashMap;\n+use stdx::assert_never;\n use text_edit::TextEdit;\n \n #[derive(Default, Debug, Clone)]\n pub struct SourceChange {\n-    pub source_file_edits: SourceFileEdits,\n+    pub source_file_edits: FxHashMap<FileId, TextEdit>,\n     pub file_system_edits: Vec<FileSystemEdit>,\n     pub is_snippet: bool,\n }\n@@ -23,51 +24,50 @@ impl SourceChange {\n     /// Creates a new SourceChange with the given label\n     /// from the edits.\n     pub fn from_edits(\n-        source_file_edits: SourceFileEdits,\n+        source_file_edits: FxHashMap<FileId, TextEdit>,\n         file_system_edits: Vec<FileSystemEdit>,\n     ) -> Self {\n         SourceChange { source_file_edits, file_system_edits, is_snippet: false }\n     }\n-}\n-\n-#[derive(Default, Debug, Clone)]\n-pub struct SourceFileEdits {\n-    pub edits: FxHashMap<FileId, TextEdit>,\n-}\n \n-impl SourceFileEdits {\n     pub fn from_text_edit(file_id: FileId, edit: TextEdit) -> Self {\n-        SourceFileEdits { edits: FxHashMap::from_iter(iter::once((file_id, edit))) }\n-    }\n-\n-    pub fn len(&self) -> usize {\n-        self.edits.len()\n-    }\n-\n-    pub fn is_empty(&self) -> bool {\n-        self.edits.is_empty()\n+        SourceChange {\n+            source_file_edits: FxHashMap::from_iter(iter::once((file_id, edit))),\n+            ..Default::default()\n+        }\n     }\n \n-    pub fn insert(&mut self, file_id: FileId, edit: TextEdit) {\n-        match self.edits.entry(file_id) {\n+    pub fn insert_source_edit(&mut self, file_id: FileId, edit: TextEdit) {\n+        match self.source_file_edits.entry(file_id) {\n             Entry::Occupied(mut entry) => {\n-                entry.get_mut().union(edit).expect(\"overlapping edits for same file\");\n+                assert_never!(\n+                    entry.get_mut().union(edit).is_err(),\n+                    \"overlapping edits for same file\"\n+                );\n             }\n             Entry::Vacant(entry) => {\n                 entry.insert(edit);\n             }\n         }\n     }\n+\n+    pub fn push_file_system_edit(&mut self, edit: FileSystemEdit) {\n+        self.file_system_edits.push(edit);\n+    }\n+\n+    pub fn get_source_edit(&self, file_id: FileId) -> Option<&TextEdit> {\n+        self.source_file_edits.get(&file_id)\n+    }\n }\n \n-impl Extend<(FileId, TextEdit)> for SourceFileEdits {\n+impl Extend<(FileId, TextEdit)> for SourceChange {\n     fn extend<T: IntoIterator<Item = (FileId, TextEdit)>>(&mut self, iter: T) {\n-        iter.into_iter().for_each(|(file_id, edit)| self.insert(file_id, edit));\n+        iter.into_iter().for_each(|(file_id, edit)| self.insert_source_edit(file_id, edit));\n     }\n }\n \n-impl From<SourceFileEdits> for SourceChange {\n-    fn from(source_file_edits: SourceFileEdits) -> SourceChange {\n+impl From<FxHashMap<FileId, TextEdit>> for SourceChange {\n+    fn from(source_file_edits: FxHashMap<FileId, TextEdit>) -> SourceChange {\n         SourceChange { source_file_edits, file_system_edits: Vec::new(), is_snippet: false }\n     }\n }"}, {"sha": "bbb550ec9a5c60730165703b5dcc3b607dab4e1c", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -12,7 +12,7 @@ pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n         match_finder.add_rule(rule)?;\n     }\n     let edits = match_finder.edits();\n-    for (file_id, edit) in edits.edits {\n+    for (file_id, edit) in edits {\n         if let Some(path) = vfs.file_path(file_id).as_path() {\n             let mut contents = db.file_text(file_id).to_string();\n             edit.apply(&mut contents);"}, {"sha": "1a4e0dd3283d8cc6612ee1449b4ae9a4bbd10a2f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -266,7 +266,7 @@ pub(crate) fn handle_on_type_formatting(\n     };\n \n     // This should be a single-file edit\n-    let (_, edit) = edit.source_file_edits.edits.into_iter().next().unwrap();\n+    let (_, edit) = edit.source_file_edits.into_iter().next().unwrap();\n \n     let change = to_proto::text_edit_vec(&line_index, line_endings, edit);\n     Ok(Some(change))\n@@ -464,12 +464,10 @@ pub(crate) fn handle_will_rename_files(\n \n     // Drop file system edits since we're just renaming things on the same level\n     let mut source_changes = source_changes.into_iter();\n-    let mut source_file_edits =\n-        source_changes.next().map_or_else(Default::default, |it| it.source_file_edits);\n+    let mut source_change = source_changes.next().unwrap_or_default();\n+    source_change.file_system_edits.clear();\n     // no collect here because we want to merge text edits on same file ids\n-    source_file_edits.extend(source_changes.map(|it| it.source_file_edits.edits).flatten());\n-    let source_change = SourceChange::from_edits(source_file_edits, Vec::new());\n-\n+    source_change.extend(source_changes.map(|it| it.source_file_edits).flatten());\n     let workspace_edit = to_proto::workspace_edit(&snap, source_change)?;\n     Ok(Some(workspace_edit))\n }"}, {"sha": "dc67d19a7547ecfd9a05adf33000ca5913f9c1d0", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -698,7 +698,7 @@ pub(crate) fn snippet_workspace_edit(\n         let ops = snippet_text_document_ops(snap, op);\n         document_changes.extend_from_slice(&ops);\n     }\n-    for (file_id, edit) in source_change.source_file_edits.edits {\n+    for (file_id, edit) in source_change.source_file_edits {\n         let edit = snippet_text_document_edit(&snap, source_change.is_snippet, file_id, edit)?;\n         document_changes.push(lsp_ext::SnippetDocumentChangeOperation::Edit(edit));\n     }"}, {"sha": "a97fc8bcacab263454fc23bfa74ce5bbc6c88c09", "filename": "crates/ssr/src/lib.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Flib.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -74,13 +74,11 @@ pub use crate::errors::SsrError;\n pub use crate::matching::Match;\n use crate::matching::MatchFailureReason;\n use hir::Semantics;\n-use ide_db::{\n-    base_db::{FileId, FilePosition, FileRange},\n-    source_change::SourceFileEdits,\n-};\n+use ide_db::base_db::{FileId, FilePosition, FileRange};\n use resolving::ResolvedRule;\n use rustc_hash::FxHashMap;\n use syntax::{ast, AstNode, SyntaxNode, TextRange};\n+use text_edit::TextEdit;\n \n // A structured search replace rule. Create by calling `parse` on a str.\n #[derive(Debug)]\n@@ -161,7 +159,7 @@ impl<'db> MatchFinder<'db> {\n     }\n \n     /// Finds matches for all added rules and returns edits for all found matches.\n-    pub fn edits(&self) -> SourceFileEdits {\n+    pub fn edits(&self) -> FxHashMap<FileId, TextEdit> {\n         use ide_db::base_db::SourceDatabaseExt;\n         let mut matches_by_file = FxHashMap::default();\n         for m in self.matches().matches {\n@@ -171,21 +169,19 @@ impl<'db> MatchFinder<'db> {\n                 .matches\n                 .push(m);\n         }\n-        SourceFileEdits {\n-            edits: matches_by_file\n-                .into_iter()\n-                .map(|(file_id, matches)| {\n-                    (\n-                        file_id,\n-                        replacing::matches_to_edit(\n-                            &matches,\n-                            &self.sema.db.file_text(file_id),\n-                            &self.rules,\n-                        ),\n-                    )\n-                })\n-                .collect(),\n-        }\n+        matches_by_file\n+            .into_iter()\n+            .map(|(file_id, matches)| {\n+                (\n+                    file_id,\n+                    replacing::matches_to_edit(\n+                        &matches,\n+                        &self.sema.db.file_text(file_id),\n+                        &self.rules,\n+                    ),\n+                )\n+            })\n+            .collect()\n     }\n \n     /// Adds a search pattern. For use if you intend to only call `find_matches_in_file`. If you"}, {"sha": "42d313f918314984bda0c7fd2ea32ee5ac0f5057", "filename": "crates/ssr/src/matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fmatching.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -810,7 +810,7 @@ mod tests {\n \n         let edits = match_finder.edits();\n         assert_eq!(edits.len(), 1);\n-        let edit = &edits.edits[&position.file_id];\n+        let edit = &edits[&position.file_id];\n         let mut after = input.to_string();\n         edit.apply(&mut after);\n         assert_eq!(after, \"fn foo() {} fn bar() {} fn main() { bar(1+2); }\");"}, {"sha": "a3ea44f23530521739926d782ca0cd88dc463064", "filename": "crates/ssr/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5095329a1c12e93653d8de4a93f0b4f5cad4c6e/crates%2Fssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Ftests.rs?ref=d5095329a1c12e93653d8de4a93f0b4f5cad4c6e", "patch": "@@ -106,7 +106,7 @@ fn assert_ssr_transforms(rules: &[&str], input: &str, expected: Expect) {\n     // Note, db.file_text is not necessarily the same as `input`, since fixture parsing alters\n     // stuff.\n     let mut actual = db.file_text(position.file_id).to_string();\n-    edits.edits[&position.file_id].apply(&mut actual);\n+    edits[&position.file_id].apply(&mut actual);\n     expected.assert_eq(&actual);\n }\n "}]}