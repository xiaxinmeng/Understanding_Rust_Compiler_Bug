{"sha": "2dd5776b1110a24d9ceb1d1f89dd684d0e63fbf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZDU3NzZiMTExMGEyNGQ5Y2ViMWQxZjg5ZGQ2ODRkMGU2M2ZiZjc=", "commit": {"author": {"name": "Daniel J Rollins", "email": "daniel@djrollins.io", "date": "2016-03-05T00:26:45Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-19T16:36:41Z"}, "message": "Add note if method is called on a function object\n\nFixes issue #29124.\n\nIf method is called on a function type a note is generated to suggest\nthat the developer may have forgotten to call it.\n\ne.g.\n\nfn main() {\n    let mut guess = String::new();\n    std::io::stdin.read_line(&mut guess);\n}\n\nwill generate the note:\n\nnote: called method on function type. did you mean `std::io::stdin().read_line(..)`?", "tree": {"sha": "d7c45eef245bed161a49111952f38734dda298d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7c45eef245bed161a49111952f38734dda298d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dd5776b1110a24d9ceb1d1f89dd684d0e63fbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd5776b1110a24d9ceb1d1f89dd684d0e63fbf7", "html_url": "https://github.com/rust-lang/rust/commit/2dd5776b1110a24d9ceb1d1f89dd684d0e63fbf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dd5776b1110a24d9ceb1d1f89dd684d0e63fbf7/comments", "author": null, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c66a89849b2d0025121a0898c4ab298da8814bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c66a89849b2d0025121a0898c4ab298da8814bf", "html_url": "https://github.com/rust-lang/rust/commit/7c66a89849b2d0025121a0898c4ab298da8814bf"}], "stats": {"total": 112, "additions": 59, "deletions": 53}, "files": [{"sha": "fa55da8b6cadc604f2895bda8074bc4f5aac5ae8", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 59, "deletions": 53, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/2dd5776b1110a24d9ceb1d1f89dd684d0e63fbf7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd5776b1110a24d9ceb1d1f89dd684d0e63fbf7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=2dd5776b1110a24d9ceb1d1f89dd684d0e63fbf7", "patch": "@@ -37,6 +37,42 @@ use std::cmp::Ordering;\n use super::{MethodError, NoMatchData, CandidateSource, impl_item, trait_item};\n use super::probe::Mode;\n \n+fn is_fn_ty<'a, 'tcx>(ty: &Ty<'tcx>, fcx: &FnCtxt<'a, 'tcx>, span: Span) -> bool {\n+    let cx = fcx.tcx();\n+    println!(\"{:?}\", ty);\n+    match ty.sty {\n+        // Not all of these (e.g. unsafe fns) implement FnOnce\n+        // so we look for these beforehand\n+        ty::TyClosure(..) | ty::TyFnDef(..) | ty::TyFnPtr(_) => true,\n+        // If it's not a simple function, look for things which implement FnOnce\n+        _ => {\n+            if let Ok(fn_once_trait_did) =\n+                    cx.lang_items.require(FnOnceTraitLangItem) {\n+                let infcx = fcx.infcx();\n+                infcx.probe(|_| {\n+                    let fn_once_substs =\n+                        Substs::new_trait(vec![infcx.next_ty_var()],\n+                                          Vec::new(),\n+                                          ty);\n+                    let trait_ref =\n+                      ty::TraitRef::new(fn_once_trait_did,\n+                                        cx.mk_substs(fn_once_substs));\n+                    let poly_trait_ref = trait_ref.to_poly_trait_ref();\n+                    let obligation = Obligation::misc(span,\n+                                                      fcx.body_id,\n+                                                      poly_trait_ref\n+                                                         .to_predicate());\n+                    let mut selcx = SelectionContext::new(infcx);\n+\n+                    return selcx.evaluate_obligation(&obligation)\n+                })\n+            } else {\n+                false\n+            }\n+        }\n+    }\n+}\n+\n pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                               span: Span,\n                               rcvr_ty: Ty<'tcx>,\n@@ -79,65 +115,35 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                         // snippet\n                     };\n \n-                    macro_rules! span_stored_function {\n-                        () => {\n-                            err.span_note(span,\n-                                          &format!(\"use `({0}.{1})(...)` if you meant to call \\\n-                                                    the function stored in the `{1}` field\",\n-                                                   expr_string, item_name));\n-                        }\n-                    }\n-\n-                    macro_rules! span_did_you_mean {\n-                        () => {\n-                            err.span_note(span, &format!(\"did you mean to write `{0}.{1}`?\",\n-                                                         expr_string, item_name));\n-                        }\n-                    }\n-\n-                    // Determine if the field can be used as a function in some way\n                     let field_ty = field.ty(cx, substs);\n \n-                    match field_ty.sty {\n-                        // Not all of these (e.g. unsafe fns) implement FnOnce\n-                        // so we look for these beforehand\n-                        ty::TyClosure(..) | ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n-                            span_stored_function!();\n-                        }\n-                        // If it's not a simple function, look for things which implement FnOnce\n-                        _ => {\n-                            if let Ok(fn_once_trait_did) =\n-                                    cx.lang_items.require(FnOnceTraitLangItem) {\n-                                let infcx = fcx.infcx();\n-                                infcx.probe(|_| {\n-                                    let fn_once_substs =\n-                                        Substs::new_trait(vec![infcx.next_ty_var()],\n-                                                          Vec::new(),\n-                                                          field_ty);\n-                                    let trait_ref =\n-                                      ty::TraitRef::new(fn_once_trait_did,\n-                                                        cx.mk_substs(fn_once_substs));\n-                                    let poly_trait_ref = trait_ref.to_poly_trait_ref();\n-                                    let obligation = Obligation::misc(span,\n-                                                                      fcx.body_id,\n-                                                                      poly_trait_ref\n-                                                                         .to_predicate());\n-                                    let mut selcx = SelectionContext::new(infcx);\n-\n-                                    if selcx.evaluate_obligation(&obligation) {\n-                                        span_stored_function!();\n-                                    } else {\n-                                        span_did_you_mean!();\n-                                    }\n-                                });\n-                            } else {\n-                                span_did_you_mean!();\n-                            }\n-                        }\n+                    if is_fn_ty(&field_ty, &fcx, span) {\n+                        err.span_note(span,\n+                                      &format!(\"use `({0}.{1})(...)` if you meant to call \\\n+                                               the function stored in the `{1}` field\",\n+                                               expr_string, item_name));\n+                    } else {\n+                        err.span_note(span, &format!(\"did you mean to write `{0}.{1}`?\",\n+                                                     expr_string, item_name));\n                     }\n                 }\n             }\n \n+            if is_fn_ty(&rcvr_ty, &fcx, span) {\n+                let expr_string = match rcvr_expr {\n+                    Some(expr) => match cx.sess.codemap().span_to_snippet(expr.span) {\n+                        Ok(expr_string) => expr_string,\n+                        _ => \"s\".into()\n+                    },\n+                    _ => \"s\".into()\n+                };\n+                err.fileline_note(\n+                    span,\n+                    &format!(\"method invoked on function type. did you \\\n+                             mean `{}().{}(...)`?\",\n+                             expr_string, item_name));\n+            }\n+\n             if !static_sources.is_empty() {\n                 err.fileline_note(\n                     span,"}]}